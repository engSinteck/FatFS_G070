
FatFS_G070.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123d8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000034f8  08012490  08012490  00022490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015988  08015988  00025988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015990  08015990  00025990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015994  08015994  00025994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000006c8  20000000  08015998  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004e60  200006c8  08016060  000306c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20005528  08016060  00035528  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000306c8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000666c3  00000000  00000000  000306f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b8ad  00000000  00000000  00096db3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0002a119  00000000  00000000  000a2660  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002578  00000000  00000000  000cc780  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000042f8  00000000  00000000  000cecf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00018cff  00000000  00000000  000d2ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000cc2a  00000000  00000000  000ebcef  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000f8919  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007940  00000000  00000000  000f8998  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200006c8 	.word	0x200006c8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08012478 	.word	0x08012478

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200006cc 	.word	0x200006cc
 80000fc:	08012478 	.word	0x08012478

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_uqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5c09      	ldrb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			; (mov r8, r8)

08000138 <__gnu_thumb1_case_shi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5e09      	ldrsh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__gnu_thumb1_case_uhi>:
 800014c:	b403      	push	{r0, r1}
 800014e:	4671      	mov	r1, lr
 8000150:	0849      	lsrs	r1, r1, #1
 8000152:	0040      	lsls	r0, r0, #1
 8000154:	0049      	lsls	r1, r1, #1
 8000156:	5a09      	ldrh	r1, [r1, r0]
 8000158:	0049      	lsls	r1, r1, #1
 800015a:	448e      	add	lr, r1
 800015c:	bc03      	pop	{r0, r1}
 800015e:	4770      	bx	lr

08000160 <__udivsi3>:
 8000160:	2200      	movs	r2, #0
 8000162:	0843      	lsrs	r3, r0, #1
 8000164:	428b      	cmp	r3, r1
 8000166:	d374      	bcc.n	8000252 <__udivsi3+0xf2>
 8000168:	0903      	lsrs	r3, r0, #4
 800016a:	428b      	cmp	r3, r1
 800016c:	d35f      	bcc.n	800022e <__udivsi3+0xce>
 800016e:	0a03      	lsrs	r3, r0, #8
 8000170:	428b      	cmp	r3, r1
 8000172:	d344      	bcc.n	80001fe <__udivsi3+0x9e>
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d328      	bcc.n	80001cc <__udivsi3+0x6c>
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d30d      	bcc.n	800019c <__udivsi3+0x3c>
 8000180:	22ff      	movs	r2, #255	; 0xff
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	ba12      	rev	r2, r2
 8000186:	0c03      	lsrs	r3, r0, #16
 8000188:	428b      	cmp	r3, r1
 800018a:	d302      	bcc.n	8000192 <__udivsi3+0x32>
 800018c:	1212      	asrs	r2, r2, #8
 800018e:	0209      	lsls	r1, r1, #8
 8000190:	d065      	beq.n	800025e <__udivsi3+0xfe>
 8000192:	0b03      	lsrs	r3, r0, #12
 8000194:	428b      	cmp	r3, r1
 8000196:	d319      	bcc.n	80001cc <__udivsi3+0x6c>
 8000198:	e000      	b.n	800019c <__udivsi3+0x3c>
 800019a:	0a09      	lsrs	r1, r1, #8
 800019c:	0bc3      	lsrs	r3, r0, #15
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x46>
 80001a2:	03cb      	lsls	r3, r1, #15
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b83      	lsrs	r3, r0, #14
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x52>
 80001ae:	038b      	lsls	r3, r1, #14
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b43      	lsrs	r3, r0, #13
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x5e>
 80001ba:	034b      	lsls	r3, r1, #13
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0b03      	lsrs	r3, r0, #12
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x6a>
 80001c6:	030b      	lsls	r3, r1, #12
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0ac3      	lsrs	r3, r0, #11
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x76>
 80001d2:	02cb      	lsls	r3, r1, #11
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a83      	lsrs	r3, r0, #10
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x82>
 80001de:	028b      	lsls	r3, r1, #10
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a43      	lsrs	r3, r0, #9
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x8e>
 80001ea:	024b      	lsls	r3, r1, #9
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	0a03      	lsrs	r3, r0, #8
 80001f2:	428b      	cmp	r3, r1
 80001f4:	d301      	bcc.n	80001fa <__udivsi3+0x9a>
 80001f6:	020b      	lsls	r3, r1, #8
 80001f8:	1ac0      	subs	r0, r0, r3
 80001fa:	4152      	adcs	r2, r2
 80001fc:	d2cd      	bcs.n	800019a <__udivsi3+0x3a>
 80001fe:	09c3      	lsrs	r3, r0, #7
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xa8>
 8000204:	01cb      	lsls	r3, r1, #7
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0983      	lsrs	r3, r0, #6
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xb4>
 8000210:	018b      	lsls	r3, r1, #6
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0943      	lsrs	r3, r0, #5
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xc0>
 800021c:	014b      	lsls	r3, r1, #5
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xcc>
 8000228:	010b      	lsls	r3, r1, #4
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	08c3      	lsrs	r3, r0, #3
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xd8>
 8000234:	00cb      	lsls	r3, r1, #3
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0883      	lsrs	r3, r0, #2
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xe4>
 8000240:	008b      	lsls	r3, r1, #2
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	0843      	lsrs	r3, r0, #1
 8000248:	428b      	cmp	r3, r1
 800024a:	d301      	bcc.n	8000250 <__udivsi3+0xf0>
 800024c:	004b      	lsls	r3, r1, #1
 800024e:	1ac0      	subs	r0, r0, r3
 8000250:	4152      	adcs	r2, r2
 8000252:	1a41      	subs	r1, r0, r1
 8000254:	d200      	bcs.n	8000258 <__udivsi3+0xf8>
 8000256:	4601      	mov	r1, r0
 8000258:	4152      	adcs	r2, r2
 800025a:	4610      	mov	r0, r2
 800025c:	4770      	bx	lr
 800025e:	e7ff      	b.n	8000260 <__udivsi3+0x100>
 8000260:	b501      	push	{r0, lr}
 8000262:	2000      	movs	r0, #0
 8000264:	f000 f8f0 	bl	8000448 <__aeabi_idiv0>
 8000268:	bd02      	pop	{r1, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_uidivmod>:
 800026c:	2900      	cmp	r1, #0
 800026e:	d0f7      	beq.n	8000260 <__udivsi3+0x100>
 8000270:	e776      	b.n	8000160 <__udivsi3>
 8000272:	4770      	bx	lr

08000274 <__divsi3>:
 8000274:	4603      	mov	r3, r0
 8000276:	430b      	orrs	r3, r1
 8000278:	d47f      	bmi.n	800037a <__divsi3+0x106>
 800027a:	2200      	movs	r2, #0
 800027c:	0843      	lsrs	r3, r0, #1
 800027e:	428b      	cmp	r3, r1
 8000280:	d374      	bcc.n	800036c <__divsi3+0xf8>
 8000282:	0903      	lsrs	r3, r0, #4
 8000284:	428b      	cmp	r3, r1
 8000286:	d35f      	bcc.n	8000348 <__divsi3+0xd4>
 8000288:	0a03      	lsrs	r3, r0, #8
 800028a:	428b      	cmp	r3, r1
 800028c:	d344      	bcc.n	8000318 <__divsi3+0xa4>
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d328      	bcc.n	80002e6 <__divsi3+0x72>
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d30d      	bcc.n	80002b6 <__divsi3+0x42>
 800029a:	22ff      	movs	r2, #255	; 0xff
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	ba12      	rev	r2, r2
 80002a0:	0c03      	lsrs	r3, r0, #16
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d302      	bcc.n	80002ac <__divsi3+0x38>
 80002a6:	1212      	asrs	r2, r2, #8
 80002a8:	0209      	lsls	r1, r1, #8
 80002aa:	d065      	beq.n	8000378 <__divsi3+0x104>
 80002ac:	0b03      	lsrs	r3, r0, #12
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d319      	bcc.n	80002e6 <__divsi3+0x72>
 80002b2:	e000      	b.n	80002b6 <__divsi3+0x42>
 80002b4:	0a09      	lsrs	r1, r1, #8
 80002b6:	0bc3      	lsrs	r3, r0, #15
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x4c>
 80002bc:	03cb      	lsls	r3, r1, #15
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b83      	lsrs	r3, r0, #14
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x58>
 80002c8:	038b      	lsls	r3, r1, #14
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b43      	lsrs	r3, r0, #13
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x64>
 80002d4:	034b      	lsls	r3, r1, #13
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0b03      	lsrs	r3, r0, #12
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x70>
 80002e0:	030b      	lsls	r3, r1, #12
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0ac3      	lsrs	r3, r0, #11
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x7c>
 80002ec:	02cb      	lsls	r3, r1, #11
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a83      	lsrs	r3, r0, #10
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x88>
 80002f8:	028b      	lsls	r3, r1, #10
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a43      	lsrs	r3, r0, #9
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0x94>
 8000304:	024b      	lsls	r3, r1, #9
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	0a03      	lsrs	r3, r0, #8
 800030c:	428b      	cmp	r3, r1
 800030e:	d301      	bcc.n	8000314 <__divsi3+0xa0>
 8000310:	020b      	lsls	r3, r1, #8
 8000312:	1ac0      	subs	r0, r0, r3
 8000314:	4152      	adcs	r2, r2
 8000316:	d2cd      	bcs.n	80002b4 <__divsi3+0x40>
 8000318:	09c3      	lsrs	r3, r0, #7
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xae>
 800031e:	01cb      	lsls	r3, r1, #7
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0983      	lsrs	r3, r0, #6
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xba>
 800032a:	018b      	lsls	r3, r1, #6
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0943      	lsrs	r3, r0, #5
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xc6>
 8000336:	014b      	lsls	r3, r1, #5
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0903      	lsrs	r3, r0, #4
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xd2>
 8000342:	010b      	lsls	r3, r1, #4
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	08c3      	lsrs	r3, r0, #3
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xde>
 800034e:	00cb      	lsls	r3, r1, #3
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0883      	lsrs	r3, r0, #2
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xea>
 800035a:	008b      	lsls	r3, r1, #2
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	0843      	lsrs	r3, r0, #1
 8000362:	428b      	cmp	r3, r1
 8000364:	d301      	bcc.n	800036a <__divsi3+0xf6>
 8000366:	004b      	lsls	r3, r1, #1
 8000368:	1ac0      	subs	r0, r0, r3
 800036a:	4152      	adcs	r2, r2
 800036c:	1a41      	subs	r1, r0, r1
 800036e:	d200      	bcs.n	8000372 <__divsi3+0xfe>
 8000370:	4601      	mov	r1, r0
 8000372:	4152      	adcs	r2, r2
 8000374:	4610      	mov	r0, r2
 8000376:	4770      	bx	lr
 8000378:	e05d      	b.n	8000436 <__divsi3+0x1c2>
 800037a:	0fca      	lsrs	r2, r1, #31
 800037c:	d000      	beq.n	8000380 <__divsi3+0x10c>
 800037e:	4249      	negs	r1, r1
 8000380:	1003      	asrs	r3, r0, #32
 8000382:	d300      	bcc.n	8000386 <__divsi3+0x112>
 8000384:	4240      	negs	r0, r0
 8000386:	4053      	eors	r3, r2
 8000388:	2200      	movs	r2, #0
 800038a:	469c      	mov	ip, r3
 800038c:	0903      	lsrs	r3, r0, #4
 800038e:	428b      	cmp	r3, r1
 8000390:	d32d      	bcc.n	80003ee <__divsi3+0x17a>
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d312      	bcc.n	80003be <__divsi3+0x14a>
 8000398:	22fc      	movs	r2, #252	; 0xfc
 800039a:	0189      	lsls	r1, r1, #6
 800039c:	ba12      	rev	r2, r2
 800039e:	0a03      	lsrs	r3, r0, #8
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d30c      	bcc.n	80003be <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	1192      	asrs	r2, r2, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d308      	bcc.n	80003be <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	1192      	asrs	r2, r2, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d304      	bcc.n	80003be <__divsi3+0x14a>
 80003b4:	0189      	lsls	r1, r1, #6
 80003b6:	d03a      	beq.n	800042e <__divsi3+0x1ba>
 80003b8:	1192      	asrs	r2, r2, #6
 80003ba:	e000      	b.n	80003be <__divsi3+0x14a>
 80003bc:	0989      	lsrs	r1, r1, #6
 80003be:	09c3      	lsrs	r3, r0, #7
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x154>
 80003c4:	01cb      	lsls	r3, r1, #7
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0983      	lsrs	r3, r0, #6
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x160>
 80003d0:	018b      	lsls	r3, r1, #6
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0943      	lsrs	r3, r0, #5
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x16c>
 80003dc:	014b      	lsls	r3, r1, #5
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	0903      	lsrs	r3, r0, #4
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x178>
 80003e8:	010b      	lsls	r3, r1, #4
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	08c3      	lsrs	r3, r0, #3
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x184>
 80003f4:	00cb      	lsls	r3, r1, #3
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	0883      	lsrs	r3, r0, #2
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x190>
 8000400:	008b      	lsls	r3, r1, #2
 8000402:	1ac0      	subs	r0, r0, r3
 8000404:	4152      	adcs	r2, r2
 8000406:	d2d9      	bcs.n	80003bc <__divsi3+0x148>
 8000408:	0843      	lsrs	r3, r0, #1
 800040a:	428b      	cmp	r3, r1
 800040c:	d301      	bcc.n	8000412 <__divsi3+0x19e>
 800040e:	004b      	lsls	r3, r1, #1
 8000410:	1ac0      	subs	r0, r0, r3
 8000412:	4152      	adcs	r2, r2
 8000414:	1a41      	subs	r1, r0, r1
 8000416:	d200      	bcs.n	800041a <__divsi3+0x1a6>
 8000418:	4601      	mov	r1, r0
 800041a:	4663      	mov	r3, ip
 800041c:	4152      	adcs	r2, r2
 800041e:	105b      	asrs	r3, r3, #1
 8000420:	4610      	mov	r0, r2
 8000422:	d301      	bcc.n	8000428 <__divsi3+0x1b4>
 8000424:	4240      	negs	r0, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d500      	bpl.n	800042c <__divsi3+0x1b8>
 800042a:	4249      	negs	r1, r1
 800042c:	4770      	bx	lr
 800042e:	4663      	mov	r3, ip
 8000430:	105b      	asrs	r3, r3, #1
 8000432:	d300      	bcc.n	8000436 <__divsi3+0x1c2>
 8000434:	4240      	negs	r0, r0
 8000436:	b501      	push	{r0, lr}
 8000438:	2000      	movs	r0, #0
 800043a:	f000 f805 	bl	8000448 <__aeabi_idiv0>
 800043e:	bd02      	pop	{r1, pc}

08000440 <__aeabi_idivmod>:
 8000440:	2900      	cmp	r1, #0
 8000442:	d0f8      	beq.n	8000436 <__divsi3+0x1c2>
 8000444:	e716      	b.n	8000274 <__divsi3>
 8000446:	4770      	bx	lr

08000448 <__aeabi_idiv0>:
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdrcmple>:
 800044c:	4684      	mov	ip, r0
 800044e:	1c10      	adds	r0, r2, #0
 8000450:	4662      	mov	r2, ip
 8000452:	468c      	mov	ip, r1
 8000454:	1c19      	adds	r1, r3, #0
 8000456:	4663      	mov	r3, ip
 8000458:	e000      	b.n	800045c <__aeabi_cdcmpeq>
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_cdcmpeq>:
 800045c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800045e:	f001 f813 	bl	8001488 <__ledf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	d401      	bmi.n	800046a <__aeabi_cdcmpeq+0xe>
 8000466:	2100      	movs	r1, #0
 8000468:	42c8      	cmn	r0, r1
 800046a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800046c <__aeabi_dcmpeq>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff6d 	bl	800134c <__eqdf2>
 8000472:	4240      	negs	r0, r0
 8000474:	3001      	adds	r0, #1
 8000476:	bd10      	pop	{r4, pc}

08000478 <__aeabi_dcmplt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 f805 	bl	8001488 <__ledf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	db01      	blt.n	8000486 <__aeabi_dcmplt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmple>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f000 fffb 	bl	8001488 <__ledf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	dd01      	ble.n	800049a <__aeabi_dcmple+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_dcmpgt>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f000 ff8d 	bl	80013c0 <__gedf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	dc01      	bgt.n	80004ae <__aeabi_dcmpgt+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_dcmpge>:
 80004b4:	b510      	push	{r4, lr}
 80004b6:	f000 ff83 	bl	80013c0 <__gedf2>
 80004ba:	2800      	cmp	r0, #0
 80004bc:	da01      	bge.n	80004c2 <__aeabi_dcmpge+0xe>
 80004be:	2000      	movs	r0, #0
 80004c0:	bd10      	pop	{r4, pc}
 80004c2:	2001      	movs	r0, #1
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_uldivmod>:
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d111      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	d10f      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d100      	bne.n	80004d6 <__aeabi_uldivmod+0xe>
 80004d4:	2800      	cmp	r0, #0
 80004d6:	d002      	beq.n	80004de <__aeabi_uldivmod+0x16>
 80004d8:	2100      	movs	r1, #0
 80004da:	43c9      	mvns	r1, r1
 80004dc:	1c08      	adds	r0, r1, #0
 80004de:	b407      	push	{r0, r1, r2}
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <__aeabi_uldivmod+0x24>)
 80004e2:	a102      	add	r1, pc, #8	; (adr r1, 80004ec <__aeabi_uldivmod+0x24>)
 80004e4:	1840      	adds	r0, r0, r1
 80004e6:	9002      	str	r0, [sp, #8]
 80004e8:	bd03      	pop	{r0, r1, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	ffffff5d 	.word	0xffffff5d
 80004f0:	b403      	push	{r0, r1}
 80004f2:	4668      	mov	r0, sp
 80004f4:	b501      	push	{r0, lr}
 80004f6:	9802      	ldr	r0, [sp, #8]
 80004f8:	f000 f824 	bl	8000544 <__udivmoddi4>
 80004fc:	9b01      	ldr	r3, [sp, #4]
 80004fe:	469e      	mov	lr, r3
 8000500:	b002      	add	sp, #8
 8000502:	bc0c      	pop	{r2, r3}
 8000504:	4770      	bx	lr
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_d2uiz>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	2200      	movs	r2, #0
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <__aeabi_d2uiz+0x38>)
 800050e:	0004      	movs	r4, r0
 8000510:	000d      	movs	r5, r1
 8000512:	f7ff ffcf 	bl	80004b4 <__aeabi_dcmpge>
 8000516:	2800      	cmp	r0, #0
 8000518:	d104      	bne.n	8000524 <__aeabi_d2uiz+0x1c>
 800051a:	0020      	movs	r0, r4
 800051c:	0029      	movs	r1, r5
 800051e:	f001 fdcb 	bl	80020b8 <__aeabi_d2iz>
 8000522:	bd70      	pop	{r4, r5, r6, pc}
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <__aeabi_d2uiz+0x38>)
 8000526:	2200      	movs	r2, #0
 8000528:	0020      	movs	r0, r4
 800052a:	0029      	movs	r1, r5
 800052c:	f001 fa8e 	bl	8001a4c <__aeabi_dsub>
 8000530:	f001 fdc2 	bl	80020b8 <__aeabi_d2iz>
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	061b      	lsls	r3, r3, #24
 8000538:	469c      	mov	ip, r3
 800053a:	4460      	add	r0, ip
 800053c:	e7f1      	b.n	8000522 <__aeabi_d2uiz+0x1a>
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	41e00000 	.word	0x41e00000

08000544 <__udivmoddi4>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4657      	mov	r7, sl
 8000548:	464e      	mov	r6, r9
 800054a:	4645      	mov	r5, r8
 800054c:	46de      	mov	lr, fp
 800054e:	b5e0      	push	{r5, r6, r7, lr}
 8000550:	0004      	movs	r4, r0
 8000552:	b083      	sub	sp, #12
 8000554:	000d      	movs	r5, r1
 8000556:	4692      	mov	sl, r2
 8000558:	4699      	mov	r9, r3
 800055a:	428b      	cmp	r3, r1
 800055c:	d82f      	bhi.n	80005be <__udivmoddi4+0x7a>
 800055e:	d02c      	beq.n	80005ba <__udivmoddi4+0x76>
 8000560:	4649      	mov	r1, r9
 8000562:	4650      	mov	r0, sl
 8000564:	f001 fe74 	bl	8002250 <__clzdi2>
 8000568:	0029      	movs	r1, r5
 800056a:	0006      	movs	r6, r0
 800056c:	0020      	movs	r0, r4
 800056e:	f001 fe6f 	bl	8002250 <__clzdi2>
 8000572:	1a33      	subs	r3, r6, r0
 8000574:	4698      	mov	r8, r3
 8000576:	3b20      	subs	r3, #32
 8000578:	469b      	mov	fp, r3
 800057a:	d500      	bpl.n	800057e <__udivmoddi4+0x3a>
 800057c:	e074      	b.n	8000668 <__udivmoddi4+0x124>
 800057e:	4653      	mov	r3, sl
 8000580:	465a      	mov	r2, fp
 8000582:	4093      	lsls	r3, r2
 8000584:	001f      	movs	r7, r3
 8000586:	4653      	mov	r3, sl
 8000588:	4642      	mov	r2, r8
 800058a:	4093      	lsls	r3, r2
 800058c:	001e      	movs	r6, r3
 800058e:	42af      	cmp	r7, r5
 8000590:	d829      	bhi.n	80005e6 <__udivmoddi4+0xa2>
 8000592:	d026      	beq.n	80005e2 <__udivmoddi4+0x9e>
 8000594:	465b      	mov	r3, fp
 8000596:	1ba4      	subs	r4, r4, r6
 8000598:	41bd      	sbcs	r5, r7
 800059a:	2b00      	cmp	r3, #0
 800059c:	da00      	bge.n	80005a0 <__udivmoddi4+0x5c>
 800059e:	e079      	b.n	8000694 <__udivmoddi4+0x150>
 80005a0:	2200      	movs	r2, #0
 80005a2:	2300      	movs	r3, #0
 80005a4:	9200      	str	r2, [sp, #0]
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	2301      	movs	r3, #1
 80005aa:	465a      	mov	r2, fp
 80005ac:	4093      	lsls	r3, r2
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	2301      	movs	r3, #1
 80005b2:	4642      	mov	r2, r8
 80005b4:	4093      	lsls	r3, r2
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	e019      	b.n	80005ee <__udivmoddi4+0xaa>
 80005ba:	4282      	cmp	r2, r0
 80005bc:	d9d0      	bls.n	8000560 <__udivmoddi4+0x1c>
 80005be:	2200      	movs	r2, #0
 80005c0:	2300      	movs	r3, #0
 80005c2:	9200      	str	r2, [sp, #0]
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <__udivmoddi4+0x8c>
 80005cc:	601c      	str	r4, [r3, #0]
 80005ce:	605d      	str	r5, [r3, #4]
 80005d0:	9800      	ldr	r0, [sp, #0]
 80005d2:	9901      	ldr	r1, [sp, #4]
 80005d4:	b003      	add	sp, #12
 80005d6:	bc3c      	pop	{r2, r3, r4, r5}
 80005d8:	4690      	mov	r8, r2
 80005da:	4699      	mov	r9, r3
 80005dc:	46a2      	mov	sl, r4
 80005de:	46ab      	mov	fp, r5
 80005e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e2:	42a3      	cmp	r3, r4
 80005e4:	d9d6      	bls.n	8000594 <__udivmoddi4+0x50>
 80005e6:	2200      	movs	r2, #0
 80005e8:	2300      	movs	r3, #0
 80005ea:	9200      	str	r2, [sp, #0]
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	4643      	mov	r3, r8
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d0e8      	beq.n	80005c6 <__udivmoddi4+0x82>
 80005f4:	07fb      	lsls	r3, r7, #31
 80005f6:	0872      	lsrs	r2, r6, #1
 80005f8:	431a      	orrs	r2, r3
 80005fa:	4646      	mov	r6, r8
 80005fc:	087b      	lsrs	r3, r7, #1
 80005fe:	e00e      	b.n	800061e <__udivmoddi4+0xda>
 8000600:	42ab      	cmp	r3, r5
 8000602:	d101      	bne.n	8000608 <__udivmoddi4+0xc4>
 8000604:	42a2      	cmp	r2, r4
 8000606:	d80c      	bhi.n	8000622 <__udivmoddi4+0xde>
 8000608:	1aa4      	subs	r4, r4, r2
 800060a:	419d      	sbcs	r5, r3
 800060c:	2001      	movs	r0, #1
 800060e:	1924      	adds	r4, r4, r4
 8000610:	416d      	adcs	r5, r5
 8000612:	2100      	movs	r1, #0
 8000614:	3e01      	subs	r6, #1
 8000616:	1824      	adds	r4, r4, r0
 8000618:	414d      	adcs	r5, r1
 800061a:	2e00      	cmp	r6, #0
 800061c:	d006      	beq.n	800062c <__udivmoddi4+0xe8>
 800061e:	42ab      	cmp	r3, r5
 8000620:	d9ee      	bls.n	8000600 <__udivmoddi4+0xbc>
 8000622:	3e01      	subs	r6, #1
 8000624:	1924      	adds	r4, r4, r4
 8000626:	416d      	adcs	r5, r5
 8000628:	2e00      	cmp	r6, #0
 800062a:	d1f8      	bne.n	800061e <__udivmoddi4+0xda>
 800062c:	465b      	mov	r3, fp
 800062e:	9800      	ldr	r0, [sp, #0]
 8000630:	9901      	ldr	r1, [sp, #4]
 8000632:	1900      	adds	r0, r0, r4
 8000634:	4169      	adcs	r1, r5
 8000636:	2b00      	cmp	r3, #0
 8000638:	db22      	blt.n	8000680 <__udivmoddi4+0x13c>
 800063a:	002b      	movs	r3, r5
 800063c:	465a      	mov	r2, fp
 800063e:	40d3      	lsrs	r3, r2
 8000640:	002a      	movs	r2, r5
 8000642:	4644      	mov	r4, r8
 8000644:	40e2      	lsrs	r2, r4
 8000646:	001c      	movs	r4, r3
 8000648:	465b      	mov	r3, fp
 800064a:	0015      	movs	r5, r2
 800064c:	2b00      	cmp	r3, #0
 800064e:	db2c      	blt.n	80006aa <__udivmoddi4+0x166>
 8000650:	0026      	movs	r6, r4
 8000652:	409e      	lsls	r6, r3
 8000654:	0033      	movs	r3, r6
 8000656:	0026      	movs	r6, r4
 8000658:	4647      	mov	r7, r8
 800065a:	40be      	lsls	r6, r7
 800065c:	0032      	movs	r2, r6
 800065e:	1a80      	subs	r0, r0, r2
 8000660:	4199      	sbcs	r1, r3
 8000662:	9000      	str	r0, [sp, #0]
 8000664:	9101      	str	r1, [sp, #4]
 8000666:	e7ae      	b.n	80005c6 <__udivmoddi4+0x82>
 8000668:	4642      	mov	r2, r8
 800066a:	2320      	movs	r3, #32
 800066c:	1a9b      	subs	r3, r3, r2
 800066e:	4652      	mov	r2, sl
 8000670:	40da      	lsrs	r2, r3
 8000672:	4641      	mov	r1, r8
 8000674:	0013      	movs	r3, r2
 8000676:	464a      	mov	r2, r9
 8000678:	408a      	lsls	r2, r1
 800067a:	0017      	movs	r7, r2
 800067c:	431f      	orrs	r7, r3
 800067e:	e782      	b.n	8000586 <__udivmoddi4+0x42>
 8000680:	4642      	mov	r2, r8
 8000682:	2320      	movs	r3, #32
 8000684:	1a9b      	subs	r3, r3, r2
 8000686:	002a      	movs	r2, r5
 8000688:	4646      	mov	r6, r8
 800068a:	409a      	lsls	r2, r3
 800068c:	0023      	movs	r3, r4
 800068e:	40f3      	lsrs	r3, r6
 8000690:	4313      	orrs	r3, r2
 8000692:	e7d5      	b.n	8000640 <__udivmoddi4+0xfc>
 8000694:	4642      	mov	r2, r8
 8000696:	2320      	movs	r3, #32
 8000698:	2100      	movs	r1, #0
 800069a:	1a9b      	subs	r3, r3, r2
 800069c:	2200      	movs	r2, #0
 800069e:	9100      	str	r1, [sp, #0]
 80006a0:	9201      	str	r2, [sp, #4]
 80006a2:	2201      	movs	r2, #1
 80006a4:	40da      	lsrs	r2, r3
 80006a6:	9201      	str	r2, [sp, #4]
 80006a8:	e782      	b.n	80005b0 <__udivmoddi4+0x6c>
 80006aa:	4642      	mov	r2, r8
 80006ac:	2320      	movs	r3, #32
 80006ae:	0026      	movs	r6, r4
 80006b0:	1a9b      	subs	r3, r3, r2
 80006b2:	40de      	lsrs	r6, r3
 80006b4:	002f      	movs	r7, r5
 80006b6:	46b4      	mov	ip, r6
 80006b8:	4097      	lsls	r7, r2
 80006ba:	4666      	mov	r6, ip
 80006bc:	003b      	movs	r3, r7
 80006be:	4333      	orrs	r3, r6
 80006c0:	e7c9      	b.n	8000656 <__udivmoddi4+0x112>
 80006c2:	46c0      	nop			; (mov r8, r8)

080006c4 <__aeabi_dadd>:
 80006c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c6:	4645      	mov	r5, r8
 80006c8:	46de      	mov	lr, fp
 80006ca:	4657      	mov	r7, sl
 80006cc:	464e      	mov	r6, r9
 80006ce:	030c      	lsls	r4, r1, #12
 80006d0:	b5e0      	push	{r5, r6, r7, lr}
 80006d2:	004e      	lsls	r6, r1, #1
 80006d4:	0fc9      	lsrs	r1, r1, #31
 80006d6:	4688      	mov	r8, r1
 80006d8:	000d      	movs	r5, r1
 80006da:	0a61      	lsrs	r1, r4, #9
 80006dc:	0f44      	lsrs	r4, r0, #29
 80006de:	430c      	orrs	r4, r1
 80006e0:	00c7      	lsls	r7, r0, #3
 80006e2:	0319      	lsls	r1, r3, #12
 80006e4:	0058      	lsls	r0, r3, #1
 80006e6:	0fdb      	lsrs	r3, r3, #31
 80006e8:	469b      	mov	fp, r3
 80006ea:	0a4b      	lsrs	r3, r1, #9
 80006ec:	0f51      	lsrs	r1, r2, #29
 80006ee:	430b      	orrs	r3, r1
 80006f0:	0d76      	lsrs	r6, r6, #21
 80006f2:	0d40      	lsrs	r0, r0, #21
 80006f4:	0019      	movs	r1, r3
 80006f6:	00d2      	lsls	r2, r2, #3
 80006f8:	45d8      	cmp	r8, fp
 80006fa:	d100      	bne.n	80006fe <__aeabi_dadd+0x3a>
 80006fc:	e0ae      	b.n	800085c <__aeabi_dadd+0x198>
 80006fe:	1a35      	subs	r5, r6, r0
 8000700:	2d00      	cmp	r5, #0
 8000702:	dc00      	bgt.n	8000706 <__aeabi_dadd+0x42>
 8000704:	e0f6      	b.n	80008f4 <__aeabi_dadd+0x230>
 8000706:	2800      	cmp	r0, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dadd+0x66>
 800070a:	4313      	orrs	r3, r2
 800070c:	d100      	bne.n	8000710 <__aeabi_dadd+0x4c>
 800070e:	e0db      	b.n	80008c8 <__aeabi_dadd+0x204>
 8000710:	1e6b      	subs	r3, r5, #1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d000      	beq.n	8000718 <__aeabi_dadd+0x54>
 8000716:	e137      	b.n	8000988 <__aeabi_dadd+0x2c4>
 8000718:	1aba      	subs	r2, r7, r2
 800071a:	4297      	cmp	r7, r2
 800071c:	41bf      	sbcs	r7, r7
 800071e:	1a64      	subs	r4, r4, r1
 8000720:	427f      	negs	r7, r7
 8000722:	1be4      	subs	r4, r4, r7
 8000724:	2601      	movs	r6, #1
 8000726:	0017      	movs	r7, r2
 8000728:	e024      	b.n	8000774 <__aeabi_dadd+0xb0>
 800072a:	4bc6      	ldr	r3, [pc, #792]	; (8000a44 <__aeabi_dadd+0x380>)
 800072c:	429e      	cmp	r6, r3
 800072e:	d04d      	beq.n	80007cc <__aeabi_dadd+0x108>
 8000730:	2380      	movs	r3, #128	; 0x80
 8000732:	041b      	lsls	r3, r3, #16
 8000734:	4319      	orrs	r1, r3
 8000736:	2d38      	cmp	r5, #56	; 0x38
 8000738:	dd00      	ble.n	800073c <__aeabi_dadd+0x78>
 800073a:	e107      	b.n	800094c <__aeabi_dadd+0x288>
 800073c:	2d1f      	cmp	r5, #31
 800073e:	dd00      	ble.n	8000742 <__aeabi_dadd+0x7e>
 8000740:	e138      	b.n	80009b4 <__aeabi_dadd+0x2f0>
 8000742:	2020      	movs	r0, #32
 8000744:	1b43      	subs	r3, r0, r5
 8000746:	469a      	mov	sl, r3
 8000748:	000b      	movs	r3, r1
 800074a:	4650      	mov	r0, sl
 800074c:	4083      	lsls	r3, r0
 800074e:	4699      	mov	r9, r3
 8000750:	0013      	movs	r3, r2
 8000752:	4648      	mov	r0, r9
 8000754:	40eb      	lsrs	r3, r5
 8000756:	4318      	orrs	r0, r3
 8000758:	0003      	movs	r3, r0
 800075a:	4650      	mov	r0, sl
 800075c:	4082      	lsls	r2, r0
 800075e:	1e50      	subs	r0, r2, #1
 8000760:	4182      	sbcs	r2, r0
 8000762:	40e9      	lsrs	r1, r5
 8000764:	431a      	orrs	r2, r3
 8000766:	1aba      	subs	r2, r7, r2
 8000768:	1a61      	subs	r1, r4, r1
 800076a:	4297      	cmp	r7, r2
 800076c:	41a4      	sbcs	r4, r4
 800076e:	0017      	movs	r7, r2
 8000770:	4264      	negs	r4, r4
 8000772:	1b0c      	subs	r4, r1, r4
 8000774:	0223      	lsls	r3, r4, #8
 8000776:	d562      	bpl.n	800083e <__aeabi_dadd+0x17a>
 8000778:	0264      	lsls	r4, r4, #9
 800077a:	0a65      	lsrs	r5, r4, #9
 800077c:	2d00      	cmp	r5, #0
 800077e:	d100      	bne.n	8000782 <__aeabi_dadd+0xbe>
 8000780:	e0df      	b.n	8000942 <__aeabi_dadd+0x27e>
 8000782:	0028      	movs	r0, r5
 8000784:	f001 fd46 	bl	8002214 <__clzsi2>
 8000788:	0003      	movs	r3, r0
 800078a:	3b08      	subs	r3, #8
 800078c:	2b1f      	cmp	r3, #31
 800078e:	dd00      	ble.n	8000792 <__aeabi_dadd+0xce>
 8000790:	e0d2      	b.n	8000938 <__aeabi_dadd+0x274>
 8000792:	2220      	movs	r2, #32
 8000794:	003c      	movs	r4, r7
 8000796:	1ad2      	subs	r2, r2, r3
 8000798:	409d      	lsls	r5, r3
 800079a:	40d4      	lsrs	r4, r2
 800079c:	409f      	lsls	r7, r3
 800079e:	4325      	orrs	r5, r4
 80007a0:	429e      	cmp	r6, r3
 80007a2:	dd00      	ble.n	80007a6 <__aeabi_dadd+0xe2>
 80007a4:	e0c4      	b.n	8000930 <__aeabi_dadd+0x26c>
 80007a6:	1b9e      	subs	r6, r3, r6
 80007a8:	1c73      	adds	r3, r6, #1
 80007aa:	2b1f      	cmp	r3, #31
 80007ac:	dd00      	ble.n	80007b0 <__aeabi_dadd+0xec>
 80007ae:	e0f1      	b.n	8000994 <__aeabi_dadd+0x2d0>
 80007b0:	2220      	movs	r2, #32
 80007b2:	0038      	movs	r0, r7
 80007b4:	0029      	movs	r1, r5
 80007b6:	1ad2      	subs	r2, r2, r3
 80007b8:	40d8      	lsrs	r0, r3
 80007ba:	4091      	lsls	r1, r2
 80007bc:	4097      	lsls	r7, r2
 80007be:	002c      	movs	r4, r5
 80007c0:	4301      	orrs	r1, r0
 80007c2:	1e78      	subs	r0, r7, #1
 80007c4:	4187      	sbcs	r7, r0
 80007c6:	40dc      	lsrs	r4, r3
 80007c8:	2600      	movs	r6, #0
 80007ca:	430f      	orrs	r7, r1
 80007cc:	077b      	lsls	r3, r7, #29
 80007ce:	d009      	beq.n	80007e4 <__aeabi_dadd+0x120>
 80007d0:	230f      	movs	r3, #15
 80007d2:	403b      	ands	r3, r7
 80007d4:	2b04      	cmp	r3, #4
 80007d6:	d005      	beq.n	80007e4 <__aeabi_dadd+0x120>
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	42bb      	cmp	r3, r7
 80007dc:	41bf      	sbcs	r7, r7
 80007de:	427f      	negs	r7, r7
 80007e0:	19e4      	adds	r4, r4, r7
 80007e2:	001f      	movs	r7, r3
 80007e4:	0223      	lsls	r3, r4, #8
 80007e6:	d52c      	bpl.n	8000842 <__aeabi_dadd+0x17e>
 80007e8:	4b96      	ldr	r3, [pc, #600]	; (8000a44 <__aeabi_dadd+0x380>)
 80007ea:	3601      	adds	r6, #1
 80007ec:	429e      	cmp	r6, r3
 80007ee:	d100      	bne.n	80007f2 <__aeabi_dadd+0x12e>
 80007f0:	e09a      	b.n	8000928 <__aeabi_dadd+0x264>
 80007f2:	4645      	mov	r5, r8
 80007f4:	4b94      	ldr	r3, [pc, #592]	; (8000a48 <__aeabi_dadd+0x384>)
 80007f6:	08ff      	lsrs	r7, r7, #3
 80007f8:	401c      	ands	r4, r3
 80007fa:	0760      	lsls	r0, r4, #29
 80007fc:	0576      	lsls	r6, r6, #21
 80007fe:	0264      	lsls	r4, r4, #9
 8000800:	4307      	orrs	r7, r0
 8000802:	0b24      	lsrs	r4, r4, #12
 8000804:	0d76      	lsrs	r6, r6, #21
 8000806:	2100      	movs	r1, #0
 8000808:	0324      	lsls	r4, r4, #12
 800080a:	0b23      	lsrs	r3, r4, #12
 800080c:	0d0c      	lsrs	r4, r1, #20
 800080e:	4a8f      	ldr	r2, [pc, #572]	; (8000a4c <__aeabi_dadd+0x388>)
 8000810:	0524      	lsls	r4, r4, #20
 8000812:	431c      	orrs	r4, r3
 8000814:	4014      	ands	r4, r2
 8000816:	0533      	lsls	r3, r6, #20
 8000818:	4323      	orrs	r3, r4
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	07ed      	lsls	r5, r5, #31
 800081e:	085b      	lsrs	r3, r3, #1
 8000820:	432b      	orrs	r3, r5
 8000822:	0038      	movs	r0, r7
 8000824:	0019      	movs	r1, r3
 8000826:	bc3c      	pop	{r2, r3, r4, r5}
 8000828:	4690      	mov	r8, r2
 800082a:	4699      	mov	r9, r3
 800082c:	46a2      	mov	sl, r4
 800082e:	46ab      	mov	fp, r5
 8000830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000832:	4664      	mov	r4, ip
 8000834:	4304      	orrs	r4, r0
 8000836:	d100      	bne.n	800083a <__aeabi_dadd+0x176>
 8000838:	e211      	b.n	8000c5e <__aeabi_dadd+0x59a>
 800083a:	0004      	movs	r4, r0
 800083c:	4667      	mov	r7, ip
 800083e:	077b      	lsls	r3, r7, #29
 8000840:	d1c6      	bne.n	80007d0 <__aeabi_dadd+0x10c>
 8000842:	4645      	mov	r5, r8
 8000844:	0760      	lsls	r0, r4, #29
 8000846:	08ff      	lsrs	r7, r7, #3
 8000848:	4307      	orrs	r7, r0
 800084a:	08e4      	lsrs	r4, r4, #3
 800084c:	4b7d      	ldr	r3, [pc, #500]	; (8000a44 <__aeabi_dadd+0x380>)
 800084e:	429e      	cmp	r6, r3
 8000850:	d030      	beq.n	80008b4 <__aeabi_dadd+0x1f0>
 8000852:	0324      	lsls	r4, r4, #12
 8000854:	0576      	lsls	r6, r6, #21
 8000856:	0b24      	lsrs	r4, r4, #12
 8000858:	0d76      	lsrs	r6, r6, #21
 800085a:	e7d4      	b.n	8000806 <__aeabi_dadd+0x142>
 800085c:	1a33      	subs	r3, r6, r0
 800085e:	469a      	mov	sl, r3
 8000860:	2b00      	cmp	r3, #0
 8000862:	dd78      	ble.n	8000956 <__aeabi_dadd+0x292>
 8000864:	2800      	cmp	r0, #0
 8000866:	d031      	beq.n	80008cc <__aeabi_dadd+0x208>
 8000868:	4876      	ldr	r0, [pc, #472]	; (8000a44 <__aeabi_dadd+0x380>)
 800086a:	4286      	cmp	r6, r0
 800086c:	d0ae      	beq.n	80007cc <__aeabi_dadd+0x108>
 800086e:	2080      	movs	r0, #128	; 0x80
 8000870:	0400      	lsls	r0, r0, #16
 8000872:	4301      	orrs	r1, r0
 8000874:	4653      	mov	r3, sl
 8000876:	2b38      	cmp	r3, #56	; 0x38
 8000878:	dc00      	bgt.n	800087c <__aeabi_dadd+0x1b8>
 800087a:	e0e9      	b.n	8000a50 <__aeabi_dadd+0x38c>
 800087c:	430a      	orrs	r2, r1
 800087e:	1e51      	subs	r1, r2, #1
 8000880:	418a      	sbcs	r2, r1
 8000882:	2100      	movs	r1, #0
 8000884:	19d2      	adds	r2, r2, r7
 8000886:	42ba      	cmp	r2, r7
 8000888:	41bf      	sbcs	r7, r7
 800088a:	1909      	adds	r1, r1, r4
 800088c:	427c      	negs	r4, r7
 800088e:	0017      	movs	r7, r2
 8000890:	190c      	adds	r4, r1, r4
 8000892:	0223      	lsls	r3, r4, #8
 8000894:	d5d3      	bpl.n	800083e <__aeabi_dadd+0x17a>
 8000896:	4b6b      	ldr	r3, [pc, #428]	; (8000a44 <__aeabi_dadd+0x380>)
 8000898:	3601      	adds	r6, #1
 800089a:	429e      	cmp	r6, r3
 800089c:	d100      	bne.n	80008a0 <__aeabi_dadd+0x1dc>
 800089e:	e13a      	b.n	8000b16 <__aeabi_dadd+0x452>
 80008a0:	2001      	movs	r0, #1
 80008a2:	4b69      	ldr	r3, [pc, #420]	; (8000a48 <__aeabi_dadd+0x384>)
 80008a4:	401c      	ands	r4, r3
 80008a6:	087b      	lsrs	r3, r7, #1
 80008a8:	4007      	ands	r7, r0
 80008aa:	431f      	orrs	r7, r3
 80008ac:	07e0      	lsls	r0, r4, #31
 80008ae:	4307      	orrs	r7, r0
 80008b0:	0864      	lsrs	r4, r4, #1
 80008b2:	e78b      	b.n	80007cc <__aeabi_dadd+0x108>
 80008b4:	0023      	movs	r3, r4
 80008b6:	433b      	orrs	r3, r7
 80008b8:	d100      	bne.n	80008bc <__aeabi_dadd+0x1f8>
 80008ba:	e1cb      	b.n	8000c54 <__aeabi_dadd+0x590>
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	0312      	lsls	r2, r2, #12
 80008c0:	4314      	orrs	r4, r2
 80008c2:	0324      	lsls	r4, r4, #12
 80008c4:	0b24      	lsrs	r4, r4, #12
 80008c6:	e79e      	b.n	8000806 <__aeabi_dadd+0x142>
 80008c8:	002e      	movs	r6, r5
 80008ca:	e77f      	b.n	80007cc <__aeabi_dadd+0x108>
 80008cc:	0008      	movs	r0, r1
 80008ce:	4310      	orrs	r0, r2
 80008d0:	d100      	bne.n	80008d4 <__aeabi_dadd+0x210>
 80008d2:	e0b4      	b.n	8000a3e <__aeabi_dadd+0x37a>
 80008d4:	1e58      	subs	r0, r3, #1
 80008d6:	2800      	cmp	r0, #0
 80008d8:	d000      	beq.n	80008dc <__aeabi_dadd+0x218>
 80008da:	e0de      	b.n	8000a9a <__aeabi_dadd+0x3d6>
 80008dc:	18ba      	adds	r2, r7, r2
 80008de:	42ba      	cmp	r2, r7
 80008e0:	419b      	sbcs	r3, r3
 80008e2:	1864      	adds	r4, r4, r1
 80008e4:	425b      	negs	r3, r3
 80008e6:	18e4      	adds	r4, r4, r3
 80008e8:	0017      	movs	r7, r2
 80008ea:	2601      	movs	r6, #1
 80008ec:	0223      	lsls	r3, r4, #8
 80008ee:	d5a6      	bpl.n	800083e <__aeabi_dadd+0x17a>
 80008f0:	2602      	movs	r6, #2
 80008f2:	e7d5      	b.n	80008a0 <__aeabi_dadd+0x1dc>
 80008f4:	2d00      	cmp	r5, #0
 80008f6:	d16e      	bne.n	80009d6 <__aeabi_dadd+0x312>
 80008f8:	1c70      	adds	r0, r6, #1
 80008fa:	0540      	lsls	r0, r0, #21
 80008fc:	0d40      	lsrs	r0, r0, #21
 80008fe:	2801      	cmp	r0, #1
 8000900:	dc00      	bgt.n	8000904 <__aeabi_dadd+0x240>
 8000902:	e0f9      	b.n	8000af8 <__aeabi_dadd+0x434>
 8000904:	1ab8      	subs	r0, r7, r2
 8000906:	4684      	mov	ip, r0
 8000908:	4287      	cmp	r7, r0
 800090a:	4180      	sbcs	r0, r0
 800090c:	1ae5      	subs	r5, r4, r3
 800090e:	4240      	negs	r0, r0
 8000910:	1a2d      	subs	r5, r5, r0
 8000912:	0228      	lsls	r0, r5, #8
 8000914:	d400      	bmi.n	8000918 <__aeabi_dadd+0x254>
 8000916:	e089      	b.n	8000a2c <__aeabi_dadd+0x368>
 8000918:	1bd7      	subs	r7, r2, r7
 800091a:	42ba      	cmp	r2, r7
 800091c:	4192      	sbcs	r2, r2
 800091e:	1b1c      	subs	r4, r3, r4
 8000920:	4252      	negs	r2, r2
 8000922:	1aa5      	subs	r5, r4, r2
 8000924:	46d8      	mov	r8, fp
 8000926:	e729      	b.n	800077c <__aeabi_dadd+0xb8>
 8000928:	4645      	mov	r5, r8
 800092a:	2400      	movs	r4, #0
 800092c:	2700      	movs	r7, #0
 800092e:	e76a      	b.n	8000806 <__aeabi_dadd+0x142>
 8000930:	4c45      	ldr	r4, [pc, #276]	; (8000a48 <__aeabi_dadd+0x384>)
 8000932:	1af6      	subs	r6, r6, r3
 8000934:	402c      	ands	r4, r5
 8000936:	e749      	b.n	80007cc <__aeabi_dadd+0x108>
 8000938:	003d      	movs	r5, r7
 800093a:	3828      	subs	r0, #40	; 0x28
 800093c:	4085      	lsls	r5, r0
 800093e:	2700      	movs	r7, #0
 8000940:	e72e      	b.n	80007a0 <__aeabi_dadd+0xdc>
 8000942:	0038      	movs	r0, r7
 8000944:	f001 fc66 	bl	8002214 <__clzsi2>
 8000948:	3020      	adds	r0, #32
 800094a:	e71d      	b.n	8000788 <__aeabi_dadd+0xc4>
 800094c:	430a      	orrs	r2, r1
 800094e:	1e51      	subs	r1, r2, #1
 8000950:	418a      	sbcs	r2, r1
 8000952:	2100      	movs	r1, #0
 8000954:	e707      	b.n	8000766 <__aeabi_dadd+0xa2>
 8000956:	2b00      	cmp	r3, #0
 8000958:	d000      	beq.n	800095c <__aeabi_dadd+0x298>
 800095a:	e0f3      	b.n	8000b44 <__aeabi_dadd+0x480>
 800095c:	1c70      	adds	r0, r6, #1
 800095e:	0543      	lsls	r3, r0, #21
 8000960:	0d5b      	lsrs	r3, r3, #21
 8000962:	2b01      	cmp	r3, #1
 8000964:	dc00      	bgt.n	8000968 <__aeabi_dadd+0x2a4>
 8000966:	e0ad      	b.n	8000ac4 <__aeabi_dadd+0x400>
 8000968:	4b36      	ldr	r3, [pc, #216]	; (8000a44 <__aeabi_dadd+0x380>)
 800096a:	4298      	cmp	r0, r3
 800096c:	d100      	bne.n	8000970 <__aeabi_dadd+0x2ac>
 800096e:	e0d1      	b.n	8000b14 <__aeabi_dadd+0x450>
 8000970:	18ba      	adds	r2, r7, r2
 8000972:	42ba      	cmp	r2, r7
 8000974:	41bf      	sbcs	r7, r7
 8000976:	1864      	adds	r4, r4, r1
 8000978:	427f      	negs	r7, r7
 800097a:	19e4      	adds	r4, r4, r7
 800097c:	07e7      	lsls	r7, r4, #31
 800097e:	0852      	lsrs	r2, r2, #1
 8000980:	4317      	orrs	r7, r2
 8000982:	0864      	lsrs	r4, r4, #1
 8000984:	0006      	movs	r6, r0
 8000986:	e721      	b.n	80007cc <__aeabi_dadd+0x108>
 8000988:	482e      	ldr	r0, [pc, #184]	; (8000a44 <__aeabi_dadd+0x380>)
 800098a:	4285      	cmp	r5, r0
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x2cc>
 800098e:	e093      	b.n	8000ab8 <__aeabi_dadd+0x3f4>
 8000990:	001d      	movs	r5, r3
 8000992:	e6d0      	b.n	8000736 <__aeabi_dadd+0x72>
 8000994:	0029      	movs	r1, r5
 8000996:	3e1f      	subs	r6, #31
 8000998:	40f1      	lsrs	r1, r6
 800099a:	2b20      	cmp	r3, #32
 800099c:	d100      	bne.n	80009a0 <__aeabi_dadd+0x2dc>
 800099e:	e08d      	b.n	8000abc <__aeabi_dadd+0x3f8>
 80009a0:	2240      	movs	r2, #64	; 0x40
 80009a2:	1ad3      	subs	r3, r2, r3
 80009a4:	409d      	lsls	r5, r3
 80009a6:	432f      	orrs	r7, r5
 80009a8:	1e7d      	subs	r5, r7, #1
 80009aa:	41af      	sbcs	r7, r5
 80009ac:	2400      	movs	r4, #0
 80009ae:	430f      	orrs	r7, r1
 80009b0:	2600      	movs	r6, #0
 80009b2:	e744      	b.n	800083e <__aeabi_dadd+0x17a>
 80009b4:	002b      	movs	r3, r5
 80009b6:	0008      	movs	r0, r1
 80009b8:	3b20      	subs	r3, #32
 80009ba:	40d8      	lsrs	r0, r3
 80009bc:	0003      	movs	r3, r0
 80009be:	2d20      	cmp	r5, #32
 80009c0:	d100      	bne.n	80009c4 <__aeabi_dadd+0x300>
 80009c2:	e07d      	b.n	8000ac0 <__aeabi_dadd+0x3fc>
 80009c4:	2040      	movs	r0, #64	; 0x40
 80009c6:	1b45      	subs	r5, r0, r5
 80009c8:	40a9      	lsls	r1, r5
 80009ca:	430a      	orrs	r2, r1
 80009cc:	1e51      	subs	r1, r2, #1
 80009ce:	418a      	sbcs	r2, r1
 80009d0:	2100      	movs	r1, #0
 80009d2:	431a      	orrs	r2, r3
 80009d4:	e6c7      	b.n	8000766 <__aeabi_dadd+0xa2>
 80009d6:	2e00      	cmp	r6, #0
 80009d8:	d050      	beq.n	8000a7c <__aeabi_dadd+0x3b8>
 80009da:	4e1a      	ldr	r6, [pc, #104]	; (8000a44 <__aeabi_dadd+0x380>)
 80009dc:	42b0      	cmp	r0, r6
 80009de:	d057      	beq.n	8000a90 <__aeabi_dadd+0x3cc>
 80009e0:	2680      	movs	r6, #128	; 0x80
 80009e2:	426b      	negs	r3, r5
 80009e4:	4699      	mov	r9, r3
 80009e6:	0436      	lsls	r6, r6, #16
 80009e8:	4334      	orrs	r4, r6
 80009ea:	464b      	mov	r3, r9
 80009ec:	2b38      	cmp	r3, #56	; 0x38
 80009ee:	dd00      	ble.n	80009f2 <__aeabi_dadd+0x32e>
 80009f0:	e0d6      	b.n	8000ba0 <__aeabi_dadd+0x4dc>
 80009f2:	2b1f      	cmp	r3, #31
 80009f4:	dd00      	ble.n	80009f8 <__aeabi_dadd+0x334>
 80009f6:	e135      	b.n	8000c64 <__aeabi_dadd+0x5a0>
 80009f8:	2620      	movs	r6, #32
 80009fa:	1af5      	subs	r5, r6, r3
 80009fc:	0026      	movs	r6, r4
 80009fe:	40ae      	lsls	r6, r5
 8000a00:	46b2      	mov	sl, r6
 8000a02:	003e      	movs	r6, r7
 8000a04:	40de      	lsrs	r6, r3
 8000a06:	46ac      	mov	ip, r5
 8000a08:	0035      	movs	r5, r6
 8000a0a:	4656      	mov	r6, sl
 8000a0c:	432e      	orrs	r6, r5
 8000a0e:	4665      	mov	r5, ip
 8000a10:	40af      	lsls	r7, r5
 8000a12:	1e7d      	subs	r5, r7, #1
 8000a14:	41af      	sbcs	r7, r5
 8000a16:	40dc      	lsrs	r4, r3
 8000a18:	4337      	orrs	r7, r6
 8000a1a:	1bd7      	subs	r7, r2, r7
 8000a1c:	42ba      	cmp	r2, r7
 8000a1e:	4192      	sbcs	r2, r2
 8000a20:	1b0c      	subs	r4, r1, r4
 8000a22:	4252      	negs	r2, r2
 8000a24:	1aa4      	subs	r4, r4, r2
 8000a26:	0006      	movs	r6, r0
 8000a28:	46d8      	mov	r8, fp
 8000a2a:	e6a3      	b.n	8000774 <__aeabi_dadd+0xb0>
 8000a2c:	4664      	mov	r4, ip
 8000a2e:	4667      	mov	r7, ip
 8000a30:	432c      	orrs	r4, r5
 8000a32:	d000      	beq.n	8000a36 <__aeabi_dadd+0x372>
 8000a34:	e6a2      	b.n	800077c <__aeabi_dadd+0xb8>
 8000a36:	2500      	movs	r5, #0
 8000a38:	2600      	movs	r6, #0
 8000a3a:	2700      	movs	r7, #0
 8000a3c:	e706      	b.n	800084c <__aeabi_dadd+0x188>
 8000a3e:	001e      	movs	r6, r3
 8000a40:	e6c4      	b.n	80007cc <__aeabi_dadd+0x108>
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	000007ff 	.word	0x000007ff
 8000a48:	ff7fffff 	.word	0xff7fffff
 8000a4c:	800fffff 	.word	0x800fffff
 8000a50:	2b1f      	cmp	r3, #31
 8000a52:	dc63      	bgt.n	8000b1c <__aeabi_dadd+0x458>
 8000a54:	2020      	movs	r0, #32
 8000a56:	1ac3      	subs	r3, r0, r3
 8000a58:	0008      	movs	r0, r1
 8000a5a:	4098      	lsls	r0, r3
 8000a5c:	469c      	mov	ip, r3
 8000a5e:	4683      	mov	fp, r0
 8000a60:	4653      	mov	r3, sl
 8000a62:	0010      	movs	r0, r2
 8000a64:	40d8      	lsrs	r0, r3
 8000a66:	0003      	movs	r3, r0
 8000a68:	4658      	mov	r0, fp
 8000a6a:	4318      	orrs	r0, r3
 8000a6c:	4663      	mov	r3, ip
 8000a6e:	409a      	lsls	r2, r3
 8000a70:	1e53      	subs	r3, r2, #1
 8000a72:	419a      	sbcs	r2, r3
 8000a74:	4653      	mov	r3, sl
 8000a76:	4302      	orrs	r2, r0
 8000a78:	40d9      	lsrs	r1, r3
 8000a7a:	e703      	b.n	8000884 <__aeabi_dadd+0x1c0>
 8000a7c:	0026      	movs	r6, r4
 8000a7e:	433e      	orrs	r6, r7
 8000a80:	d006      	beq.n	8000a90 <__aeabi_dadd+0x3cc>
 8000a82:	43eb      	mvns	r3, r5
 8000a84:	4699      	mov	r9, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d0c7      	beq.n	8000a1a <__aeabi_dadd+0x356>
 8000a8a:	4e94      	ldr	r6, [pc, #592]	; (8000cdc <__aeabi_dadd+0x618>)
 8000a8c:	42b0      	cmp	r0, r6
 8000a8e:	d1ac      	bne.n	80009ea <__aeabi_dadd+0x326>
 8000a90:	000c      	movs	r4, r1
 8000a92:	0017      	movs	r7, r2
 8000a94:	0006      	movs	r6, r0
 8000a96:	46d8      	mov	r8, fp
 8000a98:	e698      	b.n	80007cc <__aeabi_dadd+0x108>
 8000a9a:	4b90      	ldr	r3, [pc, #576]	; (8000cdc <__aeabi_dadd+0x618>)
 8000a9c:	459a      	cmp	sl, r3
 8000a9e:	d00b      	beq.n	8000ab8 <__aeabi_dadd+0x3f4>
 8000aa0:	4682      	mov	sl, r0
 8000aa2:	e6e7      	b.n	8000874 <__aeabi_dadd+0x1b0>
 8000aa4:	2800      	cmp	r0, #0
 8000aa6:	d000      	beq.n	8000aaa <__aeabi_dadd+0x3e6>
 8000aa8:	e09e      	b.n	8000be8 <__aeabi_dadd+0x524>
 8000aaa:	0018      	movs	r0, r3
 8000aac:	4310      	orrs	r0, r2
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dadd+0x3ee>
 8000ab0:	e0e9      	b.n	8000c86 <__aeabi_dadd+0x5c2>
 8000ab2:	001c      	movs	r4, r3
 8000ab4:	0017      	movs	r7, r2
 8000ab6:	46d8      	mov	r8, fp
 8000ab8:	4e88      	ldr	r6, [pc, #544]	; (8000cdc <__aeabi_dadd+0x618>)
 8000aba:	e687      	b.n	80007cc <__aeabi_dadd+0x108>
 8000abc:	2500      	movs	r5, #0
 8000abe:	e772      	b.n	80009a6 <__aeabi_dadd+0x2e2>
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	e782      	b.n	80009ca <__aeabi_dadd+0x306>
 8000ac4:	0023      	movs	r3, r4
 8000ac6:	433b      	orrs	r3, r7
 8000ac8:	2e00      	cmp	r6, #0
 8000aca:	d000      	beq.n	8000ace <__aeabi_dadd+0x40a>
 8000acc:	e0ab      	b.n	8000c26 <__aeabi_dadd+0x562>
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dadd+0x410>
 8000ad2:	e0e7      	b.n	8000ca4 <__aeabi_dadd+0x5e0>
 8000ad4:	000b      	movs	r3, r1
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dadd+0x418>
 8000ada:	e677      	b.n	80007cc <__aeabi_dadd+0x108>
 8000adc:	18ba      	adds	r2, r7, r2
 8000ade:	42ba      	cmp	r2, r7
 8000ae0:	41bf      	sbcs	r7, r7
 8000ae2:	1864      	adds	r4, r4, r1
 8000ae4:	427f      	negs	r7, r7
 8000ae6:	19e4      	adds	r4, r4, r7
 8000ae8:	0223      	lsls	r3, r4, #8
 8000aea:	d400      	bmi.n	8000aee <__aeabi_dadd+0x42a>
 8000aec:	e0f2      	b.n	8000cd4 <__aeabi_dadd+0x610>
 8000aee:	4b7c      	ldr	r3, [pc, #496]	; (8000ce0 <__aeabi_dadd+0x61c>)
 8000af0:	0017      	movs	r7, r2
 8000af2:	401c      	ands	r4, r3
 8000af4:	0006      	movs	r6, r0
 8000af6:	e669      	b.n	80007cc <__aeabi_dadd+0x108>
 8000af8:	0020      	movs	r0, r4
 8000afa:	4338      	orrs	r0, r7
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d1d1      	bne.n	8000aa4 <__aeabi_dadd+0x3e0>
 8000b00:	2800      	cmp	r0, #0
 8000b02:	d15b      	bne.n	8000bbc <__aeabi_dadd+0x4f8>
 8000b04:	001c      	movs	r4, r3
 8000b06:	4314      	orrs	r4, r2
 8000b08:	d100      	bne.n	8000b0c <__aeabi_dadd+0x448>
 8000b0a:	e0a8      	b.n	8000c5e <__aeabi_dadd+0x59a>
 8000b0c:	001c      	movs	r4, r3
 8000b0e:	0017      	movs	r7, r2
 8000b10:	46d8      	mov	r8, fp
 8000b12:	e65b      	b.n	80007cc <__aeabi_dadd+0x108>
 8000b14:	0006      	movs	r6, r0
 8000b16:	2400      	movs	r4, #0
 8000b18:	2700      	movs	r7, #0
 8000b1a:	e697      	b.n	800084c <__aeabi_dadd+0x188>
 8000b1c:	4650      	mov	r0, sl
 8000b1e:	000b      	movs	r3, r1
 8000b20:	3820      	subs	r0, #32
 8000b22:	40c3      	lsrs	r3, r0
 8000b24:	4699      	mov	r9, r3
 8000b26:	4653      	mov	r3, sl
 8000b28:	2b20      	cmp	r3, #32
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_dadd+0x46a>
 8000b2c:	e095      	b.n	8000c5a <__aeabi_dadd+0x596>
 8000b2e:	2340      	movs	r3, #64	; 0x40
 8000b30:	4650      	mov	r0, sl
 8000b32:	1a1b      	subs	r3, r3, r0
 8000b34:	4099      	lsls	r1, r3
 8000b36:	430a      	orrs	r2, r1
 8000b38:	1e51      	subs	r1, r2, #1
 8000b3a:	418a      	sbcs	r2, r1
 8000b3c:	464b      	mov	r3, r9
 8000b3e:	2100      	movs	r1, #0
 8000b40:	431a      	orrs	r2, r3
 8000b42:	e69f      	b.n	8000884 <__aeabi_dadd+0x1c0>
 8000b44:	2e00      	cmp	r6, #0
 8000b46:	d130      	bne.n	8000baa <__aeabi_dadd+0x4e6>
 8000b48:	0026      	movs	r6, r4
 8000b4a:	433e      	orrs	r6, r7
 8000b4c:	d067      	beq.n	8000c1e <__aeabi_dadd+0x55a>
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	469a      	mov	sl, r3
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d01c      	beq.n	8000b90 <__aeabi_dadd+0x4cc>
 8000b56:	4e61      	ldr	r6, [pc, #388]	; (8000cdc <__aeabi_dadd+0x618>)
 8000b58:	42b0      	cmp	r0, r6
 8000b5a:	d060      	beq.n	8000c1e <__aeabi_dadd+0x55a>
 8000b5c:	4653      	mov	r3, sl
 8000b5e:	2b38      	cmp	r3, #56	; 0x38
 8000b60:	dd00      	ble.n	8000b64 <__aeabi_dadd+0x4a0>
 8000b62:	e096      	b.n	8000c92 <__aeabi_dadd+0x5ce>
 8000b64:	2b1f      	cmp	r3, #31
 8000b66:	dd00      	ble.n	8000b6a <__aeabi_dadd+0x4a6>
 8000b68:	e09f      	b.n	8000caa <__aeabi_dadd+0x5e6>
 8000b6a:	2620      	movs	r6, #32
 8000b6c:	1af3      	subs	r3, r6, r3
 8000b6e:	0026      	movs	r6, r4
 8000b70:	409e      	lsls	r6, r3
 8000b72:	469c      	mov	ip, r3
 8000b74:	46b3      	mov	fp, r6
 8000b76:	4653      	mov	r3, sl
 8000b78:	003e      	movs	r6, r7
 8000b7a:	40de      	lsrs	r6, r3
 8000b7c:	0033      	movs	r3, r6
 8000b7e:	465e      	mov	r6, fp
 8000b80:	431e      	orrs	r6, r3
 8000b82:	4663      	mov	r3, ip
 8000b84:	409f      	lsls	r7, r3
 8000b86:	1e7b      	subs	r3, r7, #1
 8000b88:	419f      	sbcs	r7, r3
 8000b8a:	4653      	mov	r3, sl
 8000b8c:	40dc      	lsrs	r4, r3
 8000b8e:	4337      	orrs	r7, r6
 8000b90:	18bf      	adds	r7, r7, r2
 8000b92:	4297      	cmp	r7, r2
 8000b94:	4192      	sbcs	r2, r2
 8000b96:	1864      	adds	r4, r4, r1
 8000b98:	4252      	negs	r2, r2
 8000b9a:	18a4      	adds	r4, r4, r2
 8000b9c:	0006      	movs	r6, r0
 8000b9e:	e678      	b.n	8000892 <__aeabi_dadd+0x1ce>
 8000ba0:	4327      	orrs	r7, r4
 8000ba2:	1e7c      	subs	r4, r7, #1
 8000ba4:	41a7      	sbcs	r7, r4
 8000ba6:	2400      	movs	r4, #0
 8000ba8:	e737      	b.n	8000a1a <__aeabi_dadd+0x356>
 8000baa:	4e4c      	ldr	r6, [pc, #304]	; (8000cdc <__aeabi_dadd+0x618>)
 8000bac:	42b0      	cmp	r0, r6
 8000bae:	d036      	beq.n	8000c1e <__aeabi_dadd+0x55a>
 8000bb0:	2680      	movs	r6, #128	; 0x80
 8000bb2:	425b      	negs	r3, r3
 8000bb4:	0436      	lsls	r6, r6, #16
 8000bb6:	469a      	mov	sl, r3
 8000bb8:	4334      	orrs	r4, r6
 8000bba:	e7cf      	b.n	8000b5c <__aeabi_dadd+0x498>
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	4310      	orrs	r0, r2
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_dadd+0x500>
 8000bc2:	e603      	b.n	80007cc <__aeabi_dadd+0x108>
 8000bc4:	1ab8      	subs	r0, r7, r2
 8000bc6:	4684      	mov	ip, r0
 8000bc8:	4567      	cmp	r7, ip
 8000bca:	41ad      	sbcs	r5, r5
 8000bcc:	1ae0      	subs	r0, r4, r3
 8000bce:	426d      	negs	r5, r5
 8000bd0:	1b40      	subs	r0, r0, r5
 8000bd2:	0205      	lsls	r5, r0, #8
 8000bd4:	d400      	bmi.n	8000bd8 <__aeabi_dadd+0x514>
 8000bd6:	e62c      	b.n	8000832 <__aeabi_dadd+0x16e>
 8000bd8:	1bd7      	subs	r7, r2, r7
 8000bda:	42ba      	cmp	r2, r7
 8000bdc:	4192      	sbcs	r2, r2
 8000bde:	1b1c      	subs	r4, r3, r4
 8000be0:	4252      	negs	r2, r2
 8000be2:	1aa4      	subs	r4, r4, r2
 8000be4:	46d8      	mov	r8, fp
 8000be6:	e5f1      	b.n	80007cc <__aeabi_dadd+0x108>
 8000be8:	0018      	movs	r0, r3
 8000bea:	4310      	orrs	r0, r2
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_dadd+0x52c>
 8000bee:	e763      	b.n	8000ab8 <__aeabi_dadd+0x3f4>
 8000bf0:	08f8      	lsrs	r0, r7, #3
 8000bf2:	0767      	lsls	r7, r4, #29
 8000bf4:	4307      	orrs	r7, r0
 8000bf6:	2080      	movs	r0, #128	; 0x80
 8000bf8:	08e4      	lsrs	r4, r4, #3
 8000bfa:	0300      	lsls	r0, r0, #12
 8000bfc:	4204      	tst	r4, r0
 8000bfe:	d008      	beq.n	8000c12 <__aeabi_dadd+0x54e>
 8000c00:	08dd      	lsrs	r5, r3, #3
 8000c02:	4205      	tst	r5, r0
 8000c04:	d105      	bne.n	8000c12 <__aeabi_dadd+0x54e>
 8000c06:	08d2      	lsrs	r2, r2, #3
 8000c08:	0759      	lsls	r1, r3, #29
 8000c0a:	4311      	orrs	r1, r2
 8000c0c:	000f      	movs	r7, r1
 8000c0e:	002c      	movs	r4, r5
 8000c10:	46d8      	mov	r8, fp
 8000c12:	0f7b      	lsrs	r3, r7, #29
 8000c14:	00e4      	lsls	r4, r4, #3
 8000c16:	431c      	orrs	r4, r3
 8000c18:	00ff      	lsls	r7, r7, #3
 8000c1a:	4e30      	ldr	r6, [pc, #192]	; (8000cdc <__aeabi_dadd+0x618>)
 8000c1c:	e5d6      	b.n	80007cc <__aeabi_dadd+0x108>
 8000c1e:	000c      	movs	r4, r1
 8000c20:	0017      	movs	r7, r2
 8000c22:	0006      	movs	r6, r0
 8000c24:	e5d2      	b.n	80007cc <__aeabi_dadd+0x108>
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d038      	beq.n	8000c9c <__aeabi_dadd+0x5d8>
 8000c2a:	000b      	movs	r3, r1
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_dadd+0x56e>
 8000c30:	e742      	b.n	8000ab8 <__aeabi_dadd+0x3f4>
 8000c32:	08f8      	lsrs	r0, r7, #3
 8000c34:	0767      	lsls	r7, r4, #29
 8000c36:	4307      	orrs	r7, r0
 8000c38:	2080      	movs	r0, #128	; 0x80
 8000c3a:	08e4      	lsrs	r4, r4, #3
 8000c3c:	0300      	lsls	r0, r0, #12
 8000c3e:	4204      	tst	r4, r0
 8000c40:	d0e7      	beq.n	8000c12 <__aeabi_dadd+0x54e>
 8000c42:	08cb      	lsrs	r3, r1, #3
 8000c44:	4203      	tst	r3, r0
 8000c46:	d1e4      	bne.n	8000c12 <__aeabi_dadd+0x54e>
 8000c48:	08d2      	lsrs	r2, r2, #3
 8000c4a:	0749      	lsls	r1, r1, #29
 8000c4c:	4311      	orrs	r1, r2
 8000c4e:	000f      	movs	r7, r1
 8000c50:	001c      	movs	r4, r3
 8000c52:	e7de      	b.n	8000c12 <__aeabi_dadd+0x54e>
 8000c54:	2700      	movs	r7, #0
 8000c56:	2400      	movs	r4, #0
 8000c58:	e5d5      	b.n	8000806 <__aeabi_dadd+0x142>
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	e76b      	b.n	8000b36 <__aeabi_dadd+0x472>
 8000c5e:	2500      	movs	r5, #0
 8000c60:	2700      	movs	r7, #0
 8000c62:	e5f3      	b.n	800084c <__aeabi_dadd+0x188>
 8000c64:	464e      	mov	r6, r9
 8000c66:	0025      	movs	r5, r4
 8000c68:	3e20      	subs	r6, #32
 8000c6a:	40f5      	lsrs	r5, r6
 8000c6c:	464b      	mov	r3, r9
 8000c6e:	002e      	movs	r6, r5
 8000c70:	2b20      	cmp	r3, #32
 8000c72:	d02d      	beq.n	8000cd0 <__aeabi_dadd+0x60c>
 8000c74:	2540      	movs	r5, #64	; 0x40
 8000c76:	1aed      	subs	r5, r5, r3
 8000c78:	40ac      	lsls	r4, r5
 8000c7a:	4327      	orrs	r7, r4
 8000c7c:	1e7c      	subs	r4, r7, #1
 8000c7e:	41a7      	sbcs	r7, r4
 8000c80:	2400      	movs	r4, #0
 8000c82:	4337      	orrs	r7, r6
 8000c84:	e6c9      	b.n	8000a1a <__aeabi_dadd+0x356>
 8000c86:	2480      	movs	r4, #128	; 0x80
 8000c88:	2500      	movs	r5, #0
 8000c8a:	0324      	lsls	r4, r4, #12
 8000c8c:	4e13      	ldr	r6, [pc, #76]	; (8000cdc <__aeabi_dadd+0x618>)
 8000c8e:	2700      	movs	r7, #0
 8000c90:	e5dc      	b.n	800084c <__aeabi_dadd+0x188>
 8000c92:	4327      	orrs	r7, r4
 8000c94:	1e7c      	subs	r4, r7, #1
 8000c96:	41a7      	sbcs	r7, r4
 8000c98:	2400      	movs	r4, #0
 8000c9a:	e779      	b.n	8000b90 <__aeabi_dadd+0x4cc>
 8000c9c:	000c      	movs	r4, r1
 8000c9e:	0017      	movs	r7, r2
 8000ca0:	4e0e      	ldr	r6, [pc, #56]	; (8000cdc <__aeabi_dadd+0x618>)
 8000ca2:	e593      	b.n	80007cc <__aeabi_dadd+0x108>
 8000ca4:	000c      	movs	r4, r1
 8000ca6:	0017      	movs	r7, r2
 8000ca8:	e590      	b.n	80007cc <__aeabi_dadd+0x108>
 8000caa:	4656      	mov	r6, sl
 8000cac:	0023      	movs	r3, r4
 8000cae:	3e20      	subs	r6, #32
 8000cb0:	40f3      	lsrs	r3, r6
 8000cb2:	4699      	mov	r9, r3
 8000cb4:	4653      	mov	r3, sl
 8000cb6:	2b20      	cmp	r3, #32
 8000cb8:	d00e      	beq.n	8000cd8 <__aeabi_dadd+0x614>
 8000cba:	2340      	movs	r3, #64	; 0x40
 8000cbc:	4656      	mov	r6, sl
 8000cbe:	1b9b      	subs	r3, r3, r6
 8000cc0:	409c      	lsls	r4, r3
 8000cc2:	4327      	orrs	r7, r4
 8000cc4:	1e7c      	subs	r4, r7, #1
 8000cc6:	41a7      	sbcs	r7, r4
 8000cc8:	464b      	mov	r3, r9
 8000cca:	2400      	movs	r4, #0
 8000ccc:	431f      	orrs	r7, r3
 8000cce:	e75f      	b.n	8000b90 <__aeabi_dadd+0x4cc>
 8000cd0:	2400      	movs	r4, #0
 8000cd2:	e7d2      	b.n	8000c7a <__aeabi_dadd+0x5b6>
 8000cd4:	0017      	movs	r7, r2
 8000cd6:	e5b2      	b.n	800083e <__aeabi_dadd+0x17a>
 8000cd8:	2400      	movs	r4, #0
 8000cda:	e7f2      	b.n	8000cc2 <__aeabi_dadd+0x5fe>
 8000cdc:	000007ff 	.word	0x000007ff
 8000ce0:	ff7fffff 	.word	0xff7fffff

08000ce4 <__aeabi_ddiv>:
 8000ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ce6:	4657      	mov	r7, sl
 8000ce8:	4645      	mov	r5, r8
 8000cea:	46de      	mov	lr, fp
 8000cec:	464e      	mov	r6, r9
 8000cee:	b5e0      	push	{r5, r6, r7, lr}
 8000cf0:	004c      	lsls	r4, r1, #1
 8000cf2:	030e      	lsls	r6, r1, #12
 8000cf4:	b087      	sub	sp, #28
 8000cf6:	4683      	mov	fp, r0
 8000cf8:	4692      	mov	sl, r2
 8000cfa:	001d      	movs	r5, r3
 8000cfc:	4680      	mov	r8, r0
 8000cfe:	0b36      	lsrs	r6, r6, #12
 8000d00:	0d64      	lsrs	r4, r4, #21
 8000d02:	0fcf      	lsrs	r7, r1, #31
 8000d04:	2c00      	cmp	r4, #0
 8000d06:	d04f      	beq.n	8000da8 <__aeabi_ddiv+0xc4>
 8000d08:	4b6f      	ldr	r3, [pc, #444]	; (8000ec8 <__aeabi_ddiv+0x1e4>)
 8000d0a:	429c      	cmp	r4, r3
 8000d0c:	d035      	beq.n	8000d7a <__aeabi_ddiv+0x96>
 8000d0e:	2380      	movs	r3, #128	; 0x80
 8000d10:	0f42      	lsrs	r2, r0, #29
 8000d12:	041b      	lsls	r3, r3, #16
 8000d14:	00f6      	lsls	r6, r6, #3
 8000d16:	4313      	orrs	r3, r2
 8000d18:	4333      	orrs	r3, r6
 8000d1a:	4699      	mov	r9, r3
 8000d1c:	00c3      	lsls	r3, r0, #3
 8000d1e:	4698      	mov	r8, r3
 8000d20:	4b6a      	ldr	r3, [pc, #424]	; (8000ecc <__aeabi_ddiv+0x1e8>)
 8000d22:	2600      	movs	r6, #0
 8000d24:	469c      	mov	ip, r3
 8000d26:	2300      	movs	r3, #0
 8000d28:	4464      	add	r4, ip
 8000d2a:	9303      	str	r3, [sp, #12]
 8000d2c:	032b      	lsls	r3, r5, #12
 8000d2e:	0b1b      	lsrs	r3, r3, #12
 8000d30:	469b      	mov	fp, r3
 8000d32:	006b      	lsls	r3, r5, #1
 8000d34:	0fed      	lsrs	r5, r5, #31
 8000d36:	4650      	mov	r0, sl
 8000d38:	0d5b      	lsrs	r3, r3, #21
 8000d3a:	9501      	str	r5, [sp, #4]
 8000d3c:	d05e      	beq.n	8000dfc <__aeabi_ddiv+0x118>
 8000d3e:	4a62      	ldr	r2, [pc, #392]	; (8000ec8 <__aeabi_ddiv+0x1e4>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d053      	beq.n	8000dec <__aeabi_ddiv+0x108>
 8000d44:	465a      	mov	r2, fp
 8000d46:	00d1      	lsls	r1, r2, #3
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	0f40      	lsrs	r0, r0, #29
 8000d4c:	0412      	lsls	r2, r2, #16
 8000d4e:	4302      	orrs	r2, r0
 8000d50:	430a      	orrs	r2, r1
 8000d52:	4693      	mov	fp, r2
 8000d54:	4652      	mov	r2, sl
 8000d56:	00d1      	lsls	r1, r2, #3
 8000d58:	4a5c      	ldr	r2, [pc, #368]	; (8000ecc <__aeabi_ddiv+0x1e8>)
 8000d5a:	4694      	mov	ip, r2
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4463      	add	r3, ip
 8000d60:	0038      	movs	r0, r7
 8000d62:	4068      	eors	r0, r5
 8000d64:	4684      	mov	ip, r0
 8000d66:	9002      	str	r0, [sp, #8]
 8000d68:	1ae4      	subs	r4, r4, r3
 8000d6a:	4316      	orrs	r6, r2
 8000d6c:	2e0f      	cmp	r6, #15
 8000d6e:	d900      	bls.n	8000d72 <__aeabi_ddiv+0x8e>
 8000d70:	e0b4      	b.n	8000edc <__aeabi_ddiv+0x1f8>
 8000d72:	4b57      	ldr	r3, [pc, #348]	; (8000ed0 <__aeabi_ddiv+0x1ec>)
 8000d74:	00b6      	lsls	r6, r6, #2
 8000d76:	599b      	ldr	r3, [r3, r6]
 8000d78:	469f      	mov	pc, r3
 8000d7a:	0003      	movs	r3, r0
 8000d7c:	4333      	orrs	r3, r6
 8000d7e:	4699      	mov	r9, r3
 8000d80:	d16c      	bne.n	8000e5c <__aeabi_ddiv+0x178>
 8000d82:	2300      	movs	r3, #0
 8000d84:	4698      	mov	r8, r3
 8000d86:	3302      	adds	r3, #2
 8000d88:	2608      	movs	r6, #8
 8000d8a:	9303      	str	r3, [sp, #12]
 8000d8c:	e7ce      	b.n	8000d2c <__aeabi_ddiv+0x48>
 8000d8e:	46cb      	mov	fp, r9
 8000d90:	4641      	mov	r1, r8
 8000d92:	9a03      	ldr	r2, [sp, #12]
 8000d94:	9701      	str	r7, [sp, #4]
 8000d96:	2a02      	cmp	r2, #2
 8000d98:	d165      	bne.n	8000e66 <__aeabi_ddiv+0x182>
 8000d9a:	9b01      	ldr	r3, [sp, #4]
 8000d9c:	4c4a      	ldr	r4, [pc, #296]	; (8000ec8 <__aeabi_ddiv+0x1e4>)
 8000d9e:	469c      	mov	ip, r3
 8000da0:	2300      	movs	r3, #0
 8000da2:	2200      	movs	r2, #0
 8000da4:	4698      	mov	r8, r3
 8000da6:	e06b      	b.n	8000e80 <__aeabi_ddiv+0x19c>
 8000da8:	0003      	movs	r3, r0
 8000daa:	4333      	orrs	r3, r6
 8000dac:	4699      	mov	r9, r3
 8000dae:	d04e      	beq.n	8000e4e <__aeabi_ddiv+0x16a>
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d100      	bne.n	8000db6 <__aeabi_ddiv+0xd2>
 8000db4:	e1bc      	b.n	8001130 <__aeabi_ddiv+0x44c>
 8000db6:	0030      	movs	r0, r6
 8000db8:	f001 fa2c 	bl	8002214 <__clzsi2>
 8000dbc:	0003      	movs	r3, r0
 8000dbe:	3b0b      	subs	r3, #11
 8000dc0:	2b1c      	cmp	r3, #28
 8000dc2:	dd00      	ble.n	8000dc6 <__aeabi_ddiv+0xe2>
 8000dc4:	e1ac      	b.n	8001120 <__aeabi_ddiv+0x43c>
 8000dc6:	221d      	movs	r2, #29
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	465a      	mov	r2, fp
 8000dcc:	0001      	movs	r1, r0
 8000dce:	40da      	lsrs	r2, r3
 8000dd0:	3908      	subs	r1, #8
 8000dd2:	408e      	lsls	r6, r1
 8000dd4:	0013      	movs	r3, r2
 8000dd6:	4333      	orrs	r3, r6
 8000dd8:	4699      	mov	r9, r3
 8000dda:	465b      	mov	r3, fp
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	4698      	mov	r8, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	4c3c      	ldr	r4, [pc, #240]	; (8000ed4 <__aeabi_ddiv+0x1f0>)
 8000de4:	2600      	movs	r6, #0
 8000de6:	1a24      	subs	r4, r4, r0
 8000de8:	9303      	str	r3, [sp, #12]
 8000dea:	e79f      	b.n	8000d2c <__aeabi_ddiv+0x48>
 8000dec:	4651      	mov	r1, sl
 8000dee:	465a      	mov	r2, fp
 8000df0:	4311      	orrs	r1, r2
 8000df2:	d129      	bne.n	8000e48 <__aeabi_ddiv+0x164>
 8000df4:	2200      	movs	r2, #0
 8000df6:	4693      	mov	fp, r2
 8000df8:	3202      	adds	r2, #2
 8000dfa:	e7b1      	b.n	8000d60 <__aeabi_ddiv+0x7c>
 8000dfc:	4659      	mov	r1, fp
 8000dfe:	4301      	orrs	r1, r0
 8000e00:	d01e      	beq.n	8000e40 <__aeabi_ddiv+0x15c>
 8000e02:	465b      	mov	r3, fp
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d100      	bne.n	8000e0a <__aeabi_ddiv+0x126>
 8000e08:	e19e      	b.n	8001148 <__aeabi_ddiv+0x464>
 8000e0a:	4658      	mov	r0, fp
 8000e0c:	f001 fa02 	bl	8002214 <__clzsi2>
 8000e10:	0003      	movs	r3, r0
 8000e12:	3b0b      	subs	r3, #11
 8000e14:	2b1c      	cmp	r3, #28
 8000e16:	dd00      	ble.n	8000e1a <__aeabi_ddiv+0x136>
 8000e18:	e18f      	b.n	800113a <__aeabi_ddiv+0x456>
 8000e1a:	0002      	movs	r2, r0
 8000e1c:	4659      	mov	r1, fp
 8000e1e:	3a08      	subs	r2, #8
 8000e20:	4091      	lsls	r1, r2
 8000e22:	468b      	mov	fp, r1
 8000e24:	211d      	movs	r1, #29
 8000e26:	1acb      	subs	r3, r1, r3
 8000e28:	4651      	mov	r1, sl
 8000e2a:	40d9      	lsrs	r1, r3
 8000e2c:	000b      	movs	r3, r1
 8000e2e:	4659      	mov	r1, fp
 8000e30:	430b      	orrs	r3, r1
 8000e32:	4651      	mov	r1, sl
 8000e34:	469b      	mov	fp, r3
 8000e36:	4091      	lsls	r1, r2
 8000e38:	4b26      	ldr	r3, [pc, #152]	; (8000ed4 <__aeabi_ddiv+0x1f0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	1a1b      	subs	r3, r3, r0
 8000e3e:	e78f      	b.n	8000d60 <__aeabi_ddiv+0x7c>
 8000e40:	2300      	movs	r3, #0
 8000e42:	2201      	movs	r2, #1
 8000e44:	469b      	mov	fp, r3
 8000e46:	e78b      	b.n	8000d60 <__aeabi_ddiv+0x7c>
 8000e48:	4651      	mov	r1, sl
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	e788      	b.n	8000d60 <__aeabi_ddiv+0x7c>
 8000e4e:	2300      	movs	r3, #0
 8000e50:	4698      	mov	r8, r3
 8000e52:	3301      	adds	r3, #1
 8000e54:	2604      	movs	r6, #4
 8000e56:	2400      	movs	r4, #0
 8000e58:	9303      	str	r3, [sp, #12]
 8000e5a:	e767      	b.n	8000d2c <__aeabi_ddiv+0x48>
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	46b1      	mov	r9, r6
 8000e60:	9303      	str	r3, [sp, #12]
 8000e62:	260c      	movs	r6, #12
 8000e64:	e762      	b.n	8000d2c <__aeabi_ddiv+0x48>
 8000e66:	2a03      	cmp	r2, #3
 8000e68:	d100      	bne.n	8000e6c <__aeabi_ddiv+0x188>
 8000e6a:	e25c      	b.n	8001326 <__aeabi_ddiv+0x642>
 8000e6c:	9b01      	ldr	r3, [sp, #4]
 8000e6e:	2a01      	cmp	r2, #1
 8000e70:	d000      	beq.n	8000e74 <__aeabi_ddiv+0x190>
 8000e72:	e1e4      	b.n	800123e <__aeabi_ddiv+0x55a>
 8000e74:	4013      	ands	r3, r2
 8000e76:	469c      	mov	ip, r3
 8000e78:	2300      	movs	r3, #0
 8000e7a:	2400      	movs	r4, #0
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	4698      	mov	r8, r3
 8000e80:	2100      	movs	r1, #0
 8000e82:	0312      	lsls	r2, r2, #12
 8000e84:	0b13      	lsrs	r3, r2, #12
 8000e86:	0d0a      	lsrs	r2, r1, #20
 8000e88:	0512      	lsls	r2, r2, #20
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	0523      	lsls	r3, r4, #20
 8000e8e:	4c12      	ldr	r4, [pc, #72]	; (8000ed8 <__aeabi_ddiv+0x1f4>)
 8000e90:	4640      	mov	r0, r8
 8000e92:	4022      	ands	r2, r4
 8000e94:	4313      	orrs	r3, r2
 8000e96:	4662      	mov	r2, ip
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	07d2      	lsls	r2, r2, #31
 8000e9c:	085b      	lsrs	r3, r3, #1
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	0019      	movs	r1, r3
 8000ea2:	b007      	add	sp, #28
 8000ea4:	bc3c      	pop	{r2, r3, r4, r5}
 8000ea6:	4690      	mov	r8, r2
 8000ea8:	4699      	mov	r9, r3
 8000eaa:	46a2      	mov	sl, r4
 8000eac:	46ab      	mov	fp, r5
 8000eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	2280      	movs	r2, #128	; 0x80
 8000eb4:	469c      	mov	ip, r3
 8000eb6:	0312      	lsls	r2, r2, #12
 8000eb8:	4698      	mov	r8, r3
 8000eba:	4c03      	ldr	r4, [pc, #12]	; (8000ec8 <__aeabi_ddiv+0x1e4>)
 8000ebc:	e7e0      	b.n	8000e80 <__aeabi_ddiv+0x19c>
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	4c01      	ldr	r4, [pc, #4]	; (8000ec8 <__aeabi_ddiv+0x1e4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4698      	mov	r8, r3
 8000ec6:	e7db      	b.n	8000e80 <__aeabi_ddiv+0x19c>
 8000ec8:	000007ff 	.word	0x000007ff
 8000ecc:	fffffc01 	.word	0xfffffc01
 8000ed0:	080124b8 	.word	0x080124b8
 8000ed4:	fffffc0d 	.word	0xfffffc0d
 8000ed8:	800fffff 	.word	0x800fffff
 8000edc:	45d9      	cmp	r9, fp
 8000ede:	d900      	bls.n	8000ee2 <__aeabi_ddiv+0x1fe>
 8000ee0:	e139      	b.n	8001156 <__aeabi_ddiv+0x472>
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_ddiv+0x202>
 8000ee4:	e134      	b.n	8001150 <__aeabi_ddiv+0x46c>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	4646      	mov	r6, r8
 8000eea:	464d      	mov	r5, r9
 8000eec:	469a      	mov	sl, r3
 8000eee:	3c01      	subs	r4, #1
 8000ef0:	465b      	mov	r3, fp
 8000ef2:	0e0a      	lsrs	r2, r1, #24
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	020b      	lsls	r3, r1, #8
 8000efa:	0c17      	lsrs	r7, r2, #16
 8000efc:	9303      	str	r3, [sp, #12]
 8000efe:	0413      	lsls	r3, r2, #16
 8000f00:	0c1b      	lsrs	r3, r3, #16
 8000f02:	0039      	movs	r1, r7
 8000f04:	0028      	movs	r0, r5
 8000f06:	4690      	mov	r8, r2
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	f7ff f929 	bl	8000160 <__udivsi3>
 8000f0e:	0002      	movs	r2, r0
 8000f10:	9b01      	ldr	r3, [sp, #4]
 8000f12:	4683      	mov	fp, r0
 8000f14:	435a      	muls	r2, r3
 8000f16:	0028      	movs	r0, r5
 8000f18:	0039      	movs	r1, r7
 8000f1a:	4691      	mov	r9, r2
 8000f1c:	f7ff f9a6 	bl	800026c <__aeabi_uidivmod>
 8000f20:	0c35      	lsrs	r5, r6, #16
 8000f22:	0409      	lsls	r1, r1, #16
 8000f24:	430d      	orrs	r5, r1
 8000f26:	45a9      	cmp	r9, r5
 8000f28:	d90d      	bls.n	8000f46 <__aeabi_ddiv+0x262>
 8000f2a:	465b      	mov	r3, fp
 8000f2c:	4445      	add	r5, r8
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	45a8      	cmp	r8, r5
 8000f32:	d900      	bls.n	8000f36 <__aeabi_ddiv+0x252>
 8000f34:	e13a      	b.n	80011ac <__aeabi_ddiv+0x4c8>
 8000f36:	45a9      	cmp	r9, r5
 8000f38:	d800      	bhi.n	8000f3c <__aeabi_ddiv+0x258>
 8000f3a:	e137      	b.n	80011ac <__aeabi_ddiv+0x4c8>
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	425b      	negs	r3, r3
 8000f40:	469c      	mov	ip, r3
 8000f42:	4445      	add	r5, r8
 8000f44:	44e3      	add	fp, ip
 8000f46:	464b      	mov	r3, r9
 8000f48:	1aeb      	subs	r3, r5, r3
 8000f4a:	0039      	movs	r1, r7
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	9304      	str	r3, [sp, #16]
 8000f50:	f7ff f906 	bl	8000160 <__udivsi3>
 8000f54:	9b01      	ldr	r3, [sp, #4]
 8000f56:	0005      	movs	r5, r0
 8000f58:	4343      	muls	r3, r0
 8000f5a:	0039      	movs	r1, r7
 8000f5c:	9804      	ldr	r0, [sp, #16]
 8000f5e:	4699      	mov	r9, r3
 8000f60:	f7ff f984 	bl	800026c <__aeabi_uidivmod>
 8000f64:	0433      	lsls	r3, r6, #16
 8000f66:	0409      	lsls	r1, r1, #16
 8000f68:	0c1b      	lsrs	r3, r3, #16
 8000f6a:	430b      	orrs	r3, r1
 8000f6c:	4599      	cmp	r9, r3
 8000f6e:	d909      	bls.n	8000f84 <__aeabi_ddiv+0x2a0>
 8000f70:	4443      	add	r3, r8
 8000f72:	1e6a      	subs	r2, r5, #1
 8000f74:	4598      	cmp	r8, r3
 8000f76:	d900      	bls.n	8000f7a <__aeabi_ddiv+0x296>
 8000f78:	e11a      	b.n	80011b0 <__aeabi_ddiv+0x4cc>
 8000f7a:	4599      	cmp	r9, r3
 8000f7c:	d800      	bhi.n	8000f80 <__aeabi_ddiv+0x29c>
 8000f7e:	e117      	b.n	80011b0 <__aeabi_ddiv+0x4cc>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4443      	add	r3, r8
 8000f84:	464a      	mov	r2, r9
 8000f86:	1a9b      	subs	r3, r3, r2
 8000f88:	465a      	mov	r2, fp
 8000f8a:	0412      	lsls	r2, r2, #16
 8000f8c:	432a      	orrs	r2, r5
 8000f8e:	9903      	ldr	r1, [sp, #12]
 8000f90:	4693      	mov	fp, r2
 8000f92:	0c10      	lsrs	r0, r2, #16
 8000f94:	0c0a      	lsrs	r2, r1, #16
 8000f96:	4691      	mov	r9, r2
 8000f98:	0409      	lsls	r1, r1, #16
 8000f9a:	465a      	mov	r2, fp
 8000f9c:	0c09      	lsrs	r1, r1, #16
 8000f9e:	464e      	mov	r6, r9
 8000fa0:	000d      	movs	r5, r1
 8000fa2:	0412      	lsls	r2, r2, #16
 8000fa4:	0c12      	lsrs	r2, r2, #16
 8000fa6:	4345      	muls	r5, r0
 8000fa8:	9105      	str	r1, [sp, #20]
 8000faa:	4351      	muls	r1, r2
 8000fac:	4372      	muls	r2, r6
 8000fae:	4370      	muls	r0, r6
 8000fb0:	1952      	adds	r2, r2, r5
 8000fb2:	0c0e      	lsrs	r6, r1, #16
 8000fb4:	18b2      	adds	r2, r6, r2
 8000fb6:	4295      	cmp	r5, r2
 8000fb8:	d903      	bls.n	8000fc2 <__aeabi_ddiv+0x2de>
 8000fba:	2580      	movs	r5, #128	; 0x80
 8000fbc:	026d      	lsls	r5, r5, #9
 8000fbe:	46ac      	mov	ip, r5
 8000fc0:	4460      	add	r0, ip
 8000fc2:	0c15      	lsrs	r5, r2, #16
 8000fc4:	0409      	lsls	r1, r1, #16
 8000fc6:	0412      	lsls	r2, r2, #16
 8000fc8:	0c09      	lsrs	r1, r1, #16
 8000fca:	1828      	adds	r0, r5, r0
 8000fcc:	1852      	adds	r2, r2, r1
 8000fce:	4283      	cmp	r3, r0
 8000fd0:	d200      	bcs.n	8000fd4 <__aeabi_ddiv+0x2f0>
 8000fd2:	e0ce      	b.n	8001172 <__aeabi_ddiv+0x48e>
 8000fd4:	d100      	bne.n	8000fd8 <__aeabi_ddiv+0x2f4>
 8000fd6:	e0c8      	b.n	800116a <__aeabi_ddiv+0x486>
 8000fd8:	1a1d      	subs	r5, r3, r0
 8000fda:	4653      	mov	r3, sl
 8000fdc:	1a9e      	subs	r6, r3, r2
 8000fde:	45b2      	cmp	sl, r6
 8000fe0:	4192      	sbcs	r2, r2
 8000fe2:	4252      	negs	r2, r2
 8000fe4:	1aab      	subs	r3, r5, r2
 8000fe6:	469a      	mov	sl, r3
 8000fe8:	4598      	cmp	r8, r3
 8000fea:	d100      	bne.n	8000fee <__aeabi_ddiv+0x30a>
 8000fec:	e117      	b.n	800121e <__aeabi_ddiv+0x53a>
 8000fee:	0039      	movs	r1, r7
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f7ff f8b5 	bl	8000160 <__udivsi3>
 8000ff6:	9b01      	ldr	r3, [sp, #4]
 8000ff8:	0005      	movs	r5, r0
 8000ffa:	4343      	muls	r3, r0
 8000ffc:	0039      	movs	r1, r7
 8000ffe:	4650      	mov	r0, sl
 8001000:	9304      	str	r3, [sp, #16]
 8001002:	f7ff f933 	bl	800026c <__aeabi_uidivmod>
 8001006:	9804      	ldr	r0, [sp, #16]
 8001008:	040b      	lsls	r3, r1, #16
 800100a:	0c31      	lsrs	r1, r6, #16
 800100c:	4319      	orrs	r1, r3
 800100e:	4288      	cmp	r0, r1
 8001010:	d909      	bls.n	8001026 <__aeabi_ddiv+0x342>
 8001012:	4441      	add	r1, r8
 8001014:	1e6b      	subs	r3, r5, #1
 8001016:	4588      	cmp	r8, r1
 8001018:	d900      	bls.n	800101c <__aeabi_ddiv+0x338>
 800101a:	e107      	b.n	800122c <__aeabi_ddiv+0x548>
 800101c:	4288      	cmp	r0, r1
 800101e:	d800      	bhi.n	8001022 <__aeabi_ddiv+0x33e>
 8001020:	e104      	b.n	800122c <__aeabi_ddiv+0x548>
 8001022:	3d02      	subs	r5, #2
 8001024:	4441      	add	r1, r8
 8001026:	9b04      	ldr	r3, [sp, #16]
 8001028:	1acb      	subs	r3, r1, r3
 800102a:	0018      	movs	r0, r3
 800102c:	0039      	movs	r1, r7
 800102e:	9304      	str	r3, [sp, #16]
 8001030:	f7ff f896 	bl	8000160 <__udivsi3>
 8001034:	9b01      	ldr	r3, [sp, #4]
 8001036:	4682      	mov	sl, r0
 8001038:	4343      	muls	r3, r0
 800103a:	0039      	movs	r1, r7
 800103c:	9804      	ldr	r0, [sp, #16]
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	f7ff f914 	bl	800026c <__aeabi_uidivmod>
 8001044:	9801      	ldr	r0, [sp, #4]
 8001046:	040b      	lsls	r3, r1, #16
 8001048:	0431      	lsls	r1, r6, #16
 800104a:	0c09      	lsrs	r1, r1, #16
 800104c:	4319      	orrs	r1, r3
 800104e:	4288      	cmp	r0, r1
 8001050:	d90d      	bls.n	800106e <__aeabi_ddiv+0x38a>
 8001052:	4653      	mov	r3, sl
 8001054:	4441      	add	r1, r8
 8001056:	3b01      	subs	r3, #1
 8001058:	4588      	cmp	r8, r1
 800105a:	d900      	bls.n	800105e <__aeabi_ddiv+0x37a>
 800105c:	e0e8      	b.n	8001230 <__aeabi_ddiv+0x54c>
 800105e:	4288      	cmp	r0, r1
 8001060:	d800      	bhi.n	8001064 <__aeabi_ddiv+0x380>
 8001062:	e0e5      	b.n	8001230 <__aeabi_ddiv+0x54c>
 8001064:	2302      	movs	r3, #2
 8001066:	425b      	negs	r3, r3
 8001068:	469c      	mov	ip, r3
 800106a:	4441      	add	r1, r8
 800106c:	44e2      	add	sl, ip
 800106e:	9b01      	ldr	r3, [sp, #4]
 8001070:	042d      	lsls	r5, r5, #16
 8001072:	1ace      	subs	r6, r1, r3
 8001074:	4651      	mov	r1, sl
 8001076:	4329      	orrs	r1, r5
 8001078:	9d05      	ldr	r5, [sp, #20]
 800107a:	464f      	mov	r7, r9
 800107c:	002a      	movs	r2, r5
 800107e:	040b      	lsls	r3, r1, #16
 8001080:	0c08      	lsrs	r0, r1, #16
 8001082:	0c1b      	lsrs	r3, r3, #16
 8001084:	435a      	muls	r2, r3
 8001086:	4345      	muls	r5, r0
 8001088:	437b      	muls	r3, r7
 800108a:	4378      	muls	r0, r7
 800108c:	195b      	adds	r3, r3, r5
 800108e:	0c17      	lsrs	r7, r2, #16
 8001090:	18fb      	adds	r3, r7, r3
 8001092:	429d      	cmp	r5, r3
 8001094:	d903      	bls.n	800109e <__aeabi_ddiv+0x3ba>
 8001096:	2580      	movs	r5, #128	; 0x80
 8001098:	026d      	lsls	r5, r5, #9
 800109a:	46ac      	mov	ip, r5
 800109c:	4460      	add	r0, ip
 800109e:	0c1d      	lsrs	r5, r3, #16
 80010a0:	0412      	lsls	r2, r2, #16
 80010a2:	041b      	lsls	r3, r3, #16
 80010a4:	0c12      	lsrs	r2, r2, #16
 80010a6:	1828      	adds	r0, r5, r0
 80010a8:	189b      	adds	r3, r3, r2
 80010aa:	4286      	cmp	r6, r0
 80010ac:	d200      	bcs.n	80010b0 <__aeabi_ddiv+0x3cc>
 80010ae:	e093      	b.n	80011d8 <__aeabi_ddiv+0x4f4>
 80010b0:	d100      	bne.n	80010b4 <__aeabi_ddiv+0x3d0>
 80010b2:	e08e      	b.n	80011d2 <__aeabi_ddiv+0x4ee>
 80010b4:	2301      	movs	r3, #1
 80010b6:	4319      	orrs	r1, r3
 80010b8:	4ba0      	ldr	r3, [pc, #640]	; (800133c <__aeabi_ddiv+0x658>)
 80010ba:	18e3      	adds	r3, r4, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	dc00      	bgt.n	80010c2 <__aeabi_ddiv+0x3de>
 80010c0:	e099      	b.n	80011f6 <__aeabi_ddiv+0x512>
 80010c2:	074a      	lsls	r2, r1, #29
 80010c4:	d000      	beq.n	80010c8 <__aeabi_ddiv+0x3e4>
 80010c6:	e09e      	b.n	8001206 <__aeabi_ddiv+0x522>
 80010c8:	465a      	mov	r2, fp
 80010ca:	01d2      	lsls	r2, r2, #7
 80010cc:	d506      	bpl.n	80010dc <__aeabi_ddiv+0x3f8>
 80010ce:	465a      	mov	r2, fp
 80010d0:	4b9b      	ldr	r3, [pc, #620]	; (8001340 <__aeabi_ddiv+0x65c>)
 80010d2:	401a      	ands	r2, r3
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	4693      	mov	fp, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	18e3      	adds	r3, r4, r3
 80010dc:	4a99      	ldr	r2, [pc, #612]	; (8001344 <__aeabi_ddiv+0x660>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	dd68      	ble.n	80011b4 <__aeabi_ddiv+0x4d0>
 80010e2:	2301      	movs	r3, #1
 80010e4:	9a02      	ldr	r2, [sp, #8]
 80010e6:	4c98      	ldr	r4, [pc, #608]	; (8001348 <__aeabi_ddiv+0x664>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2300      	movs	r3, #0
 80010ec:	4694      	mov	ip, r2
 80010ee:	4698      	mov	r8, r3
 80010f0:	2200      	movs	r2, #0
 80010f2:	e6c5      	b.n	8000e80 <__aeabi_ddiv+0x19c>
 80010f4:	2280      	movs	r2, #128	; 0x80
 80010f6:	464b      	mov	r3, r9
 80010f8:	0312      	lsls	r2, r2, #12
 80010fa:	4213      	tst	r3, r2
 80010fc:	d00a      	beq.n	8001114 <__aeabi_ddiv+0x430>
 80010fe:	465b      	mov	r3, fp
 8001100:	4213      	tst	r3, r2
 8001102:	d106      	bne.n	8001112 <__aeabi_ddiv+0x42e>
 8001104:	431a      	orrs	r2, r3
 8001106:	0312      	lsls	r2, r2, #12
 8001108:	0b12      	lsrs	r2, r2, #12
 800110a:	46ac      	mov	ip, r5
 800110c:	4688      	mov	r8, r1
 800110e:	4c8e      	ldr	r4, [pc, #568]	; (8001348 <__aeabi_ddiv+0x664>)
 8001110:	e6b6      	b.n	8000e80 <__aeabi_ddiv+0x19c>
 8001112:	464b      	mov	r3, r9
 8001114:	431a      	orrs	r2, r3
 8001116:	0312      	lsls	r2, r2, #12
 8001118:	0b12      	lsrs	r2, r2, #12
 800111a:	46bc      	mov	ip, r7
 800111c:	4c8a      	ldr	r4, [pc, #552]	; (8001348 <__aeabi_ddiv+0x664>)
 800111e:	e6af      	b.n	8000e80 <__aeabi_ddiv+0x19c>
 8001120:	0003      	movs	r3, r0
 8001122:	465a      	mov	r2, fp
 8001124:	3b28      	subs	r3, #40	; 0x28
 8001126:	409a      	lsls	r2, r3
 8001128:	2300      	movs	r3, #0
 800112a:	4691      	mov	r9, r2
 800112c:	4698      	mov	r8, r3
 800112e:	e657      	b.n	8000de0 <__aeabi_ddiv+0xfc>
 8001130:	4658      	mov	r0, fp
 8001132:	f001 f86f 	bl	8002214 <__clzsi2>
 8001136:	3020      	adds	r0, #32
 8001138:	e640      	b.n	8000dbc <__aeabi_ddiv+0xd8>
 800113a:	0003      	movs	r3, r0
 800113c:	4652      	mov	r2, sl
 800113e:	3b28      	subs	r3, #40	; 0x28
 8001140:	409a      	lsls	r2, r3
 8001142:	2100      	movs	r1, #0
 8001144:	4693      	mov	fp, r2
 8001146:	e677      	b.n	8000e38 <__aeabi_ddiv+0x154>
 8001148:	f001 f864 	bl	8002214 <__clzsi2>
 800114c:	3020      	adds	r0, #32
 800114e:	e65f      	b.n	8000e10 <__aeabi_ddiv+0x12c>
 8001150:	4588      	cmp	r8, r1
 8001152:	d200      	bcs.n	8001156 <__aeabi_ddiv+0x472>
 8001154:	e6c7      	b.n	8000ee6 <__aeabi_ddiv+0x202>
 8001156:	464b      	mov	r3, r9
 8001158:	07de      	lsls	r6, r3, #31
 800115a:	085d      	lsrs	r5, r3, #1
 800115c:	4643      	mov	r3, r8
 800115e:	085b      	lsrs	r3, r3, #1
 8001160:	431e      	orrs	r6, r3
 8001162:	4643      	mov	r3, r8
 8001164:	07db      	lsls	r3, r3, #31
 8001166:	469a      	mov	sl, r3
 8001168:	e6c2      	b.n	8000ef0 <__aeabi_ddiv+0x20c>
 800116a:	2500      	movs	r5, #0
 800116c:	4592      	cmp	sl, r2
 800116e:	d300      	bcc.n	8001172 <__aeabi_ddiv+0x48e>
 8001170:	e733      	b.n	8000fda <__aeabi_ddiv+0x2f6>
 8001172:	9e03      	ldr	r6, [sp, #12]
 8001174:	4659      	mov	r1, fp
 8001176:	46b4      	mov	ip, r6
 8001178:	44e2      	add	sl, ip
 800117a:	45b2      	cmp	sl, r6
 800117c:	41ad      	sbcs	r5, r5
 800117e:	426d      	negs	r5, r5
 8001180:	4445      	add	r5, r8
 8001182:	18eb      	adds	r3, r5, r3
 8001184:	3901      	subs	r1, #1
 8001186:	4598      	cmp	r8, r3
 8001188:	d207      	bcs.n	800119a <__aeabi_ddiv+0x4b6>
 800118a:	4298      	cmp	r0, r3
 800118c:	d900      	bls.n	8001190 <__aeabi_ddiv+0x4ac>
 800118e:	e07f      	b.n	8001290 <__aeabi_ddiv+0x5ac>
 8001190:	d100      	bne.n	8001194 <__aeabi_ddiv+0x4b0>
 8001192:	e0bc      	b.n	800130e <__aeabi_ddiv+0x62a>
 8001194:	1a1d      	subs	r5, r3, r0
 8001196:	468b      	mov	fp, r1
 8001198:	e71f      	b.n	8000fda <__aeabi_ddiv+0x2f6>
 800119a:	4598      	cmp	r8, r3
 800119c:	d1fa      	bne.n	8001194 <__aeabi_ddiv+0x4b0>
 800119e:	9d03      	ldr	r5, [sp, #12]
 80011a0:	4555      	cmp	r5, sl
 80011a2:	d9f2      	bls.n	800118a <__aeabi_ddiv+0x4a6>
 80011a4:	4643      	mov	r3, r8
 80011a6:	468b      	mov	fp, r1
 80011a8:	1a1d      	subs	r5, r3, r0
 80011aa:	e716      	b.n	8000fda <__aeabi_ddiv+0x2f6>
 80011ac:	469b      	mov	fp, r3
 80011ae:	e6ca      	b.n	8000f46 <__aeabi_ddiv+0x262>
 80011b0:	0015      	movs	r5, r2
 80011b2:	e6e7      	b.n	8000f84 <__aeabi_ddiv+0x2a0>
 80011b4:	465a      	mov	r2, fp
 80011b6:	08c9      	lsrs	r1, r1, #3
 80011b8:	0752      	lsls	r2, r2, #29
 80011ba:	430a      	orrs	r2, r1
 80011bc:	055b      	lsls	r3, r3, #21
 80011be:	4690      	mov	r8, r2
 80011c0:	0d5c      	lsrs	r4, r3, #21
 80011c2:	465a      	mov	r2, fp
 80011c4:	2301      	movs	r3, #1
 80011c6:	9902      	ldr	r1, [sp, #8]
 80011c8:	0252      	lsls	r2, r2, #9
 80011ca:	4019      	ands	r1, r3
 80011cc:	0b12      	lsrs	r2, r2, #12
 80011ce:	468c      	mov	ip, r1
 80011d0:	e656      	b.n	8000e80 <__aeabi_ddiv+0x19c>
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d100      	bne.n	80011d8 <__aeabi_ddiv+0x4f4>
 80011d6:	e76f      	b.n	80010b8 <__aeabi_ddiv+0x3d4>
 80011d8:	4446      	add	r6, r8
 80011da:	1e4a      	subs	r2, r1, #1
 80011dc:	45b0      	cmp	r8, r6
 80011de:	d929      	bls.n	8001234 <__aeabi_ddiv+0x550>
 80011e0:	0011      	movs	r1, r2
 80011e2:	4286      	cmp	r6, r0
 80011e4:	d000      	beq.n	80011e8 <__aeabi_ddiv+0x504>
 80011e6:	e765      	b.n	80010b4 <__aeabi_ddiv+0x3d0>
 80011e8:	9a03      	ldr	r2, [sp, #12]
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d000      	beq.n	80011f0 <__aeabi_ddiv+0x50c>
 80011ee:	e761      	b.n	80010b4 <__aeabi_ddiv+0x3d0>
 80011f0:	e762      	b.n	80010b8 <__aeabi_ddiv+0x3d4>
 80011f2:	2101      	movs	r1, #1
 80011f4:	4249      	negs	r1, r1
 80011f6:	2001      	movs	r0, #1
 80011f8:	1ac2      	subs	r2, r0, r3
 80011fa:	2a38      	cmp	r2, #56	; 0x38
 80011fc:	dd21      	ble.n	8001242 <__aeabi_ddiv+0x55e>
 80011fe:	9b02      	ldr	r3, [sp, #8]
 8001200:	4003      	ands	r3, r0
 8001202:	469c      	mov	ip, r3
 8001204:	e638      	b.n	8000e78 <__aeabi_ddiv+0x194>
 8001206:	220f      	movs	r2, #15
 8001208:	400a      	ands	r2, r1
 800120a:	2a04      	cmp	r2, #4
 800120c:	d100      	bne.n	8001210 <__aeabi_ddiv+0x52c>
 800120e:	e75b      	b.n	80010c8 <__aeabi_ddiv+0x3e4>
 8001210:	000a      	movs	r2, r1
 8001212:	1d11      	adds	r1, r2, #4
 8001214:	4291      	cmp	r1, r2
 8001216:	4192      	sbcs	r2, r2
 8001218:	4252      	negs	r2, r2
 800121a:	4493      	add	fp, r2
 800121c:	e754      	b.n	80010c8 <__aeabi_ddiv+0x3e4>
 800121e:	4b47      	ldr	r3, [pc, #284]	; (800133c <__aeabi_ddiv+0x658>)
 8001220:	18e3      	adds	r3, r4, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	dde5      	ble.n	80011f2 <__aeabi_ddiv+0x50e>
 8001226:	2201      	movs	r2, #1
 8001228:	4252      	negs	r2, r2
 800122a:	e7f2      	b.n	8001212 <__aeabi_ddiv+0x52e>
 800122c:	001d      	movs	r5, r3
 800122e:	e6fa      	b.n	8001026 <__aeabi_ddiv+0x342>
 8001230:	469a      	mov	sl, r3
 8001232:	e71c      	b.n	800106e <__aeabi_ddiv+0x38a>
 8001234:	42b0      	cmp	r0, r6
 8001236:	d839      	bhi.n	80012ac <__aeabi_ddiv+0x5c8>
 8001238:	d06e      	beq.n	8001318 <__aeabi_ddiv+0x634>
 800123a:	0011      	movs	r1, r2
 800123c:	e73a      	b.n	80010b4 <__aeabi_ddiv+0x3d0>
 800123e:	9302      	str	r3, [sp, #8]
 8001240:	e73a      	b.n	80010b8 <__aeabi_ddiv+0x3d4>
 8001242:	2a1f      	cmp	r2, #31
 8001244:	dc3c      	bgt.n	80012c0 <__aeabi_ddiv+0x5dc>
 8001246:	2320      	movs	r3, #32
 8001248:	1a9b      	subs	r3, r3, r2
 800124a:	000c      	movs	r4, r1
 800124c:	4658      	mov	r0, fp
 800124e:	4099      	lsls	r1, r3
 8001250:	4098      	lsls	r0, r3
 8001252:	1e4b      	subs	r3, r1, #1
 8001254:	4199      	sbcs	r1, r3
 8001256:	465b      	mov	r3, fp
 8001258:	40d4      	lsrs	r4, r2
 800125a:	40d3      	lsrs	r3, r2
 800125c:	4320      	orrs	r0, r4
 800125e:	4308      	orrs	r0, r1
 8001260:	001a      	movs	r2, r3
 8001262:	0743      	lsls	r3, r0, #29
 8001264:	d009      	beq.n	800127a <__aeabi_ddiv+0x596>
 8001266:	230f      	movs	r3, #15
 8001268:	4003      	ands	r3, r0
 800126a:	2b04      	cmp	r3, #4
 800126c:	d005      	beq.n	800127a <__aeabi_ddiv+0x596>
 800126e:	0001      	movs	r1, r0
 8001270:	1d08      	adds	r0, r1, #4
 8001272:	4288      	cmp	r0, r1
 8001274:	419b      	sbcs	r3, r3
 8001276:	425b      	negs	r3, r3
 8001278:	18d2      	adds	r2, r2, r3
 800127a:	0213      	lsls	r3, r2, #8
 800127c:	d53a      	bpl.n	80012f4 <__aeabi_ddiv+0x610>
 800127e:	2301      	movs	r3, #1
 8001280:	9a02      	ldr	r2, [sp, #8]
 8001282:	2401      	movs	r4, #1
 8001284:	401a      	ands	r2, r3
 8001286:	2300      	movs	r3, #0
 8001288:	4694      	mov	ip, r2
 800128a:	4698      	mov	r8, r3
 800128c:	2200      	movs	r2, #0
 800128e:	e5f7      	b.n	8000e80 <__aeabi_ddiv+0x19c>
 8001290:	2102      	movs	r1, #2
 8001292:	4249      	negs	r1, r1
 8001294:	468c      	mov	ip, r1
 8001296:	9d03      	ldr	r5, [sp, #12]
 8001298:	44e3      	add	fp, ip
 800129a:	46ac      	mov	ip, r5
 800129c:	44e2      	add	sl, ip
 800129e:	45aa      	cmp	sl, r5
 80012a0:	41ad      	sbcs	r5, r5
 80012a2:	426d      	negs	r5, r5
 80012a4:	4445      	add	r5, r8
 80012a6:	18ed      	adds	r5, r5, r3
 80012a8:	1a2d      	subs	r5, r5, r0
 80012aa:	e696      	b.n	8000fda <__aeabi_ddiv+0x2f6>
 80012ac:	1e8a      	subs	r2, r1, #2
 80012ae:	9903      	ldr	r1, [sp, #12]
 80012b0:	004d      	lsls	r5, r1, #1
 80012b2:	428d      	cmp	r5, r1
 80012b4:	4189      	sbcs	r1, r1
 80012b6:	4249      	negs	r1, r1
 80012b8:	4441      	add	r1, r8
 80012ba:	1876      	adds	r6, r6, r1
 80012bc:	9503      	str	r5, [sp, #12]
 80012be:	e78f      	b.n	80011e0 <__aeabi_ddiv+0x4fc>
 80012c0:	201f      	movs	r0, #31
 80012c2:	4240      	negs	r0, r0
 80012c4:	1ac3      	subs	r3, r0, r3
 80012c6:	4658      	mov	r0, fp
 80012c8:	40d8      	lsrs	r0, r3
 80012ca:	0003      	movs	r3, r0
 80012cc:	2a20      	cmp	r2, #32
 80012ce:	d028      	beq.n	8001322 <__aeabi_ddiv+0x63e>
 80012d0:	2040      	movs	r0, #64	; 0x40
 80012d2:	465d      	mov	r5, fp
 80012d4:	1a82      	subs	r2, r0, r2
 80012d6:	4095      	lsls	r5, r2
 80012d8:	4329      	orrs	r1, r5
 80012da:	1e4a      	subs	r2, r1, #1
 80012dc:	4191      	sbcs	r1, r2
 80012de:	4319      	orrs	r1, r3
 80012e0:	2307      	movs	r3, #7
 80012e2:	2200      	movs	r2, #0
 80012e4:	400b      	ands	r3, r1
 80012e6:	d009      	beq.n	80012fc <__aeabi_ddiv+0x618>
 80012e8:	230f      	movs	r3, #15
 80012ea:	2200      	movs	r2, #0
 80012ec:	400b      	ands	r3, r1
 80012ee:	0008      	movs	r0, r1
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d1bd      	bne.n	8001270 <__aeabi_ddiv+0x58c>
 80012f4:	0001      	movs	r1, r0
 80012f6:	0753      	lsls	r3, r2, #29
 80012f8:	0252      	lsls	r2, r2, #9
 80012fa:	0b12      	lsrs	r2, r2, #12
 80012fc:	08c9      	lsrs	r1, r1, #3
 80012fe:	4319      	orrs	r1, r3
 8001300:	2301      	movs	r3, #1
 8001302:	4688      	mov	r8, r1
 8001304:	9902      	ldr	r1, [sp, #8]
 8001306:	2400      	movs	r4, #0
 8001308:	4019      	ands	r1, r3
 800130a:	468c      	mov	ip, r1
 800130c:	e5b8      	b.n	8000e80 <__aeabi_ddiv+0x19c>
 800130e:	4552      	cmp	r2, sl
 8001310:	d8be      	bhi.n	8001290 <__aeabi_ddiv+0x5ac>
 8001312:	468b      	mov	fp, r1
 8001314:	2500      	movs	r5, #0
 8001316:	e660      	b.n	8000fda <__aeabi_ddiv+0x2f6>
 8001318:	9d03      	ldr	r5, [sp, #12]
 800131a:	429d      	cmp	r5, r3
 800131c:	d3c6      	bcc.n	80012ac <__aeabi_ddiv+0x5c8>
 800131e:	0011      	movs	r1, r2
 8001320:	e762      	b.n	80011e8 <__aeabi_ddiv+0x504>
 8001322:	2500      	movs	r5, #0
 8001324:	e7d8      	b.n	80012d8 <__aeabi_ddiv+0x5f4>
 8001326:	2280      	movs	r2, #128	; 0x80
 8001328:	465b      	mov	r3, fp
 800132a:	0312      	lsls	r2, r2, #12
 800132c:	431a      	orrs	r2, r3
 800132e:	9b01      	ldr	r3, [sp, #4]
 8001330:	0312      	lsls	r2, r2, #12
 8001332:	0b12      	lsrs	r2, r2, #12
 8001334:	469c      	mov	ip, r3
 8001336:	4688      	mov	r8, r1
 8001338:	4c03      	ldr	r4, [pc, #12]	; (8001348 <__aeabi_ddiv+0x664>)
 800133a:	e5a1      	b.n	8000e80 <__aeabi_ddiv+0x19c>
 800133c:	000003ff 	.word	0x000003ff
 8001340:	feffffff 	.word	0xfeffffff
 8001344:	000007fe 	.word	0x000007fe
 8001348:	000007ff 	.word	0x000007ff

0800134c <__eqdf2>:
 800134c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800134e:	464f      	mov	r7, r9
 8001350:	4646      	mov	r6, r8
 8001352:	46d6      	mov	lr, sl
 8001354:	005c      	lsls	r4, r3, #1
 8001356:	b5c0      	push	{r6, r7, lr}
 8001358:	031f      	lsls	r7, r3, #12
 800135a:	0fdb      	lsrs	r3, r3, #31
 800135c:	469a      	mov	sl, r3
 800135e:	4b17      	ldr	r3, [pc, #92]	; (80013bc <__eqdf2+0x70>)
 8001360:	030e      	lsls	r6, r1, #12
 8001362:	004d      	lsls	r5, r1, #1
 8001364:	4684      	mov	ip, r0
 8001366:	4680      	mov	r8, r0
 8001368:	0b36      	lsrs	r6, r6, #12
 800136a:	0d6d      	lsrs	r5, r5, #21
 800136c:	0fc9      	lsrs	r1, r1, #31
 800136e:	4691      	mov	r9, r2
 8001370:	0b3f      	lsrs	r7, r7, #12
 8001372:	0d64      	lsrs	r4, r4, #21
 8001374:	2001      	movs	r0, #1
 8001376:	429d      	cmp	r5, r3
 8001378:	d008      	beq.n	800138c <__eqdf2+0x40>
 800137a:	429c      	cmp	r4, r3
 800137c:	d001      	beq.n	8001382 <__eqdf2+0x36>
 800137e:	42a5      	cmp	r5, r4
 8001380:	d00b      	beq.n	800139a <__eqdf2+0x4e>
 8001382:	bc1c      	pop	{r2, r3, r4}
 8001384:	4690      	mov	r8, r2
 8001386:	4699      	mov	r9, r3
 8001388:	46a2      	mov	sl, r4
 800138a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800138c:	4663      	mov	r3, ip
 800138e:	4333      	orrs	r3, r6
 8001390:	d1f7      	bne.n	8001382 <__eqdf2+0x36>
 8001392:	42ac      	cmp	r4, r5
 8001394:	d1f5      	bne.n	8001382 <__eqdf2+0x36>
 8001396:	433a      	orrs	r2, r7
 8001398:	d1f3      	bne.n	8001382 <__eqdf2+0x36>
 800139a:	2001      	movs	r0, #1
 800139c:	42be      	cmp	r6, r7
 800139e:	d1f0      	bne.n	8001382 <__eqdf2+0x36>
 80013a0:	45c8      	cmp	r8, r9
 80013a2:	d1ee      	bne.n	8001382 <__eqdf2+0x36>
 80013a4:	4551      	cmp	r1, sl
 80013a6:	d007      	beq.n	80013b8 <__eqdf2+0x6c>
 80013a8:	2d00      	cmp	r5, #0
 80013aa:	d1ea      	bne.n	8001382 <__eqdf2+0x36>
 80013ac:	4663      	mov	r3, ip
 80013ae:	431e      	orrs	r6, r3
 80013b0:	0030      	movs	r0, r6
 80013b2:	1e46      	subs	r6, r0, #1
 80013b4:	41b0      	sbcs	r0, r6
 80013b6:	e7e4      	b.n	8001382 <__eqdf2+0x36>
 80013b8:	2000      	movs	r0, #0
 80013ba:	e7e2      	b.n	8001382 <__eqdf2+0x36>
 80013bc:	000007ff 	.word	0x000007ff

080013c0 <__gedf2>:
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c2:	4645      	mov	r5, r8
 80013c4:	46de      	mov	lr, fp
 80013c6:	4657      	mov	r7, sl
 80013c8:	464e      	mov	r6, r9
 80013ca:	b5e0      	push	{r5, r6, r7, lr}
 80013cc:	031f      	lsls	r7, r3, #12
 80013ce:	0b3d      	lsrs	r5, r7, #12
 80013d0:	4f2c      	ldr	r7, [pc, #176]	; (8001484 <__gedf2+0xc4>)
 80013d2:	030e      	lsls	r6, r1, #12
 80013d4:	004c      	lsls	r4, r1, #1
 80013d6:	46ab      	mov	fp, r5
 80013d8:	005d      	lsls	r5, r3, #1
 80013da:	4684      	mov	ip, r0
 80013dc:	0b36      	lsrs	r6, r6, #12
 80013de:	0d64      	lsrs	r4, r4, #21
 80013e0:	0fc9      	lsrs	r1, r1, #31
 80013e2:	4690      	mov	r8, r2
 80013e4:	0d6d      	lsrs	r5, r5, #21
 80013e6:	0fdb      	lsrs	r3, r3, #31
 80013e8:	42bc      	cmp	r4, r7
 80013ea:	d02a      	beq.n	8001442 <__gedf2+0x82>
 80013ec:	4f25      	ldr	r7, [pc, #148]	; (8001484 <__gedf2+0xc4>)
 80013ee:	42bd      	cmp	r5, r7
 80013f0:	d02d      	beq.n	800144e <__gedf2+0x8e>
 80013f2:	2c00      	cmp	r4, #0
 80013f4:	d10f      	bne.n	8001416 <__gedf2+0x56>
 80013f6:	4330      	orrs	r0, r6
 80013f8:	0007      	movs	r7, r0
 80013fa:	4681      	mov	r9, r0
 80013fc:	4278      	negs	r0, r7
 80013fe:	4178      	adcs	r0, r7
 8001400:	b2c0      	uxtb	r0, r0
 8001402:	2d00      	cmp	r5, #0
 8001404:	d117      	bne.n	8001436 <__gedf2+0x76>
 8001406:	465f      	mov	r7, fp
 8001408:	433a      	orrs	r2, r7
 800140a:	d114      	bne.n	8001436 <__gedf2+0x76>
 800140c:	464b      	mov	r3, r9
 800140e:	2000      	movs	r0, #0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00a      	beq.n	800142a <__gedf2+0x6a>
 8001414:	e006      	b.n	8001424 <__gedf2+0x64>
 8001416:	2d00      	cmp	r5, #0
 8001418:	d102      	bne.n	8001420 <__gedf2+0x60>
 800141a:	4658      	mov	r0, fp
 800141c:	4302      	orrs	r2, r0
 800141e:	d001      	beq.n	8001424 <__gedf2+0x64>
 8001420:	4299      	cmp	r1, r3
 8001422:	d018      	beq.n	8001456 <__gedf2+0x96>
 8001424:	4248      	negs	r0, r1
 8001426:	2101      	movs	r1, #1
 8001428:	4308      	orrs	r0, r1
 800142a:	bc3c      	pop	{r2, r3, r4, r5}
 800142c:	4690      	mov	r8, r2
 800142e:	4699      	mov	r9, r3
 8001430:	46a2      	mov	sl, r4
 8001432:	46ab      	mov	fp, r5
 8001434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001436:	2800      	cmp	r0, #0
 8001438:	d0f2      	beq.n	8001420 <__gedf2+0x60>
 800143a:	2001      	movs	r0, #1
 800143c:	3b01      	subs	r3, #1
 800143e:	4318      	orrs	r0, r3
 8001440:	e7f3      	b.n	800142a <__gedf2+0x6a>
 8001442:	0037      	movs	r7, r6
 8001444:	4307      	orrs	r7, r0
 8001446:	d0d1      	beq.n	80013ec <__gedf2+0x2c>
 8001448:	2002      	movs	r0, #2
 800144a:	4240      	negs	r0, r0
 800144c:	e7ed      	b.n	800142a <__gedf2+0x6a>
 800144e:	465f      	mov	r7, fp
 8001450:	4317      	orrs	r7, r2
 8001452:	d0ce      	beq.n	80013f2 <__gedf2+0x32>
 8001454:	e7f8      	b.n	8001448 <__gedf2+0x88>
 8001456:	42ac      	cmp	r4, r5
 8001458:	dce4      	bgt.n	8001424 <__gedf2+0x64>
 800145a:	da03      	bge.n	8001464 <__gedf2+0xa4>
 800145c:	1e48      	subs	r0, r1, #1
 800145e:	2101      	movs	r1, #1
 8001460:	4308      	orrs	r0, r1
 8001462:	e7e2      	b.n	800142a <__gedf2+0x6a>
 8001464:	455e      	cmp	r6, fp
 8001466:	d8dd      	bhi.n	8001424 <__gedf2+0x64>
 8001468:	d006      	beq.n	8001478 <__gedf2+0xb8>
 800146a:	2000      	movs	r0, #0
 800146c:	455e      	cmp	r6, fp
 800146e:	d2dc      	bcs.n	800142a <__gedf2+0x6a>
 8001470:	2301      	movs	r3, #1
 8001472:	1e48      	subs	r0, r1, #1
 8001474:	4318      	orrs	r0, r3
 8001476:	e7d8      	b.n	800142a <__gedf2+0x6a>
 8001478:	45c4      	cmp	ip, r8
 800147a:	d8d3      	bhi.n	8001424 <__gedf2+0x64>
 800147c:	2000      	movs	r0, #0
 800147e:	45c4      	cmp	ip, r8
 8001480:	d3f6      	bcc.n	8001470 <__gedf2+0xb0>
 8001482:	e7d2      	b.n	800142a <__gedf2+0x6a>
 8001484:	000007ff 	.word	0x000007ff

08001488 <__ledf2>:
 8001488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148a:	464e      	mov	r6, r9
 800148c:	4645      	mov	r5, r8
 800148e:	46de      	mov	lr, fp
 8001490:	4657      	mov	r7, sl
 8001492:	005c      	lsls	r4, r3, #1
 8001494:	b5e0      	push	{r5, r6, r7, lr}
 8001496:	031f      	lsls	r7, r3, #12
 8001498:	0fdb      	lsrs	r3, r3, #31
 800149a:	4699      	mov	r9, r3
 800149c:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <__ledf2+0xc0>)
 800149e:	030e      	lsls	r6, r1, #12
 80014a0:	004d      	lsls	r5, r1, #1
 80014a2:	0fc9      	lsrs	r1, r1, #31
 80014a4:	4684      	mov	ip, r0
 80014a6:	0b36      	lsrs	r6, r6, #12
 80014a8:	0d6d      	lsrs	r5, r5, #21
 80014aa:	468b      	mov	fp, r1
 80014ac:	4690      	mov	r8, r2
 80014ae:	0b3f      	lsrs	r7, r7, #12
 80014b0:	0d64      	lsrs	r4, r4, #21
 80014b2:	429d      	cmp	r5, r3
 80014b4:	d020      	beq.n	80014f8 <__ledf2+0x70>
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <__ledf2+0xc0>)
 80014b8:	429c      	cmp	r4, r3
 80014ba:	d022      	beq.n	8001502 <__ledf2+0x7a>
 80014bc:	2d00      	cmp	r5, #0
 80014be:	d112      	bne.n	80014e6 <__ledf2+0x5e>
 80014c0:	4330      	orrs	r0, r6
 80014c2:	4243      	negs	r3, r0
 80014c4:	4143      	adcs	r3, r0
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2c00      	cmp	r4, #0
 80014ca:	d01f      	beq.n	800150c <__ledf2+0x84>
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00c      	beq.n	80014ea <__ledf2+0x62>
 80014d0:	464b      	mov	r3, r9
 80014d2:	2001      	movs	r0, #1
 80014d4:	3b01      	subs	r3, #1
 80014d6:	4303      	orrs	r3, r0
 80014d8:	0018      	movs	r0, r3
 80014da:	bc3c      	pop	{r2, r3, r4, r5}
 80014dc:	4690      	mov	r8, r2
 80014de:	4699      	mov	r9, r3
 80014e0:	46a2      	mov	sl, r4
 80014e2:	46ab      	mov	fp, r5
 80014e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e6:	2c00      	cmp	r4, #0
 80014e8:	d016      	beq.n	8001518 <__ledf2+0x90>
 80014ea:	45cb      	cmp	fp, r9
 80014ec:	d017      	beq.n	800151e <__ledf2+0x96>
 80014ee:	465b      	mov	r3, fp
 80014f0:	4259      	negs	r1, r3
 80014f2:	2301      	movs	r3, #1
 80014f4:	430b      	orrs	r3, r1
 80014f6:	e7ef      	b.n	80014d8 <__ledf2+0x50>
 80014f8:	0031      	movs	r1, r6
 80014fa:	2302      	movs	r3, #2
 80014fc:	4301      	orrs	r1, r0
 80014fe:	d1eb      	bne.n	80014d8 <__ledf2+0x50>
 8001500:	e7d9      	b.n	80014b6 <__ledf2+0x2e>
 8001502:	0039      	movs	r1, r7
 8001504:	2302      	movs	r3, #2
 8001506:	4311      	orrs	r1, r2
 8001508:	d1e6      	bne.n	80014d8 <__ledf2+0x50>
 800150a:	e7d7      	b.n	80014bc <__ledf2+0x34>
 800150c:	433a      	orrs	r2, r7
 800150e:	d1dd      	bne.n	80014cc <__ledf2+0x44>
 8001510:	2300      	movs	r3, #0
 8001512:	2800      	cmp	r0, #0
 8001514:	d0e0      	beq.n	80014d8 <__ledf2+0x50>
 8001516:	e7ea      	b.n	80014ee <__ledf2+0x66>
 8001518:	433a      	orrs	r2, r7
 800151a:	d1e6      	bne.n	80014ea <__ledf2+0x62>
 800151c:	e7e7      	b.n	80014ee <__ledf2+0x66>
 800151e:	42a5      	cmp	r5, r4
 8001520:	dce5      	bgt.n	80014ee <__ledf2+0x66>
 8001522:	db05      	blt.n	8001530 <__ledf2+0xa8>
 8001524:	42be      	cmp	r6, r7
 8001526:	d8e2      	bhi.n	80014ee <__ledf2+0x66>
 8001528:	d007      	beq.n	800153a <__ledf2+0xb2>
 800152a:	2300      	movs	r3, #0
 800152c:	42be      	cmp	r6, r7
 800152e:	d2d3      	bcs.n	80014d8 <__ledf2+0x50>
 8001530:	4659      	mov	r1, fp
 8001532:	2301      	movs	r3, #1
 8001534:	3901      	subs	r1, #1
 8001536:	430b      	orrs	r3, r1
 8001538:	e7ce      	b.n	80014d8 <__ledf2+0x50>
 800153a:	45c4      	cmp	ip, r8
 800153c:	d8d7      	bhi.n	80014ee <__ledf2+0x66>
 800153e:	2300      	movs	r3, #0
 8001540:	45c4      	cmp	ip, r8
 8001542:	d3f5      	bcc.n	8001530 <__ledf2+0xa8>
 8001544:	e7c8      	b.n	80014d8 <__ledf2+0x50>
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	000007ff 	.word	0x000007ff

0800154c <__aeabi_dmul>:
 800154c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154e:	4657      	mov	r7, sl
 8001550:	4645      	mov	r5, r8
 8001552:	46de      	mov	lr, fp
 8001554:	464e      	mov	r6, r9
 8001556:	b5e0      	push	{r5, r6, r7, lr}
 8001558:	030c      	lsls	r4, r1, #12
 800155a:	4698      	mov	r8, r3
 800155c:	004e      	lsls	r6, r1, #1
 800155e:	0b23      	lsrs	r3, r4, #12
 8001560:	b087      	sub	sp, #28
 8001562:	0007      	movs	r7, r0
 8001564:	4692      	mov	sl, r2
 8001566:	469b      	mov	fp, r3
 8001568:	0d76      	lsrs	r6, r6, #21
 800156a:	0fcd      	lsrs	r5, r1, #31
 800156c:	2e00      	cmp	r6, #0
 800156e:	d06b      	beq.n	8001648 <__aeabi_dmul+0xfc>
 8001570:	4b6d      	ldr	r3, [pc, #436]	; (8001728 <__aeabi_dmul+0x1dc>)
 8001572:	429e      	cmp	r6, r3
 8001574:	d035      	beq.n	80015e2 <__aeabi_dmul+0x96>
 8001576:	2480      	movs	r4, #128	; 0x80
 8001578:	465b      	mov	r3, fp
 800157a:	0f42      	lsrs	r2, r0, #29
 800157c:	0424      	lsls	r4, r4, #16
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4314      	orrs	r4, r2
 8001582:	431c      	orrs	r4, r3
 8001584:	00c3      	lsls	r3, r0, #3
 8001586:	4699      	mov	r9, r3
 8001588:	4b68      	ldr	r3, [pc, #416]	; (800172c <__aeabi_dmul+0x1e0>)
 800158a:	46a3      	mov	fp, r4
 800158c:	469c      	mov	ip, r3
 800158e:	2300      	movs	r3, #0
 8001590:	2700      	movs	r7, #0
 8001592:	4466      	add	r6, ip
 8001594:	9302      	str	r3, [sp, #8]
 8001596:	4643      	mov	r3, r8
 8001598:	031c      	lsls	r4, r3, #12
 800159a:	005a      	lsls	r2, r3, #1
 800159c:	0fdb      	lsrs	r3, r3, #31
 800159e:	4650      	mov	r0, sl
 80015a0:	0b24      	lsrs	r4, r4, #12
 80015a2:	0d52      	lsrs	r2, r2, #21
 80015a4:	4698      	mov	r8, r3
 80015a6:	d100      	bne.n	80015aa <__aeabi_dmul+0x5e>
 80015a8:	e076      	b.n	8001698 <__aeabi_dmul+0x14c>
 80015aa:	4b5f      	ldr	r3, [pc, #380]	; (8001728 <__aeabi_dmul+0x1dc>)
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d06d      	beq.n	800168c <__aeabi_dmul+0x140>
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	0f41      	lsrs	r1, r0, #29
 80015b4:	041b      	lsls	r3, r3, #16
 80015b6:	430b      	orrs	r3, r1
 80015b8:	495c      	ldr	r1, [pc, #368]	; (800172c <__aeabi_dmul+0x1e0>)
 80015ba:	00e4      	lsls	r4, r4, #3
 80015bc:	468c      	mov	ip, r1
 80015be:	431c      	orrs	r4, r3
 80015c0:	00c3      	lsls	r3, r0, #3
 80015c2:	2000      	movs	r0, #0
 80015c4:	4462      	add	r2, ip
 80015c6:	4641      	mov	r1, r8
 80015c8:	18b6      	adds	r6, r6, r2
 80015ca:	4069      	eors	r1, r5
 80015cc:	1c72      	adds	r2, r6, #1
 80015ce:	9101      	str	r1, [sp, #4]
 80015d0:	4694      	mov	ip, r2
 80015d2:	4307      	orrs	r7, r0
 80015d4:	2f0f      	cmp	r7, #15
 80015d6:	d900      	bls.n	80015da <__aeabi_dmul+0x8e>
 80015d8:	e0b0      	b.n	800173c <__aeabi_dmul+0x1f0>
 80015da:	4a55      	ldr	r2, [pc, #340]	; (8001730 <__aeabi_dmul+0x1e4>)
 80015dc:	00bf      	lsls	r7, r7, #2
 80015de:	59d2      	ldr	r2, [r2, r7]
 80015e0:	4697      	mov	pc, r2
 80015e2:	465b      	mov	r3, fp
 80015e4:	4303      	orrs	r3, r0
 80015e6:	4699      	mov	r9, r3
 80015e8:	d000      	beq.n	80015ec <__aeabi_dmul+0xa0>
 80015ea:	e087      	b.n	80016fc <__aeabi_dmul+0x1b0>
 80015ec:	2300      	movs	r3, #0
 80015ee:	469b      	mov	fp, r3
 80015f0:	3302      	adds	r3, #2
 80015f2:	2708      	movs	r7, #8
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	e7ce      	b.n	8001596 <__aeabi_dmul+0x4a>
 80015f8:	4642      	mov	r2, r8
 80015fa:	9201      	str	r2, [sp, #4]
 80015fc:	2802      	cmp	r0, #2
 80015fe:	d067      	beq.n	80016d0 <__aeabi_dmul+0x184>
 8001600:	2803      	cmp	r0, #3
 8001602:	d100      	bne.n	8001606 <__aeabi_dmul+0xba>
 8001604:	e20e      	b.n	8001a24 <__aeabi_dmul+0x4d8>
 8001606:	2801      	cmp	r0, #1
 8001608:	d000      	beq.n	800160c <__aeabi_dmul+0xc0>
 800160a:	e162      	b.n	80018d2 <__aeabi_dmul+0x386>
 800160c:	2300      	movs	r3, #0
 800160e:	2400      	movs	r4, #0
 8001610:	2200      	movs	r2, #0
 8001612:	4699      	mov	r9, r3
 8001614:	9901      	ldr	r1, [sp, #4]
 8001616:	4001      	ands	r1, r0
 8001618:	b2cd      	uxtb	r5, r1
 800161a:	2100      	movs	r1, #0
 800161c:	0312      	lsls	r2, r2, #12
 800161e:	0d0b      	lsrs	r3, r1, #20
 8001620:	0b12      	lsrs	r2, r2, #12
 8001622:	051b      	lsls	r3, r3, #20
 8001624:	4313      	orrs	r3, r2
 8001626:	4a43      	ldr	r2, [pc, #268]	; (8001734 <__aeabi_dmul+0x1e8>)
 8001628:	0524      	lsls	r4, r4, #20
 800162a:	4013      	ands	r3, r2
 800162c:	431c      	orrs	r4, r3
 800162e:	0064      	lsls	r4, r4, #1
 8001630:	07ed      	lsls	r5, r5, #31
 8001632:	0864      	lsrs	r4, r4, #1
 8001634:	432c      	orrs	r4, r5
 8001636:	4648      	mov	r0, r9
 8001638:	0021      	movs	r1, r4
 800163a:	b007      	add	sp, #28
 800163c:	bc3c      	pop	{r2, r3, r4, r5}
 800163e:	4690      	mov	r8, r2
 8001640:	4699      	mov	r9, r3
 8001642:	46a2      	mov	sl, r4
 8001644:	46ab      	mov	fp, r5
 8001646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001648:	4303      	orrs	r3, r0
 800164a:	4699      	mov	r9, r3
 800164c:	d04f      	beq.n	80016ee <__aeabi_dmul+0x1a2>
 800164e:	465b      	mov	r3, fp
 8001650:	2b00      	cmp	r3, #0
 8001652:	d100      	bne.n	8001656 <__aeabi_dmul+0x10a>
 8001654:	e189      	b.n	800196a <__aeabi_dmul+0x41e>
 8001656:	4658      	mov	r0, fp
 8001658:	f000 fddc 	bl	8002214 <__clzsi2>
 800165c:	0003      	movs	r3, r0
 800165e:	3b0b      	subs	r3, #11
 8001660:	2b1c      	cmp	r3, #28
 8001662:	dd00      	ble.n	8001666 <__aeabi_dmul+0x11a>
 8001664:	e17a      	b.n	800195c <__aeabi_dmul+0x410>
 8001666:	221d      	movs	r2, #29
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	003a      	movs	r2, r7
 800166c:	0001      	movs	r1, r0
 800166e:	465c      	mov	r4, fp
 8001670:	40da      	lsrs	r2, r3
 8001672:	3908      	subs	r1, #8
 8001674:	408c      	lsls	r4, r1
 8001676:	0013      	movs	r3, r2
 8001678:	408f      	lsls	r7, r1
 800167a:	4323      	orrs	r3, r4
 800167c:	469b      	mov	fp, r3
 800167e:	46b9      	mov	r9, r7
 8001680:	2300      	movs	r3, #0
 8001682:	4e2d      	ldr	r6, [pc, #180]	; (8001738 <__aeabi_dmul+0x1ec>)
 8001684:	2700      	movs	r7, #0
 8001686:	1a36      	subs	r6, r6, r0
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	e784      	b.n	8001596 <__aeabi_dmul+0x4a>
 800168c:	4653      	mov	r3, sl
 800168e:	4323      	orrs	r3, r4
 8001690:	d12a      	bne.n	80016e8 <__aeabi_dmul+0x19c>
 8001692:	2400      	movs	r4, #0
 8001694:	2002      	movs	r0, #2
 8001696:	e796      	b.n	80015c6 <__aeabi_dmul+0x7a>
 8001698:	4653      	mov	r3, sl
 800169a:	4323      	orrs	r3, r4
 800169c:	d020      	beq.n	80016e0 <__aeabi_dmul+0x194>
 800169e:	2c00      	cmp	r4, #0
 80016a0:	d100      	bne.n	80016a4 <__aeabi_dmul+0x158>
 80016a2:	e157      	b.n	8001954 <__aeabi_dmul+0x408>
 80016a4:	0020      	movs	r0, r4
 80016a6:	f000 fdb5 	bl	8002214 <__clzsi2>
 80016aa:	0003      	movs	r3, r0
 80016ac:	3b0b      	subs	r3, #11
 80016ae:	2b1c      	cmp	r3, #28
 80016b0:	dd00      	ble.n	80016b4 <__aeabi_dmul+0x168>
 80016b2:	e149      	b.n	8001948 <__aeabi_dmul+0x3fc>
 80016b4:	211d      	movs	r1, #29
 80016b6:	1acb      	subs	r3, r1, r3
 80016b8:	4651      	mov	r1, sl
 80016ba:	0002      	movs	r2, r0
 80016bc:	40d9      	lsrs	r1, r3
 80016be:	4653      	mov	r3, sl
 80016c0:	3a08      	subs	r2, #8
 80016c2:	4094      	lsls	r4, r2
 80016c4:	4093      	lsls	r3, r2
 80016c6:	430c      	orrs	r4, r1
 80016c8:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <__aeabi_dmul+0x1ec>)
 80016ca:	1a12      	subs	r2, r2, r0
 80016cc:	2000      	movs	r0, #0
 80016ce:	e77a      	b.n	80015c6 <__aeabi_dmul+0x7a>
 80016d0:	2501      	movs	r5, #1
 80016d2:	9b01      	ldr	r3, [sp, #4]
 80016d4:	4c14      	ldr	r4, [pc, #80]	; (8001728 <__aeabi_dmul+0x1dc>)
 80016d6:	401d      	ands	r5, r3
 80016d8:	2300      	movs	r3, #0
 80016da:	2200      	movs	r2, #0
 80016dc:	4699      	mov	r9, r3
 80016de:	e79c      	b.n	800161a <__aeabi_dmul+0xce>
 80016e0:	2400      	movs	r4, #0
 80016e2:	2200      	movs	r2, #0
 80016e4:	2001      	movs	r0, #1
 80016e6:	e76e      	b.n	80015c6 <__aeabi_dmul+0x7a>
 80016e8:	4653      	mov	r3, sl
 80016ea:	2003      	movs	r0, #3
 80016ec:	e76b      	b.n	80015c6 <__aeabi_dmul+0x7a>
 80016ee:	2300      	movs	r3, #0
 80016f0:	469b      	mov	fp, r3
 80016f2:	3301      	adds	r3, #1
 80016f4:	2704      	movs	r7, #4
 80016f6:	2600      	movs	r6, #0
 80016f8:	9302      	str	r3, [sp, #8]
 80016fa:	e74c      	b.n	8001596 <__aeabi_dmul+0x4a>
 80016fc:	2303      	movs	r3, #3
 80016fe:	4681      	mov	r9, r0
 8001700:	270c      	movs	r7, #12
 8001702:	9302      	str	r3, [sp, #8]
 8001704:	e747      	b.n	8001596 <__aeabi_dmul+0x4a>
 8001706:	2280      	movs	r2, #128	; 0x80
 8001708:	2300      	movs	r3, #0
 800170a:	2500      	movs	r5, #0
 800170c:	0312      	lsls	r2, r2, #12
 800170e:	4699      	mov	r9, r3
 8001710:	4c05      	ldr	r4, [pc, #20]	; (8001728 <__aeabi_dmul+0x1dc>)
 8001712:	e782      	b.n	800161a <__aeabi_dmul+0xce>
 8001714:	465c      	mov	r4, fp
 8001716:	464b      	mov	r3, r9
 8001718:	9802      	ldr	r0, [sp, #8]
 800171a:	e76f      	b.n	80015fc <__aeabi_dmul+0xb0>
 800171c:	465c      	mov	r4, fp
 800171e:	464b      	mov	r3, r9
 8001720:	9501      	str	r5, [sp, #4]
 8001722:	9802      	ldr	r0, [sp, #8]
 8001724:	e76a      	b.n	80015fc <__aeabi_dmul+0xb0>
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	000007ff 	.word	0x000007ff
 800172c:	fffffc01 	.word	0xfffffc01
 8001730:	080124f8 	.word	0x080124f8
 8001734:	800fffff 	.word	0x800fffff
 8001738:	fffffc0d 	.word	0xfffffc0d
 800173c:	464a      	mov	r2, r9
 800173e:	4649      	mov	r1, r9
 8001740:	0c17      	lsrs	r7, r2, #16
 8001742:	0c1a      	lsrs	r2, r3, #16
 8001744:	041b      	lsls	r3, r3, #16
 8001746:	0c1b      	lsrs	r3, r3, #16
 8001748:	0408      	lsls	r0, r1, #16
 800174a:	0019      	movs	r1, r3
 800174c:	0c00      	lsrs	r0, r0, #16
 800174e:	4341      	muls	r1, r0
 8001750:	0015      	movs	r5, r2
 8001752:	4688      	mov	r8, r1
 8001754:	0019      	movs	r1, r3
 8001756:	437d      	muls	r5, r7
 8001758:	4379      	muls	r1, r7
 800175a:	9503      	str	r5, [sp, #12]
 800175c:	4689      	mov	r9, r1
 800175e:	0029      	movs	r1, r5
 8001760:	0015      	movs	r5, r2
 8001762:	4345      	muls	r5, r0
 8001764:	444d      	add	r5, r9
 8001766:	9502      	str	r5, [sp, #8]
 8001768:	4645      	mov	r5, r8
 800176a:	0c2d      	lsrs	r5, r5, #16
 800176c:	46aa      	mov	sl, r5
 800176e:	9d02      	ldr	r5, [sp, #8]
 8001770:	4455      	add	r5, sl
 8001772:	45a9      	cmp	r9, r5
 8001774:	d906      	bls.n	8001784 <__aeabi_dmul+0x238>
 8001776:	468a      	mov	sl, r1
 8001778:	2180      	movs	r1, #128	; 0x80
 800177a:	0249      	lsls	r1, r1, #9
 800177c:	4689      	mov	r9, r1
 800177e:	44ca      	add	sl, r9
 8001780:	4651      	mov	r1, sl
 8001782:	9103      	str	r1, [sp, #12]
 8001784:	0c29      	lsrs	r1, r5, #16
 8001786:	9104      	str	r1, [sp, #16]
 8001788:	4641      	mov	r1, r8
 800178a:	0409      	lsls	r1, r1, #16
 800178c:	042d      	lsls	r5, r5, #16
 800178e:	0c09      	lsrs	r1, r1, #16
 8001790:	4688      	mov	r8, r1
 8001792:	0029      	movs	r1, r5
 8001794:	0c25      	lsrs	r5, r4, #16
 8001796:	0424      	lsls	r4, r4, #16
 8001798:	4441      	add	r1, r8
 800179a:	0c24      	lsrs	r4, r4, #16
 800179c:	9105      	str	r1, [sp, #20]
 800179e:	0021      	movs	r1, r4
 80017a0:	4341      	muls	r1, r0
 80017a2:	4688      	mov	r8, r1
 80017a4:	0021      	movs	r1, r4
 80017a6:	4379      	muls	r1, r7
 80017a8:	468a      	mov	sl, r1
 80017aa:	4368      	muls	r0, r5
 80017ac:	4641      	mov	r1, r8
 80017ae:	4450      	add	r0, sl
 80017b0:	4681      	mov	r9, r0
 80017b2:	0c08      	lsrs	r0, r1, #16
 80017b4:	4448      	add	r0, r9
 80017b6:	436f      	muls	r7, r5
 80017b8:	4582      	cmp	sl, r0
 80017ba:	d903      	bls.n	80017c4 <__aeabi_dmul+0x278>
 80017bc:	2180      	movs	r1, #128	; 0x80
 80017be:	0249      	lsls	r1, r1, #9
 80017c0:	4689      	mov	r9, r1
 80017c2:	444f      	add	r7, r9
 80017c4:	0c01      	lsrs	r1, r0, #16
 80017c6:	4689      	mov	r9, r1
 80017c8:	0039      	movs	r1, r7
 80017ca:	4449      	add	r1, r9
 80017cc:	9102      	str	r1, [sp, #8]
 80017ce:	4641      	mov	r1, r8
 80017d0:	040f      	lsls	r7, r1, #16
 80017d2:	9904      	ldr	r1, [sp, #16]
 80017d4:	0c3f      	lsrs	r7, r7, #16
 80017d6:	4688      	mov	r8, r1
 80017d8:	0400      	lsls	r0, r0, #16
 80017da:	19c0      	adds	r0, r0, r7
 80017dc:	4480      	add	r8, r0
 80017de:	4641      	mov	r1, r8
 80017e0:	9104      	str	r1, [sp, #16]
 80017e2:	4659      	mov	r1, fp
 80017e4:	0c0f      	lsrs	r7, r1, #16
 80017e6:	0409      	lsls	r1, r1, #16
 80017e8:	0c09      	lsrs	r1, r1, #16
 80017ea:	4688      	mov	r8, r1
 80017ec:	4359      	muls	r1, r3
 80017ee:	468a      	mov	sl, r1
 80017f0:	0039      	movs	r1, r7
 80017f2:	4351      	muls	r1, r2
 80017f4:	4689      	mov	r9, r1
 80017f6:	4641      	mov	r1, r8
 80017f8:	434a      	muls	r2, r1
 80017fa:	4651      	mov	r1, sl
 80017fc:	0c09      	lsrs	r1, r1, #16
 80017fe:	468b      	mov	fp, r1
 8001800:	437b      	muls	r3, r7
 8001802:	18d2      	adds	r2, r2, r3
 8001804:	445a      	add	r2, fp
 8001806:	4293      	cmp	r3, r2
 8001808:	d903      	bls.n	8001812 <__aeabi_dmul+0x2c6>
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	025b      	lsls	r3, r3, #9
 800180e:	469b      	mov	fp, r3
 8001810:	44d9      	add	r9, fp
 8001812:	4651      	mov	r1, sl
 8001814:	0409      	lsls	r1, r1, #16
 8001816:	0c09      	lsrs	r1, r1, #16
 8001818:	468a      	mov	sl, r1
 800181a:	4641      	mov	r1, r8
 800181c:	4361      	muls	r1, r4
 800181e:	437c      	muls	r4, r7
 8001820:	0c13      	lsrs	r3, r2, #16
 8001822:	0412      	lsls	r2, r2, #16
 8001824:	444b      	add	r3, r9
 8001826:	4452      	add	r2, sl
 8001828:	46a1      	mov	r9, r4
 800182a:	468a      	mov	sl, r1
 800182c:	003c      	movs	r4, r7
 800182e:	4641      	mov	r1, r8
 8001830:	436c      	muls	r4, r5
 8001832:	434d      	muls	r5, r1
 8001834:	4651      	mov	r1, sl
 8001836:	444d      	add	r5, r9
 8001838:	0c0f      	lsrs	r7, r1, #16
 800183a:	197d      	adds	r5, r7, r5
 800183c:	45a9      	cmp	r9, r5
 800183e:	d903      	bls.n	8001848 <__aeabi_dmul+0x2fc>
 8001840:	2180      	movs	r1, #128	; 0x80
 8001842:	0249      	lsls	r1, r1, #9
 8001844:	4688      	mov	r8, r1
 8001846:	4444      	add	r4, r8
 8001848:	9f04      	ldr	r7, [sp, #16]
 800184a:	9903      	ldr	r1, [sp, #12]
 800184c:	46b8      	mov	r8, r7
 800184e:	4441      	add	r1, r8
 8001850:	468b      	mov	fp, r1
 8001852:	4583      	cmp	fp, r0
 8001854:	4180      	sbcs	r0, r0
 8001856:	4241      	negs	r1, r0
 8001858:	4688      	mov	r8, r1
 800185a:	4651      	mov	r1, sl
 800185c:	0408      	lsls	r0, r1, #16
 800185e:	042f      	lsls	r7, r5, #16
 8001860:	0c00      	lsrs	r0, r0, #16
 8001862:	183f      	adds	r7, r7, r0
 8001864:	4658      	mov	r0, fp
 8001866:	9902      	ldr	r1, [sp, #8]
 8001868:	1810      	adds	r0, r2, r0
 800186a:	4689      	mov	r9, r1
 800186c:	4290      	cmp	r0, r2
 800186e:	4192      	sbcs	r2, r2
 8001870:	444f      	add	r7, r9
 8001872:	46ba      	mov	sl, r7
 8001874:	4252      	negs	r2, r2
 8001876:	4699      	mov	r9, r3
 8001878:	4693      	mov	fp, r2
 800187a:	44c2      	add	sl, r8
 800187c:	44d1      	add	r9, sl
 800187e:	44cb      	add	fp, r9
 8001880:	428f      	cmp	r7, r1
 8001882:	41bf      	sbcs	r7, r7
 8001884:	45c2      	cmp	sl, r8
 8001886:	4189      	sbcs	r1, r1
 8001888:	4599      	cmp	r9, r3
 800188a:	419b      	sbcs	r3, r3
 800188c:	4593      	cmp	fp, r2
 800188e:	4192      	sbcs	r2, r2
 8001890:	427f      	negs	r7, r7
 8001892:	4249      	negs	r1, r1
 8001894:	0c2d      	lsrs	r5, r5, #16
 8001896:	4252      	negs	r2, r2
 8001898:	430f      	orrs	r7, r1
 800189a:	425b      	negs	r3, r3
 800189c:	4313      	orrs	r3, r2
 800189e:	197f      	adds	r7, r7, r5
 80018a0:	18ff      	adds	r7, r7, r3
 80018a2:	465b      	mov	r3, fp
 80018a4:	193c      	adds	r4, r7, r4
 80018a6:	0ddb      	lsrs	r3, r3, #23
 80018a8:	9a05      	ldr	r2, [sp, #20]
 80018aa:	0264      	lsls	r4, r4, #9
 80018ac:	431c      	orrs	r4, r3
 80018ae:	0243      	lsls	r3, r0, #9
 80018b0:	4313      	orrs	r3, r2
 80018b2:	1e5d      	subs	r5, r3, #1
 80018b4:	41ab      	sbcs	r3, r5
 80018b6:	465a      	mov	r2, fp
 80018b8:	0dc0      	lsrs	r0, r0, #23
 80018ba:	4303      	orrs	r3, r0
 80018bc:	0252      	lsls	r2, r2, #9
 80018be:	4313      	orrs	r3, r2
 80018c0:	01e2      	lsls	r2, r4, #7
 80018c2:	d556      	bpl.n	8001972 <__aeabi_dmul+0x426>
 80018c4:	2001      	movs	r0, #1
 80018c6:	085a      	lsrs	r2, r3, #1
 80018c8:	4003      	ands	r3, r0
 80018ca:	4313      	orrs	r3, r2
 80018cc:	07e2      	lsls	r2, r4, #31
 80018ce:	4313      	orrs	r3, r2
 80018d0:	0864      	lsrs	r4, r4, #1
 80018d2:	485a      	ldr	r0, [pc, #360]	; (8001a3c <__aeabi_dmul+0x4f0>)
 80018d4:	4460      	add	r0, ip
 80018d6:	2800      	cmp	r0, #0
 80018d8:	dd4d      	ble.n	8001976 <__aeabi_dmul+0x42a>
 80018da:	075a      	lsls	r2, r3, #29
 80018dc:	d009      	beq.n	80018f2 <__aeabi_dmul+0x3a6>
 80018de:	220f      	movs	r2, #15
 80018e0:	401a      	ands	r2, r3
 80018e2:	2a04      	cmp	r2, #4
 80018e4:	d005      	beq.n	80018f2 <__aeabi_dmul+0x3a6>
 80018e6:	1d1a      	adds	r2, r3, #4
 80018e8:	429a      	cmp	r2, r3
 80018ea:	419b      	sbcs	r3, r3
 80018ec:	425b      	negs	r3, r3
 80018ee:	18e4      	adds	r4, r4, r3
 80018f0:	0013      	movs	r3, r2
 80018f2:	01e2      	lsls	r2, r4, #7
 80018f4:	d504      	bpl.n	8001900 <__aeabi_dmul+0x3b4>
 80018f6:	2080      	movs	r0, #128	; 0x80
 80018f8:	4a51      	ldr	r2, [pc, #324]	; (8001a40 <__aeabi_dmul+0x4f4>)
 80018fa:	00c0      	lsls	r0, r0, #3
 80018fc:	4014      	ands	r4, r2
 80018fe:	4460      	add	r0, ip
 8001900:	4a50      	ldr	r2, [pc, #320]	; (8001a44 <__aeabi_dmul+0x4f8>)
 8001902:	4290      	cmp	r0, r2
 8001904:	dd00      	ble.n	8001908 <__aeabi_dmul+0x3bc>
 8001906:	e6e3      	b.n	80016d0 <__aeabi_dmul+0x184>
 8001908:	2501      	movs	r5, #1
 800190a:	08db      	lsrs	r3, r3, #3
 800190c:	0762      	lsls	r2, r4, #29
 800190e:	431a      	orrs	r2, r3
 8001910:	0264      	lsls	r4, r4, #9
 8001912:	9b01      	ldr	r3, [sp, #4]
 8001914:	4691      	mov	r9, r2
 8001916:	0b22      	lsrs	r2, r4, #12
 8001918:	0544      	lsls	r4, r0, #21
 800191a:	0d64      	lsrs	r4, r4, #21
 800191c:	401d      	ands	r5, r3
 800191e:	e67c      	b.n	800161a <__aeabi_dmul+0xce>
 8001920:	2280      	movs	r2, #128	; 0x80
 8001922:	4659      	mov	r1, fp
 8001924:	0312      	lsls	r2, r2, #12
 8001926:	4211      	tst	r1, r2
 8001928:	d008      	beq.n	800193c <__aeabi_dmul+0x3f0>
 800192a:	4214      	tst	r4, r2
 800192c:	d106      	bne.n	800193c <__aeabi_dmul+0x3f0>
 800192e:	4322      	orrs	r2, r4
 8001930:	0312      	lsls	r2, r2, #12
 8001932:	0b12      	lsrs	r2, r2, #12
 8001934:	4645      	mov	r5, r8
 8001936:	4699      	mov	r9, r3
 8001938:	4c43      	ldr	r4, [pc, #268]	; (8001a48 <__aeabi_dmul+0x4fc>)
 800193a:	e66e      	b.n	800161a <__aeabi_dmul+0xce>
 800193c:	465b      	mov	r3, fp
 800193e:	431a      	orrs	r2, r3
 8001940:	0312      	lsls	r2, r2, #12
 8001942:	0b12      	lsrs	r2, r2, #12
 8001944:	4c40      	ldr	r4, [pc, #256]	; (8001a48 <__aeabi_dmul+0x4fc>)
 8001946:	e668      	b.n	800161a <__aeabi_dmul+0xce>
 8001948:	0003      	movs	r3, r0
 800194a:	4654      	mov	r4, sl
 800194c:	3b28      	subs	r3, #40	; 0x28
 800194e:	409c      	lsls	r4, r3
 8001950:	2300      	movs	r3, #0
 8001952:	e6b9      	b.n	80016c8 <__aeabi_dmul+0x17c>
 8001954:	f000 fc5e 	bl	8002214 <__clzsi2>
 8001958:	3020      	adds	r0, #32
 800195a:	e6a6      	b.n	80016aa <__aeabi_dmul+0x15e>
 800195c:	0003      	movs	r3, r0
 800195e:	3b28      	subs	r3, #40	; 0x28
 8001960:	409f      	lsls	r7, r3
 8001962:	2300      	movs	r3, #0
 8001964:	46bb      	mov	fp, r7
 8001966:	4699      	mov	r9, r3
 8001968:	e68a      	b.n	8001680 <__aeabi_dmul+0x134>
 800196a:	f000 fc53 	bl	8002214 <__clzsi2>
 800196e:	3020      	adds	r0, #32
 8001970:	e674      	b.n	800165c <__aeabi_dmul+0x110>
 8001972:	46b4      	mov	ip, r6
 8001974:	e7ad      	b.n	80018d2 <__aeabi_dmul+0x386>
 8001976:	2501      	movs	r5, #1
 8001978:	1a2a      	subs	r2, r5, r0
 800197a:	2a38      	cmp	r2, #56	; 0x38
 800197c:	dd06      	ble.n	800198c <__aeabi_dmul+0x440>
 800197e:	9b01      	ldr	r3, [sp, #4]
 8001980:	2400      	movs	r4, #0
 8001982:	401d      	ands	r5, r3
 8001984:	2300      	movs	r3, #0
 8001986:	2200      	movs	r2, #0
 8001988:	4699      	mov	r9, r3
 800198a:	e646      	b.n	800161a <__aeabi_dmul+0xce>
 800198c:	2a1f      	cmp	r2, #31
 800198e:	dc21      	bgt.n	80019d4 <__aeabi_dmul+0x488>
 8001990:	2520      	movs	r5, #32
 8001992:	0020      	movs	r0, r4
 8001994:	1aad      	subs	r5, r5, r2
 8001996:	001e      	movs	r6, r3
 8001998:	40ab      	lsls	r3, r5
 800199a:	40a8      	lsls	r0, r5
 800199c:	40d6      	lsrs	r6, r2
 800199e:	1e5d      	subs	r5, r3, #1
 80019a0:	41ab      	sbcs	r3, r5
 80019a2:	4330      	orrs	r0, r6
 80019a4:	4318      	orrs	r0, r3
 80019a6:	40d4      	lsrs	r4, r2
 80019a8:	0743      	lsls	r3, r0, #29
 80019aa:	d009      	beq.n	80019c0 <__aeabi_dmul+0x474>
 80019ac:	230f      	movs	r3, #15
 80019ae:	4003      	ands	r3, r0
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d005      	beq.n	80019c0 <__aeabi_dmul+0x474>
 80019b4:	0003      	movs	r3, r0
 80019b6:	1d18      	adds	r0, r3, #4
 80019b8:	4298      	cmp	r0, r3
 80019ba:	419b      	sbcs	r3, r3
 80019bc:	425b      	negs	r3, r3
 80019be:	18e4      	adds	r4, r4, r3
 80019c0:	0223      	lsls	r3, r4, #8
 80019c2:	d521      	bpl.n	8001a08 <__aeabi_dmul+0x4bc>
 80019c4:	2501      	movs	r5, #1
 80019c6:	9b01      	ldr	r3, [sp, #4]
 80019c8:	2401      	movs	r4, #1
 80019ca:	401d      	ands	r5, r3
 80019cc:	2300      	movs	r3, #0
 80019ce:	2200      	movs	r2, #0
 80019d0:	4699      	mov	r9, r3
 80019d2:	e622      	b.n	800161a <__aeabi_dmul+0xce>
 80019d4:	251f      	movs	r5, #31
 80019d6:	0021      	movs	r1, r4
 80019d8:	426d      	negs	r5, r5
 80019da:	1a28      	subs	r0, r5, r0
 80019dc:	40c1      	lsrs	r1, r0
 80019de:	0008      	movs	r0, r1
 80019e0:	2a20      	cmp	r2, #32
 80019e2:	d01d      	beq.n	8001a20 <__aeabi_dmul+0x4d4>
 80019e4:	355f      	adds	r5, #95	; 0x5f
 80019e6:	1aaa      	subs	r2, r5, r2
 80019e8:	4094      	lsls	r4, r2
 80019ea:	4323      	orrs	r3, r4
 80019ec:	1e5c      	subs	r4, r3, #1
 80019ee:	41a3      	sbcs	r3, r4
 80019f0:	2507      	movs	r5, #7
 80019f2:	4303      	orrs	r3, r0
 80019f4:	401d      	ands	r5, r3
 80019f6:	2200      	movs	r2, #0
 80019f8:	2d00      	cmp	r5, #0
 80019fa:	d009      	beq.n	8001a10 <__aeabi_dmul+0x4c4>
 80019fc:	220f      	movs	r2, #15
 80019fe:	2400      	movs	r4, #0
 8001a00:	401a      	ands	r2, r3
 8001a02:	0018      	movs	r0, r3
 8001a04:	2a04      	cmp	r2, #4
 8001a06:	d1d6      	bne.n	80019b6 <__aeabi_dmul+0x46a>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	0765      	lsls	r5, r4, #29
 8001a0c:	0264      	lsls	r4, r4, #9
 8001a0e:	0b22      	lsrs	r2, r4, #12
 8001a10:	08db      	lsrs	r3, r3, #3
 8001a12:	432b      	orrs	r3, r5
 8001a14:	2501      	movs	r5, #1
 8001a16:	4699      	mov	r9, r3
 8001a18:	9b01      	ldr	r3, [sp, #4]
 8001a1a:	2400      	movs	r4, #0
 8001a1c:	401d      	ands	r5, r3
 8001a1e:	e5fc      	b.n	800161a <__aeabi_dmul+0xce>
 8001a20:	2400      	movs	r4, #0
 8001a22:	e7e2      	b.n	80019ea <__aeabi_dmul+0x49e>
 8001a24:	2280      	movs	r2, #128	; 0x80
 8001a26:	2501      	movs	r5, #1
 8001a28:	0312      	lsls	r2, r2, #12
 8001a2a:	4322      	orrs	r2, r4
 8001a2c:	9901      	ldr	r1, [sp, #4]
 8001a2e:	0312      	lsls	r2, r2, #12
 8001a30:	0b12      	lsrs	r2, r2, #12
 8001a32:	400d      	ands	r5, r1
 8001a34:	4699      	mov	r9, r3
 8001a36:	4c04      	ldr	r4, [pc, #16]	; (8001a48 <__aeabi_dmul+0x4fc>)
 8001a38:	e5ef      	b.n	800161a <__aeabi_dmul+0xce>
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	000003ff 	.word	0x000003ff
 8001a40:	feffffff 	.word	0xfeffffff
 8001a44:	000007fe 	.word	0x000007fe
 8001a48:	000007ff 	.word	0x000007ff

08001a4c <__aeabi_dsub>:
 8001a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4e:	4646      	mov	r6, r8
 8001a50:	46d6      	mov	lr, sl
 8001a52:	464f      	mov	r7, r9
 8001a54:	030c      	lsls	r4, r1, #12
 8001a56:	b5c0      	push	{r6, r7, lr}
 8001a58:	0fcd      	lsrs	r5, r1, #31
 8001a5a:	004e      	lsls	r6, r1, #1
 8001a5c:	0a61      	lsrs	r1, r4, #9
 8001a5e:	0f44      	lsrs	r4, r0, #29
 8001a60:	430c      	orrs	r4, r1
 8001a62:	00c1      	lsls	r1, r0, #3
 8001a64:	0058      	lsls	r0, r3, #1
 8001a66:	0d40      	lsrs	r0, r0, #21
 8001a68:	4684      	mov	ip, r0
 8001a6a:	468a      	mov	sl, r1
 8001a6c:	000f      	movs	r7, r1
 8001a6e:	0319      	lsls	r1, r3, #12
 8001a70:	0f50      	lsrs	r0, r2, #29
 8001a72:	0a49      	lsrs	r1, r1, #9
 8001a74:	4301      	orrs	r1, r0
 8001a76:	48c6      	ldr	r0, [pc, #792]	; (8001d90 <__aeabi_dsub+0x344>)
 8001a78:	0d76      	lsrs	r6, r6, #21
 8001a7a:	46a8      	mov	r8, r5
 8001a7c:	0fdb      	lsrs	r3, r3, #31
 8001a7e:	00d2      	lsls	r2, r2, #3
 8001a80:	4584      	cmp	ip, r0
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dsub+0x3a>
 8001a84:	e0d8      	b.n	8001c38 <__aeabi_dsub+0x1ec>
 8001a86:	2001      	movs	r0, #1
 8001a88:	4043      	eors	r3, r0
 8001a8a:	42ab      	cmp	r3, r5
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dsub+0x44>
 8001a8e:	e0a6      	b.n	8001bde <__aeabi_dsub+0x192>
 8001a90:	4660      	mov	r0, ip
 8001a92:	1a35      	subs	r5, r6, r0
 8001a94:	2d00      	cmp	r5, #0
 8001a96:	dc00      	bgt.n	8001a9a <__aeabi_dsub+0x4e>
 8001a98:	e105      	b.n	8001ca6 <__aeabi_dsub+0x25a>
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	d110      	bne.n	8001ac0 <__aeabi_dsub+0x74>
 8001a9e:	000b      	movs	r3, r1
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dsub+0x5a>
 8001aa4:	e0d7      	b.n	8001c56 <__aeabi_dsub+0x20a>
 8001aa6:	1e6b      	subs	r3, r5, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d000      	beq.n	8001aae <__aeabi_dsub+0x62>
 8001aac:	e14b      	b.n	8001d46 <__aeabi_dsub+0x2fa>
 8001aae:	4653      	mov	r3, sl
 8001ab0:	1a9f      	subs	r7, r3, r2
 8001ab2:	45ba      	cmp	sl, r7
 8001ab4:	4180      	sbcs	r0, r0
 8001ab6:	1a64      	subs	r4, r4, r1
 8001ab8:	4240      	negs	r0, r0
 8001aba:	1a24      	subs	r4, r4, r0
 8001abc:	2601      	movs	r6, #1
 8001abe:	e01e      	b.n	8001afe <__aeabi_dsub+0xb2>
 8001ac0:	4bb3      	ldr	r3, [pc, #716]	; (8001d90 <__aeabi_dsub+0x344>)
 8001ac2:	429e      	cmp	r6, r3
 8001ac4:	d048      	beq.n	8001b58 <__aeabi_dsub+0x10c>
 8001ac6:	2380      	movs	r3, #128	; 0x80
 8001ac8:	041b      	lsls	r3, r3, #16
 8001aca:	4319      	orrs	r1, r3
 8001acc:	2d38      	cmp	r5, #56	; 0x38
 8001ace:	dd00      	ble.n	8001ad2 <__aeabi_dsub+0x86>
 8001ad0:	e119      	b.n	8001d06 <__aeabi_dsub+0x2ba>
 8001ad2:	2d1f      	cmp	r5, #31
 8001ad4:	dd00      	ble.n	8001ad8 <__aeabi_dsub+0x8c>
 8001ad6:	e14c      	b.n	8001d72 <__aeabi_dsub+0x326>
 8001ad8:	2320      	movs	r3, #32
 8001ada:	000f      	movs	r7, r1
 8001adc:	1b5b      	subs	r3, r3, r5
 8001ade:	0010      	movs	r0, r2
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	409f      	lsls	r7, r3
 8001ae4:	40e8      	lsrs	r0, r5
 8001ae6:	1e53      	subs	r3, r2, #1
 8001ae8:	419a      	sbcs	r2, r3
 8001aea:	40e9      	lsrs	r1, r5
 8001aec:	4307      	orrs	r7, r0
 8001aee:	4317      	orrs	r7, r2
 8001af0:	4653      	mov	r3, sl
 8001af2:	1bdf      	subs	r7, r3, r7
 8001af4:	1a61      	subs	r1, r4, r1
 8001af6:	45ba      	cmp	sl, r7
 8001af8:	41a4      	sbcs	r4, r4
 8001afa:	4264      	negs	r4, r4
 8001afc:	1b0c      	subs	r4, r1, r4
 8001afe:	0223      	lsls	r3, r4, #8
 8001b00:	d400      	bmi.n	8001b04 <__aeabi_dsub+0xb8>
 8001b02:	e0c5      	b.n	8001c90 <__aeabi_dsub+0x244>
 8001b04:	0264      	lsls	r4, r4, #9
 8001b06:	0a65      	lsrs	r5, r4, #9
 8001b08:	2d00      	cmp	r5, #0
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_dsub+0xc2>
 8001b0c:	e0f6      	b.n	8001cfc <__aeabi_dsub+0x2b0>
 8001b0e:	0028      	movs	r0, r5
 8001b10:	f000 fb80 	bl	8002214 <__clzsi2>
 8001b14:	0003      	movs	r3, r0
 8001b16:	3b08      	subs	r3, #8
 8001b18:	2b1f      	cmp	r3, #31
 8001b1a:	dd00      	ble.n	8001b1e <__aeabi_dsub+0xd2>
 8001b1c:	e0e9      	b.n	8001cf2 <__aeabi_dsub+0x2a6>
 8001b1e:	2220      	movs	r2, #32
 8001b20:	003c      	movs	r4, r7
 8001b22:	1ad2      	subs	r2, r2, r3
 8001b24:	409d      	lsls	r5, r3
 8001b26:	40d4      	lsrs	r4, r2
 8001b28:	409f      	lsls	r7, r3
 8001b2a:	4325      	orrs	r5, r4
 8001b2c:	429e      	cmp	r6, r3
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dsub+0xe6>
 8001b30:	e0db      	b.n	8001cea <__aeabi_dsub+0x29e>
 8001b32:	1b9e      	subs	r6, r3, r6
 8001b34:	1c73      	adds	r3, r6, #1
 8001b36:	2b1f      	cmp	r3, #31
 8001b38:	dd00      	ble.n	8001b3c <__aeabi_dsub+0xf0>
 8001b3a:	e10a      	b.n	8001d52 <__aeabi_dsub+0x306>
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	0038      	movs	r0, r7
 8001b40:	1ad2      	subs	r2, r2, r3
 8001b42:	0029      	movs	r1, r5
 8001b44:	4097      	lsls	r7, r2
 8001b46:	002c      	movs	r4, r5
 8001b48:	4091      	lsls	r1, r2
 8001b4a:	40d8      	lsrs	r0, r3
 8001b4c:	1e7a      	subs	r2, r7, #1
 8001b4e:	4197      	sbcs	r7, r2
 8001b50:	40dc      	lsrs	r4, r3
 8001b52:	2600      	movs	r6, #0
 8001b54:	4301      	orrs	r1, r0
 8001b56:	430f      	orrs	r7, r1
 8001b58:	077b      	lsls	r3, r7, #29
 8001b5a:	d009      	beq.n	8001b70 <__aeabi_dsub+0x124>
 8001b5c:	230f      	movs	r3, #15
 8001b5e:	403b      	ands	r3, r7
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d005      	beq.n	8001b70 <__aeabi_dsub+0x124>
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	42bb      	cmp	r3, r7
 8001b68:	41bf      	sbcs	r7, r7
 8001b6a:	427f      	negs	r7, r7
 8001b6c:	19e4      	adds	r4, r4, r7
 8001b6e:	001f      	movs	r7, r3
 8001b70:	0223      	lsls	r3, r4, #8
 8001b72:	d525      	bpl.n	8001bc0 <__aeabi_dsub+0x174>
 8001b74:	4b86      	ldr	r3, [pc, #536]	; (8001d90 <__aeabi_dsub+0x344>)
 8001b76:	3601      	adds	r6, #1
 8001b78:	429e      	cmp	r6, r3
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_dsub+0x132>
 8001b7c:	e0af      	b.n	8001cde <__aeabi_dsub+0x292>
 8001b7e:	4b85      	ldr	r3, [pc, #532]	; (8001d94 <__aeabi_dsub+0x348>)
 8001b80:	2501      	movs	r5, #1
 8001b82:	401c      	ands	r4, r3
 8001b84:	4643      	mov	r3, r8
 8001b86:	0762      	lsls	r2, r4, #29
 8001b88:	08ff      	lsrs	r7, r7, #3
 8001b8a:	0264      	lsls	r4, r4, #9
 8001b8c:	0576      	lsls	r6, r6, #21
 8001b8e:	4317      	orrs	r7, r2
 8001b90:	0b24      	lsrs	r4, r4, #12
 8001b92:	0d76      	lsrs	r6, r6, #21
 8001b94:	401d      	ands	r5, r3
 8001b96:	2100      	movs	r1, #0
 8001b98:	0324      	lsls	r4, r4, #12
 8001b9a:	0b23      	lsrs	r3, r4, #12
 8001b9c:	0d0c      	lsrs	r4, r1, #20
 8001b9e:	4a7e      	ldr	r2, [pc, #504]	; (8001d98 <__aeabi_dsub+0x34c>)
 8001ba0:	0524      	lsls	r4, r4, #20
 8001ba2:	431c      	orrs	r4, r3
 8001ba4:	4014      	ands	r4, r2
 8001ba6:	0533      	lsls	r3, r6, #20
 8001ba8:	4323      	orrs	r3, r4
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	07ed      	lsls	r5, r5, #31
 8001bae:	085b      	lsrs	r3, r3, #1
 8001bb0:	432b      	orrs	r3, r5
 8001bb2:	0038      	movs	r0, r7
 8001bb4:	0019      	movs	r1, r3
 8001bb6:	bc1c      	pop	{r2, r3, r4}
 8001bb8:	4690      	mov	r8, r2
 8001bba:	4699      	mov	r9, r3
 8001bbc:	46a2      	mov	sl, r4
 8001bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bc0:	2501      	movs	r5, #1
 8001bc2:	4643      	mov	r3, r8
 8001bc4:	0762      	lsls	r2, r4, #29
 8001bc6:	08ff      	lsrs	r7, r7, #3
 8001bc8:	4317      	orrs	r7, r2
 8001bca:	08e4      	lsrs	r4, r4, #3
 8001bcc:	401d      	ands	r5, r3
 8001bce:	4b70      	ldr	r3, [pc, #448]	; (8001d90 <__aeabi_dsub+0x344>)
 8001bd0:	429e      	cmp	r6, r3
 8001bd2:	d036      	beq.n	8001c42 <__aeabi_dsub+0x1f6>
 8001bd4:	0324      	lsls	r4, r4, #12
 8001bd6:	0576      	lsls	r6, r6, #21
 8001bd8:	0b24      	lsrs	r4, r4, #12
 8001bda:	0d76      	lsrs	r6, r6, #21
 8001bdc:	e7db      	b.n	8001b96 <__aeabi_dsub+0x14a>
 8001bde:	4663      	mov	r3, ip
 8001be0:	1af3      	subs	r3, r6, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	dc00      	bgt.n	8001be8 <__aeabi_dsub+0x19c>
 8001be6:	e094      	b.n	8001d12 <__aeabi_dsub+0x2c6>
 8001be8:	4660      	mov	r0, ip
 8001bea:	2800      	cmp	r0, #0
 8001bec:	d035      	beq.n	8001c5a <__aeabi_dsub+0x20e>
 8001bee:	4868      	ldr	r0, [pc, #416]	; (8001d90 <__aeabi_dsub+0x344>)
 8001bf0:	4286      	cmp	r6, r0
 8001bf2:	d0b1      	beq.n	8001b58 <__aeabi_dsub+0x10c>
 8001bf4:	2780      	movs	r7, #128	; 0x80
 8001bf6:	043f      	lsls	r7, r7, #16
 8001bf8:	4339      	orrs	r1, r7
 8001bfa:	2b38      	cmp	r3, #56	; 0x38
 8001bfc:	dc00      	bgt.n	8001c00 <__aeabi_dsub+0x1b4>
 8001bfe:	e0fd      	b.n	8001dfc <__aeabi_dsub+0x3b0>
 8001c00:	430a      	orrs	r2, r1
 8001c02:	0017      	movs	r7, r2
 8001c04:	2100      	movs	r1, #0
 8001c06:	1e7a      	subs	r2, r7, #1
 8001c08:	4197      	sbcs	r7, r2
 8001c0a:	4457      	add	r7, sl
 8001c0c:	4557      	cmp	r7, sl
 8001c0e:	4180      	sbcs	r0, r0
 8001c10:	1909      	adds	r1, r1, r4
 8001c12:	4244      	negs	r4, r0
 8001c14:	190c      	adds	r4, r1, r4
 8001c16:	0223      	lsls	r3, r4, #8
 8001c18:	d53a      	bpl.n	8001c90 <__aeabi_dsub+0x244>
 8001c1a:	4b5d      	ldr	r3, [pc, #372]	; (8001d90 <__aeabi_dsub+0x344>)
 8001c1c:	3601      	adds	r6, #1
 8001c1e:	429e      	cmp	r6, r3
 8001c20:	d100      	bne.n	8001c24 <__aeabi_dsub+0x1d8>
 8001c22:	e14b      	b.n	8001ebc <__aeabi_dsub+0x470>
 8001c24:	2201      	movs	r2, #1
 8001c26:	4b5b      	ldr	r3, [pc, #364]	; (8001d94 <__aeabi_dsub+0x348>)
 8001c28:	401c      	ands	r4, r3
 8001c2a:	087b      	lsrs	r3, r7, #1
 8001c2c:	4017      	ands	r7, r2
 8001c2e:	431f      	orrs	r7, r3
 8001c30:	07e2      	lsls	r2, r4, #31
 8001c32:	4317      	orrs	r7, r2
 8001c34:	0864      	lsrs	r4, r4, #1
 8001c36:	e78f      	b.n	8001b58 <__aeabi_dsub+0x10c>
 8001c38:	0008      	movs	r0, r1
 8001c3a:	4310      	orrs	r0, r2
 8001c3c:	d000      	beq.n	8001c40 <__aeabi_dsub+0x1f4>
 8001c3e:	e724      	b.n	8001a8a <__aeabi_dsub+0x3e>
 8001c40:	e721      	b.n	8001a86 <__aeabi_dsub+0x3a>
 8001c42:	0023      	movs	r3, r4
 8001c44:	433b      	orrs	r3, r7
 8001c46:	d100      	bne.n	8001c4a <__aeabi_dsub+0x1fe>
 8001c48:	e1b9      	b.n	8001fbe <__aeabi_dsub+0x572>
 8001c4a:	2280      	movs	r2, #128	; 0x80
 8001c4c:	0312      	lsls	r2, r2, #12
 8001c4e:	4314      	orrs	r4, r2
 8001c50:	0324      	lsls	r4, r4, #12
 8001c52:	0b24      	lsrs	r4, r4, #12
 8001c54:	e79f      	b.n	8001b96 <__aeabi_dsub+0x14a>
 8001c56:	002e      	movs	r6, r5
 8001c58:	e77e      	b.n	8001b58 <__aeabi_dsub+0x10c>
 8001c5a:	0008      	movs	r0, r1
 8001c5c:	4310      	orrs	r0, r2
 8001c5e:	d100      	bne.n	8001c62 <__aeabi_dsub+0x216>
 8001c60:	e0ca      	b.n	8001df8 <__aeabi_dsub+0x3ac>
 8001c62:	1e58      	subs	r0, r3, #1
 8001c64:	4684      	mov	ip, r0
 8001c66:	2800      	cmp	r0, #0
 8001c68:	d000      	beq.n	8001c6c <__aeabi_dsub+0x220>
 8001c6a:	e0e7      	b.n	8001e3c <__aeabi_dsub+0x3f0>
 8001c6c:	4452      	add	r2, sl
 8001c6e:	4552      	cmp	r2, sl
 8001c70:	4180      	sbcs	r0, r0
 8001c72:	1864      	adds	r4, r4, r1
 8001c74:	4240      	negs	r0, r0
 8001c76:	1824      	adds	r4, r4, r0
 8001c78:	0017      	movs	r7, r2
 8001c7a:	2601      	movs	r6, #1
 8001c7c:	0223      	lsls	r3, r4, #8
 8001c7e:	d507      	bpl.n	8001c90 <__aeabi_dsub+0x244>
 8001c80:	2602      	movs	r6, #2
 8001c82:	e7cf      	b.n	8001c24 <__aeabi_dsub+0x1d8>
 8001c84:	4664      	mov	r4, ip
 8001c86:	432c      	orrs	r4, r5
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dsub+0x240>
 8001c8a:	e1b3      	b.n	8001ff4 <__aeabi_dsub+0x5a8>
 8001c8c:	002c      	movs	r4, r5
 8001c8e:	4667      	mov	r7, ip
 8001c90:	077b      	lsls	r3, r7, #29
 8001c92:	d000      	beq.n	8001c96 <__aeabi_dsub+0x24a>
 8001c94:	e762      	b.n	8001b5c <__aeabi_dsub+0x110>
 8001c96:	0763      	lsls	r3, r4, #29
 8001c98:	08ff      	lsrs	r7, r7, #3
 8001c9a:	431f      	orrs	r7, r3
 8001c9c:	2501      	movs	r5, #1
 8001c9e:	4643      	mov	r3, r8
 8001ca0:	08e4      	lsrs	r4, r4, #3
 8001ca2:	401d      	ands	r5, r3
 8001ca4:	e793      	b.n	8001bce <__aeabi_dsub+0x182>
 8001ca6:	2d00      	cmp	r5, #0
 8001ca8:	d178      	bne.n	8001d9c <__aeabi_dsub+0x350>
 8001caa:	1c75      	adds	r5, r6, #1
 8001cac:	056d      	lsls	r5, r5, #21
 8001cae:	0d6d      	lsrs	r5, r5, #21
 8001cb0:	2d01      	cmp	r5, #1
 8001cb2:	dc00      	bgt.n	8001cb6 <__aeabi_dsub+0x26a>
 8001cb4:	e0f2      	b.n	8001e9c <__aeabi_dsub+0x450>
 8001cb6:	4650      	mov	r0, sl
 8001cb8:	1a80      	subs	r0, r0, r2
 8001cba:	4582      	cmp	sl, r0
 8001cbc:	41bf      	sbcs	r7, r7
 8001cbe:	1a65      	subs	r5, r4, r1
 8001cc0:	427f      	negs	r7, r7
 8001cc2:	1bed      	subs	r5, r5, r7
 8001cc4:	4684      	mov	ip, r0
 8001cc6:	0228      	lsls	r0, r5, #8
 8001cc8:	d400      	bmi.n	8001ccc <__aeabi_dsub+0x280>
 8001cca:	e08c      	b.n	8001de6 <__aeabi_dsub+0x39a>
 8001ccc:	4650      	mov	r0, sl
 8001cce:	1a17      	subs	r7, r2, r0
 8001cd0:	42ba      	cmp	r2, r7
 8001cd2:	4192      	sbcs	r2, r2
 8001cd4:	1b0c      	subs	r4, r1, r4
 8001cd6:	4255      	negs	r5, r2
 8001cd8:	1b65      	subs	r5, r4, r5
 8001cda:	4698      	mov	r8, r3
 8001cdc:	e714      	b.n	8001b08 <__aeabi_dsub+0xbc>
 8001cde:	2501      	movs	r5, #1
 8001ce0:	4643      	mov	r3, r8
 8001ce2:	2400      	movs	r4, #0
 8001ce4:	401d      	ands	r5, r3
 8001ce6:	2700      	movs	r7, #0
 8001ce8:	e755      	b.n	8001b96 <__aeabi_dsub+0x14a>
 8001cea:	4c2a      	ldr	r4, [pc, #168]	; (8001d94 <__aeabi_dsub+0x348>)
 8001cec:	1af6      	subs	r6, r6, r3
 8001cee:	402c      	ands	r4, r5
 8001cf0:	e732      	b.n	8001b58 <__aeabi_dsub+0x10c>
 8001cf2:	003d      	movs	r5, r7
 8001cf4:	3828      	subs	r0, #40	; 0x28
 8001cf6:	4085      	lsls	r5, r0
 8001cf8:	2700      	movs	r7, #0
 8001cfa:	e717      	b.n	8001b2c <__aeabi_dsub+0xe0>
 8001cfc:	0038      	movs	r0, r7
 8001cfe:	f000 fa89 	bl	8002214 <__clzsi2>
 8001d02:	3020      	adds	r0, #32
 8001d04:	e706      	b.n	8001b14 <__aeabi_dsub+0xc8>
 8001d06:	430a      	orrs	r2, r1
 8001d08:	0017      	movs	r7, r2
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	1e7a      	subs	r2, r7, #1
 8001d0e:	4197      	sbcs	r7, r2
 8001d10:	e6ee      	b.n	8001af0 <__aeabi_dsub+0xa4>
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d000      	beq.n	8001d18 <__aeabi_dsub+0x2cc>
 8001d16:	e0e5      	b.n	8001ee4 <__aeabi_dsub+0x498>
 8001d18:	1c73      	adds	r3, r6, #1
 8001d1a:	469c      	mov	ip, r3
 8001d1c:	055b      	lsls	r3, r3, #21
 8001d1e:	0d5b      	lsrs	r3, r3, #21
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	dc00      	bgt.n	8001d26 <__aeabi_dsub+0x2da>
 8001d24:	e09f      	b.n	8001e66 <__aeabi_dsub+0x41a>
 8001d26:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <__aeabi_dsub+0x344>)
 8001d28:	459c      	cmp	ip, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x2e2>
 8001d2c:	e0c5      	b.n	8001eba <__aeabi_dsub+0x46e>
 8001d2e:	4452      	add	r2, sl
 8001d30:	4552      	cmp	r2, sl
 8001d32:	4180      	sbcs	r0, r0
 8001d34:	1864      	adds	r4, r4, r1
 8001d36:	4240      	negs	r0, r0
 8001d38:	1824      	adds	r4, r4, r0
 8001d3a:	07e7      	lsls	r7, r4, #31
 8001d3c:	0852      	lsrs	r2, r2, #1
 8001d3e:	4317      	orrs	r7, r2
 8001d40:	0864      	lsrs	r4, r4, #1
 8001d42:	4666      	mov	r6, ip
 8001d44:	e708      	b.n	8001b58 <__aeabi_dsub+0x10c>
 8001d46:	4812      	ldr	r0, [pc, #72]	; (8001d90 <__aeabi_dsub+0x344>)
 8001d48:	4285      	cmp	r5, r0
 8001d4a:	d100      	bne.n	8001d4e <__aeabi_dsub+0x302>
 8001d4c:	e085      	b.n	8001e5a <__aeabi_dsub+0x40e>
 8001d4e:	001d      	movs	r5, r3
 8001d50:	e6bc      	b.n	8001acc <__aeabi_dsub+0x80>
 8001d52:	0029      	movs	r1, r5
 8001d54:	3e1f      	subs	r6, #31
 8001d56:	40f1      	lsrs	r1, r6
 8001d58:	2b20      	cmp	r3, #32
 8001d5a:	d100      	bne.n	8001d5e <__aeabi_dsub+0x312>
 8001d5c:	e07f      	b.n	8001e5e <__aeabi_dsub+0x412>
 8001d5e:	2240      	movs	r2, #64	; 0x40
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	409d      	lsls	r5, r3
 8001d64:	432f      	orrs	r7, r5
 8001d66:	1e7d      	subs	r5, r7, #1
 8001d68:	41af      	sbcs	r7, r5
 8001d6a:	2400      	movs	r4, #0
 8001d6c:	430f      	orrs	r7, r1
 8001d6e:	2600      	movs	r6, #0
 8001d70:	e78e      	b.n	8001c90 <__aeabi_dsub+0x244>
 8001d72:	002b      	movs	r3, r5
 8001d74:	000f      	movs	r7, r1
 8001d76:	3b20      	subs	r3, #32
 8001d78:	40df      	lsrs	r7, r3
 8001d7a:	2d20      	cmp	r5, #32
 8001d7c:	d071      	beq.n	8001e62 <__aeabi_dsub+0x416>
 8001d7e:	2340      	movs	r3, #64	; 0x40
 8001d80:	1b5d      	subs	r5, r3, r5
 8001d82:	40a9      	lsls	r1, r5
 8001d84:	430a      	orrs	r2, r1
 8001d86:	1e51      	subs	r1, r2, #1
 8001d88:	418a      	sbcs	r2, r1
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4317      	orrs	r7, r2
 8001d8e:	e6af      	b.n	8001af0 <__aeabi_dsub+0xa4>
 8001d90:	000007ff 	.word	0x000007ff
 8001d94:	ff7fffff 	.word	0xff7fffff
 8001d98:	800fffff 	.word	0x800fffff
 8001d9c:	2e00      	cmp	r6, #0
 8001d9e:	d03e      	beq.n	8001e1e <__aeabi_dsub+0x3d2>
 8001da0:	4eb3      	ldr	r6, [pc, #716]	; (8002070 <__aeabi_dsub+0x624>)
 8001da2:	45b4      	cmp	ip, r6
 8001da4:	d045      	beq.n	8001e32 <__aeabi_dsub+0x3e6>
 8001da6:	2680      	movs	r6, #128	; 0x80
 8001da8:	0436      	lsls	r6, r6, #16
 8001daa:	426d      	negs	r5, r5
 8001dac:	4334      	orrs	r4, r6
 8001dae:	2d38      	cmp	r5, #56	; 0x38
 8001db0:	dd00      	ble.n	8001db4 <__aeabi_dsub+0x368>
 8001db2:	e0a8      	b.n	8001f06 <__aeabi_dsub+0x4ba>
 8001db4:	2d1f      	cmp	r5, #31
 8001db6:	dd00      	ble.n	8001dba <__aeabi_dsub+0x36e>
 8001db8:	e11f      	b.n	8001ffa <__aeabi_dsub+0x5ae>
 8001dba:	2620      	movs	r6, #32
 8001dbc:	0027      	movs	r7, r4
 8001dbe:	4650      	mov	r0, sl
 8001dc0:	1b76      	subs	r6, r6, r5
 8001dc2:	40b7      	lsls	r7, r6
 8001dc4:	40e8      	lsrs	r0, r5
 8001dc6:	4307      	orrs	r7, r0
 8001dc8:	4650      	mov	r0, sl
 8001dca:	40b0      	lsls	r0, r6
 8001dcc:	1e46      	subs	r6, r0, #1
 8001dce:	41b0      	sbcs	r0, r6
 8001dd0:	40ec      	lsrs	r4, r5
 8001dd2:	4338      	orrs	r0, r7
 8001dd4:	1a17      	subs	r7, r2, r0
 8001dd6:	42ba      	cmp	r2, r7
 8001dd8:	4192      	sbcs	r2, r2
 8001dda:	1b0c      	subs	r4, r1, r4
 8001ddc:	4252      	negs	r2, r2
 8001dde:	1aa4      	subs	r4, r4, r2
 8001de0:	4666      	mov	r6, ip
 8001de2:	4698      	mov	r8, r3
 8001de4:	e68b      	b.n	8001afe <__aeabi_dsub+0xb2>
 8001de6:	4664      	mov	r4, ip
 8001de8:	4667      	mov	r7, ip
 8001dea:	432c      	orrs	r4, r5
 8001dec:	d000      	beq.n	8001df0 <__aeabi_dsub+0x3a4>
 8001dee:	e68b      	b.n	8001b08 <__aeabi_dsub+0xbc>
 8001df0:	2500      	movs	r5, #0
 8001df2:	2600      	movs	r6, #0
 8001df4:	2700      	movs	r7, #0
 8001df6:	e6ea      	b.n	8001bce <__aeabi_dsub+0x182>
 8001df8:	001e      	movs	r6, r3
 8001dfa:	e6ad      	b.n	8001b58 <__aeabi_dsub+0x10c>
 8001dfc:	2b1f      	cmp	r3, #31
 8001dfe:	dc60      	bgt.n	8001ec2 <__aeabi_dsub+0x476>
 8001e00:	2720      	movs	r7, #32
 8001e02:	1af8      	subs	r0, r7, r3
 8001e04:	000f      	movs	r7, r1
 8001e06:	4684      	mov	ip, r0
 8001e08:	4087      	lsls	r7, r0
 8001e0a:	0010      	movs	r0, r2
 8001e0c:	40d8      	lsrs	r0, r3
 8001e0e:	4307      	orrs	r7, r0
 8001e10:	4660      	mov	r0, ip
 8001e12:	4082      	lsls	r2, r0
 8001e14:	1e50      	subs	r0, r2, #1
 8001e16:	4182      	sbcs	r2, r0
 8001e18:	40d9      	lsrs	r1, r3
 8001e1a:	4317      	orrs	r7, r2
 8001e1c:	e6f5      	b.n	8001c0a <__aeabi_dsub+0x1be>
 8001e1e:	0026      	movs	r6, r4
 8001e20:	4650      	mov	r0, sl
 8001e22:	4306      	orrs	r6, r0
 8001e24:	d005      	beq.n	8001e32 <__aeabi_dsub+0x3e6>
 8001e26:	43ed      	mvns	r5, r5
 8001e28:	2d00      	cmp	r5, #0
 8001e2a:	d0d3      	beq.n	8001dd4 <__aeabi_dsub+0x388>
 8001e2c:	4e90      	ldr	r6, [pc, #576]	; (8002070 <__aeabi_dsub+0x624>)
 8001e2e:	45b4      	cmp	ip, r6
 8001e30:	d1bd      	bne.n	8001dae <__aeabi_dsub+0x362>
 8001e32:	000c      	movs	r4, r1
 8001e34:	0017      	movs	r7, r2
 8001e36:	4666      	mov	r6, ip
 8001e38:	4698      	mov	r8, r3
 8001e3a:	e68d      	b.n	8001b58 <__aeabi_dsub+0x10c>
 8001e3c:	488c      	ldr	r0, [pc, #560]	; (8002070 <__aeabi_dsub+0x624>)
 8001e3e:	4283      	cmp	r3, r0
 8001e40:	d00b      	beq.n	8001e5a <__aeabi_dsub+0x40e>
 8001e42:	4663      	mov	r3, ip
 8001e44:	e6d9      	b.n	8001bfa <__aeabi_dsub+0x1ae>
 8001e46:	2d00      	cmp	r5, #0
 8001e48:	d000      	beq.n	8001e4c <__aeabi_dsub+0x400>
 8001e4a:	e096      	b.n	8001f7a <__aeabi_dsub+0x52e>
 8001e4c:	0008      	movs	r0, r1
 8001e4e:	4310      	orrs	r0, r2
 8001e50:	d100      	bne.n	8001e54 <__aeabi_dsub+0x408>
 8001e52:	e0e2      	b.n	800201a <__aeabi_dsub+0x5ce>
 8001e54:	000c      	movs	r4, r1
 8001e56:	0017      	movs	r7, r2
 8001e58:	4698      	mov	r8, r3
 8001e5a:	4e85      	ldr	r6, [pc, #532]	; (8002070 <__aeabi_dsub+0x624>)
 8001e5c:	e67c      	b.n	8001b58 <__aeabi_dsub+0x10c>
 8001e5e:	2500      	movs	r5, #0
 8001e60:	e780      	b.n	8001d64 <__aeabi_dsub+0x318>
 8001e62:	2100      	movs	r1, #0
 8001e64:	e78e      	b.n	8001d84 <__aeabi_dsub+0x338>
 8001e66:	0023      	movs	r3, r4
 8001e68:	4650      	mov	r0, sl
 8001e6a:	4303      	orrs	r3, r0
 8001e6c:	2e00      	cmp	r6, #0
 8001e6e:	d000      	beq.n	8001e72 <__aeabi_dsub+0x426>
 8001e70:	e0a8      	b.n	8001fc4 <__aeabi_dsub+0x578>
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d100      	bne.n	8001e78 <__aeabi_dsub+0x42c>
 8001e76:	e0de      	b.n	8002036 <__aeabi_dsub+0x5ea>
 8001e78:	000b      	movs	r3, r1
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	d100      	bne.n	8001e80 <__aeabi_dsub+0x434>
 8001e7e:	e66b      	b.n	8001b58 <__aeabi_dsub+0x10c>
 8001e80:	4452      	add	r2, sl
 8001e82:	4552      	cmp	r2, sl
 8001e84:	4180      	sbcs	r0, r0
 8001e86:	1864      	adds	r4, r4, r1
 8001e88:	4240      	negs	r0, r0
 8001e8a:	1824      	adds	r4, r4, r0
 8001e8c:	0017      	movs	r7, r2
 8001e8e:	0223      	lsls	r3, r4, #8
 8001e90:	d400      	bmi.n	8001e94 <__aeabi_dsub+0x448>
 8001e92:	e6fd      	b.n	8001c90 <__aeabi_dsub+0x244>
 8001e94:	4b77      	ldr	r3, [pc, #476]	; (8002074 <__aeabi_dsub+0x628>)
 8001e96:	4666      	mov	r6, ip
 8001e98:	401c      	ands	r4, r3
 8001e9a:	e65d      	b.n	8001b58 <__aeabi_dsub+0x10c>
 8001e9c:	0025      	movs	r5, r4
 8001e9e:	4650      	mov	r0, sl
 8001ea0:	4305      	orrs	r5, r0
 8001ea2:	2e00      	cmp	r6, #0
 8001ea4:	d1cf      	bne.n	8001e46 <__aeabi_dsub+0x3fa>
 8001ea6:	2d00      	cmp	r5, #0
 8001ea8:	d14f      	bne.n	8001f4a <__aeabi_dsub+0x4fe>
 8001eaa:	000c      	movs	r4, r1
 8001eac:	4314      	orrs	r4, r2
 8001eae:	d100      	bne.n	8001eb2 <__aeabi_dsub+0x466>
 8001eb0:	e0a0      	b.n	8001ff4 <__aeabi_dsub+0x5a8>
 8001eb2:	000c      	movs	r4, r1
 8001eb4:	0017      	movs	r7, r2
 8001eb6:	4698      	mov	r8, r3
 8001eb8:	e64e      	b.n	8001b58 <__aeabi_dsub+0x10c>
 8001eba:	4666      	mov	r6, ip
 8001ebc:	2400      	movs	r4, #0
 8001ebe:	2700      	movs	r7, #0
 8001ec0:	e685      	b.n	8001bce <__aeabi_dsub+0x182>
 8001ec2:	001f      	movs	r7, r3
 8001ec4:	0008      	movs	r0, r1
 8001ec6:	3f20      	subs	r7, #32
 8001ec8:	40f8      	lsrs	r0, r7
 8001eca:	0007      	movs	r7, r0
 8001ecc:	2b20      	cmp	r3, #32
 8001ece:	d100      	bne.n	8001ed2 <__aeabi_dsub+0x486>
 8001ed0:	e08e      	b.n	8001ff0 <__aeabi_dsub+0x5a4>
 8001ed2:	2040      	movs	r0, #64	; 0x40
 8001ed4:	1ac3      	subs	r3, r0, r3
 8001ed6:	4099      	lsls	r1, r3
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	1e51      	subs	r1, r2, #1
 8001edc:	418a      	sbcs	r2, r1
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4317      	orrs	r7, r2
 8001ee2:	e692      	b.n	8001c0a <__aeabi_dsub+0x1be>
 8001ee4:	2e00      	cmp	r6, #0
 8001ee6:	d114      	bne.n	8001f12 <__aeabi_dsub+0x4c6>
 8001ee8:	0026      	movs	r6, r4
 8001eea:	4650      	mov	r0, sl
 8001eec:	4306      	orrs	r6, r0
 8001eee:	d062      	beq.n	8001fb6 <__aeabi_dsub+0x56a>
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d15c      	bne.n	8001fb0 <__aeabi_dsub+0x564>
 8001ef6:	1887      	adds	r7, r0, r2
 8001ef8:	4297      	cmp	r7, r2
 8001efa:	4192      	sbcs	r2, r2
 8001efc:	1864      	adds	r4, r4, r1
 8001efe:	4252      	negs	r2, r2
 8001f00:	18a4      	adds	r4, r4, r2
 8001f02:	4666      	mov	r6, ip
 8001f04:	e687      	b.n	8001c16 <__aeabi_dsub+0x1ca>
 8001f06:	4650      	mov	r0, sl
 8001f08:	4320      	orrs	r0, r4
 8001f0a:	1e44      	subs	r4, r0, #1
 8001f0c:	41a0      	sbcs	r0, r4
 8001f0e:	2400      	movs	r4, #0
 8001f10:	e760      	b.n	8001dd4 <__aeabi_dsub+0x388>
 8001f12:	4e57      	ldr	r6, [pc, #348]	; (8002070 <__aeabi_dsub+0x624>)
 8001f14:	45b4      	cmp	ip, r6
 8001f16:	d04e      	beq.n	8001fb6 <__aeabi_dsub+0x56a>
 8001f18:	2680      	movs	r6, #128	; 0x80
 8001f1a:	0436      	lsls	r6, r6, #16
 8001f1c:	425b      	negs	r3, r3
 8001f1e:	4334      	orrs	r4, r6
 8001f20:	2b38      	cmp	r3, #56	; 0x38
 8001f22:	dd00      	ble.n	8001f26 <__aeabi_dsub+0x4da>
 8001f24:	e07f      	b.n	8002026 <__aeabi_dsub+0x5da>
 8001f26:	2b1f      	cmp	r3, #31
 8001f28:	dd00      	ble.n	8001f2c <__aeabi_dsub+0x4e0>
 8001f2a:	e08b      	b.n	8002044 <__aeabi_dsub+0x5f8>
 8001f2c:	2620      	movs	r6, #32
 8001f2e:	0027      	movs	r7, r4
 8001f30:	4650      	mov	r0, sl
 8001f32:	1af6      	subs	r6, r6, r3
 8001f34:	40b7      	lsls	r7, r6
 8001f36:	40d8      	lsrs	r0, r3
 8001f38:	4307      	orrs	r7, r0
 8001f3a:	4650      	mov	r0, sl
 8001f3c:	40b0      	lsls	r0, r6
 8001f3e:	1e46      	subs	r6, r0, #1
 8001f40:	41b0      	sbcs	r0, r6
 8001f42:	4307      	orrs	r7, r0
 8001f44:	40dc      	lsrs	r4, r3
 8001f46:	18bf      	adds	r7, r7, r2
 8001f48:	e7d6      	b.n	8001ef8 <__aeabi_dsub+0x4ac>
 8001f4a:	000d      	movs	r5, r1
 8001f4c:	4315      	orrs	r5, r2
 8001f4e:	d100      	bne.n	8001f52 <__aeabi_dsub+0x506>
 8001f50:	e602      	b.n	8001b58 <__aeabi_dsub+0x10c>
 8001f52:	4650      	mov	r0, sl
 8001f54:	1a80      	subs	r0, r0, r2
 8001f56:	4582      	cmp	sl, r0
 8001f58:	41bf      	sbcs	r7, r7
 8001f5a:	1a65      	subs	r5, r4, r1
 8001f5c:	427f      	negs	r7, r7
 8001f5e:	1bed      	subs	r5, r5, r7
 8001f60:	4684      	mov	ip, r0
 8001f62:	0228      	lsls	r0, r5, #8
 8001f64:	d400      	bmi.n	8001f68 <__aeabi_dsub+0x51c>
 8001f66:	e68d      	b.n	8001c84 <__aeabi_dsub+0x238>
 8001f68:	4650      	mov	r0, sl
 8001f6a:	1a17      	subs	r7, r2, r0
 8001f6c:	42ba      	cmp	r2, r7
 8001f6e:	4192      	sbcs	r2, r2
 8001f70:	1b0c      	subs	r4, r1, r4
 8001f72:	4252      	negs	r2, r2
 8001f74:	1aa4      	subs	r4, r4, r2
 8001f76:	4698      	mov	r8, r3
 8001f78:	e5ee      	b.n	8001b58 <__aeabi_dsub+0x10c>
 8001f7a:	000d      	movs	r5, r1
 8001f7c:	4315      	orrs	r5, r2
 8001f7e:	d100      	bne.n	8001f82 <__aeabi_dsub+0x536>
 8001f80:	e76b      	b.n	8001e5a <__aeabi_dsub+0x40e>
 8001f82:	4650      	mov	r0, sl
 8001f84:	0767      	lsls	r7, r4, #29
 8001f86:	08c0      	lsrs	r0, r0, #3
 8001f88:	4307      	orrs	r7, r0
 8001f8a:	2080      	movs	r0, #128	; 0x80
 8001f8c:	08e4      	lsrs	r4, r4, #3
 8001f8e:	0300      	lsls	r0, r0, #12
 8001f90:	4204      	tst	r4, r0
 8001f92:	d007      	beq.n	8001fa4 <__aeabi_dsub+0x558>
 8001f94:	08cd      	lsrs	r5, r1, #3
 8001f96:	4205      	tst	r5, r0
 8001f98:	d104      	bne.n	8001fa4 <__aeabi_dsub+0x558>
 8001f9a:	002c      	movs	r4, r5
 8001f9c:	4698      	mov	r8, r3
 8001f9e:	08d7      	lsrs	r7, r2, #3
 8001fa0:	0749      	lsls	r1, r1, #29
 8001fa2:	430f      	orrs	r7, r1
 8001fa4:	0f7b      	lsrs	r3, r7, #29
 8001fa6:	00e4      	lsls	r4, r4, #3
 8001fa8:	431c      	orrs	r4, r3
 8001faa:	00ff      	lsls	r7, r7, #3
 8001fac:	4e30      	ldr	r6, [pc, #192]	; (8002070 <__aeabi_dsub+0x624>)
 8001fae:	e5d3      	b.n	8001b58 <__aeabi_dsub+0x10c>
 8001fb0:	4e2f      	ldr	r6, [pc, #188]	; (8002070 <__aeabi_dsub+0x624>)
 8001fb2:	45b4      	cmp	ip, r6
 8001fb4:	d1b4      	bne.n	8001f20 <__aeabi_dsub+0x4d4>
 8001fb6:	000c      	movs	r4, r1
 8001fb8:	0017      	movs	r7, r2
 8001fba:	4666      	mov	r6, ip
 8001fbc:	e5cc      	b.n	8001b58 <__aeabi_dsub+0x10c>
 8001fbe:	2700      	movs	r7, #0
 8001fc0:	2400      	movs	r4, #0
 8001fc2:	e5e8      	b.n	8001b96 <__aeabi_dsub+0x14a>
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d039      	beq.n	800203c <__aeabi_dsub+0x5f0>
 8001fc8:	000b      	movs	r3, r1
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	d100      	bne.n	8001fd0 <__aeabi_dsub+0x584>
 8001fce:	e744      	b.n	8001e5a <__aeabi_dsub+0x40e>
 8001fd0:	08c0      	lsrs	r0, r0, #3
 8001fd2:	0767      	lsls	r7, r4, #29
 8001fd4:	4307      	orrs	r7, r0
 8001fd6:	2080      	movs	r0, #128	; 0x80
 8001fd8:	08e4      	lsrs	r4, r4, #3
 8001fda:	0300      	lsls	r0, r0, #12
 8001fdc:	4204      	tst	r4, r0
 8001fde:	d0e1      	beq.n	8001fa4 <__aeabi_dsub+0x558>
 8001fe0:	08cb      	lsrs	r3, r1, #3
 8001fe2:	4203      	tst	r3, r0
 8001fe4:	d1de      	bne.n	8001fa4 <__aeabi_dsub+0x558>
 8001fe6:	08d7      	lsrs	r7, r2, #3
 8001fe8:	0749      	lsls	r1, r1, #29
 8001fea:	430f      	orrs	r7, r1
 8001fec:	001c      	movs	r4, r3
 8001fee:	e7d9      	b.n	8001fa4 <__aeabi_dsub+0x558>
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	e771      	b.n	8001ed8 <__aeabi_dsub+0x48c>
 8001ff4:	2500      	movs	r5, #0
 8001ff6:	2700      	movs	r7, #0
 8001ff8:	e5e9      	b.n	8001bce <__aeabi_dsub+0x182>
 8001ffa:	002e      	movs	r6, r5
 8001ffc:	0027      	movs	r7, r4
 8001ffe:	3e20      	subs	r6, #32
 8002000:	40f7      	lsrs	r7, r6
 8002002:	2d20      	cmp	r5, #32
 8002004:	d02f      	beq.n	8002066 <__aeabi_dsub+0x61a>
 8002006:	2640      	movs	r6, #64	; 0x40
 8002008:	1b75      	subs	r5, r6, r5
 800200a:	40ac      	lsls	r4, r5
 800200c:	4650      	mov	r0, sl
 800200e:	4320      	orrs	r0, r4
 8002010:	1e44      	subs	r4, r0, #1
 8002012:	41a0      	sbcs	r0, r4
 8002014:	2400      	movs	r4, #0
 8002016:	4338      	orrs	r0, r7
 8002018:	e6dc      	b.n	8001dd4 <__aeabi_dsub+0x388>
 800201a:	2480      	movs	r4, #128	; 0x80
 800201c:	2500      	movs	r5, #0
 800201e:	0324      	lsls	r4, r4, #12
 8002020:	4e13      	ldr	r6, [pc, #76]	; (8002070 <__aeabi_dsub+0x624>)
 8002022:	2700      	movs	r7, #0
 8002024:	e5d3      	b.n	8001bce <__aeabi_dsub+0x182>
 8002026:	4650      	mov	r0, sl
 8002028:	4320      	orrs	r0, r4
 800202a:	0007      	movs	r7, r0
 800202c:	1e78      	subs	r0, r7, #1
 800202e:	4187      	sbcs	r7, r0
 8002030:	2400      	movs	r4, #0
 8002032:	18bf      	adds	r7, r7, r2
 8002034:	e760      	b.n	8001ef8 <__aeabi_dsub+0x4ac>
 8002036:	000c      	movs	r4, r1
 8002038:	0017      	movs	r7, r2
 800203a:	e58d      	b.n	8001b58 <__aeabi_dsub+0x10c>
 800203c:	000c      	movs	r4, r1
 800203e:	0017      	movs	r7, r2
 8002040:	4e0b      	ldr	r6, [pc, #44]	; (8002070 <__aeabi_dsub+0x624>)
 8002042:	e589      	b.n	8001b58 <__aeabi_dsub+0x10c>
 8002044:	001e      	movs	r6, r3
 8002046:	0027      	movs	r7, r4
 8002048:	3e20      	subs	r6, #32
 800204a:	40f7      	lsrs	r7, r6
 800204c:	2b20      	cmp	r3, #32
 800204e:	d00c      	beq.n	800206a <__aeabi_dsub+0x61e>
 8002050:	2640      	movs	r6, #64	; 0x40
 8002052:	1af3      	subs	r3, r6, r3
 8002054:	409c      	lsls	r4, r3
 8002056:	4650      	mov	r0, sl
 8002058:	4320      	orrs	r0, r4
 800205a:	1e44      	subs	r4, r0, #1
 800205c:	41a0      	sbcs	r0, r4
 800205e:	4307      	orrs	r7, r0
 8002060:	2400      	movs	r4, #0
 8002062:	18bf      	adds	r7, r7, r2
 8002064:	e748      	b.n	8001ef8 <__aeabi_dsub+0x4ac>
 8002066:	2400      	movs	r4, #0
 8002068:	e7d0      	b.n	800200c <__aeabi_dsub+0x5c0>
 800206a:	2400      	movs	r4, #0
 800206c:	e7f3      	b.n	8002056 <__aeabi_dsub+0x60a>
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	000007ff 	.word	0x000007ff
 8002074:	ff7fffff 	.word	0xff7fffff

08002078 <__aeabi_dcmpun>:
 8002078:	b570      	push	{r4, r5, r6, lr}
 800207a:	4e0e      	ldr	r6, [pc, #56]	; (80020b4 <__aeabi_dcmpun+0x3c>)
 800207c:	030d      	lsls	r5, r1, #12
 800207e:	031c      	lsls	r4, r3, #12
 8002080:	0049      	lsls	r1, r1, #1
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	0b2d      	lsrs	r5, r5, #12
 8002086:	0d49      	lsrs	r1, r1, #21
 8002088:	0b24      	lsrs	r4, r4, #12
 800208a:	0d5b      	lsrs	r3, r3, #21
 800208c:	42b1      	cmp	r1, r6
 800208e:	d004      	beq.n	800209a <__aeabi_dcmpun+0x22>
 8002090:	4908      	ldr	r1, [pc, #32]	; (80020b4 <__aeabi_dcmpun+0x3c>)
 8002092:	2000      	movs	r0, #0
 8002094:	428b      	cmp	r3, r1
 8002096:	d008      	beq.n	80020aa <__aeabi_dcmpun+0x32>
 8002098:	bd70      	pop	{r4, r5, r6, pc}
 800209a:	4305      	orrs	r5, r0
 800209c:	2001      	movs	r0, #1
 800209e:	2d00      	cmp	r5, #0
 80020a0:	d1fa      	bne.n	8002098 <__aeabi_dcmpun+0x20>
 80020a2:	4904      	ldr	r1, [pc, #16]	; (80020b4 <__aeabi_dcmpun+0x3c>)
 80020a4:	2000      	movs	r0, #0
 80020a6:	428b      	cmp	r3, r1
 80020a8:	d1f6      	bne.n	8002098 <__aeabi_dcmpun+0x20>
 80020aa:	4314      	orrs	r4, r2
 80020ac:	0020      	movs	r0, r4
 80020ae:	1e44      	subs	r4, r0, #1
 80020b0:	41a0      	sbcs	r0, r4
 80020b2:	e7f1      	b.n	8002098 <__aeabi_dcmpun+0x20>
 80020b4:	000007ff 	.word	0x000007ff

080020b8 <__aeabi_d2iz>:
 80020b8:	b530      	push	{r4, r5, lr}
 80020ba:	4d13      	ldr	r5, [pc, #76]	; (8002108 <__aeabi_d2iz+0x50>)
 80020bc:	030a      	lsls	r2, r1, #12
 80020be:	004b      	lsls	r3, r1, #1
 80020c0:	0b12      	lsrs	r2, r2, #12
 80020c2:	0d5b      	lsrs	r3, r3, #21
 80020c4:	0fc9      	lsrs	r1, r1, #31
 80020c6:	2400      	movs	r4, #0
 80020c8:	42ab      	cmp	r3, r5
 80020ca:	dd10      	ble.n	80020ee <__aeabi_d2iz+0x36>
 80020cc:	4c0f      	ldr	r4, [pc, #60]	; (800210c <__aeabi_d2iz+0x54>)
 80020ce:	42a3      	cmp	r3, r4
 80020d0:	dc0f      	bgt.n	80020f2 <__aeabi_d2iz+0x3a>
 80020d2:	2480      	movs	r4, #128	; 0x80
 80020d4:	4d0e      	ldr	r5, [pc, #56]	; (8002110 <__aeabi_d2iz+0x58>)
 80020d6:	0364      	lsls	r4, r4, #13
 80020d8:	4322      	orrs	r2, r4
 80020da:	1aed      	subs	r5, r5, r3
 80020dc:	2d1f      	cmp	r5, #31
 80020de:	dd0b      	ble.n	80020f8 <__aeabi_d2iz+0x40>
 80020e0:	480c      	ldr	r0, [pc, #48]	; (8002114 <__aeabi_d2iz+0x5c>)
 80020e2:	1ac3      	subs	r3, r0, r3
 80020e4:	40da      	lsrs	r2, r3
 80020e6:	4254      	negs	r4, r2
 80020e8:	2900      	cmp	r1, #0
 80020ea:	d100      	bne.n	80020ee <__aeabi_d2iz+0x36>
 80020ec:	0014      	movs	r4, r2
 80020ee:	0020      	movs	r0, r4
 80020f0:	bd30      	pop	{r4, r5, pc}
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <__aeabi_d2iz+0x60>)
 80020f4:	18cc      	adds	r4, r1, r3
 80020f6:	e7fa      	b.n	80020ee <__aeabi_d2iz+0x36>
 80020f8:	4c08      	ldr	r4, [pc, #32]	; (800211c <__aeabi_d2iz+0x64>)
 80020fa:	40e8      	lsrs	r0, r5
 80020fc:	46a4      	mov	ip, r4
 80020fe:	4463      	add	r3, ip
 8002100:	409a      	lsls	r2, r3
 8002102:	4302      	orrs	r2, r0
 8002104:	e7ef      	b.n	80020e6 <__aeabi_d2iz+0x2e>
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	000003fe 	.word	0x000003fe
 800210c:	0000041d 	.word	0x0000041d
 8002110:	00000433 	.word	0x00000433
 8002114:	00000413 	.word	0x00000413
 8002118:	7fffffff 	.word	0x7fffffff
 800211c:	fffffbed 	.word	0xfffffbed

08002120 <__aeabi_i2d>:
 8002120:	b570      	push	{r4, r5, r6, lr}
 8002122:	2800      	cmp	r0, #0
 8002124:	d030      	beq.n	8002188 <__aeabi_i2d+0x68>
 8002126:	17c3      	asrs	r3, r0, #31
 8002128:	18c4      	adds	r4, r0, r3
 800212a:	405c      	eors	r4, r3
 800212c:	0fc5      	lsrs	r5, r0, #31
 800212e:	0020      	movs	r0, r4
 8002130:	f000 f870 	bl	8002214 <__clzsi2>
 8002134:	4b17      	ldr	r3, [pc, #92]	; (8002194 <__aeabi_i2d+0x74>)
 8002136:	4a18      	ldr	r2, [pc, #96]	; (8002198 <__aeabi_i2d+0x78>)
 8002138:	1a1b      	subs	r3, r3, r0
 800213a:	1ad2      	subs	r2, r2, r3
 800213c:	2a1f      	cmp	r2, #31
 800213e:	dd18      	ble.n	8002172 <__aeabi_i2d+0x52>
 8002140:	4a16      	ldr	r2, [pc, #88]	; (800219c <__aeabi_i2d+0x7c>)
 8002142:	1ad2      	subs	r2, r2, r3
 8002144:	4094      	lsls	r4, r2
 8002146:	2200      	movs	r2, #0
 8002148:	0324      	lsls	r4, r4, #12
 800214a:	055b      	lsls	r3, r3, #21
 800214c:	0b24      	lsrs	r4, r4, #12
 800214e:	0d5b      	lsrs	r3, r3, #21
 8002150:	2100      	movs	r1, #0
 8002152:	0010      	movs	r0, r2
 8002154:	0324      	lsls	r4, r4, #12
 8002156:	0d0a      	lsrs	r2, r1, #20
 8002158:	0b24      	lsrs	r4, r4, #12
 800215a:	0512      	lsls	r2, r2, #20
 800215c:	4322      	orrs	r2, r4
 800215e:	4c10      	ldr	r4, [pc, #64]	; (80021a0 <__aeabi_i2d+0x80>)
 8002160:	051b      	lsls	r3, r3, #20
 8002162:	4022      	ands	r2, r4
 8002164:	4313      	orrs	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	07ed      	lsls	r5, r5, #31
 800216a:	085b      	lsrs	r3, r3, #1
 800216c:	432b      	orrs	r3, r5
 800216e:	0019      	movs	r1, r3
 8002170:	bd70      	pop	{r4, r5, r6, pc}
 8002172:	0021      	movs	r1, r4
 8002174:	4091      	lsls	r1, r2
 8002176:	000a      	movs	r2, r1
 8002178:	210b      	movs	r1, #11
 800217a:	1a08      	subs	r0, r1, r0
 800217c:	40c4      	lsrs	r4, r0
 800217e:	055b      	lsls	r3, r3, #21
 8002180:	0324      	lsls	r4, r4, #12
 8002182:	0b24      	lsrs	r4, r4, #12
 8002184:	0d5b      	lsrs	r3, r3, #21
 8002186:	e7e3      	b.n	8002150 <__aeabi_i2d+0x30>
 8002188:	2500      	movs	r5, #0
 800218a:	2300      	movs	r3, #0
 800218c:	2400      	movs	r4, #0
 800218e:	2200      	movs	r2, #0
 8002190:	e7de      	b.n	8002150 <__aeabi_i2d+0x30>
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	0000041e 	.word	0x0000041e
 8002198:	00000433 	.word	0x00000433
 800219c:	00000413 	.word	0x00000413
 80021a0:	800fffff 	.word	0x800fffff

080021a4 <__aeabi_ui2d>:
 80021a4:	b510      	push	{r4, lr}
 80021a6:	1e04      	subs	r4, r0, #0
 80021a8:	d028      	beq.n	80021fc <__aeabi_ui2d+0x58>
 80021aa:	f000 f833 	bl	8002214 <__clzsi2>
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <__aeabi_ui2d+0x60>)
 80021b0:	4a15      	ldr	r2, [pc, #84]	; (8002208 <__aeabi_ui2d+0x64>)
 80021b2:	1a1b      	subs	r3, r3, r0
 80021b4:	1ad2      	subs	r2, r2, r3
 80021b6:	2a1f      	cmp	r2, #31
 80021b8:	dd15      	ble.n	80021e6 <__aeabi_ui2d+0x42>
 80021ba:	4a14      	ldr	r2, [pc, #80]	; (800220c <__aeabi_ui2d+0x68>)
 80021bc:	1ad2      	subs	r2, r2, r3
 80021be:	4094      	lsls	r4, r2
 80021c0:	2200      	movs	r2, #0
 80021c2:	0324      	lsls	r4, r4, #12
 80021c4:	055b      	lsls	r3, r3, #21
 80021c6:	0b24      	lsrs	r4, r4, #12
 80021c8:	0d5b      	lsrs	r3, r3, #21
 80021ca:	2100      	movs	r1, #0
 80021cc:	0010      	movs	r0, r2
 80021ce:	0324      	lsls	r4, r4, #12
 80021d0:	0d0a      	lsrs	r2, r1, #20
 80021d2:	0b24      	lsrs	r4, r4, #12
 80021d4:	0512      	lsls	r2, r2, #20
 80021d6:	4322      	orrs	r2, r4
 80021d8:	4c0d      	ldr	r4, [pc, #52]	; (8002210 <__aeabi_ui2d+0x6c>)
 80021da:	051b      	lsls	r3, r3, #20
 80021dc:	4022      	ands	r2, r4
 80021de:	4313      	orrs	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	0859      	lsrs	r1, r3, #1
 80021e4:	bd10      	pop	{r4, pc}
 80021e6:	0021      	movs	r1, r4
 80021e8:	4091      	lsls	r1, r2
 80021ea:	000a      	movs	r2, r1
 80021ec:	210b      	movs	r1, #11
 80021ee:	1a08      	subs	r0, r1, r0
 80021f0:	40c4      	lsrs	r4, r0
 80021f2:	055b      	lsls	r3, r3, #21
 80021f4:	0324      	lsls	r4, r4, #12
 80021f6:	0b24      	lsrs	r4, r4, #12
 80021f8:	0d5b      	lsrs	r3, r3, #21
 80021fa:	e7e6      	b.n	80021ca <__aeabi_ui2d+0x26>
 80021fc:	2300      	movs	r3, #0
 80021fe:	2400      	movs	r4, #0
 8002200:	2200      	movs	r2, #0
 8002202:	e7e2      	b.n	80021ca <__aeabi_ui2d+0x26>
 8002204:	0000041e 	.word	0x0000041e
 8002208:	00000433 	.word	0x00000433
 800220c:	00000413 	.word	0x00000413
 8002210:	800fffff 	.word	0x800fffff

08002214 <__clzsi2>:
 8002214:	211c      	movs	r1, #28
 8002216:	2301      	movs	r3, #1
 8002218:	041b      	lsls	r3, r3, #16
 800221a:	4298      	cmp	r0, r3
 800221c:	d301      	bcc.n	8002222 <__clzsi2+0xe>
 800221e:	0c00      	lsrs	r0, r0, #16
 8002220:	3910      	subs	r1, #16
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	4298      	cmp	r0, r3
 8002226:	d301      	bcc.n	800222c <__clzsi2+0x18>
 8002228:	0a00      	lsrs	r0, r0, #8
 800222a:	3908      	subs	r1, #8
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	4298      	cmp	r0, r3
 8002230:	d301      	bcc.n	8002236 <__clzsi2+0x22>
 8002232:	0900      	lsrs	r0, r0, #4
 8002234:	3904      	subs	r1, #4
 8002236:	a202      	add	r2, pc, #8	; (adr r2, 8002240 <__clzsi2+0x2c>)
 8002238:	5c10      	ldrb	r0, [r2, r0]
 800223a:	1840      	adds	r0, r0, r1
 800223c:	4770      	bx	lr
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	02020304 	.word	0x02020304
 8002244:	01010101 	.word	0x01010101
	...

08002250 <__clzdi2>:
 8002250:	b510      	push	{r4, lr}
 8002252:	2900      	cmp	r1, #0
 8002254:	d103      	bne.n	800225e <__clzdi2+0xe>
 8002256:	f7ff ffdd 	bl	8002214 <__clzsi2>
 800225a:	3020      	adds	r0, #32
 800225c:	e002      	b.n	8002264 <__clzdi2+0x14>
 800225e:	1c08      	adds	r0, r1, #0
 8002260:	f7ff ffd8 	bl	8002214 <__clzsi2>
 8002264:	bd10      	pop	{r4, pc}
 8002266:	46c0      	nop			; (mov r8, r8)

08002268 <ST7735_write>:
uint16_t scr_height;
//uint8_t buf_tft[3300] = {0};
static lv_disp_drv_t * disp_p;

void ST7735_write(uint8_t data)
{
 8002268:	b507      	push	{r0, r1, r2, lr}
 800226a:	466b      	mov	r3, sp
 800226c:	1dd9      	adds	r1, r3, #7
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 800226e:	2301      	movs	r3, #1
{
 8002270:	7008      	strb	r0, [r1, #0]
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 8002272:	425b      	negs	r3, r3
 8002274:	2201      	movs	r2, #1
 8002276:	4802      	ldr	r0, [pc, #8]	; (8002280 <ST7735_write+0x18>)
 8002278:	f003 f93b 	bl	80054f2 <HAL_SPI_Transmit>
}
 800227c:	bd07      	pop	{r0, r1, r2, pc}
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	20004944 	.word	0x20004944

08002284 <ST7735_cmd>:
	tmp[0] = color >> 8;
	tmp[1] = color;
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&tmp[0], 2, HAL_MAX_DELAY);
}

void ST7735_cmd(uint8_t cmd) {
 8002284:	b510      	push	{r4, lr}
 8002286:	0004      	movs	r4, r0
	A0_L();
 8002288:	2200      	movs	r2, #0
 800228a:	2110      	movs	r1, #16
 800228c:	4803      	ldr	r0, [pc, #12]	; (800229c <ST7735_cmd+0x18>)
 800228e:	f002 fa97 	bl	80047c0 <HAL_GPIO_WritePin>
	ST7735_write(cmd);
 8002292:	0020      	movs	r0, r4
 8002294:	f7ff ffe8 	bl	8002268 <ST7735_write>
}
 8002298:	bd10      	pop	{r4, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	50000c00 	.word	0x50000c00

080022a0 <ST7735_data>:

void ST7735_data(uint8_t data) {
 80022a0:	b510      	push	{r4, lr}
 80022a2:	0004      	movs	r4, r0
	A0_H();
 80022a4:	2201      	movs	r2, #1
 80022a6:	2110      	movs	r1, #16
 80022a8:	4803      	ldr	r0, [pc, #12]	; (80022b8 <ST7735_data+0x18>)
 80022aa:	f002 fa89 	bl	80047c0 <HAL_GPIO_WritePin>
	ST7735_write(data);
 80022ae:	0020      	movs	r0, r4
 80022b0:	f7ff ffda 	bl	8002268 <ST7735_write>
}
 80022b4:	bd10      	pop	{r4, pc}
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	50000c00 	.word	0x50000c00

080022bc <ST7735_Orientation>:
	CS_H();

	ST7735_Orientation(scr_CCW);
}

void ST7735_Orientation(ScrOrientation_TypeDef orientation) {
 80022bc:	b510      	push	{r4, lr}
	CS_L();
 80022be:	2200      	movs	r2, #0
 80022c0:	2102      	movs	r1, #2
void ST7735_Orientation(ScrOrientation_TypeDef orientation) {
 80022c2:	0004      	movs	r4, r0
	CS_L();
 80022c4:	4813      	ldr	r0, [pc, #76]	; (8002314 <ST7735_Orientation+0x58>)
 80022c6:	f002 fa7b 	bl	80047c0 <HAL_GPIO_WritePin>
	ST7735_cmd(0x36); // Memory data access control:
 80022ca:	2036      	movs	r0, #54	; 0x36
 80022cc:	f7ff ffda 	bl	8002284 <ST7735_cmd>
 80022d0:	4a11      	ldr	r2, [pc, #68]	; (8002318 <ST7735_Orientation+0x5c>)
 80022d2:	20a0      	movs	r0, #160	; 0xa0
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <ST7735_Orientation+0x60>)
	switch(orientation) {
 80022d6:	2c02      	cmp	r4, #2
 80022d8:	d00e      	beq.n	80022f8 <ST7735_Orientation+0x3c>
 80022da:	2180      	movs	r1, #128	; 0x80
 80022dc:	2c03      	cmp	r4, #3
 80022de:	d010      	beq.n	8002302 <ST7735_Orientation+0x46>
 80022e0:	2c01      	cmp	r4, #1
 80022e2:	d112      	bne.n	800230a <ST7735_Orientation+0x4e>
	case scr_CW:
		scr_width  = TFT_H;
 80022e4:	8010      	strh	r0, [r2, #0]
		scr_height = TFT_W;
 80022e6:	8019      	strh	r1, [r3, #0]
		ST7735_data(0xc0); // X-Mirror,Y-Mirror: Bottom to top; Right to left; RGB
		break;
	default:
		scr_width  = TFT_W;
		scr_height = TFT_H;
		ST7735_data(0x00); // Normal: Top to Bottom; Left to Right; RGB
 80022e8:	f7ff ffda 	bl	80022a0 <ST7735_data>
		break;
	}
	CS_H();
 80022ec:	2201      	movs	r2, #1
 80022ee:	2102      	movs	r1, #2
 80022f0:	4808      	ldr	r0, [pc, #32]	; (8002314 <ST7735_Orientation+0x58>)
 80022f2:	f002 fa65 	bl	80047c0 <HAL_GPIO_WritePin>
}
 80022f6:	bd10      	pop	{r4, pc}
		scr_width  = TFT_H;
 80022f8:	8010      	strh	r0, [r2, #0]
		scr_height = TFT_W;
 80022fa:	2280      	movs	r2, #128	; 0x80
		ST7735_data(0x60); // X-Y Exchange,X-Mirror
 80022fc:	2060      	movs	r0, #96	; 0x60
		scr_height = TFT_W;
 80022fe:	801a      	strh	r2, [r3, #0]
 8002300:	e7f2      	b.n	80022e8 <ST7735_Orientation+0x2c>
		scr_height = TFT_H;
 8002302:	8018      	strh	r0, [r3, #0]
		scr_width  = TFT_W;
 8002304:	8011      	strh	r1, [r2, #0]
		ST7735_data(0xc0); // X-Mirror,Y-Mirror: Bottom to top; Right to left; RGB
 8002306:	20c0      	movs	r0, #192	; 0xc0
 8002308:	e7ee      	b.n	80022e8 <ST7735_Orientation+0x2c>
		scr_height = TFT_H;
 800230a:	8018      	strh	r0, [r3, #0]
		scr_width  = TFT_W;
 800230c:	8011      	strh	r1, [r2, #0]
		ST7735_data(0x00); // Normal: Top to Bottom; Left to Right; RGB
 800230e:	2000      	movs	r0, #0
 8002310:	e7ea      	b.n	80022e8 <ST7735_Orientation+0x2c>
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	50000c00 	.word	0x50000c00
 8002318:	200046e4 	.word	0x200046e4
 800231c:	200046e6 	.word	0x200046e6

08002320 <ST7735_Init>:
void ST7735_Init(void) {
 8002320:	b510      	push	{r4, lr}
	CS_H();
 8002322:	4c44      	ldr	r4, [pc, #272]	; (8002434 <ST7735_Init+0x114>)
 8002324:	2201      	movs	r2, #1
 8002326:	0020      	movs	r0, r4
 8002328:	2102      	movs	r1, #2
 800232a:	f002 fa49 	bl	80047c0 <HAL_GPIO_WritePin>
	RST_H();
 800232e:	2201      	movs	r2, #1
 8002330:	0020      	movs	r0, r4
 8002332:	0011      	movs	r1, r2
 8002334:	f002 fa44 	bl	80047c0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002338:	2005      	movs	r0, #5
 800233a:	f001 fe77 	bl	800402c <HAL_Delay>
	RST_L();
 800233e:	2200      	movs	r2, #0
 8002340:	2101      	movs	r1, #1
 8002342:	0020      	movs	r0, r4
 8002344:	f002 fa3c 	bl	80047c0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002348:	2005      	movs	r0, #5
 800234a:	f001 fe6f 	bl	800402c <HAL_Delay>
	RST_H();
 800234e:	2201      	movs	r2, #1
 8002350:	0020      	movs	r0, r4
 8002352:	0011      	movs	r1, r2
 8002354:	f002 fa34 	bl	80047c0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002358:	2005      	movs	r0, #5
 800235a:	f001 fe67 	bl	800402c <HAL_Delay>
	CS_L();
 800235e:	2200      	movs	r2, #0
 8002360:	2102      	movs	r1, #2
 8002362:	0020      	movs	r0, r4
 8002364:	f002 fa2c 	bl	80047c0 <HAL_GPIO_WritePin>
	ST7735_cmd(0x11); 	// Sleep out & booster on
 8002368:	2011      	movs	r0, #17
 800236a:	f7ff ff8b 	bl	8002284 <ST7735_cmd>
	HAL_Delay(25); 		// Datasheet says what display wakes about 120ms (may be much faster actually)
 800236e:	2019      	movs	r0, #25
 8002370:	f001 fe5c 	bl	800402c <HAL_Delay>
	ST7735_cmd(0xb1);   // In normal mode (full colors):
 8002374:	20b1      	movs	r0, #177	; 0xb1
 8002376:	f7ff ff85 	bl	8002284 <ST7735_cmd>
	A0_H();
 800237a:	2201      	movs	r2, #1
 800237c:	2110      	movs	r1, #16
 800237e:	0020      	movs	r0, r4
 8002380:	f002 fa1e 	bl	80047c0 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNA set 1-line period: RTNA2, RTNA0
 8002384:	2005      	movs	r0, #5
 8002386:	f7ff ff6f 	bl	8002268 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPA5,FPA4,FPA3,FPA2
 800238a:	203c      	movs	r0, #60	; 0x3c
 800238c:	f7ff ff6c 	bl	8002268 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPA5,BPA4,BPA3,BPA2
 8002390:	203c      	movs	r0, #60	; 0x3c
 8002392:	f7ff ff69 	bl	8002268 <ST7735_write>
	ST7735_cmd(0xb2);   // In idle mode (8-colors):
 8002396:	20b2      	movs	r0, #178	; 0xb2
 8002398:	f7ff ff74 	bl	8002284 <ST7735_cmd>
	A0_H();
 800239c:	2201      	movs	r2, #1
 800239e:	2110      	movs	r1, #16
 80023a0:	0020      	movs	r0, r4
 80023a2:	f002 fa0d 	bl	80047c0 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNB set 1-line period: RTNAB, RTNB0
 80023a6:	2005      	movs	r0, #5
 80023a8:	f7ff ff5e 	bl	8002268 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPB5,FPB4,FPB3,FPB2
 80023ac:	203c      	movs	r0, #60	; 0x3c
 80023ae:	f7ff ff5b 	bl	8002268 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPB5,BPB4,BPB3,BPB2
 80023b2:	203c      	movs	r0, #60	; 0x3c
 80023b4:	f7ff ff58 	bl	8002268 <ST7735_write>
	ST7735_cmd(0xb3);   // In partial mode + full colors:
 80023b8:	20b3      	movs	r0, #179	; 0xb3
 80023ba:	f7ff ff63 	bl	8002284 <ST7735_cmd>
	A0_H();
 80023be:	2201      	movs	r2, #1
 80023c0:	2110      	movs	r1, #16
 80023c2:	0020      	movs	r0, r4
 80023c4:	f002 f9fc 	bl	80047c0 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNC set 1-line period: RTNC2, RTNC0
 80023c8:	2005      	movs	r0, #5
 80023ca:	f7ff ff4d 	bl	8002268 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPC5,FPC4,FPC3,FPC2
 80023ce:	203c      	movs	r0, #60	; 0x3c
 80023d0:	f7ff ff4a 	bl	8002268 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPC5,BPC4,BPC3,BPC2
 80023d4:	203c      	movs	r0, #60	; 0x3c
 80023d6:	f7ff ff47 	bl	8002268 <ST7735_write>
	ST7735_write(0x05); //   RTND set 1-line period: RTND2, RTND0
 80023da:	2005      	movs	r0, #5
 80023dc:	f7ff ff44 	bl	8002268 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPD5,FPD4,FPD3,FPD2
 80023e0:	203c      	movs	r0, #60	; 0x3c
 80023e2:	f7ff ff41 	bl	8002268 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPD5,BPD4,BPD3,BPD2
 80023e6:	203c      	movs	r0, #60	; 0x3c
 80023e8:	f7ff ff3e 	bl	8002268 <ST7735_write>
	ST7735_cmd(0xB4);   // Display dot inversion control:
 80023ec:	20b4      	movs	r0, #180	; 0xb4
 80023ee:	f7ff ff49 	bl	8002284 <ST7735_cmd>
	ST7735_data(0x03);  //   NLB,NLC
 80023f2:	2003      	movs	r0, #3
 80023f4:	f7ff ff54 	bl	80022a0 <ST7735_data>
	ST7735_cmd(0x3a);   // Interface pixel format
 80023f8:	203a      	movs	r0, #58	; 0x3a
 80023fa:	f7ff ff43 	bl	8002284 <ST7735_cmd>
	ST7735_data(0x05);  // 16-bit/pixel RGB 5-6-5 (65k colors)
 80023fe:	2005      	movs	r0, #5
 8002400:	f7ff ff4e 	bl	80022a0 <ST7735_data>
	ST7735_cmd(0x20);   // Display inversion off
 8002404:	2020      	movs	r0, #32
 8002406:	f7ff ff3d 	bl	8002284 <ST7735_cmd>
	ST7735_cmd(0x13);   // Partial mode off
 800240a:	2013      	movs	r0, #19
 800240c:	f7ff ff3a 	bl	8002284 <ST7735_cmd>
	ST7735_cmd(0x26);   // Gamma curve set:
 8002410:	2026      	movs	r0, #38	; 0x26
 8002412:	f7ff ff37 	bl	8002284 <ST7735_cmd>
	ST7735_data(0x01);  //   Gamma curve 1 (G2.2) or (G1.0)
 8002416:	2001      	movs	r0, #1
 8002418:	f7ff ff42 	bl	80022a0 <ST7735_data>
	ST7735_cmd(0x29);   // Display on
 800241c:	2029      	movs	r0, #41	; 0x29
 800241e:	f7ff ff31 	bl	8002284 <ST7735_cmd>
	CS_H();
 8002422:	2201      	movs	r2, #1
 8002424:	2102      	movs	r1, #2
 8002426:	0020      	movs	r0, r4
 8002428:	f002 f9ca 	bl	80047c0 <HAL_GPIO_WritePin>
	ST7735_Orientation(scr_CCW);
 800242c:	2002      	movs	r0, #2
 800242e:	f7ff ff45 	bl	80022bc <ST7735_Orientation>
}
 8002432:	bd10      	pop	{r4, pc}
 8002434:	50000c00 	.word	0x50000c00

08002438 <ST7735_AddrSet>:

void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 8002438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800243a:	0006      	movs	r6, r0
 800243c:	0015      	movs	r5, r2
 800243e:	000c      	movs	r4, r1
	ST7735_cmd(0x2a); // Column address set
	A0_H();
 8002440:	4f17      	ldr	r7, [pc, #92]	; (80024a0 <ST7735_AddrSet+0x68>)
	ST7735_cmd(0x2a); // Column address set
 8002442:	202a      	movs	r0, #42	; 0x2a
void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 8002444:	9301      	str	r3, [sp, #4]
	ST7735_cmd(0x2a); // Column address set
 8002446:	f7ff ff1d 	bl	8002284 <ST7735_cmd>
	A0_H();
 800244a:	2201      	movs	r2, #1
 800244c:	2110      	movs	r1, #16
 800244e:	0038      	movs	r0, r7
 8002450:	f002 f9b6 	bl	80047c0 <HAL_GPIO_WritePin>
	ST7735_write(XS >> 8);
 8002454:	0a30      	lsrs	r0, r6, #8
 8002456:	f7ff ff07 	bl	8002268 <ST7735_write>
	ST7735_write(XS);
 800245a:	b2f0      	uxtb	r0, r6
 800245c:	f7ff ff04 	bl	8002268 <ST7735_write>
	ST7735_write(XE >> 8);
 8002460:	0a28      	lsrs	r0, r5, #8
 8002462:	f7ff ff01 	bl	8002268 <ST7735_write>
	ST7735_write(XE);
 8002466:	b2e8      	uxtb	r0, r5
 8002468:	f7ff fefe 	bl	8002268 <ST7735_write>

	ST7735_cmd(0x2b); // Row address set
 800246c:	202b      	movs	r0, #43	; 0x2b
 800246e:	f7ff ff09 	bl	8002284 <ST7735_cmd>
	A0_H();
 8002472:	2201      	movs	r2, #1
 8002474:	2110      	movs	r1, #16
 8002476:	0038      	movs	r0, r7
 8002478:	f002 f9a2 	bl	80047c0 <HAL_GPIO_WritePin>
	ST7735_write(YS >> 8);
 800247c:	0a20      	lsrs	r0, r4, #8
 800247e:	f7ff fef3 	bl	8002268 <ST7735_write>
	ST7735_write(YS);
 8002482:	b2e0      	uxtb	r0, r4
 8002484:	f7ff fef0 	bl	8002268 <ST7735_write>
	ST7735_write(YE >> 8);
 8002488:	9b01      	ldr	r3, [sp, #4]
 800248a:	0a18      	lsrs	r0, r3, #8
 800248c:	f7ff feec 	bl	8002268 <ST7735_write>
	ST7735_write(YE);
 8002490:	466b      	mov	r3, sp
 8002492:	7918      	ldrb	r0, [r3, #4]
 8002494:	f7ff fee8 	bl	8002268 <ST7735_write>

	ST7735_cmd(0x2c); // Memory write
 8002498:	202c      	movs	r0, #44	; 0x2c
 800249a:	f7ff fef3 	bl	8002284 <ST7735_cmd>
}
 800249e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80024a0:	50000c00 	.word	0x50000c00

080024a4 <ST7735_Clear>:

void ST7735_Clear(uint16_t color) {
 80024a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t i;
	uint8_t  CH,CL;

	CH = color >> 8;
 80024a6:	0a03      	lsrs	r3, r0, #8
	CL = (uint8_t)color;

	CS_L();
 80024a8:	2200      	movs	r2, #0
 80024aa:	2102      	movs	r1, #2
	CL = (uint8_t)color;
 80024ac:	b2c5      	uxtb	r5, r0
	CS_L();
 80024ae:	4815      	ldr	r0, [pc, #84]	; (8002504 <ST7735_Clear+0x60>)
	CH = color >> 8;
 80024b0:	9301      	str	r3, [sp, #4]
	CS_L();
 80024b2:	f002 f985 	bl	80047c0 <HAL_GPIO_WritePin>
	ST7735_AddrSet(0, 0, scr_width - 1, scr_height - 1);
 80024b6:	2100      	movs	r1, #0
 80024b8:	4e13      	ldr	r6, [pc, #76]	; (8002508 <ST7735_Clear+0x64>)
 80024ba:	4f14      	ldr	r7, [pc, #80]	; (800250c <ST7735_Clear+0x68>)
 80024bc:	8833      	ldrh	r3, [r6, #0]
 80024be:	883a      	ldrh	r2, [r7, #0]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	3a01      	subs	r2, #1
 80024c4:	0008      	movs	r0, r1
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	b292      	uxth	r2, r2
 80024ca:	f7ff ffb5 	bl	8002438 <ST7735_AddrSet>
	A0_H();
 80024ce:	2201      	movs	r2, #1
 80024d0:	2110      	movs	r1, #16
 80024d2:	480c      	ldr	r0, [pc, #48]	; (8002504 <ST7735_Clear+0x60>)
 80024d4:	f002 f974 	bl	80047c0 <HAL_GPIO_WritePin>
	for (i = 0; i < scr_width * scr_height; i++) {
 80024d8:	2400      	movs	r4, #0
 80024da:	883a      	ldrh	r2, [r7, #0]
 80024dc:	8833      	ldrh	r3, [r6, #0]
 80024de:	4353      	muls	r3, r2
 80024e0:	429c      	cmp	r4, r3
 80024e2:	db05      	blt.n	80024f0 <ST7735_Clear+0x4c>
		ST7735_write(CH);
		ST7735_write(CL);
	}
	CS_H();
 80024e4:	2201      	movs	r2, #1
 80024e6:	2102      	movs	r1, #2
 80024e8:	4806      	ldr	r0, [pc, #24]	; (8002504 <ST7735_Clear+0x60>)
 80024ea:	f002 f969 	bl	80047c0 <HAL_GPIO_WritePin>
}
 80024ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		ST7735_write(CH);
 80024f0:	9801      	ldr	r0, [sp, #4]
 80024f2:	f7ff feb9 	bl	8002268 <ST7735_write>
	for (i = 0; i < scr_width * scr_height; i++) {
 80024f6:	3401      	adds	r4, #1
		ST7735_write(CL);
 80024f8:	0028      	movs	r0, r5
 80024fa:	f7ff feb5 	bl	8002268 <ST7735_write>
	for (i = 0; i < scr_width * scr_height; i++) {
 80024fe:	b2a4      	uxth	r4, r4
 8002500:	e7eb      	b.n	80024da <ST7735_Clear+0x36>
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	50000c00 	.word	0x50000c00
 8002508:	200046e6 	.word	0x200046e6
 800250c:	200046e4 	.word	0x200046e4

08002510 <ST7735_Flush_2>:
	lv_disp_flush_ready(disp_drv);                  /* Tell you are ready with the flushing*/
#endif
}

void ST7735_Flush_2(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
 8002510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002512:	000c      	movs	r4, r1
 8002514:	0016      	movs	r6, r2
	uint16_t size;
	uint16_t teste = 0;
	uint8_t tmp[2];

    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8002516:	2204      	movs	r2, #4
 8002518:	5e8b      	ldrsh	r3, [r1, r2]
 800251a:	2100      	movs	r1, #0
 800251c:	5e62      	ldrsh	r2, [r4, r1]
{
 800251e:	0005      	movs	r5, r0
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	2106      	movs	r1, #6
 8002524:	5e62      	ldrsh	r2, [r4, r1]
 8002526:	2002      	movs	r0, #2
 8002528:	5e21      	ldrsh	r1, [r4, r0]
 800252a:	3301      	adds	r3, #1
 800252c:	1a52      	subs	r2, r2, r1
 800252e:	3201      	adds	r2, #1
 8002530:	4353      	muls	r3, r2
{
 8002532:	b085      	sub	sp, #20
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8002534:	b29b      	uxth	r3, r3

	CS_L();
 8002536:	2200      	movs	r2, #0
 8002538:	2102      	movs	r1, #2
 800253a:	4829      	ldr	r0, [pc, #164]	; (80025e0 <ST7735_Flush_2+0xd0>)
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 800253c:	9301      	str	r3, [sp, #4]
	CS_L();
 800253e:	f002 f93f 	bl	80047c0 <HAL_GPIO_WritePin>
    ST7735_cmd(0x2a); // Column address set
 8002542:	202a      	movs	r0, #42	; 0x2a
 8002544:	f7ff fe9e 	bl	8002284 <ST7735_cmd>
	A0_H();
 8002548:	2201      	movs	r2, #1
 800254a:	2110      	movs	r1, #16
 800254c:	4824      	ldr	r0, [pc, #144]	; (80025e0 <ST7735_Flush_2+0xd0>)
 800254e:	f002 f937 	bl	80047c0 <HAL_GPIO_WritePin>
	ST7735_write(area->x1 >> 8);
 8002552:	7860      	ldrb	r0, [r4, #1]
 8002554:	f7ff fe88 	bl	8002268 <ST7735_write>
	ST7735_write(area->x1);
 8002558:	7820      	ldrb	r0, [r4, #0]
 800255a:	f7ff fe85 	bl	8002268 <ST7735_write>
	ST7735_write(area->x2 >> 8);
 800255e:	7960      	ldrb	r0, [r4, #5]
 8002560:	f7ff fe82 	bl	8002268 <ST7735_write>
	ST7735_write(area->x2);
 8002564:	7920      	ldrb	r0, [r4, #4]
 8002566:	f7ff fe7f 	bl	8002268 <ST7735_write>

	ST7735_cmd(0x2b); // Row address set
 800256a:	202b      	movs	r0, #43	; 0x2b
 800256c:	f7ff fe8a 	bl	8002284 <ST7735_cmd>
	A0_H();
 8002570:	2201      	movs	r2, #1
 8002572:	2110      	movs	r1, #16
 8002574:	481a      	ldr	r0, [pc, #104]	; (80025e0 <ST7735_Flush_2+0xd0>)
 8002576:	f002 f923 	bl	80047c0 <HAL_GPIO_WritePin>
	ST7735_write(area->y1 >> 8);
 800257a:	78e0      	ldrb	r0, [r4, #3]
 800257c:	f7ff fe74 	bl	8002268 <ST7735_write>
	ST7735_write(area->y1);
 8002580:	78a0      	ldrb	r0, [r4, #2]
 8002582:	f7ff fe71 	bl	8002268 <ST7735_write>
	ST7735_write(area->y2 >> 8);
 8002586:	79e0      	ldrb	r0, [r4, #7]
 8002588:	f7ff fe6e 	bl	8002268 <ST7735_write>
	ST7735_write(area->y2);
 800258c:	79a0      	ldrb	r0, [r4, #6]
 800258e:	f7ff fe6b 	bl	8002268 <ST7735_write>

	ST7735_cmd(0x2c); // Memory write
 8002592:	202c      	movs	r0, #44	; 0x2c
 8002594:	f7ff fe76 	bl	8002284 <ST7735_cmd>
	A0_H();
	//
	for(uint16_t x = 0; x <= size-1; x++) {
		tmp[0] = color_p->full >> 8;
		tmp[1] = color_p->full;
		HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&tmp[0], 2, HAL_MAX_DELAY);
 8002598:	2701      	movs	r7, #1
	A0_H();
 800259a:	2201      	movs	r2, #1
 800259c:	2110      	movs	r1, #16
 800259e:	4810      	ldr	r0, [pc, #64]	; (80025e0 <ST7735_Flush_2+0xd0>)
 80025a0:	f002 f90e 	bl	80047c0 <HAL_GPIO_WritePin>
	for(uint16_t x = 0; x <= size-1; x++) {
 80025a4:	2400      	movs	r4, #0
		HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&tmp[0], 2, HAL_MAX_DELAY);
 80025a6:	427f      	negs	r7, r7
	for(uint16_t x = 0; x <= size-1; x++) {
 80025a8:	9a01      	ldr	r2, [sp, #4]
 80025aa:	b2a3      	uxth	r3, r4
 80025ac:	429a      	cmp	r2, r3
 80025ae:	dc09      	bgt.n	80025c4 <ST7735_Flush_2+0xb4>
		color_p++;
		teste++;
	}
	CS_H();
 80025b0:	2201      	movs	r2, #1
 80025b2:	2102      	movs	r1, #2
 80025b4:	480a      	ldr	r0, [pc, #40]	; (80025e0 <ST7735_Flush_2+0xd0>)
 80025b6:	f002 f903 	bl	80047c0 <HAL_GPIO_WritePin>

//	sprintf(buffer, "ST7735-Flush2 X1: %d X2: %d Y1: %d Y2: %d Size: %d Teste: %d", area->x1, area->x2, area->y1, area->y2, size, teste);
//    LV_LOG_ERROR(buffer);

	lv_disp_flush_ready(disp_drv);                  /* Tell you are ready with the flushing*/
 80025ba:	0028      	movs	r0, r5
 80025bc:	f00b f840 	bl	800d640 <lv_disp_flush_ready>
}
 80025c0:	b005      	add	sp, #20
 80025c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[0] = color_p->full >> 8;
 80025c4:	0063      	lsls	r3, r4, #1
 80025c6:	5af3      	ldrh	r3, [r6, r3]
 80025c8:	a903      	add	r1, sp, #12
 80025ca:	0a1a      	lsrs	r2, r3, #8
 80025cc:	700a      	strb	r2, [r1, #0]
		tmp[1] = color_p->full;
 80025ce:	704b      	strb	r3, [r1, #1]
		HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&tmp[0], 2, HAL_MAX_DELAY);
 80025d0:	2202      	movs	r2, #2
 80025d2:	003b      	movs	r3, r7
 80025d4:	4803      	ldr	r0, [pc, #12]	; (80025e4 <ST7735_Flush_2+0xd4>)
 80025d6:	f002 ff8c 	bl	80054f2 <HAL_SPI_Transmit>
 80025da:	3401      	adds	r4, #1
 80025dc:	e7e4      	b.n	80025a8 <ST7735_Flush_2+0x98>
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	50000c00 	.word	0x50000c00
 80025e4:	20004944 	.word	0x20004944

080025e8 <ST7735_Flush_3>:
 80025e8:	b510      	push	{r4, lr}
 80025ea:	f7ff ff91 	bl	8002510 <ST7735_Flush_2>
 80025ee:	bd10      	pop	{r4, pc}

080025f0 <ClearLog>:

/** Clear the duration parameter and the click count parameter of the button.
 */
void ClearLog(uint8_t key, uint8_t index)
{
	if(index < 8)
 80025f0:	2907      	cmp	r1, #7
 80025f2:	d807      	bhi.n	8002604 <ClearLog+0x14>
	{
		bt[key]->click[index] = bt[key]->duration[index] = 0;
 80025f4:	2360      	movs	r3, #96	; 0x60
 80025f6:	4343      	muls	r3, r0
 80025f8:	4803      	ldr	r0, [pc, #12]	; (8002608 <ClearLog+0x18>)
 80025fa:	18c0      	adds	r0, r0, r3
 80025fc:	2300      	movs	r3, #0
 80025fe:	1841      	adds	r1, r0, r1
 8002600:	728b      	strb	r3, [r1, #10]
 8002602:	708b      	strb	r3, [r1, #2]
	}
}
 8002604:	4770      	bx	lr
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	20004700 	.word	0x20004700

0800260c <KeyboardInit>:
{
 800260c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260e:	0006      	movs	r6, r0
	for(x = 0; x < 6; x++) {
 8002610:	2500      	movs	r5, #0
 8002612:	4c0a      	ldr	r4, [pc, #40]	; (800263c <KeyboardInit+0x30>)
		bt[x]->old_state = bt[x]->new_state = 0;
 8002614:	2700      	movs	r7, #0
		bt[x]->mask = mask;
 8002616:	74a6      	strb	r6, [r4, #18]
		bt[x]->old_state = bt[x]->new_state = 0;
 8002618:	7067      	strb	r7, [r4, #1]
 800261a:	7027      	strb	r7, [r4, #0]
		bt[x]->mode = 0;
 800261c:	74e7      	strb	r7, [r4, #19]
		bt[x]->flag = 0;
 800261e:	6167      	str	r7, [r4, #20]
			ClearLog(x, i);
 8002620:	b2f9      	uxtb	r1, r7
 8002622:	0028      	movs	r0, r5
		for(i = 0; i < 8; i++) {
 8002624:	3701      	adds	r7, #1
			ClearLog(x, i);
 8002626:	f7ff ffe3 	bl	80025f0 <ClearLog>
		for(i = 0; i < 8; i++) {
 800262a:	2f08      	cmp	r7, #8
 800262c:	d1f8      	bne.n	8002620 <KeyboardInit+0x14>
	for(x = 0; x < 6; x++) {
 800262e:	3501      	adds	r5, #1
 8002630:	b2ed      	uxtb	r5, r5
 8002632:	3460      	adds	r4, #96	; 0x60
 8002634:	2d06      	cmp	r5, #6
 8002636:	d1ed      	bne.n	8002614 <KeyboardInit+0x8>
}
 8002638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	20004700 	.word	0x20004700

08002640 <KeyboardSetMode>:

void KeyboardSetMode(uint8_t key, uint8_t mode, bool flag)
{
 8002640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	// clear data
	bt[key]->old_state = bt[key]->new_state = 0;
 8002642:	2360      	movs	r3, #96	; 0x60
 8002644:	2400      	movs	r4, #0
 8002646:	4343      	muls	r3, r0
 8002648:	4d0a      	ldr	r5, [pc, #40]	; (8002674 <KeyboardSetMode+0x34>)
{
 800264a:	000e      	movs	r6, r1
	bt[key]->old_state = bt[key]->new_state = 0;
 800264c:	555c      	strb	r4, [r3, r5]
 800264e:	18e9      	adds	r1, r5, r3
	// this looks weird but correct
	bt[key]->flag = !flag;
 8002650:	2301      	movs	r3, #1
{
 8002652:	0007      	movs	r7, r0
	bt[key]->flag = !flag;
 8002654:	405a      	eors	r2, r3
	bt[key]->old_state = bt[key]->new_state = 0;
 8002656:	704c      	strb	r4, [r1, #1]
	bt[key]->flag = !flag;
 8002658:	614a      	str	r2, [r1, #20]

	// clear log
	for(i = 0; i < 8; i++)
	{
		ClearLog(key, i);
 800265a:	b2e1      	uxtb	r1, r4
 800265c:	0038      	movs	r0, r7
	for(i = 0; i < 8; i++)
 800265e:	3401      	adds	r4, #1
		ClearLog(key, i);
 8002660:	f7ff ffc6 	bl	80025f0 <ClearLog>
	for(i = 0; i < 8; i++)
 8002664:	2c08      	cmp	r4, #8
 8002666:	d1f8      	bne.n	800265a <KeyboardSetMode+0x1a>
	}

	// change mode
	bt[key]->mode = mode;
 8002668:	2360      	movs	r3, #96	; 0x60
 800266a:	435f      	muls	r7, r3
 800266c:	19ed      	adds	r5, r5, r7
 800266e:	74ee      	strb	r6, [r5, #19]
}
 8002670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	20004700 	.word	0x20004700

08002678 <PushButton_Read>:
	bt[key]->old_state = bt[key]->new_state;
}


uint8_t PushButton_Read(uint8_t key)
{
 8002678:	b510      	push	{r4, lr}
	uint8_t ret = 0x00;
 800267a:	2300      	movs	r3, #0

	switch(key) {
 800267c:	2804      	cmp	r0, #4
 800267e:	d80b      	bhi.n	8002698 <PushButton_Read+0x20>
 8002680:	f7fd fd50 	bl	8000124 <__gnu_thumb1_case_uqi>
 8002684:	100e0c03 	.word	0x100e0c03
 8002688:	12          	.byte	0x12
 8002689:	00          	.byte	0x00
		case 0:			// Down
			ret = !(HAL_GPIO_ReadPin(KEY_DN_GPIO_Port, KEY_DN_Pin));
 800268a:	2101      	movs	r1, #1
			break;
		case 2:			// Enter
			ret = !(HAL_GPIO_ReadPin(KEY_ENTER_GPIO_Port, KEY_ENTER_Pin));
			break;
		case 3:			// Esc
			ret = !(HAL_GPIO_ReadPin(KEY_ESC_GPIO_Port, KEY_ESC_Pin));
 800268c:	4808      	ldr	r0, [pc, #32]	; (80026b0 <PushButton_Read+0x38>)
			break;
		case 4:			// SW Rotary Encoder
			ret = !(HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin));
 800268e:	f002 f891 	bl	80047b4 <HAL_GPIO_ReadPin>
 8002692:	4243      	negs	r3, r0
 8002694:	4143      	adcs	r3, r0
 8002696:	b2db      	uxtb	r3, r3
			break;
		default:
			break;
	}
	return ret;
}
 8002698:	0018      	movs	r0, r3
 800269a:	bd10      	pop	{r4, pc}
			ret = !(HAL_GPIO_ReadPin(KEY_UP_GPIO_Port, KEY_UP_Pin));
 800269c:	2102      	movs	r1, #2
 800269e:	e7f5      	b.n	800268c <PushButton_Read+0x14>
			ret = !(HAL_GPIO_ReadPin(KEY_ENTER_GPIO_Port, KEY_ENTER_Pin));
 80026a0:	2104      	movs	r1, #4
 80026a2:	e7f3      	b.n	800268c <PushButton_Read+0x14>
			ret = !(HAL_GPIO_ReadPin(KEY_ESC_GPIO_Port, KEY_ESC_Pin));
 80026a4:	2108      	movs	r1, #8
 80026a6:	e7f1      	b.n	800268c <PushButton_Read+0x14>
			ret = !(HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin));
 80026a8:	2120      	movs	r1, #32
 80026aa:	4802      	ldr	r0, [pc, #8]	; (80026b4 <PushButton_Read+0x3c>)
 80026ac:	e7ef      	b.n	800268e <PushButton_Read+0x16>
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	50000400 	.word	0x50000400
 80026b4:	50000c00 	.word	0x50000c00

080026b8 <Evt_EnQueue>:
 * \return false if the queue is full
 */
bool Evt_EnQueue(uint8_t *event)
{
	unsigned i;
	uint8_t next = ADVANCE_QPTR(evt_queue.head);
 80026b8:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <Evt_EnQueue+0x34>)
 80026ba:	2107      	movs	r1, #7
 80026bc:	001a      	movs	r2, r3
{
 80026be:	b530      	push	{r4, r5, lr}
	uint8_t next = ADVANCE_QPTR(evt_queue.head);
 80026c0:	3280      	adds	r2, #128	; 0x80
 80026c2:	7812      	ldrb	r2, [r2, #0]
 80026c4:	1c54      	adds	r4, r2, #1
 80026c6:	400c      	ands	r4, r1

	// queue is full
	if(next == evt_queue.tail)
 80026c8:	0019      	movs	r1, r3
 80026ca:	3181      	adds	r1, #129	; 0x81
 80026cc:	780d      	ldrb	r5, [r1, #0]
	{
		// event will be lost
		//logI("I - Evt_EnQueue Full\n\r");
		return false;
 80026ce:	2100      	movs	r1, #0
	if(next == evt_queue.tail)
 80026d0:	42a5      	cmp	r5, r4
 80026d2:	d009      	beq.n	80026e8 <Evt_EnQueue+0x30>
 80026d4:	0112      	lsls	r2, r2, #4
 80026d6:	189a      	adds	r2, r3, r2
	}

	// copy event bytes into the buffer
	for(i = 0; i < EVT_QWIDTH; i++)
	{
		evt_queue.buff[evt_queue.head][i] = event[i];
 80026d8:	5c45      	ldrb	r5, [r0, r1]
 80026da:	5455      	strb	r5, [r2, r1]
	for(i = 0; i < EVT_QWIDTH; i++)
 80026dc:	3101      	adds	r1, #1
 80026de:	2910      	cmp	r1, #16
 80026e0:	d1fa      	bne.n	80026d8 <Evt_EnQueue+0x20>
	}
	// move to the next positition
	evt_queue.head = next;
 80026e2:	3380      	adds	r3, #128	; 0x80
 80026e4:	701c      	strb	r4, [r3, #0]

	//logI("I - Evt_EnQueue OK\n\r");
	return true;
 80026e6:	390f      	subs	r1, #15
}
 80026e8:	0008      	movs	r0, r1
 80026ea:	bd30      	pop	{r4, r5, pc}
 80026ec:	200006e4 	.word	0x200006e4

080026f0 <KeyboardRead>:
{
 80026f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f2:	b085      	sub	sp, #20
 80026f4:	0004      	movs	r4, r0
	bt[key]->new_state = PushButton_Read(key);
 80026f6:	f7ff ffbf 	bl	8002678 <PushButton_Read>
 80026fa:	2260      	movs	r2, #96	; 0x60
 80026fc:	4362      	muls	r2, r4
 80026fe:	4e3e      	ldr	r6, [pc, #248]	; (80027f8 <KeyboardRead+0x108>)
 8002700:	18b3      	adds	r3, r6, r2
 8002702:	7058      	strb	r0, [r3, #1]
	diff_state = bt[key]->old_state ^ bt[key]->new_state;
 8002704:	5d95      	ldrb	r5, [r2, r6]
	if(((bt[key]->mode >> i) & 0x01)  == PUSHBTN_MODE_UDOWN) {
 8002706:	2201      	movs	r2, #1
 8002708:	7cd9      	ldrb	r1, [r3, #19]
 800270a:	4211      	tst	r1, r2
 800270c:	d01d      	beq.n	800274a <KeyboardRead+0x5a>
		if(((bt[key]->new_state >> i) & 0x01) == 0x01) {
 800270e:	0001      	movs	r1, r0
 8002710:	4011      	ands	r1, r2
 8002712:	d00f      	beq.n	8002734 <KeyboardRead+0x44>
			event[0] = EVT_PBTN_INPUT;
 8002714:	2310      	movs	r3, #16
 8002716:	466a      	mov	r2, sp
 8002718:	7013      	strb	r3, [r2, #0]
			event[2] = PBTN_DOWN;
 800271a:	2305      	movs	r3, #5
			event[1] = (uint8_t)key;
 800271c:	7054      	strb	r4, [r2, #1]
				Evt_EnQueue(event);
 800271e:	4668      	mov	r0, sp
				event[2] = PBTN_ENDN;
 8002720:	7093      	strb	r3, [r2, #2]
				Evt_EnQueue(event);
 8002722:	f7ff ffc9 	bl	80026b8 <Evt_EnQueue>
	bt[key]->old_state = bt[key]->new_state;
 8002726:	2360      	movs	r3, #96	; 0x60
 8002728:	435c      	muls	r4, r3
 800272a:	1933      	adds	r3, r6, r4
 800272c:	785b      	ldrb	r3, [r3, #1]
 800272e:	5533      	strb	r3, [r6, r4]
}
 8002730:	b005      	add	sp, #20
 8002732:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(((bt[key]->old_state >> i) & 0x01) == 0x01) {
 8002734:	4215      	tst	r5, r2
 8002736:	d0f6      	beq.n	8002726 <KeyboardRead+0x36>
				KeyboardSetMode(key, PUSHBTN_MODE_CLICK, true);
 8002738:	0020      	movs	r0, r4
 800273a:	f7ff ff81 	bl	8002640 <KeyboardSetMode>
				event[0] = EVT_PBTN_INPUT;
 800273e:	2310      	movs	r3, #16
 8002740:	466a      	mov	r2, sp
 8002742:	7013      	strb	r3, [r2, #0]
				event[1] = (uint8_t)key;
 8002744:	7054      	strb	r4, [r2, #1]
				event[2] = PBTN_ENDN;
 8002746:	2306      	movs	r3, #6
 8002748:	e7e9      	b.n	800271e <KeyboardRead+0x2e>
	diff_state = bt[key]->old_state ^ bt[key]->new_state;
 800274a:	4045      	eors	r5, r0
		if((diff_state >> i) & 0x01) {
 800274c:	4215      	tst	r5, r2
 800274e:	d01e      	beq.n	800278e <KeyboardRead+0x9e>
			bt[key]->duration[i] = 1;
 8002750:	729a      	strb	r2, [r3, #10]
			if(((bt[key]->new_state >> i) & 0x01) == 0x00) {
 8002752:	4002      	ands	r2, r0
 8002754:	d108      	bne.n	8002768 <KeyboardRead+0x78>
				if(bt[key]->flag) {
 8002756:	6959      	ldr	r1, [r3, #20]
 8002758:	2900      	cmp	r1, #0
 800275a:	d002      	beq.n	8002762 <KeyboardRead+0x72>
					bt[key]->flag = false;
 800275c:	615a      	str	r2, [r3, #20]
				bt[key]->duration[i]++;
 800275e:	729a      	strb	r2, [r3, #10]
 8002760:	e002      	b.n	8002768 <KeyboardRead+0x78>
					bt[key]->click[i]++;
 8002762:	789a      	ldrb	r2, [r3, #2]
 8002764:	3201      	adds	r2, #1
 8002766:	709a      	strb	r2, [r3, #2]
		if(bt[key]->click[i] >= 3) {
 8002768:	2560      	movs	r5, #96	; 0x60
 800276a:	4365      	muls	r5, r4
 800276c:	1975      	adds	r5, r6, r5
 800276e:	78aa      	ldrb	r2, [r5, #2]
 8002770:	2a02      	cmp	r2, #2
 8002772:	d913      	bls.n	800279c <KeyboardRead+0xac>
			event[0] = EVT_PBTN_INPUT;
 8002774:	466a      	mov	r2, sp
 8002776:	2310      	movs	r3, #16
 8002778:	7013      	strb	r3, [r2, #0]
			event[2] = PBTN_TCLK;
 800277a:	2304      	movs	r3, #4
			Evt_EnQueue(event);
 800277c:	4668      	mov	r0, sp
			event[2] = PBTN_TCLK;
 800277e:	7093      	strb	r3, [r2, #2]
			event[1] = (uint8_t)key;
 8002780:	7054      	strb	r4, [r2, #1]
			Evt_EnQueue(event);
 8002782:	f7ff ff99 	bl	80026b8 <Evt_EnQueue>
			bt[key]->click[i] = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	70ab      	strb	r3, [r5, #2]
			bt[key]->duration[i] = 0;
 800278a:	72ab      	strb	r3, [r5, #10]
 800278c:	e7cb      	b.n	8002726 <KeyboardRead+0x36>
			if((bt[key]->duration[i] > 0) && (bt[key]->duration[i] < PUSHBTN_TO_MAX)) {
 800278e:	7a9a      	ldrb	r2, [r3, #10]
 8002790:	1e51      	subs	r1, r2, #1
 8002792:	b2c9      	uxtb	r1, r1
 8002794:	29fd      	cmp	r1, #253	; 0xfd
 8002796:	d8e7      	bhi.n	8002768 <KeyboardRead+0x78>
				bt[key]->duration[i]++;
 8002798:	3201      	adds	r2, #1
 800279a:	e7e0      	b.n	800275e <KeyboardRead+0x6e>
		else if((bt[key]->duration[i] > PUSHBTN_TO_SHORT) &&	(((bt[key]->new_state >> i) & 0x01) == 0x00)) {
 800279c:	7aab      	ldrb	r3, [r5, #10]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d9c1      	bls.n	8002726 <KeyboardRead+0x36>
 80027a2:	2701      	movs	r7, #1
 80027a4:	4238      	tst	r0, r7
 80027a6:	d116      	bne.n	80027d6 <KeyboardRead+0xe6>
 80027a8:	2310      	movs	r3, #16
			if(bt[key]->click[i] == 2) {
 80027aa:	2a02      	cmp	r2, #2
 80027ac:	d10e      	bne.n	80027cc <KeyboardRead+0xdc>
				event[0] = EVT_PBTN_INPUT;
 80027ae:	466a      	mov	r2, sp
 80027b0:	7013      	strb	r3, [r2, #0]
				event[2] = PBTN_DCLK;
 80027b2:	2303      	movs	r3, #3
				event[1] = (uint8_t)key;
 80027b4:	7054      	strb	r4, [r2, #1]
				event[2] = PBTN_DCLK;
 80027b6:	7093      	strb	r3, [r2, #2]
				Evt_EnQueue(event);
 80027b8:	4668      	mov	r0, sp
 80027ba:	f7ff ff7d 	bl	80026b8 <Evt_EnQueue>
			bt[key]->click[i] = 0;
 80027be:	2360      	movs	r3, #96	; 0x60
 80027c0:	2200      	movs	r2, #0
 80027c2:	4363      	muls	r3, r4
 80027c4:	18f3      	adds	r3, r6, r3
 80027c6:	709a      	strb	r2, [r3, #2]
			bt[key]->duration[i] = 0;
 80027c8:	729a      	strb	r2, [r3, #10]
 80027ca:	e7ac      	b.n	8002726 <KeyboardRead+0x36>
				event[0] = EVT_PBTN_INPUT;
 80027cc:	466a      	mov	r2, sp
 80027ce:	7013      	strb	r3, [r2, #0]
				event[1] = (uint8_t)key;
 80027d0:	7054      	strb	r4, [r2, #1]
				event[2] = PBTN_SCLK;
 80027d2:	7097      	strb	r7, [r2, #2]
 80027d4:	e7f0      	b.n	80027b8 <KeyboardRead+0xc8>
		else if((bt[key]->duration[i] > PUSHBTN_TO_LONG) && (((bt[key]->new_state >> i) & 0x01) == 0x01)) {
 80027d6:	2b0a      	cmp	r3, #10
 80027d8:	d9a5      	bls.n	8002726 <KeyboardRead+0x36>
			event[0] = EVT_PBTN_INPUT;
 80027da:	466a      	mov	r2, sp
 80027dc:	2310      	movs	r3, #16
 80027de:	7013      	strb	r3, [r2, #0]
			event[2] = PBTN_LCLK;
 80027e0:	2302      	movs	r3, #2
			Evt_EnQueue(event);
 80027e2:	4668      	mov	r0, sp
			event[2] = PBTN_LCLK;
 80027e4:	7093      	strb	r3, [r2, #2]
			event[1] = (uint8_t)key;
 80027e6:	7054      	strb	r4, [r2, #1]
			Evt_EnQueue(event);
 80027e8:	f7ff ff66 	bl	80026b8 <Evt_EnQueue>
			bt[key]->click[i] = 0;
 80027ec:	2300      	movs	r3, #0
			bt[key]->flag = true;
 80027ee:	616f      	str	r7, [r5, #20]
			bt[key]->click[i] = 0;
 80027f0:	70ab      	strb	r3, [r5, #2]
			bt[key]->duration[i] = 0;
 80027f2:	72ab      	strb	r3, [r5, #10]
 80027f4:	e797      	b.n	8002726 <KeyboardRead+0x36>
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	20004700 	.word	0x20004700

080027fc <Key_Read>:
{
 80027fc:	b510      	push	{r4, lr}
	for(x = 0; x < 6; x++) {
 80027fe:	2400      	movs	r4, #0
		KeyboardRead(x);
 8002800:	0020      	movs	r0, r4
	for(x = 0; x < 6; x++) {
 8002802:	3401      	adds	r4, #1
 8002804:	b2e4      	uxtb	r4, r4
		KeyboardRead(x);
 8002806:	f7ff ff73 	bl	80026f0 <KeyboardRead>
	for(x = 0; x < 6; x++) {
 800280a:	2c06      	cmp	r4, #6
 800280c:	d1f8      	bne.n	8002800 <Key_Read+0x4>
}
 800280e:	bd10      	pop	{r4, pc}

08002810 <Evt_DeQueue>:
 *
 * \param  event data in an array of uint8_t
 * \return false if the queue is empty
 */
bool Evt_DeQueue(uint8_t *event)
{
 8002810:	b530      	push	{r4, r5, lr}

	// disable all timers
	//UsrTimer_Enable(false);

	// queue is not empty
	if(evt_queue.tail != evt_queue.head)
 8002812:	4c0d      	ldr	r4, [pc, #52]	; (8002848 <Evt_DeQueue+0x38>)
 8002814:	0023      	movs	r3, r4
 8002816:	0022      	movs	r2, r4
 8002818:	3381      	adds	r3, #129	; 0x81
 800281a:	3280      	adds	r2, #128	; 0x80
 800281c:	7811      	ldrb	r1, [r2, #0]
 800281e:	781d      	ldrb	r5, [r3, #0]
	bool flag = false;
 8002820:	2200      	movs	r2, #0
	if(evt_queue.tail != evt_queue.head)
 8002822:	428d      	cmp	r5, r1
 8002824:	d00d      	beq.n	8002842 <Evt_DeQueue+0x32>
	{
		// copy event bytes into the buffer
		for(i = 0; i < EVT_QWIDTH; i++)
		{
			event[i] = evt_queue.buff[evt_queue.tail][i];
 8002826:	7819      	ldrb	r1, [r3, #0]
 8002828:	0109      	lsls	r1, r1, #4
 800282a:	1861      	adds	r1, r4, r1
 800282c:	5c89      	ldrb	r1, [r1, r2]
 800282e:	5481      	strb	r1, [r0, r2]
 8002830:	3201      	adds	r2, #1
		for(i = 0; i < EVT_QWIDTH; i++)
 8002832:	2a10      	cmp	r2, #16
 8002834:	d1f7      	bne.n	8002826 <Evt_DeQueue+0x16>
		}
		// move to the next position
		evt_queue.tail = ADVANCE_QPTR(evt_queue.tail);
 8002836:	2107      	movs	r1, #7
 8002838:	781a      	ldrb	r2, [r3, #0]
 800283a:	3201      	adds	r2, #1
 800283c:	400a      	ands	r2, r1
 800283e:	701a      	strb	r2, [r3, #0]
		// set flag
		flag = true;
 8002840:	2201      	movs	r2, #1
	// enable all timers
	//UsrTimer_Enable(true);

	// return with the flag
	return flag;
}
 8002842:	0010      	movs	r0, r2
 8002844:	bd30      	pop	{r4, r5, pc}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	200006e4 	.word	0x200006e4

0800284c <Evt_InitQueue>:
 * the data in the queue.
 */
void Evt_InitQueue(void)
{
	// clear queue by resetting the pointers
	evt_queue.head = evt_queue.tail = 0;
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <Evt_InitQueue+0x10>)
 800284e:	2200      	movs	r2, #0
 8002850:	0019      	movs	r1, r3
 8002852:	3380      	adds	r3, #128	; 0x80
 8002854:	3181      	adds	r1, #129	; 0x81
 8002856:	700a      	strb	r2, [r1, #0]
 8002858:	701a      	strb	r2, [r3, #0]
}
 800285a:	4770      	bx	lr
 800285c:	200006e4 	.word	0x200006e4

08002860 <KeyboardEvent>:
	}
}

// Eventos Teclado
void KeyboardEvent(void)
{
 8002860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t event[EVT_QWIDTH];
	//const char* teclas[] = {"KEY-DOWN", "KEY-UP", "KEY-ENTER", "KEY-ESC", "KEY-ROTARY", "KEY-USER"};

	// check event queue
	if(Evt_DeQueue(event)) {
 8002862:	4668      	mov	r0, sp
 8002864:	f7ff ffd4 	bl	8002810 <Evt_DeQueue>
					//logI("\r\n --> Switch to click mode.");
				}
				break;
		}
	}
}
 8002868:	b005      	add	sp, #20
 800286a:	bd00      	pop	{pc}

0800286c <ButtonEvent>:
 800286c:	b510      	push	{r4, lr}
 800286e:	f7ff fff7 	bl	8002860 <KeyboardEvent>
 8002872:	bd10      	pop	{r4, pc}

08002874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002874:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002876:	2610      	movs	r6, #16
{
 8002878:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800287a:	2234      	movs	r2, #52	; 0x34
 800287c:	2100      	movs	r1, #0
 800287e:	a80b      	add	r0, sp, #44	; 0x2c
 8002880:	f00d f869 	bl	800f956 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002884:	0032      	movs	r2, r6
 8002886:	2100      	movs	r1, #0
 8002888:	4668      	mov	r0, sp
 800288a:	f00d f864 	bl	800f956 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800288e:	221c      	movs	r2, #28
 8002890:	2100      	movs	r1, #0
 8002892:	a804      	add	r0, sp, #16
 8002894:	f00d f85f 	bl	800f956 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002898:	2080      	movs	r0, #128	; 0x80
 800289a:	0080      	lsls	r0, r0, #2
 800289c:	f002 f83e 	bl	800491c <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80028a0:	2118      	movs	r1, #24
 80028a2:	4a1b      	ldr	r2, [pc, #108]	; (8002910 <SystemClock_Config+0x9c>)
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028a4:	2502      	movs	r5, #2
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80028a6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80028a8:	2400      	movs	r4, #0
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80028aa:	438b      	bics	r3, r1
 80028ac:	65d3      	str	r3, [r2, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80028ae:	2305      	movs	r3, #5
 80028b0:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80028b2:	23a0      	movs	r3, #160	; 0xa0
 80028b4:	02db      	lsls	r3, r3, #11
 80028b6:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80028b8:	2301      	movs	r3, #1
 80028ba:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028bc:	195b      	adds	r3, r3, r5
 80028be:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 16;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028c0:	2380      	movs	r3, #128	; 0x80
 80028c2:	029b      	lsls	r3, r3, #10
 80028c4:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80028c6:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028c8:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80028ca:	059b      	lsls	r3, r3, #22
 80028cc:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028ce:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80028d0:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 80028d2:	9615      	str	r6, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028d4:	f002 f84c 	bl	8004970 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028d8:	2307      	movs	r3, #7
 80028da:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028dc:	2380      	movs	r3, #128	; 0x80

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028de:	0029      	movs	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028e0:	01db      	lsls	r3, r3, #7
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028e2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028e4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028e6:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028e8:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028ea:	f002 faa7 	bl	8004e3c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <SystemClock_Config+0xa0>)
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028f0:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 80028f2:	9304      	str	r3, [sp, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80028fa:	9406      	str	r4, [sp, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80028fc:	9407      	str	r4, [sp, #28]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80028fe:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002900:	f002 fb9e 	bl	8005040 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 8002904:	f002 fb76 	bl	8004ff4 <HAL_RCC_EnableCSS>
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableLSECSS();
 8002908:	f002 fb7e 	bl	8005008 <HAL_RCC_EnableLSECSS>
}
 800290c:	b018      	add	sp, #96	; 0x60
 800290e:	bd70      	pop	{r4, r5, r6, pc}
 8002910:	40021000 	.word	0x40021000
 8002914:	00024042 	.word	0x00024042

08002918 <main>:
{
 8002918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800291a:	b09b      	sub	sp, #108	; 0x6c
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291c:	ad10      	add	r5, sp, #64	; 0x40
  HAL_Init();
 800291e:	f001 fb5f 	bl	8003fe0 <HAL_Init>
  SystemClock_Config();
 8002922:	f7ff ffa7 	bl	8002874 <SystemClock_Config>
  BSP_SD_Init();
 8002926:	f000 fc83 	bl	8003230 <BSP_SD_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292a:	2214      	movs	r2, #20
 800292c:	2100      	movs	r1, #0
 800292e:	0028      	movs	r0, r5
 8002930:	f00d f811 	bl	800f956 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002934:	2104      	movs	r1, #4
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002936:	2620      	movs	r6, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002938:	4bfc      	ldr	r3, [pc, #1008]	; (8002d2c <main+0x414>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 800293a:	48fd      	ldr	r0, [pc, #1012]	; (8002d30 <main+0x418>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800293c:	6b5a      	ldr	r2, [r3, #52]	; 0x34

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FLASH_CS_Pin|LCD_RST_Pin|LCD_CS_Pin|LCD_WR_Pin 
 800293e:	4ffd      	ldr	r7, [pc, #1012]	; (8002d34 <main+0x41c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002940:	430a      	orrs	r2, r1
 8002942:	635a      	str	r2, [r3, #52]	; 0x34
 8002944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : SW_USER_Pin */
  GPIO_InitStruct.Pin = SW_USER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002946:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002948:	400a      	ands	r2, r1
 800294a:	9204      	str	r2, [sp, #16]
 800294c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800294e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002950:	3903      	subs	r1, #3
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002952:	4332      	orrs	r2, r6
 8002954:	635a      	str	r2, [r3, #52]	; 0x34
 8002956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002958:	4032      	ands	r2, r6
 800295a:	9205      	str	r2, [sp, #20]
 800295c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800295e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002960:	430a      	orrs	r2, r1
 8002962:	635a      	str	r2, [r3, #52]	; 0x34
 8002964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002966:	400a      	ands	r2, r1
 8002968:	9206      	str	r2, [sp, #24]
 800296a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800296c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800296e:	3101      	adds	r1, #1
 8002970:	430a      	orrs	r2, r1
 8002972:	635a      	str	r2, [r3, #52]	; 0x34
 8002974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002976:	400a      	ands	r2, r1
 8002978:	9207      	str	r2, [sp, #28]
 800297a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800297c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800297e:	3106      	adds	r1, #6
 8002980:	430a      	orrs	r2, r1
 8002982:	635a      	str	r2, [r3, #52]	; 0x34
 8002984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOC, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 8002986:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002988:	400b      	ands	r3, r1
 800298a:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 800298c:	31f7      	adds	r1, #247	; 0xf7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800298e:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 8002990:	f001 ff16 	bl	80047c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002994:	20a0      	movs	r0, #160	; 0xa0
 8002996:	0031      	movs	r1, r6
 8002998:	2200      	movs	r2, #0
 800299a:	05c0      	lsls	r0, r0, #23
 800299c:	f001 ff10 	bl	80047c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, FLASH_CS_Pin|LCD_RST_Pin|LCD_CS_Pin|LCD_WR_Pin 
 80029a0:	0039      	movs	r1, r7
 80029a2:	2201      	movs	r2, #1
 80029a4:	48e4      	ldr	r0, [pc, #912]	; (8002d38 <main+0x420>)
 80029a6:	f001 ff0b 	bl	80047c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80029aa:	2180      	movs	r1, #128	; 0x80
 80029ac:	20a0      	movs	r0, #160	; 0xa0
 80029ae:	2201      	movs	r2, #1
 80029b0:	00c9      	lsls	r1, r1, #3
 80029b2:	05c0      	lsls	r0, r0, #23
 80029b4:	f001 ff04 	bl	80047c0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SW_USER_Pin;
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	019b      	lsls	r3, r3, #6
 80029bc:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029be:	2301      	movs	r3, #1
  HAL_GPIO_Init(SW_USER_GPIO_Port, &GPIO_InitStruct);
 80029c0:	0029      	movs	r1, r5
 80029c2:	48db      	ldr	r0, [pc, #876]	; (8002d30 <main+0x418>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c4:	606c      	str	r4, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029c6:	60ab      	str	r3, [r5, #8]
  HAL_GPIO_Init(SW_USER_GPIO_Port, &GPIO_InitStruct);
 80029c8:	f001 fdd6 	bl	8004578 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D0_Pin LCD_D1_Pin LCD_D2_Pin LCD_D3_Pin 
                           LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 80029cc:	23ff      	movs	r3, #255	; 0xff
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ce:	0029      	movs	r1, r5
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 80029d0:	9310      	str	r3, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d2:	48d7      	ldr	r0, [pc, #860]	; (8002d30 <main+0x418>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d4:	3bfe      	subs	r3, #254	; 0xfe
 80029d6:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029da:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029dc:	f001 fdcc 	bl	8004578 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = LED_Pin|SD_CS_Pin;
 80029e0:	2384      	movs	r3, #132	; 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e2:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = LED_Pin|SD_CS_Pin;
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e8:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ea:	0029      	movs	r1, r5
 80029ec:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ee:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f2:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f4:	f001 fdc0 	bl	8004578 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_DN_Pin KEY_UP_Pin KEY_ENTER_Pin KEY_ESC_Pin */
  GPIO_InitStruct.Pin = KEY_DN_Pin|KEY_UP_Pin|KEY_ENTER_Pin|KEY_ESC_Pin;
 80029f8:	230f      	movs	r3, #15
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fa:	0029      	movs	r1, r5
  GPIO_InitStruct.Pin = KEY_DN_Pin|KEY_UP_Pin|KEY_ENTER_Pin|KEY_ESC_Pin;
 80029fc:	9310      	str	r3, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fe:	48cf      	ldr	r0, [pc, #828]	; (8002d3c <main+0x424>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a00:	3b0e      	subs	r3, #14
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a02:	606c      	str	r4, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a04:	60ab      	str	r3, [r5, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a06:	f001 fdb7 	bl	8004578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	015b      	lsls	r3, r3, #5
 8002a0e:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a10:	4bcb      	ldr	r3, [pc, #812]	; (8002d40 <main+0x428>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a12:	0029      	movs	r1, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a14:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a16:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a18:	48c8      	ldr	r0, [pc, #800]	; (8002d3c <main+0x424>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a1a:	60ab      	str	r3, [r5, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1c:	f001 fdac 	bl	8004578 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_B_Pin ENC_A_Pin */
  GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 8002a20:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a22:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 8002a24:	009b      	lsls	r3, r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a26:	0029      	movs	r1, r5
 8002a28:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 8002a2a:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a2c:	606c      	str	r4, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	60ac      	str	r4, [r5, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a30:	f001 fda2 	bl	8004578 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_CS_Pin LCD_RST_Pin LCD_CS_Pin LCD_WR_Pin 
                           LCD_RD_Pin LCD_DC_Pin TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|LCD_RST_Pin|LCD_CS_Pin|LCD_WR_Pin 
                          |LCD_RD_Pin|LCD_DC_Pin|TOUCH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a34:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a36:	0029      	movs	r1, r5
 8002a38:	48bf      	ldr	r0, [pc, #764]	; (8002d38 <main+0x420>)
  GPIO_InitStruct.Pin = FLASH_CS_Pin|LCD_RST_Pin|LCD_CS_Pin|LCD_WR_Pin 
 8002a3a:	9710      	str	r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a3c:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a40:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a42:	f001 fd99 	bl	8004578 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a46:	2301      	movs	r3, #1
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8002a48:	0029      	movs	r1, r5
 8002a4a:	48bb      	ldr	r0, [pc, #748]	; (8002d38 <main+0x420>)
  GPIO_InitStruct.Pin = SW_Pin;
 8002a4c:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a4e:	606c      	str	r4, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a50:	60ab      	str	r3, [r5, #8]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8002a52:	f001 fd91 	bl	8004578 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_C_Pin ENC_D_Pin */
  GPIO_InitStruct.Pin = ENC_C_Pin|ENC_D_Pin;
 8002a56:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a58:	0029      	movs	r1, r5
 8002a5a:	48b8      	ldr	r0, [pc, #736]	; (8002d3c <main+0x424>)
  GPIO_InitStruct.Pin = ENC_C_Pin|ENC_D_Pin;
 8002a5c:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a5e:	606c      	str	r4, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	60ac      	str	r4, [r5, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a62:	f001 fd89 	bl	8004578 <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002a66:	220c      	movs	r2, #12
 8002a68:	0021      	movs	r1, r4
 8002a6a:	0028      	movs	r0, r5
 8002a6c:	f00c ff73 	bl	800f956 <memset>
  hadc1.Instance = ADC1;
 8002a70:	4eb4      	ldr	r6, [pc, #720]	; (8002d44 <main+0x42c>)
 8002a72:	4bb5      	ldr	r3, [pc, #724]	; (8002d48 <main+0x430>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002a74:	2780      	movs	r7, #128	; 0x80
  hadc1.Instance = ADC1;
 8002a76:	6033      	str	r3, [r6, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002a78:	2380      	movs	r3, #128	; 0x80
 8002a7a:	039b      	lsls	r3, r3, #14
 8002a7c:	6133      	str	r3, [r6, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a7e:	2304      	movs	r3, #4
 8002a80:	6173      	str	r3, [r6, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002a82:	3b03      	subs	r3, #3
 8002a84:	76b3      	strb	r3, [r6, #26]
  hadc1.Init.NbrOfConversion = 2;
 8002a86:	2302      	movs	r3, #2
 8002a88:	61f3      	str	r3, [r6, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a8a:	1c73      	adds	r3, r6, #1
 8002a8c:	77dc      	strb	r4, [r3, #31]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002a8e:	0033      	movs	r3, r6
 8002a90:	332c      	adds	r3, #44	; 0x2c
 8002a92:	701c      	strb	r4, [r3, #0]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8002a94:	2307      	movs	r3, #7
 8002a96:	6373      	str	r3, [r6, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	63b3      	str	r3, [r6, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002a9c:	0033      	movs	r3, r6
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002a9e:	05ff      	lsls	r7, r7, #23
  hadc1.Init.OversamplingMode = DISABLE;
 8002aa0:	333c      	adds	r3, #60	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002aa2:	0030      	movs	r0, r6
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002aa4:	6077      	str	r7, [r6, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002aa6:	60b4      	str	r4, [r6, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002aa8:	60f4      	str	r4, [r6, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002aaa:	7634      	strb	r4, [r6, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002aac:	7674      	strb	r4, [r6, #25]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002aae:	6274      	str	r4, [r6, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ab0:	62b4      	str	r4, [r6, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002ab2:	6334      	str	r4, [r6, #48]	; 0x30
  hadc1.Init.OversamplingMode = DISABLE;
 8002ab4:	701c      	strb	r4, [r3, #0]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002ab6:	64f4      	str	r4, [r6, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ab8:	f001 face 	bl	8004058 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_0;
 8002abc:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002abe:	0029      	movs	r1, r5
 8002ac0:	0030      	movs	r0, r6
  sConfig.Channel = ADC_CHANNEL_0;
 8002ac2:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ac4:	606c      	str	r4, [r5, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002ac6:	60ac      	str	r4, [r5, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ac8:	f001 fbfe 	bl	80042c8 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 8002acc:	4b9f      	ldr	r3, [pc, #636]	; (8002d4c <main+0x434>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ace:	0029      	movs	r1, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8002ad0:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002ad2:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ad4:	0030      	movs	r0, r6
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002ad6:	606b      	str	r3, [r5, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ad8:	f001 fbf6 	bl	80042c8 <HAL_ADC_ConfigChannel>
  hi2c1.Instance = I2C1;
 8002adc:	4e9c      	ldr	r6, [pc, #624]	; (8002d50 <main+0x438>)
 8002ade:	4b9d      	ldr	r3, [pc, #628]	; (8002d54 <main+0x43c>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ae0:	0030      	movs	r0, r6
  hi2c1.Instance = I2C1;
 8002ae2:	6033      	str	r3, [r6, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8002ae4:	4b9c      	ldr	r3, [pc, #624]	; (8002d58 <main+0x440>)
  hi2c1.Init.OwnAddress1 = 0;
 8002ae6:	60b4      	str	r4, [r6, #8]
  hi2c1.Init.Timing = 0x00300F38;
 8002ae8:	6073      	str	r3, [r6, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002aea:	2301      	movs	r3, #1
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002aec:	6134      	str	r4, [r6, #16]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002aee:	60f3      	str	r3, [r6, #12]
  hi2c1.Init.OwnAddress2 = 0;
 8002af0:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002af2:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002af4:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002af6:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002af8:	f001 fe70 	bl	80047dc <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002afc:	0021      	movs	r1, r4
 8002afe:	0030      	movs	r0, r6
 8002b00:	f001 fec2 	bl	8004888 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b04:	0021      	movs	r1, r4
 8002b06:	0030      	movs	r0, r6
 8002b08:	f001 fee4 	bl	80048d4 <HAL_I2CEx_ConfigDigitalFilter>
  hrtc.Instance = RTC;
 8002b0c:	4893      	ldr	r0, [pc, #588]	; (8002d5c <main+0x444>)
 8002b0e:	4b94      	ldr	r3, [pc, #592]	; (8002d60 <main+0x448>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002b10:	6084      	str	r4, [r0, #8]
  hrtc.Instance = RTC;
 8002b12:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = 127;
 8002b14:	237f      	movs	r3, #127	; 0x7f
 8002b16:	60c3      	str	r3, [r0, #12]
  hrtc.Init.SynchPrediv = 255;
 8002b18:	3380      	adds	r3, #128	; 0x80
 8002b1a:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b1c:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002b1e:	6184      	str	r4, [r0, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002b20:	61c4      	str	r4, [r0, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b22:	6207      	str	r7, [r0, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002b24:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b26:	f002 fb9d 	bl	8005264 <HAL_RTC_Init>
  hspi1.Instance = SPI1;
 8002b2a:	488e      	ldr	r0, [pc, #568]	; (8002d64 <main+0x44c>)
 8002b2c:	4b8e      	ldr	r3, [pc, #568]	; (8002d68 <main+0x450>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b2e:	27e0      	movs	r7, #224	; 0xe0
  hspi1.Instance = SPI1;
 8002b30:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b32:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b34:	2680      	movs	r6, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	6043      	str	r3, [r0, #4]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002b3a:	3bfc      	subs	r3, #252	; 0xfc
 8002b3c:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8002b3e:	3b01      	subs	r3, #1
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b40:	00ff      	lsls	r7, r7, #3
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b42:	00b6      	lsls	r6, r6, #2
  hspi1.Init.CRCPolynomial = 7;
 8002b44:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b46:	3301      	adds	r3, #1
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b48:	6084      	str	r4, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b4a:	60c7      	str	r7, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b4c:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b4e:	6144      	str	r4, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b50:	6186      	str	r6, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b52:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b54:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b56:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b58:	6304      	str	r4, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b5a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b5c:	f002 fc54 	bl	8005408 <HAL_SPI_Init>
  hspi2.Instance = SPI2;
 8002b60:	4882      	ldr	r0, [pc, #520]	; (8002d6c <main+0x454>)
 8002b62:	4b83      	ldr	r3, [pc, #524]	; (8002d70 <main+0x458>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b64:	6084      	str	r4, [r0, #8]
  hspi2.Instance = SPI2;
 8002b66:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b68:	2382      	movs	r3, #130	; 0x82
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	6043      	str	r3, [r0, #4]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002b6e:	3bfc      	subs	r3, #252	; 0xfc
 8002b70:	61c3      	str	r3, [r0, #28]
  hspi2.Init.CRCPolynomial = 7;
 8002b72:	3b01      	subs	r3, #1
 8002b74:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b76:	3301      	adds	r3, #1
 8002b78:	6343      	str	r3, [r0, #52]	; 0x34
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b7a:	60c7      	str	r7, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b7c:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b7e:	6144      	str	r4, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b80:	6186      	str	r6, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b82:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b84:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b86:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b88:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b8a:	f002 fc3d 	bl	8005408 <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b8e:	0021      	movs	r1, r4
 8002b90:	2210      	movs	r2, #16
 8002b92:	a80c      	add	r0, sp, #48	; 0x30
 8002b94:	f00c fedf 	bl	800f956 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b98:	0021      	movs	r1, r4
 8002b9a:	220c      	movs	r2, #12
 8002b9c:	a809      	add	r0, sp, #36	; 0x24
 8002b9e:	f00c feda 	bl	800f956 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ba2:	221c      	movs	r2, #28
 8002ba4:	0021      	movs	r1, r4
 8002ba6:	0028      	movs	r0, r5
 8002ba8:	f00c fed5 	bl	800f956 <memset>
  htim3.Instance = TIM3;
 8002bac:	4e71      	ldr	r6, [pc, #452]	; (8002d74 <main+0x45c>)
 8002bae:	4b72      	ldr	r3, [pc, #456]	; (8002d78 <main+0x460>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002bb0:	0030      	movs	r0, r6
  htim3.Instance = TIM3;
 8002bb2:	6033      	str	r3, [r6, #0]
  htim3.Init.Prescaler = 1;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	6073      	str	r3, [r6, #4]
  htim3.Init.Period = 4095;
 8002bb8:	4b70      	ldr	r3, [pc, #448]	; (8002d7c <main+0x464>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bba:	60b4      	str	r4, [r6, #8]
  htim3.Init.Period = 4095;
 8002bbc:	60f3      	str	r3, [r6, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bbe:	6134      	str	r4, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc0:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002bc2:	f003 f8e7 	bl	8005d94 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bc6:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002bc8:	a90c      	add	r1, sp, #48	; 0x30
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bca:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002bcc:	0030      	movs	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bce:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002bd0:	f003 fad0 	bl	8006174 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002bd4:	0030      	movs	r0, r6
 8002bd6:	f003 f8f8 	bl	8005dca <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bda:	a909      	add	r1, sp, #36	; 0x24
 8002bdc:	0030      	movs	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bde:	9409      	str	r4, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be0:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002be2:	f003 fb9d 	bl	8006320 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002be6:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002be8:	0022      	movs	r2, r4
 8002bea:	0029      	movs	r1, r5
 8002bec:	0030      	movs	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bee:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.Pulse = 0;
 8002bf0:	606c      	str	r4, [r5, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bf2:	60ac      	str	r4, [r5, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bf4:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bf6:	f003 f95f 	bl	8005eb8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bfa:	2204      	movs	r2, #4
 8002bfc:	0029      	movs	r1, r5
 8002bfe:	0030      	movs	r0, r6
 8002c00:	f003 f95a 	bl	8005eb8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8002c04:	0030      	movs	r0, r6
 8002c06:	f001 f81d 	bl	8003c44 <HAL_TIM_MspPostInit>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c0a:	0021      	movs	r1, r4
 8002c0c:	2210      	movs	r2, #16
 8002c0e:	0028      	movs	r0, r5
 8002c10:	f00c fea1 	bl	800f956 <memset>
  htim14.Instance = TIM14;
 8002c14:	4f5a      	ldr	r7, [pc, #360]	; (8002d80 <main+0x468>)
 8002c16:	4b5b      	ldr	r3, [pc, #364]	; (8002d84 <main+0x46c>)
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002c18:	0038      	movs	r0, r7
  htim14.Instance = TIM14;
 8002c1a:	603b      	str	r3, [r7, #0]
  htim14.Init.Prescaler = 0;
 8002c1c:	607c      	str	r4, [r7, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c1e:	60bc      	str	r4, [r7, #8]
  htim14.Init.Period = 0;
 8002c20:	60fc      	str	r4, [r7, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c22:	613c      	str	r4, [r7, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c24:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002c26:	f003 f8b5 	bl	8005d94 <HAL_TIM_Base_Init>
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 8002c2a:	0038      	movs	r0, r7
 8002c2c:	f003 f8e8 	bl	8005e00 <HAL_TIM_IC_Init>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c30:	2301      	movs	r3, #1
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002c32:	0022      	movs	r2, r4
 8002c34:	0029      	movs	r1, r5
 8002c36:	0038      	movs	r0, r7
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c38:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c3a:	606b      	str	r3, [r5, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002c3c:	60ac      	str	r4, [r5, #8]
  sConfigIC.ICFilter = 0;
 8002c3e:	60ec      	str	r4, [r5, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002c40:	f003 f9ee 	bl	8006020 <HAL_TIM_IC_ConfigChannel>
  huart2.Instance = USART2;
 8002c44:	4f50      	ldr	r7, [pc, #320]	; (8002d88 <main+0x470>)
 8002c46:	4b51      	ldr	r3, [pc, #324]	; (8002d8c <main+0x474>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c48:	0038      	movs	r0, r7
  huart2.Instance = USART2;
 8002c4a:	603b      	str	r3, [r7, #0]
  huart2.Init.BaudRate = 115200;
 8002c4c:	23e1      	movs	r3, #225	; 0xe1
 8002c4e:	025b      	lsls	r3, r3, #9
 8002c50:	607b      	str	r3, [r7, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c52:	230c      	movs	r3, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c54:	60bc      	str	r4, [r7, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c56:	617b      	str	r3, [r7, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c58:	60fc      	str	r4, [r7, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c5a:	613c      	str	r4, [r7, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c5c:	61bc      	str	r4, [r7, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c5e:	61fc      	str	r4, [r7, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c60:	623c      	str	r4, [r7, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c62:	627c      	str	r4, [r7, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c64:	62bc      	str	r4, [r7, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c66:	f003 fec5 	bl	80069f4 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c6a:	0021      	movs	r1, r4
 8002c6c:	0038      	movs	r0, r7
 8002c6e:	f003 ff51 	bl	8006b14 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c72:	0021      	movs	r1, r4
 8002c74:	0038      	movs	r0, r7
 8002c76:	f003 ff6f 	bl	8006b58 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8002c7a:	0038      	movs	r0, r7
 8002c7c:	f003 ff2c 	bl	8006ad8 <HAL_UARTEx_EnableFifoMode>
  huart3.Instance = USART3;
 8002c80:	4843      	ldr	r0, [pc, #268]	; (8002d90 <main+0x478>)
 8002c82:	4b44      	ldr	r3, [pc, #272]	; (8002d94 <main+0x47c>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c84:	6084      	str	r4, [r0, #8]
  huart3.Instance = USART3;
 8002c86:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8002c88:	23e1      	movs	r3, #225	; 0xe1
 8002c8a:	025b      	lsls	r3, r3, #9
 8002c8c:	6043      	str	r3, [r0, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c8e:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c90:	60c4      	str	r4, [r0, #12]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c92:	6143      	str	r3, [r0, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c94:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c96:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c98:	61c4      	str	r4, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c9a:	6204      	str	r4, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c9c:	6244      	str	r4, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c9e:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ca0:	f003 fea8 	bl	80069f4 <HAL_UART_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8002ca4:	f003 ff7c 	bl	8006ba0 <MX_FATFS_Init>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002ca8:	0021      	movs	r1, r4
 8002caa:	0030      	movs	r0, r6
 8002cac:	f003 fb06 	bl	80062bc <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002cb0:	2104      	movs	r1, #4
 8002cb2:	0030      	movs	r0, r6
 8002cb4:	f003 fb02 	bl	80062bc <HAL_TIM_PWM_Start>
   __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 4095);			// PWM_CH1 = 4095 100% brilho
 8002cb8:	6833      	ldr	r3, [r6, #0]
 8002cba:	4a30      	ldr	r2, [pc, #192]	; (8002d7c <main+0x464>)
 8002cbc:	635a      	str	r2, [r3, #52]	; 0x34
   __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 4095);		    // PWM_CH2 = 4095
 8002cbe:	639a      	str	r2, [r3, #56]	; 0x38
  ST7735_Init();
 8002cc0:	f7ff fb2e 	bl	8002320 <ST7735_Init>
  ST7735_Clear(0x0000);
 8002cc4:	0020      	movs	r0, r4
 8002cc6:	f7ff fbed 	bl	80024a4 <ST7735_Clear>
  tft_backlight(100);
 8002cca:	2064      	movs	r0, #100	; 0x64
 8002ccc:	f000 fa12 	bl	80030f4 <tft_backlight>
  Evt_InitQueue();
 8002cd0:	f7ff fdbc 	bl	800284c <Evt_InitQueue>
  KeyboardInit(0x01);
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	f7ff fc99 	bl	800260c <KeyboardInit>
    lv_disp_buf_init(&disp_buf, buf, NULL, LV_HOR_RES_MAX * 10);    //Initialize the display buffer
 8002cda:	23c8      	movs	r3, #200	; 0xc8
 8002cdc:	4e2e      	ldr	r6, [pc, #184]	; (8002d98 <main+0x480>)
 8002cde:	0022      	movs	r2, r4
 8002ce0:	492e      	ldr	r1, [pc, #184]	; (8002d9c <main+0x484>)
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	0030      	movs	r0, r6
 8002ce6:	f00a fc07 	bl	800d4f8 <lv_disp_buf_init>
    lv_init();
 8002cea:	f005 fc2d 	bl	8008548 <lv_init>
    lv_disp_drv_init(&disp_drv);          //Basic initialization
 8002cee:	0028      	movs	r0, r5
 8002cf0:	f00a fbe6 	bl	800d4c0 <lv_disp_drv_init>
    disp_drv.hor_res = 160;               //Set the horizontal resolution
 8002cf4:	23a0      	movs	r3, #160	; 0xa0
 8002cf6:	802b      	strh	r3, [r5, #0]
    disp_drv.ver_res = 128;               //Set the vertical resolution
 8002cf8:	3b20      	subs	r3, #32
 8002cfa:	806b      	strh	r3, [r5, #2]
    disp_drv.flush_cb = ST7735_Flush_3;	//Set your driver function
 8002cfc:	4b28      	ldr	r3, [pc, #160]	; (8002da0 <main+0x488>)
    lv_disp_drv_register(&disp_drv);      //Finally register the driver
 8002cfe:	0028      	movs	r0, r5
    disp_drv.flush_cb = ST7735_Flush_3;	//Set your driver function
 8002d00:	60eb      	str	r3, [r5, #12]
    disp_drv.buffer = &disp_buf;          //Assign the buffer to teh display
 8002d02:	606e      	str	r6, [r5, #4]
    lv_disp_drv_register(&disp_drv);      //Finally register the driver
 8002d04:	f00a fc06 	bl	800d514 <lv_disp_drv_register>
    ProcessStatus = MX_FATFS_Process();
 8002d08:	f003 ff5e 	bl	8006bc8 <MX_FATFS_Process>
 8002d0c:	4b25      	ldr	r3, [pc, #148]	; (8002da4 <main+0x48c>)
 8002d0e:	0006      	movs	r6, r0
 8002d10:	6018      	str	r0, [r3, #0]
 8002d12:	4c25      	ldr	r4, [pc, #148]	; (8002da8 <main+0x490>)
      sprintf(buffer, "STM32G070 FatFs ProcessStatus Error...\n\r");
 8002d14:	4925      	ldr	r1, [pc, #148]	; (8002dac <main+0x494>)
    if (ProcessStatus == APP_ERROR)
 8002d16:	1c43      	adds	r3, r0, #1
 8002d18:	d100      	bne.n	8002d1c <main+0x404>
 8002d1a:	e0d2      	b.n	8002ec2 <main+0x5aa>
    else if (ProcessStatus == APP_OK)
 8002d1c:	2800      	cmp	r0, #0
 8002d1e:	d000      	beq.n	8002d22 <main+0x40a>
 8002d20:	e0db      	b.n	8002eda <main+0x5c2>
      sprintf(buffer, "STM32G070 FatFs - ProcessStatus OK...\n\r");
 8002d22:	4923      	ldr	r1, [pc, #140]	; (8002db0 <main+0x498>)
 8002d24:	0020      	movs	r0, r4
 8002d26:	f00c fe63 	bl	800f9f0 <strcpy>
 8002d2a:	e043      	b.n	8002db4 <main+0x49c>
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	50000800 	.word	0x50000800
 8002d34:	0000025f 	.word	0x0000025f
 8002d38:	50000c00 	.word	0x50000c00
 8002d3c:	50000400 	.word	0x50000400
 8002d40:	10110000 	.word	0x10110000
 8002d44:	20004b28 	.word	0x20004b28
 8002d48:	40012400 	.word	0x40012400
 8002d4c:	04000002 	.word	0x04000002
 8002d50:	20004a34 	.word	0x20004a34
 8002d54:	40005400 	.word	0x40005400
 8002d58:	00300f38 	.word	0x00300f38
 8002d5c:	20004b90 	.word	0x20004b90
 8002d60:	40002800 	.word	0x40002800
 8002d64:	20004bc8 	.word	0x20004bc8
 8002d68:	40013000 	.word	0x40013000
 8002d6c:	20004944 	.word	0x20004944
 8002d70:	40003800 	.word	0x40003800
 8002d74:	20004ae8 	.word	0x20004ae8
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	00000fff 	.word	0x00000fff
 8002d80:	20004cb8 	.word	0x20004cb8
 8002d84:	40002000 	.word	0x40002000
 8002d88:	20004c2c 	.word	0x20004c2c
 8002d8c:	40004400 	.word	0x40004400
 8002d90:	200049a8 	.word	0x200049a8
 8002d94:	40004800 	.word	0x40004800
 8002d98:	20001450 	.word	0x20001450
 8002d9c:	2000076c 	.word	0x2000076c
 8002da0:	080025e9 	.word	0x080025e9
 8002da4:	20000768 	.word	0x20000768
 8002da8:	200013ec 	.word	0x200013ec
 8002dac:	08012538 	.word	0x08012538
 8002db0:	08012561 	.word	0x08012561
      HAL_UART_Transmit(&huart2, (uint8_t *)&buffer, strlen(buffer), 0xFFFF);
 8002db4:	0020      	movs	r0, r4
 8002db6:	f7fd f9ad 	bl	8000114 <strlen>
 8002dba:	4b7d      	ldr	r3, [pc, #500]	; (8002fb0 <main+0x698>)
 8002dbc:	b282      	uxth	r2, r0
 8002dbe:	0021      	movs	r1, r4
 8002dc0:	0038      	movs	r0, r7
 8002dc2:	f003 fd77 	bl	80068b4 <HAL_UART_Transmit>
      if(f_mount(&SDFatFs, "", 0) != FR_OK) {
 8002dc6:	4d7b      	ldr	r5, [pc, #492]	; (8002fb4 <main+0x69c>)
 8002dc8:	0032      	movs	r2, r6
 8002dca:	0029      	movs	r1, r5
 8002dcc:	487a      	ldr	r0, [pc, #488]	; (8002fb8 <main+0x6a0>)
 8002dce:	f004 fe35 	bl	8007a3c <f_mount>
    	  sprintf(buffer, "STM32G070 FatFs - Mount Drive ERROR...\n\r");
 8002dd2:	497a      	ldr	r1, [pc, #488]	; (8002fbc <main+0x6a4>)
      if(f_mount(&SDFatFs, "", 0) != FR_OK) {
 8002dd4:	2800      	cmp	r0, #0
 8002dd6:	d100      	bne.n	8002dda <main+0x4c2>
    	  sprintf(buffer, "STM32G070 FatFs - Mount Drive...\n\r");
 8002dd8:	4979      	ldr	r1, [pc, #484]	; (8002fc0 <main+0x6a8>)
 8002dda:	0020      	movs	r0, r4
 8002ddc:	f00c fe08 	bl	800f9f0 <strcpy>
    	  HAL_UART_Transmit(&huart2, (uint8_t *)&buffer, strlen(buffer), 0xFFFF);
 8002de0:	0020      	movs	r0, r4
 8002de2:	f7fd f997 	bl	8000114 <strlen>
 8002de6:	0021      	movs	r1, r4
 8002de8:	b282      	uxth	r2, r0
 8002dea:	4b71      	ldr	r3, [pc, #452]	; (8002fb0 <main+0x698>)
 8002dec:	0038      	movs	r0, r7
 8002dee:	f003 fd61 	bl	80068b4 <HAL_UART_Transmit>
      	if(f_open(&SDFile, "first.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE) != FR_OK) {
 8002df2:	4e74      	ldr	r6, [pc, #464]	; (8002fc4 <main+0x6ac>)
 8002df4:	2213      	movs	r2, #19
 8002df6:	4974      	ldr	r1, [pc, #464]	; (8002fc8 <main+0x6b0>)
 8002df8:	0030      	movs	r0, r6
 8002dfa:	f004 fe53 	bl	8007aa4 <f_open>
 8002dfe:	2800      	cmp	r0, #0
 8002e00:	d100      	bne.n	8002e04 <main+0x4ec>
 8002e02:	e095      	b.n	8002f30 <main+0x618>
      		sprintf(buffer, "STM32G070 FatFs - File Open Write ERROR...\n\r");
 8002e04:	4971      	ldr	r1, [pc, #452]	; (8002fcc <main+0x6b4>)
 8002e06:	0020      	movs	r0, r4
 8002e08:	f00c fdf2 	bl	800f9f0 <strcpy>
      		HAL_UART_Transmit(&huart2, (uint8_t *)&buffer, strlen(buffer), 0xFFFF);
 8002e0c:	0020      	movs	r0, r4
 8002e0e:	f7fd f981 	bl	8000114 <strlen>
 8002e12:	4b67      	ldr	r3, [pc, #412]	; (8002fb0 <main+0x698>)
 8002e14:	b282      	uxth	r2, r0
 8002e16:	0021      	movs	r1, r4
 8002e18:	0038      	movs	r0, r7
 8002e1a:	f003 fd4b 	bl	80068b4 <HAL_UART_Transmit>
      	if(f_getfree("", &fre_clust, &pfs) != FR_OK){
 8002e1e:	4e6c      	ldr	r6, [pc, #432]	; (8002fd0 <main+0x6b8>)
 8002e20:	496c      	ldr	r1, [pc, #432]	; (8002fd4 <main+0x6bc>)
 8002e22:	0032      	movs	r2, r6
 8002e24:	0028      	movs	r0, r5
 8002e26:	f005 f959 	bl	80080dc <f_getfree>
      	totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8002e2a:	6833      	ldr	r3, [r6, #0]
 8002e2c:	6958      	ldr	r0, [r3, #20]
 8002e2e:	895a      	ldrh	r2, [r3, #10]
 8002e30:	3802      	subs	r0, #2
 8002e32:	4350      	muls	r0, r2
 8002e34:	9203      	str	r2, [sp, #12]
 8002e36:	f7ff f9b5 	bl	80021a4 <__aeabi_ui2d>
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	4b66      	ldr	r3, [pc, #408]	; (8002fd8 <main+0x6c0>)
 8002e3e:	f7fe fb85 	bl	800154c <__aeabi_dmul>
 8002e42:	f7fd fb61 	bl	8000508 <__aeabi_d2uiz>
 8002e46:	4b65      	ldr	r3, [pc, #404]	; (8002fdc <main+0x6c4>)
 8002e48:	0006      	movs	r6, r0
 8002e4a:	6018      	str	r0, [r3, #0]
      	freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8002e4c:	4b61      	ldr	r3, [pc, #388]	; (8002fd4 <main+0x6bc>)
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	9b03      	ldr	r3, [sp, #12]
 8002e52:	4358      	muls	r0, r3
 8002e54:	f7ff f9a6 	bl	80021a4 <__aeabi_ui2d>
 8002e58:	2200      	movs	r2, #0
 8002e5a:	4b5f      	ldr	r3, [pc, #380]	; (8002fd8 <main+0x6c0>)
 8002e5c:	f7fe fb76 	bl	800154c <__aeabi_dmul>
 8002e60:	f7fd fb52 	bl	8000508 <__aeabi_d2uiz>
 8002e64:	4a5e      	ldr	r2, [pc, #376]	; (8002fe0 <main+0x6c8>)
 8002e66:	0003      	movs	r3, r0
 8002e68:	6010      	str	r0, [r2, #0]
      	sprintf(buffer, "STM32G070 FatFs - Total Space = %ld Free Space = %ld\n\r",totalSpace , freeSpace);
 8002e6a:	495e      	ldr	r1, [pc, #376]	; (8002fe4 <main+0x6cc>)
 8002e6c:	0032      	movs	r2, r6
 8002e6e:	0020      	movs	r0, r4
 8002e70:	f00c fd9c 	bl	800f9ac <sprintf>
      	HAL_UART_Transmit(&huart2, (uint8_t *)&buffer, strlen(buffer), 0xFFFF);
 8002e74:	0020      	movs	r0, r4
 8002e76:	f7fd f94d 	bl	8000114 <strlen>
 8002e7a:	0021      	movs	r1, r4
 8002e7c:	b282      	uxth	r2, r0
 8002e7e:	4b4c      	ldr	r3, [pc, #304]	; (8002fb0 <main+0x698>)
 8002e80:	0038      	movs	r0, r7
 8002e82:	f003 fd17 	bl	80068b4 <HAL_UART_Transmit>
      if(f_open(&SDFile, "message.txt", FA_READ) != FR_OK) {
 8002e86:	4e4f      	ldr	r6, [pc, #316]	; (8002fc4 <main+0x6ac>)
 8002e88:	2201      	movs	r2, #1
 8002e8a:	4957      	ldr	r1, [pc, #348]	; (8002fe8 <main+0x6d0>)
 8002e8c:	0030      	movs	r0, r6
 8002e8e:	f004 fe09 	bl	8007aa4 <f_open>
 8002e92:	2800      	cmp	r0, #0
 8002e94:	d065      	beq.n	8002f62 <main+0x64a>
          sprintf(buffer, "STM32G070 FatFs - Open File Error...\n\r");
 8002e96:	4955      	ldr	r1, [pc, #340]	; (8002fec <main+0x6d4>)
 8002e98:	0020      	movs	r0, r4
 8002e9a:	f00c fda9 	bl	800f9f0 <strcpy>
          HAL_UART_Transmit(&huart2, (uint8_t *)&buffer, strlen(buffer), 0xFFFF);
 8002e9e:	0020      	movs	r0, r4
 8002ea0:	f7fd f938 	bl	8000114 <strlen>
 8002ea4:	4b42      	ldr	r3, [pc, #264]	; (8002fb0 <main+0x698>)
 8002ea6:	b282      	uxth	r2, r0
 8002ea8:	0021      	movs	r1, r4
 8002eaa:	0038      	movs	r0, r7
 8002eac:	f003 fd02 	bl	80068b4 <HAL_UART_Transmit>
      if(f_mount(NULL, "", 1) != FR_OK) {
 8002eb0:	0029      	movs	r1, r5
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f004 fdc1 	bl	8007a3c <f_mount>
          sprintf(buffer, "STM32G070 FatFs - Umount Drive ERROR...\n\r");
 8002eba:	494d      	ldr	r1, [pc, #308]	; (8002ff0 <main+0x6d8>)
      if(f_mount(NULL, "", 1) != FR_OK) {
 8002ebc:	2800      	cmp	r0, #0
 8002ebe:	d100      	bne.n	8002ec2 <main+0x5aa>
          sprintf(buffer, "STM32G070 FatFs - Umount Drive...\n\r");
 8002ec0:	494c      	ldr	r1, [pc, #304]	; (8002ff4 <main+0x6dc>)
 8002ec2:	0020      	movs	r0, r4
 8002ec4:	f00c fd94 	bl	800f9f0 <strcpy>
          HAL_UART_Transmit(&huart2, (uint8_t *)&buffer, strlen(buffer), 0xFFFF);
 8002ec8:	0020      	movs	r0, r4
 8002eca:	f7fd f923 	bl	8000114 <strlen>
 8002ece:	4b38      	ldr	r3, [pc, #224]	; (8002fb0 <main+0x698>)
 8002ed0:	b282      	uxth	r2, r0
 8002ed2:	0021      	movs	r1, r4
 8002ed4:	0038      	movs	r0, r7
 8002ed6:	f003 fced 	bl	80068b4 <HAL_UART_Transmit>
  sprintf(buffer, "STM32G070 FatFs - INIC OK\n\r");
 8002eda:	4947      	ldr	r1, [pc, #284]	; (8002ff8 <main+0x6e0>)
 8002edc:	0020      	movs	r0, r4
 8002ede:	f00c fd87 	bl	800f9f0 <strcpy>
  HAL_UART_Transmit(&huart2, (uint8_t *)&buffer, strlen(buffer), 0xFFFF);
 8002ee2:	0020      	movs	r0, r4
 8002ee4:	f7fd f916 	bl	8000114 <strlen>
 8002ee8:	4b31      	ldr	r3, [pc, #196]	; (8002fb0 <main+0x698>)
 8002eea:	b282      	uxth	r2, r0
 8002eec:	0021      	movs	r1, r4
 8002eee:	0038      	movs	r0, r7
 8002ef0:	f003 fce0 	bl	80068b4 <HAL_UART_Transmit>
  lv_obj_t * scr = lv_disp_get_scr_act(NULL);     /*Get the current screen*/
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	f005 f9c2 	bl	800827e <lv_disp_get_scr_act>
  lv_obj_t * label1 =  lv_label_create(scr, NULL);
 8002efa:	2100      	movs	r1, #0
 8002efc:	f00c f9f2 	bl	800f2e4 <lv_label_create>
  lv_label_set_text(label1, "STM32G070RB");
 8002f00:	493e      	ldr	r1, [pc, #248]	; (8002ffc <main+0x6e4>)
  lv_obj_t * label1 =  lv_label_create(scr, NULL);
 8002f02:	0004      	movs	r4, r0
  lv_label_set_text(label1, "STM32G070RB");
 8002f04:	f00c f93c 	bl	800f180 <lv_label_set_text>
  lv_obj_align(label1, NULL, LV_ALIGN_CENTER, 0, 0);
 8002f08:	2100      	movs	r1, #0
 8002f0a:	0020      	movs	r0, r4
 8002f0c:	9100      	str	r1, [sp, #0]
 8002f0e:	000b      	movs	r3, r1
 8002f10:	000a      	movs	r2, r1
	    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002f12:	24a0      	movs	r4, #160	; 0xa0
  lv_obj_align(label1, NULL, LV_ALIGN_CENTER, 0, 0);
 8002f14:	f005 fc94 	bl	8008840 <lv_obj_align>
	    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002f18:	05e4      	lsls	r4, r4, #23
		  ButtonEvent();
 8002f1a:	f7ff fca7 	bl	800286c <ButtonEvent>
		  Read_Encoder();
 8002f1e:	f000 f897 	bl	8003050 <Read_Encoder>
	    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002f22:	2120      	movs	r1, #32
 8002f24:	0020      	movs	r0, r4
 8002f26:	f001 fc51 	bl	80047cc <HAL_GPIO_TogglePin>
	  	  lv_task_handler();
 8002f2a:	f00b f96b 	bl	800e204 <lv_task_handler>
 8002f2e:	e7f4      	b.n	8002f1a <main+0x602>
      		sprintf(buffer, "STM32G070 FatFs - File Open Write...\n\r");
 8002f30:	4933      	ldr	r1, [pc, #204]	; (8003000 <main+0x6e8>)
 8002f32:	0020      	movs	r0, r4
 8002f34:	f00c fd5c 	bl	800f9f0 <strcpy>
      		HAL_UART_Transmit(&huart2, (uint8_t *)&buffer, strlen(buffer), 0xFFFF);
 8002f38:	0020      	movs	r0, r4
 8002f3a:	f7fd f8eb 	bl	8000114 <strlen>
 8002f3e:	4b1c      	ldr	r3, [pc, #112]	; (8002fb0 <main+0x698>)
 8002f40:	b282      	uxth	r2, r0
 8002f42:	0021      	movs	r1, r4
 8002f44:	0038      	movs	r0, r7
 8002f46:	f003 fcb5 	bl	80068b4 <HAL_UART_Transmit>
          	f_puts("STM32 SD Card I/O Example via SPI\n", &SDFile);
 8002f4a:	0031      	movs	r1, r6
 8002f4c:	482d      	ldr	r0, [pc, #180]	; (8003004 <main+0x6ec>)
 8002f4e:	f005 f95a 	bl	8008206 <f_puts>
          	f_puts("Save the world!!!", &SDFile);
 8002f52:	0031      	movs	r1, r6
 8002f54:	482c      	ldr	r0, [pc, #176]	; (8003008 <main+0x6f0>)
 8002f56:	f005 f956 	bl	8008206 <f_puts>
          	f_close(&SDFile);
 8002f5a:	0030      	movs	r0, r6
 8002f5c:	f005 f8ab 	bl	80080b6 <f_close>
 8002f60:	e75d      	b.n	8002e1e <main+0x506>
          sprintf(buffer, "STM32G070 FatFs - Open File...\n\r");
 8002f62:	492a      	ldr	r1, [pc, #168]	; (800300c <main+0x6f4>)
 8002f64:	0020      	movs	r0, r4
 8002f66:	f00c fd43 	bl	800f9f0 <strcpy>
          HAL_UART_Transmit(&huart2, (uint8_t *)&buffer, strlen(buffer), 0xFFFF);
 8002f6a:	0020      	movs	r0, r4
 8002f6c:	f7fd f8d2 	bl	8000114 <strlen>
 8002f70:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <main+0x698>)
 8002f72:	b282      	uxth	r2, r0
 8002f74:	0021      	movs	r1, r4
 8002f76:	0038      	movs	r0, r7
 8002f78:	f003 fc9c 	bl	80068b4 <HAL_UART_Transmit>
          while (f_gets(line, sizeof line, &SDFile)) {
 8002f7c:	0032      	movs	r2, r6
 8002f7e:	2164      	movs	r1, #100	; 0x64
 8002f80:	4823      	ldr	r0, [pc, #140]	; (8003010 <main+0x6f8>)
 8002f82:	f005 f919 	bl	80081b8 <f_gets>
 8002f86:	2800      	cmp	r0, #0
 8002f88:	d092      	beq.n	8002eb0 <main+0x598>
              sprintf(buffer, "STM32G070 FatFs - Read File... line: %s\n\r", line);
 8002f8a:	4a21      	ldr	r2, [pc, #132]	; (8003010 <main+0x6f8>)
 8002f8c:	4921      	ldr	r1, [pc, #132]	; (8003014 <main+0x6fc>)
 8002f8e:	0020      	movs	r0, r4
 8002f90:	f00c fd0c 	bl	800f9ac <sprintf>
              HAL_UART_Transmit(&huart2, (uint8_t *)&buffer, strlen(buffer), 0xFFFF);
 8002f94:	0020      	movs	r0, r4
 8002f96:	f7fd f8bd 	bl	8000114 <strlen>
 8002f9a:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <main+0x698>)
 8002f9c:	b282      	uxth	r2, r0
 8002f9e:	0021      	movs	r1, r4
 8002fa0:	0038      	movs	r0, r7
 8002fa2:	f003 fc87 	bl	80068b4 <HAL_UART_Transmit>
              f_close(&SDFile);
 8002fa6:	0030      	movs	r0, r6
 8002fa8:	f005 f885 	bl	80080b6 <f_close>
 8002fac:	e7e6      	b.n	8002f7c <main+0x664>
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	0000ffff 	.word	0x0000ffff
 8002fb4:	08012655 	.word	0x08012655
 8002fb8:	20004d40 	.word	0x20004d40
 8002fbc:	08012589 	.word	0x08012589
 8002fc0:	080125b2 	.word	0x080125b2
 8002fc4:	20004f70 	.word	0x20004f70
 8002fc8:	080125d5 	.word	0x080125d5
 8002fcc:	080125df 	.word	0x080125df
 8002fd0:	20004bc4 	.word	0x20004bc4
 8002fd4:	20004940 	.word	0x20004940
 8002fd8:	3fe00000 	.word	0x3fe00000
 8002fdc:	20004a80 	.word	0x20004a80
 8002fe0:	20004bc0 	.word	0x20004bc0
 8002fe4:	08012668 	.word	0x08012668
 8002fe8:	0801269f 	.word	0x0801269f
 8002fec:	080126ab 	.word	0x080126ab
 8002ff0:	0801271d 	.word	0x0801271d
 8002ff4:	08012747 	.word	0x08012747
 8002ff8:	0801276b 	.word	0x0801276b
 8002ffc:	08012787 	.word	0x08012787
 8003000:	0801260c 	.word	0x0801260c
 8003004:	08012633 	.word	0x08012633
 8003008:	08012656 	.word	0x08012656
 800300c:	080126d2 	.word	0x080126d2
 8003010:	20004a84 	.word	0x20004a84
 8003014:	080126f3 	.word	0x080126f3

08003018 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003018:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800301a:	6803      	ldr	r3, [r0, #0]
 800301c:	4c0a      	ldr	r4, [pc, #40]	; (8003048 <HAL_TIM_PeriodElapsedCallback+0x30>)
{
 800301e:	0005      	movs	r5, r0
  if (htim->Instance == TIM6) {
 8003020:	42a3      	cmp	r3, r4
 8003022:	d101      	bne.n	8003028 <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 8003024:	f000 fff0 	bl	8004008 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
//  if (htim->Instance == TIM6) {
//	  lv_tick_inc(1);
// }
  if (htim->Instance == TIM6) {
 8003028:	682b      	ldr	r3, [r5, #0]
 800302a:	42a3      	cmp	r3, r4
 800302c:	d105      	bne.n	800303a <HAL_TIM_PeriodElapsedCallback+0x22>
   	  timer_key++;
 800302e:	4a07      	ldr	r2, [pc, #28]	; (800304c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003030:	6813      	ldr	r3, [r2, #0]
 8003032:	3301      	adds	r3, #1
   	  if(timer_key >= 40) {
 8003034:	2b27      	cmp	r3, #39	; 0x27
 8003036:	d801      	bhi.n	800303c <HAL_TIM_PeriodElapsedCallback+0x24>
   	  timer_key++;
 8003038:	6013      	str	r3, [r2, #0]
   		  timer_key = 0;
   		  Key_Read();
   	  }
  }
  /* USER CODE END Callback 1 */
}
 800303a:	bd70      	pop	{r4, r5, r6, pc}
   		  timer_key = 0;
 800303c:	2300      	movs	r3, #0
 800303e:	6013      	str	r3, [r2, #0]
   		  Key_Read();
 8003040:	f7ff fbdc 	bl	80027fc <Key_Read>
}
 8003044:	e7f9      	b.n	800303a <HAL_TIM_PeriodElapsedCallback+0x22>
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	40001000 	.word	0x40001000
 800304c:	2000146c 	.word	0x2000146c

08003050 <Read_Encoder>:

uint8_t aVal = 0, bVal = 0, CLKLast = 0, bCW = 0, CCW = 0, CLKLast1 = 0;
uint32_t encoderPosCount = 0;

uint16_t Read_Encoder(void)
{
 8003050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* BEGIN � Code for encoder */
	aVal = HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 8003052:	2180      	movs	r1, #128	; 0x80
 8003054:	20a0      	movs	r0, #160	; 0xa0
 8003056:	0049      	lsls	r1, r1, #1
 8003058:	05c0      	lsls	r0, r0, #23
 800305a:	f001 fbab 	bl	80047b4 <HAL_GPIO_ReadPin>
	if (aVal != CLKLast)
 800305e:	4b1e      	ldr	r3, [pc, #120]	; (80030d8 <Read_Encoder+0x88>)
	aVal = HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 8003060:	4d1e      	ldr	r5, [pc, #120]	; (80030dc <Read_Encoder+0x8c>)
	if (aVal != CLKLast)
 8003062:	781b      	ldrb	r3, [r3, #0]
	aVal = HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 8003064:	7028      	strb	r0, [r5, #0]
	if (aVal != CLKLast)
 8003066:	4283      	cmp	r3, r0
 8003068:	d02a      	beq.n	80030c0 <Read_Encoder+0x70>
	{ // Means the knob is rotating
	  // if the knob is rotating, we need to determine direction
	  // We do that by reading pin B.
//		if(!aVal)
//		{ // aVal is false or 0 then proceed. This prevents double incrementation.
			if (HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin) != aVal)
 800306a:	2180      	movs	r1, #128	; 0x80
 800306c:	20a0      	movs	r0, #160	; 0xa0
 800306e:	0089      	lsls	r1, r1, #2
 8003070:	05c0      	lsls	r0, r0, #23
 8003072:	f001 fb9f 	bl	80047b4 <HAL_GPIO_ReadPin>
 8003076:	4c1a      	ldr	r4, [pc, #104]	; (80030e0 <Read_Encoder+0x90>)
 8003078:	782f      	ldrb	r7, [r5, #0]
 800307a:	4a1a      	ldr	r2, [pc, #104]	; (80030e4 <Read_Encoder+0x94>)
			{ // Means pin A Changed first � We�re Rotating Clockwise
				encoderPosCount++;
 800307c:	6823      	ldr	r3, [r4, #0]
			if (HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin) != aVal)
 800307e:	42b8      	cmp	r0, r7
 8003080:	d024      	beq.n	80030cc <Read_Encoder+0x7c>
				encoderPosCount++;
 8003082:	3301      	adds	r3, #1
				if(encoderPosCount >= 100) encoderPosCount = 100;
 8003084:	2b63      	cmp	r3, #99	; 0x63
 8003086:	d81f      	bhi.n	80030c8 <Read_Encoder+0x78>
 8003088:	6023      	str	r3, [r4, #0]
				bCW = true;
 800308a:	2301      	movs	r3, #1
			}
			else {// Otherwise B changed first and we�re moving CCW
				if(encoderPosCount >= 1) encoderPosCount--;
				bCW = false;
			}
			sprintf(buffer, "Encoder - aVal: %d DT: %d, EncoderPosition: %ld\n", aVal, HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin), encoderPosCount);
 800308c:	2180      	movs	r1, #128	; 0x80
 800308e:	20a0      	movs	r0, #160	; 0xa0
 8003090:	0089      	lsls	r1, r1, #2
 8003092:	05c0      	lsls	r0, r0, #23
				bCW = false;
 8003094:	7013      	strb	r3, [r2, #0]
			sprintf(buffer, "Encoder - aVal: %d DT: %d, EncoderPosition: %ld\n", aVal, HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin), encoderPosCount);
 8003096:	f001 fb8d 	bl	80047b4 <HAL_GPIO_ReadPin>
 800309a:	4e13      	ldr	r6, [pc, #76]	; (80030e8 <Read_Encoder+0x98>)
 800309c:	6822      	ldr	r2, [r4, #0]
 800309e:	0003      	movs	r3, r0
 80030a0:	4912      	ldr	r1, [pc, #72]	; (80030ec <Read_Encoder+0x9c>)
 80030a2:	9200      	str	r2, [sp, #0]
 80030a4:	0030      	movs	r0, r6
 80030a6:	003a      	movs	r2, r7
 80030a8:	f00c fc80 	bl	800f9ac <sprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80030ac:	0030      	movs	r0, r6
 80030ae:	f7fd f831 	bl	8000114 <strlen>
 80030b2:	2301      	movs	r3, #1
 80030b4:	b282      	uxth	r2, r0
 80030b6:	425b      	negs	r3, r3
 80030b8:	0031      	movs	r1, r6
 80030ba:	480d      	ldr	r0, [pc, #52]	; (80030f0 <Read_Encoder+0xa0>)
 80030bc:	f003 fbfa 	bl	80068b4 <HAL_UART_Transmit>
//		}
	}
	CLKLast = aVal;
 80030c0:	7828      	ldrb	r0, [r5, #0]
 80030c2:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <Read_Encoder+0x88>)
 80030c4:	7018      	strb	r0, [r3, #0]
	return aVal;
}
 80030c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
				if(encoderPosCount >= 100) encoderPosCount = 100;
 80030c8:	2364      	movs	r3, #100	; 0x64
 80030ca:	e7dd      	b.n	8003088 <Read_Encoder+0x38>
				if(encoderPosCount >= 1) encoderPosCount--;
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <Read_Encoder+0x84>
 80030d0:	3b01      	subs	r3, #1
 80030d2:	6023      	str	r3, [r4, #0]
				bCW = false;
 80030d4:	2300      	movs	r3, #0
 80030d6:	e7d9      	b.n	800308c <Read_Encoder+0x3c>
 80030d8:	20001470 	.word	0x20001470
 80030dc:	20001471 	.word	0x20001471
 80030e0:	20001474 	.word	0x20001474
 80030e4:	20001472 	.word	0x20001472
 80030e8:	200013ec 	.word	0x200013ec
 80030ec:	08012793 	.word	0x08012793
 80030f0:	20004c2c 	.word	0x20004c2c

080030f4 <tft_backlight>:
	}
}

void tft_backlight(uint16_t value)
{
	if(value >= 0 && value <= 100) {
 80030f4:	2864      	cmp	r0, #100	; 0x64
 80030f6:	d808      	bhi.n	800310a <tft_backlight+0x16>
		tft_pwm = value * 40;
 80030f8:	2328      	movs	r3, #40	; 0x28
 80030fa:	4358      	muls	r0, r3
 80030fc:	4b03      	ldr	r3, [pc, #12]	; (800310c <tft_backlight+0x18>)
 80030fe:	b280      	uxth	r0, r0
 8003100:	8018      	strh	r0, [r3, #0]
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, tft_pwm);		// PWM_CH1 = TFT
 8003102:	4b03      	ldr	r3, [pc, #12]	; (8003110 <tft_backlight+0x1c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6358      	str	r0, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, tft_pwm);		// PWM_CH2 = TFT
 8003108:	6398      	str	r0, [r3, #56]	; 0x38
	}
}
 800310a:	4770      	bx	lr
 800310c:	20004b8c 	.word	0x20004b8c
 8003110:	20004ae8 	.word	0x20004ae8

08003114 <SD_ReadData>:
  * @brief  Waits a data until a value different from SD_DUMMY_BITE
  * @param  None
  * @retval the value read
  */
uint8_t SD_ReadData(void)
{
 8003114:	b510      	push	{r4, lr}
 8003116:	2408      	movs	r4, #8
  uint8_t timeout = 0x08;
  uint8_t readvalue;

  /* Check if response is got or a timeout is happen */
  do {
    readvalue = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003118:	20ff      	movs	r0, #255	; 0xff
 800311a:	f000 feea 	bl	8003ef2 <SD_IO_WriteByte>
    timeout--;

  }while ((readvalue == SD_DUMMY_BYTE) && timeout);
 800311e:	28ff      	cmp	r0, #255	; 0xff
 8003120:	d103      	bne.n	800312a <SD_ReadData+0x16>
 8003122:	3c01      	subs	r4, #1
 8003124:	b2e4      	uxtb	r4, r4
 8003126:	2c00      	cmp	r4, #0
 8003128:	d1f6      	bne.n	8003118 <SD_ReadData+0x4>

  /* Right response got */
  return readvalue;
}
 800312a:	bd10      	pop	{r4, pc}

0800312c <SD_SendCmd>:
{
 800312c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800312e:	b087      	sub	sp, #28
 8003130:	0004      	movs	r4, r0
 8003132:	a80c      	add	r0, sp, #48	; 0x30
 8003134:	7805      	ldrb	r5, [r0, #0]
  frame[0] = (Cmd | 0x40);         /* Construct byte 1 */
 8003136:	2040      	movs	r0, #64	; 0x40
 8003138:	4301      	orrs	r1, r0
 800313a:	a802      	add	r0, sp, #8
 800313c:	7001      	strb	r1, [r0, #0]
  frame[1] = (uint8_t)(Arg >> 24); /* Construct byte 2 */
 800313e:	0e11      	lsrs	r1, r2, #24
 8003140:	7041      	strb	r1, [r0, #1]
  frame[2] = (uint8_t)(Arg >> 16); /* Construct byte 3 */
 8003142:	0c11      	lsrs	r1, r2, #16
 8003144:	7081      	strb	r1, [r0, #2]
  frame[4] = (uint8_t)(Arg);       /* Construct byte 5 */
 8003146:	7102      	strb	r2, [r0, #4]
  frame[3] = (uint8_t)(Arg >> 8);  /* Construct byte 4 */
 8003148:	0a11      	lsrs	r1, r2, #8
  frame[5] = (Crc | 0x01);         /* Construct byte 6 */
 800314a:	2201      	movs	r2, #1
 800314c:	4313      	orrs	r3, r2
  frame[3] = (uint8_t)(Arg >> 8);  /* Construct byte 4 */
 800314e:	70c1      	strb	r1, [r0, #3]
  frame[5] = (Crc | 0x01);         /* Construct byte 6 */
 8003150:	7143      	strb	r3, [r0, #5]
  SD_IO_CSState(0);
 8003152:	2000      	movs	r0, #0
 8003154:	f000 febc 	bl	8003ed0 <SD_IO_CSState>
  SD_IO_WriteReadData(frame, frameout, SD_CMD_LENGTH); /* Send the Cmd bytes */
 8003158:	2206      	movs	r2, #6
 800315a:	a904      	add	r1, sp, #16
 800315c:	a802      	add	r0, sp, #8
 800315e:	f000 fec4 	bl	8003eea <SD_IO_WriteReadData>
  switch(Answer)
 8003162:	2d05      	cmp	r5, #5
 8003164:	d84a      	bhi.n	80031fc <SD_SendCmd+0xd0>
 8003166:	0028      	movs	r0, r5
 8003168:	f7fc ffdc 	bl	8000124 <__gnu_thumb1_case_uqi>
 800316c:	352c1403 	.word	0x352c1403
 8003170:	3548      	.short	0x3548
    retr.r1 = SD_ReadData();
 8003172:	f7ff ffcf 	bl	8003114 <SD_ReadData>
 8003176:	0007      	movs	r7, r0
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 8003178:	20ff      	movs	r0, #255	; 0xff
 800317a:	0005      	movs	r5, r0
 800317c:	0006      	movs	r6, r0
 800317e:	9001      	str	r0, [sp, #4]
  return retr;
 8003180:	466b      	mov	r3, sp
 8003182:	7120      	strb	r0, [r4, #4]
}
 8003184:	0020      	movs	r0, r4
  return retr;
 8003186:	791b      	ldrb	r3, [r3, #4]
 8003188:	7027      	strb	r7, [r4, #0]
 800318a:	7066      	strb	r6, [r4, #1]
 800318c:	70a5      	strb	r5, [r4, #2]
 800318e:	70e3      	strb	r3, [r4, #3]
}
 8003190:	b007      	add	sp, #28
 8003192:	bdf0      	pop	{r4, r5, r6, r7, pc}
    retr.r1 = SD_ReadData();
 8003194:	f7ff ffbe 	bl	8003114 <SD_ReadData>
 8003198:	0007      	movs	r7, r0
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 800319a:	20ff      	movs	r0, #255	; 0xff
 800319c:	f000 fea9 	bl	8003ef2 <SD_IO_WriteByte>
 80031a0:	0006      	movs	r6, r0
    SD_IO_CSState(1);
 80031a2:	2001      	movs	r0, #1
 80031a4:	f000 fe94 	bl	8003ed0 <SD_IO_CSState>
    HAL_Delay(1);
 80031a8:	2001      	movs	r0, #1
 80031aa:	f000 ff3f 	bl	800402c <HAL_Delay>
    SD_IO_CSState(0);
 80031ae:	2000      	movs	r0, #0
 80031b0:	f000 fe8e 	bl	8003ed0 <SD_IO_CSState>
    while (SD_IO_WriteByte(SD_DUMMY_BYTE) != 0xFF);
 80031b4:	20ff      	movs	r0, #255	; 0xff
 80031b6:	f000 fe9c 	bl	8003ef2 <SD_IO_WriteByte>
 80031ba:	28ff      	cmp	r0, #255	; 0xff
 80031bc:	d1fa      	bne.n	80031b4 <SD_SendCmd+0x88>
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 80031be:	9001      	str	r0, [sp, #4]
 80031c0:	0005      	movs	r5, r0
    break;
 80031c2:	e7dd      	b.n	8003180 <SD_SendCmd+0x54>
    retr.r1 = SD_ReadData();
 80031c4:	f7ff ffa6 	bl	8003114 <SD_ReadData>
 80031c8:	0007      	movs	r7, r0
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80031ca:	20ff      	movs	r0, #255	; 0xff
 80031cc:	f000 fe91 	bl	8003ef2 <SD_IO_WriteByte>
 80031d0:	0006      	movs	r6, r0
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 80031d2:	20ff      	movs	r0, #255	; 0xff
 80031d4:	e7f3      	b.n	80031be <SD_SendCmd+0x92>
    retr.r1 = SD_ReadData();
 80031d6:	f7ff ff9d 	bl	8003114 <SD_ReadData>
 80031da:	0007      	movs	r7, r0
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80031dc:	20ff      	movs	r0, #255	; 0xff
 80031de:	f000 fe88 	bl	8003ef2 <SD_IO_WriteByte>
 80031e2:	0006      	movs	r6, r0
    retr.r3 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80031e4:	20ff      	movs	r0, #255	; 0xff
 80031e6:	f000 fe84 	bl	8003ef2 <SD_IO_WriteByte>
 80031ea:	0005      	movs	r5, r0
    retr.r4 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80031ec:	20ff      	movs	r0, #255	; 0xff
 80031ee:	f000 fe80 	bl	8003ef2 <SD_IO_WriteByte>
 80031f2:	9001      	str	r0, [sp, #4]
    retr.r5 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80031f4:	20ff      	movs	r0, #255	; 0xff
 80031f6:	f000 fe7c 	bl	8003ef2 <SD_IO_WriteByte>
    break;
 80031fa:	e7c1      	b.n	8003180 <SD_SendCmd+0x54>
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 80031fc:	20ff      	movs	r0, #255	; 0xff
 80031fe:	9001      	str	r0, [sp, #4]
 8003200:	0005      	movs	r5, r0
 8003202:	0006      	movs	r6, r0
 8003204:	0007      	movs	r7, r0
 8003206:	e7bb      	b.n	8003180 <SD_SendCmd+0x54>

08003208 <SD_WaitData.constprop.0>:
/**
  * @brief  Waits a data from the SD card
  * @param  data : Expected data from the SD card
  * @retval BSP_SD_OK or BSP_SD_TIMEOUT
  */
uint8_t SD_WaitData(uint8_t data)
 8003208:	b510      	push	{r4, lr}
{
  uint16_t timeout = 0xFFFF;
 800320a:	4c08      	ldr	r4, [pc, #32]	; (800322c <SD_WaitData.constprop.0+0x24>)
  uint8_t readvalue;

  /* Check if response is got or a timeout is happen */

  do {
    readvalue = SD_IO_WriteByte(SD_DUMMY_BYTE);
 800320c:	20ff      	movs	r0, #255	; 0xff
 800320e:	f000 fe70 	bl	8003ef2 <SD_IO_WriteByte>
    timeout--;
 8003212:	3c01      	subs	r4, #1
 8003214:	b2a4      	uxth	r4, r4
  }while ((readvalue != data) && timeout);
 8003216:	28fe      	cmp	r0, #254	; 0xfe
 8003218:	d003      	beq.n	8003222 <SD_WaitData.constprop.0+0x1a>
 800321a:	2c00      	cmp	r4, #0
 800321c:	d1f6      	bne.n	800320c <SD_WaitData.constprop.0+0x4>

  if (timeout == 0)
  {
    /* After time out */
    return BSP_SD_TIMEOUT;
 800321e:	2002      	movs	r0, #2
  }

  /* Right response got */
  return BSP_SD_OK;
}
 8003220:	bd10      	pop	{r4, pc}
  return BSP_SD_OK;
 8003222:	4260      	negs	r0, r4
 8003224:	4160      	adcs	r0, r4
 8003226:	0040      	lsls	r0, r0, #1
 8003228:	e7fa      	b.n	8003220 <SD_WaitData.constprop.0+0x18>
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	0000ffff 	.word	0x0000ffff

08003230 <BSP_SD_Init>:
{
 8003230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003232:	b089      	sub	sp, #36	; 0x24
  SD_IO_Init();
 8003234:	f000 fe6c 	bl	8003f10 <SD_IO_Init>
  SdStatus = SD_PRESENT;
 8003238:	2201      	movs	r2, #1
  __IO uint8_t counter = 0;
 800323a:	250f      	movs	r5, #15
  SdStatus = SD_PRESENT;
 800323c:	4b5b      	ldr	r3, [pc, #364]	; (80033ac <BSP_SD_Init+0x17c>)
 800323e:	701a      	strb	r2, [r3, #0]
  __IO uint8_t counter = 0;
 8003240:	ab02      	add	r3, sp, #8
 8003242:	18ed      	adds	r5, r5, r3
 8003244:	2300      	movs	r3, #0
 8003246:	702b      	strb	r3, [r5, #0]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8003248:	2100      	movs	r1, #0
    counter++;
 800324a:	782b      	ldrb	r3, [r5, #0]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 800324c:	ac06      	add	r4, sp, #24
    counter++;
 800324e:	3301      	adds	r3, #1
 8003250:	b2db      	uxtb	r3, r3
 8003252:	702b      	strb	r3, [r5, #0]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8003254:	000a      	movs	r2, r1
 8003256:	2395      	movs	r3, #149	; 0x95
 8003258:	9100      	str	r1, [sp, #0]
 800325a:	0020      	movs	r0, r4
 800325c:	f7ff ff66 	bl	800312c <SD_SendCmd>
    SD_IO_CSState(1);
 8003260:	2001      	movs	r0, #1
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8003262:	7827      	ldrb	r7, [r4, #0]
    SD_IO_CSState(1);
 8003264:	f000 fe34 	bl	8003ed0 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003268:	20ff      	movs	r0, #255	; 0xff
 800326a:	f000 fe42 	bl	8003ef2 <SD_IO_WriteByte>
    if(counter >= SD_MAX_TRY)
 800326e:	782b      	ldrb	r3, [r5, #0]
 8003270:	2b63      	cmp	r3, #99	; 0x63
 8003272:	d903      	bls.n	800327c <BSP_SD_Init+0x4c>
      return BSP_SD_ERROR;
 8003274:	2501      	movs	r5, #1
}
 8003276:	0028      	movs	r0, r5
 8003278:	b009      	add	sp, #36	; 0x24
 800327a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while(response.r1 != SD_R1_IN_IDLE_STATE);
 800327c:	2f01      	cmp	r7, #1
 800327e:	d1e3      	bne.n	8003248 <BSP_SD_Init+0x18>
  response = SD_SendCmd(SD_CMD_SEND_IF_COND, 0x1AA, 0x87, SD_ANSWER_R7_EXPECTED);
 8003280:	2305      	movs	r3, #5
 8003282:	22d5      	movs	r2, #213	; 0xd5
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	0052      	lsls	r2, r2, #1
 8003288:	3382      	adds	r3, #130	; 0x82
 800328a:	2108      	movs	r1, #8
 800328c:	0020      	movs	r0, r4
 800328e:	f7ff ff4d 	bl	800312c <SD_SendCmd>
 8003292:	7825      	ldrb	r5, [r4, #0]
  SD_IO_CSState(1);
 8003294:	0038      	movs	r0, r7
 8003296:	f000 fe1b 	bl	8003ed0 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 800329a:	20ff      	movs	r0, #255	; 0xff
 800329c:	f000 fe29 	bl	8003ef2 <SD_IO_WriteByte>
  if((response.r1  & SD_R1_ILLEGAL_COMMAND) == SD_R1_ILLEGAL_COMMAND)
 80032a0:	076b      	lsls	r3, r5, #29
 80032a2:	d523      	bpl.n	80032ec <BSP_SD_Init+0xbc>
      response = SD_SendCmd(SD_CMD_APP_CMD, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 80032a4:	26ff      	movs	r6, #255	; 0xff
 80032a6:	2500      	movs	r5, #0
 80032a8:	0033      	movs	r3, r6
 80032aa:	002a      	movs	r2, r5
 80032ac:	2137      	movs	r1, #55	; 0x37
 80032ae:	0020      	movs	r0, r4
 80032b0:	9500      	str	r5, [sp, #0]
 80032b2:	f7ff ff3b 	bl	800312c <SD_SendCmd>
      SD_IO_CSState(1);
 80032b6:	0038      	movs	r0, r7
 80032b8:	f000 fe0a 	bl	8003ed0 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80032bc:	0030      	movs	r0, r6
 80032be:	f000 fe18 	bl	8003ef2 <SD_IO_WriteByte>
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 80032c2:	002a      	movs	r2, r5
 80032c4:	2129      	movs	r1, #41	; 0x29
 80032c6:	0033      	movs	r3, r6
 80032c8:	0020      	movs	r0, r4
 80032ca:	9500      	str	r5, [sp, #0]
 80032cc:	f7ff ff2e 	bl	800312c <SD_SendCmd>
 80032d0:	7823      	ldrb	r3, [r4, #0]
      SD_IO_CSState(1);
 80032d2:	0038      	movs	r0, r7
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 80032d4:	9303      	str	r3, [sp, #12]
      SD_IO_CSState(1);
 80032d6:	f000 fdfb 	bl	8003ed0 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80032da:	0030      	movs	r0, r6
 80032dc:	f000 fe09 	bl	8003ef2 <SD_IO_WriteByte>
    while(response.r1 == SD_R1_IN_IDLE_STATE);
 80032e0:	9b03      	ldr	r3, [sp, #12]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d0df      	beq.n	80032a6 <BSP_SD_Init+0x76>
    flag_SDHC = 0;
 80032e6:	4b32      	ldr	r3, [pc, #200]	; (80033b0 <BSP_SD_Init+0x180>)
 80032e8:	801d      	strh	r5, [r3, #0]
 80032ea:	e7c4      	b.n	8003276 <BSP_SD_Init+0x46>
  else if(response.r1 == SD_R1_IN_IDLE_STATE)
 80032ec:	2d01      	cmp	r5, #1
 80032ee:	d1c1      	bne.n	8003274 <BSP_SD_Init+0x44>
      response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 80032f0:	27ff      	movs	r7, #255	; 0xff
 80032f2:	2600      	movs	r6, #0
 80032f4:	003b      	movs	r3, r7
 80032f6:	0032      	movs	r2, r6
 80032f8:	2137      	movs	r1, #55	; 0x37
 80032fa:	9600      	str	r6, [sp, #0]
 80032fc:	0020      	movs	r0, r4
 80032fe:	f7ff ff15 	bl	800312c <SD_SendCmd>
      SD_IO_CSState(1);
 8003302:	0028      	movs	r0, r5
 8003304:	f000 fde4 	bl	8003ed0 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003308:	0038      	movs	r0, r7
 800330a:	f000 fdf2 	bl	8003ef2 <SD_IO_WriteByte>
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x40000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 800330e:	2280      	movs	r2, #128	; 0x80
 8003310:	9600      	str	r6, [sp, #0]
 8003312:	003b      	movs	r3, r7
 8003314:	05d2      	lsls	r2, r2, #23
 8003316:	2129      	movs	r1, #41	; 0x29
 8003318:	0020      	movs	r0, r4
 800331a:	f7ff ff07 	bl	800312c <SD_SendCmd>
 800331e:	7826      	ldrb	r6, [r4, #0]
      SD_IO_CSState(1);
 8003320:	0028      	movs	r0, r5
 8003322:	f000 fdd5 	bl	8003ed0 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003326:	0038      	movs	r0, r7
 8003328:	f000 fde3 	bl	8003ef2 <SD_IO_WriteByte>
    while(response.r1 == SD_R1_IN_IDLE_STATE);
 800332c:	2e01      	cmp	r6, #1
 800332e:	d0e0      	beq.n	80032f2 <BSP_SD_Init+0xc2>
        response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8003330:	25ff      	movs	r5, #255	; 0xff
    if((response.r1 & SD_R1_ILLEGAL_COMMAND) == SD_R1_ILLEGAL_COMMAND)
 8003332:	0773      	lsls	r3, r6, #29
 8003334:	d417      	bmi.n	8003366 <BSP_SD_Init+0x136>
    response = SD_SendCmd(SD_CMD_READ_OCR, 0x00000000, 0xFF, SD_ANSWER_R3_EXPECTED);
 8003336:	2303      	movs	r3, #3
 8003338:	2200      	movs	r2, #0
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	213a      	movs	r1, #58	; 0x3a
 800333e:	33fc      	adds	r3, #252	; 0xfc
 8003340:	0020      	movs	r0, r4
 8003342:	f7ff fef3 	bl	800312c <SD_SendCmd>
 8003346:	7825      	ldrb	r5, [r4, #0]
    SD_IO_CSState(1);
 8003348:	2001      	movs	r0, #1
 800334a:	f000 fdc1 	bl	8003ed0 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 800334e:	20ff      	movs	r0, #255	; 0xff
 8003350:	f000 fdcf 	bl	8003ef2 <SD_IO_WriteByte>
    if(response.r1 != SD_R1_NO_ERROR)
 8003354:	2d00      	cmp	r5, #0
 8003356:	d000      	beq.n	800335a <BSP_SD_Init+0x12a>
 8003358:	e78c      	b.n	8003274 <BSP_SD_Init+0x44>
    flag_SDHC = (response.r2 & 0x40) >> 6;
 800335a:	7863      	ldrb	r3, [r4, #1]
 800335c:	4a14      	ldr	r2, [pc, #80]	; (80033b0 <BSP_SD_Init+0x180>)
 800335e:	065b      	lsls	r3, r3, #25
 8003360:	0fdb      	lsrs	r3, r3, #31
 8003362:	8013      	strh	r3, [r2, #0]
 8003364:	e787      	b.n	8003276 <BSP_SD_Init+0x46>
        response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8003366:	2600      	movs	r6, #0
 8003368:	002b      	movs	r3, r5
 800336a:	0032      	movs	r2, r6
 800336c:	2137      	movs	r1, #55	; 0x37
 800336e:	0020      	movs	r0, r4
 8003370:	9600      	str	r6, [sp, #0]
 8003372:	f7ff fedb 	bl	800312c <SD_SendCmd>
 8003376:	7827      	ldrb	r7, [r4, #0]
        SD_IO_CSState(1);
 8003378:	2001      	movs	r0, #1
 800337a:	f000 fda9 	bl	8003ed0 <SD_IO_CSState>
        SD_IO_WriteByte(SD_DUMMY_BYTE);
 800337e:	0028      	movs	r0, r5
 8003380:	f000 fdb7 	bl	8003ef2 <SD_IO_WriteByte>
        if(response.r1 != SD_R1_IN_IDLE_STATE)
 8003384:	2f01      	cmp	r7, #1
 8003386:	d000      	beq.n	800338a <BSP_SD_Init+0x15a>
 8003388:	e774      	b.n	8003274 <BSP_SD_Init+0x44>
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 800338a:	0032      	movs	r2, r6
 800338c:	9600      	str	r6, [sp, #0]
 800338e:	002b      	movs	r3, r5
 8003390:	2129      	movs	r1, #41	; 0x29
 8003392:	0020      	movs	r0, r4
 8003394:	f7ff feca 	bl	800312c <SD_SendCmd>
 8003398:	7826      	ldrb	r6, [r4, #0]
        SD_IO_CSState(1);
 800339a:	0038      	movs	r0, r7
 800339c:	f000 fd98 	bl	8003ed0 <SD_IO_CSState>
        SD_IO_WriteByte(SD_DUMMY_BYTE);
 80033a0:	0028      	movs	r0, r5
 80033a2:	f000 fda6 	bl	8003ef2 <SD_IO_WriteByte>
      while(response.r1 == SD_R1_IN_IDLE_STATE);
 80033a6:	2e01      	cmp	r6, #1
 80033a8:	d0dd      	beq.n	8003366 <BSP_SD_Init+0x136>
 80033aa:	e7c4      	b.n	8003336 <BSP_SD_Init+0x106>
 80033ac:	20001478 	.word	0x20001478
 80033b0:	2000147a 	.word	0x2000147a

080033b4 <BSP_SD_GetCardInfo>:
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 80033b4:	2200      	movs	r2, #0
{
 80033b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033b8:	b08b      	sub	sp, #44	; 0x2c
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 80033ba:	ad04      	add	r5, sp, #16
 80033bc:	23ff      	movs	r3, #255	; 0xff
{
 80033be:	0004      	movs	r4, r0
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 80033c0:	9200      	str	r2, [sp, #0]
 80033c2:	2109      	movs	r1, #9
 80033c4:	0028      	movs	r0, r5
 80033c6:	f7ff feb1 	bl	800312c <SD_SendCmd>
  if(response.r1 == SD_R1_NO_ERROR)
 80033ca:	782b      	ldrb	r3, [r5, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d030      	beq.n	8003432 <BSP_SD_GetCardInfo+0x7e>
  uint8_t retr = BSP_SD_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	9303      	str	r3, [sp, #12]
  SD_IO_CSState(1);
 80033d4:	2001      	movs	r0, #1
 80033d6:	f000 fd7b 	bl	8003ed0 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 80033da:	20ff      	movs	r0, #255	; 0xff
 80033dc:	f000 fd89 	bl	8003ef2 <SD_IO_WriteByte>
  response = SD_SendCmd(SD_CMD_SEND_CID, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 80033e0:	2200      	movs	r2, #0
 80033e2:	ad04      	add	r5, sp, #16
 80033e4:	23ff      	movs	r3, #255	; 0xff
 80033e6:	9200      	str	r2, [sp, #0]
 80033e8:	210a      	movs	r1, #10
 80033ea:	0028      	movs	r0, r5
 80033ec:	f7ff fe9e 	bl	800312c <SD_SendCmd>
  if(response.r1 == SD_R1_NO_ERROR)
 80033f0:	782b      	ldrb	r3, [r5, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d100      	bne.n	80033f8 <BSP_SD_GetCardInfo+0x44>
 80033f6:	e12b      	b.n	8003650 <BSP_SD_GetCardInfo+0x29c>
  uint8_t retr = BSP_SD_ERROR;
 80033f8:	2601      	movs	r6, #1
  SD_IO_CSState(1);
 80033fa:	2001      	movs	r0, #1
 80033fc:	f000 fd68 	bl	8003ed0 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003400:	20ff      	movs	r0, #255	; 0xff
 8003402:	f000 fd76 	bl	8003ef2 <SD_IO_WriteByte>
  status|= SD_GetCIDRegister(&(pCardInfo->Cid));
 8003406:	9b03      	ldr	r3, [sp, #12]
 8003408:	431e      	orrs	r6, r3
  if(flag_SDHC == 1 )
 800340a:	4bca      	ldr	r3, [pc, #808]	; (8003734 <BSP_SD_GetCardInfo+0x380>)
  status|= SD_GetCIDRegister(&(pCardInfo->Cid));
 800340c:	b2f0      	uxtb	r0, r6
  if(flag_SDHC == 1 )
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d000      	beq.n	8003416 <BSP_SD_GetCardInfo+0x62>
 8003414:	e17b      	b.n	800370e <BSP_SD_GetCardInfo+0x35a>
    pCardInfo->LogBlockSize = 512;
 8003416:	2380      	movs	r3, #128	; 0x80
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	63e3      	str	r3, [r4, #60]	; 0x3c
    pCardInfo->CardBlockSize = 512;
 800341c:	6363      	str	r3, [r4, #52]	; 0x34
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v2.DeviceSize + 1) * 1024 * pCardInfo->LogBlockSize;
 800341e:	68a3      	ldr	r3, [r4, #8]
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	0a9b      	lsrs	r3, r3, #10
 8003424:	3301      	adds	r3, #1
 8003426:	04db      	lsls	r3, r3, #19
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8003428:	6323      	str	r3, [r4, #48]	; 0x30
    pCardInfo->LogBlockNbr = (pCardInfo->CardCapacity) / (pCardInfo->LogBlockSize);
 800342a:	0a5b      	lsrs	r3, r3, #9
 800342c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800342e:	b00b      	add	sp, #44	; 0x2c
 8003430:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 8003432:	f7ff fee9 	bl	8003208 <SD_WaitData.constprop.0>
 8003436:	9003      	str	r0, [sp, #12]
 8003438:	2800      	cmp	r0, #0
 800343a:	d1c9      	bne.n	80033d0 <BSP_SD_GetCardInfo+0x1c>
 800343c:	0006      	movs	r6, r0
        CSD_Tab[counter] = SD_IO_WriteByte(SD_DUMMY_BYTE);
 800343e:	20ff      	movs	r0, #255	; 0xff
 8003440:	f000 fd57 	bl	8003ef2 <SD_IO_WriteByte>
 8003444:	ad06      	add	r5, sp, #24
 8003446:	5570      	strb	r0, [r6, r5]
 8003448:	3601      	adds	r6, #1
      for (counter = 0; counter < 16; counter++)
 800344a:	2e10      	cmp	r6, #16
 800344c:	d1f7      	bne.n	800343e <BSP_SD_GetCardInfo+0x8a>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 800344e:	20ff      	movs	r0, #255	; 0xff
 8003450:	f000 fd4f 	bl	8003ef2 <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003454:	20ff      	movs	r0, #255	; 0xff
 8003456:	f000 fd4c 	bl	8003ef2 <SD_IO_WriteByte>
      Csd->PartBlockRead   = (CSD_Tab[6] & 0x80) >> 7;
 800345a:	2001      	movs	r0, #1
      Csd->CSDStruct = (CSD_Tab[0] & 0xC0) >> 6;
 800345c:	782b      	ldrb	r3, [r5, #0]
      Csd->Reserved1 =  CSD_Tab[0] & 0x3F;
 800345e:	009a      	lsls	r2, r3, #2
 8003460:	099b      	lsrs	r3, r3, #6
 8003462:	4313      	orrs	r3, r2
 8003464:	7023      	strb	r3, [r4, #0]
      Csd->TAAC = CSD_Tab[1];
 8003466:	786b      	ldrb	r3, [r5, #1]
 8003468:	7063      	strb	r3, [r4, #1]
      Csd->NSAC = CSD_Tab[2];
 800346a:	78ab      	ldrb	r3, [r5, #2]
 800346c:	70a3      	strb	r3, [r4, #2]
      Csd->MaxBusClkFrec = CSD_Tab[3];
 800346e:	78eb      	ldrb	r3, [r5, #3]
 8003470:	70e3      	strb	r3, [r4, #3]
      Csd->CardComdClasses = (CSD_Tab[4] << 4) | ((CSD_Tab[5] & 0xF0) >> 4);
 8003472:	796a      	ldrb	r2, [r5, #5]
 8003474:	792b      	ldrb	r3, [r5, #4]
 8003476:	0911      	lsrs	r1, r2, #4
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	4319      	orrs	r1, r3
 800347c:	88a3      	ldrh	r3, [r4, #4]
      Csd->RdBlockLen = CSD_Tab[5] & 0x0F;
 800347e:	0112      	lsls	r2, r2, #4
      Csd->CardComdClasses = (CSD_Tab[4] << 4) | ((CSD_Tab[5] & 0xF0) >> 4);
 8003480:	0b1b      	lsrs	r3, r3, #12
 8003482:	031b      	lsls	r3, r3, #12
 8003484:	430b      	orrs	r3, r1
 8003486:	80a3      	strh	r3, [r4, #4]
      Csd->RdBlockLen = CSD_Tab[5] & 0x0F;
 8003488:	051b      	lsls	r3, r3, #20
 800348a:	0f1b      	lsrs	r3, r3, #28
 800348c:	4313      	orrs	r3, r2
 800348e:	7163      	strb	r3, [r4, #5]
      Csd->PartBlockRead   = (CSD_Tab[6] & 0x80) >> 7;
 8003490:	79ab      	ldrb	r3, [r5, #6]
 8003492:	79a1      	ldrb	r1, [r4, #6]
 8003494:	09da      	lsrs	r2, r3, #7
 8003496:	4381      	bics	r1, r0
      Csd->WrBlockMisalign = (CSD_Tab[6] & 0x40) >> 6;
 8003498:	119f      	asrs	r7, r3, #6
 800349a:	4007      	ands	r7, r0
 800349c:	430a      	orrs	r2, r1
 800349e:	2102      	movs	r1, #2
 80034a0:	4087      	lsls	r7, r0
 80034a2:	438a      	bics	r2, r1
      Csd->RdBlockMisalign = (CSD_Tab[6] & 0x20) >> 5;
 80034a4:	433a      	orrs	r2, r7
 80034a6:	2704      	movs	r7, #4
 80034a8:	1159      	asrs	r1, r3, #5
 80034aa:	4001      	ands	r1, r0
 80034ac:	0089      	lsls	r1, r1, #2
 80034ae:	43ba      	bics	r2, r7
      Csd->DSRImpl         = (CSD_Tab[6] & 0x10) >> 4;
 80034b0:	430a      	orrs	r2, r1
 80034b2:	2108      	movs	r1, #8
 80034b4:	111f      	asrs	r7, r3, #4
 80034b6:	4038      	ands	r0, r7
 80034b8:	438a      	bics	r2, r1
 80034ba:	00c0      	lsls	r0, r0, #3
 80034bc:	4302      	orrs	r2, r0
 80034be:	71a2      	strb	r2, [r4, #6]
      if(flag_SDHC == 0)
 80034c0:	4a9c      	ldr	r2, [pc, #624]	; (8003734 <BSP_SD_GetCardInfo+0x380>)
 80034c2:	8811      	ldrh	r1, [r2, #0]
 80034c4:	79ea      	ldrb	r2, [r5, #7]
 80034c6:	2900      	cmp	r1, #0
 80034c8:	d000      	beq.n	80034cc <BSP_SD_GetCardInfo+0x118>
 80034ca:	e0a7      	b.n	800361c <BSP_SD_GetCardInfo+0x268>
        Csd->version.v1.Reserved1 = ((CSD_Tab[6] & 0x0C) >> 2);
 80034cc:	1098      	asrs	r0, r3, #2
 80034ce:	3103      	adds	r1, #3
 80034d0:	4008      	ands	r0, r1
 80034d2:	7a21      	ldrb	r1, [r4, #8]
 80034d4:	3e0d      	subs	r6, #13
 80034d6:	43b1      	bics	r1, r6
 80034d8:	4301      	orrs	r1, r0
 80034da:	7221      	strb	r1, [r4, #8]
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 80034dc:	7a29      	ldrb	r1, [r5, #8]
                                    |  (CSD_Tab[7] << 2)
 80034de:	0090      	lsls	r0, r2, #2
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 80034e0:	098a      	lsrs	r2, r1, #6
 80034e2:	4302      	orrs	r2, r0
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10)
 80034e4:	029b      	lsls	r3, r3, #10
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 80034e6:	4313      	orrs	r3, r2
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10)
 80034e8:	4893      	ldr	r0, [pc, #588]	; (8003738 <BSP_SD_GetCardInfo+0x384>)
 80034ea:	8922      	ldrh	r2, [r4, #8]
 80034ec:	051b      	lsls	r3, r3, #20
 80034ee:	4002      	ands	r2, r0
 80034f0:	0c9b      	lsrs	r3, r3, #18
 80034f2:	4313      	orrs	r3, r2
        Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
 80034f4:	2207      	movs	r2, #7
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10)
 80034f6:	8123      	strh	r3, [r4, #8]
        Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
 80034f8:	7aa3      	ldrb	r3, [r4, #10]
 80034fa:	10c8      	asrs	r0, r1, #3
 80034fc:	4010      	ands	r0, r2
 80034fe:	4393      	bics	r3, r2
        Csd->version.v1.MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07);
 8003500:	4303      	orrs	r3, r0
 8003502:	4011      	ands	r1, r2
 8003504:	2038      	movs	r0, #56	; 0x38
 8003506:	40b1      	lsls	r1, r6
 8003508:	4383      	bics	r3, r0
 800350a:	430b      	orrs	r3, r1
 800350c:	72a3      	strb	r3, [r4, #10]
        Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0) >> 5;
 800350e:	7a6b      	ldrb	r3, [r5, #9]
 8003510:	7ae1      	ldrb	r1, [r4, #11]
 8003512:	095f      	lsrs	r7, r3, #5
        Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 8003514:	109e      	asrs	r6, r3, #2
        Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0) >> 5;
 8003516:	4391      	bics	r1, r2
        Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 8003518:	4016      	ands	r6, r2
 800351a:	4339      	orrs	r1, r7
 800351c:	00f6      	lsls	r6, r6, #3
 800351e:	4381      	bics	r1, r0
 8003520:	4331      	orrs	r1, r6
 8003522:	72e1      	strb	r1, [r4, #11]
        Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03) << 1)
 8003524:	2106      	movs	r1, #6
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	400b      	ands	r3, r1
                                       |((CSD_Tab[10] & 0x80) >> 7);
 800352a:	7aa9      	ldrb	r1, [r5, #10]
 800352c:	40d1      	lsrs	r1, r2
 800352e:	430b      	orrs	r3, r1
        Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03) << 1)
 8003530:	7b21      	ldrb	r1, [r4, #12]
 8003532:	4391      	bics	r1, r2
 8003534:	430b      	orrs	r3, r1
 8003536:	7323      	strb	r3, [r4, #12]
      Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40) >> 6;
 8003538:	2001      	movs	r0, #1
 800353a:	ae06      	add	r6, sp, #24
 800353c:	7ab3      	ldrb	r3, [r6, #10]
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 800353e:	277e      	movs	r7, #126	; 0x7e
      Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40) >> 6;
 8003540:	119d      	asrs	r5, r3, #6
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8003542:	4083      	lsls	r3, r0
      Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40) >> 6;
 8003544:	7c22      	ldrb	r2, [r4, #16]
 8003546:	4005      	ands	r5, r0
 8003548:	4382      	bics	r2, r0
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 800354a:	432a      	orrs	r2, r5
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 800354c:	257f      	movs	r5, #127	; 0x7f
                              |((CSD_Tab[11] & 0x80) >> 7);
 800354e:	7af1      	ldrb	r1, [r6, #11]
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8003550:	403b      	ands	r3, r7
                              |((CSD_Tab[11] & 0x80) >> 7);
 8003552:	09cf      	lsrs	r7, r1, #7
 8003554:	433b      	orrs	r3, r7
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8003556:	4083      	lsls	r3, r0
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 8003558:	4029      	ands	r1, r5
 800355a:	000f      	movs	r7, r1
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 800355c:	4002      	ands	r2, r0
 800355e:	4313      	orrs	r3, r2
 8003560:	7423      	strb	r3, [r4, #16]
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 8003562:	7c63      	ldrb	r3, [r4, #17]
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 8003564:	7b31      	ldrb	r1, [r6, #12]
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 8003566:	43ab      	bics	r3, r5
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 8003568:	09ca      	lsrs	r2, r1, #7
 800356a:	433b      	orrs	r3, r7
 800356c:	01d2      	lsls	r2, r2, #7
 800356e:	402b      	ands	r3, r5
 8003570:	4313      	orrs	r3, r2
      Csd->Reserved2         = (CSD_Tab[12] & 0x60) >> 5;
 8003572:	2203      	movs	r2, #3
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 8003574:	7463      	strb	r3, [r4, #17]
      Csd->Reserved2         = (CSD_Tab[12] & 0x60) >> 5;
 8003576:	114b      	asrs	r3, r1, #5
 8003578:	4013      	ands	r3, r2
 800357a:	469c      	mov	ip, r3
      Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1C) >> 2;
 800357c:	4667      	mov	r7, ip
      Csd->Reserved2         = (CSD_Tab[12] & 0x60) >> 5;
 800357e:	7ca3      	ldrb	r3, [r4, #18]
 8003580:	4393      	bics	r3, r2
      Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1C) >> 2;
 8003582:	433b      	orrs	r3, r7
 8003584:	271c      	movs	r7, #28
 8003586:	3219      	adds	r2, #25
 8003588:	43bb      	bics	r3, r7
 800358a:	400a      	ands	r2, r1
 800358c:	431a      	orrs	r2, r3
 800358e:	74a2      	strb	r2, [r4, #18]
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8003590:	220c      	movs	r2, #12
                              |((CSD_Tab[13] & 0xC0) >> 6);
 8003592:	7b73      	ldrb	r3, [r6, #13]
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8003594:	0089      	lsls	r1, r1, #2
 8003596:	4011      	ands	r1, r2
                              |((CSD_Tab[13] & 0xC0) >> 6);
 8003598:	099a      	lsrs	r2, r3, #6
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 800359a:	4311      	orrs	r1, r2
 800359c:	468c      	mov	ip, r1
 800359e:	220f      	movs	r2, #15
      Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20) >> 5;
 80035a0:	4667      	mov	r7, ip
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 80035a2:	7ce1      	ldrb	r1, [r4, #19]
 80035a4:	4391      	bics	r1, r2
      Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20) >> 5;
 80035a6:	4339      	orrs	r1, r7
 80035a8:	2710      	movs	r7, #16
 80035aa:	115a      	asrs	r2, r3, #5
 80035ac:	4002      	ands	r2, r0
 80035ae:	43b9      	bics	r1, r7
 80035b0:	0112      	lsls	r2, r2, #4
 80035b2:	430a      	orrs	r2, r1
 80035b4:	74e2      	strb	r2, [r4, #19]
      Csd->Reserved3         = (CSD_Tab[13] & 0x1F);
 80035b6:	221f      	movs	r2, #31
 80035b8:	7d21      	ldrb	r1, [r4, #20]
 80035ba:	4013      	ands	r3, r2
 80035bc:	4391      	bics	r1, r2
      Csd->FileFormatGrouop  = (CSD_Tab[14] & 0x80) >> 7;
 80035be:	430b      	orrs	r3, r1
 80035c0:	2120      	movs	r1, #32
 80035c2:	7bb2      	ldrb	r2, [r6, #14]
 80035c4:	438b      	bics	r3, r1
 80035c6:	09d7      	lsrs	r7, r2, #7
 80035c8:	017f      	lsls	r7, r7, #5
      Csd->CopyFlag          = (CSD_Tab[14] & 0x40) >> 6;
 80035ca:	433b      	orrs	r3, r7
 80035cc:	2740      	movs	r7, #64	; 0x40
 80035ce:	1191      	asrs	r1, r2, #6
 80035d0:	4001      	ands	r1, r0
 80035d2:	0189      	lsls	r1, r1, #6
 80035d4:	43bb      	bics	r3, r7
      Csd->PermWrProtect     = (CSD_Tab[14] & 0x20) >> 5;
 80035d6:	430b      	orrs	r3, r1
 80035d8:	1157      	asrs	r7, r2, #5
 80035da:	01ff      	lsls	r7, r7, #7
 80035dc:	402b      	ands	r3, r5
      Csd->TempWrProtect     = (CSD_Tab[14] & 0x10) >> 4;
 80035de:	7d61      	ldrb	r1, [r4, #21]
      Csd->PermWrProtect     = (CSD_Tab[14] & 0x20) >> 5;
 80035e0:	433b      	orrs	r3, r7
 80035e2:	7523      	strb	r3, [r4, #20]
      Csd->TempWrProtect     = (CSD_Tab[14] & 0x10) >> 4;
 80035e4:	4381      	bics	r1, r0
 80035e6:	1113      	asrs	r3, r2, #4
 80035e8:	4003      	ands	r3, r0
 80035ea:	0008      	movs	r0, r1
      Csd->FileFormat        = (CSD_Tab[14] & 0x0C) >> 2;
 80035ec:	2703      	movs	r7, #3
 80035ee:	4303      	orrs	r3, r0
 80035f0:	2006      	movs	r0, #6
 80035f2:	1091      	asrs	r1, r2, #2
 80035f4:	4039      	ands	r1, r7
 80035f6:	0049      	lsls	r1, r1, #1
 80035f8:	4383      	bics	r3, r0
      Csd->Reserved4         = (CSD_Tab[14] & 0x03);
 80035fa:	430b      	orrs	r3, r1
 80035fc:	403a      	ands	r2, r7
 80035fe:	2118      	movs	r1, #24
 8003600:	40ba      	lsls	r2, r7
 8003602:	438b      	bics	r3, r1
 8003604:	431a      	orrs	r2, r3
 8003606:	7562      	strb	r2, [r4, #21]
      Csd->crc               = (CSD_Tab[15] & 0xFE) >> 1;
 8003608:	7bf2      	ldrb	r2, [r6, #15]
 800360a:	7da3      	ldrb	r3, [r4, #22]
 800360c:	0851      	lsrs	r1, r2, #1
 800360e:	43ab      	bics	r3, r5
      Csd->Reserved5         = (CSD_Tab[15] & 0x01);
 8003610:	430b      	orrs	r3, r1
 8003612:	01d2      	lsls	r2, r2, #7
 8003614:	401d      	ands	r5, r3
 8003616:	4315      	orrs	r5, r2
 8003618:	75a5      	strb	r5, [r4, #22]
 800361a:	e6db      	b.n	80033d4 <BSP_SD_GetCardInfo+0x20>
        Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0F) << 2) | ((CSD_Tab[7] & 0xC0) >> 6);
 800361c:	213c      	movs	r1, #60	; 0x3c
 800361e:	203f      	movs	r0, #63	; 0x3f
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	400b      	ands	r3, r1
 8003624:	0991      	lsrs	r1, r2, #6
 8003626:	430b      	orrs	r3, r1
 8003628:	7a21      	ldrb	r1, [r4, #8]
        Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3F) << 16) | (CSD_Tab[8] << 8) | CSD_Tab[9];
 800362a:	0412      	lsls	r2, r2, #16
        Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0F) << 2) | ((CSD_Tab[7] & 0xC0) >> 6);
 800362c:	4381      	bics	r1, r0
 800362e:	430b      	orrs	r3, r1
 8003630:	7223      	strb	r3, [r4, #8]
        Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3F) << 16) | (CSD_Tab[8] << 8) | CSD_Tab[9];
 8003632:	892b      	ldrh	r3, [r5, #8]
 8003634:	68a1      	ldr	r1, [r4, #8]
 8003636:	ba5b      	rev16	r3, r3
 8003638:	b29b      	uxth	r3, r3
 800363a:	431a      	orrs	r2, r3
 800363c:	4b3f      	ldr	r3, [pc, #252]	; (800373c <BSP_SD_GetCardInfo+0x388>)
 800363e:	0292      	lsls	r2, r2, #10
 8003640:	0912      	lsrs	r2, r2, #4
 8003642:	400b      	ands	r3, r1
 8003644:	431a      	orrs	r2, r3
 8003646:	60a2      	str	r2, [r4, #8]
        Csd->version.v2.Reserved2 = ((CSD_Tab[10] & 0x80) >> 8);
 8003648:	0e12      	lsrs	r2, r2, #24
 800364a:	43b2      	bics	r2, r6
 800364c:	72e2      	strb	r2, [r4, #11]
 800364e:	e773      	b.n	8003538 <BSP_SD_GetCardInfo+0x184>
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 8003650:	f7ff fdda 	bl	8003208 <SD_WaitData.constprop.0>
 8003654:	1e06      	subs	r6, r0, #0
 8003656:	d000      	beq.n	800365a <BSP_SD_GetCardInfo+0x2a6>
 8003658:	e6ce      	b.n	80033f8 <BSP_SD_GetCardInfo+0x44>
 800365a:	0007      	movs	r7, r0
        CID_Tab[counter] = SD_IO_WriteByte(SD_DUMMY_BYTE);
 800365c:	20ff      	movs	r0, #255	; 0xff
 800365e:	f000 fc48 	bl	8003ef2 <SD_IO_WriteByte>
 8003662:	ad06      	add	r5, sp, #24
 8003664:	5578      	strb	r0, [r7, r5]
      for (counter = 0; counter < 16; counter++)
 8003666:	3701      	adds	r7, #1
 8003668:	2f10      	cmp	r7, #16
 800366a:	d1f7      	bne.n	800365c <BSP_SD_GetCardInfo+0x2a8>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 800366c:	20ff      	movs	r0, #255	; 0xff
 800366e:	f000 fc40 	bl	8003ef2 <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003672:	20ff      	movs	r0, #255	; 0xff
 8003674:	f000 fc3d 	bl	8003ef2 <SD_IO_WriteByte>
      Cid->ManufacturerID = CID_Tab[0];
 8003678:	782b      	ldrb	r3, [r5, #0]
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 800367a:	0021      	movs	r1, r4
      Cid->ManufacturerID = CID_Tab[0];
 800367c:	7623      	strb	r3, [r4, #24]
      Cid->OEM_AppliID = CID_Tab[1] << 8;
 800367e:	786b      	ldrb	r3, [r5, #1]
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 8003680:	3128      	adds	r1, #40	; 0x28
      Cid->OEM_AppliID = CID_Tab[1] << 8;
 8003682:	021b      	lsls	r3, r3, #8
 8003684:	8363      	strh	r3, [r4, #26]
      Cid->OEM_AppliID |= CID_Tab[2];
 8003686:	8b63      	ldrh	r3, [r4, #26]
 8003688:	78aa      	ldrb	r2, [r5, #2]
 800368a:	4313      	orrs	r3, r2
 800368c:	8363      	strh	r3, [r4, #26]
      Cid->ProdName1 = CID_Tab[3] << 24;
 800368e:	78eb      	ldrb	r3, [r5, #3]
 8003690:	061b      	lsls	r3, r3, #24
 8003692:	61e3      	str	r3, [r4, #28]
      Cid->ProdName1 |= CID_Tab[4] << 16;
 8003694:	792b      	ldrb	r3, [r5, #4]
 8003696:	69e2      	ldr	r2, [r4, #28]
 8003698:	041b      	lsls	r3, r3, #16
 800369a:	4313      	orrs	r3, r2
 800369c:	61e3      	str	r3, [r4, #28]
      Cid->ProdName1 |= CID_Tab[5] << 8;
 800369e:	796b      	ldrb	r3, [r5, #5]
 80036a0:	69e2      	ldr	r2, [r4, #28]
 80036a2:	021b      	lsls	r3, r3, #8
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61e3      	str	r3, [r4, #28]
      Cid->ProdName1 |= CID_Tab[6];
 80036a8:	69e2      	ldr	r2, [r4, #28]
 80036aa:	79ab      	ldrb	r3, [r5, #6]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61e3      	str	r3, [r4, #28]
      Cid->ProdName2 = CID_Tab[7];
 80036b0:	79ea      	ldrb	r2, [r5, #7]
 80036b2:	1c63      	adds	r3, r4, #1
 80036b4:	77da      	strb	r2, [r3, #31]
      Cid->ProdRev = CID_Tab[8];
 80036b6:	7a2a      	ldrb	r2, [r5, #8]
 80036b8:	1ca3      	adds	r3, r4, #2
 80036ba:	77da      	strb	r2, [r3, #31]
      Cid->ProdSN = CID_Tab[9] << 24;
 80036bc:	7a6b      	ldrb	r3, [r5, #9]
 80036be:	061b      	lsls	r3, r3, #24
 80036c0:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->ProdSN |= CID_Tab[10] << 16;
 80036c2:	7aab      	ldrb	r3, [r5, #10]
 80036c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80036c6:	041b      	lsls	r3, r3, #16
 80036c8:	4313      	orrs	r3, r2
 80036ca:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->ProdSN |= CID_Tab[11] << 8;
 80036cc:	7aeb      	ldrb	r3, [r5, #11]
 80036ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80036d0:	021b      	lsls	r3, r3, #8
 80036d2:	4313      	orrs	r3, r2
 80036d4:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->ProdSN |= CID_Tab[12];
 80036d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80036d8:	7b2b      	ldrb	r3, [r5, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 80036de:	7b6b      	ldrb	r3, [r5, #13]
 80036e0:	780a      	ldrb	r2, [r1, #0]
 80036e2:	0918      	lsrs	r0, r3, #4
 80036e4:	4302      	orrs	r2, r0
 80036e6:	700a      	strb	r2, [r1, #0]
      Cid->ManufactDate = (CID_Tab[13] & 0x0F) << 8;
 80036e8:	22f0      	movs	r2, #240	; 0xf0
 80036ea:	021b      	lsls	r3, r3, #8
 80036ec:	0112      	lsls	r2, r2, #4
 80036ee:	4013      	ands	r3, r2
 80036f0:	8563      	strh	r3, [r4, #42]	; 0x2a
      Cid->ManufactDate |= CID_Tab[14];
 80036f2:	7baa      	ldrb	r2, [r5, #14]
 80036f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80036f6:	4313      	orrs	r3, r2
      Cid->CID_CRC = (CID_Tab[15] & 0xFE) >> 1;
 80036f8:	0022      	movs	r2, r4
      Cid->ManufactDate |= CID_Tab[14];
 80036fa:	8563      	strh	r3, [r4, #42]	; 0x2a
      Cid->CID_CRC = (CID_Tab[15] & 0xFE) >> 1;
 80036fc:	7beb      	ldrb	r3, [r5, #15]
 80036fe:	322c      	adds	r2, #44	; 0x2c
 8003700:	085b      	lsrs	r3, r3, #1
 8003702:	7013      	strb	r3, [r2, #0]
      Cid->Reserved2 = 1;
 8003704:	0023      	movs	r3, r4
 8003706:	2201      	movs	r2, #1
 8003708:	332d      	adds	r3, #45	; 0x2d
 800370a:	701a      	strb	r2, [r3, #0]
 800370c:	e675      	b.n	80033fa <BSP_SD_GetCardInfo+0x46>
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 800370e:	8923      	ldrh	r3, [r4, #8]
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 8003710:	7b22      	ldrb	r2, [r4, #12]
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 8003712:	049b      	lsls	r3, r3, #18
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 8003714:	0752      	lsls	r2, r2, #29
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 8003716:	0d1b      	lsrs	r3, r3, #20
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 8003718:	0f52      	lsrs	r2, r2, #29
 800371a:	3202      	adds	r2, #2
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 800371c:	3301      	adds	r3, #1
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 800371e:	4093      	lsls	r3, r2
    pCardInfo->LogBlockSize = 512;
 8003720:	2280      	movs	r2, #128	; 0x80
    pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 8003722:	2101      	movs	r1, #1
    pCardInfo->LogBlockSize = 512;
 8003724:	0092      	lsls	r2, r2, #2
 8003726:	63e2      	str	r2, [r4, #60]	; 0x3c
    pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 8003728:	7962      	ldrb	r2, [r4, #5]
 800372a:	0912      	lsrs	r2, r2, #4
 800372c:	4091      	lsls	r1, r2
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 800372e:	4093      	lsls	r3, r2
    pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 8003730:	6361      	str	r1, [r4, #52]	; 0x34
 8003732:	e679      	b.n	8003428 <BSP_SD_GetCardInfo+0x74>
 8003734:	2000147a 	.word	0x2000147a
 8003738:	ffffc003 	.word	0xffffc003
 800373c:	f000003f 	.word	0xf000003f

08003740 <BSP_SD_ReadBlocks>:
{
 8003740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003742:	b087      	sub	sp, #28
 8003744:	9203      	str	r2, [sp, #12]
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 8003746:	2300      	movs	r3, #0
 8003748:	2280      	movs	r2, #128	; 0x80
 800374a:	ad04      	add	r5, sp, #16
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	0092      	lsls	r2, r2, #2
 8003750:	33ff      	adds	r3, #255	; 0xff
{
 8003752:	0007      	movs	r7, r0
 8003754:	000c      	movs	r4, r1
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 8003756:	0028      	movs	r0, r5
 8003758:	2110      	movs	r1, #16
 800375a:	f7ff fce7 	bl	800312c <SD_SendCmd>
 800375e:	782e      	ldrb	r6, [r5, #0]
  SD_IO_CSState(1);
 8003760:	2001      	movs	r0, #1
 8003762:	f000 fbb5 	bl	8003ed0 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003766:	20ff      	movs	r0, #255	; 0xff
 8003768:	f000 fbc3 	bl	8003ef2 <SD_IO_WriteByte>
  if ( response.r1 != SD_R1_NO_ERROR)
 800376c:	2e00      	cmp	r6, #0
 800376e:	d002      	beq.n	8003776 <BSP_SD_ReadBlocks+0x36>
  uint8_t *ptr = NULL;
 8003770:	2500      	movs	r5, #0
  uint8_t retr = BSP_SD_ERROR;
 8003772:	2601      	movs	r6, #1
 8003774:	e014      	b.n	80037a0 <BSP_SD_ReadBlocks+0x60>
  ptr = malloc(sizeof(uint8_t)*BlockSize);
 8003776:	2080      	movs	r0, #128	; 0x80
 8003778:	0080      	lsls	r0, r0, #2
 800377a:	f00b fecb 	bl	800f514 <malloc>
 800377e:	1e05      	subs	r5, r0, #0
  if( ptr == NULL )
 8003780:	d0f6      	beq.n	8003770 <BSP_SD_ReadBlocks+0x30>
  memset(ptr, SD_DUMMY_BYTE, sizeof(uint8_t)*BlockSize);
 8003782:	2280      	movs	r2, #128	; 0x80
 8003784:	21ff      	movs	r1, #255	; 0xff
 8003786:	0092      	lsls	r2, r2, #2
 8003788:	f00c f8e5 	bl	800f956 <memset>
  addr = (ReadAddr * ((flag_SDHC == 1) ? 1 : BlockSize));
 800378c:	4b24      	ldr	r3, [pc, #144]	; (8003820 <BSP_SD_ReadBlocks+0xe0>)
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d001      	beq.n	8003798 <BSP_SD_ReadBlocks+0x58>
 8003794:	2380      	movs	r3, #128	; 0x80
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	435c      	muls	r4, r3
  while (NumOfBlocks--)
 800379a:	9b03      	ldr	r3, [sp, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10d      	bne.n	80037bc <BSP_SD_ReadBlocks+0x7c>
  SD_IO_CSState(1);
 80037a0:	2001      	movs	r0, #1
 80037a2:	f000 fb95 	bl	8003ed0 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 80037a6:	20ff      	movs	r0, #255	; 0xff
 80037a8:	f000 fba3 	bl	8003ef2 <SD_IO_WriteByte>
  if(ptr != NULL) free(ptr);
 80037ac:	2d00      	cmp	r5, #0
 80037ae:	d002      	beq.n	80037b6 <BSP_SD_ReadBlocks+0x76>
 80037b0:	0028      	movs	r0, r5
 80037b2:	f00b feb9 	bl	800f528 <free>
}
 80037b6:	0030      	movs	r0, r6
 80037b8:	b007      	add	sp, #28
 80037ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    response = SD_SendCmd(SD_CMD_READ_SINGLE_BLOCK, addr, 0xFF, SD_ANSWER_R1_EXPECTED);
 80037bc:	2300      	movs	r3, #0
 80037be:	0022      	movs	r2, r4
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	2111      	movs	r1, #17
 80037c4:	33ff      	adds	r3, #255	; 0xff
 80037c6:	a804      	add	r0, sp, #16
 80037c8:	f7ff fcb0 	bl	800312c <SD_SendCmd>
    if ( response.r1 != SD_R1_NO_ERROR)
 80037cc:	ab02      	add	r3, sp, #8
 80037ce:	7a1b      	ldrb	r3, [r3, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1ce      	bne.n	8003772 <BSP_SD_ReadBlocks+0x32>
    if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 80037d4:	f7ff fd18 	bl	8003208 <SD_WaitData.constprop.0>
 80037d8:	2800      	cmp	r0, #0
 80037da:	d1ca      	bne.n	8003772 <BSP_SD_ReadBlocks+0x32>
      SD_IO_WriteReadData(ptr, (uint8_t*)pData + offset, BlockSize);
 80037dc:	2280      	movs	r2, #128	; 0x80
 80037de:	0039      	movs	r1, r7
 80037e0:	0092      	lsls	r2, r2, #2
 80037e2:	0028      	movs	r0, r5
 80037e4:	f000 fb81 	bl	8003eea <SD_IO_WriteReadData>
      addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 80037e8:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <BSP_SD_ReadBlocks+0xe0>)
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d113      	bne.n	8003818 <BSP_SD_ReadBlocks+0xd8>
 80037f0:	3401      	adds	r4, #1
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80037f2:	20ff      	movs	r0, #255	; 0xff
 80037f4:	f000 fb7d 	bl	8003ef2 <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80037f8:	20ff      	movs	r0, #255	; 0xff
 80037fa:	f000 fb7a 	bl	8003ef2 <SD_IO_WriteByte>
    SD_IO_CSState(1);
 80037fe:	2001      	movs	r0, #1
 8003800:	f000 fb66 	bl	8003ed0 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003804:	20ff      	movs	r0, #255	; 0xff
 8003806:	f000 fb74 	bl	8003ef2 <SD_IO_WriteByte>
 800380a:	9b03      	ldr	r3, [sp, #12]
 800380c:	3b01      	subs	r3, #1
 800380e:	9303      	str	r3, [sp, #12]
 8003810:	2380      	movs	r3, #128	; 0x80
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	18ff      	adds	r7, r7, r3
 8003816:	e7c0      	b.n	800379a <BSP_SD_ReadBlocks+0x5a>
      addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 8003818:	2380      	movs	r3, #128	; 0x80
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	18e4      	adds	r4, r4, r3
 800381e:	e7e8      	b.n	80037f2 <BSP_SD_ReadBlocks+0xb2>
 8003820:	2000147a 	.word	0x2000147a

08003824 <BSP_SD_WriteBlocks>:
{
 8003824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003826:	b087      	sub	sp, #28
 8003828:	9203      	str	r2, [sp, #12]
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 800382a:	2300      	movs	r3, #0
 800382c:	2280      	movs	r2, #128	; 0x80
 800382e:	ad04      	add	r5, sp, #16
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	0092      	lsls	r2, r2, #2
 8003834:	33ff      	adds	r3, #255	; 0xff
{
 8003836:	0007      	movs	r7, r0
 8003838:	000c      	movs	r4, r1
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 800383a:	0028      	movs	r0, r5
 800383c:	2110      	movs	r1, #16
 800383e:	f7ff fc75 	bl	800312c <SD_SendCmd>
 8003842:	782d      	ldrb	r5, [r5, #0]
  SD_IO_CSState(1);
 8003844:	2001      	movs	r0, #1
 8003846:	f000 fb43 	bl	8003ed0 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 800384a:	20ff      	movs	r0, #255	; 0xff
 800384c:	f000 fb51 	bl	8003ef2 <SD_IO_WriteByte>
  if ( response.r1 != SD_R1_NO_ERROR)
 8003850:	2d00      	cmp	r5, #0
 8003852:	d009      	beq.n	8003868 <BSP_SD_WriteBlocks+0x44>
  uint8_t retr = BSP_SD_ERROR;
 8003854:	2501      	movs	r5, #1
  SD_IO_CSState(1);
 8003856:	2001      	movs	r0, #1
 8003858:	f000 fb3a 	bl	8003ed0 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 800385c:	20ff      	movs	r0, #255	; 0xff
 800385e:	f000 fb48 	bl	8003ef2 <SD_IO_WriteByte>
}
 8003862:	0028      	movs	r0, r5
 8003864:	b007      	add	sp, #28
 8003866:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ptr = malloc(sizeof(uint8_t)*BlockSize);
 8003868:	2080      	movs	r0, #128	; 0x80
 800386a:	0080      	lsls	r0, r0, #2
 800386c:	f00b fe52 	bl	800f514 <malloc>
 8003870:	1e06      	subs	r6, r0, #0
  if (ptr == NULL)
 8003872:	d0ef      	beq.n	8003854 <BSP_SD_WriteBlocks+0x30>
  addr = (WriteAddr * ((flag_SDHC == 1) ? 1 : BlockSize));
 8003874:	4b30      	ldr	r3, [pc, #192]	; (8003938 <BSP_SD_WriteBlocks+0x114>)
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d001      	beq.n	8003880 <BSP_SD_WriteBlocks+0x5c>
 800387c:	2380      	movs	r3, #128	; 0x80
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	435c      	muls	r4, r3
 8003882:	9702      	str	r7, [sp, #8]
  while (NumOfBlocks--)
 8003884:	9b03      	ldr	r3, [sp, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d103      	bne.n	8003892 <BSP_SD_WriteBlocks+0x6e>
  if(ptr != NULL) free(ptr);
 800388a:	0030      	movs	r0, r6
 800388c:	f00b fe4c 	bl	800f528 <free>
 8003890:	e7e1      	b.n	8003856 <BSP_SD_WriteBlocks+0x32>
    response = SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK, addr, 0xFF, SD_ANSWER_R1_EXPECTED);
 8003892:	2300      	movs	r3, #0
 8003894:	af04      	add	r7, sp, #16
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	0022      	movs	r2, r4
 800389a:	33ff      	adds	r3, #255	; 0xff
 800389c:	2118      	movs	r1, #24
 800389e:	0038      	movs	r0, r7
 80038a0:	f7ff fc44 	bl	800312c <SD_SendCmd>
    if (response.r1 != SD_R1_NO_ERROR)
 80038a4:	783b      	ldrb	r3, [r7, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d144      	bne.n	8003934 <BSP_SD_WriteBlocks+0x110>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80038aa:	20ff      	movs	r0, #255	; 0xff
 80038ac:	f000 fb21 	bl	8003ef2 <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80038b0:	20ff      	movs	r0, #255	; 0xff
 80038b2:	f000 fb1e 	bl	8003ef2 <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_TOKEN_START_DATA_SINGLE_BLOCK_WRITE);
 80038b6:	20fe      	movs	r0, #254	; 0xfe
 80038b8:	f000 fb1b 	bl	8003ef2 <SD_IO_WriteByte>
    SD_IO_WriteReadData((uint8_t*)pData + offset, ptr, BlockSize);
 80038bc:	2280      	movs	r2, #128	; 0x80
 80038be:	0031      	movs	r1, r6
 80038c0:	0092      	lsls	r2, r2, #2
 80038c2:	9802      	ldr	r0, [sp, #8]
 80038c4:	f000 fb11 	bl	8003eea <SD_IO_WriteReadData>
    addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 80038c8:	4b1b      	ldr	r3, [pc, #108]	; (8003938 <BSP_SD_WriteBlocks+0x114>)
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d12d      	bne.n	800392c <BSP_SD_WriteBlocks+0x108>
 80038d0:	3401      	adds	r4, #1
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80038d2:	20ff      	movs	r0, #255	; 0xff
 80038d4:	f000 fb0d 	bl	8003ef2 <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80038d8:	20ff      	movs	r0, #255	; 0xff
 80038da:	f000 fb0a 	bl	8003ef2 <SD_IO_WriteByte>
  dataresponse = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80038de:	20ff      	movs	r0, #255	; 0xff
 80038e0:	f000 fb07 	bl	8003ef2 <SD_IO_WriteByte>
 80038e4:	0007      	movs	r7, r0
  SD_IO_WriteByte(SD_DUMMY_BYTE); /* read the busy response byte*/
 80038e6:	20ff      	movs	r0, #255	; 0xff
 80038e8:	f000 fb03 	bl	8003ef2 <SD_IO_WriteByte>
  switch (dataresponse & 0x1F)
 80038ec:	231f      	movs	r3, #31
 80038ee:	401f      	ands	r7, r3
 80038f0:	2f05      	cmp	r7, #5
 80038f2:	d11f      	bne.n	8003934 <BSP_SD_WriteBlocks+0x110>
    SD_IO_CSState(1);
 80038f4:	2001      	movs	r0, #1
 80038f6:	f000 faeb 	bl	8003ed0 <SD_IO_CSState>
    SD_IO_CSState(0);
 80038fa:	2000      	movs	r0, #0
 80038fc:	f000 fae8 	bl	8003ed0 <SD_IO_CSState>
    while (SD_IO_WriteByte(SD_DUMMY_BYTE) != 0xFF);
 8003900:	20ff      	movs	r0, #255	; 0xff
 8003902:	f000 faf6 	bl	8003ef2 <SD_IO_WriteByte>
 8003906:	0007      	movs	r7, r0
 8003908:	28ff      	cmp	r0, #255	; 0xff
 800390a:	d1f9      	bne.n	8003900 <BSP_SD_WriteBlocks+0xdc>
    SD_IO_CSState(1);
 800390c:	2001      	movs	r0, #1
 800390e:	f000 fadf 	bl	8003ed0 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003912:	0038      	movs	r0, r7
 8003914:	f000 faed 	bl	8003ef2 <SD_IO_WriteByte>
 8003918:	2280      	movs	r2, #128	; 0x80
 800391a:	0092      	lsls	r2, r2, #2
 800391c:	4694      	mov	ip, r2
 800391e:	9b03      	ldr	r3, [sp, #12]
 8003920:	3b01      	subs	r3, #1
 8003922:	9303      	str	r3, [sp, #12]
 8003924:	9b02      	ldr	r3, [sp, #8]
 8003926:	4463      	add	r3, ip
 8003928:	9302      	str	r3, [sp, #8]
 800392a:	e7ab      	b.n	8003884 <BSP_SD_WriteBlocks+0x60>
    addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 800392c:	2380      	movs	r3, #128	; 0x80
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	18e4      	adds	r4, r4, r3
 8003932:	e7ce      	b.n	80038d2 <BSP_SD_WriteBlocks+0xae>
  uint8_t retr = BSP_SD_ERROR;
 8003934:	2501      	movs	r5, #1
 8003936:	e7a8      	b.n	800388a <BSP_SD_WriteBlocks+0x66>
 8003938:	2000147a 	.word	0x2000147a

0800393c <BSP_SD_GetCardState>:
{
 800393c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  retr = SD_SendCmd(SD_CMD_SEND_STATUS, 0, 0xFF, SD_ANSWER_R2_EXPECTED);
 800393e:	2302      	movs	r3, #2
 8003940:	ac02      	add	r4, sp, #8
 8003942:	2200      	movs	r2, #0
 8003944:	210d      	movs	r1, #13
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	0020      	movs	r0, r4
 800394a:	33fd      	adds	r3, #253	; 0xfd
 800394c:	f7ff fbee 	bl	800312c <SD_SendCmd>
  SD_IO_CSState(1);
 8003950:	2001      	movs	r0, #1
 8003952:	f000 fabd 	bl	8003ed0 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003956:	20ff      	movs	r0, #255	; 0xff
 8003958:	f000 facb 	bl	8003ef2 <SD_IO_WriteByte>
  if(( retr.r1 == SD_R1_NO_ERROR) && ( retr.r2 == SD_R2_NO_ERROR))
 800395c:	7823      	ldrb	r3, [r4, #0]
 800395e:	2001      	movs	r0, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d103      	bne.n	800396c <BSP_SD_GetCardState+0x30>
 8003964:	7860      	ldrb	r0, [r4, #1]
 8003966:	1e43      	subs	r3, r0, #1
 8003968:	4198      	sbcs	r0, r3
 800396a:	b2c0      	uxtb	r0, r0
}
 800396c:	b004      	add	sp, #16
 800396e:	bd10      	pop	{r4, pc}

08003970 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003970:	2001      	movs	r0, #1
 8003972:	4b0a      	ldr	r3, [pc, #40]	; (800399c <HAL_MspInit+0x2c>)
{
 8003974:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003976:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003978:	4301      	orrs	r1, r0
 800397a:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 800397c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800397e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8003980:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003982:	4002      	ands	r2, r0
 8003984:	9200      	str	r2, [sp, #0]
 8003986:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003988:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800398a:	430a      	orrs	r2, r1
 800398c:	63da      	str	r2, [r3, #60]	; 0x3c
 800398e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003990:	400b      	ands	r3, r1
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003996:	b002      	add	sp, #8
 8003998:	4770      	bx	lr
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	40021000 	.word	0x40021000

080039a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80039a0:	b510      	push	{r4, lr}
 80039a2:	0004      	movs	r4, r0
 80039a4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a6:	2214      	movs	r2, #20
 80039a8:	2100      	movs	r1, #0
 80039aa:	a803      	add	r0, sp, #12
 80039ac:	f00b ffd3 	bl	800f956 <memset>
  if(hadc->Instance==ADC1)
 80039b0:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <HAL_ADC_MspInit+0x50>)
 80039b2:	6822      	ldr	r2, [r4, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d119      	bne.n	80039ec <HAL_ADC_MspInit+0x4c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80039b8:	2080      	movs	r0, #128	; 0x80
 80039ba:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <HAL_ADC_MspInit+0x54>)
 80039bc:	0340      	lsls	r0, r0, #13
 80039be:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80039c0:	4301      	orrs	r1, r0
 80039c2:	6419      	str	r1, [r3, #64]	; 0x40
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c4:	2101      	movs	r1, #1
    __HAL_RCC_ADC_CLK_ENABLE();
 80039c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039c8:	4002      	ands	r2, r0
 80039ca:	9201      	str	r2, [sp, #4]
 80039cc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d0:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039d2:	430a      	orrs	r2, r1
 80039d4:	635a      	str	r2, [r3, #52]	; 0x34
 80039d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d8:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039da:	400b      	ands	r3, r1
 80039dc:	9302      	str	r3, [sp, #8]
 80039de:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80039e0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80039e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039e6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e8:	f000 fdc6 	bl	8004578 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80039ec:	b008      	add	sp, #32
 80039ee:	bd10      	pop	{r4, pc}
 80039f0:	40012400 	.word	0x40012400
 80039f4:	40021000 	.word	0x40021000

080039f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80039f8:	b510      	push	{r4, lr}
 80039fa:	0004      	movs	r4, r0
 80039fc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039fe:	2214      	movs	r2, #20
 8003a00:	2100      	movs	r1, #0
 8003a02:	a803      	add	r0, sp, #12
 8003a04:	f00b ffa7 	bl	800f956 <memset>
  if(hi2c->Instance==I2C1)
 8003a08:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <HAL_I2C_MspInit+0x5c>)
 8003a0a:	6822      	ldr	r2, [r4, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d11e      	bne.n	8003a4e <HAL_I2C_MspInit+0x56>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a10:	2102      	movs	r1, #2
 8003a12:	4c11      	ldr	r4, [pc, #68]	; (8003a58 <HAL_I2C_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a14:	4811      	ldr	r0, [pc, #68]	; (8003a5c <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a16:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	6362      	str	r2, [r4, #52]	; 0x34
 8003a1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a1e:	400b      	ands	r3, r1
 8003a20:	9301      	str	r3, [sp, #4]
 8003a22:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003a24:	2390      	movs	r3, #144	; 0x90
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a2a:	2312      	movs	r3, #18
 8003a2c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a2e:	3b11      	subs	r3, #17
 8003a30:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a32:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003a34:	3305      	adds	r3, #5
 8003a36:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a38:	f000 fd9e 	bl	8004578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a3c:	2180      	movs	r1, #128	; 0x80
 8003a3e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003a40:	0389      	lsls	r1, r1, #14
 8003a42:	430a      	orrs	r2, r1
 8003a44:	63e2      	str	r2, [r4, #60]	; 0x3c
 8003a46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a48:	400b      	ands	r3, r1
 8003a4a:	9302      	str	r3, [sp, #8]
 8003a4c:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003a4e:	b008      	add	sp, #32
 8003a50:	bd10      	pop	{r4, pc}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	40005400 	.word	0x40005400
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	50000400 	.word	0x50000400

08003a60 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8003a60:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <HAL_RTC_MspInit+0x2c>)
 8003a62:	6802      	ldr	r2, [r0, #0]
{
 8003a64:	b082      	sub	sp, #8
  if(hrtc->Instance==RTC)
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d10e      	bne.n	8003a88 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003a6a:	2280      	movs	r2, #128	; 0x80
 8003a6c:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <HAL_RTC_MspInit+0x30>)
 8003a6e:	0212      	lsls	r2, r2, #8
 8003a70:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003a72:	430a      	orrs	r2, r1
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003a74:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_RTC_ENABLE();
 8003a76:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003a78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a7a:	00c9      	lsls	r1, r1, #3
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a82:	400b      	ands	r3, r1
 8003a84:	9301      	str	r3, [sp, #4]
 8003a86:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003a88:	b002      	add	sp, #8
 8003a8a:	4770      	bx	lr
 8003a8c:	40002800 	.word	0x40002800
 8003a90:	40021000 	.word	0x40021000

08003a94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a94:	b510      	push	{r4, lr}
 8003a96:	0004      	movs	r4, r0
 8003a98:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a9a:	2214      	movs	r2, #20
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	a805      	add	r0, sp, #20
 8003aa0:	f00b ff59 	bl	800f956 <memset>
  if(hspi->Instance==SPI1)
 8003aa4:	6823      	ldr	r3, [r4, #0]
 8003aa6:	4a29      	ldr	r2, [pc, #164]	; (8003b4c <HAL_SPI_MspInit+0xb8>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d132      	bne.n	8003b12 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003aac:	2080      	movs	r0, #128	; 0x80
 8003aae:	4b28      	ldr	r3, [pc, #160]	; (8003b50 <HAL_SPI_MspInit+0xbc>)
 8003ab0:	0140      	lsls	r0, r0, #5
 8003ab2:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PD8     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab4:	2402      	movs	r4, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ab6:	4301      	orrs	r1, r0
 8003ab8:	6419      	str	r1, [r3, #64]	; 0x40
 8003aba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003abc:	4002      	ands	r2, r0
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003abe:	2008      	movs	r0, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ac0:	9200      	str	r2, [sp, #0]
 8003ac2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ac4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ac6:	4301      	orrs	r1, r0
 8003ac8:	6359      	str	r1, [r3, #52]	; 0x34
 8003aca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003acc:	4002      	ands	r2, r0
 8003ace:	9201      	str	r2, [sp, #4]
 8003ad0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ad6:	481f      	ldr	r0, [pc, #124]	; (8003b54 <HAL_SPI_MspInit+0xc0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad8:	4311      	orrs	r1, r2
 8003ada:	6359      	str	r1, [r3, #52]	; 0x34
 8003adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ade:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	9302      	str	r3, [sp, #8]
 8003ae4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003ae6:	2380      	movs	r3, #128	; 0x80
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aec:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8003aee:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003af0:	f000 fd42 	bl	8004578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003af4:	23c0      	movs	r3, #192	; 0xc0
 8003af6:	015b      	lsls	r3, r3, #5
 8003af8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003afa:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afc:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afe:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b00:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b02:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003b04:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b06:	a905      	add	r1, sp, #20
 8003b08:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b0a:	f000 fd35 	bl	8004578 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003b0e:	b00a      	add	sp, #40	; 0x28
 8003b10:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8003b12:	4a11      	ldr	r2, [pc, #68]	; (8003b58 <HAL_SPI_MspInit+0xc4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d1fa      	bne.n	8003b0e <HAL_SPI_MspInit+0x7a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003b18:	2080      	movs	r0, #128	; 0x80
 8003b1a:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <HAL_SPI_MspInit+0xbc>)
 8003b1c:	01c0      	lsls	r0, r0, #7
 8003b1e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003b20:	4301      	orrs	r1, r0
 8003b22:	63d9      	str	r1, [r3, #60]	; 0x3c
 8003b24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b26:	4002      	ands	r2, r0
 8003b28:	9203      	str	r2, [sp, #12]
 8003b2a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b30:	480a      	ldr	r0, [pc, #40]	; (8003b5c <HAL_SPI_MspInit+0xc8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b32:	4311      	orrs	r1, r2
 8003b34:	6359      	str	r1, [r3, #52]	; 0x34
 8003b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b38:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	9304      	str	r3, [sp, #16]
 8003b3e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003b40:	23e0      	movs	r3, #224	; 0xe0
 8003b42:	021b      	lsls	r3, r3, #8
 8003b44:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b46:	9206      	str	r2, [sp, #24]
 8003b48:	e7df      	b.n	8003b0a <HAL_SPI_MspInit+0x76>
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	40013000 	.word	0x40013000
 8003b50:	40021000 	.word	0x40021000
 8003b54:	50000c00 	.word	0x50000c00
 8003b58:	40003800 	.word	0x40003800
 8003b5c:	50000400 	.word	0x50000400

08003b60 <HAL_SPI_MspDeInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
  if(hspi->Instance==SPI1)
 8003b60:	6803      	ldr	r3, [r0, #0]
 8003b62:	4a10      	ldr	r2, [pc, #64]	; (8003ba4 <HAL_SPI_MspDeInit+0x44>)
{
 8003b64:	b510      	push	{r4, lr}
  if(hspi->Instance==SPI1)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d110      	bne.n	8003b8c <HAL_SPI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003b6a:	4a0f      	ldr	r2, [pc, #60]	; (8003ba8 <HAL_SPI_MspDeInit+0x48>)
 8003b6c:	490f      	ldr	r1, [pc, #60]	; (8003bac <HAL_SPI_MspDeInit+0x4c>)
 8003b6e:	6c13      	ldr	r3, [r2, #64]	; 0x40
    /**SPI1 GPIO Configuration    
    PD8     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI 
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8);
 8003b70:	480f      	ldr	r0, [pc, #60]	; (8003bb0 <HAL_SPI_MspDeInit+0x50>)
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003b72:	400b      	ands	r3, r1
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8);
 8003b74:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003b76:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8);
 8003b78:	0049      	lsls	r1, r1, #1
 8003b7a:	f000 fda5 	bl	80046c8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8003b7e:	21c0      	movs	r1, #192	; 0xc0
 8003b80:	20a0      	movs	r0, #160	; 0xa0
 8003b82:	0149      	lsls	r1, r1, #5
 8003b84:	05c0      	lsls	r0, r0, #23
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8003b86:	f000 fd9f 	bl	80046c8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8003b8a:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8003b8c:	4a09      	ldr	r2, [pc, #36]	; (8003bb4 <HAL_SPI_MspDeInit+0x54>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d1fb      	bne.n	8003b8a <HAL_SPI_MspDeInit+0x2a>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8003b92:	4a05      	ldr	r2, [pc, #20]	; (8003ba8 <HAL_SPI_MspDeInit+0x48>)
 8003b94:	4908      	ldr	r1, [pc, #32]	; (8003bb8 <HAL_SPI_MspDeInit+0x58>)
 8003b96:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8003b98:	4808      	ldr	r0, [pc, #32]	; (8003bbc <HAL_SPI_MspDeInit+0x5c>)
    __HAL_RCC_SPI2_CLK_DISABLE();
 8003b9a:	400b      	ands	r3, r1
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8003b9c:	21e0      	movs	r1, #224	; 0xe0
    __HAL_RCC_SPI2_CLK_DISABLE();
 8003b9e:	63d3      	str	r3, [r2, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8003ba0:	0209      	lsls	r1, r1, #8
 8003ba2:	e7f0      	b.n	8003b86 <HAL_SPI_MspDeInit+0x26>
 8003ba4:	40013000 	.word	0x40013000
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	ffffefff 	.word	0xffffefff
 8003bb0:	50000c00 	.word	0x50000c00
 8003bb4:	40003800 	.word	0x40003800
 8003bb8:	ffffbfff 	.word	0xffffbfff
 8003bbc:	50000400 	.word	0x50000400

08003bc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003bc0:	b510      	push	{r4, lr}
 8003bc2:	0004      	movs	r4, r0
 8003bc4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc6:	2214      	movs	r2, #20
 8003bc8:	2100      	movs	r1, #0
 8003bca:	a803      	add	r0, sp, #12
 8003bcc:	f00b fec3 	bl	800f956 <memset>
  if(htim_base->Instance==TIM3)
 8003bd0:	6823      	ldr	r3, [r4, #0]
 8003bd2:	4a18      	ldr	r2, [pc, #96]	; (8003c34 <HAL_TIM_Base_MspInit+0x74>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d10a      	bne.n	8003bee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003bd8:	2002      	movs	r0, #2
 8003bda:	4a17      	ldr	r2, [pc, #92]	; (8003c38 <HAL_TIM_Base_MspInit+0x78>)
 8003bdc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003bde:	4301      	orrs	r1, r0
 8003be0:	63d1      	str	r1, [r2, #60]	; 0x3c
 8003be2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003be4:	4003      	ands	r3, r0
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003bea:	b008      	add	sp, #32
 8003bec:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM14)
 8003bee:	4a13      	ldr	r2, [pc, #76]	; (8003c3c <HAL_TIM_Base_MspInit+0x7c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d1fa      	bne.n	8003bea <HAL_TIM_Base_MspInit+0x2a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003bf4:	2080      	movs	r0, #128	; 0x80
 8003bf6:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <HAL_TIM_Base_MspInit+0x78>)
 8003bf8:	0200      	lsls	r0, r0, #8
 8003bfa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003bfc:	4301      	orrs	r1, r0
 8003bfe:	6419      	str	r1, [r3, #64]	; 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c00:	2104      	movs	r1, #4
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003c02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c04:	4002      	ands	r2, r0
 8003c06:	9201      	str	r2, [sp, #4]
 8003c08:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c0c:	480c      	ldr	r0, [pc, #48]	; (8003c40 <HAL_TIM_Base_MspInit+0x80>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	635a      	str	r2, [r3, #52]	; 0x34
 8003c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c14:	2201      	movs	r2, #1
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c16:	400b      	ands	r3, r1
 8003c18:	9302      	str	r3, [sp, #8]
 8003c1a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	015b      	lsls	r3, r3, #5
 8003c20:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c22:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c24:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c26:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c28:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM14;
 8003c2a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c2c:	f000 fca4 	bl	8004578 <HAL_GPIO_Init>
}
 8003c30:	e7db      	b.n	8003bea <HAL_TIM_Base_MspInit+0x2a>
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	40000400 	.word	0x40000400
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	40002000 	.word	0x40002000
 8003c40:	50000800 	.word	0x50000800

08003c44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003c44:	b510      	push	{r4, lr}
 8003c46:	0004      	movs	r4, r0
 8003c48:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c4a:	2214      	movs	r2, #20
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	a801      	add	r0, sp, #4
 8003c50:	f00b fe81 	bl	800f956 <memset>
  if(htim->Instance==TIM3)
 8003c54:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <HAL_TIM_MspPostInit+0x44>)
 8003c56:	6822      	ldr	r2, [r4, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d112      	bne.n	8003c82 <HAL_TIM_MspPostInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	4a0b      	ldr	r2, [pc, #44]	; (8003c8c <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = PWM_1_Pin|PWM_LCD_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c60:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c62:	6b51      	ldr	r1, [r2, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c64:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c66:	4319      	orrs	r1, r3
 8003c68:	6351      	str	r1, [r2, #52]	; 0x34
 8003c6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c6c:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c6e:	401a      	ands	r2, r3
 8003c70:	9200      	str	r2, [sp, #0]
 8003c72:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = PWM_1_Pin|PWM_LCD_Pin;
 8003c74:	22c0      	movs	r2, #192	; 0xc0
 8003c76:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c78:	3abe      	subs	r2, #190	; 0xbe
 8003c7a:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003c7c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c7e:	f000 fc7b 	bl	8004578 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003c82:	b006      	add	sp, #24
 8003c84:	bd10      	pop	{r4, pc}
 8003c86:	46c0      	nop			; (mov r8, r8)
 8003c88:	40000400 	.word	0x40000400
 8003c8c:	40021000 	.word	0x40021000

08003c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c90:	b510      	push	{r4, lr}
 8003c92:	0004      	movs	r4, r0
 8003c94:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c96:	2214      	movs	r2, #20
 8003c98:	2100      	movs	r1, #0
 8003c9a:	a805      	add	r0, sp, #20
 8003c9c:	f00b fe5b 	bl	800f956 <memset>
  if(huart->Instance==USART2)
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	4a1f      	ldr	r2, [pc, #124]	; (8003d20 <HAL_UART_MspInit+0x90>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d11d      	bne.n	8003ce4 <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ca8:	2080      	movs	r0, #128	; 0x80
 8003caa:	4b1e      	ldr	r3, [pc, #120]	; (8003d24 <HAL_UART_MspInit+0x94>)
 8003cac:	0280      	lsls	r0, r0, #10
 8003cae:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003cb0:	4301      	orrs	r1, r0
 8003cb2:	63d9      	str	r1, [r3, #60]	; 0x3c
 8003cb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cb6:	4002      	ands	r2, r0
 8003cb8:	9201      	str	r2, [sp, #4]
 8003cba:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc0:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cc2:	4311      	orrs	r1, r2
 8003cc4:	6359      	str	r1, [r3, #52]	; 0x34
 8003cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc8:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cca:	4013      	ands	r3, r2
 8003ccc:	9302      	str	r3, [sp, #8]
 8003cce:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003cd0:	230c      	movs	r3, #12
 8003cd2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd4:	3b0a      	subs	r3, #10
 8003cd6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003cd8:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cda:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cdc:	f000 fc4c 	bl	8004578 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003ce0:	b00a      	add	sp, #40	; 0x28
 8003ce2:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 8003ce4:	4a10      	ldr	r2, [pc, #64]	; (8003d28 <HAL_UART_MspInit+0x98>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d1fa      	bne.n	8003ce0 <HAL_UART_MspInit+0x50>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003cea:	2080      	movs	r0, #128	; 0x80
 8003cec:	4b0d      	ldr	r3, [pc, #52]	; (8003d24 <HAL_UART_MspInit+0x94>)
 8003cee:	02c0      	lsls	r0, r0, #11
 8003cf0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003cf2:	4301      	orrs	r1, r0
 8003cf4:	63d9      	str	r1, [r3, #60]	; 0x3c
 8003cf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cf8:	4002      	ands	r2, r0
 8003cfa:	9203      	str	r2, [sp, #12]
 8003cfc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cfe:	2202      	movs	r2, #2
 8003d00:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d02:	480a      	ldr	r0, [pc, #40]	; (8003d2c <HAL_UART_MspInit+0x9c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d04:	4311      	orrs	r1, r2
 8003d06:	6359      	str	r1, [r3, #52]	; 0x34
 8003d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d0a:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	9304      	str	r3, [sp, #16]
 8003d10:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003d12:	23c0      	movs	r3, #192	; 0xc0
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003d18:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d1a:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d1e:	e7dd      	b.n	8003cdc <HAL_UART_MspInit+0x4c>
 8003d20:	40004400 	.word	0x40004400
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40004800 	.word	0x40004800
 8003d2c:	50000400 	.word	0x50000400

08003d30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d30:	b510      	push	{r4, lr}
 8003d32:	0001      	movs	r1, r0
 8003d34:	b086      	sub	sp, #24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0); 
 8003d36:	2200      	movs	r2, #0
 8003d38:	2011      	movs	r0, #17
 8003d3a:	f000 fbe1 	bl	8004500 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn); 
 8003d3e:	2011      	movs	r0, #17
 8003d40:	f000 fc0e 	bl	8004560 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003d44:	2010      	movs	r0, #16
 8003d46:	4a14      	ldr	r2, [pc, #80]	; (8003d98 <HAL_InitTick+0x68>)
 8003d48:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003d4a:	4301      	orrs	r1, r0
 8003d4c:	63d1      	str	r1, [r2, #60]	; 0x3c
 8003d4e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d50:	4669      	mov	r1, sp
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003d52:	4003      	ands	r3, r0
 8003d54:	9301      	str	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d56:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003d58:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d5a:	f001 f931 	bl	8004fc0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003d5e:	f001 f91b 	bl	8004f98 <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003d62:	4c0e      	ldr	r4, [pc, #56]	; (8003d9c <HAL_InitTick+0x6c>)
 8003d64:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <HAL_InitTick+0x70>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003d66:	490f      	ldr	r1, [pc, #60]	; (8003da4 <HAL_InitTick+0x74>)
  htim6.Instance = TIM6;
 8003d68:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8003d6a:	4b0f      	ldr	r3, [pc, #60]	; (8003da8 <HAL_InitTick+0x78>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003d6c:	0040      	lsls	r0, r0, #1
  htim6.Init.Period = (1000000 / 1000) - 1;
 8003d6e:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003d70:	f7fc f9f6 	bl	8000160 <__udivsi3>
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 8003d74:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003d76:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8003d78:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003d7a:	0020      	movs	r0, r4
  htim6.Init.ClockDivision = 0;
 8003d7c:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d7e:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003d80:	f002 f808 	bl	8005d94 <HAL_TIM_Base_Init>
 8003d84:	0003      	movs	r3, r0
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003d86:	2001      	movs	r0, #1
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d102      	bne.n	8003d92 <HAL_InitTick+0x62>
    return HAL_TIM_Base_Start_IT(&htim6);
 8003d8c:	0020      	movs	r0, r4
 8003d8e:	f001 feeb 	bl	8005b68 <HAL_TIM_Base_Start_IT>
}
 8003d92:	b006      	add	sp, #24
 8003d94:	bd10      	pop	{r4, pc}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	20004cf8 	.word	0x20004cf8
 8003da0:	40001000 	.word	0x40001000
 8003da4:	000f4240 	.word	0x000f4240
 8003da8:	000003e7 	.word	0x000003e7

08003dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003dae:	f001 f935 	bl	800501c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003db2:	bd10      	pop	{r4, pc}

08003db4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003db4:	e7fe      	b.n	8003db4 <HardFault_Handler>

08003db6 <SVC_Handler>:
 8003db6:	4770      	bx	lr

08003db8 <PendSV_Handler>:
 8003db8:	4770      	bx	lr

08003dba <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dba:	4770      	bx	lr

08003dbc <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003dbc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003dbe:	4802      	ldr	r0, [pc, #8]	; (8003dc8 <TIM6_IRQHandler+0xc>)
 8003dc0:	f001 feec 	bl	8005b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003dc4:	bd10      	pop	{r4, pc}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	20004cf8 	.word	0x20004cf8

08003dcc <SPIx_Init>:
/**
  * @brief  Initialize SPI HAL.
  * @retval None
  */
static void SPIx_Init(void)
{
 8003dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(HAL_SPI_GetState(&hnucleo_Spi) == HAL_SPI_STATE_RESET)
 8003dce:	4c30      	ldr	r4, [pc, #192]	; (8003e90 <SPIx_Init+0xc4>)
{
 8003dd0:	b089      	sub	sp, #36	; 0x24
  if(HAL_SPI_GetState(&hnucleo_Spi) == HAL_SPI_STATE_RESET)
 8003dd2:	0020      	movs	r0, r4
 8003dd4:	f001 fd8e 	bl	80058f4 <HAL_SPI_GetState>
 8003dd8:	1e06      	subs	r6, r0, #0
 8003dda:	d156      	bne.n	8003e8a <SPIx_Init+0xbe>
  {
    /* SPI Config */
    hnucleo_Spi.Instance = NUCLEO_SPIx;
 8003ddc:	4b2d      	ldr	r3, [pc, #180]	; (8003e94 <SPIx_Init+0xc8>)
          - SD card SPI interface max baudrate is 25MHz for write/read
          - PCLK1 max frequency is 48 MHz 
       */ 
    hnucleo_Spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
    hnucleo_Spi.Init.Direction = SPI_DIRECTION_2LINES;
    hnucleo_Spi.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003dde:	2701      	movs	r7, #1
    hnucleo_Spi.Instance = NUCLEO_SPIx;
 8003de0:	6023      	str	r3, [r4, #0]
    hnucleo_Spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003de2:	2308      	movs	r3, #8
 8003de4:	61e3      	str	r3, [r4, #28]
    hnucleo_Spi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003de6:	3b06      	subs	r3, #6
 8003de8:	6123      	str	r3, [r4, #16]
    hnucleo_Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    hnucleo_Spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    hnucleo_Spi.Init.CRCPolynomial = 7;
 8003dea:	3305      	adds	r3, #5
 8003dec:	62e3      	str	r3, [r4, #44]	; 0x2c
    hnucleo_Spi.Init.DataSize = SPI_DATASIZE_8BIT;
 8003dee:	23e0      	movs	r3, #224	; 0xe0
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	60e3      	str	r3, [r4, #12]
    hnucleo_Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
    hnucleo_Spi.Init.NSS = SPI_NSS_SOFT;
 8003df4:	2380      	movs	r3, #128	; 0x80
 8003df6:	009b      	lsls	r3, r3, #2
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8003df8:	0001      	movs	r1, r0
    hnucleo_Spi.Init.Direction = SPI_DIRECTION_2LINES;
 8003dfa:	60a0      	str	r0, [r4, #8]
    hnucleo_Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dfc:	62a0      	str	r0, [r4, #40]	; 0x28
    hnucleo_Spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003dfe:	6320      	str	r0, [r4, #48]	; 0x30
    hnucleo_Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e00:	6220      	str	r0, [r4, #32]
    hnucleo_Spi.Init.NSS = SPI_NSS_SOFT;
 8003e02:	61a3      	str	r3, [r4, #24]
    hnucleo_Spi.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e04:	6260      	str	r0, [r4, #36]	; 0x24
    hnucleo_Spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    hnucleo_Spi.Init.Mode = SPI_MODE_MASTER;
 8003e06:	3bfc      	subs	r3, #252	; 0xfc
    hnucleo_Spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003e08:	6360      	str	r0, [r4, #52]	; 0x34
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8003e0a:	2214      	movs	r2, #20
 8003e0c:	a803      	add	r0, sp, #12
    hnucleo_Spi.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003e0e:	6167      	str	r7, [r4, #20]
    hnucleo_Spi.Init.Mode = SPI_MODE_MASTER;
 8003e10:	6063      	str	r3, [r4, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8003e12:	f00b fda0 	bl	800f956 <memset>
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 8003e16:	2208      	movs	r2, #8
 8003e18:	4d1f      	ldr	r5, [pc, #124]	; (8003e98 <SPIx_Init+0xcc>)
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &gpioinitstruct);
 8003e1a:	a903      	add	r1, sp, #12
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 8003e1c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &gpioinitstruct);
 8003e1e:	481f      	ldr	r0, [pc, #124]	; (8003e9c <SPIx_Init+0xd0>)
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 8003e20:	4313      	orrs	r3, r2
 8003e22:	636b      	str	r3, [r5, #52]	; 0x34
 8003e24:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003e26:	4013      	ands	r3, r2
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	9b00      	ldr	r3, [sp, #0]
  NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 8003e2c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003e2e:	433b      	orrs	r3, r7
 8003e30:	636b      	str	r3, [r5, #52]	; 0x34
 8003e32:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  gpioinitstruct.Pull  = GPIO_PULLUP;
 8003e34:	9705      	str	r7, [sp, #20]
  NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 8003e36:	403b      	ands	r3, r7
 8003e38:	9301      	str	r3, [sp, #4]
 8003e3a:	9b01      	ldr	r3, [sp, #4]
  gpioinitstruct.Pin = NUCLEO_SPIx_SCK_PIN;
 8003e3c:	2380      	movs	r3, #128	; 0x80
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	9303      	str	r3, [sp, #12]
  gpioinitstruct.Mode = GPIO_MODE_AF_PP;
 8003e42:	3bfe      	subs	r3, #254	; 0xfe
 8003e44:	9304      	str	r3, [sp, #16]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e46:	19db      	adds	r3, r3, r7
 8003e48:	9306      	str	r3, [sp, #24]
  gpioinitstruct.Alternate = NUCLEO_SPIx_SCK_AF;
 8003e4a:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &gpioinitstruct);
 8003e4c:	f000 fb94 	bl	8004578 <HAL_GPIO_Init>
  gpioinitstruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 8003e50:	2780      	movs	r7, #128	; 0x80
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8003e52:	20a0      	movs	r0, #160	; 0xa0
  gpioinitstruct.Pull  = GPIO_PULLDOWN;
 8003e54:	2302      	movs	r3, #2
  gpioinitstruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 8003e56:	017f      	lsls	r7, r7, #5
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8003e58:	a903      	add	r1, sp, #12
 8003e5a:	05c0      	lsls	r0, r0, #23
  gpioinitstruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 8003e5c:	9703      	str	r7, [sp, #12]
  gpioinitstruct.Pull  = GPIO_PULLDOWN;
 8003e5e:	9305      	str	r3, [sp, #20]
  gpioinitstruct.Alternate = NUCLEO_SPIx_MISO_MOSI_AF;
 8003e60:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8003e62:	f000 fb89 	bl	8004578 <HAL_GPIO_Init>
  gpioinitstruct.Pin = NUCLEO_SPIx_MISO_PIN;
 8003e66:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8003e68:	20a0      	movs	r0, #160	; 0xa0
  gpioinitstruct.Pin = NUCLEO_SPIx_MISO_PIN;
 8003e6a:	011b      	lsls	r3, r3, #4
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8003e6c:	05c0      	lsls	r0, r0, #23
 8003e6e:	a903      	add	r1, sp, #12
  gpioinitstruct.Pin = NUCLEO_SPIx_MISO_PIN;
 8003e70:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8003e72:	f000 fb81 	bl	8004578 <HAL_GPIO_Init>
  NUCLEO_SPIx_CLK_ENABLE();
 8003e76:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    
    SPIx_MspInit();
    HAL_SPI_Init(&hnucleo_Spi);
 8003e78:	0020      	movs	r0, r4
  NUCLEO_SPIx_CLK_ENABLE();
 8003e7a:	433b      	orrs	r3, r7
 8003e7c:	642b      	str	r3, [r5, #64]	; 0x40
 8003e7e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003e80:	401f      	ands	r7, r3
 8003e82:	9702      	str	r7, [sp, #8]
 8003e84:	9b02      	ldr	r3, [sp, #8]
    HAL_SPI_Init(&hnucleo_Spi);
 8003e86:	f001 fabf 	bl	8005408 <HAL_SPI_Init>
  }
}
 8003e8a:	b009      	add	sp, #36	; 0x24
 8003e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	2000147c 	.word	0x2000147c
 8003e94:	40013000 	.word	0x40013000
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	50000c00 	.word	0x50000c00

08003ea0 <SPIx_WriteReadData>:
  * @param  DataOut: read value
  * @param  DataLength: value data length
  * @retval None
  */
static void SPIx_WriteReadData(const uint8_t *DataIn, uint8_t *DataOut, uint16_t DataLength)
{
 8003ea0:	b513      	push	{r0, r1, r4, lr}
 8003ea2:	0013      	movs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_SPI_TransmitReceive(&hnucleo_Spi, (uint8_t*) DataIn, DataOut, DataLength, SpixTimeout);
 8003ea4:	4a08      	ldr	r2, [pc, #32]	; (8003ec8 <SPIx_WriteReadData+0x28>)
 8003ea6:	4c09      	ldr	r4, [pc, #36]	; (8003ecc <SPIx_WriteReadData+0x2c>)
 8003ea8:	6812      	ldr	r2, [r2, #0]
 8003eaa:	9200      	str	r2, [sp, #0]
 8003eac:	000a      	movs	r2, r1
 8003eae:	0001      	movs	r1, r0
 8003eb0:	0020      	movs	r0, r4
 8003eb2:	f001 fbed 	bl	8005690 <HAL_SPI_TransmitReceive>

  /* Check the communication status */
  if(status != HAL_OK)
 8003eb6:	2800      	cmp	r0, #0
 8003eb8:	d004      	beq.n	8003ec4 <SPIx_WriteReadData+0x24>
  * @retval None
  */
static void SPIx_Error (void)
{
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&hnucleo_Spi);
 8003eba:	0020      	movs	r0, r4
 8003ebc:	f001 fb02 	bl	80054c4 <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI communication BUS */
  SPIx_Init();
 8003ec0:	f7ff ff84 	bl	8003dcc <SPIx_Init>
}
 8003ec4:	bd13      	pop	{r0, r1, r4, pc}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	20000000 	.word	0x20000000
 8003ecc:	2000147c 	.word	0x2000147c

08003ed0 <SD_IO_CSState>:
  * @brief  Set the SD_CS pin.
  * @param  val: pin value.
  * @retval None
  */
void SD_IO_CSState(uint8_t val)
{
 8003ed0:	b510      	push	{r4, lr}
 8003ed2:	0002      	movs	r2, r0
  if(val == 1) 
 8003ed4:	2801      	cmp	r0, #1
 8003ed6:	d106      	bne.n	8003ee6 <SD_IO_CSState+0x16>
  {
    SD_CS_HIGH();
  }
  else
  {
    SD_CS_LOW();
 8003ed8:	2180      	movs	r1, #128	; 0x80
 8003eda:	20a0      	movs	r0, #160	; 0xa0
 8003edc:	00c9      	lsls	r1, r1, #3
 8003ede:	05c0      	lsls	r0, r0, #23
 8003ee0:	f000 fc6e 	bl	80047c0 <HAL_GPIO_WritePin>
  }
}
 8003ee4:	bd10      	pop	{r4, pc}
    SD_CS_LOW();
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	e7f6      	b.n	8003ed8 <SD_IO_CSState+0x8>

08003eea <SD_IO_WriteReadData>:
  * @param  DataOut: Pointer to data buffer for read data
  * @param  DataLength: number of bytes to write
  * @retval None
  */
void SD_IO_WriteReadData(const uint8_t *DataIn, uint8_t *DataOut, uint16_t DataLength)
{
 8003eea:	b510      	push	{r4, lr}
  /* Send the byte */
  SPIx_WriteReadData(DataIn, DataOut, DataLength);
 8003eec:	f7ff ffd8 	bl	8003ea0 <SPIx_WriteReadData>
}
 8003ef0:	bd10      	pop	{r4, pc}

08003ef2 <SD_IO_WriteByte>:
  * @brief  Write a byte on the SD.
  * @param  Data: byte to send.
  * @retval Data written
  */
uint8_t SD_IO_WriteByte(uint8_t Data)
{
 8003ef2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t tmp;

  /* Send the byte */
  SPIx_WriteReadData(&Data,&tmp,1);
 8003ef4:	240f      	movs	r4, #15
{
 8003ef6:	466b      	mov	r3, sp
  SPIx_WriteReadData(&Data,&tmp,1);
 8003ef8:	446c      	add	r4, sp
{
 8003efa:	71d8      	strb	r0, [r3, #7]
 8003efc:	3307      	adds	r3, #7
  SPIx_WriteReadData(&Data,&tmp,1);
 8003efe:	0018      	movs	r0, r3
 8003f00:	2201      	movs	r2, #1
 8003f02:	0021      	movs	r1, r4
 8003f04:	f7ff ffcc 	bl	8003ea0 <SPIx_WriteReadData>
  return tmp;
 8003f08:	7820      	ldrb	r0, [r4, #0]
  }
 8003f0a:	b004      	add	sp, #16
 8003f0c:	bd10      	pop	{r4, pc}
	...

08003f10 <SD_IO_Init>:
{
 8003f10:	b530      	push	{r4, r5, lr}
  SD_CS_GPIO_CLK_ENABLE();
 8003f12:	2401      	movs	r4, #1
{
 8003f14:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8003f16:	2214      	movs	r2, #20
 8003f18:	2100      	movs	r1, #0
 8003f1a:	a803      	add	r0, sp, #12
 8003f1c:	f00b fd1b 	bl	800f956 <memset>
  LCD_CS_GPIO_CLK_ENABLE();
 8003f20:	2102      	movs	r1, #2
  SD_CS_HIGH();
 8003f22:	2580      	movs	r5, #128	; 0x80
 8003f24:	20a0      	movs	r0, #160	; 0xa0
  SD_CS_GPIO_CLK_ENABLE();
 8003f26:	4b1b      	ldr	r3, [pc, #108]	; (8003f94 <SD_IO_Init+0x84>)
  SD_CS_HIGH();
 8003f28:	00ed      	lsls	r5, r5, #3
  SD_CS_GPIO_CLK_ENABLE();
 8003f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  SD_CS_HIGH();
 8003f2c:	05c0      	lsls	r0, r0, #23
  SD_CS_GPIO_CLK_ENABLE();
 8003f2e:	4322      	orrs	r2, r4
 8003f30:	635a      	str	r2, [r3, #52]	; 0x34
 8003f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f34:	4022      	ands	r2, r4
 8003f36:	9201      	str	r2, [sp, #4]
 8003f38:	9a01      	ldr	r2, [sp, #4]
  LCD_CS_GPIO_CLK_ENABLE();
 8003f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	635a      	str	r2, [r3, #52]	; 0x34
 8003f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  SD_CS_HIGH();
 8003f42:	0022      	movs	r2, r4
  LCD_CS_GPIO_CLK_ENABLE();
 8003f44:	400b      	ands	r3, r1
 8003f46:	9302      	str	r3, [sp, #8]
  SD_CS_HIGH();
 8003f48:	0029      	movs	r1, r5
  LCD_CS_GPIO_CLK_ENABLE();
 8003f4a:	9b02      	ldr	r3, [sp, #8]
  SD_CS_HIGH();
 8003f4c:	f000 fc38 	bl	80047c0 <HAL_GPIO_WritePin>
  LCD_CS_HIGH();
 8003f50:	0022      	movs	r2, r4
 8003f52:	0021      	movs	r1, r4
 8003f54:	4810      	ldr	r0, [pc, #64]	; (8003f98 <SD_IO_Init+0x88>)
 8003f56:	f000 fc33 	bl	80047c0 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 8003f5a:	20a0      	movs	r0, #160	; 0xa0
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f5c:	2303      	movs	r3, #3
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 8003f5e:	a903      	add	r1, sp, #12
 8003f60:	05c0      	lsls	r0, r0, #23
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f62:	9306      	str	r3, [sp, #24]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f64:	9404      	str	r4, [sp, #16]
  gpioinitstruct.Pull = GPIO_PULLUP;
 8003f66:	9405      	str	r4, [sp, #20]
  gpioinitstruct.Pin = SD_CS_PIN;
 8003f68:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 8003f6a:	f000 fb05 	bl	8004578 <HAL_GPIO_Init>
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 8003f6e:	20a0      	movs	r0, #160	; 0xa0
 8003f70:	a903      	add	r1, sp, #12
 8003f72:	05c0      	lsls	r0, r0, #23
  gpioinitstruct.Pin   = LCD_CS_PIN;
 8003f74:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 8003f76:	f000 faff 	bl	8004578 <HAL_GPIO_Init>
  SPIx_Init();
 8003f7a:	f7ff ff27 	bl	8003dcc <SPIx_Init>
 8003f7e:	3409      	adds	r4, #9
 8003f80:	3c01      	subs	r4, #1
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003f82:	20ff      	movs	r0, #255	; 0xff
 8003f84:	b2e4      	uxtb	r4, r4
 8003f86:	f7ff ffb4 	bl	8003ef2 <SD_IO_WriteByte>
  for (counter = 0; counter <= 9; counter++)
 8003f8a:	2c00      	cmp	r4, #0
 8003f8c:	d1f8      	bne.n	8003f80 <SD_IO_Init+0x70>
}
 8003f8e:	b009      	add	sp, #36	; 0x24
 8003f90:	bd30      	pop	{r4, r5, pc}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	40021000 	.word	0x40021000
 8003f98:	50000400 	.word	0x50000400

08003f9c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003f9c:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <_sbrk+0x2c>)
{
 8003f9e:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8003fa0:	6819      	ldr	r1, [r3, #0]
{
 8003fa2:	0002      	movs	r2, r0
	if (heap_end == 0)
 8003fa4:	2900      	cmp	r1, #0
 8003fa6:	d101      	bne.n	8003fac <_sbrk+0x10>
		heap_end = &end;
 8003fa8:	4908      	ldr	r1, [pc, #32]	; (8003fcc <_sbrk+0x30>)
 8003faa:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8003fac:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8003fae:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003fb0:	1882      	adds	r2, r0, r2
 8003fb2:	428a      	cmp	r2, r1
 8003fb4:	d906      	bls.n	8003fc4 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003fb6:	f00b fa83 	bl	800f4c0 <__errno>
 8003fba:	230c      	movs	r3, #12
 8003fbc:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003fbe:	2001      	movs	r0, #1
 8003fc0:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8003fc2:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8003fc4:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8003fc6:	e7fc      	b.n	8003fc2 <_sbrk+0x26>
 8003fc8:	200014e0 	.word	0x200014e0
 8003fcc:	20005528 	.word	0x20005528

08003fd0 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003fd0:	2280      	movs	r2, #128	; 0x80
 8003fd2:	4b02      	ldr	r3, [pc, #8]	; (8003fdc <SystemInit+0xc>)
 8003fd4:	0512      	lsls	r2, r2, #20
 8003fd6:	609a      	str	r2, [r3, #8]
#endif
}
 8003fd8:	4770      	bx	lr
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	e000ed00 	.word	0xe000ed00

08003fe0 <HAL_Init>:
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fe0:	2380      	movs	r3, #128	; 0x80
 8003fe2:	4a08      	ldr	r2, [pc, #32]	; (8004004 <HAL_Init+0x24>)
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	6811      	ldr	r1, [r2, #0]
{
 8003fe8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fea:	430b      	orrs	r3, r1
 8003fec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fee:	2000      	movs	r0, #0
 8003ff0:	f7ff fe9e 	bl	8003d30 <HAL_InitTick>
 8003ff4:	1e04      	subs	r4, r0, #0
 8003ff6:	d103      	bne.n	8004000 <HAL_Init+0x20>
    status = HAL_ERROR;
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003ff8:	f7ff fcba 	bl	8003970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8003ffc:	0020      	movs	r0, r4
 8003ffe:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8004000:	2401      	movs	r4, #1
 8004002:	e7fb      	b.n	8003ffc <HAL_Init+0x1c>
 8004004:	40022000 	.word	0x40022000

08004008 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004008:	4a03      	ldr	r2, [pc, #12]	; (8004018 <HAL_IncTick+0x10>)
 800400a:	4904      	ldr	r1, [pc, #16]	; (800401c <HAL_IncTick+0x14>)
 800400c:	6813      	ldr	r3, [r2, #0]
 800400e:	6809      	ldr	r1, [r1, #0]
 8004010:	185b      	adds	r3, r3, r1
 8004012:	6013      	str	r3, [r2, #0]
}
 8004014:	4770      	bx	lr
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	20004d38 	.word	0x20004d38
 800401c:	20000008 	.word	0x20000008

08004020 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004020:	4b01      	ldr	r3, [pc, #4]	; (8004028 <HAL_GetTick+0x8>)
 8004022:	6818      	ldr	r0, [r3, #0]
}
 8004024:	4770      	bx	lr
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	20004d38 	.word	0x20004d38

0800402c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800402c:	b570      	push	{r4, r5, r6, lr}
 800402e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004030:	f7ff fff6 	bl	8004020 <HAL_GetTick>
 8004034:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004036:	1c63      	adds	r3, r4, #1
 8004038:	d002      	beq.n	8004040 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800403a:	4b04      	ldr	r3, [pc, #16]	; (800404c <HAL_Delay+0x20>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004040:	f7ff ffee 	bl	8004020 <HAL_GetTick>
 8004044:	1b40      	subs	r0, r0, r5
 8004046:	4284      	cmp	r4, r0
 8004048:	d8fa      	bhi.n	8004040 <HAL_Delay+0x14>
  {
  }
}
 800404a:	bd70      	pop	{r4, r5, r6, pc}
 800404c:	20000008 	.word	0x20000008

08004050 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004050:	6880      	ldr	r0, [r0, #8]
 8004052:	0740      	lsls	r0, r0, #29
 8004054:	0fc0      	lsrs	r0, r0, #31
}
 8004056:	4770      	bx	lr

08004058 <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004058:	2300      	movs	r3, #0
{
 800405a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800405c:	b085      	sub	sp, #20
 800405e:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8004060:	9303      	str	r3, [sp, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8004062:	2501      	movs	r5, #1
  if(hadc == NULL)
 8004064:	4298      	cmp	r0, r3
 8004066:	d100      	bne.n	800406a <HAL_ADC_Init+0x12>
 8004068:	e09a      	b.n	80041a0 <HAL_ADC_Init+0x148>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800406a:	6d85      	ldr	r5, [r0, #88]	; 0x58
 800406c:	429d      	cmp	r5, r3
 800406e:	d105      	bne.n	800407c <HAL_ADC_Init+0x24>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004070:	f7ff fc96 	bl	80039a0 <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004074:	0023      	movs	r3, r4
 8004076:	3354      	adds	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8004078:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800407a:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800407c:	2380      	movs	r3, #128	; 0x80
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800407e:	6826      	ldr	r6, [r4, #0]
 8004080:	055b      	lsls	r3, r3, #21
 8004082:	68b2      	ldr	r2, [r6, #8]
 8004084:	421a      	tst	r2, r3
 8004086:	d100      	bne.n	800408a <HAL_ADC_Init+0x32>
 8004088:	e0d0      	b.n	800422c <HAL_ADC_Init+0x1d4>
 800408a:	68b3      	ldr	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800408c:	2500      	movs	r5, #0
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	d400      	bmi.n	8004094 <HAL_ADC_Init+0x3c>
 8004092:	e0d8      	b.n	8004246 <HAL_ADC_Init+0x1ee>
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004094:	0030      	movs	r0, r6
 8004096:	f7ff ffdb 	bl	8004050 <LL_ADC_REG_IsConversionOngoing>
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800409a:	2310      	movs	r3, #16
 800409c:	6da6      	ldr	r6, [r4, #88]	; 0x58
 800409e:	401e      	ands	r6, r3
 80040a0:	d000      	beq.n	80040a4 <HAL_ADC_Init+0x4c>
 80040a2:	e0be      	b.n	8004222 <HAL_ADC_Init+0x1ca>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80040a4:	2800      	cmp	r0, #0
 80040a6:	d000      	beq.n	80040aa <HAL_ADC_Init+0x52>
 80040a8:	e0bb      	b.n	8004222 <HAL_ADC_Init+0x1ca>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040ac:	4a7c      	ldr	r2, [pc, #496]	; (80042a0 <HAL_ADC_Init+0x248>)
 80040ae:	401a      	ands	r2, r3
 80040b0:	2302      	movs	r3, #2
 80040b2:	4313      	orrs	r3, r2
 80040b4:	65a3      	str	r3, [r4, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040b6:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	07d2      	lsls	r2, r2, #31
 80040bc:	d400      	bmi.n	80040c0 <HAL_ADC_Init+0x68>
 80040be:	e0cb      	b.n	8004258 <HAL_ADC_Init+0x200>
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80040c0:	6b27      	ldr	r7, [r4, #48]	; 0x30
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040c2:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80040c4:	1e78      	subs	r0, r7, #1
 80040c6:	4187      	sbcs	r7, r0
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80040c8:	7e62      	ldrb	r2, [r4, #25]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80040ca:	0338      	lsls	r0, r7, #12
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80040cc:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040ce:	0389      	lsls	r1, r1, #14
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80040d0:	9001      	str	r0, [sp, #4]
 80040d2:	68e0      	ldr	r0, [r4, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040d4:	4311      	orrs	r1, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80040d6:	7ea2      	ldrb	r2, [r4, #26]
 80040d8:	4301      	orrs	r1, r0
                 hadc->Init.DataAlign                                             |
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 80040da:	6920      	ldr	r0, [r4, #16]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80040dc:	4694      	mov	ip, r2
 80040de:	0352      	lsls	r2, r2, #13
 80040e0:	4311      	orrs	r1, r2
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 80040e2:	2800      	cmp	r0, #0
 80040e4:	da66      	bge.n	80041b4 <HAL_ADC_Init+0x15c>
 80040e6:	0047      	lsls	r7, r0, #1
 80040e8:	087f      	lsrs	r7, r7, #1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80040ea:	0022      	movs	r2, r4
 80040ec:	322c      	adds	r2, #44	; 0x2c
 80040ee:	7812      	ldrb	r2, [r2, #0]
 80040f0:	0052      	lsls	r2, r2, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 80040f2:	430a      	orrs	r2, r1
 80040f4:	9901      	ldr	r1, [sp, #4]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	4317      	orrs	r7, r2
 80040fa:	9701      	str	r7, [sp, #4]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040fc:	1c62      	adds	r2, r4, #1
 80040fe:	7fd2      	ldrb	r2, [r2, #31]
 8004100:	2a01      	cmp	r2, #1
 8004102:	d107      	bne.n	8004114 <HAL_ADC_Init+0xbc>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004104:	4661      	mov	r1, ip
 8004106:	2900      	cmp	r1, #0
 8004108:	d157      	bne.n	80041ba <HAL_ADC_Init+0x162>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800410a:	2280      	movs	r2, #128	; 0x80
 800410c:	0039      	movs	r1, r7
 800410e:	0252      	lsls	r2, r2, #9
 8004110:	4311      	orrs	r1, r2
 8004112:	9101      	str	r1, [sp, #4]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004114:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004116:	2a00      	cmp	r2, #0
 8004118:	d007      	beq.n	800412a <HAL_ADC_Init+0xd2>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800411a:	21e0      	movs	r1, #224	; 0xe0
 800411c:	0049      	lsls	r1, r1, #1
 800411e:	400a      	ands	r2, r1
 8004120:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004122:	430a      	orrs	r2, r1
 8004124:	9901      	ldr	r1, [sp, #4]
 8004126:	4311      	orrs	r1, r2
 8004128:	9101      	str	r1, [sp, #4]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 800412a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800412c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800412e:	430a      	orrs	r2, r1
                  hadc->Init.Oversampling.RightBitShift |
 8004130:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004132:	430a      	orrs	r2, r1
                  hadc->Init.Oversampling.TriggeredMode |
 8004134:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004136:	430a      	orrs	r2, r1
                  hadc->Init.TriggerFrequencyMode
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 8004138:	0021      	movs	r1, r4
 800413a:	313c      	adds	r1, #60	; 0x3c
 800413c:	7809      	ldrb	r1, [r1, #0]
 800413e:	2901      	cmp	r1, #1
 8004140:	d100      	bne.n	8004144 <HAL_ADC_Init+0xec>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8004142:	430a      	orrs	r2, r1
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8004144:	68d9      	ldr	r1, [r3, #12]
 8004146:	4f57      	ldr	r7, [pc, #348]	; (80042a4 <HAL_ADC_Init+0x24c>)
 8004148:	4039      	ands	r1, r7
 800414a:	9f01      	ldr	r7, [sp, #4]
 800414c:	4339      	orrs	r1, r7
 800414e:	60d9      	str	r1, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 8004150:	6919      	ldr	r1, [r3, #16]
 8004152:	4f55      	ldr	r7, [pc, #340]	; (80042a8 <HAL_ADC_Init+0x250>)
 8004154:	4039      	ands	r1, r7
 8004156:	430a      	orrs	r2, r1
  MODIFY_REG(ADCx->SMPR,
 8004158:	2107      	movs	r1, #7
 800415a:	2770      	movs	r7, #112	; 0x70
 800415c:	611a      	str	r2, [r3, #16]
 800415e:	695a      	ldr	r2, [r3, #20]
 8004160:	438a      	bics	r2, r1
 8004162:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004164:	430a      	orrs	r2, r1
 8004166:	615a      	str	r2, [r3, #20]
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800416c:	43ba      	bics	r2, r7
 800416e:	0109      	lsls	r1, r1, #4
 8004170:	430a      	orrs	r2, r1
 8004172:	615a      	str	r2, [r3, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004174:	2800      	cmp	r0, #0
 8004176:	d12a      	bne.n	80041ce <HAL_ADC_Init+0x176>
      if(ADCGroupRegularSequencerRanksCount == 1UL)
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8004178:	2210      	movs	r2, #16
 800417a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800417c:	4252      	negs	r2, r2
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800417e:	430a      	orrs	r2, r1
 8004180:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8004182:	4a4a      	ldr	r2, [pc, #296]	; (80042ac <HAL_ADC_Init+0x254>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	4013      	ands	r3, r2
 8004188:	9a01      	ldr	r2, [sp, #4]
 800418a:	429a      	cmp	r2, r3
 800418c:	d13d      	bne.n	800420a <HAL_ADC_Init+0x1b2>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800418e:	2300      	movs	r3, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004190:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8004192:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8004194:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004196:	4393      	bics	r3, r2
 8004198:	001a      	movs	r2, r3
 800419a:	2301      	movs	r3, #1
 800419c:	4313      	orrs	r3, r2
 800419e:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80041a0:	0028      	movs	r0, r5
 80041a2:	b005      	add	sp, #20
 80041a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index--;
 80041a6:	9b03      	ldr	r3, [sp, #12]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	9303      	str	r3, [sp, #12]
    while(wait_loop_index != 0UL)
 80041ac:	9b03      	ldr	r3, [sp, #12]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f9      	bne.n	80041a6 <HAL_ADC_Init+0x14e>
 80041b2:	e76a      	b.n	800408a <HAL_ADC_Init+0x32>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 80041b4:	2780      	movs	r7, #128	; 0x80
 80041b6:	03bf      	lsls	r7, r7, #14
 80041b8:	e797      	b.n	80040ea <HAL_ADC_Init+0x92>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041ba:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80041bc:	468c      	mov	ip, r1
 80041be:	2120      	movs	r1, #32
 80041c0:	4667      	mov	r7, ip
 80041c2:	4339      	orrs	r1, r7
 80041c4:	65a1      	str	r1, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041c6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80041c8:	430a      	orrs	r2, r1
 80041ca:	65e2      	str	r2, [r4, #92]	; 0x5c
 80041cc:	e7a2      	b.n	8004114 <HAL_ADC_Init+0xbc>
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80041ce:	2280      	movs	r2, #128	; 0x80
 80041d0:	0392      	lsls	r2, r2, #14
 80041d2:	4290      	cmp	r0, r2
 80041d4:	d1d5      	bne.n	8004182 <HAL_ADC_Init+0x12a>
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 80041d6:	200f      	movs	r0, #15
 80041d8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80041da:	000f      	movs	r7, r1
 80041dc:	00b2      	lsls	r2, r6, #2
 80041de:	40d7      	lsrs	r7, r2
 80041e0:	003a      	movs	r2, r7
 80041e2:	4002      	ands	r2, r0
 80041e4:	2a0f      	cmp	r2, #15
 80041e6:	d00d      	beq.n	8004204 <HAL_ADC_Init+0x1ac>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80041e8:	3601      	adds	r6, #1
 80041ea:	2e08      	cmp	r6, #8
 80041ec:	d1f5      	bne.n	80041da <HAL_ADC_Init+0x182>
        MODIFY_REG(hadc->Instance->CHSELR,
 80041ee:	4830      	ldr	r0, [pc, #192]	; (80042b0 <HAL_ADC_Init+0x258>)
 80041f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041f2:	69e2      	ldr	r2, [r4, #28]
 80041f4:	1812      	adds	r2, r2, r0
 80041f6:	201c      	movs	r0, #28
 80041f8:	0092      	lsls	r2, r2, #2
 80041fa:	4002      	ands	r2, r0
 80041fc:	382c      	subs	r0, #44	; 0x2c
 80041fe:	4090      	lsls	r0, r2
 8004200:	0002      	movs	r2, r0
 8004202:	e7bc      	b.n	800417e <HAL_ADC_Init+0x126>
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 8004204:	2e01      	cmp	r6, #1
 8004206:	d0b7      	beq.n	8004178 <HAL_ADC_Init+0x120>
 8004208:	e7f1      	b.n	80041ee <HAL_ADC_Init+0x196>
      ADC_STATE_CLR_SET(hadc->State,
 800420a:	2212      	movs	r2, #18
 800420c:	6da3      	ldr	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800420e:	2501      	movs	r5, #1
      ADC_STATE_CLR_SET(hadc->State,
 8004210:	4393      	bics	r3, r2
 8004212:	001a      	movs	r2, r3
 8004214:	2310      	movs	r3, #16
 8004216:	4313      	orrs	r3, r2
 8004218:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800421a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800421c:	432b      	orrs	r3, r5
 800421e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8004220:	e7be      	b.n	80041a0 <HAL_ADC_Init+0x148>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004222:	6da2      	ldr	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8004224:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004226:	4313      	orrs	r3, r2
 8004228:	65a3      	str	r3, [r4, #88]	; 0x58
 800422a:	e7b9      	b.n	80041a0 <HAL_ADC_Init+0x148>
  MODIFY_REG(ADCx->CR,
 800422c:	68b2      	ldr	r2, [r6, #8]
 800422e:	4921      	ldr	r1, [pc, #132]	; (80042b4 <HAL_ADC_Init+0x25c>)
 8004230:	400a      	ands	r2, r1
 8004232:	4313      	orrs	r3, r2
 8004234:	60b3      	str	r3, [r6, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004236:	4b20      	ldr	r3, [pc, #128]	; (80042b8 <HAL_ADC_Init+0x260>)
 8004238:	4920      	ldr	r1, [pc, #128]	; (80042bc <HAL_ADC_Init+0x264>)
 800423a:	6818      	ldr	r0, [r3, #0]
 800423c:	f7fb ff90 	bl	8000160 <__udivsi3>
 8004240:	0040      	lsls	r0, r0, #1
 8004242:	9003      	str	r0, [sp, #12]
    while(wait_loop_index != 0UL)
 8004244:	e7b2      	b.n	80041ac <HAL_ADC_Init+0x154>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004246:	2310      	movs	r3, #16
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004248:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800424a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800424c:	4313      	orrs	r3, r2
 800424e:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004250:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004252:	432b      	orrs	r3, r5
 8004254:	65e3      	str	r3, [r4, #92]	; 0x5c
 8004256:	e71d      	b.n	8004094 <HAL_ADC_Init+0x3c>
      MODIFY_REG(hadc->Instance->CFGR1,
 8004258:	2118      	movs	r1, #24
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	438a      	bics	r2, r1
 800425e:	68a1      	ldr	r1, [r4, #8]
 8004260:	430a      	orrs	r2, r1
 8004262:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 8004264:	6861      	ldr	r1, [r4, #4]
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	0f88      	lsrs	r0, r1, #30
 800426a:	0092      	lsls	r2, r2, #2
 800426c:	0780      	lsls	r0, r0, #30
 800426e:	0892      	lsrs	r2, r2, #2
 8004270:	4302      	orrs	r2, r0
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004272:	2080      	movs	r0, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 8004274:	611a      	str	r2, [r3, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004276:	004a      	lsls	r2, r1, #1
 8004278:	0852      	lsrs	r2, r2, #1
 800427a:	05c0      	lsls	r0, r0, #23
 800427c:	4282      	cmp	r2, r0
 800427e:	d100      	bne.n	8004282 <HAL_ADC_Init+0x22a>
 8004280:	e71e      	b.n	80040c0 <HAL_ADC_Init+0x68>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004282:	2280      	movs	r2, #128	; 0x80
 8004284:	0612      	lsls	r2, r2, #24
 8004286:	4291      	cmp	r1, r2
 8004288:	d100      	bne.n	800428c <HAL_ADC_Init+0x234>
 800428a:	e719      	b.n	80040c0 <HAL_ADC_Init+0x68>
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 800428c:	480c      	ldr	r0, [pc, #48]	; (80042c0 <HAL_ADC_Init+0x268>)
 800428e:	4f0d      	ldr	r7, [pc, #52]	; (80042c4 <HAL_ADC_Init+0x26c>)
 8004290:	6802      	ldr	r2, [r0, #0]
 8004292:	403a      	ands	r2, r7
 8004294:	27f0      	movs	r7, #240	; 0xf0
 8004296:	03bf      	lsls	r7, r7, #14
 8004298:	4039      	ands	r1, r7
 800429a:	430a      	orrs	r2, r1
 800429c:	6002      	str	r2, [r0, #0]
 800429e:	e70f      	b.n	80040c0 <HAL_ADC_Init+0x68>
 80042a0:	fffffefd 	.word	0xfffffefd
 80042a4:	fffe0219 	.word	0xfffe0219
 80042a8:	dffffc02 	.word	0xdffffc02
 80042ac:	833fffe7 	.word	0x833fffe7
 80042b0:	3fffffff 	.word	0x3fffffff
 80042b4:	6fffffe8 	.word	0x6fffffe8
 80042b8:	20000004 	.word	0x20000004
 80042bc:	00030d40 	.word	0x00030d40
 80042c0:	40012708 	.word	0x40012708
 80042c4:	ffc3ffff 	.word	0xffc3ffff

080042c8 <HAL_ADC_ConfigChannel>:
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80042c8:	2300      	movs	r3, #0
{
 80042ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042cc:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t wait_loop_index = 0UL;
 80042ce:	9307      	str	r3, [sp, #28]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042d0:	0003      	movs	r3, r0
 80042d2:	3354      	adds	r3, #84	; 0x54
 80042d4:	781a      	ldrb	r2, [r3, #0]
{
 80042d6:	0005      	movs	r5, r0
 80042d8:	000f      	movs	r7, r1
  __HAL_LOCK(hadc);
 80042da:	2402      	movs	r4, #2
 80042dc:	2a01      	cmp	r2, #1
 80042de:	d100      	bne.n	80042e2 <HAL_ADC_ConfigChannel+0x1a>
 80042e0:	e0c1      	b.n	8004466 <HAL_ADC_ConfigChannel+0x19e>
 80042e2:	2601      	movs	r6, #1
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042e4:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hadc);
 80042e6:	701e      	strb	r6, [r3, #0]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042e8:	f7ff feb2 	bl	8004050 <LL_ADC_REG_IsConversionOngoing>
 80042ec:	9003      	str	r0, [sp, #12]
 80042ee:	2800      	cmp	r0, #0
 80042f0:	d000      	beq.n	80042f4 <HAL_ADC_ConfigChannel+0x2c>
 80042f2:	e0ef      	b.n	80044d4 <HAL_ADC_ConfigChannel+0x20c>
 80042f4:	2204      	movs	r2, #4
 80042f6:	2180      	movs	r1, #128	; 0x80
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4694      	mov	ip, r2
 80042fc:	9301      	str	r3, [sp, #4]
 80042fe:	9801      	ldr	r0, [sp, #4]
 8004300:	692b      	ldr	r3, [r5, #16]
 8004302:	0609      	lsls	r1, r1, #24
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	42a0      	cmp	r0, r4
 8004308:	d100      	bne.n	800430c <HAL_ADC_ConfigChannel+0x44>
 800430a:	e0b6      	b.n	800447a <HAL_ADC_ConfigChannel+0x1b2>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800430c:	4660      	mov	r0, ip
 800430e:	4383      	bics	r3, r0
 8004310:	428b      	cmp	r3, r1
 8004312:	d113      	bne.n	800433c <HAL_ADC_ConfigChannel+0x74>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8004314:	6829      	ldr	r1, [r5, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004316:	0353      	lsls	r3, r2, #13
 8004318:	6a88      	ldr	r0, [r1, #40]	; 0x28
 800431a:	0b5b      	lsrs	r3, r3, #13
  MODIFY_REG(ADCx->CHSELR,
 800431c:	4303      	orrs	r3, r0
 800431e:	628b      	str	r3, [r1, #40]	; 0x28
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004320:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(ADCx->SMPR,
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	496e      	ldr	r1, [pc, #440]	; (80044e0 <HAL_ADC_ConfigChannel+0x218>)
 8004326:	6944      	ldr	r4, [r0, #20]
 8004328:	4019      	ands	r1, r3
 800432a:	4061      	eors	r1, r4
 800432c:	0213      	lsls	r3, r2, #8
 800432e:	400b      	ands	r3, r1
 8004330:	4063      	eors	r3, r4
 8004332:	6143      	str	r3, [r0, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004334:	2a00      	cmp	r2, #0
 8004336:	db65      	blt.n	8004404 <HAL_ADC_ConfigChannel+0x13c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004338:	2400      	movs	r4, #0
 800433a:	e091      	b.n	8004460 <HAL_ADC_ConfigChannel+0x198>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800433c:	211f      	movs	r1, #31
 800433e:	9b01      	ldr	r3, [sp, #4]
 8004340:	400b      	ands	r3, r1
 8004342:	9302      	str	r3, [sp, #8]
 8004344:	230f      	movs	r3, #15
 8004346:	9802      	ldr	r0, [sp, #8]
 8004348:	4083      	lsls	r3, r0
 800434a:	43db      	mvns	r3, r3
 800434c:	9304      	str	r3, [sp, #16]
 800434e:	9804      	ldr	r0, [sp, #16]
 8004350:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8004352:	4003      	ands	r3, r0
 8004354:	9305      	str	r3, [sp, #20]
 8004356:	0350      	lsls	r0, r2, #13
 8004358:	0013      	movs	r3, r2
 800435a:	2800      	cmp	r0, #0
 800435c:	d115      	bne.n	800438a <HAL_ADC_ConfigChannel+0xc2>
 800435e:	0e90      	lsrs	r0, r2, #26
 8004360:	4008      	ands	r0, r1
 8004362:	9902      	ldr	r1, [sp, #8]
 8004364:	4088      	lsls	r0, r1
 8004366:	9905      	ldr	r1, [sp, #20]
 8004368:	4308      	orrs	r0, r1
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800436a:	9901      	ldr	r1, [sp, #4]
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800436c:	6628      	str	r0, [r5, #96]	; 0x60
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800436e:	0889      	lsrs	r1, r1, #2
 8004370:	69e8      	ldr	r0, [r5, #28]
 8004372:	3101      	adds	r1, #1
 8004374:	4281      	cmp	r1, r0
 8004376:	d8d3      	bhi.n	8004320 <HAL_ADC_ConfigChannel+0x58>
  MODIFY_REG(ADCx->CHSELR,
 8004378:	9c02      	ldr	r4, [sp, #8]
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800437a:	6829      	ldr	r1, [r5, #0]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	0f1b      	lsrs	r3, r3, #28
 8004380:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8004382:	40a3      	lsls	r3, r4
 8004384:	9c04      	ldr	r4, [sp, #16]
 8004386:	4020      	ands	r0, r4
 8004388:	e7c8      	b.n	800431c <HAL_ADC_ConfigChannel+0x54>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800438a:	9803      	ldr	r0, [sp, #12]
 800438c:	4232      	tst	r2, r6
 800438e:	d1e8      	bne.n	8004362 <HAL_ADC_ConfigChannel+0x9a>
 8004390:	0030      	movs	r0, r6
 8004392:	4222      	tst	r2, r4
 8004394:	d1e5      	bne.n	8004362 <HAL_ADC_ConfigChannel+0x9a>
 8004396:	4661      	mov	r1, ip
 8004398:	0020      	movs	r0, r4
 800439a:	420a      	tst	r2, r1
 800439c:	d1e1      	bne.n	8004362 <HAL_ADC_ConfigChannel+0x9a>
 800439e:	2003      	movs	r0, #3
 80043a0:	0711      	lsls	r1, r2, #28
 80043a2:	d4de      	bmi.n	8004362 <HAL_ADC_ConfigChannel+0x9a>
 80043a4:	4660      	mov	r0, ip
 80043a6:	06d1      	lsls	r1, r2, #27
 80043a8:	d4db      	bmi.n	8004362 <HAL_ADC_ConfigChannel+0x9a>
 80043aa:	2005      	movs	r0, #5
 80043ac:	0691      	lsls	r1, r2, #26
 80043ae:	d4d8      	bmi.n	8004362 <HAL_ADC_ConfigChannel+0x9a>
 80043b0:	3001      	adds	r0, #1
 80043b2:	0651      	lsls	r1, r2, #25
 80043b4:	d4d5      	bmi.n	8004362 <HAL_ADC_ConfigChannel+0x9a>
 80043b6:	3001      	adds	r0, #1
 80043b8:	0611      	lsls	r1, r2, #24
 80043ba:	d4d2      	bmi.n	8004362 <HAL_ADC_ConfigChannel+0x9a>
 80043bc:	3001      	adds	r0, #1
 80043be:	05d1      	lsls	r1, r2, #23
 80043c0:	d4cf      	bmi.n	8004362 <HAL_ADC_ConfigChannel+0x9a>
 80043c2:	3001      	adds	r0, #1
 80043c4:	0591      	lsls	r1, r2, #22
 80043c6:	d4cc      	bmi.n	8004362 <HAL_ADC_ConfigChannel+0x9a>
 80043c8:	3001      	adds	r0, #1
 80043ca:	0551      	lsls	r1, r2, #21
 80043cc:	d4c9      	bmi.n	8004362 <HAL_ADC_ConfigChannel+0x9a>
 80043ce:	3001      	adds	r0, #1
 80043d0:	0511      	lsls	r1, r2, #20
 80043d2:	d4c6      	bmi.n	8004362 <HAL_ADC_ConfigChannel+0x9a>
 80043d4:	3001      	adds	r0, #1
 80043d6:	04d1      	lsls	r1, r2, #19
 80043d8:	d4c3      	bmi.n	8004362 <HAL_ADC_ConfigChannel+0x9a>
 80043da:	3001      	adds	r0, #1
 80043dc:	0491      	lsls	r1, r2, #18
 80043de:	d4c0      	bmi.n	8004362 <HAL_ADC_ConfigChannel+0x9a>
 80043e0:	3001      	adds	r0, #1
 80043e2:	0451      	lsls	r1, r2, #17
 80043e4:	d4bd      	bmi.n	8004362 <HAL_ADC_ConfigChannel+0x9a>
 80043e6:	3001      	adds	r0, #1
 80043e8:	0411      	lsls	r1, r2, #16
 80043ea:	d4ba      	bmi.n	8004362 <HAL_ADC_ConfigChannel+0x9a>
 80043ec:	3001      	adds	r0, #1
 80043ee:	03d1      	lsls	r1, r2, #15
 80043f0:	d4b7      	bmi.n	8004362 <HAL_ADC_ConfigChannel+0x9a>
 80043f2:	3001      	adds	r0, #1
 80043f4:	0391      	lsls	r1, r2, #14
 80043f6:	d4b4      	bmi.n	8004362 <HAL_ADC_ConfigChannel+0x9a>
 80043f8:	2080      	movs	r0, #128	; 0x80
 80043fa:	02c0      	lsls	r0, r0, #11
 80043fc:	4010      	ands	r0, r2
 80043fe:	d0b0      	beq.n	8004362 <HAL_ADC_ConfigChannel+0x9a>
 8004400:	2012      	movs	r0, #18
 8004402:	e7ae      	b.n	8004362 <HAL_ADC_ConfigChannel+0x9a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004404:	21e0      	movs	r1, #224	; 0xe0
 8004406:	4b37      	ldr	r3, [pc, #220]	; (80044e4 <HAL_ADC_ConfigChannel+0x21c>)
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004408:	4837      	ldr	r0, [pc, #220]	; (80044e8 <HAL_ADC_ConfigChannel+0x220>)
 800440a:	681c      	ldr	r4, [r3, #0]
 800440c:	0449      	lsls	r1, r1, #17
 800440e:	4021      	ands	r1, r4
 8004410:	4282      	cmp	r2, r0
 8004412:	d117      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x17c>
 8004414:	2080      	movs	r0, #128	; 0x80
 8004416:	0400      	lsls	r0, r0, #16
 8004418:	4204      	tst	r4, r0
 800441a:	d18d      	bne.n	8004338 <HAL_ADC_ConfigChannel+0x70>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	4c33      	ldr	r4, [pc, #204]	; (80044ec <HAL_ADC_ConfigChannel+0x224>)
 8004420:	4022      	ands	r2, r4
 8004422:	430a      	orrs	r2, r1
 8004424:	4302      	orrs	r2, r0
 8004426:	601a      	str	r2, [r3, #0]
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004428:	4b31      	ldr	r3, [pc, #196]	; (80044f0 <HAL_ADC_ConfigChannel+0x228>)
 800442a:	4932      	ldr	r1, [pc, #200]	; (80044f4 <HAL_ADC_ConfigChannel+0x22c>)
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	f7fb fe97 	bl	8000160 <__udivsi3>
 8004432:	9007      	str	r0, [sp, #28]
          while(wait_loop_index != 0UL)
 8004434:	9b07      	ldr	r3, [sp, #28]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d100      	bne.n	800443c <HAL_ADC_ConfigChannel+0x174>
 800443a:	e77d      	b.n	8004338 <HAL_ADC_ConfigChannel+0x70>
          {
            wait_loop_index--;
 800443c:	9b07      	ldr	r3, [sp, #28]
 800443e:	3b01      	subs	r3, #1
 8004440:	9307      	str	r3, [sp, #28]
 8004442:	e7f7      	b.n	8004434 <HAL_ADC_ConfigChannel+0x16c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004444:	482c      	ldr	r0, [pc, #176]	; (80044f8 <HAL_ADC_ConfigChannel+0x230>)
 8004446:	4282      	cmp	r2, r0
 8004448:	d110      	bne.n	800446c <HAL_ADC_ConfigChannel+0x1a4>
 800444a:	2080      	movs	r0, #128	; 0x80
 800444c:	0440      	lsls	r0, r0, #17
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800444e:	4004      	ands	r4, r0
 8004450:	d000      	beq.n	8004454 <HAL_ADC_ConfigChannel+0x18c>
 8004452:	e771      	b.n	8004338 <HAL_ADC_ConfigChannel+0x70>
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	4e25      	ldr	r6, [pc, #148]	; (80044ec <HAL_ADC_ConfigChannel+0x224>)
 8004458:	4032      	ands	r2, r6
 800445a:	430a      	orrs	r2, r1
 800445c:	4302      	orrs	r2, r0
 800445e:	601a      	str	r2, [r3, #0]
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004460:	2300      	movs	r3, #0
 8004462:	3554      	adds	r5, #84	; 0x54
 8004464:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 8004466:	0020      	movs	r0, r4
 8004468:	b009      	add	sp, #36	; 0x24
 800446a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800446c:	4823      	ldr	r0, [pc, #140]	; (80044fc <HAL_ADC_ConfigChannel+0x234>)
 800446e:	4282      	cmp	r2, r0
 8004470:	d000      	beq.n	8004474 <HAL_ADC_ConfigChannel+0x1ac>
 8004472:	e761      	b.n	8004338 <HAL_ADC_ConfigChannel+0x70>
 8004474:	2080      	movs	r0, #128	; 0x80
 8004476:	03c0      	lsls	r0, r0, #15
 8004478:	e7e9      	b.n	800444e <HAL_ADC_ConfigChannel+0x186>
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800447a:	4660      	mov	r0, ip
 800447c:	4383      	bics	r3, r0
 800447e:	428b      	cmp	r3, r1
 8004480:	d105      	bne.n	800448e <HAL_ADC_ConfigChannel+0x1c6>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8004482:	6828      	ldr	r0, [r5, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004484:	0351      	lsls	r1, r2, #13
 8004486:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004488:	0b49      	lsrs	r1, r1, #13
 800448a:	438b      	bics	r3, r1
 800448c:	6283      	str	r3, [r0, #40]	; 0x28
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800448e:	2a00      	cmp	r2, #0
 8004490:	db00      	blt.n	8004494 <HAL_ADC_ConfigChannel+0x1cc>
 8004492:	e751      	b.n	8004338 <HAL_ADC_ConfigChannel+0x70>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004494:	4b13      	ldr	r3, [pc, #76]	; (80044e4 <HAL_ADC_ConfigChannel+0x21c>)
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004496:	4914      	ldr	r1, [pc, #80]	; (80044e8 <HAL_ADC_ConfigChannel+0x220>)
 8004498:	6818      	ldr	r0, [r3, #0]
 800449a:	428a      	cmp	r2, r1
 800449c:	d108      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x1e8>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 800449e:	22a0      	movs	r2, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80044a0:	681c      	ldr	r4, [r3, #0]
 80044a2:	0452      	lsls	r2, r2, #17
 80044a4:	4911      	ldr	r1, [pc, #68]	; (80044ec <HAL_ADC_ConfigChannel+0x224>)
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 80044a6:	4002      	ands	r2, r0
 80044a8:	4021      	ands	r1, r4
 80044aa:	430a      	orrs	r2, r1
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	e743      	b.n	8004338 <HAL_ADC_ConfigChannel+0x70>
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 80044b0:	4911      	ldr	r1, [pc, #68]	; (80044f8 <HAL_ADC_ConfigChannel+0x230>)
 80044b2:	428a      	cmp	r2, r1
 80044b4:	d103      	bne.n	80044be <HAL_ADC_ConfigChannel+0x1f6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 80044b6:	22c0      	movs	r2, #192	; 0xc0
 80044b8:	681c      	ldr	r4, [r3, #0]
 80044ba:	0412      	lsls	r2, r2, #16
 80044bc:	e7f2      	b.n	80044a4 <HAL_ADC_ConfigChannel+0x1dc>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80044be:	490f      	ldr	r1, [pc, #60]	; (80044fc <HAL_ADC_ConfigChannel+0x234>)
 80044c0:	428a      	cmp	r2, r1
 80044c2:	d000      	beq.n	80044c6 <HAL_ADC_ConfigChannel+0x1fe>
 80044c4:	e738      	b.n	8004338 <HAL_ADC_ConfigChannel+0x70>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 80044c6:	22c0      	movs	r2, #192	; 0xc0
 80044c8:	0452      	lsls	r2, r2, #17
 80044ca:	6819      	ldr	r1, [r3, #0]
 80044cc:	4002      	ands	r2, r0
 80044ce:	4807      	ldr	r0, [pc, #28]	; (80044ec <HAL_ADC_ConfigChannel+0x224>)
 80044d0:	4001      	ands	r1, r0
 80044d2:	e7ea      	b.n	80044aa <HAL_ADC_ConfigChannel+0x1e2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044d4:	2320      	movs	r3, #32
 80044d6:	6daa      	ldr	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80044d8:	0034      	movs	r4, r6
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044da:	4313      	orrs	r3, r2
 80044dc:	65ab      	str	r3, [r5, #88]	; 0x58
 80044de:	e7bf      	b.n	8004460 <HAL_ADC_ConfigChannel+0x198>
 80044e0:	07ffff00 	.word	0x07ffff00
 80044e4:	40012708 	.word	0x40012708
 80044e8:	b0001000 	.word	0xb0001000
 80044ec:	fe3fffff 	.word	0xfe3fffff
 80044f0:	20000004 	.word	0x20000004
 80044f4:	00030d40 	.word	0x00030d40
 80044f8:	b8004000 	.word	0xb8004000
 80044fc:	b4002000 	.word	0xb4002000

08004500 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004500:	b570      	push	{r4, r5, r6, lr}
 8004502:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8004504:	2800      	cmp	r0, #0
 8004506:	db12      	blt.n	800452e <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004508:	0883      	lsrs	r3, r0, #2
 800450a:	4a13      	ldr	r2, [pc, #76]	; (8004558 <HAL_NVIC_SetPriority+0x58>)
 800450c:	2403      	movs	r4, #3
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	189b      	adds	r3, r3, r2
 8004512:	22ff      	movs	r2, #255	; 0xff
 8004514:	4020      	ands	r0, r4
 8004516:	40a0      	lsls	r0, r4
 8004518:	0014      	movs	r4, r2
 800451a:	25c0      	movs	r5, #192	; 0xc0
 800451c:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800451e:	4011      	ands	r1, r2
 8004520:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004522:	00ad      	lsls	r5, r5, #2
 8004524:	595e      	ldr	r6, [r3, r5]
 8004526:	43a6      	bics	r6, r4
 8004528:	4331      	orrs	r1, r6
 800452a:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800452c:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800452e:	2403      	movs	r4, #3
 8004530:	230f      	movs	r3, #15
 8004532:	b2c0      	uxtb	r0, r0
 8004534:	4003      	ands	r3, r0
 8004536:	4020      	ands	r0, r4
 8004538:	40a0      	lsls	r0, r4
 800453a:	34fc      	adds	r4, #252	; 0xfc
 800453c:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800453e:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004540:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004542:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004544:	3b08      	subs	r3, #8
 8004546:	4a05      	ldr	r2, [pc, #20]	; (800455c <HAL_NVIC_SetPriority+0x5c>)
 8004548:	089b      	lsrs	r3, r3, #2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	189b      	adds	r3, r3, r2
 800454e:	69da      	ldr	r2, [r3, #28]
 8004550:	43aa      	bics	r2, r5
 8004552:	4311      	orrs	r1, r2
 8004554:	61d9      	str	r1, [r3, #28]
 8004556:	e7e9      	b.n	800452c <HAL_NVIC_SetPriority+0x2c>
 8004558:	e000e100 	.word	0xe000e100
 800455c:	e000ed00 	.word	0xe000ed00

08004560 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004560:	2800      	cmp	r0, #0
 8004562:	db05      	blt.n	8004570 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004564:	231f      	movs	r3, #31
 8004566:	4018      	ands	r0, r3
 8004568:	3b1e      	subs	r3, #30
 800456a:	4083      	lsls	r3, r0
 800456c:	4a01      	ldr	r2, [pc, #4]	; (8004574 <HAL_NVIC_EnableIRQ+0x14>)
 800456e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004570:	4770      	bx	lr
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	e000e100 	.word	0xe000e100

08004578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004578:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800457a:	680b      	ldr	r3, [r1, #0]
{
 800457c:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800457e:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00u;
 8004580:	2300      	movs	r3, #0
{
 8004582:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004584:	9a02      	ldr	r2, [sp, #8]
 8004586:	40da      	lsrs	r2, r3
 8004588:	d101      	bne.n	800458e <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  }
}
 800458a:	b005      	add	sp, #20
 800458c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800458e:	2201      	movs	r2, #1
 8004590:	409a      	lsls	r2, r3
 8004592:	9203      	str	r2, [sp, #12]
 8004594:	9903      	ldr	r1, [sp, #12]
 8004596:	9a02      	ldr	r2, [sp, #8]
 8004598:	400a      	ands	r2, r1
 800459a:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 800459c:	d100      	bne.n	80045a0 <HAL_GPIO_Init+0x28>
 800459e:	e085      	b.n	80046ac <HAL_GPIO_Init+0x134>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045a0:	9a01      	ldr	r2, [sp, #4]
 80045a2:	2110      	movs	r1, #16
 80045a4:	6852      	ldr	r2, [r2, #4]
 80045a6:	0016      	movs	r6, r2
 80045a8:	438e      	bics	r6, r1
 80045aa:	2e02      	cmp	r6, #2
 80045ac:	d10e      	bne.n	80045cc <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045ae:	2507      	movs	r5, #7
 80045b0:	401d      	ands	r5, r3
 80045b2:	00ad      	lsls	r5, r5, #2
 80045b4:	3901      	subs	r1, #1
 80045b6:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 80045b8:	08dc      	lsrs	r4, r3, #3
 80045ba:	00a4      	lsls	r4, r4, #2
 80045bc:	1904      	adds	r4, r0, r4
 80045be:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045c0:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045c2:	9901      	ldr	r1, [sp, #4]
 80045c4:	6909      	ldr	r1, [r1, #16]
 80045c6:	40a9      	lsls	r1, r5
 80045c8:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 80045ca:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045cc:	2403      	movs	r4, #3
 80045ce:	005f      	lsls	r7, r3, #1
 80045d0:	40bc      	lsls	r4, r7
 80045d2:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80045d4:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045d6:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045d8:	4025      	ands	r5, r4
 80045da:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045dc:	2503      	movs	r5, #3
 80045de:	4015      	ands	r5, r2
 80045e0:	40bd      	lsls	r5, r7
 80045e2:	4661      	mov	r1, ip
 80045e4:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80045e6:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045e8:	2e01      	cmp	r6, #1
 80045ea:	d80f      	bhi.n	800460c <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045ec:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 80045ee:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045f0:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80045f2:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045f4:	40bd      	lsls	r5, r7
 80045f6:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80045f8:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80045fa:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045fc:	9903      	ldr	r1, [sp, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80045fe:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004600:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004602:	2101      	movs	r1, #1
 8004604:	400d      	ands	r5, r1
 8004606:	409d      	lsls	r5, r3
 8004608:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800460a:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 800460c:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800460e:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004610:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004612:	688d      	ldr	r5, [r1, #8]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004614:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004616:	40bd      	lsls	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004618:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800461a:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 800461c:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800461e:	420a      	tst	r2, r1
 8004620:	d044      	beq.n	80046ac <HAL_GPIO_Init+0x134>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004622:	2603      	movs	r6, #3
 8004624:	240f      	movs	r4, #15
 8004626:	4922      	ldr	r1, [pc, #136]	; (80046b0 <HAL_GPIO_Init+0x138>)
        temp = EXTI->EXTICR[position >> 2u];
 8004628:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800462a:	401e      	ands	r6, r3
 800462c:	00ad      	lsls	r5, r5, #2
 800462e:	00f6      	lsls	r6, r6, #3
 8004630:	186d      	adds	r5, r5, r1
 8004632:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004634:	21a0      	movs	r1, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 8004636:	6e2f      	ldr	r7, [r5, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004638:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800463a:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800463c:	2400      	movs	r4, #0
 800463e:	4288      	cmp	r0, r1
 8004640:	d00c      	beq.n	800465c <HAL_GPIO_Init+0xe4>
 8004642:	491c      	ldr	r1, [pc, #112]	; (80046b4 <HAL_GPIO_Init+0x13c>)
 8004644:	3401      	adds	r4, #1
 8004646:	4288      	cmp	r0, r1
 8004648:	d008      	beq.n	800465c <HAL_GPIO_Init+0xe4>
 800464a:	491b      	ldr	r1, [pc, #108]	; (80046b8 <HAL_GPIO_Init+0x140>)
 800464c:	3401      	adds	r4, #1
 800464e:	4288      	cmp	r0, r1
 8004650:	d004      	beq.n	800465c <HAL_GPIO_Init+0xe4>
 8004652:	491a      	ldr	r1, [pc, #104]	; (80046bc <HAL_GPIO_Init+0x144>)
 8004654:	3403      	adds	r4, #3
 8004656:	4288      	cmp	r0, r1
 8004658:	d100      	bne.n	800465c <HAL_GPIO_Init+0xe4>
 800465a:	3c02      	subs	r4, #2
 800465c:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 800465e:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004660:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8004662:	000e      	movs	r6, r1
        EXTI->EXTICR[position >> 2u] = temp;
 8004664:	662c      	str	r4, [r5, #96]	; 0x60
        temp = EXTI->IMR1;
 8004666:	4c16      	ldr	r4, [pc, #88]	; (80046c0 <HAL_GPIO_Init+0x148>)
        temp &= ~(iocurrent);
 8004668:	43cd      	mvns	r5, r1
        temp = EXTI->IMR1;
 800466a:	6fe7      	ldr	r7, [r4, #124]	; 0x7c
          temp |= iocurrent;
 800466c:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800466e:	03d1      	lsls	r1, r2, #15
 8004670:	d401      	bmi.n	8004676 <HAL_GPIO_Init+0xfe>
        temp &= ~(iocurrent);
 8004672:	003e      	movs	r6, r7
 8004674:	402e      	ands	r6, r5
        EXTI->IMR1 = temp;
 8004676:	67e6      	str	r6, [r4, #124]	; 0x7c
        temp = EXTI->EMR1;
 8004678:	4e12      	ldr	r6, [pc, #72]	; (80046c4 <HAL_GPIO_Init+0x14c>)
          temp |= iocurrent;
 800467a:	9f00      	ldr	r7, [sp, #0]
        temp = EXTI->EMR1;
 800467c:	6ff4      	ldr	r4, [r6, #124]	; 0x7c
          temp |= iocurrent;
 800467e:	4327      	orrs	r7, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004680:	0391      	lsls	r1, r2, #14
 8004682:	d401      	bmi.n	8004688 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 8004684:	402c      	ands	r4, r5
 8004686:	0027      	movs	r7, r4
        EXTI->EMR1 = temp;
 8004688:	4c09      	ldr	r4, [pc, #36]	; (80046b0 <HAL_GPIO_Init+0x138>)
 800468a:	67f7      	str	r7, [r6, #124]	; 0x7c
        temp = EXTI->RTSR1;
 800468c:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 800468e:	9e00      	ldr	r6, [sp, #0]
 8004690:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004692:	02d1      	lsls	r1, r2, #11
 8004694:	d401      	bmi.n	800469a <HAL_GPIO_Init+0x122>
        temp &= ~(iocurrent);
 8004696:	003e      	movs	r6, r7
 8004698:	402e      	ands	r6, r5
        EXTI->RTSR1 = temp;
 800469a:	6026      	str	r6, [r4, #0]
        temp = EXTI->FTSR1;
 800469c:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 800469e:	9f00      	ldr	r7, [sp, #0]
 80046a0:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046a2:	0292      	lsls	r2, r2, #10
 80046a4:	d401      	bmi.n	80046aa <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 80046a6:	402e      	ands	r6, r5
 80046a8:	0037      	movs	r7, r6
        EXTI->FTSR1 = temp;
 80046aa:	6067      	str	r7, [r4, #4]
    position++;
 80046ac:	3301      	adds	r3, #1
 80046ae:	e769      	b.n	8004584 <HAL_GPIO_Init+0xc>
 80046b0:	40021800 	.word	0x40021800
 80046b4:	50000400 	.word	0x50000400
 80046b8:	50000800 	.word	0x50000800
 80046bc:	50000c00 	.word	0x50000c00
 80046c0:	40021804 	.word	0x40021804
 80046c4:	40021808 	.word	0x40021808

080046c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80046c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 80046ca:	2300      	movs	r3, #0
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80046cc:	2703      	movs	r7, #3
{
 80046ce:	b085      	sub	sp, #20
 80046d0:	9102      	str	r1, [sp, #8]
  while ((GPIO_Pin >> position) != 0x00u)
 80046d2:	9a02      	ldr	r2, [sp, #8]
 80046d4:	40da      	lsrs	r2, r3
 80046d6:	d101      	bne.n	80046dc <HAL_GPIO_DeInit+0x14>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
    }

    position++;
  }
}
 80046d8:	b005      	add	sp, #20
 80046da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 80046dc:	2201      	movs	r2, #1
 80046de:	409a      	lsls	r2, r3
 80046e0:	9902      	ldr	r1, [sp, #8]
 80046e2:	9200      	str	r2, [sp, #0]
 80046e4:	4011      	ands	r1, r2
    if (iocurrent != 0x00u)
 80046e6:	d056      	beq.n	8004796 <HAL_GPIO_DeInit+0xce>
 80046e8:	4c2c      	ldr	r4, [pc, #176]	; (800479c <HAL_GPIO_DeInit+0xd4>)
      tmp = EXTI->EXTICR[position >> 2u];
 80046ea:	089a      	lsrs	r2, r3, #2
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80046ec:	001d      	movs	r5, r3
 80046ee:	0092      	lsls	r2, r2, #2
 80046f0:	1912      	adds	r2, r2, r4
 80046f2:	240f      	movs	r4, #15
 80046f4:	403d      	ands	r5, r7
 80046f6:	00ed      	lsls	r5, r5, #3
 80046f8:	40ac      	lsls	r4, r5
      tmp = EXTI->EXTICR[position >> 2u];
 80046fa:	6e16      	ldr	r6, [r2, #96]	; 0x60
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80046fc:	9401      	str	r4, [sp, #4]
 80046fe:	4026      	ands	r6, r4
 8004700:	9603      	str	r6, [sp, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8004702:	26a0      	movs	r6, #160	; 0xa0
 8004704:	2400      	movs	r4, #0
 8004706:	05f6      	lsls	r6, r6, #23
 8004708:	42b0      	cmp	r0, r6
 800470a:	d00f      	beq.n	800472c <HAL_GPIO_DeInit+0x64>
 800470c:	4c24      	ldr	r4, [pc, #144]	; (80047a0 <HAL_GPIO_DeInit+0xd8>)
 800470e:	46a4      	mov	ip, r4
 8004710:	2401      	movs	r4, #1
 8004712:	4560      	cmp	r0, ip
 8004714:	d00a      	beq.n	800472c <HAL_GPIO_DeInit+0x64>
 8004716:	4c23      	ldr	r4, [pc, #140]	; (80047a4 <HAL_GPIO_DeInit+0xdc>)
 8004718:	46a4      	mov	ip, r4
 800471a:	2402      	movs	r4, #2
 800471c:	4560      	cmp	r0, ip
 800471e:	d005      	beq.n	800472c <HAL_GPIO_DeInit+0x64>
 8004720:	4c21      	ldr	r4, [pc, #132]	; (80047a8 <HAL_GPIO_DeInit+0xe0>)
 8004722:	46a4      	mov	ip, r4
 8004724:	003c      	movs	r4, r7
 8004726:	4560      	cmp	r0, ip
 8004728:	d000      	beq.n	800472c <HAL_GPIO_DeInit+0x64>
 800472a:	2405      	movs	r4, #5
 800472c:	40ac      	lsls	r4, r5
 800472e:	9d03      	ldr	r5, [sp, #12]
 8004730:	42a5      	cmp	r5, r4
 8004732:	d113      	bne.n	800475c <HAL_GPIO_DeInit+0x94>
        EXTI->IMR1 &= ~(iocurrent);
 8004734:	43c9      	mvns	r1, r1
 8004736:	4e1d      	ldr	r6, [pc, #116]	; (80047ac <HAL_GPIO_DeInit+0xe4>)
 8004738:	4c18      	ldr	r4, [pc, #96]	; (800479c <HAL_GPIO_DeInit+0xd4>)
 800473a:	6ff5      	ldr	r5, [r6, #124]	; 0x7c
 800473c:	400d      	ands	r5, r1
 800473e:	67f5      	str	r5, [r6, #124]	; 0x7c
        EXTI->EMR1 &= ~(iocurrent);
 8004740:	4e1b      	ldr	r6, [pc, #108]	; (80047b0 <HAL_GPIO_DeInit+0xe8>)
 8004742:	6ff5      	ldr	r5, [r6, #124]	; 0x7c
 8004744:	400d      	ands	r5, r1
 8004746:	67f5      	str	r5, [r6, #124]	; 0x7c
        EXTI->RTSR1 &= ~(iocurrent);
 8004748:	6825      	ldr	r5, [r4, #0]
 800474a:	400d      	ands	r5, r1
 800474c:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800474e:	6865      	ldr	r5, [r4, #4]
 8004750:	4029      	ands	r1, r5
 8004752:	6061      	str	r1, [r4, #4]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8004754:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8004756:	9c01      	ldr	r4, [sp, #4]
 8004758:	43a1      	bics	r1, r4
 800475a:	6611      	str	r1, [r2, #96]	; 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800475c:	003c      	movs	r4, r7
 800475e:	0059      	lsls	r1, r3, #1
 8004760:	408c      	lsls	r4, r1
 8004762:	6802      	ldr	r2, [r0, #0]
 8004764:	0021      	movs	r1, r4
 8004766:	4322      	orrs	r2, r4
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004768:	2407      	movs	r4, #7
 800476a:	260f      	movs	r6, #15
 800476c:	401c      	ands	r4, r3
 800476e:	00a4      	lsls	r4, r4, #2
 8004770:	40a6      	lsls	r6, r4
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004772:	43c9      	mvns	r1, r1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004774:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004776:	08da      	lsrs	r2, r3, #3
 8004778:	0092      	lsls	r2, r2, #2
 800477a:	1882      	adds	r2, r0, r2
 800477c:	6a15      	ldr	r5, [r2, #32]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800477e:	9c00      	ldr	r4, [sp, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004780:	43b5      	bics	r5, r6
 8004782:	6215      	str	r5, [r2, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004784:	6882      	ldr	r2, [r0, #8]
 8004786:	400a      	ands	r2, r1
 8004788:	6082      	str	r2, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800478a:	6842      	ldr	r2, [r0, #4]
 800478c:	43a2      	bics	r2, r4
 800478e:	6042      	str	r2, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004790:	68c2      	ldr	r2, [r0, #12]
 8004792:	4011      	ands	r1, r2
 8004794:	60c1      	str	r1, [r0, #12]
    position++;
 8004796:	3301      	adds	r3, #1
 8004798:	e79b      	b.n	80046d2 <HAL_GPIO_DeInit+0xa>
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	40021800 	.word	0x40021800
 80047a0:	50000400 	.word	0x50000400
 80047a4:	50000800 	.word	0x50000800
 80047a8:	50000c00 	.word	0x50000c00
 80047ac:	40021804 	.word	0x40021804
 80047b0:	40021808 	.word	0x40021808

080047b4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80047b4:	6900      	ldr	r0, [r0, #16]
 80047b6:	4008      	ands	r0, r1
 80047b8:	1e41      	subs	r1, r0, #1
 80047ba:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80047bc:	b2c0      	uxtb	r0, r0
}
 80047be:	4770      	bx	lr

080047c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047c0:	2a00      	cmp	r2, #0
 80047c2:	d001      	beq.n	80047c8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047c4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047c6:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047c8:	6281      	str	r1, [r0, #40]	; 0x28
}
 80047ca:	e7fc      	b.n	80047c6 <HAL_GPIO_WritePin+0x6>

080047cc <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80047cc:	6943      	ldr	r3, [r0, #20]
 80047ce:	4219      	tst	r1, r3
 80047d0:	d001      	beq.n	80047d6 <HAL_GPIO_TogglePin+0xa>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047d2:	6281      	str	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80047d4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047d6:	6181      	str	r1, [r0, #24]
}
 80047d8:	e7fc      	b.n	80047d4 <HAL_GPIO_TogglePin+0x8>
	...

080047dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047dc:	b570      	push	{r4, r5, r6, lr}
 80047de:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 80047e0:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80047e2:	2c00      	cmp	r4, #0
 80047e4:	d03f      	beq.n	8004866 <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047e6:	0025      	movs	r5, r4
 80047e8:	3541      	adds	r5, #65	; 0x41
 80047ea:	782b      	ldrb	r3, [r5, #0]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d105      	bne.n	80047fe <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047f2:	0022      	movs	r2, r4
 80047f4:	3240      	adds	r2, #64	; 0x40
 80047f6:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80047f8:	0020      	movs	r0, r4
 80047fa:	f7ff f8fd 	bl	80039f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047fe:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004800:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004802:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8004804:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004806:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68a6      	ldr	r6, [r4, #8]
 800480c:	438a      	bics	r2, r1
 800480e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004810:	6861      	ldr	r1, [r4, #4]
 8004812:	4a1a      	ldr	r2, [pc, #104]	; (800487c <HAL_I2C_Init+0xa0>)
 8004814:	400a      	ands	r2, r1
 8004816:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004818:	6899      	ldr	r1, [r3, #8]
 800481a:	4a19      	ldr	r2, [pc, #100]	; (8004880 <HAL_I2C_Init+0xa4>)
 800481c:	4011      	ands	r1, r2
 800481e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004820:	2801      	cmp	r0, #1
 8004822:	d121      	bne.n	8004868 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004824:	2180      	movs	r1, #128	; 0x80
 8004826:	0209      	lsls	r1, r1, #8
 8004828:	4331      	orrs	r1, r6
 800482a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800482c:	6858      	ldr	r0, [r3, #4]
 800482e:	4915      	ldr	r1, [pc, #84]	; (8004884 <HAL_I2C_Init+0xa8>)
 8004830:	4301      	orrs	r1, r0
 8004832:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004834:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004836:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004838:	400a      	ands	r2, r1
 800483a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800483c:	6961      	ldr	r1, [r4, #20]
 800483e:	6922      	ldr	r2, [r4, #16]
 8004840:	430a      	orrs	r2, r1
 8004842:	69a1      	ldr	r1, [r4, #24]
 8004844:	0209      	lsls	r1, r1, #8
 8004846:	430a      	orrs	r2, r1
 8004848:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800484a:	6a21      	ldr	r1, [r4, #32]
 800484c:	69e2      	ldr	r2, [r4, #28]
 800484e:	430a      	orrs	r2, r1
 8004850:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004852:	2201      	movs	r2, #1
 8004854:	6819      	ldr	r1, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800485a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800485c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800485e:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004860:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004862:	3442      	adds	r4, #66	; 0x42
 8004864:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8004866:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004868:	2184      	movs	r1, #132	; 0x84
 800486a:	0209      	lsls	r1, r1, #8
 800486c:	4331      	orrs	r1, r6
 800486e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004870:	2802      	cmp	r0, #2
 8004872:	d1db      	bne.n	800482c <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004874:	2180      	movs	r1, #128	; 0x80
 8004876:	0109      	lsls	r1, r1, #4
 8004878:	6059      	str	r1, [r3, #4]
 800487a:	e7d7      	b.n	800482c <HAL_I2C_Init+0x50>
 800487c:	f0ffffff 	.word	0xf0ffffff
 8004880:	ffff7fff 	.word	0xffff7fff
 8004884:	02008000 	.word	0x02008000

08004888 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004888:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800488a:	0004      	movs	r4, r0
 800488c:	3441      	adds	r4, #65	; 0x41
 800488e:	7822      	ldrb	r2, [r4, #0]
{
 8004890:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004892:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004894:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004896:	2a20      	cmp	r2, #32
 8004898:	d118      	bne.n	80048cc <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 800489a:	001d      	movs	r5, r3
 800489c:	3540      	adds	r5, #64	; 0x40
 800489e:	782e      	ldrb	r6, [r5, #0]
 80048a0:	2e01      	cmp	r6, #1
 80048a2:	d013      	beq.n	80048cc <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 80048a4:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80048a6:	3022      	adds	r0, #34	; 0x22
 80048a8:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 80048aa:	681e      	ldr	r6, [r3, #0]
 80048ac:	3823      	subs	r0, #35	; 0x23
 80048ae:	4386      	bics	r6, r0
 80048b0:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048b2:	681e      	ldr	r6, [r3, #0]
 80048b4:	4f06      	ldr	r7, [pc, #24]	; (80048d0 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 80048b6:	403e      	ands	r6, r7
 80048b8:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80048ba:	681e      	ldr	r6, [r3, #0]
 80048bc:	4331      	orrs	r1, r6
 80048be:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80048c0:	6819      	ldr	r1, [r3, #0]
 80048c2:	4308      	orrs	r0, r1
 80048c4:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80048c6:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80048c8:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80048ca:	7028      	strb	r0, [r5, #0]
  }
}
 80048cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	ffffefff 	.word	0xffffefff

080048d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048d4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048d6:	0005      	movs	r5, r0
 80048d8:	3541      	adds	r5, #65	; 0x41
 80048da:	782a      	ldrb	r2, [r5, #0]
{
 80048dc:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80048de:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80048e0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80048e2:	2a20      	cmp	r2, #32
 80048e4:	d117      	bne.n	8004916 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 80048e6:	001c      	movs	r4, r3
 80048e8:	3440      	adds	r4, #64	; 0x40
 80048ea:	7826      	ldrb	r6, [r4, #0]
 80048ec:	2e01      	cmp	r6, #1
 80048ee:	d012      	beq.n	8004916 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 80048f0:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80048f2:	3022      	adds	r0, #34	; 0x22
 80048f4:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 80048f6:	681e      	ldr	r6, [r3, #0]
 80048f8:	3823      	subs	r0, #35	; 0x23
 80048fa:	4386      	bics	r6, r0
 80048fc:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80048fe:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8004900:	4f05      	ldr	r7, [pc, #20]	; (8004918 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8004902:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8004904:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8004906:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8004908:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800490a:	6819      	ldr	r1, [r3, #0]
 800490c:	4308      	orrs	r0, r1
 800490e:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8004910:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004912:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8004914:	7020      	strb	r0, [r4, #0]
  }
}
 8004916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004918:	fffff0ff 	.word	0xfffff0ff

0800491c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800491c:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800491e:	4c10      	ldr	r4, [pc, #64]	; (8004960 <HAL_PWREx_ControlVoltageScaling+0x44>)
 8004920:	4910      	ldr	r1, [pc, #64]	; (8004964 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8004922:	6823      	ldr	r3, [r4, #0]
{
 8004924:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004926:	400b      	ands	r3, r1
 8004928:	4303      	orrs	r3, r0
 800492a:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800492c:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800492e:	2000      	movs	r0, #0
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	429a      	cmp	r2, r3
 8004934:	d10c      	bne.n	8004950 <HAL_PWREx_ControlVoltageScaling+0x34>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8004936:	4b0c      	ldr	r3, [pc, #48]	; (8004968 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8004938:	490c      	ldr	r1, [pc, #48]	; (800496c <HAL_PWREx_ControlVoltageScaling+0x50>)
 800493a:	6818      	ldr	r0, [r3, #0]
 800493c:	2306      	movs	r3, #6
 800493e:	4358      	muls	r0, r3
 8004940:	f7fb fc0e 	bl	8000160 <__udivsi3>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004944:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8004946:	1c43      	adds	r3, r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004948:	00d2      	lsls	r2, r2, #3
 800494a:	6960      	ldr	r0, [r4, #20]
 800494c:	4010      	ands	r0, r2
 800494e:	d100      	bne.n	8004952 <HAL_PWREx_ControlVoltageScaling+0x36>
}
 8004950:	bd10      	pop	{r4, pc}
      if(wait_loop_index != 0U)
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <HAL_PWREx_ControlVoltageScaling+0x3e>
        wait_loop_index--;
 8004956:	3b01      	subs	r3, #1
 8004958:	e7f7      	b.n	800494a <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 800495a:	2003      	movs	r0, #3
 800495c:	e7f8      	b.n	8004950 <HAL_PWREx_ControlVoltageScaling+0x34>
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	40007000 	.word	0x40007000
 8004964:	fffff9ff 	.word	0xfffff9ff
 8004968:	20000004 	.word	0x20000004
 800496c:	000f4240 	.word	0x000f4240

08004970 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004972:	0004      	movs	r4, r0
 8004974:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004976:	2800      	cmp	r0, #0
 8004978:	d102      	bne.n	8004980 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800497a:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 800497c:	b005      	add	sp, #20
 800497e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004980:	6803      	ldr	r3, [r0, #0]
 8004982:	07db      	lsls	r3, r3, #31
 8004984:	d410      	bmi.n	80049a8 <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	079b      	lsls	r3, r3, #30
 800498a:	d45c      	bmi.n	8004a46 <HAL_RCC_OscConfig+0xd6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	071b      	lsls	r3, r3, #28
 8004990:	d500      	bpl.n	8004994 <HAL_RCC_OscConfig+0x24>
 8004992:	e0c2      	b.n	8004b1a <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004994:	6823      	ldr	r3, [r4, #0]
 8004996:	075b      	lsls	r3, r3, #29
 8004998:	d500      	bpl.n	800499c <HAL_RCC_OscConfig+0x2c>
 800499a:	e0f4      	b.n	8004b86 <HAL_RCC_OscConfig+0x216>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800499c:	69e2      	ldr	r2, [r4, #28]
 800499e:	2a00      	cmp	r2, #0
 80049a0:	d000      	beq.n	80049a4 <HAL_RCC_OscConfig+0x34>
 80049a2:	e173      	b.n	8004c8c <HAL_RCC_OscConfig+0x31c>
  return HAL_OK;
 80049a4:	2000      	movs	r0, #0
 80049a6:	e7e9      	b.n	800497c <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049a8:	2238      	movs	r2, #56	; 0x38
 80049aa:	4dac      	ldr	r5, [pc, #688]	; (8004c5c <HAL_RCC_OscConfig+0x2ec>)
 80049ac:	68ab      	ldr	r3, [r5, #8]
 80049ae:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049b0:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80049b2:	2b10      	cmp	r3, #16
 80049b4:	d109      	bne.n	80049ca <HAL_RCC_OscConfig+0x5a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049b6:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80049b8:	0793      	lsls	r3, r2, #30
 80049ba:	d108      	bne.n	80049ce <HAL_RCC_OscConfig+0x5e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049bc:	682b      	ldr	r3, [r5, #0]
 80049be:	039b      	lsls	r3, r3, #14
 80049c0:	d5e1      	bpl.n	8004986 <HAL_RCC_OscConfig+0x16>
 80049c2:	6863      	ldr	r3, [r4, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1de      	bne.n	8004986 <HAL_RCC_OscConfig+0x16>
 80049c8:	e7d7      	b.n	800497a <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d0f6      	beq.n	80049bc <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049ce:	2280      	movs	r2, #128	; 0x80
 80049d0:	6863      	ldr	r3, [r4, #4]
 80049d2:	0252      	lsls	r2, r2, #9
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d111      	bne.n	80049fc <HAL_RCC_OscConfig+0x8c>
 80049d8:	682a      	ldr	r2, [r5, #0]
 80049da:	4313      	orrs	r3, r2
 80049dc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80049de:	f7ff fb1f 	bl	8004020 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049e2:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80049e4:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049e6:	02b6      	lsls	r6, r6, #10
 80049e8:	682b      	ldr	r3, [r5, #0]
 80049ea:	4233      	tst	r3, r6
 80049ec:	d1cb      	bne.n	8004986 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049ee:	f7ff fb17 	bl	8004020 <HAL_GetTick>
 80049f2:	1bc0      	subs	r0, r0, r7
 80049f4:	2864      	cmp	r0, #100	; 0x64
 80049f6:	d9f7      	bls.n	80049e8 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80049f8:	2003      	movs	r0, #3
 80049fa:	e7bf      	b.n	800497c <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049fc:	21a0      	movs	r1, #160	; 0xa0
 80049fe:	02c9      	lsls	r1, r1, #11
 8004a00:	428b      	cmp	r3, r1
 8004a02:	d108      	bne.n	8004a16 <HAL_RCC_OscConfig+0xa6>
 8004a04:	2380      	movs	r3, #128	; 0x80
 8004a06:	6829      	ldr	r1, [r5, #0]
 8004a08:	02db      	lsls	r3, r3, #11
 8004a0a:	430b      	orrs	r3, r1
 8004a0c:	602b      	str	r3, [r5, #0]
 8004a0e:	682b      	ldr	r3, [r5, #0]
 8004a10:	431a      	orrs	r2, r3
 8004a12:	602a      	str	r2, [r5, #0]
 8004a14:	e7e3      	b.n	80049de <HAL_RCC_OscConfig+0x6e>
 8004a16:	682a      	ldr	r2, [r5, #0]
 8004a18:	4991      	ldr	r1, [pc, #580]	; (8004c60 <HAL_RCC_OscConfig+0x2f0>)
 8004a1a:	400a      	ands	r2, r1
 8004a1c:	602a      	str	r2, [r5, #0]
 8004a1e:	682a      	ldr	r2, [r5, #0]
 8004a20:	4990      	ldr	r1, [pc, #576]	; (8004c64 <HAL_RCC_OscConfig+0x2f4>)
 8004a22:	400a      	ands	r2, r1
 8004a24:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1d9      	bne.n	80049de <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8004a2a:	f7ff faf9 	bl	8004020 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a2e:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8004a30:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a32:	02b6      	lsls	r6, r6, #10
 8004a34:	682b      	ldr	r3, [r5, #0]
 8004a36:	4233      	tst	r3, r6
 8004a38:	d0a5      	beq.n	8004986 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a3a:	f7ff faf1 	bl	8004020 <HAL_GetTick>
 8004a3e:	1bc0      	subs	r0, r0, r7
 8004a40:	2864      	cmp	r0, #100	; 0x64
 8004a42:	d9f7      	bls.n	8004a34 <HAL_RCC_OscConfig+0xc4>
 8004a44:	e7d8      	b.n	80049f8 <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a46:	2338      	movs	r3, #56	; 0x38
 8004a48:	4d84      	ldr	r5, [pc, #528]	; (8004c5c <HAL_RCC_OscConfig+0x2ec>)
 8004a4a:	68aa      	ldr	r2, [r5, #8]
 8004a4c:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a4e:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d129      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x138>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a54:	2103      	movs	r1, #3
 8004a56:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a58:	2a02      	cmp	r2, #2
 8004a5a:	d127      	bne.n	8004aac <HAL_RCC_OscConfig+0x13c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a5c:	682a      	ldr	r2, [r5, #0]
 8004a5e:	0552      	lsls	r2, r2, #21
 8004a60:	d503      	bpl.n	8004a6a <HAL_RCC_OscConfig+0xfa>
 8004a62:	68e2      	ldr	r2, [r4, #12]
 8004a64:	2a00      	cmp	r2, #0
 8004a66:	d100      	bne.n	8004a6a <HAL_RCC_OscConfig+0xfa>
 8004a68:	e787      	b.n	800497a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a6a:	6869      	ldr	r1, [r5, #4]
 8004a6c:	6962      	ldr	r2, [r4, #20]
 8004a6e:	487e      	ldr	r0, [pc, #504]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 8004a70:	0212      	lsls	r2, r2, #8
 8004a72:	4001      	ands	r1, r0
 8004a74:	430a      	orrs	r2, r1
 8004a76:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10d      	bne.n	8004a98 <HAL_RCC_OscConfig+0x128>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004a7c:	682b      	ldr	r3, [r5, #0]
 8004a7e:	4a7b      	ldr	r2, [pc, #492]	; (8004c6c <HAL_RCC_OscConfig+0x2fc>)
 8004a80:	4013      	ands	r3, r2
 8004a82:	6922      	ldr	r2, [r4, #16]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004a88:	682b      	ldr	r3, [r5, #0]
 8004a8a:	4a79      	ldr	r2, [pc, #484]	; (8004c70 <HAL_RCC_OscConfig+0x300>)
 8004a8c:	049b      	lsls	r3, r3, #18
 8004a8e:	0f5b      	lsrs	r3, r3, #29
 8004a90:	40da      	lsrs	r2, r3
 8004a92:	0013      	movs	r3, r2
 8004a94:	4a77      	ldr	r2, [pc, #476]	; (8004c74 <HAL_RCC_OscConfig+0x304>)
 8004a96:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a98:	4b77      	ldr	r3, [pc, #476]	; (8004c78 <HAL_RCC_OscConfig+0x308>)
 8004a9a:	6818      	ldr	r0, [r3, #0]
 8004a9c:	f7ff f948 	bl	8003d30 <HAL_InitTick>
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	d100      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x136>
 8004aa4:	e772      	b.n	800498c <HAL_RCC_OscConfig+0x1c>
 8004aa6:	e768      	b.n	800497a <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0d7      	beq.n	8004a5c <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004aac:	68e3      	ldr	r3, [r4, #12]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d020      	beq.n	8004af4 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004ab2:	682b      	ldr	r3, [r5, #0]
 8004ab4:	4a6d      	ldr	r2, [pc, #436]	; (8004c6c <HAL_RCC_OscConfig+0x2fc>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ab6:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004ab8:	4013      	ands	r3, r2
 8004aba:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004abc:	00f6      	lsls	r6, r6, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8004ac2:	2380      	movs	r3, #128	; 0x80
 8004ac4:	682a      	ldr	r2, [r5, #0]
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004acc:	f7ff faa8 	bl	8004020 <HAL_GetTick>
 8004ad0:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ad2:	682b      	ldr	r3, [r5, #0]
 8004ad4:	4233      	tst	r3, r6
 8004ad6:	d007      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad8:	686a      	ldr	r2, [r5, #4]
 8004ada:	6963      	ldr	r3, [r4, #20]
 8004adc:	4962      	ldr	r1, [pc, #392]	; (8004c68 <HAL_RCC_OscConfig+0x2f8>)
 8004ade:	021b      	lsls	r3, r3, #8
 8004ae0:	400a      	ands	r2, r1
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	606b      	str	r3, [r5, #4]
 8004ae6:	e751      	b.n	800498c <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ae8:	f7ff fa9a 	bl	8004020 <HAL_GetTick>
 8004aec:	1bc0      	subs	r0, r0, r7
 8004aee:	2802      	cmp	r0, #2
 8004af0:	d9ef      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x162>
 8004af2:	e781      	b.n	80049f8 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8004af4:	682b      	ldr	r3, [r5, #0]
 8004af6:	4a61      	ldr	r2, [pc, #388]	; (8004c7c <HAL_RCC_OscConfig+0x30c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004af8:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8004afa:	4013      	ands	r3, r2
 8004afc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004afe:	f7ff fa8f 	bl	8004020 <HAL_GetTick>
 8004b02:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b04:	00f6      	lsls	r6, r6, #3
 8004b06:	682b      	ldr	r3, [r5, #0]
 8004b08:	4233      	tst	r3, r6
 8004b0a:	d100      	bne.n	8004b0e <HAL_RCC_OscConfig+0x19e>
 8004b0c:	e73e      	b.n	800498c <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b0e:	f7ff fa87 	bl	8004020 <HAL_GetTick>
 8004b12:	1bc0      	subs	r0, r0, r7
 8004b14:	2802      	cmp	r0, #2
 8004b16:	d9f6      	bls.n	8004b06 <HAL_RCC_OscConfig+0x196>
 8004b18:	e76e      	b.n	80049f8 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004b1a:	2138      	movs	r1, #56	; 0x38
 8004b1c:	4b4f      	ldr	r3, [pc, #316]	; (8004c5c <HAL_RCC_OscConfig+0x2ec>)
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	001d      	movs	r5, r3
 8004b22:	400a      	ands	r2, r1
 8004b24:	2a18      	cmp	r2, #24
 8004b26:	d108      	bne.n	8004b3a <HAL_RCC_OscConfig+0x1ca>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b2a:	079b      	lsls	r3, r3, #30
 8004b2c:	d400      	bmi.n	8004b30 <HAL_RCC_OscConfig+0x1c0>
 8004b2e:	e731      	b.n	8004994 <HAL_RCC_OscConfig+0x24>
 8004b30:	69a3      	ldr	r3, [r4, #24]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d000      	beq.n	8004b38 <HAL_RCC_OscConfig+0x1c8>
 8004b36:	e72d      	b.n	8004994 <HAL_RCC_OscConfig+0x24>
 8004b38:	e71f      	b.n	800497a <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b3a:	69a2      	ldr	r2, [r4, #24]
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	2a00      	cmp	r2, #0
 8004b40:	d010      	beq.n	8004b64 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_LSI_ENABLE();
 8004b42:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b44:	2602      	movs	r6, #2
        __HAL_RCC_LSI_ENABLE();
 8004b46:	4313      	orrs	r3, r2
 8004b48:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004b4a:	f7ff fa69 	bl	8004020 <HAL_GetTick>
 8004b4e:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b50:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8004b52:	4233      	tst	r3, r6
 8004b54:	d000      	beq.n	8004b58 <HAL_RCC_OscConfig+0x1e8>
 8004b56:	e71d      	b.n	8004994 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b58:	f7ff fa62 	bl	8004020 <HAL_GetTick>
 8004b5c:	1bc0      	subs	r0, r0, r7
 8004b5e:	2802      	cmp	r0, #2
 8004b60:	d9f6      	bls.n	8004b50 <HAL_RCC_OscConfig+0x1e0>
 8004b62:	e749      	b.n	80049f8 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_LSI_DISABLE();
 8004b64:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b66:	2602      	movs	r6, #2
        __HAL_RCC_LSI_DISABLE();
 8004b68:	439a      	bics	r2, r3
 8004b6a:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004b6c:	f7ff fa58 	bl	8004020 <HAL_GetTick>
 8004b70:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b72:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8004b74:	4233      	tst	r3, r6
 8004b76:	d100      	bne.n	8004b7a <HAL_RCC_OscConfig+0x20a>
 8004b78:	e70c      	b.n	8004994 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b7a:	f7ff fa51 	bl	8004020 <HAL_GetTick>
 8004b7e:	1bc0      	subs	r0, r0, r7
 8004b80:	2802      	cmp	r0, #2
 8004b82:	d9f6      	bls.n	8004b72 <HAL_RCC_OscConfig+0x202>
 8004b84:	e738      	b.n	80049f8 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004b86:	2138      	movs	r1, #56	; 0x38
 8004b88:	4b34      	ldr	r3, [pc, #208]	; (8004c5c <HAL_RCC_OscConfig+0x2ec>)
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	001d      	movs	r5, r3
 8004b8e:	400a      	ands	r2, r1
 8004b90:	2a20      	cmp	r2, #32
 8004b92:	d108      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x236>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b96:	079b      	lsls	r3, r3, #30
 8004b98:	d400      	bmi.n	8004b9c <HAL_RCC_OscConfig+0x22c>
 8004b9a:	e6ff      	b.n	800499c <HAL_RCC_OscConfig+0x2c>
 8004b9c:	68a3      	ldr	r3, [r4, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d000      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x234>
 8004ba2:	e6fb      	b.n	800499c <HAL_RCC_OscConfig+0x2c>
 8004ba4:	e6e9      	b.n	800497a <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ba6:	2280      	movs	r2, #128	; 0x80
 8004ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004baa:	0552      	lsls	r2, r2, #21
 8004bac:	4213      	tst	r3, r2
 8004bae:	d100      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x242>
 8004bb0:	e0ed      	b.n	8004d8e <HAL_RCC_OscConfig+0x41e>
    FlagStatus       pwrclkchanged = RESET;
 8004bb2:	2300      	movs	r3, #0
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bb4:	2780      	movs	r7, #128	; 0x80
 8004bb6:	4e32      	ldr	r6, [pc, #200]	; (8004c80 <HAL_RCC_OscConfig+0x310>)
    FlagStatus       pwrclkchanged = RESET;
 8004bb8:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bba:	6833      	ldr	r3, [r6, #0]
 8004bbc:	007f      	lsls	r7, r7, #1
 8004bbe:	423b      	tst	r3, r7
 8004bc0:	d015      	beq.n	8004bee <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bc2:	68a3      	ldr	r3, [r4, #8]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d122      	bne.n	8004c0e <HAL_RCC_OscConfig+0x29e>
 8004bc8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8004bce:	f7ff fa27 	bl	8004020 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bd2:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8004bd4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bd6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8004bd8:	423b      	tst	r3, r7
 8004bda:	d038      	beq.n	8004c4e <HAL_RCC_OscConfig+0x2de>
      if (pwrclkchanged == SET)
 8004bdc:	9b00      	ldr	r3, [sp, #0]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d000      	beq.n	8004be4 <HAL_RCC_OscConfig+0x274>
 8004be2:	e6db      	b.n	800499c <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 8004be4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004be6:	4a27      	ldr	r2, [pc, #156]	; (8004c84 <HAL_RCC_OscConfig+0x314>)
 8004be8:	4013      	ands	r3, r2
 8004bea:	63eb      	str	r3, [r5, #60]	; 0x3c
 8004bec:	e6d6      	b.n	800499c <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bee:	6833      	ldr	r3, [r6, #0]
 8004bf0:	433b      	orrs	r3, r7
 8004bf2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004bf4:	f7ff fa14 	bl	8004020 <HAL_GetTick>
 8004bf8:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bfa:	6833      	ldr	r3, [r6, #0]
 8004bfc:	423b      	tst	r3, r7
 8004bfe:	d1e0      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x252>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c00:	f7ff fa0e 	bl	8004020 <HAL_GetTick>
 8004c04:	9b01      	ldr	r3, [sp, #4]
 8004c06:	1ac0      	subs	r0, r0, r3
 8004c08:	2802      	cmp	r0, #2
 8004c0a:	d9f6      	bls.n	8004bfa <HAL_RCC_OscConfig+0x28a>
 8004c0c:	e6f4      	b.n	80049f8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c0e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8004c10:	2b05      	cmp	r3, #5
 8004c12:	d105      	bne.n	8004c20 <HAL_RCC_OscConfig+0x2b0>
 8004c14:	3b01      	subs	r3, #1
 8004c16:	4313      	orrs	r3, r2
 8004c18:	65eb      	str	r3, [r5, #92]	; 0x5c
 8004c1a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e7d4      	b.n	8004bca <HAL_RCC_OscConfig+0x25a>
 8004c20:	2101      	movs	r1, #1
 8004c22:	438a      	bics	r2, r1
 8004c24:	65ea      	str	r2, [r5, #92]	; 0x5c
 8004c26:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8004c28:	3103      	adds	r1, #3
 8004c2a:	438a      	bics	r2, r1
 8004c2c:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1cd      	bne.n	8004bce <HAL_RCC_OscConfig+0x25e>
        tickstart = HAL_GetTick();
 8004c32:	f7ff f9f5 	bl	8004020 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c36:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8004c38:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c3a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8004c3c:	423b      	tst	r3, r7
 8004c3e:	d0cd      	beq.n	8004bdc <HAL_RCC_OscConfig+0x26c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c40:	f7ff f9ee 	bl	8004020 <HAL_GetTick>
 8004c44:	4b10      	ldr	r3, [pc, #64]	; (8004c88 <HAL_RCC_OscConfig+0x318>)
 8004c46:	1b80      	subs	r0, r0, r6
 8004c48:	4298      	cmp	r0, r3
 8004c4a:	d9f6      	bls.n	8004c3a <HAL_RCC_OscConfig+0x2ca>
 8004c4c:	e6d4      	b.n	80049f8 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c4e:	f7ff f9e7 	bl	8004020 <HAL_GetTick>
 8004c52:	4b0d      	ldr	r3, [pc, #52]	; (8004c88 <HAL_RCC_OscConfig+0x318>)
 8004c54:	1b80      	subs	r0, r0, r6
 8004c56:	4298      	cmp	r0, r3
 8004c58:	d9bd      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x266>
 8004c5a:	e6cd      	b.n	80049f8 <HAL_RCC_OscConfig+0x88>
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	fffeffff 	.word	0xfffeffff
 8004c64:	fffbffff 	.word	0xfffbffff
 8004c68:	ffff80ff 	.word	0xffff80ff
 8004c6c:	ffffc7ff 	.word	0xffffc7ff
 8004c70:	00f42400 	.word	0x00f42400
 8004c74:	20000004 	.word	0x20000004
 8004c78:	2000000c 	.word	0x2000000c
 8004c7c:	fffffeff 	.word	0xfffffeff
 8004c80:	40007000 	.word	0x40007000
 8004c84:	efffffff 	.word	0xefffffff
 8004c88:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c8c:	2038      	movs	r0, #56	; 0x38
 8004c8e:	4b44      	ldr	r3, [pc, #272]	; (8004da0 <HAL_RCC_OscConfig+0x430>)
 8004c90:	6899      	ldr	r1, [r3, #8]
 8004c92:	001d      	movs	r5, r3
 8004c94:	4001      	ands	r1, r0
 8004c96:	2910      	cmp	r1, #16
 8004c98:	d052      	beq.n	8004d40 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_DISABLE();
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4941      	ldr	r1, [pc, #260]	; (8004da4 <HAL_RCC_OscConfig+0x434>)
 8004c9e:	400b      	ands	r3, r1
 8004ca0:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ca2:	2a02      	cmp	r2, #2
 8004ca4:	d135      	bne.n	8004d12 <HAL_RCC_OscConfig+0x3a2>
        tickstart = HAL_GetTick();
 8004ca6:	f7ff f9bb 	bl	8004020 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004caa:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8004cac:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cae:	04b6      	lsls	r6, r6, #18
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	4233      	tst	r3, r6
 8004cb4:	d127      	bne.n	8004d06 <HAL_RCC_OscConfig+0x396>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004cb8:	6a23      	ldr	r3, [r4, #32]
 8004cba:	68ea      	ldr	r2, [r5, #12]
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	493a      	ldr	r1, [pc, #232]	; (8004da8 <HAL_RCC_OscConfig+0x438>)
 8004cc0:	400a      	ands	r2, r1
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cce:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cd0:	0212      	lsls	r2, r2, #8
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8004cd6:	2380      	movs	r3, #128	; 0x80
 8004cd8:	682a      	ldr	r2, [r5, #0]
 8004cda:	045b      	lsls	r3, r3, #17
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004ce0:	2380      	movs	r3, #128	; 0x80
 8004ce2:	68ea      	ldr	r2, [r5, #12]
 8004ce4:	055b      	lsls	r3, r3, #21
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8004cea:	f7ff f999 	bl	8004020 <HAL_GetTick>
 8004cee:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cf0:	04a4      	lsls	r4, r4, #18
 8004cf2:	682b      	ldr	r3, [r5, #0]
 8004cf4:	4223      	tst	r3, r4
 8004cf6:	d000      	beq.n	8004cfa <HAL_RCC_OscConfig+0x38a>
 8004cf8:	e654      	b.n	80049a4 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cfa:	f7ff f991 	bl	8004020 <HAL_GetTick>
 8004cfe:	1b80      	subs	r0, r0, r6
 8004d00:	2802      	cmp	r0, #2
 8004d02:	d9f6      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x382>
 8004d04:	e678      	b.n	80049f8 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d06:	f7ff f98b 	bl	8004020 <HAL_GetTick>
 8004d0a:	1bc0      	subs	r0, r0, r7
 8004d0c:	2802      	cmp	r0, #2
 8004d0e:	d9cf      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x340>
 8004d10:	e672      	b.n	80049f8 <HAL_RCC_OscConfig+0x88>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004d12:	2203      	movs	r2, #3
 8004d14:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d16:	2480      	movs	r4, #128	; 0x80
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004d18:	4393      	bics	r3, r2
 8004d1a:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004d1c:	68eb      	ldr	r3, [r5, #12]
 8004d1e:	4a23      	ldr	r2, [pc, #140]	; (8004dac <HAL_RCC_OscConfig+0x43c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d20:	04a4      	lsls	r4, r4, #18
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004d22:	4013      	ands	r3, r2
 8004d24:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8004d26:	f7ff f97b 	bl	8004020 <HAL_GetTick>
 8004d2a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d2c:	682b      	ldr	r3, [r5, #0]
 8004d2e:	4223      	tst	r3, r4
 8004d30:	d100      	bne.n	8004d34 <HAL_RCC_OscConfig+0x3c4>
 8004d32:	e637      	b.n	80049a4 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d34:	f7ff f974 	bl	8004020 <HAL_GetTick>
 8004d38:	1b80      	subs	r0, r0, r6
 8004d3a:	2802      	cmp	r0, #2
 8004d3c:	d9f6      	bls.n	8004d2c <HAL_RCC_OscConfig+0x3bc>
 8004d3e:	e65b      	b.n	80049f8 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d40:	2a01      	cmp	r2, #1
 8004d42:	d100      	bne.n	8004d46 <HAL_RCC_OscConfig+0x3d6>
 8004d44:	e619      	b.n	800497a <HAL_RCC_OscConfig+0xa>
        temp_pllckcfg = RCC->PLLCFGR;
 8004d46:	68d8      	ldr	r0, [r3, #12]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d48:	2303      	movs	r3, #3
 8004d4a:	6a22      	ldr	r2, [r4, #32]
 8004d4c:	4003      	ands	r3, r0
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d000      	beq.n	8004d54 <HAL_RCC_OscConfig+0x3e4>
 8004d52:	e612      	b.n	800497a <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d54:	2370      	movs	r3, #112	; 0x70
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d56:	6a62      	ldr	r2, [r4, #36]	; 0x24
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d58:	4003      	ands	r3, r0
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d000      	beq.n	8004d60 <HAL_RCC_OscConfig+0x3f0>
 8004d5e:	e60c      	b.n	800497a <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d60:	22fe      	movs	r2, #254	; 0xfe
 8004d62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d64:	01d2      	lsls	r2, r2, #7
 8004d66:	4002      	ands	r2, r0
 8004d68:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d000      	beq.n	8004d70 <HAL_RCC_OscConfig+0x400>
 8004d6e:	e604      	b.n	800497a <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d70:	23f8      	movs	r3, #248	; 0xf8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d74:	039b      	lsls	r3, r3, #14
 8004d76:	4003      	ands	r3, r0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d000      	beq.n	8004d7e <HAL_RCC_OscConfig+0x40e>
 8004d7c:	e5fd      	b.n	800497a <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004d80:	0f40      	lsrs	r0, r0, #29
 8004d82:	0740      	lsls	r0, r0, #29
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d84:	1ac0      	subs	r0, r0, r3
 8004d86:	1e43      	subs	r3, r0, #1
 8004d88:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8004d8a:	b2c0      	uxtb	r0, r0
 8004d8c:	e5f6      	b.n	800497c <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_PWR_CLK_ENABLE();
 8004d8e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004d90:	4313      	orrs	r3, r2
 8004d92:	63eb      	str	r3, [r5, #60]	; 0x3c
 8004d94:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004d96:	4013      	ands	r3, r2
 8004d98:	9303      	str	r3, [sp, #12]
 8004d9a:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e709      	b.n	8004bb4 <HAL_RCC_OscConfig+0x244>
 8004da0:	40021000 	.word	0x40021000
 8004da4:	feffffff 	.word	0xfeffffff
 8004da8:	1fc1808c 	.word	0x1fc1808c
 8004dac:	effeffff 	.word	0xeffeffff

08004db0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004db0:	2338      	movs	r3, #56	; 0x38
 8004db2:	4a1f      	ldr	r2, [pc, #124]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x80>)
{
 8004db4:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004db6:	6891      	ldr	r1, [r2, #8]
 8004db8:	0014      	movs	r4, r2
 8004dba:	4219      	tst	r1, r3
 8004dbc:	d108      	bne.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x20>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004dc2:	481c      	ldr	r0, [pc, #112]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x84>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004dc4:	049b      	lsls	r3, r3, #18
 8004dc6:	0f5b      	lsrs	r3, r3, #29
 8004dc8:	4099      	lsls	r1, r3
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
        break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
    sysclockfreq = pllvco / pllr;
 8004dca:	f7fb f9c9 	bl	8000160 <__udivsi3>
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8004dce:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004dd0:	6891      	ldr	r1, [r2, #8]
 8004dd2:	4019      	ands	r1, r3
 8004dd4:	2908      	cmp	r1, #8
 8004dd6:	d025      	beq.n	8004e24 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004dd8:	6891      	ldr	r1, [r2, #8]
 8004dda:	4019      	ands	r1, r3
 8004ddc:	2910      	cmp	r1, #16
 8004dde:	d115      	bne.n	8004e0c <HAL_RCC_GetSysClockFreq+0x5c>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004de0:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004de2:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004de4:	43db      	mvns	r3, r3
 8004de6:	227f      	movs	r2, #127	; 0x7f
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004de8:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dea:	0649      	lsls	r1, r1, #25
 8004dec:	0f49      	lsrs	r1, r1, #29
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dee:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004df0:	3101      	adds	r1, #1
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004df2:	4015      	ands	r5, r2
    switch (pllsource)
 8004df4:	079b      	lsls	r3, r3, #30
 8004df6:	d107      	bne.n	8004e08 <HAL_RCC_GetSysClockFreq+0x58>
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004df8:	480f      	ldr	r0, [pc, #60]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004dfa:	f7fb f9b1 	bl	8000160 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004dfe:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004e00:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004e02:	0f49      	lsrs	r1, r1, #29
 8004e04:	3101      	adds	r1, #1
 8004e06:	e7e0      	b.n	8004dca <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004e08:	480a      	ldr	r0, [pc, #40]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x84>)
 8004e0a:	e7f6      	b.n	8004dfa <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004e0c:	6891      	ldr	r1, [r2, #8]
 8004e0e:	4019      	ands	r1, r3
 8004e10:	2920      	cmp	r1, #32
 8004e12:	d009      	beq.n	8004e28 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004e14:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 8004e16:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	2b18      	cmp	r3, #24
 8004e1c:	d1d7      	bne.n	8004dce <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSI_VALUE;
 8004e1e:	20fa      	movs	r0, #250	; 0xfa
 8004e20:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 8004e22:	e7d4      	b.n	8004dce <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = HSE_VALUE;
 8004e24:	4804      	ldr	r0, [pc, #16]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x88>)
 8004e26:	e7d2      	b.n	8004dce <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSE_VALUE;
 8004e28:	2080      	movs	r0, #128	; 0x80
 8004e2a:	0200      	lsls	r0, r0, #8
 8004e2c:	e7cf      	b.n	8004dce <HAL_RCC_GetSysClockFreq+0x1e>
 8004e2e:	46c0      	nop			; (mov r8, r8)
 8004e30:	40021000 	.word	0x40021000
 8004e34:	00f42400 	.word	0x00f42400
 8004e38:	007a1200 	.word	0x007a1200

08004e3c <HAL_RCC_ClockConfig>:
{
 8004e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e3e:	0005      	movs	r5, r0
 8004e40:	000e      	movs	r6, r1
  if (RCC_ClkInitStruct == NULL)
 8004e42:	2800      	cmp	r0, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8004e46:	2001      	movs	r0, #1
}
 8004e48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e4a:	2707      	movs	r7, #7
 8004e4c:	4c4a      	ldr	r4, [pc, #296]	; (8004f78 <HAL_RCC_ClockConfig+0x13c>)
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	403b      	ands	r3, r7
 8004e52:	428b      	cmp	r3, r1
 8004e54:	d32a      	bcc.n	8004eac <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e56:	6829      	ldr	r1, [r5, #0]
 8004e58:	078b      	lsls	r3, r1, #30
 8004e5a:	d43b      	bmi.n	8004ed4 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e5c:	07cb      	lsls	r3, r1, #31
 8004e5e:	d448      	bmi.n	8004ef2 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e60:	2707      	movs	r7, #7
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	403b      	ands	r3, r7
 8004e66:	429e      	cmp	r6, r3
 8004e68:	d20a      	bcs.n	8004e80 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	43bb      	bics	r3, r7
 8004e6e:	4333      	orrs	r3, r6
 8004e70:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8004e72:	f7ff f8d5 	bl	8004020 <HAL_GetTick>
 8004e76:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e78:	6823      	ldr	r3, [r4, #0]
 8004e7a:	403b      	ands	r3, r7
 8004e7c:	429e      	cmp	r6, r3
 8004e7e:	d16b      	bne.n	8004f58 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e80:	682b      	ldr	r3, [r5, #0]
 8004e82:	4c3e      	ldr	r4, [pc, #248]	; (8004f7c <HAL_RCC_ClockConfig+0x140>)
 8004e84:	075b      	lsls	r3, r3, #29
 8004e86:	d46f      	bmi.n	8004f68 <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004e88:	f7ff ff92 	bl	8004db0 <HAL_RCC_GetSysClockFreq>
 8004e8c:	68a3      	ldr	r3, [r4, #8]
 8004e8e:	4a3c      	ldr	r2, [pc, #240]	; (8004f80 <HAL_RCC_ClockConfig+0x144>)
 8004e90:	051b      	lsls	r3, r3, #20
 8004e92:	0f1b      	lsrs	r3, r3, #28
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	589b      	ldr	r3, [r3, r2]
 8004e98:	221f      	movs	r2, #31
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	40d8      	lsrs	r0, r3
 8004e9e:	4b39      	ldr	r3, [pc, #228]	; (8004f84 <HAL_RCC_ClockConfig+0x148>)
 8004ea0:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8004ea2:	4b39      	ldr	r3, [pc, #228]	; (8004f88 <HAL_RCC_ClockConfig+0x14c>)
 8004ea4:	6818      	ldr	r0, [r3, #0]
 8004ea6:	f7fe ff43 	bl	8003d30 <HAL_InitTick>
 8004eaa:	e7cd      	b.n	8004e48 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	43bb      	bics	r3, r7
 8004eb0:	430b      	orrs	r3, r1
 8004eb2:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8004eb4:	f7ff f8b4 	bl	8004020 <HAL_GetTick>
 8004eb8:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	403b      	ands	r3, r7
 8004ebe:	429e      	cmp	r6, r3
 8004ec0:	d0c9      	beq.n	8004e56 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ec2:	f7ff f8ad 	bl	8004020 <HAL_GetTick>
 8004ec6:	9b01      	ldr	r3, [sp, #4]
 8004ec8:	1ac0      	subs	r0, r0, r3
 8004eca:	4b30      	ldr	r3, [pc, #192]	; (8004f8c <HAL_RCC_ClockConfig+0x150>)
 8004ecc:	4298      	cmp	r0, r3
 8004ece:	d9f4      	bls.n	8004eba <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8004ed0:	2003      	movs	r0, #3
 8004ed2:	e7b9      	b.n	8004e48 <HAL_RCC_ClockConfig+0xc>
 8004ed4:	4a29      	ldr	r2, [pc, #164]	; (8004f7c <HAL_RCC_ClockConfig+0x140>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed6:	074b      	lsls	r3, r1, #29
 8004ed8:	d504      	bpl.n	8004ee4 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004eda:	23e0      	movs	r3, #224	; 0xe0
 8004edc:	6890      	ldr	r0, [r2, #8]
 8004ede:	01db      	lsls	r3, r3, #7
 8004ee0:	4303      	orrs	r3, r0
 8004ee2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ee4:	6893      	ldr	r3, [r2, #8]
 8004ee6:	482a      	ldr	r0, [pc, #168]	; (8004f90 <HAL_RCC_ClockConfig+0x154>)
 8004ee8:	4003      	ands	r3, r0
 8004eea:	68a8      	ldr	r0, [r5, #8]
 8004eec:	4303      	orrs	r3, r0
 8004eee:	6093      	str	r3, [r2, #8]
 8004ef0:	e7b4      	b.n	8004e5c <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ef2:	686a      	ldr	r2, [r5, #4]
 8004ef4:	4f21      	ldr	r7, [pc, #132]	; (8004f7c <HAL_RCC_ClockConfig+0x140>)
 8004ef6:	2a01      	cmp	r2, #1
 8004ef8:	d119      	bne.n	8004f2e <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	039b      	lsls	r3, r3, #14
 8004efe:	d5a2      	bpl.n	8004e46 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f00:	2107      	movs	r1, #7
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	438b      	bics	r3, r1
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8004f0a:	f7ff f889 	bl	8004020 <HAL_GetTick>
 8004f0e:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f10:	2338      	movs	r3, #56	; 0x38
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	401a      	ands	r2, r3
 8004f16:	686b      	ldr	r3, [r5, #4]
 8004f18:	00db      	lsls	r3, r3, #3
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d0a0      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f1e:	f7ff f87f 	bl	8004020 <HAL_GetTick>
 8004f22:	9b01      	ldr	r3, [sp, #4]
 8004f24:	1ac0      	subs	r0, r0, r3
 8004f26:	4b19      	ldr	r3, [pc, #100]	; (8004f8c <HAL_RCC_ClockConfig+0x150>)
 8004f28:	4298      	cmp	r0, r3
 8004f2a:	d9f1      	bls.n	8004f10 <HAL_RCC_ClockConfig+0xd4>
 8004f2c:	e7d0      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f2e:	2a02      	cmp	r2, #2
 8004f30:	d103      	bne.n	8004f3a <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	019b      	lsls	r3, r3, #6
 8004f36:	d4e3      	bmi.n	8004f00 <HAL_RCC_ClockConfig+0xc4>
 8004f38:	e785      	b.n	8004e46 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004f3a:	2a00      	cmp	r2, #0
 8004f3c:	d103      	bne.n	8004f46 <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	055b      	lsls	r3, r3, #21
 8004f42:	d4dd      	bmi.n	8004f00 <HAL_RCC_ClockConfig+0xc4>
 8004f44:	e77f      	b.n	8004e46 <HAL_RCC_ClockConfig+0xa>
 8004f46:	2302      	movs	r3, #2
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004f48:	2a03      	cmp	r2, #3
 8004f4a:	d103      	bne.n	8004f54 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f4c:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f4e:	4219      	tst	r1, r3
 8004f50:	d1d6      	bne.n	8004f00 <HAL_RCC_ClockConfig+0xc4>
 8004f52:	e778      	b.n	8004e46 <HAL_RCC_ClockConfig+0xa>
 8004f54:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004f56:	e7fa      	b.n	8004f4e <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f58:	f7ff f862 	bl	8004020 <HAL_GetTick>
 8004f5c:	9b01      	ldr	r3, [sp, #4]
 8004f5e:	1ac0      	subs	r0, r0, r3
 8004f60:	4b0a      	ldr	r3, [pc, #40]	; (8004f8c <HAL_RCC_ClockConfig+0x150>)
 8004f62:	4298      	cmp	r0, r3
 8004f64:	d988      	bls.n	8004e78 <HAL_RCC_ClockConfig+0x3c>
 8004f66:	e7b3      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004f68:	68a3      	ldr	r3, [r4, #8]
 8004f6a:	4a0a      	ldr	r2, [pc, #40]	; (8004f94 <HAL_RCC_ClockConfig+0x158>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	68ea      	ldr	r2, [r5, #12]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	60a3      	str	r3, [r4, #8]
 8004f74:	e788      	b.n	8004e88 <HAL_RCC_ClockConfig+0x4c>
 8004f76:	46c0      	nop			; (mov r8, r8)
 8004f78:	40022000 	.word	0x40022000
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	080127c4 	.word	0x080127c4
 8004f84:	20000004 	.word	0x20000004
 8004f88:	2000000c 	.word	0x2000000c
 8004f8c:	00001388 	.word	0x00001388
 8004f90:	fffff0ff 	.word	0xfffff0ff
 8004f94:	ffff8fff 	.word	0xffff8fff

08004f98 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004f98:	4b06      	ldr	r3, [pc, #24]	; (8004fb4 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004f9a:	4a07      	ldr	r2, [pc, #28]	; (8004fb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	045b      	lsls	r3, r3, #17
 8004fa0:	0f5b      	lsrs	r3, r3, #29
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	589b      	ldr	r3, [r3, r2]
 8004fa6:	221f      	movs	r2, #31
 8004fa8:	4013      	ands	r3, r2
 8004faa:	4a04      	ldr	r2, [pc, #16]	; (8004fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fac:	6810      	ldr	r0, [r2, #0]
 8004fae:	40d8      	lsrs	r0, r3
}
 8004fb0:	4770      	bx	lr
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	08012804 	.word	0x08012804
 8004fbc:	20000004 	.word	0x20000004

08004fc0 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004fc0:	2207      	movs	r2, #7
{
 8004fc2:	b530      	push	{r4, r5, lr}

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004fc4:	25f0      	movs	r5, #240	; 0xf0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004fc6:	4b09      	ldr	r3, [pc, #36]	; (8004fec <HAL_RCC_GetClockConfig+0x2c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004fc8:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004fca:	689c      	ldr	r4, [r3, #8]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004fcc:	012d      	lsls	r5, r5, #4
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004fce:	4014      	ands	r4, r2
 8004fd0:	6044      	str	r4, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004fd2:	689c      	ldr	r4, [r3, #8]
 8004fd4:	402c      	ands	r4, r5
 8004fd6:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8004fd8:	24e0      	movs	r4, #224	; 0xe0
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	01e4      	lsls	r4, r4, #7
 8004fde:	4023      	ands	r3, r4
 8004fe0:	60c3      	str	r3, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004fe2:	4b03      	ldr	r3, [pc, #12]	; (8004ff0 <HAL_RCC_GetClockConfig+0x30>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	600b      	str	r3, [r1, #0]
}
 8004fea:	bd30      	pop	{r4, r5, pc}
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	40022000 	.word	0x40022000

08004ff4 <HAL_RCC_EnableCSS>:
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004ff4:	2380      	movs	r3, #128	; 0x80
 8004ff6:	4a03      	ldr	r2, [pc, #12]	; (8005004 <HAL_RCC_EnableCSS+0x10>)
 8004ff8:	031b      	lsls	r3, r3, #12
 8004ffa:	6811      	ldr	r1, [r2, #0]
 8004ffc:	430b      	orrs	r3, r1
 8004ffe:	6013      	str	r3, [r2, #0]
}
 8005000:	4770      	bx	lr
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	40021000 	.word	0x40021000

08005008 <HAL_RCC_EnableLSECSS>:
  *         cleared by a backup domain reset.
  * @retval None
  */
void HAL_RCC_EnableLSECSS(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8005008:	2320      	movs	r3, #32
 800500a:	4a02      	ldr	r2, [pc, #8]	; (8005014 <HAL_RCC_EnableLSECSS+0xc>)
 800500c:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 800500e:	430b      	orrs	r3, r1
 8005010:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8005012:	4770      	bx	lr
 8005014:	40021000 	.word	0x40021000

08005018 <HAL_RCC_CSSCallback>:
 8005018:	4770      	bx	lr

0800501a <HAL_RCC_LSECSSCallback>:
__weak void HAL_RCC_LSECSSCallback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_LSECSSCallback should be implemented in the user file
   */
}
 800501a:	4770      	bx	lr

0800501c <HAL_RCC_NMI_IRQHandler>:
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 800501c:	23c0      	movs	r3, #192	; 0xc0
  uint32_t itflag = RCC->CIFR;
 800501e:	4a07      	ldr	r2, [pc, #28]	; (800503c <HAL_RCC_NMI_IRQHandler+0x20>)
{
 8005020:	b510      	push	{r4, lr}
  uint32_t itflag = RCC->CIFR;
 8005022:	69d4      	ldr	r4, [r2, #28]
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4023      	ands	r3, r4
 8005028:	6213      	str	r3, [r2, #32]
  if ((itflag & RCC_CIFR_CSSF) != 0x00u)
 800502a:	05e3      	lsls	r3, r4, #23
 800502c:	d501      	bpl.n	8005032 <HAL_RCC_NMI_IRQHandler+0x16>
    HAL_RCC_CSSCallback();
 800502e:	f7ff fff3 	bl	8005018 <HAL_RCC_CSSCallback>
  if ((itflag & RCC_CIFR_LSECSSF) != 0x00u)
 8005032:	05a3      	lsls	r3, r4, #22
 8005034:	d501      	bpl.n	800503a <HAL_RCC_NMI_IRQHandler+0x1e>
    HAL_RCC_LSECSSCallback();
 8005036:	f7ff fff0 	bl	800501a <HAL_RCC_LSECSSCallback>
}
 800503a:	bd10      	pop	{r4, pc}
 800503c:	40021000 	.word	0x40021000

08005040 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005042:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005044:	682b      	ldr	r3, [r5, #0]
{
 8005046:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005048:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800504a:	039b      	lsls	r3, r3, #14
 800504c:	d54f      	bpl.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0xae>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800504e:	2280      	movs	r2, #128	; 0x80
 8005050:	4c4b      	ldr	r4, [pc, #300]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005052:	0552      	lsls	r2, r2, #21
 8005054:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8005056:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005058:	4213      	tst	r3, r2
 800505a:	d108      	bne.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800505c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800505e:	4313      	orrs	r3, r2
 8005060:	63e3      	str	r3, [r4, #60]	; 0x3c
 8005062:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005064:	4013      	ands	r3, r2
 8005066:	9303      	str	r3, [sp, #12]
 8005068:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800506a:	2301      	movs	r3, #1
 800506c:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800506e:	2780      	movs	r7, #128	; 0x80
 8005070:	4e44      	ldr	r6, [pc, #272]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8005072:	007f      	lsls	r7, r7, #1
 8005074:	6833      	ldr	r3, [r6, #0]
 8005076:	433b      	orrs	r3, r7
 8005078:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800507a:	f7fe ffd1 	bl	8004020 <HAL_GetTick>
 800507e:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005080:	6833      	ldr	r3, [r6, #0]
 8005082:	423b      	tst	r3, r7
 8005084:	d025      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005086:	23c0      	movs	r3, #192	; 0xc0
 8005088:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800508e:	d00f      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8005090:	69aa      	ldr	r2, [r5, #24]
 8005092:	4293      	cmp	r3, r2
 8005094:	d00c      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005096:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005098:	4b3b      	ldr	r3, [pc, #236]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x148>)
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800509a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800509c:	4013      	ands	r3, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 800509e:	2280      	movs	r2, #128	; 0x80
 80050a0:	0252      	lsls	r2, r2, #9
 80050a2:	430a      	orrs	r2, r1
 80050a4:	65e2      	str	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050a6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80050a8:	4938      	ldr	r1, [pc, #224]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80050aa:	400a      	ands	r2, r1
 80050ac:	65e2      	str	r2, [r4, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050ae:	65e3      	str	r3, [r4, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050b0:	07db      	lsls	r3, r3, #31
 80050b2:	d506      	bpl.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b4:	f7fe ffb4 	bl	8004020 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050b8:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80050ba:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050bc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80050be:	423b      	tst	r3, r7
 80050c0:	d057      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x132>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050c2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80050c4:	4a30      	ldr	r2, [pc, #192]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x148>)
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050c6:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050c8:	4013      	ands	r3, r2
 80050ca:	69aa      	ldr	r2, [r5, #24]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	65e3      	str	r3, [r4, #92]	; 0x5c
 80050d0:	e006      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050d2:	f7fe ffa5 	bl	8004020 <HAL_GetTick>
 80050d6:	9b01      	ldr	r3, [sp, #4]
 80050d8:	1ac0      	subs	r0, r0, r3
 80050da:	2802      	cmp	r0, #2
 80050dc:	d9d0      	bls.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 80050de:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050e0:	9b00      	ldr	r3, [sp, #0]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d103      	bne.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80050e8:	4a29      	ldr	r2, [pc, #164]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80050ea:	4013      	ands	r3, r2
 80050ec:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050ee:	682a      	ldr	r2, [r5, #0]
 80050f0:	07d3      	lsls	r3, r2, #31
 80050f2:	d506      	bpl.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050f4:	2403      	movs	r4, #3
 80050f6:	4922      	ldr	r1, [pc, #136]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80050f8:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80050fa:	43a3      	bics	r3, r4
 80050fc:	686c      	ldr	r4, [r5, #4]
 80050fe:	4323      	orrs	r3, r4
 8005100:	654b      	str	r3, [r1, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005102:	0793      	lsls	r3, r2, #30
 8005104:	d506      	bpl.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005106:	240c      	movs	r4, #12
 8005108:	491d      	ldr	r1, [pc, #116]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800510a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800510c:	43a3      	bics	r3, r4
 800510e:	68ac      	ldr	r4, [r5, #8]
 8005110:	4323      	orrs	r3, r4
 8005112:	654b      	str	r3, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005114:	0653      	lsls	r3, r2, #25
 8005116:	d506      	bpl.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005118:	4919      	ldr	r1, [pc, #100]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800511a:	4c1e      	ldr	r4, [pc, #120]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800511c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800511e:	4023      	ands	r3, r4
 8005120:	68ec      	ldr	r4, [r5, #12]
 8005122:	4323      	orrs	r3, r4
 8005124:	654b      	str	r3, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005126:	0453      	lsls	r3, r2, #17
 8005128:	d50f      	bpl.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800512a:	4915      	ldr	r1, [pc, #84]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800512c:	696c      	ldr	r4, [r5, #20]
 800512e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	089b      	lsrs	r3, r3, #2
 8005134:	4323      	orrs	r3, r4
 8005136:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005138:	2380      	movs	r3, #128	; 0x80
 800513a:	05db      	lsls	r3, r3, #23
 800513c:	429c      	cmp	r4, r3
 800513e:	d104      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x10a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005140:	2380      	movs	r3, #128	; 0x80
 8005142:	68cc      	ldr	r4, [r1, #12]
 8005144:	025b      	lsls	r3, r3, #9
 8005146:	4323      	orrs	r3, r4
 8005148:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800514a:	0513      	lsls	r3, r2, #20
 800514c:	d50f      	bpl.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800514e:	490c      	ldr	r1, [pc, #48]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005150:	4c11      	ldr	r4, [pc, #68]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8005152:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8005154:	692a      	ldr	r2, [r5, #16]
 8005156:	4023      	ands	r3, r4
 8005158:	4313      	orrs	r3, r2
 800515a:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800515c:	2380      	movs	r3, #128	; 0x80
 800515e:	01db      	lsls	r3, r3, #7
 8005160:	429a      	cmp	r2, r3
 8005162:	d104      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x12e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005164:	2380      	movs	r3, #128	; 0x80
 8005166:	68ca      	ldr	r2, [r1, #12]
 8005168:	025b      	lsls	r3, r3, #9
 800516a:	4313      	orrs	r3, r2
 800516c:	60cb      	str	r3, [r1, #12]
    }
  }

  return status;
}
 800516e:	b005      	add	sp, #20
 8005170:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005172:	f7fe ff55 	bl	8004020 <HAL_GetTick>
 8005176:	4b09      	ldr	r3, [pc, #36]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005178:	1b80      	subs	r0, r0, r6
 800517a:	4298      	cmp	r0, r3
 800517c:	d99e      	bls.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800517e:	e7ae      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8005180:	40021000 	.word	0x40021000
 8005184:	40007000 	.word	0x40007000
 8005188:	fffffcff 	.word	0xfffffcff
 800518c:	fffeffff 	.word	0xfffeffff
 8005190:	efffffff 	.word	0xefffffff
 8005194:	ffffcfff 	.word	0xffffcfff
 8005198:	ffff3fff 	.word	0xffff3fff
 800519c:	00001388 	.word	0x00001388

080051a0 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80051a0:	21a0      	movs	r1, #160	; 0xa0
 80051a2:	6802      	ldr	r2, [r0, #0]
{
 80051a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80051a6:	68d3      	ldr	r3, [r2, #12]
{
 80051a8:	0004      	movs	r4, r0
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80051aa:	438b      	bics	r3, r1
 80051ac:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80051ae:	f7fe ff37 	bl	8004020 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80051b2:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 80051b4:	0006      	movs	r6, r0
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80051b6:	2520      	movs	r5, #32
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80051b8:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	422b      	tst	r3, r5
 80051c0:	d001      	beq.n	80051c6 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80051c2:	2000      	movs	r0, #0
}
 80051c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80051c6:	f7fe ff2b 	bl	8004020 <HAL_GetTick>
 80051ca:	1b80      	subs	r0, r0, r6
 80051cc:	42b8      	cmp	r0, r7
 80051ce:	d9f4      	bls.n	80051ba <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 80051d0:	2003      	movs	r0, #3
 80051d2:	e7f7      	b.n	80051c4 <HAL_RTC_WaitForSynchro+0x24>

080051d4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80051d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80051d6:	2740      	movs	r7, #64	; 0x40
 80051d8:	6803      	ldr	r3, [r0, #0]
{
 80051da:	0005      	movs	r5, r0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80051dc:	68da      	ldr	r2, [r3, #12]
  HAL_StatusTypeDef status = HAL_OK;  
 80051de:	2400      	movs	r4, #0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80051e0:	423a      	tst	r2, r7
 80051e2:	d10c      	bne.n	80051fe <RTC_EnterInitMode+0x2a>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80051e4:	2280      	movs	r2, #128	; 0x80
 80051e6:	68d9      	ldr	r1, [r3, #12]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80051ec:	f7fe ff18 	bl	8004020 <HAL_GetTick>
 80051f0:	0006      	movs	r6, r0
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80051f2:	682b      	ldr	r3, [r5, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	423b      	tst	r3, r7
 80051f8:	d101      	bne.n	80051fe <RTC_EnterInitMode+0x2a>
 80051fa:	2c03      	cmp	r4, #3
 80051fc:	d101      	bne.n	8005202 <RTC_EnterInitMode+0x2e>
      }
    }
  }

  return status;
}
 80051fe:	0020      	movs	r0, r4
 8005200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005202:	f7fe ff0d 	bl	8004020 <HAL_GetTick>
 8005206:	23fa      	movs	r3, #250	; 0xfa
 8005208:	1b80      	subs	r0, r0, r6
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4298      	cmp	r0, r3
 800520e:	d9f0      	bls.n	80051f2 <RTC_EnterInitMode+0x1e>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005210:	002b      	movs	r3, r5
 8005212:	2403      	movs	r4, #3
 8005214:	3329      	adds	r3, #41	; 0x29
 8005216:	701c      	strb	r4, [r3, #0]
 8005218:	e7eb      	b.n	80051f2 <RTC_EnterInitMode+0x1e>
	...

0800521c <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800521c:	2280      	movs	r2, #128	; 0x80
{
 800521e:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005220:	4c0f      	ldr	r4, [pc, #60]	; (8005260 <RTC_ExitInitMode+0x44>)
{
 8005222:	0005      	movs	r5, r0
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005224:	68e3      	ldr	r3, [r4, #12]
 8005226:	4393      	bics	r3, r2
 8005228:	60e3      	str	r3, [r4, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800522a:	69a3      	ldr	r3, [r4, #24]
 800522c:	3a60      	subs	r2, #96	; 0x60
 800522e:	4213      	tst	r3, r2
 8005230:	d107      	bne.n	8005242 <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005232:	f7ff ffb5 	bl	80051a0 <HAL_RTC_WaitForSynchro>
 8005236:	2800      	cmp	r0, #0
 8005238:	d002      	beq.n	8005240 <RTC_ExitInitMode+0x24>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800523a:	2003      	movs	r0, #3
 800523c:	3529      	adds	r5, #41	; 0x29
 800523e:	7028      	strb	r0, [r5, #0]
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 8005240:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005242:	69a3      	ldr	r3, [r4, #24]
 8005244:	4393      	bics	r3, r2
 8005246:	61a3      	str	r3, [r4, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005248:	f7ff ffaa 	bl	80051a0 <HAL_RTC_WaitForSynchro>
 800524c:	2800      	cmp	r0, #0
 800524e:	d002      	beq.n	8005256 <RTC_ExitInitMode+0x3a>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005250:	2003      	movs	r0, #3
 8005252:	3529      	adds	r5, #41	; 0x29
 8005254:	7028      	strb	r0, [r5, #0]
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005256:	2320      	movs	r3, #32
 8005258:	69a2      	ldr	r2, [r4, #24]
 800525a:	4313      	orrs	r3, r2
 800525c:	61a3      	str	r3, [r4, #24]
 800525e:	e7ef      	b.n	8005240 <RTC_ExitInitMode+0x24>
 8005260:	40002800 	.word	0x40002800

08005264 <HAL_RTC_Init>:
{
 8005264:	b570      	push	{r4, r5, r6, lr}
 8005266:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 8005268:	2001      	movs	r0, #1
  if(hrtc != NULL)
 800526a:	2c00      	cmp	r4, #0
 800526c:	d047      	beq.n	80052fe <HAL_RTC_Init+0x9a>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800526e:	0025      	movs	r5, r4
 8005270:	3529      	adds	r5, #41	; 0x29
 8005272:	782b      	ldrb	r3, [r5, #0]
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d108      	bne.n	800528c <HAL_RTC_Init+0x28>
    hrtc->Lock = HAL_UNLOCKED;
 800527a:	0022      	movs	r2, r4
 800527c:	3228      	adds	r2, #40	; 0x28
 800527e:	7013      	strb	r3, [r2, #0]
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005280:	2388      	movs	r3, #136	; 0x88
 8005282:	021b      	lsls	r3, r3, #8
 8005284:	6063      	str	r3, [r4, #4]
    HAL_RTC_MspInit(hrtc);
 8005286:	0020      	movs	r0, r4
 8005288:	f7fe fbea 	bl	8003a60 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800528c:	2302      	movs	r3, #2
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800528e:	22ca      	movs	r2, #202	; 0xca
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005290:	702b      	strb	r3, [r5, #0]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005292:	6823      	ldr	r3, [r4, #0]
    status = RTC_EnterInitMode(hrtc);
 8005294:	0020      	movs	r0, r4
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005296:	625a      	str	r2, [r3, #36]	; 0x24
 8005298:	3a77      	subs	r2, #119	; 0x77
 800529a:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 800529c:	f7ff ff9a 	bl	80051d4 <RTC_EnterInitMode>
    if(status == HAL_OK)
 80052a0:	2800      	cmp	r0, #0
 80052a2:	d125      	bne.n	80052f0 <HAL_RTC_Init+0x8c>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	4916      	ldr	r1, [pc, #88]	; (8005300 <HAL_RTC_Init+0x9c>)
 80052a8:	699a      	ldr	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80052aa:	6960      	ldr	r0, [r4, #20]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80052ac:	400a      	ands	r2, r1
 80052ae:	619a      	str	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80052b0:	68a2      	ldr	r2, [r4, #8]
 80052b2:	6999      	ldr	r1, [r3, #24]
 80052b4:	4302      	orrs	r2, r0
 80052b6:	69e0      	ldr	r0, [r4, #28]
 80052b8:	4302      	orrs	r2, r0
 80052ba:	430a      	orrs	r2, r1
 80052bc:	619a      	str	r2, [r3, #24]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80052be:	6922      	ldr	r2, [r4, #16]
      status = RTC_ExitInitMode(hrtc);
 80052c0:	0020      	movs	r0, r4
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80052c2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80052c4:	68e2      	ldr	r2, [r4, #12]
 80052c6:	6919      	ldr	r1, [r3, #16]
 80052c8:	0412      	lsls	r2, r2, #16
 80052ca:	430a      	orrs	r2, r1
 80052cc:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 80052ce:	f7ff ffa5 	bl	800521c <RTC_ExitInitMode>
      if (status == HAL_OK)
 80052d2:	2800      	cmp	r0, #0
 80052d4:	d10c      	bne.n	80052f0 <HAL_RTC_Init+0x8c>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80052d6:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80052d8:	6a26      	ldr	r6, [r4, #32]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80052da:	6993      	ldr	r3, [r2, #24]
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	08db      	lsrs	r3, r3, #3
 80052e0:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80052e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052e4:	6991      	ldr	r1, [r2, #24]
 80052e6:	4333      	orrs	r3, r6
 80052e8:	69a6      	ldr	r6, [r4, #24]
 80052ea:	4333      	orrs	r3, r6
 80052ec:	430b      	orrs	r3, r1
 80052ee:	6193      	str	r3, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052f0:	22ff      	movs	r2, #255	; 0xff
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80052f6:	2800      	cmp	r0, #0
 80052f8:	d101      	bne.n	80052fe <HAL_RTC_Init+0x9a>
      hrtc->State = HAL_RTC_STATE_READY;
 80052fa:	2301      	movs	r3, #1
 80052fc:	702b      	strb	r3, [r5, #0]
}
 80052fe:	bd70      	pop	{r4, r5, r6, pc}
 8005300:	fb8fffbf 	.word	0xfb8fffbf

08005304 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005304:	21e0      	movs	r1, #224	; 0xe0
 8005306:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005308:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	438a      	bics	r2, r1
 800530e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005310:	2282      	movs	r2, #130	; 0x82
 8005312:	6841      	ldr	r1, [r0, #4]
 8005314:	0052      	lsls	r2, r2, #1
 8005316:	4291      	cmp	r1, r2
 8005318:	d10c      	bne.n	8005334 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
 800531a:	2180      	movs	r1, #128	; 0x80
 800531c:	6882      	ldr	r2, [r0, #8]
 800531e:	0209      	lsls	r1, r1, #8
 8005320:	428a      	cmp	r2, r1
 8005322:	d003      	beq.n	800532c <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005324:	2180      	movs	r1, #128	; 0x80
 8005326:	00c9      	lsls	r1, r1, #3
 8005328:	428a      	cmp	r2, r1
 800532a:	d103      	bne.n	8005334 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800532c:	2140      	movs	r1, #64	; 0x40
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	438a      	bics	r2, r1
 8005332:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005334:	2180      	movs	r1, #128	; 0x80
 8005336:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8005338:	0189      	lsls	r1, r1, #6
 800533a:	428a      	cmp	r2, r1
 800533c:	d106      	bne.n	800534c <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
        {
          SPI_RESET_CRC(hspi);
 800533e:	6819      	ldr	r1, [r3, #0]
 8005340:	4c07      	ldr	r4, [pc, #28]	; (8005360 <SPI_WaitFifoStateUntilTimeout.part.1+0x5c>)
 8005342:	4021      	ands	r1, r4
 8005344:	6019      	str	r1, [r3, #0]
 8005346:	6819      	ldr	r1, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800534c:	0003      	movs	r3, r0
 800534e:	2201      	movs	r2, #1
 8005350:	335d      	adds	r3, #93	; 0x5d
 8005352:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005354:	2300      	movs	r3, #0
 8005356:	305c      	adds	r0, #92	; 0x5c
 8005358:	7003      	strb	r3, [r0, #0]
      }
    }
  }

  return HAL_OK;
}
 800535a:	2003      	movs	r0, #3
 800535c:	bd10      	pop	{r4, pc}
 800535e:	46c0      	nop			; (mov r8, r8)
 8005360:	ffffdfff 	.word	0xffffdfff

08005364 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	0004      	movs	r4, r0
 8005368:	000d      	movs	r5, r1
 800536a:	0017      	movs	r7, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800536c:	2680      	movs	r6, #128	; 0x80
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	6898      	ldr	r0, [r3, #8]
 8005372:	4030      	ands	r0, r6
 8005374:	d009      	beq.n	800538a <SPI_WaitFlagStateUntilTimeout.constprop.10+0x26>
    if (Timeout != HAL_MAX_DELAY)
 8005376:	1c6a      	adds	r2, r5, #1
 8005378:	d0fa      	beq.n	8005370 <SPI_WaitFlagStateUntilTimeout.constprop.10+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800537a:	f7fe fe51 	bl	8004020 <HAL_GetTick>
 800537e:	1bc0      	subs	r0, r0, r7
 8005380:	4285      	cmp	r5, r0
 8005382:	d8f4      	bhi.n	800536e <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
 8005384:	0020      	movs	r0, r4
 8005386:	f7ff ffbd 	bl	8005304 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 800538a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800538c <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800538c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800538e:	27c0      	movs	r7, #192	; 0xc0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005390:	0005      	movs	r5, r0
 8005392:	000c      	movs	r4, r1
 8005394:	0016      	movs	r6, r2
 8005396:	9301      	str	r3, [sp, #4]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005398:	00ff      	lsls	r7, r7, #3
  while ((hspi->Instance->SR & Fifo) != State)
 800539a:	682b      	ldr	r3, [r5, #0]
 800539c:	6898      	ldr	r0, [r3, #8]
 800539e:	4020      	ands	r0, r4
 80053a0:	d00d      	beq.n	80053be <SPI_WaitFifoStateUntilTimeout.constprop.11+0x32>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80053a2:	42bc      	cmp	r4, r7
 80053a4:	d100      	bne.n	80053a8 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x1c>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80053a6:	7b1a      	ldrb	r2, [r3, #12]
    if (Timeout != HAL_MAX_DELAY)
 80053a8:	1c72      	adds	r2, r6, #1
 80053aa:	d0f7      	beq.n	800539c <SPI_WaitFifoStateUntilTimeout.constprop.11+0x10>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80053ac:	f7fe fe38 	bl	8004020 <HAL_GetTick>
 80053b0:	9b01      	ldr	r3, [sp, #4]
 80053b2:	1ac0      	subs	r0, r0, r3
 80053b4:	4286      	cmp	r6, r0
 80053b6:	d8f0      	bhi.n	800539a <SPI_WaitFifoStateUntilTimeout.constprop.11+0xe>
 80053b8:	0028      	movs	r0, r5
 80053ba:	f7ff ffa3 	bl	8005304 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 80053be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080053c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053c0:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053c2:	0013      	movs	r3, r2
{
 80053c4:	000d      	movs	r5, r1
 80053c6:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053c8:	000a      	movs	r2, r1
 80053ca:	21c0      	movs	r1, #192	; 0xc0
 80053cc:	0149      	lsls	r1, r1, #5
{
 80053ce:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053d0:	f7ff ffdc 	bl	800538c <SPI_WaitFifoStateUntilTimeout.constprop.11>
 80053d4:	2800      	cmp	r0, #0
 80053d6:	d005      	beq.n	80053e4 <SPI_EndRxTxTransaction+0x24>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053d8:	2320      	movs	r3, #32
 80053da:	6e22      	ldr	r2, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80053dc:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053de:	4313      	orrs	r3, r2
 80053e0:	6623      	str	r3, [r4, #96]	; 0x60
 80053e2:	e00f      	b.n	8005404 <SPI_EndRxTxTransaction+0x44>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053e4:	0032      	movs	r2, r6
 80053e6:	0029      	movs	r1, r5
 80053e8:	0020      	movs	r0, r4
 80053ea:	f7ff ffbb 	bl	8005364 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 80053ee:	2800      	cmp	r0, #0
 80053f0:	d1f2      	bne.n	80053d8 <SPI_EndRxTxTransaction+0x18>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053f2:	21c0      	movs	r1, #192	; 0xc0
 80053f4:	0033      	movs	r3, r6
 80053f6:	002a      	movs	r2, r5
 80053f8:	00c9      	lsls	r1, r1, #3
 80053fa:	0020      	movs	r0, r4
 80053fc:	f7ff ffc6 	bl	800538c <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8005400:	2800      	cmp	r0, #0
 8005402:	d1e9      	bne.n	80053d8 <SPI_EndRxTxTransaction+0x18>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8005404:	bd70      	pop	{r4, r5, r6, pc}
	...

08005408 <HAL_SPI_Init>:
{
 8005408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800540c:	2001      	movs	r0, #1
  if (hspi == NULL)
 800540e:	2c00      	cmp	r4, #0
 8005410:	d04b      	beq.n	80054aa <HAL_SPI_Init+0xa2>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005412:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005414:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005416:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005418:	355d      	adds	r5, #93	; 0x5d
 800541a:	782b      	ldrb	r3, [r5, #0]
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d105      	bne.n	800542e <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 8005422:	0022      	movs	r2, r4
 8005424:	325c      	adds	r2, #92	; 0x5c
 8005426:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8005428:	0020      	movs	r0, r4
 800542a:	f7fe fb33 	bl	8003a94 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800542e:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8005430:	2240      	movs	r2, #64	; 0x40
 8005432:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005434:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8005436:	680b      	ldr	r3, [r1, #0]
 8005438:	2000      	movs	r0, #0
 800543a:	4393      	bics	r3, r2
 800543c:	600b      	str	r3, [r1, #0]
 800543e:	23e0      	movs	r3, #224	; 0xe0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005440:	68e2      	ldr	r2, [r4, #12]
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	429a      	cmp	r2, r3
 8005446:	d931      	bls.n	80054ac <HAL_SPI_Init+0xa4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005448:	26f0      	movs	r6, #240	; 0xf0
 800544a:	0136      	lsls	r6, r6, #4
 800544c:	42b2      	cmp	r2, r6
 800544e:	d133      	bne.n	80054b8 <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005450:	0006      	movs	r6, r0
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005452:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005454:	2800      	cmp	r0, #0
 8005456:	d103      	bne.n	8005460 <HAL_SPI_Init+0x58>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005458:	429a      	cmp	r2, r3
 800545a:	d92f      	bls.n	80054bc <HAL_SPI_Init+0xb4>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800545c:	2302      	movs	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800545e:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005460:	68a7      	ldr	r7, [r4, #8]
 8005462:	6863      	ldr	r3, [r4, #4]
 8005464:	69a0      	ldr	r0, [r4, #24]
 8005466:	433b      	orrs	r3, r7
 8005468:	6927      	ldr	r7, [r4, #16]
 800546a:	433b      	orrs	r3, r7
 800546c:	6967      	ldr	r7, [r4, #20]
 800546e:	433b      	orrs	r3, r7
 8005470:	69e7      	ldr	r7, [r4, #28]
 8005472:	433b      	orrs	r3, r7
 8005474:	6a27      	ldr	r7, [r4, #32]
 8005476:	433b      	orrs	r3, r7
 8005478:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800547a:	433b      	orrs	r3, r7
 800547c:	2780      	movs	r7, #128	; 0x80
 800547e:	00bf      	lsls	r7, r7, #2
 8005480:	4007      	ands	r7, r0
 8005482:	433b      	orrs	r3, r7
 8005484:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005486:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005488:	0c00      	lsrs	r0, r0, #16
 800548a:	431a      	orrs	r2, r3
 800548c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800548e:	431a      	orrs	r2, r3
 8005490:	2304      	movs	r3, #4
 8005492:	4018      	ands	r0, r3
 8005494:	4310      	orrs	r0, r2
 8005496:	4306      	orrs	r6, r0
 8005498:	604e      	str	r6, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800549a:	69cb      	ldr	r3, [r1, #28]
 800549c:	4a08      	ldr	r2, [pc, #32]	; (80054c0 <HAL_SPI_Init+0xb8>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800549e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054a0:	4013      	ands	r3, r2
 80054a2:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80054a4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054a6:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054a8:	702b      	strb	r3, [r5, #0]
}
 80054aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80054ac:	2680      	movs	r6, #128	; 0x80
 80054ae:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d0ce      	beq.n	8005452 <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054b4:	62a0      	str	r0, [r4, #40]	; 0x28
 80054b6:	e7cc      	b.n	8005452 <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80054b8:	0006      	movs	r6, r0
 80054ba:	e7fb      	b.n	80054b4 <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80054bc:	2301      	movs	r3, #1
 80054be:	e7ce      	b.n	800545e <HAL_SPI_Init+0x56>
 80054c0:	fffff7ff 	.word	0xfffff7ff

080054c4 <HAL_SPI_DeInit>:
{
 80054c4:	b570      	push	{r4, r5, r6, lr}
 80054c6:	0004      	movs	r4, r0
    return HAL_ERROR;
 80054c8:	2001      	movs	r0, #1
  if (hspi == NULL)
 80054ca:	2c00      	cmp	r4, #0
 80054cc:	d010      	beq.n	80054f0 <HAL_SPI_DeInit+0x2c>
  hspi->State = HAL_SPI_STATE_BUSY;
 80054ce:	0025      	movs	r5, r4
 80054d0:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80054d2:	2140      	movs	r1, #64	; 0x40
 80054d4:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80054d6:	355d      	adds	r5, #93	; 0x5d
 80054d8:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80054da:	6813      	ldr	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 80054dc:	0020      	movs	r0, r4
  __HAL_SPI_DISABLE(hspi);
 80054de:	438b      	bics	r3, r1
 80054e0:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 80054e2:	f7fe fb3d 	bl	8003b60 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054e6:	2000      	movs	r0, #0
  __HAL_UNLOCK(hspi);
 80054e8:	345c      	adds	r4, #92	; 0x5c
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054ea:	6060      	str	r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_RESET;
 80054ec:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hspi);
 80054ee:	7020      	strb	r0, [r4, #0]
}
 80054f0:	bd70      	pop	{r4, r5, r6, pc}

080054f2 <HAL_SPI_Transmit>:
{
 80054f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054f4:	b087      	sub	sp, #28
 80054f6:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hspi);
 80054f8:	0003      	movs	r3, r0
 80054fa:	335c      	adds	r3, #92	; 0x5c
 80054fc:	9303      	str	r3, [sp, #12]
 80054fe:	781b      	ldrb	r3, [r3, #0]
{
 8005500:	0004      	movs	r4, r0
 8005502:	000d      	movs	r5, r1
 8005504:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8005506:	2602      	movs	r6, #2
 8005508:	2b01      	cmp	r3, #1
 800550a:	d100      	bne.n	800550e <HAL_SPI_Transmit+0x1c>
 800550c:	e07c      	b.n	8005608 <HAL_SPI_Transmit+0x116>
 800550e:	2301      	movs	r3, #1
 8005510:	9a03      	ldr	r2, [sp, #12]
 8005512:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8005514:	f7fe fd84 	bl	8004020 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005518:	0022      	movs	r2, r4
  tickstart = HAL_GetTick();
 800551a:	9002      	str	r0, [sp, #8]
  if (hspi->State != HAL_SPI_STATE_READY)
 800551c:	325d      	adds	r2, #93	; 0x5d
 800551e:	7813      	ldrb	r3, [r2, #0]
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b01      	cmp	r3, #1
 8005524:	d16a      	bne.n	80055fc <HAL_SPI_Transmit+0x10a>
    errorcode = HAL_ERROR;
 8005526:	001e      	movs	r6, r3
  if ((pData == NULL) || (Size == 0U))
 8005528:	2d00      	cmp	r5, #0
 800552a:	d067      	beq.n	80055fc <HAL_SPI_Transmit+0x10a>
 800552c:	2f00      	cmp	r7, #0
 800552e:	d065      	beq.n	80055fc <HAL_SPI_Transmit+0x10a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005530:	3302      	adds	r3, #2
 8005532:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005534:	2300      	movs	r3, #0
  hspi->RxXferSize  = 0U;
 8005536:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005538:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800553a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800553c:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800553e:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005540:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 8005542:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8005544:	8793      	strh	r3, [r2, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005546:	87d3      	strh	r3, [r2, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005548:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 800554a:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800554c:	2380      	movs	r3, #128	; 0x80
 800554e:	68a2      	ldr	r2, [r4, #8]
 8005550:	021b      	lsls	r3, r3, #8
 8005552:	429a      	cmp	r2, r3
 8005554:	d105      	bne.n	8005562 <HAL_SPI_Transmit+0x70>
    SPI_1LINE_TX(hspi);
 8005556:	2380      	movs	r3, #128	; 0x80
 8005558:	6822      	ldr	r2, [r4, #0]
 800555a:	01db      	lsls	r3, r3, #7
 800555c:	6811      	ldr	r1, [r2, #0]
 800555e:	430b      	orrs	r3, r1
 8005560:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005562:	2240      	movs	r2, #64	; 0x40
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	6819      	ldr	r1, [r3, #0]
 8005568:	4211      	tst	r1, r2
 800556a:	d102      	bne.n	8005572 <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 800556c:	6819      	ldr	r1, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005572:	21e0      	movs	r1, #224	; 0xe0
 8005574:	68e0      	ldr	r0, [r4, #12]
 8005576:	00c9      	lsls	r1, r1, #3
 8005578:	6862      	ldr	r2, [r4, #4]
 800557a:	4288      	cmp	r0, r1
 800557c:	d947      	bls.n	800560e <HAL_SPI_Transmit+0x11c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800557e:	2a00      	cmp	r2, #0
 8005580:	d001      	beq.n	8005586 <HAL_SPI_Transmit+0x94>
 8005582:	2f01      	cmp	r7, #1
 8005584:	d107      	bne.n	8005596 <HAL_SPI_Transmit+0xa4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005586:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005588:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800558a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800558c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800558e:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8005590:	3b01      	subs	r3, #1
 8005592:	b29b      	uxth	r3, r3
 8005594:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005596:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 8005598:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800559a:	2b00      	cmp	r3, #0
 800559c:	d116      	bne.n	80055cc <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800559e:	9a02      	ldr	r2, [sp, #8]
 80055a0:	9901      	ldr	r1, [sp, #4]
 80055a2:	0020      	movs	r0, r4
 80055a4:	f7ff ff0c 	bl	80053c0 <SPI_EndRxTxTransaction>
 80055a8:	2800      	cmp	r0, #0
 80055aa:	d000      	beq.n	80055ae <HAL_SPI_Transmit+0xbc>
 80055ac:	e06d      	b.n	800568a <HAL_SPI_Transmit+0x198>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055ae:	68a3      	ldr	r3, [r4, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d106      	bne.n	80055c2 <HAL_SPI_Transmit+0xd0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055b4:	9305      	str	r3, [sp, #20]
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	9205      	str	r2, [sp, #20]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	9305      	str	r3, [sp, #20]
 80055c0:	9b05      	ldr	r3, [sp, #20]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055c2:	6e26      	ldr	r6, [r4, #96]	; 0x60
 80055c4:	1e73      	subs	r3, r6, #1
 80055c6:	419e      	sbcs	r6, r3
    errorcode = HAL_BUSY;
 80055c8:	b2f6      	uxtb	r6, r6
 80055ca:	e017      	b.n	80055fc <HAL_SPI_Transmit+0x10a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055cc:	6822      	ldr	r2, [r4, #0]
 80055ce:	6893      	ldr	r3, [r2, #8]
 80055d0:	422b      	tst	r3, r5
 80055d2:	d009      	beq.n	80055e8 <HAL_SPI_Transmit+0xf6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055d6:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055d8:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055da:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055dc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80055de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80055e6:	e7d7      	b.n	8005598 <HAL_SPI_Transmit+0xa6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055e8:	f7fe fd1a 	bl	8004020 <HAL_GetTick>
 80055ec:	9b02      	ldr	r3, [sp, #8]
 80055ee:	1ac0      	subs	r0, r0, r3
 80055f0:	9b01      	ldr	r3, [sp, #4]
 80055f2:	4298      	cmp	r0, r3
 80055f4:	d3d0      	bcc.n	8005598 <HAL_SPI_Transmit+0xa6>
 80055f6:	3301      	adds	r3, #1
 80055f8:	d0ce      	beq.n	8005598 <HAL_SPI_Transmit+0xa6>
          errorcode = HAL_TIMEOUT;
 80055fa:	2603      	movs	r6, #3
  hspi->State = HAL_SPI_STATE_READY;
 80055fc:	2301      	movs	r3, #1
 80055fe:	345d      	adds	r4, #93	; 0x5d
 8005600:	7023      	strb	r3, [r4, #0]
  __HAL_UNLOCK(hspi);
 8005602:	2300      	movs	r3, #0
 8005604:	9a03      	ldr	r2, [sp, #12]
 8005606:	7013      	strb	r3, [r2, #0]
}
 8005608:	0030      	movs	r0, r6
 800560a:	b007      	add	sp, #28
 800560c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800560e:	2a00      	cmp	r2, #0
 8005610:	d001      	beq.n	8005616 <HAL_SPI_Transmit+0x124>
 8005612:	2f01      	cmp	r7, #1
 8005614:	d10a      	bne.n	800562c <HAL_SPI_Transmit+0x13a>
      if (hspi->TxXferCount > 1U)
 8005616:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005618:	2a01      	cmp	r2, #1
 800561a:	d91c      	bls.n	8005656 <HAL_SPI_Transmit+0x164>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800561c:	882a      	ldrh	r2, [r5, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800561e:	3502      	adds	r5, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005620:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8005622:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005624:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005626:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8005628:	b29b      	uxth	r3, r3
 800562a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800562c:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 800562e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0b4      	beq.n	800559e <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005634:	6822      	ldr	r2, [r4, #0]
 8005636:	6893      	ldr	r3, [r2, #8]
 8005638:	422b      	tst	r3, r5
 800563a:	d01c      	beq.n	8005676 <HAL_SPI_Transmit+0x184>
        if (hspi->TxXferCount > 1U)
 800563c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800563e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005640:	2901      	cmp	r1, #1
 8005642:	d910      	bls.n	8005666 <HAL_SPI_Transmit+0x174>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005644:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005646:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005648:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800564a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800564c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800564e:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8005650:	b29b      	uxth	r3, r3
 8005652:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005654:	e7eb      	b.n	800562e <HAL_SPI_Transmit+0x13c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005656:	782a      	ldrb	r2, [r5, #0]
 8005658:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 800565a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800565c:	3301      	adds	r3, #1
 800565e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005660:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005662:	3b01      	subs	r3, #1
 8005664:	e7e0      	b.n	8005628 <HAL_SPI_Transmit+0x136>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800566a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800566c:	3301      	adds	r3, #1
 800566e:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005670:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005672:	3b01      	subs	r3, #1
 8005674:	e7ec      	b.n	8005650 <HAL_SPI_Transmit+0x15e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005676:	f7fe fcd3 	bl	8004020 <HAL_GetTick>
 800567a:	9b02      	ldr	r3, [sp, #8]
 800567c:	1ac0      	subs	r0, r0, r3
 800567e:	9b01      	ldr	r3, [sp, #4]
 8005680:	4283      	cmp	r3, r0
 8005682:	d8d4      	bhi.n	800562e <HAL_SPI_Transmit+0x13c>
 8005684:	3301      	adds	r3, #1
 8005686:	d0d2      	beq.n	800562e <HAL_SPI_Transmit+0x13c>
 8005688:	e7b7      	b.n	80055fa <HAL_SPI_Transmit+0x108>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800568a:	2320      	movs	r3, #32
 800568c:	6623      	str	r3, [r4, #96]	; 0x60
 800568e:	e78e      	b.n	80055ae <HAL_SPI_Transmit+0xbc>

08005690 <HAL_SPI_TransmitReceive>:
{
 8005690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005692:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8005694:	0003      	movs	r3, r0
{
 8005696:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hspi);
 8005698:	335c      	adds	r3, #92	; 0x5c
 800569a:	781a      	ldrb	r2, [r3, #0]
{
 800569c:	0004      	movs	r4, r0
 800569e:	000f      	movs	r7, r1
  __HAL_LOCK(hspi);
 80056a0:	2502      	movs	r5, #2
 80056a2:	2a01      	cmp	r2, #1
 80056a4:	d100      	bne.n	80056a8 <HAL_SPI_TransmitReceive+0x18>
 80056a6:	e0ac      	b.n	8005802 <HAL_SPI_TransmitReceive+0x172>
 80056a8:	2201      	movs	r2, #1
 80056aa:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80056ac:	f7fe fcb8 	bl	8004020 <HAL_GetTick>
  tmp_state           = hspi->State;
 80056b0:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 80056b2:	9000      	str	r0, [sp, #0]
  tmp_state           = hspi->State;
 80056b4:	335d      	adds	r3, #93	; 0x5d
 80056b6:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80056b8:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 80056ba:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d00b      	beq.n	80056d8 <HAL_SPI_TransmitReceive+0x48>
 80056c0:	2282      	movs	r2, #130	; 0x82
 80056c2:	0052      	lsls	r2, r2, #1
 80056c4:	4291      	cmp	r1, r2
 80056c6:	d000      	beq.n	80056ca <HAL_SPI_TransmitReceive+0x3a>
 80056c8:	e094      	b.n	80057f4 <HAL_SPI_TransmitReceive+0x164>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80056ca:	68a2      	ldr	r2, [r4, #8]
 80056cc:	2a00      	cmp	r2, #0
 80056ce:	d000      	beq.n	80056d2 <HAL_SPI_TransmitReceive+0x42>
 80056d0:	e090      	b.n	80057f4 <HAL_SPI_TransmitReceive+0x164>
 80056d2:	2b04      	cmp	r3, #4
 80056d4:	d000      	beq.n	80056d8 <HAL_SPI_TransmitReceive+0x48>
 80056d6:	e08d      	b.n	80057f4 <HAL_SPI_TransmitReceive+0x164>
    errorcode = HAL_ERROR;
 80056d8:	2501      	movs	r5, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056da:	2f00      	cmp	r7, #0
 80056dc:	d100      	bne.n	80056e0 <HAL_SPI_TransmitReceive+0x50>
 80056de:	e089      	b.n	80057f4 <HAL_SPI_TransmitReceive+0x164>
 80056e0:	9b01      	ldr	r3, [sp, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d100      	bne.n	80056e8 <HAL_SPI_TransmitReceive+0x58>
 80056e6:	e085      	b.n	80057f4 <HAL_SPI_TransmitReceive+0x164>
 80056e8:	2e00      	cmp	r6, #0
 80056ea:	d100      	bne.n	80056ee <HAL_SPI_TransmitReceive+0x5e>
 80056ec:	e082      	b.n	80057f4 <HAL_SPI_TransmitReceive+0x164>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80056ee:	0023      	movs	r3, r4
 80056f0:	335d      	adds	r3, #93	; 0x5d
 80056f2:	781a      	ldrb	r2, [r3, #0]
 80056f4:	2a04      	cmp	r2, #4
 80056f6:	d001      	beq.n	80056fc <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80056f8:	2205      	movs	r2, #5
 80056fa:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80056fc:	9a01      	ldr	r2, [sp, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056fe:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005700:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005702:	0022      	movs	r2, r4
 8005704:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005706:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8005708:	87d6      	strh	r6, [r2, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800570a:	1da2      	adds	r2, r4, #6
 800570c:	87d6      	strh	r6, [r2, #62]	; 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800570e:	22e0      	movs	r2, #224	; 0xe0
 8005710:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 8005712:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005714:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005716:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005718:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800571a:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800571c:	00d2      	lsls	r2, r2, #3
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	4290      	cmp	r0, r2
 8005722:	d801      	bhi.n	8005728 <HAL_SPI_TransmitReceive+0x98>
 8005724:	2e01      	cmp	r6, #1
 8005726:	d931      	bls.n	800578c <HAL_SPI_TransmitReceive+0xfc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	4d71      	ldr	r5, [pc, #452]	; (80058f0 <HAL_SPI_TransmitReceive+0x260>)
 800572c:	402a      	ands	r2, r5
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800572e:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005730:	2240      	movs	r2, #64	; 0x40
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	681d      	ldr	r5, [r3, #0]
 8005736:	4215      	tst	r5, r2
 8005738:	d102      	bne.n	8005740 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 800573a:	681d      	ldr	r5, [r3, #0]
 800573c:	432a      	orrs	r2, r5
 800573e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005740:	22e0      	movs	r2, #224	; 0xe0
 8005742:	00d2      	lsls	r2, r2, #3
 8005744:	4290      	cmp	r0, r2
 8005746:	d95e      	bls.n	8005806 <HAL_SPI_TransmitReceive+0x176>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005748:	2900      	cmp	r1, #0
 800574a:	d001      	beq.n	8005750 <HAL_SPI_TransmitReceive+0xc0>
 800574c:	2e01      	cmp	r6, #1
 800574e:	d107      	bne.n	8005760 <HAL_SPI_TransmitReceive+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005750:	883a      	ldrh	r2, [r7, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005752:	3702      	adds	r7, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005754:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005756:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005758:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800575a:	3b01      	subs	r3, #1
 800575c:	b29b      	uxth	r3, r3
 800575e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005760:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005762:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005764:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005766:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005768:	2b00      	cmp	r3, #0
 800576a:	d114      	bne.n	8005796 <HAL_SPI_TransmitReceive+0x106>
 800576c:	0023      	movs	r3, r4
 800576e:	3308      	adds	r3, #8
 8005770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10f      	bne.n	8005796 <HAL_SPI_TransmitReceive+0x106>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005776:	9a00      	ldr	r2, [sp, #0]
 8005778:	9908      	ldr	r1, [sp, #32]
 800577a:	0020      	movs	r0, r4
 800577c:	f7ff fe20 	bl	80053c0 <SPI_EndRxTxTransaction>
 8005780:	1e05      	subs	r5, r0, #0
 8005782:	d037      	beq.n	80057f4 <HAL_SPI_TransmitReceive+0x164>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005784:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8005786:	2501      	movs	r5, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005788:	6623      	str	r3, [r4, #96]	; 0x60
 800578a:	e033      	b.n	80057f4 <HAL_SPI_TransmitReceive+0x164>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800578c:	2280      	movs	r2, #128	; 0x80
 800578e:	685d      	ldr	r5, [r3, #4]
 8005790:	0152      	lsls	r2, r2, #5
 8005792:	432a      	orrs	r2, r5
 8005794:	e7cb      	b.n	800572e <HAL_SPI_TransmitReceive+0x9e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005796:	6822      	ldr	r2, [r4, #0]
 8005798:	6893      	ldr	r3, [r2, #8]
 800579a:	423b      	tst	r3, r7
 800579c:	d00e      	beq.n	80057bc <HAL_SPI_TransmitReceive+0x12c>
 800579e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00b      	beq.n	80057bc <HAL_SPI_TransmitReceive+0x12c>
 80057a4:	2d01      	cmp	r5, #1
 80057a6:	d109      	bne.n	80057bc <HAL_SPI_TransmitReceive+0x12c>
        txallowed = 0U;
 80057a8:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80057ac:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057ae:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057b0:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057b2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80057b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80057b6:	3b01      	subs	r3, #1
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057bc:	6893      	ldr	r3, [r2, #8]
 80057be:	4233      	tst	r3, r6
 80057c0:	d00e      	beq.n	80057e0 <HAL_SPI_TransmitReceive+0x150>
 80057c2:	0021      	movs	r1, r4
 80057c4:	3108      	adds	r1, #8
 80057c6:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d009      	beq.n	80057e0 <HAL_SPI_TransmitReceive+0x150>
        txallowed = 1U;
 80057cc:	0035      	movs	r5, r6
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057d0:	68d2      	ldr	r2, [r2, #12]
 80057d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057d4:	3302      	adds	r3, #2
 80057d6:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80057d8:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 80057da:	3b01      	subs	r3, #1
 80057dc:	b29b      	uxth	r3, r3
 80057de:	87cb      	strh	r3, [r1, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80057e0:	f7fe fc1e 	bl	8004020 <HAL_GetTick>
 80057e4:	9b00      	ldr	r3, [sp, #0]
 80057e6:	1ac0      	subs	r0, r0, r3
 80057e8:	9b08      	ldr	r3, [sp, #32]
 80057ea:	4283      	cmp	r3, r0
 80057ec:	d8bb      	bhi.n	8005766 <HAL_SPI_TransmitReceive+0xd6>
 80057ee:	3301      	adds	r3, #1
 80057f0:	d0b9      	beq.n	8005766 <HAL_SPI_TransmitReceive+0xd6>
        errorcode = HAL_TIMEOUT;
 80057f2:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 80057f4:	0023      	movs	r3, r4
 80057f6:	2201      	movs	r2, #1
 80057f8:	335d      	adds	r3, #93	; 0x5d
 80057fa:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80057fc:	2300      	movs	r3, #0
 80057fe:	345c      	adds	r4, #92	; 0x5c
 8005800:	7023      	strb	r3, [r4, #0]
}
 8005802:	0028      	movs	r0, r5
 8005804:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005806:	2900      	cmp	r1, #0
 8005808:	d001      	beq.n	800580e <HAL_SPI_TransmitReceive+0x17e>
 800580a:	2e01      	cmp	r6, #1
 800580c:	d10a      	bne.n	8005824 <HAL_SPI_TransmitReceive+0x194>
      if (hspi->TxXferCount > 1U)
 800580e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005810:	2a01      	cmp	r2, #1
 8005812:	d951      	bls.n	80058b8 <HAL_SPI_TransmitReceive+0x228>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005814:	883a      	ldrh	r2, [r7, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005816:	3702      	adds	r7, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005818:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800581a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800581c:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800581e:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8005820:	b29b      	uxth	r3, r3
 8005822:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005824:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005826:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005828:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800582a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800582c:	2b00      	cmp	r3, #0
 800582e:	d105      	bne.n	800583c <HAL_SPI_TransmitReceive+0x1ac>
 8005830:	0023      	movs	r3, r4
 8005832:	3308      	adds	r3, #8
 8005834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005836:	2b00      	cmp	r3, #0
 8005838:	d100      	bne.n	800583c <HAL_SPI_TransmitReceive+0x1ac>
 800583a:	e79c      	b.n	8005776 <HAL_SPI_TransmitReceive+0xe6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800583c:	6822      	ldr	r2, [r4, #0]
 800583e:	6893      	ldr	r3, [r2, #8]
 8005840:	423b      	tst	r3, r7
 8005842:	d011      	beq.n	8005868 <HAL_SPI_TransmitReceive+0x1d8>
 8005844:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00e      	beq.n	8005868 <HAL_SPI_TransmitReceive+0x1d8>
 800584a:	2d01      	cmp	r5, #1
 800584c:	d10c      	bne.n	8005868 <HAL_SPI_TransmitReceive+0x1d8>
        if (hspi->TxXferCount > 1U)
 800584e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8005850:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005852:	2901      	cmp	r1, #1
 8005854:	d938      	bls.n	80058c8 <HAL_SPI_TransmitReceive+0x238>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005856:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005858:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800585a:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800585c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800585e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005860:	3b02      	subs	r3, #2
        txallowed = 0U;
 8005862:	2500      	movs	r5, #0
          hspi->TxXferCount--;
 8005864:	b29b      	uxth	r3, r3
 8005866:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005868:	6821      	ldr	r1, [r4, #0]
 800586a:	688b      	ldr	r3, [r1, #8]
 800586c:	4233      	tst	r3, r6
 800586e:	d019      	beq.n	80058a4 <HAL_SPI_TransmitReceive+0x214>
 8005870:	0023      	movs	r3, r4
 8005872:	3308      	adds	r3, #8
 8005874:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8005876:	2a00      	cmp	r2, #0
 8005878:	d014      	beq.n	80058a4 <HAL_SPI_TransmitReceive+0x214>
        if (hspi->RxXferCount > 1U)
 800587a:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 800587c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800587e:	2801      	cmp	r0, #1
 8005880:	d92a      	bls.n	80058d8 <HAL_SPI_TransmitReceive+0x248>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005882:	68c8      	ldr	r0, [r1, #12]
        txallowed = 1U;
 8005884:	0035      	movs	r5, r6
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005886:	8010      	strh	r0, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005888:	3202      	adds	r2, #2
 800588a:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800588c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800588e:	3a02      	subs	r2, #2
 8005890:	b292      	uxth	r2, r2
 8005892:	87da      	strh	r2, [r3, #62]	; 0x3e
          if (hspi->RxXferCount <= 1U)
 8005894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005896:	2b01      	cmp	r3, #1
 8005898:	d804      	bhi.n	80058a4 <HAL_SPI_TransmitReceive+0x214>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800589a:	2380      	movs	r3, #128	; 0x80
 800589c:	684a      	ldr	r2, [r1, #4]
 800589e:	015b      	lsls	r3, r3, #5
 80058a0:	4313      	orrs	r3, r2
 80058a2:	604b      	str	r3, [r1, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80058a4:	f7fe fbbc 	bl	8004020 <HAL_GetTick>
 80058a8:	9b00      	ldr	r3, [sp, #0]
 80058aa:	1ac0      	subs	r0, r0, r3
 80058ac:	9b08      	ldr	r3, [sp, #32]
 80058ae:	4283      	cmp	r3, r0
 80058b0:	d8bb      	bhi.n	800582a <HAL_SPI_TransmitReceive+0x19a>
 80058b2:	3301      	adds	r3, #1
 80058b4:	d0b9      	beq.n	800582a <HAL_SPI_TransmitReceive+0x19a>
 80058b6:	e79c      	b.n	80057f2 <HAL_SPI_TransmitReceive+0x162>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058b8:	783a      	ldrb	r2, [r7, #0]
 80058ba:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80058bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80058be:	3301      	adds	r3, #1
 80058c0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80058c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80058c4:	3b01      	subs	r3, #1
 80058c6:	e7ab      	b.n	8005820 <HAL_SPI_TransmitReceive+0x190>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80058cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80058ce:	3301      	adds	r3, #1
 80058d0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80058d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80058d4:	3b01      	subs	r3, #1
 80058d6:	e7c4      	b.n	8005862 <HAL_SPI_TransmitReceive+0x1d2>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058d8:	7b09      	ldrb	r1, [r1, #12]
        txallowed = 1U;
 80058da:	0035      	movs	r5, r6
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058dc:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 80058de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80058e0:	3201      	adds	r2, #1
 80058e2:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80058e4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80058e6:	3a01      	subs	r2, #1
 80058e8:	b292      	uxth	r2, r2
 80058ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058ec:	e7da      	b.n	80058a4 <HAL_SPI_TransmitReceive+0x214>
 80058ee:	46c0      	nop			; (mov r8, r8)
 80058f0:	ffffefff 	.word	0xffffefff

080058f4 <HAL_SPI_GetState>:
  return hspi->State;
 80058f4:	305d      	adds	r0, #93	; 0x5d
 80058f6:	7800      	ldrb	r0, [r0, #0]
 80058f8:	b2c0      	uxtb	r0, r0
}
 80058fa:	4770      	bx	lr

080058fc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058fc:	2201      	movs	r2, #1
 80058fe:	6a03      	ldr	r3, [r0, #32]
{
 8005900:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005902:	4393      	bics	r3, r2
 8005904:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005906:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005908:	4a19      	ldr	r2, [pc, #100]	; (8005970 <TIM_OC1_SetConfig+0x74>)
  tmpcr2 =  TIMx->CR2;
 800590a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800590c:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800590e:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005910:	680a      	ldr	r2, [r1, #0]
 8005912:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005914:	2202      	movs	r2, #2
 8005916:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005918:	688a      	ldr	r2, [r1, #8]
 800591a:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800591c:	4a15      	ldr	r2, [pc, #84]	; (8005974 <TIM_OC1_SetConfig+0x78>)
 800591e:	4290      	cmp	r0, r2
 8005920:	d008      	beq.n	8005934 <TIM_OC1_SetConfig+0x38>
 8005922:	4e15      	ldr	r6, [pc, #84]	; (8005978 <TIM_OC1_SetConfig+0x7c>)
 8005924:	42b0      	cmp	r0, r6
 8005926:	d005      	beq.n	8005934 <TIM_OC1_SetConfig+0x38>
 8005928:	4e14      	ldr	r6, [pc, #80]	; (800597c <TIM_OC1_SetConfig+0x80>)
 800592a:	42b0      	cmp	r0, r6
 800592c:	d002      	beq.n	8005934 <TIM_OC1_SetConfig+0x38>
 800592e:	4e14      	ldr	r6, [pc, #80]	; (8005980 <TIM_OC1_SetConfig+0x84>)
 8005930:	42b0      	cmp	r0, r6
 8005932:	d116      	bne.n	8005962 <TIM_OC1_SetConfig+0x66>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005934:	2608      	movs	r6, #8
 8005936:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005938:	68ce      	ldr	r6, [r1, #12]
 800593a:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800593c:	2604      	movs	r6, #4
 800593e:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005940:	4290      	cmp	r0, r2
 8005942:	d008      	beq.n	8005956 <TIM_OC1_SetConfig+0x5a>
 8005944:	4a0c      	ldr	r2, [pc, #48]	; (8005978 <TIM_OC1_SetConfig+0x7c>)
 8005946:	4290      	cmp	r0, r2
 8005948:	d005      	beq.n	8005956 <TIM_OC1_SetConfig+0x5a>
 800594a:	4a0c      	ldr	r2, [pc, #48]	; (800597c <TIM_OC1_SetConfig+0x80>)
 800594c:	4290      	cmp	r0, r2
 800594e:	d002      	beq.n	8005956 <TIM_OC1_SetConfig+0x5a>
 8005950:	4a0b      	ldr	r2, [pc, #44]	; (8005980 <TIM_OC1_SetConfig+0x84>)
 8005952:	4290      	cmp	r0, r2
 8005954:	d105      	bne.n	8005962 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005956:	4a0b      	ldr	r2, [pc, #44]	; (8005984 <TIM_OC1_SetConfig+0x88>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005958:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800595a:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 800595c:	694c      	ldr	r4, [r1, #20]
 800595e:	4334      	orrs	r4, r6
 8005960:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005962:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005964:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005966:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8005968:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800596a:	6203      	str	r3, [r0, #32]
}
 800596c:	bd70      	pop	{r4, r5, r6, pc}
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	fffeff8c 	.word	0xfffeff8c
 8005974:	40012c00 	.word	0x40012c00
 8005978:	40014000 	.word	0x40014000
 800597c:	40014400 	.word	0x40014400
 8005980:	40014800 	.word	0x40014800
 8005984:	fffffcff 	.word	0xfffffcff

08005988 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005988:	6a03      	ldr	r3, [r0, #32]
 800598a:	4a18      	ldr	r2, [pc, #96]	; (80059ec <TIM_OC3_SetConfig+0x64>)
{
 800598c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800598e:	4013      	ands	r3, r2
 8005990:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005992:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005994:	4d16      	ldr	r5, [pc, #88]	; (80059f0 <TIM_OC3_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 8005996:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8005998:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800599a:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800599c:	680d      	ldr	r5, [r1, #0]
 800599e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059a0:	4d14      	ldr	r5, [pc, #80]	; (80059f4 <TIM_OC3_SetConfig+0x6c>)
 80059a2:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059a4:	688d      	ldr	r5, [r1, #8]
 80059a6:	022d      	lsls	r5, r5, #8
 80059a8:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059aa:	4d13      	ldr	r5, [pc, #76]	; (80059f8 <TIM_OC3_SetConfig+0x70>)
 80059ac:	42a8      	cmp	r0, r5
 80059ae:	d10e      	bne.n	80059ce <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059b0:	4d12      	ldr	r5, [pc, #72]	; (80059fc <TIM_OC3_SetConfig+0x74>)
 80059b2:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059b4:	68cb      	ldr	r3, [r1, #12]
 80059b6:	021b      	lsls	r3, r3, #8
 80059b8:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059ba:	4d11      	ldr	r5, [pc, #68]	; (8005a00 <TIM_OC3_SetConfig+0x78>)
 80059bc:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059be:	4d11      	ldr	r5, [pc, #68]	; (8005a04 <TIM_OC3_SetConfig+0x7c>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059c0:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059c2:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059c4:	698a      	ldr	r2, [r1, #24]
 80059c6:	4332      	orrs	r2, r6
 80059c8:	0112      	lsls	r2, r2, #4
 80059ca:	432a      	orrs	r2, r5
 80059cc:	e008      	b.n	80059e0 <TIM_OC3_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ce:	4d0e      	ldr	r5, [pc, #56]	; (8005a08 <TIM_OC3_SetConfig+0x80>)
 80059d0:	42a8      	cmp	r0, r5
 80059d2:	d0f4      	beq.n	80059be <TIM_OC3_SetConfig+0x36>
 80059d4:	4d0d      	ldr	r5, [pc, #52]	; (8005a0c <TIM_OC3_SetConfig+0x84>)
 80059d6:	42a8      	cmp	r0, r5
 80059d8:	d0f1      	beq.n	80059be <TIM_OC3_SetConfig+0x36>
 80059da:	4d0d      	ldr	r5, [pc, #52]	; (8005a10 <TIM_OC3_SetConfig+0x88>)
 80059dc:	42a8      	cmp	r0, r5
 80059de:	d0ee      	beq.n	80059be <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e0:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059e2:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80059e4:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80059e6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e8:	6203      	str	r3, [r0, #32]
}
 80059ea:	bd70      	pop	{r4, r5, r6, pc}
 80059ec:	fffffeff 	.word	0xfffffeff
 80059f0:	fffeff8c 	.word	0xfffeff8c
 80059f4:	fffffdff 	.word	0xfffffdff
 80059f8:	40012c00 	.word	0x40012c00
 80059fc:	fffff7ff 	.word	0xfffff7ff
 8005a00:	fffffbff 	.word	0xfffffbff
 8005a04:	ffffcfff 	.word	0xffffcfff
 8005a08:	40014000 	.word	0x40014000
 8005a0c:	40014400 	.word	0x40014400
 8005a10:	40014800 	.word	0x40014800

08005a14 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a14:	6a03      	ldr	r3, [r0, #32]
 8005a16:	4a14      	ldr	r2, [pc, #80]	; (8005a68 <TIM_OC4_SetConfig+0x54>)
{
 8005a18:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a20:	4c12      	ldr	r4, [pc, #72]	; (8005a6c <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 8005a22:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8005a24:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a26:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a28:	680c      	ldr	r4, [r1, #0]
 8005a2a:	0224      	lsls	r4, r4, #8
 8005a2c:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a2e:	4c10      	ldr	r4, [pc, #64]	; (8005a70 <TIM_OC4_SetConfig+0x5c>)
 8005a30:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a32:	688c      	ldr	r4, [r1, #8]
 8005a34:	0324      	lsls	r4, r4, #12
 8005a36:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a38:	4c0e      	ldr	r4, [pc, #56]	; (8005a74 <TIM_OC4_SetConfig+0x60>)
 8005a3a:	42a0      	cmp	r0, r4
 8005a3c:	d008      	beq.n	8005a50 <TIM_OC4_SetConfig+0x3c>
 8005a3e:	4c0e      	ldr	r4, [pc, #56]	; (8005a78 <TIM_OC4_SetConfig+0x64>)
 8005a40:	42a0      	cmp	r0, r4
 8005a42:	d005      	beq.n	8005a50 <TIM_OC4_SetConfig+0x3c>
 8005a44:	4c0d      	ldr	r4, [pc, #52]	; (8005a7c <TIM_OC4_SetConfig+0x68>)
 8005a46:	42a0      	cmp	r0, r4
 8005a48:	d002      	beq.n	8005a50 <TIM_OC4_SetConfig+0x3c>
 8005a4a:	4c0d      	ldr	r4, [pc, #52]	; (8005a80 <TIM_OC4_SetConfig+0x6c>)
 8005a4c:	42a0      	cmp	r0, r4
 8005a4e:	d104      	bne.n	8005a5a <TIM_OC4_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a50:	4c0c      	ldr	r4, [pc, #48]	; (8005a84 <TIM_OC4_SetConfig+0x70>)
 8005a52:	4023      	ands	r3, r4

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a54:	694c      	ldr	r4, [r1, #20]
 8005a56:	01a4      	lsls	r4, r4, #6
 8005a58:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a5a:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a5c:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005a5e:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005a60:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a62:	6202      	str	r2, [r0, #32]
}
 8005a64:	bd30      	pop	{r4, r5, pc}
 8005a66:	46c0      	nop			; (mov r8, r8)
 8005a68:	ffffefff 	.word	0xffffefff
 8005a6c:	feff8cff 	.word	0xfeff8cff
 8005a70:	ffffdfff 	.word	0xffffdfff
 8005a74:	40012c00 	.word	0x40012c00
 8005a78:	40014000 	.word	0x40014000
 8005a7c:	40014400 	.word	0x40014400
 8005a80:	40014800 	.word	0x40014800
 8005a84:	ffffbfff 	.word	0xffffbfff

08005a88 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a88:	6a03      	ldr	r3, [r0, #32]
 8005a8a:	4a13      	ldr	r2, [pc, #76]	; (8005ad8 <TIM_OC5_SetConfig+0x50>)
{
 8005a8c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a8e:	4013      	ands	r3, r2
 8005a90:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a92:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a94:	4e11      	ldr	r6, [pc, #68]	; (8005adc <TIM_OC5_SetConfig+0x54>)
  tmpcr2 =  TIMx->CR2;
 8005a96:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8005a98:	6d45      	ldr	r5, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a9a:	4035      	ands	r5, r6
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a9c:	680e      	ldr	r6, [r1, #0]
 8005a9e:	4335      	orrs	r5, r6

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005aa0:	4e0f      	ldr	r6, [pc, #60]	; (8005ae0 <TIM_OC5_SetConfig+0x58>)
 8005aa2:	4034      	ands	r4, r6
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005aa4:	688e      	ldr	r6, [r1, #8]
 8005aa6:	0436      	lsls	r6, r6, #16
 8005aa8:	4334      	orrs	r4, r6

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aaa:	4e0e      	ldr	r6, [pc, #56]	; (8005ae4 <TIM_OC5_SetConfig+0x5c>)
 8005aac:	42b0      	cmp	r0, r6
 8005aae:	d008      	beq.n	8005ac2 <TIM_OC5_SetConfig+0x3a>
 8005ab0:	4e0d      	ldr	r6, [pc, #52]	; (8005ae8 <TIM_OC5_SetConfig+0x60>)
 8005ab2:	42b0      	cmp	r0, r6
 8005ab4:	d005      	beq.n	8005ac2 <TIM_OC5_SetConfig+0x3a>
 8005ab6:	4e0d      	ldr	r6, [pc, #52]	; (8005aec <TIM_OC5_SetConfig+0x64>)
 8005ab8:	42b0      	cmp	r0, r6
 8005aba:	d002      	beq.n	8005ac2 <TIM_OC5_SetConfig+0x3a>
 8005abc:	4e0c      	ldr	r6, [pc, #48]	; (8005af0 <TIM_OC5_SetConfig+0x68>)
 8005abe:	42b0      	cmp	r0, r6
 8005ac0:	d103      	bne.n	8005aca <TIM_OC5_SetConfig+0x42>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ac2:	4013      	ands	r3, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ac4:	694a      	ldr	r2, [r1, #20]
 8005ac6:	0212      	lsls	r2, r2, #8
 8005ac8:	4313      	orrs	r3, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aca:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005acc:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005ace:	6545      	str	r5, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8005ad0:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad2:	6204      	str	r4, [r0, #32]
}
 8005ad4:	bd70      	pop	{r4, r5, r6, pc}
 8005ad6:	46c0      	nop			; (mov r8, r8)
 8005ad8:	fffeffff 	.word	0xfffeffff
 8005adc:	fffeff8f 	.word	0xfffeff8f
 8005ae0:	fffdffff 	.word	0xfffdffff
 8005ae4:	40012c00 	.word	0x40012c00
 8005ae8:	40014000 	.word	0x40014000
 8005aec:	40014400 	.word	0x40014400
 8005af0:	40014800 	.word	0x40014800

08005af4 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005af4:	6a03      	ldr	r3, [r0, #32]
 8005af6:	4a14      	ldr	r2, [pc, #80]	; (8005b48 <TIM_OC6_SetConfig+0x54>)
{
 8005af8:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005afa:	4013      	ands	r3, r2
 8005afc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afe:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b00:	4c12      	ldr	r4, [pc, #72]	; (8005b4c <TIM_OC6_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 8005b02:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8005b04:	6d45      	ldr	r5, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b06:	4025      	ands	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b08:	680c      	ldr	r4, [r1, #0]
 8005b0a:	0224      	lsls	r4, r4, #8
 8005b0c:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b0e:	4c10      	ldr	r4, [pc, #64]	; (8005b50 <TIM_OC6_SetConfig+0x5c>)
 8005b10:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b12:	688c      	ldr	r4, [r1, #8]
 8005b14:	0524      	lsls	r4, r4, #20
 8005b16:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b18:	4c0e      	ldr	r4, [pc, #56]	; (8005b54 <TIM_OC6_SetConfig+0x60>)
 8005b1a:	42a0      	cmp	r0, r4
 8005b1c:	d008      	beq.n	8005b30 <TIM_OC6_SetConfig+0x3c>
 8005b1e:	4c0e      	ldr	r4, [pc, #56]	; (8005b58 <TIM_OC6_SetConfig+0x64>)
 8005b20:	42a0      	cmp	r0, r4
 8005b22:	d005      	beq.n	8005b30 <TIM_OC6_SetConfig+0x3c>
 8005b24:	4c0d      	ldr	r4, [pc, #52]	; (8005b5c <TIM_OC6_SetConfig+0x68>)
 8005b26:	42a0      	cmp	r0, r4
 8005b28:	d002      	beq.n	8005b30 <TIM_OC6_SetConfig+0x3c>
 8005b2a:	4c0d      	ldr	r4, [pc, #52]	; (8005b60 <TIM_OC6_SetConfig+0x6c>)
 8005b2c:	42a0      	cmp	r0, r4
 8005b2e:	d104      	bne.n	8005b3a <TIM_OC6_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b30:	4c0c      	ldr	r4, [pc, #48]	; (8005b64 <TIM_OC6_SetConfig+0x70>)
 8005b32:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b34:	694c      	ldr	r4, [r1, #20]
 8005b36:	02a4      	lsls	r4, r4, #10
 8005b38:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b3a:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b3c:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005b3e:	6545      	str	r5, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8005b40:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b42:	6202      	str	r2, [r0, #32]
}
 8005b44:	bd30      	pop	{r4, r5, pc}
 8005b46:	46c0      	nop			; (mov r8, r8)
 8005b48:	ffefffff 	.word	0xffefffff
 8005b4c:	feff8fff 	.word	0xfeff8fff
 8005b50:	ffdfffff 	.word	0xffdfffff
 8005b54:	40012c00 	.word	0x40012c00
 8005b58:	40014000 	.word	0x40014000
 8005b5c:	40014400 	.word	0x40014400
 8005b60:	40014800 	.word	0x40014800
 8005b64:	fffbffff 	.word	0xfffbffff

08005b68 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b68:	2201      	movs	r2, #1
 8005b6a:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b6c:	4807      	ldr	r0, [pc, #28]	; (8005b8c <HAL_TIM_Base_Start_IT+0x24>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b6e:	68d9      	ldr	r1, [r3, #12]
 8005b70:	4311      	orrs	r1, r2
 8005b72:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b74:	6899      	ldr	r1, [r3, #8]
 8005b76:	4001      	ands	r1, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b78:	2906      	cmp	r1, #6
 8005b7a:	d005      	beq.n	8005b88 <HAL_TIM_Base_Start_IT+0x20>
 8005b7c:	3807      	subs	r0, #7
 8005b7e:	4281      	cmp	r1, r0
 8005b80:	d002      	beq.n	8005b88 <HAL_TIM_Base_Start_IT+0x20>
    __HAL_TIM_ENABLE(htim);
 8005b82:	6819      	ldr	r1, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	601a      	str	r2, [r3, #0]
}
 8005b88:	2000      	movs	r0, #0
 8005b8a:	4770      	bx	lr
 8005b8c:	00010007 	.word	0x00010007

08005b90 <HAL_TIM_PWM_MspInit>:
 8005b90:	4770      	bx	lr

08005b92 <HAL_TIM_IC_MspInit>:
 8005b92:	4770      	bx	lr

08005b94 <HAL_TIM_OC_DelayElapsedCallback>:
 8005b94:	4770      	bx	lr

08005b96 <HAL_TIM_IC_CaptureCallback>:
 8005b96:	4770      	bx	lr

08005b98 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005b98:	4770      	bx	lr

08005b9a <HAL_TIM_TriggerCallback>:
 8005b9a:	4770      	bx	lr

08005b9c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	6803      	ldr	r3, [r0, #0]
{
 8005ba0:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ba2:	6919      	ldr	r1, [r3, #16]
{
 8005ba4:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ba6:	4211      	tst	r1, r2
 8005ba8:	d00e      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005baa:	68d9      	ldr	r1, [r3, #12]
 8005bac:	4211      	tst	r1, r2
 8005bae:	d00b      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bb0:	3a05      	subs	r2, #5
 8005bb2:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bb4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bb6:	3204      	adds	r2, #4
 8005bb8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bba:	079b      	lsls	r3, r3, #30
 8005bbc:	d100      	bne.n	8005bc0 <HAL_TIM_IRQHandler+0x24>
 8005bbe:	e086      	b.n	8005cce <HAL_TIM_IRQHandler+0x132>
          HAL_TIM_IC_CaptureCallback(htim);
 8005bc0:	f7ff ffe9 	bl	8005b96 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bc8:	2204      	movs	r2, #4
 8005bca:	6823      	ldr	r3, [r4, #0]
 8005bcc:	6919      	ldr	r1, [r3, #16]
 8005bce:	4211      	tst	r1, r2
 8005bd0:	d011      	beq.n	8005bf6 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bd2:	68d9      	ldr	r1, [r3, #12]
 8005bd4:	4211      	tst	r1, r2
 8005bd6:	d00e      	beq.n	8005bf6 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bd8:	3a09      	subs	r2, #9
 8005bda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bdc:	3207      	adds	r2, #7
 8005bde:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005be0:	699a      	ldr	r2, [r3, #24]
 8005be2:	23c0      	movs	r3, #192	; 0xc0
 8005be4:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8005be6:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005be8:	421a      	tst	r2, r3
 8005bea:	d100      	bne.n	8005bee <HAL_TIM_IRQHandler+0x52>
 8005bec:	e075      	b.n	8005cda <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_IC_CaptureCallback(htim);
 8005bee:	f7ff ffd2 	bl	8005b96 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bf6:	2208      	movs	r2, #8
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	6919      	ldr	r1, [r3, #16]
 8005bfc:	4211      	tst	r1, r2
 8005bfe:	d00e      	beq.n	8005c1e <HAL_TIM_IRQHandler+0x82>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c00:	68d9      	ldr	r1, [r3, #12]
 8005c02:	4211      	tst	r1, r2
 8005c04:	d00b      	beq.n	8005c1e <HAL_TIM_IRQHandler+0x82>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c06:	3a11      	subs	r2, #17
 8005c08:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c0a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c0c:	320d      	adds	r2, #13
 8005c0e:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005c10:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c12:	079b      	lsls	r3, r3, #30
 8005c14:	d067      	beq.n	8005ce6 <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005c16:	f7ff ffbe 	bl	8005b96 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c1e:	2210      	movs	r2, #16
 8005c20:	6823      	ldr	r3, [r4, #0]
 8005c22:	6919      	ldr	r1, [r3, #16]
 8005c24:	4211      	tst	r1, r2
 8005c26:	d010      	beq.n	8005c4a <HAL_TIM_IRQHandler+0xae>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c28:	68d9      	ldr	r1, [r3, #12]
 8005c2a:	4211      	tst	r1, r2
 8005c2c:	d00d      	beq.n	8005c4a <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c2e:	3a21      	subs	r2, #33	; 0x21
 8005c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c32:	3219      	adds	r2, #25
 8005c34:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c36:	69da      	ldr	r2, [r3, #28]
 8005c38:	23c0      	movs	r3, #192	; 0xc0
 8005c3a:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8005c3c:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c3e:	421a      	tst	r2, r3
 8005c40:	d057      	beq.n	8005cf2 <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_IC_CaptureCallback(htim);
 8005c42:	f7ff ffa8 	bl	8005b96 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c46:	2300      	movs	r3, #0
 8005c48:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	6919      	ldr	r1, [r3, #16]
 8005c50:	4211      	tst	r1, r2
 8005c52:	d007      	beq.n	8005c64 <HAL_TIM_IRQHandler+0xc8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c54:	68d9      	ldr	r1, [r3, #12]
 8005c56:	4211      	tst	r1, r2
 8005c58:	d004      	beq.n	8005c64 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c5a:	3a03      	subs	r2, #3
 8005c5c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c5e:	0020      	movs	r0, r4
 8005c60:	f7fd f9da 	bl	8003018 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c64:	2280      	movs	r2, #128	; 0x80
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	6919      	ldr	r1, [r3, #16]
 8005c6a:	4211      	tst	r1, r2
 8005c6c:	d008      	beq.n	8005c80 <HAL_TIM_IRQHandler+0xe4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c6e:	68d9      	ldr	r1, [r3, #12]
 8005c70:	4211      	tst	r1, r2
 8005c72:	d005      	beq.n	8005c80 <HAL_TIM_IRQHandler+0xe4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c74:	3a02      	subs	r2, #2
 8005c76:	3aff      	subs	r2, #255	; 0xff
 8005c78:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005c7a:	0020      	movs	r0, r4
 8005c7c:	f000 fb7b 	bl	8006376 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	691a      	ldr	r2, [r3, #16]
 8005c84:	05d2      	lsls	r2, r2, #23
 8005c86:	d507      	bpl.n	8005c98 <HAL_TIM_IRQHandler+0xfc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	0612      	lsls	r2, r2, #24
 8005c8c:	d504      	bpl.n	8005c98 <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c8e:	4a1c      	ldr	r2, [pc, #112]	; (8005d00 <HAL_TIM_IRQHandler+0x164>)
      HAL_TIMEx_Break2Callback(htim);
 8005c90:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c92:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005c94:	f000 fb70 	bl	8006378 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c98:	2240      	movs	r2, #64	; 0x40
 8005c9a:	6823      	ldr	r3, [r4, #0]
 8005c9c:	6919      	ldr	r1, [r3, #16]
 8005c9e:	4211      	tst	r1, r2
 8005ca0:	d007      	beq.n	8005cb2 <HAL_TIM_IRQHandler+0x116>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ca2:	68d9      	ldr	r1, [r3, #12]
 8005ca4:	4211      	tst	r1, r2
 8005ca6:	d004      	beq.n	8005cb2 <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ca8:	3a81      	subs	r2, #129	; 0x81
 8005caa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005cac:	0020      	movs	r0, r4
 8005cae:	f7ff ff74 	bl	8005b9a <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	6919      	ldr	r1, [r3, #16]
 8005cb8:	4211      	tst	r1, r2
 8005cba:	d007      	beq.n	8005ccc <HAL_TIM_IRQHandler+0x130>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cbc:	68d9      	ldr	r1, [r3, #12]
 8005cbe:	4211      	tst	r1, r2
 8005cc0:	d004      	beq.n	8005ccc <HAL_TIM_IRQHandler+0x130>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cc2:	3a41      	subs	r2, #65	; 0x41
 8005cc4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005cc6:	0020      	movs	r0, r4
 8005cc8:	f000 fb54 	bl	8006374 <HAL_TIMEx_CommutCallback>
}
 8005ccc:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cce:	f7ff ff61 	bl	8005b94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cd2:	0020      	movs	r0, r4
 8005cd4:	f7ff ff60 	bl	8005b98 <HAL_TIM_PWM_PulseFinishedCallback>
 8005cd8:	e774      	b.n	8005bc4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cda:	f7ff ff5b 	bl	8005b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cde:	0020      	movs	r0, r4
 8005ce0:	f7ff ff5a 	bl	8005b98 <HAL_TIM_PWM_PulseFinishedCallback>
 8005ce4:	e785      	b.n	8005bf2 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce6:	f7ff ff55 	bl	8005b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cea:	0020      	movs	r0, r4
 8005cec:	f7ff ff54 	bl	8005b98 <HAL_TIM_PWM_PulseFinishedCallback>
 8005cf0:	e793      	b.n	8005c1a <HAL_TIM_IRQHandler+0x7e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cf2:	f7ff ff4f 	bl	8005b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf6:	0020      	movs	r0, r4
 8005cf8:	f7ff ff4e 	bl	8005b98 <HAL_TIM_PWM_PulseFinishedCallback>
 8005cfc:	e7a3      	b.n	8005c46 <HAL_TIM_IRQHandler+0xaa>
 8005cfe:	46c0      	nop			; (mov r8, r8)
 8005d00:	fffffeff 	.word	0xfffffeff

08005d04 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d04:	4a1c      	ldr	r2, [pc, #112]	; (8005d78 <TIM_Base_SetConfig+0x74>)
{
 8005d06:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8005d08:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d0a:	4290      	cmp	r0, r2
 8005d0c:	d002      	beq.n	8005d14 <TIM_Base_SetConfig+0x10>
 8005d0e:	4c1b      	ldr	r4, [pc, #108]	; (8005d7c <TIM_Base_SetConfig+0x78>)
 8005d10:	42a0      	cmp	r0, r4
 8005d12:	d108      	bne.n	8005d26 <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d14:	2470      	movs	r4, #112	; 0x70
 8005d16:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8005d18:	684c      	ldr	r4, [r1, #4]
 8005d1a:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d1c:	4290      	cmp	r0, r2
 8005d1e:	d00e      	beq.n	8005d3e <TIM_Base_SetConfig+0x3a>
 8005d20:	4c16      	ldr	r4, [pc, #88]	; (8005d7c <TIM_Base_SetConfig+0x78>)
 8005d22:	42a0      	cmp	r0, r4
 8005d24:	d00b      	beq.n	8005d3e <TIM_Base_SetConfig+0x3a>
 8005d26:	4c16      	ldr	r4, [pc, #88]	; (8005d80 <TIM_Base_SetConfig+0x7c>)
 8005d28:	42a0      	cmp	r0, r4
 8005d2a:	d008      	beq.n	8005d3e <TIM_Base_SetConfig+0x3a>
 8005d2c:	4c15      	ldr	r4, [pc, #84]	; (8005d84 <TIM_Base_SetConfig+0x80>)
 8005d2e:	42a0      	cmp	r0, r4
 8005d30:	d005      	beq.n	8005d3e <TIM_Base_SetConfig+0x3a>
 8005d32:	4c15      	ldr	r4, [pc, #84]	; (8005d88 <TIM_Base_SetConfig+0x84>)
 8005d34:	42a0      	cmp	r0, r4
 8005d36:	d002      	beq.n	8005d3e <TIM_Base_SetConfig+0x3a>
 8005d38:	4c14      	ldr	r4, [pc, #80]	; (8005d8c <TIM_Base_SetConfig+0x88>)
 8005d3a:	42a0      	cmp	r0, r4
 8005d3c:	d103      	bne.n	8005d46 <TIM_Base_SetConfig+0x42>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d3e:	4c14      	ldr	r4, [pc, #80]	; (8005d90 <TIM_Base_SetConfig+0x8c>)
 8005d40:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d42:	68cc      	ldr	r4, [r1, #12]
 8005d44:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d46:	2480      	movs	r4, #128	; 0x80
 8005d48:	43a3      	bics	r3, r4
 8005d4a:	694c      	ldr	r4, [r1, #20]
 8005d4c:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8005d4e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d50:	688b      	ldr	r3, [r1, #8]
 8005d52:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005d54:	680b      	ldr	r3, [r1, #0]
 8005d56:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d58:	4290      	cmp	r0, r2
 8005d5a:	d008      	beq.n	8005d6e <TIM_Base_SetConfig+0x6a>
 8005d5c:	4b09      	ldr	r3, [pc, #36]	; (8005d84 <TIM_Base_SetConfig+0x80>)
 8005d5e:	4298      	cmp	r0, r3
 8005d60:	d005      	beq.n	8005d6e <TIM_Base_SetConfig+0x6a>
 8005d62:	4b09      	ldr	r3, [pc, #36]	; (8005d88 <TIM_Base_SetConfig+0x84>)
 8005d64:	4298      	cmp	r0, r3
 8005d66:	d002      	beq.n	8005d6e <TIM_Base_SetConfig+0x6a>
 8005d68:	4b08      	ldr	r3, [pc, #32]	; (8005d8c <TIM_Base_SetConfig+0x88>)
 8005d6a:	4298      	cmp	r0, r3
 8005d6c:	d101      	bne.n	8005d72 <TIM_Base_SetConfig+0x6e>
    TIMx->RCR = Structure->RepetitionCounter;
 8005d6e:	690b      	ldr	r3, [r1, #16]
 8005d70:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005d72:	2301      	movs	r3, #1
 8005d74:	6143      	str	r3, [r0, #20]
}
 8005d76:	bd10      	pop	{r4, pc}
 8005d78:	40012c00 	.word	0x40012c00
 8005d7c:	40000400 	.word	0x40000400
 8005d80:	40002000 	.word	0x40002000
 8005d84:	40014000 	.word	0x40014000
 8005d88:	40014400 	.word	0x40014400
 8005d8c:	40014800 	.word	0x40014800
 8005d90:	fffffcff 	.word	0xfffffcff

08005d94 <HAL_TIM_Base_Init>:
{
 8005d94:	b570      	push	{r4, r5, r6, lr}
 8005d96:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005d98:	2001      	movs	r0, #1
  if (htim == NULL)
 8005d9a:	2c00      	cmp	r4, #0
 8005d9c:	d014      	beq.n	8005dc8 <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005d9e:	0025      	movs	r5, r4
 8005da0:	353d      	adds	r5, #61	; 0x3d
 8005da2:	782b      	ldrb	r3, [r5, #0]
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d105      	bne.n	8005db6 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8005daa:	0022      	movs	r2, r4
 8005dac:	323c      	adds	r2, #60	; 0x3c
 8005dae:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8005db0:	0020      	movs	r0, r4
 8005db2:	f7fd ff05 	bl	8003bc0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005db6:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005db8:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005dba:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dbc:	1d21      	adds	r1, r4, #4
 8005dbe:	f7ff ffa1 	bl	8005d04 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005dc2:	2301      	movs	r3, #1
  return HAL_OK;
 8005dc4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005dc6:	702b      	strb	r3, [r5, #0]
}
 8005dc8:	bd70      	pop	{r4, r5, r6, pc}

08005dca <HAL_TIM_PWM_Init>:
{
 8005dca:	b570      	push	{r4, r5, r6, lr}
 8005dcc:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005dce:	2001      	movs	r0, #1
  if (htim == NULL)
 8005dd0:	2c00      	cmp	r4, #0
 8005dd2:	d014      	beq.n	8005dfe <HAL_TIM_PWM_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005dd4:	0025      	movs	r5, r4
 8005dd6:	353d      	adds	r5, #61	; 0x3d
 8005dd8:	782b      	ldrb	r3, [r5, #0]
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d105      	bne.n	8005dec <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8005de0:	0022      	movs	r2, r4
 8005de2:	323c      	adds	r2, #60	; 0x3c
 8005de4:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 8005de6:	0020      	movs	r0, r4
 8005de8:	f7ff fed2 	bl	8005b90 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005dec:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dee:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005df0:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005df2:	1d21      	adds	r1, r4, #4
 8005df4:	f7ff ff86 	bl	8005d04 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005df8:	2301      	movs	r3, #1
  return HAL_OK;
 8005dfa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005dfc:	702b      	strb	r3, [r5, #0]
}
 8005dfe:	bd70      	pop	{r4, r5, r6, pc}

08005e00 <HAL_TIM_IC_Init>:
{
 8005e00:	b570      	push	{r4, r5, r6, lr}
 8005e02:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005e04:	2001      	movs	r0, #1
  if (htim == NULL)
 8005e06:	2c00      	cmp	r4, #0
 8005e08:	d014      	beq.n	8005e34 <HAL_TIM_IC_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005e0a:	0025      	movs	r5, r4
 8005e0c:	353d      	adds	r5, #61	; 0x3d
 8005e0e:	782b      	ldrb	r3, [r5, #0]
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d105      	bne.n	8005e22 <HAL_TIM_IC_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8005e16:	0022      	movs	r2, r4
 8005e18:	323c      	adds	r2, #60	; 0x3c
 8005e1a:	7013      	strb	r3, [r2, #0]
    HAL_TIM_IC_MspInit(htim);
 8005e1c:	0020      	movs	r0, r4
 8005e1e:	f7ff feb8 	bl	8005b92 <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005e22:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e24:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005e26:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e28:	1d21      	adds	r1, r4, #4
 8005e2a:	f7ff ff6b 	bl	8005d04 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005e2e:	2301      	movs	r3, #1
  return HAL_OK;
 8005e30:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005e32:	702b      	strb	r3, [r5, #0]
}
 8005e34:	bd70      	pop	{r4, r5, r6, pc}
	...

08005e38 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e38:	2210      	movs	r2, #16
 8005e3a:	6a03      	ldr	r3, [r0, #32]
{
 8005e3c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e3e:	4393      	bics	r3, r2
 8005e40:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005e42:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e44:	4d16      	ldr	r5, [pc, #88]	; (8005ea0 <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 8005e46:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005e48:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e4a:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e4c:	680d      	ldr	r5, [r1, #0]
 8005e4e:	022d      	lsls	r5, r5, #8
 8005e50:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 8005e52:	2520      	movs	r5, #32
 8005e54:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e56:	688d      	ldr	r5, [r1, #8]
 8005e58:	012d      	lsls	r5, r5, #4
 8005e5a:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e5c:	4d11      	ldr	r5, [pc, #68]	; (8005ea4 <TIM_OC2_SetConfig+0x6c>)
 8005e5e:	42a8      	cmp	r0, r5
 8005e60:	d10f      	bne.n	8005e82 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e62:	2580      	movs	r5, #128	; 0x80
 8005e64:	43aa      	bics	r2, r5
 8005e66:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e68:	68ca      	ldr	r2, [r1, #12]
 8005e6a:	0112      	lsls	r2, r2, #4
 8005e6c:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e6e:	2540      	movs	r5, #64	; 0x40
 8005e70:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e72:	4d0d      	ldr	r5, [pc, #52]	; (8005ea8 <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e74:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e76:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e78:	698b      	ldr	r3, [r1, #24]
 8005e7a:	4333      	orrs	r3, r6
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	432b      	orrs	r3, r5
 8005e80:	e008      	b.n	8005e94 <TIM_OC2_SetConfig+0x5c>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e82:	4d0a      	ldr	r5, [pc, #40]	; (8005eac <TIM_OC2_SetConfig+0x74>)
 8005e84:	42a8      	cmp	r0, r5
 8005e86:	d0f4      	beq.n	8005e72 <TIM_OC2_SetConfig+0x3a>
 8005e88:	4d09      	ldr	r5, [pc, #36]	; (8005eb0 <TIM_OC2_SetConfig+0x78>)
 8005e8a:	42a8      	cmp	r0, r5
 8005e8c:	d0f1      	beq.n	8005e72 <TIM_OC2_SetConfig+0x3a>
 8005e8e:	4d09      	ldr	r5, [pc, #36]	; (8005eb4 <TIM_OC2_SetConfig+0x7c>)
 8005e90:	42a8      	cmp	r0, r5
 8005e92:	d0ee      	beq.n	8005e72 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8005e94:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8005e96:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005e98:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005e9a:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005e9c:	6202      	str	r2, [r0, #32]
}
 8005e9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ea0:	feff8cff 	.word	0xfeff8cff
 8005ea4:	40012c00 	.word	0x40012c00
 8005ea8:	fffff3ff 	.word	0xfffff3ff
 8005eac:	40014000 	.word	0x40014000
 8005eb0:	40014400 	.word	0x40014400
 8005eb4:	40014800 	.word	0x40014800

08005eb8 <HAL_TIM_PWM_ConfigChannel>:
{
 8005eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8005eba:	0007      	movs	r7, r0
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	373c      	adds	r7, #60	; 0x3c
{
 8005ec0:	0016      	movs	r6, r2
  __HAL_LOCK(htim);
 8005ec2:	783a      	ldrb	r2, [r7, #0]
{
 8005ec4:	0004      	movs	r4, r0
 8005ec6:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8005ec8:	0018      	movs	r0, r3
 8005eca:	2a01      	cmp	r2, #1
 8005ecc:	d011      	beq.n	8005ef2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005ece:	2201      	movs	r2, #1
 8005ed0:	703a      	strb	r2, [r7, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed2:	0022      	movs	r2, r4
 8005ed4:	323d      	adds	r2, #61	; 0x3d
 8005ed6:	9201      	str	r2, [sp, #4]
 8005ed8:	7013      	strb	r3, [r2, #0]
  switch (Channel)
 8005eda:	2e08      	cmp	r6, #8
 8005edc:	d043      	beq.n	8005f66 <HAL_TIM_PWM_ConfigChannel+0xae>
 8005ede:	d809      	bhi.n	8005ef4 <HAL_TIM_PWM_ConfigChannel+0x3c>
 8005ee0:	2e00      	cmp	r6, #0
 8005ee2:	d01e      	beq.n	8005f22 <HAL_TIM_PWM_ConfigChannel+0x6a>
 8005ee4:	2e04      	cmp	r6, #4
 8005ee6:	d02d      	beq.n	8005f44 <HAL_TIM_PWM_ConfigChannel+0x8c>
  htim->State = HAL_TIM_STATE_READY;
 8005ee8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005eea:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005eec:	9a01      	ldr	r2, [sp, #4]
 8005eee:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(htim);
 8005ef0:	7038      	strb	r0, [r7, #0]
}
 8005ef2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8005ef4:	2e10      	cmp	r6, #16
 8005ef6:	d046      	beq.n	8005f86 <HAL_TIM_PWM_ConfigChannel+0xce>
 8005ef8:	2e14      	cmp	r6, #20
 8005efa:	d055      	beq.n	8005fa8 <HAL_TIM_PWM_ConfigChannel+0xf0>
 8005efc:	2e0c      	cmp	r6, #12
 8005efe:	d1f3      	bne.n	8005ee8 <HAL_TIM_PWM_ConfigChannel+0x30>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f00:	6820      	ldr	r0, [r4, #0]
 8005f02:	f7ff fd87 	bl	8005a14 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f06:	2280      	movs	r2, #128	; 0x80
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	0112      	lsls	r2, r2, #4
 8005f0c:	69d9      	ldr	r1, [r3, #28]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f12:	69da      	ldr	r2, [r3, #28]
 8005f14:	492d      	ldr	r1, [pc, #180]	; (8005fcc <HAL_TIM_PWM_ConfigChannel+0x114>)
 8005f16:	400a      	ands	r2, r1
 8005f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f1a:	692a      	ldr	r2, [r5, #16]
 8005f1c:	69d9      	ldr	r1, [r3, #28]
 8005f1e:	0212      	lsls	r2, r2, #8
 8005f20:	e02e      	b.n	8005f80 <HAL_TIM_PWM_ConfigChannel+0xc8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f22:	6820      	ldr	r0, [r4, #0]
 8005f24:	f7ff fcea 	bl	80058fc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f28:	2208      	movs	r2, #8
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	6999      	ldr	r1, [r3, #24]
 8005f2e:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f30:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f34:	699a      	ldr	r2, [r3, #24]
 8005f36:	438a      	bics	r2, r1
 8005f38:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f3a:	699a      	ldr	r2, [r3, #24]
 8005f3c:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	619a      	str	r2, [r3, #24]
      break;
 8005f42:	e7d1      	b.n	8005ee8 <HAL_TIM_PWM_ConfigChannel+0x30>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f44:	6820      	ldr	r0, [r4, #0]
 8005f46:	f7ff ff77 	bl	8005e38 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f4a:	2280      	movs	r2, #128	; 0x80
 8005f4c:	6823      	ldr	r3, [r4, #0]
 8005f4e:	0112      	lsls	r2, r2, #4
 8005f50:	6999      	ldr	r1, [r3, #24]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f56:	699a      	ldr	r2, [r3, #24]
 8005f58:	491c      	ldr	r1, [pc, #112]	; (8005fcc <HAL_TIM_PWM_ConfigChannel+0x114>)
 8005f5a:	400a      	ands	r2, r1
 8005f5c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f5e:	692a      	ldr	r2, [r5, #16]
 8005f60:	6999      	ldr	r1, [r3, #24]
 8005f62:	0212      	lsls	r2, r2, #8
 8005f64:	e7eb      	b.n	8005f3e <HAL_TIM_PWM_ConfigChannel+0x86>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f66:	6820      	ldr	r0, [r4, #0]
 8005f68:	f7ff fd0e 	bl	8005988 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f6c:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f6e:	6823      	ldr	r3, [r4, #0]
 8005f70:	69da      	ldr	r2, [r3, #28]
 8005f72:	4316      	orrs	r6, r2
 8005f74:	61de      	str	r6, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f76:	69da      	ldr	r2, [r3, #28]
 8005f78:	438a      	bics	r2, r1
 8005f7a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f7c:	69da      	ldr	r2, [r3, #28]
 8005f7e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f80:	430a      	orrs	r2, r1
 8005f82:	61da      	str	r2, [r3, #28]
      break;
 8005f84:	e7b0      	b.n	8005ee8 <HAL_TIM_PWM_ConfigChannel+0x30>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f86:	6820      	ldr	r0, [r4, #0]
 8005f88:	f7ff fd7e 	bl	8005a88 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f8c:	2208      	movs	r2, #8
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f92:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f94:	2104      	movs	r1, #4
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f9a:	438a      	bics	r2, r1
 8005f9c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fa0:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005fa6:	e79f      	b.n	8005ee8 <HAL_TIM_PWM_ConfigChannel+0x30>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005fa8:	6820      	ldr	r0, [r4, #0]
 8005faa:	f7ff fda3 	bl	8005af4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005fae:	2280      	movs	r2, #128	; 0x80
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	0112      	lsls	r2, r2, #4
 8005fb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005fba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fbc:	4903      	ldr	r1, [pc, #12]	; (8005fcc <HAL_TIM_PWM_ConfigChannel+0x114>)
 8005fbe:	400a      	ands	r2, r1
 8005fc0:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005fc2:	692a      	ldr	r2, [r5, #16]
 8005fc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005fc6:	0212      	lsls	r2, r2, #8
 8005fc8:	e7eb      	b.n	8005fa2 <HAL_TIM_PWM_ConfigChannel+0xea>
 8005fca:	46c0      	nop			; (mov r8, r8)
 8005fcc:	fffffbff 	.word	0xfffffbff

08005fd0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fd2:	2401      	movs	r4, #1
 8005fd4:	6a05      	ldr	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005fd6:	4f0f      	ldr	r7, [pc, #60]	; (8006014 <TIM_TI1_SetConfig+0x44>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fd8:	43a5      	bics	r5, r4
 8005fda:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fdc:	6986      	ldr	r6, [r0, #24]
  tmpccer = TIMx->CCER;
 8005fde:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005fe0:	42b8      	cmp	r0, r7
 8005fe2:	d005      	beq.n	8005ff0 <TIM_TI1_SetConfig+0x20>
 8005fe4:	4f0c      	ldr	r7, [pc, #48]	; (8006018 <TIM_TI1_SetConfig+0x48>)
 8005fe6:	42b8      	cmp	r0, r7
 8005fe8:	d002      	beq.n	8005ff0 <TIM_TI1_SetConfig+0x20>
 8005fea:	4f0c      	ldr	r7, [pc, #48]	; (800601c <TIM_TI1_SetConfig+0x4c>)
 8005fec:	42b8      	cmp	r0, r7
 8005fee:	d10f      	bne.n	8006010 <TIM_TI1_SetConfig+0x40>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ff0:	2403      	movs	r4, #3
 8005ff2:	43a6      	bics	r6, r4
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ff4:	24f0      	movs	r4, #240	; 0xf0
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005ff6:	4332      	orrs	r2, r6
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ff8:	43a2      	bics	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005ffa:	011b      	lsls	r3, r3, #4
 8005ffc:	340f      	adds	r4, #15
 8005ffe:	4023      	ands	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006000:	3cf5      	subs	r4, #245	; 0xf5
 8006002:	43a5      	bics	r5, r4
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006004:	4021      	ands	r1, r4
 8006006:	4329      	orrs	r1, r5
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006008:	431a      	orrs	r2, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800600a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800600c:	6201      	str	r1, [r0, #32]
}
 800600e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006010:	0022      	movs	r2, r4
 8006012:	e7ef      	b.n	8005ff4 <TIM_TI1_SetConfig+0x24>
 8006014:	40012c00 	.word	0x40012c00
 8006018:	40000400 	.word	0x40000400
 800601c:	40014000 	.word	0x40014000

08006020 <HAL_TIM_IC_ConfigChannel>:
{
 8006020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006022:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8006024:	0001      	movs	r1, r0
 8006026:	2302      	movs	r3, #2
 8006028:	313c      	adds	r1, #60	; 0x3c
 800602a:	780e      	ldrb	r6, [r1, #0]
{
 800602c:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 800602e:	0018      	movs	r0, r3
 8006030:	2e01      	cmp	r6, #1
 8006032:	d01a      	beq.n	800606a <HAL_TIM_IC_ConfigChannel+0x4a>
 8006034:	3801      	subs	r0, #1
 8006036:	7008      	strb	r0, [r1, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006038:	704b      	strb	r3, [r1, #1]
  if (Channel == TIM_CHANNEL_1)
 800603a:	2a00      	cmp	r2, #0
 800603c:	d116      	bne.n	800606c <HAL_TIM_IC_ConfigChannel+0x4c>
    TIM_TI1_SetConfig(htim->Instance,
 800603e:	68eb      	ldr	r3, [r5, #12]
 8006040:	686a      	ldr	r2, [r5, #4]
 8006042:	6829      	ldr	r1, [r5, #0]
 8006044:	6820      	ldr	r0, [r4, #0]
 8006046:	f7ff ffc3 	bl	8005fd0 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800604a:	210c      	movs	r1, #12
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	699a      	ldr	r2, [r3, #24]
 8006050:	438a      	bics	r2, r1
 8006052:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006054:	699a      	ldr	r2, [r3, #24]
 8006056:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006058:	430a      	orrs	r2, r1
 800605a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800605c:	0023      	movs	r3, r4
 800605e:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8006060:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006062:	333d      	adds	r3, #61	; 0x3d
  __HAL_UNLOCK(htim);
 8006064:	343c      	adds	r4, #60	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8006066:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(htim);
 8006068:	7020      	strb	r0, [r4, #0]
}
 800606a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800606c:	6829      	ldr	r1, [r5, #0]
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	9101      	str	r1, [sp, #4]
 8006072:	686e      	ldr	r6, [r5, #4]
 8006074:	68e8      	ldr	r0, [r5, #12]
  else if (Channel == TIM_CHANNEL_2)
 8006076:	2a04      	cmp	r2, #4
 8006078:	d11e      	bne.n	80060b8 <HAL_TIM_IC_ConfigChannel+0x98>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800607a:	2710      	movs	r7, #16
 800607c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800607e:	4930      	ldr	r1, [pc, #192]	; (8006140 <HAL_TIM_IC_ConfigChannel+0x120>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006080:	43ba      	bics	r2, r7
 8006082:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006084:	699f      	ldr	r7, [r3, #24]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006086:	0236      	lsls	r6, r6, #8
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006088:	400f      	ands	r7, r1
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800608a:	433e      	orrs	r6, r7

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800608c:	4f2d      	ldr	r7, [pc, #180]	; (8006144 <HAL_TIM_IC_ConfigChannel+0x124>)
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800608e:	0700      	lsls	r0, r0, #28
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006090:	403e      	ands	r6, r7
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006092:	0c00      	lsrs	r0, r0, #16
 8006094:	4330      	orrs	r0, r6

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006096:	26a0      	movs	r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006098:	9901      	ldr	r1, [sp, #4]
  tmpccer = TIMx->CCER;
 800609a:	6a1a      	ldr	r2, [r3, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800609c:	0109      	lsls	r1, r1, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800609e:	43b2      	bics	r2, r6
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80060a0:	4031      	ands	r1, r6
 80060a2:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060a4:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 80060a6:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80060a8:	699a      	ldr	r2, [r3, #24]
 80060aa:	4927      	ldr	r1, [pc, #156]	; (8006148 <HAL_TIM_IC_ConfigChannel+0x128>)
 80060ac:	400a      	ands	r2, r1
 80060ae:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80060b0:	68aa      	ldr	r2, [r5, #8]
 80060b2:	6999      	ldr	r1, [r3, #24]
 80060b4:	0212      	lsls	r2, r2, #8
 80060b6:	e7cf      	b.n	8006058 <HAL_TIM_IC_ConfigChannel+0x38>
 80060b8:	68ad      	ldr	r5, [r5, #8]
  else if (Channel == TIM_CHANNEL_3)
 80060ba:	2a08      	cmp	r2, #8
 80060bc:	d120      	bne.n	8006100 <HAL_TIM_IC_ConfigChannel+0xe0>
  TIMx->CCER &= ~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80060be:	2103      	movs	r1, #3
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060c0:	6a1a      	ldr	r2, [r3, #32]
 80060c2:	4f22      	ldr	r7, [pc, #136]	; (800614c <HAL_TIM_IC_ConfigChannel+0x12c>)
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80060c4:	0100      	lsls	r0, r0, #4
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060c6:	403a      	ands	r2, r7
 80060c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80060ca:	69df      	ldr	r7, [r3, #28]
  tmpccer = TIMx->CCER;
 80060cc:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80060ce:	438f      	bics	r7, r1
  tmpccmr2 |= TIM_ICSelection;
 80060d0:	433e      	orrs	r6, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80060d2:	27f0      	movs	r7, #240	; 0xf0
 80060d4:	43be      	bics	r6, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80060d6:	370f      	adds	r7, #15
 80060d8:	4038      	ands	r0, r7
 80060da:	4306      	orrs	r6, r0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80060dc:	481c      	ldr	r0, [pc, #112]	; (8006150 <HAL_TIM_IC_ConfigChannel+0x130>)
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80060de:	9901      	ldr	r1, [sp, #4]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80060e0:	4002      	ands	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80060e2:	20a0      	movs	r0, #160	; 0xa0
 80060e4:	0209      	lsls	r1, r1, #8
 80060e6:	0100      	lsls	r0, r0, #4
 80060e8:	4001      	ands	r1, r0
 80060ea:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80060ec:	61de      	str	r6, [r3, #28]
  TIMx->CCER = tmpccer;
 80060ee:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80060f0:	210c      	movs	r1, #12
 80060f2:	69da      	ldr	r2, [r3, #28]
 80060f4:	438a      	bics	r2, r1
 80060f6:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80060f8:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80060fa:	4315      	orrs	r5, r2
 80060fc:	61dd      	str	r5, [r3, #28]
 80060fe:	e7ad      	b.n	800605c <HAL_TIM_IC_ConfigChannel+0x3c>
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006100:	6a1a      	ldr	r2, [r3, #32]
 8006102:	4f14      	ldr	r7, [pc, #80]	; (8006154 <HAL_TIM_IC_ConfigChannel+0x134>)
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006104:	490e      	ldr	r1, [pc, #56]	; (8006140 <HAL_TIM_IC_ConfigChannel+0x120>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006106:	403a      	ands	r2, r7
 8006108:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800610a:	69df      	ldr	r7, [r3, #28]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800610c:	0236      	lsls	r6, r6, #8
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800610e:	400f      	ands	r7, r1
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006110:	433e      	orrs	r6, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006112:	4f0c      	ldr	r7, [pc, #48]	; (8006144 <HAL_TIM_IC_ConfigChannel+0x124>)
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006114:	0700      	lsls	r0, r0, #28
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006116:	403e      	ands	r6, r7
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006118:	0c00      	lsrs	r0, r0, #16
  tmpccer = TIMx->CCER;
 800611a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800611c:	4330      	orrs	r0, r6

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800611e:	4e0e      	ldr	r6, [pc, #56]	; (8006158 <HAL_TIM_IC_ConfigChannel+0x138>)
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006120:	9901      	ldr	r1, [sp, #4]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006122:	4032      	ands	r2, r6
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006124:	26a0      	movs	r6, #160	; 0xa0
 8006126:	0309      	lsls	r1, r1, #12
 8006128:	0236      	lsls	r6, r6, #8
 800612a:	4031      	ands	r1, r6
 800612c:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800612e:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006130:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006132:	69da      	ldr	r2, [r3, #28]
 8006134:	4904      	ldr	r1, [pc, #16]	; (8006148 <HAL_TIM_IC_ConfigChannel+0x128>)
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006136:	022d      	lsls	r5, r5, #8
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006138:	400a      	ands	r2, r1
 800613a:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800613c:	69da      	ldr	r2, [r3, #28]
 800613e:	e7dc      	b.n	80060fa <HAL_TIM_IC_ConfigChannel+0xda>
 8006140:	fffffcff 	.word	0xfffffcff
 8006144:	ffff0fff 	.word	0xffff0fff
 8006148:	fffff3ff 	.word	0xfffff3ff
 800614c:	fffffeff 	.word	0xfffffeff
 8006150:	fffff5ff 	.word	0xfffff5ff
 8006154:	ffffefff 	.word	0xffffefff
 8006158:	ffff5fff 	.word	0xffff5fff

0800615c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800615c:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800615e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006160:	4d03      	ldr	r5, [pc, #12]	; (8006170 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006162:	430a      	orrs	r2, r1
 8006164:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006166:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006168:	4313      	orrs	r3, r2
 800616a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800616c:	6083      	str	r3, [r0, #8]
}
 800616e:	bd30      	pop	{r4, r5, pc}
 8006170:	ffff00ff 	.word	0xffff00ff

08006174 <HAL_TIM_ConfigClockSource>:
{
 8006174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8006176:	0005      	movs	r5, r0
 8006178:	2302      	movs	r3, #2
 800617a:	353c      	adds	r5, #60	; 0x3c
 800617c:	782a      	ldrb	r2, [r5, #0]
{
 800617e:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8006180:	0018      	movs	r0, r3
 8006182:	2a01      	cmp	r2, #1
 8006184:	d016      	beq.n	80061b4 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8006186:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8006188:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 800618a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800618c:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 800618e:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006190:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8006192:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006194:	4a3f      	ldr	r2, [pc, #252]	; (8006294 <HAL_TIM_ConfigClockSource+0x120>)
 8006196:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8006198:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800619a:	680b      	ldr	r3, [r1, #0]
 800619c:	2b40      	cmp	r3, #64	; 0x40
 800619e:	d063      	beq.n	8006268 <HAL_TIM_ConfigClockSource+0xf4>
 80061a0:	d814      	bhi.n	80061cc <HAL_TIM_ConfigClockSource+0x58>
 80061a2:	2b10      	cmp	r3, #16
 80061a4:	d00b      	beq.n	80061be <HAL_TIM_ConfigClockSource+0x4a>
 80061a6:	d806      	bhi.n	80061b6 <HAL_TIM_ConfigClockSource+0x42>
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d008      	beq.n	80061be <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 80061ac:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80061ae:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80061b0:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 80061b2:	7028      	strb	r0, [r5, #0]
}
 80061b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 80061b6:	2b20      	cmp	r3, #32
 80061b8:	d001      	beq.n	80061be <HAL_TIM_ConfigClockSource+0x4a>
 80061ba:	2b30      	cmp	r3, #48	; 0x30
 80061bc:	d1f6      	bne.n	80061ac <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr &= ~TIM_SMCR_TS;
 80061be:	4a36      	ldr	r2, [pc, #216]	; (8006298 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = TIMx->SMCR;
 80061c0:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80061c2:	4011      	ands	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061c4:	2207      	movs	r2, #7
 80061c6:	4313      	orrs	r3, r2
 80061c8:	430b      	orrs	r3, r1
 80061ca:	e019      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x8c>
  switch (sClockSourceConfig->ClockSource)
 80061cc:	2b60      	cmp	r3, #96	; 0x60
 80061ce:	d034      	beq.n	800623a <HAL_TIM_ConfigClockSource+0xc6>
 80061d0:	d818      	bhi.n	8006204 <HAL_TIM_ConfigClockSource+0x90>
 80061d2:	2b50      	cmp	r3, #80	; 0x50
 80061d4:	d1ea      	bne.n	80061ac <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061d6:	684a      	ldr	r2, [r1, #4]
 80061d8:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80061da:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061dc:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061de:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061e0:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061e2:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061e4:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061e6:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061e8:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061ea:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061ec:	240a      	movs	r4, #10
 80061ee:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80061f0:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80061f2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80061f4:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80061f6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80061f8:	4a27      	ldr	r2, [pc, #156]	; (8006298 <HAL_TIM_ConfigClockSource+0x124>)
 80061fa:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061fc:	2357      	movs	r3, #87	; 0x57
 80061fe:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8006200:	6083      	str	r3, [r0, #8]
 8006202:	e7d3      	b.n	80061ac <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8006204:	2b70      	cmp	r3, #112	; 0x70
 8006206:	d00d      	beq.n	8006224 <HAL_TIM_ConfigClockSource+0xb0>
 8006208:	2280      	movs	r2, #128	; 0x80
 800620a:	0192      	lsls	r2, r2, #6
 800620c:	4293      	cmp	r3, r2
 800620e:	d1cd      	bne.n	80061ac <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8006210:	68cb      	ldr	r3, [r1, #12]
 8006212:	684a      	ldr	r2, [r1, #4]
 8006214:	6889      	ldr	r1, [r1, #8]
 8006216:	f7ff ffa1 	bl	800615c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800621a:	2380      	movs	r3, #128	; 0x80
 800621c:	6822      	ldr	r2, [r4, #0]
 800621e:	01db      	lsls	r3, r3, #7
 8006220:	6891      	ldr	r1, [r2, #8]
 8006222:	e007      	b.n	8006234 <HAL_TIM_ConfigClockSource+0xc0>
      TIM_ETR_SetConfig(htim->Instance,
 8006224:	68cb      	ldr	r3, [r1, #12]
 8006226:	684a      	ldr	r2, [r1, #4]
 8006228:	6889      	ldr	r1, [r1, #8]
 800622a:	f7ff ff97 	bl	800615c <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800622e:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8006230:	6822      	ldr	r2, [r4, #0]
 8006232:	6891      	ldr	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006234:	430b      	orrs	r3, r1
 8006236:	6093      	str	r3, [r2, #8]
      break;
 8006238:	e7b8      	b.n	80061ac <HAL_TIM_ConfigClockSource+0x38>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800623a:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800623c:	684b      	ldr	r3, [r1, #4]
 800623e:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006240:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006242:	4f16      	ldr	r7, [pc, #88]	; (800629c <HAL_TIM_ConfigClockSource+0x128>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006244:	43a1      	bics	r1, r4
 8006246:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006248:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800624a:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800624c:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800624e:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006250:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8006252:	6a01      	ldr	r1, [r0, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006254:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006256:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8006258:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 800625a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800625c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800625e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006260:	4a0d      	ldr	r2, [pc, #52]	; (8006298 <HAL_TIM_ConfigClockSource+0x124>)
 8006262:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006264:	2367      	movs	r3, #103	; 0x67
 8006266:	e7ca      	b.n	80061fe <HAL_TIM_ConfigClockSource+0x8a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006268:	684a      	ldr	r2, [r1, #4]
 800626a:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 800626c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800626e:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006270:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006272:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006274:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006276:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006278:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800627a:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800627c:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800627e:	240a      	movs	r4, #10
 8006280:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8006282:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8006284:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006286:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006288:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800628a:	4a03      	ldr	r2, [pc, #12]	; (8006298 <HAL_TIM_ConfigClockSource+0x124>)
 800628c:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800628e:	2347      	movs	r3, #71	; 0x47
 8006290:	e7b5      	b.n	80061fe <HAL_TIM_ConfigClockSource+0x8a>
 8006292:	46c0      	nop			; (mov r8, r8)
 8006294:	ffce0088 	.word	0xffce0088
 8006298:	ffcfff8f 	.word	0xffcfff8f
 800629c:	ffff0fff 	.word	0xffff0fff

080062a0 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062a0:	231f      	movs	r3, #31
{
 80062a2:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062a4:	2401      	movs	r4, #1
 80062a6:	4019      	ands	r1, r3
 80062a8:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062aa:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 80062ac:	6a03      	ldr	r3, [r0, #32]
 80062ae:	43a3      	bics	r3, r4
 80062b0:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062b2:	6a03      	ldr	r3, [r0, #32]
 80062b4:	431a      	orrs	r2, r3
 80062b6:	6202      	str	r2, [r0, #32]
}
 80062b8:	bd10      	pop	{r4, pc}
	...

080062bc <HAL_TIM_PWM_Start>:
{
 80062bc:	b510      	push	{r4, lr}
 80062be:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062c0:	2201      	movs	r2, #1
 80062c2:	6800      	ldr	r0, [r0, #0]
 80062c4:	f7ff ffec 	bl	80062a0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	4a10      	ldr	r2, [pc, #64]	; (800630c <HAL_TIM_PWM_Start+0x50>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d016      	beq.n	80062fe <HAL_TIM_PWM_Start+0x42>
 80062d0:	4a0f      	ldr	r2, [pc, #60]	; (8006310 <HAL_TIM_PWM_Start+0x54>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d013      	beq.n	80062fe <HAL_TIM_PWM_Start+0x42>
 80062d6:	4a0f      	ldr	r2, [pc, #60]	; (8006314 <HAL_TIM_PWM_Start+0x58>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d010      	beq.n	80062fe <HAL_TIM_PWM_Start+0x42>
 80062dc:	4a0e      	ldr	r2, [pc, #56]	; (8006318 <HAL_TIM_PWM_Start+0x5c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d00d      	beq.n	80062fe <HAL_TIM_PWM_Start+0x42>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	490d      	ldr	r1, [pc, #52]	; (800631c <HAL_TIM_PWM_Start+0x60>)
 80062e6:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e8:	2a06      	cmp	r2, #6
 80062ea:	d006      	beq.n	80062fa <HAL_TIM_PWM_Start+0x3e>
 80062ec:	3907      	subs	r1, #7
 80062ee:	428a      	cmp	r2, r1
 80062f0:	d003      	beq.n	80062fa <HAL_TIM_PWM_Start+0x3e>
    __HAL_TIM_ENABLE(htim);
 80062f2:	2201      	movs	r2, #1
 80062f4:	6819      	ldr	r1, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	601a      	str	r2, [r3, #0]
}
 80062fa:	2000      	movs	r0, #0
 80062fc:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 80062fe:	2280      	movs	r2, #128	; 0x80
 8006300:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006302:	0212      	lsls	r2, r2, #8
 8006304:	430a      	orrs	r2, r1
 8006306:	645a      	str	r2, [r3, #68]	; 0x44
 8006308:	e7eb      	b.n	80062e2 <HAL_TIM_PWM_Start+0x26>
 800630a:	46c0      	nop			; (mov r8, r8)
 800630c:	40012c00 	.word	0x40012c00
 8006310:	40014000 	.word	0x40014000
 8006314:	40014400 	.word	0x40014400
 8006318:	40014800 	.word	0x40014800
 800631c:	00010007 	.word	0x00010007

08006320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006320:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006322:	0004      	movs	r4, r0
 8006324:	2202      	movs	r2, #2
 8006326:	343c      	adds	r4, #60	; 0x3c
 8006328:	7825      	ldrb	r5, [r4, #0]
{
 800632a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 800632c:	0010      	movs	r0, r2
 800632e:	2d01      	cmp	r5, #1
 8006330:	d01a      	beq.n	8006368 <HAL_TIMEx_MasterConfigSynchronization+0x48>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006332:	001d      	movs	r5, r3
 8006334:	353d      	adds	r5, #61	; 0x3d
 8006336:	702a      	strb	r2, [r5, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006338:	4e0c      	ldr	r6, [pc, #48]	; (800636c <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
  tmpcr2 = htim->Instance->CR2;
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800633e:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006340:	42b2      	cmp	r2, r6
 8006342:	d103      	bne.n	800634c <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006344:	4e0a      	ldr	r6, [pc, #40]	; (8006370 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8006346:	4033      	ands	r3, r6
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006348:	684e      	ldr	r6, [r1, #4]
 800634a:	4333      	orrs	r3, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800634c:	2670      	movs	r6, #112	; 0x70
 800634e:	43b3      	bics	r3, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006350:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006352:	6889      	ldr	r1, [r1, #8]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006354:	4333      	orrs	r3, r6
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006356:	2680      	movs	r6, #128	; 0x80
 8006358:	43b0      	bics	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800635a:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800635c:	4301      	orrs	r1, r0

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800635e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8006360:	2000      	movs	r0, #0
  htim->Instance->SMCR = tmpsmcr;
 8006362:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8006364:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8006366:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8006368:	bd70      	pop	{r4, r5, r6, pc}
 800636a:	46c0      	nop			; (mov r8, r8)
 800636c:	40012c00 	.word	0x40012c00
 8006370:	ff0fffff 	.word	0xff0fffff

08006374 <HAL_TIMEx_CommutCallback>:
 8006374:	4770      	bx	lr

08006376 <HAL_TIMEx_BreakCallback>:
 8006376:	4770      	bx	lr

08006378 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006378:	4770      	bx	lr
	...

0800637c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006380:	6902      	ldr	r2, [r0, #16]
 8006382:	6883      	ldr	r3, [r0, #8]
 8006384:	69c1      	ldr	r1, [r0, #28]
 8006386:	4313      	orrs	r3, r2
 8006388:	6942      	ldr	r2, [r0, #20]
  tmpreg |= (uint32_t)huart->FifoMode;
 800638a:	6e65      	ldr	r5, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800638c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800638e:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006390:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006392:	6810      	ldr	r0, [r2, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 8006394:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006396:	4d9f      	ldr	r5, [pc, #636]	; (8006614 <UART_SetConfig+0x298>)
 8006398:	4028      	ands	r0, r5
 800639a:	4303      	orrs	r3, r0
 800639c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800639e:	6853      	ldr	r3, [r2, #4]
 80063a0:	489d      	ldr	r0, [pc, #628]	; (8006618 <UART_SetConfig+0x29c>)
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063a2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063a4:	4003      	ands	r3, r0
 80063a6:	68e0      	ldr	r0, [r4, #12]
 80063a8:	4303      	orrs	r3, r0
 80063aa:	6053      	str	r3, [r2, #4]
    tmpreg |= huart->Init.OneBitSampling;
 80063ac:	69a3      	ldr	r3, [r4, #24]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063ae:	6890      	ldr	r0, [r2, #8]
    tmpreg |= huart->Init.OneBitSampling;
 80063b0:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063b2:	4d9a      	ldr	r5, [pc, #616]	; (800661c <UART_SetConfig+0x2a0>)
 80063b4:	4028      	ands	r0, r5

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063b6:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063b8:	4303      	orrs	r3, r0
 80063ba:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063bc:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80063be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063c0:	43a8      	bics	r0, r5
 80063c2:	4318      	orrs	r0, r3
 80063c4:	62d0      	str	r0, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063c6:	4896      	ldr	r0, [pc, #600]	; (8006620 <UART_SetConfig+0x2a4>)
 80063c8:	4282      	cmp	r2, r0
 80063ca:	d113      	bne.n	80063f4 <UART_SetConfig+0x78>
 80063cc:	2003      	movs	r0, #3
 80063ce:	4a95      	ldr	r2, [pc, #596]	; (8006624 <UART_SetConfig+0x2a8>)
 80063d0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80063d2:	4002      	ands	r2, r0
 80063d4:	4894      	ldr	r0, [pc, #592]	; (8006628 <UART_SetConfig+0x2ac>)
 80063d6:	5c80      	ldrb	r0, [r0, r2]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063d8:	2280      	movs	r2, #128	; 0x80
 80063da:	0212      	lsls	r2, r2, #8
 80063dc:	4291      	cmp	r1, r2
 80063de:	d100      	bne.n	80063e2 <UART_SetConfig+0x66>
 80063e0:	e1b7      	b.n	8006752 <UART_SetConfig+0x3d6>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80063e2:	2808      	cmp	r0, #8
 80063e4:	d817      	bhi.n	8006416 <UART_SetConfig+0x9a>
 80063e6:	f7f9 fe9d 	bl	8000124 <__gnu_thumb1_case_uqi>
 80063ea:	1684      	.short	0x1684
 80063ec:	16f216be 	.word	0x16f216be
 80063f0:	1616      	.short	0x1616
 80063f2:	f5          	.byte	0xf5
 80063f3:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063f4:	488d      	ldr	r0, [pc, #564]	; (800662c <UART_SetConfig+0x2b0>)
 80063f6:	4282      	cmp	r2, r0
 80063f8:	d105      	bne.n	8006406 <UART_SetConfig+0x8a>
 80063fa:	200c      	movs	r0, #12
 80063fc:	4a89      	ldr	r2, [pc, #548]	; (8006624 <UART_SetConfig+0x2a8>)
 80063fe:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006400:	4002      	ands	r2, r0
 8006402:	488b      	ldr	r0, [pc, #556]	; (8006630 <UART_SetConfig+0x2b4>)
 8006404:	e7e7      	b.n	80063d6 <UART_SetConfig+0x5a>
 8006406:	4b8b      	ldr	r3, [pc, #556]	; (8006634 <UART_SetConfig+0x2b8>)
 8006408:	429a      	cmp	r2, r3
 800640a:	d100      	bne.n	800640e <UART_SetConfig+0x92>
 800640c:	e150      	b.n	80066b0 <UART_SetConfig+0x334>
 800640e:	4b8a      	ldr	r3, [pc, #552]	; (8006638 <UART_SetConfig+0x2bc>)
 8006410:	429a      	cmp	r2, r3
 8006412:	d100      	bne.n	8006416 <UART_SetConfig+0x9a>
 8006414:	e14c      	b.n	80066b0 <UART_SetConfig+0x334>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 8006416:	2001      	movs	r0, #1
 8006418:	e191      	b.n	800673e <UART_SetConfig+0x3c2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800641a:	2b00      	cmp	r3, #0
 800641c:	d02f      	beq.n	800647e <UART_SetConfig+0x102>
 800641e:	2b01      	cmp	r3, #1
 8006420:	d019      	beq.n	8006456 <UART_SetConfig+0xda>
 8006422:	2b02      	cmp	r3, #2
 8006424:	d019      	beq.n	800645a <UART_SetConfig+0xde>
 8006426:	2b03      	cmp	r3, #3
 8006428:	d019      	beq.n	800645e <UART_SetConfig+0xe2>
 800642a:	2b04      	cmp	r3, #4
 800642c:	d019      	beq.n	8006462 <UART_SetConfig+0xe6>
 800642e:	2b05      	cmp	r3, #5
 8006430:	d019      	beq.n	8006466 <UART_SetConfig+0xea>
 8006432:	2b06      	cmp	r3, #6
 8006434:	d019      	beq.n	800646a <UART_SetConfig+0xee>
 8006436:	2b07      	cmp	r3, #7
 8006438:	d019      	beq.n	800646e <UART_SetConfig+0xf2>
 800643a:	2b08      	cmp	r3, #8
 800643c:	d019      	beq.n	8006472 <UART_SetConfig+0xf6>
 800643e:	2b09      	cmp	r3, #9
 8006440:	d019      	beq.n	8006476 <UART_SetConfig+0xfa>
 8006442:	2b0a      	cmp	r3, #10
 8006444:	d019      	beq.n	800647a <UART_SetConfig+0xfe>
 8006446:	2b0b      	cmp	r3, #11
 8006448:	d119      	bne.n	800647e <UART_SetConfig+0x102>
 800644a:	487c      	ldr	r0, [pc, #496]	; (800663c <UART_SetConfig+0x2c0>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800644c:	6863      	ldr	r3, [r4, #4]
 800644e:	6861      	ldr	r1, [r4, #4]
 8006450:	085b      	lsrs	r3, r3, #1
 8006452:	1818      	adds	r0, r3, r0
 8006454:	e160      	b.n	8006718 <UART_SetConfig+0x39c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006456:	487a      	ldr	r0, [pc, #488]	; (8006640 <UART_SetConfig+0x2c4>)
 8006458:	e7f8      	b.n	800644c <UART_SetConfig+0xd0>
 800645a:	487a      	ldr	r0, [pc, #488]	; (8006644 <UART_SetConfig+0x2c8>)
 800645c:	e7f6      	b.n	800644c <UART_SetConfig+0xd0>
 800645e:	487a      	ldr	r0, [pc, #488]	; (8006648 <UART_SetConfig+0x2cc>)
 8006460:	e7f4      	b.n	800644c <UART_SetConfig+0xd0>
 8006462:	487a      	ldr	r0, [pc, #488]	; (800664c <UART_SetConfig+0x2d0>)
 8006464:	e7f2      	b.n	800644c <UART_SetConfig+0xd0>
 8006466:	487a      	ldr	r0, [pc, #488]	; (8006650 <UART_SetConfig+0x2d4>)
 8006468:	e7f0      	b.n	800644c <UART_SetConfig+0xd0>
 800646a:	487a      	ldr	r0, [pc, #488]	; (8006654 <UART_SetConfig+0x2d8>)
 800646c:	e7ee      	b.n	800644c <UART_SetConfig+0xd0>
 800646e:	487a      	ldr	r0, [pc, #488]	; (8006658 <UART_SetConfig+0x2dc>)
 8006470:	e7ec      	b.n	800644c <UART_SetConfig+0xd0>
 8006472:	487a      	ldr	r0, [pc, #488]	; (800665c <UART_SetConfig+0x2e0>)
 8006474:	e7ea      	b.n	800644c <UART_SetConfig+0xd0>
 8006476:	487a      	ldr	r0, [pc, #488]	; (8006660 <UART_SetConfig+0x2e4>)
 8006478:	e7e8      	b.n	800644c <UART_SetConfig+0xd0>
 800647a:	487a      	ldr	r0, [pc, #488]	; (8006664 <UART_SetConfig+0x2e8>)
 800647c:	e7e6      	b.n	800644c <UART_SetConfig+0xd0>
 800647e:	487a      	ldr	r0, [pc, #488]	; (8006668 <UART_SetConfig+0x2ec>)
 8006480:	e7e4      	b.n	800644c <UART_SetConfig+0xd0>
        pclk = HAL_RCC_GetSysClockFreq();
 8006482:	f7fe fc95 	bl	8004db0 <HAL_RCC_GetSysClockFreq>
 8006486:	e11a      	b.n	80066be <UART_SetConfig+0x342>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006488:	2b00      	cmp	r3, #0
 800648a:	d018      	beq.n	80064be <UART_SetConfig+0x142>
 800648c:	2b01      	cmp	r3, #1
 800648e:	d019      	beq.n	80064c4 <UART_SetConfig+0x148>
 8006490:	2b02      	cmp	r3, #2
 8006492:	d01a      	beq.n	80064ca <UART_SetConfig+0x14e>
 8006494:	2b03      	cmp	r3, #3
 8006496:	d01b      	beq.n	80064d0 <UART_SetConfig+0x154>
 8006498:	2b04      	cmp	r3, #4
 800649a:	d01b      	beq.n	80064d4 <UART_SetConfig+0x158>
 800649c:	2b05      	cmp	r3, #5
 800649e:	d01c      	beq.n	80064da <UART_SetConfig+0x15e>
 80064a0:	2b06      	cmp	r3, #6
 80064a2:	d01c      	beq.n	80064de <UART_SetConfig+0x162>
 80064a4:	2080      	movs	r0, #128	; 0x80
 80064a6:	2b07      	cmp	r3, #7
 80064a8:	d01b      	beq.n	80064e2 <UART_SetConfig+0x166>
 80064aa:	2b08      	cmp	r3, #8
 80064ac:	d01b      	beq.n	80064e6 <UART_SetConfig+0x16a>
 80064ae:	2b09      	cmp	r3, #9
 80064b0:	d01b      	beq.n	80064ea <UART_SetConfig+0x16e>
 80064b2:	2b0a      	cmp	r3, #10
 80064b4:	d01b      	beq.n	80064ee <UART_SetConfig+0x172>
 80064b6:	2b0b      	cmp	r3, #11
 80064b8:	d102      	bne.n	80064c0 <UART_SetConfig+0x144>
 80064ba:	0040      	lsls	r0, r0, #1
 80064bc:	e7c6      	b.n	800644c <UART_SetConfig+0xd0>
 80064be:	2080      	movs	r0, #128	; 0x80
 80064c0:	0240      	lsls	r0, r0, #9
 80064c2:	e7c3      	b.n	800644c <UART_SetConfig+0xd0>
 80064c4:	2080      	movs	r0, #128	; 0x80
 80064c6:	0200      	lsls	r0, r0, #8
 80064c8:	e7c0      	b.n	800644c <UART_SetConfig+0xd0>
 80064ca:	2080      	movs	r0, #128	; 0x80
 80064cc:	01c0      	lsls	r0, r0, #7
 80064ce:	e7bd      	b.n	800644c <UART_SetConfig+0xd0>
 80064d0:	4866      	ldr	r0, [pc, #408]	; (800666c <UART_SetConfig+0x2f0>)
 80064d2:	e7bb      	b.n	800644c <UART_SetConfig+0xd0>
 80064d4:	2080      	movs	r0, #128	; 0x80
 80064d6:	0180      	lsls	r0, r0, #6
 80064d8:	e7b8      	b.n	800644c <UART_SetConfig+0xd0>
 80064da:	4865      	ldr	r0, [pc, #404]	; (8006670 <UART_SetConfig+0x2f4>)
 80064dc:	e7b6      	b.n	800644c <UART_SetConfig+0xd0>
 80064de:	4865      	ldr	r0, [pc, #404]	; (8006674 <UART_SetConfig+0x2f8>)
 80064e0:	e7b4      	b.n	800644c <UART_SetConfig+0xd0>
 80064e2:	0140      	lsls	r0, r0, #5
 80064e4:	e7b2      	b.n	800644c <UART_SetConfig+0xd0>
 80064e6:	0100      	lsls	r0, r0, #4
 80064e8:	e7b0      	b.n	800644c <UART_SetConfig+0xd0>
 80064ea:	00c0      	lsls	r0, r0, #3
 80064ec:	e7ae      	b.n	800644c <UART_SetConfig+0xd0>
 80064ee:	0080      	lsls	r0, r0, #2
 80064f0:	e7ac      	b.n	800644c <UART_SetConfig+0xd0>
        pclk = HAL_RCC_GetPCLK1Freq();
 80064f2:	f7fe fd51 	bl	8004f98 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064f8:	2101      	movs	r1, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d021      	beq.n	8006542 <UART_SetConfig+0x1c6>
 80064fe:	1849      	adds	r1, r1, r1
 8006500:	2b01      	cmp	r3, #1
 8006502:	d01e      	beq.n	8006542 <UART_SetConfig+0x1c6>
 8006504:	3102      	adds	r1, #2
 8006506:	2b02      	cmp	r3, #2
 8006508:	d01b      	beq.n	8006542 <UART_SetConfig+0x1c6>
 800650a:	3102      	adds	r1, #2
 800650c:	2b03      	cmp	r3, #3
 800650e:	d018      	beq.n	8006542 <UART_SetConfig+0x1c6>
 8006510:	3102      	adds	r1, #2
 8006512:	2b04      	cmp	r3, #4
 8006514:	d015      	beq.n	8006542 <UART_SetConfig+0x1c6>
 8006516:	3102      	adds	r1, #2
 8006518:	2b05      	cmp	r3, #5
 800651a:	d012      	beq.n	8006542 <UART_SetConfig+0x1c6>
 800651c:	3102      	adds	r1, #2
 800651e:	2b06      	cmp	r3, #6
 8006520:	d00f      	beq.n	8006542 <UART_SetConfig+0x1c6>
 8006522:	3104      	adds	r1, #4
 8006524:	2b07      	cmp	r3, #7
 8006526:	d00c      	beq.n	8006542 <UART_SetConfig+0x1c6>
 8006528:	3110      	adds	r1, #16
 800652a:	2b08      	cmp	r3, #8
 800652c:	d009      	beq.n	8006542 <UART_SetConfig+0x1c6>
 800652e:	3120      	adds	r1, #32
 8006530:	2b09      	cmp	r3, #9
 8006532:	d006      	beq.n	8006542 <UART_SetConfig+0x1c6>
 8006534:	3140      	adds	r1, #64	; 0x40
 8006536:	2b0a      	cmp	r3, #10
 8006538:	d003      	beq.n	8006542 <UART_SetConfig+0x1c6>
 800653a:	397f      	subs	r1, #127	; 0x7f
 800653c:	2b0b      	cmp	r3, #11
 800653e:	d100      	bne.n	8006542 <UART_SetConfig+0x1c6>
 8006540:	31ff      	adds	r1, #255	; 0xff
 8006542:	6865      	ldr	r5, [r4, #4]
 8006544:	f7f9 fe0c 	bl	8000160 <__udivsi3>
 8006548:	0029      	movs	r1, r5
 800654a:	086b      	lsrs	r3, r5, #1
 800654c:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800654e:	f7f9 fe07 	bl	8000160 <__udivsi3>
 8006552:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006554:	0003      	movs	r3, r0
 8006556:	4a48      	ldr	r2, [pc, #288]	; (8006678 <UART_SetConfig+0x2fc>)
 8006558:	3b10      	subs	r3, #16
 800655a:	4293      	cmp	r3, r2
 800655c:	d900      	bls.n	8006560 <UART_SetConfig+0x1e4>
 800655e:	e75a      	b.n	8006416 <UART_SetConfig+0x9a>
      huart->Instance->BRR = usartdiv;
 8006560:	6823      	ldr	r3, [r4, #0]
 8006562:	60d8      	str	r0, [r3, #12]
 8006564:	e0ea      	b.n	800673c <UART_SetConfig+0x3c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006566:	2b00      	cmp	r3, #0
 8006568:	d02f      	beq.n	80065ca <UART_SetConfig+0x24e>
 800656a:	2b01      	cmp	r3, #1
 800656c:	d019      	beq.n	80065a2 <UART_SetConfig+0x226>
 800656e:	2b02      	cmp	r3, #2
 8006570:	d019      	beq.n	80065a6 <UART_SetConfig+0x22a>
 8006572:	2b03      	cmp	r3, #3
 8006574:	d019      	beq.n	80065aa <UART_SetConfig+0x22e>
 8006576:	2b04      	cmp	r3, #4
 8006578:	d019      	beq.n	80065ae <UART_SetConfig+0x232>
 800657a:	2b05      	cmp	r3, #5
 800657c:	d019      	beq.n	80065b2 <UART_SetConfig+0x236>
 800657e:	2b06      	cmp	r3, #6
 8006580:	d019      	beq.n	80065b6 <UART_SetConfig+0x23a>
 8006582:	2b07      	cmp	r3, #7
 8006584:	d019      	beq.n	80065ba <UART_SetConfig+0x23e>
 8006586:	2b08      	cmp	r3, #8
 8006588:	d019      	beq.n	80065be <UART_SetConfig+0x242>
 800658a:	2b09      	cmp	r3, #9
 800658c:	d019      	beq.n	80065c2 <UART_SetConfig+0x246>
 800658e:	2b0a      	cmp	r3, #10
 8006590:	d019      	beq.n	80065c6 <UART_SetConfig+0x24a>
 8006592:	2b0b      	cmp	r3, #11
 8006594:	d119      	bne.n	80065ca <UART_SetConfig+0x24e>
 8006596:	4839      	ldr	r0, [pc, #228]	; (800667c <UART_SetConfig+0x300>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006598:	6863      	ldr	r3, [r4, #4]
 800659a:	6861      	ldr	r1, [r4, #4]
 800659c:	085b      	lsrs	r3, r3, #1
 800659e:	1818      	adds	r0, r3, r0
 80065a0:	e7d5      	b.n	800654e <UART_SetConfig+0x1d2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065a2:	4828      	ldr	r0, [pc, #160]	; (8006644 <UART_SetConfig+0x2c8>)
 80065a4:	e7f8      	b.n	8006598 <UART_SetConfig+0x21c>
 80065a6:	4829      	ldr	r0, [pc, #164]	; (800664c <UART_SetConfig+0x2d0>)
 80065a8:	e7f6      	b.n	8006598 <UART_SetConfig+0x21c>
 80065aa:	482a      	ldr	r0, [pc, #168]	; (8006654 <UART_SetConfig+0x2d8>)
 80065ac:	e7f4      	b.n	8006598 <UART_SetConfig+0x21c>
 80065ae:	482a      	ldr	r0, [pc, #168]	; (8006658 <UART_SetConfig+0x2dc>)
 80065b0:	e7f2      	b.n	8006598 <UART_SetConfig+0x21c>
 80065b2:	4833      	ldr	r0, [pc, #204]	; (8006680 <UART_SetConfig+0x304>)
 80065b4:	e7f0      	b.n	8006598 <UART_SetConfig+0x21c>
 80065b6:	4833      	ldr	r0, [pc, #204]	; (8006684 <UART_SetConfig+0x308>)
 80065b8:	e7ee      	b.n	8006598 <UART_SetConfig+0x21c>
 80065ba:	4828      	ldr	r0, [pc, #160]	; (800665c <UART_SetConfig+0x2e0>)
 80065bc:	e7ec      	b.n	8006598 <UART_SetConfig+0x21c>
 80065be:	4828      	ldr	r0, [pc, #160]	; (8006660 <UART_SetConfig+0x2e4>)
 80065c0:	e7ea      	b.n	8006598 <UART_SetConfig+0x21c>
 80065c2:	4828      	ldr	r0, [pc, #160]	; (8006664 <UART_SetConfig+0x2e8>)
 80065c4:	e7e8      	b.n	8006598 <UART_SetConfig+0x21c>
 80065c6:	481d      	ldr	r0, [pc, #116]	; (800663c <UART_SetConfig+0x2c0>)
 80065c8:	e7e6      	b.n	8006598 <UART_SetConfig+0x21c>
 80065ca:	481d      	ldr	r0, [pc, #116]	; (8006640 <UART_SetConfig+0x2c4>)
 80065cc:	e7e4      	b.n	8006598 <UART_SetConfig+0x21c>
        pclk = HAL_RCC_GetSysClockFreq();
 80065ce:	f7fe fbef 	bl	8004db0 <HAL_RCC_GetSysClockFreq>
 80065d2:	e790      	b.n	80064f6 <UART_SetConfig+0x17a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d018      	beq.n	800660a <UART_SetConfig+0x28e>
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d018      	beq.n	800660e <UART_SetConfig+0x292>
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d053      	beq.n	8006688 <UART_SetConfig+0x30c>
 80065e0:	2b03      	cmp	r3, #3
 80065e2:	d054      	beq.n	800668e <UART_SetConfig+0x312>
 80065e4:	2b04      	cmp	r3, #4
 80065e6:	d054      	beq.n	8006692 <UART_SetConfig+0x316>
 80065e8:	2b05      	cmp	r3, #5
 80065ea:	d055      	beq.n	8006698 <UART_SetConfig+0x31c>
 80065ec:	2b06      	cmp	r3, #6
 80065ee:	d055      	beq.n	800669c <UART_SetConfig+0x320>
 80065f0:	2080      	movs	r0, #128	; 0x80
 80065f2:	2b07      	cmp	r3, #7
 80065f4:	d054      	beq.n	80066a0 <UART_SetConfig+0x324>
 80065f6:	2b08      	cmp	r3, #8
 80065f8:	d054      	beq.n	80066a4 <UART_SetConfig+0x328>
 80065fa:	2b09      	cmp	r3, #9
 80065fc:	d054      	beq.n	80066a8 <UART_SetConfig+0x32c>
 80065fe:	2b0a      	cmp	r3, #10
 8006600:	d054      	beq.n	80066ac <UART_SetConfig+0x330>
 8006602:	2b0b      	cmp	r3, #11
 8006604:	d0c8      	beq.n	8006598 <UART_SetConfig+0x21c>
 8006606:	0200      	lsls	r0, r0, #8
 8006608:	e7c6      	b.n	8006598 <UART_SetConfig+0x21c>
 800660a:	2080      	movs	r0, #128	; 0x80
 800660c:	e7fb      	b.n	8006606 <UART_SetConfig+0x28a>
 800660e:	2080      	movs	r0, #128	; 0x80
 8006610:	01c0      	lsls	r0, r0, #7
 8006612:	e7c1      	b.n	8006598 <UART_SetConfig+0x21c>
 8006614:	cfff69f3 	.word	0xcfff69f3
 8006618:	ffffcfff 	.word	0xffffcfff
 800661c:	11fff4ff 	.word	0x11fff4ff
 8006620:	40013800 	.word	0x40013800
 8006624:	40021000 	.word	0x40021000
 8006628:	08012824 	.word	0x08012824
 800662c:	40004400 	.word	0x40004400
 8006630:	08012828 	.word	0x08012828
 8006634:	40004800 	.word	0x40004800
 8006638:	40004c00 	.word	0x40004c00
 800663c:	0001e848 	.word	0x0001e848
 8006640:	00f42400 	.word	0x00f42400
 8006644:	007a1200 	.word	0x007a1200
 8006648:	00516154 	.word	0x00516154
 800664c:	003d0900 	.word	0x003d0900
 8006650:	0030d400 	.word	0x0030d400
 8006654:	0028b0aa 	.word	0x0028b0aa
 8006658:	001e8480 	.word	0x001e8480
 800665c:	000f4240 	.word	0x000f4240
 8006660:	0007a120 	.word	0x0007a120
 8006664:	0003d090 	.word	0x0003d090
 8006668:	01e84800 	.word	0x01e84800
 800666c:	00002aaa 	.word	0x00002aaa
 8006670:	00001998 	.word	0x00001998
 8006674:	00001554 	.word	0x00001554
 8006678:	0000ffef 	.word	0x0000ffef
 800667c:	0000f424 	.word	0x0000f424
 8006680:	00186a00 	.word	0x00186a00
 8006684:	00145855 	.word	0x00145855
 8006688:	2080      	movs	r0, #128	; 0x80
 800668a:	0180      	lsls	r0, r0, #6
 800668c:	e784      	b.n	8006598 <UART_SetConfig+0x21c>
 800668e:	4838      	ldr	r0, [pc, #224]	; (8006770 <UART_SetConfig+0x3f4>)
 8006690:	e782      	b.n	8006598 <UART_SetConfig+0x21c>
 8006692:	2080      	movs	r0, #128	; 0x80
 8006694:	0140      	lsls	r0, r0, #5
 8006696:	e77f      	b.n	8006598 <UART_SetConfig+0x21c>
 8006698:	4836      	ldr	r0, [pc, #216]	; (8006774 <UART_SetConfig+0x3f8>)
 800669a:	e77d      	b.n	8006598 <UART_SetConfig+0x21c>
 800669c:	4836      	ldr	r0, [pc, #216]	; (8006778 <UART_SetConfig+0x3fc>)
 800669e:	e77b      	b.n	8006598 <UART_SetConfig+0x21c>
 80066a0:	0100      	lsls	r0, r0, #4
 80066a2:	e779      	b.n	8006598 <UART_SetConfig+0x21c>
 80066a4:	00c0      	lsls	r0, r0, #3
 80066a6:	e777      	b.n	8006598 <UART_SetConfig+0x21c>
 80066a8:	0080      	lsls	r0, r0, #2
 80066aa:	e775      	b.n	8006598 <UART_SetConfig+0x21c>
 80066ac:	0040      	lsls	r0, r0, #1
 80066ae:	e773      	b.n	8006598 <UART_SetConfig+0x21c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066b0:	2380      	movs	r3, #128	; 0x80
 80066b2:	021b      	lsls	r3, r3, #8
 80066b4:	4299      	cmp	r1, r3
 80066b6:	d000      	beq.n	80066ba <UART_SetConfig+0x33e>
 80066b8:	e71b      	b.n	80064f2 <UART_SetConfig+0x176>
        pclk = HAL_RCC_GetPCLK1Freq();
 80066ba:	f7fe fc6d 	bl	8004f98 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066c0:	2101      	movs	r1, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d021      	beq.n	800670a <UART_SetConfig+0x38e>
 80066c6:	1849      	adds	r1, r1, r1
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d01e      	beq.n	800670a <UART_SetConfig+0x38e>
 80066cc:	3102      	adds	r1, #2
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d01b      	beq.n	800670a <UART_SetConfig+0x38e>
 80066d2:	3102      	adds	r1, #2
 80066d4:	2b03      	cmp	r3, #3
 80066d6:	d018      	beq.n	800670a <UART_SetConfig+0x38e>
 80066d8:	3102      	adds	r1, #2
 80066da:	2b04      	cmp	r3, #4
 80066dc:	d015      	beq.n	800670a <UART_SetConfig+0x38e>
 80066de:	3102      	adds	r1, #2
 80066e0:	2b05      	cmp	r3, #5
 80066e2:	d012      	beq.n	800670a <UART_SetConfig+0x38e>
 80066e4:	3102      	adds	r1, #2
 80066e6:	2b06      	cmp	r3, #6
 80066e8:	d00f      	beq.n	800670a <UART_SetConfig+0x38e>
 80066ea:	3104      	adds	r1, #4
 80066ec:	2b07      	cmp	r3, #7
 80066ee:	d00c      	beq.n	800670a <UART_SetConfig+0x38e>
 80066f0:	3110      	adds	r1, #16
 80066f2:	2b08      	cmp	r3, #8
 80066f4:	d009      	beq.n	800670a <UART_SetConfig+0x38e>
 80066f6:	3120      	adds	r1, #32
 80066f8:	2b09      	cmp	r3, #9
 80066fa:	d006      	beq.n	800670a <UART_SetConfig+0x38e>
 80066fc:	3140      	adds	r1, #64	; 0x40
 80066fe:	2b0a      	cmp	r3, #10
 8006700:	d003      	beq.n	800670a <UART_SetConfig+0x38e>
 8006702:	397f      	subs	r1, #127	; 0x7f
 8006704:	2b0b      	cmp	r3, #11
 8006706:	d100      	bne.n	800670a <UART_SetConfig+0x38e>
 8006708:	31ff      	adds	r1, #255	; 0xff
 800670a:	f7f9 fd29 	bl	8000160 <__udivsi3>
 800670e:	6865      	ldr	r5, [r4, #4]
 8006710:	0040      	lsls	r0, r0, #1
 8006712:	0029      	movs	r1, r5
 8006714:	086b      	lsrs	r3, r5, #1
 8006716:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006718:	f7f9 fd22 	bl	8000160 <__udivsi3>
 800671c:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800671e:	0003      	movs	r3, r0
 8006720:	4a16      	ldr	r2, [pc, #88]	; (800677c <UART_SetConfig+0x400>)
 8006722:	3b10      	subs	r3, #16
 8006724:	4293      	cmp	r3, r2
 8006726:	d900      	bls.n	800672a <UART_SetConfig+0x3ae>
 8006728:	e675      	b.n	8006416 <UART_SetConfig+0x9a>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800672a:	230f      	movs	r3, #15
 800672c:	0002      	movs	r2, r0
 800672e:	439a      	bics	r2, r3
 8006730:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006732:	0700      	lsls	r0, r0, #28
      huart->Instance->BRR = brrtemp;
 8006734:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006736:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 8006738:	4318      	orrs	r0, r3
 800673a:	60d0      	str	r0, [r2, #12]
 800673c:	2000      	movs	r0, #0
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800673e:	0022      	movs	r2, r4
 8006740:	2301      	movs	r3, #1
 8006742:	326a      	adds	r2, #106	; 0x6a
 8006744:	8013      	strh	r3, [r2, #0]
  huart->NbRxDataToProcess = 1;
 8006746:	3a02      	subs	r2, #2
 8006748:	8013      	strh	r3, [r2, #0]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800674a:	2300      	movs	r3, #0
 800674c:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 800674e:	6723      	str	r3, [r4, #112]	; 0x70

  return ret;
}
 8006750:	bd70      	pop	{r4, r5, r6, pc}
    switch (clocksource)
 8006752:	2808      	cmp	r0, #8
 8006754:	d900      	bls.n	8006758 <UART_SetConfig+0x3dc>
 8006756:	e65e      	b.n	8006416 <UART_SetConfig+0x9a>
 8006758:	f7f9 fcee 	bl	8000138 <__gnu_thumb1_case_shi>
 800675c:	fe5dffaf 	.word	0xfe5dffaf
 8006760:	fe5dfe5f 	.word	0xfe5dfe5f
 8006764:	fe5dfe93 	.word	0xfe5dfe93
 8006768:	fe5dfe5d 	.word	0xfe5dfe5d
 800676c:	fe96      	.short	0xfe96
 800676e:	46c0      	nop			; (mov r8, r8)
 8006770:	00001555 	.word	0x00001555
 8006774:	00000ccc 	.word	0x00000ccc
 8006778:	00000aaa 	.word	0x00000aaa
 800677c:	0000ffef 	.word	0x0000ffef

08006780 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006780:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8006782:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006784:	07da      	lsls	r2, r3, #31
 8006786:	d506      	bpl.n	8006796 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006788:	6801      	ldr	r1, [r0, #0]
 800678a:	4c28      	ldr	r4, [pc, #160]	; (800682c <UART_AdvFeatureConfig+0xac>)
 800678c:	684a      	ldr	r2, [r1, #4]
 800678e:	4022      	ands	r2, r4
 8006790:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006792:	4322      	orrs	r2, r4
 8006794:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006796:	079a      	lsls	r2, r3, #30
 8006798:	d506      	bpl.n	80067a8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800679a:	6801      	ldr	r1, [r0, #0]
 800679c:	4c24      	ldr	r4, [pc, #144]	; (8006830 <UART_AdvFeatureConfig+0xb0>)
 800679e:	684a      	ldr	r2, [r1, #4]
 80067a0:	4022      	ands	r2, r4
 80067a2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80067a4:	4322      	orrs	r2, r4
 80067a6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067a8:	075a      	lsls	r2, r3, #29
 80067aa:	d506      	bpl.n	80067ba <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067ac:	6801      	ldr	r1, [r0, #0]
 80067ae:	4c21      	ldr	r4, [pc, #132]	; (8006834 <UART_AdvFeatureConfig+0xb4>)
 80067b0:	684a      	ldr	r2, [r1, #4]
 80067b2:	4022      	ands	r2, r4
 80067b4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80067b6:	4322      	orrs	r2, r4
 80067b8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067ba:	071a      	lsls	r2, r3, #28
 80067bc:	d506      	bpl.n	80067cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067be:	6801      	ldr	r1, [r0, #0]
 80067c0:	4c1d      	ldr	r4, [pc, #116]	; (8006838 <UART_AdvFeatureConfig+0xb8>)
 80067c2:	684a      	ldr	r2, [r1, #4]
 80067c4:	4022      	ands	r2, r4
 80067c6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80067c8:	4322      	orrs	r2, r4
 80067ca:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067cc:	06da      	lsls	r2, r3, #27
 80067ce:	d506      	bpl.n	80067de <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067d0:	6801      	ldr	r1, [r0, #0]
 80067d2:	4c1a      	ldr	r4, [pc, #104]	; (800683c <UART_AdvFeatureConfig+0xbc>)
 80067d4:	688a      	ldr	r2, [r1, #8]
 80067d6:	4022      	ands	r2, r4
 80067d8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80067da:	4322      	orrs	r2, r4
 80067dc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067de:	069a      	lsls	r2, r3, #26
 80067e0:	d506      	bpl.n	80067f0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067e2:	6801      	ldr	r1, [r0, #0]
 80067e4:	4c16      	ldr	r4, [pc, #88]	; (8006840 <UART_AdvFeatureConfig+0xc0>)
 80067e6:	688a      	ldr	r2, [r1, #8]
 80067e8:	4022      	ands	r2, r4
 80067ea:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80067ec:	4322      	orrs	r2, r4
 80067ee:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067f0:	065a      	lsls	r2, r3, #25
 80067f2:	d510      	bpl.n	8006816 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067f4:	6801      	ldr	r1, [r0, #0]
 80067f6:	4d13      	ldr	r5, [pc, #76]	; (8006844 <UART_AdvFeatureConfig+0xc4>)
 80067f8:	684a      	ldr	r2, [r1, #4]
 80067fa:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80067fc:	402a      	ands	r2, r5
 80067fe:	4322      	orrs	r2, r4
 8006800:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006802:	2280      	movs	r2, #128	; 0x80
 8006804:	0352      	lsls	r2, r2, #13
 8006806:	4294      	cmp	r4, r2
 8006808:	d105      	bne.n	8006816 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800680a:	684a      	ldr	r2, [r1, #4]
 800680c:	4c0e      	ldr	r4, [pc, #56]	; (8006848 <UART_AdvFeatureConfig+0xc8>)
 800680e:	4022      	ands	r2, r4
 8006810:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006812:	4322      	orrs	r2, r4
 8006814:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006816:	061b      	lsls	r3, r3, #24
 8006818:	d506      	bpl.n	8006828 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800681a:	6802      	ldr	r2, [r0, #0]
 800681c:	490b      	ldr	r1, [pc, #44]	; (800684c <UART_AdvFeatureConfig+0xcc>)
 800681e:	6853      	ldr	r3, [r2, #4]
 8006820:	400b      	ands	r3, r1
 8006822:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006824:	430b      	orrs	r3, r1
 8006826:	6053      	str	r3, [r2, #4]
  }
}
 8006828:	bd30      	pop	{r4, r5, pc}
 800682a:	46c0      	nop			; (mov r8, r8)
 800682c:	fffdffff 	.word	0xfffdffff
 8006830:	fffeffff 	.word	0xfffeffff
 8006834:	fffbffff 	.word	0xfffbffff
 8006838:	ffff7fff 	.word	0xffff7fff
 800683c:	ffffefff 	.word	0xffffefff
 8006840:	ffffdfff 	.word	0xffffdfff
 8006844:	ffefffff 	.word	0xffefffff
 8006848:	ff9fffff 	.word	0xff9fffff
 800684c:	fff7ffff 	.word	0xfff7ffff

08006850 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006852:	0004      	movs	r4, r0
 8006854:	000e      	movs	r6, r1
 8006856:	0015      	movs	r5, r2
 8006858:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800685a:	6822      	ldr	r2, [r4, #0]
 800685c:	69d3      	ldr	r3, [r2, #28]
 800685e:	4033      	ands	r3, r6
 8006860:	1b9b      	subs	r3, r3, r6
 8006862:	4259      	negs	r1, r3
 8006864:	414b      	adcs	r3, r1
 8006866:	42ab      	cmp	r3, r5
 8006868:	d001      	beq.n	800686e <UART_WaitOnFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800686a:	2000      	movs	r0, #0
 800686c:	e01e      	b.n	80068ac <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800686e:	9b06      	ldr	r3, [sp, #24]
 8006870:	3301      	adds	r3, #1
 8006872:	d0f3      	beq.n	800685c <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006874:	f7fd fbd4 	bl	8004020 <HAL_GetTick>
 8006878:	9b06      	ldr	r3, [sp, #24]
 800687a:	1bc0      	subs	r0, r0, r7
 800687c:	4283      	cmp	r3, r0
 800687e:	d301      	bcc.n	8006884 <UART_WaitOnFlagUntilTimeout+0x34>
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1ea      	bne.n	800685a <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006884:	0022      	movs	r2, r4
 8006886:	ca08      	ldmia	r2!, {r3}
 8006888:	4809      	ldr	r0, [pc, #36]	; (80068b0 <UART_WaitOnFlagUntilTimeout+0x60>)
 800688a:	6819      	ldr	r1, [r3, #0]
 800688c:	4001      	ands	r1, r0
 800688e:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006890:	6899      	ldr	r1, [r3, #8]
 8006892:	30a3      	adds	r0, #163	; 0xa3
 8006894:	30ff      	adds	r0, #255	; 0xff
 8006896:	4381      	bics	r1, r0
 8006898:	6099      	str	r1, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800689a:	2320      	movs	r3, #32
 800689c:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800689e:	0022      	movs	r2, r4
 80068a0:	3208      	adds	r2, #8
 80068a2:	67d3      	str	r3, [r2, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 80068a4:	2300      	movs	r3, #0
 80068a6:	347c      	adds	r4, #124	; 0x7c
 80068a8:	7023      	strb	r3, [r4, #0]
 80068aa:	3002      	adds	r0, #2
}
 80068ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068ae:	46c0      	nop			; (mov r8, r8)
 80068b0:	fffffe5f 	.word	0xfffffe5f

080068b4 <HAL_UART_Transmit>:
{
 80068b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 80068b6:	1d07      	adds	r7, r0, #4
{
 80068b8:	b087      	sub	sp, #28
 80068ba:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 80068bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
{
 80068be:	0004      	movs	r4, r0
 80068c0:	000d      	movs	r5, r1
 80068c2:	0016      	movs	r6, r2
    return HAL_BUSY;
 80068c4:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80068c6:	2b20      	cmp	r3, #32
 80068c8:	d14a      	bne.n	8006960 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 80068ca:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80068cc:	2900      	cmp	r1, #0
 80068ce:	d047      	beq.n	8006960 <HAL_UART_Transmit+0xac>
 80068d0:	2a00      	cmp	r2, #0
 80068d2:	d045      	beq.n	8006960 <HAL_UART_Transmit+0xac>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068d4:	2380      	movs	r3, #128	; 0x80
 80068d6:	68a2      	ldr	r2, [r4, #8]
 80068d8:	015b      	lsls	r3, r3, #5
 80068da:	429a      	cmp	r2, r3
 80068dc:	d104      	bne.n	80068e8 <HAL_UART_Transmit+0x34>
 80068de:	6923      	ldr	r3, [r4, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <HAL_UART_Transmit+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 80068e4:	4201      	tst	r1, r0
 80068e6:	d13b      	bne.n	8006960 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80068e8:	0023      	movs	r3, r4
 80068ea:	337c      	adds	r3, #124	; 0x7c
 80068ec:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80068ee:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80068f0:	2a01      	cmp	r2, #1
 80068f2:	d035      	beq.n	8006960 <HAL_UART_Transmit+0xac>
 80068f4:	2201      	movs	r2, #1
 80068f6:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f8:	2200      	movs	r2, #0
 80068fa:	60da      	str	r2, [r3, #12]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068fc:	2321      	movs	r3, #33	; 0x21
 80068fe:	67fb      	str	r3, [r7, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8006900:	f7fd fb8e 	bl	8004020 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8006904:	0023      	movs	r3, r4
 8006906:	3354      	adds	r3, #84	; 0x54
 8006908:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 800690a:	3302      	adds	r3, #2
 800690c:	801e      	strh	r6, [r3, #0]
 800690e:	9303      	str	r3, [sp, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006910:	2380      	movs	r3, #128	; 0x80
 8006912:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8006914:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006916:	015b      	lsls	r3, r3, #5
      pdata16bits = NULL;
 8006918:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800691a:	429a      	cmp	r2, r3
 800691c:	d104      	bne.n	8006928 <HAL_UART_Transmit+0x74>
 800691e:	6923      	ldr	r3, [r4, #16]
 8006920:	42b3      	cmp	r3, r6
 8006922:	d101      	bne.n	8006928 <HAL_UART_Transmit+0x74>
 8006924:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8006926:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8006928:	0023      	movs	r3, r4
 800692a:	3356      	adds	r3, #86	; 0x56
 800692c:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800692e:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 8006930:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 8006936:	2a00      	cmp	r2, #0
 8006938:	d10a      	bne.n	8006950 <HAL_UART_Transmit+0x9c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800693a:	2140      	movs	r1, #64	; 0x40
 800693c:	0020      	movs	r0, r4
 800693e:	f7ff ff87 	bl	8006850 <UART_WaitOnFlagUntilTimeout>
 8006942:	2800      	cmp	r0, #0
 8006944:	d10b      	bne.n	800695e <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_READY;
 8006946:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8006948:	347c      	adds	r4, #124	; 0x7c
    huart->gState = HAL_UART_STATE_READY;
 800694a:	67fb      	str	r3, [r7, #124]	; 0x7c
    __HAL_UNLOCK(huart);
 800694c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800694e:	e007      	b.n	8006960 <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006950:	2200      	movs	r2, #0
 8006952:	2180      	movs	r1, #128	; 0x80
 8006954:	0020      	movs	r0, r4
 8006956:	f7ff ff7b 	bl	8006850 <UART_WaitOnFlagUntilTimeout>
 800695a:	2800      	cmp	r0, #0
 800695c:	d002      	beq.n	8006964 <HAL_UART_Transmit+0xb0>
        return HAL_TIMEOUT;
 800695e:	2003      	movs	r0, #3
}
 8006960:	b007      	add	sp, #28
 8006962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006964:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8006966:	2d00      	cmp	r5, #0
 8006968:	d10b      	bne.n	8006982 <HAL_UART_Transmit+0xce>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800696a:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 800696c:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800696e:	05db      	lsls	r3, r3, #23
 8006970:	0ddb      	lsrs	r3, r3, #23
 8006972:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8006974:	9b03      	ldr	r3, [sp, #12]
 8006976:	9a03      	ldr	r2, [sp, #12]
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	3b01      	subs	r3, #1
 800697c:	b29b      	uxth	r3, r3
 800697e:	8013      	strh	r3, [r2, #0]
 8006980:	e7d2      	b.n	8006928 <HAL_UART_Transmit+0x74>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006982:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8006984:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006986:	6293      	str	r3, [r2, #40]	; 0x28
 8006988:	e7f4      	b.n	8006974 <HAL_UART_Transmit+0xc0>
	...

0800698c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800698c:	0003      	movs	r3, r0
{
 800698e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006990:	2600      	movs	r6, #0
{
 8006992:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006994:	3388      	adds	r3, #136	; 0x88
 8006996:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8006998:	f7fd fb42 	bl	8004020 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800699c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800699e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	071b      	lsls	r3, r3, #28
 80069a4:	d417      	bmi.n	80069d6 <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069a6:	6823      	ldr	r3, [r4, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	075b      	lsls	r3, r3, #29
 80069ac:	d50a      	bpl.n	80069c4 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069ae:	2180      	movs	r1, #128	; 0x80
 80069b0:	4b0f      	ldr	r3, [pc, #60]	; (80069f0 <UART_CheckIdleState+0x64>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	03c9      	lsls	r1, r1, #15
 80069b8:	002b      	movs	r3, r5
 80069ba:	0020      	movs	r0, r4
 80069bc:	f7ff ff48 	bl	8006850 <UART_WaitOnFlagUntilTimeout>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d113      	bne.n	80069ec <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 80069c4:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80069c6:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80069c8:	1d22      	adds	r2, r4, #4
 80069ca:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 80069cc:	347c      	adds	r4, #124	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80069ce:	3204      	adds	r2, #4
 80069d0:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 80069d2:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80069d4:	e00b      	b.n	80069ee <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069d6:	2180      	movs	r1, #128	; 0x80
 80069d8:	4b05      	ldr	r3, [pc, #20]	; (80069f0 <UART_CheckIdleState+0x64>)
 80069da:	0032      	movs	r2, r6
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	0389      	lsls	r1, r1, #14
 80069e0:	0003      	movs	r3, r0
 80069e2:	0020      	movs	r0, r4
 80069e4:	f7ff ff34 	bl	8006850 <UART_WaitOnFlagUntilTimeout>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	d0dc      	beq.n	80069a6 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80069ec:	2003      	movs	r0, #3
}
 80069ee:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80069f0:	01ffffff 	.word	0x01ffffff

080069f4 <HAL_UART_Init>:
{
 80069f4:	b570      	push	{r4, r5, r6, lr}
 80069f6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80069f8:	d101      	bne.n	80069fe <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80069fa:	2001      	movs	r0, #1
}
 80069fc:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80069fe:	1d05      	adds	r5, r0, #4
 8006a00:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d104      	bne.n	8006a10 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8006a06:	0002      	movs	r2, r0
 8006a08:	327c      	adds	r2, #124	; 0x7c
 8006a0a:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8006a0c:	f7fd f940 	bl	8003c90 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8006a10:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8006a12:	2101      	movs	r1, #1
 8006a14:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006a16:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8006a18:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a1a:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8006a1c:	438b      	bics	r3, r1
 8006a1e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a20:	f7ff fcac 	bl	800637c <UART_SetConfig>
 8006a24:	2801      	cmp	r0, #1
 8006a26:	d0e8      	beq.n	80069fa <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d002      	beq.n	8006a34 <HAL_UART_Init+0x40>
    UART_AdvFeatureConfig(huart);
 8006a2e:	0020      	movs	r0, r4
 8006a30:	f7ff fea6 	bl	8006780 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	4908      	ldr	r1, [pc, #32]	; (8006a58 <HAL_UART_Init+0x64>)
 8006a38:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8006a3a:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a3c:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a3e:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	438a      	bics	r2, r1
 8006a46:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006a48:	2201      	movs	r2, #1
 8006a4a:	6819      	ldr	r1, [r3, #0]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8006a50:	f7ff ff9c 	bl	800698c <UART_CheckIdleState>
 8006a54:	e7d2      	b.n	80069fc <HAL_UART_Init+0x8>
 8006a56:	46c0      	nop			; (mov r8, r8)
 8006a58:	ffffb7ff 	.word	0xffffb7ff

08006a5c <UARTEx_SetNbDataToProcess>:
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006a5c:	2301      	movs	r3, #1
{
 8006a5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a60:	b087      	sub	sp, #28
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006a62:	aa02      	add	r2, sp, #8
 8006a64:	7013      	strb	r3, [r2, #0]
 8006a66:	7053      	strb	r3, [r2, #1]
 8006a68:	7093      	strb	r3, [r2, #2]
 8006a6a:	2203      	movs	r2, #3
 8006a6c:	a902      	add	r1, sp, #8
 8006a6e:	70ca      	strb	r2, [r1, #3]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006a70:	2502      	movs	r5, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006a72:	2200      	movs	r2, #0
 8006a74:	2607      	movs	r6, #7
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006a76:	ac04      	add	r4, sp, #16
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006a78:	718a      	strb	r2, [r1, #6]
 8006a7a:	71ca      	strb	r2, [r1, #7]
 8006a7c:	710e      	strb	r6, [r1, #4]
 8006a7e:	714b      	strb	r3, [r1, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006a80:	70a5      	strb	r5, [r4, #2]
 8006a82:	2104      	movs	r1, #4
 8006a84:	0007      	movs	r7, r0
 8006a86:	0005      	movs	r5, r0
 8006a88:	3208      	adds	r2, #8
 8006a8a:	7022      	strb	r2, [r4, #0]
 8006a8c:	7122      	strb	r2, [r4, #4]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a8e:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006a90:	7061      	strb	r1, [r4, #1]
 8006a92:	70e1      	strb	r1, [r4, #3]
 8006a94:	7163      	strb	r3, [r4, #5]
 8006a96:	71a3      	strb	r3, [r4, #6]
 8006a98:	71e3      	strb	r3, [r4, #7]
 8006a9a:	376a      	adds	r7, #106	; 0x6a
 8006a9c:	3568      	adds	r5, #104	; 0x68
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a9e:	2a00      	cmp	r2, #0
 8006aa0:	d103      	bne.n	8006aaa <UARTEx_SetNbDataToProcess+0x4e>
  {
    huart->NbTxDataToProcess = 1U;
 8006aa2:	803b      	strh	r3, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 8006aa4:	802b      	strh	r3, [r5, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006aa6:	b007      	add	sp, #28
 8006aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006aaa:	6803      	ldr	r3, [r0, #0]
 8006aac:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006aae:	689b      	ldr	r3, [r3, #8]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ab0:	9201      	str	r2, [sp, #4]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ab2:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006ab4:	aa02      	add	r2, sp, #8
 8006ab6:	5cd0      	ldrb	r0, [r2, r3]
 8006ab8:	5ce1      	ldrb	r1, [r4, r3]
 8006aba:	00c0      	lsls	r0, r0, #3
 8006abc:	f7f9 fbda 	bl	8000274 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ac0:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006ac2:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ac4:	0e5b      	lsrs	r3, r3, #25
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006ac6:	401e      	ands	r6, r3
 8006ac8:	ab02      	add	r3, sp, #8
 8006aca:	5d98      	ldrb	r0, [r3, r6]
 8006acc:	5da1      	ldrb	r1, [r4, r6]
 8006ace:	00c0      	lsls	r0, r0, #3
 8006ad0:	f7f9 fbd0 	bl	8000274 <__divsi3>
 8006ad4:	8028      	strh	r0, [r5, #0]
}
 8006ad6:	e7e6      	b.n	8006aa6 <UARTEx_SetNbDataToProcess+0x4a>

08006ad8 <HAL_UARTEx_EnableFifoMode>:
{
 8006ad8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8006ada:	0004      	movs	r4, r0
 8006adc:	347c      	adds	r4, #124	; 0x7c
 8006ade:	7822      	ldrb	r2, [r4, #0]
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	2a01      	cmp	r2, #1
 8006ae4:	d014      	beq.n	8006b10 <HAL_UARTEx_EnableFifoMode+0x38>
 8006ae6:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8006ae8:	1d05      	adds	r5, r0, #4
 8006aea:	3322      	adds	r3, #34	; 0x22
  __HAL_LOCK(huart);
 8006aec:	7026      	strb	r6, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006aee:	67eb      	str	r3, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006af0:	6803      	ldr	r3, [r0, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006af4:	6819      	ldr	r1, [r3, #0]
 8006af6:	43b1      	bics	r1, r6
 8006af8:	6019      	str	r1, [r3, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006afa:	2180      	movs	r1, #128	; 0x80
 8006afc:	0589      	lsls	r1, r1, #22
 8006afe:	430a      	orrs	r2, r1
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8006b00:	6641      	str	r1, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b02:	601a      	str	r2, [r3, #0]
  UARTEx_SetNbDataToProcess(huart);
 8006b04:	f7ff ffaa 	bl	8006a5c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8006b08:	2320      	movs	r3, #32
 8006b0a:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	7023      	strb	r3, [r4, #0]
}
 8006b10:	0018      	movs	r0, r3
 8006b12:	bd70      	pop	{r4, r5, r6, pc}

08006b14 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8006b16:	0005      	movs	r5, r0
 8006b18:	357c      	adds	r5, #124	; 0x7c
 8006b1a:	782b      	ldrb	r3, [r5, #0]
{
 8006b1c:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 8006b1e:	2002      	movs	r0, #2
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d017      	beq.n	8006b54 <HAL_UARTEx_SetTxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 8006b24:	2324      	movs	r3, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b26:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(huart);
 8006b28:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8006b2a:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 8006b2c:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006b2e:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b30:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006b32:	6813      	ldr	r3, [r2, #0]
 8006b34:	4383      	bics	r3, r0
 8006b36:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b38:	6893      	ldr	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006b3a:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b3c:	00db      	lsls	r3, r3, #3
 8006b3e:	08db      	lsrs	r3, r3, #3
 8006b40:	4319      	orrs	r1, r3
 8006b42:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006b44:	f7ff ff8a 	bl	8006a5c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b48:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8006b4a:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b4c:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006b4e:	2320      	movs	r3, #32
 8006b50:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8006b52:	7028      	strb	r0, [r5, #0]
}
 8006b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b58 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8006b5a:	0005      	movs	r5, r0
 8006b5c:	357c      	adds	r5, #124	; 0x7c
 8006b5e:	782b      	ldrb	r3, [r5, #0]
{
 8006b60:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 8006b62:	2002      	movs	r0, #2
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d017      	beq.n	8006b98 <HAL_UARTEx_SetRxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 8006b68:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8006b6a:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8006b6c:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 8006b6e:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006b70:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	4382      	bics	r2, r0
 8006b7a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b7c:	689a      	ldr	r2, [r3, #8]
 8006b7e:	4807      	ldr	r0, [pc, #28]	; (8006b9c <HAL_UARTEx_SetRxFifoThreshold+0x44>)
 8006b80:	4002      	ands	r2, r0
 8006b82:	4311      	orrs	r1, r2
 8006b84:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006b86:	0020      	movs	r0, r4
 8006b88:	f7ff ff68 	bl	8006a5c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b8c:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8006b8e:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b90:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006b92:	2320      	movs	r3, #32
 8006b94:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8006b96:	7028      	strb	r0, [r5, #0]
}
 8006b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b9a:	46c0      	nop			; (mov r8, r8)
 8006b9c:	f1ffffff 	.word	0xf1ffffff

08006ba0 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result 
  */
int32_t MX_FATFS_Init(void) 
{
 8006ba0:	b510      	push	{r4, lr}
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 8006ba2:	4906      	ldr	r1, [pc, #24]	; (8006bbc <MX_FATFS_Init+0x1c>)
 8006ba4:	4806      	ldr	r0, [pc, #24]	; (8006bc0 <MX_FATFS_Init+0x20>)
 8006ba6:	f001 fb65 	bl	8008274 <FATFS_LinkDriver>
 8006baa:	2800      	cmp	r0, #0
 8006bac:	d103      	bne.n	8006bb6 <MX_FATFS_Init+0x16>
  {
    return APP_ERROR;
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8006bae:	2201      	movs	r2, #1
 8006bb0:	4b04      	ldr	r3, [pc, #16]	; (8006bc4 <MX_FATFS_Init+0x24>)
 8006bb2:	701a      	strb	r2, [r3, #0]
    return APP_OK;
  }
  /* USER CODE END FATFS_Init */
}
 8006bb4:	bd10      	pop	{r4, pc}
    return APP_ERROR;
 8006bb6:	2001      	movs	r0, #1
 8006bb8:	4240      	negs	r0, r0
 8006bba:	e7fb      	b.n	8006bb4 <MX_FATFS_Init+0x14>
 8006bbc:	20004d3c 	.word	0x20004d3c
 8006bc0:	08012838 	.word	0x08012838
 8006bc4:	200014e4 	.word	0x200014e4

08006bc8 <MX_FATFS_Process>:
  /* USER CODE BEGIN FATFS_Process */
  int32_t process_res = APP_OK;  
    
  return process_res;
  /* USER CODE END FATFS_Process */
}  
 8006bc8:	2000      	movs	r0, #0
 8006bca:	4770      	bx	lr

08006bcc <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8006bcc:	2000      	movs	r0, #0
 8006bce:	4770      	bx	lr

08006bd0 <SD_CheckStatus.isra.0>:
  SD_ioctl,
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 8006bd0:	b570      	push	{r4, r5, r6, lr}
{
  Stat = STA_NOINIT;
 8006bd2:	2501      	movs	r5, #1
 8006bd4:	4c05      	ldr	r4, [pc, #20]	; (8006bec <SD_CheckStatus.isra.0+0x1c>)
 8006bd6:	7025      	strb	r5, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006bd8:	f7fc feb0 	bl	800393c <BSP_SD_GetCardState>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	d102      	bne.n	8006be6 <SD_CheckStatus.isra.0+0x16>
  {
    Stat &= ~STA_NOINIT;
 8006be0:	7823      	ldrb	r3, [r4, #0]
 8006be2:	43ab      	bics	r3, r5
 8006be4:	7023      	strb	r3, [r4, #0]
  }

  return Stat;
 8006be6:	7820      	ldrb	r0, [r4, #0]
 8006be8:	b2c0      	uxtb	r0, r0
}
 8006bea:	bd70      	pop	{r4, r5, r6, pc}
 8006bec:	20000010 	.word	0x20000010

08006bf0 <SD_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
  /* USER CODE BEGIN SDinitialize */
  Stat = STA_NOINIT;
 8006bf0:	2301      	movs	r3, #1
{
 8006bf2:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8006bf4:	4c05      	ldr	r4, [pc, #20]	; (8006c0c <SD_initialize+0x1c>)
 8006bf6:	7023      	strb	r3, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006bf8:	f7fc fb1a 	bl	8003230 <BSP_SD_Init>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	d102      	bne.n	8006c06 <SD_initialize+0x16>
  {
    Stat = SD_CheckStatus(lun);
 8006c00:	f7ff ffe6 	bl	8006bd0 <SD_CheckStatus.isra.0>
 8006c04:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8006c06:	7820      	ldrb	r0, [r4, #0]
 8006c08:	b2c0      	uxtb	r0, r0
  /* USER CODE END SDinitialize */
}
 8006c0a:	bd10      	pop	{r4, pc}
 8006c0c:	20000010 	.word	0x20000010

08006c10 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006c10:	b510      	push	{r4, lr}
  return SD_CheckStatus(lun);
 8006c12:	f7ff ffdd 	bl	8006bd0 <SD_CheckStatus.isra.0>
}
 8006c16:	bd10      	pop	{r4, pc}

08006c18 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006c18:	0008      	movs	r0, r1
 8006c1a:	b510      	push	{r4, lr}
 8006c1c:	0011      	movs	r1, r2
 8006c1e:	001a      	movs	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8006c20:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <SD_read+0x20>)
 8006c22:	f7fc fd8d 	bl	8003740 <BSP_SD_ReadBlocks>
 8006c26:	0003      	movs	r3, r0
  DRESULT res = RES_ERROR;
 8006c28:	2001      	movs	r0, #1
  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d103      	bne.n	8006c36 <SD_read+0x1e>
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
  /* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8006c2e:	f7fc fe85 	bl	800393c <BSP_SD_GetCardState>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d1fb      	bne.n	8006c2e <SD_read+0x16>
}
 8006c36:	bd10      	pop	{r4, pc}
 8006c38:	05f5e100 	.word	0x05f5e100

08006c3c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006c3c:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006c3e:	4b11      	ldr	r3, [pc, #68]	; (8006c84 <SD_ioctl+0x48>)
{
 8006c40:	0014      	movs	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006c42:	781a      	ldrb	r2, [r3, #0]
{
 8006c44:	b090      	sub	sp, #64	; 0x40
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006c46:	2003      	movs	r0, #3
 8006c48:	07d3      	lsls	r3, r2, #31
 8006c4a:	d413      	bmi.n	8006c74 <SD_ioctl+0x38>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
     res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8006c4c:	3001      	adds	r0, #1
  switch (cmd)
 8006c4e:	2903      	cmp	r1, #3
 8006c50:	d810      	bhi.n	8006c74 <SD_ioctl+0x38>
 8006c52:	0008      	movs	r0, r1
 8006c54:	f7f9 fa66 	bl	8000124 <__gnu_thumb1_case_uqi>
 8006c58:	1008020d 	.word	0x1008020d
    BSP_SD_GetCardInfo(&CardInfo);
 8006c5c:	4668      	mov	r0, sp
 8006c5e:	f7fc fba9 	bl	80033b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006c62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006c64:	6023      	str	r3, [r4, #0]
 8006c66:	e004      	b.n	8006c72 <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8006c68:	4668      	mov	r0, sp
 8006c6a:	f7fc fba3 	bl	80033b4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006c6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c70:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8006c72:	2000      	movs	r0, #0
  }

  return res;
}
 8006c74:	b010      	add	sp, #64	; 0x40
 8006c76:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8006c78:	4668      	mov	r0, sp
 8006c7a:	f7fc fb9b 	bl	80033b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006c7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c80:	0a5b      	lsrs	r3, r3, #9
 8006c82:	e7ef      	b.n	8006c64 <SD_ioctl+0x28>
 8006c84:	20000010 	.word	0x20000010

08006c88 <SD_write>:
{
 8006c88:	0008      	movs	r0, r1
 8006c8a:	b510      	push	{r4, lr}
 8006c8c:	0011      	movs	r1, r2
 8006c8e:	001a      	movs	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8006c90:	4b05      	ldr	r3, [pc, #20]	; (8006ca8 <SD_write+0x20>)
 8006c92:	f7fc fdc7 	bl	8003824 <BSP_SD_WriteBlocks>
 8006c96:	0003      	movs	r3, r0
  DRESULT res = RES_ERROR;
 8006c98:	2001      	movs	r0, #1
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d103      	bne.n	8006ca6 <SD_write+0x1e>
    while(BSP_SD_GetCardState() != MSD_OK)
 8006c9e:	f7fc fe4d 	bl	800393c <BSP_SD_GetCardState>
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	d1fb      	bne.n	8006c9e <SD_write+0x16>
}
 8006ca6:	bd10      	pop	{r4, pc}
 8006ca8:	05f5e100 	.word	0x05f5e100

08006cac <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006cac:	4b05      	ldr	r3, [pc, #20]	; (8006cc4 <disk_status+0x18>)
{
 8006cae:	b510      	push	{r4, lr}
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006cb0:	181a      	adds	r2, r3, r0
 8006cb2:	0080      	lsls	r0, r0, #2
 8006cb4:	181b      	adds	r3, r3, r0
 8006cb6:	7a11      	ldrb	r1, [r2, #8]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	0008      	movs	r0, r1
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	4798      	blx	r3
  return stat;
}
 8006cc0:	bd10      	pop	{r4, pc}
 8006cc2:	46c0      	nop			; (mov r8, r8)
 8006cc4:	20001510 	.word	0x20001510

08006cc8 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8006cc8:	4b08      	ldr	r3, [pc, #32]	; (8006cec <disk_initialize+0x24>)
{
 8006cca:	0002      	movs	r2, r0
  if(disk.is_initialized[pdrv] == 0)
 8006ccc:	5c19      	ldrb	r1, [r3, r0]
  DSTATUS stat = RES_OK;
 8006cce:	2000      	movs	r0, #0
{
 8006cd0:	b510      	push	{r4, lr}
  if(disk.is_initialized[pdrv] == 0)
 8006cd2:	4281      	cmp	r1, r0
 8006cd4:	d108      	bne.n	8006ce8 <disk_initialize+0x20>
  {
    disk.is_initialized[pdrv] = 1;
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	5499      	strb	r1, [r3, r2]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006cda:	1899      	adds	r1, r3, r2
 8006cdc:	0092      	lsls	r2, r2, #2
 8006cde:	189b      	adds	r3, r3, r2
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	7a08      	ldrb	r0, [r1, #8]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4798      	blx	r3
  }
  return stat;
}
 8006ce8:	bd10      	pop	{r4, pc}
 8006cea:	46c0      	nop			; (mov r8, r8)
 8006cec:	20001510 	.word	0x20001510

08006cf0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006cf0:	b570      	push	{r4, r5, r6, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006cf2:	4c05      	ldr	r4, [pc, #20]	; (8006d08 <disk_read+0x18>)
 8006cf4:	1825      	adds	r5, r4, r0
 8006cf6:	0080      	lsls	r0, r0, #2
 8006cf8:	1824      	adds	r4, r4, r0
 8006cfa:	7a2e      	ldrb	r6, [r5, #8]
 8006cfc:	6860      	ldr	r0, [r4, #4]
 8006cfe:	6884      	ldr	r4, [r0, #8]
 8006d00:	0030      	movs	r0, r6
 8006d02:	47a0      	blx	r4
  return res;
}
 8006d04:	bd70      	pop	{r4, r5, r6, pc}
 8006d06:	46c0      	nop			; (mov r8, r8)
 8006d08:	20001510 	.word	0x20001510

08006d0c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006d0c:	b570      	push	{r4, r5, r6, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006d0e:	4c05      	ldr	r4, [pc, #20]	; (8006d24 <disk_write+0x18>)
 8006d10:	1825      	adds	r5, r4, r0
 8006d12:	0080      	lsls	r0, r0, #2
 8006d14:	1824      	adds	r4, r4, r0
 8006d16:	7a2e      	ldrb	r6, [r5, #8]
 8006d18:	6860      	ldr	r0, [r4, #4]
 8006d1a:	68c4      	ldr	r4, [r0, #12]
 8006d1c:	0030      	movs	r0, r6
 8006d1e:	47a0      	blx	r4
  return res;
}
 8006d20:	bd70      	pop	{r4, r5, r6, pc}
 8006d22:	46c0      	nop			; (mov r8, r8)
 8006d24:	20001510 	.word	0x20001510

08006d28 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006d28:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <disk_ioctl+0x18>)
{
 8006d2a:	b570      	push	{r4, r5, r6, lr}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006d2c:	181c      	adds	r4, r3, r0
 8006d2e:	0080      	lsls	r0, r0, #2
 8006d30:	181b      	adds	r3, r3, r0
 8006d32:	7a25      	ldrb	r5, [r4, #8]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	0028      	movs	r0, r5
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	4798      	blx	r3
  return res;
}
 8006d3c:	bd70      	pop	{r4, r5, r6, pc}
 8006d3e:	46c0      	nop			; (mov r8, r8)
 8006d40:	20001510 	.word	0x20001510

08006d44 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8006d44:	78c3      	ldrb	r3, [r0, #3]
 8006d46:	7882      	ldrb	r2, [r0, #2]
 8006d48:	021b      	lsls	r3, r3, #8
 8006d4a:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
 8006d4c:	7842      	ldrb	r2, [r0, #1]
 8006d4e:	021b      	lsls	r3, r3, #8
 8006d50:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
 8006d52:	7800      	ldrb	r0, [r0, #0]
 8006d54:	021b      	lsls	r3, r3, #8
 8006d56:	4318      	orrs	r0, r3
	return rv;
}
 8006d58:	4770      	bx	lr

08006d5a <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8006d5a:	0a0b      	lsrs	r3, r1, #8
 8006d5c:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d5e:	7043      	strb	r3, [r0, #1]
 8006d60:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8006d62:	0e09      	lsrs	r1, r1, #24
 8006d64:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8006d66:	70c1      	strb	r1, [r0, #3]
}
 8006d68:	4770      	bx	lr

08006d6a <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006d6a:	1882      	adds	r2, r0, r2
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8006d6c:	7001      	strb	r1, [r0, #0]
 8006d6e:	3001      	adds	r0, #1
	} while (--cnt);
 8006d70:	4290      	cmp	r0, r2
 8006d72:	d1fb      	bne.n	8006d6c <mem_set+0x2>
}
 8006d74:	4770      	bx	lr
	...

08006d78 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006d78:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006d7a:	2400      	movs	r4, #0
 8006d7c:	4a14      	ldr	r2, [pc, #80]	; (8006dd0 <chk_lock+0x58>)
 8006d7e:	0023      	movs	r3, r4
 8006d80:	4694      	mov	ip, r2
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8006d82:	2701      	movs	r7, #1
		if (Files[i].fs) {	/* Existing entry */
 8006d84:	6815      	ldr	r5, [r2, #0]
 8006d86:	2d00      	cmp	r5, #0
 8006d88:	d016      	beq.n	8006db8 <chk_lock+0x40>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006d8a:	6806      	ldr	r6, [r0, #0]
 8006d8c:	42b5      	cmp	r5, r6
 8006d8e:	d114      	bne.n	8006dba <chk_lock+0x42>
 8006d90:	6855      	ldr	r5, [r2, #4]
 8006d92:	6886      	ldr	r6, [r0, #8]
 8006d94:	42b5      	cmp	r5, r6
 8006d96:	d110      	bne.n	8006dba <chk_lock+0x42>
				Files[i].clu == dp->obj.sclust &&
 8006d98:	6895      	ldr	r5, [r2, #8]
 8006d9a:	6946      	ldr	r6, [r0, #20]
 8006d9c:	42b5      	cmp	r5, r6
 8006d9e:	d10c      	bne.n	8006dba <chk_lock+0x42>
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006da0:	2010      	movs	r0, #16
 8006da2:	2900      	cmp	r1, #0
 8006da4:	d113      	bne.n	8006dce <chk_lock+0x56>
 8006da6:	011b      	lsls	r3, r3, #4
 8006da8:	4463      	add	r3, ip
 8006daa:	8998      	ldrh	r0, [r3, #12]
 8006dac:	3801      	subs	r0, #1
 8006dae:	38ff      	subs	r0, #255	; 0xff
 8006db0:	4242      	negs	r2, r0
 8006db2:	4142      	adcs	r2, r0
 8006db4:	0110      	lsls	r0, r2, #4
 8006db6:	e00a      	b.n	8006dce <chk_lock+0x56>
			be = 1;
 8006db8:	003c      	movs	r4, r7
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006dba:	3301      	adds	r3, #1
 8006dbc:	3210      	adds	r2, #16
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d1e0      	bne.n	8006d84 <chk_lock+0xc>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006dc2:	2000      	movs	r0, #0
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006dc4:	4284      	cmp	r4, r0
 8006dc6:	d102      	bne.n	8006dce <chk_lock+0x56>
 8006dc8:	2902      	cmp	r1, #2
 8006dca:	d000      	beq.n	8006dce <chk_lock+0x56>
 8006dcc:	2012      	movs	r0, #18
}
 8006dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dd0:	200014ec 	.word	0x200014ec

08006dd4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006dd4:	b570      	push	{r4, r5, r6, lr}
 8006dd6:	4c1f      	ldr	r4, [pc, #124]	; (8006e54 <inc_lock+0x80>)
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006dd8:	2300      	movs	r3, #0
 8006dda:	0022      	movs	r2, r4
		if (Files[i].fs == dp->obj.fs &&
 8006ddc:	6805      	ldr	r5, [r0, #0]
 8006dde:	6826      	ldr	r6, [r4, #0]
 8006de0:	42ae      	cmp	r6, r5
 8006de2:	d109      	bne.n	8006df8 <inc_lock+0x24>
 8006de4:	6866      	ldr	r6, [r4, #4]
 8006de6:	46b4      	mov	ip, r6
 8006de8:	6886      	ldr	r6, [r0, #8]
 8006dea:	45b4      	cmp	ip, r6
 8006dec:	d104      	bne.n	8006df8 <inc_lock+0x24>
			Files[i].clu == dp->obj.sclust &&
 8006dee:	68a6      	ldr	r6, [r4, #8]
 8006df0:	46b4      	mov	ip, r6
 8006df2:	6946      	ldr	r6, [r0, #20]
 8006df4:	45b4      	cmp	ip, r6
 8006df6:	d021      	beq.n	8006e3c <inc_lock+0x68>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006df8:	3301      	adds	r3, #1
 8006dfa:	3410      	adds	r4, #16
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d1ee      	bne.n	8006dde <inc_lock+0xa>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006e00:	6813      	ldr	r3, [r2, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d004      	beq.n	8006e10 <inc_lock+0x3c>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006e06:	2400      	movs	r4, #0
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006e08:	6913      	ldr	r3, [r2, #16]
 8006e0a:	42a3      	cmp	r3, r4
 8006e0c:	d114      	bne.n	8006e38 <inc_lock+0x64>
 8006e0e:	2301      	movs	r3, #1
		Files[i].fs = dp->obj.fs;
 8006e10:	011c      	lsls	r4, r3, #4
 8006e12:	5115      	str	r5, [r2, r4]
		Files[i].clu = dp->obj.sclust;
 8006e14:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 8006e16:	6940      	ldr	r0, [r0, #20]
		Files[i].clu = dp->obj.sclust;
 8006e18:	1914      	adds	r4, r2, r4
		Files[i].ofs = dp->dptr;
 8006e1a:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 8006e1c:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 8006e1e:	6065      	str	r5, [r4, #4]
		Files[i].ctr = 0;
 8006e20:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006e22:	4281      	cmp	r1, r0
 8006e24:	d112      	bne.n	8006e4c <inc_lock+0x78>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006e26:	0119      	lsls	r1, r3, #4
 8006e28:	1851      	adds	r1, r2, r1
 8006e2a:	8989      	ldrh	r1, [r1, #12]
 8006e2c:	3101      	adds	r1, #1
 8006e2e:	b289      	uxth	r1, r1
 8006e30:	0118      	lsls	r0, r3, #4
 8006e32:	1812      	adds	r2, r2, r0
 8006e34:	8191      	strh	r1, [r2, #12]

	return i + 1;
 8006e36:	1c5c      	adds	r4, r3, #1
}
 8006e38:	0020      	movs	r0, r4
 8006e3a:	bd70      	pop	{r4, r5, r6, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006e3c:	2900      	cmp	r1, #0
 8006e3e:	d0f2      	beq.n	8006e26 <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006e40:	2400      	movs	r4, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006e42:	0119      	lsls	r1, r3, #4
 8006e44:	1851      	adds	r1, r2, r1
 8006e46:	8989      	ldrh	r1, [r1, #12]
 8006e48:	42a1      	cmp	r1, r4
 8006e4a:	d1f5      	bne.n	8006e38 <inc_lock+0x64>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006e4c:	2180      	movs	r1, #128	; 0x80
 8006e4e:	0049      	lsls	r1, r1, #1
 8006e50:	e7ee      	b.n	8006e30 <inc_lock+0x5c>
 8006e52:	46c0      	nop			; (mov r8, r8)
 8006e54:	200014ec 	.word	0x200014ec

08006e58 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006e58:	1e43      	subs	r3, r0, #1
{
 8006e5a:	b510      	push	{r4, lr}
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006e5c:	2002      	movs	r0, #2
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d80e      	bhi.n	8006e80 <dec_lock+0x28>
		n = Files[i].ctr;
 8006e62:	4c08      	ldr	r4, [pc, #32]	; (8006e84 <dec_lock+0x2c>)
 8006e64:	011b      	lsls	r3, r3, #4
 8006e66:	18e2      	adds	r2, r4, r3
 8006e68:	8991      	ldrh	r1, [r2, #12]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006e6a:	4a07      	ldr	r2, [pc, #28]	; (8006e88 <dec_lock+0x30>)
 8006e6c:	400a      	ands	r2, r1
 8006e6e:	d001      	beq.n	8006e74 <dec_lock+0x1c>
 8006e70:	3901      	subs	r1, #1
 8006e72:	b28a      	uxth	r2, r1
		res = FR_OK;
 8006e74:	2000      	movs	r0, #0
		Files[i].ctr = n;
 8006e76:	18e1      	adds	r1, r4, r3
 8006e78:	818a      	strh	r2, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006e7a:	4282      	cmp	r2, r0
 8006e7c:	d100      	bne.n	8006e80 <dec_lock+0x28>
 8006e7e:	50e0      	str	r0, [r4, r3]
	}
	return res;
}
 8006e80:	bd10      	pop	{r4, pc}
 8006e82:	46c0      	nop			; (mov r8, r8)
 8006e84:	200014ec 	.word	0x200014ec
 8006e88:	fffffeff 	.word	0xfffffeff

08006e8c <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006e8c:	6942      	ldr	r2, [r0, #20]
	clst -= 2;
 8006e8e:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006e90:	3a02      	subs	r2, #2
{
 8006e92:	0003      	movs	r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006e94:	2000      	movs	r0, #0
 8006e96:	4291      	cmp	r1, r2
 8006e98:	d203      	bcs.n	8006ea2 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
 8006e9a:	8958      	ldrh	r0, [r3, #10]
 8006e9c:	4341      	muls	r1, r0
 8006e9e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006ea0:	1808      	adds	r0, r1, r0
}
 8006ea2:	4770      	bx	lr

08006ea4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006ea4:	0003      	movs	r3, r0
 8006ea6:	b510      	push	{r4, lr}
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006ea8:	681b      	ldr	r3, [r3, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006eaa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006eac:	0a48      	lsrs	r0, r1, #9
 8006eae:	8959      	ldrh	r1, [r3, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006eb0:	1d14      	adds	r4, r2, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006eb2:	f7f9 f955 	bl	8000160 <__udivsi3>
 8006eb6:	0002      	movs	r2, r0
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006eb8:	6820      	ldr	r0, [r4, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d006      	beq.n	8006ecc <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8006ebe:	4282      	cmp	r2, r0
 8006ec0:	d302      	bcc.n	8006ec8 <clmt_clust+0x24>
		cl -= ncl; tbl++;		/* Next fragment */
 8006ec2:	1a12      	subs	r2, r2, r0
 8006ec4:	3408      	adds	r4, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006ec6:	e7f7      	b.n	8006eb8 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8006ec8:	6860      	ldr	r0, [r4, #4]
 8006eca:	1810      	adds	r0, r2, r0
}
 8006ecc:	bd10      	pop	{r4, pc}

08006ece <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006ece:	6802      	ldr	r2, [r0, #0]
 8006ed0:	1e13      	subs	r3, r2, #0
 8006ed2:	d103      	bne.n	8006edc <get_ldnumber+0xe>
	int vol = -1;
 8006ed4:	2001      	movs	r0, #1
 8006ed6:	4240      	negs	r0, r0
 8006ed8:	e00e      	b.n	8006ef8 <get_ldnumber+0x2a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006eda:	3301      	adds	r3, #1
 8006edc:	7819      	ldrb	r1, [r3, #0]
 8006ede:	2920      	cmp	r1, #32
 8006ee0:	d909      	bls.n	8006ef6 <get_ldnumber+0x28>
 8006ee2:	293a      	cmp	r1, #58	; 0x3a
 8006ee4:	d1f9      	bne.n	8006eda <get_ldnumber+0xc>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8006ee6:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006ee8:	428b      	cmp	r3, r1
 8006eea:	d1f3      	bne.n	8006ed4 <get_ldnumber+0x6>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006eec:	7812      	ldrb	r2, [r2, #0]
 8006eee:	2a30      	cmp	r2, #48	; 0x30
 8006ef0:	d1f0      	bne.n	8006ed4 <get_ldnumber+0x6>
					vol = (int)i;
					*path = ++tt;
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006ef6:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8006ef8:	4770      	bx	lr

08006efa <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006efa:	b570      	push	{r4, r5, r6, lr}
 8006efc:	0005      	movs	r5, r0
 8006efe:	000c      	movs	r4, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006f00:	2800      	cmp	r0, #0
 8006f02:	d103      	bne.n	8006f0c <validate+0x12>
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
 8006f04:	2009      	movs	r0, #9
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006f06:	2300      	movs	r3, #0
 8006f08:	6023      	str	r3, [r4, #0]
	return res;
}
 8006f0a:	bd70      	pop	{r4, r5, r6, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006f0c:	6803      	ldr	r3, [r0, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d0f8      	beq.n	8006f04 <validate+0xa>
 8006f12:	781a      	ldrb	r2, [r3, #0]
 8006f14:	2a00      	cmp	r2, #0
 8006f16:	d0f5      	beq.n	8006f04 <validate+0xa>
 8006f18:	8881      	ldrh	r1, [r0, #4]
 8006f1a:	88da      	ldrh	r2, [r3, #6]
 8006f1c:	4291      	cmp	r1, r2
 8006f1e:	d1f1      	bne.n	8006f04 <validate+0xa>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006f20:	7858      	ldrb	r0, [r3, #1]
 8006f22:	f7ff fec3 	bl	8006cac <disk_status>
 8006f26:	2301      	movs	r3, #1
 8006f28:	4018      	ands	r0, r3
 8006f2a:	d1eb      	bne.n	8006f04 <validate+0xa>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006f2c:	682b      	ldr	r3, [r5, #0]
 8006f2e:	e7eb      	b.n	8006f08 <validate+0xe>

08006f30 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006f30:	2300      	movs	r3, #0
 8006f32:	b510      	push	{r4, lr}
			*d++ = *s++;
 8006f34:	5ccc      	ldrb	r4, [r1, r3]
 8006f36:	54c4      	strb	r4, [r0, r3]
 8006f38:	3301      	adds	r3, #1
		} while (--cnt);
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d1fa      	bne.n	8006f34 <mem_cpy.part.0+0x4>
}
 8006f3e:	bd10      	pop	{r4, pc}

08006f40 <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 8006f40:	7eca      	ldrb	r2, [r1, #27]
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
 8006f42:	b510      	push	{r4, lr}
 8006f44:	0004      	movs	r4, r0
	rv = rv << 8 | ptr[0];
 8006f46:	7e88      	ldrb	r0, [r1, #26]
 8006f48:	0212      	lsls	r2, r2, #8
	cl = ld_word(dir + DIR_FstClusLO);
 8006f4a:	4310      	orrs	r0, r2
	if (fs->fs_type == FS_FAT32) {
 8006f4c:	2c03      	cmp	r4, #3
 8006f4e:	d105      	bne.n	8006f5c <ld_clust.isra.1+0x1c>
	rv = rv << 8 | ptr[0];
 8006f50:	7d4a      	ldrb	r2, [r1, #21]
 8006f52:	7d0b      	ldrb	r3, [r1, #20]
 8006f54:	0212      	lsls	r2, r2, #8
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006f56:	4313      	orrs	r3, r2
 8006f58:	041b      	lsls	r3, r3, #16
 8006f5a:	4318      	orrs	r0, r3
}
 8006f5c:	bd10      	pop	{r4, pc}

08006f5e <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 8006f5e:	0a13      	lsrs	r3, r2, #8
 8006f60:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8006f62:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8006f64:	7803      	ldrb	r3, [r0, #0]
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d103      	bne.n	8006f72 <st_clust.isra.2+0x14>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006f6a:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8006f6c:	750a      	strb	r2, [r1, #20]
 8006f6e:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 8006f70:	754a      	strb	r2, [r1, #21]
}
 8006f72:	4770      	bx	lr

08006f74 <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8006f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006f76:	0007      	movs	r7, r0
		wsect = fs->winsect;	/* Current sector number */
 8006f78:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006f7a:	3730      	adds	r7, #48	; 0x30
 8006f7c:	2301      	movs	r3, #1
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8006f7e:	0004      	movs	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006f80:	002a      	movs	r2, r5
 8006f82:	7840      	ldrb	r0, [r0, #1]
 8006f84:	0039      	movs	r1, r7
 8006f86:	f7ff fec1 	bl	8006d0c <disk_write>
			res = FR_DISK_ERR;
 8006f8a:	2301      	movs	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	d106      	bne.n	8006f9e <sync_window.part.4+0x2a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006f90:	6a23      	ldr	r3, [r4, #32]
 8006f92:	69a2      	ldr	r2, [r4, #24]
			fs->wflag = 0;
 8006f94:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006f96:	1aeb      	subs	r3, r5, r3
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d302      	bcc.n	8006fa2 <sync_window.part.4+0x2e>
	FRESULT res = FR_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	0018      	movs	r0, r3
 8006fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006fa2:	78a6      	ldrb	r6, [r4, #2]
 8006fa4:	2e01      	cmp	r6, #1
 8006fa6:	d9f9      	bls.n	8006f9c <sync_window.part.4+0x28>
					wsect += fs->fsize;
 8006fa8:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006faa:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8006fac:	18ed      	adds	r5, r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8006fae:	002a      	movs	r2, r5
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	0039      	movs	r1, r7
 8006fb4:	f7ff feaa 	bl	8006d0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006fb8:	3e01      	subs	r6, #1
 8006fba:	e7f3      	b.n	8006fa4 <sync_window.part.4+0x30>

08006fbc <sync_window>:
	FRESULT res = FR_OK;
 8006fbc:	2300      	movs	r3, #0
{
 8006fbe:	b510      	push	{r4, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006fc0:	78c2      	ldrb	r2, [r0, #3]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d002      	beq.n	8006fcc <sync_window+0x10>
 8006fc6:	f7ff ffd5 	bl	8006f74 <sync_window.part.4>
 8006fca:	0003      	movs	r3, r0
}
 8006fcc:	0018      	movs	r0, r3
 8006fce:	bd10      	pop	{r4, pc}

08006fd0 <sync_fs>:
{
 8006fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd2:	0004      	movs	r4, r0
	res = sync_window(fs);
 8006fd4:	f7ff fff2 	bl	8006fbc <sync_window>
 8006fd8:	1e06      	subs	r6, r0, #0
	if (res == FR_OK) {
 8006fda:	d145      	bne.n	8007068 <sync_fs+0x98>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006fdc:	7823      	ldrb	r3, [r4, #0]
 8006fde:	2b03      	cmp	r3, #3
 8006fe0:	d13a      	bne.n	8007058 <sync_fs+0x88>
 8006fe2:	7927      	ldrb	r7, [r4, #4]
 8006fe4:	2f01      	cmp	r7, #1
 8006fe6:	d137      	bne.n	8007058 <sync_fs+0x88>
			mem_set(fs->win, 0, SS(fs));
 8006fe8:	0025      	movs	r5, r4
 8006fea:	2280      	movs	r2, #128	; 0x80
 8006fec:	3530      	adds	r5, #48	; 0x30
 8006fee:	0001      	movs	r1, r0
 8006ff0:	0092      	lsls	r2, r2, #2
 8006ff2:	0028      	movs	r0, r5
 8006ff4:	f7ff feb9 	bl	8006d6a <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8006ff8:	2255      	movs	r2, #85	; 0x55
 8006ffa:	4b1c      	ldr	r3, [pc, #112]	; (800706c <sync_fs+0x9c>)
	*ptr++ = (BYTE)val;
 8006ffc:	2141      	movs	r1, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8006ffe:	54e2      	strb	r2, [r4, r3]
	*ptr++ = (BYTE)val;
 8007000:	4b1b      	ldr	r3, [pc, #108]	; (8007070 <sync_fs+0xa0>)
 8007002:	1892      	adds	r2, r2, r2
 8007004:	54e2      	strb	r2, [r4, r3]
	*ptr++ = (BYTE)val; val >>= 8;
 8007006:	0022      	movs	r2, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8007008:	3bde      	subs	r3, #222	; 0xde
 800700a:	3bff      	subs	r3, #255	; 0xff
	*ptr++ = (BYTE)val; val >>= 8;
 800700c:	3231      	adds	r2, #49	; 0x31
	*ptr++ = (BYTE)val; val >>= 8;
 800700e:	702b      	strb	r3, [r5, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007010:	7013      	strb	r3, [r2, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007012:	0023      	movs	r3, r4
 8007014:	2261      	movs	r2, #97	; 0x61
 8007016:	3332      	adds	r3, #50	; 0x32
	*ptr++ = (BYTE)val; val >>= 8;
 8007018:	2085      	movs	r0, #133	; 0x85
	*ptr++ = (BYTE)val; val >>= 8;
 800701a:	701a      	strb	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 800701c:	7059      	strb	r1, [r3, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800701e:	2372      	movs	r3, #114	; 0x72
 8007020:	0080      	lsls	r0, r0, #2
 8007022:	5423      	strb	r3, [r4, r0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007024:	4813      	ldr	r0, [pc, #76]	; (8007074 <sync_fs+0xa4>)
 8007026:	5423      	strb	r3, [r4, r0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007028:	4b13      	ldr	r3, [pc, #76]	; (8007078 <sync_fs+0xa8>)
 800702a:	54e1      	strb	r1, [r4, r3]
	*ptr++ = (BYTE)val;
 800702c:	4b13      	ldr	r3, [pc, #76]	; (800707c <sync_fs+0xac>)
 800702e:	54e2      	strb	r2, [r4, r3]
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007030:	3301      	adds	r3, #1
 8007032:	18e0      	adds	r0, r4, r3
 8007034:	6921      	ldr	r1, [r4, #16]
 8007036:	f7ff fe90 	bl	8006d5a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800703a:	2387      	movs	r3, #135	; 0x87
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	18e0      	adds	r0, r4, r3
 8007040:	68e1      	ldr	r1, [r4, #12]
 8007042:	f7ff fe8a 	bl	8006d5a <st_dword>
			fs->winsect = fs->volbase + 1;
 8007046:	69e3      	ldr	r3, [r4, #28]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007048:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 800704a:	1c5a      	adds	r2, r3, #1
 800704c:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800704e:	003b      	movs	r3, r7
 8007050:	0029      	movs	r1, r5
 8007052:	f7ff fe5b 	bl	8006d0c <disk_write>
			fs->fsi_flag = 0;
 8007056:	7126      	strb	r6, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007058:	2200      	movs	r2, #0
 800705a:	7860      	ldrb	r0, [r4, #1]
 800705c:	0011      	movs	r1, r2
 800705e:	f7ff fe63 	bl	8006d28 <disk_ioctl>
 8007062:	1e43      	subs	r3, r0, #1
 8007064:	4198      	sbcs	r0, r3
 8007066:	b2c0      	uxtb	r0, r0
}
 8007068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800706a:	46c0      	nop			; (mov r8, r8)
 800706c:	0000022e 	.word	0x0000022e
 8007070:	0000022f 	.word	0x0000022f
 8007074:	00000215 	.word	0x00000215
 8007078:	00000216 	.word	0x00000216
 800707c:	00000217 	.word	0x00000217

08007080 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007080:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 8007082:	b570      	push	{r4, r5, r6, lr}
 8007084:	0004      	movs	r4, r0
 8007086:	000e      	movs	r6, r1
	FRESULT res = FR_OK;
 8007088:	2500      	movs	r5, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800708a:	428b      	cmp	r3, r1
 800708c:	d010      	beq.n	80070b0 <move_window+0x30>
		res = sync_window(fs);		/* Write-back changes */
 800708e:	f7ff ff95 	bl	8006fbc <sync_window>
 8007092:	1e05      	subs	r5, r0, #0
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007094:	d10c      	bne.n	80070b0 <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007096:	0021      	movs	r1, r4
 8007098:	7860      	ldrb	r0, [r4, #1]
 800709a:	2301      	movs	r3, #1
 800709c:	0032      	movs	r2, r6
 800709e:	3130      	adds	r1, #48	; 0x30
 80070a0:	f7ff fe26 	bl	8006cf0 <disk_read>
 80070a4:	2800      	cmp	r0, #0
 80070a6:	d002      	beq.n	80070ae <move_window+0x2e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80070a8:	2601      	movs	r6, #1
				res = FR_DISK_ERR;
 80070aa:	3501      	adds	r5, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80070ac:	4276      	negs	r6, r6
			fs->winsect = sector;
 80070ae:	62e6      	str	r6, [r4, #44]	; 0x2c
}
 80070b0:	0028      	movs	r0, r5
 80070b2:	bd70      	pop	{r4, r5, r6, pc}

080070b4 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80070b4:	2300      	movs	r3, #0
{
 80070b6:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80070b8:	70c3      	strb	r3, [r0, #3]
 80070ba:	3b01      	subs	r3, #1
 80070bc:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 80070be:	0004      	movs	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80070c0:	f7ff ffde 	bl	8007080 <move_window>
 80070c4:	2304      	movs	r3, #4
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d129      	bne.n	800711e <check_fs+0x6a>
	rv = ptr[1];
 80070ca:	4b16      	ldr	r3, [pc, #88]	; (8007124 <check_fs+0x70>)
	rv = rv << 8 | ptr[0];
 80070cc:	4a16      	ldr	r2, [pc, #88]	; (8007128 <check_fs+0x74>)
 80070ce:	5ce3      	ldrb	r3, [r4, r3]
 80070d0:	5ca2      	ldrb	r2, [r4, r2]
 80070d2:	021b      	lsls	r3, r3, #8
 80070d4:	431a      	orrs	r2, r3
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80070d6:	4915      	ldr	r1, [pc, #84]	; (800712c <check_fs+0x78>)
 80070d8:	b212      	sxth	r2, r2
 80070da:	2303      	movs	r3, #3
 80070dc:	428a      	cmp	r2, r1
 80070de:	d11e      	bne.n	800711e <check_fs+0x6a>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80070e0:	0023      	movs	r3, r4
 80070e2:	3330      	adds	r3, #48	; 0x30
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	2be9      	cmp	r3, #233	; 0xe9
 80070e8:	d006      	beq.n	80070f8 <check_fs+0x44>
 80070ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80070ec:	4a10      	ldr	r2, [pc, #64]	; (8007130 <check_fs+0x7c>)
 80070ee:	4911      	ldr	r1, [pc, #68]	; (8007134 <check_fs+0x80>)
 80070f0:	401a      	ands	r2, r3
	return 2;
 80070f2:	2302      	movs	r3, #2
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80070f4:	428a      	cmp	r2, r1
 80070f6:	d112      	bne.n	800711e <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80070f8:	0020      	movs	r0, r4
 80070fa:	3066      	adds	r0, #102	; 0x66
 80070fc:	f7ff fe22 	bl	8006d44 <ld_dword>
 8007100:	4a0d      	ldr	r2, [pc, #52]	; (8007138 <check_fs+0x84>)
 8007102:	0200      	lsls	r0, r0, #8
 8007104:	0a00      	lsrs	r0, r0, #8
 8007106:	2300      	movs	r3, #0
 8007108:	4290      	cmp	r0, r2
 800710a:	d008      	beq.n	800711e <check_fs+0x6a>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800710c:	0020      	movs	r0, r4
 800710e:	3082      	adds	r0, #130	; 0x82
 8007110:	f7ff fe18 	bl	8006d44 <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007114:	4b09      	ldr	r3, [pc, #36]	; (800713c <check_fs+0x88>)
 8007116:	18c3      	adds	r3, r0, r3
 8007118:	1e58      	subs	r0, r3, #1
 800711a:	4183      	sbcs	r3, r0
 800711c:	005b      	lsls	r3, r3, #1
}
 800711e:	0018      	movs	r0, r3
 8007120:	bd10      	pop	{r4, pc}
 8007122:	46c0      	nop			; (mov r8, r8)
 8007124:	0000022f 	.word	0x0000022f
 8007128:	0000022e 	.word	0x0000022e
 800712c:	ffffaa55 	.word	0xffffaa55
 8007130:	00ff00ff 	.word	0x00ff00ff
 8007134:	009000eb 	.word	0x009000eb
 8007138:	00544146 	.word	0x00544146
 800713c:	ccabbeba 	.word	0xccabbeba

08007140 <find_volume>:
	*rfs = 0;
 8007140:	2300      	movs	r3, #0
{
 8007142:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 8007144:	600b      	str	r3, [r1, #0]
{
 8007146:	b08b      	sub	sp, #44	; 0x2c
 8007148:	000d      	movs	r5, r1
 800714a:	0017      	movs	r7, r2
	vol = get_ldnumber(path);
 800714c:	f7ff febf 	bl	8006ece <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007150:	230b      	movs	r3, #11
	vol = get_ldnumber(path);
 8007152:	1e06      	subs	r6, r0, #0
	if (vol < 0) return FR_INVALID_DRIVE;
 8007154:	db16      	blt.n	8007184 <find_volume+0x44>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007156:	4ba8      	ldr	r3, [pc, #672]	; (80073f8 <find_volume+0x2b8>)
 8007158:	0082      	lsls	r2, r0, #2
 800715a:	58d4      	ldr	r4, [r2, r3]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800715c:	230c      	movs	r3, #12
 800715e:	2c00      	cmp	r4, #0
 8007160:	d010      	beq.n	8007184 <find_volume+0x44>
	*rfs = fs;							/* Return pointer to the file system object */
 8007162:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007164:	2501      	movs	r5, #1
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007166:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007168:	43af      	bics	r7, r5
	if (fs->fs_type) {					/* If the volume has been mounted */
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00d      	beq.n	800718a <find_volume+0x4a>
		stat = disk_status(fs->drv);
 800716e:	7860      	ldrb	r0, [r4, #1]
 8007170:	f7ff fd9c 	bl	8006cac <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007174:	4005      	ands	r5, r0
 8007176:	d108      	bne.n	800718a <find_volume+0x4a>
			return FR_OK;				/* The file system object is valid */
 8007178:	002b      	movs	r3, r5
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800717a:	2f00      	cmp	r7, #0
 800717c:	d002      	beq.n	8007184 <find_volume+0x44>
 800717e:	0742      	lsls	r2, r0, #29
 8007180:	d500      	bpl.n	8007184 <find_volume+0x44>
				return FR_WRITE_PROTECTED;
 8007182:	230a      	movs	r3, #10
}
 8007184:	0018      	movs	r0, r3
 8007186:	b00b      	add	sp, #44	; 0x2c
 8007188:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800718a:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800718c:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 800718e:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007190:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007192:	f7ff fd99 	bl	8006cc8 <disk_initialize>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007196:	2303      	movs	r3, #3
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007198:	07c2      	lsls	r2, r0, #31
 800719a:	d4f3      	bmi.n	8007184 <find_volume+0x44>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800719c:	2f00      	cmp	r7, #0
 800719e:	d001      	beq.n	80071a4 <find_volume+0x64>
 80071a0:	0743      	lsls	r3, r0, #29
 80071a2:	d4ee      	bmi.n	8007182 <find_volume+0x42>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80071a4:	2100      	movs	r1, #0
 80071a6:	0020      	movs	r0, r4
 80071a8:	f7ff ff84 	bl	80070b4 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80071ac:	2802      	cmp	r0, #2
 80071ae:	d125      	bne.n	80071fc <find_volume+0xbc>
 80071b0:	0026      	movs	r6, r4
 80071b2:	2500      	movs	r5, #0
 80071b4:	36f7      	adds	r6, #247	; 0xf7
 80071b6:	36ff      	adds	r6, #255	; 0xff
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80071b8:	2000      	movs	r0, #0
 80071ba:	1f33      	subs	r3, r6, #4
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	4283      	cmp	r3, r0
 80071c0:	d002      	beq.n	80071c8 <find_volume+0x88>
 80071c2:	0030      	movs	r0, r6
 80071c4:	f7ff fdbe 	bl	8006d44 <ld_dword>
 80071c8:	ab06      	add	r3, sp, #24
 80071ca:	50e8      	str	r0, [r5, r3]
 80071cc:	3504      	adds	r5, #4
 80071ce:	3610      	adds	r6, #16
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80071d0:	2d10      	cmp	r5, #16
 80071d2:	d1f1      	bne.n	80071b8 <find_volume+0x78>
 80071d4:	2500      	movs	r5, #0
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80071d6:	2603      	movs	r6, #3
			bsect = br[i];
 80071d8:	ab06      	add	r3, sp, #24
 80071da:	595f      	ldr	r7, [r3, r5]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80071dc:	0030      	movs	r0, r6
 80071de:	2f00      	cmp	r7, #0
 80071e0:	d005      	beq.n	80071ee <find_volume+0xae>
 80071e2:	0039      	movs	r1, r7
 80071e4:	0020      	movs	r0, r4
 80071e6:	f7ff ff65 	bl	80070b4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80071ea:	2801      	cmp	r0, #1
 80071ec:	d90e      	bls.n	800720c <find_volume+0xcc>
 80071ee:	3504      	adds	r5, #4
 80071f0:	2d10      	cmp	r5, #16
 80071f2:	d1f1      	bne.n	80071d8 <find_volume+0x98>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80071f4:	2301      	movs	r3, #1
 80071f6:	2804      	cmp	r0, #4
 80071f8:	d105      	bne.n	8007206 <find_volume+0xc6>
 80071fa:	e7c3      	b.n	8007184 <find_volume+0x44>
 80071fc:	2301      	movs	r3, #1
 80071fe:	2804      	cmp	r0, #4
 8007200:	d0c0      	beq.n	8007184 <find_volume+0x44>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007202:	4298      	cmp	r0, r3
 8007204:	d901      	bls.n	800720a <find_volume+0xca>
 8007206:	230d      	movs	r3, #13
 8007208:	e7bc      	b.n	8007184 <find_volume+0x44>
	bsect = 0;
 800720a:	2700      	movs	r7, #0
	rv = ptr[1];
 800720c:	0023      	movs	r3, r4
 800720e:	333c      	adds	r3, #60	; 0x3c
	rv = rv << 8 | ptr[0];
 8007210:	781a      	ldrb	r2, [r3, #0]
 8007212:	3b01      	subs	r3, #1
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	0212      	lsls	r2, r2, #8
 8007218:	4313      	orrs	r3, r2
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800721a:	2280      	movs	r2, #128	; 0x80
 800721c:	b21b      	sxth	r3, r3
 800721e:	0092      	lsls	r2, r2, #2
 8007220:	4293      	cmp	r3, r2
 8007222:	d1f0      	bne.n	8007206 <find_volume+0xc6>
	rv = ptr[1];
 8007224:	0023      	movs	r3, r4
 8007226:	3347      	adds	r3, #71	; 0x47
	rv = rv << 8 | ptr[0];
 8007228:	781a      	ldrb	r2, [r3, #0]
 800722a:	3b01      	subs	r3, #1
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	0212      	lsls	r2, r2, #8
 8007230:	4313      	orrs	r3, r2
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007232:	d100      	bne.n	8007236 <find_volume+0xf6>
 8007234:	e0c8      	b.n	80073c8 <find_volume+0x288>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007236:	9302      	str	r3, [sp, #8]
		fs->fsize = fasize;
 8007238:	9b02      	ldr	r3, [sp, #8]
 800723a:	61a3      	str	r3, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800723c:	0023      	movs	r3, r4
 800723e:	3340      	adds	r3, #64	; 0x40
 8007240:	781e      	ldrb	r6, [r3, #0]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007242:	1e73      	subs	r3, r6, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007244:	70a6      	strb	r6, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007246:	2b01      	cmp	r3, #1
 8007248:	d8dd      	bhi.n	8007206 <find_volume+0xc6>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800724a:	0023      	movs	r3, r4
 800724c:	333d      	adds	r3, #61	; 0x3d
 800724e:	781d      	ldrb	r5, [r3, #0]
 8007250:	b2ab      	uxth	r3, r5
 8007252:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007254:	2b00      	cmp	r3, #0
 8007256:	d0d6      	beq.n	8007206 <find_volume+0xc6>
 8007258:	1e6b      	subs	r3, r5, #1
 800725a:	421d      	tst	r5, r3
 800725c:	d1d3      	bne.n	8007206 <find_volume+0xc6>
	rv = ptr[1];
 800725e:	0023      	movs	r3, r4
	rv = rv << 8 | ptr[0];
 8007260:	0022      	movs	r2, r4
	rv = ptr[1];
 8007262:	3342      	adds	r3, #66	; 0x42
	rv = rv << 8 | ptr[0];
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	3241      	adds	r2, #65	; 0x41
 8007268:	7812      	ldrb	r2, [r2, #0]
 800726a:	021b      	lsls	r3, r3, #8
 800726c:	431a      	orrs	r2, r3
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800726e:	466b      	mov	r3, sp
	rv = rv << 8 | ptr[0];
 8007270:	9201      	str	r2, [sp, #4]
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007272:	889b      	ldrh	r3, [r3, #4]
 8007274:	8123      	strh	r3, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007276:	0013      	movs	r3, r2
 8007278:	071b      	lsls	r3, r3, #28
 800727a:	d1c4      	bne.n	8007206 <find_volume+0xc6>
	rv = ptr[1];
 800727c:	0023      	movs	r3, r4
 800727e:	3344      	adds	r3, #68	; 0x44
	rv = rv << 8 | ptr[0];
 8007280:	7818      	ldrb	r0, [r3, #0]
 8007282:	3b01      	subs	r3, #1
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	0200      	lsls	r0, r0, #8
 8007288:	4318      	orrs	r0, r3
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800728a:	d103      	bne.n	8007294 <find_volume+0x154>
 800728c:	0020      	movs	r0, r4
 800728e:	3050      	adds	r0, #80	; 0x50
 8007290:	f7ff fd58 	bl	8006d44 <ld_dword>
	rv = ptr[1];
 8007294:	0023      	movs	r3, r4
	rv = rv << 8 | ptr[0];
 8007296:	0022      	movs	r2, r4
	rv = ptr[1];
 8007298:	333f      	adds	r3, #63	; 0x3f
	rv = rv << 8 | ptr[0];
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	323e      	adds	r2, #62	; 0x3e
 800729e:	7812      	ldrb	r2, [r2, #0]
 80072a0:	021b      	lsls	r3, r3, #8
 80072a2:	431a      	orrs	r2, r3
 80072a4:	9204      	str	r2, [sp, #16]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80072a6:	d0ae      	beq.n	8007206 <find_volume+0xc6>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80072a8:	9b02      	ldr	r3, [sp, #8]
 80072aa:	4373      	muls	r3, r6
 80072ac:	9305      	str	r3, [sp, #20]
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80072ae:	9b01      	ldr	r3, [sp, #4]
 80072b0:	091b      	lsrs	r3, r3, #4
 80072b2:	189b      	adds	r3, r3, r2
 80072b4:	9a05      	ldr	r2, [sp, #20]
 80072b6:	189b      	adds	r3, r3, r2
 80072b8:	9303      	str	r3, [sp, #12]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80072ba:	4298      	cmp	r0, r3
 80072bc:	d3a3      	bcc.n	8007206 <find_volume+0xc6>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80072be:	1ac0      	subs	r0, r0, r3
 80072c0:	0029      	movs	r1, r5
 80072c2:	f7f8 ff4d 	bl	8000160 <__udivsi3>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80072c6:	2800      	cmp	r0, #0
 80072c8:	d09d      	beq.n	8007206 <find_volume+0xc6>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80072ca:	4b4c      	ldr	r3, [pc, #304]	; (80073fc <find_volume+0x2bc>)
		fmt = FS_FAT32;
 80072cc:	2603      	movs	r6, #3
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80072ce:	4298      	cmp	r0, r3
 80072d0:	d804      	bhi.n	80072dc <find_volume+0x19c>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80072d2:	4e4b      	ldr	r6, [pc, #300]	; (8007400 <find_volume+0x2c0>)
 80072d4:	4286      	cmp	r6, r0
 80072d6:	41b6      	sbcs	r6, r6
 80072d8:	4276      	negs	r6, r6
 80072da:	3601      	adds	r6, #1
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80072dc:	9b04      	ldr	r3, [sp, #16]
		fs->database = bsect + sysect;					/* Data start sector */
 80072de:	9a03      	ldr	r2, [sp, #12]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80072e0:	1c85      	adds	r5, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80072e2:	18fb      	adds	r3, r7, r3
		fs->database = bsect + sysect;					/* Data start sector */
 80072e4:	18ba      	adds	r2, r7, r2
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80072e6:	6165      	str	r5, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80072e8:	61e7      	str	r7, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80072ea:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80072ec:	62a2      	str	r2, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80072ee:	2e03      	cmp	r6, #3
 80072f0:	d170      	bne.n	80073d4 <find_volume+0x294>
	rv = ptr[1];
 80072f2:	0023      	movs	r3, r4
 80072f4:	335b      	adds	r3, #91	; 0x5b
	rv = rv << 8 | ptr[0];
 80072f6:	781a      	ldrb	r2, [r3, #0]
 80072f8:	3b01      	subs	r3, #1
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	0212      	lsls	r2, r2, #8
 80072fe:	4313      	orrs	r3, r2
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007300:	d000      	beq.n	8007304 <find_volume+0x1c4>
 8007302:	e780      	b.n	8007206 <find_volume+0xc6>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007304:	9b01      	ldr	r3, [sp, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d000      	beq.n	800730c <find_volume+0x1cc>
 800730a:	e77c      	b.n	8007206 <find_volume+0xc6>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800730c:	0020      	movs	r0, r4
 800730e:	305c      	adds	r0, #92	; 0x5c
 8007310:	f7ff fd18 	bl	8006d44 <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007314:	00ad      	lsls	r5, r5, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007316:	6260      	str	r0, [r4, #36]	; 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007318:	4b3a      	ldr	r3, [pc, #232]	; (8007404 <find_volume+0x2c4>)
 800731a:	18ed      	adds	r5, r5, r3
 800731c:	9b02      	ldr	r3, [sp, #8]
 800731e:	0a6d      	lsrs	r5, r5, #9
 8007320:	42ab      	cmp	r3, r5
 8007322:	d200      	bcs.n	8007326 <find_volume+0x1e6>
 8007324:	e76f      	b.n	8007206 <find_volume+0xc6>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007326:	2301      	movs	r3, #1
 8007328:	425b      	negs	r3, r3
 800732a:	6123      	str	r3, [r4, #16]
 800732c:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
 800732e:	3381      	adds	r3, #129	; 0x81
 8007330:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007332:	2e03      	cmp	r6, #3
 8007334:	d134      	bne.n	80073a0 <find_volume+0x260>
	rv = ptr[1];
 8007336:	0023      	movs	r3, r4
 8007338:	3361      	adds	r3, #97	; 0x61
	rv = rv << 8 | ptr[0];
 800733a:	781a      	ldrb	r2, [r3, #0]
 800733c:	3b01      	subs	r3, #1
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	0212      	lsls	r2, r2, #8
 8007342:	4313      	orrs	r3, r2
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007344:	2b01      	cmp	r3, #1
 8007346:	d12b      	bne.n	80073a0 <find_volume+0x260>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007348:	1c79      	adds	r1, r7, #1
 800734a:	0020      	movs	r0, r4
 800734c:	f7ff fe98 	bl	8007080 <move_window>
 8007350:	2800      	cmp	r0, #0
 8007352:	d125      	bne.n	80073a0 <find_volume+0x260>
	rv = ptr[1];
 8007354:	4b2c      	ldr	r3, [pc, #176]	; (8007408 <find_volume+0x2c8>)
			fs->fsi_flag = 0;
 8007356:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8007358:	5ce2      	ldrb	r2, [r4, r3]
 800735a:	4b2c      	ldr	r3, [pc, #176]	; (800740c <find_volume+0x2cc>)
 800735c:	0212      	lsls	r2, r2, #8
 800735e:	5ce3      	ldrb	r3, [r4, r3]
 8007360:	4313      	orrs	r3, r2
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007362:	4a2b      	ldr	r2, [pc, #172]	; (8007410 <find_volume+0x2d0>)
 8007364:	b21b      	sxth	r3, r3
 8007366:	4293      	cmp	r3, r2
 8007368:	d11a      	bne.n	80073a0 <find_volume+0x260>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800736a:	0020      	movs	r0, r4
 800736c:	3030      	adds	r0, #48	; 0x30
 800736e:	f7ff fce9 	bl	8006d44 <ld_dword>
 8007372:	4b28      	ldr	r3, [pc, #160]	; (8007414 <find_volume+0x2d4>)
 8007374:	4298      	cmp	r0, r3
 8007376:	d113      	bne.n	80073a0 <find_volume+0x260>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007378:	2385      	movs	r3, #133	; 0x85
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	18e0      	adds	r0, r4, r3
 800737e:	f7ff fce1 	bl	8006d44 <ld_dword>
 8007382:	4b25      	ldr	r3, [pc, #148]	; (8007418 <find_volume+0x2d8>)
 8007384:	4298      	cmp	r0, r3
 8007386:	d10b      	bne.n	80073a0 <find_volume+0x260>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007388:	2386      	movs	r3, #134	; 0x86
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	18e0      	adds	r0, r4, r3
 800738e:	f7ff fcd9 	bl	8006d44 <ld_dword>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007392:	2387      	movs	r3, #135	; 0x87
 8007394:	009b      	lsls	r3, r3, #2
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007396:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007398:	18e0      	adds	r0, r4, r3
 800739a:	f7ff fcd3 	bl	8006d44 <ld_dword>
 800739e:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;		/* File system mount ID */
 80073a0:	4a1e      	ldr	r2, [pc, #120]	; (800741c <find_volume+0x2dc>)
	fs->fs_type = fmt;		/* FAT sub-type */
 80073a2:	7026      	strb	r6, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80073a4:	8813      	ldrh	r3, [r2, #0]
 80073a6:	3301      	adds	r3, #1
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	8013      	strh	r3, [r2, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80073ac:	4a1c      	ldr	r2, [pc, #112]	; (8007420 <find_volume+0x2e0>)
	fs->id = ++Fsid;		/* File system mount ID */
 80073ae:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80073b0:	6813      	ldr	r3, [r2, #0]
 80073b2:	429c      	cmp	r4, r3
 80073b4:	d101      	bne.n	80073ba <find_volume+0x27a>
 80073b6:	2300      	movs	r3, #0
 80073b8:	6013      	str	r3, [r2, #0]
 80073ba:	6911      	ldr	r1, [r2, #16]
 80073bc:	2300      	movs	r3, #0
 80073be:	428c      	cmp	r4, r1
 80073c0:	d000      	beq.n	80073c4 <find_volume+0x284>
 80073c2:	e6df      	b.n	8007184 <find_volume+0x44>
 80073c4:	6113      	str	r3, [r2, #16]
 80073c6:	e6dd      	b.n	8007184 <find_volume+0x44>
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80073c8:	0020      	movs	r0, r4
 80073ca:	3054      	adds	r0, #84	; 0x54
 80073cc:	f7ff fcba 	bl	8006d44 <ld_dword>
 80073d0:	9002      	str	r0, [sp, #8]
 80073d2:	e731      	b.n	8007238 <find_volume+0xf8>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80073d4:	9a01      	ldr	r2, [sp, #4]
 80073d6:	2a00      	cmp	r2, #0
 80073d8:	d100      	bne.n	80073dc <find_volume+0x29c>
 80073da:	e714      	b.n	8007206 <find_volume+0xc6>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80073dc:	9a05      	ldr	r2, [sp, #20]
 80073de:	18d3      	adds	r3, r2, r3
 80073e0:	6263      	str	r3, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80073e2:	2e02      	cmp	r6, #2
 80073e4:	d101      	bne.n	80073ea <find_volume+0x2aa>
 80073e6:	006d      	lsls	r5, r5, #1
 80073e8:	e796      	b.n	8007318 <find_volume+0x1d8>
 80073ea:	2003      	movs	r0, #3
 80073ec:	2301      	movs	r3, #1
 80073ee:	4368      	muls	r0, r5
 80073f0:	401d      	ands	r5, r3
 80073f2:	0840      	lsrs	r0, r0, #1
 80073f4:	1945      	adds	r5, r0, r5
 80073f6:	e78f      	b.n	8007318 <find_volume+0x1d8>
 80073f8:	200014e8 	.word	0x200014e8
 80073fc:	0000fff5 	.word	0x0000fff5
 8007400:	00000ff5 	.word	0x00000ff5
 8007404:	000001ff 	.word	0x000001ff
 8007408:	0000022f 	.word	0x0000022f
 800740c:	0000022e 	.word	0x0000022e
 8007410:	ffffaa55 	.word	0xffffaa55
 8007414:	41615252 	.word	0x41615252
 8007418:	61417272 	.word	0x61417272
 800741c:	2000150c 	.word	0x2000150c
 8007420:	200014ec 	.word	0x200014ec

08007424 <put_fat>:
{
 8007424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007426:	0006      	movs	r6, r0
 8007428:	b085      	sub	sp, #20
 800742a:	000c      	movs	r4, r1
 800742c:	0015      	movs	r5, r2
	FRESULT res = FR_INT_ERR;
 800742e:	2702      	movs	r7, #2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007430:	2901      	cmp	r1, #1
 8007432:	d945      	bls.n	80074c0 <put_fat+0x9c>
 8007434:	6943      	ldr	r3, [r0, #20]
 8007436:	4299      	cmp	r1, r3
 8007438:	d242      	bcs.n	80074c0 <put_fat+0x9c>
		switch (fs->fs_type) {
 800743a:	7803      	ldrb	r3, [r0, #0]
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	42bb      	cmp	r3, r7
 8007440:	d048      	beq.n	80074d4 <put_fat+0xb0>
 8007442:	2b03      	cmp	r3, #3
 8007444:	d058      	beq.n	80074f8 <put_fat+0xd4>
 8007446:	2b01      	cmp	r3, #1
 8007448:	d13a      	bne.n	80074c0 <put_fat+0x9c>
			bc = (UINT)clst; bc += bc / 2;
 800744a:	084b      	lsrs	r3, r1, #1
 800744c:	185b      	adds	r3, r3, r1
 800744e:	9301      	str	r3, [sp, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007450:	0a59      	lsrs	r1, r3, #9
 8007452:	6a03      	ldr	r3, [r0, #32]
 8007454:	18c9      	adds	r1, r1, r3
 8007456:	f7ff fe13 	bl	8007080 <move_window>
 800745a:	1e07      	subs	r7, r0, #0
			if (res != FR_OK) break;
 800745c:	d130      	bne.n	80074c0 <put_fat+0x9c>
			p = fs->win + bc++ % SS(fs);
 800745e:	0033      	movs	r3, r6
 8007460:	3330      	adds	r3, #48	; 0x30
 8007462:	9302      	str	r3, [sp, #8]
 8007464:	9b01      	ldr	r3, [sp, #4]
 8007466:	9a02      	ldr	r2, [sp, #8]
 8007468:	3301      	adds	r3, #1
 800746a:	9303      	str	r3, [sp, #12]
 800746c:	9b01      	ldr	r3, [sp, #4]
 800746e:	05db      	lsls	r3, r3, #23
 8007470:	0ddb      	lsrs	r3, r3, #23
 8007472:	18d3      	adds	r3, r2, r3
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007474:	9a00      	ldr	r2, [sp, #0]
 8007476:	4014      	ands	r4, r2
 8007478:	b2ea      	uxtb	r2, r5
 800747a:	2c00      	cmp	r4, #0
 800747c:	d008      	beq.n	8007490 <put_fat+0x6c>
 800747e:	210f      	movs	r1, #15
 8007480:	20ff      	movs	r0, #255	; 0xff
 8007482:	781a      	ldrb	r2, [r3, #0]
 8007484:	0100      	lsls	r0, r0, #4
 8007486:	400a      	ands	r2, r1
 8007488:	0129      	lsls	r1, r5, #4
 800748a:	4001      	ands	r1, r0
 800748c:	430a      	orrs	r2, r1
 800748e:	b2d2      	uxtb	r2, r2
 8007490:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8007492:	2301      	movs	r3, #1
 8007494:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007496:	9b03      	ldr	r3, [sp, #12]
 8007498:	0030      	movs	r0, r6
 800749a:	0a59      	lsrs	r1, r3, #9
 800749c:	6a33      	ldr	r3, [r6, #32]
 800749e:	18c9      	adds	r1, r1, r3
 80074a0:	f7ff fdee 	bl	8007080 <move_window>
 80074a4:	1e07      	subs	r7, r0, #0
			if (res != FR_OK) break;
 80074a6:	d10b      	bne.n	80074c0 <put_fat+0x9c>
			p = fs->win + bc % SS(fs);
 80074a8:	9b03      	ldr	r3, [sp, #12]
 80074aa:	05da      	lsls	r2, r3, #23
 80074ac:	9b02      	ldr	r3, [sp, #8]
 80074ae:	0dd2      	lsrs	r2, r2, #23
 80074b0:	189a      	adds	r2, r3, r2
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80074b2:	2c00      	cmp	r4, #0
 80074b4:	d007      	beq.n	80074c6 <put_fat+0xa2>
 80074b6:	092d      	lsrs	r5, r5, #4
 80074b8:	b2ed      	uxtb	r5, r5
 80074ba:	7015      	strb	r5, [r2, #0]
			fs->wflag = 1;
 80074bc:	2301      	movs	r3, #1
 80074be:	70f3      	strb	r3, [r6, #3]
}
 80074c0:	0038      	movs	r0, r7
 80074c2:	b005      	add	sp, #20
 80074c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80074c6:	210f      	movs	r1, #15
 80074c8:	7813      	ldrb	r3, [r2, #0]
 80074ca:	0a2d      	lsrs	r5, r5, #8
 80074cc:	438b      	bics	r3, r1
 80074ce:	400d      	ands	r5, r1
 80074d0:	431d      	orrs	r5, r3
 80074d2:	e7f2      	b.n	80074ba <put_fat+0x96>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80074d4:	6a03      	ldr	r3, [r0, #32]
 80074d6:	0a09      	lsrs	r1, r1, #8
 80074d8:	18c9      	adds	r1, r1, r3
 80074da:	f7ff fdd1 	bl	8007080 <move_window>
 80074de:	1e07      	subs	r7, r0, #0
			if (res != FR_OK) break;
 80074e0:	d1ee      	bne.n	80074c0 <put_fat+0x9c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80074e2:	22ff      	movs	r2, #255	; 0xff
 80074e4:	0033      	movs	r3, r6
 80074e6:	0064      	lsls	r4, r4, #1
 80074e8:	0052      	lsls	r2, r2, #1
 80074ea:	3330      	adds	r3, #48	; 0x30
 80074ec:	4014      	ands	r4, r2
 80074ee:	191c      	adds	r4, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 80074f0:	7025      	strb	r5, [r4, #0]
 80074f2:	0a2d      	lsrs	r5, r5, #8
	*ptr++ = (BYTE)val;
 80074f4:	7065      	strb	r5, [r4, #1]
 80074f6:	e7e1      	b.n	80074bc <put_fat+0x98>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80074f8:	6a03      	ldr	r3, [r0, #32]
 80074fa:	09c9      	lsrs	r1, r1, #7
 80074fc:	18c9      	adds	r1, r1, r3
 80074fe:	f7ff fdbf 	bl	8007080 <move_window>
 8007502:	1e07      	subs	r7, r0, #0
			if (res != FR_OK) break;
 8007504:	d1dc      	bne.n	80074c0 <put_fat+0x9c>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007506:	22fe      	movs	r2, #254	; 0xfe
 8007508:	0033      	movs	r3, r6
 800750a:	0052      	lsls	r2, r2, #1
 800750c:	00a4      	lsls	r4, r4, #2
 800750e:	3330      	adds	r3, #48	; 0x30
 8007510:	4014      	ands	r4, r2
 8007512:	191c      	adds	r4, r3, r4
 8007514:	0020      	movs	r0, r4
 8007516:	f7ff fc15 	bl	8006d44 <ld_dword>
 800751a:	0129      	lsls	r1, r5, #4
 800751c:	0f00      	lsrs	r0, r0, #28
 800751e:	0700      	lsls	r0, r0, #28
 8007520:	0909      	lsrs	r1, r1, #4
 8007522:	4301      	orrs	r1, r0
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007524:	0020      	movs	r0, r4
 8007526:	f7ff fc18 	bl	8006d5a <st_dword>
 800752a:	e7c7      	b.n	80074bc <put_fat+0x98>

0800752c <get_fat.isra.8>:
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800752c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		val = 1;	/* Internal error */
 800752e:	2601      	movs	r6, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8007530:	0004      	movs	r4, r0
 8007532:	000d      	movs	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007534:	42b1      	cmp	r1, r6
 8007536:	d914      	bls.n	8007562 <get_fat.isra.8+0x36>
 8007538:	6943      	ldr	r3, [r0, #20]
 800753a:	4299      	cmp	r1, r3
 800753c:	d211      	bcs.n	8007562 <get_fat.isra.8+0x36>
		switch (fs->fs_type) {
 800753e:	7803      	ldrb	r3, [r0, #0]
 8007540:	2b02      	cmp	r3, #2
 8007542:	d02e      	beq.n	80075a2 <get_fat.isra.8+0x76>
 8007544:	2b03      	cmp	r3, #3
 8007546:	d03e      	beq.n	80075c6 <get_fat.isra.8+0x9a>
 8007548:	42b3      	cmp	r3, r6
 800754a:	d10a      	bne.n	8007562 <get_fat.isra.8+0x36>
			bc = (UINT)clst; bc += bc / 2;
 800754c:	084f      	lsrs	r7, r1, #1
 800754e:	187f      	adds	r7, r7, r1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007550:	6a03      	ldr	r3, [r0, #32]
 8007552:	0a79      	lsrs	r1, r7, #9
 8007554:	18c9      	adds	r1, r1, r3
 8007556:	f7ff fd93 	bl	8007080 <move_window>
 800755a:	2800      	cmp	r0, #0
 800755c:	d003      	beq.n	8007566 <get_fat.isra.8+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800755e:	2601      	movs	r6, #1
 8007560:	4276      	negs	r6, r6
}
 8007562:	0030      	movs	r0, r6
 8007564:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8007566:	1c7b      	adds	r3, r7, #1
 8007568:	05ff      	lsls	r7, r7, #23
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800756a:	0a59      	lsrs	r1, r3, #9
			wc = fs->win[bc++ % SS(fs)];
 800756c:	9301      	str	r3, [sp, #4]
 800756e:	0dff      	lsrs	r7, r7, #23
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007570:	6a23      	ldr	r3, [r4, #32]
			wc = fs->win[bc++ % SS(fs)];
 8007572:	19e7      	adds	r7, r4, r7
 8007574:	3730      	adds	r7, #48	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007576:	18c9      	adds	r1, r1, r3
 8007578:	0020      	movs	r0, r4
			wc = fs->win[bc++ % SS(fs)];
 800757a:	783f      	ldrb	r7, [r7, #0]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800757c:	f7ff fd80 	bl	8007080 <move_window>
 8007580:	2800      	cmp	r0, #0
 8007582:	d1ec      	bne.n	800755e <get_fat.isra.8+0x32>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007584:	9b01      	ldr	r3, [sp, #4]
 8007586:	05d8      	lsls	r0, r3, #23
 8007588:	0dc0      	lsrs	r0, r0, #23
 800758a:	1824      	adds	r4, r4, r0
 800758c:	3430      	adds	r4, #48	; 0x30
 800758e:	7820      	ldrb	r0, [r4, #0]
 8007590:	0200      	lsls	r0, r0, #8
 8007592:	4307      	orrs	r7, r0
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007594:	4235      	tst	r5, r6
 8007596:	d001      	beq.n	800759c <get_fat.isra.8+0x70>
 8007598:	093e      	lsrs	r6, r7, #4
 800759a:	e7e2      	b.n	8007562 <get_fat.isra.8+0x36>
 800759c:	053f      	lsls	r7, r7, #20
 800759e:	0d3e      	lsrs	r6, r7, #20
 80075a0:	e7df      	b.n	8007562 <get_fat.isra.8+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80075a2:	6a03      	ldr	r3, [r0, #32]
 80075a4:	0a09      	lsrs	r1, r1, #8
 80075a6:	18c9      	adds	r1, r1, r3
 80075a8:	f7ff fd6a 	bl	8007080 <move_window>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	d1d6      	bne.n	800755e <get_fat.isra.8+0x32>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80075b0:	30ff      	adds	r0, #255	; 0xff
 80075b2:	30ff      	adds	r0, #255	; 0xff
 80075b4:	006d      	lsls	r5, r5, #1
 80075b6:	4005      	ands	r5, r0
 80075b8:	3430      	adds	r4, #48	; 0x30
 80075ba:	1964      	adds	r4, r4, r5
	rv = rv << 8 | ptr[0];
 80075bc:	7866      	ldrb	r6, [r4, #1]
 80075be:	7820      	ldrb	r0, [r4, #0]
 80075c0:	0236      	lsls	r6, r6, #8
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80075c2:	4306      	orrs	r6, r0
 80075c4:	e7cd      	b.n	8007562 <get_fat.isra.8+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80075c6:	6a03      	ldr	r3, [r0, #32]
 80075c8:	09c9      	lsrs	r1, r1, #7
 80075ca:	18c9      	adds	r1, r1, r3
 80075cc:	f7ff fd58 	bl	8007080 <move_window>
 80075d0:	2800      	cmp	r0, #0
 80075d2:	d1c4      	bne.n	800755e <get_fat.isra.8+0x32>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80075d4:	0020      	movs	r0, r4
 80075d6:	24fe      	movs	r4, #254	; 0xfe
 80075d8:	00ad      	lsls	r5, r5, #2
 80075da:	0064      	lsls	r4, r4, #1
 80075dc:	3030      	adds	r0, #48	; 0x30
 80075de:	4025      	ands	r5, r4
 80075e0:	1940      	adds	r0, r0, r5
 80075e2:	f7ff fbaf 	bl	8006d44 <ld_dword>
 80075e6:	0106      	lsls	r6, r0, #4
 80075e8:	0936      	lsrs	r6, r6, #4
 80075ea:	e7ba      	b.n	8007562 <get_fat.isra.8+0x36>

080075ec <create_chain>:
{
 80075ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075ee:	1e0f      	subs	r7, r1, #0
 80075f0:	9001      	str	r0, [sp, #4]
	FATFS *fs = obj->fs;
 80075f2:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 80075f4:	d107      	bne.n	8007606 <create_chain+0x1a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80075f6:	68ee      	ldr	r6, [r5, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80075f8:	2e00      	cmp	r6, #0
 80075fa:	d002      	beq.n	8007602 <create_chain+0x16>
 80075fc:	696b      	ldr	r3, [r5, #20]
 80075fe:	429e      	cmp	r6, r3
 8007600:	d311      	bcc.n	8007626 <create_chain+0x3a>
 8007602:	2601      	movs	r6, #1
 8007604:	e00f      	b.n	8007626 <create_chain+0x3a>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007606:	0028      	movs	r0, r5
 8007608:	f7ff ff90 	bl	800752c <get_fat.isra.8>
 800760c:	0004      	movs	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800760e:	2801      	cmp	r0, #1
 8007610:	d93f      	bls.n	8007692 <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007612:	1c43      	adds	r3, r0, #1
 8007614:	d103      	bne.n	800761e <create_chain+0x32>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007616:	2401      	movs	r4, #1
 8007618:	4264      	negs	r4, r4
}
 800761a:	0020      	movs	r0, r4
 800761c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800761e:	696b      	ldr	r3, [r5, #20]
 8007620:	003e      	movs	r6, r7
 8007622:	4298      	cmp	r0, r3
 8007624:	d3f9      	bcc.n	800761a <create_chain+0x2e>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007626:	0034      	movs	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007628:	696b      	ldr	r3, [r5, #20]
			ncl++;							/* Next cluster */
 800762a:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800762c:	429c      	cmp	r4, r3
 800762e:	d304      	bcc.n	800763a <create_chain+0x4e>
				if (ncl > scl) return 0;	/* No free cluster */
 8007630:	2e01      	cmp	r6, #1
 8007632:	d801      	bhi.n	8007638 <create_chain+0x4c>
 8007634:	2400      	movs	r4, #0
 8007636:	e7f0      	b.n	800761a <create_chain+0x2e>
				ncl = 2;
 8007638:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800763a:	9b01      	ldr	r3, [sp, #4]
 800763c:	0021      	movs	r1, r4
 800763e:	6818      	ldr	r0, [r3, #0]
 8007640:	f7ff ff74 	bl	800752c <get_fat.isra.8>
			if (cs == 0) break;				/* Found a free cluster */
 8007644:	2800      	cmp	r0, #0
 8007646:	d006      	beq.n	8007656 <create_chain+0x6a>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007648:	2801      	cmp	r0, #1
 800764a:	d022      	beq.n	8007692 <create_chain+0xa6>
 800764c:	1c43      	adds	r3, r0, #1
 800764e:	d0e2      	beq.n	8007616 <create_chain+0x2a>
			if (ncl == scl) return 0;		/* No free cluster */
 8007650:	42b4      	cmp	r4, r6
 8007652:	d1e9      	bne.n	8007628 <create_chain+0x3c>
 8007654:	e7ee      	b.n	8007634 <create_chain+0x48>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007656:	2201      	movs	r2, #1
 8007658:	0021      	movs	r1, r4
 800765a:	4252      	negs	r2, r2
 800765c:	0028      	movs	r0, r5
 800765e:	f7ff fee1 	bl	8007424 <put_fat>
		if (res == FR_OK && clst != 0) {
 8007662:	2800      	cmp	r0, #0
 8007664:	d113      	bne.n	800768e <create_chain+0xa2>
 8007666:	2f00      	cmp	r7, #0
 8007668:	d10a      	bne.n	8007680 <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800766a:	696a      	ldr	r2, [r5, #20]
 800766c:	692b      	ldr	r3, [r5, #16]
 800766e:	3a02      	subs	r2, #2
		fs->last_clst = ncl;
 8007670:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007672:	4293      	cmp	r3, r2
 8007674:	d90f      	bls.n	8007696 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 8007676:	2301      	movs	r3, #1
 8007678:	792a      	ldrb	r2, [r5, #4]
 800767a:	4313      	orrs	r3, r2
 800767c:	712b      	strb	r3, [r5, #4]
 800767e:	e7cc      	b.n	800761a <create_chain+0x2e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007680:	0022      	movs	r2, r4
 8007682:	0039      	movs	r1, r7
 8007684:	0028      	movs	r0, r5
 8007686:	f7ff fecd 	bl	8007424 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800768a:	2800      	cmp	r0, #0
 800768c:	d0ed      	beq.n	800766a <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800768e:	2801      	cmp	r0, #1
 8007690:	d0c1      	beq.n	8007616 <create_chain+0x2a>
 8007692:	2401      	movs	r4, #1
 8007694:	e7c1      	b.n	800761a <create_chain+0x2e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007696:	3b01      	subs	r3, #1
 8007698:	612b      	str	r3, [r5, #16]
 800769a:	e7ec      	b.n	8007676 <create_chain+0x8a>

0800769c <remove_chain>:
{
 800769c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769e:	000d      	movs	r5, r1
 80076a0:	0007      	movs	r7, r0
 80076a2:	0011      	movs	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80076a4:	2d01      	cmp	r5, #1
 80076a6:	d801      	bhi.n	80076ac <remove_chain+0x10>
 80076a8:	2002      	movs	r0, #2
}
 80076aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS *fs = obj->fs;
 80076ac:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80076ae:	6963      	ldr	r3, [r4, #20]
 80076b0:	429d      	cmp	r5, r3
 80076b2:	d2f9      	bcs.n	80076a8 <remove_chain+0xc>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80076b4:	2a00      	cmp	r2, #0
 80076b6:	d006      	beq.n	80076c6 <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80076b8:	2201      	movs	r2, #1
 80076ba:	0020      	movs	r0, r4
 80076bc:	4252      	negs	r2, r2
 80076be:	f7ff feb1 	bl	8007424 <put_fat>
		if (res != FR_OK) return res;
 80076c2:	2800      	cmp	r0, #0
 80076c4:	d1f1      	bne.n	80076aa <remove_chain+0xe>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80076c6:	0029      	movs	r1, r5
 80076c8:	6838      	ldr	r0, [r7, #0]
 80076ca:	f7ff ff2f 	bl	800752c <get_fat.isra.8>
 80076ce:	1e06      	subs	r6, r0, #0
		if (nxt == 0) break;				/* Empty cluster? */
 80076d0:	d101      	bne.n	80076d6 <remove_chain+0x3a>
	return FR_OK;
 80076d2:	2000      	movs	r0, #0
 80076d4:	e7e9      	b.n	80076aa <remove_chain+0xe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80076d6:	2801      	cmp	r0, #1
 80076d8:	d0e6      	beq.n	80076a8 <remove_chain+0xc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80076da:	1c43      	adds	r3, r0, #1
 80076dc:	d015      	beq.n	800770a <remove_chain+0x6e>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80076de:	2200      	movs	r2, #0
 80076e0:	0029      	movs	r1, r5
 80076e2:	0020      	movs	r0, r4
 80076e4:	f7ff fe9e 	bl	8007424 <put_fat>
			if (res != FR_OK) return res;
 80076e8:	2800      	cmp	r0, #0
 80076ea:	d1de      	bne.n	80076aa <remove_chain+0xe>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80076ec:	6962      	ldr	r2, [r4, #20]
 80076ee:	6923      	ldr	r3, [r4, #16]
 80076f0:	1e91      	subs	r1, r2, #2
 80076f2:	428b      	cmp	r3, r1
 80076f4:	d205      	bcs.n	8007702 <remove_chain+0x66>
			fs->fsi_flag |= 1;
 80076f6:	2101      	movs	r1, #1
			fs->free_clst++;
 80076f8:	3301      	adds	r3, #1
 80076fa:	6123      	str	r3, [r4, #16]
			fs->fsi_flag |= 1;
 80076fc:	7923      	ldrb	r3, [r4, #4]
 80076fe:	430b      	orrs	r3, r1
 8007700:	7123      	strb	r3, [r4, #4]
 8007702:	0035      	movs	r5, r6
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007704:	4296      	cmp	r6, r2
 8007706:	d3de      	bcc.n	80076c6 <remove_chain+0x2a>
 8007708:	e7e3      	b.n	80076d2 <remove_chain+0x36>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800770a:	2001      	movs	r0, #1
 800770c:	e7cd      	b.n	80076aa <remove_chain+0xe>

0800770e <dir_sdi.constprop.11>:
	dp->dptr = ofs;				/* Set current offset */
 800770e:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8007710:	b570      	push	{r4, r5, r6, lr}
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007712:	6885      	ldr	r5, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8007714:	0006      	movs	r6, r0
	FATFS *fs = dp->obj.fs;
 8007716:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8007718:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800771a:	429d      	cmp	r5, r3
 800771c:	d114      	bne.n	8007748 <dir_sdi.constprop.11+0x3a>
 800771e:	7823      	ldrb	r3, [r4, #0]
 8007720:	2b02      	cmp	r3, #2
 8007722:	d902      	bls.n	800772a <dir_sdi.constprop.11+0x1c>
		clst = fs->dirbase;
 8007724:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10f      	bne.n	800774a <dir_sdi.constprop.11+0x3c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800772a:	8923      	ldrh	r3, [r4, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <dir_sdi.constprop.11+0x26>
 8007730:	2002      	movs	r0, #2
}
 8007732:	bd70      	pop	{r4, r5, r6, pc}
		dp->sect = fs->dirbase;
 8007734:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007736:	61f3      	str	r3, [r6, #28]
	if (!dp->sect) return FR_INT_ERR;
 8007738:	69f3      	ldr	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 800773a:	61b5      	str	r5, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800773c:	2b00      	cmp	r3, #0
 800773e:	d0f7      	beq.n	8007730 <dir_sdi.constprop.11+0x22>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007740:	3430      	adds	r4, #48	; 0x30
 8007742:	6234      	str	r4, [r6, #32]
	return FR_OK;
 8007744:	2000      	movs	r0, #0
 8007746:	e7f4      	b.n	8007732 <dir_sdi.constprop.11+0x24>
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007748:	002b      	movs	r3, r5
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800774a:	8962      	ldrh	r2, [r4, #10]
 800774c:	001d      	movs	r5, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 800774e:	2a00      	cmp	r2, #0
 8007750:	d10c      	bne.n	800776c <dir_sdi.constprop.11+0x5e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007752:	0029      	movs	r1, r5
 8007754:	6830      	ldr	r0, [r6, #0]
 8007756:	f7ff fee9 	bl	800752c <get_fat.isra.8>
 800775a:	0005      	movs	r5, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800775c:	1c43      	adds	r3, r0, #1
 800775e:	d00b      	beq.n	8007778 <dir_sdi.constprop.11+0x6a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007760:	2801      	cmp	r0, #1
 8007762:	d9e5      	bls.n	8007730 <dir_sdi.constprop.11+0x22>
 8007764:	6963      	ldr	r3, [r4, #20]
 8007766:	4298      	cmp	r0, r3
 8007768:	d3f3      	bcc.n	8007752 <dir_sdi.constprop.11+0x44>
 800776a:	e7e1      	b.n	8007730 <dir_sdi.constprop.11+0x22>
		dp->sect = clust2sect(fs, clst);
 800776c:	0019      	movs	r1, r3
 800776e:	0020      	movs	r0, r4
 8007770:	f7ff fb8c 	bl	8006e8c <clust2sect>
 8007774:	61f0      	str	r0, [r6, #28]
 8007776:	e7df      	b.n	8007738 <dir_sdi.constprop.11+0x2a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007778:	2001      	movs	r0, #1
 800777a:	e7da      	b.n	8007732 <dir_sdi.constprop.11+0x24>

0800777c <dir_next>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800777c:	69c3      	ldr	r3, [r0, #28]
{
 800777e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007780:	0005      	movs	r5, r0
 8007782:	000f      	movs	r7, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007784:	2004      	movs	r0, #4
 8007786:	2b00      	cmp	r3, #0
 8007788:	d018      	beq.n	80077bc <dir_next+0x40>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800778a:	696a      	ldr	r2, [r5, #20]
 800778c:	3220      	adds	r2, #32
 800778e:	9200      	str	r2, [sp, #0]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007790:	9900      	ldr	r1, [sp, #0]
 8007792:	4a35      	ldr	r2, [pc, #212]	; (8007868 <dir_next+0xec>)
 8007794:	4291      	cmp	r1, r2
 8007796:	d811      	bhi.n	80077bc <dir_next+0x40>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007798:	05ca      	lsls	r2, r1, #23
 800779a:	0dd2      	lsrs	r2, r2, #23
	FATFS *fs = dp->obj.fs;
 800779c:	682c      	ldr	r4, [r5, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800779e:	9201      	str	r2, [sp, #4]
 80077a0:	d14d      	bne.n	800783e <dir_next+0xc2>
		if (!dp->clust) {		/* Static table */
 80077a2:	69a9      	ldr	r1, [r5, #24]
		dp->sect++;				/* Next sector */
 80077a4:	3301      	adds	r3, #1
 80077a6:	61eb      	str	r3, [r5, #28]
		if (!dp->clust) {		/* Static table */
 80077a8:	2900      	cmp	r1, #0
 80077aa:	d108      	bne.n	80077be <dir_next+0x42>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80077ac:	9b00      	ldr	r3, [sp, #0]
 80077ae:	8922      	ldrh	r2, [r4, #8]
 80077b0:	095b      	lsrs	r3, r3, #5
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d343      	bcc.n	800783e <dir_next+0xc2>
				dp->sect = 0; return FR_NO_FILE;
 80077b6:	2300      	movs	r3, #0
 80077b8:	2004      	movs	r0, #4
 80077ba:	61eb      	str	r3, [r5, #28]
}
 80077bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80077be:	8963      	ldrh	r3, [r4, #10]
 80077c0:	9a00      	ldr	r2, [sp, #0]
 80077c2:	3b01      	subs	r3, #1
 80077c4:	0a52      	lsrs	r2, r2, #9
 80077c6:	421a      	tst	r2, r3
 80077c8:	d139      	bne.n	800783e <dir_next+0xc2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80077ca:	0020      	movs	r0, r4
 80077cc:	f7ff feae 	bl	800752c <get_fat.isra.8>
 80077d0:	0006      	movs	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80077d2:	2801      	cmp	r0, #1
 80077d4:	d801      	bhi.n	80077da <dir_next+0x5e>
 80077d6:	2002      	movs	r0, #2
 80077d8:	e7f0      	b.n	80077bc <dir_next+0x40>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80077da:	1c43      	adds	r3, r0, #1
 80077dc:	d101      	bne.n	80077e2 <dir_next+0x66>
 80077de:	2001      	movs	r0, #1
 80077e0:	e7ec      	b.n	80077bc <dir_next+0x40>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80077e2:	6963      	ldr	r3, [r4, #20]
 80077e4:	4298      	cmp	r0, r3
 80077e6:	d324      	bcc.n	8007832 <dir_next+0xb6>
					if (!stretch) {								/* If no stretch, report EOT */
 80077e8:	2f00      	cmp	r7, #0
 80077ea:	d0e4      	beq.n	80077b6 <dir_next+0x3a>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80077ec:	69a9      	ldr	r1, [r5, #24]
 80077ee:	0028      	movs	r0, r5
 80077f0:	f7ff fefc 	bl	80075ec <create_chain>
 80077f4:	0006      	movs	r6, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80077f6:	2007      	movs	r0, #7
 80077f8:	2e00      	cmp	r6, #0
 80077fa:	d0df      	beq.n	80077bc <dir_next+0x40>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80077fc:	2e01      	cmp	r6, #1
 80077fe:	d0ea      	beq.n	80077d6 <dir_next+0x5a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007800:	1c73      	adds	r3, r6, #1
 8007802:	d0ec      	beq.n	80077de <dir_next+0x62>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007804:	0020      	movs	r0, r4
 8007806:	f7ff fbd9 	bl	8006fbc <sync_window>
 800780a:	1e07      	subs	r7, r0, #0
 800780c:	d1e7      	bne.n	80077de <dir_next+0x62>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800780e:	0001      	movs	r1, r0
 8007810:	2280      	movs	r2, #128	; 0x80
 8007812:	0020      	movs	r0, r4
 8007814:	0092      	lsls	r2, r2, #2
 8007816:	3030      	adds	r0, #48	; 0x30
 8007818:	f7ff faa7 	bl	8006d6a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800781c:	0031      	movs	r1, r6
 800781e:	0020      	movs	r0, r4
 8007820:	f7ff fb34 	bl	8006e8c <clust2sect>
 8007824:	62e0      	str	r0, [r4, #44]	; 0x2c
 8007826:	8963      	ldrh	r3, [r4, #10]
 8007828:	429f      	cmp	r7, r3
 800782a:	d310      	bcc.n	800784e <dir_next+0xd2>
					fs->winsect -= n;							/* Restore window offset */
 800782c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800782e:	1bdf      	subs	r7, r3, r7
 8007830:	62e7      	str	r7, [r4, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 8007832:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8007834:	0031      	movs	r1, r6
 8007836:	0020      	movs	r0, r4
 8007838:	f7ff fb28 	bl	8006e8c <clust2sect>
 800783c:	61e8      	str	r0, [r5, #28]
	dp->dptr = ofs;						/* Current entry */
 800783e:	9b00      	ldr	r3, [sp, #0]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007840:	3430      	adds	r4, #48	; 0x30
	dp->dptr = ofs;						/* Current entry */
 8007842:	616b      	str	r3, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007844:	9b01      	ldr	r3, [sp, #4]
	return FR_OK;
 8007846:	2000      	movs	r0, #0
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007848:	18e4      	adds	r4, r4, r3
 800784a:	622c      	str	r4, [r5, #32]
	return FR_OK;
 800784c:	e7b6      	b.n	80077bc <dir_next+0x40>
						fs->wflag = 1;
 800784e:	2301      	movs	r3, #1
 8007850:	0020      	movs	r0, r4
 8007852:	70e3      	strb	r3, [r4, #3]
 8007854:	f7ff fb8e 	bl	8006f74 <sync_window.part.4>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007858:	2800      	cmp	r0, #0
 800785a:	d1c0      	bne.n	80077de <dir_next+0x62>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800785c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800785e:	3701      	adds	r7, #1
 8007860:	3301      	adds	r3, #1
 8007862:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007864:	e7df      	b.n	8007826 <dir_next+0xaa>
 8007866:	46c0      	nop			; (mov r8, r8)
 8007868:	001fffff 	.word	0x001fffff

0800786c <follow_path>:
{
 800786c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800786e:	0004      	movs	r4, r0
 8007870:	000d      	movs	r5, r1
	FATFS *fs = obj->fs;
 8007872:	6803      	ldr	r3, [r0, #0]
 8007874:	9301      	str	r3, [sp, #4]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007876:	782b      	ldrb	r3, [r5, #0]
 8007878:	2b2f      	cmp	r3, #47	; 0x2f
 800787a:	d00e      	beq.n	800789a <follow_path+0x2e>
 800787c:	2b5c      	cmp	r3, #92	; 0x5c
 800787e:	d00c      	beq.n	800789a <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8007880:	2300      	movs	r3, #0
 8007882:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007884:	782b      	ldrb	r3, [r5, #0]
 8007886:	2b1f      	cmp	r3, #31
 8007888:	d83f      	bhi.n	800790a <follow_path+0x9e>
		dp->fn[NSFLAG] = NS_NONAME;
 800788a:	0023      	movs	r3, r4
 800788c:	2280      	movs	r2, #128	; 0x80
 800788e:	332f      	adds	r3, #47	; 0x2f
 8007890:	701a      	strb	r2, [r3, #0]
		res = dir_sdi(dp, 0);
 8007892:	0020      	movs	r0, r4
 8007894:	f7ff ff3b 	bl	800770e <dir_sdi.constprop.11>
}
 8007898:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800789a:	3501      	adds	r5, #1
 800789c:	e7eb      	b.n	8007876 <follow_path+0xa>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800789e:	3101      	adds	r1, #1
 80078a0:	e048      	b.n	8007934 <follow_path+0xc8>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80078a2:	2b2e      	cmp	r3, #46	; 0x2e
 80078a4:	d100      	bne.n	80078a8 <follow_path+0x3c>
 80078a6:	e082      	b.n	80079ae <follow_path+0x142>
 80078a8:	4290      	cmp	r0, r2
 80078aa:	d90d      	bls.n	80078c8 <follow_path+0x5c>
		if (c >= 0x80) {				/* Extended character? */
 80078ac:	b25e      	sxtb	r6, r3
 80078ae:	2e00      	cmp	r6, #0
 80078b0:	da02      	bge.n	80078b8 <follow_path+0x4c>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80078b2:	4666      	mov	r6, ip
 80078b4:	3b80      	subs	r3, #128	; 0x80
 80078b6:	5cf3      	ldrb	r3, [r6, r3]
	si = i = 0; ni = 8;
 80078b8:	2600      	movs	r6, #0
	while (*str && *str != chr) str++;
 80078ba:	4f45      	ldr	r7, [pc, #276]	; (80079d0 <follow_path+0x164>)
 80078bc:	5dbf      	ldrb	r7, [r7, r6]
 80078be:	2f00      	cmp	r7, #0
 80078c0:	d07a      	beq.n	80079b8 <follow_path+0x14c>
 80078c2:	3601      	adds	r6, #1
 80078c4:	42bb      	cmp	r3, r7
 80078c6:	d1f8      	bne.n	80078ba <follow_path+0x4e>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80078c8:	2006      	movs	r0, #6
	return res;
 80078ca:	e7e5      	b.n	8007898 <follow_path+0x2c>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80078cc:	2a00      	cmp	r2, #0
 80078ce:	d169      	bne.n	80079a4 <follow_path+0x138>
			ns = dp->fn[NSFLAG];
 80078d0:	0023      	movs	r3, r4
 80078d2:	332f      	adds	r3, #47	; 0x2f
 80078d4:	781b      	ldrb	r3, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 80078d6:	2800      	cmp	r0, #0
 80078d8:	d007      	beq.n	80078ea <follow_path+0x7e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80078da:	2804      	cmp	r0, #4
 80078dc:	d1dc      	bne.n	8007898 <follow_path+0x2c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80078de:	4203      	tst	r3, r0
 80078e0:	d1da      	bne.n	8007898 <follow_path+0x2c>
 80078e2:	2005      	movs	r0, #5
 80078e4:	e7d8      	b.n	8007898 <follow_path+0x2c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80078e6:	2004      	movs	r0, #4
 80078e8:	e7f2      	b.n	80078d0 <follow_path+0x64>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80078ea:	075b      	lsls	r3, r3, #29
 80078ec:	d4d4      	bmi.n	8007898 <follow_path+0x2c>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80078ee:	79a3      	ldrb	r3, [r4, #6]
 80078f0:	06db      	lsls	r3, r3, #27
 80078f2:	d5f6      	bpl.n	80078e2 <follow_path+0x76>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80078f4:	6963      	ldr	r3, [r4, #20]
 80078f6:	9901      	ldr	r1, [sp, #4]
 80078f8:	05db      	lsls	r3, r3, #23
 80078fa:	0ddb      	lsrs	r3, r3, #23
 80078fc:	3130      	adds	r1, #48	; 0x30
 80078fe:	18c9      	adds	r1, r1, r3
 8007900:	9b01      	ldr	r3, [sp, #4]
 8007902:	7818      	ldrb	r0, [r3, #0]
 8007904:	f7ff fb1c 	bl	8006f40 <ld_clust.isra.1>
 8007908:	60a0      	str	r0, [r4, #8]
	p = *path; sfn = dp->fn;
 800790a:	0023      	movs	r3, r4
 800790c:	3324      	adds	r3, #36	; 0x24
	mem_set(sfn, ' ', 11);
 800790e:	0018      	movs	r0, r3
 8007910:	220b      	movs	r2, #11
 8007912:	2120      	movs	r1, #32
	p = *path; sfn = dp->fn;
 8007914:	9300      	str	r3, [sp, #0]
	mem_set(sfn, ' ', 11);
 8007916:	f7ff fa28 	bl	8006d6a <mem_set>
	si = i = 0; ni = 8;
 800791a:	2200      	movs	r2, #0
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800791c:	492d      	ldr	r1, [pc, #180]	; (80079d4 <follow_path+0x168>)
	si = i = 0; ni = 8;
 800791e:	0013      	movs	r3, r2
 8007920:	2008      	movs	r0, #8
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007922:	468c      	mov	ip, r1
		c = (BYTE)p[si++];
 8007924:	1c59      	adds	r1, r3, #1
 8007926:	5ceb      	ldrb	r3, [r5, r3]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007928:	2b20      	cmp	r3, #32
 800792a:	d908      	bls.n	800793e <follow_path+0xd2>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800792c:	2b2f      	cmp	r3, #47	; 0x2f
 800792e:	d001      	beq.n	8007934 <follow_path+0xc8>
 8007930:	2b5c      	cmp	r3, #92	; 0x5c
 8007932:	d1b6      	bne.n	80078a2 <follow_path+0x36>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007934:	5c68      	ldrb	r0, [r5, r1]
 8007936:	282f      	cmp	r0, #47	; 0x2f
 8007938:	d0b1      	beq.n	800789e <follow_path+0x32>
 800793a:	285c      	cmp	r0, #92	; 0x5c
 800793c:	d0af      	beq.n	800789e <follow_path+0x32>
	*path = p + si;						/* Return pointer to the next segment */
 800793e:	186d      	adds	r5, r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007940:	2a00      	cmp	r2, #0
 8007942:	d0c1      	beq.n	80078c8 <follow_path+0x5c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007944:	1d62      	adds	r2, r4, #5
 8007946:	7fd1      	ldrb	r1, [r2, #31]
 8007948:	29e5      	cmp	r1, #229	; 0xe5
 800794a:	d101      	bne.n	8007950 <follow_path+0xe4>
 800794c:	39e0      	subs	r1, #224	; 0xe0
 800794e:	77d1      	strb	r1, [r2, #31]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007950:	2200      	movs	r2, #0
 8007952:	2120      	movs	r1, #32
 8007954:	4299      	cmp	r1, r3
 8007956:	4152      	adcs	r2, r2
 8007958:	0023      	movs	r3, r4
 800795a:	0092      	lsls	r2, r2, #2
 800795c:	332f      	adds	r3, #47	; 0x2f
 800795e:	701a      	strb	r2, [r3, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007960:	0020      	movs	r0, r4
	FATFS *fs = dp->obj.fs;
 8007962:	6826      	ldr	r6, [r4, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007964:	f7ff fed3 	bl	800770e <dir_sdi.constprop.11>
	if (res != FR_OK) return res;
 8007968:	2800      	cmp	r0, #0
 800796a:	d1b1      	bne.n	80078d0 <follow_path+0x64>
		res = move_window(fs, dp->sect);
 800796c:	69e1      	ldr	r1, [r4, #28]
 800796e:	0030      	movs	r0, r6
 8007970:	f7ff fb86 	bl	8007080 <move_window>
		if (res != FR_OK) break;
 8007974:	2800      	cmp	r0, #0
 8007976:	d1ab      	bne.n	80078d0 <follow_path+0x64>
		c = dp->dir[DIR_Name];
 8007978:	6a21      	ldr	r1, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800797a:	780b      	ldrb	r3, [r1, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d0b2      	beq.n	80078e6 <follow_path+0x7a>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007980:	223f      	movs	r2, #63	; 0x3f
 8007982:	7acb      	ldrb	r3, [r1, #11]
 8007984:	4013      	ands	r3, r2
 8007986:	71a3      	strb	r3, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007988:	7acb      	ldrb	r3, [r1, #11]
 800798a:	3a37      	subs	r2, #55	; 0x37
 800798c:	4213      	tst	r3, r2
 800798e:	d109      	bne.n	80079a4 <follow_path+0x138>
 8007990:	0003      	movs	r3, r0
		r = *d++ - *s++;
 8007992:	9f00      	ldr	r7, [sp, #0]
 8007994:	5cca      	ldrb	r2, [r1, r3]
 8007996:	5cff      	ldrb	r7, [r7, r3]
 8007998:	1bd2      	subs	r2, r2, r7
	} while (--cnt && r == 0);
 800799a:	2b0a      	cmp	r3, #10
 800799c:	d096      	beq.n	80078cc <follow_path+0x60>
 800799e:	3301      	adds	r3, #1
 80079a0:	2a00      	cmp	r2, #0
 80079a2:	d0f6      	beq.n	8007992 <follow_path+0x126>
		res = dir_next(dp, 0);	/* Next entry */
 80079a4:	2100      	movs	r1, #0
 80079a6:	0020      	movs	r0, r4
 80079a8:	f7ff fee8 	bl	800777c <dir_next>
 80079ac:	e7dc      	b.n	8007968 <follow_path+0xfc>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80079ae:	280b      	cmp	r0, #11
 80079b0:	d08a      	beq.n	80078c8 <follow_path+0x5c>
			i = 8; ni = 11;				/* Goto extension */
 80079b2:	2208      	movs	r2, #8
 80079b4:	200b      	movs	r0, #11
 80079b6:	e008      	b.n	80079ca <follow_path+0x15e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80079b8:	001e      	movs	r6, r3
 80079ba:	3e61      	subs	r6, #97	; 0x61
 80079bc:	2e19      	cmp	r6, #25
 80079be:	d801      	bhi.n	80079c4 <follow_path+0x158>
 80079c0:	3b20      	subs	r3, #32
 80079c2:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 80079c4:	9e00      	ldr	r6, [sp, #0]
 80079c6:	54b3      	strb	r3, [r6, r2]
 80079c8:	3201      	adds	r2, #1
		c = (BYTE)p[si++];
 80079ca:	000b      	movs	r3, r1
 80079cc:	e7aa      	b.n	8007924 <follow_path+0xb8>
 80079ce:	46c0      	nop			; (mov r8, r8)
 80079d0:	080128cc 	.word	0x080128cc
 80079d4:	0801284c 	.word	0x0801284c

080079d8 <dir_register>:
{
 80079d8:	b570      	push	{r4, r5, r6, lr}
 80079da:	0005      	movs	r5, r0
	FATFS *fs = dp->obj.fs;
 80079dc:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 80079de:	f7ff fe96 	bl	800770e <dir_sdi.constprop.11>
 80079e2:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
 80079e4:	d125      	bne.n	8007a32 <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 80079e6:	69e9      	ldr	r1, [r5, #28]
 80079e8:	0030      	movs	r0, r6
 80079ea:	f7ff fb49 	bl	8007080 <move_window>
 80079ee:	1e04      	subs	r4, r0, #0
			if (res != FR_OK) break;
 80079f0:	d11f      	bne.n	8007a32 <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80079f2:	6a2b      	ldr	r3, [r5, #32]
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	2be5      	cmp	r3, #229	; 0xe5
 80079f8:	d114      	bne.n	8007a24 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 80079fa:	69e9      	ldr	r1, [r5, #28]
 80079fc:	0030      	movs	r0, r6
 80079fe:	f7ff fb3f 	bl	8007080 <move_window>
 8007a02:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {
 8007a04:	d10c      	bne.n	8007a20 <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007a06:	0001      	movs	r1, r0
 8007a08:	2220      	movs	r2, #32
 8007a0a:	6a28      	ldr	r0, [r5, #32]
 8007a0c:	f7ff f9ad 	bl	8006d6a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007a10:	0029      	movs	r1, r5
 8007a12:	220b      	movs	r2, #11
 8007a14:	3124      	adds	r1, #36	; 0x24
 8007a16:	6a28      	ldr	r0, [r5, #32]
 8007a18:	f7ff fa8a 	bl	8006f30 <mem_cpy.part.0>
			fs->wflag = 1;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	70f3      	strb	r3, [r6, #3]
}
 8007a20:	0020      	movs	r0, r4
 8007a22:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d0e8      	beq.n	80079fa <dir_register+0x22>
			res = dir_next(dp, 1);
 8007a28:	2101      	movs	r1, #1
 8007a2a:	0028      	movs	r0, r5
 8007a2c:	f7ff fea6 	bl	800777c <dir_next>
 8007a30:	e7d7      	b.n	80079e2 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007a32:	2c04      	cmp	r4, #4
 8007a34:	d1f4      	bne.n	8007a20 <dir_register+0x48>
 8007a36:	3403      	adds	r4, #3
	return res;
 8007a38:	e7f2      	b.n	8007a20 <dir_register+0x48>
	...

08007a3c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007a3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007a3e:	9001      	str	r0, [sp, #4]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007a40:	a803      	add	r0, sp, #12
{
 8007a42:	0014      	movs	r4, r2
 8007a44:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8007a46:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8007a48:	f7ff fa41 	bl	8006ece <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007a4c:	220b      	movs	r2, #11
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	db20      	blt.n	8007a94 <f_mount+0x58>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007a52:	4912      	ldr	r1, [pc, #72]	; (8007a9c <f_mount+0x60>)
 8007a54:	0080      	lsls	r0, r0, #2
 8007a56:	5843      	ldr	r3, [r0, r1]

	if (cfs) {
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00b      	beq.n	8007a74 <f_mount+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007a5c:	4a10      	ldr	r2, [pc, #64]	; (8007aa0 <f_mount+0x64>)
 8007a5e:	6815      	ldr	r5, [r2, #0]
 8007a60:	42ab      	cmp	r3, r5
 8007a62:	d101      	bne.n	8007a68 <f_mount+0x2c>
 8007a64:	2500      	movs	r5, #0
 8007a66:	6015      	str	r5, [r2, #0]
 8007a68:	6916      	ldr	r6, [r2, #16]
 8007a6a:	2500      	movs	r5, #0
 8007a6c:	42b3      	cmp	r3, r6
 8007a6e:	d100      	bne.n	8007a72 <f_mount+0x36>
 8007a70:	6115      	str	r5, [r2, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007a72:	701d      	strb	r5, [r3, #0]
	}

	if (fs) {
 8007a74:	9b01      	ldr	r3, [sp, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <f_mount+0x42>
		fs->fs_type = 0;				/* Clear new fs object */
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007a7e:	500b      	str	r3, [r1, r0]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007a80:	1e1a      	subs	r2, r3, #0
 8007a82:	d007      	beq.n	8007a94 <f_mount+0x58>
 8007a84:	2200      	movs	r2, #0
 8007a86:	2c01      	cmp	r4, #1
 8007a88:	d104      	bne.n	8007a94 <f_mount+0x58>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007a8a:	a901      	add	r1, sp, #4
 8007a8c:	4668      	mov	r0, sp
 8007a8e:	f7ff fb57 	bl	8007140 <find_volume>
 8007a92:	0002      	movs	r2, r0
	LEAVE_FF(fs, res);
}
 8007a94:	0010      	movs	r0, r2
 8007a96:	b004      	add	sp, #16
 8007a98:	bd70      	pop	{r4, r5, r6, pc}
 8007a9a:	46c0      	nop			; (mov r8, r8)
 8007a9c:	200014e8 	.word	0x200014e8
 8007aa0:	200014ec 	.word	0x200014ec

08007aa4 <f_open>:
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007aa4:	2309      	movs	r3, #9
{
 8007aa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aa8:	b093      	sub	sp, #76	; 0x4c
 8007aaa:	0004      	movs	r4, r0
 8007aac:	9103      	str	r1, [sp, #12]
 8007aae:	0017      	movs	r7, r2
	if (!fp) return FR_INVALID_OBJECT;
 8007ab0:	9300      	str	r3, [sp, #0]
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	d100      	bne.n	8007ab8 <f_open+0x14>
 8007ab6:	e0c0      	b.n	8007c3a <f_open+0x196>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007ab8:	263f      	movs	r6, #63	; 0x3f
 8007aba:	4016      	ands	r6, r2
	res = find_volume(&path, &fs, mode);
 8007abc:	0032      	movs	r2, r6
 8007abe:	a905      	add	r1, sp, #20
 8007ac0:	a803      	add	r0, sp, #12
 8007ac2:	f7ff fb3d 	bl	8007140 <find_volume>
 8007ac6:	9000      	str	r0, [sp, #0]
	if (res == FR_OK) {
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	d12c      	bne.n	8007b26 <f_open+0x82>
		dj.obj.fs = fs;
 8007acc:	ad06      	add	r5, sp, #24
 8007ace:	9b05      	ldr	r3, [sp, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007ad0:	9903      	ldr	r1, [sp, #12]
 8007ad2:	0028      	movs	r0, r5
		dj.obj.fs = fs;
 8007ad4:	9306      	str	r3, [sp, #24]
		res = follow_path(&dj, path);	/* Follow the file path */
 8007ad6:	f7ff fec9 	bl	800786c <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007ada:	2800      	cmp	r0, #0
 8007adc:	d10e      	bne.n	8007afc <f_open+0x58>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007ade:	233f      	movs	r3, #63	; 0x3f
 8007ae0:	aa02      	add	r2, sp, #8
 8007ae2:	189b      	adds	r3, r3, r2
 8007ae4:	781b      	ldrb	r3, [r3, #0]
				res = FR_INVALID_NAME;
 8007ae6:	3006      	adds	r0, #6
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007ae8:	2b7f      	cmp	r3, #127	; 0x7f
 8007aea:	d807      	bhi.n	8007afc <f_open+0x58>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007aec:	2301      	movs	r3, #1
 8007aee:	0031      	movs	r1, r6
 8007af0:	4399      	bics	r1, r3
 8007af2:	1e4b      	subs	r3, r1, #1
 8007af4:	4199      	sbcs	r1, r3
 8007af6:	0028      	movs	r0, r5
 8007af8:	f7ff f93e 	bl	8006d78 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007afc:	231c      	movs	r3, #28
 8007afe:	421f      	tst	r7, r3
 8007b00:	d06d      	beq.n	8007bde <f_open+0x13a>
			if (res != FR_OK) {					/* No file, create new */
 8007b02:	2800      	cmp	r0, #0
 8007b04:	d013      	beq.n	8007b2e <f_open+0x8a>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007b06:	2804      	cmp	r0, #4
 8007b08:	d109      	bne.n	8007b1e <f_open+0x7a>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007b0a:	4b67      	ldr	r3, [pc, #412]	; (8007ca8 <f_open+0x204>)
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	2a00      	cmp	r2, #0
 8007b10:	d100      	bne.n	8007b14 <f_open+0x70>
 8007b12:	e0c5      	b.n	8007ca0 <f_open+0x1fc>
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d100      	bne.n	8007b1c <f_open+0x78>
 8007b1a:	e0c1      	b.n	8007ca0 <f_open+0x1fc>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007b1c:	300e      	adds	r0, #14
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007b1e:	2308      	movs	r3, #8
 8007b20:	431e      	orrs	r6, r3
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007b22:	2800      	cmp	r0, #0
 8007b24:	d00a      	beq.n	8007b3c <f_open+0x98>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007b26:	2300      	movs	r3, #0
 8007b28:	9000      	str	r0, [sp, #0]
 8007b2a:	6023      	str	r3, [r4, #0]
 8007b2c:	e085      	b.n	8007c3a <f_open+0x196>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007b2e:	2311      	movs	r3, #17
 8007b30:	79aa      	ldrb	r2, [r5, #6]
 8007b32:	421a      	tst	r2, r3
 8007b34:	d15c      	bne.n	8007bf0 <f_open+0x14c>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007b36:	077b      	lsls	r3, r7, #29
 8007b38:	d500      	bpl.n	8007b3c <f_open+0x98>
 8007b3a:	e0ab      	b.n	8007c94 <f_open+0x1f0>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007b3c:	0733      	lsls	r3, r6, #28
 8007b3e:	d538      	bpl.n	8007bb2 <f_open+0x10e>
				dw = GET_FATTIME();
 8007b40:	f7ff f844 	bl	8006bcc <get_fattime>
 8007b44:	0007      	movs	r7, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007b46:	6a28      	ldr	r0, [r5, #32]
 8007b48:	0039      	movs	r1, r7
 8007b4a:	300e      	adds	r0, #14
 8007b4c:	f7ff f905 	bl	8006d5a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007b50:	6a28      	ldr	r0, [r5, #32]
 8007b52:	0039      	movs	r1, r7
 8007b54:	3016      	adds	r0, #22
 8007b56:	f7ff f900 	bl	8006d5a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007b5a:	2320      	movs	r3, #32
 8007b5c:	6a2a      	ldr	r2, [r5, #32]
 8007b5e:	72d3      	strb	r3, [r2, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007b60:	6a2f      	ldr	r7, [r5, #32]
 8007b62:	9b05      	ldr	r3, [sp, #20]
 8007b64:	0039      	movs	r1, r7
 8007b66:	7818      	ldrb	r0, [r3, #0]
 8007b68:	9302      	str	r3, [sp, #8]
 8007b6a:	f7ff f9e9 	bl	8006f40 <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007b6e:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007b70:	9001      	str	r0, [sp, #4]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007b72:	0039      	movs	r1, r7
 8007b74:	9802      	ldr	r0, [sp, #8]
 8007b76:	f7ff f9f2 	bl	8006f5e <st_clust.isra.2>
	*ptr++ = (BYTE)val; val >>= 8;
 8007b7a:	2200      	movs	r2, #0
					fs->wflag = 1;
 8007b7c:	2101      	movs	r1, #1
					st_dword(dj.dir + DIR_FileSize, 0);
 8007b7e:	6a2b      	ldr	r3, [r5, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 8007b80:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8007b82:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8007b84:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8007b86:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8007b88:	9b05      	ldr	r3, [sp, #20]
 8007b8a:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8007b8c:	9901      	ldr	r1, [sp, #4]
 8007b8e:	4291      	cmp	r1, r2
 8007b90:	d00f      	beq.n	8007bb2 <f_open+0x10e>
						res = remove_chain(&dj.obj, cl, 0);
 8007b92:	0028      	movs	r0, r5
						dw = fs->winsect;
 8007b94:	6adf      	ldr	r7, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 8007b96:	f7ff fd81 	bl	800769c <remove_chain>
						if (res == FR_OK) {
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	d1c3      	bne.n	8007b26 <f_open+0x82>
							res = move_window(fs, dw);
 8007b9e:	0039      	movs	r1, r7
 8007ba0:	9805      	ldr	r0, [sp, #20]
 8007ba2:	f7ff fa6d 	bl	8007080 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007ba6:	9b01      	ldr	r3, [sp, #4]
 8007ba8:	9a05      	ldr	r2, [sp, #20]
 8007baa:	3b01      	subs	r3, #1
 8007bac:	60d3      	str	r3, [r2, #12]
		if (res == FR_OK) {
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	d1b9      	bne.n	8007b26 <f_open+0x82>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007bb2:	0733      	lsls	r3, r6, #28
 8007bb4:	d501      	bpl.n	8007bba <f_open+0x116>
				mode |= FA_MODIFIED;
 8007bb6:	2340      	movs	r3, #64	; 0x40
 8007bb8:	431e      	orrs	r6, r3
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007bba:	9b05      	ldr	r3, [sp, #20]
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007bbc:	0031      	movs	r1, r6
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007bc0:	0028      	movs	r0, r5
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007bc2:	6263      	str	r3, [r4, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007bc4:	6a2b      	ldr	r3, [r5, #32]
 8007bc6:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007bc8:	2301      	movs	r3, #1
 8007bca:	4399      	bics	r1, r3
 8007bcc:	1e4b      	subs	r3, r1, #1
 8007bce:	4199      	sbcs	r1, r3
 8007bd0:	f7ff f900 	bl	8006dd4 <inc_lock>
 8007bd4:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	d132      	bne.n	8007c40 <f_open+0x19c>
 8007bda:	2002      	movs	r0, #2
 8007bdc:	e7a3      	b.n	8007b26 <f_open+0x82>
			if (res == FR_OK) {					/* Following succeeded */
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d1a1      	bne.n	8007b26 <f_open+0x82>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007be2:	79ab      	ldrb	r3, [r5, #6]
 8007be4:	06da      	lsls	r2, r3, #27
 8007be6:	d457      	bmi.n	8007c98 <f_open+0x1f4>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007be8:	07ba      	lsls	r2, r7, #30
 8007bea:	d5e2      	bpl.n	8007bb2 <f_open+0x10e>
 8007bec:	07db      	lsls	r3, r3, #31
 8007bee:	d5e0      	bpl.n	8007bb2 <f_open+0x10e>
					res = FR_DENIED;
 8007bf0:	2007      	movs	r0, #7
 8007bf2:	e798      	b.n	8007b26 <f_open+0x82>
					clst = get_fat(&fp->obj, clst);
 8007bf4:	6820      	ldr	r0, [r4, #0]
 8007bf6:	f7ff fc99 	bl	800752c <get_fat.isra.8>
 8007bfa:	0001      	movs	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8007bfc:	2002      	movs	r0, #2
 8007bfe:	2901      	cmp	r1, #1
 8007c00:	d903      	bls.n	8007c0a <f_open+0x166>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007c02:	1c48      	adds	r0, r1, #1
 8007c04:	4242      	negs	r2, r0
 8007c06:	4142      	adcs	r2, r0
					if (clst <= 1) res = FR_INT_ERR;
 8007c08:	b2d0      	uxtb	r0, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007c0a:	1bf6      	subs	r6, r6, r7
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	d03d      	beq.n	8007c8c <f_open+0x1e8>
				fp->clust = clst;
 8007c10:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007c12:	2800      	cmp	r0, #0
 8007c14:	d187      	bne.n	8007b26 <f_open+0x82>
 8007c16:	05f3      	lsls	r3, r6, #23
 8007c18:	d00f      	beq.n	8007c3a <f_open+0x196>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007c1a:	9f05      	ldr	r7, [sp, #20]
 8007c1c:	0038      	movs	r0, r7
 8007c1e:	f7ff f935 	bl	8006e8c <clust2sect>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	d0d9      	beq.n	8007bda <f_open+0x136>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007c26:	0a76      	lsrs	r6, r6, #9
 8007c28:	1832      	adds	r2, r6, r0
 8007c2a:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007c2c:	7878      	ldrb	r0, [r7, #1]
 8007c2e:	2301      	movs	r3, #1
 8007c30:	0029      	movs	r1, r5
 8007c32:	f7ff f85d 	bl	8006cf0 <disk_read>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d130      	bne.n	8007c9c <f_open+0x1f8>

	LEAVE_FF(fs, res);
}
 8007c3a:	9800      	ldr	r0, [sp, #0]
 8007c3c:	b013      	add	sp, #76	; 0x4c
 8007c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007c40:	9f05      	ldr	r7, [sp, #20]
 8007c42:	6a2d      	ldr	r5, [r5, #32]
 8007c44:	7838      	ldrb	r0, [r7, #0]
 8007c46:	0029      	movs	r1, r5
 8007c48:	f7ff f97a 	bl	8006f40 <ld_clust.isra.1>
 8007c4c:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007c4e:	0028      	movs	r0, r5
 8007c50:	301c      	adds	r0, #28
 8007c52:	f7ff f877 	bl	8006d44 <ld_dword>
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007c56:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007c58:	0025      	movs	r5, r4
 8007c5a:	2280      	movs	r2, #128	; 0x80
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007c5c:	60e0      	str	r0, [r4, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007c5e:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007c60:	6027      	str	r7, [r4, #0]
			fp->obj.id = fs->id;
 8007c62:	88fb      	ldrh	r3, [r7, #6]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007c64:	3530      	adds	r5, #48	; 0x30
			fp->obj.id = fs->id;
 8007c66:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 8007c68:	7526      	strb	r6, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 8007c6a:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007c6c:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007c6e:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007c70:	0092      	lsls	r2, r2, #2
 8007c72:	0028      	movs	r0, r5
 8007c74:	f7ff f879 	bl	8006d6a <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007c78:	06b3      	lsls	r3, r6, #26
 8007c7a:	d5de      	bpl.n	8007c3a <f_open+0x196>
 8007c7c:	68e6      	ldr	r6, [r4, #12]
 8007c7e:	2e00      	cmp	r6, #0
 8007c80:	d0db      	beq.n	8007c3a <f_open+0x196>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007c82:	9b05      	ldr	r3, [sp, #20]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007c84:	61a6      	str	r6, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007c86:	895f      	ldrh	r7, [r3, #10]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007c88:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007c8a:	027f      	lsls	r7, r7, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007c8c:	42b7      	cmp	r7, r6
 8007c8e:	d3b1      	bcc.n	8007bf4 <f_open+0x150>
 8007c90:	2000      	movs	r0, #0
 8007c92:	e7bd      	b.n	8007c10 <f_open+0x16c>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007c94:	2008      	movs	r0, #8
 8007c96:	e746      	b.n	8007b26 <f_open+0x82>
					res = FR_NO_FILE;
 8007c98:	2004      	movs	r0, #4
 8007c9a:	e744      	b.n	8007b26 <f_open+0x82>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007c9c:	2001      	movs	r0, #1
 8007c9e:	e742      	b.n	8007b26 <f_open+0x82>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007ca0:	0028      	movs	r0, r5
 8007ca2:	f7ff fe99 	bl	80079d8 <dir_register>
 8007ca6:	e73a      	b.n	8007b1e <f_open+0x7a>
 8007ca8:	200014ec 	.word	0x200014ec

08007cac <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cae:	b089      	sub	sp, #36	; 0x24
 8007cb0:	9305      	str	r3, [sp, #20]
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8007cb2:	2300      	movs	r3, #0
{
 8007cb4:	0015      	movs	r5, r2
	*br = 0;	/* Clear read byte counter */
 8007cb6:	9a05      	ldr	r2, [sp, #20]
{
 8007cb8:	000e      	movs	r6, r1
	*br = 0;	/* Clear read byte counter */
 8007cba:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007cbc:	a907      	add	r1, sp, #28
{
 8007cbe:	0004      	movs	r4, r0
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007cc0:	f7ff f91b 	bl	8006efa <validate>
 8007cc4:	9001      	str	r0, [sp, #4]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d110      	bne.n	8007cec <f_read+0x40>
 8007cca:	7d63      	ldrb	r3, [r4, #21]
 8007ccc:	9301      	str	r3, [sp, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10c      	bne.n	8007cec <f_read+0x40>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007cd2:	7d23      	ldrb	r3, [r4, #20]
 8007cd4:	07db      	lsls	r3, r3, #31
 8007cd6:	d400      	bmi.n	8007cda <f_read+0x2e>
 8007cd8:	e09c      	b.n	8007e14 <f_read+0x168>
	remain = fp->obj.objsize - fp->fptr;
 8007cda:	68e3      	ldr	r3, [r4, #12]
 8007cdc:	69a2      	ldr	r2, [r4, #24]
 8007cde:	1a9f      	subs	r7, r3, r2
 8007ce0:	42af      	cmp	r7, r5
 8007ce2:	d900      	bls.n	8007ce6 <f_read+0x3a>
 8007ce4:	002f      	movs	r7, r5
 8007ce6:	9602      	str	r6, [sp, #8]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 8007ce8:	2f00      	cmp	r7, #0
 8007cea:	d102      	bne.n	8007cf2 <f_read+0x46>
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8007cec:	9801      	ldr	r0, [sp, #4]
 8007cee:	b009      	add	sp, #36	; 0x24
 8007cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007cf2:	69a1      	ldr	r1, [r4, #24]
 8007cf4:	05cb      	lsls	r3, r1, #23
 8007cf6:	d17b      	bne.n	8007df0 <f_read+0x144>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007cf8:	9b07      	ldr	r3, [sp, #28]
 8007cfa:	895e      	ldrh	r6, [r3, #10]
 8007cfc:	0a4b      	lsrs	r3, r1, #9
 8007cfe:	3e01      	subs	r6, #1
 8007d00:	4033      	ands	r3, r6
 8007d02:	9303      	str	r3, [sp, #12]
			if (csect == 0) {					/* On the cluster boundary? */
 8007d04:	d119      	bne.n	8007d3a <f_read+0x8e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007d06:	2900      	cmp	r1, #0
 8007d08:	d106      	bne.n	8007d18 <f_read+0x6c>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007d0a:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007d0c:	2801      	cmp	r0, #1
 8007d0e:	d80f      	bhi.n	8007d30 <f_read+0x84>
 8007d10:	2302      	movs	r3, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007d12:	7563      	strb	r3, [r4, #21]
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007d14:	9301      	str	r3, [sp, #4]
 8007d16:	e7e9      	b.n	8007cec <f_read+0x40>
					if (fp->cltbl) {
 8007d18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <f_read+0x7a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007d1e:	0020      	movs	r0, r4
 8007d20:	f7ff f8c0 	bl	8006ea4 <clmt_clust>
 8007d24:	e7f2      	b.n	8007d0c <f_read+0x60>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007d26:	69e1      	ldr	r1, [r4, #28]
 8007d28:	6820      	ldr	r0, [r4, #0]
 8007d2a:	f7ff fbff 	bl	800752c <get_fat.isra.8>
 8007d2e:	e7ed      	b.n	8007d0c <f_read+0x60>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007d30:	1c43      	adds	r3, r0, #1
 8007d32:	d101      	bne.n	8007d38 <f_read+0x8c>
 8007d34:	2301      	movs	r3, #1
 8007d36:	e7ec      	b.n	8007d12 <f_read+0x66>
				fp->clust = clst;				/* Update current cluster */
 8007d38:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007d3a:	9b07      	ldr	r3, [sp, #28]
 8007d3c:	69e1      	ldr	r1, [r4, #28]
 8007d3e:	0018      	movs	r0, r3
 8007d40:	9304      	str	r3, [sp, #16]
 8007d42:	f7ff f8a3 	bl	8006e8c <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007d46:	2800      	cmp	r0, #0
 8007d48:	d0e2      	beq.n	8007d10 <f_read+0x64>
			sect += csect;
 8007d4a:	9b03      	ldr	r3, [sp, #12]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007d4c:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 8007d4e:	181e      	adds	r6, r3, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007d50:	2d00      	cmp	r5, #0
 8007d52:	d02f      	beq.n	8007db4 <f_read+0x108>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007d54:	9b04      	ldr	r3, [sp, #16]
 8007d56:	9a03      	ldr	r2, [sp, #12]
 8007d58:	895b      	ldrh	r3, [r3, #10]
 8007d5a:	1952      	adds	r2, r2, r5
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d901      	bls.n	8007d64 <f_read+0xb8>
					cc = fs->csize - csect;
 8007d60:	9a03      	ldr	r2, [sp, #12]
 8007d62:	1a9d      	subs	r5, r3, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007d64:	9b04      	ldr	r3, [sp, #16]
 8007d66:	0032      	movs	r2, r6
 8007d68:	7858      	ldrb	r0, [r3, #1]
 8007d6a:	9902      	ldr	r1, [sp, #8]
 8007d6c:	002b      	movs	r3, r5
 8007d6e:	f7fe ffbf 	bl	8006cf0 <disk_read>
 8007d72:	2800      	cmp	r0, #0
 8007d74:	d1de      	bne.n	8007d34 <f_read+0x88>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007d76:	7d23      	ldrb	r3, [r4, #20]
 8007d78:	2b7f      	cmp	r3, #127	; 0x7f
 8007d7a:	d90c      	bls.n	8007d96 <f_read+0xea>
 8007d7c:	6a23      	ldr	r3, [r4, #32]
 8007d7e:	1b98      	subs	r0, r3, r6
 8007d80:	4285      	cmp	r5, r0
 8007d82:	d908      	bls.n	8007d96 <f_read+0xea>
 8007d84:	2280      	movs	r2, #128	; 0x80
 8007d86:	0021      	movs	r1, r4
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007d88:	9b02      	ldr	r3, [sp, #8]
 8007d8a:	0240      	lsls	r0, r0, #9
 8007d8c:	1818      	adds	r0, r3, r0
 8007d8e:	0092      	lsls	r2, r2, #2
 8007d90:	3130      	adds	r1, #48	; 0x30
 8007d92:	f7ff f8cd 	bl	8006f30 <mem_cpy.part.0>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007d96:	026d      	lsls	r5, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007d98:	9b02      	ldr	r3, [sp, #8]
 8007d9a:	9a05      	ldr	r2, [sp, #20]
 8007d9c:	195b      	adds	r3, r3, r5
 8007d9e:	9302      	str	r3, [sp, #8]
 8007da0:	69a3      	ldr	r3, [r4, #24]
 8007da2:	1b7f      	subs	r7, r7, r5
 8007da4:	195b      	adds	r3, r3, r5
 8007da6:	61a3      	str	r3, [r4, #24]
 8007da8:	9b05      	ldr	r3, [sp, #20]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	9303      	str	r3, [sp, #12]
 8007dae:	195b      	adds	r3, r3, r5
 8007db0:	6013      	str	r3, [r2, #0]
 8007db2:	e799      	b.n	8007ce8 <f_read+0x3c>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007db4:	6a22      	ldr	r2, [r4, #32]
 8007db6:	4296      	cmp	r6, r2
 8007db8:	d019      	beq.n	8007dee <f_read+0x142>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007dba:	7d23      	ldrb	r3, [r4, #20]
 8007dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8007dbe:	d90c      	bls.n	8007dda <f_read+0x12e>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007dc0:	0021      	movs	r1, r4
 8007dc2:	9b04      	ldr	r3, [sp, #16]
 8007dc4:	3130      	adds	r1, #48	; 0x30
 8007dc6:	7858      	ldrb	r0, [r3, #1]
 8007dc8:	2301      	movs	r3, #1
 8007dca:	f7fe ff9f 	bl	8006d0c <disk_write>
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	d1b0      	bne.n	8007d34 <f_read+0x88>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007dd2:	227f      	movs	r2, #127	; 0x7f
 8007dd4:	7d23      	ldrb	r3, [r4, #20]
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007dda:	0021      	movs	r1, r4
 8007ddc:	9b07      	ldr	r3, [sp, #28]
 8007dde:	0032      	movs	r2, r6
 8007de0:	7858      	ldrb	r0, [r3, #1]
 8007de2:	3130      	adds	r1, #48	; 0x30
 8007de4:	2301      	movs	r3, #1
 8007de6:	f7fe ff83 	bl	8006cf0 <disk_read>
 8007dea:	2800      	cmp	r0, #0
 8007dec:	d1a2      	bne.n	8007d34 <f_read+0x88>
			fp->sect = sect;
 8007dee:	6226      	str	r6, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007df0:	69a3      	ldr	r3, [r4, #24]
 8007df2:	003d      	movs	r5, r7
 8007df4:	05d9      	lsls	r1, r3, #23
 8007df6:	2380      	movs	r3, #128	; 0x80
 8007df8:	0dc9      	lsrs	r1, r1, #23
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	1a5b      	subs	r3, r3, r1
 8007dfe:	429f      	cmp	r7, r3
 8007e00:	d900      	bls.n	8007e04 <f_read+0x158>
 8007e02:	001d      	movs	r5, r3
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007e04:	0023      	movs	r3, r4
 8007e06:	3330      	adds	r3, #48	; 0x30
 8007e08:	1859      	adds	r1, r3, r1
 8007e0a:	002a      	movs	r2, r5
 8007e0c:	9802      	ldr	r0, [sp, #8]
 8007e0e:	f7ff f88f 	bl	8006f30 <mem_cpy.part.0>
 8007e12:	e7c1      	b.n	8007d98 <f_read+0xec>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007e14:	2307      	movs	r3, #7
 8007e16:	e77d      	b.n	8007d14 <f_read+0x68>

08007e18 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e1a:	b089      	sub	sp, #36	; 0x24
 8007e1c:	9305      	str	r3, [sp, #20]
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8007e1e:	2300      	movs	r3, #0
{
 8007e20:	0017      	movs	r7, r2
	*bw = 0;	/* Clear write byte counter */
 8007e22:	9a05      	ldr	r2, [sp, #20]
{
 8007e24:	000d      	movs	r5, r1
	*bw = 0;	/* Clear write byte counter */
 8007e26:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007e28:	a907      	add	r1, sp, #28
{
 8007e2a:	0004      	movs	r4, r0
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007e2c:	f7ff f865 	bl	8006efa <validate>
 8007e30:	9001      	str	r0, [sp, #4]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007e32:	2800      	cmp	r0, #0
 8007e34:	d131      	bne.n	8007e9a <f_write+0x82>
 8007e36:	7d63      	ldrb	r3, [r4, #21]
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d12d      	bne.n	8007e9a <f_write+0x82>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007e3e:	7d23      	ldrb	r3, [r4, #20]
 8007e40:	079b      	lsls	r3, r3, #30
 8007e42:	d400      	bmi.n	8007e46 <f_write+0x2e>
 8007e44:	e0b7      	b.n	8007fb6 <f_write+0x19e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007e46:	69a3      	ldr	r3, [r4, #24]
 8007e48:	19da      	adds	r2, r3, r7
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d900      	bls.n	8007e50 <f_write+0x38>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007e4e:	43df      	mvns	r7, r3
{
 8007e50:	9502      	str	r5, [sp, #8]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007e52:	2f00      	cmp	r7, #0
 8007e54:	d01d      	beq.n	8007e92 <f_write+0x7a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007e56:	69a1      	ldr	r1, [r4, #24]
 8007e58:	05cb      	lsls	r3, r1, #23
 8007e5a:	d000      	beq.n	8007e5e <f_write+0x46>
 8007e5c:	e094      	b.n	8007f88 <f_write+0x170>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007e5e:	9b07      	ldr	r3, [sp, #28]
 8007e60:	0a4a      	lsrs	r2, r1, #9
 8007e62:	895b      	ldrh	r3, [r3, #10]
 8007e64:	3b01      	subs	r3, #1
 8007e66:	401a      	ands	r2, r3
 8007e68:	9203      	str	r2, [sp, #12]
			if (csect == 0) {				/* On the cluster boundary? */
 8007e6a:	d127      	bne.n	8007ebc <f_write+0xa4>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007e6c:	2900      	cmp	r1, #0
 8007e6e:	d108      	bne.n	8007e82 <f_write+0x6a>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007e70:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007e72:	1e01      	subs	r1, r0, #0
					if (clst == 0) {		/* If no cluster is allocated, */
 8007e74:	d015      	beq.n	8007ea2 <f_write+0x8a>
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007e76:	2801      	cmp	r0, #1
 8007e78:	d117      	bne.n	8007eaa <f_write+0x92>
 8007e7a:	2302      	movs	r3, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007e7c:	7563      	strb	r3, [r4, #21]
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007e7e:	9301      	str	r3, [sp, #4]
 8007e80:	e00b      	b.n	8007e9a <f_write+0x82>
					if (fp->cltbl) {
 8007e82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00b      	beq.n	8007ea0 <f_write+0x88>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007e88:	0020      	movs	r0, r4
 8007e8a:	f7ff f80b 	bl	8006ea4 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	d1f1      	bne.n	8007e76 <f_write+0x5e>
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007e92:	2340      	movs	r3, #64	; 0x40
 8007e94:	7d22      	ldrb	r2, [r4, #20]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 8007e9a:	9801      	ldr	r0, [sp, #4]
 8007e9c:	b009      	add	sp, #36	; 0x24
 8007e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007ea0:	69e1      	ldr	r1, [r4, #28]
 8007ea2:	0020      	movs	r0, r4
 8007ea4:	f7ff fba2 	bl	80075ec <create_chain>
 8007ea8:	e7f1      	b.n	8007e8e <f_write+0x76>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007eaa:	1c43      	adds	r3, r0, #1
 8007eac:	d101      	bne.n	8007eb2 <f_write+0x9a>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e7e4      	b.n	8007e7c <f_write+0x64>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007eb2:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8007eb4:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d100      	bne.n	8007ebc <f_write+0xa4>
 8007eba:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007ebc:	7d23      	ldrb	r3, [r4, #20]
 8007ebe:	2b7f      	cmp	r3, #127	; 0x7f
 8007ec0:	d90d      	bls.n	8007ede <f_write+0xc6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ec2:	0021      	movs	r1, r4
 8007ec4:	9b07      	ldr	r3, [sp, #28]
 8007ec6:	6a22      	ldr	r2, [r4, #32]
 8007ec8:	7858      	ldrb	r0, [r3, #1]
 8007eca:	3130      	adds	r1, #48	; 0x30
 8007ecc:	2301      	movs	r3, #1
 8007ece:	f7fe ff1d 	bl	8006d0c <disk_write>
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	d1eb      	bne.n	8007eae <f_write+0x96>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007ed6:	227f      	movs	r2, #127	; 0x7f
 8007ed8:	7d23      	ldrb	r3, [r4, #20]
 8007eda:	4013      	ands	r3, r2
 8007edc:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007ede:	9b07      	ldr	r3, [sp, #28]
 8007ee0:	69e1      	ldr	r1, [r4, #28]
 8007ee2:	0018      	movs	r0, r3
 8007ee4:	9304      	str	r3, [sp, #16]
 8007ee6:	f7fe ffd1 	bl	8006e8c <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007eea:	2800      	cmp	r0, #0
 8007eec:	d0c5      	beq.n	8007e7a <f_write+0x62>
			sect += csect;
 8007eee:	9b03      	ldr	r3, [sp, #12]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007ef0:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 8007ef2:	181e      	adds	r6, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007ef4:	2d00      	cmp	r5, #0
 8007ef6:	d035      	beq.n	8007f64 <f_write+0x14c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007ef8:	9b04      	ldr	r3, [sp, #16]
 8007efa:	9a03      	ldr	r2, [sp, #12]
 8007efc:	895b      	ldrh	r3, [r3, #10]
 8007efe:	1952      	adds	r2, r2, r5
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d901      	bls.n	8007f08 <f_write+0xf0>
					cc = fs->csize - csect;
 8007f04:	9a03      	ldr	r2, [sp, #12]
 8007f06:	1a9d      	subs	r5, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007f08:	9b04      	ldr	r3, [sp, #16]
 8007f0a:	0032      	movs	r2, r6
 8007f0c:	7858      	ldrb	r0, [r3, #1]
 8007f0e:	9902      	ldr	r1, [sp, #8]
 8007f10:	002b      	movs	r3, r5
 8007f12:	f7fe fefb 	bl	8006d0c <disk_write>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d1c9      	bne.n	8007eae <f_write+0x96>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007f1a:	6a23      	ldr	r3, [r4, #32]
 8007f1c:	1b9e      	subs	r6, r3, r6
 8007f1e:	42b5      	cmp	r5, r6
 8007f20:	d90c      	bls.n	8007f3c <f_write+0x124>
 8007f22:	2280      	movs	r2, #128	; 0x80
 8007f24:	0020      	movs	r0, r4
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007f26:	9b02      	ldr	r3, [sp, #8]
 8007f28:	0276      	lsls	r6, r6, #9
 8007f2a:	1999      	adds	r1, r3, r6
 8007f2c:	0092      	lsls	r2, r2, #2
 8007f2e:	3030      	adds	r0, #48	; 0x30
 8007f30:	f7fe fffe 	bl	8006f30 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007f34:	227f      	movs	r2, #127	; 0x7f
 8007f36:	7d23      	ldrb	r3, [r4, #20]
 8007f38:	4013      	ands	r3, r2
 8007f3a:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007f3c:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007f3e:	9b02      	ldr	r3, [sp, #8]
 8007f40:	68e2      	ldr	r2, [r4, #12]
 8007f42:	195b      	adds	r3, r3, r5
 8007f44:	9302      	str	r3, [sp, #8]
 8007f46:	69a3      	ldr	r3, [r4, #24]
 8007f48:	18eb      	adds	r3, r5, r3
 8007f4a:	61a3      	str	r3, [r4, #24]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d200      	bcs.n	8007f52 <f_write+0x13a>
 8007f50:	001a      	movs	r2, r3
 8007f52:	9b05      	ldr	r3, [sp, #20]
 8007f54:	60e2      	str	r2, [r4, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	9a05      	ldr	r2, [sp, #20]
 8007f5a:	9303      	str	r3, [sp, #12]
 8007f5c:	195b      	adds	r3, r3, r5
 8007f5e:	6013      	str	r3, [r2, #0]
 8007f60:	1b7f      	subs	r7, r7, r5
 8007f62:	e776      	b.n	8007e52 <f_write+0x3a>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007f64:	6a23      	ldr	r3, [r4, #32]
 8007f66:	429e      	cmp	r6, r3
 8007f68:	d00d      	beq.n	8007f86 <f_write+0x16e>
 8007f6a:	69a3      	ldr	r3, [r4, #24]
 8007f6c:	68e2      	ldr	r2, [r4, #12]
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d209      	bcs.n	8007f86 <f_write+0x16e>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007f72:	0021      	movs	r1, r4
 8007f74:	9b04      	ldr	r3, [sp, #16]
 8007f76:	0032      	movs	r2, r6
 8007f78:	7858      	ldrb	r0, [r3, #1]
 8007f7a:	3130      	adds	r1, #48	; 0x30
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	f7fe feb7 	bl	8006cf0 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d193      	bne.n	8007eae <f_write+0x96>
			fp->sect = sect;
 8007f86:	6226      	str	r6, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007f88:	69a3      	ldr	r3, [r4, #24]
 8007f8a:	003d      	movs	r5, r7
 8007f8c:	05d8      	lsls	r0, r3, #23
 8007f8e:	2380      	movs	r3, #128	; 0x80
 8007f90:	0dc0      	lsrs	r0, r0, #23
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	1a1b      	subs	r3, r3, r0
 8007f96:	429f      	cmp	r7, r3
 8007f98:	d900      	bls.n	8007f9c <f_write+0x184>
 8007f9a:	001d      	movs	r5, r3
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007f9c:	0023      	movs	r3, r4
 8007f9e:	3330      	adds	r3, #48	; 0x30
 8007fa0:	1818      	adds	r0, r3, r0
 8007fa2:	002a      	movs	r2, r5
 8007fa4:	9902      	ldr	r1, [sp, #8]
 8007fa6:	f7fe ffc3 	bl	8006f30 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8007faa:	2280      	movs	r2, #128	; 0x80
 8007fac:	7d23      	ldrb	r3, [r4, #20]
 8007fae:	4252      	negs	r2, r2
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	7523      	strb	r3, [r4, #20]
 8007fb4:	e7c3      	b.n	8007f3e <f_write+0x126>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007fb6:	2307      	movs	r3, #7
 8007fb8:	e761      	b.n	8007e7e <f_write+0x66>

08007fba <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8007fba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fbc:	0004      	movs	r4, r0
 8007fbe:	000e      	movs	r6, r1
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8007fc0:	290a      	cmp	r1, #10
 8007fc2:	d102      	bne.n	8007fca <putc_bfd+0x10>
		putc_bfd(pb, '\r');
 8007fc4:	210d      	movs	r1, #13
 8007fc6:	f7ff fff8 	bl	8007fba <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007fca:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	db14      	blt.n	8007ffa <putc_bfd+0x40>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007fd0:	1c5d      	adds	r5, r3, #1
 8007fd2:	18e3      	adds	r3, r4, r3
 8007fd4:	731e      	strb	r6, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007fd6:	2d3c      	cmp	r5, #60	; 0x3c
 8007fd8:	dd0b      	ble.n	8007ff2 <putc_bfd+0x38>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007fda:	0021      	movs	r1, r4
 8007fdc:	ab01      	add	r3, sp, #4
 8007fde:	002a      	movs	r2, r5
 8007fe0:	310c      	adds	r1, #12
 8007fe2:	6820      	ldr	r0, [r4, #0]
 8007fe4:	f7ff ff18 	bl	8007e18 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007fe8:	9b01      	ldr	r3, [sp, #4]
 8007fea:	1b5d      	subs	r5, r3, r5
 8007fec:	1e6b      	subs	r3, r5, #1
 8007fee:	419d      	sbcs	r5, r3
 8007ff0:	426d      	negs	r5, r5
	}
	pb->idx = i;
	pb->nchr++;
 8007ff2:	68a3      	ldr	r3, [r4, #8]
	pb->idx = i;
 8007ff4:	6065      	str	r5, [r4, #4]
	pb->nchr++;
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	60a3      	str	r3, [r4, #8]
}
 8007ffa:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08007ffc <putc_flush>:
	putbuff* pb
)
{
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007ffc:	6842      	ldr	r2, [r0, #4]
{
 8007ffe:	b513      	push	{r0, r1, r4, lr}
 8008000:	0004      	movs	r4, r0
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008002:	2a00      	cmp	r2, #0
 8008004:	da02      	bge.n	800800c <putc_flush+0x10>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
		&& (UINT)pb->idx == nw) return pb->nchr;
	return EOF;
 8008006:	2001      	movs	r0, #1
 8008008:	4240      	negs	r0, r0
}
 800800a:	bd16      	pop	{r1, r2, r4, pc}
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800800c:	0001      	movs	r1, r0
 800800e:	ab01      	add	r3, sp, #4
 8008010:	310c      	adds	r1, #12
 8008012:	6800      	ldr	r0, [r0, #0]
 8008014:	f7ff ff00 	bl	8007e18 <f_write>
 8008018:	2800      	cmp	r0, #0
 800801a:	d1f4      	bne.n	8008006 <putc_flush+0xa>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800801c:	6863      	ldr	r3, [r4, #4]
 800801e:	9a01      	ldr	r2, [sp, #4]
 8008020:	4293      	cmp	r3, r2
 8008022:	d1f0      	bne.n	8008006 <putc_flush+0xa>
 8008024:	68a0      	ldr	r0, [r4, #8]
 8008026:	e7f0      	b.n	800800a <putc_flush+0xe>

08008028 <f_sync>:
{
 8008028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800802a:	a901      	add	r1, sp, #4
{
 800802c:	0004      	movs	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800802e:	f7fe ff64 	bl	8006efa <validate>
 8008032:	1e05      	subs	r5, r0, #0
	if (res == FR_OK) {
 8008034:	d13d      	bne.n	80080b2 <f_sync+0x8a>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008036:	7d23      	ldrb	r3, [r4, #20]
 8008038:	065a      	lsls	r2, r3, #25
 800803a:	d53a      	bpl.n	80080b2 <f_sync+0x8a>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800803c:	b25b      	sxtb	r3, r3
 800803e:	2b00      	cmp	r3, #0
 8008040:	da0e      	bge.n	8008060 <f_sync+0x38>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008042:	0021      	movs	r1, r4
 8008044:	9b01      	ldr	r3, [sp, #4]
 8008046:	6a22      	ldr	r2, [r4, #32]
 8008048:	7858      	ldrb	r0, [r3, #1]
 800804a:	3130      	adds	r1, #48	; 0x30
 800804c:	2301      	movs	r3, #1
 800804e:	f7fe fe5d 	bl	8006d0c <disk_write>
 8008052:	3501      	adds	r5, #1
 8008054:	2800      	cmp	r0, #0
 8008056:	d12c      	bne.n	80080b2 <f_sync+0x8a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008058:	227f      	movs	r2, #127	; 0x7f
 800805a:	7d23      	ldrb	r3, [r4, #20]
 800805c:	4013      	ands	r3, r2
 800805e:	7523      	strb	r3, [r4, #20]
			tm = GET_FATTIME();				/* Modified time */
 8008060:	f7fe fdb4 	bl	8006bcc <get_fattime>
				res = move_window(fs, fp->dir_sect);
 8008064:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 8008066:	0007      	movs	r7, r0
				res = move_window(fs, fp->dir_sect);
 8008068:	9801      	ldr	r0, [sp, #4]
 800806a:	f7ff f809 	bl	8007080 <move_window>
 800806e:	1e05      	subs	r5, r0, #0
				if (res == FR_OK) {
 8008070:	d11f      	bne.n	80080b2 <f_sync+0x8a>
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008072:	2320      	movs	r3, #32
					dir = fp->dir_ptr;
 8008074:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008076:	7af2      	ldrb	r2, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008078:	0031      	movs	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800807a:	4313      	orrs	r3, r2
 800807c:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800807e:	68a2      	ldr	r2, [r4, #8]
 8008080:	6820      	ldr	r0, [r4, #0]
 8008082:	f7fe ff6c 	bl	8006f5e <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008086:	0030      	movs	r0, r6
 8008088:	68e1      	ldr	r1, [r4, #12]
 800808a:	301c      	adds	r0, #28
 800808c:	f7fe fe65 	bl	8006d5a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008090:	0030      	movs	r0, r6
 8008092:	0039      	movs	r1, r7
 8008094:	3016      	adds	r0, #22
 8008096:	f7fe fe60 	bl	8006d5a <st_dword>
					fs->wflag = 1;
 800809a:	2301      	movs	r3, #1
 800809c:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800809e:	74b5      	strb	r5, [r6, #18]
	*ptr++ = (BYTE)val;
 80080a0:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 80080a2:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80080a4:	f7fe ff94 	bl	8006fd0 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80080a8:	2240      	movs	r2, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 80080aa:	0005      	movs	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 80080ac:	7d23      	ldrb	r3, [r4, #20]
 80080ae:	4393      	bics	r3, r2
 80080b0:	7523      	strb	r3, [r4, #20]
}
 80080b2:	0028      	movs	r0, r5
 80080b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080080b6 <f_close>:
{
 80080b6:	b513      	push	{r0, r1, r4, lr}
 80080b8:	0004      	movs	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 80080ba:	f7ff ffb5 	bl	8008028 <f_sync>
	if (res == FR_OK)
 80080be:	2800      	cmp	r0, #0
 80080c0:	d10b      	bne.n	80080da <f_close+0x24>
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80080c2:	a901      	add	r1, sp, #4
 80080c4:	0020      	movs	r0, r4
 80080c6:	f7fe ff18 	bl	8006efa <validate>
		if (res == FR_OK) {
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d105      	bne.n	80080da <f_close+0x24>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80080ce:	6920      	ldr	r0, [r4, #16]
 80080d0:	f7fe fec2 	bl	8006e58 <dec_lock>
			if (res == FR_OK)
 80080d4:	2800      	cmp	r0, #0
 80080d6:	d100      	bne.n	80080da <f_close+0x24>
				fp->obj.fs = 0;			/* Invalidate file object */
 80080d8:	6020      	str	r0, [r4, #0]
}
 80080da:	bd16      	pop	{r1, r2, r4, pc}

080080dc <f_getfree>:
{
 80080dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080de:	b087      	sub	sp, #28
 80080e0:	9003      	str	r0, [sp, #12]
 80080e2:	9102      	str	r1, [sp, #8]
 80080e4:	0016      	movs	r6, r2
	res = find_volume(&path, &fs, 0);
 80080e6:	a905      	add	r1, sp, #20
 80080e8:	2200      	movs	r2, #0
 80080ea:	a803      	add	r0, sp, #12
 80080ec:	f7ff f828 	bl	8007140 <find_volume>
 80080f0:	1e05      	subs	r5, r0, #0
	if (res == FR_OK) {
 80080f2:	d109      	bne.n	8008108 <f_getfree+0x2c>
		*fatfs = fs;				/* Return ptr to the fs object */
 80080f4:	9c05      	ldr	r4, [sp, #20]
		if (fs->free_clst <= fs->n_fatent - 2) {
 80080f6:	6962      	ldr	r2, [r4, #20]
 80080f8:	6923      	ldr	r3, [r4, #16]
 80080fa:	9200      	str	r2, [sp, #0]
 80080fc:	3a02      	subs	r2, #2
		*fatfs = fs;				/* Return ptr to the fs object */
 80080fe:	6034      	str	r4, [r6, #0]
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008100:	4293      	cmp	r3, r2
 8008102:	d804      	bhi.n	800810e <f_getfree+0x32>
			*nclst = fs->free_clst;
 8008104:	9a02      	ldr	r2, [sp, #8]
 8008106:	6013      	str	r3, [r2, #0]
}
 8008108:	0028      	movs	r0, r5
 800810a:	b007      	add	sp, #28
 800810c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800810e:	7823      	ldrb	r3, [r4, #0]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d11a      	bne.n	800814a <f_getfree+0x6e>
 8008114:	2702      	movs	r7, #2
 8008116:	0006      	movs	r6, r0
					stat = get_fat(&obj, clst);
 8008118:	0039      	movs	r1, r7
 800811a:	0020      	movs	r0, r4
 800811c:	f7ff fa06 	bl	800752c <get_fat.isra.8>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008120:	1c43      	adds	r3, r0, #1
 8008122:	d043      	beq.n	80081ac <f_getfree+0xd0>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008124:	2801      	cmp	r0, #1
 8008126:	d043      	beq.n	80081b0 <f_getfree+0xd4>
					if (stat == 0) nfree++;
 8008128:	4243      	negs	r3, r0
 800812a:	4158      	adcs	r0, r3
				} while (++clst < fs->n_fatent);
 800812c:	9b05      	ldr	r3, [sp, #20]
 800812e:	3701      	adds	r7, #1
 8008130:	695b      	ldr	r3, [r3, #20]
					if (stat == 0) nfree++;
 8008132:	1836      	adds	r6, r6, r0
				} while (++clst < fs->n_fatent);
 8008134:	429f      	cmp	r7, r3
 8008136:	d3ef      	bcc.n	8008118 <f_getfree+0x3c>
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008138:	2201      	movs	r2, #1
			*nclst = nfree;			/* Return the free clusters */
 800813a:	9b02      	ldr	r3, [sp, #8]
 800813c:	601e      	str	r6, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800813e:	9b05      	ldr	r3, [sp, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008140:	7919      	ldrb	r1, [r3, #4]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008142:	611e      	str	r6, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008144:	430a      	orrs	r2, r1
 8008146:	711a      	strb	r2, [r3, #4]
 8008148:	e7de      	b.n	8008108 <f_getfree+0x2c>
					clst = fs->n_fatent; sect = fs->fatbase;
 800814a:	6a23      	ldr	r3, [r4, #32]
					i = 0; p = 0;
 800814c:	0007      	movs	r7, r0
 800814e:	0004      	movs	r4, r0
			nfree = 0;
 8008150:	0006      	movs	r6, r0
					clst = fs->n_fatent; sect = fs->fatbase;
 8008152:	9301      	str	r3, [sp, #4]
						if (i == 0) {
 8008154:	2f00      	cmp	r7, #0
 8008156:	d10c      	bne.n	8008172 <f_getfree+0x96>
							res = move_window(fs, sect++);
 8008158:	9b01      	ldr	r3, [sp, #4]
 800815a:	9805      	ldr	r0, [sp, #20]
 800815c:	0019      	movs	r1, r3
 800815e:	1c5f      	adds	r7, r3, #1
 8008160:	f7fe ff8e 	bl	8007080 <move_window>
							if (res != FR_OK) break;
 8008164:	2800      	cmp	r0, #0
 8008166:	d125      	bne.n	80081b4 <f_getfree+0xd8>
							res = move_window(fs, sect++);
 8008168:	9701      	str	r7, [sp, #4]
							i = SS(fs);
 800816a:	2780      	movs	r7, #128	; 0x80
							p = fs->win;
 800816c:	9c05      	ldr	r4, [sp, #20]
							i = SS(fs);
 800816e:	00bf      	lsls	r7, r7, #2
							p = fs->win;
 8008170:	3430      	adds	r4, #48	; 0x30
						if (fs->fs_type == FS_FAT16) {
 8008172:	9b05      	ldr	r3, [sp, #20]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	2b02      	cmp	r3, #2
 8008178:	d10e      	bne.n	8008198 <f_getfree+0xbc>
	rv = rv << 8 | ptr[0];
 800817a:	7862      	ldrb	r2, [r4, #1]
 800817c:	7823      	ldrb	r3, [r4, #0]
 800817e:	0212      	lsls	r2, r2, #8
 8008180:	4313      	orrs	r3, r2
							if (ld_word(p) == 0) nfree++;
 8008182:	425a      	negs	r2, r3
 8008184:	4153      	adcs	r3, r2
							p += 2; i -= 2;
 8008186:	3402      	adds	r4, #2
							if (ld_word(p) == 0) nfree++;
 8008188:	18f6      	adds	r6, r6, r3
							p += 2; i -= 2;
 800818a:	3f02      	subs	r7, #2
					} while (--clst);
 800818c:	9b00      	ldr	r3, [sp, #0]
 800818e:	3b01      	subs	r3, #1
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1de      	bne.n	8008154 <f_getfree+0x78>
 8008196:	e7cf      	b.n	8008138 <f_getfree+0x5c>
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008198:	0020      	movs	r0, r4
 800819a:	f7fe fdd3 	bl	8006d44 <ld_dword>
 800819e:	0100      	lsls	r0, r0, #4
 80081a0:	4243      	negs	r3, r0
 80081a2:	4158      	adcs	r0, r3
							p += 4; i -= 4;
 80081a4:	3404      	adds	r4, #4
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80081a6:	1836      	adds	r6, r6, r0
							p += 4; i -= 4;
 80081a8:	3f04      	subs	r7, #4
 80081aa:	e7ef      	b.n	800818c <f_getfree+0xb0>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80081ac:	2501      	movs	r5, #1
 80081ae:	e7c3      	b.n	8008138 <f_getfree+0x5c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80081b0:	2502      	movs	r5, #2
 80081b2:	e7c1      	b.n	8008138 <f_getfree+0x5c>
							res = move_window(fs, sect++);
 80081b4:	0005      	movs	r5, r0
 80081b6:	e7bf      	b.n	8008138 <f_getfree+0x5c>

080081b8 <f_gets>:
{
 80081b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ba:	0006      	movs	r6, r0
 80081bc:	0017      	movs	r7, r2
	TCHAR c, *p = buff;
 80081be:	0005      	movs	r5, r0
	int n = 0;
 80081c0:	2400      	movs	r4, #0
{
 80081c2:	b085      	sub	sp, #20
 80081c4:	9101      	str	r1, [sp, #4]
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80081c6:	9b01      	ldr	r3, [sp, #4]
 80081c8:	3b01      	subs	r3, #1
 80081ca:	429c      	cmp	r4, r3
 80081cc:	da12      	bge.n	80081f4 <f_gets+0x3c>
		f_read(fp, s, 1, &rc);
 80081ce:	ab03      	add	r3, sp, #12
 80081d0:	2201      	movs	r2, #1
 80081d2:	a902      	add	r1, sp, #8
 80081d4:	0038      	movs	r0, r7
 80081d6:	f7ff fd69 	bl	8007cac <f_read>
		if (rc != 1) break;
 80081da:	9b03      	ldr	r3, [sp, #12]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d109      	bne.n	80081f4 <f_gets+0x3c>
		c = s[0];
 80081e0:	ab02      	add	r3, sp, #8
 80081e2:	781b      	ldrb	r3, [r3, #0]
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80081e4:	2b0d      	cmp	r3, #13
 80081e6:	d0ee      	beq.n	80081c6 <f_gets+0xe>
		*p++ = c;
 80081e8:	1c6a      	adds	r2, r5, #1
 80081ea:	702b      	strb	r3, [r5, #0]
		n++;
 80081ec:	3401      	adds	r4, #1
		*p++ = c;
 80081ee:	0015      	movs	r5, r2
		if (c == '\n') break;		/* Break on EOL */
 80081f0:	2b0a      	cmp	r3, #10
 80081f2:	d1e8      	bne.n	80081c6 <f_gets+0xe>
	*p = 0;
 80081f4:	2300      	movs	r3, #0
 80081f6:	702b      	strb	r3, [r5, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80081f8:	1e63      	subs	r3, r4, #1
 80081fa:	419c      	sbcs	r4, r3
 80081fc:	4264      	negs	r4, r4
 80081fe:	4026      	ands	r6, r4
}
 8008200:	0030      	movs	r0, r6
 8008202:	b005      	add	sp, #20
 8008204:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008206 <f_puts>:
	putbuff* pb,
	FIL* fp
)
{
	pb->fp = fp;
	pb->nchr = pb->idx = 0;
 8008206:	2300      	movs	r3, #0

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008208:	b510      	push	{r4, lr}
 800820a:	0004      	movs	r4, r0
 800820c:	b094      	sub	sp, #80	; 0x50
	pb->fp = fp;
 800820e:	9101      	str	r1, [sp, #4]
	pb->nchr = pb->idx = 0;
 8008210:	9302      	str	r3, [sp, #8]
 8008212:	9303      	str	r3, [sp, #12]
	putbuff pb;


	putc_init(&pb, fp);
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008214:	7821      	ldrb	r1, [r4, #0]
 8008216:	2900      	cmp	r1, #0
 8008218:	d104      	bne.n	8008224 <f_puts+0x1e>
	return putc_flush(&pb);
 800821a:	a801      	add	r0, sp, #4
 800821c:	f7ff feee 	bl	8007ffc <putc_flush>
}
 8008220:	b014      	add	sp, #80	; 0x50
 8008222:	bd10      	pop	{r4, pc}
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008224:	a801      	add	r0, sp, #4
 8008226:	3401      	adds	r4, #1
 8008228:	f7ff fec7 	bl	8007fba <putc_bfd>
 800822c:	e7f2      	b.n	8008214 <f_puts+0xe>
	...

08008230 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008230:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8008232:	4b0f      	ldr	r3, [pc, #60]	; (8008270 <FATFS_LinkDriverEx+0x40>)
  uint8_t ret = 1;
 8008234:	2501      	movs	r5, #1
  if(disk.nbr < _VOLUMES)
 8008236:	7a5c      	ldrb	r4, [r3, #9]
 8008238:	b2e4      	uxtb	r4, r4
 800823a:	2c00      	cmp	r4, #0
 800823c:	d115      	bne.n	800826a <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 800823e:	7a5d      	ldrb	r5, [r3, #9]
 8008240:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8008242:	7a5d      	ldrb	r5, [r3, #9]
 8008244:	00ad      	lsls	r5, r5, #2
 8008246:	195d      	adds	r5, r3, r5
 8008248:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 800824a:	7a58      	ldrb	r0, [r3, #9]
    DiskNum = disk.nbr++;
    path[0] = DiskNum + '0';
    path[1] = ':';
    path[2] = '/';
    path[3] = 0;
 800824c:	0025      	movs	r5, r4
    disk.lun[disk.nbr] = lun;
 800824e:	1818      	adds	r0, r3, r0
 8008250:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8008252:	7a5a      	ldrb	r2, [r3, #9]
 8008254:	b2d2      	uxtb	r2, r2
 8008256:	1c50      	adds	r0, r2, #1
 8008258:	b2c0      	uxtb	r0, r0
 800825a:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 800825c:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800825e:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8008260:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8008262:	3b0b      	subs	r3, #11
    path[0] = DiskNum + '0';
 8008264:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8008266:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8008268:	70cc      	strb	r4, [r1, #3]
    ret = 0;
  }

  return ret;
}
 800826a:	0028      	movs	r0, r5
 800826c:	bd30      	pop	{r4, r5, pc}
 800826e:	46c0      	nop			; (mov r8, r8)
 8008270:	20001510 	.word	0x20001510

08008274 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008274:	b510      	push	{r4, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8008276:	2200      	movs	r2, #0
 8008278:	f7ff ffda 	bl	8008230 <FATFS_LinkDriverEx>
}
 800827c:	bd10      	pop	{r4, pc}

0800827e <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 800827e:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 8008280:	2800      	cmp	r0, #0
 8008282:	d103      	bne.n	800828c <lv_disp_get_scr_act+0xe>
 8008284:	f005 f9a4 	bl	800d5d0 <lv_disp_get_default>
    if(!disp) {
        LV_LOG_WARN("lv_scr_act: no display registered to get its top layer");
        return NULL;
 8008288:	1e03      	subs	r3, r0, #0
    if(!disp) {
 800828a:	d000      	beq.n	800828e <lv_disp_get_scr_act+0x10>
    }

    return disp->act_scr;
 800828c:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 800828e:	0018      	movs	r0, r3
 8008290:	bd10      	pop	{r4, pc}

08008292 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 8008292:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 8008294:	2800      	cmp	r0, #0
 8008296:	d103      	bne.n	80082a0 <lv_disp_get_layer_top+0xe>
 8008298:	f005 f99a 	bl	800d5d0 <lv_disp_get_default>
    if(!disp) {
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
 800829c:	1e03      	subs	r3, r0, #0
    if(!disp) {
 800829e:	d000      	beq.n	80082a2 <lv_disp_get_layer_top+0x10>
    }

    return disp->top_layer;
 80082a0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
}
 80082a2:	0018      	movs	r0, r3
 80082a4:	bd10      	pop	{r4, pc}

080082a6 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 80082a6:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 80082a8:	2800      	cmp	r0, #0
 80082aa:	d103      	bne.n	80082b4 <lv_disp_get_layer_sys+0xe>
 80082ac:	f005 f990 	bl	800d5d0 <lv_disp_get_default>
    if(!disp) {
        LV_LOG_WARN("lv_layer_sys: no display registered to get its top layer");
        return NULL;
 80082b0:	1e03      	subs	r3, r0, #0
    if(!disp) {
 80082b2:	d000      	beq.n	80082b6 <lv_disp_get_layer_sys+0x10>
    }

    return disp->sys_layer;
 80082b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
}
 80082b6:	0018      	movs	r0, r3
 80082b8:	bd10      	pop	{r4, pc}

080082ba <obj_to_foreground>:

    if(group->focus_cb) group->focus_cb(group);
}

static void obj_to_foreground(lv_obj_t * obj)
{
 80082ba:	b570      	push	{r4, r5, r6, lr}
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
 80082bc:	2400      	movs	r4, #0
    while(i != NULL) {
        if(i->top != 0) last_top = i;
 80082be:	2520      	movs	r5, #32
    while(i != NULL) {
 80082c0:	2800      	cmp	r0, #0
 80082c2:	d105      	bne.n	80082d0 <obj_to_foreground+0x16>
        i = lv_obj_get_parent(i);
    }

    if(last_top != NULL) {
 80082c4:	2c00      	cmp	r4, #0
 80082c6:	d002      	beq.n	80082ce <obj_to_foreground+0x14>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
 80082c8:	0020      	movs	r0, r4
 80082ca:	f000 fa4a 	bl	8008762 <lv_obj_move_foreground>
    }
}
 80082ce:	bd70      	pop	{r4, r5, r6, pc}
        if(i->top != 0) last_top = i;
 80082d0:	0003      	movs	r3, r0
 80082d2:	3330      	adds	r3, #48	; 0x30
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	422b      	tst	r3, r5
 80082d8:	d000      	beq.n	80082dc <obj_to_foreground+0x22>
 80082da:	0004      	movs	r4, r0
        i = lv_obj_get_parent(i);
 80082dc:	f000 fe5d 	bl	8008f9a <lv_obj_get_parent>
 80082e0:	e7ee      	b.n	80082c0 <obj_to_foreground+0x6>

080082e2 <focus_next_core.part.0>:
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 80082e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082e4:	0005      	movs	r5, r0
    bool can_begin           = true;
 80082e6:	2701      	movs	r7, #1
    lv_obj_t ** obj_sentinel = NULL;
 80082e8:	2600      	movs	r6, #0
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 80082ea:	b085      	sub	sp, #20
    lv_obj_t ** obj_next     = group->obj_focus;
 80082ec:	68c4      	ldr	r4, [r0, #12]
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 80082ee:	9102      	str	r1, [sp, #8]
 80082f0:	9203      	str	r2, [sp, #12]
        if(obj_next == NULL) {
 80082f2:	2c00      	cmp	r4, #0
 80082f4:	d14e      	bne.n	8008394 <focus_next_core.part.0+0xb2>
            if(group->wrap || obj_sentinel == NULL) {
 80082f6:	002b      	movs	r3, r5
 80082f8:	2210      	movs	r2, #16
 80082fa:	3358      	adds	r3, #88	; 0x58
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	4213      	tst	r3, r2
 8008300:	d103      	bne.n	800830a <focus_next_core.part.0+0x28>
 8008302:	2e00      	cmp	r6, #0
 8008304:	d053      	beq.n	80083ae <focus_next_core.part.0+0xcc>
}
 8008306:	b005      	add	sp, #20
 8008308:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if(!can_begin) return;
 800830a:	2f00      	cmp	r7, #0
 800830c:	d0fb      	beq.n	8008306 <focus_next_core.part.0+0x24>
                obj_next  = begin(&group->obj_ll);
 800830e:	0028      	movs	r0, r5
 8008310:	9b02      	ldr	r3, [sp, #8]
 8008312:	4798      	blx	r3
        if(obj_sentinel == NULL) {
 8008314:	2700      	movs	r7, #0
                obj_next  = begin(&group->obj_ll);
 8008316:	0004      	movs	r4, r0
        if(obj_sentinel == NULL) {
 8008318:	42be      	cmp	r6, r7
 800831a:	d145      	bne.n	80083a8 <focus_next_core.part.0+0xc6>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 800831c:	2c00      	cmp	r4, #0
 800831e:	d0f2      	beq.n	8008306 <focus_next_core.part.0+0x24>
 8008320:	0026      	movs	r6, r4
 8008322:	2700      	movs	r7, #0
        if(!lv_obj_get_hidden(*obj_next)) break;
 8008324:	6820      	ldr	r0, [r4, #0]
 8008326:	f000 fedd 	bl	80090e4 <lv_obj_get_hidden>
 800832a:	9001      	str	r0, [sp, #4]
 800832c:	2800      	cmp	r0, #0
 800832e:	d1e0      	bne.n	80082f2 <focus_next_core.part.0+0x10>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 8008330:	68eb      	ldr	r3, [r5, #12]
 8008332:	42a3      	cmp	r3, r4
 8008334:	d0e7      	beq.n	8008306 <focus_next_core.part.0+0x24>
    if(group->obj_focus) {
 8008336:	2b00      	cmp	r3, #0
 8008338:	d010      	beq.n	800835c <focus_next_core.part.0+0x7a>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 800833a:	6818      	ldr	r0, [r3, #0]
 800833c:	9a01      	ldr	r2, [sp, #4]
 800833e:	69c3      	ldr	r3, [r0, #28]
 8008340:	2110      	movs	r1, #16
 8008342:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 8008344:	68eb      	ldr	r3, [r5, #12]
 8008346:	9a01      	ldr	r2, [sp, #4]
 8008348:	210d      	movs	r1, #13
 800834a:	6818      	ldr	r0, [r3, #0]
 800834c:	f000 f97a 	bl	8008644 <lv_event_send>
        if(res != LV_RES_OK) return;
 8008350:	2801      	cmp	r0, #1
 8008352:	d1d8      	bne.n	8008306 <focus_next_core.part.0+0x24>
        lv_obj_invalidate(*group->obj_focus);
 8008354:	68eb      	ldr	r3, [r5, #12]
 8008356:	6818      	ldr	r0, [r3, #0]
 8008358:	f000 f9b4 	bl	80086c4 <lv_obj_invalidate>
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 800835c:	6820      	ldr	r0, [r4, #0]
 800835e:	2200      	movs	r2, #0
 8008360:	69c3      	ldr	r3, [r0, #28]
 8008362:	210f      	movs	r1, #15
    group->obj_focus = obj_next;
 8008364:	60ec      	str	r4, [r5, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8008366:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 8008368:	68eb      	ldr	r3, [r5, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	210c      	movs	r1, #12
 800836e:	6818      	ldr	r0, [r3, #0]
 8008370:	f000 f968 	bl	8008644 <lv_event_send>
    if(res != LV_RES_OK) return;
 8008374:	2801      	cmp	r0, #1
 8008376:	d1c6      	bne.n	8008306 <focus_next_core.part.0+0x24>
    obj_to_foreground(*group->obj_focus);
 8008378:	68eb      	ldr	r3, [r5, #12]
 800837a:	6818      	ldr	r0, [r3, #0]
 800837c:	f7ff ff9d 	bl	80082ba <obj_to_foreground>
    lv_obj_invalidate(*group->obj_focus);
 8008380:	68eb      	ldr	r3, [r5, #12]
 8008382:	6818      	ldr	r0, [r3, #0]
 8008384:	f000 f99e 	bl	80086c4 <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 8008388:	69ab      	ldr	r3, [r5, #24]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d0bb      	beq.n	8008306 <focus_next_core.part.0+0x24>
 800838e:	0028      	movs	r0, r5
 8008390:	4798      	blx	r3
 8008392:	e7b8      	b.n	8008306 <focus_next_core.part.0+0x24>
        if(obj_sentinel == NULL) {
 8008394:	2e00      	cmp	r6, #0
 8008396:	d100      	bne.n	800839a <focus_next_core.part.0+0xb8>
 8008398:	0026      	movs	r6, r4
            obj_next = move(&group->obj_ll, obj_next);
 800839a:	0021      	movs	r1, r4
 800839c:	0028      	movs	r0, r5
 800839e:	9b03      	ldr	r3, [sp, #12]
 80083a0:	4798      	blx	r3
 80083a2:	0004      	movs	r4, r0
            if(obj_next == obj_sentinel) return;
 80083a4:	42b0      	cmp	r0, r6
 80083a6:	d0ae      	beq.n	8008306 <focus_next_core.part.0+0x24>
        if(obj_next == NULL) continue;
 80083a8:	2c00      	cmp	r4, #0
 80083aa:	d1bb      	bne.n	8008324 <focus_next_core.part.0+0x42>
 80083ac:	e7a3      	b.n	80082f6 <focus_next_core.part.0+0x14>
                if(!can_begin) return;
 80083ae:	2f00      	cmp	r7, #0
 80083b0:	d0a9      	beq.n	8008306 <focus_next_core.part.0+0x24>
                obj_next  = begin(&group->obj_ll);
 80083b2:	0028      	movs	r0, r5
 80083b4:	9b02      	ldr	r3, [sp, #8]
 80083b6:	4798      	blx	r3
 80083b8:	0004      	movs	r4, r0
 80083ba:	e7af      	b.n	800831c <focus_next_core.part.0+0x3a>

080083bc <lv_group_init>:
{
 80083bc:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 80083be:	215c      	movs	r1, #92	; 0x5c
 80083c0:	4801      	ldr	r0, [pc, #4]	; (80083c8 <lv_group_init+0xc>)
 80083c2:	f005 fc64 	bl	800dc8e <lv_ll_init>
}
 80083c6:	bd10      	pop	{r4, pc}
 80083c8:	20005500 	.word	0x20005500

080083cc <lv_group_focus_next>:
    if(group->frozen) return;
 80083cc:	0003      	movs	r3, r0
 80083ce:	3358      	adds	r3, #88	; 0x58
 80083d0:	781b      	ldrb	r3, [r3, #0]
{
 80083d2:	b510      	push	{r4, lr}
    if(group->frozen) return;
 80083d4:	07db      	lsls	r3, r3, #31
 80083d6:	d403      	bmi.n	80083e0 <lv_group_focus_next+0x14>
 80083d8:	4a02      	ldr	r2, [pc, #8]	; (80083e4 <lv_group_focus_next+0x18>)
 80083da:	4903      	ldr	r1, [pc, #12]	; (80083e8 <lv_group_focus_next+0x1c>)
 80083dc:	f7ff ff81 	bl	80082e2 <focus_next_core.part.0>
}
 80083e0:	bd10      	pop	{r4, pc}
 80083e2:	46c0      	nop			; (mov r8, r8)
 80083e4:	0800dd33 	.word	0x0800dd33
 80083e8:	0800dd23 	.word	0x0800dd23

080083ec <lv_group_focus_prev>:
    if(group->frozen) return;
 80083ec:	0003      	movs	r3, r0
 80083ee:	3358      	adds	r3, #88	; 0x58
 80083f0:	781b      	ldrb	r3, [r3, #0]
{
 80083f2:	b510      	push	{r4, lr}
    if(group->frozen) return;
 80083f4:	07db      	lsls	r3, r3, #31
 80083f6:	d403      	bmi.n	8008400 <lv_group_focus_prev+0x14>
 80083f8:	4a02      	ldr	r2, [pc, #8]	; (8008404 <lv_group_focus_prev+0x18>)
 80083fa:	4903      	ldr	r1, [pc, #12]	; (8008408 <lv_group_focus_prev+0x1c>)
 80083fc:	f7ff ff71 	bl	80082e2 <focus_next_core.part.0>
}
 8008400:	bd10      	pop	{r4, pc}
 8008402:	46c0      	nop			; (mov r8, r8)
 8008404:	0800dd4f 	.word	0x0800dd4f
 8008408:	0800dd2b 	.word	0x0800dd2b

0800840c <lv_group_refocus>:
{
 800840c:	b570      	push	{r4, r5, r6, lr}
    uint8_t temp_wrap = g->wrap;
 800840e:	0004      	movs	r4, r0
    g->wrap           = 1;
 8008410:	2310      	movs	r3, #16
    uint8_t temp_wrap = g->wrap;
 8008412:	3458      	adds	r4, #88	; 0x58
 8008414:	7822      	ldrb	r2, [r4, #0]
 8008416:	06d5      	lsls	r5, r2, #27
    g->wrap           = 1;
 8008418:	4313      	orrs	r3, r2
    uint8_t temp_wrap = g->wrap;
 800841a:	0fed      	lsrs	r5, r5, #31
    g->wrap           = 1;
 800841c:	7023      	strb	r3, [r4, #0]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 800841e:	071b      	lsls	r3, r3, #28
 8008420:	d408      	bmi.n	8008434 <lv_group_refocus+0x28>
        lv_group_focus_next(g);
 8008422:	f7ff ffd3 	bl	80083cc <lv_group_focus_next>
    g->wrap = temp_wrap;
 8008426:	2210      	movs	r2, #16
 8008428:	7823      	ldrb	r3, [r4, #0]
 800842a:	012d      	lsls	r5, r5, #4
 800842c:	4393      	bics	r3, r2
 800842e:	432b      	orrs	r3, r5
 8008430:	7023      	strb	r3, [r4, #0]
}
 8008432:	bd70      	pop	{r4, r5, r6, pc}
        lv_group_focus_prev(g);
 8008434:	f7ff ffda 	bl	80083ec <lv_group_focus_prev>
 8008438:	e7f5      	b.n	8008426 <lv_group_refocus+0x1a>

0800843a <lv_group_add_obj>:
{
 800843a:	b570      	push	{r4, r5, r6, lr}
 800843c:	0004      	movs	r4, r0
 800843e:	000d      	movs	r5, r1
    if(group == NULL) return;
 8008440:	2800      	cmp	r0, #0
 8008442:	d026      	beq.n	8008492 <lv_group_add_obj+0x58>
    LV_LL_READ(group->obj_ll, obj_i)
 8008444:	f005 fc6d 	bl	800dd22 <lv_ll_get_head>
 8008448:	2800      	cmp	r0, #0
 800844a:	d111      	bne.n	8008470 <lv_group_add_obj+0x36>
    if(obj->group_p) {
 800844c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800844e:	2b00      	cmp	r3, #0
 8008450:	d007      	beq.n	8008462 <lv_group_add_obj+0x28>
        if(lv_obj_is_focused(obj)) {
 8008452:	0028      	movs	r0, r5
 8008454:	f000 feb6 	bl	80091c4 <lv_obj_is_focused>
 8008458:	2800      	cmp	r0, #0
 800845a:	d002      	beq.n	8008462 <lv_group_add_obj+0x28>
            lv_group_refocus(obj->group_p);
 800845c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800845e:	f7ff ffd5 	bl	800840c <lv_group_refocus>
    obj->group_p     = group;
 8008462:	62ec      	str	r4, [r5, #44]	; 0x2c
    lv_obj_t ** next = lv_ll_ins_tail(&group->obj_ll);
 8008464:	0020      	movs	r0, r4
 8008466:	f005 fc3c 	bl	800dce2 <lv_ll_ins_tail>
 800846a:	1e06      	subs	r6, r0, #0
    lv_mem_assert(next);
 800846c:	d108      	bne.n	8008480 <lv_group_add_obj+0x46>
 800846e:	e7fe      	b.n	800846e <lv_group_add_obj+0x34>
        if((*obj_i) == obj) {
 8008470:	6803      	ldr	r3, [r0, #0]
 8008472:	42ab      	cmp	r3, r5
 8008474:	d00d      	beq.n	8008492 <lv_group_add_obj+0x58>
    LV_LL_READ(group->obj_ll, obj_i)
 8008476:	0001      	movs	r1, r0
 8008478:	0020      	movs	r0, r4
 800847a:	f005 fc5a 	bl	800dd32 <lv_ll_get_next>
 800847e:	e7e3      	b.n	8008448 <lv_group_add_obj+0xe>
    *next = obj;
 8008480:	6005      	str	r5, [r0, #0]
    if(lv_ll_get_head(&group->obj_ll) == next) {
 8008482:	0020      	movs	r0, r4
 8008484:	f005 fc4d 	bl	800dd22 <lv_ll_get_head>
 8008488:	4286      	cmp	r6, r0
 800848a:	d102      	bne.n	8008492 <lv_group_add_obj+0x58>
        lv_group_refocus(group);
 800848c:	0020      	movs	r0, r4
 800848e:	f7ff ffbd 	bl	800840c <lv_group_refocus>
}
 8008492:	bd70      	pop	{r4, r5, r6, pc}

08008494 <lv_group_mod_style>:
{
 8008494:	b570      	push	{r4, r5, r6, lr}
    lv_style_copy(&group->style_tmp, style);
 8008496:	0005      	movs	r5, r0
{
 8008498:	0004      	movs	r4, r0
    lv_style_copy(&group->style_tmp, style);
 800849a:	351c      	adds	r5, #28
 800849c:	0028      	movs	r0, r5
 800849e:	f001 f9f3 	bl	8009888 <lv_style_copy>
    if(group->editing) {
 80084a2:	0023      	movs	r3, r4
 80084a4:	3358      	adds	r3, #88	; 0x58
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	079b      	lsls	r3, r3, #30
 80084aa:	d507      	bpl.n	80084bc <lv_group_mod_style+0x28>
        if(group->style_mod_edit_cb) group->style_mod_edit_cb(group, &group->style_tmp);
 80084ac:	6963      	ldr	r3, [r4, #20]
        if(group->style_mod_cb) group->style_mod_cb(group, &group->style_tmp);
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d002      	beq.n	80084b8 <lv_group_mod_style+0x24>
 80084b2:	0029      	movs	r1, r5
 80084b4:	0020      	movs	r0, r4
 80084b6:	4798      	blx	r3
}
 80084b8:	0028      	movs	r0, r5
 80084ba:	bd70      	pop	{r4, r5, r6, pc}
        if(group->style_mod_cb) group->style_mod_cb(group, &group->style_tmp);
 80084bc:	6923      	ldr	r3, [r4, #16]
 80084be:	e7f6      	b.n	80084ae <lv_group_mod_style+0x1a>

080084c0 <lv_group_get_focused>:
    if(!group) return NULL;
 80084c0:	1e03      	subs	r3, r0, #0
 80084c2:	d003      	beq.n	80084cc <lv_group_get_focused+0xc>
    if(group->obj_focus == NULL) return NULL;
 80084c4:	68c2      	ldr	r2, [r0, #12]
    if(!group) return NULL;
 80084c6:	1e13      	subs	r3, r2, #0
    if(group->obj_focus == NULL) return NULL;
 80084c8:	d000      	beq.n	80084cc <lv_group_get_focused+0xc>
    return *group->obj_focus;
 80084ca:	6813      	ldr	r3, [r2, #0]
}
 80084cc:	0018      	movs	r0, r3
 80084ce:	4770      	bx	lr

080084d0 <lv_indev_reset.part.1>:
}
/**
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 */
void lv_indev_reset(lv_indev_t * indev)
 80084d0:	b510      	push	{r4, lr}
{
    if(indev)
        indev->proc.reset_query = 1;
    else {
        lv_indev_t * i = lv_indev_get_next(NULL);
 80084d2:	2000      	movs	r0, #0
 80084d4:	f005 f8d8 	bl	800d688 <lv_indev_get_next>
        while(i) {
            i->proc.reset_query = 1;
 80084d8:	2402      	movs	r4, #2
        while(i) {
 80084da:	2800      	cmp	r0, #0
 80084dc:	d100      	bne.n	80084e0 <lv_indev_reset.part.1+0x10>

            i = lv_indev_get_next(i);
        }
    }
}
 80084de:	bd10      	pop	{r4, pc}
            i->proc.reset_query = 1;
 80084e0:	0002      	movs	r2, r0
 80084e2:	324c      	adds	r2, #76	; 0x4c
 80084e4:	7813      	ldrb	r3, [r2, #0]
 80084e6:	4323      	orrs	r3, r4
 80084e8:	7013      	strb	r3, [r2, #0]
            i = lv_indev_get_next(i);
 80084ea:	f005 f8cd 	bl	800d688 <lv_indev_get_next>
 80084ee:	e7f4      	b.n	80084da <lv_indev_reset.part.1+0xa>

080084f0 <lv_indev_init>:
{
 80084f0:	b510      	push	{r4, lr}
 80084f2:	f7ff ffed 	bl	80084d0 <lv_indev_reset.part.1>
}
 80084f6:	bd10      	pop	{r4, pc}

080084f8 <lv_indev_get_act>:
    return indev_act;
 80084f8:	4b01      	ldr	r3, [pc, #4]	; (8008500 <lv_indev_get_act+0x8>)
 80084fa:	6818      	ldr	r0, [r3, #0]
}
 80084fc:	4770      	bx	lr
 80084fe:	46c0      	nop			; (mov r8, r8)
 8008500:	2000151c 	.word	0x2000151c

08008504 <refresh_children_position>:
 * @param obj pointer to an object which children will be repositioned
 * @param x_diff x coordinate shift
 * @param y_diff y coordinate shift
 */
static void refresh_children_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)
{
 8008504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_obj_t * i;
    LV_LL_READ(obj->child_ll, i)
 8008506:	1d05      	adds	r5, r0, #4
 8008508:	0028      	movs	r0, r5
{
 800850a:	000e      	movs	r6, r1
 800850c:	0017      	movs	r7, r2
    LV_LL_READ(obj->child_ll, i)
 800850e:	f005 fc08 	bl	800dd22 <lv_ll_get_head>
 8008512:	1e04      	subs	r4, r0, #0
 8008514:	d100      	bne.n	8008518 <refresh_children_position+0x14>
        i->coords.x2 += x_diff;
        i->coords.y2 += y_diff;

        refresh_children_position(i, x_diff, y_diff);
    }
}
 8008516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        i->coords.x1 += x_diff;
 8008518:	8a23      	ldrh	r3, [r4, #16]
 800851a:	b2b2      	uxth	r2, r6
        i->coords.y1 += y_diff;
 800851c:	8a61      	ldrh	r1, [r4, #18]
        i->coords.x1 += x_diff;
 800851e:	18d3      	adds	r3, r2, r3
 8008520:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
 8008522:	b2bb      	uxth	r3, r7
 8008524:	1859      	adds	r1, r3, r1
 8008526:	8261      	strh	r1, [r4, #18]
        i->coords.x2 += x_diff;
 8008528:	8aa1      	ldrh	r1, [r4, #20]
        refresh_children_position(i, x_diff, y_diff);
 800852a:	0020      	movs	r0, r4
        i->coords.x2 += x_diff;
 800852c:	1852      	adds	r2, r2, r1
 800852e:	82a2      	strh	r2, [r4, #20]
        i->coords.y2 += y_diff;
 8008530:	8ae2      	ldrh	r2, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
 8008532:	0031      	movs	r1, r6
        i->coords.y2 += y_diff;
 8008534:	189b      	adds	r3, r3, r2
 8008536:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
 8008538:	003a      	movs	r2, r7
 800853a:	f7ff ffe3 	bl	8008504 <refresh_children_position>
    LV_LL_READ(obj->child_ll, i)
 800853e:	0021      	movs	r1, r4
 8008540:	0028      	movs	r0, r5
 8008542:	f005 fbf6 	bl	800dd32 <lv_ll_get_next>
 8008546:	e7e4      	b.n	8008512 <refresh_children_position+0xe>

08008548 <lv_init>:
{
 8008548:	b510      	push	{r4, lr}
    if(lv_initialized) {
 800854a:	4c12      	ldr	r4, [pc, #72]	; (8008594 <lv_init+0x4c>)
 800854c:	7823      	ldrb	r3, [r4, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d11f      	bne.n	8008592 <lv_init+0x4a>
    lv_mem_init();
 8008552:	f005 fd2d 	bl	800dfb0 <lv_mem_init>
    lv_task_core_init();
 8008556:	f005 fdcb 	bl	800e0f0 <lv_task_core_init>
    lv_fs_init();
 800855a:	f005 fabb 	bl	800dad4 <lv_fs_init>
    lv_anim_core_init();
 800855e:	f005 f953 	bl	800d808 <lv_anim_core_init>
    lv_group_init();
 8008562:	f7ff ff2b 	bl	80083bc <lv_group_init>
    lv_style_init();
 8008566:	f001 f995 	bl	8009894 <lv_style_init>
    lv_refr_init();
 800856a:	f000 ff5d 	bl	8009428 <lv_refr_init>
    lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 800856e:	21b6      	movs	r1, #182	; 0xb6
 8008570:	4809      	ldr	r0, [pc, #36]	; (8008598 <lv_init+0x50>)
 8008572:	0049      	lsls	r1, r1, #1
 8008574:	f005 fb8b 	bl	800dc8e <lv_ll_init>
    lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8008578:	215c      	movs	r1, #92	; 0x5c
 800857a:	4808      	ldr	r0, [pc, #32]	; (800859c <lv_init+0x54>)
 800857c:	f005 fb87 	bl	800dc8e <lv_ll_init>
    lv_indev_init();
 8008580:	f7ff ffb6 	bl	80084f0 <lv_indev_init>
    lv_img_decoder_init();
 8008584:	f004 fe5a 	bl	800d23c <lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 8008588:	2001      	movs	r0, #1
 800858a:	f004 fb75 	bl	800cc78 <lv_img_cache_set_size>
    lv_initialized = true;
 800858e:	2301      	movs	r3, #1
 8008590:	7023      	strb	r3, [r4, #0]
}
 8008592:	bd10      	pop	{r4, pc}
 8008594:	20001528 	.word	0x20001528
 8008598:	200054c8 	.word	0x200054c8
 800859c:	200054b8 	.word	0x200054b8

080085a0 <lv_obj_set_click>:
    obj->click = (en == true ? 1 : 0);
 80085a0:	2201      	movs	r2, #1
 80085a2:	000b      	movs	r3, r1
 80085a4:	3030      	adds	r0, #48	; 0x30
 80085a6:	7801      	ldrb	r1, [r0, #0]
 80085a8:	4013      	ands	r3, r2
 80085aa:	4391      	bics	r1, r2
 80085ac:	4319      	orrs	r1, r3
 80085ae:	7001      	strb	r1, [r0, #0]
}
 80085b0:	4770      	bx	lr
	...

080085b4 <lv_event_send_func>:
{
 80085b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085b6:	b089      	sub	sp, #36	; 0x24
 80085b8:	9302      	str	r3, [sp, #8]
    event_temp_data.deleted = false;
 80085ba:	2300      	movs	r3, #0
    if(event_temp_data_head) {
 80085bc:	4e1f      	ldr	r6, [pc, #124]	; (800863c <lv_event_send_func+0x88>)
    event_temp_data.obj     = obj;
 80085be:	ad05      	add	r5, sp, #20
    event_temp_data.deleted = false;
 80085c0:	712b      	strb	r3, [r5, #4]
    event_temp_data.prev    = NULL;
 80085c2:	60ab      	str	r3, [r5, #8]
    if(event_temp_data_head) {
 80085c4:	6833      	ldr	r3, [r6, #0]
{
 80085c6:	9001      	str	r0, [sp, #4]
 80085c8:	000c      	movs	r4, r1
 80085ca:	9200      	str	r2, [sp, #0]
    event_temp_data.obj     = obj;
 80085cc:	9105      	str	r1, [sp, #20]
    if(event_temp_data_head) {
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d000      	beq.n	80085d4 <lv_event_send_func+0x20>
        event_temp_data.prev = event_temp_data_head;
 80085d2:	60ab      	str	r3, [r5, #8]
    const void * event_act_data_save = event_act_data;
 80085d4:	4f1a      	ldr	r7, [pc, #104]	; (8008640 <lv_event_send_func+0x8c>)
    event_temp_data_head = &event_temp_data;
 80085d6:	6035      	str	r5, [r6, #0]
    const void * event_act_data_save = event_act_data;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	9303      	str	r3, [sp, #12]
    event_act_data                   = data;
 80085dc:	9b02      	ldr	r3, [sp, #8]
 80085de:	603b      	str	r3, [r7, #0]
    lv_indev_t * indev_act = lv_indev_get_act();
 80085e0:	f7ff ff8a 	bl	80084f8 <lv_indev_get_act>
    if(indev_act) {
 80085e4:	2800      	cmp	r0, #0
 80085e6:	d004      	beq.n	80085f2 <lv_event_send_func+0x3e>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
 80085e8:	6883      	ldr	r3, [r0, #8]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d001      	beq.n	80085f2 <lv_event_send_func+0x3e>
 80085ee:	9900      	ldr	r1, [sp, #0]
 80085f0:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
 80085f2:	9b01      	ldr	r3, [sp, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <lv_event_send_func+0x4a>
 80085f8:	9900      	ldr	r1, [sp, #0]
 80085fa:	0020      	movs	r0, r4
 80085fc:	4798      	blx	r3
        return LV_RES_INV;
 80085fe:	2000      	movs	r0, #0
    event_act_data = event_act_data_save;
 8008600:	9b03      	ldr	r3, [sp, #12]
 8008602:	603b      	str	r3, [r7, #0]
    event_temp_data_head = event_temp_data_head->prev;
 8008604:	6833      	ldr	r3, [r6, #0]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	6033      	str	r3, [r6, #0]
    if(event_temp_data.deleted) {
 800860a:	792b      	ldrb	r3, [r5, #4]
 800860c:	4283      	cmp	r3, r0
 800860e:	d113      	bne.n	8008638 <lv_event_send_func+0x84>
    return LV_RES_OK;
 8008610:	3001      	adds	r0, #1
    if(obj) {
 8008612:	2c00      	cmp	r4, #0
 8008614:	d010      	beq.n	8008638 <lv_event_send_func+0x84>
        if(obj->parent_event && obj->par) {
 8008616:	0023      	movs	r3, r4
 8008618:	3330      	adds	r3, #48	; 0x30
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	2b7f      	cmp	r3, #127	; 0x7f
 800861e:	d90b      	bls.n	8008638 <lv_event_send_func+0x84>
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d008      	beq.n	8008638 <lv_event_send_func+0x84>
            lv_res_t res = lv_event_send(obj->par, event, data);
 8008626:	9a02      	ldr	r2, [sp, #8]
 8008628:	0018      	movs	r0, r3
 800862a:	9900      	ldr	r1, [sp, #0]
 800862c:	f000 f80a 	bl	8008644 <lv_event_send>
            if(res != LV_RES_OK) {
 8008630:	3801      	subs	r0, #1
 8008632:	4242      	negs	r2, r0
 8008634:	4142      	adcs	r2, r0
        return LV_RES_INV;
 8008636:	b2d0      	uxtb	r0, r2
}
 8008638:	b009      	add	sp, #36	; 0x24
 800863a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800863c:	20001524 	.word	0x20001524
 8008640:	20001520 	.word	0x20001520

08008644 <lv_event_send>:
{
 8008644:	b510      	push	{r4, lr}
 8008646:	0013      	movs	r3, r2
 8008648:	0004      	movs	r4, r0
    if(obj == NULL) return LV_RES_OK;
 800864a:	2001      	movs	r0, #1
 800864c:	2c00      	cmp	r4, #0
 800864e:	d004      	beq.n	800865a <lv_event_send+0x16>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 8008650:	000a      	movs	r2, r1
 8008652:	69a0      	ldr	r0, [r4, #24]
 8008654:	0021      	movs	r1, r4
 8008656:	f7ff ffad 	bl	80085b4 <lv_event_send_func>
}
 800865a:	bd10      	pop	{r4, pc}

0800865c <lv_obj_set_signal_cb>:
    obj->signal_cb = signal_cb;
 800865c:	61c1      	str	r1, [r0, #28]
}
 800865e:	4770      	bx	lr

08008660 <lv_obj_set_design_cb>:
    obj->design_cb = design_cb;
 8008660:	6201      	str	r1, [r0, #32]
}
 8008662:	4770      	bx	lr

08008664 <lv_obj_allocate_ext_attr>:
{
 8008664:	b510      	push	{r4, lr}
 8008666:	0004      	movs	r4, r0
    obj->ext_attr = lv_mem_realloc(obj->ext_attr, ext_size);
 8008668:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800866a:	f005 fd13 	bl	800e094 <lv_mem_realloc>
 800866e:	6260      	str	r0, [r4, #36]	; 0x24
}
 8008670:	bd10      	pop	{r4, pc}
	...

08008674 <lv_obj_get_disp>:
{
 8008674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(obj->par == NULL)
 8008676:	6803      	ldr	r3, [r0, #0]
{
 8008678:	0005      	movs	r5, r0
    if(obj->par == NULL)
 800867a:	2b00      	cmp	r3, #0
 800867c:	d108      	bne.n	8008690 <lv_obj_get_disp+0x1c>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 800867e:	4e10      	ldr	r6, [pc, #64]	; (80086c0 <lv_obj_get_disp+0x4c>)
 8008680:	0030      	movs	r0, r6
 8008682:	f005 fb4e 	bl	800dd22 <lv_ll_get_head>
 8008686:	1e04      	subs	r4, r0, #0
 8008688:	d106      	bne.n	8008698 <lv_obj_get_disp+0x24>
}
 800868a:	0020      	movs	r0, r4
 800868c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while(par != NULL);
 800868e:	001d      	movs	r5, r3
    return obj->par;
 8008690:	682b      	ldr	r3, [r5, #0]
    } while(par != NULL);
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1fb      	bne.n	800868e <lv_obj_get_disp+0x1a>
 8008696:	e7f2      	b.n	800867e <lv_obj_get_disp+0xa>
        LV_LL_READ(d->scr_ll, s)
 8008698:	0027      	movs	r7, r4
 800869a:	372c      	adds	r7, #44	; 0x2c
 800869c:	0038      	movs	r0, r7
 800869e:	f005 fb40 	bl	800dd22 <lv_ll_get_head>
 80086a2:	2800      	cmp	r0, #0
 80086a4:	d104      	bne.n	80086b0 <lv_obj_get_disp+0x3c>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 80086a6:	0021      	movs	r1, r4
 80086a8:	0030      	movs	r0, r6
 80086aa:	f005 fb42 	bl	800dd32 <lv_ll_get_next>
 80086ae:	e7ea      	b.n	8008686 <lv_obj_get_disp+0x12>
            if(s == scr) return d;
 80086b0:	4285      	cmp	r5, r0
 80086b2:	d0ea      	beq.n	800868a <lv_obj_get_disp+0x16>
        LV_LL_READ(d->scr_ll, s)
 80086b4:	0001      	movs	r1, r0
 80086b6:	0038      	movs	r0, r7
 80086b8:	f005 fb3b 	bl	800dd32 <lv_ll_get_next>
 80086bc:	e7f1      	b.n	80086a2 <lv_obj_get_disp+0x2e>
 80086be:	46c0      	nop			; (mov r8, r8)
 80086c0:	200054c8 	.word	0x200054c8

080086c4 <lv_obj_invalidate>:
    return obj->hidden == 0 ? false : true;
 80086c4:	0003      	movs	r3, r0
 80086c6:	3330      	adds	r3, #48	; 0x30
 80086c8:	781b      	ldrb	r3, [r3, #0]
{
 80086ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086cc:	0006      	movs	r6, r0
 80086ce:	0004      	movs	r4, r0
    if(lv_obj_get_hidden(obj)) return;
 80086d0:	06db      	lsls	r3, r3, #27
 80086d2:	d501      	bpl.n	80086d8 <lv_obj_invalidate+0x14>
}
 80086d4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    } while(par != NULL);
 80086d6:	001c      	movs	r4, r3
    return obj->par;
 80086d8:	6823      	ldr	r3, [r4, #0]
    } while(par != NULL);
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1fb      	bne.n	80086d6 <lv_obj_invalidate+0x12>
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 80086de:	0020      	movs	r0, r4
 80086e0:	f7ff ffc8 	bl	8008674 <lv_obj_get_disp>
 80086e4:	0005      	movs	r5, r0
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 80086e6:	f7ff fdca 	bl	800827e <lv_disp_get_scr_act>
 80086ea:	4284      	cmp	r4, r0
 80086ec:	d11f      	bne.n	800872e <lv_obj_invalidate+0x6a>
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 80086ee:	0031      	movs	r1, r6
 80086f0:	2208      	movs	r2, #8
 80086f2:	3110      	adds	r1, #16
 80086f4:	4668      	mov	r0, sp
        lv_coord_t ext_size = obj->ext_draw_pad;
 80086f6:	2334      	movs	r3, #52	; 0x34
 80086f8:	5ef7      	ldrsh	r7, [r6, r3]
    return obj->par;
 80086fa:	6834      	ldr	r4, [r6, #0]
 80086fc:	f007 f922 	bl	800f944 <memcpy>
        area_trunc.x1 -= ext_size;
 8008700:	466a      	mov	r2, sp
 8008702:	4669      	mov	r1, sp
    return obj->hidden == 0 ? false : true;
 8008704:	2610      	movs	r6, #16
        area_trunc.x1 -= ext_size;
 8008706:	8812      	ldrh	r2, [r2, #0]
 8008708:	b2bb      	uxth	r3, r7
 800870a:	1ad2      	subs	r2, r2, r3
 800870c:	800a      	strh	r2, [r1, #0]
        area_trunc.y1 -= ext_size;
 800870e:	884a      	ldrh	r2, [r1, #2]
 8008710:	1ad2      	subs	r2, r2, r3
 8008712:	804a      	strh	r2, [r1, #2]
        area_trunc.x2 += ext_size;
 8008714:	888a      	ldrh	r2, [r1, #4]
 8008716:	189a      	adds	r2, r3, r2
 8008718:	808a      	strh	r2, [r1, #4]
        area_trunc.y2 += ext_size;
 800871a:	88ca      	ldrh	r2, [r1, #6]
 800871c:	189b      	adds	r3, r3, r2
 800871e:	80cb      	strh	r3, [r1, #6]
        while(par != NULL) {
 8008720:	2c00      	cmp	r4, #0
 8008722:	d10f      	bne.n	8008744 <lv_obj_invalidate+0x80>
        if(union_ok) lv_inv_area(disp, &area_trunc);
 8008724:	4669      	mov	r1, sp
 8008726:	0028      	movs	r0, r5
 8008728:	f000 fe7f 	bl	800942a <lv_inv_area>
 800872c:	e7d2      	b.n	80086d4 <lv_obj_invalidate+0x10>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 800872e:	0028      	movs	r0, r5
 8008730:	f7ff fdaf 	bl	8008292 <lv_disp_get_layer_top>
 8008734:	4284      	cmp	r4, r0
 8008736:	d0da      	beq.n	80086ee <lv_obj_invalidate+0x2a>
       obj_scr == lv_disp_get_layer_sys(disp)) {
 8008738:	0028      	movs	r0, r5
 800873a:	f7ff fdb4 	bl	80082a6 <lv_disp_get_layer_sys>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 800873e:	4284      	cmp	r4, r0
 8008740:	d1c8      	bne.n	80086d4 <lv_obj_invalidate+0x10>
 8008742:	e7d4      	b.n	80086ee <lv_obj_invalidate+0x2a>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 8008744:	0022      	movs	r2, r4
 8008746:	4669      	mov	r1, sp
 8008748:	3210      	adds	r2, #16
 800874a:	4668      	mov	r0, sp
 800874c:	f005 f8f3 	bl	800d936 <lv_area_intersect>
            if(union_ok == false) break;       /*If no common parts with parent break;*/
 8008750:	2800      	cmp	r0, #0
 8008752:	d0bf      	beq.n	80086d4 <lv_obj_invalidate+0x10>
    return obj->hidden == 0 ? false : true;
 8008754:	0023      	movs	r3, r4
 8008756:	3330      	adds	r3, #48	; 0x30
 8008758:	781b      	ldrb	r3, [r3, #0]
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
 800875a:	4233      	tst	r3, r6
 800875c:	d1ba      	bne.n	80086d4 <lv_obj_invalidate+0x10>
    return obj->par;
 800875e:	6824      	ldr	r4, [r4, #0]
 8008760:	e7de      	b.n	8008720 <lv_obj_invalidate+0x5c>

08008762 <lv_obj_move_foreground>:
{
 8008762:	b570      	push	{r4, r5, r6, lr}
    return obj->par;
 8008764:	6804      	ldr	r4, [r0, #0]
{
 8008766:	0005      	movs	r5, r0
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 8008768:	1d26      	adds	r6, r4, #4
 800876a:	0030      	movs	r0, r6
 800876c:	f005 fad9 	bl	800dd22 <lv_ll_get_head>
 8008770:	4285      	cmp	r5, r0
 8008772:	d010      	beq.n	8008796 <lv_obj_move_foreground+0x34>
    lv_obj_invalidate(parent);
 8008774:	0020      	movs	r0, r4
 8008776:	f7ff ffa5 	bl	80086c4 <lv_obj_invalidate>
    lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
 800877a:	2301      	movs	r3, #1
 800877c:	002a      	movs	r2, r5
 800877e:	0031      	movs	r1, r6
 8008780:	0030      	movs	r0, r6
 8008782:	f005 fb5b 	bl	800de3c <lv_ll_chg_list>
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 8008786:	002a      	movs	r2, r5
 8008788:	2101      	movs	r1, #1
 800878a:	0020      	movs	r0, r4
 800878c:	69e3      	ldr	r3, [r4, #28]
 800878e:	4798      	blx	r3
    lv_obj_invalidate(parent);
 8008790:	0020      	movs	r0, r4
 8008792:	f7ff ff97 	bl	80086c4 <lv_obj_invalidate>
}
 8008796:	bd70      	pop	{r4, r5, r6, pc}

08008798 <lv_obj_set_pos>:
{
 8008798:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_obj_t * par = obj->par;
 800879a:	6807      	ldr	r7, [r0, #0]
    diff.x = x - obj->coords.x1;
 800879c:	8a06      	ldrh	r6, [r0, #16]
 800879e:	8a3b      	ldrh	r3, [r7, #16]
{
 80087a0:	b085      	sub	sp, #20
    diff.x = x - obj->coords.x1;
 80087a2:	1b9e      	subs	r6, r3, r6
 80087a4:	1876      	adds	r6, r6, r1
 80087a6:	b2b6      	uxth	r6, r6
 80087a8:	b233      	sxth	r3, r6
 80087aa:	9300      	str	r3, [sp, #0]
    diff.y = y - obj->coords.y1;
 80087ac:	8a7b      	ldrh	r3, [r7, #18]
 80087ae:	8a45      	ldrh	r5, [r0, #18]
{
 80087b0:	0004      	movs	r4, r0
    diff.y = y - obj->coords.y1;
 80087b2:	1b5d      	subs	r5, r3, r5
 80087b4:	18ad      	adds	r5, r5, r2
 80087b6:	b2ad      	uxth	r5, r5
 80087b8:	b22b      	sxth	r3, r5
 80087ba:	9301      	str	r3, [sp, #4]
    if(diff.x == 0 && diff.y == 0) return;
 80087bc:	9b00      	ldr	r3, [sp, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d102      	bne.n	80087c8 <lv_obj_set_pos+0x30>
 80087c2:	9b01      	ldr	r3, [sp, #4]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d026      	beq.n	8008816 <lv_obj_set_pos+0x7e>
    lv_obj_invalidate(obj);
 80087c8:	0020      	movs	r0, r4
 80087ca:	f7ff ff7b 	bl	80086c4 <lv_obj_invalidate>
 80087ce:	0021      	movs	r1, r4
 80087d0:	2208      	movs	r2, #8
 80087d2:	3110      	adds	r1, #16
 80087d4:	a802      	add	r0, sp, #8
 80087d6:	f007 f8b5 	bl	800f944 <memcpy>
    obj->coords.x1 += diff.x;
 80087da:	8a23      	ldrh	r3, [r4, #16]
    obj->coords.x2 += diff.x;
 80087dc:	8aa1      	ldrh	r1, [r4, #20]
    obj->coords.x1 += diff.x;
 80087de:	18f3      	adds	r3, r6, r3
    obj->coords.y2 += diff.y;
 80087e0:	8ae2      	ldrh	r2, [r4, #22]
    obj->coords.x1 += diff.x;
 80087e2:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
 80087e4:	8a63      	ldrh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
 80087e6:	1876      	adds	r6, r6, r1
    obj->coords.y1 += diff.y;
 80087e8:	18eb      	adds	r3, r5, r3
    obj->coords.y2 += diff.y;
 80087ea:	18ad      	adds	r5, r5, r2
    obj->coords.y1 += diff.y;
 80087ec:	8263      	strh	r3, [r4, #18]
    refresh_children_position(obj, diff.x, diff.y);
 80087ee:	9a01      	ldr	r2, [sp, #4]
 80087f0:	9900      	ldr	r1, [sp, #0]
 80087f2:	0020      	movs	r0, r4
    obj->coords.x2 += diff.x;
 80087f4:	82a6      	strh	r6, [r4, #20]
    obj->coords.y2 += diff.y;
 80087f6:	82e5      	strh	r5, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
 80087f8:	f7ff fe84 	bl	8008504 <refresh_children_position>
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 80087fc:	aa02      	add	r2, sp, #8
 80087fe:	2102      	movs	r1, #2
 8008800:	69e3      	ldr	r3, [r4, #28]
 8008802:	0020      	movs	r0, r4
 8008804:	4798      	blx	r3
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	0022      	movs	r2, r4
 800880a:	2101      	movs	r1, #1
 800880c:	0038      	movs	r0, r7
 800880e:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8008810:	0020      	movs	r0, r4
 8008812:	f7ff ff57 	bl	80086c4 <lv_obj_invalidate>
}
 8008816:	b005      	add	sp, #20
 8008818:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800881a <lv_obj_set_x>:
{
 800881a:	b510      	push	{r4, lr}
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800881c:	6803      	ldr	r3, [r0, #0]
 800881e:	8a42      	ldrh	r2, [r0, #18]
 8008820:	8a5b      	ldrh	r3, [r3, #18]
 8008822:	1ad2      	subs	r2, r2, r3
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
 8008824:	b212      	sxth	r2, r2
 8008826:	f7ff ffb7 	bl	8008798 <lv_obj_set_pos>
}
 800882a:	bd10      	pop	{r4, pc}

0800882c <lv_obj_set_y>:
{
 800882c:	b510      	push	{r4, lr}
 800882e:	000a      	movs	r2, r1
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8008830:	6801      	ldr	r1, [r0, #0]
 8008832:	8a03      	ldrh	r3, [r0, #16]
 8008834:	8a09      	ldrh	r1, [r1, #16]
 8008836:	1a59      	subs	r1, r3, r1
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 8008838:	b209      	sxth	r1, r1
 800883a:	f7ff ffad 	bl	8008798 <lv_obj_set_pos>
}
 800883e:	bd10      	pop	{r4, pc}

08008840 <lv_obj_align>:
{
 8008840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008842:	0005      	movs	r5, r0
 8008844:	b085      	sub	sp, #20
 8008846:	9302      	str	r3, [sp, #8]
 8008848:	ab0a      	add	r3, sp, #40	; 0x28
 800884a:	0016      	movs	r6, r2
 800884c:	2200      	movs	r2, #0
 800884e:	5e9b      	ldrsh	r3, [r3, r2]
    return obj->par;
 8008850:	6800      	ldr	r0, [r0, #0]
{
 8008852:	9303      	str	r3, [sp, #12]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8008854:	8a47      	ldrh	r7, [r0, #18]
{
 8008856:	000c      	movs	r4, r1
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8008858:	8a2a      	ldrh	r2, [r5, #16]
 800885a:	8a01      	ldrh	r1, [r0, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800885c:	8a6b      	ldrh	r3, [r5, #18]
 800885e:	9701      	str	r7, [sp, #4]
    if(base == NULL) {
 8008860:	2c00      	cmp	r4, #0
 8008862:	d100      	bne.n	8008866 <lv_obj_align+0x26>
 8008864:	0004      	movs	r4, r0
    switch(align) {
 8008866:	2e14      	cmp	r6, #20
 8008868:	d817      	bhi.n	800889a <lv_obj_align+0x5a>
 800886a:	0030      	movs	r0, r6
 800886c:	f7f7 fc6e 	bl	800014c <__gnu_thumb1_case_uhi>
 8008870:	011e001b 	.word	0x011e001b
 8008874:	0050003d 	.word	0x0050003d
 8008878:	005e0057 	.word	0x005e0057
 800887c:	007b0074 	.word	0x007b0074
 8008880:	00c600ae 	.word	0x00c600ae
 8008884:	00df00ca 	.word	0x00df00ca
 8008888:	00e900e6 	.word	0x00e900e6
 800888c:	010600ff 	.word	0x010600ff
 8008890:	010e010a 	.word	0x010e010a
 8008894:	01180112 	.word	0x01180112
 8008898:	011b      	.short	0x011b
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800889a:	1a52      	subs	r2, r2, r1
 800889c:	b217      	sxth	r7, r2
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800889e:	9a01      	ldr	r2, [sp, #4]
 80088a0:	1a9a      	subs	r2, r3, r2
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 80088a2:	b212      	sxth	r2, r2
            break;
 80088a4:	e071      	b.n	800898a <lv_obj_align+0x14a>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 80088a6:	8aa0      	ldrh	r0, [r4, #20]
 80088a8:	8a27      	ldrh	r7, [r4, #16]
 80088aa:	3001      	adds	r0, #1
 80088ac:	1bc0      	subs	r0, r0, r7
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80088ae:	b200      	sxth	r0, r0
 80088b0:	0fc7      	lsrs	r7, r0, #31
 80088b2:	1838      	adds	r0, r7, r0
 80088b4:	8aaf      	ldrh	r7, [r5, #20]
 80088b6:	1040      	asrs	r0, r0, #1
 80088b8:	3701      	adds	r7, #1
 80088ba:	1aba      	subs	r2, r7, r2
 80088bc:	b212      	sxth	r2, r2
 80088be:	0fd7      	lsrs	r7, r2, #31
 80088c0:	18ba      	adds	r2, r7, r2
 80088c2:	1052      	asrs	r2, r2, #1
 80088c4:	1a82      	subs	r2, r0, r2
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 80088c6:	8ae0      	ldrh	r0, [r4, #22]
            new_x = -lv_obj_get_width(obj);
 80088c8:	b217      	sxth	r7, r2
 80088ca:	8a62      	ldrh	r2, [r4, #18]
 80088cc:	3001      	adds	r0, #1
 80088ce:	1a80      	subs	r0, r0, r2
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80088d0:	b200      	sxth	r0, r0
 80088d2:	0fc2      	lsrs	r2, r0, #31
 80088d4:	1810      	adds	r0, r2, r0
 80088d6:	8aea      	ldrh	r2, [r5, #22]
 80088d8:	1040      	asrs	r0, r0, #1
 80088da:	3201      	adds	r2, #1
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	b21b      	sxth	r3, r3
 80088e0:	0fda      	lsrs	r2, r3, #31
 80088e2:	18d2      	adds	r2, r2, r3
 80088e4:	1052      	asrs	r2, r2, #1
 80088e6:	1a82      	subs	r2, r0, r2
 80088e8:	e7db      	b.n	80088a2 <lv_obj_align+0x62>
    return area_p->x2 - area_p->x1 + 1;
 80088ea:	8aa3      	ldrh	r3, [r4, #20]
 80088ec:	8a20      	ldrh	r0, [r4, #16]
 80088ee:	3301      	adds	r3, #1
 80088f0:	1a1b      	subs	r3, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80088f2:	b21b      	sxth	r3, r3
 80088f4:	0fd8      	lsrs	r0, r3, #31
 80088f6:	18c3      	adds	r3, r0, r3
 80088f8:	8aa8      	ldrh	r0, [r5, #20]
 80088fa:	105b      	asrs	r3, r3, #1
 80088fc:	3001      	adds	r0, #1
 80088fe:	1a82      	subs	r2, r0, r2
 8008900:	b212      	sxth	r2, r2
 8008902:	0fd0      	lsrs	r0, r2, #31
 8008904:	1882      	adds	r2, r0, r2
 8008906:	1052      	asrs	r2, r2, #1
 8008908:	1a9a      	subs	r2, r3, r2
            new_x = -lv_obj_get_width(obj);
 800890a:	b217      	sxth	r7, r2
            new_y = 0;
 800890c:	2200      	movs	r2, #0
            break;
 800890e:	e03c      	b.n	800898a <lv_obj_align+0x14a>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8008910:	8aab      	ldrh	r3, [r5, #20]
 8008912:	1a9b      	subs	r3, r3, r2
 8008914:	8aa2      	ldrh	r2, [r4, #20]
 8008916:	1ad2      	subs	r2, r2, r3
 8008918:	8a23      	ldrh	r3, [r4, #16]
 800891a:	1ad2      	subs	r2, r2, r3
 800891c:	e7f5      	b.n	800890a <lv_obj_align+0xca>
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800891e:	8aea      	ldrh	r2, [r5, #22]
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	8ae2      	ldrh	r2, [r4, #22]
 8008924:	1ad2      	subs	r2, r2, r3
    return area_p->y2 - area_p->y1 + 1;
 8008926:	8a60      	ldrh	r0, [r4, #18]
 8008928:	1a12      	subs	r2, r2, r0
 800892a:	e02c      	b.n	8008986 <lv_obj_align+0x146>
    return area_p->x2 - area_p->x1 + 1;
 800892c:	8aa0      	ldrh	r0, [r4, #20]
 800892e:	8a27      	ldrh	r7, [r4, #16]
 8008930:	3001      	adds	r0, #1
 8008932:	1bc0      	subs	r0, r0, r7
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8008934:	b200      	sxth	r0, r0
 8008936:	0fc7      	lsrs	r7, r0, #31
 8008938:	1838      	adds	r0, r7, r0
 800893a:	8aaf      	ldrh	r7, [r5, #20]
 800893c:	1040      	asrs	r0, r0, #1
 800893e:	3701      	adds	r7, #1
 8008940:	1aba      	subs	r2, r7, r2
 8008942:	b212      	sxth	r2, r2
 8008944:	0fd7      	lsrs	r7, r2, #31
 8008946:	18ba      	adds	r2, r7, r2
 8008948:	1052      	asrs	r2, r2, #1
 800894a:	1a82      	subs	r2, r0, r2
 800894c:	b217      	sxth	r7, r2
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800894e:	8aea      	ldrh	r2, [r5, #22]
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	8ae2      	ldrh	r2, [r4, #22]
 8008954:	1ad2      	subs	r2, r2, r3
 8008956:	e087      	b.n	8008a68 <lv_obj_align+0x228>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8008958:	8aa8      	ldrh	r0, [r5, #20]
 800895a:	1a80      	subs	r0, r0, r2
 800895c:	8aa2      	ldrh	r2, [r4, #20]
 800895e:	1a12      	subs	r2, r2, r0
 8008960:	8a20      	ldrh	r0, [r4, #16]
 8008962:	1a12      	subs	r2, r2, r0
 8008964:	e7f2      	b.n	800894c <lv_obj_align+0x10c>
    return area_p->y2 - area_p->y1 + 1;
 8008966:	8ae0      	ldrh	r0, [r4, #22]
 8008968:	8a62      	ldrh	r2, [r4, #18]
 800896a:	3001      	adds	r0, #1
 800896c:	1a80      	subs	r0, r0, r2
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800896e:	b200      	sxth	r0, r0
 8008970:	0fc2      	lsrs	r2, r0, #31
 8008972:	1810      	adds	r0, r2, r0
 8008974:	8aea      	ldrh	r2, [r5, #22]
 8008976:	1040      	asrs	r0, r0, #1
 8008978:	3201      	adds	r2, #1
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	b21b      	sxth	r3, r3
 800897e:	0fda      	lsrs	r2, r3, #31
 8008980:	18d3      	adds	r3, r2, r3
 8008982:	105b      	asrs	r3, r3, #1
 8008984:	1ac2      	subs	r2, r0, r3
            new_x = 0;
 8008986:	2700      	movs	r7, #0
 8008988:	b212      	sxth	r2, r2
    new_x -= par_abs_x;
 800898a:	9b02      	ldr	r3, [sp, #8]
    new_y -= par_abs_y;
 800898c:	9801      	ldr	r0, [sp, #4]
    new_x -= par_abs_x;
 800898e:	1a59      	subs	r1, r3, r1
 8008990:	8a23      	ldrh	r3, [r4, #16]
 8008992:	1859      	adds	r1, r3, r1
    new_y -= par_abs_y;
 8008994:	9b03      	ldr	r3, [sp, #12]
    new_x -= par_abs_x;
 8008996:	19c9      	adds	r1, r1, r7
    new_y -= par_abs_y;
 8008998:	8a67      	ldrh	r7, [r4, #18]
 800899a:	1a18      	subs	r0, r3, r0
 800899c:	183f      	adds	r7, r7, r0
 800899e:	18ba      	adds	r2, r7, r2
    lv_obj_set_pos(obj, new_x, new_y);
 80089a0:	0028      	movs	r0, r5
 80089a2:	b212      	sxth	r2, r2
 80089a4:	b209      	sxth	r1, r1
 80089a6:	f7ff fef7 	bl	8008798 <lv_obj_set_pos>
    obj->realign.align       = align;
 80089aa:	002b      	movs	r3, r5
 80089ac:	3340      	adds	r3, #64	; 0x40
 80089ae:	701e      	strb	r6, [r3, #0]
    obj->realign.xofs        = x_mod;
 80089b0:	466b      	mov	r3, sp
 80089b2:	891b      	ldrh	r3, [r3, #8]
    obj->realign.origo_align = 0;
 80089b4:	2202      	movs	r2, #2
    obj->realign.xofs        = x_mod;
 80089b6:	87ab      	strh	r3, [r5, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 80089b8:	466b      	mov	r3, sp
 80089ba:	899b      	ldrh	r3, [r3, #12]
    obj->realign.base        = base;
 80089bc:	63ac      	str	r4, [r5, #56]	; 0x38
    obj->realign.yofs        = y_mod;
 80089be:	87eb      	strh	r3, [r5, #62]	; 0x3e
    obj->realign.origo_align = 0;
 80089c0:	3541      	adds	r5, #65	; 0x41
 80089c2:	782b      	ldrb	r3, [r5, #0]
 80089c4:	4393      	bics	r3, r2
 80089c6:	702b      	strb	r3, [r5, #0]
}
 80089c8:	b005      	add	sp, #20
 80089ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80089cc:	8aa8      	ldrh	r0, [r5, #20]
 80089ce:	1a80      	subs	r0, r0, r2
 80089d0:	8aa2      	ldrh	r2, [r4, #20]
 80089d2:	1a12      	subs	r2, r2, r0
    return area_p->x2 - area_p->x1 + 1;
 80089d4:	8a20      	ldrh	r0, [r4, #16]
 80089d6:	1a12      	subs	r2, r2, r0
 80089d8:	b217      	sxth	r7, r2
    return area_p->y2 - area_p->y1 + 1;
 80089da:	8ae2      	ldrh	r2, [r4, #22]
 80089dc:	8a60      	ldrh	r0, [r4, #18]
 80089de:	3201      	adds	r2, #1
 80089e0:	1a12      	subs	r2, r2, r0
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80089e2:	b212      	sxth	r2, r2
 80089e4:	0fd0      	lsrs	r0, r2, #31
 80089e6:	1882      	adds	r2, r0, r2
 80089e8:	8ae8      	ldrh	r0, [r5, #22]
 80089ea:	1052      	asrs	r2, r2, #1
 80089ec:	3001      	adds	r0, #1
 80089ee:	1ac3      	subs	r3, r0, r3
 80089f0:	b21b      	sxth	r3, r3
 80089f2:	0fd8      	lsrs	r0, r3, #31
 80089f4:	18c3      	adds	r3, r0, r3
 80089f6:	105b      	asrs	r3, r3, #1
 80089f8:	1ad2      	subs	r2, r2, r3
 80089fa:	e752      	b.n	80088a2 <lv_obj_align+0x62>
 80089fc:	8aea      	ldrh	r2, [r5, #22]
 80089fe:	1ad2      	subs	r2, r2, r3
            new_y = -lv_obj_get_height(obj);
 8008a00:	43d2      	mvns	r2, r2
 8008a02:	e7c0      	b.n	8008986 <lv_obj_align+0x146>
    return area_p->x2 - area_p->x1 + 1;
 8008a04:	8aa0      	ldrh	r0, [r4, #20]
 8008a06:	8a27      	ldrh	r7, [r4, #16]
 8008a08:	3001      	adds	r0, #1
 8008a0a:	1bc0      	subs	r0, r0, r7
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8008a0c:	b200      	sxth	r0, r0
 8008a0e:	0fc7      	lsrs	r7, r0, #31
 8008a10:	1838      	adds	r0, r7, r0
 8008a12:	8aaf      	ldrh	r7, [r5, #20]
 8008a14:	1040      	asrs	r0, r0, #1
 8008a16:	3701      	adds	r7, #1
 8008a18:	1aba      	subs	r2, r7, r2
 8008a1a:	b212      	sxth	r2, r2
 8008a1c:	0fd7      	lsrs	r7, r2, #31
 8008a1e:	18ba      	adds	r2, r7, r2
 8008a20:	1052      	asrs	r2, r2, #1
 8008a22:	1a82      	subs	r2, r0, r2
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8008a24:	b217      	sxth	r7, r2
    return area_p->y2 - area_p->y1 + 1;
 8008a26:	8aea      	ldrh	r2, [r5, #22]
 8008a28:	1ad2      	subs	r2, r2, r3
            new_y = -lv_obj_get_height(obj);
 8008a2a:	43d2      	mvns	r2, r2
 8008a2c:	e739      	b.n	80088a2 <lv_obj_align+0x62>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8008a2e:	8aa8      	ldrh	r0, [r5, #20]
 8008a30:	1a80      	subs	r0, r0, r2
 8008a32:	8aa2      	ldrh	r2, [r4, #20]
 8008a34:	1a12      	subs	r2, r2, r0
 8008a36:	8a20      	ldrh	r0, [r4, #16]
 8008a38:	1a12      	subs	r2, r2, r0
 8008a3a:	e7f3      	b.n	8008a24 <lv_obj_align+0x1e4>
 8008a3c:	8ae2      	ldrh	r2, [r4, #22]
 8008a3e:	3201      	adds	r2, #1
 8008a40:	e771      	b.n	8008926 <lv_obj_align+0xe6>
    return area_p->x2 - area_p->x1 + 1;
 8008a42:	8aa3      	ldrh	r3, [r4, #20]
 8008a44:	8a20      	ldrh	r0, [r4, #16]
 8008a46:	3301      	adds	r3, #1
 8008a48:	1a1b      	subs	r3, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8008a4a:	b21b      	sxth	r3, r3
 8008a4c:	0fd8      	lsrs	r0, r3, #31
 8008a4e:	18c3      	adds	r3, r0, r3
 8008a50:	8aa8      	ldrh	r0, [r5, #20]
 8008a52:	105b      	asrs	r3, r3, #1
 8008a54:	3001      	adds	r0, #1
 8008a56:	1a82      	subs	r2, r0, r2
 8008a58:	b212      	sxth	r2, r2
 8008a5a:	0fd0      	lsrs	r0, r2, #31
 8008a5c:	1882      	adds	r2, r0, r2
 8008a5e:	1052      	asrs	r2, r2, #1
 8008a60:	1a9a      	subs	r2, r3, r2
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8008a62:	b217      	sxth	r7, r2
    return area_p->y2 - area_p->y1 + 1;
 8008a64:	8ae2      	ldrh	r2, [r4, #22]
 8008a66:	3201      	adds	r2, #1
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8008a68:	8a60      	ldrh	r0, [r4, #18]
 8008a6a:	1a12      	subs	r2, r2, r0
 8008a6c:	e719      	b.n	80088a2 <lv_obj_align+0x62>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8008a6e:	8aab      	ldrh	r3, [r5, #20]
 8008a70:	1a9b      	subs	r3, r3, r2
 8008a72:	8aa2      	ldrh	r2, [r4, #20]
 8008a74:	1ad2      	subs	r2, r2, r3
 8008a76:	8a23      	ldrh	r3, [r4, #16]
 8008a78:	1ad2      	subs	r2, r2, r3
 8008a7a:	e7f2      	b.n	8008a62 <lv_obj_align+0x222>
    return area_p->x2 - area_p->x1 + 1;
 8008a7c:	8aab      	ldrh	r3, [r5, #20]
 8008a7e:	1a9a      	subs	r2, r3, r2
            new_x = -lv_obj_get_width(obj);
 8008a80:	43d2      	mvns	r2, r2
 8008a82:	e742      	b.n	800890a <lv_obj_align+0xca>
 8008a84:	8aa8      	ldrh	r0, [r5, #20]
 8008a86:	1a82      	subs	r2, r0, r2
            new_x = -lv_obj_get_width(obj);
 8008a88:	43d2      	mvns	r2, r2
 8008a8a:	e71c      	b.n	80088c6 <lv_obj_align+0x86>
 8008a8c:	8aa8      	ldrh	r0, [r5, #20]
 8008a8e:	1a82      	subs	r2, r0, r2
            new_x = -lv_obj_get_width(obj);
 8008a90:	43d2      	mvns	r2, r2
 8008a92:	e75b      	b.n	800894c <lv_obj_align+0x10c>
 8008a94:	8aa3      	ldrh	r3, [r4, #20]
 8008a96:	8a22      	ldrh	r2, [r4, #16]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	1a9b      	subs	r3, r3, r2
 8008a9c:	b21f      	sxth	r7, r3
 8008a9e:	e735      	b.n	800890c <lv_obj_align+0xcc>
 8008aa0:	8aa2      	ldrh	r2, [r4, #20]
 8008aa2:	3201      	adds	r2, #1
 8008aa4:	e796      	b.n	80089d4 <lv_obj_align+0x194>
 8008aa6:	8aa2      	ldrh	r2, [r4, #20]
 8008aa8:	3201      	adds	r2, #1
 8008aaa:	e759      	b.n	8008960 <lv_obj_align+0x120>
            new_y = 0;
 8008aac:	2200      	movs	r2, #0
            new_x = 0;
 8008aae:	0017      	movs	r7, r2
 8008ab0:	e76b      	b.n	800898a <lv_obj_align+0x14a>

08008ab2 <lv_obj_align_origo>:
{
 8008ab2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ab4:	0005      	movs	r5, r0
 8008ab6:	b087      	sub	sp, #28
 8008ab8:	9304      	str	r3, [sp, #16]
 8008aba:	ab0c      	add	r3, sp, #48	; 0x30
 8008abc:	0016      	movs	r6, r2
 8008abe:	2200      	movs	r2, #0
 8008ac0:	5e9b      	ldrsh	r3, [r3, r2]
    return obj->par;
 8008ac2:	6807      	ldr	r7, [r0, #0]
{
 8008ac4:	9305      	str	r3, [sp, #20]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8008ac6:	8a3b      	ldrh	r3, [r7, #16]
 8008ac8:	8a00      	ldrh	r0, [r0, #16]
 8008aca:	9301      	str	r3, [sp, #4]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8008acc:	8a6b      	ldrh	r3, [r5, #18]
{
 8008ace:	000c      	movs	r4, r1
 8008ad0:	8aa9      	ldrh	r1, [r5, #20]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8008ad2:	9303      	str	r3, [sp, #12]
 8008ad4:	3101      	adds	r1, #1
 8008ad6:	8a7b      	ldrh	r3, [r7, #18]
 8008ad8:	1a09      	subs	r1, r1, r0
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 8008ada:	b209      	sxth	r1, r1
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8008adc:	9302      	str	r3, [sp, #8]
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 8008ade:	0fcb      	lsrs	r3, r1, #31
 8008ae0:	1859      	adds	r1, r3, r1
    return area_p->y2 - area_p->y1 + 1;
 8008ae2:	8aeb      	ldrh	r3, [r5, #22]
 8008ae4:	9a03      	ldr	r2, [sp, #12]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	1a9b      	subs	r3, r3, r2
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 8008aea:	b21b      	sxth	r3, r3
 8008aec:	0fda      	lsrs	r2, r3, #31
 8008aee:	4694      	mov	ip, r2
 8008af0:	4463      	add	r3, ip
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 8008af2:	1049      	asrs	r1, r1, #1
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 8008af4:	105b      	asrs	r3, r3, #1
    if(base == NULL) {
 8008af6:	2c00      	cmp	r4, #0
 8008af8:	d100      	bne.n	8008afc <lv_obj_align_origo+0x4a>
 8008afa:	003c      	movs	r4, r7
    switch(align) {
 8008afc:	2e14      	cmp	r6, #20
 8008afe:	d80d      	bhi.n	8008b1c <lv_obj_align_origo+0x6a>
 8008b00:	0030      	movs	r0, r6
 8008b02:	f7f7 fb0f 	bl	8000124 <__gnu_thumb1_case_uqi>
 8008b06:	6412      	.short	0x6412
 8008b08:	53686a25 	.word	0x53686a25
 8008b0c:	64716678 	.word	0x64716678
 8008b10:	53686a25 	.word	0x53686a25
 8008b14:	68666478 	.word	0x68666478
 8008b18:	716a      	.short	0x716a
 8008b1a:	78          	.byte	0x78
 8008b1b:	00          	.byte	0x00
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8008b1c:	9b01      	ldr	r3, [sp, #4]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8008b1e:	9a03      	ldr	r2, [sp, #12]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8008b20:	1ac1      	subs	r1, r0, r3
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8008b22:	9b02      	ldr	r3, [sp, #8]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8008b24:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	e01d      	b.n	8008b66 <lv_obj_align_origo+0xb4>
    return area_p->x2 - area_p->x1 + 1;
 8008b2a:	8aa2      	ldrh	r2, [r4, #20]
 8008b2c:	8a20      	ldrh	r0, [r4, #16]
 8008b2e:	3201      	adds	r2, #1
 8008b30:	1a12      	subs	r2, r2, r0
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8008b32:	b212      	sxth	r2, r2
 8008b34:	0fd0      	lsrs	r0, r2, #31
 8008b36:	1882      	adds	r2, r0, r2
 8008b38:	1052      	asrs	r2, r2, #1
 8008b3a:	1a51      	subs	r1, r2, r1
    return area_p->y2 - area_p->y1 + 1;
 8008b3c:	8ae0      	ldrh	r0, [r4, #22]
 8008b3e:	8a62      	ldrh	r2, [r4, #18]
 8008b40:	3001      	adds	r0, #1
 8008b42:	1a80      	subs	r0, r0, r2
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8008b44:	b200      	sxth	r0, r0
 8008b46:	0fc2      	lsrs	r2, r0, #31
 8008b48:	1812      	adds	r2, r2, r0
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008b4a:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8008b4c:	1052      	asrs	r2, r2, #1
 8008b4e:	e7ea      	b.n	8008b26 <lv_obj_align_origo+0x74>
    return area_p->x2 - area_p->x1 + 1;
 8008b50:	8aa2      	ldrh	r2, [r4, #20]
 8008b52:	8a20      	ldrh	r0, [r4, #16]
 8008b54:	3201      	adds	r2, #1
 8008b56:	1a12      	subs	r2, r2, r0
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8008b58:	b212      	sxth	r2, r2
 8008b5a:	0fd0      	lsrs	r0, r2, #31
 8008b5c:	1882      	adds	r2, r0, r2
 8008b5e:	1052      	asrs	r2, r2, #1
 8008b60:	1a51      	subs	r1, r2, r1
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008b62:	b209      	sxth	r1, r1
            new_y = -obj_h_half;
 8008b64:	425b      	negs	r3, r3
    new_x -= par_abs_x;
 8008b66:	9a04      	ldr	r2, [sp, #16]
 8008b68:	9801      	ldr	r0, [sp, #4]
            new_y = lv_obj_get_height(base) - obj_h_half;
 8008b6a:	b21b      	sxth	r3, r3
    new_x -= par_abs_x;
 8008b6c:	1a10      	subs	r0, r2, r0
 8008b6e:	8a22      	ldrh	r2, [r4, #16]
 8008b70:	1810      	adds	r0, r2, r0
 8008b72:	1841      	adds	r1, r0, r1
    new_y -= par_abs_y;
 8008b74:	9a05      	ldr	r2, [sp, #20]
 8008b76:	9802      	ldr	r0, [sp, #8]
    lv_obj_set_pos(obj, new_x, new_y);
 8008b78:	b209      	sxth	r1, r1
    new_y -= par_abs_y;
 8008b7a:	1a10      	subs	r0, r2, r0
 8008b7c:	8a62      	ldrh	r2, [r4, #18]
 8008b7e:	1812      	adds	r2, r2, r0
 8008b80:	18d2      	adds	r2, r2, r3
    lv_obj_set_pos(obj, new_x, new_y);
 8008b82:	0028      	movs	r0, r5
 8008b84:	b212      	sxth	r2, r2
 8008b86:	f7ff fe07 	bl	8008798 <lv_obj_set_pos>
    obj->realign.align       = align;
 8008b8a:	002b      	movs	r3, r5
 8008b8c:	3340      	adds	r3, #64	; 0x40
 8008b8e:	701e      	strb	r6, [r3, #0]
    obj->realign.xofs        = x_mod;
 8008b90:	466b      	mov	r3, sp
 8008b92:	8a1b      	ldrh	r3, [r3, #16]
    obj->realign.base        = base;
 8008b94:	63ac      	str	r4, [r5, #56]	; 0x38
    obj->realign.xofs        = x_mod;
 8008b96:	87ab      	strh	r3, [r5, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 8008b98:	466b      	mov	r3, sp
 8008b9a:	8a9b      	ldrh	r3, [r3, #20]
 8008b9c:	87eb      	strh	r3, [r5, #62]	; 0x3e
    obj->realign.origo_align = 1;
 8008b9e:	2302      	movs	r3, #2
 8008ba0:	3541      	adds	r5, #65	; 0x41
 8008ba2:	782a      	ldrb	r2, [r5, #0]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	702b      	strb	r3, [r5, #0]
}
 8008ba8:	b007      	add	sp, #28
 8008baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bac:	8aa2      	ldrh	r2, [r4, #20]
 8008bae:	8a20      	ldrh	r0, [r4, #16]
 8008bb0:	3201      	adds	r2, #1
 8008bb2:	1a12      	subs	r2, r2, r0
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8008bb4:	b212      	sxth	r2, r2
 8008bb6:	0fd0      	lsrs	r0, r2, #31
 8008bb8:	1882      	adds	r2, r0, r2
 8008bba:	1052      	asrs	r2, r2, #1
 8008bbc:	1a51      	subs	r1, r2, r1
            new_y = lv_obj_get_height(base) - obj_h_half;
 8008bbe:	2201      	movs	r2, #1
            new_x = -obj_w_half;
 8008bc0:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) - obj_h_half;
 8008bc2:	1ad2      	subs	r2, r2, r3
 8008bc4:	8ae3      	ldrh	r3, [r4, #22]
 8008bc6:	189b      	adds	r3, r3, r2
 8008bc8:	8a62      	ldrh	r2, [r4, #18]
 8008bca:	1a9b      	subs	r3, r3, r2
 8008bcc:	e7cb      	b.n	8008b66 <lv_obj_align_origo+0xb4>
            new_x = -obj_w_half;
 8008bce:	4249      	negs	r1, r1
 8008bd0:	e7c7      	b.n	8008b62 <lv_obj_align_origo+0xb0>
            new_x = -obj_w_half;
 8008bd2:	4249      	negs	r1, r1
 8008bd4:	e7b2      	b.n	8008b3c <lv_obj_align_origo+0x8a>
            new_x = -obj_w_half;
 8008bd6:	4249      	negs	r1, r1
 8008bd8:	e7f1      	b.n	8008bbe <lv_obj_align_origo+0x10c>
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008bda:	2001      	movs	r0, #1
 8008bdc:	1a40      	subs	r0, r0, r1
 8008bde:	8aa1      	ldrh	r1, [r4, #20]
 8008be0:	1809      	adds	r1, r1, r0
 8008be2:	8a20      	ldrh	r0, [r4, #16]
 8008be4:	1a09      	subs	r1, r1, r0
 8008be6:	e7bc      	b.n	8008b62 <lv_obj_align_origo+0xb0>
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008be8:	2001      	movs	r0, #1
 8008bea:	1a40      	subs	r0, r0, r1
 8008bec:	8aa1      	ldrh	r1, [r4, #20]
 8008bee:	1809      	adds	r1, r1, r0
 8008bf0:	8a20      	ldrh	r0, [r4, #16]
 8008bf2:	1a09      	subs	r1, r1, r0
 8008bf4:	e7a2      	b.n	8008b3c <lv_obj_align_origo+0x8a>
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	8aa0      	ldrh	r0, [r4, #20]
 8008bfa:	1a51      	subs	r1, r2, r1
 8008bfc:	1841      	adds	r1, r0, r1
 8008bfe:	8a20      	ldrh	r0, [r4, #16]
 8008c00:	1a09      	subs	r1, r1, r0
 8008c02:	b209      	sxth	r1, r1
 8008c04:	e7dd      	b.n	8008bc2 <lv_obj_align_origo+0x110>

08008c06 <lv_obj_realign>:
    if(obj->realign.origo_align)
 8008c06:	0003      	movs	r3, r0
 8008c08:	3341      	adds	r3, #65	; 0x41
{
 8008c0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if(obj->realign.origo_align)
 8008c0c:	781c      	ldrb	r4, [r3, #0]
 8008c0e:	223c      	movs	r2, #60	; 0x3c
 8008c10:	5e83      	ldrsh	r3, [r0, r2]
 8008c12:	0002      	movs	r2, r0
 8008c14:	253e      	movs	r5, #62	; 0x3e
 8008c16:	5f41      	ldrsh	r1, [r0, r5]
 8008c18:	3240      	adds	r2, #64	; 0x40
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8008c1a:	7812      	ldrb	r2, [r2, #0]
 8008c1c:	9100      	str	r1, [sp, #0]
 8008c1e:	6b81      	ldr	r1, [r0, #56]	; 0x38
    if(obj->realign.origo_align)
 8008c20:	07a4      	lsls	r4, r4, #30
 8008c22:	d502      	bpl.n	8008c2a <lv_obj_realign+0x24>
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8008c24:	f7ff ff45 	bl	8008ab2 <lv_obj_align_origo>
}
 8008c28:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8008c2a:	f7ff fe09 	bl	8008840 <lv_obj_align>
}
 8008c2e:	e7fb      	b.n	8008c28 <lv_obj_realign+0x22>

08008c30 <lv_obj_create>:
{
 8008c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c32:	0005      	movs	r5, r0
 8008c34:	000e      	movs	r6, r1
    if(parent == NULL) {
 8008c36:	2800      	cmp	r0, #0
 8008c38:	d000      	beq.n	8008c3c <lv_obj_create+0xc>
 8008c3a:	e0ee      	b.n	8008e1a <lv_obj_create+0x1ea>
        lv_disp_t * disp = lv_disp_get_default();
 8008c3c:	f004 fcc8 	bl	800d5d0 <lv_disp_get_default>
        if(!disp) {
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d100      	bne.n	8008c46 <lv_obj_create+0x16>
 8008c44:	e131      	b.n	8008eaa <lv_obj_create+0x27a>
        new_obj = lv_ll_ins_head(&disp->scr_ll);
 8008c46:	302c      	adds	r0, #44	; 0x2c
 8008c48:	f005 f82b 	bl	800dca2 <lv_ll_ins_head>
 8008c4c:	1e04      	subs	r4, r0, #0
        lv_mem_assert(new_obj);
 8008c4e:	d100      	bne.n	8008c52 <lv_obj_create+0x22>
 8008c50:	e7fe      	b.n	8008c50 <lv_obj_create+0x20>
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8008c52:	2144      	movs	r1, #68	; 0x44
        new_obj->par = NULL; /*Screens has no a parent*/
 8008c54:	c020      	stmia	r0!, {r5}
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8008c56:	f005 f81a 	bl	800dc8e <lv_ll_init>
        new_obj->coords.x1    = 0;
 8008c5a:	8225      	strh	r5, [r4, #16]
        new_obj->coords.y1    = 0;
 8008c5c:	8265      	strh	r5, [r4, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 8008c5e:	0028      	movs	r0, r5
 8008c60:	f004 fcbc 	bl	800d5dc <lv_disp_get_hor_res>
 8008c64:	3801      	subs	r0, #1
 8008c66:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 8008c68:	0028      	movs	r0, r5
 8008c6a:	f004 fcc9 	bl	800d600 <lv_disp_get_ver_res>
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8008c6e:	0023      	movs	r3, r4
        new_obj->realign.auto_realign = 0;
 8008c70:	0022      	movs	r2, r4
 8008c72:	2101      	movs	r1, #1
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 8008c74:	3801      	subs	r0, #1
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8008c76:	3340      	adds	r3, #64	; 0x40
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 8008c78:	82e0      	strh	r0, [r4, #22]
        new_obj->ext_draw_pad = 0;
 8008c7a:	86a5      	strh	r5, [r4, #52]	; 0x34
        new_obj->realign.auto_realign = 0;
 8008c7c:	3241      	adds	r2, #65	; 0x41
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8008c7e:	701d      	strb	r5, [r3, #0]
        new_obj->realign.xofs         = 0;
 8008c80:	87a5      	strh	r5, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 8008c82:	87e5      	strh	r5, [r4, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 8008c84:	63a5      	str	r5, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 8008c86:	7813      	ldrb	r3, [r2, #0]
 8008c88:	438b      	bics	r3, r1
 8008c8a:	7013      	strb	r3, [r2, #0]
        lv_theme_t * th = lv_theme_get_current();
 8008c8c:	f006 fbe8 	bl	800f460 <lv_theme_get_current>
            new_obj->style_p = &lv_style_scr;
 8008c90:	4b87      	ldr	r3, [pc, #540]	; (8008eb0 <lv_obj_create+0x280>)
        if(th) {
 8008c92:	2800      	cmp	r0, #0
 8008c94:	d000      	beq.n	8008c98 <lv_obj_create+0x68>
            new_obj->style_p = th->style.scr;
 8008c96:	6803      	ldr	r3, [r0, #0]
            new_obj->style_p = &lv_style_scr;
 8008c98:	62a3      	str	r3, [r4, #40]	; 0x28
    obj->signal_cb = signal_cb;
 8008c9a:	4b86      	ldr	r3, [pc, #536]	; (8008eb4 <lv_obj_create+0x284>)
        new_obj->event_cb = NULL;
 8008c9c:	2200      	movs	r2, #0
    obj->signal_cb = signal_cb;
 8008c9e:	61e3      	str	r3, [r4, #28]
    obj->design_cb = design_cb;
 8008ca0:	4b85      	ldr	r3, [pc, #532]	; (8008eb8 <lv_obj_create+0x288>)
        new_obj->opa_scale    = LV_OPA_COVER;
 8008ca2:	21ff      	movs	r1, #255	; 0xff
    obj->design_cb = design_cb;
 8008ca4:	6223      	str	r3, [r4, #32]
        new_obj->protect      = LV_PROTECT_NONE;
 8008ca6:	0023      	movs	r3, r4
        new_obj->reserved     = 0;
 8008ca8:	2003      	movs	r0, #3
        new_obj->protect      = LV_PROTECT_NONE;
 8008caa:	3332      	adds	r3, #50	; 0x32
        new_obj->event_cb = NULL;
 8008cac:	61a2      	str	r2, [r4, #24]
        new_obj->group_p = NULL;
 8008cae:	62e2      	str	r2, [r4, #44]	; 0x2c
        new_obj->parent_event = 0;
 8008cb0:	3b02      	subs	r3, #2
        new_obj->protect      = LV_PROTECT_NONE;
 8008cb2:	709a      	strb	r2, [r3, #2]
        new_obj->opa_scale    = LV_OPA_COVER;
 8008cb4:	70d9      	strb	r1, [r3, #3]
        new_obj->reserved     = 0;
 8008cb6:	7859      	ldrb	r1, [r3, #1]
        new_obj->parent_event = 0;
 8008cb8:	701a      	strb	r2, [r3, #0]
        new_obj->reserved     = 0;
 8008cba:	4001      	ands	r1, r0
 8008cbc:	7059      	strb	r1, [r3, #1]
        new_obj->ext_attr = NULL;
 8008cbe:	6262      	str	r2, [r4, #36]	; 0x24
    if(copy != NULL) {
 8008cc0:	2e00      	cmp	r6, #0
 8008cc2:	d100      	bne.n	8008cc6 <lv_obj_create+0x96>
 8008cc4:	e0ed      	b.n	8008ea2 <lv_obj_create+0x272>
    memcpy(dest, src, sizeof(lv_area_t));
 8008cc6:	0031      	movs	r1, r6
 8008cc8:	0020      	movs	r0, r4
 8008cca:	2208      	movs	r2, #8
 8008ccc:	3110      	adds	r1, #16
 8008cce:	3010      	adds	r0, #16
 8008cd0:	f006 fe38 	bl	800f944 <memcpy>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 8008cd4:	2234      	movs	r2, #52	; 0x34
 8008cd6:	5eb3      	ldrsh	r3, [r6, r2]
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 8008cd8:	0021      	movs	r1, r4
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 8008cda:	86a3      	strh	r3, [r4, #52]	; 0x34
        new_obj->realign.align        = copy->realign.align;
 8008cdc:	0033      	movs	r3, r6
 8008cde:	3340      	adds	r3, #64	; 0x40
 8008ce0:	781a      	ldrb	r2, [r3, #0]
 8008ce2:	0023      	movs	r3, r4
 8008ce4:	3340      	adds	r3, #64	; 0x40
 8008ce6:	701a      	strb	r2, [r3, #0]
        new_obj->realign.xofs         = copy->realign.xofs;
 8008ce8:	223c      	movs	r2, #60	; 0x3c
 8008cea:	5eb3      	ldrsh	r3, [r6, r2]
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 8008cec:	3141      	adds	r1, #65	; 0x41
        new_obj->realign.xofs         = copy->realign.xofs;
 8008cee:	87a3      	strh	r3, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = copy->realign.yofs;
 8008cf0:	223e      	movs	r2, #62	; 0x3e
 8008cf2:	5eb3      	ldrsh	r3, [r6, r2]
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 8008cf4:	2201      	movs	r2, #1
        new_obj->realign.yofs         = copy->realign.yofs;
 8008cf6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        new_obj->realign.base         = copy->realign.base;
 8008cf8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8008cfa:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 8008cfc:	0033      	movs	r3, r6
 8008cfe:	3341      	adds	r3, #65	; 0x41
 8008d00:	7818      	ldrb	r0, [r3, #0]
 8008d02:	2301      	movs	r3, #1
 8008d04:	4018      	ands	r0, r3
 8008d06:	780b      	ldrb	r3, [r1, #0]
 8008d08:	4393      	bics	r3, r2
 8008d0a:	4303      	orrs	r3, r0
 8008d0c:	700b      	strb	r3, [r1, #0]
        new_obj->click        = copy->click;
 8008d0e:	0031      	movs	r1, r6
        new_obj->event_cb = copy->event_cb;
 8008d10:	69b3      	ldr	r3, [r6, #24]
        new_obj->click        = copy->click;
 8008d12:	3130      	adds	r1, #48	; 0x30
        new_obj->event_cb = copy->event_cb;
 8008d14:	61a3      	str	r3, [r4, #24]
        new_obj->click        = copy->click;
 8008d16:	0023      	movs	r3, r4
 8008d18:	7808      	ldrb	r0, [r1, #0]
 8008d1a:	3330      	adds	r3, #48	; 0x30
 8008d1c:	07c0      	lsls	r0, r0, #31
 8008d1e:	0fc7      	lsrs	r7, r0, #31
 8008d20:	7818      	ldrb	r0, [r3, #0]
 8008d22:	4390      	bics	r0, r2
 8008d24:	4338      	orrs	r0, r7
 8008d26:	7018      	strb	r0, [r3, #0]
        new_obj->drag         = copy->drag;
 8008d28:	7808      	ldrb	r0, [r1, #0]
 8008d2a:	781f      	ldrb	r7, [r3, #0]
 8008d2c:	40d0      	lsrs	r0, r2
 8008d2e:	4010      	ands	r0, r2
 8008d30:	4090      	lsls	r0, r2
 8008d32:	1892      	adds	r2, r2, r2
 8008d34:	4397      	bics	r7, r2
 8008d36:	4338      	orrs	r0, r7
 8008d38:	7018      	strb	r0, [r3, #0]
        new_obj->drag_dir     = copy->drag_dir;
 8008d3a:	0030      	movs	r0, r6
 8008d3c:	3031      	adds	r0, #49	; 0x31
 8008d3e:	7807      	ldrb	r7, [r0, #0]
 8008d40:	7858      	ldrb	r0, [r3, #1]
 8008d42:	3201      	adds	r2, #1
 8008d44:	4390      	bics	r0, r2
 8008d46:	4017      	ands	r7, r2
 8008d48:	4307      	orrs	r7, r0
 8008d4a:	705f      	strb	r7, [r3, #1]
        new_obj->drag_throw   = copy->drag_throw;
 8008d4c:	7808      	ldrb	r0, [r1, #0]
 8008d4e:	781f      	ldrb	r7, [r3, #0]
 8008d50:	3a02      	subs	r2, #2
 8008d52:	0880      	lsrs	r0, r0, #2
 8008d54:	4010      	ands	r0, r2
 8008d56:	3203      	adds	r2, #3
 8008d58:	4397      	bics	r7, r2
 8008d5a:	0080      	lsls	r0, r0, #2
 8008d5c:	4338      	orrs	r0, r7
 8008d5e:	7018      	strb	r0, [r3, #0]
        new_obj->drag_parent  = copy->drag_parent;
 8008d60:	7808      	ldrb	r0, [r1, #0]
 8008d62:	781f      	ldrb	r7, [r3, #0]
 8008d64:	3a03      	subs	r2, #3
 8008d66:	08c0      	lsrs	r0, r0, #3
 8008d68:	4010      	ands	r0, r2
 8008d6a:	3207      	adds	r2, #7
 8008d6c:	4397      	bics	r7, r2
 8008d6e:	00c0      	lsls	r0, r0, #3
 8008d70:	4338      	orrs	r0, r7
 8008d72:	7018      	strb	r0, [r3, #0]
        new_obj->hidden       = copy->hidden;
 8008d74:	7808      	ldrb	r0, [r1, #0]
 8008d76:	781f      	ldrb	r7, [r3, #0]
 8008d78:	3a07      	subs	r2, #7
 8008d7a:	0900      	lsrs	r0, r0, #4
 8008d7c:	4010      	ands	r0, r2
 8008d7e:	320f      	adds	r2, #15
 8008d80:	4397      	bics	r7, r2
 8008d82:	0100      	lsls	r0, r0, #4
 8008d84:	4338      	orrs	r0, r7
 8008d86:	7018      	strb	r0, [r3, #0]
        new_obj->top          = copy->top;
 8008d88:	7808      	ldrb	r0, [r1, #0]
 8008d8a:	781f      	ldrb	r7, [r3, #0]
 8008d8c:	3a0f      	subs	r2, #15
 8008d8e:	0940      	lsrs	r0, r0, #5
 8008d90:	4010      	ands	r0, r2
 8008d92:	321f      	adds	r2, #31
 8008d94:	4397      	bics	r7, r2
 8008d96:	0140      	lsls	r0, r0, #5
 8008d98:	4338      	orrs	r0, r7
 8008d9a:	7018      	strb	r0, [r3, #0]
        new_obj->parent_event = copy->parent_event;
 8008d9c:	7808      	ldrb	r0, [r1, #0]
 8008d9e:	325f      	adds	r2, #95	; 0x5f
 8008da0:	09c0      	lsrs	r0, r0, #7
 8008da2:	01c7      	lsls	r7, r0, #7
 8008da4:	7818      	ldrb	r0, [r3, #0]
 8008da6:	4010      	ands	r0, r2
 8008da8:	4338      	orrs	r0, r7
 8008daa:	7018      	strb	r0, [r3, #0]
        new_obj->opa_scale_en = copy->opa_scale_en;
 8008dac:	7809      	ldrb	r1, [r1, #0]
 8008dae:	3a7e      	subs	r2, #126	; 0x7e
 8008db0:	0989      	lsrs	r1, r1, #6
 8008db2:	400a      	ands	r2, r1
 8008db4:	b2c1      	uxtb	r1, r0
 8008db6:	2040      	movs	r0, #64	; 0x40
 8008db8:	0192      	lsls	r2, r2, #6
 8008dba:	4381      	bics	r1, r0
 8008dbc:	430a      	orrs	r2, r1
 8008dbe:	701a      	strb	r2, [r3, #0]
        new_obj->protect      = copy->protect;
 8008dc0:	0033      	movs	r3, r6
 8008dc2:	3332      	adds	r3, #50	; 0x32
 8008dc4:	781a      	ldrb	r2, [r3, #0]
 8008dc6:	0023      	movs	r3, r4
 8008dc8:	3332      	adds	r3, #50	; 0x32
 8008dca:	701a      	strb	r2, [r3, #0]
        new_obj->opa_scale    = copy->opa_scale;
 8008dcc:	0033      	movs	r3, r6
 8008dce:	3333      	adds	r3, #51	; 0x33
 8008dd0:	781a      	ldrb	r2, [r3, #0]
 8008dd2:	0023      	movs	r3, r4
 8008dd4:	3333      	adds	r3, #51	; 0x33
 8008dd6:	701a      	strb	r2, [r3, #0]
        new_obj->style_p = copy->style_p;
 8008dd8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
        if(copy->group_p != NULL) {
 8008dda:	6af0      	ldr	r0, [r6, #44]	; 0x2c
        new_obj->style_p = copy->style_p;
 8008ddc:	62a3      	str	r3, [r4, #40]	; 0x28
        if(copy->group_p != NULL) {
 8008dde:	2800      	cmp	r0, #0
 8008de0:	d002      	beq.n	8008de8 <lv_obj_create+0x1b8>
            lv_group_add_obj(copy->group_p, new_obj);
 8008de2:	0021      	movs	r1, r4
 8008de4:	f7ff fb29 	bl	800843a <lv_group_add_obj>
    return obj->par;
 8008de8:	6833      	ldr	r3, [r6, #0]
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d054      	beq.n	8008e98 <lv_obj_create+0x268>
 8008dee:	2d00      	cmp	r5, #0
 8008df0:	d052      	beq.n	8008e98 <lv_obj_create+0x268>
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8008df2:	8a59      	ldrh	r1, [r3, #18]
 8008df4:	8a72      	ldrh	r2, [r6, #18]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8008df6:	8a1b      	ldrh	r3, [r3, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8008df8:	1a52      	subs	r2, r2, r1
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8008dfa:	8a31      	ldrh	r1, [r6, #16]
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 8008dfc:	b212      	sxth	r2, r2
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8008dfe:	1ac9      	subs	r1, r1, r3
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 8008e00:	b209      	sxth	r1, r1
 8008e02:	0020      	movs	r0, r4
 8008e04:	f7ff fcc8 	bl	8008798 <lv_obj_set_pos>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 8008e08:	69eb      	ldr	r3, [r5, #28]
 8008e0a:	0022      	movs	r2, r4
 8008e0c:	2101      	movs	r1, #1
 8008e0e:	0028      	movs	r0, r5
 8008e10:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
 8008e12:	0020      	movs	r0, r4
 8008e14:	f7ff fc56 	bl	80086c4 <lv_obj_invalidate>
 8008e18:	e045      	b.n	8008ea6 <lv_obj_create+0x276>
        new_obj = lv_ll_ins_head(&parent->child_ll);
 8008e1a:	3004      	adds	r0, #4
 8008e1c:	f004 ff41 	bl	800dca2 <lv_ll_ins_head>
 8008e20:	1e04      	subs	r4, r0, #0
        lv_mem_assert(new_obj);
 8008e22:	d100      	bne.n	8008e26 <lv_obj_create+0x1f6>
 8008e24:	e7fe      	b.n	8008e24 <lv_obj_create+0x1f4>
        new_obj->par = parent; /*Set the parent*/
 8008e26:	c020      	stmia	r0!, {r5}
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8008e28:	2144      	movs	r1, #68	; 0x44
 8008e2a:	f004 ff30 	bl	800dc8e <lv_ll_init>
        new_obj->coords.x1    = parent->coords.x1;
 8008e2e:	2210      	movs	r2, #16
 8008e30:	5eab      	ldrsh	r3, [r5, r2]
        new_obj->realign.auto_realign = 0;
 8008e32:	2101      	movs	r1, #1
        new_obj->coords.x1    = parent->coords.x1;
 8008e34:	8223      	strh	r3, [r4, #16]
        new_obj->coords.y1    = parent->coords.y1;
 8008e36:	2212      	movs	r2, #18
 8008e38:	5eab      	ldrsh	r3, [r5, r2]
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8008e3a:	0022      	movs	r2, r4
        new_obj->coords.y1    = parent->coords.y1;
 8008e3c:	8263      	strh	r3, [r4, #18]
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 8008e3e:	8a2b      	ldrh	r3, [r5, #16]
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8008e40:	3240      	adds	r2, #64	; 0x40
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 8008e42:	3319      	adds	r3, #25
 8008e44:	82a3      	strh	r3, [r4, #20]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 8008e46:	8a6b      	ldrh	r3, [r5, #18]
 8008e48:	3310      	adds	r3, #16
 8008e4a:	82e3      	strh	r3, [r4, #22]
        new_obj->ext_draw_pad = 0;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	86a3      	strh	r3, [r4, #52]	; 0x34
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8008e50:	7013      	strb	r3, [r2, #0]
        new_obj->realign.xofs         = 0;
 8008e52:	87a3      	strh	r3, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 8008e54:	87e3      	strh	r3, [r4, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 8008e56:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 8008e58:	7853      	ldrb	r3, [r2, #1]
 8008e5a:	438b      	bics	r3, r1
 8008e5c:	7053      	strb	r3, [r2, #1]
        lv_theme_t * th = lv_theme_get_current();
 8008e5e:	f006 faff 	bl	800f460 <lv_theme_get_current>
            new_obj->style_p = &lv_style_plain_color;
 8008e62:	4b16      	ldr	r3, [pc, #88]	; (8008ebc <lv_obj_create+0x28c>)
        if(th) {
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d000      	beq.n	8008e6a <lv_obj_create+0x23a>
            new_obj->style_p = th->style.panel;
 8008e68:	6883      	ldr	r3, [r0, #8]
            new_obj->style_p = &lv_style_plain_color;
 8008e6a:	62a3      	str	r3, [r4, #40]	; 0x28
    obj->signal_cb = signal_cb;
 8008e6c:	4b11      	ldr	r3, [pc, #68]	; (8008eb4 <lv_obj_create+0x284>)
        new_obj->click        = 1;
 8008e6e:	0022      	movs	r2, r4
    obj->signal_cb = signal_cb;
 8008e70:	61e3      	str	r3, [r4, #28]
    obj->design_cb = design_cb;
 8008e72:	4b11      	ldr	r3, [pc, #68]	; (8008eb8 <lv_obj_create+0x288>)
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 8008e74:	2103      	movs	r1, #3
    obj->design_cb = design_cb;
 8008e76:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
 8008e78:	2300      	movs	r3, #0
        new_obj->click        = 1;
 8008e7a:	3230      	adds	r2, #48	; 0x30
        new_obj->event_cb = NULL;
 8008e7c:	61a3      	str	r3, [r4, #24]
        new_obj->group_p = NULL;
 8008e7e:	62e3      	str	r3, [r4, #44]	; 0x2c
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 8008e80:	7850      	ldrb	r0, [r2, #1]
 8008e82:	4301      	orrs	r1, r0
 8008e84:	7051      	strb	r1, [r2, #1]
        new_obj->protect      = LV_PROTECT_NONE;
 8008e86:	0021      	movs	r1, r4
        new_obj->opa_scale    = LV_OPA_COVER;
 8008e88:	20ff      	movs	r0, #255	; 0xff
        new_obj->protect      = LV_PROTECT_NONE;
 8008e8a:	3132      	adds	r1, #50	; 0x32
 8008e8c:	700b      	strb	r3, [r1, #0]
        new_obj->opa_scale    = LV_OPA_COVER;
 8008e8e:	7048      	strb	r0, [r1, #1]
        new_obj->parent_event = 0;
 8008e90:	2101      	movs	r1, #1
 8008e92:	7011      	strb	r1, [r2, #0]
        new_obj->ext_attr = NULL;
 8008e94:	6263      	str	r3, [r4, #36]	; 0x24
 8008e96:	e713      	b.n	8008cc0 <lv_obj_create+0x90>
            lv_obj_set_pos(new_obj, 0, 0);
 8008e98:	2200      	movs	r2, #0
 8008e9a:	0020      	movs	r0, r4
 8008e9c:	0011      	movs	r1, r2
 8008e9e:	f7ff fc7b 	bl	8008798 <lv_obj_set_pos>
    if(parent != NULL) {
 8008ea2:	2d00      	cmp	r5, #0
 8008ea4:	d1b0      	bne.n	8008e08 <lv_obj_create+0x1d8>
}
 8008ea6:	0020      	movs	r0, r4
 8008ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NULL;
 8008eaa:	0004      	movs	r4, r0
 8008eac:	e7fb      	b.n	8008ea6 <lv_obj_create+0x276>
 8008eae:	46c0      	nop			; (mov r8, r8)
 8008eb0:	200053f8 	.word	0x200053f8
 8008eb4:	08009095 	.word	0x08009095
 8008eb8:	0800910d 	.word	0x0800910d
 8008ebc:	20005470 	.word	0x20005470

08008ec0 <lv_obj_set_size>:
    return area_p->x2 - area_p->x1 + 1;
 8008ec0:	8a83      	ldrh	r3, [r0, #20]
{
 8008ec2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ec4:	0015      	movs	r5, r2
 8008ec6:	8a02      	ldrh	r2, [r0, #16]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 8008ecc:	b21b      	sxth	r3, r3
{
 8008ece:	0004      	movs	r4, r0
 8008ed0:	000e      	movs	r6, r1
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 8008ed2:	4299      	cmp	r1, r3
 8008ed4:	d106      	bne.n	8008ee4 <lv_obj_set_size+0x24>
    return area_p->y2 - area_p->y1 + 1;
 8008ed6:	8ac3      	ldrh	r3, [r0, #22]
 8008ed8:	8a42      	ldrh	r2, [r0, #18]
 8008eda:	3301      	adds	r3, #1
 8008edc:	1a9b      	subs	r3, r3, r2
 8008ede:	b21b      	sxth	r3, r3
 8008ee0:	429d      	cmp	r5, r3
 8008ee2:	d02d      	beq.n	8008f40 <lv_obj_set_size+0x80>
    lv_obj_invalidate(obj);
 8008ee4:	0020      	movs	r0, r4
 8008ee6:	f7ff fbed 	bl	80086c4 <lv_obj_invalidate>
    memcpy(dest, src, sizeof(lv_area_t));
 8008eea:	0021      	movs	r1, r4
 8008eec:	2208      	movs	r2, #8
 8008eee:	3110      	adds	r1, #16
 8008ef0:	4668      	mov	r0, sp
 8008ef2:	f006 fd27 	bl	800f944 <memcpy>
    obj->coords.x2 = obj->coords.x1 + w - 1;
 8008ef6:	8a23      	ldrh	r3, [r4, #16]
 8008ef8:	3e01      	subs	r6, #1
 8008efa:	199e      	adds	r6, r3, r6
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8008efc:	8a63      	ldrh	r3, [r4, #18]
 8008efe:	3d01      	subs	r5, #1
 8008f00:	195d      	adds	r5, r3, r5
    obj->coords.x2 = obj->coords.x1 + w - 1;
 8008f02:	82a6      	strh	r6, [r4, #20]
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8008f04:	82e5      	strh	r5, [r4, #22]
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 8008f06:	466a      	mov	r2, sp
 8008f08:	2102      	movs	r1, #2
 8008f0a:	0020      	movs	r0, r4
 8008f0c:	69e3      	ldr	r3, [r4, #28]
 8008f0e:	4798      	blx	r3
    return obj->par;
 8008f10:	6820      	ldr	r0, [r4, #0]
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 8008f12:	2800      	cmp	r0, #0
 8008f14:	d003      	beq.n	8008f1e <lv_obj_set_size+0x5e>
 8008f16:	69c3      	ldr	r3, [r0, #28]
 8008f18:	0022      	movs	r2, r4
 8008f1a:	2101      	movs	r1, #1
 8008f1c:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
 8008f1e:	1d26      	adds	r6, r4, #4
 8008f20:	0030      	movs	r0, r6
 8008f22:	f004 fefe 	bl	800dd22 <lv_ll_get_head>
 8008f26:	1e05      	subs	r5, r0, #0
 8008f28:	d10b      	bne.n	8008f42 <lv_obj_set_size+0x82>
    lv_obj_invalidate(obj);
 8008f2a:	0020      	movs	r0, r4
 8008f2c:	f7ff fbca 	bl	80086c4 <lv_obj_invalidate>
    if(obj->realign.auto_realign) lv_obj_realign(obj);
 8008f30:	0023      	movs	r3, r4
 8008f32:	3341      	adds	r3, #65	; 0x41
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	07db      	lsls	r3, r3, #31
 8008f38:	d502      	bpl.n	8008f40 <lv_obj_set_size+0x80>
 8008f3a:	0020      	movs	r0, r4
 8008f3c:	f7ff fe63 	bl	8008c06 <lv_obj_realign>
}
 8008f40:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 8008f42:	2200      	movs	r2, #0
 8008f44:	2103      	movs	r1, #3
 8008f46:	0028      	movs	r0, r5
 8008f48:	69eb      	ldr	r3, [r5, #28]
 8008f4a:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
 8008f4c:	0029      	movs	r1, r5
 8008f4e:	0030      	movs	r0, r6
 8008f50:	f004 feef 	bl	800dd32 <lv_ll_get_next>
 8008f54:	e7e7      	b.n	8008f26 <lv_obj_set_size+0x66>

08008f56 <lv_obj_set_height>:
{
 8008f56:	b510      	push	{r4, lr}
    return area_p->x2 - area_p->x1 + 1;
 8008f58:	8a83      	ldrh	r3, [r0, #20]
 8008f5a:	000a      	movs	r2, r1
 8008f5c:	8a01      	ldrh	r1, [r0, #16]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	1a59      	subs	r1, r3, r1
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
 8008f62:	b209      	sxth	r1, r1
 8008f64:	f7ff ffac 	bl	8008ec0 <lv_obj_set_size>
}
 8008f68:	bd10      	pop	{r4, pc}

08008f6a <lv_obj_refresh_style>:
{
 8008f6a:	b510      	push	{r4, lr}
 8008f6c:	0004      	movs	r4, r0
    lv_obj_invalidate(obj);
 8008f6e:	f7ff fba9 	bl	80086c4 <lv_obj_invalidate>
    obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 8008f72:	2200      	movs	r2, #0
 8008f74:	2104      	movs	r1, #4
 8008f76:	69e3      	ldr	r3, [r4, #28]
 8008f78:	0020      	movs	r0, r4
 8008f7a:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8008f7c:	0020      	movs	r0, r4
 8008f7e:	f7ff fba1 	bl	80086c4 <lv_obj_invalidate>
}
 8008f82:	bd10      	pop	{r4, pc}

08008f84 <lv_obj_refresh_ext_draw_pad>:
    obj->ext_draw_pad = 0;
 8008f84:	2200      	movs	r2, #0
{
 8008f86:	b510      	push	{r4, lr}
 8008f88:	0004      	movs	r4, r0
    obj->ext_draw_pad = 0;
 8008f8a:	8682      	strh	r2, [r0, #52]	; 0x34
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 8008f8c:	2105      	movs	r1, #5
 8008f8e:	69c3      	ldr	r3, [r0, #28]
 8008f90:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8008f92:	0020      	movs	r0, r4
 8008f94:	f7ff fb96 	bl	80086c4 <lv_obj_invalidate>
}
 8008f98:	bd10      	pop	{r4, pc}

08008f9a <lv_obj_get_parent>:
    return obj->par;
 8008f9a:	6800      	ldr	r0, [r0, #0]
}
 8008f9c:	4770      	bx	lr

08008f9e <lv_obj_get_child>:
{
 8008f9e:	b510      	push	{r4, lr}
 8008fa0:	3004      	adds	r0, #4
    if(child == NULL) {
 8008fa2:	2900      	cmp	r1, #0
 8008fa4:	d102      	bne.n	8008fac <lv_obj_get_child+0xe>
        result = lv_ll_get_head(&obj->child_ll);
 8008fa6:	f004 febc 	bl	800dd22 <lv_ll_get_head>
}
 8008faa:	bd10      	pop	{r4, pc}
        result = lv_ll_get_next(&obj->child_ll, child);
 8008fac:	f004 fec1 	bl	800dd32 <lv_ll_get_next>
    return result;
 8008fb0:	e7fb      	b.n	8008faa <lv_obj_get_child+0xc>

08008fb2 <refresh_children_style>:
 * Recursively refresh the style of the children. Go deeper until a not NULL style is found
 * because the NULL styles are inherited from the parent
 * @param obj pointer to an object
 */
static void refresh_children_style(lv_obj_t * obj)
{
 8008fb2:	b570      	push	{r4, r5, r6, lr}
 8008fb4:	0005      	movs	r5, r0
        result = lv_ll_get_head(&obj->child_ll);
 8008fb6:	3004      	adds	r0, #4
 8008fb8:	f004 feb3 	bl	800dd22 <lv_ll_get_head>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
    while(child != NULL) {
        if(child->style_p == NULL) {
            refresh_children_style(child); /*Check children too*/
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
        } else if(child->style_p->glass) {
 8008fbc:	2601      	movs	r6, #1
        result = lv_ll_get_head(&obj->child_ll);
 8008fbe:	0004      	movs	r4, r0
    while(child != NULL) {
 8008fc0:	2c00      	cmp	r4, #0
 8008fc2:	d100      	bne.n	8008fc6 <refresh_children_style+0x14>
            /*Children with 'glass' parent might be effected if their style == NULL*/
            refresh_children_style(child);
        }
        child = lv_obj_get_child(obj, child);
    }
}
 8008fc4:	bd70      	pop	{r4, r5, r6, pc}
        if(child->style_p == NULL) {
 8008fc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10b      	bne.n	8008fe4 <refresh_children_style+0x32>
            refresh_children_style(child); /*Check children too*/
 8008fcc:	0020      	movs	r0, r4
 8008fce:	f7ff fff0 	bl	8008fb2 <refresh_children_style>
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
 8008fd2:	0020      	movs	r0, r4
 8008fd4:	f7ff ffc9 	bl	8008f6a <lv_obj_refresh_style>
        child = lv_obj_get_child(obj, child);
 8008fd8:	0021      	movs	r1, r4
 8008fda:	0028      	movs	r0, r5
 8008fdc:	f7ff ffdf 	bl	8008f9e <lv_obj_get_child>
 8008fe0:	0004      	movs	r4, r0
 8008fe2:	e7ed      	b.n	8008fc0 <refresh_children_style+0xe>
        } else if(child->style_p->glass) {
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	4233      	tst	r3, r6
 8008fe8:	d0f6      	beq.n	8008fd8 <refresh_children_style+0x26>
            refresh_children_style(child);
 8008fea:	0020      	movs	r0, r4
 8008fec:	f7ff ffe1 	bl	8008fb2 <refresh_children_style>
 8008ff0:	e7f2      	b.n	8008fd8 <refresh_children_style+0x26>

08008ff2 <lv_obj_set_style>:
{
 8008ff2:	b510      	push	{r4, lr}
 8008ff4:	0004      	movs	r4, r0
    obj->style_p = style;
 8008ff6:	6281      	str	r1, [r0, #40]	; 0x28
    refresh_children_style(obj);
 8008ff8:	f7ff ffdb 	bl	8008fb2 <refresh_children_style>
    lv_obj_refresh_style(obj);
 8008ffc:	0020      	movs	r0, r4
 8008ffe:	f7ff ffb4 	bl	8008f6a <lv_obj_refresh_style>
}
 8009002:	bd10      	pop	{r4, pc}

08009004 <lv_obj_get_coords>:
{
 8009004:	000b      	movs	r3, r1
    memcpy(dest, src, sizeof(lv_area_t));
 8009006:	0001      	movs	r1, r0
 8009008:	b510      	push	{r4, lr}
 800900a:	3110      	adds	r1, #16
 800900c:	2208      	movs	r2, #8
 800900e:	0018      	movs	r0, r3
 8009010:	f006 fc98 	bl	800f944 <memcpy>
}
 8009014:	bd10      	pop	{r4, pc}

08009016 <lv_obj_get_width>:
    return area_p->x2 - area_p->x1 + 1;
 8009016:	8a83      	ldrh	r3, [r0, #20]
 8009018:	8a00      	ldrh	r0, [r0, #16]
 800901a:	3301      	adds	r3, #1
 800901c:	1a18      	subs	r0, r3, r0
    return lv_area_get_width(&obj->coords);
 800901e:	b200      	sxth	r0, r0
}
 8009020:	4770      	bx	lr

08009022 <lv_obj_get_height>:
    return area_p->y2 - area_p->y1 + 1;
 8009022:	8ac3      	ldrh	r3, [r0, #22]
 8009024:	8a40      	ldrh	r0, [r0, #18]
 8009026:	3301      	adds	r3, #1
 8009028:	1a18      	subs	r0, r3, r0
    return lv_area_get_height(&obj->coords);
 800902a:	b200      	sxth	r0, r0
}
 800902c:	4770      	bx	lr
	...

08009030 <lv_obj_get_style>:
{
 8009030:	b570      	push	{r4, r5, r6, lr}
    const lv_style_t * style_act = obj->style_p;
 8009032:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 8009034:	0006      	movs	r6, r0
    if(style_act == NULL) {
 8009036:	2c00      	cmp	r4, #0
 8009038:	d114      	bne.n	8009064 <lv_obj_get_style+0x34>
                if(par->style_p->glass == 0) {
 800903a:	2201      	movs	r2, #1
        lv_obj_t * par = obj->par;
 800903c:	6805      	ldr	r5, [r0, #0]
        while(par) {
 800903e:	2d00      	cmp	r5, #0
 8009040:	d010      	beq.n	8009064 <lv_obj_get_style+0x34>
            if(par->style_p) {
 8009042:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009044:	2b00      	cmp	r3, #0
 8009046:	d020      	beq.n	800908a <lv_obj_get_style+0x5a>
                if(par->style_p->glass == 0) {
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	4213      	tst	r3, r2
 800904c:	d11d      	bne.n	800908a <lv_obj_get_style+0x5a>
    return obj->group_p;
 800904e:	6aec      	ldr	r4, [r5, #44]	; 0x2c
                    if(lv_group_get_focused(g) == par) {
 8009050:	0020      	movs	r0, r4
 8009052:	f7ff fa35 	bl	80084c0 <lv_group_get_focused>
 8009056:	4285      	cmp	r5, r0
 8009058:	d115      	bne.n	8009086 <lv_obj_get_style+0x56>
                        style_act = lv_group_mod_style(g, par->style_p);
 800905a:	0020      	movs	r0, r4
 800905c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800905e:	f7ff fa19 	bl	8008494 <lv_group_mod_style>
 8009062:	0004      	movs	r4, r0
    if(obj->group_p) {
 8009064:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8009066:	2800      	cmp	r0, #0
 8009068:	d008      	beq.n	800907c <lv_obj_get_style+0x4c>
        if(lv_group_get_focused(obj->group_p) == obj) {
 800906a:	f7ff fa29 	bl	80084c0 <lv_group_get_focused>
 800906e:	4286      	cmp	r6, r0
 8009070:	d104      	bne.n	800907c <lv_obj_get_style+0x4c>
            style_act = lv_group_mod_style(obj->group_p, style_act);
 8009072:	0021      	movs	r1, r4
 8009074:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8009076:	f7ff fa0d 	bl	8008494 <lv_group_mod_style>
 800907a:	0004      	movs	r4, r0
    if(style_act == NULL) style_act = &lv_style_plain;
 800907c:	2c00      	cmp	r4, #0
 800907e:	d100      	bne.n	8009082 <lv_obj_get_style+0x52>
 8009080:	4c03      	ldr	r4, [pc, #12]	; (8009090 <lv_obj_get_style+0x60>)
}
 8009082:	0020      	movs	r0, r4
 8009084:	bd70      	pop	{r4, r5, r6, pc}
                        style_act = par->style_p;
 8009086:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8009088:	e7ec      	b.n	8009064 <lv_obj_get_style+0x34>
            par = par->par;
 800908a:	682d      	ldr	r5, [r5, #0]
 800908c:	e7d7      	b.n	800903e <lv_obj_get_style+0xe>
 800908e:	46c0      	nop			; (mov r8, r8)
 8009090:	20005380 	.word	0x20005380

08009094 <lv_obj_signal>:
{
 8009094:	b570      	push	{r4, r5, r6, lr}
 8009096:	000d      	movs	r5, r1
 8009098:	0004      	movs	r4, r0
 800909a:	0016      	movs	r6, r2
    const lv_style_t * style = lv_obj_get_style(obj);
 800909c:	f7ff ffc8 	bl	8009030 <lv_obj_get_style>
    if(sign == LV_SIGNAL_CHILD_CHG) {
 80090a0:	2d01      	cmp	r5, #1
 80090a2:	d104      	bne.n	80090ae <lv_obj_signal+0x1a>
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 80090a4:	0028      	movs	r0, r5
    return (obj->protect & prot) == 0 ? false : true;
 80090a6:	3432      	adds	r4, #50	; 0x32
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 80090a8:	7823      	ldrb	r3, [r4, #0]
 80090aa:	4398      	bics	r0, r3
}
 80090ac:	bd70      	pop	{r4, r5, r6, pc}
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 80090ae:	2d05      	cmp	r5, #5
 80090b0:	d108      	bne.n	80090c4 <lv_obj_signal+0x30>
        if(style->body.shadow.width > obj->ext_draw_pad) obj->ext_draw_pad = style->body.shadow.width;
 80090b2:	2212      	movs	r2, #18
 80090b4:	5e83      	ldrsh	r3, [r0, r2]
 80090b6:	2134      	movs	r1, #52	; 0x34
 80090b8:	5e62      	ldrsh	r2, [r4, r1]
    lv_res_t res = LV_RES_OK;
 80090ba:	2001      	movs	r0, #1
        if(style->body.shadow.width > obj->ext_draw_pad) obj->ext_draw_pad = style->body.shadow.width;
 80090bc:	429a      	cmp	r2, r3
 80090be:	daf5      	bge.n	80090ac <lv_obj_signal+0x18>
 80090c0:	86a3      	strh	r3, [r4, #52]	; 0x34
 80090c2:	e7f3      	b.n	80090ac <lv_obj_signal+0x18>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 80090c4:	2d04      	cmp	r5, #4
 80090c6:	d104      	bne.n	80090d2 <lv_obj_signal+0x3e>
        lv_obj_refresh_ext_draw_pad(obj);
 80090c8:	0020      	movs	r0, r4
 80090ca:	f7ff ff5b 	bl	8008f84 <lv_obj_refresh_ext_draw_pad>
    lv_res_t res = LV_RES_OK;
 80090ce:	2001      	movs	r0, #1
 80090d0:	e7ec      	b.n	80090ac <lv_obj_signal+0x18>
 80090d2:	2001      	movs	r0, #1
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 80090d4:	2d06      	cmp	r5, #6
 80090d6:	d1e9      	bne.n	80090ac <lv_obj_signal+0x18>
        buf->type[0]        = "lv_obj";
 80090d8:	4b01      	ldr	r3, [pc, #4]	; (80090e0 <lv_obj_signal+0x4c>)
 80090da:	6033      	str	r3, [r6, #0]
 80090dc:	e7e6      	b.n	80090ac <lv_obj_signal+0x18>
 80090de:	46c0      	nop			; (mov r8, r8)
 80090e0:	080128db 	.word	0x080128db

080090e4 <lv_obj_get_hidden>:
    return obj->hidden == 0 ? false : true;
 80090e4:	3030      	adds	r0, #48	; 0x30
 80090e6:	7800      	ldrb	r0, [r0, #0]
 80090e8:	06c0      	lsls	r0, r0, #27
 80090ea:	0fc0      	lsrs	r0, r0, #31
}
 80090ec:	4770      	bx	lr

080090ee <lv_obj_get_opa_scale>:
        if(parent->opa_scale_en) return parent->opa_scale;
 80090ee:	2340      	movs	r3, #64	; 0x40
    while(parent) {
 80090f0:	2800      	cmp	r0, #0
 80090f2:	d101      	bne.n	80090f8 <lv_obj_get_opa_scale+0xa>
    return LV_OPA_COVER;
 80090f4:	30ff      	adds	r0, #255	; 0xff
 80090f6:	e006      	b.n	8009106 <lv_obj_get_opa_scale+0x18>
        if(parent->opa_scale_en) return parent->opa_scale;
 80090f8:	0002      	movs	r2, r0
 80090fa:	3230      	adds	r2, #48	; 0x30
 80090fc:	7812      	ldrb	r2, [r2, #0]
 80090fe:	421a      	tst	r2, r3
 8009100:	d002      	beq.n	8009108 <lv_obj_get_opa_scale+0x1a>
 8009102:	3033      	adds	r0, #51	; 0x33
 8009104:	7800      	ldrb	r0, [r0, #0]
}
 8009106:	4770      	bx	lr
    return obj->par;
 8009108:	6800      	ldr	r0, [r0, #0]
 800910a:	e7f1      	b.n	80090f0 <lv_obj_get_opa_scale+0x2>

0800910c <lv_obj_design>:
{
 800910c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800910e:	0004      	movs	r4, r0
 8009110:	000e      	movs	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 8009112:	2a02      	cmp	r2, #2
 8009114:	d13c      	bne.n	8009190 <lv_obj_design+0x84>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 8009116:	0005      	movs	r5, r0
 8009118:	3510      	adds	r5, #16
 800911a:	0029      	movs	r1, r5
 800911c:	0030      	movs	r0, r6
 800911e:	f004 fc84 	bl	800da2a <lv_area_is_in>
 8009122:	2800      	cmp	r0, #0
 8009124:	d031      	beq.n	800918a <lv_obj_design+0x7e>
        const lv_style_t * style = lv_obj_get_style(obj);
 8009126:	0020      	movs	r0, r4
 8009128:	f7ff ff82 	bl	8009030 <lv_obj_get_style>
        if(style->body.opa < LV_OPA_MAX) return false;
 800912c:	7a03      	ldrb	r3, [r0, #8]
 800912e:	2bfa      	cmp	r3, #250	; 0xfa
 8009130:	d92b      	bls.n	800918a <lv_obj_design+0x7e>
        lv_coord_t r = style->body.radius;
 8009132:	2306      	movs	r3, #6
 8009134:	5ec4      	ldrsh	r4, [r0, r3]
        if(r == LV_RADIUS_CIRCLE) return false;
 8009136:	4b1f      	ldr	r3, [pc, #124]	; (80091b4 <lv_obj_design+0xa8>)
 8009138:	429c      	cmp	r4, r3
 800913a:	d026      	beq.n	800918a <lv_obj_design+0x7e>
    memcpy(dest, src, sizeof(lv_area_t));
 800913c:	2208      	movs	r2, #8
 800913e:	0029      	movs	r1, r5
 8009140:	4668      	mov	r0, sp
 8009142:	f006 fbff 	bl	800f944 <memcpy>
        area_tmp.x1 += r;
 8009146:	466b      	mov	r3, sp
 8009148:	466a      	mov	r2, sp
 800914a:	881b      	ldrh	r3, [r3, #0]
 800914c:	b2a4      	uxth	r4, r4
 800914e:	18e3      	adds	r3, r4, r3
 8009150:	8013      	strh	r3, [r2, #0]
        area_tmp.x2 -= r;
 8009152:	8893      	ldrh	r3, [r2, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8009154:	4669      	mov	r1, sp
        area_tmp.x2 -= r;
 8009156:	1b1b      	subs	r3, r3, r4
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8009158:	0030      	movs	r0, r6
        area_tmp.x2 -= r;
 800915a:	8093      	strh	r3, [r2, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800915c:	f004 fc65 	bl	800da2a <lv_area_is_in>
 8009160:	2800      	cmp	r0, #0
 8009162:	d012      	beq.n	800918a <lv_obj_design+0x7e>
 8009164:	0029      	movs	r1, r5
 8009166:	2208      	movs	r2, #8
 8009168:	4668      	mov	r0, sp
 800916a:	f006 fbeb 	bl	800f944 <memcpy>
        area_tmp.y1 += r;
 800916e:	466b      	mov	r3, sp
 8009170:	466a      	mov	r2, sp
 8009172:	885b      	ldrh	r3, [r3, #2]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8009174:	4669      	mov	r1, sp
        area_tmp.y1 += r;
 8009176:	18e3      	adds	r3, r4, r3
 8009178:	8053      	strh	r3, [r2, #2]
        area_tmp.y2 -= r;
 800917a:	88d3      	ldrh	r3, [r2, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800917c:	0030      	movs	r0, r6
        area_tmp.y2 -= r;
 800917e:	1b1c      	subs	r4, r3, r4
 8009180:	80d4      	strh	r4, [r2, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8009182:	f004 fc52 	bl	800da2a <lv_area_is_in>
 8009186:	1e05      	subs	r5, r0, #0
 8009188:	d100      	bne.n	800918c <lv_obj_design+0x80>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 800918a:	2500      	movs	r5, #0
}
 800918c:	0028      	movs	r0, r5
 800918e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    return true;
 8009190:	2501      	movs	r5, #1
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8009192:	2a00      	cmp	r2, #0
 8009194:	d1fa      	bne.n	800918c <lv_obj_design+0x80>
        const lv_style_t * style = lv_obj_get_style(obj);
 8009196:	f7ff ff4b 	bl	8009030 <lv_obj_get_style>
 800919a:	0007      	movs	r7, r0
        lv_draw_rect(&obj->coords, mask_p, style, lv_obj_get_opa_scale(obj));
 800919c:	0020      	movs	r0, r4
 800919e:	f7ff ffa6 	bl	80090ee <lv_obj_get_opa_scale>
 80091a2:	0003      	movs	r3, r0
 80091a4:	0020      	movs	r0, r4
 80091a6:	003a      	movs	r2, r7
 80091a8:	3010      	adds	r0, #16
 80091aa:	0031      	movs	r1, r6
 80091ac:	f001 fe18 	bl	800ade0 <lv_draw_rect>
 80091b0:	e7ec      	b.n	800918c <lv_obj_design+0x80>
 80091b2:	46c0      	nop			; (mov r8, r8)
 80091b4:	00007c18 	.word	0x00007c18

080091b8 <lv_obj_get_signal_cb>:
    return obj->signal_cb;
 80091b8:	69c0      	ldr	r0, [r0, #28]
}
 80091ba:	4770      	bx	lr

080091bc <lv_obj_get_ext_attr>:
    return obj->ext_attr;
 80091bc:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 80091be:	4770      	bx	lr

080091c0 <lv_obj_get_group>:
    return obj->group_p;
 80091c0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
 80091c2:	4770      	bx	lr

080091c4 <lv_obj_is_focused>:
    if(obj->group_p) {
 80091c4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 80091c6:	b510      	push	{r4, lr}
 80091c8:	0004      	movs	r4, r0
    return false;
 80091ca:	1e18      	subs	r0, r3, #0
    if(obj->group_p) {
 80091cc:	d005      	beq.n	80091da <lv_obj_is_focused+0x16>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 80091ce:	f7ff f977 	bl	80084c0 <lv_group_get_focused>
 80091d2:	1a20      	subs	r0, r4, r0
 80091d4:	4244      	negs	r4, r0
 80091d6:	4160      	adcs	r0, r4
 80091d8:	b2c0      	uxtb	r0, r0
}
 80091da:	bd10      	pop	{r4, pc}

080091dc <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
 80091dc:	b570      	push	{r4, r5, r6, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80091de:	4d13      	ldr	r5, [pc, #76]	; (800922c <lv_refr_vdb_flush+0x50>)
 80091e0:	6828      	ldr	r0, [r5, #0]
 80091e2:	f004 fa33 	bl	800d64c <lv_disp_get_buf>
 80091e6:	0004      	movs	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
 80091e8:	6828      	ldr	r0, [r5, #0]
 80091ea:	f004 fa31 	bl	800d650 <lv_disp_is_double_buf>
 80091ee:	2800      	cmp	r0, #0
 80091f0:	d002      	beq.n	80091f8 <lv_refr_vdb_flush+0x1c>
        while(vdb->flushing)
 80091f2:	69a3      	ldr	r3, [r4, #24]
 80091f4:	07db      	lsls	r3, r3, #31
 80091f6:	d4fc      	bmi.n	80091f2 <lv_refr_vdb_flush+0x16>
            ;
    }

    vdb->flushing = 1;
 80091f8:	2301      	movs	r3, #1
 80091fa:	7e22      	ldrb	r2, [r4, #24]
    return disp_refr;
 80091fc:	6828      	ldr	r0, [r5, #0]
    vdb->flushing = 1;
 80091fe:	4313      	orrs	r3, r2
 8009200:	7623      	strb	r3, [r4, #24]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
 8009202:	68c3      	ldr	r3, [r0, #12]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d003      	beq.n	8009210 <lv_refr_vdb_flush+0x34>
 8009208:	0021      	movs	r1, r4
 800920a:	68a2      	ldr	r2, [r4, #8]
 800920c:	3110      	adds	r1, #16
 800920e:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
 8009210:	6823      	ldr	r3, [r4, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d006      	beq.n	8009224 <lv_refr_vdb_flush+0x48>
 8009216:	6862      	ldr	r2, [r4, #4]
 8009218:	2a00      	cmp	r2, #0
 800921a:	d003      	beq.n	8009224 <lv_refr_vdb_flush+0x48>
        if(vdb->buf_act == vdb->buf1)
 800921c:	68a1      	ldr	r1, [r4, #8]
 800921e:	428b      	cmp	r3, r1
 8009220:	d101      	bne.n	8009226 <lv_refr_vdb_flush+0x4a>
            vdb->buf_act = vdb->buf2;
 8009222:	60a2      	str	r2, [r4, #8]
        else
            vdb->buf_act = vdb->buf1;
    }
}
 8009224:	bd70      	pop	{r4, r5, r6, pc}
            vdb->buf_act = vdb->buf1;
 8009226:	60a3      	str	r3, [r4, #8]
}
 8009228:	e7fc      	b.n	8009224 <lv_refr_vdb_flush+0x48>
 800922a:	46c0      	nop			; (mov r8, r8)
 800922c:	2000152c 	.word	0x2000152c

08009230 <lv_refr_get_top_obj>:
{
 8009230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009232:	000c      	movs	r4, r1
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8009234:	3110      	adds	r1, #16
{
 8009236:	0006      	movs	r6, r0
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8009238:	f004 fbf7 	bl	800da2a <lv_area_is_in>
 800923c:	2800      	cmp	r0, #0
 800923e:	d101      	bne.n	8009244 <lv_refr_get_top_obj+0x14>
    lv_obj_t * found_p = NULL;
 8009240:	2000      	movs	r0, #0
}
 8009242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8009244:	0023      	movs	r3, r4
 8009246:	3330      	adds	r3, #48	; 0x30
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	06db      	lsls	r3, r3, #27
 800924c:	d4f8      	bmi.n	8009240 <lv_refr_get_top_obj+0x10>
        LV_LL_READ(obj->child_ll, i)
 800924e:	1d27      	adds	r7, r4, #4
 8009250:	0038      	movs	r0, r7
 8009252:	f004 fd66 	bl	800dd22 <lv_ll_get_head>
 8009256:	1e05      	subs	r5, r0, #0
 8009258:	d113      	bne.n	8009282 <lv_refr_get_top_obj+0x52>
            const lv_style_t * style = lv_obj_get_style(obj);
 800925a:	0020      	movs	r0, r4
 800925c:	f7ff fee8 	bl	8009030 <lv_obj_get_style>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 8009260:	7a03      	ldrb	r3, [r0, #8]
 8009262:	2bff      	cmp	r3, #255	; 0xff
 8009264:	d1ec      	bne.n	8009240 <lv_refr_get_top_obj+0x10>
 8009266:	2202      	movs	r2, #2
 8009268:	0031      	movs	r1, r6
 800926a:	0020      	movs	r0, r4
 800926c:	6a23      	ldr	r3, [r4, #32]
 800926e:	4798      	blx	r3
 8009270:	2800      	cmp	r0, #0
 8009272:	d0e5      	beq.n	8009240 <lv_refr_get_top_obj+0x10>
               lv_obj_get_opa_scale(obj) == LV_OPA_COVER) {
 8009274:	0020      	movs	r0, r4
 8009276:	f7ff ff3a 	bl	80090ee <lv_obj_get_opa_scale>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 800927a:	28ff      	cmp	r0, #255	; 0xff
 800927c:	d1e0      	bne.n	8009240 <lv_refr_get_top_obj+0x10>
 800927e:	0020      	movs	r0, r4
    return found_p;
 8009280:	e7df      	b.n	8009242 <lv_refr_get_top_obj+0x12>
            found_p = lv_refr_get_top_obj(area_p, i);
 8009282:	0029      	movs	r1, r5
 8009284:	0030      	movs	r0, r6
 8009286:	f7ff ffd3 	bl	8009230 <lv_refr_get_top_obj>
            if(found_p != NULL) {
 800928a:	2800      	cmp	r0, #0
 800928c:	d1d9      	bne.n	8009242 <lv_refr_get_top_obj+0x12>
        LV_LL_READ(obj->child_ll, i)
 800928e:	0029      	movs	r1, r5
 8009290:	0038      	movs	r0, r7
 8009292:	f004 fd4e 	bl	800dd32 <lv_ll_get_next>
 8009296:	e7de      	b.n	8009256 <lv_refr_get_top_obj+0x26>

08009298 <lv_refr_obj>:
    if(obj->hidden != 0) return;
 8009298:	0003      	movs	r3, r0
 800929a:	3330      	adds	r3, #48	; 0x30
 800929c:	781a      	ldrb	r2, [r3, #0]
 800929e:	2310      	movs	r3, #16
{
 80092a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(obj->hidden != 0) return;
 80092a2:	401a      	ands	r2, r3
{
 80092a4:	b08d      	sub	sp, #52	; 0x34
 80092a6:	0005      	movs	r5, r0
 80092a8:	000f      	movs	r7, r1
    if(obj->hidden != 0) return;
 80092aa:	9201      	str	r2, [sp, #4]
 80092ac:	2a00      	cmp	r2, #0
 80092ae:	d134      	bne.n	800931a <lv_refr_obj+0x82>
    lv_obj_get_coords(obj, &obj_area);
 80092b0:	ac06      	add	r4, sp, #24
    lv_coord_t ext_size = obj->ext_draw_pad;
 80092b2:	2334      	movs	r3, #52	; 0x34
 80092b4:	5ec6      	ldrsh	r6, [r0, r3]
    lv_obj_get_coords(obj, &obj_area);
 80092b6:	0021      	movs	r1, r4
 80092b8:	f7ff fea4 	bl	8009004 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 80092bc:	8823      	ldrh	r3, [r4, #0]
 80092be:	b2b6      	uxth	r6, r6
 80092c0:	1b9b      	subs	r3, r3, r6
 80092c2:	8023      	strh	r3, [r4, #0]
    obj_area.y1 -= ext_size;
 80092c4:	8863      	ldrh	r3, [r4, #2]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80092c6:	0022      	movs	r2, r4
    obj_area.y1 -= ext_size;
 80092c8:	1b9b      	subs	r3, r3, r6
 80092ca:	8063      	strh	r3, [r4, #2]
    obj_area.x2 += ext_size;
 80092cc:	88a3      	ldrh	r3, [r4, #4]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80092ce:	0039      	movs	r1, r7
    obj_area.x2 += ext_size;
 80092d0:	18f3      	adds	r3, r6, r3
 80092d2:	80a3      	strh	r3, [r4, #4]
    obj_area.y2 += ext_size;
 80092d4:	88e3      	ldrh	r3, [r4, #6]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80092d6:	a804      	add	r0, sp, #16
    obj_area.y2 += ext_size;
 80092d8:	18f6      	adds	r6, r6, r3
 80092da:	80e6      	strh	r6, [r4, #6]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80092dc:	f004 fb2b 	bl	800d936 <lv_area_intersect>
    if(union_ok != false) {
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d01a      	beq.n	800931a <lv_refr_obj+0x82>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 80092e4:	9a01      	ldr	r2, [sp, #4]
 80092e6:	a904      	add	r1, sp, #16
 80092e8:	6a2b      	ldr	r3, [r5, #32]
 80092ea:	0028      	movs	r0, r5
 80092ec:	4798      	blx	r3
        lv_obj_get_coords(obj, &obj_area);
 80092ee:	0021      	movs	r1, r4
 80092f0:	0028      	movs	r0, r5
 80092f2:	f7ff fe87 	bl	8009004 <lv_obj_get_coords>
        union_ok = lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 80092f6:	0022      	movs	r2, r4
 80092f8:	0039      	movs	r1, r7
 80092fa:	a802      	add	r0, sp, #8
 80092fc:	f004 fb1b 	bl	800d936 <lv_area_intersect>
        if(union_ok != false) {
 8009300:	2800      	cmp	r0, #0
 8009302:	d005      	beq.n	8009310 <lv_refr_obj+0x78>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 8009304:	1d2f      	adds	r7, r5, #4
 8009306:	0038      	movs	r0, r7
 8009308:	f004 fd0f 	bl	800dd2a <lv_ll_get_tail>
 800930c:	1e06      	subs	r6, r0, #0
 800930e:	d106      	bne.n	800931e <lv_refr_obj+0x86>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 8009310:	6a2b      	ldr	r3, [r5, #32]
 8009312:	2201      	movs	r2, #1
 8009314:	a904      	add	r1, sp, #16
 8009316:	0028      	movs	r0, r5
 8009318:	4798      	blx	r3
}
 800931a:	b00d      	add	sp, #52	; 0x34
 800931c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_get_coords(child_p, &child_area);
 800931e:	ac0a      	add	r4, sp, #40	; 0x28
 8009320:	0021      	movs	r1, r4
 8009322:	0030      	movs	r0, r6
 8009324:	f7ff fe6e 	bl	8009004 <lv_obj_get_coords>
                child_area.x1 -= ext_size;
 8009328:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
 800932a:	8822      	ldrh	r2, [r4, #0]
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800932c:	a902      	add	r1, sp, #8
                child_area.x1 -= ext_size;
 800932e:	1ad2      	subs	r2, r2, r3
 8009330:	8022      	strh	r2, [r4, #0]
                child_area.y1 -= ext_size;
 8009332:	8862      	ldrh	r2, [r4, #2]
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8009334:	a808      	add	r0, sp, #32
                child_area.y1 -= ext_size;
 8009336:	1ad2      	subs	r2, r2, r3
 8009338:	8062      	strh	r2, [r4, #2]
                child_area.x2 += ext_size;
 800933a:	88a2      	ldrh	r2, [r4, #4]
 800933c:	189a      	adds	r2, r3, r2
 800933e:	80a2      	strh	r2, [r4, #4]
                child_area.y2 += ext_size;
 8009340:	88e2      	ldrh	r2, [r4, #6]
 8009342:	189b      	adds	r3, r3, r2
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8009344:	0022      	movs	r2, r4
                child_area.y2 += ext_size;
 8009346:	80e3      	strh	r3, [r4, #6]
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8009348:	f004 faf5 	bl	800d936 <lv_area_intersect>
                if(union_ok) {
 800934c:	2800      	cmp	r0, #0
 800934e:	d003      	beq.n	8009358 <lv_refr_obj+0xc0>
                    lv_refr_obj(child_p, &mask_child);
 8009350:	a908      	add	r1, sp, #32
 8009352:	0030      	movs	r0, r6
 8009354:	f7ff ffa0 	bl	8009298 <lv_refr_obj>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 8009358:	0031      	movs	r1, r6
 800935a:	0038      	movs	r0, r7
 800935c:	f004 fcf7 	bl	800dd4e <lv_ll_get_prev>
 8009360:	e7d4      	b.n	800930c <lv_refr_obj+0x74>
	...

08009364 <lv_refr_obj_and_children>:
{
 8009364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009366:	0005      	movs	r5, r0
 8009368:	000e      	movs	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 800936a:	2800      	cmp	r0, #0
 800936c:	d104      	bne.n	8009378 <lv_refr_obj_and_children+0x14>
 800936e:	4b12      	ldr	r3, [pc, #72]	; (80093b8 <lv_refr_obj_and_children+0x54>)
 8009370:	6818      	ldr	r0, [r3, #0]
 8009372:	f7fe ff84 	bl	800827e <lv_disp_get_scr_act>
 8009376:	0005      	movs	r5, r0
    lv_refr_obj(top_p, mask_p);
 8009378:	0028      	movs	r0, r5
 800937a:	0031      	movs	r1, r6
 800937c:	f7ff ff8c 	bl	8009298 <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
 8009380:	0028      	movs	r0, r5
 8009382:	f7ff fe0a 	bl	8008f9a <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
 8009386:	1e04      	subs	r4, r0, #0
    while(par != NULL) {
 8009388:	d100      	bne.n	800938c <lv_refr_obj_and_children+0x28>
}
 800938a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * i = lv_ll_get_prev(&(par->child_ll), border_p);
 800938c:	1d27      	adds	r7, r4, #4
            i = lv_ll_get_prev(&(par->child_ll), i);
 800938e:	0029      	movs	r1, r5
 8009390:	0038      	movs	r0, r7
 8009392:	f004 fcdc 	bl	800dd4e <lv_ll_get_prev>
 8009396:	1e05      	subs	r5, r0, #0
        while(i != NULL) {
 8009398:	d109      	bne.n	80093ae <lv_refr_obj_and_children+0x4a>
        par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
 800939a:	2201      	movs	r2, #1
 800939c:	0031      	movs	r1, r6
 800939e:	6a23      	ldr	r3, [r4, #32]
 80093a0:	0020      	movs	r0, r4
 80093a2:	4798      	blx	r3
        par = lv_obj_get_parent(par);
 80093a4:	0020      	movs	r0, r4
 80093a6:	f7ff fdf8 	bl	8008f9a <lv_obj_get_parent>
 80093aa:	0025      	movs	r5, r4
 80093ac:	e7eb      	b.n	8009386 <lv_refr_obj_and_children+0x22>
            lv_refr_obj(i, mask_p);
 80093ae:	0031      	movs	r1, r6
 80093b0:	0028      	movs	r0, r5
 80093b2:	f7ff ff71 	bl	8009298 <lv_refr_obj>
 80093b6:	e7ea      	b.n	800938e <lv_refr_obj_and_children+0x2a>
 80093b8:	2000152c 	.word	0x2000152c

080093bc <lv_refr_area_part>:
{
 80093bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80093be:	4c19      	ldr	r4, [pc, #100]	; (8009424 <lv_refr_area_part+0x68>)
{
 80093c0:	0006      	movs	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80093c2:	6820      	ldr	r0, [r4, #0]
 80093c4:	f004 f942 	bl	800d64c <lv_disp_get_buf>
 80093c8:	0005      	movs	r5, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
 80093ca:	6820      	ldr	r0, [r4, #0]
 80093cc:	f004 f940 	bl	800d650 <lv_disp_is_double_buf>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	d102      	bne.n	80093da <lv_refr_area_part+0x1e>
        while(vdb->flushing)
 80093d4:	69ab      	ldr	r3, [r5, #24]
 80093d6:	07db      	lsls	r3, r3, #31
 80093d8:	d4fc      	bmi.n	80093d4 <lv_refr_area_part+0x18>
    lv_area_intersect(&start_mask, area_p, &vdb->area);
 80093da:	002a      	movs	r2, r5
 80093dc:	0031      	movs	r1, r6
 80093de:	3210      	adds	r2, #16
 80093e0:	4668      	mov	r0, sp
 80093e2:	f004 faa8 	bl	800d936 <lv_area_intersect>
    top_p = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 80093e6:	6820      	ldr	r0, [r4, #0]
 80093e8:	f7fe ff49 	bl	800827e <lv_disp_get_scr_act>
 80093ec:	0001      	movs	r1, r0
 80093ee:	4668      	mov	r0, sp
 80093f0:	f7ff ff1e 	bl	8009230 <lv_refr_get_top_obj>
    lv_refr_obj_and_children(top_p, &start_mask);
 80093f4:	4669      	mov	r1, sp
 80093f6:	f7ff ffb5 	bl	8009364 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 80093fa:	6820      	ldr	r0, [r4, #0]
 80093fc:	f7fe ff49 	bl	8008292 <lv_disp_get_layer_top>
 8009400:	4669      	mov	r1, sp
 8009402:	f7ff ffaf 	bl	8009364 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 8009406:	6820      	ldr	r0, [r4, #0]
 8009408:	f7fe ff4d 	bl	80082a6 <lv_disp_get_layer_sys>
 800940c:	4669      	mov	r1, sp
 800940e:	f7ff ffa9 	bl	8009364 <lv_refr_obj_and_children>
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
 8009412:	6820      	ldr	r0, [r4, #0]
 8009414:	f004 f925 	bl	800d662 <lv_disp_is_true_double_buf>
 8009418:	2800      	cmp	r0, #0
 800941a:	d101      	bne.n	8009420 <lv_refr_area_part+0x64>
        lv_refr_vdb_flush();
 800941c:	f7ff fede 	bl	80091dc <lv_refr_vdb_flush>
}
 8009420:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8009422:	46c0      	nop			; (mov r8, r8)
 8009424:	2000152c 	.word	0x2000152c

08009428 <lv_refr_init>:
}
 8009428:	4770      	bx	lr

0800942a <lv_inv_area>:
{
 800942a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800942c:	0004      	movs	r4, r0
 800942e:	000d      	movs	r5, r1
    if(!disp) disp = lv_disp_get_default();
 8009430:	2800      	cmp	r0, #0
 8009432:	d103      	bne.n	800943c <lv_inv_area+0x12>
 8009434:	f004 f8cc 	bl	800d5d0 <lv_disp_get_default>
 8009438:	1e04      	subs	r4, r0, #0
    if(!disp) return;
 800943a:	d007      	beq.n	800944c <lv_inv_area+0x22>
    if(area_p == NULL) {
 800943c:	2d00      	cmp	r5, #0
 800943e:	d106      	bne.n	800944e <lv_inv_area+0x24>
        disp->inv_p = 0;
 8009440:	22b2      	movs	r2, #178	; 0xb2
 8009442:	0052      	lsls	r2, r2, #1
 8009444:	5aa3      	ldrh	r3, [r4, r2]
 8009446:	0a9b      	lsrs	r3, r3, #10
 8009448:	029b      	lsls	r3, r3, #10
 800944a:	52a3      	strh	r3, [r4, r2]
}
 800944c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    scr_area.x1 = 0;
 800944e:	466a      	mov	r2, sp
 8009450:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8009452:	0020      	movs	r0, r4
    scr_area.x1 = 0;
 8009454:	8013      	strh	r3, [r2, #0]
    scr_area.y1 = 0;
 8009456:	8053      	strh	r3, [r2, #2]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8009458:	f004 f8c0 	bl	800d5dc <lv_disp_get_hor_res>
 800945c:	466b      	mov	r3, sp
 800945e:	3801      	subs	r0, #1
 8009460:	8098      	strh	r0, [r3, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 8009462:	0020      	movs	r0, r4
 8009464:	f004 f8cc 	bl	800d600 <lv_disp_get_ver_res>
 8009468:	466b      	mov	r3, sp
 800946a:	3801      	subs	r0, #1
 800946c:	80d8      	strh	r0, [r3, #6]
    suc = lv_area_intersect(&com_area, area_p, &scr_area);
 800946e:	466a      	mov	r2, sp
 8009470:	0029      	movs	r1, r5
 8009472:	a802      	add	r0, sp, #8
 8009474:	f004 fa5f 	bl	800d936 <lv_area_intersect>
    if(suc != false) {
 8009478:	2800      	cmp	r0, #0
 800947a:	d0e7      	beq.n	800944c <lv_inv_area+0x22>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
 800947c:	6923      	ldr	r3, [r4, #16]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d002      	beq.n	8009488 <lv_inv_area+0x5e>
 8009482:	a902      	add	r1, sp, #8
 8009484:	0020      	movs	r0, r4
 8009486:	4798      	blx	r3
        for(i = 0; i < disp->inv_p; i++) {
 8009488:	26b2      	movs	r6, #178	; 0xb2
{
 800948a:	2500      	movs	r5, #0
        for(i = 0; i < disp->inv_p; i++) {
 800948c:	0076      	lsls	r6, r6, #1
 800948e:	5ba0      	ldrh	r0, [r4, r6]
 8009490:	1c03      	adds	r3, r0, #0
 8009492:	0580      	lsls	r0, r0, #22
 8009494:	0d80      	lsrs	r0, r0, #22
 8009496:	4285      	cmp	r5, r0
 8009498:	db15      	blt.n	80094c6 <lv_inv_area+0x9c>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
 800949a:	281f      	cmp	r0, #31
 800949c:	dc1e      	bgt.n	80094dc <lv_inv_area+0xb2>
 800949e:	2208      	movs	r2, #8
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 80094a0:	00c0      	lsls	r0, r0, #3
 80094a2:	3044      	adds	r0, #68	; 0x44
 80094a4:	1820      	adds	r0, r4, r0
 80094a6:	a902      	add	r1, sp, #8
 80094a8:	f006 fa4c 	bl	800f944 <memcpy>
        disp->inv_p++;
 80094ac:	21b2      	movs	r1, #178	; 0xb2
 80094ae:	2080      	movs	r0, #128	; 0x80
 80094b0:	0049      	lsls	r1, r1, #1
 80094b2:	5a63      	ldrh	r3, [r4, r1]
 80094b4:	03c0      	lsls	r0, r0, #15
 80094b6:	059a      	lsls	r2, r3, #22
 80094b8:	1812      	adds	r2, r2, r0
 80094ba:	0a9b      	lsrs	r3, r3, #10
 80094bc:	0d92      	lsrs	r2, r2, #22
 80094be:	029b      	lsls	r3, r3, #10
 80094c0:	4313      	orrs	r3, r2
 80094c2:	5263      	strh	r3, [r4, r1]
 80094c4:	e7c2      	b.n	800944c <lv_inv_area+0x22>
            if(lv_area_is_in(&com_area, &disp->inv_areas[i]) != false) return;
 80094c6:	00e9      	lsls	r1, r5, #3
 80094c8:	3144      	adds	r1, #68	; 0x44
 80094ca:	1861      	adds	r1, r4, r1
 80094cc:	a802      	add	r0, sp, #8
 80094ce:	f004 faac 	bl	800da2a <lv_area_is_in>
 80094d2:	2800      	cmp	r0, #0
 80094d4:	d1ba      	bne.n	800944c <lv_inv_area+0x22>
        for(i = 0; i < disp->inv_p; i++) {
 80094d6:	3501      	adds	r5, #1
 80094d8:	b2ad      	uxth	r5, r5
 80094da:	e7d8      	b.n	800948e <lv_inv_area+0x64>
 80094dc:	0020      	movs	r0, r4
            disp->inv_p = 0;
 80094de:	0a9b      	lsrs	r3, r3, #10
 80094e0:	029b      	lsls	r3, r3, #10
 80094e2:	53a3      	strh	r3, [r4, r6]
 80094e4:	2208      	movs	r2, #8
 80094e6:	4669      	mov	r1, sp
 80094e8:	3044      	adds	r0, #68	; 0x44
 80094ea:	e7dd      	b.n	80094a8 <lv_inv_area+0x7e>

080094ec <lv_refr_get_disp_refreshing>:
    return disp_refr;
 80094ec:	4b01      	ldr	r3, [pc, #4]	; (80094f4 <lv_refr_get_disp_refreshing+0x8>)
 80094ee:	6818      	ldr	r0, [r3, #0]
}
 80094f0:	4770      	bx	lr
 80094f2:	46c0      	nop			; (mov r8, r8)
 80094f4:	2000152c 	.word	0x2000152c

080094f8 <lv_disp_refr_task>:
{
 80094f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094fa:	0004      	movs	r4, r0
 80094fc:	b08b      	sub	sp, #44	; 0x2c
    uint32_t start = lv_tick_get();
 80094fe:	f004 f8d1 	bl	800d6a4 <lv_tick_get>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8009502:	2700      	movs	r7, #0
    disp_refr = task->user_data;
 8009504:	68e2      	ldr	r2, [r4, #12]
 8009506:	4bc2      	ldr	r3, [pc, #776]	; (8009810 <lv_disp_refr_task+0x318>)
    uint32_t start = lv_tick_get();
 8009508:	9006      	str	r0, [sp, #24]
    disp_refr = task->user_data;
 800950a:	601a      	str	r2, [r3, #0]
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800950c:	22b2      	movs	r2, #178	; 0xb2
 800950e:	4bc0      	ldr	r3, [pc, #768]	; (8009810 <lv_disp_refr_task+0x318>)
 8009510:	0052      	lsls	r2, r2, #1
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	5a9a      	ldrh	r2, [r3, r2]
 8009516:	0592      	lsls	r2, r2, #22
 8009518:	0d92      	lsrs	r2, r2, #22
 800951a:	4297      	cmp	r7, r2
 800951c:	d334      	bcc.n	8009588 <lv_disp_refr_task+0x90>
    px_num = 0;
 800951e:	2300      	movs	r3, #0
 8009520:	4abc      	ldr	r2, [pc, #752]	; (8009814 <lv_disp_refr_task+0x31c>)
 8009522:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8009524:	9302      	str	r3, [sp, #8]
 8009526:	23b2      	movs	r3, #178	; 0xb2
 8009528:	4db9      	ldr	r5, [pc, #740]	; (8009810 <lv_disp_refr_task+0x318>)
 800952a:	005b      	lsls	r3, r3, #1
 800952c:	682c      	ldr	r4, [r5, #0]
 800952e:	9902      	ldr	r1, [sp, #8]
 8009530:	5ae3      	ldrh	r3, [r4, r3]
 8009532:	059b      	lsls	r3, r3, #22
 8009534:	0d9a      	lsrs	r2, r3, #22
 8009536:	4291      	cmp	r1, r2
 8009538:	d200      	bcs.n	800953c <lv_disp_refr_task+0x44>
 800953a:	e072      	b.n	8009622 <lv_disp_refr_task+0x12a>
    if(disp_refr->inv_p != 0) {
 800953c:	2b00      	cmp	r3, #0
 800953e:	d01f      	beq.n	8009580 <lv_disp_refr_task+0x88>
        if(lv_disp_is_true_double_buf(disp_refr)) {
 8009540:	0020      	movs	r0, r4
 8009542:	f004 f88e 	bl	800d662 <lv_disp_is_true_double_buf>
 8009546:	2800      	cmp	r0, #0
 8009548:	d000      	beq.n	800954c <lv_disp_refr_task+0x54>
 800954a:	e133      	b.n	80097b4 <lv_disp_refr_task+0x2bc>
        memset(disp_refr->inv_areas, 0, sizeof(disp_refr->inv_areas));
 800954c:	4bb0      	ldr	r3, [pc, #704]	; (8009810 <lv_disp_refr_task+0x318>)
 800954e:	2280      	movs	r2, #128	; 0x80
 8009550:	681c      	ldr	r4, [r3, #0]
 8009552:	0052      	lsls	r2, r2, #1
 8009554:	0020      	movs	r0, r4
 8009556:	2100      	movs	r1, #0
 8009558:	3044      	adds	r0, #68	; 0x44
 800955a:	f006 f9fc 	bl	800f956 <memset>
        memset(disp_refr->inv_area_joined, 0, sizeof(disp_refr->inv_area_joined));
 800955e:	0020      	movs	r0, r4
 8009560:	3045      	adds	r0, #69	; 0x45
 8009562:	2220      	movs	r2, #32
 8009564:	30ff      	adds	r0, #255	; 0xff
 8009566:	2100      	movs	r1, #0
 8009568:	f006 f9f5 	bl	800f956 <memset>
        disp_refr->inv_p = 0;
 800956c:	22b2      	movs	r2, #178	; 0xb2
 800956e:	0052      	lsls	r2, r2, #1
 8009570:	5aa3      	ldrh	r3, [r4, r2]
 8009572:	0a9b      	lsrs	r3, r3, #10
 8009574:	029b      	lsls	r3, r3, #10
 8009576:	52a3      	strh	r3, [r4, r2]
        if(disp_refr->driver.monitor_cb) {
 8009578:	69a5      	ldr	r5, [r4, #24]
 800957a:	2d00      	cmp	r5, #0
 800957c:	d000      	beq.n	8009580 <lv_disp_refr_task+0x88>
 800957e:	e178      	b.n	8009872 <lv_disp_refr_task+0x37a>
    lv_draw_free_buf();
 8009580:	f000 fda2 	bl	800a0c8 <lv_draw_free_buf>
}
 8009584:	b00b      	add	sp, #44	; 0x2c
 8009586:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 8009588:	19db      	adds	r3, r3, r7
 800958a:	3345      	adds	r3, #69	; 0x45
 800958c:	33ff      	adds	r3, #255	; 0xff
 800958e:	781c      	ldrb	r4, [r3, #0]
 8009590:	2c00      	cmp	r4, #0
 8009592:	d10a      	bne.n	80095aa <lv_disp_refr_task+0xb2>
 8009594:	00fe      	lsls	r6, r7, #3
 8009596:	3644      	adds	r6, #68	; 0x44
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8009598:	23b2      	movs	r3, #178	; 0xb2
 800959a:	4d9d      	ldr	r5, [pc, #628]	; (8009810 <lv_disp_refr_task+0x318>)
 800959c:	005b      	lsls	r3, r3, #1
 800959e:	6828      	ldr	r0, [r5, #0]
 80095a0:	5ac3      	ldrh	r3, [r0, r3]
 80095a2:	059b      	lsls	r3, r3, #22
 80095a4:	0d9b      	lsrs	r3, r3, #22
 80095a6:	429c      	cmp	r4, r3
 80095a8:	d301      	bcc.n	80095ae <lv_disp_refr_task+0xb6>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 80095aa:	3701      	adds	r7, #1
 80095ac:	e7ae      	b.n	800950c <lv_disp_refr_task+0x14>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 80095ae:	1903      	adds	r3, r0, r4
 80095b0:	3345      	adds	r3, #69	; 0x45
 80095b2:	33ff      	adds	r3, #255	; 0xff
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d131      	bne.n	800961e <lv_disp_refr_task+0x126>
 80095ba:	42a7      	cmp	r7, r4
 80095bc:	d02f      	beq.n	800961e <lv_disp_refr_task+0x126>
 80095be:	00e3      	lsls	r3, r4, #3
 80095c0:	3344      	adds	r3, #68	; 0x44
            if(lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 80095c2:	18c1      	adds	r1, r0, r3
 80095c4:	1980      	adds	r0, r0, r6
 80095c6:	9301      	str	r3, [sp, #4]
 80095c8:	f004 fa10 	bl	800d9ec <lv_area_is_on>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	d026      	beq.n	800961e <lv_disp_refr_task+0x126>
            lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 80095d0:	9b01      	ldr	r3, [sp, #4]
 80095d2:	6829      	ldr	r1, [r5, #0]
 80095d4:	a808      	add	r0, sp, #32
 80095d6:	18ca      	adds	r2, r1, r3
 80095d8:	1989      	adds	r1, r1, r6
 80095da:	f004 f9e1 	bl	800d9a0 <lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 80095de:	a808      	add	r0, sp, #32
 80095e0:	f004 f99b 	bl	800d91a <lv_area_get_size>
 80095e4:	682b      	ldr	r3, [r5, #0]
 80095e6:	9002      	str	r0, [sp, #8]
 80095e8:	1998      	adds	r0, r3, r6
 80095ea:	f004 f996 	bl	800d91a <lv_area_get_size>
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 80095ee:	682a      	ldr	r2, [r5, #0]
 80095f0:	9b01      	ldr	r3, [sp, #4]
 80095f2:	4694      	mov	ip, r2
 80095f4:	4463      	add	r3, ip
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 80095f6:	9003      	str	r0, [sp, #12]
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 80095f8:	0018      	movs	r0, r3
 80095fa:	f004 f98e 	bl	800d91a <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 80095fe:	9b03      	ldr	r3, [sp, #12]
 8009600:	9a02      	ldr	r2, [sp, #8]
 8009602:	181b      	adds	r3, r3, r0
 8009604:	429a      	cmp	r2, r3
 8009606:	d20a      	bcs.n	800961e <lv_disp_refr_task+0x126>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 8009608:	682d      	ldr	r5, [r5, #0]
 800960a:	2208      	movs	r2, #8
 800960c:	19a8      	adds	r0, r5, r6
 800960e:	a908      	add	r1, sp, #32
 8009610:	f006 f998 	bl	800f944 <memcpy>
                disp_refr->inv_area_joined[join_from] = 1;
 8009614:	2301      	movs	r3, #1
 8009616:	192d      	adds	r5, r5, r4
 8009618:	3545      	adds	r5, #69	; 0x45
 800961a:	35ff      	adds	r5, #255	; 0xff
 800961c:	702b      	strb	r3, [r5, #0]
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800961e:	3401      	adds	r4, #1
 8009620:	e7ba      	b.n	8009598 <lv_disp_refr_task+0xa0>
        if(disp_refr->inv_area_joined[i] == 0) {
 8009622:	9b02      	ldr	r3, [sp, #8]
 8009624:	18e3      	adds	r3, r4, r3
 8009626:	3345      	adds	r3, #69	; 0x45
 8009628:	33ff      	adds	r3, #255	; 0xff
 800962a:	781e      	ldrb	r6, [r3, #0]
 800962c:	2e00      	cmp	r6, #0
 800962e:	d175      	bne.n	800971c <lv_disp_refr_task+0x224>
 8009630:	9b02      	ldr	r3, [sp, #8]
    if(lv_disp_is_true_double_buf(disp_refr)) {
 8009632:	0020      	movs	r0, r4
 8009634:	00db      	lsls	r3, r3, #3
 8009636:	9304      	str	r3, [sp, #16]
 8009638:	3344      	adds	r3, #68	; 0x44
 800963a:	9305      	str	r3, [sp, #20]
            lv_refr_area(&disp_refr->inv_areas[i]);
 800963c:	18e3      	adds	r3, r4, r3
 800963e:	9301      	str	r3, [sp, #4]
    if(lv_disp_is_true_double_buf(disp_refr)) {
 8009640:	f004 f80f 	bl	800d662 <lv_disp_is_true_double_buf>
 8009644:	2800      	cmp	r0, #0
 8009646:	d013      	beq.n	8009670 <lv_disp_refr_task+0x178>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8009648:	6828      	ldr	r0, [r5, #0]
 800964a:	f003 ffff 	bl	800d64c <lv_disp_get_buf>
 800964e:	0004      	movs	r4, r0
        vdb->area.x1        = 0;
 8009650:	8206      	strh	r6, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 8009652:	6828      	ldr	r0, [r5, #0]
 8009654:	f003 ffc2 	bl	800d5dc <lv_disp_get_hor_res>
 8009658:	3801      	subs	r0, #1
 800965a:	82a0      	strh	r0, [r4, #20]
        vdb->area.y1        = 0;
 800965c:	8266      	strh	r6, [r4, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 800965e:	6828      	ldr	r0, [r5, #0]
 8009660:	f003 ffce 	bl	800d600 <lv_disp_get_ver_res>
 8009664:	3801      	subs	r0, #1
 8009666:	82e0      	strh	r0, [r4, #22]
            lv_refr_area_part(area_p);
 8009668:	9801      	ldr	r0, [sp, #4]
 800966a:	f7ff fea7 	bl	80093bc <lv_refr_area_part>
 800966e:	e048      	b.n	8009702 <lv_disp_refr_task+0x20a>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8009670:	6828      	ldr	r0, [r5, #0]
 8009672:	f003 ffeb 	bl	800d64c <lv_disp_get_buf>
    return area_p->x2 - area_p->x1 + 1;
 8009676:	9b01      	ldr	r3, [sp, #4]
 8009678:	9a01      	ldr	r2, [sp, #4]
 800967a:	889b      	ldrh	r3, [r3, #4]
 800967c:	8812      	ldrh	r2, [r2, #0]
 800967e:	3301      	adds	r3, #1
 8009680:	1a9b      	subs	r3, r3, r2
 8009682:	b21b      	sxth	r3, r3
 8009684:	9307      	str	r3, [sp, #28]
 8009686:	9b01      	ldr	r3, [sp, #4]
 8009688:	0006      	movs	r6, r0
 800968a:	2206      	movs	r2, #6
 800968c:	5e9b      	ldrsh	r3, [r3, r2]
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800968e:	6828      	ldr	r0, [r5, #0]
 8009690:	9303      	str	r3, [sp, #12]
    return area_p->y2 - area_p->y1 + 1;
 8009692:	1c5f      	adds	r7, r3, #1
 8009694:	9b01      	ldr	r3, [sp, #4]
 8009696:	885b      	ldrh	r3, [r3, #2]
 8009698:	1aff      	subs	r7, r7, r3
 800969a:	f003 ffb1 	bl	800d600 <lv_disp_get_ver_res>
        lv_coord_t y2 =
 800969e:	9b03      	ldr	r3, [sp, #12]
 80096a0:	b23f      	sxth	r7, r7
 80096a2:	4283      	cmp	r3, r0
 80096a4:	db3d      	blt.n	8009722 <lv_disp_refr_task+0x22a>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 80096a6:	6828      	ldr	r0, [r5, #0]
 80096a8:	f003 ffaa 	bl	800d600 <lv_disp_get_ver_res>
 80096ac:	3801      	subs	r0, #1
 80096ae:	b203      	sxth	r3, r0
        int32_t max_row = (uint32_t)vdb->size / w;
 80096b0:	9907      	ldr	r1, [sp, #28]
 80096b2:	68f0      	ldr	r0, [r6, #12]
        lv_coord_t y2 =
 80096b4:	9303      	str	r3, [sp, #12]
        int32_t max_row = (uint32_t)vdb->size / w;
 80096b6:	f7f6 fd53 	bl	8000160 <__udivsi3>
 80096ba:	4287      	cmp	r7, r0
 80096bc:	dd00      	ble.n	80096c0 <lv_disp_refr_task+0x1c8>
 80096be:	0007      	movs	r7, r0
        if(disp_refr->driver.rounder_cb) {
 80096c0:	4b53      	ldr	r3, [pc, #332]	; (8009810 <lv_disp_refr_task+0x318>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d035      	beq.n	8009736 <lv_disp_refr_task+0x23e>
            tmp.x1 = 0;
 80096ca:	2300      	movs	r3, #0
 80096cc:	aa08      	add	r2, sp, #32
            lv_coord_t y_tmp = max_row - 1;
 80096ce:	1e7d      	subs	r5, r7, #1
            tmp.x1 = 0;
 80096d0:	8013      	strh	r3, [r2, #0]
            tmp.x2 = 0;
 80096d2:	8093      	strh	r3, [r2, #4]
            tmp.y1 = 0;
 80096d4:	8053      	strh	r3, [r2, #2]
            lv_coord_t y_tmp = max_row - 1;
 80096d6:	b22d      	sxth	r5, r5
                tmp.y2 = y_tmp;
 80096d8:	ab08      	add	r3, sp, #32
 80096da:	80dd      	strh	r5, [r3, #6]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 80096dc:	4b4c      	ldr	r3, [pc, #304]	; (8009810 <lv_disp_refr_task+0x318>)
 80096de:	a908      	add	r1, sp, #32
 80096e0:	6818      	ldr	r0, [r3, #0]
 80096e2:	6903      	ldr	r3, [r0, #16]
 80096e4:	4798      	blx	r3
 80096e6:	ab08      	add	r3, sp, #32
 80096e8:	2206      	movs	r2, #6
 80096ea:	5e9a      	ldrsh	r2, [r3, r2]
 80096ec:	ab08      	add	r3, sp, #32
 80096ee:	885b      	ldrh	r3, [r3, #2]
 80096f0:	3201      	adds	r2, #1
 80096f2:	1ad3      	subs	r3, r2, r3
                if(lv_area_get_height(&tmp) <= max_row) break;
 80096f4:	b21b      	sxth	r3, r3
 80096f6:	42bb      	cmp	r3, r7
 80096f8:	dd1a      	ble.n	8009730 <lv_disp_refr_task+0x238>
 80096fa:	3d01      	subs	r5, #1
 80096fc:	b22d      	sxth	r5, r5
            } while(y_tmp != 0);
 80096fe:	2d00      	cmp	r5, #0
 8009700:	d1ea      	bne.n	80096d8 <lv_disp_refr_task+0x1e0>
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 8009702:	4b43      	ldr	r3, [pc, #268]	; (8009810 <lv_disp_refr_task+0x318>)
 8009704:	6818      	ldr	r0, [r3, #0]
 8009706:	6983      	ldr	r3, [r0, #24]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d007      	beq.n	800971c <lv_disp_refr_task+0x224>
 800970c:	9b05      	ldr	r3, [sp, #20]
 800970e:	18c0      	adds	r0, r0, r3
 8009710:	f004 f903 	bl	800d91a <lv_area_get_size>
 8009714:	4b3f      	ldr	r3, [pc, #252]	; (8009814 <lv_disp_refr_task+0x31c>)
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	1810      	adds	r0, r2, r0
 800971a:	6018      	str	r0, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800971c:	9b02      	ldr	r3, [sp, #8]
 800971e:	3301      	adds	r3, #1
 8009720:	e700      	b.n	8009524 <lv_disp_refr_task+0x2c>
        lv_coord_t y2 =
 8009722:	9b02      	ldr	r3, [sp, #8]
 8009724:	3308      	adds	r3, #8
 8009726:	00db      	lsls	r3, r3, #3
 8009728:	18e3      	adds	r3, r4, r3
 800972a:	220a      	movs	r2, #10
 800972c:	5e9b      	ldrsh	r3, [r3, r2]
 800972e:	e7bf      	b.n	80096b0 <lv_disp_refr_task+0x1b8>
            if(y_tmp == 0) {
 8009730:	2d00      	cmp	r5, #0
 8009732:	d0e6      	beq.n	8009702 <lv_disp_refr_task+0x20a>
                max_row = tmp.y2 + 1;
 8009734:	0017      	movs	r7, r2
 8009736:	9b04      	ldr	r3, [sp, #16]
 8009738:	18e4      	adds	r4, r4, r3
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800973a:	0023      	movs	r3, r4
 800973c:	3308      	adds	r3, #8
 800973e:	253e      	movs	r5, #62	; 0x3e
 8009740:	5f5d      	ldrsh	r5, [r3, r5]
        lv_coord_t row_last = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	9304      	str	r3, [sp, #16]
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8009746:	19eb      	adds	r3, r5, r7
 8009748:	9a03      	ldr	r2, [sp, #12]
 800974a:	3b01      	subs	r3, #1
 800974c:	4293      	cmp	r3, r2
 800974e:	dd10      	ble.n	8009772 <lv_disp_refr_task+0x27a>
        if(y2 != row_last) {
 8009750:	0013      	movs	r3, r2
 8009752:	9a04      	ldr	r2, [sp, #16]
 8009754:	4293      	cmp	r3, r2
 8009756:	d0d4      	beq.n	8009702 <lv_disp_refr_task+0x20a>
            vdb->area.x1 = area_p->x1;
 8009758:	1da3      	adds	r3, r4, #6
 800975a:	223e      	movs	r2, #62	; 0x3e
 800975c:	5e9b      	ldrsh	r3, [r3, r2]
            vdb->area.x2 = area_p->x2;
 800975e:	3448      	adds	r4, #72	; 0x48
            vdb->area.x1 = area_p->x1;
 8009760:	8233      	strh	r3, [r6, #16]
            vdb->area.x2 = area_p->x2;
 8009762:	2200      	movs	r2, #0
 8009764:	5ea3      	ldrsh	r3, [r4, r2]
            vdb->area.y1 = row;
 8009766:	8275      	strh	r5, [r6, #18]
            vdb->area.x2 = area_p->x2;
 8009768:	82b3      	strh	r3, [r6, #20]
            vdb->area.y2 = y2;
 800976a:	466b      	mov	r3, sp
 800976c:	899b      	ldrh	r3, [r3, #12]
 800976e:	82f3      	strh	r3, [r6, #22]
 8009770:	e77a      	b.n	8009668 <lv_disp_refr_task+0x170>
            vdb->area.x1 = area_p->x1;
 8009772:	1da3      	adds	r3, r4, #6
 8009774:	223e      	movs	r2, #62	; 0x3e
 8009776:	5e9b      	ldrsh	r3, [r3, r2]
 8009778:	8233      	strh	r3, [r6, #16]
            vdb->area.x2 = area_p->x2;
 800977a:	0023      	movs	r3, r4
 800977c:	3348      	adds	r3, #72	; 0x48
 800977e:	2200      	movs	r2, #0
 8009780:	5e9b      	ldrsh	r3, [r3, r2]
            vdb->area.y1 = row;
 8009782:	8275      	strh	r5, [r6, #18]
            vdb->area.x2 = area_p->x2;
 8009784:	82b3      	strh	r3, [r6, #20]
            vdb->area.y2 = row + max_row - 1;
 8009786:	b2bb      	uxth	r3, r7
 8009788:	9304      	str	r3, [sp, #16]
 800978a:	b2ad      	uxth	r5, r5
 800978c:	3b01      	subs	r3, #1
 800978e:	18eb      	adds	r3, r5, r3
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
 8009790:	9a03      	ldr	r2, [sp, #12]
 8009792:	b21b      	sxth	r3, r3
 8009794:	429a      	cmp	r2, r3
 8009796:	db0a      	blt.n	80097ae <lv_disp_refr_task+0x2b6>
 8009798:	82f3      	strh	r3, [r6, #22]
            row_last = vdb->area.y2;
 800979a:	2216      	movs	r2, #22
 800979c:	5eb3      	ldrsh	r3, [r6, r2]
            lv_refr_area_part(area_p);
 800979e:	9801      	ldr	r0, [sp, #4]
            row_last = vdb->area.y2;
 80097a0:	9304      	str	r3, [sp, #16]
            lv_refr_area_part(area_p);
 80097a2:	f7ff fe0b 	bl	80093bc <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 80097a6:	b2bb      	uxth	r3, r7
 80097a8:	195d      	adds	r5, r3, r5
 80097aa:	b22d      	sxth	r5, r5
 80097ac:	e7cb      	b.n	8009746 <lv_disp_refr_task+0x24e>
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
 80097ae:	466b      	mov	r3, sp
 80097b0:	899b      	ldrh	r3, [r3, #12]
 80097b2:	e7f1      	b.n	8009798 <lv_disp_refr_task+0x2a0>
            lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80097b4:	6828      	ldr	r0, [r5, #0]
 80097b6:	f003 ff49 	bl	800d64c <lv_disp_get_buf>
 80097ba:	0004      	movs	r4, r0
            lv_refr_vdb_flush();
 80097bc:	f7ff fd0e 	bl	80091dc <lv_refr_vdb_flush>
            while(vdb->flushing)
 80097c0:	69a3      	ldr	r3, [r4, #24]
 80097c2:	07db      	lsls	r3, r3, #31
 80097c4:	d4fc      	bmi.n	80097c0 <lv_disp_refr_task+0x2c8>
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 80097c6:	68a3      	ldr	r3, [r4, #8]
 80097c8:	9303      	str	r3, [sp, #12]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 80097ca:	6823      	ldr	r3, [r4, #0]
 80097cc:	9301      	str	r3, [sp, #4]
 80097ce:	9a01      	ldr	r2, [sp, #4]
 80097d0:	9b03      	ldr	r3, [sp, #12]
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d101      	bne.n	80097da <lv_disp_refr_task+0x2e2>
 80097d6:	6863      	ldr	r3, [r4, #4]
 80097d8:	9301      	str	r3, [sp, #4]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 80097da:	6828      	ldr	r0, [r5, #0]
 80097dc:	f003 fefe 	bl	800d5dc <lv_disp_get_hor_res>
            for(a = 0; a < disp_refr->inv_p; a++) {
 80097e0:	2500      	movs	r5, #0
                        start_offs += hres * sizeof(lv_color_t);
 80097e2:	0043      	lsls	r3, r0, #1
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 80097e4:	9005      	str	r0, [sp, #20]
                        start_offs += hres * sizeof(lv_color_t);
 80097e6:	9304      	str	r3, [sp, #16]
            for(a = 0; a < disp_refr->inv_p; a++) {
 80097e8:	4b09      	ldr	r3, [pc, #36]	; (8009810 <lv_disp_refr_task+0x318>)
 80097ea:	6819      	ldr	r1, [r3, #0]
 80097ec:	23b2      	movs	r3, #178	; 0xb2
 80097ee:	005b      	lsls	r3, r3, #1
 80097f0:	5acb      	ldrh	r3, [r1, r3]
 80097f2:	059b      	lsls	r3, r3, #22
 80097f4:	0d9b      	lsrs	r3, r3, #22
 80097f6:	429d      	cmp	r5, r3
 80097f8:	db00      	blt.n	80097fc <lv_disp_refr_task+0x304>
 80097fa:	e6a7      	b.n	800954c <lv_disp_refr_task+0x54>
                if(disp_refr->inv_area_joined[a] == 0) {
 80097fc:	194b      	adds	r3, r1, r5
 80097fe:	3345      	adds	r3, #69	; 0x45
 8009800:	33ff      	adds	r3, #255	; 0xff
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d007      	beq.n	8009818 <lv_disp_refr_task+0x320>
            for(a = 0; a < disp_refr->inv_p; a++) {
 8009808:	3501      	adds	r5, #1
 800980a:	b2ad      	uxth	r5, r5
 800980c:	e7ec      	b.n	80097e8 <lv_disp_refr_task+0x2f0>
 800980e:	46c0      	nop			; (mov r8, r8)
 8009810:	2000152c 	.word	0x2000152c
 8009814:	20001530 	.word	0x20001530
 8009818:	00eb      	lsls	r3, r5, #3
 800981a:	18cb      	adds	r3, r1, r3
 800981c:	9302      	str	r3, [sp, #8]
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 800981e:	3308      	adds	r3, #8
 8009820:	263e      	movs	r6, #62	; 0x3e
 8009822:	5f9e      	ldrsh	r6, [r3, r6]
 8009824:	9b02      	ldr	r3, [sp, #8]
 8009826:	9c05      	ldr	r4, [sp, #20]
 8009828:	3306      	adds	r3, #6
 800982a:	223e      	movs	r2, #62	; 0x3e
 800982c:	5e9b      	ldrsh	r3, [r3, r2]
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 800982e:	002a      	movs	r2, r5
 8009830:	3208      	adds	r2, #8
    return area_p->x2 - area_p->x1 + 1;
 8009832:	00d2      	lsls	r2, r2, #3
 8009834:	188a      	adds	r2, r1, r2
 8009836:	2101      	movs	r1, #1
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 8009838:	4374      	muls	r4, r6
 800983a:	1ac9      	subs	r1, r1, r3
 800983c:	18e4      	adds	r4, r4, r3
 800983e:	8913      	ldrh	r3, [r2, #8]
                    uint32_t start_offs =
 8009840:	0064      	lsls	r4, r4, #1
 8009842:	185b      	adds	r3, r3, r1
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 8009844:	b21b      	sxth	r3, r3
 8009846:	005b      	lsls	r3, r3, #1
 8009848:	9307      	str	r3, [sp, #28]
 800984a:	9b03      	ldr	r3, [sp, #12]
 800984c:	191f      	adds	r7, r3, r4
 800984e:	9b01      	ldr	r3, [sp, #4]
 8009850:	18e4      	adds	r4, r4, r3
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 8009852:	9b02      	ldr	r3, [sp, #8]
 8009854:	334a      	adds	r3, #74	; 0x4a
 8009856:	2200      	movs	r2, #0
 8009858:	5e9b      	ldrsh	r3, [r3, r2]
 800985a:	42b3      	cmp	r3, r6
 800985c:	dbd4      	blt.n	8009808 <lv_disp_refr_task+0x310>
                        memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
 800985e:	0038      	movs	r0, r7
 8009860:	9a07      	ldr	r2, [sp, #28]
 8009862:	0021      	movs	r1, r4
 8009864:	f006 f86e 	bl	800f944 <memcpy>
 8009868:	9b04      	ldr	r3, [sp, #16]
 800986a:	3601      	adds	r6, #1
 800986c:	b236      	sxth	r6, r6
 800986e:	18ff      	adds	r7, r7, r3
 8009870:	e7ee      	b.n	8009850 <lv_disp_refr_task+0x358>
            disp_refr->driver.monitor_cb(&disp_refr->driver, lv_tick_elaps(start), px_num);
 8009872:	9806      	ldr	r0, [sp, #24]
 8009874:	f003 ff24 	bl	800d6c0 <lv_tick_elaps>
 8009878:	4b02      	ldr	r3, [pc, #8]	; (8009884 <lv_disp_refr_task+0x38c>)
 800987a:	0001      	movs	r1, r0
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	0020      	movs	r0, r4
 8009880:	47a8      	blx	r5
 8009882:	e67d      	b.n	8009580 <lv_disp_refr_task+0x88>
 8009884:	20001530 	.word	0x20001530

08009888 <lv_style_copy>:
 * Copy a style to an other
 * @param dest pointer to the destination style
 * @param src pointer to the source style
 */
void lv_style_copy(lv_style_t * dest, const lv_style_t * src)
{
 8009888:	b510      	push	{r4, lr}
    memcpy(dest, src, sizeof(lv_style_t));
 800988a:	223c      	movs	r2, #60	; 0x3c
 800988c:	f006 f85a 	bl	800f944 <memcpy>
}
 8009890:	bd10      	pop	{r4, pc}
	...

08009894 <lv_style_init>:
{
 8009894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    lv_style_scr.glass               = 0;
 8009896:	2201      	movs	r2, #1
 8009898:	49f0      	ldr	r1, [pc, #960]	; (8009c5c <lv_style_init+0x3c8>)
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 800989a:	241f      	movs	r4, #31
    lv_style_scr.glass               = 0;
 800989c:	780b      	ldrb	r3, [r1, #0]
    lv_style_scr.body.radius         = 0;
 800989e:	2700      	movs	r7, #0
    lv_style_scr.glass               = 0;
 80098a0:	4393      	bics	r3, r2
 80098a2:	700b      	strb	r3, [r1, #0]
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 80098a4:	4bee      	ldr	r3, [pc, #952]	; (8009c60 <lv_style_init+0x3cc>)
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 80098a6:	48ef      	ldr	r0, [pc, #956]	; (8009c64 <lv_style_init+0x3d0>)
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 80098a8:	881b      	ldrh	r3, [r3, #0]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 80098aa:	2506      	movs	r5, #6
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	466b      	mov	r3, sp
 80098b0:	881b      	ldrh	r3, [r3, #0]
    lv_style_scr.body.opa            = LV_OPA_COVER;
 80098b2:	32fe      	adds	r2, #254	; 0xfe
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 80098b4:	804b      	strh	r3, [r1, #2]
    lv_style_scr.body.grad_color     = LV_COLOR_WHITE;
 80098b6:	466b      	mov	r3, sp
 80098b8:	881b      	ldrh	r3, [r3, #0]
    lv_style_scr.body.opa            = LV_OPA_COVER;
 80098ba:	720a      	strb	r2, [r1, #8]
    lv_style_scr.body.grad_color     = LV_COLOR_WHITE;
 80098bc:	808b      	strh	r3, [r1, #4]
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
 80098be:	2301      	movs	r3, #1
 80098c0:	83cb      	strh	r3, [r1, #30]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 80098c2:	7a8b      	ldrb	r3, [r1, #10]
    lv_style_scr.body.radius         = 0;
 80098c4:	80cf      	strh	r7, [r1, #6]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 80098c6:	43a3      	bics	r3, r4
 80098c8:	728b      	strb	r3, [r1, #10]
 80098ca:	894b      	ldrh	r3, [r1, #10]
    lv_style_scr.body.padding.left   = 0;
 80098cc:	834f      	strh	r7, [r1, #26]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 80098ce:	4003      	ands	r3, r0
 80098d0:	814b      	strh	r3, [r1, #10]
 80098d2:	003b      	movs	r3, r7
    lv_style_scr.body.border.part  = LV_BORDER_FULL;
 80098d4:	330f      	adds	r3, #15
 80098d6:	738b      	strb	r3, [r1, #14]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 80098d8:	4be1      	ldr	r3, [pc, #900]	; (8009c60 <lv_style_init+0x3cc>)
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 80098da:	72cf      	strb	r7, [r1, #11]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 80098dc:	885b      	ldrh	r3, [r3, #2]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 80098de:	1c48      	adds	r0, r1, #1
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 80098e0:	9301      	str	r3, [sp, #4]
 80098e2:	466b      	mov	r3, sp
 80098e4:	889b      	ldrh	r3, [r3, #4]
    lv_style_scr.body.padding.right  = 0;
 80098e6:	838f      	strh	r7, [r1, #28]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 80098e8:	820b      	strh	r3, [r1, #16]
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
 80098ea:	2301      	movs	r3, #1
 80098ec:	750b      	strb	r3, [r1, #20]
    lv_style_scr.text.opa          = LV_OPA_COVER;
 80098ee:	000b      	movs	r3, r1
 80098f0:	332c      	adds	r3, #44	; 0x2c
    lv_style_scr.body.padding.top    = 0;
 80098f2:	82cf      	strh	r7, [r1, #22]
    lv_style_scr.body.padding.bottom = 0;
 80098f4:	830f      	strh	r7, [r1, #24]
    lv_style_scr.body.border.opa   = LV_OPA_COVER;
 80098f6:	73ca      	strb	r2, [r1, #15]
    lv_style_scr.body.border.width = 0;
 80098f8:	818f      	strh	r7, [r1, #12]
    lv_style_scr.body.shadow.width = 0;
 80098fa:	824f      	strh	r7, [r1, #18]
    lv_style_scr.text.opa          = LV_OPA_COVER;
 80098fc:	701a      	strb	r2, [r3, #0]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 80098fe:	7fc3      	ldrb	r3, [r0, #31]
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
 8009900:	261e      	movs	r6, #30
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8009902:	43a3      	bics	r3, r4
 8009904:	432b      	orrs	r3, r5
 8009906:	77c3      	strb	r3, [r0, #31]
 8009908:	8c0d      	ldrh	r5, [r1, #32]
 800990a:	4bd6      	ldr	r3, [pc, #856]	; (8009c64 <lv_style_init+0x3d0>)
 800990c:	1c88      	adds	r0, r1, #2
 800990e:	401d      	ands	r5, r3
 8009910:	23c0      	movs	r3, #192	; 0xc0
 8009912:	005b      	lsls	r3, r3, #1
 8009914:	432b      	orrs	r3, r5
 8009916:	2507      	movs	r5, #7
 8009918:	840b      	strh	r3, [r1, #32]
 800991a:	0a1b      	lsrs	r3, r3, #8
 800991c:	402b      	ands	r3, r5
 800991e:	3529      	adds	r5, #41	; 0x29
 8009920:	432b      	orrs	r3, r5
 8009922:	77c3      	strb	r3, [r0, #31]
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 8009924:	1cc8      	adds	r0, r1, #3
 8009926:	7fc3      	ldrb	r3, [r0, #31]
 8009928:	3d15      	subs	r5, #21
 800992a:	43a3      	bics	r3, r4
 800992c:	432b      	orrs	r3, r5
 800992e:	77c3      	strb	r3, [r0, #31]
 8009930:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 8009932:	48cc      	ldr	r0, [pc, #816]	; (8009c64 <lv_style_init+0x3d0>)
 8009934:	3d14      	subs	r5, #20
 8009936:	4003      	ands	r3, r0
 8009938:	2094      	movs	r0, #148	; 0x94
 800993a:	00c0      	lsls	r0, r0, #3
 800993c:	4303      	orrs	r3, r0
 800993e:	844b      	strh	r3, [r1, #34]	; 0x22
 8009940:	0a1b      	lsrs	r3, r3, #8
 8009942:	402b      	ands	r3, r5
 8009944:	3549      	adds	r5, #73	; 0x49
 8009946:	1d08      	adds	r0, r1, #4
 8009948:	432b      	orrs	r3, r5
 800994a:	77c3      	strb	r3, [r0, #31]
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
 800994c:	4bc6      	ldr	r3, [pc, #792]	; (8009c68 <lv_style_init+0x3d4>)
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 800994e:	0008      	movs	r0, r1
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
 8009950:	624b      	str	r3, [r1, #36]	; 0x24
    lv_style_scr.text.line_space   = 2;
 8009952:	2302      	movs	r3, #2
 8009954:	854b      	strh	r3, [r1, #42]	; 0x2a
    lv_style_scr.image.opa     = LV_OPA_COVER;
 8009956:	000b      	movs	r3, r1
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 8009958:	3030      	adds	r0, #48	; 0x30
    lv_style_scr.image.opa     = LV_OPA_COVER;
 800995a:	3333      	adds	r3, #51	; 0x33
 800995c:	701a      	strb	r2, [r3, #0]
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 800995e:	7803      	ldrb	r3, [r0, #0]
 8009960:	3d4c      	subs	r5, #76	; 0x4c
 8009962:	43a3      	bics	r3, r4
 8009964:	432b      	orrs	r3, r5
 8009966:	7003      	strb	r3, [r0, #0]
 8009968:	8e0b      	ldrh	r3, [r1, #48]	; 0x30
 800996a:	4dbe      	ldr	r5, [pc, #760]	; (8009c64 <lv_style_init+0x3d0>)
    lv_style_scr.text.letter_space = 0;
 800996c:	850f      	strh	r7, [r1, #40]	; 0x28
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 800996e:	402b      	ands	r3, r5
 8009970:	2580      	movs	r5, #128	; 0x80
 8009972:	006d      	lsls	r5, r5, #1
 8009974:	432b      	orrs	r3, r5
 8009976:	860b      	strh	r3, [r1, #48]	; 0x30
 8009978:	3df9      	subs	r5, #249	; 0xf9
 800997a:	0a1b      	lsrs	r3, r3, #8
 800997c:	402b      	ands	r3, r5
 800997e:	3519      	adds	r5, #25
 8009980:	432b      	orrs	r3, r5
 8009982:	7043      	strb	r3, [r0, #1]
    lv_style_scr.image.intense = LV_OPA_TRANSP;
 8009984:	000b      	movs	r3, r1
 8009986:	3332      	adds	r3, #50	; 0x32
 8009988:	701f      	strb	r7, [r3, #0]
    lv_style_scr.line.opa     = LV_OPA_COVER;
 800998a:	000b      	movs	r3, r1
 800998c:	3338      	adds	r3, #56	; 0x38
 800998e:	701a      	strb	r2, [r3, #0]
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
 8009990:	000a      	movs	r2, r1
 8009992:	2004      	movs	r0, #4
 8009994:	3234      	adds	r2, #52	; 0x34
 8009996:	7813      	ldrb	r3, [r2, #0]
 8009998:	43a3      	bics	r3, r4
 800999a:	4303      	orrs	r3, r0
 800999c:	7013      	strb	r3, [r2, #0]
 800999e:	8e8b      	ldrh	r3, [r1, #52]	; 0x34
 80099a0:	48b0      	ldr	r0, [pc, #704]	; (8009c64 <lv_style_init+0x3d0>)
 80099a2:	4003      	ands	r3, r0
 80099a4:	2080      	movs	r0, #128	; 0x80
 80099a6:	0040      	lsls	r0, r0, #1
 80099a8:	4303      	orrs	r3, r0
 80099aa:	868b      	strh	r3, [r1, #52]	; 0x34
 80099ac:	38f9      	subs	r0, #249	; 0xf9
 80099ae:	0a1b      	lsrs	r3, r3, #8
 80099b0:	4003      	ands	r3, r0
 80099b2:	432b      	orrs	r3, r5
 80099b4:	7053      	strb	r3, [r2, #1]
    lv_style_scr.line.rounded = 0;
 80099b6:	000a      	movs	r2, r1
    lv_style_scr.line.width   = 2;
 80099b8:	2302      	movs	r3, #2
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
 80099ba:	0028      	movs	r0, r5
    lv_style_scr.line.rounded = 0;
 80099bc:	3239      	adds	r2, #57	; 0x39
    lv_style_scr.line.width   = 2;
 80099be:	86cb      	strh	r3, [r1, #54]	; 0x36
    lv_style_scr.line.rounded = 0;
 80099c0:	7813      	ldrb	r3, [r2, #0]
 80099c2:	381f      	subs	r0, #31
 80099c4:	4383      	bics	r3, r0
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 80099c6:	48a9      	ldr	r0, [pc, #676]	; (8009c6c <lv_style_init+0x3d8>)
    lv_style_scr.line.rounded = 0;
 80099c8:	7013      	strb	r3, [r2, #0]
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 80099ca:	f7ff ff5d 	bl	8009888 <lv_style_copy>
    lv_style_plain.body.padding.left   = LV_DPI / 20;
 80099ce:	2201      	movs	r2, #1
 80099d0:	4ba6      	ldr	r3, [pc, #664]	; (8009c6c <lv_style_init+0x3d8>)
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 80099d2:	4da7      	ldr	r5, [pc, #668]	; (8009c70 <lv_style_init+0x3dc>)
    lv_style_plain.body.padding.left   = LV_DPI / 20;
 80099d4:	835a      	strh	r2, [r3, #26]
    lv_style_plain.body.padding.right  = LV_DPI / 20;
 80099d6:	2201      	movs	r2, #1
 80099d8:	839a      	strh	r2, [r3, #28]
    lv_style_plain.body.padding.top    = LV_DPI / 20;
 80099da:	2201      	movs	r2, #1
 80099dc:	82da      	strh	r2, [r3, #22]
    lv_style_plain.body.padding.bottom = LV_DPI / 20;
 80099de:	2201      	movs	r2, #1
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 80099e0:	0019      	movs	r1, r3
 80099e2:	0028      	movs	r0, r5
    lv_style_plain.body.padding.bottom = LV_DPI / 20;
 80099e4:	831a      	strh	r2, [r3, #24]
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 80099e6:	f7ff ff4f 	bl	8009888 <lv_style_copy>
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 80099ea:	221e      	movs	r2, #30
 80099ec:	1c68      	adds	r0, r5, #1
 80099ee:	7fc3      	ldrb	r3, [r0, #31]
 80099f0:	2107      	movs	r1, #7
 80099f2:	43a3      	bics	r3, r4
 80099f4:	4313      	orrs	r3, r2
 80099f6:	77c3      	strb	r3, [r0, #31]
 80099f8:	8c2b      	ldrh	r3, [r5, #32]
 80099fa:	4a9a      	ldr	r2, [pc, #616]	; (8009c64 <lv_style_init+0x3d0>)
 80099fc:	1ca8      	adds	r0, r5, #2
 80099fe:	4013      	ands	r3, r2
 8009a00:	22f0      	movs	r2, #240	; 0xf0
 8009a02:	00d2      	lsls	r2, r2, #3
 8009a04:	4313      	orrs	r3, r2
 8009a06:	842b      	strh	r3, [r5, #32]
 8009a08:	0a1b      	lsrs	r3, r3, #8
 8009a0a:	400b      	ands	r3, r1
 8009a0c:	3917      	subs	r1, #23
 8009a0e:	430b      	orrs	r3, r1
 8009a10:	77c3      	strb	r3, [r0, #31]
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
 8009a12:	0028      	movs	r0, r5
 8009a14:	3030      	adds	r0, #48	; 0x30
 8009a16:	7803      	ldrb	r3, [r0, #0]
 8009a18:	43a3      	bics	r3, r4
 8009a1a:	4333      	orrs	r3, r6
 8009a1c:	7003      	strb	r3, [r0, #0]
 8009a1e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8009a20:	4e90      	ldr	r6, [pc, #576]	; (8009c64 <lv_style_init+0x3d0>)
 8009a22:	4033      	ands	r3, r6
 8009a24:	2607      	movs	r6, #7
 8009a26:	4313      	orrs	r3, r2
 8009a28:	862b      	strh	r3, [r5, #48]	; 0x30
 8009a2a:	0a1b      	lsrs	r3, r3, #8
 8009a2c:	4033      	ands	r3, r6
 8009a2e:	430b      	orrs	r3, r1
 8009a30:	7043      	strb	r3, [r0, #1]
    lv_style_plain_color.line.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 8009a32:	002b      	movs	r3, r5
 8009a34:	3334      	adds	r3, #52	; 0x34
 8009a36:	7818      	ldrb	r0, [r3, #0]
 8009a38:	3617      	adds	r6, #23
 8009a3a:	43a0      	bics	r0, r4
 8009a3c:	4330      	orrs	r0, r6
 8009a3e:	7018      	strb	r0, [r3, #0]
 8009a40:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8009a42:	4e88      	ldr	r6, [pc, #544]	; (8009c64 <lv_style_init+0x3d0>)
 8009a44:	4030      	ands	r0, r6
 8009a46:	4302      	orrs	r2, r0
 8009a48:	2007      	movs	r0, #7
 8009a4a:	86aa      	strh	r2, [r5, #52]	; 0x34
 8009a4c:	0a12      	lsrs	r2, r2, #8
 8009a4e:	4002      	ands	r2, r0
 8009a50:	430a      	orrs	r2, r1
 8009a52:	705a      	strb	r2, [r3, #1]
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 8009a54:	221b      	movs	r2, #27
 8009a56:	78ab      	ldrb	r3, [r5, #2]
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 8009a58:	4984      	ldr	r1, [pc, #528]	; (8009c6c <lv_style_init+0x3d8>)
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 8009a5a:	43a3      	bics	r3, r4
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	2294      	movs	r2, #148	; 0x94
 8009a60:	70ab      	strb	r3, [r5, #2]
 8009a62:	886b      	ldrh	r3, [r5, #2]
 8009a64:	00d2      	lsls	r2, r2, #3
 8009a66:	4033      	ands	r3, r6
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	0002      	movs	r2, r0
 8009a6c:	806b      	strh	r3, [r5, #2]
 8009a6e:	0a1b      	lsrs	r3, r3, #8
 8009a70:	3249      	adds	r2, #73	; 0x49
 8009a72:	4003      	ands	r3, r0
 8009a74:	4313      	orrs	r3, r2
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 8009a76:	4e7f      	ldr	r6, [pc, #508]	; (8009c74 <lv_style_init+0x3e0>)
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 8009a78:	70eb      	strb	r3, [r5, #3]
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 8009a7a:	886b      	ldrh	r3, [r5, #2]
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 8009a7c:	0030      	movs	r0, r6
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 8009a7e:	80ab      	strh	r3, [r5, #4]
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 8009a80:	f7ff ff02 	bl	8009888 <lv_style_copy>
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 8009a84:	2104      	movs	r1, #4
 8009a86:	1c72      	adds	r2, r6, #1
 8009a88:	7fd3      	ldrb	r3, [r2, #31]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8009a8a:	4d7b      	ldr	r5, [pc, #492]	; (8009c78 <lv_style_init+0x3e4>)
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 8009a8c:	43a3      	bics	r3, r4
 8009a8e:	430b      	orrs	r3, r1
 8009a90:	77d3      	strb	r3, [r2, #31]
 8009a92:	8c33      	ldrh	r3, [r6, #32]
 8009a94:	4973      	ldr	r1, [pc, #460]	; (8009c64 <lv_style_init+0x3d0>)
 8009a96:	1cb2      	adds	r2, r6, #2
 8009a98:	400b      	ands	r3, r1
 8009a9a:	2180      	movs	r1, #128	; 0x80
 8009a9c:	0049      	lsls	r1, r1, #1
 8009a9e:	430b      	orrs	r3, r1
 8009aa0:	8433      	strh	r3, [r6, #32]
 8009aa2:	39f9      	subs	r1, #249	; 0xf9
 8009aa4:	0a1b      	lsrs	r3, r3, #8
 8009aa6:	400b      	ands	r3, r1
 8009aa8:	3119      	adds	r1, #25
 8009aaa:	430b      	orrs	r3, r1
 8009aac:	77d3      	strb	r3, [r2, #31]
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 8009aae:	0032      	movs	r2, r6
 8009ab0:	3230      	adds	r2, #48	; 0x30
 8009ab2:	7813      	ldrb	r3, [r2, #0]
 8009ab4:	391c      	subs	r1, #28
 8009ab6:	43a3      	bics	r3, r4
 8009ab8:	430b      	orrs	r3, r1
 8009aba:	7013      	strb	r3, [r2, #0]
 8009abc:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 8009abe:	4969      	ldr	r1, [pc, #420]	; (8009c64 <lv_style_init+0x3d0>)
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8009ac0:	0028      	movs	r0, r5
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 8009ac2:	400b      	ands	r3, r1
 8009ac4:	2180      	movs	r1, #128	; 0x80
 8009ac6:	0049      	lsls	r1, r1, #1
 8009ac8:	430b      	orrs	r3, r1
 8009aca:	8633      	strh	r3, [r6, #48]	; 0x30
 8009acc:	39f9      	subs	r1, #249	; 0xf9
 8009ace:	0a1b      	lsrs	r3, r3, #8
 8009ad0:	400b      	ands	r3, r1
 8009ad2:	3119      	adds	r1, #25
 8009ad4:	430b      	orrs	r3, r1
 8009ad6:	7053      	strb	r3, [r2, #1]
    lv_style_pretty.line.color        = lv_color_make(0x20, 0x20, 0x20);
 8009ad8:	0032      	movs	r2, r6
 8009ada:	3234      	adds	r2, #52	; 0x34
 8009adc:	7813      	ldrb	r3, [r2, #0]
 8009ade:	391c      	subs	r1, #28
 8009ae0:	43a3      	bics	r3, r4
 8009ae2:	430b      	orrs	r3, r1
 8009ae4:	7013      	strb	r3, [r2, #0]
 8009ae6:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
 8009ae8:	495e      	ldr	r1, [pc, #376]	; (8009c64 <lv_style_init+0x3d0>)
 8009aea:	400b      	ands	r3, r1
 8009aec:	2180      	movs	r1, #128	; 0x80
 8009aee:	0049      	lsls	r1, r1, #1
 8009af0:	430b      	orrs	r3, r1
 8009af2:	86b3      	strh	r3, [r6, #52]	; 0x34
 8009af4:	39f9      	subs	r1, #249	; 0xf9
 8009af6:	0a1b      	lsrs	r3, r3, #8
 8009af8:	400b      	ands	r3, r1
 8009afa:	3119      	adds	r1, #25
 8009afc:	430b      	orrs	r3, r1
 8009afe:	7053      	strb	r3, [r2, #1]
    lv_style_pretty.body.main_color   = LV_COLOR_WHITE;
 8009b00:	466b      	mov	r3, sp
 8009b02:	881b      	ldrh	r3, [r3, #0]
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
 8009b04:	2208      	movs	r2, #8
    lv_style_pretty.body.main_color   = LV_COLOR_WHITE;
 8009b06:	8073      	strh	r3, [r6, #2]
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
 8009b08:	4b55      	ldr	r3, [pc, #340]	; (8009c60 <lv_style_init+0x3cc>)
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8009b0a:	0031      	movs	r1, r6
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
 8009b0c:	889b      	ldrh	r3, [r3, #4]
 8009b0e:	80b3      	strh	r3, [r6, #4]
    lv_style_pretty.body.radius       = LV_DPI / 15;
 8009b10:	2301      	movs	r3, #1
 8009b12:	80f3      	strh	r3, [r6, #6]
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
 8009b14:	7ab3      	ldrb	r3, [r6, #10]
 8009b16:	43a3      	bics	r3, r4
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	72b3      	strb	r3, [r6, #10]
 8009b1c:	8972      	ldrh	r2, [r6, #10]
 8009b1e:	4b51      	ldr	r3, [pc, #324]	; (8009c64 <lv_style_init+0x3d0>)
 8009b20:	401a      	ands	r2, r3
 8009b22:	2380      	movs	r3, #128	; 0x80
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	4313      	orrs	r3, r2
 8009b28:	2207      	movs	r2, #7
 8009b2a:	8173      	strh	r3, [r6, #10]
 8009b2c:	0a1b      	lsrs	r3, r3, #8
 8009b2e:	4013      	ands	r3, r2
 8009b30:	3239      	adds	r2, #57	; 0x39
 8009b32:	4313      	orrs	r3, r2
 8009b34:	72f3      	strb	r3, [r6, #11]
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 8009b36:	2301      	movs	r3, #1
 8009b38:	81b3      	strh	r3, [r6, #12]
    lv_style_pretty.body.border.opa   = LV_OPA_30;
 8009b3a:	234c      	movs	r3, #76	; 0x4c
 8009b3c:	73f3      	strb	r3, [r6, #15]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8009b3e:	f7ff fea3 	bl	8009888 <lv_style_copy>
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
 8009b42:	201c      	movs	r0, #28
 8009b44:	1c69      	adds	r1, r5, #1
 8009b46:	7fcb      	ldrb	r3, [r1, #31]
 8009b48:	4a46      	ldr	r2, [pc, #280]	; (8009c64 <lv_style_init+0x3d0>)
 8009b4a:	43a3      	bics	r3, r4
 8009b4c:	4303      	orrs	r3, r0
 8009b4e:	77cb      	strb	r3, [r1, #31]
 8009b50:	8c2b      	ldrh	r3, [r5, #32]
 8009b52:	2607      	movs	r6, #7
 8009b54:	4013      	ands	r3, r2
 8009b56:	22e0      	movs	r2, #224	; 0xe0
 8009b58:	00d2      	lsls	r2, r2, #3
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	842b      	strh	r3, [r5, #32]
 8009b5e:	0a1b      	lsrs	r3, r3, #8
 8009b60:	4033      	ands	r3, r6
 8009b62:	3e27      	subs	r6, #39	; 0x27
 8009b64:	1ca9      	adds	r1, r5, #2
 8009b66:	4333      	orrs	r3, r6
 8009b68:	77cb      	strb	r3, [r1, #31]
    lv_style_pretty_color.image.color       = lv_color_make(0xe0, 0xe0, 0xe0);
 8009b6a:	002b      	movs	r3, r5
 8009b6c:	3330      	adds	r3, #48	; 0x30
 8009b6e:	7819      	ldrb	r1, [r3, #0]
 8009b70:	43a1      	bics	r1, r4
 8009b72:	4308      	orrs	r0, r1
 8009b74:	7018      	strb	r0, [r3, #0]
 8009b76:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 8009b78:	483a      	ldr	r0, [pc, #232]	; (8009c64 <lv_style_init+0x3d0>)
 8009b7a:	4001      	ands	r1, r0
 8009b7c:	430a      	orrs	r2, r1
 8009b7e:	2107      	movs	r1, #7
 8009b80:	862a      	strh	r2, [r5, #48]	; 0x30
 8009b82:	0a12      	lsrs	r2, r2, #8
 8009b84:	400a      	ands	r2, r1
 8009b86:	4332      	orrs	r2, r6
 8009b88:	705a      	strb	r2, [r3, #1]
    lv_style_pretty_color.line.color        = lv_color_make(0xc0, 0xc0, 0xc0);
 8009b8a:	002a      	movs	r2, r5
 8009b8c:	3234      	adds	r2, #52	; 0x34
 8009b8e:	7813      	ldrb	r3, [r2, #0]
 8009b90:	3111      	adds	r1, #17
 8009b92:	43a3      	bics	r3, r4
 8009b94:	430b      	orrs	r3, r1
 8009b96:	7013      	strb	r3, [r2, #0]
 8009b98:	23c0      	movs	r3, #192	; 0xc0
 8009b9a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8009b9c:	00db      	lsls	r3, r3, #3
 8009b9e:	4001      	ands	r1, r0
 8009ba0:	430b      	orrs	r3, r1
 8009ba2:	2107      	movs	r1, #7
 8009ba4:	86ab      	strh	r3, [r5, #52]	; 0x34
 8009ba6:	0a1b      	lsrs	r3, r3, #8
 8009ba8:	400b      	ands	r3, r1
 8009baa:	3947      	subs	r1, #71	; 0x47
 8009bac:	430b      	orrs	r3, r1
 8009bae:	7053      	strb	r3, [r2, #1]
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
 8009bb0:	2218      	movs	r2, #24
 8009bb2:	78ab      	ldrb	r3, [r5, #2]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 8009bb4:	4e31      	ldr	r6, [pc, #196]	; (8009c7c <lv_style_init+0x3e8>)
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
 8009bb6:	43a3      	bics	r3, r4
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	70ab      	strb	r3, [r5, #2]
 8009bbc:	2398      	movs	r3, #152	; 0x98
 8009bbe:	886a      	ldrh	r2, [r5, #2]
 8009bc0:	00db      	lsls	r3, r3, #3
 8009bc2:	4002      	ands	r2, r0
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	2207      	movs	r2, #7
 8009bc8:	806b      	strh	r3, [r5, #2]
 8009bca:	0a1b      	lsrs	r3, r3, #8
 8009bcc:	4013      	ands	r3, r2
 8009bce:	3261      	adds	r2, #97	; 0x61
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	70eb      	strb	r3, [r5, #3]
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 8009bd4:	2311      	movs	r3, #17
 8009bd6:	792a      	ldrb	r2, [r5, #4]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 8009bd8:	4924      	ldr	r1, [pc, #144]	; (8009c6c <lv_style_init+0x3d8>)
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 8009bda:	43a2      	bics	r2, r4
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	712b      	strb	r3, [r5, #4]
 8009be0:	23b0      	movs	r3, #176	; 0xb0
 8009be2:	88aa      	ldrh	r2, [r5, #4]
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	4002      	ands	r2, r0
 8009be8:	4313      	orrs	r3, r2
 8009bea:	2207      	movs	r2, #7
 8009bec:	80ab      	strh	r3, [r5, #4]
 8009bee:	0a1b      	lsrs	r3, r3, #8
 8009bf0:	4013      	ands	r3, r2
 8009bf2:	3221      	adds	r2, #33	; 0x21
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	716b      	strb	r3, [r5, #5]
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 8009bf8:	7aab      	ldrb	r3, [r5, #10]
 8009bfa:	3a20      	subs	r2, #32
 8009bfc:	43a3      	bics	r3, r4
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	72ab      	strb	r3, [r5, #10]
 8009c02:	23b0      	movs	r3, #176	; 0xb0
 8009c04:	896a      	ldrh	r2, [r5, #10]
 8009c06:	005b      	lsls	r3, r3, #1
 8009c08:	4002      	ands	r2, r0
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	2207      	movs	r2, #7
 8009c0e:	816b      	strh	r3, [r5, #10]
 8009c10:	0a1b      	lsrs	r3, r3, #8
 8009c12:	4013      	ands	r3, r2
 8009c14:	3209      	adds	r2, #9
 8009c16:	4313      	orrs	r3, r2
 8009c18:	72eb      	strb	r3, [r5, #11]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 8009c1a:	0030      	movs	r0, r6
 8009c1c:	f7ff fe34 	bl	8009888 <lv_style_copy>
    lv_style_transp.glass             = 1;
 8009c20:	2201      	movs	r2, #1
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 8009c22:	4d17      	ldr	r5, [pc, #92]	; (8009c80 <lv_style_init+0x3ec>)
    lv_style_transp.glass             = 1;
 8009c24:	7833      	ldrb	r3, [r6, #0]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 8009c26:	0031      	movs	r1, r6
    lv_style_transp.glass             = 1;
 8009c28:	4313      	orrs	r3, r2
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 8009c2a:	0028      	movs	r0, r5
    lv_style_transp.glass             = 1;
 8009c2c:	7033      	strb	r3, [r6, #0]
    lv_style_transp.body.border.width = 0;
 8009c2e:	81b7      	strh	r7, [r6, #12]
    lv_style_transp.body.opa          = LV_OPA_TRANSP;
 8009c30:	7237      	strb	r7, [r6, #8]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 8009c32:	f7ff fe29 	bl	8009888 <lv_style_copy>
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 8009c36:	4e13      	ldr	r6, [pc, #76]	; (8009c84 <lv_style_init+0x3f0>)
 8009c38:	0029      	movs	r1, r5
 8009c3a:	0030      	movs	r0, r6
    lv_style_transp_fit.body.padding.left   = 0;
 8009c3c:	836f      	strh	r7, [r5, #26]
    lv_style_transp_fit.body.padding.right  = 0;
 8009c3e:	83af      	strh	r7, [r5, #28]
    lv_style_transp_fit.body.padding.top    = 0;
 8009c40:	82ef      	strh	r7, [r5, #22]
    lv_style_transp_fit.body.padding.bottom = 0;
 8009c42:	832f      	strh	r7, [r5, #24]
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 8009c44:	f7ff fe20 	bl	8009888 <lv_style_copy>
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 8009c48:	4d0f      	ldr	r5, [pc, #60]	; (8009c88 <lv_style_init+0x3f4>)
 8009c4a:	4908      	ldr	r1, [pc, #32]	; (8009c6c <lv_style_init+0x3d8>)
 8009c4c:	0028      	movs	r0, r5
    lv_style_transp_tight.body.padding.inner = 0;
 8009c4e:	83f7      	strh	r7, [r6, #30]
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 8009c50:	f7ff fe1a 	bl	8009888 <lv_style_copy>
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 8009c54:	231a      	movs	r3, #26
 8009c56:	78aa      	ldrb	r2, [r5, #2]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 8009c58:	2008      	movs	r0, #8
 8009c5a:	e017      	b.n	8009c8c <lv_style_init+0x3f8>
 8009c5c:	200053f8 	.word	0x200053f8
 8009c60:	08012490 	.word	0x08012490
 8009c64:	fffff81f 	.word	0xfffff81f
 8009c68:	20000030 	.word	0x20000030
 8009c6c:	20005380 	.word	0x20005380
 8009c70:	20005470 	.word	0x20005470
 8009c74:	20005290 	.word	0x20005290
 8009c78:	200051a0 	.word	0x200051a0
 8009c7c:	200051dc 	.word	0x200051dc
 8009c80:	20005344 	.word	0x20005344
 8009c84:	200052cc 	.word	0x200052cc
 8009c88:	20005218 	.word	0x20005218
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 8009c8c:	43a2      	bics	r2, r4
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	70ab      	strb	r3, [r5, #2]
 8009c92:	886a      	ldrh	r2, [r5, #2]
 8009c94:	4bf1      	ldr	r3, [pc, #964]	; (800a05c <lv_style_init+0x7c8>)
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 8009c96:	1c69      	adds	r1, r5, #1
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 8009c98:	401a      	ands	r2, r3
 8009c9a:	23a0      	movs	r3, #160	; 0xa0
 8009c9c:	00db      	lsls	r3, r3, #3
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	2207      	movs	r2, #7
 8009ca2:	806b      	strh	r3, [r5, #2]
 8009ca4:	0a1b      	lsrs	r3, r3, #8
 8009ca6:	4013      	ands	r3, r2
 8009ca8:	3269      	adds	r2, #105	; 0x69
 8009caa:	4313      	orrs	r3, r2
 8009cac:	70eb      	strb	r3, [r5, #3]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 8009cae:	230b      	movs	r3, #11
 8009cb0:	792a      	ldrb	r2, [r5, #4]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 8009cb2:	4240      	negs	r0, r0
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 8009cb4:	43a2      	bics	r2, r4
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	712b      	strb	r3, [r5, #4]
 8009cba:	88aa      	ldrh	r2, [r5, #4]
 8009cbc:	4be7      	ldr	r3, [pc, #924]	; (800a05c <lv_style_init+0x7c8>)
    lv_style_btn_rel.body.shadow.width   = 0;
 8009cbe:	826f      	strh	r7, [r5, #18]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 8009cc0:	401a      	ands	r2, r3
 8009cc2:	23e0      	movs	r3, #224	; 0xe0
 8009cc4:	005b      	lsls	r3, r3, #1
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	2207      	movs	r2, #7
 8009cca:	80ab      	strh	r3, [r5, #4]
 8009ccc:	0a1b      	lsrs	r3, r3, #8
 8009cce:	4013      	ands	r3, r2
 8009cd0:	3211      	adds	r2, #17
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	716b      	strb	r3, [r5, #5]
    lv_style_btn_rel.body.radius         = LV_DPI / 15;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	80eb      	strh	r3, [r5, #6]
    lv_style_btn_rel.body.padding.left   = LV_DPI / 4;
 8009cda:	2306      	movs	r3, #6
 8009cdc:	836b      	strh	r3, [r5, #26]
    lv_style_btn_rel.body.padding.right  = LV_DPI / 4;
 8009cde:	2306      	movs	r3, #6
 8009ce0:	83ab      	strh	r3, [r5, #28]
    lv_style_btn_rel.body.padding.top    = LV_DPI / 6;
 8009ce2:	2304      	movs	r3, #4
 8009ce4:	82eb      	strh	r3, [r5, #22]
    lv_style_btn_rel.body.padding.bottom = LV_DPI / 6;
 8009ce6:	2304      	movs	r3, #4
 8009ce8:	832b      	strh	r3, [r5, #24]
    lv_style_btn_rel.body.padding.inner  = LV_DPI / 10;
 8009cea:	2302      	movs	r3, #2
 8009cec:	83eb      	strh	r3, [r5, #30]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 8009cee:	2305      	movs	r3, #5
 8009cf0:	7aaa      	ldrb	r2, [r5, #10]
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 8009cf2:	27c0      	movs	r7, #192	; 0xc0
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 8009cf4:	43a2      	bics	r2, r4
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	72ab      	strb	r3, [r5, #10]
 8009cfa:	896a      	ldrh	r2, [r5, #10]
 8009cfc:	4bd7      	ldr	r3, [pc, #860]	; (800a05c <lv_style_init+0x7c8>)
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 8009cfe:	00bf      	lsls	r7, r7, #2
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 8009d00:	401a      	ands	r2, r3
 8009d02:	23c0      	movs	r3, #192	; 0xc0
 8009d04:	4313      	orrs	r3, r2
 8009d06:	816b      	strh	r3, [r5, #10]
 8009d08:	2308      	movs	r3, #8
 8009d0a:	72eb      	strb	r3, [r5, #11]
    lv_style_btn_rel.body.border.width   = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	81ab      	strh	r3, [r5, #12]
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
 8009d10:	23b2      	movs	r3, #178	; 0xb2
 8009d12:	73eb      	strb	r3, [r5, #15]
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 8009d14:	466b      	mov	r3, sp
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 8009d16:	22fc      	movs	r2, #252	; 0xfc
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 8009d18:	889b      	ldrh	r3, [r3, #4]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 8009d1a:	00d2      	lsls	r2, r2, #3
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 8009d1c:	822b      	strh	r3, [r5, #16]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 8009d1e:	7fcb      	ldrb	r3, [r1, #31]
 8009d20:	4323      	orrs	r3, r4
 8009d22:	77cb      	strb	r3, [r1, #31]
 8009d24:	8c2b      	ldrh	r3, [r5, #32]
 8009d26:	1ca9      	adds	r1, r5, #2
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	842b      	strh	r3, [r5, #32]
 8009d2c:	0a1b      	lsrs	r3, r3, #8
 8009d2e:	4303      	orrs	r3, r0
 8009d30:	77cb      	strb	r3, [r1, #31]
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);
 8009d32:	002b      	movs	r3, r5
 8009d34:	3330      	adds	r3, #48	; 0x30
 8009d36:	7819      	ldrb	r1, [r3, #0]
 8009d38:	4321      	orrs	r1, r4
 8009d3a:	7019      	strb	r1, [r3, #0]
 8009d3c:	8e29      	ldrh	r1, [r5, #48]	; 0x30
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 8009d3e:	4ec8      	ldr	r6, [pc, #800]	; (800a060 <lv_style_init+0x7cc>)
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);
 8009d40:	430a      	orrs	r2, r1
 8009d42:	862a      	strh	r2, [r5, #48]	; 0x30
 8009d44:	0a12      	lsrs	r2, r2, #8
 8009d46:	4302      	orrs	r2, r0
 8009d48:	705a      	strb	r2, [r3, #1]
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 8009d4a:	0029      	movs	r1, r5
 8009d4c:	0030      	movs	r0, r6
 8009d4e:	f7ff fd9b 	bl	8009888 <lv_style_copy>
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 8009d52:	2212      	movs	r2, #18
 8009d54:	78b3      	ldrb	r3, [r6, #2]
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8009d56:	2118      	movs	r1, #24
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 8009d58:	43a3      	bics	r3, r4
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	70b3      	strb	r3, [r6, #2]
 8009d5e:	8873      	ldrh	r3, [r6, #2]
 8009d60:	4abe      	ldr	r2, [pc, #760]	; (800a05c <lv_style_init+0x7c8>)
 8009d62:	4013      	ands	r3, r2
 8009d64:	2207      	movs	r2, #7
 8009d66:	433b      	orrs	r3, r7
 8009d68:	8073      	strh	r3, [r6, #2]
 8009d6a:	0a1b      	lsrs	r3, r3, #8
 8009d6c:	4013      	ands	r3, r2
 8009d6e:	3229      	adds	r2, #41	; 0x29
 8009d70:	4313      	orrs	r3, r2
 8009d72:	70f3      	strb	r3, [r6, #3]
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
 8009d74:	7933      	ldrb	r3, [r6, #4]
 8009d76:	3a29      	subs	r2, #41	; 0x29
 8009d78:	43a3      	bics	r3, r4
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	7133      	strb	r3, [r6, #4]
 8009d7e:	88b2      	ldrh	r2, [r6, #4]
 8009d80:	4bb6      	ldr	r3, [pc, #728]	; (800a05c <lv_style_init+0x7c8>)
 8009d82:	401a      	ands	r2, r3
 8009d84:	2390      	movs	r3, #144	; 0x90
 8009d86:	005b      	lsls	r3, r3, #1
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	2207      	movs	r2, #7
 8009d8c:	80b3      	strh	r3, [r6, #4]
 8009d8e:	0a1b      	lsrs	r3, r3, #8
 8009d90:	4013      	ands	r3, r2
 8009d92:	3209      	adds	r2, #9
 8009d94:	4313      	orrs	r3, r2
 8009d96:	7173      	strb	r3, [r6, #5]
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8009d98:	1c72      	adds	r2, r6, #1
 8009d9a:	7fd3      	ldrb	r3, [r2, #31]
 8009d9c:	43a3      	bics	r3, r4
 8009d9e:	430b      	orrs	r3, r1
 8009da0:	77d3      	strb	r3, [r2, #31]
 8009da2:	8c33      	ldrh	r3, [r6, #32]
 8009da4:	49ad      	ldr	r1, [pc, #692]	; (800a05c <lv_style_init+0x7c8>)
 8009da6:	1cb2      	adds	r2, r6, #2
 8009da8:	400b      	ands	r3, r1
 8009daa:	21b4      	movs	r1, #180	; 0xb4
 8009dac:	00c9      	lsls	r1, r1, #3
 8009dae:	430b      	orrs	r3, r1
 8009db0:	2107      	movs	r1, #7
 8009db2:	8433      	strh	r3, [r6, #32]
 8009db4:	0a1b      	lsrs	r3, r3, #8
 8009db6:	400b      	ands	r3, r1
 8009db8:	3967      	subs	r1, #103	; 0x67
 8009dba:	430b      	orrs	r3, r1
 8009dbc:	77d3      	strb	r3, [r2, #31]
    lv_style_btn_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 8009dbe:	0032      	movs	r2, r6
 8009dc0:	3230      	adds	r2, #48	; 0x30
 8009dc2:	7813      	ldrb	r3, [r2, #0]
 8009dc4:	3178      	adds	r1, #120	; 0x78
 8009dc6:	43a3      	bics	r3, r4
 8009dc8:	430b      	orrs	r3, r1
 8009dca:	7013      	strb	r3, [r2, #0]
 8009dcc:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 8009dce:	49a3      	ldr	r1, [pc, #652]	; (800a05c <lv_style_init+0x7c8>)
 8009dd0:	400b      	ands	r3, r1
 8009dd2:	21b4      	movs	r1, #180	; 0xb4
 8009dd4:	00c9      	lsls	r1, r1, #3
 8009dd6:	430b      	orrs	r3, r1
 8009dd8:	2107      	movs	r1, #7
 8009dda:	8633      	strh	r3, [r6, #48]	; 0x30
 8009ddc:	0a1b      	lsrs	r3, r3, #8
 8009dde:	400b      	ands	r3, r1
 8009de0:	3967      	subs	r1, #103	; 0x67
 8009de2:	430b      	orrs	r3, r1
 8009de4:	7053      	strb	r3, [r2, #1]
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8009de6:	0032      	movs	r2, r6
 8009de8:	3234      	adds	r2, #52	; 0x34
 8009dea:	7813      	ldrb	r3, [r2, #0]
 8009dec:	3178      	adds	r1, #120	; 0x78
 8009dee:	43a3      	bics	r3, r4
 8009df0:	430b      	orrs	r3, r1
 8009df2:	7013      	strb	r3, [r2, #0]
 8009df4:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
 8009df6:	4999      	ldr	r1, [pc, #612]	; (800a05c <lv_style_init+0x7c8>)
 8009df8:	400b      	ands	r3, r1
 8009dfa:	21b4      	movs	r1, #180	; 0xb4
 8009dfc:	00c9      	lsls	r1, r1, #3
 8009dfe:	430b      	orrs	r3, r1
 8009e00:	2107      	movs	r1, #7
 8009e02:	86b3      	strh	r3, [r6, #52]	; 0x34
 8009e04:	0a1b      	lsrs	r3, r3, #8
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
 8009e06:	4e97      	ldr	r6, [pc, #604]	; (800a064 <lv_style_init+0x7d0>)
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8009e08:	400b      	ands	r3, r1
 8009e0a:	3967      	subs	r1, #103	; 0x67
 8009e0c:	430b      	orrs	r3, r1
 8009e0e:	7053      	strb	r3, [r2, #1]
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
 8009e10:	0029      	movs	r1, r5
 8009e12:	0030      	movs	r0, r6
 8009e14:	f7ff fd38 	bl	8009888 <lv_style_copy>
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 8009e18:	2204      	movs	r2, #4
 8009e1a:	78b3      	ldrb	r3, [r6, #2]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8009e1c:	1c70      	adds	r0, r6, #1
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 8009e1e:	43a3      	bics	r3, r4
 8009e20:	4313      	orrs	r3, r2
 8009e22:	70b3      	strb	r3, [r6, #2]
 8009e24:	8872      	ldrh	r2, [r6, #2]
 8009e26:	4b8d      	ldr	r3, [pc, #564]	; (800a05c <lv_style_init+0x7c8>)
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8009e28:	2107      	movs	r1, #7
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 8009e2a:	401a      	ands	r2, r3
 8009e2c:	2380      	movs	r3, #128	; 0x80
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	8073      	strh	r3, [r6, #2]
 8009e32:	2308      	movs	r3, #8
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 8009e34:	2212      	movs	r2, #18
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 8009e36:	70f3      	strb	r3, [r6, #3]
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 8009e38:	7933      	ldrb	r3, [r6, #4]
 8009e3a:	43a3      	bics	r3, r4
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	7133      	strb	r3, [r6, #4]
 8009e40:	88b3      	ldrh	r3, [r6, #4]
 8009e42:	4a86      	ldr	r2, [pc, #536]	; (800a05c <lv_style_init+0x7c8>)
 8009e44:	4013      	ands	r3, r2
 8009e46:	431f      	orrs	r7, r3
 8009e48:	2307      	movs	r3, #7
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 8009e4a:	2201      	movs	r2, #1
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 8009e4c:	80b7      	strh	r7, [r6, #4]
 8009e4e:	0a3f      	lsrs	r7, r7, #8
 8009e50:	401f      	ands	r7, r3
 8009e52:	3329      	adds	r3, #41	; 0x29
 8009e54:	431f      	orrs	r7, r3
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 8009e56:	7ab3      	ldrb	r3, [r6, #10]
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 8009e58:	7177      	strb	r7, [r6, #5]
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 8009e5a:	43a3      	bics	r3, r4
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	72b3      	strb	r3, [r6, #10]
 8009e60:	8973      	ldrh	r3, [r6, #10]
 8009e62:	4a7e      	ldr	r2, [pc, #504]	; (800a05c <lv_style_init+0x7c8>)
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
 8009e64:	271e      	movs	r7, #30
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 8009e66:	4013      	ands	r3, r2
 8009e68:	2220      	movs	r2, #32
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	8173      	strh	r3, [r6, #10]
 8009e6e:	2300      	movs	r3, #0
 8009e70:	72f3      	strb	r3, [r6, #11]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8009e72:	7fc3      	ldrb	r3, [r0, #31]
 8009e74:	3a02      	subs	r2, #2
 8009e76:	43a3      	bics	r3, r4
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	77c3      	strb	r3, [r0, #31]
 8009e7c:	8c33      	ldrh	r3, [r6, #32]
 8009e7e:	4a77      	ldr	r2, [pc, #476]	; (800a05c <lv_style_init+0x7c8>)
 8009e80:	1cb0      	adds	r0, r6, #2
 8009e82:	4013      	ands	r3, r2
 8009e84:	22dc      	movs	r2, #220	; 0xdc
 8009e86:	00d2      	lsls	r2, r2, #3
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	8433      	strh	r3, [r6, #32]
 8009e8c:	0a1b      	lsrs	r3, r3, #8
 8009e8e:	400b      	ands	r3, r1
 8009e90:	393f      	subs	r1, #63	; 0x3f
 8009e92:	430b      	orrs	r3, r1
 8009e94:	77c3      	strb	r3, [r0, #31]
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
 8009e96:	0030      	movs	r0, r6
 8009e98:	3030      	adds	r0, #48	; 0x30
 8009e9a:	7803      	ldrb	r3, [r0, #0]
 8009e9c:	43a3      	bics	r3, r4
 8009e9e:	433b      	orrs	r3, r7
 8009ea0:	7003      	strb	r3, [r0, #0]
 8009ea2:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 8009ea4:	4f6d      	ldr	r7, [pc, #436]	; (800a05c <lv_style_init+0x7c8>)
 8009ea6:	403b      	ands	r3, r7
 8009ea8:	2707      	movs	r7, #7
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	8633      	strh	r3, [r6, #48]	; 0x30
 8009eae:	0a1b      	lsrs	r3, r3, #8
 8009eb0:	403b      	ands	r3, r7
 8009eb2:	430b      	orrs	r3, r1
 8009eb4:	7043      	strb	r3, [r0, #1]
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8009eb6:	0033      	movs	r3, r6
 8009eb8:	3334      	adds	r3, #52	; 0x34
 8009eba:	7818      	ldrb	r0, [r3, #0]
 8009ebc:	3717      	adds	r7, #23
 8009ebe:	43a0      	bics	r0, r4
 8009ec0:	4338      	orrs	r0, r7
 8009ec2:	7018      	strb	r0, [r3, #0]
 8009ec4:	8eb0      	ldrh	r0, [r6, #52]	; 0x34
 8009ec6:	4f65      	ldr	r7, [pc, #404]	; (800a05c <lv_style_init+0x7c8>)
 8009ec8:	4038      	ands	r0, r7
 8009eca:	4302      	orrs	r2, r0
 8009ecc:	2007      	movs	r0, #7
 8009ece:	86b2      	strh	r2, [r6, #52]	; 0x34
 8009ed0:	0a12      	lsrs	r2, r2, #8
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 8009ed2:	4f65      	ldr	r7, [pc, #404]	; (800a068 <lv_style_init+0x7d4>)
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8009ed4:	4002      	ands	r2, r0
 8009ed6:	430a      	orrs	r2, r1
 8009ed8:	705a      	strb	r2, [r3, #1]
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 8009eda:	0031      	movs	r1, r6
 8009edc:	0038      	movs	r0, r7
 8009ede:	f7ff fcd3 	bl	8009888 <lv_style_copy>
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 8009ee2:	2204      	movs	r2, #4
 8009ee4:	78bb      	ldrb	r3, [r7, #2]
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 8009ee6:	260e      	movs	r6, #14
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 8009ee8:	43a3      	bics	r3, r4
 8009eea:	4313      	orrs	r3, r2
 8009eec:	70bb      	strb	r3, [r7, #2]
 8009eee:	887a      	ldrh	r2, [r7, #2]
 8009ef0:	4b5a      	ldr	r3, [pc, #360]	; (800a05c <lv_style_init+0x7c8>)
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8009ef2:	2118      	movs	r1, #24
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 8009ef4:	401a      	ands	r2, r3
 8009ef6:	23a0      	movs	r3, #160	; 0xa0
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	807b      	strh	r3, [r7, #2]
 8009efc:	2300      	movs	r3, #0
 8009efe:	70fb      	strb	r3, [r7, #3]
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 8009f00:	793b      	ldrb	r3, [r7, #4]
 8009f02:	43a3      	bics	r3, r4
 8009f04:	4333      	orrs	r3, r6
 8009f06:	713b      	strb	r3, [r7, #4]
 8009f08:	88ba      	ldrh	r2, [r7, #4]
 8009f0a:	4b54      	ldr	r3, [pc, #336]	; (800a05c <lv_style_init+0x7c8>)
 8009f0c:	401a      	ands	r2, r3
 8009f0e:	2398      	movs	r3, #152	; 0x98
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	4313      	orrs	r3, r2
 8009f14:	2207      	movs	r2, #7
 8009f16:	80bb      	strh	r3, [r7, #4]
 8009f18:	0a1b      	lsrs	r3, r3, #8
 8009f1a:	4013      	ands	r3, r2
 8009f1c:	3221      	adds	r2, #33	; 0x21
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	717b      	strb	r3, [r7, #5]
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8009f22:	1c7a      	adds	r2, r7, #1
 8009f24:	7fd3      	ldrb	r3, [r2, #31]
 8009f26:	43a3      	bics	r3, r4
 8009f28:	430b      	orrs	r3, r1
 8009f2a:	77d3      	strb	r3, [r2, #31]
 8009f2c:	8c3b      	ldrh	r3, [r7, #32]
 8009f2e:	494b      	ldr	r1, [pc, #300]	; (800a05c <lv_style_init+0x7c8>)
 8009f30:	1cba      	adds	r2, r7, #2
 8009f32:	400b      	ands	r3, r1
 8009f34:	21b4      	movs	r1, #180	; 0xb4
 8009f36:	00c9      	lsls	r1, r1, #3
 8009f38:	430b      	orrs	r3, r1
 8009f3a:	2107      	movs	r1, #7
 8009f3c:	843b      	strh	r3, [r7, #32]
 8009f3e:	0a1b      	lsrs	r3, r3, #8
 8009f40:	400b      	ands	r3, r1
 8009f42:	3967      	subs	r1, #103	; 0x67
 8009f44:	430b      	orrs	r3, r1
 8009f46:	77d3      	strb	r3, [r2, #31]
    lv_style_btn_tgl_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 8009f48:	003a      	movs	r2, r7
 8009f4a:	3230      	adds	r2, #48	; 0x30
 8009f4c:	7813      	ldrb	r3, [r2, #0]
 8009f4e:	3178      	adds	r1, #120	; 0x78
 8009f50:	43a3      	bics	r3, r4
 8009f52:	430b      	orrs	r3, r1
 8009f54:	7013      	strb	r3, [r2, #0]
 8009f56:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009f58:	4940      	ldr	r1, [pc, #256]	; (800a05c <lv_style_init+0x7c8>)
 8009f5a:	400b      	ands	r3, r1
 8009f5c:	21b4      	movs	r1, #180	; 0xb4
 8009f5e:	00c9      	lsls	r1, r1, #3
 8009f60:	430b      	orrs	r3, r1
 8009f62:	2107      	movs	r1, #7
 8009f64:	863b      	strh	r3, [r7, #48]	; 0x30
 8009f66:	0a1b      	lsrs	r3, r3, #8
 8009f68:	400b      	ands	r3, r1
 8009f6a:	3967      	subs	r1, #103	; 0x67
 8009f6c:	430b      	orrs	r3, r1
 8009f6e:	7053      	strb	r3, [r2, #1]
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8009f70:	003a      	movs	r2, r7
 8009f72:	3234      	adds	r2, #52	; 0x34
 8009f74:	7813      	ldrb	r3, [r2, #0]
 8009f76:	3178      	adds	r1, #120	; 0x78
 8009f78:	43a3      	bics	r3, r4
 8009f7a:	430b      	orrs	r3, r1
 8009f7c:	7013      	strb	r3, [r2, #0]
 8009f7e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009f80:	4936      	ldr	r1, [pc, #216]	; (800a05c <lv_style_init+0x7c8>)
 8009f82:	400b      	ands	r3, r1
 8009f84:	21b4      	movs	r1, #180	; 0xb4
 8009f86:	00c9      	lsls	r1, r1, #3
 8009f88:	430b      	orrs	r3, r1
 8009f8a:	2107      	movs	r1, #7
 8009f8c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8009f8e:	0a1b      	lsrs	r3, r3, #8
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 8009f90:	4f36      	ldr	r7, [pc, #216]	; (800a06c <lv_style_init+0x7d8>)
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8009f92:	400b      	ands	r3, r1
 8009f94:	3967      	subs	r1, #103	; 0x67
 8009f96:	430b      	orrs	r3, r1
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 8009f98:	0038      	movs	r0, r7
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8009f9a:	7053      	strb	r3, [r2, #1]
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 8009f9c:	0029      	movs	r1, r5
 8009f9e:	f7ff fc73 	bl	8009888 <lv_style_copy>
    lv_style_btn_ina.body.main_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 8009fa2:	221b      	movs	r2, #27
 8009fa4:	78bb      	ldrb	r3, [r7, #2]
 8009fa6:	2107      	movs	r1, #7
 8009fa8:	43a3      	bics	r3, r4
 8009faa:	4313      	orrs	r3, r2
 8009fac:	70bb      	strb	r3, [r7, #2]
 8009fae:	887b      	ldrh	r3, [r7, #2]
 8009fb0:	4a2a      	ldr	r2, [pc, #168]	; (800a05c <lv_style_init+0x7c8>)
    lv_style_btn_ina.body.grad_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 8009fb2:	201b      	movs	r0, #27
    lv_style_btn_ina.body.main_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 8009fb4:	4013      	ands	r3, r2
 8009fb6:	22d8      	movs	r2, #216	; 0xd8
 8009fb8:	00d2      	lsls	r2, r2, #3
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	807b      	strh	r3, [r7, #2]
 8009fbe:	0a1b      	lsrs	r3, r3, #8
 8009fc0:	400b      	ands	r3, r1
 8009fc2:	392f      	subs	r1, #47	; 0x2f
 8009fc4:	430b      	orrs	r3, r1
 8009fc6:	70fb      	strb	r3, [r7, #3]
    lv_style_btn_ina.body.grad_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 8009fc8:	793b      	ldrb	r3, [r7, #4]
 8009fca:	43a3      	bics	r3, r4
 8009fcc:	4303      	orrs	r3, r0
 8009fce:	713b      	strb	r3, [r7, #4]
 8009fd0:	88bb      	ldrh	r3, [r7, #4]
 8009fd2:	4822      	ldr	r0, [pc, #136]	; (800a05c <lv_style_init+0x7c8>)
 8009fd4:	4003      	ands	r3, r0
 8009fd6:	431a      	orrs	r2, r3
 8009fd8:	2307      	movs	r3, #7
 8009fda:	80ba      	strh	r2, [r7, #4]
 8009fdc:	0a12      	lsrs	r2, r2, #8
 8009fde:	401a      	ands	r2, r3
 8009fe0:	430a      	orrs	r2, r1
 8009fe2:	717a      	strb	r2, [r7, #5]
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
 8009fe4:	2212      	movs	r2, #18
 8009fe6:	7abb      	ldrb	r3, [r7, #10]
    lv_style_btn_ina.text.color        = lv_color_make(0x70, 0x70, 0x70);
 8009fe8:	1c79      	adds	r1, r7, #1
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
 8009fea:	43a3      	bics	r3, r4
 8009fec:	4313      	orrs	r3, r2
 8009fee:	72bb      	strb	r3, [r7, #10]
 8009ff0:	2390      	movs	r3, #144	; 0x90
 8009ff2:	897a      	ldrh	r2, [r7, #10]
 8009ff4:	00db      	lsls	r3, r3, #3
 8009ff6:	4002      	ands	r2, r0
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	2207      	movs	r2, #7
 8009ffc:	817b      	strh	r3, [r7, #10]
 8009ffe:	0a1b      	lsrs	r3, r3, #8
 800a000:	4013      	ands	r3, r2
 800a002:	3a77      	subs	r2, #119	; 0x77
 800a004:	4313      	orrs	r3, r2
 800a006:	72fb      	strb	r3, [r7, #11]
    lv_style_btn_ina.text.color        = lv_color_make(0x70, 0x70, 0x70);
 800a008:	7fcb      	ldrb	r3, [r1, #31]
 800a00a:	22e0      	movs	r2, #224	; 0xe0
 800a00c:	43a3      	bics	r3, r4
 800a00e:	4333      	orrs	r3, r6
 800a010:	77cb      	strb	r3, [r1, #31]
 800a012:	8c3b      	ldrh	r3, [r7, #32]
 800a014:	0092      	lsls	r2, r2, #2
 800a016:	4003      	ands	r3, r0
 800a018:	2007      	movs	r0, #7
 800a01a:	4313      	orrs	r3, r2
 800a01c:	843b      	strh	r3, [r7, #32]
 800a01e:	0a1b      	lsrs	r3, r3, #8
 800a020:	4003      	ands	r3, r0
 800a022:	3069      	adds	r0, #105	; 0x69
 800a024:	1cb9      	adds	r1, r7, #2
 800a026:	4303      	orrs	r3, r0
 800a028:	77cb      	strb	r3, [r1, #31]
    lv_style_btn_ina.image.color       = lv_color_make(0x70, 0x70, 0x70);
 800a02a:	0039      	movs	r1, r7
 800a02c:	3130      	adds	r1, #48	; 0x30
 800a02e:	780b      	ldrb	r3, [r1, #0]
 800a030:	480a      	ldr	r0, [pc, #40]	; (800a05c <lv_style_init+0x7c8>)
 800a032:	43a3      	bics	r3, r4
 800a034:	4333      	orrs	r3, r6
 800a036:	700b      	strb	r3, [r1, #0]
 800a038:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a03a:	4003      	ands	r3, r0
 800a03c:	2007      	movs	r0, #7
 800a03e:	4313      	orrs	r3, r2
 800a040:	863b      	strh	r3, [r7, #48]	; 0x30
 800a042:	0a1b      	lsrs	r3, r3, #8
 800a044:	4003      	ands	r3, r0
 800a046:	3069      	adds	r0, #105	; 0x69
 800a048:	4303      	orrs	r3, r0
 800a04a:	704b      	strb	r3, [r1, #1]
    lv_style_btn_ina.line.color        = lv_color_make(0x70, 0x70, 0x70);
 800a04c:	003b      	movs	r3, r7
 800a04e:	3334      	adds	r3, #52	; 0x34
 800a050:	7819      	ldrb	r1, [r3, #0]
 800a052:	4802      	ldr	r0, [pc, #8]	; (800a05c <lv_style_init+0x7c8>)
 800a054:	43a1      	bics	r1, r4
 800a056:	430e      	orrs	r6, r1
 800a058:	e00a      	b.n	800a070 <lv_style_init+0x7dc>
 800a05a:	46c0      	nop			; (mov r8, r8)
 800a05c:	fffff81f 	.word	0xfffff81f
 800a060:	20005254 	.word	0x20005254
 800a064:	200053bc 	.word	0x200053bc
 800a068:	20005434 	.word	0x20005434
 800a06c:	20005308 	.word	0x20005308
 800a070:	701e      	strb	r6, [r3, #0]
 800a072:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800a074:	4001      	ands	r1, r0
 800a076:	430a      	orrs	r2, r1
 800a078:	2107      	movs	r1, #7
 800a07a:	86ba      	strh	r2, [r7, #52]	; 0x34
 800a07c:	0a12      	lsrs	r2, r2, #8
 800a07e:	400a      	ands	r2, r1
 800a080:	3169      	adds	r1, #105	; 0x69
 800a082:	430a      	orrs	r2, r1
 800a084:	705a      	strb	r2, [r3, #1]
}
 800a086:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0800a088 <lv_draw_get_buf>:
 * Be careful to not use the buffer while other processes are using it.
 * @param size the required size
 */
void * lv_draw_get_buf(uint32_t size)
{
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 800a088:	4b0d      	ldr	r3, [pc, #52]	; (800a0c0 <lv_draw_get_buf+0x38>)
{
 800a08a:	b510      	push	{r4, lr}
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 800a08c:	681a      	ldr	r2, [r3, #0]
{
 800a08e:	0001      	movs	r1, r0
 800a090:	4c0c      	ldr	r4, [pc, #48]	; (800a0c4 <lv_draw_get_buf+0x3c>)
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 800a092:	4282      	cmp	r2, r0
 800a094:	d301      	bcc.n	800a09a <lv_draw_get_buf+0x12>
 800a096:	6820      	ldr	r0, [r4, #0]
    }

    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
    lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
    return LV_GC_ROOT(_lv_draw_buf);
}
 800a098:	bd10      	pop	{r4, pc}
    draw_buf_size = size;
 800a09a:	6018      	str	r0, [r3, #0]
    if(LV_GC_ROOT(_lv_draw_buf) == NULL) {
 800a09c:	6820      	ldr	r0, [r4, #0]
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	d106      	bne.n	800a0b0 <lv_draw_get_buf+0x28>
        LV_GC_ROOT(_lv_draw_buf) = lv_mem_alloc(size);
 800a0a2:	0008      	movs	r0, r1
 800a0a4:	f003 ff98 	bl	800dfd8 <lv_mem_alloc>
 800a0a8:	6020      	str	r0, [r4, #0]
        lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	d1f4      	bne.n	800a098 <lv_draw_get_buf+0x10>
 800a0ae:	e7fe      	b.n	800a0ae <lv_draw_get_buf+0x26>
    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
 800a0b0:	f003 fff0 	bl	800e094 <lv_mem_realloc>
    lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	d001      	beq.n	800a0bc <lv_draw_get_buf+0x34>
    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
 800a0b8:	6020      	str	r0, [r4, #0]
 800a0ba:	e7ed      	b.n	800a098 <lv_draw_get_buf+0x10>
 800a0bc:	e7fe      	b.n	800a0bc <lv_draw_get_buf+0x34>
 800a0be:	46c0      	nop			; (mov r8, r8)
 800a0c0:	20001534 	.word	0x20001534
 800a0c4:	200054c4 	.word	0x200054c4

0800a0c8 <lv_draw_free_buf>:

/**
 * Free the draw buffer
 */
void lv_draw_free_buf(void)
{
 800a0c8:	b510      	push	{r4, lr}
    if(LV_GC_ROOT(_lv_draw_buf)) {
 800a0ca:	4c05      	ldr	r4, [pc, #20]	; (800a0e0 <lv_draw_free_buf+0x18>)
 800a0cc:	6820      	ldr	r0, [r4, #0]
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	d005      	beq.n	800a0de <lv_draw_free_buf+0x16>
        lv_mem_free(LV_GC_ROOT(_lv_draw_buf));
 800a0d2:	f003 ffb5 	bl	800e040 <lv_mem_free>
        LV_GC_ROOT(_lv_draw_buf) = NULL;
 800a0d6:	2300      	movs	r3, #0
        draw_buf_size = 0;
 800a0d8:	4a02      	ldr	r2, [pc, #8]	; (800a0e4 <lv_draw_free_buf+0x1c>)
        LV_GC_ROOT(_lv_draw_buf) = NULL;
 800a0da:	6023      	str	r3, [r4, #0]
        draw_buf_size = 0;
 800a0dc:	6013      	str	r3, [r2, #0]
    }
}
 800a0de:	bd10      	pop	{r4, pc}
 800a0e0:	200054c4 	.word	0x200054c4
 800a0e4:	20001534 	.word	0x20001534

0800a0e8 <lv_draw_aa_get_opa>:
 * @param px_id position of  of a pixel which opacity should be get [0..seg-1]
 * @param base_opa the base opacity
 * @return the opacity of the given pixel
 */
lv_opa_t lv_draw_aa_get_opa(lv_coord_t seg, lv_coord_t px_id, lv_opa_t base_opa)
{
 800a0e8:	0003      	movs	r3, r0
    static const lv_opa_t seg8[8] = {16, 48, 80, 112, 143, 175, 207, 239};

    static const lv_opa_t * seg_map[] = {seg1, seg2, seg3, seg4, seg5, seg6, seg7, seg8};

    if(seg == 0)
        return LV_OPA_TRANSP;
 800a0ea:	2000      	movs	r0, #0
{
 800a0ec:	b510      	push	{r4, lr}
    if(seg == 0)
 800a0ee:	4283      	cmp	r3, r0
 800a0f0:	d008      	beq.n	800a104 <lv_draw_aa_get_opa+0x1c>
    else if(seg < 8)
 800a0f2:	2b07      	cmp	r3, #7
 800a0f4:	dc07      	bgt.n	800a106 <lv_draw_aa_get_opa+0x1e>
        return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 800a0f6:	4808      	ldr	r0, [pc, #32]	; (800a118 <lv_draw_aa_get_opa+0x30>)
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	581b      	ldr	r3, [r3, r0]
 800a0fe:	5c58      	ldrb	r0, [r3, r1]
 800a100:	4350      	muls	r0, r2
 800a102:	0a00      	lsrs	r0, r0, #8
    else {
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
    }
}
 800a104:	bd10      	pop	{r4, pc}
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 800a106:	0049      	lsls	r1, r1, #1
 800a108:	3101      	adds	r1, #1
 800a10a:	434a      	muls	r2, r1
 800a10c:	0059      	lsls	r1, r3, #1
 800a10e:	0010      	movs	r0, r2
 800a110:	f7f6 f8b0 	bl	8000274 <__divsi3>
 800a114:	b2c0      	uxtb	r0, r0
 800a116:	e7f5      	b.n	800a104 <lv_draw_aa_get_opa+0x1c>
 800a118:	08012908 	.word	0x08012908

0800a11c <lv_color_mix>:
static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800a11c:	23ff      	movs	r3, #255	; 0xff
{
 800a11e:	b5f0      	push	{r4, r5, r6, r7, lr}
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800a120:	261f      	movs	r6, #31
 800a122:	b297      	uxth	r7, r2
 800a124:	0404      	lsls	r4, r0, #16
 800a126:	1a9a      	subs	r2, r3, r2
 800a128:	040b      	lsls	r3, r1, #16
 800a12a:	b292      	uxth	r2, r2
 800a12c:	0ee4      	lsrs	r4, r4, #27
 800a12e:	0edb      	lsrs	r3, r3, #27
 800a130:	437c      	muls	r4, r7
 800a132:	4353      	muls	r3, r2
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
    ret.ch.green_h = g_out >> 3;
    ret.ch.green_l = g_out & 0x7;
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800a134:	0545      	lsls	r5, r0, #21
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800a136:	18e4      	adds	r4, r4, r3
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800a138:	054b      	lsls	r3, r1, #21
 800a13a:	0ead      	lsrs	r5, r5, #26
 800a13c:	0e9b      	lsrs	r3, r3, #26
 800a13e:	437d      	muls	r5, r7
 800a140:	4353      	muls	r3, r2
 800a142:	18ed      	adds	r5, r5, r3
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800a144:	06c3      	lsls	r3, r0, #27
 800a146:	06c8      	lsls	r0, r1, #27
 800a148:	0edb      	lsrs	r3, r3, #27
 800a14a:	0ec0      	lsrs	r0, r0, #27
 800a14c:	437b      	muls	r3, r7
 800a14e:	4350      	muls	r0, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800a150:	04ad      	lsls	r5, r5, #18
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800a152:	1818      	adds	r0, r3, r0
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800a154:	0a24      	lsrs	r4, r4, #8
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800a156:	0a00      	lsrs	r0, r0, #8
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 800a158:	0ead      	lsrs	r5, r5, #26
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800a15a:	4034      	ands	r4, r6
    return ret;
 800a15c:	016d      	lsls	r5, r5, #5
 800a15e:	4030      	ands	r0, r6
 800a160:	4328      	orrs	r0, r5
 800a162:	02e4      	lsls	r4, r4, #11
 800a164:	4320      	orrs	r0, r4
}
 800a166:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a168 <sw_color_fill>:
 * @param color fill color
 * @param opa opacity (0, LV_OPA_TRANSP: transparent ... 255, LV_OPA_COVER, fully cover)
 */
static void sw_color_fill(lv_color_t * mem, lv_coord_t mem_width, const lv_area_t * fill_area, lv_color_t color,
                          lv_opa_t opa)
{
 800a168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a16a:	b08b      	sub	sp, #44	; 0x2c
 800a16c:	0016      	movs	r6, r2
 800a16e:	466a      	mov	r2, sp
 800a170:	8393      	strh	r3, [r2, #28]
 800a172:	ab10      	add	r3, sp, #64	; 0x40
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	9009      	str	r0, [sp, #36]	; 0x24
 800a178:	9308      	str	r3, [sp, #32]
 800a17a:	9106      	str	r1, [sp, #24]
    /*Set all row in vdb to the given color*/
    lv_coord_t row;
    lv_coord_t col;

    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 800a17c:	f7ff f9b6 	bl	80094ec <lv_refr_get_disp_refreshing>
    if(disp->driver.set_px_cb) {
 800a180:	6943      	ldr	r3, [r0, #20]
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 800a182:	0007      	movs	r7, r0
    if(disp->driver.set_px_cb) {
 800a184:	2b00      	cmp	r3, #0
 800a186:	d024      	beq.n	800a1d2 <sw_color_fill+0x6a>
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800a188:	2300      	movs	r3, #0
 800a18a:	5ef2      	ldrsh	r2, [r6, r3]
 800a18c:	9205      	str	r2, [sp, #20]
 800a18e:	2204      	movs	r2, #4
 800a190:	5eb3      	ldrsh	r3, [r6, r2]
 800a192:	9a05      	ldr	r2, [sp, #20]
 800a194:	4293      	cmp	r3, r2
 800a196:	da01      	bge.n	800a19c <sw_color_fill+0x34>
                }
                mem += mem_width;
            }
        }
    }
}
 800a198:	b00b      	add	sp, #44	; 0x2c
 800a19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 800a19c:	2302      	movs	r3, #2
 800a19e:	5ef5      	ldrsh	r5, [r6, r3]
 800a1a0:	2206      	movs	r2, #6
 800a1a2:	5eb3      	ldrsh	r3, [r6, r2]
 800a1a4:	42ab      	cmp	r3, r5
 800a1a6:	da04      	bge.n	800a1b2 <sw_color_fill+0x4a>
 800a1a8:	9c05      	ldr	r4, [sp, #20]
 800a1aa:	3401      	adds	r4, #1
 800a1ac:	b223      	sxth	r3, r4
 800a1ae:	9305      	str	r3, [sp, #20]
 800a1b0:	e7ed      	b.n	800a18e <sw_color_fill+0x26>
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
 800a1b2:	466a      	mov	r2, sp
 800a1b4:	9b08      	ldr	r3, [sp, #32]
 800a1b6:	0038      	movs	r0, r7
 800a1b8:	9302      	str	r3, [sp, #8]
 800a1ba:	8b92      	ldrh	r2, [r2, #28]
 800a1bc:	ab01      	add	r3, sp, #4
 800a1be:	801a      	strh	r2, [r3, #0]
 800a1c0:	9500      	str	r5, [sp, #0]
 800a1c2:	9b05      	ldr	r3, [sp, #20]
 800a1c4:	9a06      	ldr	r2, [sp, #24]
 800a1c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1c8:	697c      	ldr	r4, [r7, #20]
 800a1ca:	3501      	adds	r5, #1
 800a1cc:	47a0      	blx	r4
 800a1ce:	b22d      	sxth	r5, r5
 800a1d0:	e7e6      	b.n	800a1a0 <sw_color_fill+0x38>
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
 800a1d2:	2302      	movs	r3, #2
 800a1d4:	5ef4      	ldrsh	r4, [r6, r3]
 800a1d6:	9f06      	ldr	r7, [sp, #24]
 800a1d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1da:	4367      	muls	r7, r4
 800a1dc:	007f      	lsls	r7, r7, #1
 800a1de:	19df      	adds	r7, r3, r7
        if(opa == LV_OPA_COVER) {
 800a1e0:	9b08      	ldr	r3, [sp, #32]
 800a1e2:	2bff      	cmp	r3, #255	; 0xff
 800a1e4:	d127      	bne.n	800a236 <sw_color_fill+0xce>
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	5ef2      	ldrsh	r2, [r6, r3]
 800a1ea:	0013      	movs	r3, r2
 800a1ec:	2104      	movs	r1, #4
 800a1ee:	5e75      	ldrsh	r5, [r6, r1]
 800a1f0:	42ab      	cmp	r3, r5
 800a1f2:	dd19      	ble.n	800a228 <sw_color_fill+0xc0>
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 800a1f4:	1aad      	subs	r5, r5, r2
            lv_color_t * mem_first = &mem[fill_area->x1];
 800a1f6:	0053      	lsls	r3, r2, #1
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 800a1f8:	3501      	adds	r5, #1
            lv_color_t * mem_first = &mem[fill_area->x1];
 800a1fa:	18fb      	adds	r3, r7, r3
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 800a1fc:	006d      	lsls	r5, r5, #1
            lv_color_t * mem_first = &mem[fill_area->x1];
 800a1fe:	9305      	str	r3, [sp, #20]
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 800a200:	b22b      	sxth	r3, r5
 800a202:	9307      	str	r3, [sp, #28]
            mem += mem_width;
 800a204:	9b06      	ldr	r3, [sp, #24]
 800a206:	005d      	lsls	r5, r3, #1
 800a208:	3401      	adds	r4, #1
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 800a20a:	2206      	movs	r2, #6
 800a20c:	5eb3      	ldrsh	r3, [r6, r2]
 800a20e:	b224      	sxth	r4, r4
                mem += mem_width;
 800a210:	197f      	adds	r7, r7, r5
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 800a212:	42a3      	cmp	r3, r4
 800a214:	dbc0      	blt.n	800a198 <sw_color_fill+0x30>
                memcpy(&mem[fill_area->x1], mem_first, copy_size);
 800a216:	2300      	movs	r3, #0
 800a218:	5ef0      	ldrsh	r0, [r6, r3]
 800a21a:	9a07      	ldr	r2, [sp, #28]
 800a21c:	0040      	lsls	r0, r0, #1
 800a21e:	1838      	adds	r0, r7, r0
 800a220:	9905      	ldr	r1, [sp, #20]
 800a222:	f005 fb8f 	bl	800f944 <memcpy>
 800a226:	e7ef      	b.n	800a208 <sw_color_fill+0xa0>
                mem[col] = color;
 800a228:	4668      	mov	r0, sp
 800a22a:	8b80      	ldrh	r0, [r0, #28]
 800a22c:	0059      	lsls	r1, r3, #1
 800a22e:	3301      	adds	r3, #1
 800a230:	53c8      	strh	r0, [r1, r7]
 800a232:	b21b      	sxth	r3, r3
 800a234:	e7da      	b.n	800a1ec <sw_color_fill+0x84>
            lv_color_t bg_tmp  = LV_COLOR_BLACK;
 800a236:	466b      	mov	r3, sp
 800a238:	2100      	movs	r1, #0
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
 800a23a:	9a08      	ldr	r2, [sp, #32]
 800a23c:	8b98      	ldrh	r0, [r3, #28]
            lv_color_t bg_tmp  = LV_COLOR_BLACK;
 800a23e:	8499      	strh	r1, [r3, #36]	; 0x24
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
 800a240:	f7ff ff6c 	bl	800a11c <lv_color_mix>
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 800a244:	2202      	movs	r2, #2
 800a246:	5eb3      	ldrsh	r3, [r6, r2]
 800a248:	9305      	str	r3, [sp, #20]
                mem += mem_width;
 800a24a:	9b06      	ldr	r3, [sp, #24]
 800a24c:	005b      	lsls	r3, r3, #1
 800a24e:	9306      	str	r3, [sp, #24]
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 800a250:	2206      	movs	r2, #6
 800a252:	5eb3      	ldrsh	r3, [r6, r2]
 800a254:	9a05      	ldr	r2, [sp, #20]
 800a256:	4293      	cmp	r3, r2
 800a258:	db9e      	blt.n	800a198 <sw_color_fill+0x30>
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800a25a:	2300      	movs	r3, #0
 800a25c:	5ef4      	ldrsh	r4, [r6, r3]
 800a25e:	2204      	movs	r2, #4
 800a260:	5eb3      	ldrsh	r3, [r6, r2]
 800a262:	42a3      	cmp	r3, r4
 800a264:	da06      	bge.n	800a274 <sw_color_fill+0x10c>
                mem += mem_width;
 800a266:	9b06      	ldr	r3, [sp, #24]
 800a268:	18ff      	adds	r7, r7, r3
 800a26a:	9b05      	ldr	r3, [sp, #20]
 800a26c:	3301      	adds	r3, #1
 800a26e:	b21b      	sxth	r3, r3
 800a270:	9305      	str	r3, [sp, #20]
 800a272:	e7ed      	b.n	800a250 <sw_color_fill+0xe8>
                        if(mem[col].full != bg_tmp.full) {
 800a274:	466b      	mov	r3, sp
 800a276:	0065      	lsls	r5, r4, #1
 800a278:	197d      	adds	r5, r7, r5
 800a27a:	8829      	ldrh	r1, [r5, #0]
 800a27c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a27e:	4299      	cmp	r1, r3
 800a280:	d005      	beq.n	800a28e <sw_color_fill+0x126>
                            bg_tmp  = mem[col];
 800a282:	466b      	mov	r3, sp
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
 800a284:	9a08      	ldr	r2, [sp, #32]
 800a286:	8b98      	ldrh	r0, [r3, #28]
                            bg_tmp  = mem[col];
 800a288:	8499      	strh	r1, [r3, #36]	; 0x24
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
 800a28a:	f7ff ff47 	bl	800a11c <lv_color_mix>
 800a28e:	3401      	adds	r4, #1
                        mem[col] = opa_tmp;
 800a290:	8028      	strh	r0, [r5, #0]
 800a292:	b224      	sxth	r4, r4
 800a294:	e7e3      	b.n	800a25e <sw_color_fill+0xf6>

0800a296 <lv_draw_px>:
{
 800a296:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a298:	b087      	sub	sp, #28
 800a29a:	1c1e      	adds	r6, r3, #0
 800a29c:	ab0c      	add	r3, sp, #48	; 0x30
 800a29e:	781d      	ldrb	r5, [r3, #0]
 800a2a0:	0004      	movs	r4, r0
 800a2a2:	9105      	str	r1, [sp, #20]
    if(opa < LV_OPA_MIN) return;
 800a2a4:	2d0f      	cmp	r5, #15
 800a2a6:	d92d      	bls.n	800a304 <lv_draw_px+0x6e>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800a2a8:	2dfb      	cmp	r5, #251	; 0xfb
 800a2aa:	d900      	bls.n	800a2ae <lv_draw_px+0x18>
 800a2ac:	25ff      	movs	r5, #255	; 0xff
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
 800a2ae:	2100      	movs	r1, #0
 800a2b0:	5e53      	ldrsh	r3, [r2, r1]
 800a2b2:	42a3      	cmp	r3, r4
 800a2b4:	dc26      	bgt.n	800a304 <lv_draw_px+0x6e>
 800a2b6:	2104      	movs	r1, #4
 800a2b8:	5e53      	ldrsh	r3, [r2, r1]
 800a2ba:	42a3      	cmp	r3, r4
 800a2bc:	db22      	blt.n	800a304 <lv_draw_px+0x6e>
 800a2be:	2102      	movs	r1, #2
 800a2c0:	5e53      	ldrsh	r3, [r2, r1]
 800a2c2:	9905      	ldr	r1, [sp, #20]
 800a2c4:	428b      	cmp	r3, r1
 800a2c6:	dc1d      	bgt.n	800a304 <lv_draw_px+0x6e>
 800a2c8:	2306      	movs	r3, #6
 800a2ca:	5ed3      	ldrsh	r3, [r2, r3]
 800a2cc:	428b      	cmp	r3, r1
 800a2ce:	db19      	blt.n	800a304 <lv_draw_px+0x6e>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 800a2d0:	f7ff f90c 	bl	80094ec <lv_refr_get_disp_refreshing>
 800a2d4:	0007      	movs	r7, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800a2d6:	f003 f9b9 	bl	800d64c <lv_disp_get_buf>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 800a2da:	8a82      	ldrh	r2, [r0, #20]
 800a2dc:	8a03      	ldrh	r3, [r0, #16]
 800a2de:	3201      	adds	r2, #1
 800a2e0:	1ad2      	subs	r2, r2, r3
    y -= vdb->area.y1;
 800a2e2:	8a41      	ldrh	r1, [r0, #18]
    x -= vdb->area.x1;
 800a2e4:	1ae3      	subs	r3, r4, r3
    y -= vdb->area.y1;
 800a2e6:	9c05      	ldr	r4, [sp, #20]
 800a2e8:	b212      	sxth	r2, r2
 800a2ea:	1a61      	subs	r1, r4, r1
    if(disp->driver.set_px_cb) {
 800a2ec:	697c      	ldr	r4, [r7, #20]
    x -= vdb->area.x1;
 800a2ee:	b21b      	sxth	r3, r3
    y -= vdb->area.y1;
 800a2f0:	b209      	sxth	r1, r1
    if(disp->driver.set_px_cb) {
 800a2f2:	2c00      	cmp	r4, #0
 800a2f4:	d008      	beq.n	800a308 <lv_draw_px+0x72>
        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, x, y, color, opa);
 800a2f6:	9502      	str	r5, [sp, #8]
 800a2f8:	ad01      	add	r5, sp, #4
 800a2fa:	802e      	strh	r6, [r5, #0]
 800a2fc:	9100      	str	r1, [sp, #0]
 800a2fe:	6881      	ldr	r1, [r0, #8]
 800a300:	0038      	movs	r0, r7
 800a302:	47a0      	blx	r4
}
 800a304:	b007      	add	sp, #28
 800a306:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vdb_px_p += y * vdb_width + x;
 800a308:	4351      	muls	r1, r2
        lv_color_t * vdb_px_p = vdb->buf_act;
 800a30a:	6884      	ldr	r4, [r0, #8]
        vdb_px_p += y * vdb_width + x;
 800a30c:	18c9      	adds	r1, r1, r3
 800a30e:	0049      	lsls	r1, r1, #1
 800a310:	1864      	adds	r4, r4, r1
            if(opa == LV_OPA_COVER) {
 800a312:	2dff      	cmp	r5, #255	; 0xff
 800a314:	d101      	bne.n	800a31a <lv_draw_px+0x84>
                *vdb_px_p = color;
 800a316:	8026      	strh	r6, [r4, #0]
 800a318:	e7f4      	b.n	800a304 <lv_draw_px+0x6e>
                *vdb_px_p = lv_color_mix(color, *vdb_px_p, opa);
 800a31a:	002a      	movs	r2, r5
 800a31c:	8821      	ldrh	r1, [r4, #0]
 800a31e:	1c30      	adds	r0, r6, #0
 800a320:	f7ff fefc 	bl	800a11c <lv_color_mix>
 800a324:	8020      	strh	r0, [r4, #0]
 800a326:	e7ed      	b.n	800a304 <lv_draw_px+0x6e>

0800a328 <lv_draw_fill>:
{
 800a328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a32a:	b08d      	sub	sp, #52	; 0x34
 800a32c:	466c      	mov	r4, sp
 800a32e:	001f      	movs	r7, r3
 800a330:	8222      	strh	r2, [r4, #16]
    if(opa < LV_OPA_MIN) return;
 800a332:	2b0f      	cmp	r3, #15
 800a334:	d957      	bls.n	800a3e6 <lv_draw_fill+0xbe>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800a336:	2bfb      	cmp	r3, #251	; 0xfb
 800a338:	d900      	bls.n	800a33c <lv_draw_fill+0x14>
 800a33a:	27ff      	movs	r7, #255	; 0xff
 800a33c:	466b      	mov	r3, sp
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 800a33e:	ad08      	add	r5, sp, #32
 800a340:	8a1b      	ldrh	r3, [r3, #16]
 800a342:	000a      	movs	r2, r1
 800a344:	0001      	movs	r1, r0
 800a346:	0028      	movs	r0, r5
 800a348:	9305      	str	r3, [sp, #20]
 800a34a:	f003 faf4 	bl	800d936 <lv_area_intersect>
    if(union_ok == false) {
 800a34e:	2800      	cmp	r0, #0
 800a350:	d049      	beq.n	800a3e6 <lv_draw_fill+0xbe>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 800a352:	f7ff f8cb 	bl	80094ec <lv_refr_get_disp_refreshing>
 800a356:	0006      	movs	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800a358:	f003 f978 	bl	800d64c <lv_disp_get_buf>
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 800a35c:	4669      	mov	r1, sp
 800a35e:	8a02      	ldrh	r2, [r0, #16]
 800a360:	882c      	ldrh	r4, [r5, #0]
 800a362:	4694      	mov	ip, r2
 800a364:	1aa4      	subs	r4, r4, r2
 800a366:	b2a2      	uxth	r2, r4
 800a368:	9203      	str	r2, [sp, #12]
 800a36a:	8989      	ldrh	r1, [r1, #12]
 800a36c:	aa0a      	add	r2, sp, #40	; 0x28
 800a36e:	8011      	strh	r1, [r2, #0]
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 800a370:	8869      	ldrh	r1, [r5, #2]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800a372:	0003      	movs	r3, r0
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 800a374:	8a40      	ldrh	r0, [r0, #18]
 800a376:	1a09      	subs	r1, r1, r0
 800a378:	b289      	uxth	r1, r1
 800a37a:	9106      	str	r1, [sp, #24]
 800a37c:	4669      	mov	r1, sp
 800a37e:	2418      	movs	r4, #24
 800a380:	5f09      	ldrsh	r1, [r1, r4]
 800a382:	9102      	str	r1, [sp, #8]
 800a384:	4669      	mov	r1, sp
 800a386:	8909      	ldrh	r1, [r1, #8]
 800a388:	8051      	strh	r1, [r2, #2]
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 800a38a:	4661      	mov	r1, ip
 800a38c:	88ac      	ldrh	r4, [r5, #4]
 800a38e:	1a64      	subs	r4, r4, r1
 800a390:	b2a4      	uxth	r4, r4
 800a392:	8094      	strh	r4, [r2, #4]
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 800a394:	88e9      	ldrh	r1, [r5, #6]
 800a396:	8a9d      	ldrh	r5, [r3, #20]
 800a398:	1a09      	subs	r1, r1, r0
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 800a39a:	6898      	ldr	r0, [r3, #8]
 800a39c:	4663      	mov	r3, ip
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 800a39e:	b289      	uxth	r1, r1
 800a3a0:	9107      	str	r1, [sp, #28]
 800a3a2:	4669      	mov	r1, sp
 800a3a4:	3501      	adds	r5, #1
 800a3a6:	1aed      	subs	r5, r5, r3
 800a3a8:	9b03      	ldr	r3, [sp, #12]
 800a3aa:	3401      	adds	r4, #1
 800a3ac:	8b89      	ldrh	r1, [r1, #28]
 800a3ae:	1ae4      	subs	r4, r4, r3
 800a3b0:	b224      	sxth	r4, r4
 800a3b2:	80d1      	strh	r1, [r2, #6]
 800a3b4:	b229      	sxth	r1, r5
    if(w < VFILL_HW_ACC_SIZE_LIMIT) {
 800a3b6:	2c31      	cmp	r4, #49	; 0x31
 800a3b8:	dc03      	bgt.n	800a3c2 <lv_draw_fill+0x9a>
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 800a3ba:	466b      	mov	r3, sp
 800a3bc:	9700      	str	r7, [sp, #0]
 800a3be:	8a1b      	ldrh	r3, [r3, #16]
 800a3c0:	e055      	b.n	800a46e <lv_draw_fill+0x146>
    vdb_buf_tmp += vdb_width * vdb_rel_a.y1;
 800a3c2:	9b02      	ldr	r3, [sp, #8]
 800a3c4:	005b      	lsls	r3, r3, #1
 800a3c6:	434b      	muls	r3, r1
 800a3c8:	18c3      	adds	r3, r0, r3
 800a3ca:	9303      	str	r3, [sp, #12]
    else if(opa == LV_OPA_COVER) {
 800a3cc:	2fff      	cmp	r7, #255	; 0xff
 800a3ce:	d151      	bne.n	800a474 <lv_draw_fill+0x14c>
        if(disp->driver.gpu_fill_cb) {
 800a3d0:	6a37      	ldr	r7, [r6, #32]
 800a3d2:	2f00      	cmp	r7, #0
 800a3d4:	d009      	beq.n	800a3ea <lv_draw_fill+0xc2>
            disp->driver.gpu_fill_cb(&disp->driver, vdb->buf_act, vdb_width, &vdb_rel_a, color);
 800a3d6:	466b      	mov	r3, sp
 800a3d8:	8a1c      	ldrh	r4, [r3, #16]
 800a3da:	801c      	strh	r4, [r3, #0]
 800a3dc:	0013      	movs	r3, r2
 800a3de:	000a      	movs	r2, r1
 800a3e0:	0001      	movs	r1, r0
 800a3e2:	0030      	movs	r0, r6
 800a3e4:	47b8      	blx	r7
}
 800a3e6:	b00d      	add	sp, #52	; 0x34
 800a3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 800a3ea:	9b07      	ldr	r3, [sp, #28]
 800a3ec:	9a06      	ldr	r2, [sp, #24]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	1a9b      	subs	r3, r3, r2
        else if(lv_area_get_height(&vdb_rel_a) > VFILL_HW_ACC_SIZE_LIMIT && disp->driver.gpu_blend_cb) {
 800a3f2:	b21b      	sxth	r3, r3
 800a3f4:	2b32      	cmp	r3, #50	; 0x32
 800a3f6:	dd35      	ble.n	800a464 <lv_draw_fill+0x13c>
 800a3f8:	69f3      	ldr	r3, [r6, #28]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d032      	beq.n	800a464 <lv_draw_fill+0x13c>
            if(color_array_tmp[0].full != color.full || last_width != w) {
 800a3fe:	4b38      	ldr	r3, [pc, #224]	; (800a4e0 <lv_draw_fill+0x1b8>)
 800a400:	9a05      	ldr	r2, [sp, #20]
 800a402:	881b      	ldrh	r3, [r3, #0]
 800a404:	4293      	cmp	r3, r2
 800a406:	d104      	bne.n	800a412 <lv_draw_fill+0xea>
 800a408:	4b36      	ldr	r3, [pc, #216]	; (800a4e4 <lv_draw_fill+0x1bc>)
 800a40a:	2200      	movs	r2, #0
 800a40c:	5e9b      	ldrsh	r3, [r3, r2]
 800a40e:	42a3      	cmp	r3, r4
 800a410:	d004      	beq.n	800a41c <lv_draw_fill+0xf4>
                    color_array_tmp[i].full = color.full;
 800a412:	4b33      	ldr	r3, [pc, #204]	; (800a4e0 <lv_draw_fill+0x1b8>)
                for(i = 0; i < w; i++) {
 800a414:	42a7      	cmp	r7, r4
 800a416:	db1e      	blt.n	800a456 <lv_draw_fill+0x12e>
                last_width = w;
 800a418:	4b32      	ldr	r3, [pc, #200]	; (800a4e4 <lv_draw_fill+0x1bc>)
 800a41a:	801c      	strh	r4, [r3, #0]
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 800a41c:	27ff      	movs	r7, #255	; 0xff
                vdb_buf_tmp += vdb_width;
 800a41e:	004b      	lsls	r3, r1, #1
 800a420:	9304      	str	r3, [sp, #16]
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 800a422:	ab0a      	add	r3, sp, #40	; 0x28
 800a424:	2106      	movs	r1, #6
 800a426:	5e5a      	ldrsh	r2, [r3, r1]
 800a428:	9902      	ldr	r1, [sp, #8]
 800a42a:	428a      	cmp	r2, r1
 800a42c:	dbdb      	blt.n	800a3e6 <lv_draw_fill+0xbe>
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 800a42e:	2100      	movs	r1, #0
 800a430:	5e59      	ldrsh	r1, [r3, r1]
 800a432:	9b03      	ldr	r3, [sp, #12]
 800a434:	9700      	str	r7, [sp, #0]
 800a436:	0049      	lsls	r1, r1, #1
 800a438:	1859      	adds	r1, r3, r1
 800a43a:	4a29      	ldr	r2, [pc, #164]	; (800a4e0 <lv_draw_fill+0x1b8>)
 800a43c:	0023      	movs	r3, r4
 800a43e:	0030      	movs	r0, r6
 800a440:	69f5      	ldr	r5, [r6, #28]
 800a442:	47a8      	blx	r5
                vdb_buf_tmp += vdb_width;
 800a444:	9a03      	ldr	r2, [sp, #12]
 800a446:	9b04      	ldr	r3, [sp, #16]
 800a448:	18d3      	adds	r3, r2, r3
 800a44a:	9303      	str	r3, [sp, #12]
 800a44c:	9b02      	ldr	r3, [sp, #8]
 800a44e:	3301      	adds	r3, #1
 800a450:	b21b      	sxth	r3, r3
 800a452:	9302      	str	r3, [sp, #8]
 800a454:	e7e5      	b.n	800a422 <lv_draw_fill+0xfa>
                    color_array_tmp[i].full = color.full;
 800a456:	4668      	mov	r0, sp
 800a458:	8a80      	ldrh	r0, [r0, #20]
 800a45a:	007a      	lsls	r2, r7, #1
                for(i = 0; i < w; i++) {
 800a45c:	3701      	adds	r7, #1
                    color_array_tmp[i].full = color.full;
 800a45e:	52d0      	strh	r0, [r2, r3]
                for(i = 0; i < w; i++) {
 800a460:	b2bf      	uxth	r7, r7
 800a462:	e7d7      	b.n	800a414 <lv_draw_fill+0xec>
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 800a464:	23ff      	movs	r3, #255	; 0xff
 800a466:	9300      	str	r3, [sp, #0]
 800a468:	466b      	mov	r3, sp
 800a46a:	8a1b      	ldrh	r3, [r3, #16]
 800a46c:	aa0a      	add	r2, sp, #40	; 0x28
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 800a46e:	f7ff fe7b 	bl	800a168 <sw_color_fill>
 800a472:	e7b8      	b.n	800a3e6 <lv_draw_fill+0xbe>
        if(disp->driver.gpu_blend_cb) {
 800a474:	69f3      	ldr	r3, [r6, #28]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d09f      	beq.n	800a3ba <lv_draw_fill+0x92>
            if(color_array_tmp[0].full != color.full || last_width != w) {
 800a47a:	4b19      	ldr	r3, [pc, #100]	; (800a4e0 <lv_draw_fill+0x1b8>)
 800a47c:	9805      	ldr	r0, [sp, #20]
 800a47e:	881a      	ldrh	r2, [r3, #0]
 800a480:	2300      	movs	r3, #0
 800a482:	4282      	cmp	r2, r0
 800a484:	d104      	bne.n	800a490 <lv_draw_fill+0x168>
 800a486:	4a17      	ldr	r2, [pc, #92]	; (800a4e4 <lv_draw_fill+0x1bc>)
 800a488:	2000      	movs	r0, #0
 800a48a:	5e12      	ldrsh	r2, [r2, r0]
 800a48c:	42a2      	cmp	r2, r4
 800a48e:	d004      	beq.n	800a49a <lv_draw_fill+0x172>
                    color_array_tmp[i].full = color.full;
 800a490:	4a13      	ldr	r2, [pc, #76]	; (800a4e0 <lv_draw_fill+0x1b8>)
                for(i = 0; i < w; i++) {
 800a492:	42a3      	cmp	r3, r4
 800a494:	db1d      	blt.n	800a4d2 <lv_draw_fill+0x1aa>
                last_width = w;
 800a496:	4b13      	ldr	r3, [pc, #76]	; (800a4e4 <lv_draw_fill+0x1bc>)
 800a498:	801c      	strh	r4, [r3, #0]
                vdb_buf_tmp += vdb_width;
 800a49a:	004b      	lsls	r3, r1, #1
 800a49c:	9304      	str	r3, [sp, #16]
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 800a49e:	ab0a      	add	r3, sp, #40	; 0x28
 800a4a0:	2106      	movs	r1, #6
 800a4a2:	5e5a      	ldrsh	r2, [r3, r1]
 800a4a4:	9902      	ldr	r1, [sp, #8]
 800a4a6:	428a      	cmp	r2, r1
 800a4a8:	db9d      	blt.n	800a3e6 <lv_draw_fill+0xbe>
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 800a4aa:	2100      	movs	r1, #0
 800a4ac:	5e59      	ldrsh	r1, [r3, r1]
 800a4ae:	9b03      	ldr	r3, [sp, #12]
 800a4b0:	9700      	str	r7, [sp, #0]
 800a4b2:	0049      	lsls	r1, r1, #1
 800a4b4:	1859      	adds	r1, r3, r1
 800a4b6:	4a0a      	ldr	r2, [pc, #40]	; (800a4e0 <lv_draw_fill+0x1b8>)
 800a4b8:	0023      	movs	r3, r4
 800a4ba:	0030      	movs	r0, r6
 800a4bc:	69f5      	ldr	r5, [r6, #28]
 800a4be:	47a8      	blx	r5
                vdb_buf_tmp += vdb_width;
 800a4c0:	9a03      	ldr	r2, [sp, #12]
 800a4c2:	9b04      	ldr	r3, [sp, #16]
 800a4c4:	18d3      	adds	r3, r2, r3
 800a4c6:	9303      	str	r3, [sp, #12]
 800a4c8:	9b02      	ldr	r3, [sp, #8]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	b21b      	sxth	r3, r3
 800a4ce:	9302      	str	r3, [sp, #8]
 800a4d0:	e7e5      	b.n	800a49e <lv_draw_fill+0x176>
                    color_array_tmp[i].full = color.full;
 800a4d2:	466d      	mov	r5, sp
 800a4d4:	8aad      	ldrh	r5, [r5, #20]
 800a4d6:	0058      	lsls	r0, r3, #1
                for(i = 0; i < w; i++) {
 800a4d8:	3301      	adds	r3, #1
                    color_array_tmp[i].full = color.full;
 800a4da:	5285      	strh	r5, [r0, r2]
                for(i = 0; i < w; i++) {
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	e7d8      	b.n	800a492 <lv_draw_fill+0x16a>
 800a4e0:	20001538 	.word	0x20001538
 800a4e4:	20000012 	.word	0x20000012

0800a4e8 <lv_draw_letter>:
{
 800a4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4ea:	b09f      	sub	sp, #124	; 0x7c
 800a4ec:	9105      	str	r1, [sp, #20]
 800a4ee:	0015      	movs	r5, r2
 800a4f0:	2146      	movs	r1, #70	; 0x46
 800a4f2:	466a      	mov	r2, sp
 800a4f4:	001e      	movs	r6, r3
 800a4f6:	ab24      	add	r3, sp, #144	; 0x90
 800a4f8:	881b      	ldrh	r3, [r3, #0]
 800a4fa:	1852      	adds	r2, r2, r1
 800a4fc:	8013      	strh	r3, [r2, #0]
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800a4fe:	24ff      	movs	r4, #255	; 0xff
 800a500:	2200      	movs	r2, #0
{
 800a502:	ab25      	add	r3, sp, #148	; 0x94
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	0007      	movs	r7, r0
 800a508:	9306      	str	r3, [sp, #24]
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800a50a:	ab16      	add	r3, sp, #88	; 0x58
 800a50c:	701a      	strb	r2, [r3, #0]
 800a50e:	705c      	strb	r4, [r3, #1]
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800a510:	ab17      	add	r3, sp, #92	; 0x5c
 800a512:	701a      	strb	r2, [r3, #0]
 800a514:	3255      	adds	r2, #85	; 0x55
 800a516:	705a      	strb	r2, [r3, #1]
 800a518:	3255      	adds	r2, #85	; 0x55
 800a51a:	709a      	strb	r2, [r3, #2]
 800a51c:	70dc      	strb	r4, [r3, #3]
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800a51e:	3a9a      	subs	r2, #154	; 0x9a
 800a520:	49c5      	ldr	r1, [pc, #788]	; (800a838 <lv_draw_letter+0x350>)
 800a522:	a81a      	add	r0, sp, #104	; 0x68
 800a524:	f005 fa0e 	bl	800f944 <memcpy>
    if(opa < LV_OPA_MIN) return;
 800a528:	9b06      	ldr	r3, [sp, #24]
 800a52a:	2b0f      	cmp	r3, #15
 800a52c:	d800      	bhi.n	800a530 <lv_draw_letter+0x48>
 800a52e:	e0dc      	b.n	800a6ea <lv_draw_letter+0x202>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800a530:	2bfb      	cmp	r3, #251	; 0xfb
 800a532:	d900      	bls.n	800a536 <lv_draw_letter+0x4e>
 800a534:	9406      	str	r4, [sp, #24]
    if(font_p == NULL) {
 800a536:	2d00      	cmp	r5, #0
 800a538:	d100      	bne.n	800a53c <lv_draw_letter+0x54>
 800a53a:	e0d6      	b.n	800a6ea <lv_draw_letter+0x202>
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 800a53c:	ac18      	add	r4, sp, #96	; 0x60
 800a53e:	2300      	movs	r3, #0
 800a540:	0032      	movs	r2, r6
 800a542:	0021      	movs	r1, r4
 800a544:	0028      	movs	r0, r5
 800a546:	f002 fe9b 	bl	800d280 <lv_font_get_glyph_dsc>
    if(g_ret == false) return;
 800a54a:	2800      	cmp	r0, #0
 800a54c:	d100      	bne.n	800a550 <lv_draw_letter+0x68>
 800a54e:	e0cc      	b.n	800a6ea <lv_draw_letter+0x202>
    switch(g.bpp) {
 800a550:	79a0      	ldrb	r0, [r4, #6]
 800a552:	3801      	subs	r0, #1
 800a554:	2807      	cmp	r0, #7
 800a556:	d900      	bls.n	800a55a <lv_draw_letter+0x72>
 800a558:	e0c7      	b.n	800a6ea <lv_draw_letter+0x202>
 800a55a:	f7f5 fde3 	bl	8000124 <__gnu_thumb1_case_uqi>
 800a55e:	d004      	.short	0xd004
 800a560:	c6c6c8c6 	.word	0xc6c6c8c6
 800a564:	ccc6      	.short	0xccc6
            bitmask_init  = 0x80;
 800a566:	2380      	movs	r3, #128	; 0x80
 800a568:	930b      	str	r3, [sp, #44]	; 0x2c
            bpp_opa_table = bpp1_opa_table;
 800a56a:	ab16      	add	r3, sp, #88	; 0x58
            bpp_opa_table = bpp2_opa_table;
 800a56c:	930a      	str	r3, [sp, #40]	; 0x28
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 800a56e:	2200      	movs	r2, #0
 800a570:	5ebb      	ldrsh	r3, [r7, r2]
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 800a572:	0031      	movs	r1, r6
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 800a574:	9307      	str	r3, [sp, #28]
 800a576:	2304      	movs	r3, #4
 800a578:	56e3      	ldrsb	r3, [r4, r3]
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 800a57a:	0028      	movs	r0, r5
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 800a57c:	9308      	str	r3, [sp, #32]
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 800a57e:	2202      	movs	r2, #2
 800a580:	5ebb      	ldrsh	r3, [r7, r2]
 800a582:	2705      	movs	r7, #5
 800a584:	9309      	str	r3, [sp, #36]	; 0x24
 800a586:	7a2b      	ldrb	r3, [r5, #8]
 800a588:	930d      	str	r3, [sp, #52]	; 0x34
 800a58a:	7a6b      	ldrb	r3, [r5, #9]
 800a58c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a58e:	78e3      	ldrb	r3, [r4, #3]
 800a590:	9310      	str	r3, [sp, #64]	; 0x40
 800a592:	57e7      	ldrsb	r7, [r4, r7]
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 800a594:	f002 fe70 	bl	800d278 <lv_font_get_glyph_bitmap>
 800a598:	900c      	str	r0, [sp, #48]	; 0x30
    if(map_p == NULL) return;
 800a59a:	2800      	cmp	r0, #0
 800a59c:	d100      	bne.n	800a5a0 <lv_draw_letter+0xb8>
 800a59e:	e0a4      	b.n	800a6ea <lv_draw_letter+0x202>
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 800a5a0:	9a08      	ldr	r2, [sp, #32]
 800a5a2:	9b07      	ldr	r3, [sp, #28]
 800a5a4:	4694      	mov	ip, r2
 800a5a6:	4463      	add	r3, ip
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	930e      	str	r3, [sp, #56]	; 0x38
 800a5ac:	466b      	mov	r3, sp
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 800a5ae:	9a05      	ldr	r2, [sp, #20]
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 800a5b0:	2538      	movs	r5, #56	; 0x38
 800a5b2:	5f5d      	ldrsh	r5, [r3, r5]
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 800a5b4:	78a3      	ldrb	r3, [r4, #2]
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	5e52      	ldrsh	r2, [r2, r1]
 800a5ba:	195b      	adds	r3, r3, r5
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	da00      	bge.n	800a5c2 <lv_draw_letter+0xda>
 800a5c0:	e093      	b.n	800a6ea <lv_draw_letter+0x202>
 800a5c2:	9b05      	ldr	r3, [sp, #20]
 800a5c4:	2204      	movs	r2, #4
 800a5c6:	5e9b      	ldrsh	r3, [r3, r2]
 800a5c8:	42ab      	cmp	r3, r5
 800a5ca:	da00      	bge.n	800a5ce <lv_draw_letter+0xe6>
 800a5cc:	e08d      	b.n	800a6ea <lv_draw_letter+0x202>
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 800a5ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 800a5d0:	9a05      	ldr	r2, [sp, #20]
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 800a5d2:	19df      	adds	r7, r3, r7
 800a5d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5d6:	1bdf      	subs	r7, r3, r7
 800a5d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5da:	18ff      	adds	r7, r7, r3
 800a5dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5de:	1aff      	subs	r7, r7, r3
 800a5e0:	b2bb      	uxth	r3, r7
 800a5e2:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5e4:	466b      	mov	r3, sp
 800a5e6:	263c      	movs	r6, #60	; 0x3c
 800a5e8:	5f9e      	ldrsh	r6, [r3, r6]
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 800a5ea:	78e3      	ldrb	r3, [r4, #3]
 800a5ec:	2102      	movs	r1, #2
 800a5ee:	5e52      	ldrsh	r2, [r2, r1]
 800a5f0:	199b      	adds	r3, r3, r6
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	db79      	blt.n	800a6ea <lv_draw_letter+0x202>
 800a5f6:	9b05      	ldr	r3, [sp, #20]
 800a5f8:	2206      	movs	r2, #6
 800a5fa:	5e9b      	ldrsh	r3, [r3, r2]
 800a5fc:	42b3      	cmp	r3, r6
 800a5fe:	db74      	blt.n	800a6ea <lv_draw_letter+0x202>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 800a600:	f7fe ff74 	bl	80094ec <lv_refr_get_disp_refreshing>
 800a604:	9012      	str	r0, [sp, #72]	; 0x48
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800a606:	f003 f821 	bl	800d64c <lv_disp_get_buf>
 800a60a:	2210      	movs	r2, #16
 800a60c:	5e83      	ldrsh	r3, [r0, r2]
 800a60e:	0007      	movs	r7, r0
 800a610:	469c      	mov	ip, r3
    return area_p->x2 - area_p->x1 + 1;
 800a612:	4662      	mov	r2, ip
 800a614:	8a83      	ldrh	r3, [r0, #20]
 800a616:	3301      	adds	r3, #1
 800a618:	1a9b      	subs	r3, r3, r2
 800a61a:	b21b      	sxth	r3, r3
 800a61c:	9310      	str	r3, [sp, #64]	; 0x40
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 800a61e:	6883      	ldr	r3, [r0, #8]
 800a620:	930d      	str	r3, [sp, #52]	; 0x34
    uint8_t width_byte_scr = g.box_w >> 3; /*Width in bytes (on the screen finally) (e.g. w = 11 -> 2 bytes wide)*/
 800a622:	78a0      	ldrb	r0, [r4, #2]
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
 800a624:	79a3      	ldrb	r3, [r4, #6]
 800a626:	0002      	movs	r2, r0
 800a628:	435a      	muls	r2, r3
 800a62a:	9213      	str	r2, [sp, #76]	; 0x4c
    lv_coord_t col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
 800a62c:	9a05      	ldr	r2, [sp, #20]
 800a62e:	2100      	movs	r1, #0
 800a630:	5e52      	ldrsh	r2, [r2, r1]
 800a632:	2100      	movs	r1, #0
 800a634:	4295      	cmp	r5, r2
 800a636:	da02      	bge.n	800a63e <lv_draw_letter+0x156>
 800a638:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a63a:	1a51      	subs	r1, r2, r1
 800a63c:	b289      	uxth	r1, r1
 800a63e:	b20a      	sxth	r2, r1
 800a640:	9208      	str	r2, [sp, #32]
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 800a642:	9a05      	ldr	r2, [sp, #20]
 800a644:	2404      	movs	r4, #4
 800a646:	5f12      	ldrsh	r2, [r2, r4]
 800a648:	182c      	adds	r4, r5, r0
 800a64a:	4294      	cmp	r4, r2
 800a64c:	dc5b      	bgt.n	800a706 <lv_draw_letter+0x21e>
 800a64e:	b202      	sxth	r2, r0
 800a650:	9209      	str	r2, [sp, #36]	; 0x24
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 800a652:	9a05      	ldr	r2, [sp, #20]
 800a654:	2002      	movs	r0, #2
 800a656:	5e12      	ldrsh	r2, [r2, r0]
 800a658:	2000      	movs	r0, #0
 800a65a:	4296      	cmp	r6, r2
 800a65c:	da02      	bge.n	800a664 <lv_draw_letter+0x17c>
 800a65e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a660:	1a12      	subs	r2, r2, r0
 800a662:	b290      	uxth	r0, r2
 800a664:	b202      	sxth	r2, r0
 800a666:	9207      	str	r2, [sp, #28]
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 800a668:	aa18      	add	r2, sp, #96	; 0x60
 800a66a:	78d0      	ldrb	r0, [r2, #3]
 800a66c:	9a05      	ldr	r2, [sp, #20]
 800a66e:	2406      	movs	r4, #6
 800a670:	5f12      	ldrsh	r2, [r2, r4]
 800a672:	1984      	adds	r4, r0, r6
 800a674:	4294      	cmp	r4, r2
 800a676:	dc4b      	bgt.n	800a710 <lv_draw_letter+0x228>
 800a678:	b202      	sxth	r2, r0
 800a67a:	9214      	str	r2, [sp, #80]	; 0x50
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 800a67c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800a67e:	9a07      	ldr	r2, [sp, #28]
 800a680:	9808      	ldr	r0, [sp, #32]
 800a682:	4354      	muls	r4, r2
 800a684:	9a08      	ldr	r2, [sp, #32]
 800a686:	4353      	muls	r3, r2
    map_p += bit_ofs >> 3;
 800a688:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 800a68a:	18e4      	adds	r4, r4, r3
    map_p += bit_ofs >> 3;
 800a68c:	08e3      	lsrs	r3, r4, #3
 800a68e:	18d3      	adds	r3, r2, r3
 800a690:	9305      	str	r3, [sp, #20]
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 800a692:	2307      	movs	r3, #7
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 800a694:	9a08      	ldr	r2, [sp, #32]
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 800a696:	401c      	ands	r4, r3
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 800a698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a69a:	1a9b      	subs	r3, r3, r2
 800a69c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a69e:	1ad3      	subs	r3, r2, r3
 800a6a0:	005b      	lsls	r3, r3, #1
 800a6a2:	930c      	str	r3, [sp, #48]	; 0x30
 800a6a4:	0003      	movs	r3, r0
 800a6a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	4283      	cmp	r3, r0
 800a6ac:	dc02      	bgt.n	800a6b4 <lv_draw_letter+0x1cc>
 800a6ae:	1a41      	subs	r1, r0, r1
 800a6b0:	b28a      	uxth	r2, r1
 800a6b2:	0052      	lsls	r2, r2, #1
 800a6b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6b6:	189b      	adds	r3, r3, r2
 800a6b8:	9315      	str	r3, [sp, #84]	; 0x54
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 800a6ba:	2212      	movs	r2, #18
 800a6bc:	5ebb      	ldrsh	r3, [r7, r2]
 800a6be:	1af6      	subs	r6, r6, r3
 800a6c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6c2:	435e      	muls	r6, r3
 800a6c4:	4663      	mov	r3, ip
 800a6c6:	1975      	adds	r5, r6, r5
 800a6c8:	1aed      	subs	r5, r5, r3
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 800a6ca:	9e07      	ldr	r6, [sp, #28]
 800a6cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6ce:	435e      	muls	r6, r3
 800a6d0:	9b08      	ldr	r3, [sp, #32]
 800a6d2:	18f6      	adds	r6, r6, r3
 800a6d4:	19ad      	adds	r5, r5, r6
 800a6d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6d8:	006d      	lsls	r5, r5, #1
 800a6da:	195b      	adds	r3, r3, r5
 800a6dc:	9313      	str	r3, [sp, #76]	; 0x4c
 800a6de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    for(row = row_start; row < row_end; row++) {
 800a6e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6e2:	930c      	str	r3, [sp, #48]	; 0x30
 800a6e4:	9b07      	ldr	r3, [sp, #28]
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	db17      	blt.n	800a71a <lv_draw_letter+0x232>
}
 800a6ea:	b01f      	add	sp, #124	; 0x7c
 800a6ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
            bitmask_init  = 0xF0;
 800a6ee:	23f0      	movs	r3, #240	; 0xf0
 800a6f0:	930b      	str	r3, [sp, #44]	; 0x2c
            bpp_opa_table = bpp4_opa_table;
 800a6f2:	ab1a      	add	r3, sp, #104	; 0x68
 800a6f4:	e73a      	b.n	800a56c <lv_draw_letter+0x84>
            bitmask_init  = 0xFF;
 800a6f6:	23ff      	movs	r3, #255	; 0xff
 800a6f8:	930b      	str	r3, [sp, #44]	; 0x2c
            bpp_opa_table = NULL;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	e736      	b.n	800a56c <lv_draw_letter+0x84>
            bitmask_init  = 0xC0;
 800a6fe:	23c0      	movs	r3, #192	; 0xc0
 800a700:	930b      	str	r3, [sp, #44]	; 0x2c
            bpp_opa_table = bpp2_opa_table;
 800a702:	ab17      	add	r3, sp, #92	; 0x5c
 800a704:	e732      	b.n	800a56c <lv_draw_letter+0x84>
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 800a706:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a708:	3201      	adds	r2, #1
 800a70a:	1a12      	subs	r2, r2, r0
 800a70c:	b212      	sxth	r2, r2
 800a70e:	e79f      	b.n	800a650 <lv_draw_letter+0x168>
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 800a710:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a712:	3201      	adds	r2, #1
 800a714:	1a12      	subs	r2, r2, r0
 800a716:	b212      	sxth	r2, r2
 800a718:	e7af      	b.n	800a67a <lv_draw_letter+0x192>
        bitmask = bitmask_init >> col_bit;
 800a71a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        for(col = col_start; col < col_end; col++) {
 800a71c:	9e08      	ldr	r6, [sp, #32]
        bitmask = bitmask_init >> col_bit;
 800a71e:	4123      	asrs	r3, r4
 800a720:	b2db      	uxtb	r3, r3
 800a722:	930d      	str	r3, [sp, #52]	; 0x34
        for(col = col_start; col < col_end; col++) {
 800a724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a726:	a918      	add	r1, sp, #96	; 0x60
 800a728:	429e      	cmp	r6, r3
 800a72a:	db16      	blt.n	800a75a <lv_draw_letter+0x272>
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
 800a72c:	788a      	ldrb	r2, [r1, #2]
 800a72e:	1ad2      	subs	r2, r2, r3
 800a730:	9b08      	ldr	r3, [sp, #32]
 800a732:	18d2      	adds	r2, r2, r3
 800a734:	798b      	ldrb	r3, [r1, #6]
 800a736:	4353      	muls	r3, r2
 800a738:	18e4      	adds	r4, r4, r3
        map_p += (col_bit >> 3);
 800a73a:	9a05      	ldr	r2, [sp, #20]
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
 800a73c:	b2a4      	uxth	r4, r4
        map_p += (col_bit >> 3);
 800a73e:	08e3      	lsrs	r3, r4, #3
 800a740:	18d3      	adds	r3, r2, r3
 800a742:	9305      	str	r3, [sp, #20]
        col_bit = col_bit & 0x7;
 800a744:	2307      	movs	r3, #7
 800a746:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a748:	401c      	ands	r4, r3
 800a74a:	4694      	mov	ip, r2
 800a74c:	9b07      	ldr	r3, [sp, #28]
 800a74e:	3301      	adds	r3, #1
 800a750:	b21b      	sxth	r3, r3
 800a752:	9307      	str	r3, [sp, #28]
 800a754:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a756:	4463      	add	r3, ip
 800a758:	e7c0      	b.n	800a6dc <lv_draw_letter+0x1f4>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - g.bpp);
 800a75a:	9b05      	ldr	r3, [sp, #20]
 800a75c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	7989      	ldrb	r1, [r1, #6]
 800a762:	4013      	ands	r3, r2
 800a764:	2208      	movs	r2, #8
 800a766:	1b12      	subs	r2, r2, r4
 800a768:	1a52      	subs	r2, r2, r1
 800a76a:	4113      	asrs	r3, r2
 800a76c:	b2da      	uxtb	r2, r3
            if(letter_px != 0) {
 800a76e:	2a00      	cmp	r2, #0
 800a770:	d022      	beq.n	800a7b8 <lv_draw_letter+0x2d0>
                if(opa == LV_OPA_COVER) {
 800a772:	9806      	ldr	r0, [sp, #24]
 800a774:	28ff      	cmp	r0, #255	; 0xff
 800a776:	d131      	bne.n	800a7dc <lv_draw_letter+0x2f4>
                    px_opa = g.bpp == 8 ? letter_px : bpp_opa_table[letter_px];
 800a778:	2908      	cmp	r1, #8
 800a77a:	d002      	beq.n	800a782 <lv_draw_letter+0x29a>
 800a77c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a77e:	4003      	ands	r3, r0
 800a780:	5cd2      	ldrb	r2, [r2, r3]
                if(disp->driver.set_px_cb) {
 800a782:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a784:	695b      	ldr	r3, [r3, #20]
 800a786:	1e1d      	subs	r5, r3, #0
 800a788:	d033      	beq.n	800a7f2 <lv_draw_letter+0x30a>
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 800a78a:	8a3b      	ldrh	r3, [r7, #16]
 800a78c:	990e      	ldr	r1, [sp, #56]	; 0x38
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 800a78e:	2046      	movs	r0, #70	; 0x46
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 800a790:	1acb      	subs	r3, r1, r3
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 800a792:	4669      	mov	r1, sp
 800a794:	9202      	str	r2, [sp, #8]
 800a796:	1809      	adds	r1, r1, r0
 800a798:	8809      	ldrh	r1, [r1, #0]
 800a79a:	aa01      	add	r2, sp, #4
 800a79c:	8011      	strh	r1, [r2, #0]
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 800a79e:	8a7a      	ldrh	r2, [r7, #18]
 800a7a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a7a2:	199b      	adds	r3, r3, r6
 800a7a4:	1a8a      	subs	r2, r1, r2
 800a7a6:	9907      	ldr	r1, [sp, #28]
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 800a7a8:	b21b      	sxth	r3, r3
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 800a7aa:	1852      	adds	r2, r2, r1
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 800a7ac:	b212      	sxth	r2, r2
 800a7ae:	9200      	str	r2, [sp, #0]
 800a7b0:	68b9      	ldr	r1, [r7, #8]
 800a7b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a7b4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a7b6:	47a8      	blx	r5
            if(col_bit < 8 - g.bpp) {
 800a7b8:	2208      	movs	r2, #8
            vdb_buf_tmp++;
 800a7ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7bc:	3302      	adds	r3, #2
 800a7be:	930c      	str	r3, [sp, #48]	; 0x30
            if(col_bit < 8 - g.bpp) {
 800a7c0:	ab18      	add	r3, sp, #96	; 0x60
 800a7c2:	799b      	ldrb	r3, [r3, #6]
 800a7c4:	1ad2      	subs	r2, r2, r3
 800a7c6:	4294      	cmp	r4, r2
 800a7c8:	da2e      	bge.n	800a828 <lv_draw_letter+0x340>
                bitmask = bitmask >> g.bpp;
 800a7ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
                col_bit += g.bpp;
 800a7cc:	18e4      	adds	r4, r4, r3
                bitmask = bitmask >> g.bpp;
 800a7ce:	411a      	asrs	r2, r3
 800a7d0:	b2d3      	uxtb	r3, r2
                col_bit += g.bpp;
 800a7d2:	b2a4      	uxth	r4, r4
                bitmask = bitmask >> g.bpp;
 800a7d4:	930d      	str	r3, [sp, #52]	; 0x34
 800a7d6:	3601      	adds	r6, #1
 800a7d8:	b236      	sxth	r6, r6
 800a7da:	e7a3      	b.n	800a724 <lv_draw_letter+0x23c>
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 800a7dc:	2908      	cmp	r1, #8
 800a7de:	d103      	bne.n	800a7e8 <lv_draw_letter+0x300>
 800a7e0:	9b06      	ldr	r3, [sp, #24]
 800a7e2:	435a      	muls	r2, r3
 800a7e4:	0a12      	lsrs	r2, r2, #8
 800a7e6:	e7cc      	b.n	800a782 <lv_draw_letter+0x29a>
                                        : (uint16_t)((uint16_t)bpp_opa_table[letter_px] * opa) >> 8;
 800a7e8:	22ff      	movs	r2, #255	; 0xff
 800a7ea:	4013      	ands	r3, r2
 800a7ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7ee:	5cd2      	ldrb	r2, [r2, r3]
 800a7f0:	e7f6      	b.n	800a7e0 <lv_draw_letter+0x2f8>
                } else if(vdb_buf_tmp->full != color.full) {
 800a7f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7f4:	2046      	movs	r0, #70	; 0x46
 800a7f6:	8819      	ldrh	r1, [r3, #0]
 800a7f8:	466b      	mov	r3, sp
 800a7fa:	181b      	adds	r3, r3, r0
 800a7fc:	881b      	ldrh	r3, [r3, #0]
 800a7fe:	4299      	cmp	r1, r3
 800a800:	d0da      	beq.n	800a7b8 <lv_draw_letter+0x2d0>
                    if(px_opa > LV_OPA_MAX)
 800a802:	2afb      	cmp	r2, #251	; 0xfb
 800a804:	d905      	bls.n	800a812 <lv_draw_letter+0x32a>
                        *vdb_buf_tmp = color;
 800a806:	466b      	mov	r3, sp
 800a808:	181b      	adds	r3, r3, r0
 800a80a:	881b      	ldrh	r3, [r3, #0]
 800a80c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a80e:	8013      	strh	r3, [r2, #0]
 800a810:	e7d2      	b.n	800a7b8 <lv_draw_letter+0x2d0>
                    else if(px_opa > LV_OPA_MIN) {
 800a812:	2a10      	cmp	r2, #16
 800a814:	d9d0      	bls.n	800a7b8 <lv_draw_letter+0x2d0>
                            *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
 800a816:	2046      	movs	r0, #70	; 0x46
 800a818:	466b      	mov	r3, sp
 800a81a:	181b      	adds	r3, r3, r0
 800a81c:	8818      	ldrh	r0, [r3, #0]
 800a81e:	f7ff fc7d 	bl	800a11c <lv_color_mix>
 800a822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a824:	8018      	strh	r0, [r3, #0]
 800a826:	e7c7      	b.n	800a7b8 <lv_draw_letter+0x2d0>
                map_p++;
 800a828:	9b05      	ldr	r3, [sp, #20]
                col_bit = 0;
 800a82a:	2400      	movs	r4, #0
                map_p++;
 800a82c:	3301      	adds	r3, #1
 800a82e:	9305      	str	r3, [sp, #20]
                bitmask = bitmask_init;
 800a830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a832:	930d      	str	r3, [sp, #52]	; 0x34
 800a834:	e7cf      	b.n	800a7d6 <lv_draw_letter+0x2ee>
 800a836:	46c0      	nop			; (mov r8, r8)
 800a838:	08012496 	.word	0x08012496

0800a83c <lv_img_color_format_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_color_format_get_px_size(lv_img_cf_t cf)
{
 800a83c:	1f03      	subs	r3, r0, #4
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	2000      	movs	r0, #0
 800a842:	2b0a      	cmp	r3, #10
 800a844:	d801      	bhi.n	800a84a <lv_img_color_format_get_px_size+0xe>
 800a846:	4a01      	ldr	r2, [pc, #4]	; (800a84c <lv_img_color_format_get_px_size+0x10>)
 800a848:	5cd0      	ldrb	r0, [r2, r3]
        case LV_IMG_CF_ALPHA_8BIT: px_size = 8; break;
        default: px_size = 0; break;
    }

    return px_size;
}
 800a84a:	4770      	bx	lr
 800a84c:	08012928 	.word	0x08012928

0800a850 <lv_img_src_get_type>:
 */
lv_img_src_t lv_img_src_get_type(const void * src)
{
    lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;

    if(src == NULL) return img_src_type;
 800a850:	2303      	movs	r3, #3
 800a852:	2800      	cmp	r0, #0
 800a854:	d007      	beq.n	800a866 <lv_img_src_get_type+0x16>
    const uint8_t * u8_p = src;

    /*The first byte shows the type of the image source*/
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800a856:	7802      	ldrb	r2, [r0, #0]
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 800a858:	3b02      	subs	r3, #2
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800a85a:	0011      	movs	r1, r2
 800a85c:	3920      	subs	r1, #32
 800a85e:	295f      	cmp	r1, #95	; 0x5f
 800a860:	d901      	bls.n	800a866 <lv_img_src_get_type+0x16>
    } else if(u8_p[0] >= 0x80) {
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
    } else {
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 800a862:	09d3      	lsrs	r3, r2, #7
 800a864:	005b      	lsls	r3, r3, #1
    if(LV_IMG_SRC_UNKNOWN == img_src_type) {
        LV_LOG_WARN("lv_img_src_get_type: unknown image type");
    }

    return img_src_type;
}
 800a866:	0018      	movs	r0, r3
 800a868:	4770      	bx	lr
	...

0800a86c <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 800a86c:	0003      	movs	r3, r0
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 800a86e:	3830      	subs	r0, #48	; 0x30
 800a870:	b2c0      	uxtb	r0, r0
 800a872:	2809      	cmp	r0, #9
 800a874:	d90a      	bls.n	800a88c <hex_char_to_num+0x20>
        result = hex - '0';
    } else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800a876:	2b60      	cmp	r3, #96	; 0x60
 800a878:	d901      	bls.n	800a87e <hex_char_to_num+0x12>
 800a87a:	3b20      	subs	r3, #32
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	3b41      	subs	r3, #65	; 0x41
 800a880:	b2db      	uxtb	r3, r3
 800a882:	2000      	movs	r0, #0
 800a884:	2b05      	cmp	r3, #5
 800a886:	d801      	bhi.n	800a88c <hex_char_to_num+0x20>
 800a888:	4a01      	ldr	r2, [pc, #4]	; (800a890 <hex_char_to_num+0x24>)
 800a88a:	5cd0      	ldrb	r0, [r2, r3]
            default: result = 0; break;
        }
    }

    return result;
}
 800a88c:	4770      	bx	lr
 800a88e:	46c0      	nop			; (mov r8, r8)
 800a890:	08012933 	.word	0x08012933

0800a894 <lv_draw_label>:
{
 800a894:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a896:	0017      	movs	r7, r2
 800a898:	b0ad      	sub	sp, #180	; 0xb4
 800a89a:	9312      	str	r3, [sp, #72]	; 0x48
 800a89c:	ab32      	add	r3, sp, #200	; 0xc8
 800a89e:	cb04      	ldmia	r3!, {r2}
 800a8a0:	9005      	str	r0, [sp, #20]
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	910c      	str	r1, [sp, #48]	; 0x30
 800a8a6:	9306      	str	r3, [sp, #24]
 800a8a8:	ab35      	add	r3, sp, #212	; 0xd4
 800a8aa:	881b      	ldrh	r3, [r3, #0]
 800a8ac:	9209      	str	r2, [sp, #36]	; 0x24
 800a8ae:	9313      	str	r3, [sp, #76]	; 0x4c
 800a8b0:	ab36      	add	r3, sp, #216	; 0xd8
 800a8b2:	881b      	ldrh	r3, [r3, #0]
 800a8b4:	9d37      	ldr	r5, [sp, #220]	; 0xdc
 800a8b6:	9314      	str	r3, [sp, #80]	; 0x50
    const lv_font_t * font = style->text.font;
 800a8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ba:	9308      	str	r3, [sp, #32]
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 800a8bc:	9b06      	ldr	r3, [sp, #24]
 800a8be:	079b      	lsls	r3, r3, #30
 800a8c0:	d500      	bpl.n	800a8c4 <lv_draw_label+0x30>
 800a8c2:	e092      	b.n	800a9ea <lv_draw_label+0x156>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 800a8c4:	8883      	ldrh	r3, [r0, #4]
 800a8c6:	8802      	ldrh	r2, [r0, #0]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	1a9b      	subs	r3, r3, r2
 800a8cc:	b21b      	sxth	r3, r3
        w = p.x;
 800a8ce:	930a      	str	r3, [sp, #40]	; 0x28
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 800a8d0:	9b08      	ldr	r3, [sp, #32]
 800a8d2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800a8d4:	7a1b      	ldrb	r3, [r3, #8]
 800a8d6:	189b      	adds	r3, r3, r2
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8dc:	466b      	mov	r3, sp
 800a8de:	222c      	movs	r2, #44	; 0x2c
 800a8e0:	5e9b      	ldrsh	r3, [r3, r2]
    pos.x = coords->x1;
 800a8e2:	9a05      	ldr	r2, [sp, #20]
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 800a8e4:	930d      	str	r3, [sp, #52]	; 0x34
    pos.x = coords->x1;
 800a8e6:	8812      	ldrh	r2, [r2, #0]
 800a8e8:	ab19      	add	r3, sp, #100	; 0x64
 800a8ea:	801a      	strh	r2, [r3, #0]
    pos.y = coords->y1;
 800a8ec:	9a05      	ldr	r2, [sp, #20]
 800a8ee:	2102      	movs	r1, #2
 800a8f0:	5e52      	ldrsh	r2, [r2, r1]
    if(offset != NULL) {
 800a8f2:	9934      	ldr	r1, [sp, #208]	; 0xd0
    pos.y = coords->y1;
 800a8f4:	805a      	strh	r2, [r3, #2]
    if(offset != NULL) {
 800a8f6:	2900      	cmp	r1, #0
 800a8f8:	d100      	bne.n	800a8fc <lv_draw_label+0x68>
 800a8fa:	e1f0      	b.n	800acde <lv_draw_label+0x44a>
        x_ofs = offset->x;
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	5e09      	ldrsh	r1, [r1, r0]
    uint32_t line_start     = 0;
 800a900:	002c      	movs	r4, r5
        x_ofs = offset->x;
 800a902:	910f      	str	r1, [sp, #60]	; 0x3c
        y_ofs = offset->y;
 800a904:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800a906:	2002      	movs	r0, #2
 800a908:	5e09      	ldrsh	r1, [r1, r0]
        pos.y += y_ofs;
 800a90a:	1850      	adds	r0, r2, r1
 800a90c:	8058      	strh	r0, [r3, #2]
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800a90e:	2d00      	cmp	r5, #0
 800a910:	d01e      	beq.n	800a950 <lv_draw_label+0xbc>
 800a912:	2900      	cmp	r1, #0
 800a914:	d000      	beq.n	800a918 <lv_draw_label+0x84>
 800a916:	e1e8      	b.n	800acea <lv_draw_label+0x456>
 800a918:	2a00      	cmp	r2, #0
 800a91a:	db00      	blt.n	800a91e <lv_draw_label+0x8a>
 800a91c:	e1e5      	b.n	800acea <lv_draw_label+0x456>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 800a91e:	68ab      	ldr	r3, [r5, #8]
 800a920:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a922:	1a9a      	subs	r2, r3, r2
 800a924:	17d3      	asrs	r3, r2, #31
 800a926:	18d2      	adds	r2, r2, r3
 800a928:	405a      	eors	r2, r3
 800a92a:	2380      	movs	r3, #128	; 0x80
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	1a5b      	subs	r3, r3, r1
 800a930:	005b      	lsls	r3, r3, #1
 800a932:	429a      	cmp	r2, r3
 800a934:	dd02      	ble.n	800a93c <lv_draw_label+0xa8>
            hint->line_start = -1;
 800a936:	2301      	movs	r3, #1
 800a938:	425b      	negs	r3, r3
 800a93a:	602b      	str	r3, [r5, #0]
    uint32_t line_start     = 0;
 800a93c:	2400      	movs	r4, #0
        last_line_start = hint->line_start;
 800a93e:	682b      	ldr	r3, [r5, #0]
    if(hint && last_line_start >= 0) {
 800a940:	42a3      	cmp	r3, r4
 800a942:	db05      	blt.n	800a950 <lv_draw_label+0xbc>
        pos.y += hint->y;
 800a944:	aa19      	add	r2, sp, #100	; 0x64
        line_start = last_line_start;
 800a946:	001c      	movs	r4, r3
        pos.y += hint->y;
 800a948:	6869      	ldr	r1, [r5, #4]
 800a94a:	8853      	ldrh	r3, [r2, #2]
 800a94c:	18cb      	adds	r3, r1, r3
 800a94e:	8053      	strh	r3, [r2, #2]
    uint32_t line_end = line_start + lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800a950:	2328      	movs	r3, #40	; 0x28
 800a952:	5efa      	ldrsh	r2, [r7, r3]
 800a954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a956:	9908      	ldr	r1, [sp, #32]
 800a958:	1918      	adds	r0, r3, r4
 800a95a:	9b06      	ldr	r3, [sp, #24]
 800a95c:	9300      	str	r3, [sp, #0]
 800a95e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a960:	f003 fe1c 	bl	800e59c <lv_txt_get_next_line>
 800a964:	1903      	adds	r3, r0, r4
 800a966:	9307      	str	r3, [sp, #28]
    while(pos.y + line_height < mask->y1) {
 800a968:	ae19      	add	r6, sp, #100	; 0x64
 800a96a:	2202      	movs	r2, #2
 800a96c:	5eb3      	ldrsh	r3, [r6, r2]
 800a96e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a970:	189b      	adds	r3, r3, r2
 800a972:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a974:	2102      	movs	r1, #2
 800a976:	5e52      	ldrsh	r2, [r2, r1]
 800a978:	4293      	cmp	r3, r2
 800a97a:	db48      	blt.n	800aa0e <lv_draw_label+0x17a>
 800a97c:	2304      	movs	r3, #4
 800a97e:	9a06      	ldr	r2, [sp, #24]
 800a980:	401a      	ands	r2, r3
 800a982:	9211      	str	r2, [sp, #68]	; 0x44
    if(flag & LV_TXT_FLAG_CENTER) {
 800a984:	d100      	bne.n	800a988 <lv_draw_label+0xf4>
 800a986:	e06e      	b.n	800aa66 <lv_draw_label+0x1d2>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 800a988:	2228      	movs	r2, #40	; 0x28
 800a98a:	5ebb      	ldrsh	r3, [r7, r2]
 800a98c:	9a07      	ldr	r2, [sp, #28]
 800a98e:	1b11      	subs	r1, r2, r4
 800a990:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a992:	b289      	uxth	r1, r1
 800a994:	1910      	adds	r0, r2, r4
 800a996:	9a06      	ldr	r2, [sp, #24]
 800a998:	9200      	str	r2, [sp, #0]
 800a99a:	9a08      	ldr	r2, [sp, #32]
 800a99c:	f003 fe84 	bl	800e6a8 <lv_txt_get_width>
 800a9a0:	9b05      	ldr	r3, [sp, #20]
 800a9a2:	9a05      	ldr	r2, [sp, #20]
 800a9a4:	889b      	ldrh	r3, [r3, #4]
 800a9a6:	8812      	ldrh	r2, [r2, #0]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800a9ac:	b21b      	sxth	r3, r3
 800a9ae:	1a18      	subs	r0, r3, r0
 800a9b0:	0fc3      	lsrs	r3, r0, #31
 800a9b2:	1818      	adds	r0, r3, r0
 800a9b4:	1040      	asrs	r0, r0, #1
        pos.x += lv_area_get_width(coords) - line_width;
 800a9b6:	8833      	ldrh	r3, [r6, #0]
 800a9b8:	18c0      	adds	r0, r0, r3
 800a9ba:	8030      	strh	r0, [r6, #0]
 800a9bc:	003b      	movs	r3, r7
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 800a9be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a9c0:	332c      	adds	r3, #44	; 0x2c
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	2aff      	cmp	r2, #255	; 0xff
 800a9c6:	d166      	bne.n	800aa96 <lv_draw_label+0x202>
    lv_style_copy(&sel_style, &lv_style_plain_color);
 800a9c8:	ad1d      	add	r5, sp, #116	; 0x74
 800a9ca:	49ca      	ldr	r1, [pc, #808]	; (800acf4 <lv_draw_label+0x460>)
 800a9cc:	0028      	movs	r0, r5
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 800a9ce:	930e      	str	r3, [sp, #56]	; 0x38
    lv_style_copy(&sel_style, &lv_style_plain_color);
 800a9d0:	f7fe ff5a 	bl	8009888 <lv_style_copy>
    sel_style.body.main_color = sel_style.body.grad_color = style->text.sel_color;
 800a9d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a9d6:	80ab      	strh	r3, [r5, #4]
 800a9d8:	806b      	strh	r3, [r5, #2]
    uint16_t par_start = 0;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	930d      	str	r3, [sp, #52]	; 0x34
    while(txt[line_start] != '\0') {
 800a9de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9e0:	5d1b      	ldrb	r3, [r3, r4]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d15b      	bne.n	800aa9e <lv_draw_label+0x20a>
}
 800a9e6:	b02d      	add	sp, #180	; 0xb4
 800a9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_txt_get_size(&p, txt, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX,
 800a9ea:	2228      	movs	r2, #40	; 0x28
 800a9ec:	5ebb      	ldrsh	r3, [r7, r2]
 800a9ee:	9a06      	ldr	r2, [sp, #24]
 800a9f0:	ac1d      	add	r4, sp, #116	; 0x74
 800a9f2:	9202      	str	r2, [sp, #8]
 800a9f4:	4ac0      	ldr	r2, [pc, #768]	; (800acf8 <lv_draw_label+0x464>)
 800a9f6:	0020      	movs	r0, r4
 800a9f8:	9201      	str	r2, [sp, #4]
 800a9fa:	212a      	movs	r1, #42	; 0x2a
 800a9fc:	5e7a      	ldrsh	r2, [r7, r1]
 800a9fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa00:	9200      	str	r2, [sp, #0]
 800aa02:	9a08      	ldr	r2, [sp, #32]
 800aa04:	f003 fe9a 	bl	800e73c <lv_txt_get_size>
        w = p.x;
 800aa08:	2200      	movs	r2, #0
 800aa0a:	5ea3      	ldrsh	r3, [r4, r2]
 800aa0c:	e75f      	b.n	800a8ce <lv_draw_label+0x3a>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800aa0e:	9a07      	ldr	r2, [sp, #28]
 800aa10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa12:	4694      	mov	ip, r2
 800aa14:	4463      	add	r3, ip
 800aa16:	930e      	str	r3, [sp, #56]	; 0x38
 800aa18:	2328      	movs	r3, #40	; 0x28
 800aa1a:	5efa      	ldrsh	r2, [r7, r3]
 800aa1c:	9b06      	ldr	r3, [sp, #24]
 800aa1e:	9908      	ldr	r1, [sp, #32]
 800aa20:	9300      	str	r3, [sp, #0]
 800aa22:	980e      	ldr	r0, [sp, #56]	; 0x38
 800aa24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa26:	f003 fdb9 	bl	800e59c <lv_txt_get_next_line>
 800aa2a:	9b07      	ldr	r3, [sp, #28]
        pos.y += line_height;
 800aa2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800aa2e:	18c0      	adds	r0, r0, r3
        pos.y += line_height;
 800aa30:	8873      	ldrh	r3, [r6, #2]
 800aa32:	18d3      	adds	r3, r2, r3
 800aa34:	b21b      	sxth	r3, r3
 800aa36:	8073      	strh	r3, [r6, #2]
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 800aa38:	2d00      	cmp	r5, #0
 800aa3a:	d00d      	beq.n	800aa58 <lv_draw_label+0x1c4>
 800aa3c:	4aaf      	ldr	r2, [pc, #700]	; (800acfc <lv_draw_label+0x468>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	db0a      	blt.n	800aa58 <lv_draw_label+0x1c4>
 800aa42:	682a      	ldr	r2, [r5, #0]
 800aa44:	2a00      	cmp	r2, #0
 800aa46:	da07      	bge.n	800aa58 <lv_draw_label+0x1c4>
            hint->line_start = line_start;
 800aa48:	9a07      	ldr	r2, [sp, #28]
 800aa4a:	602a      	str	r2, [r5, #0]
            hint->y          = pos.y - coords->y1;
 800aa4c:	9a05      	ldr	r2, [sp, #20]
 800aa4e:	2102      	movs	r1, #2
 800aa50:	5e52      	ldrsh	r2, [r2, r1]
 800aa52:	1a9b      	subs	r3, r3, r2
 800aa54:	606b      	str	r3, [r5, #4]
            hint->coord_y    = coords->y1;
 800aa56:	60aa      	str	r2, [r5, #8]
        if(txt[line_start] == '\0') return;
 800aa58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa5a:	9c07      	ldr	r4, [sp, #28]
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d0c1      	beq.n	800a9e6 <lv_draw_label+0x152>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800aa62:	9007      	str	r0, [sp, #28]
 800aa64:	e780      	b.n	800a968 <lv_draw_label+0xd4>
    else if(flag & LV_TXT_FLAG_RIGHT) {
 800aa66:	9b06      	ldr	r3, [sp, #24]
 800aa68:	071b      	lsls	r3, r3, #28
 800aa6a:	d5a7      	bpl.n	800a9bc <lv_draw_label+0x128>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 800aa6c:	2228      	movs	r2, #40	; 0x28
 800aa6e:	5ebb      	ldrsh	r3, [r7, r2]
 800aa70:	9a07      	ldr	r2, [sp, #28]
 800aa72:	1b11      	subs	r1, r2, r4
 800aa74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa76:	b289      	uxth	r1, r1
 800aa78:	1910      	adds	r0, r2, r4
 800aa7a:	9a06      	ldr	r2, [sp, #24]
 800aa7c:	9200      	str	r2, [sp, #0]
 800aa7e:	9a08      	ldr	r2, [sp, #32]
 800aa80:	f003 fe12 	bl	800e6a8 <lv_txt_get_width>
 800aa84:	9b05      	ldr	r3, [sp, #20]
 800aa86:	9a05      	ldr	r2, [sp, #20]
 800aa88:	889b      	ldrh	r3, [r3, #4]
 800aa8a:	8812      	ldrh	r2, [r2, #0]
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 800aa90:	b21b      	sxth	r3, r3
 800aa92:	1a18      	subs	r0, r3, r0
 800aa94:	e78f      	b.n	800a9b6 <lv_draw_label+0x122>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 800aa96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa98:	4353      	muls	r3, r2
 800aa9a:	0a1b      	lsrs	r3, r3, #8
 800aa9c:	e794      	b.n	800a9c8 <lv_draw_label+0x134>
        if(offset != NULL) {
 800aa9e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d004      	beq.n	800aaae <lv_draw_label+0x21a>
            pos.x += x_ofs;
 800aaa4:	aa19      	add	r2, sp, #100	; 0x64
 800aaa6:	8813      	ldrh	r3, [r2, #0]
 800aaa8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800aaaa:	185b      	adds	r3, r3, r1
 800aaac:	8013      	strh	r3, [r2, #0]
        i         = line_start;
 800aaae:	941a      	str	r4, [sp, #104]	; 0x68
                        cmd_state = CMD_STATE_WAIT;
 800aab0:	2400      	movs	r4, #0
 800aab2:	e019      	b.n	800aae8 <lv_draw_label+0x254>
            letter      = lv_txt_encoded_next(txt, &i);
 800aab4:	4d92      	ldr	r5, [pc, #584]	; (800ad00 <lv_draw_label+0x46c>)
 800aab6:	a91a      	add	r1, sp, #104	; 0x68
 800aab8:	682b      	ldr	r3, [r5, #0]
 800aaba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aabc:	4798      	blx	r3
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800aabe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aac0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aac2:	2100      	movs	r1, #0
            letter      = lv_txt_encoded_next(txt, &i);
 800aac4:	0006      	movs	r6, r0
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800aac6:	1898      	adds	r0, r3, r2
 800aac8:	682b      	ldr	r3, [r5, #0]
 800aaca:	4798      	blx	r3
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800aacc:	2101      	movs	r1, #1
 800aace:	9b06      	ldr	r3, [sp, #24]
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800aad0:	0002      	movs	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800aad2:	420b      	tst	r3, r1
 800aad4:	d100      	bne.n	800aad8 <lv_draw_label+0x244>
 800aad6:	e09b      	b.n	800ac10 <lv_draw_label+0x37c>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800aad8:	2e23      	cmp	r6, #35	; 0x23
 800aada:	d150      	bne.n	800ab7e <lv_draw_label+0x2ea>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800aadc:	2c00      	cmp	r4, #0
 800aade:	d143      	bne.n	800ab68 <lv_draw_label+0x2d4>
                        cmd_state = CMD_STATE_PAR;
 800aae0:	000c      	movs	r4, r1
                        par_start = i;
 800aae2:	ab14      	add	r3, sp, #80	; 0x50
 800aae4:	8b1b      	ldrh	r3, [r3, #24]
 800aae6:	930d      	str	r3, [sp, #52]	; 0x34
        while(i < line_end) {
 800aae8:	9b07      	ldr	r3, [sp, #28]
 800aaea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d8e1      	bhi.n	800aab4 <lv_draw_label+0x220>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800aaf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaf2:	9a07      	ldr	r2, [sp, #28]
 800aaf4:	9908      	ldr	r1, [sp, #32]
 800aaf6:	189d      	adds	r5, r3, r2
 800aaf8:	2328      	movs	r3, #40	; 0x28
 800aafa:	5efa      	ldrsh	r2, [r7, r3]
 800aafc:	9b06      	ldr	r3, [sp, #24]
 800aafe:	0028      	movs	r0, r5
 800ab00:	9300      	str	r3, [sp, #0]
 800ab02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab04:	f003 fd4a 	bl	800e59c <lv_txt_get_next_line>
 800ab08:	9b07      	ldr	r3, [sp, #28]
        pos.x = coords->x1;
 800ab0a:	ac19      	add	r4, sp, #100	; 0x64
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800ab0c:	18c6      	adds	r6, r0, r3
        pos.x = coords->x1;
 800ab0e:	9b05      	ldr	r3, [sp, #20]
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800ab10:	0001      	movs	r1, r0
        pos.x = coords->x1;
 800ab12:	881b      	ldrh	r3, [r3, #0]
 800ab14:	8023      	strh	r3, [r4, #0]
        if(flag & LV_TXT_FLAG_CENTER) {
 800ab16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d100      	bne.n	800ab1e <lv_draw_label+0x28a>
 800ab1c:	e0ca      	b.n	800acb4 <lv_draw_label+0x420>
            line_width =
 800ab1e:	2228      	movs	r2, #40	; 0x28
 800ab20:	5ebb      	ldrsh	r3, [r7, r2]
 800ab22:	9a06      	ldr	r2, [sp, #24]
 800ab24:	0028      	movs	r0, r5
 800ab26:	9200      	str	r2, [sp, #0]
 800ab28:	9a08      	ldr	r2, [sp, #32]
 800ab2a:	f003 fdbd 	bl	800e6a8 <lv_txt_get_width>
 800ab2e:	9b05      	ldr	r3, [sp, #20]
 800ab30:	9a05      	ldr	r2, [sp, #20]
 800ab32:	889b      	ldrh	r3, [r3, #4]
 800ab34:	8812      	ldrh	r2, [r2, #0]
 800ab36:	3301      	adds	r3, #1
 800ab38:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800ab3a:	b21b      	sxth	r3, r3
 800ab3c:	1a18      	subs	r0, r3, r0
 800ab3e:	0fc3      	lsrs	r3, r0, #31
 800ab40:	1818      	adds	r0, r3, r0
 800ab42:	1040      	asrs	r0, r0, #1
            pos.x += lv_area_get_width(coords) - line_width;
 800ab44:	8823      	ldrh	r3, [r4, #0]
 800ab46:	18c0      	adds	r0, r0, r3
 800ab48:	8020      	strh	r0, [r4, #0]
        pos.y += line_height;
 800ab4a:	aa19      	add	r2, sp, #100	; 0x64
 800ab4c:	8853      	ldrh	r3, [r2, #2]
 800ab4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab50:	9c07      	ldr	r4, [sp, #28]
 800ab52:	18cb      	adds	r3, r1, r3
 800ab54:	b21b      	sxth	r3, r3
 800ab56:	8053      	strh	r3, [r2, #2]
        if(pos.y > mask->y2) return;
 800ab58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab5a:	2106      	movs	r1, #6
 800ab5c:	5e52      	ldrsh	r2, [r2, r1]
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	da00      	bge.n	800ab64 <lv_draw_label+0x2d0>
 800ab62:	e740      	b.n	800a9e6 <lv_draw_label+0x152>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800ab64:	9607      	str	r6, [sp, #28]
 800ab66:	e73a      	b.n	800a9de <lv_draw_label+0x14a>
                    } else if(cmd_state == CMD_STATE_PAR) { /*Other start char in parameter escaped cmd. char */
 800ab68:	2c01      	cmp	r4, #1
 800ab6a:	d100      	bne.n	800ab6e <lv_draw_label+0x2da>
 800ab6c:	e0bf      	b.n	800acee <lv_draw_label+0x45a>
                    } else if(cmd_state == CMD_STATE_IN) { /*Command end */
 800ab6e:	2c02      	cmp	r4, #2
 800ab70:	d09e      	beq.n	800aab0 <lv_draw_label+0x21c>
            lv_color_t color = style->text.color;
 800ab72:	4669      	mov	r1, sp
 800ab74:	2048      	movs	r0, #72	; 0x48
 800ab76:	8c3b      	ldrh	r3, [r7, #32]
 800ab78:	1809      	adds	r1, r1, r0
 800ab7a:	800b      	strh	r3, [r1, #0]
 800ab7c:	e052      	b.n	800ac24 <lv_draw_label+0x390>
                if(cmd_state == CMD_STATE_PAR) {
 800ab7e:	2c01      	cmp	r4, #1
 800ab80:	d146      	bne.n	800ac10 <lv_draw_label+0x37c>
                    if(letter == ' ') {
 800ab82:	2e20      	cmp	r6, #32
 800ab84:	d1b0      	bne.n	800aae8 <lv_draw_label+0x254>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800ab86:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ab88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab8a:	1a9b      	subs	r3, r3, r2
 800ab8c:	2b07      	cmp	r3, #7
 800ab8e:	d13d      	bne.n	800ac0c <lv_draw_label+0x378>
                            memcpy(buf, &txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800ab90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab92:	ae1b      	add	r6, sp, #108	; 0x6c
 800ab94:	1899      	adds	r1, r3, r2
 800ab96:	0030      	movs	r0, r6
 800ab98:	2206      	movs	r2, #6
 800ab9a:	f004 fed3 	bl	800f944 <memcpy>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800ab9e:	7830      	ldrb	r0, [r6, #0]
 800aba0:	f7ff fe64 	bl	800a86c <hex_char_to_num>
 800aba4:	0004      	movs	r4, r0
 800aba6:	7870      	ldrb	r0, [r6, #1]
 800aba8:	f7ff fe60 	bl	800a86c <hex_char_to_num>
 800abac:	0124      	lsls	r4, r4, #4
 800abae:	1824      	adds	r4, r4, r0
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800abb0:	78b0      	ldrb	r0, [r6, #2]
 800abb2:	f7ff fe5b 	bl	800a86c <hex_char_to_num>
 800abb6:	0005      	movs	r5, r0
 800abb8:	78f0      	ldrb	r0, [r6, #3]
 800abba:	f7ff fe57 	bl	800a86c <hex_char_to_num>
 800abbe:	012d      	lsls	r5, r5, #4
 800abc0:	182d      	adds	r5, r5, r0
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800abc2:	7930      	ldrb	r0, [r6, #4]
 800abc4:	f7ff fe52 	bl	800a86c <hex_char_to_num>
 800abc8:	9010      	str	r0, [sp, #64]	; 0x40
 800abca:	7970      	ldrb	r0, [r6, #5]
 800abcc:	f7ff fe4e 	bl	800a86c <hex_char_to_num>
 800abd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abd2:	2258      	movs	r2, #88	; 0x58
 800abd4:	011e      	lsls	r6, r3, #4
 800abd6:	1836      	adds	r6, r6, r0
 800abd8:	08f6      	lsrs	r6, r6, #3
 800abda:	231f      	movs	r3, #31
 800abdc:	0030      	movs	r0, r6
 800abde:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800abe0:	4018      	ands	r0, r3
 800abe2:	439e      	bics	r6, r3
 800abe4:	466b      	mov	r3, sp
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{b8 >> 3, g8 >> 2, r8 >> 3}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
    lv_color_t color;
    color.ch.blue  = (uint16_t)(b8 >> 3);
    color.ch.green = (uint16_t)(g8 >> 2);
 800abe6:	b2ed      	uxtb	r5, r5
 800abe8:	08ad      	lsrs	r5, r5, #2
 800abea:	4306      	orrs	r6, r0
 800abec:	0168      	lsls	r0, r5, #5
 800abee:	4d45      	ldr	r5, [pc, #276]	; (800ad04 <lv_draw_label+0x470>)
    color.ch.red   = (uint16_t)(r8 >> 3);
 800abf0:	b2e4      	uxtb	r4, r4
 800abf2:	4035      	ands	r5, r6
 800abf4:	4305      	orrs	r5, r0
 800abf6:	08e4      	lsrs	r4, r4, #3
 800abf8:	02e0      	lsls	r0, r4, #11
 800abfa:	056c      	lsls	r4, r5, #21
 800abfc:	0d64      	lsrs	r4, r4, #21
 800abfe:	4304      	orrs	r4, r0
 800ac00:	189b      	adds	r3, r3, r2
 800ac02:	801c      	strh	r4, [r3, #0]
 800ac04:	b2a3      	uxth	r3, r4
                            recolor.full = style->text.color.full;
 800ac06:	9310      	str	r3, [sp, #64]	; 0x40
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800ac08:	2402      	movs	r4, #2
 800ac0a:	e76d      	b.n	800aae8 <lv_draw_label+0x254>
                            recolor.full = style->text.color.full;
 800ac0c:	8c3b      	ldrh	r3, [r7, #32]
 800ac0e:	e7fa      	b.n	800ac06 <lv_draw_label+0x372>
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800ac10:	2140      	movs	r1, #64	; 0x40
 800ac12:	466b      	mov	r3, sp
 800ac14:	2048      	movs	r0, #72	; 0x48
 800ac16:	185b      	adds	r3, r3, r1
 800ac18:	4669      	mov	r1, sp
 800ac1a:	881b      	ldrh	r3, [r3, #0]
 800ac1c:	1809      	adds	r1, r1, r0
 800ac1e:	800b      	strh	r3, [r1, #0]
 800ac20:	2c02      	cmp	r4, #2
 800ac22:	d1a6      	bne.n	800ab72 <lv_draw_label+0x2de>
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800ac24:	0031      	movs	r1, r6
 800ac26:	9808      	ldr	r0, [sp, #32]
 800ac28:	f002 fb2e 	bl	800d288 <lv_font_get_glyph_width>
 800ac2c:	b203      	sxth	r3, r0
 800ac2e:	9315      	str	r3, [sp, #84]	; 0x54
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800ac30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ac32:	4b35      	ldr	r3, [pc, #212]	; (800ad08 <lv_draw_label+0x474>)
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800ac34:	0005      	movs	r5, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d023      	beq.n	800ac82 <lv_draw_label+0x3ee>
 800ac3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d020      	beq.n	800ac82 <lv_draw_label+0x3ee>
                int char_ind = lv_encoded_get_char_id(txt, i);
 800ac40:	4b32      	ldr	r3, [pc, #200]	; (800ad0c <lv_draw_label+0x478>)
 800ac42:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac48:	4798      	blx	r3
                if(char_ind > sel_start && char_ind <= sel_end) {
 800ac4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac4c:	4298      	cmp	r0, r3
 800ac4e:	dd18      	ble.n	800ac82 <lv_draw_label+0x3ee>
 800ac50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac52:	4298      	cmp	r0, r3
 800ac54:	dc15      	bgt.n	800ac82 <lv_draw_label+0x3ee>
                    sel_coords.x1 = pos.x;
 800ac56:	ab19      	add	r3, sp, #100	; 0x64
 800ac58:	2200      	movs	r2, #0
 800ac5a:	5e99      	ldrsh	r1, [r3, r2]
 800ac5c:	a81b      	add	r0, sp, #108	; 0x6c
 800ac5e:	8001      	strh	r1, [r0, #0]
                    sel_coords.y1 = pos.y;
 800ac60:	2202      	movs	r2, #2
 800ac62:	5e9b      	ldrsh	r3, [r3, r2]
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 800ac64:	3901      	subs	r1, #1
                    sel_coords.y1 = pos.y;
 800ac66:	8043      	strh	r3, [r0, #2]
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 800ac68:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
                    sel_coords.y2 = pos.y + line_height - 1;
 800ac6a:	3b01      	subs	r3, #1
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 800ac6c:	1852      	adds	r2, r2, r1
 800ac6e:	18aa      	adds	r2, r5, r2
 800ac70:	8082      	strh	r2, [r0, #4]
                    sel_coords.y2 = pos.y + line_height - 1;
 800ac72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 800ac74:	990c      	ldr	r1, [sp, #48]	; 0x30
                    sel_coords.y2 = pos.y + line_height - 1;
 800ac76:	18d3      	adds	r3, r2, r3
 800ac78:	80c3      	strh	r3, [r0, #6]
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 800ac7a:	aa1d      	add	r2, sp, #116	; 0x74
 800ac7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac7e:	f000 f8af 	bl	800ade0 <lv_draw_rect>
            lv_draw_letter(&pos, mask, font, letter, color, opa);
 800ac82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac84:	2148      	movs	r1, #72	; 0x48
 800ac86:	9301      	str	r3, [sp, #4]
 800ac88:	466b      	mov	r3, sp
 800ac8a:	185a      	adds	r2, r3, r1
 800ac8c:	8812      	ldrh	r2, [r2, #0]
 800ac8e:	a819      	add	r0, sp, #100	; 0x64
 800ac90:	801a      	strh	r2, [r3, #0]
 800ac92:	9a08      	ldr	r2, [sp, #32]
 800ac94:	0033      	movs	r3, r6
 800ac96:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ac98:	f7ff fc26 	bl	800a4e8 <lv_draw_letter>
            if(letter_w > 0) {
 800ac9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	dc00      	bgt.n	800aca4 <lv_draw_label+0x410>
 800aca2:	e721      	b.n	800aae8 <lv_draw_label+0x254>
                pos.x += letter_w + style->text.letter_space;
 800aca4:	ab14      	add	r3, sp, #80	; 0x50
 800aca6:	8a9b      	ldrh	r3, [r3, #20]
 800aca8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800acaa:	189b      	adds	r3, r3, r2
 800acac:	18ed      	adds	r5, r5, r3
 800acae:	ab14      	add	r3, sp, #80	; 0x50
 800acb0:	829d      	strh	r5, [r3, #20]
 800acb2:	e719      	b.n	800aae8 <lv_draw_label+0x254>
        else if(flag & LV_TXT_FLAG_RIGHT) {
 800acb4:	9b06      	ldr	r3, [sp, #24]
 800acb6:	071b      	lsls	r3, r3, #28
 800acb8:	d400      	bmi.n	800acbc <lv_draw_label+0x428>
 800acba:	e746      	b.n	800ab4a <lv_draw_label+0x2b6>
            line_width =
 800acbc:	2228      	movs	r2, #40	; 0x28
 800acbe:	5ebb      	ldrsh	r3, [r7, r2]
 800acc0:	9a06      	ldr	r2, [sp, #24]
 800acc2:	0028      	movs	r0, r5
 800acc4:	9200      	str	r2, [sp, #0]
 800acc6:	9a08      	ldr	r2, [sp, #32]
 800acc8:	f003 fcee 	bl	800e6a8 <lv_txt_get_width>
 800accc:	9b05      	ldr	r3, [sp, #20]
 800acce:	9a05      	ldr	r2, [sp, #20]
 800acd0:	889b      	ldrh	r3, [r3, #4]
 800acd2:	8812      	ldrh	r2, [r2, #0]
 800acd4:	3301      	adds	r3, #1
 800acd6:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 800acd8:	b21b      	sxth	r3, r3
 800acda:	1a18      	subs	r0, r3, r0
 800acdc:	e732      	b.n	800ab44 <lv_draw_label+0x2b0>
    lv_coord_t x_ofs = 0;
 800acde:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800ace0:	930f      	str	r3, [sp, #60]	; 0x3c
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800ace2:	2d00      	cmp	r5, #0
 800ace4:	d000      	beq.n	800ace8 <lv_draw_label+0x454>
 800ace6:	e617      	b.n	800a918 <lv_draw_label+0x84>
    lv_coord_t x_ofs = 0;
 800ace8:	950f      	str	r5, [sp, #60]	; 0x3c
    uint32_t line_start     = 0;
 800acea:	2400      	movs	r4, #0
 800acec:	e630      	b.n	800a950 <lv_draw_label+0xbc>
                        cmd_state = CMD_STATE_WAIT;
 800acee:	2400      	movs	r4, #0
 800acf0:	e73f      	b.n	800ab72 <lv_draw_label+0x2de>
 800acf2:	46c0      	nop			; (mov r8, r8)
 800acf4:	20005470 	.word	0x20005470
 800acf8:	00007c18 	.word	0x00007c18
 800acfc:	fffffc00 	.word	0xfffffc00
 800ad00:	20000048 	.word	0x20000048
 800ad04:	fffff81f 	.word	0xfffff81f
 800ad08:	0000ffff 	.word	0x0000ffff
 800ad0c:	20000040 	.word	0x20000040

0800ad10 <lv_color_mix>:
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800ad10:	23ff      	movs	r3, #255	; 0xff
{
 800ad12:	b5f0      	push	{r4, r5, r6, r7, lr}
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800ad14:	261f      	movs	r6, #31
 800ad16:	b297      	uxth	r7, r2
 800ad18:	0404      	lsls	r4, r0, #16
 800ad1a:	1a9a      	subs	r2, r3, r2
 800ad1c:	040b      	lsls	r3, r1, #16
 800ad1e:	b292      	uxth	r2, r2
 800ad20:	0ee4      	lsrs	r4, r4, #27
 800ad22:	0edb      	lsrs	r3, r3, #27
 800ad24:	437c      	muls	r4, r7
 800ad26:	4353      	muls	r3, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800ad28:	0545      	lsls	r5, r0, #21
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800ad2a:	18e4      	adds	r4, r4, r3
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800ad2c:	054b      	lsls	r3, r1, #21
 800ad2e:	0ead      	lsrs	r5, r5, #26
 800ad30:	0e9b      	lsrs	r3, r3, #26
 800ad32:	437d      	muls	r5, r7
 800ad34:	4353      	muls	r3, r2
 800ad36:	18ed      	adds	r5, r5, r3
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800ad38:	06c3      	lsls	r3, r0, #27
 800ad3a:	06c8      	lsls	r0, r1, #27
 800ad3c:	0edb      	lsrs	r3, r3, #27
 800ad3e:	0ec0      	lsrs	r0, r0, #27
 800ad40:	437b      	muls	r3, r7
 800ad42:	4350      	muls	r0, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800ad44:	04ad      	lsls	r5, r5, #18
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800ad46:	1818      	adds	r0, r3, r0
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800ad48:	0a24      	lsrs	r4, r4, #8
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800ad4a:	0a00      	lsrs	r0, r0, #8
    return ret;
 800ad4c:	0ead      	lsrs	r5, r5, #26
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800ad4e:	4034      	ands	r4, r6
    return ret;
 800ad50:	016d      	lsls	r5, r5, #5
 800ad52:	4030      	ands	r0, r6
 800ad54:	4328      	orrs	r0, r5
 800ad56:	02e4      	lsls	r4, r4, #11
 800ad58:	4320      	orrs	r0, r4
}
 800ad5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ad5c <lv_draw_cont_radius_corr>:
}

#endif

static uint16_t lv_draw_cont_radius_corr(uint16_t r, lv_coord_t w, lv_coord_t h)
{
 800ad5c:	b570      	push	{r4, r5, r6, lr}
 800ad5e:	000e      	movs	r6, r1
 800ad60:	0015      	movs	r5, r2
 800ad62:	0004      	movs	r4, r0
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800ad64:	f7fe fbc2 	bl	80094ec <lv_refr_get_disp_refreshing>
 800ad68:	f002 fc5c 	bl	800d624 <lv_disp_get_antialiasing>

    if(r >= (w >> 1)) {
 800ad6c:	1076      	asrs	r6, r6, #1
 800ad6e:	42b4      	cmp	r4, r6
 800ad70:	db04      	blt.n	800ad7c <lv_draw_cont_radius_corr+0x20>
        r = (w >> 1);
 800ad72:	b2b4      	uxth	r4, r6
        if(r != 0) r--;
 800ad74:	2c00      	cmp	r4, #0
 800ad76:	d001      	beq.n	800ad7c <lv_draw_cont_radius_corr+0x20>
 800ad78:	3c01      	subs	r4, #1
 800ad7a:	b2a4      	uxth	r4, r4
    }
    if(r >= (h >> 1)) {
 800ad7c:	106d      	asrs	r5, r5, #1
 800ad7e:	42ac      	cmp	r4, r5
 800ad80:	db04      	blt.n	800ad8c <lv_draw_cont_radius_corr+0x30>
        r = (h >> 1);
 800ad82:	b2ac      	uxth	r4, r5
        if(r != 0) r--;
 800ad84:	2c00      	cmp	r4, #0
 800ad86:	d005      	beq.n	800ad94 <lv_draw_cont_radius_corr+0x38>
 800ad88:	3c01      	subs	r4, #1
 800ad8a:	b2a4      	uxth	r4, r4
    }

    if(r > 0) r -= aa;
 800ad8c:	2c00      	cmp	r4, #0
 800ad8e:	d001      	beq.n	800ad94 <lv_draw_cont_radius_corr+0x38>
 800ad90:	1a24      	subs	r4, r4, r0
 800ad92:	b2a4      	uxth	r4, r4

    return r;
}
 800ad94:	0020      	movs	r0, r4
 800ad96:	bd70      	pop	{r4, r5, r6, pc}

0800ad98 <antialias_get_opa_circ>:
 * @param px_id index of pixel on the line segment
 * @param line_opa opacity of the lien (it will be the max opacity)
 * @return the desired opacity of the pixel
 */
static lv_opa_t antialias_get_opa_circ(lv_coord_t seg, lv_coord_t px_id, lv_opa_t opa)
{
 800ad98:	b510      	push	{r4, lr}
 800ad9a:	0003      	movs	r3, r0
 800ad9c:	0014      	movs	r4, r2
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 1
    if(seg == 1) return 170;
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 2
    if(seg == 2) return (opa_map2[px_id] * opa) >> 8;
 800ad9e:	2802      	cmp	r0, #2
 800ada0:	d104      	bne.n	800adac <antialias_get_opa_circ+0x14>
 800ada2:	4b0b      	ldr	r3, [pc, #44]	; (800add0 <antialias_get_opa_circ+0x38>)
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 3
    if(seg == 3) return (opa_map3[px_id] * opa) >> 8;
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 4
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 800ada4:	5c58      	ldrb	r0, [r3, r1]
#endif

    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 800ada6:	4360      	muls	r0, r4
 800ada8:	0a00      	lsrs	r0, r0, #8
}
 800adaa:	bd10      	pop	{r4, pc}
    if(seg == 3) return (opa_map3[px_id] * opa) >> 8;
 800adac:	2803      	cmp	r0, #3
 800adae:	d101      	bne.n	800adb4 <antialias_get_opa_circ+0x1c>
 800adb0:	4b08      	ldr	r3, [pc, #32]	; (800add4 <antialias_get_opa_circ+0x3c>)
 800adb2:	e7f7      	b.n	800ada4 <antialias_get_opa_circ+0xc>
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 800adb4:	2804      	cmp	r0, #4
 800adb6:	d101      	bne.n	800adbc <antialias_get_opa_circ+0x24>
 800adb8:	4b07      	ldr	r3, [pc, #28]	; (800add8 <antialias_get_opa_circ+0x40>)
 800adba:	e7f3      	b.n	800ada4 <antialias_get_opa_circ+0xc>
    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
 800adbc:	2007      	movs	r0, #7
 800adbe:	4348      	muls	r0, r1
 800adc0:	1e59      	subs	r1, r3, #1
 800adc2:	f7f5 f9cd 	bl	8000160 <__udivsi3>
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 800adc6:	4b05      	ldr	r3, [pc, #20]	; (800addc <antialias_get_opa_circ+0x44>)
 800adc8:	b2c0      	uxtb	r0, r0
 800adca:	5c18      	ldrb	r0, [r3, r0]
 800adcc:	e7eb      	b.n	800ada6 <antialias_get_opa_circ+0xe>
 800adce:	46c0      	nop			; (mov r8, r8)
 800add0:	08012939 	.word	0x08012939
 800add4:	0801293b 	.word	0x0801293b
 800add8:	0801293e 	.word	0x0801293e
 800addc:	08012942 	.word	0x08012942

0800ade0 <lv_draw_rect>:
{
 800ade0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ade2:	b0ab      	sub	sp, #172	; 0xac
 800ade4:	9204      	str	r2, [sp, #16]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 800ade6:	88c2      	ldrh	r2, [r0, #6]
 800ade8:	930b      	str	r3, [sp, #44]	; 0x2c
 800adea:	8843      	ldrh	r3, [r0, #2]
 800adec:	3201      	adds	r2, #1
 800adee:	1ad2      	subs	r2, r2, r3
 800adf0:	b212      	sxth	r2, r2
 800adf2:	0007      	movs	r7, r0
 800adf4:	9103      	str	r1, [sp, #12]
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800adf6:	2a00      	cmp	r2, #0
 800adf8:	dc01      	bgt.n	800adfe <lv_draw_rect+0x1e>
 800adfa:	f000 fe72 	bl	800bae2 <lv_draw_rect+0xd02>
    return area_p->x2 - area_p->x1 + 1;
 800adfe:	8881      	ldrh	r1, [r0, #4]
 800ae00:	8803      	ldrh	r3, [r0, #0]
 800ae02:	3101      	adds	r1, #1
 800ae04:	1ac9      	subs	r1, r1, r3
 800ae06:	b209      	sxth	r1, r1
 800ae08:	2900      	cmp	r1, #0
 800ae0a:	dc01      	bgt.n	800ae10 <lv_draw_rect+0x30>
 800ae0c:	f000 fe69 	bl	800bae2 <lv_draw_rect+0xd02>
    if(style->body.shadow.width != 0) {
 800ae10:	9b04      	ldr	r3, [sp, #16]
 800ae12:	2012      	movs	r0, #18
 800ae14:	5e1b      	ldrsh	r3, [r3, r0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d100      	bne.n	800ae1c <lv_draw_rect+0x3c>
 800ae1a:	e2cb      	b.n	800b3b4 <lv_draw_rect+0x5d4>
    radius            = lv_draw_cont_radius_corr(radius, width, height);
 800ae1c:	9b04      	ldr	r3, [sp, #16]
    memcpy(dest, src, sizeof(lv_area_t));
 800ae1e:	ac20      	add	r4, sp, #128	; 0x80
 800ae20:	88d8      	ldrh	r0, [r3, #6]
 800ae22:	f7ff ff9b 	bl	800ad5c <lv_draw_cont_radius_corr>
 800ae26:	0005      	movs	r5, r0
 800ae28:	0039      	movs	r1, r7
 800ae2a:	2208      	movs	r2, #8
 800ae2c:	0020      	movs	r0, r4
 800ae2e:	f004 fd89 	bl	800f944 <memcpy>
    area_tmp.x1 += radius;
 800ae32:	8823      	ldrh	r3, [r4, #0]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800ae34:	0021      	movs	r1, r4
    area_tmp.x1 += radius;
 800ae36:	18eb      	adds	r3, r5, r3
 800ae38:	8023      	strh	r3, [r4, #0]
    area_tmp.x2 -= radius;
 800ae3a:	88a3      	ldrh	r3, [r4, #4]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800ae3c:	9803      	ldr	r0, [sp, #12]
    area_tmp.x2 -= radius;
 800ae3e:	1b5b      	subs	r3, r3, r5
 800ae40:	80a3      	strh	r3, [r4, #4]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800ae42:	f002 fdf2 	bl	800da2a <lv_area_is_in>
 800ae46:	2800      	cmp	r0, #0
 800ae48:	d000      	beq.n	800ae4c <lv_draw_rect+0x6c>
 800ae4a:	e2b3      	b.n	800b3b4 <lv_draw_rect+0x5d4>
 800ae4c:	2208      	movs	r2, #8
 800ae4e:	0039      	movs	r1, r7
 800ae50:	0020      	movs	r0, r4
 800ae52:	f004 fd77 	bl	800f944 <memcpy>
    area_tmp.y1 += radius;
 800ae56:	8863      	ldrh	r3, [r4, #2]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800ae58:	0021      	movs	r1, r4
    area_tmp.y1 += radius;
 800ae5a:	18eb      	adds	r3, r5, r3
 800ae5c:	8063      	strh	r3, [r4, #2]
    area_tmp.y2 -= radius;
 800ae5e:	88e3      	ldrh	r3, [r4, #6]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800ae60:	9803      	ldr	r0, [sp, #12]
    area_tmp.y2 -= radius;
 800ae62:	1b5d      	subs	r5, r3, r5
 800ae64:	80e5      	strh	r5, [r4, #6]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800ae66:	f002 fde0 	bl	800da2a <lv_area_is_in>
 800ae6a:	1e06      	subs	r6, r0, #0
 800ae6c:	d000      	beq.n	800ae70 <lv_draw_rect+0x90>
 800ae6e:	e2a1      	b.n	800b3b4 <lv_draw_rect+0x5d4>
    if(style->body.shadow.type == LV_SHADOW_FULL) {
 800ae70:	9b04      	ldr	r3, [sp, #16]
 800ae72:	7d1b      	ldrb	r3, [r3, #20]
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d000      	beq.n	800ae7a <lv_draw_rect+0x9a>
 800ae78:	e219      	b.n	800b2ae <lv_draw_rect+0x4ce>
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800ae7a:	f7fe fb37 	bl	80094ec <lv_refr_get_disp_refreshing>
 800ae7e:	f002 fbd1 	bl	800d624 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 800ae82:	9b04      	ldr	r3, [sp, #16]
    return area_p->x2 - area_p->x1 + 1;
 800ae84:	88b9      	ldrh	r1, [r7, #4]
 800ae86:	2212      	movs	r2, #18
 800ae88:	5e9b      	ldrsh	r3, [r3, r2]
    return area_p->y2 - area_p->y1 + 1;
 800ae8a:	88fa      	ldrh	r2, [r7, #6]
 800ae8c:	9307      	str	r3, [sp, #28]
 800ae8e:	887b      	ldrh	r3, [r7, #2]
 800ae90:	3201      	adds	r2, #1
 800ae92:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 800ae94:	883b      	ldrh	r3, [r7, #0]
 800ae96:	3101      	adds	r1, #1
 800ae98:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800ae9a:	9b04      	ldr	r3, [sp, #16]
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800ae9c:	0004      	movs	r4, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800ae9e:	b212      	sxth	r2, r2
 800aea0:	b209      	sxth	r1, r1
 800aea2:	88d8      	ldrh	r0, [r3, #6]
 800aea4:	f7ff ff5a 	bl	800ad5c <lv_draw_cont_radius_corr>
    radius += aa;
 800aea8:	b2a3      	uxth	r3, r4
 800aeaa:	18c0      	adds	r0, r0, r3
 800aeac:	9305      	str	r3, [sp, #20]
 800aeae:	b283      	uxth	r3, r0
 800aeb0:	9308      	str	r3, [sp, #32]
 800aeb2:	466b      	mov	r3, sp
 800aeb4:	2220      	movs	r2, #32
 800aeb6:	5e9b      	ldrsh	r3, [r3, r2]
 800aeb8:	930e      	str	r3, [sp, #56]	; 0x38
    int16_t filter_width = 2 * swidth + 1;
 800aeba:	466b      	mov	r3, sp
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 800aebc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    int16_t filter_width = 2 * swidth + 1;
 800aebe:	8b9b      	ldrh	r3, [r3, #28]
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 800aec0:	4694      	mov	ip, r2
    int16_t filter_width = 2 * swidth + 1;
 800aec2:	9314      	str	r3, [sp, #80]	; 0x50
 800aec4:	005b      	lsls	r3, r3, #1
 800aec6:	3301      	adds	r3, #1
 800aec8:	b21b      	sxth	r3, r3
 800aeca:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 800aecc:	9b07      	ldr	r3, [sp, #28]
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 800aece:	9a09      	ldr	r2, [sp, #36]	; 0x24
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 800aed0:	4463      	add	r3, ip
 800aed2:	930f      	str	r3, [sp, #60]	; 0x3c
 800aed4:	1d18      	adds	r0, r3, #4
 800aed6:	2303      	movs	r3, #3
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 800aed8:	18d4      	adds	r4, r2, r3
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 800aeda:	4398      	bics	r0, r3
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 800aedc:	439c      	bics	r4, r3
    curve_x_size *= sizeof(lv_coord_t);
 800aede:	0045      	lsls	r5, r0, #1
    line_1d_blur_size *= sizeof(uint32_t);
 800aee0:	00a4      	lsls	r4, r4, #2
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 800aee2:	1964      	adds	r4, r4, r5
 800aee4:	1900      	adds	r0, r0, r4
 800aee6:	f7ff f8cf 	bl	800a088 <lv_draw_get_buf>
    uint32_t * line_1d_blur = (uint32_t *)&draw_buf[curve_x_size];
 800aeea:	1943      	adds	r3, r0, r5
 800aeec:	9310      	str	r3, [sp, #64]	; 0x40
    memset(curve_x, 0, curve_x_size);
 800aeee:	002a      	movs	r2, r5
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 800aef0:	1903      	adds	r3, r0, r4
    memset(curve_x, 0, curve_x_size);
 800aef2:	0031      	movs	r1, r6
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 800aef4:	9311      	str	r3, [sp, #68]	; 0x44
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 800aef6:	9006      	str	r0, [sp, #24]
    memset(curve_x, 0, curve_x_size);
 800aef8:	f004 fd2d 	bl	800f956 <memset>
    lv_circ_init(&circ, &circ_tmp, radius);
 800aefc:	210a      	movs	r1, #10
 800aefe:	ab1c      	add	r3, sp, #112	; 0x70
 800af00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af02:	18c9      	adds	r1, r1, r3
 800af04:	a81f      	add	r0, sp, #124	; 0x7c
 800af06:	f002 fdaf 	bl	800da68 <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 800af0a:	ac1f      	add	r4, sp, #124	; 0x7c
 800af0c:	0020      	movs	r0, r4
 800af0e:	f002 fdb2 	bl	800da76 <lv_circ_cont>
 800af12:	2800      	cmp	r0, #0
 800af14:	d156      	bne.n	800afc4 <lv_draw_rect+0x1e4>
 800af16:	9b04      	ldr	r3, [sp, #16]
 800af18:	7a1c      	ldrb	r4, [r3, #8]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800af1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af1c:	2bff      	cmp	r3, #255	; 0xff
 800af1e:	d001      	beq.n	800af24 <lv_draw_rect+0x144>
 800af20:	435c      	muls	r4, r3
 800af22:	0a24      	lsrs	r4, r4, #8
                             (filter_width * filter_width);
 800af24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af26:	2600      	movs	r6, #0
 800af28:	001a      	movs	r2, r3
 800af2a:	435b      	muls	r3, r3
 800af2c:	0065      	lsls	r5, r4, #1
 800af2e:	930a      	str	r3, [sp, #40]	; 0x28
 800af30:	0213      	lsls	r3, r2, #8
 800af32:	435d      	muls	r5, r3
 800af34:	0264      	lsls	r4, r4, #9
 800af36:	4264      	negs	r4, r4
    for(line = 0; line < filter_width; line++) {
 800af38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af3a:	b233      	sxth	r3, r6
 800af3c:	429a      	cmp	r2, r3
 800af3e:	dc56      	bgt.n	800afee <lv_draw_rect+0x20e>
    ofs_rb.x = coords->x2 - radius - aa;
 800af40:	88bb      	ldrh	r3, [r7, #4]
 800af42:	9a08      	ldr	r2, [sp, #32]
 800af44:	1a9b      	subs	r3, r3, r2
 800af46:	9a05      	ldr	r2, [sp, #20]
 800af48:	1a9b      	subs	r3, r3, r2
 800af4a:	b29b      	uxth	r3, r3
 800af4c:	9315      	str	r3, [sp, #84]	; 0x54
 800af4e:	2254      	movs	r2, #84	; 0x54
 800af50:	466b      	mov	r3, sp
 800af52:	189b      	adds	r3, r3, r2
 800af54:	2200      	movs	r2, #0
 800af56:	5e9b      	ldrsh	r3, [r3, r2]
    ofs_rb.y = coords->y2 - radius - aa;
 800af58:	9a08      	ldr	r2, [sp, #32]
    ofs_rb.x = coords->x2 - radius - aa;
 800af5a:	9319      	str	r3, [sp, #100]	; 0x64
    ofs_rb.y = coords->y2 - radius - aa;
 800af5c:	88fb      	ldrh	r3, [r7, #6]
 800af5e:	1a9b      	subs	r3, r3, r2
 800af60:	9a05      	ldr	r2, [sp, #20]
 800af62:	1a9b      	subs	r3, r3, r2
 800af64:	b29b      	uxth	r3, r3
 800af66:	930a      	str	r3, [sp, #40]	; 0x28
 800af68:	466b      	mov	r3, sp
 800af6a:	2228      	movs	r2, #40	; 0x28
 800af6c:	5e9b      	ldrsh	r3, [r3, r2]
    ofs_rt.y = coords->y1 + radius + aa;
 800af6e:	9a05      	ldr	r2, [sp, #20]
    ofs_rb.y = coords->y2 - radius - aa;
 800af70:	9316      	str	r3, [sp, #88]	; 0x58
    ofs_rt.y = coords->y1 + radius + aa;
 800af72:	887b      	ldrh	r3, [r7, #2]
 800af74:	18d3      	adds	r3, r2, r3
 800af76:	9a08      	ldr	r2, [sp, #32]
 800af78:	18d3      	adds	r3, r2, r3
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	930c      	str	r3, [sp, #48]	; 0x30
 800af7e:	466b      	mov	r3, sp
 800af80:	2230      	movs	r2, #48	; 0x30
 800af82:	5e9b      	ldrsh	r3, [r3, r2]
    ofs_lb.x = coords->x1 + radius + aa;
 800af84:	9a05      	ldr	r2, [sp, #20]
    ofs_rt.y = coords->y1 + radius + aa;
 800af86:	9317      	str	r3, [sp, #92]	; 0x5c
    ofs_lb.x = coords->x1 + radius + aa;
 800af88:	883b      	ldrh	r3, [r7, #0]
 800af8a:	18d3      	adds	r3, r2, r3
 800af8c:	9a08      	ldr	r2, [sp, #32]
 800af8e:	18d3      	adds	r3, r2, r3
 800af90:	b29b      	uxth	r3, r3
 800af92:	9318      	str	r3, [sp, #96]	; 0x60
 800af94:	2260      	movs	r2, #96	; 0x60
 800af96:	466b      	mov	r3, sp
 800af98:	189b      	adds	r3, r3, r2
 800af9a:	2200      	movs	r2, #0
 800af9c:	5e9b      	ldrsh	r3, [r3, r2]
 800af9e:	931a      	str	r3, [sp, #104]	; 0x68
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
 800afa0:	2300      	movs	r3, #0
 800afa2:	9309      	str	r3, [sp, #36]	; 0x24
 800afa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800afa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afa8:	4293      	cmp	r3, r2
 800afaa:	da00      	bge.n	800afae <lv_draw_rect+0x1ce>
 800afac:	e202      	b.n	800b3b4 <lv_draw_rect+0x5d4>
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 800afae:	9b06      	ldr	r3, [sp, #24]
 800afb0:	0050      	lsls	r0, r2, #1
 800afb2:	1818      	adds	r0, r3, r0
 800afb4:	2300      	movs	r3, #0
 800afb6:	9305      	str	r3, [sp, #20]
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 800afb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800afba:	425e      	negs	r6, r3
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 800afbc:	9b07      	ldr	r3, [sp, #28]
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 800afbe:	b236      	sxth	r6, r6
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 800afc0:	425c      	negs	r4, r3
 800afc2:	e0e8      	b.n	800b196 <lv_draw_rect+0x3b6>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 800afc4:	2300      	movs	r3, #0
 800afc6:	5ee2      	ldrsh	r2, [r4, r3]
 800afc8:	2102      	movs	r1, #2
 800afca:	5e63      	ldrsh	r3, [r4, r1]
 800afcc:	9906      	ldr	r1, [sp, #24]
 800afce:	005b      	lsls	r3, r3, #1
 800afd0:	525a      	strh	r2, [r3, r1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 800afd2:	2302      	movs	r3, #2
 800afd4:	5ee2      	ldrsh	r2, [r4, r3]
 800afd6:	2100      	movs	r1, #0
 800afd8:	5e63      	ldrsh	r3, [r4, r1]
 800afda:	9906      	ldr	r1, [sp, #24]
 800afdc:	005b      	lsls	r3, r3, #1
 800afde:	525a      	strh	r2, [r3, r1]
        lv_circ_next(&circ, &circ_tmp);
 800afe0:	210a      	movs	r1, #10
 800afe2:	ab1c      	add	r3, sp, #112	; 0x70
 800afe4:	18c9      	adds	r1, r1, r3
 800afe6:	0020      	movs	r0, r4
 800afe8:	f002 fd4f 	bl	800da8a <lv_circ_next>
 800afec:	e78d      	b.n	800af0a <lv_draw_rect+0x12a>
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2) << SHADOW_OPA_EXTRA_PRECISION) /
 800afee:	0028      	movs	r0, r5
 800aff0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aff2:	f7f5 f8b5 	bl	8000160 <__udivsi3>
 800aff6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aff8:	00b2      	lsls	r2, r6, #2
 800affa:	5098      	str	r0, [r3, r2]
 800affc:	3601      	adds	r6, #1
 800affe:	192d      	adds	r5, r5, r4
 800b000:	e79a      	b.n	800af38 <lv_draw_rect+0x158>
                if(line + line_rel < 0) { /*Below the radius, here is the blur of the edge */
 800b002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b004:	18d3      	adds	r3, r2, r3
 800b006:	d400      	bmi.n	800b00a <lv_draw_rect+0x22a>
 800b008:	e0aa      	b.n	800b160 <lv_draw_rect+0x380>
                    col_rel = radius - curve_x[line] - col;
 800b00a:	8803      	ldrh	r3, [r0, #0]
 800b00c:	9d08      	ldr	r5, [sp, #32]
 800b00e:	1aeb      	subs	r3, r5, r3
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 800b010:	9d05      	ldr	r5, [sp, #20]
 800b012:	1b5b      	subs	r3, r3, r5
 800b014:	b21b      	sxth	r3, r3
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 800b016:	42a3      	cmp	r3, r4
 800b018:	db00      	blt.n	800b01c <lv_draw_rect+0x23c>
 800b01a:	e0aa      	b.n	800b172 <lv_draw_rect+0x392>
                    if(line_rel == -swidth)
 800b01c:	1b12      	subs	r2, r2, r4
 800b01e:	4253      	negs	r3, r2
 800b020:	4153      	adcs	r3, r2
 800b022:	b2db      	uxtb	r3, r3
            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 800b024:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b026:	9d05      	ldr	r5, [sp, #20]
 800b028:	0a09      	lsrs	r1, r1, #8
 800b02a:	5551      	strb	r1, [r2, r5]
 800b02c:	002a      	movs	r2, r5
 800b02e:	3201      	adds	r2, #1
            if(line_ready) {
 800b030:	2b00      	cmp	r3, #0
 800b032:	d100      	bne.n	800b036 <lv_draw_rect+0x256>
 800b034:	e0ad      	b.n	800b192 <lv_draw_rect+0x3b2>
                col++; /*To make this line to the last one ( drawing will go to '< col')*/
 800b036:	b293      	uxth	r3, r2
 800b038:	9305      	str	r3, [sp, #20]
        point_rt.y = ofs_rt.y - line;
 800b03a:	466a      	mov	r2, sp
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 800b03c:	8801      	ldrh	r1, [r0, #0]
        point_rt.y = ofs_rt.y - line;
 800b03e:	2030      	movs	r0, #48	; 0x30
 800b040:	5e12      	ldrsh	r2, [r2, r0]
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 800b042:	9b15      	ldr	r3, [sp, #84]	; 0x54
        point_rt.y = ofs_rt.y - line;
 800b044:	920d      	str	r2, [sp, #52]	; 0x34
        point_rb.y = ofs_rb.y + line;
 800b046:	466a      	mov	r2, sp
 800b048:	2628      	movs	r6, #40	; 0x28
 800b04a:	5f96      	ldrsh	r6, [r2, r6]
        point_lt.x = ofs_lt.x - curve_x[line] - 1;
 800b04c:	9a18      	ldr	r2, [sp, #96]	; 0x60
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 800b04e:	3301      	adds	r3, #1
        point_lt.x = ofs_lt.x - curve_x[line] - 1;
 800b050:	3a01      	subs	r2, #1
 800b052:	1a52      	subs	r2, r2, r1
 800b054:	b292      	uxth	r2, r2
 800b056:	9213      	str	r2, [sp, #76]	; 0x4c
 800b058:	9a11      	ldr	r2, [sp, #68]	; 0x44
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 800b05a:	18cb      	adds	r3, r1, r3
 800b05c:	1c55      	adds	r5, r2, #1
        for(d = 1; d < col; d++) {
 800b05e:	2201      	movs	r2, #1
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 800b060:	b29b      	uxth	r3, r3
 800b062:	b21c      	sxth	r4, r3
        for(d = 1; d < col; d++) {
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	931c      	str	r3, [sp, #112]	; 0x70
 800b068:	224c      	movs	r2, #76	; 0x4c
 800b06a:	466b      	mov	r3, sp
 800b06c:	189b      	adds	r3, r3, r2
 800b06e:	2200      	movs	r2, #0
 800b070:	5e9b      	ldrsh	r3, [r3, r2]
 800b072:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b074:	9312      	str	r3, [sp, #72]	; 0x48
 800b076:	b2a3      	uxth	r3, r4
 800b078:	931b      	str	r3, [sp, #108]	; 0x6c
 800b07a:	189b      	adds	r3, r3, r2
 800b07c:	9a05      	ldr	r2, [sp, #20]
 800b07e:	b29b      	uxth	r3, r3
 800b080:	429a      	cmp	r2, r3
 800b082:	d900      	bls.n	800b086 <lv_draw_rect+0x2a6>
 800b084:	e094      	b.n	800b1b0 <lv_draw_rect+0x3d0>
        if(line == 0) lv_draw_shadow_full_straight(coords, mask, style, line_2d_blur);
 800b086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d15c      	bne.n	800b146 <lv_draw_rect+0x366>
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800b08c:	f7fe fa2e 	bl	80094ec <lv_refr_get_disp_refreshing>
 800b090:	f002 fac8 	bl	800d624 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 800b094:	9b04      	ldr	r3, [sp, #16]
 800b096:	88b9      	ldrh	r1, [r7, #4]
 800b098:	2212      	movs	r2, #18
 800b09a:	5e9b      	ldrsh	r3, [r3, r2]
    return area_p->y2 - area_p->y1 + 1;
 800b09c:	88fa      	ldrh	r2, [r7, #6]
 800b09e:	9313      	str	r3, [sp, #76]	; 0x4c
 800b0a0:	887b      	ldrh	r3, [r7, #2]
 800b0a2:	3201      	adds	r2, #1
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800b0a4:	0004      	movs	r4, r0
 800b0a6:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 800b0a8:	883b      	ldrh	r3, [r7, #0]
 800b0aa:	3101      	adds	r1, #1
 800b0ac:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800b0ae:	9b04      	ldr	r3, [sp, #16]
 800b0b0:	b212      	sxth	r2, r2
 800b0b2:	b209      	sxth	r1, r1
 800b0b4:	88d8      	ldrh	r0, [r3, #6]
 800b0b6:	f7ff fe51 	bl	800ad5c <lv_draw_cont_radius_corr>
    right_area.x1 = coords->x2 + 1 - aa;
 800b0ba:	88ba      	ldrh	r2, [r7, #4]
    radius += aa;
 800b0bc:	b2a3      	uxth	r3, r4
    right_area.x1 = coords->x2 + 1 - aa;
 800b0be:	9205      	str	r2, [sp, #20]
 800b0c0:	3201      	adds	r2, #1
 800b0c2:	1ad2      	subs	r2, r2, r3
 800b0c4:	a922      	add	r1, sp, #136	; 0x88
 800b0c6:	b212      	sxth	r2, r2
 800b0c8:	800a      	strh	r2, [r1, #0]
    right_area.y1 = coords->y1 + radius + aa;
 800b0ca:	887c      	ldrh	r4, [r7, #2]
    radius += aa;
 800b0cc:	18c0      	adds	r0, r0, r3
 800b0ce:	b280      	uxth	r0, r0
    right_area.y1 = coords->y1 + radius + aa;
 800b0d0:	191d      	adds	r5, r3, r4
 800b0d2:	1945      	adds	r5, r0, r5
 800b0d4:	b22d      	sxth	r5, r5
 800b0d6:	804d      	strh	r5, [r1, #2]
    right_area.x2 = right_area.x1;
 800b0d8:	808a      	strh	r2, [r1, #4]
    right_area.y2 = coords->y2 - radius - aa;
 800b0da:	88fa      	ldrh	r2, [r7, #6]
    right_area.y1 = coords->y1 + radius + aa;
 800b0dc:	46ac      	mov	ip, r5
    right_area.y2 = coords->y2 - radius - aa;
 800b0de:	1a15      	subs	r5, r2, r0
 800b0e0:	1aed      	subs	r5, r5, r3
 800b0e2:	b22d      	sxth	r5, r5
 800b0e4:	9512      	str	r5, [sp, #72]	; 0x48
 800b0e6:	920d      	str	r2, [sp, #52]	; 0x34
 800b0e8:	2548      	movs	r5, #72	; 0x48
 800b0ea:	466a      	mov	r2, sp
 800b0ec:	1952      	adds	r2, r2, r5
 800b0ee:	8815      	ldrh	r5, [r2, #0]
    left_area.y1 = coords->y1 + radius + aa;
 800b0f0:	4662      	mov	r2, ip
    right_area.y2 = coords->y2 - radius - aa;
 800b0f2:	80cd      	strh	r5, [r1, #6]
    left_area.x1 = coords->x1 - 1 + aa;
 800b0f4:	8839      	ldrh	r1, [r7, #0]
 800b0f6:	ad24      	add	r5, sp, #144	; 0x90
 800b0f8:	1e4e      	subs	r6, r1, #1
 800b0fa:	199e      	adds	r6, r3, r6
 800b0fc:	b236      	sxth	r6, r6
 800b0fe:	802e      	strh	r6, [r5, #0]
    left_area.y1 = coords->y1 + radius + aa;
 800b100:	806a      	strh	r2, [r5, #2]
    left_area.x2 = left_area.x1;
 800b102:	80ae      	strh	r6, [r5, #4]
    left_area.y2 = coords->y2 - radius - aa;
 800b104:	466a      	mov	r2, sp
 800b106:	2648      	movs	r6, #72	; 0x48
 800b108:	1992      	adds	r2, r2, r6
 800b10a:	8812      	ldrh	r2, [r2, #0]
    top_area.x1 = coords->x1 + radius + aa;
 800b10c:	1859      	adds	r1, r3, r1
    left_area.y2 = coords->y2 - radius - aa;
 800b10e:	80ea      	strh	r2, [r5, #6]
    top_area.x2 = coords->x2 - radius - aa;
 800b110:	9a05      	ldr	r2, [sp, #20]
    top_area.x1 = coords->x1 + radius + aa;
 800b112:	1841      	adds	r1, r0, r1
    top_area.x2 = coords->x2 - radius - aa;
 800b114:	1a10      	subs	r0, r2, r0
    bottom_area.y1 = coords->y2 + 1 - aa;
 800b116:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    top_area.y1 = coords->y1 - 1 + aa;
 800b118:	3c01      	subs	r4, #1
 800b11a:	191c      	adds	r4, r3, r4
    bottom_area.y1 = coords->y2 + 1 - aa;
 800b11c:	3201      	adds	r2, #1
    top_area.x1 = coords->x1 + radius + aa;
 800b11e:	ad26      	add	r5, sp, #152	; 0x98
    top_area.y1 = coords->y1 - 1 + aa;
 800b120:	b224      	sxth	r4, r4
    top_area.x2 = coords->x2 - radius - aa;
 800b122:	1ac0      	subs	r0, r0, r3
    bottom_area.y1 = coords->y2 + 1 - aa;
 800b124:	1ad3      	subs	r3, r2, r3
    top_area.x1 = coords->x1 + radius + aa;
 800b126:	b209      	sxth	r1, r1
    top_area.x2 = coords->x2 - radius - aa;
 800b128:	b200      	sxth	r0, r0
    bottom_area.y1 = coords->y2 + 1 - aa;
 800b12a:	b21b      	sxth	r3, r3
    top_area.y1 = coords->y1 - 1 + aa;
 800b12c:	806c      	strh	r4, [r5, #2]
    top_area.y2 = top_area.y1;
 800b12e:	80ec      	strh	r4, [r5, #6]
    bottom_area.x1 = coords->x1 + radius + aa;
 800b130:	ac28      	add	r4, sp, #160	; 0xa0
 800b132:	8021      	strh	r1, [r4, #0]
    bottom_area.y1 = coords->y2 + 1 - aa;
 800b134:	8063      	strh	r3, [r4, #2]
    bottom_area.x2 = coords->x2 - radius - aa;
 800b136:	80a0      	strh	r0, [r4, #4]
    bottom_area.y2 = bottom_area.y1;
 800b138:	80e3      	strh	r3, [r4, #6]
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 800b13a:	2401      	movs	r4, #1
    top_area.x1 = coords->x1 + radius + aa;
 800b13c:	8029      	strh	r1, [r5, #0]
    top_area.x2 = coords->x2 - radius - aa;
 800b13e:	80a8      	strh	r0, [r5, #4]
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 800b140:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b142:	42a3      	cmp	r3, r4
 800b144:	da76      	bge.n	800b234 <lv_draw_rect+0x454>
 800b146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b148:	3301      	adds	r3, #1
 800b14a:	b21b      	sxth	r3, r3
 800b14c:	9309      	str	r3, [sp, #36]	; 0x24
 800b14e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b150:	3301      	adds	r3, #1
 800b152:	b29b      	uxth	r3, r3
 800b154:	930a      	str	r3, [sp, #40]	; 0x28
 800b156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b158:	3b01      	subs	r3, #1
 800b15a:	b29b      	uxth	r3, r3
 800b15c:	930c      	str	r3, [sp, #48]	; 0x30
 800b15e:	e721      	b.n	800afa4 <lv_draw_rect+0x1c4>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 800b160:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b162:	429d      	cmp	r5, r3
 800b164:	db22      	blt.n	800b1ac <lv_draw_rect+0x3cc>
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 800b166:	9d06      	ldr	r5, [sp, #24]
 800b168:	005b      	lsls	r3, r3, #1
 800b16a:	5b5b      	ldrh	r3, [r3, r5]
 800b16c:	8805      	ldrh	r5, [r0, #0]
 800b16e:	1b5b      	subs	r3, r3, r5
 800b170:	e74e      	b.n	800b010 <lv_draw_rect+0x230>
                } else if(col_rel > swidth)
 800b172:	9d07      	ldr	r5, [sp, #28]
 800b174:	429d      	cmp	r5, r3
 800b176:	da06      	bge.n	800b186 <lv_draw_rect+0x3a6>
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
 800b178:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	930d      	str	r3, [sp, #52]	; 0x34
 800b17e:	3201      	adds	r2, #1
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 800b180:	18c9      	adds	r1, r1, r3
 800b182:	b212      	sxth	r2, r2
 800b184:	e00e      	b.n	800b1a4 <lv_draw_rect+0x3c4>
 800b186:	9d07      	ldr	r5, [sp, #28]
 800b188:	1aeb      	subs	r3, r5, r3
 800b18a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	595b      	ldr	r3, [r3, r5]
 800b190:	e7f5      	b.n	800b17e <lv_draw_rect+0x39e>
        for(col = 0; col <= radius + swidth; col++) { /*Check all pixels in a 1D blur line (from the origo to last
 800b192:	b293      	uxth	r3, r2
 800b194:	9305      	str	r3, [sp, #20]
 800b196:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b198:	9a05      	ldr	r2, [sp, #20]
 800b19a:	4293      	cmp	r3, r2
 800b19c:	da00      	bge.n	800b1a0 <lv_draw_rect+0x3c0>
 800b19e:	e74c      	b.n	800b03a <lv_draw_rect+0x25a>
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 800b1a0:	0032      	movs	r2, r6
            uint32_t px_opa_sum = 0;
 800b1a2:	2100      	movs	r1, #0
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 800b1a4:	9b07      	ldr	r3, [sp, #28]
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	db00      	blt.n	800b1ac <lv_draw_rect+0x3cc>
 800b1aa:	e72a      	b.n	800b002 <lv_draw_rect+0x222>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	e739      	b.n	800b024 <lv_draw_rect+0x244>
            if(point_lt.x < ofs_lt.x && point_lt.y < ofs_lt.y) {
 800b1b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b1b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	dd18      	ble.n	800b1ea <lv_draw_rect+0x40a>
 800b1b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b1ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	dd08      	ble.n	800b1d2 <lv_draw_rect+0x3f2>
                lv_draw_px(point_lt.x, point_lt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800b1c0:	782b      	ldrb	r3, [r5, #0]
 800b1c2:	9a03      	ldr	r2, [sp, #12]
 800b1c4:	9300      	str	r3, [sp, #0]
 800b1c6:	9b04      	ldr	r3, [sp, #16]
 800b1c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b1ca:	8a1b      	ldrh	r3, [r3, #16]
 800b1cc:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b1ce:	f7ff f862 	bl	800a296 <lv_draw_px>
            if(point_lb.x < ofs_lb.x && point_lb.y > ofs_lb.y) {
 800b1d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b1d4:	42b3      	cmp	r3, r6
 800b1d6:	da08      	bge.n	800b1ea <lv_draw_rect+0x40a>
                lv_draw_px(point_lb.x, point_lb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800b1d8:	782b      	ldrb	r3, [r5, #0]
 800b1da:	9a03      	ldr	r2, [sp, #12]
 800b1dc:	9300      	str	r3, [sp, #0]
 800b1de:	9b04      	ldr	r3, [sp, #16]
 800b1e0:	0031      	movs	r1, r6
 800b1e2:	8a1b      	ldrh	r3, [r3, #16]
 800b1e4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b1e6:	f7ff f856 	bl	800a296 <lv_draw_px>
            if(point_rt.x > ofs_rt.x && point_rt.y < ofs_rt.y) {
 800b1ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b1ec:	42a3      	cmp	r3, r4
 800b1ee:	da18      	bge.n	800b222 <lv_draw_rect+0x442>
 800b1f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b1f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	dd08      	ble.n	800b20a <lv_draw_rect+0x42a>
                lv_draw_px(point_rt.x, point_rt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800b1f8:	782b      	ldrb	r3, [r5, #0]
 800b1fa:	9a03      	ldr	r2, [sp, #12]
 800b1fc:	9300      	str	r3, [sp, #0]
 800b1fe:	9b04      	ldr	r3, [sp, #16]
 800b200:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b202:	8a1b      	ldrh	r3, [r3, #16]
 800b204:	0020      	movs	r0, r4
 800b206:	f7ff f846 	bl	800a296 <lv_draw_px>
            if(point_rb.x > ofs_rb.x && point_rb.y > ofs_rb.y) {
 800b20a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b20c:	42b3      	cmp	r3, r6
 800b20e:	da08      	bge.n	800b222 <lv_draw_rect+0x442>
                lv_draw_px(point_rb.x, point_rb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800b210:	782b      	ldrb	r3, [r5, #0]
 800b212:	9a03      	ldr	r2, [sp, #12]
 800b214:	9300      	str	r3, [sp, #0]
 800b216:	9b04      	ldr	r3, [sp, #16]
 800b218:	0031      	movs	r1, r6
 800b21a:	8a1b      	ldrh	r3, [r3, #16]
 800b21c:	0020      	movs	r0, r4
 800b21e:	f7ff f83a 	bl	800a296 <lv_draw_px>
 800b222:	9b13      	ldr	r3, [sp, #76]	; 0x4c
            point_rt.x++;
 800b224:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800b226:	3b01      	subs	r3, #1
 800b228:	b29b      	uxth	r3, r3
 800b22a:	3401      	adds	r4, #1
 800b22c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b22e:	3501      	adds	r5, #1
 800b230:	b224      	sxth	r4, r4
 800b232:	e719      	b.n	800b068 <lv_draw_rect+0x288>
        opa_act = map[d];
 800b234:	9b11      	ldr	r3, [sp, #68]	; 0x44
        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 800b236:	9a04      	ldr	r2, [sp, #16]
        opa_act = map[d];
 800b238:	5d1e      	ldrb	r6, [r3, r4]
        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 800b23a:	ad22      	add	r5, sp, #136	; 0x88
 800b23c:	0028      	movs	r0, r5
 800b23e:	0033      	movs	r3, r6
 800b240:	8a12      	ldrh	r2, [r2, #16]
 800b242:	9903      	ldr	r1, [sp, #12]
 800b244:	f7ff f870 	bl	800a328 <lv_draw_fill>
        right_area.x1++;
 800b248:	882b      	ldrh	r3, [r5, #0]
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 800b24a:	9a04      	ldr	r2, [sp, #16]
        right_area.x1++;
 800b24c:	3301      	adds	r3, #1
 800b24e:	802b      	strh	r3, [r5, #0]
        right_area.x2++;
 800b250:	88ab      	ldrh	r3, [r5, #4]
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 800b252:	9903      	ldr	r1, [sp, #12]
        right_area.x2++;
 800b254:	3301      	adds	r3, #1
 800b256:	80ab      	strh	r3, [r5, #4]
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 800b258:	ad24      	add	r5, sp, #144	; 0x90
 800b25a:	0028      	movs	r0, r5
 800b25c:	0033      	movs	r3, r6
 800b25e:	8a12      	ldrh	r2, [r2, #16]
 800b260:	f7ff f862 	bl	800a328 <lv_draw_fill>
        left_area.x1--;
 800b264:	882b      	ldrh	r3, [r5, #0]
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 800b266:	9a04      	ldr	r2, [sp, #16]
        left_area.x1--;
 800b268:	3b01      	subs	r3, #1
 800b26a:	802b      	strh	r3, [r5, #0]
        left_area.x2--;
 800b26c:	88ab      	ldrh	r3, [r5, #4]
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 800b26e:	9903      	ldr	r1, [sp, #12]
        left_area.x2--;
 800b270:	3b01      	subs	r3, #1
 800b272:	80ab      	strh	r3, [r5, #4]
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 800b274:	ad26      	add	r5, sp, #152	; 0x98
 800b276:	0028      	movs	r0, r5
 800b278:	0033      	movs	r3, r6
 800b27a:	8a12      	ldrh	r2, [r2, #16]
 800b27c:	f7ff f854 	bl	800a328 <lv_draw_fill>
        top_area.y1--;
 800b280:	886b      	ldrh	r3, [r5, #2]
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 800b282:	9a04      	ldr	r2, [sp, #16]
        top_area.y1--;
 800b284:	3b01      	subs	r3, #1
 800b286:	806b      	strh	r3, [r5, #2]
        top_area.y2--;
 800b288:	88eb      	ldrh	r3, [r5, #6]
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 800b28a:	9903      	ldr	r1, [sp, #12]
        top_area.y2--;
 800b28c:	3b01      	subs	r3, #1
 800b28e:	80eb      	strh	r3, [r5, #6]
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 800b290:	ad28      	add	r5, sp, #160	; 0xa0
 800b292:	0033      	movs	r3, r6
 800b294:	8a12      	ldrh	r2, [r2, #16]
 800b296:	0028      	movs	r0, r5
 800b298:	f7ff f846 	bl	800a328 <lv_draw_fill>
        bottom_area.y1++;
 800b29c:	886b      	ldrh	r3, [r5, #2]
 800b29e:	3401      	adds	r4, #1
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	806b      	strh	r3, [r5, #2]
        bottom_area.y2++;
 800b2a4:	88eb      	ldrh	r3, [r5, #6]
 800b2a6:	b224      	sxth	r4, r4
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	80eb      	strh	r3, [r5, #6]
 800b2ac:	e748      	b.n	800b140 <lv_draw_rect+0x360>
    } else if(style->body.shadow.type == LV_SHADOW_BOTTOM) {
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d000      	beq.n	800b2b4 <lv_draw_rect+0x4d4>
 800b2b2:	e07f      	b.n	800b3b4 <lv_draw_rect+0x5d4>
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800b2b4:	f7fe f91a 	bl	80094ec <lv_refr_get_disp_refreshing>
 800b2b8:	f002 f9b4 	bl	800d624 <lv_disp_get_antialiasing>
 800b2bc:	0006      	movs	r6, r0
    lv_coord_t swidth = style->body.shadow.width;
 800b2be:	9b04      	ldr	r3, [sp, #16]
    return area_p->y2 - area_p->y1 + 1;
 800b2c0:	88fa      	ldrh	r2, [r7, #6]
 800b2c2:	2512      	movs	r5, #18
 800b2c4:	5f5d      	ldrsh	r5, [r3, r5]
 800b2c6:	887b      	ldrh	r3, [r7, #2]
    return area_p->x2 - area_p->x1 + 1;
 800b2c8:	88b9      	ldrh	r1, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 800b2ca:	3201      	adds	r2, #1
 800b2cc:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 800b2ce:	883b      	ldrh	r3, [r7, #0]
 800b2d0:	3101      	adds	r1, #1
 800b2d2:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800b2d4:	9b04      	ldr	r3, [sp, #16]
 800b2d6:	b209      	sxth	r1, r1
 800b2d8:	b212      	sxth	r2, r2
 800b2da:	88d8      	ldrh	r0, [r3, #6]
 800b2dc:	f7ff fd3e 	bl	800ad5c <lv_draw_cont_radius_corr>
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 800b2e0:	b2b3      	uxth	r3, r6
 800b2e2:	9308      	str	r3, [sp, #32]
 800b2e4:	2303      	movs	r3, #3
 800b2e6:	9c08      	ldr	r4, [sp, #32]
 800b2e8:	435c      	muls	r4, r3
 800b2ea:	1904      	adds	r4, r0, r4
 800b2ec:	b2a4      	uxth	r4, r4
 800b2ee:	b222      	sxth	r2, r4
 800b2f0:	9209      	str	r2, [sp, #36]	; 0x24
    swidth += aa;
 800b2f2:	9a08      	ldr	r2, [sp, #32]
 800b2f4:	1955      	adds	r5, r2, r5
 800b2f6:	b2a8      	uxth	r0, r5
 800b2f8:	b202      	sxth	r2, r0
 800b2fa:	9205      	str	r2, [sp, #20]
    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 800b2fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    lv_opa_t line_1d_blur_size = (swidth + 3) & ~0x3;     /*Round to 4*/
 800b2fe:	18c0      	adds	r0, r0, r3
    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 800b300:	1d15      	adds	r5, r2, #4
 800b302:	439d      	bics	r5, r3
    lv_opa_t line_1d_blur_size = (swidth + 3) & ~0x3;     /*Round to 4*/
 800b304:	4398      	bics	r0, r3
    curve_x_size *= sizeof(lv_coord_t);
 800b306:	006d      	lsls	r5, r5, #1
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 800b308:	b2c0      	uxtb	r0, r0
 800b30a:	1940      	adds	r0, r0, r5
 800b30c:	f7fe febc 	bl	800a088 <lv_draw_get_buf>
    lv_circ_init(&circ, &circ_tmp, radius);
 800b310:	9a09      	ldr	r2, [sp, #36]	; 0x24
    lv_opa_t * line_1d_blur = (lv_opa_t *)&draw_buf[curve_x_size];
 800b312:	1943      	adds	r3, r0, r5
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 800b314:	9006      	str	r0, [sp, #24]
    lv_circ_init(&circ, &circ_tmp, radius);
 800b316:	a924      	add	r1, sp, #144	; 0x90
 800b318:	a826      	add	r0, sp, #152	; 0x98
    lv_opa_t * line_1d_blur = (lv_opa_t *)&draw_buf[curve_x_size];
 800b31a:	9307      	str	r3, [sp, #28]
    lv_circ_init(&circ, &circ_tmp, radius);
 800b31c:	f002 fba4 	bl	800da68 <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 800b320:	ad26      	add	r5, sp, #152	; 0x98
 800b322:	0028      	movs	r0, r5
 800b324:	f002 fba7 	bl	800da76 <lv_circ_cont>
 800b328:	2800      	cmp	r0, #0
 800b32a:	d001      	beq.n	800b330 <lv_draw_rect+0x550>
 800b32c:	f000 fbdb 	bl	800bae6 <lv_draw_rect+0xd06>
 800b330:	9b04      	ldr	r3, [sp, #16]
 800b332:	7a1d      	ldrb	r5, [r3, #8]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800b334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b336:	2bff      	cmp	r3, #255	; 0xff
 800b338:	d001      	beq.n	800b33e <lv_draw_rect+0x55e>
 800b33a:	435d      	muls	r5, r3
 800b33c:	0a2d      	lsrs	r5, r5, #8
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
 800b33e:	2600      	movs	r6, #0
 800b340:	9b05      	ldr	r3, [sp, #20]
 800b342:	436b      	muls	r3, r5
 800b344:	930a      	str	r3, [sp, #40]	; 0x28
    for(col = 0; col < swidth; col++) {
 800b346:	9a05      	ldr	r2, [sp, #20]
 800b348:	b233      	sxth	r3, r6
 800b34a:	429a      	cmp	r2, r3
 800b34c:	dd01      	ble.n	800b352 <lv_draw_rect+0x572>
 800b34e:	f000 fbde 	bl	800bb0e <lv_draw_rect+0xd2e>
    ofs_l.x = coords->x1 + radius;
 800b352:	883b      	ldrh	r3, [r7, #0]
 800b354:	18e3      	adds	r3, r4, r3
 800b356:	b29b      	uxth	r3, r3
 800b358:	930a      	str	r3, [sp, #40]	; 0x28
 800b35a:	466b      	mov	r3, sp
 800b35c:	2228      	movs	r2, #40	; 0x28
 800b35e:	5e9b      	ldrsh	r3, [r3, r2]
 800b360:	9a08      	ldr	r2, [sp, #32]
 800b362:	9310      	str	r3, [sp, #64]	; 0x40
 800b364:	88fb      	ldrh	r3, [r7, #6]
 800b366:	3301      	adds	r3, #1
 800b368:	1a9b      	subs	r3, r3, r2
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	930c      	str	r3, [sp, #48]	; 0x30
    ofs_l.y = coords->y2 - radius + 1 - aa;
 800b36e:	1b1b      	subs	r3, r3, r4
 800b370:	b29b      	uxth	r3, r3
 800b372:	9311      	str	r3, [sp, #68]	; 0x44
    ofs_r.x = coords->x2 - radius;
 800b374:	88b8      	ldrh	r0, [r7, #4]
 800b376:	1b04      	subs	r4, r0, r4
 800b378:	b2a3      	uxth	r3, r4
 800b37a:	930d      	str	r3, [sp, #52]	; 0x34
 800b37c:	2300      	movs	r3, #0
 800b37e:	9308      	str	r3, [sp, #32]
 800b380:	466b      	mov	r3, sp
 800b382:	2120      	movs	r1, #32
 800b384:	5e59      	ldrsh	r1, [r3, r1]
    for(col = 0; col <= radius; col++) {
 800b386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b388:	428b      	cmp	r3, r1
 800b38a:	db01      	blt.n	800b390 <lv_draw_rect+0x5b0>
 800b38c:	f000 fbcc 	bl	800bb28 <lv_draw_rect+0xd48>
    area_mid.x1 = ofs_l.x + 1;
 800b390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b392:	aa28      	add	r2, sp, #160	; 0xa0
 800b394:	3301      	adds	r3, #1
 800b396:	8013      	strh	r3, [r2, #0]
    area_mid.x2 = ofs_r.x - 1;
 800b398:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    area_mid.y1 = ofs_l.y + radius;
 800b39a:	466b      	mov	r3, sp
    area_mid.x2 = ofs_r.x - 1;
 800b39c:	3c01      	subs	r4, #1
 800b39e:	8094      	strh	r4, [r2, #4]
    for(d = 0; d < swidth; d++) {
 800b3a0:	2400      	movs	r4, #0
    area_mid.y1 = ofs_l.y + radius;
 800b3a2:	2130      	movs	r1, #48	; 0x30
 800b3a4:	5e5b      	ldrsh	r3, [r3, r1]
 800b3a6:	8053      	strh	r3, [r2, #2]
    area_mid.y2 = area_mid.y1;
 800b3a8:	80d3      	strh	r3, [r2, #6]
    for(d = 0; d < swidth; d++) {
 800b3aa:	9b05      	ldr	r3, [sp, #20]
 800b3ac:	429c      	cmp	r4, r3
 800b3ae:	da01      	bge.n	800b3b4 <lv_draw_rect+0x5d4>
 800b3b0:	f000 fc00 	bl	800bbb4 <lv_draw_rect+0xdd4>
    if(lv_area_is_on(coords, mask) == false) return;
 800b3b4:	9903      	ldr	r1, [sp, #12]
 800b3b6:	0038      	movs	r0, r7
 800b3b8:	f002 fb18 	bl	800d9ec <lv_area_is_on>
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	d100      	bne.n	800b3c2 <lv_draw_rect+0x5e2>
 800b3c0:	e38f      	b.n	800bae2 <lv_draw_rect+0xd02>
    if(style->body.opa > LV_OPA_MIN) {
 800b3c2:	9b04      	ldr	r3, [sp, #16]
 800b3c4:	7a1b      	ldrb	r3, [r3, #8]
 800b3c6:	2b10      	cmp	r3, #16
 800b3c8:	d800      	bhi.n	800b3cc <lv_draw_rect+0x5ec>
 800b3ca:	e1e7      	b.n	800b79c <lv_draw_rect+0x9bc>
    uint16_t radius = style->body.radius;
 800b3cc:	9b04      	ldr	r3, [sp, #16]
 800b3ce:	88dc      	ldrh	r4, [r3, #6]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800b3d0:	f7fe f88c 	bl	80094ec <lv_refr_get_disp_refreshing>
 800b3d4:	f002 f926 	bl	800d624 <lv_disp_get_antialiasing>
    lv_color_t mcolor = style->body.main_color;
 800b3d8:	9b04      	ldr	r3, [sp, #16]
    return area_p->y2 - area_p->y1 + 1;
 800b3da:	887a      	ldrh	r2, [r7, #2]
 800b3dc:	885b      	ldrh	r3, [r3, #2]
    return area_p->x2 - area_p->x1 + 1;
 800b3de:	88b9      	ldrh	r1, [r7, #4]
 800b3e0:	9305      	str	r3, [sp, #20]
    lv_color_t gcolor = style->body.grad_color;
 800b3e2:	9b04      	ldr	r3, [sp, #16]
 800b3e4:	3101      	adds	r1, #1
 800b3e6:	889b      	ldrh	r3, [r3, #4]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800b3e8:	0005      	movs	r5, r0
    lv_color_t gcolor = style->body.grad_color;
 800b3ea:	9307      	str	r3, [sp, #28]
    return area_p->y2 - area_p->y1 + 1;
 800b3ec:	88fb      	ldrh	r3, [r7, #6]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	1a9b      	subs	r3, r3, r2
 800b3f2:	b21e      	sxth	r6, r3
    return area_p->x2 - area_p->x1 + 1;
 800b3f4:	883b      	ldrh	r3, [r7, #0]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800b3f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b3f8:	1ac9      	subs	r1, r1, r3
 800b3fa:	9b04      	ldr	r3, [sp, #16]
 800b3fc:	b209      	sxth	r1, r1
 800b3fe:	7a1b      	ldrb	r3, [r3, #8]
 800b400:	2aff      	cmp	r2, #255	; 0xff
 800b402:	d001      	beq.n	800b408 <lv_draw_rect+0x628>
 800b404:	f000 fbe9 	bl	800bbda <lv_draw_rect+0xdfa>
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800b408:	0032      	movs	r2, r6
 800b40a:	0020      	movs	r0, r4
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800b40c:	9306      	str	r3, [sp, #24]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800b40e:	f7ff fca5 	bl	800ad5c <lv_draw_cont_radius_corr>
    if(radius > height / 2) return;
 800b412:	0ff3      	lsrs	r3, r6, #31
 800b414:	199b      	adds	r3, r3, r6
 800b416:	105b      	asrs	r3, r3, #1
 800b418:	4298      	cmp	r0, r3
 800b41a:	dc29      	bgt.n	800b470 <lv_draw_rect+0x690>
    work_area.x1 = coords->x1;
 800b41c:	883b      	ldrh	r3, [r7, #0]
 800b41e:	aa28      	add	r2, sp, #160	; 0xa0
 800b420:	8013      	strh	r3, [r2, #0]
    work_area.x2 = coords->x2;
 800b422:	88bb      	ldrh	r3, [r7, #4]
 800b424:	9904      	ldr	r1, [sp, #16]
 800b426:	8093      	strh	r3, [r2, #4]
 800b428:	887b      	ldrh	r3, [r7, #2]
 800b42a:	88fc      	ldrh	r4, [r7, #6]
 800b42c:	9308      	str	r3, [sp, #32]
 800b42e:	2306      	movs	r3, #6
 800b430:	5ec9      	ldrsh	r1, [r1, r3]
    if(mcolor.full == gcolor.full) {
 800b432:	9b05      	ldr	r3, [sp, #20]
 800b434:	469c      	mov	ip, r3
 800b436:	9b07      	ldr	r3, [sp, #28]
 800b438:	459c      	cmp	ip, r3
 800b43a:	d001      	beq.n	800b440 <lv_draw_rect+0x660>
 800b43c:	f000 fbd7 	bl	800bbee <lv_draw_rect+0xe0e>
        work_area.y1 = coords->y1 + radius;
 800b440:	9b08      	ldr	r3, [sp, #32]
        work_area.y2 = coords->y2 - radius;
 800b442:	1a24      	subs	r4, r4, r0
        work_area.y1 = coords->y1 + radius;
 800b444:	18c3      	adds	r3, r0, r3
 800b446:	b29b      	uxth	r3, r3
        work_area.y2 = coords->y2 - radius;
 800b448:	b2a4      	uxth	r4, r4
        work_area.y1 = coords->y1 + radius;
 800b44a:	8053      	strh	r3, [r2, #2]
        work_area.y2 = coords->y2 - radius;
 800b44c:	80d4      	strh	r4, [r2, #6]
        if(style->body.radius != 0) {
 800b44e:	2900      	cmp	r1, #0
 800b450:	d007      	beq.n	800b462 <lv_draw_rect+0x682>
            if(aa) {
 800b452:	2d00      	cmp	r5, #0
 800b454:	d101      	bne.n	800b45a <lv_draw_rect+0x67a>
 800b456:	f000 fbc5 	bl	800bbe4 <lv_draw_rect+0xe04>
                work_area.y1 += 2;
 800b45a:	3302      	adds	r3, #2
 800b45c:	8053      	strh	r3, [r2, #2]
                work_area.y2 -= 2;
 800b45e:	3c02      	subs	r4, #2
                work_area.y2 -= 1;
 800b460:	80d4      	strh	r4, [r2, #6]
        lv_draw_fill(&work_area, mask, mcolor, opa);
 800b462:	466a      	mov	r2, sp
 800b464:	9b06      	ldr	r3, [sp, #24]
 800b466:	8a92      	ldrh	r2, [r2, #20]
 800b468:	9903      	ldr	r1, [sp, #12]
 800b46a:	a828      	add	r0, sp, #160	; 0xa0
 800b46c:	f7fe ff5c 	bl	800a328 <lv_draw_fill>
        if(style->body.radius != 0) {
 800b470:	9b04      	ldr	r3, [sp, #16]
 800b472:	2406      	movs	r4, #6
 800b474:	5f1c      	ldrsh	r4, [r3, r4]
 800b476:	2c00      	cmp	r4, #0
 800b478:	d100      	bne.n	800b47c <lv_draw_rect+0x69c>
 800b47a:	e18f      	b.n	800b79c <lv_draw_rect+0x9bc>
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800b47c:	f7fe f836 	bl	80094ec <lv_refr_get_disp_refreshing>
 800b480:	f002 f8d0 	bl	800d624 <lv_disp_get_antialiasing>
    lv_color_t mcolor = style->body.main_color;
 800b484:	9b04      	ldr	r3, [sp, #16]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800b486:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    lv_color_t mcolor = style->body.main_color;
 800b488:	885b      	ldrh	r3, [r3, #2]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800b48a:	9018      	str	r0, [sp, #96]	; 0x60
    lv_color_t mcolor = style->body.main_color;
 800b48c:	9305      	str	r3, [sp, #20]
    lv_color_t gcolor = style->body.grad_color;
 800b48e:	9b04      	ldr	r3, [sp, #16]
    uint16_t radius = style->body.radius;
 800b490:	b2a4      	uxth	r4, r4
    lv_color_t gcolor = style->body.grad_color;
 800b492:	889b      	ldrh	r3, [r3, #4]
 800b494:	9306      	str	r3, [sp, #24]
 800b496:	9b04      	ldr	r3, [sp, #16]
 800b498:	7a1b      	ldrb	r3, [r3, #8]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800b49a:	2aff      	cmp	r2, #255	; 0xff
 800b49c:	d001      	beq.n	800b4a2 <lv_draw_rect+0x6c2>
 800b49e:	f000 fbdb 	bl	800bc58 <lv_draw_rect+0xe78>
 800b4a2:	9307      	str	r3, [sp, #28]
    return area_p->y2 - area_p->y1 + 1;
 800b4a4:	88fb      	ldrh	r3, [r7, #6]
 800b4a6:	887a      	ldrh	r2, [r7, #2]
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	1a9b      	subs	r3, r3, r2
 800b4ac:	b21b      	sxth	r3, r3
    return area_p->x2 - area_p->x1 + 1;
 800b4ae:	88b9      	ldrh	r1, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 800b4b0:	9308      	str	r3, [sp, #32]
    return area_p->x2 - area_p->x1 + 1;
 800b4b2:	883b      	ldrh	r3, [r7, #0]
 800b4b4:	3101      	adds	r1, #1
 800b4b6:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800b4b8:	b209      	sxth	r1, r1
 800b4ba:	9a08      	ldr	r2, [sp, #32]
 800b4bc:	0020      	movs	r0, r4
 800b4be:	f7ff fc4d 	bl	800ad5c <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + aa;
 800b4c2:	2260      	movs	r2, #96	; 0x60
 800b4c4:	466b      	mov	r3, sp
 800b4c6:	189b      	adds	r3, r3, r2
 800b4c8:	881b      	ldrh	r3, [r3, #0]
 800b4ca:	883e      	ldrh	r6, [r7, #0]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800b4cc:	900c      	str	r0, [sp, #48]	; 0x30
    lt_origo.x = coords->x1 + radius + aa;
 800b4ce:	199e      	adds	r6, r3, r6
 800b4d0:	1986      	adds	r6, r0, r6
 800b4d2:	b2b2      	uxth	r2, r6
 800b4d4:	9209      	str	r2, [sp, #36]	; 0x24
    lt_origo.y = coords->y1 + radius + aa;
 800b4d6:	887c      	ldrh	r4, [r7, #2]
 800b4d8:	191c      	adds	r4, r3, r4
 800b4da:	1904      	adds	r4, r0, r4
 800b4dc:	b2a2      	uxth	r2, r4
 800b4de:	920d      	str	r2, [sp, #52]	; 0x34
 800b4e0:	466a      	mov	r2, sp
 800b4e2:	2134      	movs	r1, #52	; 0x34
 800b4e4:	5e52      	ldrsh	r2, [r2, r1]
    lv_circ_init(&cir, &cir_tmp, radius);
 800b4e6:	ac20      	add	r4, sp, #128	; 0x80
    lt_origo.y = coords->y1 + radius + aa;
 800b4e8:	9219      	str	r2, [sp, #100]	; 0x64
    lb_origo.y = coords->y2 - radius - aa;
 800b4ea:	88fa      	ldrh	r2, [r7, #6]
 800b4ec:	1a12      	subs	r2, r2, r0
 800b4ee:	1ad2      	subs	r2, r2, r3
 800b4f0:	b292      	uxth	r2, r2
 800b4f2:	920e      	str	r2, [sp, #56]	; 0x38
 800b4f4:	466a      	mov	r2, sp
 800b4f6:	2138      	movs	r1, #56	; 0x38
 800b4f8:	5e52      	ldrsh	r2, [r2, r1]
    lv_circ_init(&cir, &cir_tmp, radius);
 800b4fa:	a91f      	add	r1, sp, #124	; 0x7c
    lb_origo.y = coords->y2 - radius - aa;
 800b4fc:	921a      	str	r2, [sp, #104]	; 0x68
    rt_origo.x = coords->x2 - radius - aa;
 800b4fe:	88bd      	ldrh	r5, [r7, #4]
 800b500:	1a2d      	subs	r5, r5, r0
 800b502:	1aeb      	subs	r3, r5, r3
 800b504:	b29b      	uxth	r3, r3
 800b506:	930a      	str	r3, [sp, #40]	; 0x28
    lv_circ_init(&cir, &cir_tmp, radius);
 800b508:	466b      	mov	r3, sp
 800b50a:	2230      	movs	r2, #48	; 0x30
 800b50c:	5e9b      	ldrsh	r3, [r3, r2]
 800b50e:	0020      	movs	r0, r4
 800b510:	001a      	movs	r2, r3
 800b512:	930f      	str	r3, [sp, #60]	; 0x3c
 800b514:	f002 faa8 	bl	800da68 <lv_circ_init>
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800b518:	8862      	ldrh	r2, [r4, #2]
 800b51a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b51c:	8821      	ldrh	r1, [r4, #0]
 800b51e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b520:	189a      	adds	r2, r3, r2
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800b522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800b524:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800b526:	185b      	adds	r3, r3, r1
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800b528:	1a41      	subs	r1, r0, r1
 800b52a:	b21b      	sxth	r3, r3
 800b52c:	b209      	sxth	r1, r1
 800b52e:	9200      	str	r2, [sp, #0]
 800b530:	a826      	add	r0, sp, #152	; 0x98
 800b532:	f002 f9e9 	bl	800d908 <lv_area_set>
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800b536:	8822      	ldrh	r2, [r4, #0]
 800b538:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b53a:	8861      	ldrh	r1, [r4, #2]
 800b53c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b53e:	189a      	adds	r2, r3, r2
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800b540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800b542:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800b544:	185b      	adds	r3, r3, r1
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800b546:	1a41      	subs	r1, r0, r1
 800b548:	b21b      	sxth	r3, r3
 800b54a:	b209      	sxth	r1, r1
 800b54c:	9200      	str	r2, [sp, #0]
 800b54e:	a828      	add	r0, sp, #160	; 0xa0
 800b550:	f002 f9da 	bl	800d908 <lv_area_set>
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800b554:	8862      	ldrh	r2, [r4, #2]
 800b556:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b558:	8821      	ldrh	r1, [r4, #0]
 800b55a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b55c:	1a9a      	subs	r2, r3, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800b55e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800b560:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800b562:	185b      	adds	r3, r3, r1
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800b564:	1a41      	subs	r1, r0, r1
 800b566:	b21b      	sxth	r3, r3
 800b568:	b209      	sxth	r1, r1
 800b56a:	9200      	str	r2, [sp, #0]
 800b56c:	a824      	add	r0, sp, #144	; 0x90
 800b56e:	f002 f9cb 	bl	800d908 <lv_area_set>
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800b572:	8822      	ldrh	r2, [r4, #0]
 800b574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b576:	8861      	ldrh	r1, [r4, #2]
 800b578:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b57a:	1a9a      	subs	r2, r3, r2
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800b57c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800b57e:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800b580:	185b      	adds	r3, r3, r1
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800b582:	1a41      	subs	r1, r0, r1
 800b584:	b21b      	sxth	r3, r3
 800b586:	b209      	sxth	r1, r1
 800b588:	9200      	str	r2, [sp, #0]
 800b58a:	a822      	add	r0, sp, #136	; 0x88
 800b58c:	f002 f9bc 	bl	800d908 <lv_area_set>
    lv_coord_t out_y_seg_start = 0;
 800b590:	2300      	movs	r3, #0
 800b592:	9310      	str	r3, [sp, #64]	; 0x40
    while(lv_circ_cont(&cir)) {
 800b594:	ac20      	add	r4, sp, #128	; 0x80
 800b596:	0020      	movs	r0, r4
 800b598:	f002 fa6d 	bl	800da76 <lv_circ_cont>
 800b59c:	2800      	cmp	r0, #0
 800b59e:	d000      	beq.n	800b5a2 <lv_draw_rect+0x7c2>
 800b5a0:	e35f      	b.n	800bc62 <lv_draw_rect+0xe82>
    if(mcolor.full == gcolor.full)
 800b5a2:	9b05      	ldr	r3, [sp, #20]
 800b5a4:	9a06      	ldr	r2, [sp, #24]
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d001      	beq.n	800b5ae <lv_draw_rect+0x7ce>
 800b5aa:	f000 fd10 	bl	800bfce <lv_draw_rect+0x11ee>
        act_color = mcolor;
 800b5ae:	466b      	mov	r3, sp
 800b5b0:	8a9a      	ldrh	r2, [r3, #20]
    lv_draw_fill(&edge_top_area, mask, act_color, opa);
 800b5b2:	ac22      	add	r4, sp, #136	; 0x88
 800b5b4:	9b07      	ldr	r3, [sp, #28]
 800b5b6:	9903      	ldr	r1, [sp, #12]
 800b5b8:	0020      	movs	r0, r4
 800b5ba:	f7fe feb5 	bl	800a328 <lv_draw_fill>
    if(edge_top_area.y1 != mid_top_area.y1) {
 800b5be:	ab24      	add	r3, sp, #144	; 0x90
 800b5c0:	2202      	movs	r2, #2
 800b5c2:	5e9b      	ldrsh	r3, [r3, r2]
 800b5c4:	2102      	movs	r1, #2
 800b5c6:	5e62      	ldrsh	r2, [r4, r1]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d00c      	beq.n	800b5e6 <lv_draw_rect+0x806>
        if(mcolor.full == gcolor.full)
 800b5cc:	9a05      	ldr	r2, [sp, #20]
 800b5ce:	9906      	ldr	r1, [sp, #24]
 800b5d0:	428a      	cmp	r2, r1
 800b5d2:	d001      	beq.n	800b5d8 <lv_draw_rect+0x7f8>
 800b5d4:	f000 fd0f 	bl	800bff6 <lv_draw_rect+0x1216>
            act_color = mcolor;
 800b5d8:	466b      	mov	r3, sp
 800b5da:	8a9a      	ldrh	r2, [r3, #20]
        lv_draw_fill(&mid_top_area, mask, act_color, opa);
 800b5dc:	9b07      	ldr	r3, [sp, #28]
 800b5de:	9903      	ldr	r1, [sp, #12]
 800b5e0:	a824      	add	r0, sp, #144	; 0x90
 800b5e2:	f7fe fea1 	bl	800a328 <lv_draw_fill>
    if(mcolor.full == gcolor.full)
 800b5e6:	9b05      	ldr	r3, [sp, #20]
 800b5e8:	9a06      	ldr	r2, [sp, #24]
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d001      	beq.n	800b5f2 <lv_draw_rect+0x812>
 800b5ee:	f000 fd13 	bl	800c018 <lv_draw_rect+0x1238>
        act_color = mcolor;
 800b5f2:	466b      	mov	r3, sp
 800b5f4:	8a9a      	ldrh	r2, [r3, #20]
    lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 800b5f6:	ac26      	add	r4, sp, #152	; 0x98
 800b5f8:	9b07      	ldr	r3, [sp, #28]
 800b5fa:	9903      	ldr	r1, [sp, #12]
 800b5fc:	0020      	movs	r0, r4
 800b5fe:	f7fe fe93 	bl	800a328 <lv_draw_fill>
    if(edge_bot_area.y1 != mid_bot_area.y1) {
 800b602:	ab28      	add	r3, sp, #160	; 0xa0
 800b604:	2202      	movs	r2, #2
 800b606:	5e9b      	ldrsh	r3, [r3, r2]
 800b608:	2102      	movs	r1, #2
 800b60a:	5e62      	ldrsh	r2, [r4, r1]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d00c      	beq.n	800b62a <lv_draw_rect+0x84a>
        if(mcolor.full == gcolor.full)
 800b610:	9a05      	ldr	r2, [sp, #20]
 800b612:	9906      	ldr	r1, [sp, #24]
 800b614:	428a      	cmp	r2, r1
 800b616:	d001      	beq.n	800b61c <lv_draw_rect+0x83c>
 800b618:	f000 fd12 	bl	800c040 <lv_draw_rect+0x1260>
            act_color = mcolor;
 800b61c:	466b      	mov	r3, sp
 800b61e:	8a9a      	ldrh	r2, [r3, #20]
        lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 800b620:	9b07      	ldr	r3, [sp, #28]
 800b622:	9903      	ldr	r1, [sp, #12]
 800b624:	a828      	add	r0, sp, #160	; 0xa0
 800b626:	f7fe fe7f 	bl	800a328 <lv_draw_fill>
    if(aa) {
 800b62a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d100      	bne.n	800b632 <lv_draw_rect+0x852>
 800b630:	e0b4      	b.n	800b79c <lv_draw_rect+0x9bc>
        edge_top_area.x1 = coords->x1 + radius + 2;
 800b632:	883b      	ldrh	r3, [r7, #0]
 800b634:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b636:	3302      	adds	r3, #2
 800b638:	ac22      	add	r4, sp, #136	; 0x88
 800b63a:	18d3      	adds	r3, r2, r3
 800b63c:	8023      	strh	r3, [r4, #0]
        edge_top_area.x2 = coords->x2 - radius - 2;
 800b63e:	88bb      	ldrh	r3, [r7, #4]
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 800b640:	0020      	movs	r0, r4
        edge_top_area.x2 = coords->x2 - radius - 2;
 800b642:	3b02      	subs	r3, #2
 800b644:	1a9b      	subs	r3, r3, r2
 800b646:	80a3      	strh	r3, [r4, #4]
        edge_top_area.y1 = coords->y1;
 800b648:	2202      	movs	r2, #2
 800b64a:	5ebb      	ldrsh	r3, [r7, r2]
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 800b64c:	9a04      	ldr	r2, [sp, #16]
        edge_top_area.y1 = coords->y1;
 800b64e:	8063      	strh	r3, [r4, #2]
        edge_top_area.y2 = coords->y1;
 800b650:	80e3      	strh	r3, [r4, #6]
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 800b652:	8852      	ldrh	r2, [r2, #2]
 800b654:	9b07      	ldr	r3, [sp, #28]
 800b656:	9903      	ldr	r1, [sp, #12]
 800b658:	f7fe fe66 	bl	800a328 <lv_draw_fill>
        edge_top_area.y1 = coords->y2;
 800b65c:	2206      	movs	r2, #6
 800b65e:	5ebb      	ldrsh	r3, [r7, r2]
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 800b660:	9a04      	ldr	r2, [sp, #16]
        edge_top_area.y1 = coords->y2;
 800b662:	8063      	strh	r3, [r4, #2]
        edge_top_area.y2 = coords->y2;
 800b664:	80e3      	strh	r3, [r4, #6]
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 800b666:	0020      	movs	r0, r4
 800b668:	9b07      	ldr	r3, [sp, #28]
 800b66a:	8892      	ldrh	r2, [r2, #4]
 800b66c:	9903      	ldr	r1, [sp, #12]
 800b66e:	f7fe fe5b 	bl	800a328 <lv_draw_fill>
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800b672:	2240      	movs	r2, #64	; 0x40
 800b674:	466b      	mov	r3, sp
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800b676:	25ff      	movs	r5, #255	; 0xff
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800b678:	189b      	adds	r3, r3, r2
 800b67a:	881b      	ldrh	r3, [r3, #0]
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800b67c:	9908      	ldr	r1, [sp, #32]
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800b67e:	9313      	str	r3, [sp, #76]	; 0x4c
        out_y_seg_end       = cir.y;
 800b680:	ab20      	add	r3, sp, #128	; 0x80
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800b682:	885b      	ldrh	r3, [r3, #2]
 800b684:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b686:	1a9b      	subs	r3, r3, r2
 800b688:	b21b      	sxth	r3, r3
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800b68a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800b68c:	9316      	str	r3, [sp, #88]	; 0x58
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800b68e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b690:	1a98      	subs	r0, r3, r2
 800b692:	4368      	muls	r0, r5
 800b694:	f7f4 fd64 	bl	8000160 <__udivsi3>
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 800b698:	466b      	mov	r3, sp
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800b69a:	b2c4      	uxtb	r4, r0
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 800b69c:	0022      	movs	r2, r4
 800b69e:	8a99      	ldrh	r1, [r3, #20]
 800b6a0:	8b18      	ldrh	r0, [r3, #24]
 800b6a2:	f7ff fb35 	bl	800ad10 <lv_color_mix>
 800b6a6:	2248      	movs	r2, #72	; 0x48
 800b6a8:	466b      	mov	r3, sp
 800b6aa:	189b      	adds	r3, r3, r2
 800b6ac:	8018      	strh	r0, [r3, #0]
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 800b6ae:	466b      	mov	r3, sp
 800b6b0:	0022      	movs	r2, r4
 800b6b2:	8b19      	ldrh	r1, [r3, #24]
 800b6b4:	8a98      	ldrh	r0, [r3, #20]
 800b6b6:	f7ff fb2b 	bl	800ad10 <lv_color_mix>
 800b6ba:	2244      	movs	r2, #68	; 0x44
 800b6bc:	466b      	mov	r3, sp
        for(i = 0; i < seg_size; i++) {
 800b6be:	2400      	movs	r4, #0
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 800b6c0:	189b      	adds	r3, r3, r2
 800b6c2:	8018      	strh	r0, [r3, #0]
 800b6c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b6c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6c8:	1a9b      	subs	r3, r3, r2
 800b6ca:	435d      	muls	r5, r3
 800b6cc:	9517      	str	r5, [sp, #92]	; 0x5c
        for(i = 0; i < seg_size; i++) {
 800b6ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b6d0:	42a3      	cmp	r3, r4
 800b6d2:	dd01      	ble.n	800b6d8 <lv_draw_rect+0x8f8>
 800b6d4:	f000 fcc5 	bl	800c062 <lv_draw_rect+0x1282>
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 800b6d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b6da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6dc:	1a9b      	subs	r3, r3, r2
 800b6de:	17da      	asrs	r2, r3, #31
 800b6e0:	189b      	adds	r3, r3, r2
 800b6e2:	4053      	eors	r3, r2
 800b6e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d158      	bne.n	800b79c <lv_draw_rect+0x9bc>
            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 800b6ea:	20ff      	movs	r0, #255	; 0xff
 800b6ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6ee:	9908      	ldr	r1, [sp, #32]
 800b6f0:	4358      	muls	r0, r3
 800b6f2:	f7f4 fd35 	bl	8000160 <__udivsi3>
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800b6f6:	466b      	mov	r3, sp
            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 800b6f8:	b2c4      	uxtb	r4, r0
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800b6fa:	0022      	movs	r2, r4
 800b6fc:	8a99      	ldrh	r1, [r3, #20]
 800b6fe:	8b18      	ldrh	r0, [r3, #24]
 800b700:	f7ff fb06 	bl	800ad10 <lv_color_mix>
 800b704:	2244      	movs	r2, #68	; 0x44
 800b706:	466b      	mov	r3, sp
 800b708:	189b      	adds	r3, r3, r2
 800b70a:	8018      	strh	r0, [r3, #0]
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800b70c:	466b      	mov	r3, sp
 800b70e:	0022      	movs	r2, r4
 800b710:	8b19      	ldrh	r1, [r3, #24]
 800b712:	8a98      	ldrh	r0, [r3, #20]
 800b714:	f7ff fafc 	bl	800ad10 <lv_color_mix>
 800b718:	2248      	movs	r2, #72	; 0x48
 800b71a:	466b      	mov	r3, sp
 800b71c:	189b      	adds	r3, r3, r2
 800b71e:	8018      	strh	r0, [r3, #0]
            lv_opa_t aa_opa = opa >> 1;
 800b720:	9b07      	ldr	r3, [sp, #28]
 800b722:	085b      	lsrs	r3, r3, #1
 800b724:	b2db      	uxtb	r3, r3
 800b726:	9305      	str	r3, [sp, #20]
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom,
 800b728:	466b      	mov	r3, sp
 800b72a:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
 800b72c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b72e:	191d      	adds	r5, r3, r4
 800b730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b732:	b22d      	sxth	r5, r5
 800b734:	191b      	adds	r3, r3, r4
 800b736:	b21b      	sxth	r3, r3
 800b738:	9306      	str	r3, [sp, #24]
 800b73a:	9b05      	ldr	r3, [sp, #20]
 800b73c:	9906      	ldr	r1, [sp, #24]
 800b73e:	9300      	str	r3, [sp, #0]
 800b740:	466b      	mov	r3, sp
 800b742:	189b      	adds	r3, r3, r2
 800b744:	881b      	ldrh	r3, [r3, #0]
 800b746:	9a03      	ldr	r2, [sp, #12]
 800b748:	0028      	movs	r0, r5
 800b74a:	f7fe fda4 	bl	800a296 <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask, aa_color_hor_bottom,
 800b74e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b750:	2248      	movs	r2, #72	; 0x48
 800b752:	1b1e      	subs	r6, r3, r4
 800b754:	9b05      	ldr	r3, [sp, #20]
 800b756:	b236      	sxth	r6, r6
 800b758:	9300      	str	r3, [sp, #0]
 800b75a:	466b      	mov	r3, sp
 800b75c:	189b      	adds	r3, r3, r2
 800b75e:	881b      	ldrh	r3, [r3, #0]
 800b760:	9a03      	ldr	r2, [sp, #12]
 800b762:	9906      	ldr	r1, [sp, #24]
 800b764:	0030      	movs	r0, r6
 800b766:	f7fe fd96 	bl	800a296 <lv_draw_px>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask, aa_color_hor_top,
 800b76a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b76c:	2244      	movs	r2, #68	; 0x44
 800b76e:	1b1c      	subs	r4, r3, r4
 800b770:	9b05      	ldr	r3, [sp, #20]
 800b772:	b224      	sxth	r4, r4
 800b774:	9300      	str	r3, [sp, #0]
 800b776:	466b      	mov	r3, sp
 800b778:	189b      	adds	r3, r3, r2
 800b77a:	881b      	ldrh	r3, [r3, #0]
 800b77c:	9a03      	ldr	r2, [sp, #12]
 800b77e:	0021      	movs	r1, r4
 800b780:	0030      	movs	r0, r6
 800b782:	f7fe fd88 	bl	800a296 <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask, aa_color_hor_top,
 800b786:	9b05      	ldr	r3, [sp, #20]
 800b788:	2244      	movs	r2, #68	; 0x44
 800b78a:	9300      	str	r3, [sp, #0]
 800b78c:	466b      	mov	r3, sp
 800b78e:	189b      	adds	r3, r3, r2
 800b790:	881b      	ldrh	r3, [r3, #0]
 800b792:	9a03      	ldr	r2, [sp, #12]
 800b794:	0021      	movs	r1, r4
 800b796:	0028      	movs	r0, r5
 800b798:	f7fe fd7d 	bl	800a296 <lv_draw_px>
    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE &&
 800b79c:	9b04      	ldr	r3, [sp, #16]
 800b79e:	220c      	movs	r2, #12
 800b7a0:	5e9b      	ldrsh	r3, [r3, r2]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d100      	bne.n	800b7a8 <lv_draw_rect+0x9c8>
 800b7a6:	e19c      	b.n	800bae2 <lv_draw_rect+0xd02>
 800b7a8:	9b04      	ldr	r3, [sp, #16]
 800b7aa:	7b9b      	ldrb	r3, [r3, #14]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d100      	bne.n	800b7b2 <lv_draw_rect+0x9d2>
 800b7b0:	e197      	b.n	800bae2 <lv_draw_rect+0xd02>
 800b7b2:	9b04      	ldr	r3, [sp, #16]
 800b7b4:	7bdb      	ldrb	r3, [r3, #15]
 800b7b6:	2b0f      	cmp	r3, #15
 800b7b8:	d800      	bhi.n	800b7bc <lv_draw_rect+0x9dc>
 800b7ba:	e192      	b.n	800bae2 <lv_draw_rect+0xd02>
    uint16_t radius = style->body.radius;
 800b7bc:	9b04      	ldr	r3, [sp, #16]
 800b7be:	88dd      	ldrh	r5, [r3, #6]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800b7c0:	f7fd fe94 	bl	80094ec <lv_refr_get_disp_refreshing>
 800b7c4:	f001 ff2e 	bl	800d624 <lv_disp_get_antialiasing>
 800b7c8:	88b9      	ldrh	r1, [r7, #4]
 800b7ca:	883b      	ldrh	r3, [r7, #0]
 800b7cc:	3101      	adds	r1, #1
    return area_p->y2 - area_p->y1 + 1;
 800b7ce:	88fa      	ldrh	r2, [r7, #6]
    return area_p->x2 - area_p->x1 + 1;
 800b7d0:	1ac9      	subs	r1, r1, r3
    return area_p->y2 - area_p->y1 + 1;
 800b7d2:	887b      	ldrh	r3, [r7, #2]
 800b7d4:	3201      	adds	r2, #1
 800b7d6:	1ad2      	subs	r2, r2, r3
    lv_coord_t bwidth = style->body.border.width;
 800b7d8:	9b04      	ldr	r3, [sp, #16]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800b7da:	9008      	str	r0, [sp, #32]
    lv_coord_t bwidth = style->body.border.width;
 800b7dc:	200c      	movs	r0, #12
 800b7de:	5e1b      	ldrsh	r3, [r3, r0]
 800b7e0:	9804      	ldr	r0, [sp, #16]
    return area_p->x2 - area_p->x1 + 1;
 800b7e2:	b209      	sxth	r1, r1
 800b7e4:	7bc4      	ldrb	r4, [r0, #15]
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800b7e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    return area_p->y2 - area_p->y1 + 1;
 800b7e8:	b212      	sxth	r2, r2
 800b7ea:	28ff      	cmp	r0, #255	; 0xff
 800b7ec:	d001      	beq.n	800b7f2 <lv_draw_rect+0xa12>
 800b7ee:	f000 fcda 	bl	800c1a6 <lv_draw_rect+0x13c6>
 800b7f2:	9405      	str	r4, [sp, #20]
    bwidth--;
 800b7f4:	b29e      	uxth	r6, r3
    lv_border_part_t part = style->body.border.part;
 800b7f6:	9804      	ldr	r0, [sp, #16]
    bwidth--;
 800b7f8:	1e73      	subs	r3, r6, #1
 800b7fa:	b29b      	uxth	r3, r3
    lv_border_part_t part = style->body.border.part;
 800b7fc:	7b84      	ldrb	r4, [r0, #14]
    lv_color_t color      = style->body.border.color;
 800b7fe:	8940      	ldrh	r0, [r0, #10]
    bwidth--;
 800b800:	9307      	str	r3, [sp, #28]
 800b802:	466b      	mov	r3, sp
    lv_color_t color      = style->body.border.color;
 800b804:	9006      	str	r0, [sp, #24]
    bwidth--;
 800b806:	201c      	movs	r0, #28
 800b808:	5e1b      	ldrsh	r3, [r3, r0]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800b80a:	0028      	movs	r0, r5
    bwidth--;
 800b80c:	9309      	str	r3, [sp, #36]	; 0x24
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800b80e:	f7ff faa5 	bl	800ad5c <lv_draw_cont_radius_corr>
    if(radius < bwidth) {
 800b812:	9b09      	ldr	r3, [sp, #36]	; 0x24
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800b814:	0005      	movs	r5, r0
    if(radius < bwidth) {
 800b816:	4298      	cmp	r0, r3
 800b818:	db01      	blt.n	800b81e <lv_draw_rect+0xa3e>
 800b81a:	f000 fcca 	bl	800c1b2 <lv_draw_rect+0x13d2>
        length_corr = bwidth - radius - aa;
 800b81e:	9b07      	ldr	r3, [sp, #28]
 800b820:	9a08      	ldr	r2, [sp, #32]
 800b822:	1a1b      	subs	r3, r3, r0
 800b824:	1a9b      	subs	r3, r3, r2
 800b826:	b21b      	sxth	r3, r3
    lv_coord_t length_corr = 0;
 800b828:	930a      	str	r3, [sp, #40]	; 0x28
    if(style->body.radius == 0) {
 800b82a:	9b04      	ldr	r3, [sp, #16]
 800b82c:	2206      	movs	r2, #6
 800b82e:	5e9a      	ldrsh	r2, [r3, r2]
 800b830:	2302      	movs	r3, #2
 800b832:	2a00      	cmp	r2, #0
 800b834:	d001      	beq.n	800b83a <lv_draw_rect+0xa5a>
 800b836:	f000 fcc3 	bl	800c1c0 <lv_draw_rect+0x13e0>
 800b83a:	4023      	ands	r3, r4
 800b83c:	1e1d      	subs	r5, r3, #0
        if(part & LV_BORDER_TOP) {
 800b83e:	d010      	beq.n	800b862 <lv_draw_rect+0xa82>
            work_area.x1 = coords->x1;
 800b840:	883b      	ldrh	r3, [r7, #0]
 800b842:	a828      	add	r0, sp, #160	; 0xa0
 800b844:	8003      	strh	r3, [r0, #0]
            work_area.x2 = coords->x2;
 800b846:	88bb      	ldrh	r3, [r7, #4]
            lv_draw_fill(&work_area, mask, color, opa);
 800b848:	9903      	ldr	r1, [sp, #12]
            work_area.x2 = coords->x2;
 800b84a:	8083      	strh	r3, [r0, #4]
            work_area.y1 = coords->y1;
 800b84c:	2202      	movs	r2, #2
 800b84e:	5ebb      	ldrsh	r3, [r7, r2]
            work_area.y2 = coords->y1 + bwidth;
 800b850:	9a07      	ldr	r2, [sp, #28]
            work_area.y1 = coords->y1;
 800b852:	8043      	strh	r3, [r0, #2]
            work_area.y2 = coords->y1 + bwidth;
 800b854:	18d3      	adds	r3, r2, r3
            lv_draw_fill(&work_area, mask, color, opa);
 800b856:	466a      	mov	r2, sp
            work_area.y2 = coords->y1 + bwidth;
 800b858:	80c3      	strh	r3, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800b85a:	8b12      	ldrh	r2, [r2, #24]
 800b85c:	9b05      	ldr	r3, [sp, #20]
 800b85e:	f7fe fd63 	bl	800a328 <lv_draw_fill>
        if(part & LV_BORDER_RIGHT) {
 800b862:	0723      	lsls	r3, r4, #28
 800b864:	d51a      	bpl.n	800b89c <lv_draw_rect+0xabc>
            work_area.x1 = coords->x2 - bwidth;
 800b866:	2204      	movs	r2, #4
 800b868:	5ebb      	ldrsh	r3, [r7, r2]
 800b86a:	9a07      	ldr	r2, [sp, #28]
 800b86c:	a828      	add	r0, sp, #160	; 0xa0
 800b86e:	1a9a      	subs	r2, r3, r2
            work_area.x2 = coords->x2;
 800b870:	8083      	strh	r3, [r0, #4]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800b872:	002b      	movs	r3, r5
 800b874:	1e59      	subs	r1, r3, #1
 800b876:	418b      	sbcs	r3, r1
            work_area.x1 = coords->x2 - bwidth;
 800b878:	8002      	strh	r2, [r0, #0]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800b87a:	887a      	ldrh	r2, [r7, #2]
 800b87c:	425b      	negs	r3, r3
 800b87e:	4033      	ands	r3, r6
 800b880:	18d3      	adds	r3, r2, r3
 800b882:	8043      	strh	r3, [r0, #2]
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800b884:	07e3      	lsls	r3, r4, #31
 800b886:	88fa      	ldrh	r2, [r7, #6]
 800b888:	17db      	asrs	r3, r3, #31
 800b88a:	4033      	ands	r3, r6
 800b88c:	1ad3      	subs	r3, r2, r3
            lv_draw_fill(&work_area, mask, color, opa);
 800b88e:	466a      	mov	r2, sp
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800b890:	80c3      	strh	r3, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800b892:	8b12      	ldrh	r2, [r2, #24]
 800b894:	9b05      	ldr	r3, [sp, #20]
 800b896:	9903      	ldr	r1, [sp, #12]
 800b898:	f7fe fd46 	bl	800a328 <lv_draw_fill>
        if(part & LV_BORDER_LEFT) {
 800b89c:	0763      	lsls	r3, r4, #29
 800b89e:	d519      	bpl.n	800b8d4 <lv_draw_rect+0xaf4>
            work_area.x1 = coords->x1;
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	5ebb      	ldrsh	r3, [r7, r2]
            work_area.x2 = coords->x1 + bwidth;
 800b8a4:	9a07      	ldr	r2, [sp, #28]
            work_area.x1 = coords->x1;
 800b8a6:	a828      	add	r0, sp, #160	; 0xa0
 800b8a8:	8003      	strh	r3, [r0, #0]
            work_area.x2 = coords->x1 + bwidth;
 800b8aa:	18d3      	adds	r3, r2, r3
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800b8ac:	1e6a      	subs	r2, r5, #1
 800b8ae:	4195      	sbcs	r5, r2
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800b8b0:	07e2      	lsls	r2, r4, #31
 800b8b2:	17d2      	asrs	r2, r2, #31
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800b8b4:	426d      	negs	r5, r5
 800b8b6:	4035      	ands	r5, r6
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800b8b8:	4016      	ands	r6, r2
            lv_draw_fill(&work_area, mask, color, opa);
 800b8ba:	466a      	mov	r2, sp
            work_area.x2 = coords->x1 + bwidth;
 800b8bc:	8083      	strh	r3, [r0, #4]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800b8be:	887b      	ldrh	r3, [r7, #2]
            lv_draw_fill(&work_area, mask, color, opa);
 800b8c0:	8b12      	ldrh	r2, [r2, #24]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800b8c2:	195d      	adds	r5, r3, r5
 800b8c4:	8045      	strh	r5, [r0, #2]
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800b8c6:	88fb      	ldrh	r3, [r7, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800b8c8:	9903      	ldr	r1, [sp, #12]
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800b8ca:	1b9b      	subs	r3, r3, r6
 800b8cc:	80c3      	strh	r3, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800b8ce:	9b05      	ldr	r3, [sp, #20]
 800b8d0:	f7fe fd2a 	bl	800a328 <lv_draw_fill>
        if(part & LV_BORDER_BOTTOM) {
 800b8d4:	07e3      	lsls	r3, r4, #31
 800b8d6:	d510      	bpl.n	800b8fa <lv_draw_rect+0xb1a>
            work_area.x1 = coords->x1;
 800b8d8:	883b      	ldrh	r3, [r7, #0]
 800b8da:	a828      	add	r0, sp, #160	; 0xa0
 800b8dc:	8003      	strh	r3, [r0, #0]
            work_area.x2 = coords->x2;
 800b8de:	88bb      	ldrh	r3, [r7, #4]
 800b8e0:	8083      	strh	r3, [r0, #4]
            work_area.y1 = coords->y2 - bwidth;
 800b8e2:	2206      	movs	r2, #6
 800b8e4:	5ebb      	ldrsh	r3, [r7, r2]
 800b8e6:	9a07      	ldr	r2, [sp, #28]
            work_area.y2 = coords->y2;
 800b8e8:	80c3      	strh	r3, [r0, #6]
            work_area.y1 = coords->y2 - bwidth;
 800b8ea:	1a9a      	subs	r2, r3, r2
 800b8ec:	8042      	strh	r2, [r0, #2]
            lv_draw_fill(&work_area, mask, color, opa);
 800b8ee:	466a      	mov	r2, sp
 800b8f0:	9b05      	ldr	r3, [sp, #20]
 800b8f2:	8b12      	ldrh	r2, [r2, #24]
 800b8f4:	9903      	ldr	r1, [sp, #12]
 800b8f6:	f7fe fd17 	bl	800a328 <lv_draw_fill>
        if(style->body.radius != 0) {
 800b8fa:	9b04      	ldr	r3, [sp, #16]
 800b8fc:	2506      	movs	r5, #6
 800b8fe:	5f5d      	ldrsh	r5, [r3, r5]
 800b900:	2d00      	cmp	r5, #0
 800b902:	d100      	bne.n	800b906 <lv_draw_rect+0xb26>
 800b904:	e0ed      	b.n	800bae2 <lv_draw_rect+0xd02>
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800b906:	f7fd fdf1 	bl	80094ec <lv_refr_get_disp_refreshing>
 800b90a:	f001 fe8b 	bl	800d624 <lv_disp_get_antialiasing>
    lv_color_t color      = style->body.border.color;
 800b90e:	466a      	mov	r2, sp
    lv_coord_t bwidth     = style->body.border.width;
 800b910:	9b04      	ldr	r3, [sp, #16]
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800b912:	9014      	str	r0, [sp, #80]	; 0x50
    lv_coord_t bwidth     = style->body.border.width;
 800b914:	240c      	movs	r4, #12
 800b916:	5f1c      	ldrsh	r4, [r3, r4]
    lv_color_t color      = style->body.border.color;
 800b918:	9b04      	ldr	r3, [sp, #16]
    uint16_t radius       = style->body.radius;
 800b91a:	b2ad      	uxth	r5, r5
    lv_color_t color      = style->body.border.color;
 800b91c:	895b      	ldrh	r3, [r3, #10]
 800b91e:	8713      	strh	r3, [r2, #56]	; 0x38
    lv_border_part_t part = style->body.border.part;
 800b920:	9b04      	ldr	r3, [sp, #16]
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800b922:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    lv_border_part_t part = style->body.border.part;
 800b924:	7b9b      	ldrb	r3, [r3, #14]
 800b926:	9305      	str	r3, [sp, #20]
 800b928:	9b04      	ldr	r3, [sp, #16]
 800b92a:	7bdb      	ldrb	r3, [r3, #15]
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800b92c:	2aff      	cmp	r2, #255	; 0xff
 800b92e:	d001      	beq.n	800b934 <lv_draw_rect+0xb54>
 800b930:	f000 fd76 	bl	800c420 <lv_draw_rect+0x1640>
 800b934:	930b      	str	r3, [sp, #44]	; 0x2c
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800b936:	9b14      	ldr	r3, [sp, #80]	; 0x50
    bwidth--;
 800b938:	b2a4      	uxth	r4, r4
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d001      	beq.n	800b942 <lv_draw_rect+0xb62>
 800b93e:	f000 fd74 	bl	800c42a <lv_draw_rect+0x164a>
    bwidth--;
 800b942:	3c01      	subs	r4, #1
 800b944:	88fa      	ldrh	r2, [r7, #6]
 800b946:	887b      	ldrh	r3, [r7, #2]
    return area_p->x2 - area_p->x1 + 1;
 800b948:	88b9      	ldrh	r1, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 800b94a:	3201      	adds	r2, #1
 800b94c:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 800b94e:	883b      	ldrh	r3, [r7, #0]
 800b950:	3101      	adds	r1, #1
 800b952:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800b954:	b209      	sxth	r1, r1
 800b956:	b212      	sxth	r2, r2
 800b958:	0028      	movs	r0, r5
 800b95a:	f7ff f9ff 	bl	800ad5c <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + aa;
 800b95e:	2250      	movs	r2, #80	; 0x50
 800b960:	466b      	mov	r3, sp
 800b962:	189b      	adds	r3, r3, r2
 800b964:	881b      	ldrh	r3, [r3, #0]
 800b966:	883a      	ldrh	r2, [r7, #0]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800b968:	0005      	movs	r5, r0
    lt_origo.x = coords->x1 + radius + aa;
 800b96a:	189a      	adds	r2, r3, r2
 800b96c:	1882      	adds	r2, r0, r2
 800b96e:	b292      	uxth	r2, r2
 800b970:	9208      	str	r2, [sp, #32]
    lt_origo.y = coords->y1 + radius + aa;
 800b972:	887a      	ldrh	r2, [r7, #2]
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800b974:	b2a4      	uxth	r4, r4
    lt_origo.y = coords->y1 + radius + aa;
 800b976:	189a      	adds	r2, r3, r2
 800b978:	1882      	adds	r2, r0, r2
 800b97a:	b292      	uxth	r2, r2
 800b97c:	9206      	str	r2, [sp, #24]
 800b97e:	466a      	mov	r2, sp
 800b980:	2118      	movs	r1, #24
 800b982:	5e52      	ldrsh	r2, [r2, r1]
    lv_coord_t radius_in = radius - bwidth;
 800b984:	1b2c      	subs	r4, r5, r4
    lt_origo.y = coords->y1 + radius + aa;
 800b986:	9215      	str	r2, [sp, #84]	; 0x54
    lb_origo.y = coords->y2 - radius - aa;
 800b988:	88fa      	ldrh	r2, [r7, #6]
 800b98a:	1a12      	subs	r2, r2, r0
 800b98c:	1ad2      	subs	r2, r2, r3
 800b98e:	b292      	uxth	r2, r2
 800b990:	9207      	str	r2, [sp, #28]
 800b992:	466a      	mov	r2, sp
 800b994:	211c      	movs	r1, #28
 800b996:	5e52      	ldrsh	r2, [r2, r1]
    lv_circ_init(&cir_out, &tmp_out, radius);
 800b998:	a920      	add	r1, sp, #128	; 0x80
    lb_origo.y = coords->y2 - radius - aa;
 800b99a:	9216      	str	r2, [sp, #88]	; 0x58
    rt_origo.x = coords->x2 - radius - aa;
 800b99c:	88ba      	ldrh	r2, [r7, #4]
 800b99e:	1a12      	subs	r2, r2, r0
 800b9a0:	1ad3      	subs	r3, r2, r3
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	9309      	str	r3, [sp, #36]	; 0x24
    lv_circ_init(&cir_out, &tmp_out, radius);
 800b9a6:	b203      	sxth	r3, r0
 800b9a8:	001a      	movs	r2, r3
 800b9aa:	a824      	add	r0, sp, #144	; 0x90
 800b9ac:	930c      	str	r3, [sp, #48]	; 0x30
 800b9ae:	f002 f85b 	bl	800da68 <lv_circ_init>
    lv_coord_t radius_in = radius - bwidth;
 800b9b2:	b223      	sxth	r3, r4
 800b9b4:	930a      	str	r3, [sp, #40]	; 0x28
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 800b9b6:	466b      	mov	r3, sp
 800b9b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b9ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	da00      	bge.n	800b9c2 <lv_draw_rect+0xbe2>
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	b212      	sxth	r2, r2
 800b9c4:	a922      	add	r1, sp, #136	; 0x88
 800b9c6:	a826      	add	r0, sp, #152	; 0x98
 800b9c8:	f002 f84e 	bl	800da68 <lv_circ_init>
    lv_coord_t in_y_seg_start = 0;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	9311      	str	r3, [sp, #68]	; 0x44
    lv_coord_t out_y_seg_start = 0;
 800b9d0:	9313      	str	r3, [sp, #76]	; 0x4c
    while(cir_out.y <= cir_out.x) {
 800b9d2:	ab24      	add	r3, sp, #144	; 0x90
 800b9d4:	2102      	movs	r1, #2
 800b9d6:	5e5a      	ldrsh	r2, [r3, r1]
 800b9d8:	9210      	str	r2, [sp, #64]	; 0x40
 800b9da:	2200      	movs	r2, #0
 800b9dc:	5e9a      	ldrsh	r2, [r3, r2]
 800b9de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	db01      	blt.n	800b9e8 <lv_draw_rect+0xc08>
 800b9e4:	f000 fd24 	bl	800c430 <lv_draw_rect+0x1650>
    if(aa) {
 800b9e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d100      	bne.n	800b9f0 <lv_draw_rect+0xc10>
 800b9ee:	e078      	b.n	800bae2 <lv_draw_rect+0xd02>
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800b9f0:	466b      	mov	r3, sp
 800b9f2:	224c      	movs	r2, #76	; 0x4c
 800b9f4:	189b      	adds	r3, r3, r2
 800b9f6:	881d      	ldrh	r5, [r3, #0]
 800b9f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9fa:	1b5b      	subs	r3, r3, r5
 800b9fc:	b21b      	sxth	r3, r3
 800b9fe:	930e      	str	r3, [sp, #56]	; 0x38
        for(i = 0; i < seg_size; i++) {
 800ba00:	2300      	movs	r3, #0
 800ba02:	930d      	str	r3, [sp, #52]	; 0x34
 800ba04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	dd01      	ble.n	800ba10 <lv_draw_rect+0xc30>
 800ba0c:	f000 ffa6 	bl	800c95c <lv_draw_rect+0x1b7c>
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 800ba10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ba12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba14:	1a9b      	subs	r3, r3, r2
 800ba16:	17da      	asrs	r2, r3, #31
 800ba18:	189b      	adds	r3, r3, r2
 800ba1a:	4053      	eors	r3, r2
 800ba1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d14e      	bne.n	800bac0 <lv_draw_rect+0xce0>
            lv_opa_t aa_opa = opa >> 1;
 800ba22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800ba24:	9a05      	ldr	r2, [sp, #20]
            lv_opa_t aa_opa = opa >> 1;
 800ba26:	085c      	lsrs	r4, r3, #1
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800ba28:	2309      	movs	r3, #9
            lv_opa_t aa_opa = opa >> 1;
 800ba2a:	b2e4      	uxtb	r4, r4
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800ba2c:	4013      	ands	r3, r2
 800ba2e:	2b09      	cmp	r3, #9
 800ba30:	d10d      	bne.n	800ba4e <lv_draw_rect+0xc6e>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask,
 800ba32:	466b      	mov	r3, sp
 800ba34:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 800ba36:	9b07      	ldr	r3, [sp, #28]
 800ba38:	9400      	str	r4, [sp, #0]
 800ba3a:	1819      	adds	r1, r3, r0
 800ba3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba3e:	b209      	sxth	r1, r1
 800ba40:	1818      	adds	r0, r3, r0
 800ba42:	9b04      	ldr	r3, [sp, #16]
 800ba44:	b200      	sxth	r0, r0
 800ba46:	895b      	ldrh	r3, [r3, #10]
 800ba48:	9a03      	ldr	r2, [sp, #12]
 800ba4a:	f7fe fc24 	bl	800a296 <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800ba4e:	2305      	movs	r3, #5
 800ba50:	9a05      	ldr	r2, [sp, #20]
 800ba52:	4013      	ands	r3, r2
 800ba54:	2b05      	cmp	r3, #5
 800ba56:	d10d      	bne.n	800ba74 <lv_draw_rect+0xc94>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask,
 800ba58:	466b      	mov	r3, sp
 800ba5a:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 800ba5c:	9b07      	ldr	r3, [sp, #28]
 800ba5e:	9400      	str	r4, [sp, #0]
 800ba60:	1819      	adds	r1, r3, r0
 800ba62:	9b08      	ldr	r3, [sp, #32]
 800ba64:	b209      	sxth	r1, r1
 800ba66:	1a18      	subs	r0, r3, r0
 800ba68:	9b04      	ldr	r3, [sp, #16]
 800ba6a:	b200      	sxth	r0, r0
 800ba6c:	895b      	ldrh	r3, [r3, #10]
 800ba6e:	9a03      	ldr	r2, [sp, #12]
 800ba70:	f7fe fc11 	bl	800a296 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800ba74:	2306      	movs	r3, #6
 800ba76:	9a05      	ldr	r2, [sp, #20]
 800ba78:	4013      	ands	r3, r2
 800ba7a:	2b06      	cmp	r3, #6
 800ba7c:	d10d      	bne.n	800ba9a <lv_draw_rect+0xcba>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask,
 800ba7e:	466b      	mov	r3, sp
 800ba80:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 800ba82:	9b06      	ldr	r3, [sp, #24]
 800ba84:	9400      	str	r4, [sp, #0]
 800ba86:	1a19      	subs	r1, r3, r0
 800ba88:	9b08      	ldr	r3, [sp, #32]
 800ba8a:	b209      	sxth	r1, r1
 800ba8c:	1a18      	subs	r0, r3, r0
 800ba8e:	9b04      	ldr	r3, [sp, #16]
 800ba90:	b200      	sxth	r0, r0
 800ba92:	895b      	ldrh	r3, [r3, #10]
 800ba94:	9a03      	ldr	r2, [sp, #12]
 800ba96:	f7fe fbfe 	bl	800a296 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800ba9a:	230a      	movs	r3, #10
 800ba9c:	9a05      	ldr	r2, [sp, #20]
 800ba9e:	4013      	ands	r3, r2
 800baa0:	2b0a      	cmp	r3, #10
 800baa2:	d10d      	bne.n	800bac0 <lv_draw_rect+0xce0>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask,
 800baa4:	466b      	mov	r3, sp
 800baa6:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 800baa8:	9b06      	ldr	r3, [sp, #24]
 800baaa:	9400      	str	r4, [sp, #0]
 800baac:	1a19      	subs	r1, r3, r0
 800baae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bab0:	b209      	sxth	r1, r1
 800bab2:	1818      	adds	r0, r3, r0
 800bab4:	9b04      	ldr	r3, [sp, #16]
 800bab6:	b200      	sxth	r0, r0
 800bab8:	895b      	ldrh	r3, [r3, #10]
 800baba:	9a03      	ldr	r2, [sp, #12]
 800babc:	f7fe fbeb 	bl	800a296 <lv_draw_px>
        seg_size     = in_y_seg_end - in_y_seg_start;
 800bac0:	466b      	mov	r3, sp
 800bac2:	2244      	movs	r2, #68	; 0x44
 800bac4:	189b      	adds	r3, r3, r2
 800bac6:	881d      	ldrh	r5, [r3, #0]
        in_y_seg_end = cir_in.y;
 800bac8:	ab26      	add	r3, sp, #152	; 0x98
        seg_size     = in_y_seg_end - in_y_seg_start;
 800baca:	885b      	ldrh	r3, [r3, #2]
 800bacc:	1b5b      	subs	r3, r3, r5
 800bace:	b21b      	sxth	r3, r3
 800bad0:	930d      	str	r3, [sp, #52]	; 0x34
 800bad2:	2300      	movs	r3, #0
        for(i = 0; i < seg_size; i++) {
 800bad4:	001c      	movs	r4, r3
        seg_size     = in_y_seg_end - in_y_seg_start;
 800bad6:	930c      	str	r3, [sp, #48]	; 0x30
        for(i = 0; i < seg_size; i++) {
 800bad8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bada:	42a3      	cmp	r3, r4
 800badc:	dd01      	ble.n	800bae2 <lv_draw_rect+0xd02>
 800bade:	f000 ffda 	bl	800ca96 <lv_draw_rect+0x1cb6>
}
 800bae2:	b02b      	add	sp, #172	; 0xac
 800bae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 800bae6:	2300      	movs	r3, #0
 800bae8:	5eea      	ldrsh	r2, [r5, r3]
 800baea:	2102      	movs	r1, #2
 800baec:	5e6b      	ldrsh	r3, [r5, r1]
 800baee:	9906      	ldr	r1, [sp, #24]
 800baf0:	005b      	lsls	r3, r3, #1
 800baf2:	525a      	strh	r2, [r3, r1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 800baf4:	2302      	movs	r3, #2
 800baf6:	5eea      	ldrsh	r2, [r5, r3]
 800baf8:	2100      	movs	r1, #0
 800bafa:	5e6b      	ldrsh	r3, [r5, r1]
 800bafc:	9906      	ldr	r1, [sp, #24]
 800bafe:	005b      	lsls	r3, r3, #1
 800bb00:	525a      	strh	r2, [r3, r1]
        lv_circ_next(&circ, &circ_tmp);
 800bb02:	0028      	movs	r0, r5
 800bb04:	a924      	add	r1, sp, #144	; 0x90
 800bb06:	f001 ffc0 	bl	800da8a <lv_circ_next>
 800bb0a:	f7ff fc09 	bl	800b320 <lv_draw_rect+0x540>
        line_1d_blur[col] = (uint32_t)((uint32_t)(swidth - col) * opa / 2) / (swidth);
 800bb0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb10:	9905      	ldr	r1, [sp, #20]
 800bb12:	0858      	lsrs	r0, r3, #1
 800bb14:	f7f4 fb24 	bl	8000160 <__udivsi3>
 800bb18:	9b07      	ldr	r3, [sp, #28]
 800bb1a:	5598      	strb	r0, [r3, r6]
 800bb1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb1e:	3601      	adds	r6, #1
 800bb20:	1b5b      	subs	r3, r3, r5
 800bb22:	930a      	str	r3, [sp, #40]	; 0x28
 800bb24:	f7ff fc0f 	bl	800b346 <lv_draw_rect+0x566>
 800bb28:	466b      	mov	r3, sp
 800bb2a:	8c18      	ldrh	r0, [r3, #32]
 800bb2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        point_l.y = ofs_l.y + curve_x[col];
 800bb2e:	9a06      	ldr	r2, [sp, #24]
 800bb30:	1a1b      	subs	r3, r3, r0
 800bb32:	b21b      	sxth	r3, r3
 800bb34:	9313      	str	r3, [sp, #76]	; 0x4c
 800bb36:	004b      	lsls	r3, r1, #1
 800bb38:	5ad2      	ldrh	r2, [r2, r3]
 800bb3a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800bb3c:	18a4      	adds	r4, r4, r2
 800bb3e:	b2a4      	uxth	r4, r4
 800bb40:	9412      	str	r4, [sp, #72]	; 0x48
 800bb42:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800bb44:	1820      	adds	r0, r4, r0
 800bb46:	b200      	sxth	r0, r0
 800bb48:	900e      	str	r0, [sp, #56]	; 0x38
        int16_t diff = col == 0 ? 0 : curve_x[col - 1] - curve_x[col];
 800bb4a:	1e0c      	subs	r4, r1, #0
 800bb4c:	d005      	beq.n	800bb5a <lv_draw_rect+0xd7a>
 800bb4e:	9906      	ldr	r1, [sp, #24]
 800bb50:	18cb      	adds	r3, r1, r3
 800bb52:	3b02      	subs	r3, #2
 800bb54:	881c      	ldrh	r4, [r3, #0]
 800bb56:	1aa4      	subs	r4, r4, r2
 800bb58:	b2a4      	uxth	r4, r4
 800bb5a:	2600      	movs	r6, #0
 800bb5c:	b224      	sxth	r4, r4
 800bb5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
        for(d = 0; d < swidth; d++) {
 800bb60:	9a05      	ldr	r2, [sp, #20]
 800bb62:	199b      	adds	r3, r3, r6
 800bb64:	b21b      	sxth	r3, r3
 800bb66:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb68:	b2b3      	uxth	r3, r6
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	db03      	blt.n	800bb76 <lv_draw_rect+0xd96>
 800bb6e:	9b08      	ldr	r3, [sp, #32]
 800bb70:	3301      	adds	r3, #1
 800bb72:	f7ff fc04 	bl	800b37e <lv_draw_rect+0x59e>
                px_opa = line_1d_blur[d];
 800bb76:	9a07      	ldr	r2, [sp, #28]
 800bb78:	5cd5      	ldrb	r5, [r2, r3]
            if(diff == 0) {
 800bb7a:	2c00      	cmp	r4, #0
 800bb7c:	d115      	bne.n	800bbaa <lv_draw_rect+0xdca>
            lv_draw_px(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 800bb7e:	9b04      	ldr	r3, [sp, #16]
 800bb80:	9500      	str	r5, [sp, #0]
 800bb82:	8a1b      	ldrh	r3, [r3, #16]
 800bb84:	9a03      	ldr	r2, [sp, #12]
 800bb86:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bb88:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800bb8a:	f7fe fb84 	bl	800a296 <lv_draw_px>
            if(point_r.x > ofs_l.x) {
 800bb8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb92:	4293      	cmp	r3, r2
 800bb94:	da07      	bge.n	800bba6 <lv_draw_rect+0xdc6>
                lv_draw_px(point_r.x, point_r.y, mask, style->body.shadow.color, px_opa);
 800bb96:	9b04      	ldr	r3, [sp, #16]
 800bb98:	9500      	str	r5, [sp, #0]
 800bb9a:	8a1b      	ldrh	r3, [r3, #16]
 800bb9c:	9a03      	ldr	r2, [sp, #12]
 800bb9e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bba0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bba2:	f7fe fb78 	bl	800a296 <lv_draw_px>
 800bba6:	3601      	adds	r6, #1
 800bba8:	e7d9      	b.n	800bb5e <lv_draw_rect+0xd7e>
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
 800bbaa:	1b1b      	subs	r3, r3, r4
 800bbac:	5cd3      	ldrb	r3, [r2, r3]
 800bbae:	18ed      	adds	r5, r5, r3
 800bbb0:	086d      	lsrs	r5, r5, #1
 800bbb2:	e7e4      	b.n	800bb7e <lv_draw_rect+0xd9e>
        lv_draw_fill(&area_mid, mask, style->body.shadow.color, line_1d_blur[d]);
 800bbb4:	9b07      	ldr	r3, [sp, #28]
 800bbb6:	9a04      	ldr	r2, [sp, #16]
 800bbb8:	ad28      	add	r5, sp, #160	; 0xa0
 800bbba:	5d1b      	ldrb	r3, [r3, r4]
 800bbbc:	8a12      	ldrh	r2, [r2, #16]
 800bbbe:	9903      	ldr	r1, [sp, #12]
 800bbc0:	0028      	movs	r0, r5
 800bbc2:	f7fe fbb1 	bl	800a328 <lv_draw_fill>
        area_mid.y1++;
 800bbc6:	886b      	ldrh	r3, [r5, #2]
    for(d = 0; d < swidth; d++) {
 800bbc8:	3401      	adds	r4, #1
        area_mid.y1++;
 800bbca:	3301      	adds	r3, #1
 800bbcc:	806b      	strh	r3, [r5, #2]
        area_mid.y2++;
 800bbce:	88eb      	ldrh	r3, [r5, #6]
    for(d = 0; d < swidth; d++) {
 800bbd0:	b2a4      	uxth	r4, r4
        area_mid.y2++;
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	80eb      	strh	r3, [r5, #6]
 800bbd6:	f7ff fbe8 	bl	800b3aa <lv_draw_rect+0x5ca>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800bbda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bbdc:	4353      	muls	r3, r2
 800bbde:	0a1b      	lsrs	r3, r3, #8
 800bbe0:	f7ff fc12 	bl	800b408 <lv_draw_rect+0x628>
                work_area.y1 += 1;
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	8053      	strh	r3, [r2, #2]
                work_area.y2 -= 1;
 800bbe8:	3c01      	subs	r4, #1
 800bbea:	f7ff fc39 	bl	800b460 <lv_draw_rect+0x680>
        lv_coord_t row_start = coords->y1 + radius;
 800bbee:	9b08      	ldr	r3, [sp, #32]
        lv_coord_t row_end   = coords->y2 - radius;
 800bbf0:	1a24      	subs	r4, r4, r0
        lv_coord_t row_start = coords->y1 + radius;
 800bbf2:	18c3      	adds	r3, r0, r3
 800bbf4:	b29b      	uxth	r3, r3
        lv_coord_t row_end   = coords->y2 - radius;
 800bbf6:	b2a4      	uxth	r4, r4
        if(style->body.radius != 0) {
 800bbf8:	2900      	cmp	r1, #0
 800bbfa:	d123      	bne.n	800bc44 <lv_draw_rect+0xe64>
        lv_coord_t row_start = coords->y1 + radius;
 800bbfc:	b21b      	sxth	r3, r3
                row_end -= 1;
 800bbfe:	b224      	sxth	r4, r4
 800bc00:	1c1d      	adds	r5, r3, #0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	da00      	bge.n	800bc08 <lv_draw_rect+0xe28>
 800bc06:	2500      	movs	r5, #0
 800bc08:	b22d      	sxth	r5, r5
        for(row = row_start; row <= row_end; row++) {
 800bc0a:	42a5      	cmp	r5, r4
 800bc0c:	dd01      	ble.n	800bc12 <lv_draw_rect+0xe32>
 800bc0e:	f7ff fc2f 	bl	800b470 <lv_draw_rect+0x690>
            work_area.y1 = row;
 800bc12:	ab1c      	add	r3, sp, #112	; 0x70
 800bc14:	865d      	strh	r5, [r3, #50]	; 0x32
            work_area.y2 = row;
 800bc16:	86dd      	strh	r5, [r3, #54]	; 0x36
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800bc18:	2306      	movs	r3, #6
 800bc1a:	5ef8      	ldrsh	r0, [r7, r3]
 800bc1c:	23ff      	movs	r3, #255	; 0xff
 800bc1e:	1b40      	subs	r0, r0, r5
 800bc20:	4358      	muls	r0, r3
 800bc22:	0031      	movs	r1, r6
 800bc24:	f7f4 fa9c 	bl	8000160 <__udivsi3>
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 800bc28:	466b      	mov	r3, sp
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800bc2a:	b2c2      	uxtb	r2, r0
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 800bc2c:	8b99      	ldrh	r1, [r3, #28]
 800bc2e:	8a98      	ldrh	r0, [r3, #20]
 800bc30:	f7ff f86e 	bl	800ad10 <lv_color_mix>
            lv_draw_fill(&work_area, mask, act_color, opa);
 800bc34:	9b06      	ldr	r3, [sp, #24]
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 800bc36:	1c02      	adds	r2, r0, #0
            lv_draw_fill(&work_area, mask, act_color, opa);
 800bc38:	9903      	ldr	r1, [sp, #12]
 800bc3a:	a828      	add	r0, sp, #160	; 0xa0
 800bc3c:	f7fe fb74 	bl	800a328 <lv_draw_fill>
 800bc40:	3501      	adds	r5, #1
 800bc42:	e7e1      	b.n	800bc08 <lv_draw_rect+0xe28>
            if(aa) {
 800bc44:	2d00      	cmp	r5, #0
 800bc46:	d003      	beq.n	800bc50 <lv_draw_rect+0xe70>
                row_start += 2;
 800bc48:	3302      	adds	r3, #2
 800bc4a:	b21b      	sxth	r3, r3
                row_end -= 2;
 800bc4c:	3c02      	subs	r4, #2
 800bc4e:	e7d6      	b.n	800bbfe <lv_draw_rect+0xe1e>
                row_start += 1;
 800bc50:	3301      	adds	r3, #1
 800bc52:	b21b      	sxth	r3, r3
                row_end -= 1;
 800bc54:	3c01      	subs	r4, #1
 800bc56:	e7d2      	b.n	800bbfe <lv_draw_rect+0xe1e>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800bc58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bc5a:	4353      	muls	r3, r2
 800bc5c:	0a1b      	lsrs	r3, r3, #8
 800bc5e:	f7ff fc20 	bl	800b4a2 <lv_draw_rect+0x6c2>
        if(aa) {
 800bc62:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d03f      	beq.n	800bce8 <lv_draw_rect+0xf08>
            if(out_x_last != cir.x) {
 800bc68:	2200      	movs	r2, #0
 800bc6a:	5ea3      	ldrsh	r3, [r4, r2]
 800bc6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d03a      	beq.n	800bce8 <lv_draw_rect+0xf08>
                out_y_seg_end       = cir.y;
 800bc72:	2202      	movs	r2, #2
 800bc74:	5ea3      	ldrsh	r3, [r4, r2]
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800bc76:	2240      	movs	r2, #64	; 0x40
                out_y_seg_end       = cir.y;
 800bc78:	931b      	str	r3, [sp, #108]	; 0x6c
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800bc7a:	466b      	mov	r3, sp
 800bc7c:	189b      	adds	r3, r3, r2
 800bc7e:	881b      	ldrh	r3, [r3, #0]
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800bc80:	9908      	ldr	r1, [sp, #32]
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800bc82:	9313      	str	r3, [sp, #76]	; 0x4c
 800bc84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bc86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc88:	1a9b      	subs	r3, r3, r2
 800bc8a:	b21b      	sxth	r3, r3
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800bc8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800bc8e:	9315      	str	r3, [sp, #84]	; 0x54
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800bc90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc92:	1a98      	subs	r0, r3, r2
 800bc94:	23ff      	movs	r3, #255	; 0xff
 800bc96:	4358      	muls	r0, r3
 800bc98:	f7f4 fa62 	bl	8000160 <__udivsi3>
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800bc9c:	466b      	mov	r3, sp
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800bc9e:	b2c4      	uxtb	r4, r0
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800bca0:	0022      	movs	r2, r4
 800bca2:	8a99      	ldrh	r1, [r3, #20]
 800bca4:	8b18      	ldrh	r0, [r3, #24]
 800bca6:	f7ff f833 	bl	800ad10 <lv_color_mix>
 800bcaa:	2244      	movs	r2, #68	; 0x44
 800bcac:	466b      	mov	r3, sp
 800bcae:	189b      	adds	r3, r3, r2
 800bcb0:	8018      	strh	r0, [r3, #0]
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800bcb2:	466b      	mov	r3, sp
 800bcb4:	0022      	movs	r2, r4
 800bcb6:	8b19      	ldrh	r1, [r3, #24]
 800bcb8:	8a98      	ldrh	r0, [r3, #20]
 800bcba:	f7ff f829 	bl	800ad10 <lv_color_mix>
 800bcbe:	2248      	movs	r2, #72	; 0x48
 800bcc0:	466b      	mov	r3, sp
 800bcc2:	189b      	adds	r3, r3, r2
 800bcc4:	8018      	strh	r0, [r3, #0]
 800bcc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bcc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                for(i = 0; i < seg_size; i++) {
 800bcca:	2400      	movs	r4, #0
 800bccc:	1a9b      	subs	r3, r3, r2
 800bcce:	22ff      	movs	r2, #255	; 0xff
 800bcd0:	435a      	muls	r2, r3
 800bcd2:	9217      	str	r2, [sp, #92]	; 0x5c
 800bcd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bcd6:	42a3      	cmp	r3, r4
 800bcd8:	dd00      	ble.n	800bcdc <lv_draw_rect+0xefc>
 800bcda:	e095      	b.n	800be08 <lv_draw_rect+0x1028>
                out_x_last      = cir.x;
 800bcdc:	ab20      	add	r3, sp, #128	; 0x80
 800bcde:	2200      	movs	r2, #0
 800bce0:	5e9b      	ldrsh	r3, [r3, r2]
 800bce2:	930f      	str	r3, [sp, #60]	; 0x3c
                out_y_seg_start = out_y_seg_end;
 800bce4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bce6:	9310      	str	r3, [sp, #64]	; 0x40
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 800bce8:	ab26      	add	r3, sp, #152	; 0x98
 800bcea:	2202      	movs	r2, #2
 800bcec:	5e9b      	ldrsh	r3, [r3, r2]
 800bcee:	9311      	str	r3, [sp, #68]	; 0x44
 800bcf0:	ab20      	add	r3, sp, #128	; 0x80
 800bcf2:	2202      	movs	r2, #2
 800bcf4:	5e9c      	ldrsh	r4, [r3, r2]
 800bcf6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bcf8:	18a6      	adds	r6, r4, r2
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 800bcfa:	aa28      	add	r2, sp, #160	; 0xa0
 800bcfc:	2102      	movs	r1, #2
 800bcfe:	5e52      	ldrsh	r2, [r2, r1]
 800bd00:	9212      	str	r2, [sp, #72]	; 0x48
 800bd02:	2200      	movs	r2, #0
 800bd04:	5e9b      	ldrsh	r3, [r3, r2]
 800bd06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bd08:	18d2      	adds	r2, r2, r3
 800bd0a:	9213      	str	r2, [sp, #76]	; 0x4c
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 800bd0c:	aa24      	add	r2, sp, #144	; 0x90
 800bd0e:	2502      	movs	r5, #2
 800bd10:	5f55      	ldrsh	r5, [r2, r5]
 800bd12:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bd14:	1b14      	subs	r4, r2, r4
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 800bd16:	aa22      	add	r2, sp, #136	; 0x88
 800bd18:	2102      	movs	r1, #2
 800bd1a:	5e51      	ldrsh	r1, [r2, r1]
 800bd1c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bd1e:	1ad3      	subs	r3, r2, r3
 800bd20:	4299      	cmp	r1, r3
 800bd22:	d001      	beq.n	800bd28 <lv_draw_rect+0xf48>
 800bd24:	f000 ff65 	bl	800cbf2 <lv_draw_rect+0x1e12>
        if(mid_top_refr != 0) {
 800bd28:	42a5      	cmp	r5, r4
 800bd2a:	d00b      	beq.n	800bd44 <lv_draw_rect+0xf64>
            if(mcolor.full == gcolor.full)
 800bd2c:	9b05      	ldr	r3, [sp, #20]
 800bd2e:	9a06      	ldr	r2, [sp, #24]
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d000      	beq.n	800bd36 <lv_draw_rect+0xf56>
 800bd34:	e112      	b.n	800bf5c <lv_draw_rect+0x117c>
                act_color = mcolor;
 800bd36:	466b      	mov	r3, sp
 800bd38:	8a9a      	ldrh	r2, [r3, #20]
            lv_draw_fill(&mid_top_area, mask, act_color, opa);
 800bd3a:	9b07      	ldr	r3, [sp, #28]
 800bd3c:	9903      	ldr	r1, [sp, #12]
 800bd3e:	a824      	add	r0, sp, #144	; 0x90
 800bd40:	f7fe faf2 	bl	800a328 <lv_draw_fill>
        if(mid_bot_refr != 0) {
 800bd44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd46:	42b3      	cmp	r3, r6
 800bd48:	d00b      	beq.n	800bd62 <lv_draw_rect+0xf82>
            if(mcolor.full == gcolor.full)
 800bd4a:	9b05      	ldr	r3, [sp, #20]
 800bd4c:	9a06      	ldr	r2, [sp, #24]
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d000      	beq.n	800bd54 <lv_draw_rect+0xf74>
 800bd52:	e116      	b.n	800bf82 <lv_draw_rect+0x11a2>
                act_color = mcolor;
 800bd54:	466b      	mov	r3, sp
 800bd56:	8a9a      	ldrh	r2, [r3, #20]
            lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 800bd58:	9b07      	ldr	r3, [sp, #28]
 800bd5a:	9903      	ldr	r1, [sp, #12]
 800bd5c:	a826      	add	r0, sp, #152	; 0x98
 800bd5e:	f7fe fae3 	bl	800a328 <lv_draw_fill>
        if(edge_bot_refr != 0) {
 800bd62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bd64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d00b      	beq.n	800bd82 <lv_draw_rect+0xfa2>
            if(mcolor.full == gcolor.full)
 800bd6a:	9b05      	ldr	r3, [sp, #20]
 800bd6c:	9a06      	ldr	r2, [sp, #24]
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d000      	beq.n	800bd74 <lv_draw_rect+0xf94>
 800bd72:	e119      	b.n	800bfa8 <lv_draw_rect+0x11c8>
                act_color = mcolor;
 800bd74:	466b      	mov	r3, sp
 800bd76:	8a9a      	ldrh	r2, [r3, #20]
            lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 800bd78:	9b07      	ldr	r3, [sp, #28]
 800bd7a:	9903      	ldr	r1, [sp, #12]
 800bd7c:	a828      	add	r0, sp, #160	; 0xa0
 800bd7e:	f7fe fad3 	bl	800a328 <lv_draw_fill>
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800bd82:	ac20      	add	r4, sp, #128	; 0x80
 800bd84:	8862      	ldrh	r2, [r4, #2]
 800bd86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd88:	8821      	ldrh	r1, [r4, #0]
 800bd8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd8c:	189a      	adds	r2, r3, r2
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800bd8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800bd90:	b212      	sxth	r2, r2
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800bd92:	185b      	adds	r3, r3, r1
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800bd94:	1a41      	subs	r1, r0, r1
 800bd96:	9200      	str	r2, [sp, #0]
 800bd98:	a826      	add	r0, sp, #152	; 0x98
 800bd9a:	b21b      	sxth	r3, r3
 800bd9c:	b209      	sxth	r1, r1
 800bd9e:	f001 fdb3 	bl	800d908 <lv_area_set>
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800bda2:	8822      	ldrh	r2, [r4, #0]
 800bda4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bda6:	8861      	ldrh	r1, [r4, #2]
 800bda8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdaa:	189a      	adds	r2, r3, r2
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800bdac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800bdae:	b212      	sxth	r2, r2
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800bdb0:	185b      	adds	r3, r3, r1
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800bdb2:	1a41      	subs	r1, r0, r1
 800bdb4:	9200      	str	r2, [sp, #0]
 800bdb6:	a828      	add	r0, sp, #160	; 0xa0
 800bdb8:	b21b      	sxth	r3, r3
 800bdba:	b209      	sxth	r1, r1
 800bdbc:	f001 fda4 	bl	800d908 <lv_area_set>
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800bdc0:	8862      	ldrh	r2, [r4, #2]
 800bdc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdc4:	8821      	ldrh	r1, [r4, #0]
 800bdc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdc8:	1a9a      	subs	r2, r3, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800bdca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800bdcc:	b212      	sxth	r2, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800bdce:	185b      	adds	r3, r3, r1
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800bdd0:	1a41      	subs	r1, r0, r1
 800bdd2:	9200      	str	r2, [sp, #0]
 800bdd4:	a824      	add	r0, sp, #144	; 0x90
 800bdd6:	b21b      	sxth	r3, r3
 800bdd8:	b209      	sxth	r1, r1
 800bdda:	f001 fd95 	bl	800d908 <lv_area_set>
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800bdde:	8822      	ldrh	r2, [r4, #0]
 800bde0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bde2:	8861      	ldrh	r1, [r4, #2]
 800bde4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bde6:	1a9a      	subs	r2, r3, r2
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800bde8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800bdea:	b212      	sxth	r2, r2
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800bdec:	185b      	adds	r3, r3, r1
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800bdee:	1a41      	subs	r1, r0, r1
 800bdf0:	b21b      	sxth	r3, r3
 800bdf2:	a822      	add	r0, sp, #136	; 0x88
 800bdf4:	b209      	sxth	r1, r1
 800bdf6:	9200      	str	r2, [sp, #0]
 800bdf8:	f001 fd86 	bl	800d908 <lv_area_set>
        lv_circ_next(&cir, &cir_tmp);
 800bdfc:	a91f      	add	r1, sp, #124	; 0x7c
 800bdfe:	0020      	movs	r0, r4
 800be00:	f001 fe43 	bl	800da8a <lv_circ_next>
 800be04:	f7ff fbc6 	bl	800b594 <lv_draw_rect+0x7b4>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800be08:	9b15      	ldr	r3, [sp, #84]	; 0x54
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800be0a:	9a07      	ldr	r2, [sp, #28]
 800be0c:	0021      	movs	r1, r4
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d100      	bne.n	800be14 <lv_draw_rect+0x1034>
 800be12:	e09b      	b.n	800bf4c <lv_draw_rect+0x116c>
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800be14:	0018      	movs	r0, r3
 800be16:	f7fe ffbf 	bl	800ad98 <antialias_get_opa_circ>
 800be1a:	9010      	str	r0, [sp, #64]	; 0x40
 800be1c:	b2a3      	uxth	r3, r4
 800be1e:	9314      	str	r3, [sp, #80]	; 0x50
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800be20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800be22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be24:	189c      	adds	r4, r3, r2
 800be26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be2a:	191c      	adds	r4, r3, r4
 800be2c:	466b      	mov	r3, sp
 800be2e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800be30:	1c55      	adds	r5, r2, #1
 800be32:	9316      	str	r3, [sp, #88]	; 0x58
 800be34:	195d      	adds	r5, r3, r5
 800be36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be38:	2248      	movs	r2, #72	; 0x48
 800be3a:	9300      	str	r3, [sp, #0]
 800be3c:	466b      	mov	r3, sp
 800be3e:	b224      	sxth	r4, r4
 800be40:	b22d      	sxth	r5, r5
 800be42:	189b      	adds	r3, r3, r2
 800be44:	0029      	movs	r1, r5
 800be46:	0020      	movs	r0, r4
 800be48:	881b      	ldrh	r3, [r3, #0]
 800be4a:	9a03      	ldr	r2, [sp, #12]
 800be4c:	f7fe fa23 	bl	800a296 <lv_draw_px>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800be50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800be54:	0029      	movs	r1, r5
 800be56:	1a9e      	subs	r6, r3, r2
 800be58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be5a:	2248      	movs	r2, #72	; 0x48
 800be5c:	1af6      	subs	r6, r6, r3
 800be5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be60:	b236      	sxth	r6, r6
 800be62:	9300      	str	r3, [sp, #0]
 800be64:	466b      	mov	r3, sp
 800be66:	189b      	adds	r3, r3, r2
 800be68:	0030      	movs	r0, r6
 800be6a:	881b      	ldrh	r3, [r3, #0]
 800be6c:	9a03      	ldr	r2, [sp, #12]
 800be6e:	f7fe fa12 	bl	800a296 <lv_draw_px>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800be72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be74:	2244      	movs	r2, #68	; 0x44
 800be76:	1e5d      	subs	r5, r3, #1
 800be78:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800be7a:	0030      	movs	r0, r6
 800be7c:	1aed      	subs	r5, r5, r3
 800be7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be80:	b22d      	sxth	r5, r5
 800be82:	9300      	str	r3, [sp, #0]
 800be84:	466b      	mov	r3, sp
 800be86:	189b      	adds	r3, r3, r2
 800be88:	0029      	movs	r1, r5
 800be8a:	881b      	ldrh	r3, [r3, #0]
 800be8c:	9a03      	ldr	r2, [sp, #12]
 800be8e:	f7fe fa02 	bl	800a296 <lv_draw_px>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800be92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be94:	2244      	movs	r2, #68	; 0x44
 800be96:	9300      	str	r3, [sp, #0]
 800be98:	466b      	mov	r3, sp
 800be9a:	189b      	adds	r3, r3, r2
 800be9c:	881b      	ldrh	r3, [r3, #0]
 800be9e:	9a03      	ldr	r2, [sp, #12]
 800bea0:	0029      	movs	r1, r5
 800bea2:	0020      	movs	r0, r4
 800bea4:	f7fe f9f7 	bl	800a296 <lv_draw_px>
                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800bea8:	9908      	ldr	r1, [sp, #32]
 800beaa:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800beac:	f7f4 f958 	bl	8000160 <__udivsi3>
 800beb0:	b2c3      	uxtb	r3, r0
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800beb2:	001a      	movs	r2, r3
                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800beb4:	931c      	str	r3, [sp, #112]	; 0x70
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800beb6:	466b      	mov	r3, sp
 800beb8:	8b19      	ldrh	r1, [r3, #24]
 800beba:	8a98      	ldrh	r0, [r3, #20]
 800bebc:	f7fe ff28 	bl	800ad10 <lv_color_mix>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800bec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bec2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bec4:	3301      	adds	r3, #1
 800bec6:	18d3      	adds	r3, r2, r3
 800bec8:	b21b      	sxth	r3, r3
 800beca:	931d      	str	r3, [sp, #116]	; 0x74
 800becc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800bed0:	1c04      	adds	r4, r0, #0
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800bed2:	189e      	adds	r6, r3, r2
 800bed4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bed6:	9a03      	ldr	r2, [sp, #12]
 800bed8:	199e      	adds	r6, r3, r6
 800beda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bedc:	b236      	sxth	r6, r6
 800bede:	0031      	movs	r1, r6
 800bee0:	9300      	str	r3, [sp, #0]
 800bee2:	1c03      	adds	r3, r0, #0
 800bee4:	981d      	ldr	r0, [sp, #116]	; 0x74
 800bee6:	f7fe f9d6 	bl	800a296 <lv_draw_px>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800beea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beec:	0031      	movs	r1, r6
 800beee:	1e5d      	subs	r5, r3, #1
 800bef0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bef2:	9a03      	ldr	r2, [sp, #12]
 800bef4:	1aed      	subs	r5, r5, r3
 800bef6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bef8:	b22d      	sxth	r5, r5
 800befa:	9300      	str	r3, [sp, #0]
 800befc:	0028      	movs	r0, r5
 800befe:	1c23      	adds	r3, r4, #0
 800bf00:	f7fe f9c9 	bl	800a296 <lv_draw_px>
                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800bf04:	466b      	mov	r3, sp
 800bf06:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bf08:	8a99      	ldrh	r1, [r3, #20]
 800bf0a:	8b18      	ldrh	r0, [r3, #24]
 800bf0c:	f7fe ff00 	bl	800ad10 <lv_color_mix>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800bf10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800bf14:	1c04      	adds	r4, r0, #0
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800bf16:	1a9e      	subs	r6, r3, r2
 800bf18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bf1a:	9a03      	ldr	r2, [sp, #12]
 800bf1c:	1af6      	subs	r6, r6, r3
 800bf1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf20:	b236      	sxth	r6, r6
 800bf22:	9300      	str	r3, [sp, #0]
 800bf24:	0031      	movs	r1, r6
 800bf26:	1c03      	adds	r3, r0, #0
 800bf28:	0028      	movs	r0, r5
 800bf2a:	f7fe f9b4 	bl	800a296 <lv_draw_px>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800bf2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf30:	9a03      	ldr	r2, [sp, #12]
 800bf32:	9300      	str	r3, [sp, #0]
 800bf34:	0031      	movs	r1, r6
 800bf36:	1c23      	adds	r3, r4, #0
 800bf38:	981d      	ldr	r0, [sp, #116]	; 0x74
 800bf3a:	f7fe f9ac 	bl	800a296 <lv_draw_px>
 800bf3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf40:	33ff      	adds	r3, #255	; 0xff
 800bf42:	9317      	str	r3, [sp, #92]	; 0x5c
                for(i = 0; i < seg_size; i++) {
 800bf44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bf46:	1c5c      	adds	r4, r3, #1
 800bf48:	b224      	sxth	r4, r4
 800bf4a:	e6c3      	b.n	800bcd4 <lv_draw_rect+0xef4>
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800bf4c:	9815      	ldr	r0, [sp, #84]	; 0x54
 800bf4e:	f7fe f8cb 	bl	800a0e8 <lv_draw_aa_get_opa>
 800bf52:	9b07      	ldr	r3, [sp, #28]
 800bf54:	1a18      	subs	r0, r3, r0
 800bf56:	b2c3      	uxtb	r3, r0
 800bf58:	9310      	str	r3, [sp, #64]	; 0x40
 800bf5a:	e75f      	b.n	800be1c <lv_draw_rect+0x103c>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800bf5c:	2306      	movs	r3, #6
 800bf5e:	5ef8      	ldrsh	r0, [r7, r3]
 800bf60:	ab24      	add	r3, sp, #144	; 0x90
 800bf62:	2202      	movs	r2, #2
 800bf64:	5e9b      	ldrsh	r3, [r3, r2]
 800bf66:	9908      	ldr	r1, [sp, #32]
 800bf68:	1ac0      	subs	r0, r0, r3
 800bf6a:	23ff      	movs	r3, #255	; 0xff
 800bf6c:	4358      	muls	r0, r3
 800bf6e:	f7f4 f8f7 	bl	8000160 <__udivsi3>
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800bf72:	466b      	mov	r3, sp
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800bf74:	b2c2      	uxtb	r2, r0
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800bf76:	8b19      	ldrh	r1, [r3, #24]
 800bf78:	8a98      	ldrh	r0, [r3, #20]
 800bf7a:	f7fe fec9 	bl	800ad10 <lv_color_mix>
 800bf7e:	1c02      	adds	r2, r0, #0
 800bf80:	e6db      	b.n	800bd3a <lv_draw_rect+0xf5a>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800bf82:	2306      	movs	r3, #6
 800bf84:	5ef8      	ldrsh	r0, [r7, r3]
 800bf86:	ab26      	add	r3, sp, #152	; 0x98
 800bf88:	2202      	movs	r2, #2
 800bf8a:	5e9b      	ldrsh	r3, [r3, r2]
 800bf8c:	9908      	ldr	r1, [sp, #32]
 800bf8e:	1ac0      	subs	r0, r0, r3
 800bf90:	23ff      	movs	r3, #255	; 0xff
 800bf92:	4358      	muls	r0, r3
 800bf94:	f7f4 f8e4 	bl	8000160 <__udivsi3>
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800bf98:	466b      	mov	r3, sp
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800bf9a:	b2c2      	uxtb	r2, r0
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800bf9c:	8b19      	ldrh	r1, [r3, #24]
 800bf9e:	8a98      	ldrh	r0, [r3, #20]
 800bfa0:	f7fe feb6 	bl	800ad10 <lv_color_mix>
 800bfa4:	1c02      	adds	r2, r0, #0
 800bfa6:	e6d7      	b.n	800bd58 <lv_draw_rect+0xf78>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800bfa8:	2306      	movs	r3, #6
 800bfaa:	5ef8      	ldrsh	r0, [r7, r3]
 800bfac:	ab28      	add	r3, sp, #160	; 0xa0
 800bfae:	2202      	movs	r2, #2
 800bfb0:	5e9b      	ldrsh	r3, [r3, r2]
 800bfb2:	9908      	ldr	r1, [sp, #32]
 800bfb4:	1ac0      	subs	r0, r0, r3
 800bfb6:	23ff      	movs	r3, #255	; 0xff
 800bfb8:	4358      	muls	r0, r3
 800bfba:	f7f4 f8d1 	bl	8000160 <__udivsi3>
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800bfbe:	466b      	mov	r3, sp
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800bfc0:	b2c2      	uxtb	r2, r0
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800bfc2:	8b19      	ldrh	r1, [r3, #24]
 800bfc4:	8a98      	ldrh	r0, [r3, #20]
 800bfc6:	f7fe fea3 	bl	800ad10 <lv_color_mix>
 800bfca:	1c02      	adds	r2, r0, #0
 800bfcc:	e6d4      	b.n	800bd78 <lv_draw_rect+0xf98>
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800bfce:	2306      	movs	r3, #6
 800bfd0:	5ef8      	ldrsh	r0, [r7, r3]
 800bfd2:	ab22      	add	r3, sp, #136	; 0x88
 800bfd4:	2202      	movs	r2, #2
 800bfd6:	5e9b      	ldrsh	r3, [r3, r2]
 800bfd8:	9908      	ldr	r1, [sp, #32]
 800bfda:	1ac3      	subs	r3, r0, r3
 800bfdc:	20ff      	movs	r0, #255	; 0xff
 800bfde:	4358      	muls	r0, r3
 800bfe0:	f7f4 f8be 	bl	8000160 <__udivsi3>
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800bfe4:	466b      	mov	r3, sp
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800bfe6:	b2c2      	uxtb	r2, r0
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800bfe8:	8b19      	ldrh	r1, [r3, #24]
 800bfea:	8a98      	ldrh	r0, [r3, #20]
 800bfec:	f7fe fe90 	bl	800ad10 <lv_color_mix>
 800bff0:	1c02      	adds	r2, r0, #0
 800bff2:	f7ff fade 	bl	800b5b2 <lv_draw_rect+0x7d2>
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800bff6:	2206      	movs	r2, #6
 800bff8:	5eb8      	ldrsh	r0, [r7, r2]
 800bffa:	9908      	ldr	r1, [sp, #32]
 800bffc:	1ac3      	subs	r3, r0, r3
 800bffe:	20ff      	movs	r0, #255	; 0xff
 800c000:	4358      	muls	r0, r3
 800c002:	f7f4 f8ad 	bl	8000160 <__udivsi3>
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800c006:	466b      	mov	r3, sp
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800c008:	b2c2      	uxtb	r2, r0
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800c00a:	8b19      	ldrh	r1, [r3, #24]
 800c00c:	8a98      	ldrh	r0, [r3, #20]
 800c00e:	f7fe fe7f 	bl	800ad10 <lv_color_mix>
 800c012:	1c02      	adds	r2, r0, #0
 800c014:	f7ff fae2 	bl	800b5dc <lv_draw_rect+0x7fc>
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800c018:	2306      	movs	r3, #6
 800c01a:	5ef8      	ldrsh	r0, [r7, r3]
 800c01c:	ab26      	add	r3, sp, #152	; 0x98
 800c01e:	2202      	movs	r2, #2
 800c020:	5e9b      	ldrsh	r3, [r3, r2]
 800c022:	9908      	ldr	r1, [sp, #32]
 800c024:	1ac3      	subs	r3, r0, r3
 800c026:	20ff      	movs	r0, #255	; 0xff
 800c028:	4358      	muls	r0, r3
 800c02a:	f7f4 f899 	bl	8000160 <__udivsi3>
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800c02e:	466b      	mov	r3, sp
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800c030:	b2c2      	uxtb	r2, r0
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800c032:	8b19      	ldrh	r1, [r3, #24]
 800c034:	8a98      	ldrh	r0, [r3, #20]
 800c036:	f7fe fe6b 	bl	800ad10 <lv_color_mix>
 800c03a:	1c02      	adds	r2, r0, #0
 800c03c:	f7ff fadb 	bl	800b5f6 <lv_draw_rect+0x816>
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800c040:	2206      	movs	r2, #6
 800c042:	5eb8      	ldrsh	r0, [r7, r2]
 800c044:	9908      	ldr	r1, [sp, #32]
 800c046:	1ac3      	subs	r3, r0, r3
 800c048:	20ff      	movs	r0, #255	; 0xff
 800c04a:	4358      	muls	r0, r3
 800c04c:	f7f4 f888 	bl	8000160 <__udivsi3>
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800c050:	466b      	mov	r3, sp
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800c052:	b2c2      	uxtb	r2, r0
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800c054:	8b19      	ldrh	r1, [r3, #24]
 800c056:	8a98      	ldrh	r0, [r3, #20]
 800c058:	f7fe fe5a 	bl	800ad10 <lv_color_mix>
 800c05c:	1c02      	adds	r2, r0, #0
 800c05e:	f7ff fadf 	bl	800b620 <lv_draw_rect+0x840>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800c062:	0021      	movs	r1, r4
 800c064:	9a07      	ldr	r2, [sp, #28]
 800c066:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c068:	f7fe f83e 	bl	800a0e8 <lv_draw_aa_get_opa>
 800c06c:	9b07      	ldr	r3, [sp, #28]
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800c06e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800c070:	1a18      	subs	r0, r3, r0
 800c072:	b2c3      	uxtb	r3, r0
 800c074:	930c      	str	r3, [sp, #48]	; 0x30
 800c076:	b2a3      	uxth	r3, r4
 800c078:	9314      	str	r3, [sp, #80]	; 0x50
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800c07a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c07c:	189c      	adds	r4, r3, r2
 800c07e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c080:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c082:	191c      	adds	r4, r3, r4
 800c084:	466b      	mov	r3, sp
 800c086:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c088:	1c55      	adds	r5, r2, #1
 800c08a:	9315      	str	r3, [sp, #84]	; 0x54
 800c08c:	195d      	adds	r5, r3, r5
 800c08e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c090:	2244      	movs	r2, #68	; 0x44
 800c092:	9300      	str	r3, [sp, #0]
 800c094:	466b      	mov	r3, sp
 800c096:	b224      	sxth	r4, r4
 800c098:	b22d      	sxth	r5, r5
 800c09a:	189b      	adds	r3, r3, r2
 800c09c:	0029      	movs	r1, r5
 800c09e:	0020      	movs	r0, r4
 800c0a0:	881b      	ldrh	r3, [r3, #0]
 800c0a2:	9a03      	ldr	r2, [sp, #12]
 800c0a4:	f7fe f8f7 	bl	800a296 <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800c0a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c0ac:	0029      	movs	r1, r5
 800c0ae:	1a9e      	subs	r6, r3, r2
 800c0b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c0b2:	2244      	movs	r2, #68	; 0x44
 800c0b4:	1af6      	subs	r6, r6, r3
 800c0b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0b8:	b236      	sxth	r6, r6
 800c0ba:	9300      	str	r3, [sp, #0]
 800c0bc:	466b      	mov	r3, sp
 800c0be:	189b      	adds	r3, r3, r2
 800c0c0:	0030      	movs	r0, r6
 800c0c2:	881b      	ldrh	r3, [r3, #0]
 800c0c4:	9a03      	ldr	r2, [sp, #12]
 800c0c6:	f7fe f8e6 	bl	800a296 <lv_draw_px>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800c0ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0cc:	2248      	movs	r2, #72	; 0x48
 800c0ce:	1e5d      	subs	r5, r3, #1
 800c0d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0d2:	0030      	movs	r0, r6
 800c0d4:	1aed      	subs	r5, r5, r3
 800c0d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0d8:	b22d      	sxth	r5, r5
 800c0da:	9300      	str	r3, [sp, #0]
 800c0dc:	466b      	mov	r3, sp
 800c0de:	189b      	adds	r3, r3, r2
 800c0e0:	0029      	movs	r1, r5
 800c0e2:	881b      	ldrh	r3, [r3, #0]
 800c0e4:	9a03      	ldr	r2, [sp, #12]
 800c0e6:	f7fe f8d6 	bl	800a296 <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800c0ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0ec:	2248      	movs	r2, #72	; 0x48
 800c0ee:	9300      	str	r3, [sp, #0]
 800c0f0:	466b      	mov	r3, sp
 800c0f2:	189b      	adds	r3, r3, r2
 800c0f4:	881b      	ldrh	r3, [r3, #0]
 800c0f6:	9a03      	ldr	r2, [sp, #12]
 800c0f8:	0029      	movs	r1, r5
 800c0fa:	0020      	movs	r0, r4
 800c0fc:	f7fe f8cb 	bl	800a296 <lv_draw_px>
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800c100:	9908      	ldr	r1, [sp, #32]
 800c102:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c104:	f7f4 f82c 	bl	8000160 <__udivsi3>
 800c108:	b2c3      	uxtb	r3, r0
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800c10a:	001a      	movs	r2, r3
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800c10c:	9318      	str	r3, [sp, #96]	; 0x60
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800c10e:	466b      	mov	r3, sp
 800c110:	8b19      	ldrh	r1, [r3, #24]
 800c112:	8a98      	ldrh	r0, [r3, #20]
 800c114:	f7fe fdfc 	bl	800ad10 <lv_color_mix>
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 800c118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c11a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c11c:	3301      	adds	r3, #1
 800c11e:	18d3      	adds	r3, r2, r3
 800c120:	b21b      	sxth	r3, r3
 800c122:	9319      	str	r3, [sp, #100]	; 0x64
 800c124:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c126:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800c128:	1c04      	adds	r4, r0, #0
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 800c12a:	189e      	adds	r6, r3, r2
 800c12c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c12e:	9a03      	ldr	r2, [sp, #12]
 800c130:	199e      	adds	r6, r3, r6
 800c132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c134:	b236      	sxth	r6, r6
 800c136:	0031      	movs	r1, r6
 800c138:	9300      	str	r3, [sp, #0]
 800c13a:	1c03      	adds	r3, r0, #0
 800c13c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c13e:	f7fe f8aa 	bl	800a296 <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, aa_color_ver,
 800c142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c144:	0031      	movs	r1, r6
 800c146:	1e5d      	subs	r5, r3, #1
 800c148:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c14a:	9a03      	ldr	r2, [sp, #12]
 800c14c:	1aed      	subs	r5, r5, r3
 800c14e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c150:	b22d      	sxth	r5, r5
 800c152:	9300      	str	r3, [sp, #0]
 800c154:	0028      	movs	r0, r5
 800c156:	1c23      	adds	r3, r4, #0
 800c158:	f7fe f89d 	bl	800a296 <lv_draw_px>
            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800c15c:	466b      	mov	r3, sp
 800c15e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c160:	8a99      	ldrh	r1, [r3, #20]
 800c162:	8b18      	ldrh	r0, [r3, #24]
 800c164:	f7fe fdd4 	bl	800ad10 <lv_color_mix>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 800c168:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c16a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800c16c:	1c04      	adds	r4, r0, #0
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 800c16e:	1a9e      	subs	r6, r3, r2
 800c170:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c172:	9a03      	ldr	r2, [sp, #12]
 800c174:	1af6      	subs	r6, r6, r3
 800c176:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c178:	b236      	sxth	r6, r6
 800c17a:	9300      	str	r3, [sp, #0]
 800c17c:	0031      	movs	r1, r6
 800c17e:	1c03      	adds	r3, r0, #0
 800c180:	0028      	movs	r0, r5
 800c182:	f7fe f888 	bl	800a296 <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, aa_color_ver,
 800c186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c188:	9a03      	ldr	r2, [sp, #12]
 800c18a:	9300      	str	r3, [sp, #0]
 800c18c:	0031      	movs	r1, r6
 800c18e:	1c23      	adds	r3, r4, #0
 800c190:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c192:	f7fe f880 	bl	800a296 <lv_draw_px>
 800c196:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c198:	33ff      	adds	r3, #255	; 0xff
 800c19a:	9317      	str	r3, [sp, #92]	; 0x5c
        for(i = 0; i < seg_size; i++) {
 800c19c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c19e:	1c5c      	adds	r4, r3, #1
 800c1a0:	b224      	sxth	r4, r4
 800c1a2:	f7ff fa94 	bl	800b6ce <lv_draw_rect+0x8ee>
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800c1a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c1a8:	4344      	muls	r4, r0
 800c1aa:	0a20      	lsrs	r0, r4, #8
 800c1ac:	9005      	str	r0, [sp, #20]
 800c1ae:	f7ff fb21 	bl	800b7f4 <lv_draw_rect+0xa14>
        corner_size = radius + aa;
 800c1b2:	9b08      	ldr	r3, [sp, #32]
 800c1b4:	18c3      	adds	r3, r0, r3
 800c1b6:	b21b      	sxth	r3, r3
 800c1b8:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t length_corr = 0;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	f7ff fb34 	bl	800b828 <lv_draw_rect+0xa48>
 800c1c0:	4023      	ands	r3, r4
    corner_size++;
 800c1c2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c1c4:	9309      	str	r3, [sp, #36]	; 0x24
    if(part & LV_BORDER_TOP)
 800c1c6:	9909      	ldr	r1, [sp, #36]	; 0x24
    corner_size++;
 800c1c8:	3601      	adds	r6, #1
 800c1ca:	b2b6      	uxth	r6, r6
 800c1cc:	887b      	ldrh	r3, [r7, #2]
 800c1ce:	aa28      	add	r2, sp, #160	; 0xa0
    if(part & LV_BORDER_TOP)
 800c1d0:	2900      	cmp	r1, #0
 800c1d2:	d100      	bne.n	800c1d6 <lv_draw_rect+0x13f6>
 800c1d4:	e120      	b.n	800c418 <lv_draw_rect+0x1638>
        work_area.y1 = coords->y1 + corner_size;
 800c1d6:	18f3      	adds	r3, r6, r3
        work_area.y1 = coords->y1 + radius;
 800c1d8:	8053      	strh	r3, [r2, #2]
 800c1da:	2301      	movs	r3, #1
 800c1dc:	4023      	ands	r3, r4
 800c1de:	930c      	str	r3, [sp, #48]	; 0x30
    if(part & LV_BORDER_BOTTOM)
 800c1e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c1e2:	88fb      	ldrh	r3, [r7, #6]
 800c1e4:	aa28      	add	r2, sp, #160	; 0xa0
 800c1e6:	2900      	cmp	r1, #0
 800c1e8:	d100      	bne.n	800c1ec <lv_draw_rect+0x140c>
 800c1ea:	e117      	b.n	800c41c <lv_draw_rect+0x163c>
        work_area.y2 = coords->y2 - corner_size;
 800c1ec:	1b9b      	subs	r3, r3, r6
        work_area.y2 = coords->y2 - radius;
 800c1ee:	80d3      	strh	r3, [r2, #6]
    if(part & LV_BORDER_LEFT) {
 800c1f0:	0763      	lsls	r3, r4, #29
 800c1f2:	d50c      	bpl.n	800c20e <lv_draw_rect+0x142e>
        work_area.x1 = coords->x1;
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	5ebb      	ldrsh	r3, [r7, r2]
        work_area.x2 = work_area.x1 + bwidth;
 800c1f8:	9a07      	ldr	r2, [sp, #28]
        work_area.x1 = coords->x1;
 800c1fa:	a828      	add	r0, sp, #160	; 0xa0
 800c1fc:	8003      	strh	r3, [r0, #0]
        work_area.x2 = work_area.x1 + bwidth;
 800c1fe:	18d3      	adds	r3, r2, r3
        lv_draw_fill(&work_area, mask, color, opa);
 800c200:	466a      	mov	r2, sp
        work_area.x2 = work_area.x1 + bwidth;
 800c202:	8083      	strh	r3, [r0, #4]
        lv_draw_fill(&work_area, mask, color, opa);
 800c204:	8b12      	ldrh	r2, [r2, #24]
 800c206:	9b05      	ldr	r3, [sp, #20]
 800c208:	9903      	ldr	r1, [sp, #12]
 800c20a:	f7fe f88d 	bl	800a328 <lv_draw_fill>
    if(part & LV_BORDER_RIGHT) {
 800c20e:	0723      	lsls	r3, r4, #28
 800c210:	d50c      	bpl.n	800c22c <lv_draw_rect+0x144c>
        work_area.x2 = coords->x2;
 800c212:	2204      	movs	r2, #4
 800c214:	5ebb      	ldrsh	r3, [r7, r2]
        work_area.x1 = work_area.x2 - bwidth;
 800c216:	9a07      	ldr	r2, [sp, #28]
        work_area.x2 = coords->x2;
 800c218:	a828      	add	r0, sp, #160	; 0xa0
 800c21a:	8083      	strh	r3, [r0, #4]
        work_area.x1 = work_area.x2 - bwidth;
 800c21c:	1a9b      	subs	r3, r3, r2
        lv_draw_fill(&work_area, mask, color, opa);
 800c21e:	466a      	mov	r2, sp
        work_area.x1 = work_area.x2 - bwidth;
 800c220:	8003      	strh	r3, [r0, #0]
        lv_draw_fill(&work_area, mask, color, opa);
 800c222:	8b12      	ldrh	r2, [r2, #24]
 800c224:	9b05      	ldr	r3, [sp, #20]
 800c226:	9903      	ldr	r1, [sp, #12]
 800c228:	f7fe f87e 	bl	800a328 <lv_draw_fill>
    work_area.x1 = coords->x1 + corner_size - length_corr;
 800c22c:	466b      	mov	r3, sp
 800c22e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c230:	883a      	ldrh	r2, [r7, #0]
 800c232:	1af1      	subs	r1, r6, r3
 800c234:	a828      	add	r0, sp, #160	; 0xa0
 800c236:	1852      	adds	r2, r2, r1
 800c238:	8002      	strh	r2, [r0, #0]
    work_area.x2 = coords->x2 - corner_size + length_corr;
 800c23a:	88ba      	ldrh	r2, [r7, #4]
 800c23c:	189b      	adds	r3, r3, r2
 800c23e:	1b9e      	subs	r6, r3, r6
    if(part & LV_BORDER_TOP) {
 800c240:	9b09      	ldr	r3, [sp, #36]	; 0x24
    work_area.x2 = coords->x2 - corner_size + length_corr;
 800c242:	8086      	strh	r6, [r0, #4]
    if(part & LV_BORDER_TOP) {
 800c244:	2b00      	cmp	r3, #0
 800c246:	d00b      	beq.n	800c260 <lv_draw_rect+0x1480>
        work_area.y1 = coords->y1;
 800c248:	2202      	movs	r2, #2
 800c24a:	5ebb      	ldrsh	r3, [r7, r2]
        work_area.y2 = coords->y1 + bwidth;
 800c24c:	9a07      	ldr	r2, [sp, #28]
        work_area.y1 = coords->y1;
 800c24e:	8043      	strh	r3, [r0, #2]
        work_area.y2 = coords->y1 + bwidth;
 800c250:	18d3      	adds	r3, r2, r3
        lv_draw_fill(&work_area, mask, color, opa);
 800c252:	466a      	mov	r2, sp
        work_area.y2 = coords->y1 + bwidth;
 800c254:	80c3      	strh	r3, [r0, #6]
        lv_draw_fill(&work_area, mask, color, opa);
 800c256:	8b12      	ldrh	r2, [r2, #24]
 800c258:	9b05      	ldr	r3, [sp, #20]
 800c25a:	9903      	ldr	r1, [sp, #12]
 800c25c:	f7fe f864 	bl	800a328 <lv_draw_fill>
    if(part & LV_BORDER_BOTTOM) {
 800c260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c262:	2b00      	cmp	r3, #0
 800c264:	d00c      	beq.n	800c280 <lv_draw_rect+0x14a0>
        work_area.y2 = coords->y2;
 800c266:	2206      	movs	r2, #6
 800c268:	5ebb      	ldrsh	r3, [r7, r2]
        work_area.y1 = work_area.y2 - bwidth;
 800c26a:	9a07      	ldr	r2, [sp, #28]
        work_area.y2 = coords->y2;
 800c26c:	a828      	add	r0, sp, #160	; 0xa0
 800c26e:	80c3      	strh	r3, [r0, #6]
        work_area.y1 = work_area.y2 - bwidth;
 800c270:	1a9b      	subs	r3, r3, r2
        lv_draw_fill(&work_area, mask, color, opa);
 800c272:	466a      	mov	r2, sp
        work_area.y1 = work_area.y2 - bwidth;
 800c274:	8043      	strh	r3, [r0, #2]
        lv_draw_fill(&work_area, mask, color, opa);
 800c276:	8b12      	ldrh	r2, [r2, #24]
 800c278:	9b05      	ldr	r3, [sp, #20]
 800c27a:	9903      	ldr	r1, [sp, #12]
 800c27c:	f7fe f854 	bl	800a328 <lv_draw_fill>
    if(length_corr != 0) {
 800c280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c282:	2b00      	cmp	r3, #0
 800c284:	d06b      	beq.n	800c35e <lv_draw_rect+0x157e>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800c286:	2306      	movs	r3, #6
 800c288:	4023      	ands	r3, r4
 800c28a:	2b06      	cmp	r3, #6
 800c28c:	d116      	bne.n	800c2bc <lv_draw_rect+0x14dc>
            work_area.x1 = coords->x1;
 800c28e:	2300      	movs	r3, #0
 800c290:	5efa      	ldrsh	r2, [r7, r3]
            work_area.x2 = coords->x1 + radius + aa;
 800c292:	466b      	mov	r3, sp
 800c294:	8c1b      	ldrh	r3, [r3, #32]
            work_area.x1 = coords->x1;
 800c296:	a828      	add	r0, sp, #160	; 0xa0
 800c298:	8002      	strh	r2, [r0, #0]
            work_area.x2 = coords->x1 + radius + aa;
 800c29a:	189a      	adds	r2, r3, r2
 800c29c:	18aa      	adds	r2, r5, r2
 800c29e:	8082      	strh	r2, [r0, #4]
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800c2a0:	887a      	ldrh	r2, [r7, #2]
 800c2a2:	1c51      	adds	r1, r2, #1
 800c2a4:	185b      	adds	r3, r3, r1
 800c2a6:	18eb      	adds	r3, r5, r3
 800c2a8:	8043      	strh	r3, [r0, #2]
            work_area.y2 = coords->y1 + bwidth;
 800c2aa:	9b07      	ldr	r3, [sp, #28]
            lv_draw_fill(&work_area, mask, color, opa);
 800c2ac:	9903      	ldr	r1, [sp, #12]
            work_area.y2 = coords->y1 + bwidth;
 800c2ae:	189a      	adds	r2, r3, r2
 800c2b0:	80c2      	strh	r2, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800c2b2:	466a      	mov	r2, sp
 800c2b4:	9b05      	ldr	r3, [sp, #20]
 800c2b6:	8b12      	ldrh	r2, [r2, #24]
 800c2b8:	f7fe f836 	bl	800a328 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800c2bc:	230a      	movs	r3, #10
 800c2be:	4023      	ands	r3, r4
 800c2c0:	2b0a      	cmp	r3, #10
 800c2c2:	d116      	bne.n	800c2f2 <lv_draw_rect+0x1512>
            work_area.x1 = coords->x2 - radius - aa;
 800c2c4:	2304      	movs	r3, #4
 800c2c6:	5ef9      	ldrsh	r1, [r7, r3]
 800c2c8:	466b      	mov	r3, sp
 800c2ca:	8c1b      	ldrh	r3, [r3, #32]
 800c2cc:	1b4a      	subs	r2, r1, r5
 800c2ce:	a828      	add	r0, sp, #160	; 0xa0
 800c2d0:	1ad2      	subs	r2, r2, r3
            work_area.x2 = coords->x2;
 800c2d2:	8081      	strh	r1, [r0, #4]
            work_area.x1 = coords->x2 - radius - aa;
 800c2d4:	8002      	strh	r2, [r0, #0]
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800c2d6:	887a      	ldrh	r2, [r7, #2]
 800c2d8:	1c51      	adds	r1, r2, #1
 800c2da:	185b      	adds	r3, r3, r1
 800c2dc:	18eb      	adds	r3, r5, r3
 800c2de:	8043      	strh	r3, [r0, #2]
            work_area.y2 = coords->y1 + bwidth;
 800c2e0:	9b07      	ldr	r3, [sp, #28]
            lv_draw_fill(&work_area, mask, color, opa);
 800c2e2:	9903      	ldr	r1, [sp, #12]
            work_area.y2 = coords->y1 + bwidth;
 800c2e4:	189a      	adds	r2, r3, r2
 800c2e6:	80c2      	strh	r2, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800c2e8:	466a      	mov	r2, sp
 800c2ea:	9b05      	ldr	r3, [sp, #20]
 800c2ec:	8b12      	ldrh	r2, [r2, #24]
 800c2ee:	f7fe f81b 	bl	800a328 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800c2f2:	2305      	movs	r3, #5
 800c2f4:	4023      	ands	r3, r4
 800c2f6:	2b05      	cmp	r3, #5
 800c2f8:	d116      	bne.n	800c328 <lv_draw_rect+0x1548>
            work_area.x1 = coords->x1;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	5efa      	ldrsh	r2, [r7, r3]
            work_area.x2 = coords->x1 + radius + aa;
 800c2fe:	466b      	mov	r3, sp
 800c300:	8c19      	ldrh	r1, [r3, #32]
            work_area.x1 = coords->x1;
 800c302:	a828      	add	r0, sp, #160	; 0xa0
 800c304:	8002      	strh	r2, [r0, #0]
            work_area.x2 = coords->x1 + radius + aa;
 800c306:	188a      	adds	r2, r1, r2
 800c308:	18aa      	adds	r2, r5, r2
 800c30a:	8082      	strh	r2, [r0, #4]
            work_area.y1 = coords->y2 - bwidth;
 800c30c:	88fb      	ldrh	r3, [r7, #6]
 800c30e:	9a07      	ldr	r2, [sp, #28]
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800c310:	43c9      	mvns	r1, r1
            work_area.y1 = coords->y2 - bwidth;
 800c312:	1a9a      	subs	r2, r3, r2
 800c314:	8042      	strh	r2, [r0, #2]
            lv_draw_fill(&work_area, mask, color, opa);
 800c316:	466a      	mov	r2, sp
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800c318:	185b      	adds	r3, r3, r1
 800c31a:	1b5b      	subs	r3, r3, r5
 800c31c:	80c3      	strh	r3, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800c31e:	8b12      	ldrh	r2, [r2, #24]
 800c320:	9b05      	ldr	r3, [sp, #20]
 800c322:	9903      	ldr	r1, [sp, #12]
 800c324:	f7fe f800 	bl	800a328 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c328:	2309      	movs	r3, #9
 800c32a:	4023      	ands	r3, r4
 800c32c:	2b09      	cmp	r3, #9
 800c32e:	d116      	bne.n	800c35e <lv_draw_rect+0x157e>
            work_area.x1 = coords->x2 - radius - aa;
 800c330:	2304      	movs	r3, #4
 800c332:	5efe      	ldrsh	r6, [r7, r3]
 800c334:	466b      	mov	r3, sp
 800c336:	8c19      	ldrh	r1, [r3, #32]
 800c338:	1b73      	subs	r3, r6, r5
 800c33a:	1a5b      	subs	r3, r3, r1
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800c33c:	43c9      	mvns	r1, r1
            work_area.x1 = coords->x2 - radius - aa;
 800c33e:	a828      	add	r0, sp, #160	; 0xa0
 800c340:	8003      	strh	r3, [r0, #0]
            work_area.x2 = coords->x2;
 800c342:	8086      	strh	r6, [r0, #4]
            work_area.y1 = coords->y2 - bwidth;
 800c344:	88fa      	ldrh	r2, [r7, #6]
 800c346:	9b07      	ldr	r3, [sp, #28]
 800c348:	1ad3      	subs	r3, r2, r3
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800c34a:	1852      	adds	r2, r2, r1
 800c34c:	1b55      	subs	r5, r2, r5
            lv_draw_fill(&work_area, mask, color, opa);
 800c34e:	466a      	mov	r2, sp
            work_area.y1 = coords->y2 - bwidth;
 800c350:	8043      	strh	r3, [r0, #2]
            lv_draw_fill(&work_area, mask, color, opa);
 800c352:	8b12      	ldrh	r2, [r2, #24]
 800c354:	9b05      	ldr	r3, [sp, #20]
 800c356:	9903      	ldr	r1, [sp, #12]
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800c358:	80c5      	strh	r5, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800c35a:	f7fd ffe5 	bl	800a328 <lv_draw_fill>
    if(style->body.radius == 0) {
 800c35e:	9b04      	ldr	r3, [sp, #16]
 800c360:	2206      	movs	r2, #6
 800c362:	5e9b      	ldrsh	r3, [r3, r2]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d001      	beq.n	800c36c <lv_draw_rect+0x158c>
 800c368:	f7ff fac7 	bl	800b8fa <lv_draw_rect+0xb1a>
        if(part & (LV_BORDER_TOP | LV_BORDER_LEFT)) {
 800c36c:	3306      	adds	r3, #6
 800c36e:	421c      	tst	r4, r3
 800c370:	d012      	beq.n	800c398 <lv_draw_rect+0x15b8>
            work_area.x1 = coords->x1;
 800c372:	2300      	movs	r3, #0
 800c374:	5efa      	ldrsh	r2, [r7, r3]
            work_area.x2 = coords->x1 + aa;
 800c376:	466b      	mov	r3, sp
 800c378:	8c1b      	ldrh	r3, [r3, #32]
            work_area.x1 = coords->x1;
 800c37a:	a828      	add	r0, sp, #160	; 0xa0
 800c37c:	8002      	strh	r2, [r0, #0]
            work_area.x2 = coords->x1 + aa;
 800c37e:	189a      	adds	r2, r3, r2
 800c380:	8082      	strh	r2, [r0, #4]
            work_area.y1 = coords->y1;
 800c382:	2102      	movs	r1, #2
 800c384:	5e7a      	ldrsh	r2, [r7, r1]
            lv_draw_fill(&work_area, mask, color, opa);
 800c386:	9903      	ldr	r1, [sp, #12]
            work_area.y2 = coords->y1 + aa;
 800c388:	189b      	adds	r3, r3, r2
            work_area.y1 = coords->y1;
 800c38a:	8042      	strh	r2, [r0, #2]
            lv_draw_fill(&work_area, mask, color, opa);
 800c38c:	466a      	mov	r2, sp
            work_area.y2 = coords->y1 + aa;
 800c38e:	80c3      	strh	r3, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800c390:	8b12      	ldrh	r2, [r2, #24]
 800c392:	9b05      	ldr	r3, [sp, #20]
 800c394:	f7fd ffc8 	bl	800a328 <lv_draw_fill>
        if(part & (LV_BORDER_TOP | LV_BORDER_RIGHT)) {
 800c398:	230a      	movs	r3, #10
 800c39a:	421c      	tst	r4, r3
 800c39c:	d012      	beq.n	800c3c4 <lv_draw_rect+0x15e4>
            work_area.x1 = coords->x2 - aa;
 800c39e:	2304      	movs	r3, #4
 800c3a0:	5efa      	ldrsh	r2, [r7, r3]
 800c3a2:	466b      	mov	r3, sp
 800c3a4:	8c1b      	ldrh	r3, [r3, #32]
 800c3a6:	a828      	add	r0, sp, #160	; 0xa0
 800c3a8:	1ad1      	subs	r1, r2, r3
 800c3aa:	8001      	strh	r1, [r0, #0]
            work_area.x2 = coords->x2;
 800c3ac:	8082      	strh	r2, [r0, #4]
            work_area.y1 = coords->y1;
 800c3ae:	2102      	movs	r1, #2
 800c3b0:	5e7a      	ldrsh	r2, [r7, r1]
            lv_draw_fill(&work_area, mask, color, opa);
 800c3b2:	9903      	ldr	r1, [sp, #12]
            work_area.y2 = coords->y1 + aa;
 800c3b4:	189b      	adds	r3, r3, r2
            work_area.y1 = coords->y1;
 800c3b6:	8042      	strh	r2, [r0, #2]
            lv_draw_fill(&work_area, mask, color, opa);
 800c3b8:	466a      	mov	r2, sp
            work_area.y2 = coords->y1 + aa;
 800c3ba:	80c3      	strh	r3, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800c3bc:	8b12      	ldrh	r2, [r2, #24]
 800c3be:	9b05      	ldr	r3, [sp, #20]
 800c3c0:	f7fd ffb2 	bl	800a328 <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_LEFT)) {
 800c3c4:	2305      	movs	r3, #5
 800c3c6:	421c      	tst	r4, r3
 800c3c8:	d012      	beq.n	800c3f0 <lv_draw_rect+0x1610>
            work_area.x1 = coords->x1;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	5efa      	ldrsh	r2, [r7, r3]
            work_area.x2 = coords->x1 + aa;
 800c3ce:	466b      	mov	r3, sp
 800c3d0:	8c1b      	ldrh	r3, [r3, #32]
            work_area.x1 = coords->x1;
 800c3d2:	a828      	add	r0, sp, #160	; 0xa0
 800c3d4:	8002      	strh	r2, [r0, #0]
            work_area.x2 = coords->x1 + aa;
 800c3d6:	189a      	adds	r2, r3, r2
 800c3d8:	8082      	strh	r2, [r0, #4]
            work_area.y1 = coords->y2 - aa;
 800c3da:	2106      	movs	r1, #6
 800c3dc:	5e7a      	ldrsh	r2, [r7, r1]
            lv_draw_fill(&work_area, mask, color, opa);
 800c3de:	9903      	ldr	r1, [sp, #12]
            work_area.y1 = coords->y2 - aa;
 800c3e0:	1ad3      	subs	r3, r2, r3
            work_area.y2 = coords->y2;
 800c3e2:	80c2      	strh	r2, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800c3e4:	466a      	mov	r2, sp
            work_area.y1 = coords->y2 - aa;
 800c3e6:	8043      	strh	r3, [r0, #2]
            lv_draw_fill(&work_area, mask, color, opa);
 800c3e8:	8b12      	ldrh	r2, [r2, #24]
 800c3ea:	9b05      	ldr	r3, [sp, #20]
 800c3ec:	f7fd ff9c 	bl	800a328 <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_RIGHT)) {
 800c3f0:	2309      	movs	r3, #9
 800c3f2:	421c      	tst	r4, r3
 800c3f4:	d101      	bne.n	800c3fa <lv_draw_rect+0x161a>
 800c3f6:	f7ff fa80 	bl	800b8fa <lv_draw_rect+0xb1a>
            work_area.x1 = coords->x2 - aa;
 800c3fa:	2304      	movs	r3, #4
 800c3fc:	5efa      	ldrsh	r2, [r7, r3]
 800c3fe:	466b      	mov	r3, sp
 800c400:	8c1b      	ldrh	r3, [r3, #32]
 800c402:	a828      	add	r0, sp, #160	; 0xa0
 800c404:	1ad1      	subs	r1, r2, r3
 800c406:	8001      	strh	r1, [r0, #0]
            work_area.x2 = coords->x2;
 800c408:	8082      	strh	r2, [r0, #4]
            work_area.y1 = coords->y2 - aa;
 800c40a:	2106      	movs	r1, #6
 800c40c:	5e7a      	ldrsh	r2, [r7, r1]
 800c40e:	1ad3      	subs	r3, r2, r3
 800c410:	8043      	strh	r3, [r0, #2]
            work_area.y2 = coords->y2;
 800c412:	80c2      	strh	r2, [r0, #6]
 800c414:	f7ff fa6b 	bl	800b8ee <lv_draw_rect+0xb0e>
        work_area.y1 = coords->y1 + radius;
 800c418:	18eb      	adds	r3, r5, r3
 800c41a:	e6dd      	b.n	800c1d8 <lv_draw_rect+0x13f8>
        work_area.y2 = coords->y2 - radius;
 800c41c:	1b5b      	subs	r3, r3, r5
 800c41e:	e6e6      	b.n	800c1ee <lv_draw_rect+0x140e>
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800c420:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c422:	4353      	muls	r3, r2
 800c424:	0a1b      	lsrs	r3, r3, #8
 800c426:	f7ff fa85 	bl	800b934 <lv_draw_rect+0xb54>
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800c42a:	3c02      	subs	r4, #2
 800c42c:	f7ff fa8a 	bl	800b944 <lv_draw_rect+0xb64>
        if(cir_in.y < cir_in.x) {
 800c430:	a926      	add	r1, sp, #152	; 0x98
 800c432:	2000      	movs	r0, #0
 800c434:	5e0b      	ldrsh	r3, [r1, r0]
 800c436:	2002      	movs	r0, #2
 800c438:	5e09      	ldrsh	r1, [r1, r0]
 800c43a:	4299      	cmp	r1, r3
 800c43c:	db00      	blt.n	800c440 <lv_draw_rect+0x1660>
 800c43e:	e121      	b.n	800c684 <lv_draw_rect+0x18a4>
            act_w1 = cir_out.x - cir_in.x;
 800c440:	1ad3      	subs	r3, r2, r3
 800c442:	b21b      	sxth	r3, r3
 800c444:	930f      	str	r3, [sp, #60]	; 0x3c
            act_w2 = act_w1 - 1;
 800c446:	9312      	str	r3, [sp, #72]	; 0x48
        if(aa) {
 800c448:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d036      	beq.n	800c4bc <lv_draw_rect+0x16dc>
            if(out_x_last != cir_out.x) {
 800c44e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c450:	429a      	cmp	r2, r3
 800c452:	d014      	beq.n	800c47e <lv_draw_rect+0x169e>
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800c454:	224c      	movs	r2, #76	; 0x4c
 800c456:	466b      	mov	r3, sp
                for(i = 0; i < seg_size; i++) {
 800c458:	2500      	movs	r5, #0
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800c45a:	189b      	adds	r3, r3, r2
 800c45c:	881b      	ldrh	r3, [r3, #0]
 800c45e:	930d      	str	r3, [sp, #52]	; 0x34
 800c460:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c462:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c464:	1a9b      	subs	r3, r3, r2
 800c466:	b21b      	sxth	r3, r3
 800c468:	9313      	str	r3, [sp, #76]	; 0x4c
                for(i = 0; i < seg_size; i++) {
 800c46a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c46c:	42ab      	cmp	r3, r5
 800c46e:	dd00      	ble.n	800c472 <lv_draw_rect+0x1692>
 800c470:	e110      	b.n	800c694 <lv_draw_rect+0x18b4>
                out_x_last      = cir_out.x;
 800c472:	ab24      	add	r3, sp, #144	; 0x90
 800c474:	2200      	movs	r2, #0
 800c476:	5e9b      	ldrsh	r3, [r3, r2]
 800c478:	930c      	str	r3, [sp, #48]	; 0x30
 800c47a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c47c:	9313      	str	r3, [sp, #76]	; 0x4c
            if(in_x_last != cir_in.x) {
 800c47e:	ab26      	add	r3, sp, #152	; 0x98
 800c480:	2200      	movs	r2, #0
 800c482:	5e9b      	ldrsh	r3, [r3, r2]
 800c484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c486:	4293      	cmp	r3, r2
 800c488:	d018      	beq.n	800c4bc <lv_draw_rect+0x16dc>
                in_y_seg_end        = cir_out.y;
 800c48a:	ab24      	add	r3, sp, #144	; 0x90
 800c48c:	2202      	movs	r2, #2
 800c48e:	5e9b      	ldrsh	r3, [r3, r2]
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800c490:	2244      	movs	r2, #68	; 0x44
                in_y_seg_end        = cir_out.y;
 800c492:	9317      	str	r3, [sp, #92]	; 0x5c
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800c494:	466b      	mov	r3, sp
 800c496:	189b      	adds	r3, r3, r2
 800c498:	881e      	ldrh	r6, [r3, #0]
 800c49a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c49c:	1b9b      	subs	r3, r3, r6
 800c49e:	b21b      	sxth	r3, r3
 800c4a0:	930d      	str	r3, [sp, #52]	; 0x34
 800c4a2:	2300      	movs	r3, #0
                for(i = 0; i < seg_size; i++) {
 800c4a4:	001c      	movs	r4, r3
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800c4a6:	9310      	str	r3, [sp, #64]	; 0x40
                for(i = 0; i < seg_size; i++) {
 800c4a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4aa:	42a3      	cmp	r3, r4
 800c4ac:	dd00      	ble.n	800c4b0 <lv_draw_rect+0x16d0>
 800c4ae:	e19d      	b.n	800c7ec <lv_draw_rect+0x1a0c>
                in_x_last      = cir_in.x;
 800c4b0:	ab26      	add	r3, sp, #152	; 0x98
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	5e9b      	ldrsh	r3, [r3, r2]
 800c4b6:	930a      	str	r3, [sp, #40]	; 0x28
                in_y_seg_start = in_y_seg_end;
 800c4b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c4ba:	9311      	str	r3, [sp, #68]	; 0x44
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c4bc:	2209      	movs	r2, #9
 800c4be:	9b05      	ldr	r3, [sp, #20]
 800c4c0:	4013      	ands	r3, r2
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d12b      	bne.n	800c51e <lv_draw_rect+0x173e>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 800c4c6:	ad24      	add	r5, sp, #144	; 0x90
 800c4c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4ca:	882b      	ldrh	r3, [r5, #0]
 800c4cc:	ac28      	add	r4, sp, #160	; 0xa0
 800c4ce:	18d3      	adds	r3, r2, r3
 800c4d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c4d2:	b29b      	uxth	r3, r3
 800c4d4:	1a9a      	subs	r2, r3, r2
 800c4d6:	8022      	strh	r2, [r4, #0]
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT1_X(cir_out);
 800c4d8:	80a3      	strh	r3, [r4, #4]
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800c4da:	886b      	ldrh	r3, [r5, #2]
 800c4dc:	9a07      	ldr	r2, [sp, #28]
            lv_draw_fill(&circ_area, mask, color, opa);
 800c4de:	9903      	ldr	r1, [sp, #12]
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800c4e0:	18d3      	adds	r3, r2, r3
            lv_draw_fill(&circ_area, mask, color, opa);
 800c4e2:	466a      	mov	r2, sp
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800c4e4:	b21b      	sxth	r3, r3
 800c4e6:	8063      	strh	r3, [r4, #2]
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800c4e8:	80e3      	strh	r3, [r4, #6]
            lv_draw_fill(&circ_area, mask, color, opa);
 800c4ea:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800c4ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4ee:	0020      	movs	r0, r4
 800c4f0:	f7fd ff1a 	bl	800a328 <lv_draw_fill>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800c4f4:	886b      	ldrh	r3, [r5, #2]
 800c4f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
            lv_draw_fill(&circ_area, mask, color, opa);
 800c4f8:	9903      	ldr	r1, [sp, #12]
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800c4fa:	18d3      	adds	r3, r2, r3
 800c4fc:	b21b      	sxth	r3, r3
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800c4fe:	9a07      	ldr	r2, [sp, #28]
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800c500:	8023      	strh	r3, [r4, #0]
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800c502:	80a3      	strh	r3, [r4, #4]
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800c504:	882b      	ldrh	r3, [r5, #0]
            lv_draw_fill(&circ_area, mask, color, opa);
 800c506:	0020      	movs	r0, r4
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800c508:	18d3      	adds	r3, r2, r3
 800c50a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	1a9a      	subs	r2, r3, r2
 800c510:	8062      	strh	r2, [r4, #2]
            lv_draw_fill(&circ_area, mask, color, opa);
 800c512:	466a      	mov	r2, sp
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out);
 800c514:	80e3      	strh	r3, [r4, #6]
            lv_draw_fill(&circ_area, mask, color, opa);
 800c516:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800c518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c51a:	f7fd ff05 	bl	800a328 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800c51e:	2205      	movs	r2, #5
 800c520:	9b05      	ldr	r3, [sp, #20]
 800c522:	4013      	ands	r3, r2
 800c524:	4293      	cmp	r3, r2
 800c526:	d12b      	bne.n	800c580 <lv_draw_rect+0x17a0>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800c528:	ad24      	add	r5, sp, #144	; 0x90
 800c52a:	886b      	ldrh	r3, [r5, #2]
 800c52c:	9a08      	ldr	r2, [sp, #32]
 800c52e:	ac28      	add	r4, sp, #160	; 0xa0
 800c530:	1ad3      	subs	r3, r2, r3
 800c532:	b21b      	sxth	r3, r3
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800c534:	9a07      	ldr	r2, [sp, #28]
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800c536:	8023      	strh	r3, [r4, #0]
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800c538:	80a3      	strh	r3, [r4, #4]
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800c53a:	882b      	ldrh	r3, [r5, #0]
            lv_draw_fill(&circ_area, mask, color, opa);
 800c53c:	9903      	ldr	r1, [sp, #12]
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800c53e:	18d3      	adds	r3, r2, r3
 800c540:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c542:	b29b      	uxth	r3, r3
 800c544:	1a9a      	subs	r2, r3, r2
 800c546:	8062      	strh	r2, [r4, #2]
            lv_draw_fill(&circ_area, mask, color, opa);
 800c548:	466a      	mov	r2, sp
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out);
 800c54a:	80e3      	strh	r3, [r4, #6]
            lv_draw_fill(&circ_area, mask, color, opa);
 800c54c:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800c54e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c550:	0020      	movs	r0, r4
 800c552:	f7fd fee9 	bl	800a328 <lv_draw_fill>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800c556:	9a08      	ldr	r2, [sp, #32]
 800c558:	882b      	ldrh	r3, [r5, #0]
            lv_draw_fill(&circ_area, mask, color, opa);
 800c55a:	9903      	ldr	r1, [sp, #12]
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800c55c:	1ad3      	subs	r3, r2, r3
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 800c55e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800c560:	b29b      	uxth	r3, r3
 800c562:	8023      	strh	r3, [r4, #0]
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 800c564:	189b      	adds	r3, r3, r2
 800c566:	80a3      	strh	r3, [r4, #4]
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800c568:	886b      	ldrh	r3, [r5, #2]
 800c56a:	9a07      	ldr	r2, [sp, #28]
            lv_draw_fill(&circ_area, mask, color, opa);
 800c56c:	0020      	movs	r0, r4
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800c56e:	18d3      	adds	r3, r2, r3
            lv_draw_fill(&circ_area, mask, color, opa);
 800c570:	466a      	mov	r2, sp
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800c572:	b21b      	sxth	r3, r3
 800c574:	8063      	strh	r3, [r4, #2]
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800c576:	80e3      	strh	r3, [r4, #6]
            lv_draw_fill(&circ_area, mask, color, opa);
 800c578:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800c57a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c57c:	f7fd fed4 	bl	800a328 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800c580:	2306      	movs	r3, #6
 800c582:	9a05      	ldr	r2, [sp, #20]
 800c584:	4013      	ands	r3, r2
 800c586:	2b06      	cmp	r3, #6
 800c588:	d132      	bne.n	800c5f0 <lv_draw_rect+0x1810>
            if(lb_origo.y + LV_CIRC_OCT4_Y(cir_out) > lt_origo.y + LV_CIRC_OCT5_Y(cir_out)) {
 800c58a:	aa24      	add	r2, sp, #144	; 0x90
 800c58c:	2102      	movs	r1, #2
 800c58e:	5e53      	ldrsh	r3, [r2, r1]
 800c590:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c592:	18c8      	adds	r0, r1, r3
 800c594:	9915      	ldr	r1, [sp, #84]	; 0x54
 800c596:	1ac9      	subs	r1, r1, r3
 800c598:	4288      	cmp	r0, r1
 800c59a:	dd13      	ble.n	800c5c4 <lv_draw_rect+0x17e4>
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 800c59c:	9908      	ldr	r1, [sp, #32]
 800c59e:	8812      	ldrh	r2, [r2, #0]
 800c5a0:	a828      	add	r0, sp, #160	; 0xa0
 800c5a2:	1a8a      	subs	r2, r1, r2
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 800c5a4:	9912      	ldr	r1, [sp, #72]	; 0x48
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 800c5a6:	b292      	uxth	r2, r2
 800c5a8:	8002      	strh	r2, [r0, #0]
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 800c5aa:	1852      	adds	r2, r2, r1
 800c5ac:	8082      	strh	r2, [r0, #4]
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800c5ae:	9a06      	ldr	r2, [sp, #24]
                lv_draw_fill(&circ_area, mask, color, opa);
 800c5b0:	9903      	ldr	r1, [sp, #12]
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800c5b2:	1ad3      	subs	r3, r2, r3
                lv_draw_fill(&circ_area, mask, color, opa);
 800c5b4:	466a      	mov	r2, sp
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800c5b6:	b21b      	sxth	r3, r3
 800c5b8:	8043      	strh	r3, [r0, #2]
                circ_area.y2 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800c5ba:	80c3      	strh	r3, [r0, #6]
                lv_draw_fill(&circ_area, mask, color, opa);
 800c5bc:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800c5be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5c0:	f7fd feb2 	bl	800a328 <lv_draw_fill>
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800c5c4:	aa24      	add	r2, sp, #144	; 0x90
 800c5c6:	8853      	ldrh	r3, [r2, #2]
 800c5c8:	9908      	ldr	r1, [sp, #32]
 800c5ca:	a828      	add	r0, sp, #160	; 0xa0
 800c5cc:	1acb      	subs	r3, r1, r3
 800c5ce:	b21b      	sxth	r3, r3
 800c5d0:	8003      	strh	r3, [r0, #0]
            circ_area.x2 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800c5d2:	8083      	strh	r3, [r0, #4]
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800c5d4:	8813      	ldrh	r3, [r2, #0]
 800c5d6:	9a06      	ldr	r2, [sp, #24]
            lv_draw_fill(&circ_area, mask, color, opa);
 800c5d8:	9903      	ldr	r1, [sp, #12]
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800c5da:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800c5dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	8043      	strh	r3, [r0, #2]
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800c5e2:	189b      	adds	r3, r3, r2
            lv_draw_fill(&circ_area, mask, color, opa);
 800c5e4:	466a      	mov	r2, sp
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800c5e6:	80c3      	strh	r3, [r0, #6]
            lv_draw_fill(&circ_area, mask, color, opa);
 800c5e8:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800c5ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5ec:	f7fd fe9c 	bl	800a328 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800c5f0:	230a      	movs	r3, #10
 800c5f2:	9a05      	ldr	r2, [sp, #20]
 800c5f4:	4013      	ands	r3, r2
 800c5f6:	2b0a      	cmp	r3, #10
 800c5f8:	d132      	bne.n	800c660 <lv_draw_rect+0x1880>
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800c5fa:	ad24      	add	r5, sp, #144	; 0x90
 800c5fc:	886b      	ldrh	r3, [r5, #2]
 800c5fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c600:	ac28      	add	r4, sp, #160	; 0xa0
 800c602:	18d3      	adds	r3, r2, r3
 800c604:	b21b      	sxth	r3, r3
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800c606:	9a06      	ldr	r2, [sp, #24]
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800c608:	8023      	strh	r3, [r4, #0]
            circ_area.x2 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800c60a:	80a3      	strh	r3, [r4, #4]
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800c60c:	882b      	ldrh	r3, [r5, #0]
            lv_draw_fill(&circ_area, mask, color, opa);
 800c60e:	9903      	ldr	r1, [sp, #12]
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800c610:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800c612:	9a12      	ldr	r2, [sp, #72]	; 0x48
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800c614:	b29b      	uxth	r3, r3
 800c616:	8063      	strh	r3, [r4, #2]
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800c618:	189b      	adds	r3, r3, r2
            lv_draw_fill(&circ_area, mask, color, opa);
 800c61a:	466a      	mov	r2, sp
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800c61c:	80e3      	strh	r3, [r4, #6]
            lv_draw_fill(&circ_area, mask, color, opa);
 800c61e:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800c620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c622:	0020      	movs	r0, r4
 800c624:	f7fd fe80 	bl	800a328 <lv_draw_fill>
            if(rb_origo.y + LV_CIRC_OCT1_Y(cir_out) > rt_origo.y + LV_CIRC_OCT8_Y(cir_out)) {
 800c628:	2202      	movs	r2, #2
 800c62a:	5eab      	ldrsh	r3, [r5, r2]
 800c62c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c62e:	18d1      	adds	r1, r2, r3
 800c630:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c632:	1ad2      	subs	r2, r2, r3
 800c634:	4291      	cmp	r1, r2
 800c636:	dd13      	ble.n	800c660 <lv_draw_rect+0x1880>
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 800c638:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c63a:	8829      	ldrh	r1, [r5, #0]
                lv_draw_fill(&circ_area, mask, color, opa);
 800c63c:	0020      	movs	r0, r4
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 800c63e:	1851      	adds	r1, r2, r1
 800c640:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c642:	b289      	uxth	r1, r1
 800c644:	1a8a      	subs	r2, r1, r2
 800c646:	8022      	strh	r2, [r4, #0]
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800c648:	9a06      	ldr	r2, [sp, #24]
                circ_area.x2 = rt_origo.x + LV_CIRC_OCT8_X(cir_out);
 800c64a:	80a1      	strh	r1, [r4, #4]
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800c64c:	1ad3      	subs	r3, r2, r3
                lv_draw_fill(&circ_area, mask, color, opa);
 800c64e:	466a      	mov	r2, sp
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800c650:	b21b      	sxth	r3, r3
 800c652:	8063      	strh	r3, [r4, #2]
                circ_area.y2 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800c654:	80e3      	strh	r3, [r4, #6]
                lv_draw_fill(&circ_area, mask, color, opa);
 800c656:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800c658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c65a:	9903      	ldr	r1, [sp, #12]
 800c65c:	f7fd fe64 	bl	800a328 <lv_draw_fill>
        lv_circ_next(&cir_out, &tmp_out);
 800c660:	a920      	add	r1, sp, #128	; 0x80
 800c662:	a824      	add	r0, sp, #144	; 0x90
 800c664:	f001 fa11 	bl	800da8a <lv_circ_next>
        if(cir_in.y < cir_in.x) {
 800c668:	a826      	add	r0, sp, #152	; 0x98
 800c66a:	2302      	movs	r3, #2
 800c66c:	5ec2      	ldrsh	r2, [r0, r3]
 800c66e:	2100      	movs	r1, #0
 800c670:	5e43      	ldrsh	r3, [r0, r1]
 800c672:	429a      	cmp	r2, r3
 800c674:	db01      	blt.n	800c67a <lv_draw_rect+0x189a>
 800c676:	f7ff f9ac 	bl	800b9d2 <lv_draw_rect+0xbf2>
            lv_circ_next(&cir_in, &tmp_in);
 800c67a:	a922      	add	r1, sp, #136	; 0x88
 800c67c:	f001 fa05 	bl	800da8a <lv_circ_next>
 800c680:	f7ff f9a7 	bl	800b9d2 <lv_draw_rect+0xbf2>
            act_w1 = cir_out.x - cir_out.y;
 800c684:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c686:	1ad3      	subs	r3, r2, r3
 800c688:	b29b      	uxth	r3, r3
 800c68a:	b219      	sxth	r1, r3
            act_w2 = act_w1 - 1;
 800c68c:	3b01      	subs	r3, #1
            act_w1 = cir_out.x - cir_out.y;
 800c68e:	910f      	str	r1, [sp, #60]	; 0x3c
            act_w2 = act_w1 - 1;
 800c690:	b21b      	sxth	r3, r3
 800c692:	e6d8      	b.n	800c446 <lv_draw_rect+0x1666>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800c694:	9b13      	ldr	r3, [sp, #76]	; 0x4c
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800c696:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c698:	0029      	movs	r1, r5
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800c69a:	2b01      	cmp	r3, #1
 800c69c:	d100      	bne.n	800c6a0 <lv_draw_rect+0x18c0>
 800c69e:	e09e      	b.n	800c7de <lv_draw_rect+0x19fe>
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800c6a0:	0018      	movs	r0, r3
 800c6a2:	f7fe fb79 	bl	800ad98 <antialias_get_opa_circ>
 800c6a6:	0004      	movs	r4, r0
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c6a8:	2209      	movs	r2, #9
 800c6aa:	9b05      	ldr	r3, [sp, #20]
 800c6ac:	4013      	ands	r3, r2
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d120      	bne.n	800c6f4 <lv_draw_rect+0x1914>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800c6b2:	466b      	mov	r3, sp
 800c6b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c6b6:	8e1f      	ldrh	r7, [r3, #48]	; 0x30
 800c6b8:	9b07      	ldr	r3, [sp, #28]
 800c6ba:	b2ae      	uxth	r6, r5
 800c6bc:	1899      	adds	r1, r3, r2
 800c6be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6c0:	9400      	str	r4, [sp, #0]
 800c6c2:	1c58      	adds	r0, r3, #1
 800c6c4:	9b04      	ldr	r3, [sp, #16]
 800c6c6:	1871      	adds	r1, r6, r1
 800c6c8:	1838      	adds	r0, r7, r0
 800c6ca:	b209      	sxth	r1, r1
 800c6cc:	b200      	sxth	r0, r0
 800c6ce:	895b      	ldrh	r3, [r3, #10]
 800c6d0:	9a03      	ldr	r2, [sp, #12]
 800c6d2:	f7fd fde0 	bl	800a296 <lv_draw_px>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800c6d6:	9b07      	ldr	r3, [sp, #28]
 800c6d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c6da:	1c59      	adds	r1, r3, #1
 800c6dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6de:	1879      	adds	r1, r7, r1
 800c6e0:	1898      	adds	r0, r3, r2
 800c6e2:	9b04      	ldr	r3, [sp, #16]
 800c6e4:	1830      	adds	r0, r6, r0
 800c6e6:	9400      	str	r4, [sp, #0]
 800c6e8:	b209      	sxth	r1, r1
 800c6ea:	b200      	sxth	r0, r0
 800c6ec:	895b      	ldrh	r3, [r3, #10]
 800c6ee:	9a03      	ldr	r2, [sp, #12]
 800c6f0:	f7fd fdd1 	bl	800a296 <lv_draw_px>
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800c6f4:	2205      	movs	r2, #5
 800c6f6:	9b05      	ldr	r3, [sp, #20]
 800c6f8:	4013      	ands	r3, r2
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d120      	bne.n	800c740 <lv_draw_rect+0x1960>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800c6fe:	466b      	mov	r3, sp
 800c700:	8e1f      	ldrh	r7, [r3, #48]	; 0x30
 800c702:	9b07      	ldr	r3, [sp, #28]
 800c704:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c706:	1c59      	adds	r1, r3, #1
 800c708:	9b08      	ldr	r3, [sp, #32]
 800c70a:	b2ae      	uxth	r6, r5
 800c70c:	1a98      	subs	r0, r3, r2
 800c70e:	9b04      	ldr	r3, [sp, #16]
 800c710:	9400      	str	r4, [sp, #0]
 800c712:	1879      	adds	r1, r7, r1
 800c714:	1b80      	subs	r0, r0, r6
 800c716:	b209      	sxth	r1, r1
 800c718:	b200      	sxth	r0, r0
 800c71a:	895b      	ldrh	r3, [r3, #10]
 800c71c:	9a03      	ldr	r2, [sp, #12]
 800c71e:	f7fd fdba 	bl	800a296 <lv_draw_px>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800c722:	9b07      	ldr	r3, [sp, #28]
 800c724:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c726:	9400      	str	r4, [sp, #0]
 800c728:	1899      	adds	r1, r3, r2
 800c72a:	9b08      	ldr	r3, [sp, #32]
 800c72c:	1871      	adds	r1, r6, r1
 800c72e:	1e58      	subs	r0, r3, #1
 800c730:	9b04      	ldr	r3, [sp, #16]
 800c732:	1bc0      	subs	r0, r0, r7
 800c734:	b209      	sxth	r1, r1
 800c736:	b200      	sxth	r0, r0
 800c738:	895b      	ldrh	r3, [r3, #10]
 800c73a:	9a03      	ldr	r2, [sp, #12]
 800c73c:	f7fd fdab 	bl	800a296 <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800c740:	2306      	movs	r3, #6
 800c742:	9a05      	ldr	r2, [sp, #20]
 800c744:	4013      	ands	r3, r2
 800c746:	2b06      	cmp	r3, #6
 800c748:	d120      	bne.n	800c78c <lv_draw_rect+0x19ac>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800c74a:	466b      	mov	r3, sp
 800c74c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c74e:	8e1f      	ldrh	r7, [r3, #48]	; 0x30
 800c750:	9b06      	ldr	r3, [sp, #24]
 800c752:	b2ae      	uxth	r6, r5
 800c754:	1a99      	subs	r1, r3, r2
 800c756:	9b08      	ldr	r3, [sp, #32]
 800c758:	9400      	str	r4, [sp, #0]
 800c75a:	1e58      	subs	r0, r3, #1
 800c75c:	9b04      	ldr	r3, [sp, #16]
 800c75e:	1b89      	subs	r1, r1, r6
 800c760:	1bc0      	subs	r0, r0, r7
 800c762:	b209      	sxth	r1, r1
 800c764:	b200      	sxth	r0, r0
 800c766:	895b      	ldrh	r3, [r3, #10]
 800c768:	9a03      	ldr	r2, [sp, #12]
 800c76a:	f7fd fd94 	bl	800a296 <lv_draw_px>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800c76e:	9b06      	ldr	r3, [sp, #24]
 800c770:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c772:	1e59      	subs	r1, r3, #1
 800c774:	9b08      	ldr	r3, [sp, #32]
 800c776:	1bc9      	subs	r1, r1, r7
 800c778:	1a98      	subs	r0, r3, r2
 800c77a:	9b04      	ldr	r3, [sp, #16]
 800c77c:	1b80      	subs	r0, r0, r6
 800c77e:	9400      	str	r4, [sp, #0]
 800c780:	b209      	sxth	r1, r1
 800c782:	b200      	sxth	r0, r0
 800c784:	895b      	ldrh	r3, [r3, #10]
 800c786:	9a03      	ldr	r2, [sp, #12]
 800c788:	f7fd fd85 	bl	800a296 <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800c78c:	230a      	movs	r3, #10
 800c78e:	9a05      	ldr	r2, [sp, #20]
 800c790:	4013      	ands	r3, r2
 800c792:	2b0a      	cmp	r3, #10
 800c794:	d120      	bne.n	800c7d8 <lv_draw_rect+0x19f8>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800c796:	466b      	mov	r3, sp
 800c798:	8e1e      	ldrh	r6, [r3, #48]	; 0x30
 800c79a:	9b06      	ldr	r3, [sp, #24]
 800c79c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c79e:	1e59      	subs	r1, r3, #1
 800c7a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7a2:	b2af      	uxth	r7, r5
 800c7a4:	1898      	adds	r0, r3, r2
 800c7a6:	9b04      	ldr	r3, [sp, #16]
 800c7a8:	9400      	str	r4, [sp, #0]
 800c7aa:	1b89      	subs	r1, r1, r6
 800c7ac:	1838      	adds	r0, r7, r0
 800c7ae:	b209      	sxth	r1, r1
 800c7b0:	b200      	sxth	r0, r0
 800c7b2:	895b      	ldrh	r3, [r3, #10]
 800c7b4:	9a03      	ldr	r2, [sp, #12]
 800c7b6:	f7fd fd6e 	bl	800a296 <lv_draw_px>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800c7ba:	9b06      	ldr	r3, [sp, #24]
 800c7bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c7be:	9400      	str	r4, [sp, #0]
 800c7c0:	1a99      	subs	r1, r3, r2
 800c7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7c4:	1bc9      	subs	r1, r1, r7
 800c7c6:	1c58      	adds	r0, r3, #1
 800c7c8:	9b04      	ldr	r3, [sp, #16]
 800c7ca:	1830      	adds	r0, r6, r0
 800c7cc:	b209      	sxth	r1, r1
 800c7ce:	b200      	sxth	r0, r0
 800c7d0:	895b      	ldrh	r3, [r3, #10]
 800c7d2:	9a03      	ldr	r2, [sp, #12]
 800c7d4:	f7fd fd5f 	bl	800a296 <lv_draw_px>
 800c7d8:	3501      	adds	r5, #1
 800c7da:	b22d      	sxth	r5, r5
 800c7dc:	e645      	b.n	800c46a <lv_draw_rect+0x168a>
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800c7de:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800c7e0:	f7fd fc82 	bl	800a0e8 <lv_draw_aa_get_opa>
 800c7e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7e6:	1a1c      	subs	r4, r3, r0
 800c7e8:	b2e4      	uxtb	r4, r4
 800c7ea:	e75d      	b.n	800c6a8 <lv_draw_rect+0x18c8>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800c7ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 800c7ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c7f0:	0021      	movs	r1, r4
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	d100      	bne.n	800c7f8 <lv_draw_rect+0x1a18>
 800c7f6:	e0ac      	b.n	800c952 <lv_draw_rect+0x1b72>
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 800c7f8:	0018      	movs	r0, r3
 800c7fa:	f7fe facd 	bl	800ad98 <antialias_get_opa_circ>
 800c7fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c800:	1a1d      	subs	r5, r3, r0
 800c802:	b2ed      	uxtb	r5, r5
 800c804:	2209      	movs	r2, #9
 800c806:	9b05      	ldr	r3, [sp, #20]
 800c808:	4013      	ands	r3, r2
 800c80a:	9318      	str	r3, [sp, #96]	; 0x60
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d10e      	bne.n	800c82e <lv_draw_rect+0x1a4e>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800c810:	9b07      	ldr	r3, [sp, #28]
 800c812:	9500      	str	r5, [sp, #0]
 800c814:	1999      	adds	r1, r3, r6
 800c816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c818:	1909      	adds	r1, r1, r4
 800c81a:	1e58      	subs	r0, r3, #1
 800c81c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c81e:	b209      	sxth	r1, r1
 800c820:	18c0      	adds	r0, r0, r3
 800c822:	9b04      	ldr	r3, [sp, #16]
 800c824:	b200      	sxth	r0, r0
 800c826:	895b      	ldrh	r3, [r3, #10]
 800c828:	9a03      	ldr	r2, [sp, #12]
 800c82a:	f7fd fd34 	bl	800a296 <lv_draw_px>
 800c82e:	2205      	movs	r2, #5
 800c830:	9b05      	ldr	r3, [sp, #20]
 800c832:	4013      	ands	r3, r2
 800c834:	9319      	str	r3, [sp, #100]	; 0x64
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800c836:	4293      	cmp	r3, r2
 800c838:	d10e      	bne.n	800c858 <lv_draw_rect+0x1a78>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 800c83a:	9b07      	ldr	r3, [sp, #28]
 800c83c:	9500      	str	r5, [sp, #0]
 800c83e:	1e59      	subs	r1, r3, #1
 800c840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c842:	9a03      	ldr	r2, [sp, #12]
 800c844:	18c9      	adds	r1, r1, r3
 800c846:	9b08      	ldr	r3, [sp, #32]
 800c848:	b209      	sxth	r1, r1
 800c84a:	1b98      	subs	r0, r3, r6
 800c84c:	9b04      	ldr	r3, [sp, #16]
 800c84e:	1b00      	subs	r0, r0, r4
 800c850:	b200      	sxth	r0, r0
 800c852:	895b      	ldrh	r3, [r3, #10]
 800c854:	f7fd fd1f 	bl	800a296 <lv_draw_px>
 800c858:	2306      	movs	r3, #6
 800c85a:	9a05      	ldr	r2, [sp, #20]
 800c85c:	401a      	ands	r2, r3
 800c85e:	921a      	str	r2, [sp, #104]	; 0x68
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800c860:	2a06      	cmp	r2, #6
 800c862:	d10e      	bne.n	800c882 <lv_draw_rect+0x1aa2>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800c864:	9b06      	ldr	r3, [sp, #24]
 800c866:	9500      	str	r5, [sp, #0]
 800c868:	1b99      	subs	r1, r3, r6
 800c86a:	9b08      	ldr	r3, [sp, #32]
 800c86c:	1b09      	subs	r1, r1, r4
 800c86e:	1c58      	adds	r0, r3, #1
 800c870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c872:	b209      	sxth	r1, r1
 800c874:	1ac0      	subs	r0, r0, r3
 800c876:	9b04      	ldr	r3, [sp, #16]
 800c878:	b200      	sxth	r0, r0
 800c87a:	895b      	ldrh	r3, [r3, #10]
 800c87c:	9a03      	ldr	r2, [sp, #12]
 800c87e:	f7fd fd0a 	bl	800a296 <lv_draw_px>
 800c882:	270a      	movs	r7, #10
 800c884:	9b05      	ldr	r3, [sp, #20]
 800c886:	401f      	ands	r7, r3
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800c888:	2f0a      	cmp	r7, #10
 800c88a:	d10e      	bne.n	800c8aa <lv_draw_rect+0x1aca>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 800c88c:	9b06      	ldr	r3, [sp, #24]
 800c88e:	9500      	str	r5, [sp, #0]
 800c890:	1c59      	adds	r1, r3, #1
 800c892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c894:	9a03      	ldr	r2, [sp, #12]
 800c896:	1ac9      	subs	r1, r1, r3
 800c898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c89a:	b209      	sxth	r1, r1
 800c89c:	1998      	adds	r0, r3, r6
 800c89e:	9b04      	ldr	r3, [sp, #16]
 800c8a0:	1900      	adds	r0, r0, r4
 800c8a2:	b200      	sxth	r0, r0
 800c8a4:	895b      	ldrh	r3, [r3, #10]
 800c8a6:	f7fd fcf6 	bl	800a296 <lv_draw_px>
                    if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 800c8aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c8ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c8ae:	189b      	adds	r3, r3, r2
 800c8b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8b2:	3a01      	subs	r2, #1
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d046      	beq.n	800c946 <lv_draw_rect+0x1b66>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c8b8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c8ba:	2b09      	cmp	r3, #9
 800c8bc:	d10e      	bne.n	800c8dc <lv_draw_rect+0x1afc>
                            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1,
 800c8be:	9b07      	ldr	r3, [sp, #28]
 800c8c0:	9500      	str	r5, [sp, #0]
 800c8c2:	1e59      	subs	r1, r3, #1
 800c8c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8c6:	9a03      	ldr	r2, [sp, #12]
 800c8c8:	18c9      	adds	r1, r1, r3
 800c8ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8cc:	b209      	sxth	r1, r1
 800c8ce:	1998      	adds	r0, r3, r6
 800c8d0:	9b04      	ldr	r3, [sp, #16]
 800c8d2:	1900      	adds	r0, r0, r4
 800c8d4:	b200      	sxth	r0, r0
 800c8d6:	895b      	ldrh	r3, [r3, #10]
 800c8d8:	f7fd fcdd 	bl	800a296 <lv_draw_px>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800c8dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c8de:	2b05      	cmp	r3, #5
 800c8e0:	d10e      	bne.n	800c900 <lv_draw_rect+0x1b20>
                            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i,
 800c8e2:	9b07      	ldr	r3, [sp, #28]
 800c8e4:	9500      	str	r5, [sp, #0]
 800c8e6:	1999      	adds	r1, r3, r6
 800c8e8:	9b08      	ldr	r3, [sp, #32]
 800c8ea:	1909      	adds	r1, r1, r4
 800c8ec:	1c58      	adds	r0, r3, #1
 800c8ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8f0:	b209      	sxth	r1, r1
 800c8f2:	1ac0      	subs	r0, r0, r3
 800c8f4:	9b04      	ldr	r3, [sp, #16]
 800c8f6:	b200      	sxth	r0, r0
 800c8f8:	895b      	ldrh	r3, [r3, #10]
 800c8fa:	9a03      	ldr	r2, [sp, #12]
 800c8fc:	f7fd fccb 	bl	800a296 <lv_draw_px>
                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800c900:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c902:	2b06      	cmp	r3, #6
 800c904:	d10e      	bne.n	800c924 <lv_draw_rect+0x1b44>
                            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1,
 800c906:	9b06      	ldr	r3, [sp, #24]
 800c908:	9500      	str	r5, [sp, #0]
 800c90a:	1c59      	adds	r1, r3, #1
 800c90c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c90e:	9a03      	ldr	r2, [sp, #12]
 800c910:	1ac9      	subs	r1, r1, r3
 800c912:	9b08      	ldr	r3, [sp, #32]
 800c914:	b209      	sxth	r1, r1
 800c916:	1b98      	subs	r0, r3, r6
 800c918:	9b04      	ldr	r3, [sp, #16]
 800c91a:	1b00      	subs	r0, r0, r4
 800c91c:	b200      	sxth	r0, r0
 800c91e:	895b      	ldrh	r3, [r3, #10]
 800c920:	f7fd fcb9 	bl	800a296 <lv_draw_px>
                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800c924:	2f0a      	cmp	r7, #10
 800c926:	d10e      	bne.n	800c946 <lv_draw_rect+0x1b66>
                            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i,
 800c928:	9b06      	ldr	r3, [sp, #24]
 800c92a:	9500      	str	r5, [sp, #0]
 800c92c:	1b99      	subs	r1, r3, r6
 800c92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c930:	1b09      	subs	r1, r1, r4
 800c932:	1e58      	subs	r0, r3, #1
 800c934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c936:	b209      	sxth	r1, r1
 800c938:	18c0      	adds	r0, r0, r3
 800c93a:	9b04      	ldr	r3, [sp, #16]
 800c93c:	b200      	sxth	r0, r0
 800c93e:	895b      	ldrh	r3, [r3, #10]
 800c940:	9a03      	ldr	r2, [sp, #12]
 800c942:	f7fd fca8 	bl	800a296 <lv_draw_px>
 800c946:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c948:	3401      	adds	r4, #1
 800c94a:	3301      	adds	r3, #1
 800c94c:	b224      	sxth	r4, r4
 800c94e:	9310      	str	r3, [sp, #64]	; 0x40
 800c950:	e5aa      	b.n	800c4a8 <lv_draw_rect+0x16c8>
                        aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800c952:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c954:	f7fd fbc8 	bl	800a0e8 <lv_draw_aa_get_opa>
 800c958:	0005      	movs	r5, r0
 800c95a:	e753      	b.n	800c804 <lv_draw_rect+0x1a24>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800c95c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c95e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c960:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c962:	f7fd fbc1 	bl	800a0e8 <lv_draw_aa_get_opa>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c966:	2209      	movs	r2, #9
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800c968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c96a:	1a1c      	subs	r4, r3, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c96c:	9b05      	ldr	r3, [sp, #20]
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800c96e:	b2e4      	uxtb	r4, r4
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c970:	4013      	ands	r3, r2
 800c972:	4293      	cmp	r3, r2
 800c974:	d11e      	bne.n	800c9b4 <lv_draw_rect+0x1bd4>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800c976:	466b      	mov	r3, sp
 800c978:	8e1f      	ldrh	r7, [r3, #48]	; 0x30
 800c97a:	8e9e      	ldrh	r6, [r3, #52]	; 0x34
 800c97c:	9b07      	ldr	r3, [sp, #28]
 800c97e:	9400      	str	r4, [sp, #0]
 800c980:	1959      	adds	r1, r3, r5
 800c982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c984:	1871      	adds	r1, r6, r1
 800c986:	1c58      	adds	r0, r3, #1
 800c988:	9b04      	ldr	r3, [sp, #16]
 800c98a:	1838      	adds	r0, r7, r0
 800c98c:	b209      	sxth	r1, r1
 800c98e:	b200      	sxth	r0, r0
 800c990:	895b      	ldrh	r3, [r3, #10]
 800c992:	9a03      	ldr	r2, [sp, #12]
 800c994:	f7fd fc7f 	bl	800a296 <lv_draw_px>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800c998:	9b07      	ldr	r3, [sp, #28]
 800c99a:	9400      	str	r4, [sp, #0]
 800c99c:	1c59      	adds	r1, r3, #1
 800c99e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9a0:	1879      	adds	r1, r7, r1
 800c9a2:	1958      	adds	r0, r3, r5
 800c9a4:	9b04      	ldr	r3, [sp, #16]
 800c9a6:	1830      	adds	r0, r6, r0
 800c9a8:	b209      	sxth	r1, r1
 800c9aa:	b200      	sxth	r0, r0
 800c9ac:	895b      	ldrh	r3, [r3, #10]
 800c9ae:	9a03      	ldr	r2, [sp, #12]
 800c9b0:	f7fd fc71 	bl	800a296 <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800c9b4:	2205      	movs	r2, #5
 800c9b6:	9b05      	ldr	r3, [sp, #20]
 800c9b8:	4013      	ands	r3, r2
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d11e      	bne.n	800c9fc <lv_draw_rect+0x1c1c>
 800c9be:	466b      	mov	r3, sp
 800c9c0:	8e9e      	ldrh	r6, [r3, #52]	; 0x34
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800c9c2:	8e1f      	ldrh	r7, [r3, #48]	; 0x30
 800c9c4:	9b07      	ldr	r3, [sp, #28]
 800c9c6:	9400      	str	r4, [sp, #0]
 800c9c8:	1c59      	adds	r1, r3, #1
 800c9ca:	9b08      	ldr	r3, [sp, #32]
 800c9cc:	1879      	adds	r1, r7, r1
 800c9ce:	1b58      	subs	r0, r3, r5
 800c9d0:	9b04      	ldr	r3, [sp, #16]
 800c9d2:	1b80      	subs	r0, r0, r6
 800c9d4:	b209      	sxth	r1, r1
 800c9d6:	b200      	sxth	r0, r0
 800c9d8:	895b      	ldrh	r3, [r3, #10]
 800c9da:	9a03      	ldr	r2, [sp, #12]
 800c9dc:	f7fd fc5b 	bl	800a296 <lv_draw_px>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800c9e0:	9b07      	ldr	r3, [sp, #28]
 800c9e2:	9400      	str	r4, [sp, #0]
 800c9e4:	1959      	adds	r1, r3, r5
 800c9e6:	9b08      	ldr	r3, [sp, #32]
 800c9e8:	1871      	adds	r1, r6, r1
 800c9ea:	1e58      	subs	r0, r3, #1
 800c9ec:	9b04      	ldr	r3, [sp, #16]
 800c9ee:	1bc0      	subs	r0, r0, r7
 800c9f0:	b209      	sxth	r1, r1
 800c9f2:	b200      	sxth	r0, r0
 800c9f4:	895b      	ldrh	r3, [r3, #10]
 800c9f6:	9a03      	ldr	r2, [sp, #12]
 800c9f8:	f7fd fc4d 	bl	800a296 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800c9fc:	2306      	movs	r3, #6
 800c9fe:	9a05      	ldr	r2, [sp, #20]
 800ca00:	4013      	ands	r3, r2
 800ca02:	2b06      	cmp	r3, #6
 800ca04:	d11e      	bne.n	800ca44 <lv_draw_rect+0x1c64>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800ca06:	466b      	mov	r3, sp
 800ca08:	8e1f      	ldrh	r7, [r3, #48]	; 0x30
 800ca0a:	8e9e      	ldrh	r6, [r3, #52]	; 0x34
 800ca0c:	9b06      	ldr	r3, [sp, #24]
 800ca0e:	9400      	str	r4, [sp, #0]
 800ca10:	1b59      	subs	r1, r3, r5
 800ca12:	9b08      	ldr	r3, [sp, #32]
 800ca14:	1b89      	subs	r1, r1, r6
 800ca16:	1e58      	subs	r0, r3, #1
 800ca18:	9b04      	ldr	r3, [sp, #16]
 800ca1a:	1bc0      	subs	r0, r0, r7
 800ca1c:	b209      	sxth	r1, r1
 800ca1e:	b200      	sxth	r0, r0
 800ca20:	895b      	ldrh	r3, [r3, #10]
 800ca22:	9a03      	ldr	r2, [sp, #12]
 800ca24:	f7fd fc37 	bl	800a296 <lv_draw_px>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800ca28:	9b06      	ldr	r3, [sp, #24]
 800ca2a:	9400      	str	r4, [sp, #0]
 800ca2c:	1e59      	subs	r1, r3, #1
 800ca2e:	9b08      	ldr	r3, [sp, #32]
 800ca30:	1bc9      	subs	r1, r1, r7
 800ca32:	1b58      	subs	r0, r3, r5
 800ca34:	9b04      	ldr	r3, [sp, #16]
 800ca36:	1b80      	subs	r0, r0, r6
 800ca38:	b209      	sxth	r1, r1
 800ca3a:	b200      	sxth	r0, r0
 800ca3c:	895b      	ldrh	r3, [r3, #10]
 800ca3e:	9a03      	ldr	r2, [sp, #12]
 800ca40:	f7fd fc29 	bl	800a296 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800ca44:	230a      	movs	r3, #10
 800ca46:	9a05      	ldr	r2, [sp, #20]
 800ca48:	4013      	ands	r3, r2
 800ca4a:	2b0a      	cmp	r3, #10
 800ca4c:	d11e      	bne.n	800ca8c <lv_draw_rect+0x1cac>
 800ca4e:	466b      	mov	r3, sp
 800ca50:	8e9f      	ldrh	r7, [r3, #52]	; 0x34
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800ca52:	8e1e      	ldrh	r6, [r3, #48]	; 0x30
 800ca54:	9b06      	ldr	r3, [sp, #24]
 800ca56:	9400      	str	r4, [sp, #0]
 800ca58:	1e59      	subs	r1, r3, #1
 800ca5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca5c:	1b89      	subs	r1, r1, r6
 800ca5e:	1958      	adds	r0, r3, r5
 800ca60:	9b04      	ldr	r3, [sp, #16]
 800ca62:	1838      	adds	r0, r7, r0
 800ca64:	b209      	sxth	r1, r1
 800ca66:	b200      	sxth	r0, r0
 800ca68:	895b      	ldrh	r3, [r3, #10]
 800ca6a:	9a03      	ldr	r2, [sp, #12]
 800ca6c:	f7fd fc13 	bl	800a296 <lv_draw_px>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800ca70:	9b06      	ldr	r3, [sp, #24]
 800ca72:	9400      	str	r4, [sp, #0]
 800ca74:	1b59      	subs	r1, r3, r5
 800ca76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca78:	1bc9      	subs	r1, r1, r7
 800ca7a:	1c58      	adds	r0, r3, #1
 800ca7c:	9b04      	ldr	r3, [sp, #16]
 800ca7e:	1830      	adds	r0, r6, r0
 800ca80:	b209      	sxth	r1, r1
 800ca82:	b200      	sxth	r0, r0
 800ca84:	895b      	ldrh	r3, [r3, #10]
 800ca86:	9a03      	ldr	r2, [sp, #12]
 800ca88:	f7fd fc05 	bl	800a296 <lv_draw_px>
 800ca8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca8e:	3301      	adds	r3, #1
 800ca90:	b21b      	sxth	r3, r3
 800ca92:	f7fe ffb6 	bl	800ba02 <lv_draw_rect+0xc22>
            lv_opa_t aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800ca96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ca98:	0021      	movs	r1, r4
 800ca9a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ca9c:	f7fd fb24 	bl	800a0e8 <lv_draw_aa_get_opa>
 800caa0:	2209      	movs	r2, #9
 800caa2:	9b05      	ldr	r3, [sp, #20]
 800caa4:	0006      	movs	r6, r0
 800caa6:	4013      	ands	r3, r2
 800caa8:	930e      	str	r3, [sp, #56]	; 0x38
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800caaa:	4293      	cmp	r3, r2
 800caac:	d10e      	bne.n	800cacc <lv_draw_rect+0x1cec>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800caae:	9b07      	ldr	r3, [sp, #28]
 800cab0:	9600      	str	r6, [sp, #0]
 800cab2:	1959      	adds	r1, r3, r5
 800cab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cab6:	1909      	adds	r1, r1, r4
 800cab8:	1e58      	subs	r0, r3, #1
 800caba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cabc:	b209      	sxth	r1, r1
 800cabe:	18c0      	adds	r0, r0, r3
 800cac0:	9b04      	ldr	r3, [sp, #16]
 800cac2:	b200      	sxth	r0, r0
 800cac4:	895b      	ldrh	r3, [r3, #10]
 800cac6:	9a03      	ldr	r2, [sp, #12]
 800cac8:	f7fd fbe5 	bl	800a296 <lv_draw_px>
 800cacc:	2205      	movs	r2, #5
 800cace:	9b05      	ldr	r3, [sp, #20]
 800cad0:	4013      	ands	r3, r2
 800cad2:	930f      	str	r3, [sp, #60]	; 0x3c
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d10e      	bne.n	800caf6 <lv_draw_rect+0x1d16>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 800cad8:	9b07      	ldr	r3, [sp, #28]
 800cada:	9600      	str	r6, [sp, #0]
 800cadc:	1e59      	subs	r1, r3, #1
 800cade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cae0:	9a03      	ldr	r2, [sp, #12]
 800cae2:	18c9      	adds	r1, r1, r3
 800cae4:	9b08      	ldr	r3, [sp, #32]
 800cae6:	b209      	sxth	r1, r1
 800cae8:	1b58      	subs	r0, r3, r5
 800caea:	9b04      	ldr	r3, [sp, #16]
 800caec:	1b00      	subs	r0, r0, r4
 800caee:	b200      	sxth	r0, r0
 800caf0:	895b      	ldrh	r3, [r3, #10]
 800caf2:	f7fd fbd0 	bl	800a296 <lv_draw_px>
 800caf6:	2306      	movs	r3, #6
 800caf8:	9a05      	ldr	r2, [sp, #20]
 800cafa:	401a      	ands	r2, r3
 800cafc:	9210      	str	r2, [sp, #64]	; 0x40
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800cafe:	2a06      	cmp	r2, #6
 800cb00:	d10e      	bne.n	800cb20 <lv_draw_rect+0x1d40>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800cb02:	9b06      	ldr	r3, [sp, #24]
 800cb04:	9600      	str	r6, [sp, #0]
 800cb06:	1b59      	subs	r1, r3, r5
 800cb08:	9b08      	ldr	r3, [sp, #32]
 800cb0a:	1b09      	subs	r1, r1, r4
 800cb0c:	1c58      	adds	r0, r3, #1
 800cb0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb10:	b209      	sxth	r1, r1
 800cb12:	1ac0      	subs	r0, r0, r3
 800cb14:	9b04      	ldr	r3, [sp, #16]
 800cb16:	b200      	sxth	r0, r0
 800cb18:	895b      	ldrh	r3, [r3, #10]
 800cb1a:	9a03      	ldr	r2, [sp, #12]
 800cb1c:	f7fd fbbb 	bl	800a296 <lv_draw_px>
 800cb20:	270a      	movs	r7, #10
 800cb22:	9b05      	ldr	r3, [sp, #20]
 800cb24:	401f      	ands	r7, r3
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800cb26:	2f0a      	cmp	r7, #10
 800cb28:	d10e      	bne.n	800cb48 <lv_draw_rect+0x1d68>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 800cb2a:	9b06      	ldr	r3, [sp, #24]
 800cb2c:	9600      	str	r6, [sp, #0]
 800cb2e:	1c59      	adds	r1, r3, #1
 800cb30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb32:	9a03      	ldr	r2, [sp, #12]
 800cb34:	1ac9      	subs	r1, r1, r3
 800cb36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb38:	b209      	sxth	r1, r1
 800cb3a:	1958      	adds	r0, r3, r5
 800cb3c:	9b04      	ldr	r3, [sp, #16]
 800cb3e:	1900      	adds	r0, r0, r4
 800cb40:	b200      	sxth	r0, r0
 800cb42:	895b      	ldrh	r3, [r3, #10]
 800cb44:	f7fd fba7 	bl	800a296 <lv_draw_px>
            if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 800cb48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cb4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cb4e:	3b01      	subs	r3, #1
 800cb50:	1852      	adds	r2, r2, r1
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d046      	beq.n	800cbe4 <lv_draw_rect+0x1e04>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800cb56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb58:	2b09      	cmp	r3, #9
 800cb5a:	d10e      	bne.n	800cb7a <lv_draw_rect+0x1d9a>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1, mask,
 800cb5c:	9b07      	ldr	r3, [sp, #28]
 800cb5e:	9600      	str	r6, [sp, #0]
 800cb60:	1e59      	subs	r1, r3, #1
 800cb62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb64:	9a03      	ldr	r2, [sp, #12]
 800cb66:	18c9      	adds	r1, r1, r3
 800cb68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb6a:	b209      	sxth	r1, r1
 800cb6c:	1958      	adds	r0, r3, r5
 800cb6e:	9b04      	ldr	r3, [sp, #16]
 800cb70:	1900      	adds	r0, r0, r4
 800cb72:	b200      	sxth	r0, r0
 800cb74:	895b      	ldrh	r3, [r3, #10]
 800cb76:	f7fd fb8e 	bl	800a296 <lv_draw_px>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800cb7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb7c:	2b05      	cmp	r3, #5
 800cb7e:	d10e      	bne.n	800cb9e <lv_draw_rect+0x1dbe>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800cb80:	9b07      	ldr	r3, [sp, #28]
 800cb82:	9600      	str	r6, [sp, #0]
 800cb84:	1959      	adds	r1, r3, r5
 800cb86:	9b08      	ldr	r3, [sp, #32]
 800cb88:	1909      	adds	r1, r1, r4
 800cb8a:	1c58      	adds	r0, r3, #1
 800cb8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb8e:	b209      	sxth	r1, r1
 800cb90:	1ac0      	subs	r0, r0, r3
 800cb92:	9b04      	ldr	r3, [sp, #16]
 800cb94:	b200      	sxth	r0, r0
 800cb96:	895b      	ldrh	r3, [r3, #10]
 800cb98:	9a03      	ldr	r2, [sp, #12]
 800cb9a:	f7fd fb7c 	bl	800a296 <lv_draw_px>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800cb9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cba0:	2b06      	cmp	r3, #6
 800cba2:	d10e      	bne.n	800cbc2 <lv_draw_rect+0x1de2>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1, mask,
 800cba4:	9b06      	ldr	r3, [sp, #24]
 800cba6:	9600      	str	r6, [sp, #0]
 800cba8:	1c59      	adds	r1, r3, #1
 800cbaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbac:	9a03      	ldr	r2, [sp, #12]
 800cbae:	1ac9      	subs	r1, r1, r3
 800cbb0:	9b08      	ldr	r3, [sp, #32]
 800cbb2:	b209      	sxth	r1, r1
 800cbb4:	1b58      	subs	r0, r3, r5
 800cbb6:	9b04      	ldr	r3, [sp, #16]
 800cbb8:	1b00      	subs	r0, r0, r4
 800cbba:	b200      	sxth	r0, r0
 800cbbc:	895b      	ldrh	r3, [r3, #10]
 800cbbe:	f7fd fb6a 	bl	800a296 <lv_draw_px>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800cbc2:	2f0a      	cmp	r7, #10
 800cbc4:	d10e      	bne.n	800cbe4 <lv_draw_rect+0x1e04>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800cbc6:	9b06      	ldr	r3, [sp, #24]
 800cbc8:	9600      	str	r6, [sp, #0]
 800cbca:	1b59      	subs	r1, r3, r5
 800cbcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbce:	1b09      	subs	r1, r1, r4
 800cbd0:	1e58      	subs	r0, r3, #1
 800cbd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbd4:	b209      	sxth	r1, r1
 800cbd6:	18c0      	adds	r0, r0, r3
 800cbd8:	9b04      	ldr	r3, [sp, #16]
 800cbda:	b200      	sxth	r0, r0
 800cbdc:	895b      	ldrh	r3, [r3, #10]
 800cbde:	9a03      	ldr	r2, [sp, #12]
 800cbe0:	f7fd fb59 	bl	800a296 <lv_draw_px>
 800cbe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cbe6:	3401      	adds	r4, #1
 800cbe8:	3301      	adds	r3, #1
 800cbea:	b224      	sxth	r4, r4
 800cbec:	930c      	str	r3, [sp, #48]	; 0x30
 800cbee:	f7fe ff73 	bl	800bad8 <lv_draw_rect+0xcf8>
                act_color = mcolor;
 800cbf2:	466b      	mov	r3, sp
            if(mcolor.full == gcolor.full)
 800cbf4:	9806      	ldr	r0, [sp, #24]
                act_color = mcolor;
 800cbf6:	8a9a      	ldrh	r2, [r3, #20]
            if(mcolor.full == gcolor.full)
 800cbf8:	9b05      	ldr	r3, [sp, #20]
 800cbfa:	4283      	cmp	r3, r0
 800cbfc:	d00e      	beq.n	800cc1c <lv_draw_rect+0x1e3c>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800cbfe:	2306      	movs	r3, #6
 800cc00:	5ef8      	ldrsh	r0, [r7, r3]
 800cc02:	23ff      	movs	r3, #255	; 0xff
 800cc04:	1a40      	subs	r0, r0, r1
 800cc06:	4358      	muls	r0, r3
 800cc08:	9908      	ldr	r1, [sp, #32]
 800cc0a:	f7f3 faa9 	bl	8000160 <__udivsi3>
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800cc0e:	466b      	mov	r3, sp
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800cc10:	b2c2      	uxtb	r2, r0
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800cc12:	8b19      	ldrh	r1, [r3, #24]
 800cc14:	8a98      	ldrh	r0, [r3, #20]
 800cc16:	f7fe f87b 	bl	800ad10 <lv_color_mix>
 800cc1a:	1c02      	adds	r2, r0, #0
            lv_draw_fill(&edge_top_area, mask, act_color, opa);
 800cc1c:	9b07      	ldr	r3, [sp, #28]
 800cc1e:	9903      	ldr	r1, [sp, #12]
 800cc20:	a822      	add	r0, sp, #136	; 0x88
 800cc22:	f7fd fb81 	bl	800a328 <lv_draw_fill>
 800cc26:	f7ff f87f 	bl	800bd28 <lv_draw_rect+0xf48>
	...

0800cc2c <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 800cc2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc2e:	0006      	movs	r6, r0

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 800cc30:	2400      	movs	r4, #0
        if(cache[i].dec_dsc.src == src || src == NULL) {
 800cc32:	2728      	movs	r7, #40	; 0x28
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800cc34:	4b0e      	ldr	r3, [pc, #56]	; (800cc70 <lv_img_cache_invalidate_src+0x44>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	9301      	str	r3, [sp, #4]
    for(i = 0; i < entry_cnt; i++) {
 800cc3a:	4b0e      	ldr	r3, [pc, #56]	; (800cc74 <lv_img_cache_invalidate_src+0x48>)
 800cc3c:	881b      	ldrh	r3, [r3, #0]
 800cc3e:	42a3      	cmp	r3, r4
 800cc40:	d800      	bhi.n	800cc44 <lv_img_cache_invalidate_src+0x18>

            memset(&cache[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
        }
    }
}
 800cc42:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        if(cache[i].dec_dsc.src == src || src == NULL) {
 800cc44:	003d      	movs	r5, r7
 800cc46:	4365      	muls	r5, r4
 800cc48:	9b01      	ldr	r3, [sp, #4]
 800cc4a:	195d      	adds	r5, r3, r5
 800cc4c:	686b      	ldr	r3, [r5, #4]
 800cc4e:	42b3      	cmp	r3, r6
 800cc50:	d001      	beq.n	800cc56 <lv_img_cache_invalidate_src+0x2a>
 800cc52:	2e00      	cmp	r6, #0
 800cc54:	d109      	bne.n	800cc6a <lv_img_cache_invalidate_src+0x3e>
            if(cache[i].dec_dsc.src != NULL) {
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d002      	beq.n	800cc60 <lv_img_cache_invalidate_src+0x34>
                lv_img_decoder_close(&cache[i].dec_dsc);
 800cc5a:	0028      	movs	r0, r5
 800cc5c:	f000 fad4 	bl	800d208 <lv_img_decoder_close>
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
 800cc60:	003a      	movs	r2, r7
 800cc62:	2100      	movs	r1, #0
 800cc64:	0028      	movs	r0, r5
 800cc66:	f002 fe76 	bl	800f956 <memset>
    for(i = 0; i < entry_cnt; i++) {
 800cc6a:	3401      	adds	r4, #1
 800cc6c:	b2a4      	uxth	r4, r4
 800cc6e:	e7e4      	b.n	800cc3a <lv_img_cache_invalidate_src+0xe>
 800cc70:	200054f0 	.word	0x200054f0
 800cc74:	20001678 	.word	0x20001678

0800cc78 <lv_img_cache_set_size>:
{
 800cc78:	b570      	push	{r4, r5, r6, lr}
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 800cc7a:	4d14      	ldr	r5, [pc, #80]	; (800cccc <lv_img_cache_set_size+0x54>)
{
 800cc7c:	0004      	movs	r4, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 800cc7e:	682b      	ldr	r3, [r5, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d005      	beq.n	800cc90 <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
 800cc84:	2000      	movs	r0, #0
 800cc86:	f7ff ffd1 	bl	800cc2c <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 800cc8a:	6828      	ldr	r0, [r5, #0]
 800cc8c:	f001 f9d8 	bl	800e040 <lv_mem_free>
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 800cc90:	2628      	movs	r6, #40	; 0x28
 800cc92:	4366      	muls	r6, r4
 800cc94:	0030      	movs	r0, r6
 800cc96:	f001 f99f 	bl	800dfd8 <lv_mem_alloc>
 800cc9a:	6028      	str	r0, [r5, #0]
    lv_mem_assert(LV_GC_ROOT(_lv_img_cache_array));
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	d100      	bne.n	800cca2 <lv_img_cache_set_size+0x2a>
 800cca0:	e7fe      	b.n	800cca0 <lv_img_cache_set_size+0x28>
    entry_cnt = new_entry_cnt;
 800cca2:	4b0b      	ldr	r3, [pc, #44]	; (800ccd0 <lv_img_cache_set_size+0x58>)
 800cca4:	801c      	strh	r4, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
 800cca6:	2400      	movs	r4, #0
 800cca8:	42a6      	cmp	r6, r4
 800ccaa:	d100      	bne.n	800ccae <lv_img_cache_set_size+0x36>
}
 800ccac:	bd70      	pop	{r4, r5, r6, pc}
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 800ccae:	682b      	ldr	r3, [r5, #0]
 800ccb0:	2224      	movs	r2, #36	; 0x24
 800ccb2:	1918      	adds	r0, r3, r4
 800ccb4:	2100      	movs	r1, #0
 800ccb6:	f002 fe4e 	bl	800f956 <memset>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i], 0, sizeof(lv_img_cache_entry_t));
 800ccba:	682b      	ldr	r3, [r5, #0]
 800ccbc:	2228      	movs	r2, #40	; 0x28
 800ccbe:	1918      	adds	r0, r3, r4
 800ccc0:	2100      	movs	r1, #0
 800ccc2:	f002 fe48 	bl	800f956 <memset>
 800ccc6:	3428      	adds	r4, #40	; 0x28
 800ccc8:	e7ee      	b.n	800cca8 <lv_img_cache_set_size+0x30>
 800ccca:	46c0      	nop			; (mov r8, r8)
 800cccc:	200054f0 	.word	0x200054f0
 800ccd0:	20001678 	.word	0x20001678

0800ccd4 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 800ccd4:	b570      	push	{r4, r5, r6, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800ccd6:	6a0c      	ldr	r4, [r1, #32]
{
 800ccd8:	000d      	movs	r5, r1
    if(user_data) {
 800ccda:	2c00      	cmp	r4, #0
 800ccdc:	d011      	beq.n	800cd02 <lv_img_decoder_built_in_close+0x2e>
#if LV_USE_FILESYSTEM
        if(user_data->f) {
 800ccde:	6820      	ldr	r0, [r4, #0]
 800cce0:	2800      	cmp	r0, #0
 800cce2:	d004      	beq.n	800ccee <lv_img_decoder_built_in_close+0x1a>
            lv_fs_close(user_data->f);
 800cce4:	f000 fefe 	bl	800dae4 <lv_fs_close>
            lv_mem_free(user_data->f);
 800cce8:	6820      	ldr	r0, [r4, #0]
 800ccea:	f001 f9a9 	bl	800e040 <lv_mem_free>
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
 800ccee:	6860      	ldr	r0, [r4, #4]
 800ccf0:	2800      	cmp	r0, #0
 800ccf2:	d001      	beq.n	800ccf8 <lv_img_decoder_built_in_close+0x24>
 800ccf4:	f001 f9a4 	bl	800e040 <lv_mem_free>

        lv_mem_free(user_data);
 800ccf8:	0020      	movs	r0, r4
 800ccfa:	f001 f9a1 	bl	800e040 <lv_mem_free>

        dsc->user_data = NULL;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	622b      	str	r3, [r5, #32]
    }
}
 800cd02:	bd70      	pop	{r4, r5, r6, pc}

0800cd04 <lv_img_decoder_built_in_open>:
{
 800cd04:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800cd06:	7b0b      	ldrb	r3, [r1, #12]
{
 800cd08:	b085      	sub	sp, #20
 800cd0a:	0005      	movs	r5, r0
 800cd0c:	000c      	movs	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800cd0e:	2b01      	cmp	r3, #1
 800cd10:	d12a      	bne.n	800cd68 <lv_img_decoder_built_in_open+0x64>
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 800cd12:	6848      	ldr	r0, [r1, #4]
 800cd14:	f000 ff80 	bl	800dc18 <lv_fs_get_ext>
 800cd18:	494b      	ldr	r1, [pc, #300]	; (800ce48 <lv_img_decoder_built_in_open+0x144>)
 800cd1a:	f7f3 f9f1 	bl	8000100 <strcmp>
 800cd1e:	2800      	cmp	r0, #0
 800cd20:	d000      	beq.n	800cd24 <lv_img_decoder_built_in_open+0x20>
 800cd22:	e08e      	b.n	800ce42 <lv_img_decoder_built_in_open+0x13e>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 800cd24:	2202      	movs	r2, #2
 800cd26:	6861      	ldr	r1, [r4, #4]
 800cd28:	a802      	add	r0, sp, #8
 800cd2a:	f000 ff33 	bl	800db94 <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	d000      	beq.n	800cd34 <lv_img_decoder_built_in_open+0x30>
 800cd32:	e086      	b.n	800ce42 <lv_img_decoder_built_in_open+0x13e>
        if(dsc->user_data == NULL) {
 800cd34:	6a26      	ldr	r6, [r4, #32]
 800cd36:	2e00      	cmp	r6, #0
 800cd38:	d10a      	bne.n	800cd50 <lv_img_decoder_built_in_open+0x4c>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800cd3a:	3008      	adds	r0, #8
 800cd3c:	f001 f94c 	bl	800dfd8 <lv_mem_alloc>
 800cd40:	6220      	str	r0, [r4, #32]
            if(dsc->user_data == NULL) {
 800cd42:	2800      	cmp	r0, #0
 800cd44:	d100      	bne.n	800cd48 <lv_img_decoder_built_in_open+0x44>
 800cd46:	e7fe      	b.n	800cd46 <lv_img_decoder_built_in_open+0x42>
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 800cd48:	2208      	movs	r2, #8
 800cd4a:	0031      	movs	r1, r6
 800cd4c:	f002 fe03 	bl	800f956 <memset>
        user_data->f                               = lv_mem_alloc(sizeof(f));
 800cd50:	2008      	movs	r0, #8
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800cd52:	6a26      	ldr	r6, [r4, #32]
        user_data->f                               = lv_mem_alloc(sizeof(f));
 800cd54:	f001 f940 	bl	800dfd8 <lv_mem_alloc>
 800cd58:	6030      	str	r0, [r6, #0]
        if(user_data->f == NULL) {
 800cd5a:	2800      	cmp	r0, #0
 800cd5c:	d100      	bne.n	800cd60 <lv_img_decoder_built_in_open+0x5c>
 800cd5e:	e7fe      	b.n	800cd5e <lv_img_decoder_built_in_open+0x5a>
        memcpy(user_data->f, &f, sizeof(f));
 800cd60:	2208      	movs	r2, #8
 800cd62:	a902      	add	r1, sp, #8
 800cd64:	f002 fdee 	bl	800f944 <memcpy>
    lv_img_cf_t cf = dsc->header.cf;
 800cd68:	7c20      	ldrb	r0, [r4, #16]
 800cd6a:	06c0      	lsls	r0, r0, #27
 800cd6c:	0ec0      	lsrs	r0, r0, #27
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800cd6e:	1f03      	subs	r3, r0, #4
 800cd70:	2b02      	cmp	r3, #2
 800cd72:	d808      	bhi.n	800cd86 <lv_img_decoder_built_in_open+0x82>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800cd74:	7b23      	ldrb	r3, [r4, #12]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d132      	bne.n	800cde0 <lv_img_decoder_built_in_open+0xdc>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 800cd7a:	6863      	ldr	r3, [r4, #4]
 800cd7c:	689b      	ldr	r3, [r3, #8]
            return LV_RES_OK;
 800cd7e:	2001      	movs	r0, #1
            dsc->img_data = NULL;
 800cd80:	6163      	str	r3, [r4, #20]
}
 800cd82:	b005      	add	sp, #20
 800cd84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 800cd86:	1fc3      	subs	r3, r0, #7
 800cd88:	2b03      	cmp	r3, #3
 800cd8a:	d853      	bhi.n	800ce34 <lv_img_decoder_built_in_open+0x130>
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 800cd8c:	f7fd fd56 	bl	800a83c <lv_img_color_format_get_px_size>
        if(dsc->user_data == NULL) {
 800cd90:	6a26      	ldr	r6, [r4, #32]
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 800cd92:	0005      	movs	r5, r0
        if(dsc->user_data == NULL) {
 800cd94:	2e00      	cmp	r6, #0
 800cd96:	d10a      	bne.n	800cdae <lv_img_decoder_built_in_open+0xaa>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800cd98:	2008      	movs	r0, #8
 800cd9a:	f001 f91d 	bl	800dfd8 <lv_mem_alloc>
 800cd9e:	6220      	str	r0, [r4, #32]
            if(dsc->user_data == NULL) {
 800cda0:	2800      	cmp	r0, #0
 800cda2:	d100      	bne.n	800cda6 <lv_img_decoder_built_in_open+0xa2>
 800cda4:	e7fe      	b.n	800cda4 <lv_img_decoder_built_in_open+0xa0>
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 800cda6:	2208      	movs	r2, #8
 800cda8:	0031      	movs	r1, r6
 800cdaa:	f002 fdd4 	bl	800f956 <memset>
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800cdae:	2702      	movs	r7, #2
 800cdb0:	40af      	lsls	r7, r5
 800cdb2:	0038      	movs	r0, r7
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800cdb4:	6a26      	ldr	r6, [r4, #32]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800cdb6:	f001 f90f 	bl	800dfd8 <lv_mem_alloc>
 800cdba:	6070      	str	r0, [r6, #4]
        if(user_data->palette == NULL) {
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	d103      	bne.n	800cdc8 <lv_img_decoder_built_in_open+0xc4>
            lv_mem_assert(user_data->f);
 800cdc0:	6833      	ldr	r3, [r6, #0]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d100      	bne.n	800cdc8 <lv_img_decoder_built_in_open+0xc4>
 800cdc6:	e7fe      	b.n	800cdc6 <lv_img_decoder_built_in_open+0xc2>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800cdc8:	7b23      	ldrb	r3, [r4, #12]
 800cdca:	2b01      	cmp	r3, #1
 800cdcc:	d10a      	bne.n	800cde4 <lv_img_decoder_built_in_open+0xe0>
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
 800cdce:	2104      	movs	r1, #4
 800cdd0:	6830      	ldr	r0, [r6, #0]
 800cdd2:	f000 feba 	bl	800db4a <lv_fs_seek>
            lv_fs_read(user_data->f, user_data->palette, palette_size * sizeof(lv_color_t), NULL);
 800cdd6:	ce03      	ldmia	r6!, {r0, r1}
 800cdd8:	2300      	movs	r3, #0
 800cdda:	003a      	movs	r2, r7
 800cddc:	f000 fe97 	bl	800db0e <lv_fs_read>
            dsc->img_data = NULL;
 800cde0:	2300      	movs	r3, #0
 800cde2:	e7cc      	b.n	800cd7e <lv_img_decoder_built_in_open+0x7a>
 800cde4:	2204      	movs	r2, #4
 800cde6:	40aa      	lsls	r2, r5
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 800cde8:	6863      	ldr	r3, [r4, #4]
    color.ch.red   = (uint16_t)(r8 >> 3);
 800cdea:	271f      	movs	r7, #31
 800cdec:	689b      	ldr	r3, [r3, #8]
 800cdee:	189a      	adds	r2, r3, r2
 800cdf0:	9201      	str	r2, [sp, #4]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800cdf2:	2207      	movs	r2, #7
 800cdf4:	4694      	mov	ip, r2
            for(i = 0; i < palette_size; i++) {
 800cdf6:	9a01      	ldr	r2, [sp, #4]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d0f1      	beq.n	800cde0 <lv_img_decoder_built_in_open+0xdc>
    color.ch.blue  = (uint16_t)(b8 >> 3);
 800cdfc:	781e      	ldrb	r6, [r3, #0]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800cdfe:	7805      	ldrb	r5, [r0, #0]
 800ce00:	08f6      	lsrs	r6, r6, #3
 800ce02:	43bd      	bics	r5, r7
 800ce04:	4335      	orrs	r5, r6
    color.ch.green = (uint16_t)(g8 >> 2);
 800ce06:	7859      	ldrb	r1, [r3, #1]
    color.ch.red   = (uint16_t)(r8 >> 3);
 800ce08:	789a      	ldrb	r2, [r3, #2]
 800ce0a:	7005      	strb	r5, [r0, #0]
 800ce0c:	253f      	movs	r5, #63	; 0x3f
    color.ch.green = (uint16_t)(g8 >> 2);
 800ce0e:	0889      	lsrs	r1, r1, #2
 800ce10:	4029      	ands	r1, r5
 800ce12:	4e0e      	ldr	r6, [pc, #56]	; (800ce4c <lv_img_decoder_built_in_open+0x148>)
 800ce14:	8805      	ldrh	r5, [r0, #0]
 800ce16:	0149      	lsls	r1, r1, #5
 800ce18:	4035      	ands	r5, r6
 800ce1a:	4329      	orrs	r1, r5
 800ce1c:	4665      	mov	r5, ip
    color.ch.red   = (uint16_t)(r8 >> 3);
 800ce1e:	08d2      	lsrs	r2, r2, #3
 800ce20:	8001      	strh	r1, [r0, #0]
 800ce22:	403a      	ands	r2, r7
 800ce24:	0a09      	lsrs	r1, r1, #8
 800ce26:	00d2      	lsls	r2, r2, #3
 800ce28:	4029      	ands	r1, r5
 800ce2a:	430a      	orrs	r2, r1
 800ce2c:	7042      	strb	r2, [r0, #1]
 800ce2e:	3304      	adds	r3, #4
 800ce30:	3002      	adds	r0, #2
 800ce32:	e7e0      	b.n	800cdf6 <lv_img_decoder_built_in_open+0xf2>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 800ce34:	380b      	subs	r0, #11
 800ce36:	2803      	cmp	r0, #3
 800ce38:	d9d2      	bls.n	800cde0 <lv_img_decoder_built_in_open+0xdc>
        lv_img_decoder_built_in_close(decoder, dsc);
 800ce3a:	0021      	movs	r1, r4
 800ce3c:	0028      	movs	r0, r5
 800ce3e:	f7ff ff49 	bl	800ccd4 <lv_img_decoder_built_in_close>
        return LV_RES_INV;
 800ce42:	2000      	movs	r0, #0
 800ce44:	e79d      	b.n	800cd82 <lv_img_decoder_built_in_open+0x7e>
 800ce46:	46c0      	nop			; (mov r8, r8)
 800ce48:	0801294a 	.word	0x0801294a
 800ce4c:	fffff81f 	.word	0xfffff81f

0800ce50 <lv_img_decoder_built_in_info>:
{
 800ce50:	b530      	push	{r4, r5, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800ce52:	0008      	movs	r0, r1
{
 800ce54:	b085      	sub	sp, #20
 800ce56:	000d      	movs	r5, r1
 800ce58:	0014      	movs	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800ce5a:	f7fd fcf9 	bl	800a850 <lv_img_src_get_type>
 800ce5e:	1e03      	subs	r3, r0, #0
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800ce60:	d11d      	bne.n	800ce9e <lv_img_decoder_built_in_info+0x4e>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 800ce62:	782a      	ldrb	r2, [r5, #0]
 800ce64:	06d2      	lsls	r2, r2, #27
 800ce66:	0ed2      	lsrs	r2, r2, #27
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800ce68:	1f11      	subs	r1, r2, #4
 800ce6a:	290a      	cmp	r1, #10
 800ce6c:	d815      	bhi.n	800ce9a <lv_img_decoder_built_in_info+0x4a>
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 800ce6e:	6820      	ldr	r0, [r4, #0]
 800ce70:	4923      	ldr	r1, [pc, #140]	; (800cf00 <lv_img_decoder_built_in_info+0xb0>)
 800ce72:	682b      	ldr	r3, [r5, #0]
 800ce74:	4001      	ands	r1, r0
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800ce76:	201f      	movs	r0, #31
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 800ce78:	02db      	lsls	r3, r3, #11
 800ce7a:	0d5b      	lsrs	r3, r3, #21
 800ce7c:	029b      	lsls	r3, r3, #10
 800ce7e:	430b      	orrs	r3, r1
 800ce80:	6023      	str	r3, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800ce82:	886b      	ldrh	r3, [r5, #2]
 800ce84:	095b      	lsrs	r3, r3, #5
 800ce86:	0159      	lsls	r1, r3, #5
 800ce88:	8863      	ldrh	r3, [r4, #2]
 800ce8a:	4003      	ands	r3, r0
 800ce8c:	430b      	orrs	r3, r1
 800ce8e:	8063      	strh	r3, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800ce90:	7823      	ldrb	r3, [r4, #0]
 800ce92:	4383      	bics	r3, r0
 800ce94:	431a      	orrs	r2, r3
 800ce96:	7022      	strb	r2, [r4, #0]
    return LV_RES_OK;
 800ce98:	381e      	subs	r0, #30
}
 800ce9a:	b005      	add	sp, #20
 800ce9c:	bd30      	pop	{r4, r5, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 800ce9e:	2801      	cmp	r0, #1
 800cea0:	d11a      	bne.n	800ced8 <lv_img_decoder_built_in_info+0x88>
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
 800cea2:	2202      	movs	r2, #2
 800cea4:	0029      	movs	r1, r5
 800cea6:	a802      	add	r0, sp, #8
 800cea8:	f000 fe74 	bl	800db94 <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 800ceac:	2800      	cmp	r0, #0
 800ceae:	d108      	bne.n	800cec2 <lv_img_decoder_built_in_info+0x72>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
 800ceb0:	ab01      	add	r3, sp, #4
 800ceb2:	2204      	movs	r2, #4
 800ceb4:	0021      	movs	r1, r4
 800ceb6:	a802      	add	r0, sp, #8
 800ceb8:	f000 fe29 	bl	800db0e <lv_fs_read>
            lv_fs_close(&file);
 800cebc:	a802      	add	r0, sp, #8
 800cebe:	f000 fe11 	bl	800dae4 <lv_fs_close>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800cec2:	221f      	movs	r2, #31
 800cec4:	2000      	movs	r0, #0
 800cec6:	7823      	ldrb	r3, [r4, #0]
 800cec8:	06db      	lsls	r3, r3, #27
 800ceca:	0edb      	lsrs	r3, r3, #27
 800cecc:	331c      	adds	r3, #28
 800cece:	4013      	ands	r3, r2
 800ced0:	3a15      	subs	r2, #21
 800ced2:	429a      	cmp	r2, r3
 800ced4:	4140      	adcs	r0, r0
 800ced6:	e7e0      	b.n	800ce9a <lv_img_decoder_built_in_info+0x4a>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800ced8:	2000      	movs	r0, #0
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 800ceda:	2b02      	cmp	r3, #2
 800cedc:	d1dd      	bne.n	800ce9a <lv_img_decoder_built_in_info+0x4a>
        header->w = 1;
 800cede:	6823      	ldr	r3, [r4, #0]
 800cee0:	4a07      	ldr	r2, [pc, #28]	; (800cf00 <lv_img_decoder_built_in_info+0xb0>)
    return LV_RES_OK;
 800cee2:	3001      	adds	r0, #1
        header->w = 1;
 800cee4:	401a      	ands	r2, r3
 800cee6:	2380      	movs	r3, #128	; 0x80
 800cee8:	00db      	lsls	r3, r3, #3
 800ceea:	4313      	orrs	r3, r2
        header->h = 1;
 800ceec:	2220      	movs	r2, #32
        header->w = 1;
 800ceee:	6023      	str	r3, [r4, #0]
        header->h = 1;
 800cef0:	8062      	strh	r2, [r4, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800cef2:	32c0      	adds	r2, #192	; 0xc0
 800cef4:	4013      	ands	r3, r2
 800cef6:	3ad5      	subs	r2, #213	; 0xd5
 800cef8:	4313      	orrs	r3, r2
 800cefa:	7023      	strb	r3, [r4, #0]
 800cefc:	e7cd      	b.n	800ce9a <lv_img_decoder_built_in_info+0x4a>
 800cefe:	46c0      	nop			; (mov r8, r8)
 800cf00:	ffe003ff 	.word	0xffe003ff

0800cf04 <lv_img_decoder_built_in_read_line>:
{
 800cf04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf06:	b0b5      	sub	sp, #212	; 0xd4
 800cf08:	001f      	movs	r7, r3
 800cf0a:	ab3a      	add	r3, sp, #232	; 0xe8
 800cf0c:	0014      	movs	r4, r2
 800cf0e:	2200      	movs	r2, #0
 800cf10:	5e9b      	ldrsh	r3, [r3, r2]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800cf12:	7c08      	ldrb	r0, [r1, #16]
{
 800cf14:	9302      	str	r3, [sp, #8]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800cf16:	231f      	movs	r3, #31
 800cf18:	4003      	ands	r3, r0
 800cf1a:	1f1a      	subs	r2, r3, #4
{
 800cf1c:	9101      	str	r1, [sp, #4]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800cf1e:	2a02      	cmp	r2, #2
 800cf20:	d82e      	bhi.n	800cf80 <lv_img_decoder_built_in_read_line+0x7c>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800cf22:	7b0b      	ldrb	r3, [r1, #12]
    lv_res_t res = LV_RES_INV;
 800cf24:	2500      	movs	r5, #0
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800cf26:	2b01      	cmp	r3, #1
 800cf28:	d127      	bne.n	800cf7a <lv_img_decoder_built_in_read_line+0x76>

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800cf2a:	6a0b      	ldr	r3, [r1, #32]
    lv_fs_res_t res;
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800cf2c:	06c0      	lsls	r0, r0, #27
 800cf2e:	0ec0      	lsrs	r0, r0, #27
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800cf30:	9303      	str	r3, [sp, #12]
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800cf32:	f7fd fc83 	bl	800a83c <lv_img_color_format_get_px_size>

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800cf36:	9b01      	ldr	r3, [sp, #4]
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800cf38:	0006      	movs	r6, r0
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800cf3a:	6919      	ldr	r1, [r3, #16]
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(user_data->f, pos);
 800cf3c:	9b03      	ldr	r3, [sp, #12]
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800cf3e:	02c9      	lsls	r1, r1, #11
 800cf40:	0d49      	lsrs	r1, r1, #21
 800cf42:	4379      	muls	r1, r7
 800cf44:	1909      	adds	r1, r1, r4
 800cf46:	4341      	muls	r1, r0
 800cf48:	10c9      	asrs	r1, r1, #3
    pos += 4; /*Skip the header*/
 800cf4a:	3104      	adds	r1, #4
    res = lv_fs_seek(user_data->f, pos);
 800cf4c:	6818      	ldr	r0, [r3, #0]
 800cf4e:	f000 fdfc 	bl	800db4a <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 800cf52:	42a8      	cmp	r0, r5
 800cf54:	d111      	bne.n	800cf7a <lv_img_decoder_built_in_read_line+0x76>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
    }
    uint32_t btr = len * (px_size >> 3);
 800cf56:	9b02      	ldr	r3, [sp, #8]
 800cf58:	08f6      	lsrs	r6, r6, #3
 800cf5a:	b2f6      	uxtb	r6, r6
 800cf5c:	4373      	muls	r3, r6
 800cf5e:	001e      	movs	r6, r3
    uint32_t br  = 0;
    lv_fs_read(user_data->f, buf, btr, &br);
 800cf60:	9803      	ldr	r0, [sp, #12]
 800cf62:	ab0c      	add	r3, sp, #48	; 0x30
 800cf64:	0032      	movs	r2, r6
 800cf66:	993b      	ldr	r1, [sp, #236]	; 0xec
 800cf68:	6800      	ldr	r0, [r0, #0]
    uint32_t br  = 0;
 800cf6a:	950c      	str	r5, [sp, #48]	; 0x30
    lv_fs_read(user_data->f, buf, btr, &br);
 800cf6c:	f000 fdcf 	bl	800db0e <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 800cf70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf72:	1b9e      	subs	r6, r3, r6
 800cf74:	4275      	negs	r5, r6
 800cf76:	4175      	adcs	r5, r6
        return LV_RES_INV;
 800cf78:	b2ed      	uxtb	r5, r5
}
 800cf7a:	0028      	movs	r0, r5
 800cf7c:	b035      	add	sp, #212	; 0xd4
 800cf7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 800cf80:	001a      	movs	r2, r3
 800cf82:	3a0b      	subs	r2, #11
 800cf84:	2600      	movs	r6, #0
 800cf86:	2a03      	cmp	r2, #3
 800cf88:	d900      	bls.n	800cf8c <lv_img_decoder_built_in_read_line+0x88>
 800cf8a:	e0ac      	b.n	800d0e6 <lv_img_decoder_built_in_read_line+0x1e2>
static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800cf8c:	22ff      	movs	r2, #255	; 0xff
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800cf8e:	2155      	movs	r1, #85	; 0x55
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800cf90:	ab06      	add	r3, sp, #24
 800cf92:	705a      	strb	r2, [r3, #1]
 800cf94:	701e      	strb	r6, [r3, #0]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800cf96:	ab07      	add	r3, sp, #28
 800cf98:	7059      	strb	r1, [r3, #1]
 800cf9a:	1849      	adds	r1, r1, r1
 800cf9c:	7099      	strb	r1, [r3, #2]
 800cf9e:	70da      	strb	r2, [r3, #3]
 800cfa0:	701e      	strb	r6, [r3, #0]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800cfa2:	3aef      	subs	r2, #239	; 0xef
 800cfa4:	4997      	ldr	r1, [pc, #604]	; (800d204 <lv_img_decoder_built_in_read_line+0x300>)
 800cfa6:	a808      	add	r0, sp, #32
 800cfa8:	f002 fccc 	bl	800f944 <memcpy>
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255};

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->style->image.color;
 800cfac:	9b01      	ldr	r3, [sp, #4]
 800cfae:	689b      	ldr	r3, [r3, #8]
 800cfb0:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800cfb2:	9303      	str	r3, [sp, #12]
 800cfb4:	9b3b      	ldr	r3, [sp, #236]	; 0xec
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800cfb6:	0a11      	lsrs	r1, r2, #8
    for(i = 0; i < len; i++) {
 800cfb8:	9802      	ldr	r0, [sp, #8]
 800cfba:	42b0      	cmp	r0, r6
 800cfbc:	dc18      	bgt.n	800cff0 <lv_img_decoder_built_in_read_line+0xec>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 800cfbe:	9b01      	ldr	r3, [sp, #4]
 800cfc0:	7c18      	ldrb	r0, [r3, #16]
 800cfc2:	06c0      	lsls	r0, r0, #27
 800cfc4:	0ec0      	lsrs	r0, r0, #27
 800cfc6:	f7fd fc39 	bl	800a83c <lv_img_color_format_get_px_size>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800cfca:	2301      	movs	r3, #1
 800cfcc:	4083      	lsls	r3, r0
 800cfce:	3b01      	subs	r3, #1
 800cfd0:	b29b      	uxth	r3, r3
 800cfd2:	9304      	str	r3, [sp, #16]

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
 800cfd4:	9b01      	ldr	r3, [sp, #4]
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 800cfd6:	9003      	str	r0, [sp, #12]
    switch(dsc->header.cf) {
 800cfd8:	7c18      	ldrb	r0, [r3, #16]
 800cfda:	06c0      	lsls	r0, r0, #27
 800cfdc:	0ec0      	lsrs	r0, r0, #27
 800cfde:	380b      	subs	r0, #11
 800cfe0:	2803      	cmp	r0, #3
 800cfe2:	d854      	bhi.n	800d08e <lv_img_decoder_built_in_read_line+0x18a>
 800cfe4:	691d      	ldr	r5, [r3, #16]
            ofs += w * y + (x >> 1); /*First pixel*/
            pos       = 4 - ((x & 0x1) * 4);
            opa_table = alpha4_opa_table;
            break;
        case LV_IMG_CF_ALPHA_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800cfe6:	02ed      	lsls	r5, r5, #11
    switch(dsc->header.cf) {
 800cfe8:	f7f3 f89c 	bl	8000124 <__gnu_thumb1_case_uqi>
 800cfec:	493a2b08 	.word	0x493a2b08
 800cff0:	3601      	adds	r6, #1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 800cff2:	701a      	strb	r2, [r3, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800cff4:	7059      	strb	r1, [r3, #1]
 800cff6:	b236      	sxth	r6, r6
 800cff8:	3303      	adds	r3, #3
 800cffa:	e7dd      	b.n	800cfb8 <lv_img_decoder_built_in_read_line+0xb4>
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800cffc:	0d6b      	lsrs	r3, r5, #21
 800cffe:	10da      	asrs	r2, r3, #3
            if(dsc->header.w & 0x7) w++;
 800d000:	1c55      	adds	r5, r2, #1
 800d002:	075b      	lsls	r3, r3, #29
 800d004:	d100      	bne.n	800d008 <lv_img_decoder_built_in_read_line+0x104>
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800d006:	b215      	sxth	r5, r2
            pos       = 7 - (x & 0x7);
 800d008:	2607      	movs	r6, #7
            ofs += w * y + (x >> 3); /*First pixel*/
 800d00a:	436f      	muls	r7, r5
 800d00c:	10e1      	asrs	r1, r4, #3
            pos       = 7 - (x & 0x7);
 800d00e:	43a6      	bics	r6, r4
            ofs += w * y + (x >> 3); /*First pixel*/
 800d010:	1879      	adds	r1, r7, r1
            opa_table = alpha1_opa_table;
 800d012:	ac06      	add	r4, sp, #24
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800d014:	9b01      	ldr	r3, [sp, #4]
 800d016:	7b1b      	ldrb	r3, [r3, #12]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d13c      	bne.n	800d096 <lv_img_decoder_built_in_read_line+0x192>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
 800d01c:	9b01      	ldr	r3, [sp, #4]
 800d01e:	685b      	ldr	r3, [r3, #4]
 800d020:	689b      	ldr	r3, [r3, #8]
 800d022:	1859      	adds	r1, r3, r1
 800d024:	9b3b      	ldr	r3, [sp, #236]	; 0xec
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 800d026:	2708      	movs	r7, #8
 800d028:	1c98      	adds	r0, r3, #2
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800d02a:	231f      	movs	r3, #31
        data_tmp = fs_buf;
 800d02c:	2200      	movs	r2, #0
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800d02e:	469c      	mov	ip, r3
            pos = 8 - px_size;
 800d030:	9b03      	ldr	r3, [sp, #12]
 800d032:	1aff      	subs	r7, r7, r3
 800d034:	b27b      	sxtb	r3, r7
 800d036:	9305      	str	r3, [sp, #20]
    for(i = 0; i < len; i++) {
 800d038:	9b02      	ldr	r3, [sp, #8]
 800d03a:	4293      	cmp	r3, r2
 800d03c:	dc39      	bgt.n	800d0b2 <lv_img_decoder_built_in_read_line+0x1ae>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 800d03e:	2501      	movs	r5, #1
 800d040:	e79b      	b.n	800cf7a <lv_img_decoder_built_in_read_line+0x76>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800d042:	0d6b      	lsrs	r3, r5, #21
 800d044:	109a      	asrs	r2, r3, #2
            if(dsc->header.w & 0x3) w++;
 800d046:	1c55      	adds	r5, r2, #1
 800d048:	079b      	lsls	r3, r3, #30
 800d04a:	d100      	bne.n	800d04e <lv_img_decoder_built_in_read_line+0x14a>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800d04c:	b215      	sxth	r5, r2
            pos       = 6 - ((x & 0x3) * 2);
 800d04e:	2603      	movs	r6, #3
            ofs += w * y + (x >> 2); /*First pixel*/
 800d050:	436f      	muls	r7, r5
 800d052:	10a1      	asrs	r1, r4, #2
            pos       = 6 - ((x & 0x3) * 2);
 800d054:	b2a4      	uxth	r4, r4
 800d056:	43a6      	bics	r6, r4
            ofs += w * y + (x >> 2); /*First pixel*/
 800d058:	1879      	adds	r1, r7, r1
            pos       = 6 - ((x & 0x3) * 2);
 800d05a:	0076      	lsls	r6, r6, #1
            opa_table = alpha2_opa_table;
 800d05c:	ac07      	add	r4, sp, #28
 800d05e:	e7d9      	b.n	800d014 <lv_img_decoder_built_in_read_line+0x110>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800d060:	0d6b      	lsrs	r3, r5, #21
 800d062:	105a      	asrs	r2, r3, #1
            if(dsc->header.w & 0x1) w++;
 800d064:	1c55      	adds	r5, r2, #1
 800d066:	07db      	lsls	r3, r3, #31
 800d068:	d400      	bmi.n	800d06c <lv_img_decoder_built_in_read_line+0x168>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800d06a:	b215      	sxth	r5, r2
            ofs += w * y + (x >> 1); /*First pixel*/
 800d06c:	436f      	muls	r7, r5
 800d06e:	1061      	asrs	r1, r4, #1
 800d070:	1879      	adds	r1, r7, r1
            pos       = 4 - ((x & 0x1) * 4);
 800d072:	2600      	movs	r6, #0
 800d074:	07e3      	lsls	r3, r4, #31
 800d076:	d400      	bmi.n	800d07a <lv_img_decoder_built_in_read_line+0x176>
 800d078:	2604      	movs	r6, #4
            opa_table = alpha4_opa_table;
 800d07a:	ac08      	add	r4, sp, #32
 800d07c:	e7ca      	b.n	800d014 <lv_img_decoder_built_in_read_line+0x110>
            pos = 0;
 800d07e:	2600      	movs	r6, #0
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800d080:	0d6d      	lsrs	r5, r5, #21
 800d082:	b2a9      	uxth	r1, r5
            ofs += w * y + x;  /*First pixel*/
 800d084:	4379      	muls	r1, r7
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800d086:	b22d      	sxth	r5, r5
            ofs += w * y + x;  /*First pixel*/
 800d088:	1909      	adds	r1, r1, r4
    const lv_opa_t * opa_table = NULL;
 800d08a:	0034      	movs	r4, r6
 800d08c:	e7c2      	b.n	800d014 <lv_img_decoder_built_in_read_line+0x110>
    int8_t pos   = 0;
 800d08e:	2600      	movs	r6, #0
    uint32_t ofs = 0;
 800d090:	0031      	movs	r1, r6
    lv_coord_t w = 0;
 800d092:	0035      	movs	r5, r6
 800d094:	e7f9      	b.n	800d08a <lv_img_decoder_built_in_read_line+0x186>
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800d096:	9b01      	ldr	r3, [sp, #4]
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 800d098:	3104      	adds	r1, #4
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800d09a:	6a1f      	ldr	r7, [r3, #32]
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 800d09c:	6838      	ldr	r0, [r7, #0]
 800d09e:	f000 fd54 	bl	800db4a <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 800d0a2:	a90c      	add	r1, sp, #48	; 0x30
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	002a      	movs	r2, r5
 800d0a8:	6838      	ldr	r0, [r7, #0]
 800d0aa:	f000 fd30 	bl	800db0e <lv_fs_read>
        data_tmp = fs_buf;
 800d0ae:	a90c      	add	r1, sp, #48	; 0x30
 800d0b0:	e7b8      	b.n	800d024 <lv_img_decoder_built_in_read_line+0x120>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800d0b2:	9b04      	ldr	r3, [sp, #16]
 800d0b4:	780d      	ldrb	r5, [r1, #0]
 800d0b6:	40b3      	lsls	r3, r6
 800d0b8:	402b      	ands	r3, r5
 800d0ba:	4133      	asrs	r3, r6
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800d0bc:	4667      	mov	r7, ip
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800d0be:	9d01      	ldr	r5, [sp, #4]
 800d0c0:	b2db      	uxtb	r3, r3
 800d0c2:	7c2d      	ldrb	r5, [r5, #16]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800d0c4:	403d      	ands	r5, r7
 800d0c6:	2d0e      	cmp	r5, #14
 800d0c8:	d10b      	bne.n	800d0e2 <lv_img_decoder_built_in_read_line+0x1de>
 800d0ca:	7003      	strb	r3, [r0, #0]
        pos -= px_size;
 800d0cc:	9b03      	ldr	r3, [sp, #12]
 800d0ce:	1af6      	subs	r6, r6, r3
 800d0d0:	b276      	sxtb	r6, r6
        if(pos < 0) {
 800d0d2:	2e00      	cmp	r6, #0
 800d0d4:	da01      	bge.n	800d0da <lv_img_decoder_built_in_read_line+0x1d6>
            pos = 8 - px_size;
 800d0d6:	9e05      	ldr	r6, [sp, #20]
            data_tmp++;
 800d0d8:	3101      	adds	r1, #1
 800d0da:	3201      	adds	r2, #1
 800d0dc:	b212      	sxth	r2, r2
 800d0de:	3003      	adds	r0, #3
 800d0e0:	e7aa      	b.n	800d038 <lv_img_decoder_built_in_read_line+0x134>
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800d0e2:	5ce3      	ldrb	r3, [r4, r3]
 800d0e4:	e7f1      	b.n	800d0ca <lv_img_decoder_built_in_read_line+0x1c6>
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 800d0e6:	3b07      	subs	r3, #7
    lv_res_t res = LV_RES_INV;
 800d0e8:	0035      	movs	r5, r6
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 800d0ea:	2b03      	cmp	r3, #3
 800d0ec:	d900      	bls.n	800d0f0 <lv_img_decoder_built_in_read_line+0x1ec>
 800d0ee:	e744      	b.n	800cf7a <lv_img_decoder_built_in_read_line+0x76>
static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800d0f0:	06c0      	lsls	r0, r0, #27
 800d0f2:	0ec0      	lsrs	r0, r0, #27
 800d0f4:	f7fd fba2 	bl	800a83c <lv_img_color_format_get_px_size>
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	4083      	lsls	r3, r0
 800d0fc:	3b01      	subs	r3, #1
 800d0fe:	b29b      	uxth	r3, r3
 800d100:	9304      	str	r3, [sp, #16]

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
 800d102:	9b01      	ldr	r3, [sp, #4]
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800d104:	9003      	str	r0, [sp, #12]
    switch(dsc->header.cf) {
 800d106:	7c18      	ldrb	r0, [r3, #16]
 800d108:	06c0      	lsls	r0, r0, #27
 800d10a:	0ec0      	lsrs	r0, r0, #27
 800d10c:	3807      	subs	r0, #7
 800d10e:	2803      	cmp	r0, #3
 800d110:	d868      	bhi.n	800d1e4 <lv_img_decoder_built_in_read_line+0x2e0>
 800d112:	691d      	ldr	r5, [r3, #16]
            ofs += w * y + (x >> 1); /*First pixel*/
            ofs += 64;               /*Skip the palette*/
            pos = 4 - ((x & 0x1) * 4);
            break;
        case LV_IMG_CF_INDEXED_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800d114:	02ed      	lsls	r5, r5, #11
    switch(dsc->header.cf) {
 800d116:	f7f3 f805 	bl	8000124 <__gnu_thumb1_case_uqi>
 800d11a:	3a02      	.short	0x3a02
 800d11c:	5b4a      	.short	0x5b4a
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800d11e:	0d6b      	lsrs	r3, r5, #21
 800d120:	10da      	asrs	r2, r3, #3
            if(dsc->header.w & 0x7) w++;
 800d122:	1c55      	adds	r5, r2, #1
 800d124:	075b      	lsls	r3, r3, #29
 800d126:	d100      	bne.n	800d12a <lv_img_decoder_built_in_read_line+0x226>
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800d128:	b215      	sxth	r5, r2
            ofs += w * y + (x >> 3); /*First pixel*/
 800d12a:	003e      	movs	r6, r7
            pos = 7 - (x & 0x7);
 800d12c:	2707      	movs	r7, #7
            ofs += w * y + (x >> 3); /*First pixel*/
 800d12e:	436e      	muls	r6, r5
 800d130:	10e1      	asrs	r1, r4, #3
 800d132:	1876      	adds	r6, r6, r1
            ofs += 8;                /*Skip the palette*/
 800d134:	3608      	adds	r6, #8
            pos = 7 - (x & 0x7);
 800d136:	43a7      	bics	r7, r4
            ofs += 1024;       /*Skip the palette*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800d138:	9b01      	ldr	r3, [sp, #4]
 800d13a:	6a1c      	ldr	r4, [r3, #32]

#if LV_USE_FILESYSTEM
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800d13c:	7b1b      	ldrb	r3, [r3, #12]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d153      	bne.n	800d1ea <lv_img_decoder_built_in_read_line+0x2e6>
        const lv_img_dsc_t * img_dsc = dsc->src;
        data_tmp                     = img_dsc->data + ofs;
 800d142:	9b01      	ldr	r3, [sp, #4]
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	6899      	ldr	r1, [r3, #8]
 800d148:	198e      	adds	r6, r1, r6
    uint8_t val_act;
    lv_coord_t i;
    lv_color_t * cbuf = (lv_color_t *)buf;
    for(i = 0; i < len; i++) {
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
        cbuf[i] = user_data->palette[val_act];
 800d14a:	23ff      	movs	r3, #255	; 0xff

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 800d14c:	2208      	movs	r2, #8
        data_tmp = fs_buf;
 800d14e:	2100      	movs	r1, #0
        cbuf[i] = user_data->palette[val_act];
 800d150:	469c      	mov	ip, r3
            pos = 8 - px_size;
 800d152:	9b03      	ldr	r3, [sp, #12]
 800d154:	1ad2      	subs	r2, r2, r3
 800d156:	b252      	sxtb	r2, r2
    for(i = 0; i < len; i++) {
 800d158:	9802      	ldr	r0, [sp, #8]
 800d15a:	b20b      	sxth	r3, r1
 800d15c:	4298      	cmp	r0, r3
 800d15e:	dc00      	bgt.n	800d162 <lv_img_decoder_built_in_read_line+0x25e>
 800d160:	e76d      	b.n	800d03e <lv_img_decoder_built_in_read_line+0x13a>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800d162:	9b04      	ldr	r3, [sp, #16]
 800d164:	7835      	ldrb	r5, [r6, #0]
 800d166:	40bb      	lsls	r3, r7
 800d168:	402b      	ands	r3, r5
 800d16a:	413b      	asrs	r3, r7
        cbuf[i] = user_data->palette[val_act];
 800d16c:	4665      	mov	r5, ip
 800d16e:	402b      	ands	r3, r5
 800d170:	6865      	ldr	r5, [r4, #4]
 800d172:	005b      	lsls	r3, r3, #1
 800d174:	5b5b      	ldrh	r3, [r3, r5]
 800d176:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800d178:	0048      	lsls	r0, r1, #1
 800d17a:	522b      	strh	r3, [r5, r0]
        pos -= px_size;
 800d17c:	9b03      	ldr	r3, [sp, #12]
 800d17e:	1aff      	subs	r7, r7, r3
 800d180:	b27f      	sxtb	r7, r7
        if(pos < 0) {
 800d182:	2f00      	cmp	r7, #0
 800d184:	da01      	bge.n	800d18a <lv_img_decoder_built_in_read_line+0x286>
            pos = 8 - px_size;
 800d186:	0017      	movs	r7, r2
            data_tmp++;
 800d188:	3601      	adds	r6, #1
 800d18a:	3101      	adds	r1, #1
 800d18c:	e7e4      	b.n	800d158 <lv_img_decoder_built_in_read_line+0x254>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800d18e:	0d6b      	lsrs	r3, r5, #21
 800d190:	109a      	asrs	r2, r3, #2
            if(dsc->header.w & 0x3) w++;
 800d192:	1c55      	adds	r5, r2, #1
 800d194:	079b      	lsls	r3, r3, #30
 800d196:	d100      	bne.n	800d19a <lv_img_decoder_built_in_read_line+0x296>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800d198:	b215      	sxth	r5, r2
            ofs += w * y + (x >> 2); /*First pixel*/
 800d19a:	003e      	movs	r6, r7
            pos = 6 - ((x & 0x3) * 2);
 800d19c:	2703      	movs	r7, #3
            ofs += w * y + (x >> 2); /*First pixel*/
 800d19e:	436e      	muls	r6, r5
 800d1a0:	10a1      	asrs	r1, r4, #2
            pos = 6 - ((x & 0x3) * 2);
 800d1a2:	b2a4      	uxth	r4, r4
            ofs += w * y + (x >> 2); /*First pixel*/
 800d1a4:	1876      	adds	r6, r6, r1
            pos = 6 - ((x & 0x3) * 2);
 800d1a6:	43a7      	bics	r7, r4
            ofs += 16;               /*Skip the palette*/
 800d1a8:	3610      	adds	r6, #16
            pos = 6 - ((x & 0x3) * 2);
 800d1aa:	007f      	lsls	r7, r7, #1
 800d1ac:	e7c4      	b.n	800d138 <lv_img_decoder_built_in_read_line+0x234>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800d1ae:	0d6b      	lsrs	r3, r5, #21
 800d1b0:	105a      	asrs	r2, r3, #1
            if(dsc->header.w & 0x1) w++;
 800d1b2:	1c55      	adds	r5, r2, #1
 800d1b4:	07db      	lsls	r3, r3, #31
 800d1b6:	d400      	bmi.n	800d1ba <lv_img_decoder_built_in_read_line+0x2b6>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800d1b8:	b215      	sxth	r5, r2
            ofs += w * y + (x >> 1); /*First pixel*/
 800d1ba:	003e      	movs	r6, r7
            pos = 4 - ((x & 0x1) * 4);
 800d1bc:	2701      	movs	r7, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 800d1be:	1061      	asrs	r1, r4, #1
            pos = 4 - ((x & 0x1) * 4);
 800d1c0:	403c      	ands	r4, r7
 800d1c2:	4267      	negs	r7, r4
 800d1c4:	4167      	adcs	r7, r4
            ofs += w * y + (x >> 1); /*First pixel*/
 800d1c6:	436e      	muls	r6, r5
 800d1c8:	1876      	adds	r6, r6, r1
            ofs += 64;               /*Skip the palette*/
 800d1ca:	3640      	adds	r6, #64	; 0x40
            pos = 4 - ((x & 0x1) * 4);
 800d1cc:	00bf      	lsls	r7, r7, #2
 800d1ce:	e7b3      	b.n	800d138 <lv_img_decoder_built_in_read_line+0x234>
            ofs += 1024;       /*Skip the palette*/
 800d1d0:	2380      	movs	r3, #128	; 0x80
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800d1d2:	0d6d      	lsrs	r5, r5, #21
 800d1d4:	b2ae      	uxth	r6, r5
            ofs += w * y + x;  /*First pixel*/
 800d1d6:	437e      	muls	r6, r7
            ofs += 1024;       /*Skip the palette*/
 800d1d8:	00db      	lsls	r3, r3, #3
            ofs += w * y + x;  /*First pixel*/
 800d1da:	1936      	adds	r6, r6, r4
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800d1dc:	b22d      	sxth	r5, r5
            ofs += 1024;       /*Skip the palette*/
 800d1de:	18f6      	adds	r6, r6, r3
            pos = 0;
 800d1e0:	2700      	movs	r7, #0
 800d1e2:	e7a9      	b.n	800d138 <lv_img_decoder_built_in_read_line+0x234>
    int8_t pos   = 0;
 800d1e4:	0037      	movs	r7, r6
    lv_coord_t w = 0;
 800d1e6:	0035      	movs	r5, r6
 800d1e8:	e7a6      	b.n	800d138 <lv_img_decoder_built_in_read_line+0x234>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 800d1ea:	1d31      	adds	r1, r6, #4
 800d1ec:	6820      	ldr	r0, [r4, #0]
 800d1ee:	f000 fcac 	bl	800db4a <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	002a      	movs	r2, r5
 800d1f6:	a90c      	add	r1, sp, #48	; 0x30
 800d1f8:	6820      	ldr	r0, [r4, #0]
 800d1fa:	f000 fc88 	bl	800db0e <lv_fs_read>
        data_tmp = fs_buf;
 800d1fe:	ae0c      	add	r6, sp, #48	; 0x30
 800d200:	e7a3      	b.n	800d14a <lv_img_decoder_built_in_read_line+0x246>
 800d202:	46c0      	nop			; (mov r8, r8)
 800d204:	080124a6 	.word	0x080124a6

0800d208 <lv_img_decoder_close>:
{
 800d208:	0001      	movs	r1, r0
    if(dsc->decoder) {
 800d20a:	6800      	ldr	r0, [r0, #0]
{
 800d20c:	b510      	push	{r4, lr}
    if(dsc->decoder) {
 800d20e:	2800      	cmp	r0, #0
 800d210:	d003      	beq.n	800d21a <lv_img_decoder_close+0x12>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 800d212:	68c2      	ldr	r2, [r0, #12]
 800d214:	2a00      	cmp	r2, #0
 800d216:	d000      	beq.n	800d21a <lv_img_decoder_close+0x12>
 800d218:	4790      	blx	r2
}
 800d21a:	bd10      	pop	{r4, pc}

0800d21c <lv_img_decoder_create>:
{
 800d21c:	b510      	push	{r4, lr}
    decoder = lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 800d21e:	4806      	ldr	r0, [pc, #24]	; (800d238 <lv_img_decoder_create+0x1c>)
 800d220:	f000 fd3f 	bl	800dca2 <lv_ll_ins_head>
 800d224:	1e04      	subs	r4, r0, #0
    lv_mem_assert(decoder);
 800d226:	d100      	bne.n	800d22a <lv_img_decoder_create+0xe>
 800d228:	e7fe      	b.n	800d228 <lv_img_decoder_create+0xc>
    memset(decoder, 0, sizeof(lv_img_decoder_t));
 800d22a:	2210      	movs	r2, #16
 800d22c:	2100      	movs	r1, #0
 800d22e:	f002 fb92 	bl	800f956 <memset>
}
 800d232:	0020      	movs	r0, r4
 800d234:	bd10      	pop	{r4, pc}
 800d236:	46c0      	nop			; (mov r8, r8)
 800d238:	200054d4 	.word	0x200054d4

0800d23c <lv_img_decoder_init>:
{
 800d23c:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 800d23e:	2110      	movs	r1, #16
 800d240:	4808      	ldr	r0, [pc, #32]	; (800d264 <lv_img_decoder_init+0x28>)
 800d242:	f000 fd24 	bl	800dc8e <lv_ll_init>
    decoder = lv_img_decoder_create();
 800d246:	f7ff ffe9 	bl	800d21c <lv_img_decoder_create>
    if(decoder == NULL) {
 800d24a:	2800      	cmp	r0, #0
 800d24c:	d100      	bne.n	800d250 <lv_img_decoder_init+0x14>
 800d24e:	e7fe      	b.n	800d24e <lv_img_decoder_init+0x12>
    decoder->info_cb = info_cb;
 800d250:	4b05      	ldr	r3, [pc, #20]	; (800d268 <lv_img_decoder_init+0x2c>)
 800d252:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
 800d254:	4b05      	ldr	r3, [pc, #20]	; (800d26c <lv_img_decoder_init+0x30>)
 800d256:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
 800d258:	4b05      	ldr	r3, [pc, #20]	; (800d270 <lv_img_decoder_init+0x34>)
 800d25a:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
 800d25c:	4b05      	ldr	r3, [pc, #20]	; (800d274 <lv_img_decoder_init+0x38>)
 800d25e:	60c3      	str	r3, [r0, #12]
}
 800d260:	bd10      	pop	{r4, pc}
 800d262:	46c0      	nop			; (mov r8, r8)
 800d264:	200054d4 	.word	0x200054d4
 800d268:	0800ce51 	.word	0x0800ce51
 800d26c:	0800cd05 	.word	0x0800cd05
 800d270:	0800cf05 	.word	0x0800cf05
 800d274:	0800ccd5 	.word	0x0800ccd5

0800d278 <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
 800d278:	b510      	push	{r4, lr}
    return font_p->get_glyph_bitmap(font_p, letter);
 800d27a:	6843      	ldr	r3, [r0, #4]
 800d27c:	4798      	blx	r3
}
 800d27e:	bd10      	pop	{r4, pc}

0800d280 <lv_font_get_glyph_dsc>:
 * @param letter an UNICODE letter code
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter, uint32_t letter_next)
{
 800d280:	b510      	push	{r4, lr}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 800d282:	6804      	ldr	r4, [r0, #0]
 800d284:	47a0      	blx	r4
}
 800d286:	bd10      	pop	{r4, pc}

0800d288 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 800d288:	b507      	push	{r0, r1, r2, lr}
 800d28a:	0013      	movs	r3, r2
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 800d28c:	000a      	movs	r2, r1
 800d28e:	4669      	mov	r1, sp
 800d290:	f7ff fff6 	bl	800d280 <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
    else return 0;
 800d294:	2300      	movs	r3, #0
    if(ret) return g.adv_w;
 800d296:	4298      	cmp	r0, r3
 800d298:	d001      	beq.n	800d29e <lv_font_get_glyph_width+0x16>
 800d29a:	466b      	mov	r3, sp
 800d29c:	881b      	ldrh	r3, [r3, #0]
}
 800d29e:	0018      	movs	r0, r3
 800d2a0:	bd0e      	pop	{r1, r2, r3, pc}

0800d2a2 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 800d2a2:	7803      	ldrb	r3, [r0, #0]
 800d2a4:	780a      	ldrb	r2, [r1, #0]
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d001      	beq.n	800d2ae <kern_pair_8_compare+0xc>
 800d2aa:	1a98      	subs	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];

}
 800d2ac:	4770      	bx	lr
    else return (int32_t) ref8_p[1] - element8_p[1];
 800d2ae:	7840      	ldrb	r0, [r0, #1]
 800d2b0:	784b      	ldrb	r3, [r1, #1]
 800d2b2:	1ac0      	subs	r0, r0, r3
 800d2b4:	e7fa      	b.n	800d2ac <kern_pair_8_compare+0xa>

0800d2b6 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 800d2b6:	8803      	ldrh	r3, [r0, #0]
 800d2b8:	880a      	ldrh	r2, [r1, #0]
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d001      	beq.n	800d2c2 <kern_pair_16_compare+0xc>
 800d2be:	1a98      	subs	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
}
 800d2c0:	4770      	bx	lr
    else return (int32_t) ref16_p[1] - element16_p[1];
 800d2c2:	8840      	ldrh	r0, [r0, #2]
 800d2c4:	884b      	ldrh	r3, [r1, #2]
 800d2c6:	1ac0      	subs	r0, r0, r3
 800d2c8:	e7fa      	b.n	800d2c0 <kern_pair_16_compare+0xa>

0800d2ca <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return (*(uint16_t *)ref) - (*(uint16_t *)element);
 800d2ca:	8800      	ldrh	r0, [r0, #0]
 800d2cc:	880b      	ldrh	r3, [r1, #0]
 800d2ce:	1ac0      	subs	r0, r0, r3
}
 800d2d0:	4770      	bx	lr
	...

0800d2d4 <get_glyph_dsc_id.isra.0.part.1>:
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800d2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800d2d6:	6804      	ldr	r4, [r0, #0]
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800d2d8:	b085      	sub	sp, #20
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800d2da:	6963      	ldr	r3, [r4, #20]
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800d2dc:	000d      	movs	r5, r1
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800d2de:	428b      	cmp	r3, r1
 800d2e0:	d009      	beq.n	800d2f6 <get_glyph_dsc_id.isra.0.part.1+0x22>
 800d2e2:	2300      	movs	r3, #0
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800d2e4:	2014      	movs	r0, #20
    for(i = 0; i < fdsc->cmap_num; i++) {
 800d2e6:	8a62      	ldrh	r2, [r4, #18]
 800d2e8:	0592      	lsls	r2, r2, #22
 800d2ea:	0d92      	lsrs	r2, r2, #22
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	db05      	blt.n	800d2fc <get_glyph_dsc_id.isra.0.part.1+0x28>
    fdsc->last_letter = letter;
 800d2f0:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 800d2f2:	2000      	movs	r0, #0
 800d2f4:	e016      	b.n	800d324 <get_glyph_dsc_id.isra.0.part.1+0x50>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800d2f6:	69a0      	ldr	r0, [r4, #24]
}
 800d2f8:	b005      	add	sp, #20
 800d2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800d2fc:	0006      	movs	r6, r0
 800d2fe:	435e      	muls	r6, r3
 800d300:	68a2      	ldr	r2, [r4, #8]
 800d302:	1991      	adds	r1, r2, r6
 800d304:	680a      	ldr	r2, [r1, #0]
 800d306:	1aaa      	subs	r2, r5, r2
 800d308:	9203      	str	r2, [sp, #12]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800d30a:	888f      	ldrh	r7, [r1, #4]
 800d30c:	42ba      	cmp	r2, r7
 800d30e:	d902      	bls.n	800d316 <get_glyph_dsc_id.isra.0.part.1+0x42>
    for(i = 0; i < fdsc->cmap_num; i++) {
 800d310:	3301      	adds	r3, #1
 800d312:	b29b      	uxth	r3, r3
 800d314:	e7e7      	b.n	800d2e6 <get_glyph_dsc_id.isra.0.part.1+0x12>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 800d316:	2003      	movs	r0, #3
 800d318:	7c8b      	ldrb	r3, [r1, #18]
 800d31a:	4003      	ands	r3, r0
 800d31c:	d104      	bne.n	800d328 <get_glyph_dsc_id.isra.0.part.1+0x54>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 800d31e:	88c8      	ldrh	r0, [r1, #6]
 800d320:	1880      	adds	r0, r0, r2
        fdsc->last_letter = letter;
 800d322:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 800d324:	61a0      	str	r0, [r4, #24]
 800d326:	e7e7      	b.n	800d2f8 <get_glyph_dsc_id.isra.0.part.1+0x24>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d104      	bne.n	800d336 <get_glyph_dsc_id.isra.0.part.1+0x62>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 800d32c:	68cb      	ldr	r3, [r1, #12]
 800d32e:	5c98      	ldrb	r0, [r3, r2]
 800d330:	88cb      	ldrh	r3, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800d332:	18c0      	adds	r0, r0, r3
 800d334:	e7f5      	b.n	800d322 <get_glyph_dsc_id.isra.0.part.1+0x4e>
 800d336:	4811      	ldr	r0, [pc, #68]	; (800d37c <get_glyph_dsc_id.isra.0.part.1+0xa8>)
 800d338:	8a0a      	ldrh	r2, [r1, #16]
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 800d33a:	9000      	str	r0, [sp, #0]
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 800d33c:	2b02      	cmp	r3, #2
 800d33e:	d10e      	bne.n	800d35e <get_glyph_dsc_id.isra.0.part.1+0x8a>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 800d340:	6889      	ldr	r1, [r1, #8]
 800d342:	a803      	add	r0, sp, #12
 800d344:	f001 fa5a 	bl	800e7fc <lv_utils_bsearch>
            if(p) {
 800d348:	2800      	cmp	r0, #0
 800d34a:	d101      	bne.n	800d350 <get_glyph_dsc_id.isra.0.part.1+0x7c>
        uint32_t glyph_id = 0;
 800d34c:	2000      	movs	r0, #0
 800d34e:	e7e8      	b.n	800d322 <get_glyph_dsc_id.isra.0.part.1+0x4e>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 800d350:	68a3      	ldr	r3, [r4, #8]
 800d352:	199e      	adds	r6, r3, r6
 800d354:	68b3      	ldr	r3, [r6, #8]
 800d356:	1ac0      	subs	r0, r0, r3
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 800d358:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800d35a:	88f3      	ldrh	r3, [r6, #6]
 800d35c:	e7e9      	b.n	800d332 <get_glyph_dsc_id.isra.0.part.1+0x5e>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 800d35e:	2302      	movs	r3, #2
 800d360:	6889      	ldr	r1, [r1, #8]
 800d362:	a803      	add	r0, sp, #12
 800d364:	f001 fa4a 	bl	800e7fc <lv_utils_bsearch>
            if(p) {
 800d368:	2800      	cmp	r0, #0
 800d36a:	d0ef      	beq.n	800d34c <get_glyph_dsc_id.isra.0.part.1+0x78>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 800d36c:	68a3      	ldr	r3, [r4, #8]
 800d36e:	199e      	adds	r6, r3, r6
 800d370:	68b3      	ldr	r3, [r6, #8]
 800d372:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800d374:	68f3      	ldr	r3, [r6, #12]
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 800d376:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800d378:	5c18      	ldrb	r0, [r3, r0]
 800d37a:	e7ee      	b.n	800d35a <get_glyph_dsc_id.isra.0.part.1+0x86>
 800d37c:	0800d2cb 	.word	0x0800d2cb

0800d380 <lv_font_get_bitmap_fmt_txt>:
{
 800d380:	b510      	push	{r4, lr}
    if(letter == '\0') return 0;
 800d382:	2900      	cmp	r1, #0
 800d384:	d101      	bne.n	800d38a <lv_font_get_bitmap_fmt_txt+0xa>
    if(!gid) return false;
 800d386:	2000      	movs	r0, #0
}
 800d388:	bd10      	pop	{r4, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800d38a:	68c4      	ldr	r4, [r0, #12]
 800d38c:	300c      	adds	r0, #12
 800d38e:	f7ff ffa1 	bl	800d2d4 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return false;
 800d392:	2800      	cmp	r0, #0
 800d394:	d0f7      	beq.n	800d386 <lv_font_get_bitmap_fmt_txt+0x6>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800d396:	6863      	ldr	r3, [r4, #4]
 800d398:	00c0      	lsls	r0, r0, #3
 800d39a:	1818      	adds	r0, r3, r0
    if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 800d39c:	2800      	cmp	r0, #0
 800d39e:	d0f2      	beq.n	800d386 <lv_font_get_bitmap_fmt_txt+0x6>
 800d3a0:	6800      	ldr	r0, [r0, #0]
 800d3a2:	6823      	ldr	r3, [r4, #0]
 800d3a4:	0300      	lsls	r0, r0, #12
 800d3a6:	0b00      	lsrs	r0, r0, #12
 800d3a8:	1818      	adds	r0, r3, r0
 800d3aa:	e7ed      	b.n	800d388 <lv_font_get_bitmap_fmt_txt+0x8>

0800d3ac <lv_font_get_glyph_dsc_fmt_txt>:
{
 800d3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3ae:	b087      	sub	sp, #28
 800d3b0:	0005      	movs	r5, r0
 800d3b2:	000f      	movs	r7, r1
 800d3b4:	9303      	str	r3, [sp, #12]
    if(letter == '\0') return 0;
 800d3b6:	2a00      	cmp	r2, #0
 800d3b8:	d102      	bne.n	800d3c0 <lv_font_get_glyph_dsc_fmt_txt+0x14>
    if(!gid) return false;
 800d3ba:	2000      	movs	r0, #0
}
 800d3bc:	b007      	add	sp, #28
 800d3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3c0:	0006      	movs	r6, r0
 800d3c2:	360c      	adds	r6, #12
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800d3c4:	68c4      	ldr	r4, [r0, #12]
 800d3c6:	0011      	movs	r1, r2
 800d3c8:	0030      	movs	r0, r6
 800d3ca:	f7ff ff83 	bl	800d2d4 <get_glyph_dsc_id.isra.0.part.1>
 800d3ce:	9002      	str	r0, [sp, #8]
    if(!gid) return false;
 800d3d0:	2800      	cmp	r0, #0
 800d3d2:	d0f2      	beq.n	800d3ba <lv_font_get_glyph_dsc_fmt_txt+0xe>
    if(fdsc->kern_dsc) {
 800d3d4:	68e3      	ldr	r3, [r4, #12]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d11b      	bne.n	800d412 <lv_font_get_glyph_dsc_fmt_txt+0x66>
    int8_t kvalue = 0;
 800d3da:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800d3dc:	9a02      	ldr	r2, [sp, #8]
 800d3de:	6861      	ldr	r1, [r4, #4]
 800d3e0:	00d2      	lsls	r2, r2, #3
 800d3e2:	188a      	adds	r2, r1, r2
    uint32_t adv_w = gdsc->adv_w + ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 800d3e4:	8a21      	ldrh	r1, [r4, #16]
    return true;
 800d3e6:	2001      	movs	r0, #1
    uint32_t adv_w = gdsc->adv_w + ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 800d3e8:	434b      	muls	r3, r1
 800d3ea:	8851      	ldrh	r1, [r2, #2]
 800d3ec:	111b      	asrs	r3, r3, #4
 800d3ee:	0909      	lsrs	r1, r1, #4
 800d3f0:	185b      	adds	r3, r3, r1
    adv_w  = (adv_w + (1 << 3)) >> 4;
 800d3f2:	3308      	adds	r3, #8
 800d3f4:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
 800d3f6:	803b      	strh	r3, [r7, #0]
    dsc_out->box_h = gdsc->box_h;
 800d3f8:	7953      	ldrb	r3, [r2, #5]
 800d3fa:	70fb      	strb	r3, [r7, #3]
    dsc_out->box_w = gdsc->box_w;
 800d3fc:	7913      	ldrb	r3, [r2, #4]
 800d3fe:	70bb      	strb	r3, [r7, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 800d400:	7993      	ldrb	r3, [r2, #6]
 800d402:	713b      	strb	r3, [r7, #4]
    dsc_out->ofs_y = gdsc->ofs_y;
 800d404:	79d3      	ldrb	r3, [r2, #7]
 800d406:	717b      	strb	r3, [r7, #5]
    dsc_out->bpp   = fdsc->bpp;
 800d408:	7ce3      	ldrb	r3, [r4, #19]
 800d40a:	06db      	lsls	r3, r3, #27
 800d40c:	0f5b      	lsrs	r3, r3, #29
 800d40e:	71bb      	strb	r3, [r7, #6]
    return true;
 800d410:	e7d4      	b.n	800d3bc <lv_font_get_glyph_dsc_fmt_txt+0x10>
    if(letter == '\0') return 0;
 800d412:	9b03      	ldr	r3, [sp, #12]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d0e0      	beq.n	800d3da <lv_font_get_glyph_dsc_fmt_txt+0x2e>
 800d418:	0019      	movs	r1, r3
 800d41a:	0030      	movs	r0, r6
 800d41c:	f7ff ff5a 	bl	800d2d4 <get_glyph_dsc_id.isra.0.part.1>
        if(gid_next) {
 800d420:	2800      	cmp	r0, #0
 800d422:	d0da      	beq.n	800d3da <lv_font_get_glyph_dsc_fmt_txt+0x2e>
 800d424:	68eb      	ldr	r3, [r5, #12]
    if(fdsc->kern_classes == 0) {
 800d426:	7cda      	ldrb	r2, [r3, #19]
 800d428:	68dd      	ldr	r5, [r3, #12]
 800d42a:	0693      	lsls	r3, r2, #26
 800d42c:	d432      	bmi.n	800d494 <lv_font_get_glyph_dsc_fmt_txt+0xe8>
        if(kdsc->glyph_ids_size == 0) {
 800d42e:	2203      	movs	r2, #3
 800d430:	7aeb      	ldrb	r3, [r5, #11]
 800d432:	4013      	ands	r3, r2
 800d434:	d118      	bne.n	800d468 <lv_font_get_glyph_dsc_fmt_txt+0xbc>
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 800d436:	ab05      	add	r3, sp, #20
 800d438:	469c      	mov	ip, r3
 800d43a:	9b02      	ldr	r3, [sp, #8]
 800d43c:	0200      	lsls	r0, r0, #8
 800d43e:	18c0      	adds	r0, r0, r3
 800d440:	4663      	mov	r3, ip
            const uint8_t * g_ids = kdsc->glyph_ids;
 800d442:	682e      	ldr	r6, [r5, #0]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 800d444:	8018      	strh	r0, [r3, #0]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 800d446:	68ab      	ldr	r3, [r5, #8]
 800d448:	0031      	movs	r1, r6
 800d44a:	021a      	lsls	r2, r3, #8
 800d44c:	4b1a      	ldr	r3, [pc, #104]	; (800d4b8 <lv_font_get_glyph_dsc_fmt_txt+0x10c>)
 800d44e:	0a12      	lsrs	r2, r2, #8
 800d450:	9300      	str	r3, [sp, #0]
 800d452:	4660      	mov	r0, ip
 800d454:	2302      	movs	r3, #2
 800d456:	f001 f9d1 	bl	800e7fc <lv_utils_bsearch>
    int8_t value = 0;
 800d45a:	1e03      	subs	r3, r0, #0
            if(kid_p) {
 800d45c:	d0be      	beq.n	800d3dc <lv_font_get_glyph_dsc_fmt_txt+0x30>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 800d45e:	1b80      	subs	r0, r0, r6
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
 800d460:	0840      	lsrs	r0, r0, #1
                value = kdsc->values[ofs];
 800d462:	686b      	ldr	r3, [r5, #4]
 800d464:	561b      	ldrsb	r3, [r3, r0]
 800d466:	e7b9      	b.n	800d3dc <lv_font_get_glyph_dsc_fmt_txt+0x30>
        } else if(kdsc->glyph_ids_size == 1) {
 800d468:	2b01      	cmp	r3, #1
 800d46a:	d1b6      	bne.n	800d3da <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 800d46c:	9b02      	ldr	r3, [sp, #8]
 800d46e:	0200      	lsls	r0, r0, #8
 800d470:	18c0      	adds	r0, r0, r3
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800d472:	68ab      	ldr	r3, [r5, #8]
            const uint16_t * g_ids = kdsc->glyph_ids;
 800d474:	682e      	ldr	r6, [r5, #0]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800d476:	021a      	lsls	r2, r3, #8
 800d478:	4b10      	ldr	r3, [pc, #64]	; (800d4bc <lv_font_get_glyph_dsc_fmt_txt+0x110>)
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 800d47a:	9005      	str	r0, [sp, #20]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800d47c:	9300      	str	r3, [sp, #0]
 800d47e:	0a12      	lsrs	r2, r2, #8
 800d480:	2304      	movs	r3, #4
 800d482:	0031      	movs	r1, r6
 800d484:	a805      	add	r0, sp, #20
 800d486:	f001 f9b9 	bl	800e7fc <lv_utils_bsearch>
    int8_t value = 0;
 800d48a:	1e03      	subs	r3, r0, #0
            if(kid_p) {
 800d48c:	d0a6      	beq.n	800d3dc <lv_font_get_glyph_dsc_fmt_txt+0x30>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 800d48e:	1b80      	subs	r0, r0, r6
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
 800d490:	0900      	lsrs	r0, r0, #4
 800d492:	e7e6      	b.n	800d462 <lv_font_get_glyph_dsc_fmt_txt+0xb6>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 800d494:	686b      	ldr	r3, [r5, #4]
 800d496:	9a02      	ldr	r2, [sp, #8]
 800d498:	5c9a      	ldrb	r2, [r3, r2]
        if(left_class > 0 && right_class > 0) {
 800d49a:	2a00      	cmp	r2, #0
 800d49c:	d09d      	beq.n	800d3da <lv_font_get_glyph_dsc_fmt_txt+0x2e>
        uint8_t right_class = kdsc->left_class_mapping[gid_right];
 800d49e:	5c19      	ldrb	r1, [r3, r0]
        if(left_class > 0 && right_class > 0) {
 800d4a0:	2900      	cmp	r1, #0
 800d4a2:	d09a      	beq.n	800d3da <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            value = kdsc->class_pair_values[(left_class-1)* kdsc->right_class_cnt + (right_class-1)];
 800d4a4:	7b6b      	ldrb	r3, [r5, #13]
 800d4a6:	3a01      	subs	r2, #1
 800d4a8:	435a      	muls	r2, r3
 800d4aa:	682b      	ldr	r3, [r5, #0]
 800d4ac:	185b      	adds	r3, r3, r1
 800d4ae:	189b      	adds	r3, r3, r2
 800d4b0:	3b01      	subs	r3, #1
 800d4b2:	781b      	ldrb	r3, [r3, #0]
 800d4b4:	b25b      	sxtb	r3, r3
 800d4b6:	e791      	b.n	800d3dc <lv_font_get_glyph_dsc_fmt_txt+0x30>
 800d4b8:	0800d2a3 	.word	0x0800d2a3
 800d4bc:	0800d2b7 	.word	0x0800d2b7

0800d4c0 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 800d4c0:	b510      	push	{r4, lr}
    memset(driver, 0, sizeof(lv_disp_drv_t));
 800d4c2:	2228      	movs	r2, #40	; 0x28
 800d4c4:	2100      	movs	r1, #0
{
 800d4c6:	0004      	movs	r4, r0
    memset(driver, 0, sizeof(lv_disp_drv_t));
 800d4c8:	f002 fa45 	bl	800f956 <memset>

    driver->flush_cb         = NULL;
    driver->hor_res          = LV_HOR_RES_MAX;
 800d4cc:	23a0      	movs	r3, #160	; 0xa0
    driver->flush_cb         = NULL;
 800d4ce:	2200      	movs	r2, #0
    driver->hor_res          = LV_HOR_RES_MAX;
 800d4d0:	8023      	strh	r3, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
 800d4d2:	3b20      	subs	r3, #32
 800d4d4:	8063      	strh	r3, [r4, #2]
    driver->buffer           = NULL;
    driver->rotated          = 0;
    driver->color_chroma_key = LV_COLOR_TRANSP;
 800d4d6:	1d63      	adds	r3, r4, #5
 800d4d8:	77da      	strb	r2, [r3, #31]
 800d4da:	23fc      	movs	r3, #252	; 0xfc
 800d4dc:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 800d4de:	00db      	lsls	r3, r3, #3
 800d4e0:	430b      	orrs	r3, r1
 800d4e2:	84a3      	strh	r3, [r4, #36]	; 0x24
 800d4e4:	055b      	lsls	r3, r3, #21
 800d4e6:	1da1      	adds	r1, r4, #6
 800d4e8:	0f5b      	lsrs	r3, r3, #29
 800d4ea:	77cb      	strb	r3, [r1, #31]

#if LV_ANTIALIAS
    driver->antialiasing = true;
 800d4ec:	2301      	movs	r3, #1
#if LV_COLOR_SCREEN_TRANSP
    driver->screen_transp = 1;
#endif

#if LV_USE_GPU
    driver->gpu_blend_cb = NULL;
 800d4ee:	61e2      	str	r2, [r4, #28]
    driver->antialiasing = true;
 800d4f0:	7223      	strb	r3, [r4, #8]
    driver->gpu_fill_cb  = NULL;
 800d4f2:	6222      	str	r2, [r4, #32]

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
 800d4f4:	6162      	str	r2, [r4, #20]
}
 800d4f6:	bd10      	pop	{r4, pc}

0800d4f8 <lv_disp_buf_init>:
 *             It lets LittlevGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 800d4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4fa:	0004      	movs	r4, r0
 800d4fc:	000d      	movs	r5, r1
 800d4fe:	0017      	movs	r7, r2
 800d500:	001e      	movs	r6, r3
    memset(disp_buf, 0, sizeof(lv_disp_buf_t));
 800d502:	221c      	movs	r2, #28
 800d504:	2100      	movs	r1, #0
 800d506:	f002 fa26 	bl	800f956 <memset>

    disp_buf->buf1    = buf1;
 800d50a:	6025      	str	r5, [r4, #0]
    disp_buf->buf2    = buf2;
 800d50c:	6067      	str	r7, [r4, #4]
    disp_buf->buf_act = disp_buf->buf1;
 800d50e:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
 800d510:	60e6      	str	r6, [r4, #12]
}
 800d512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d514 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 800d514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d516:	0005      	movs	r5, r0
    lv_disp_t * disp = lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 800d518:	4829      	ldr	r0, [pc, #164]	; (800d5c0 <lv_disp_drv_register+0xac>)
 800d51a:	f000 fbc2 	bl	800dca2 <lv_ll_ins_head>
 800d51e:	1e04      	subs	r4, r0, #0
    if(!disp) {
 800d520:	d100      	bne.n	800d524 <lv_disp_drv_register+0x10>
 800d522:	e7fe      	b.n	800d522 <lv_disp_drv_register+0xe>
        lv_mem_assert(disp);
        return NULL;
    }

    memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
 800d524:	0029      	movs	r1, r5
 800d526:	2228      	movs	r2, #40	; 0x28
 800d528:	f002 fa0c 	bl	800f944 <memcpy>
    memset(&disp->inv_area_joined, 0, sizeof(disp->inv_area_joined));
 800d52c:	0020      	movs	r0, r4
 800d52e:	3045      	adds	r0, #69	; 0x45
 800d530:	2220      	movs	r2, #32
 800d532:	2100      	movs	r1, #0
 800d534:	30ff      	adds	r0, #255	; 0xff
 800d536:	f002 fa0e 	bl	800f956 <memset>
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
 800d53a:	2280      	movs	r2, #128	; 0x80
 800d53c:	0020      	movs	r0, r4
 800d53e:	0052      	lsls	r2, r2, #1
 800d540:	2100      	movs	r1, #0
 800d542:	3044      	adds	r0, #68	; 0x44
 800d544:	f002 fa07 	bl	800f956 <memset>
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 800d548:	0020      	movs	r0, r4
 800d54a:	2144      	movs	r1, #68	; 0x44
 800d54c:	302c      	adds	r0, #44	; 0x2c
 800d54e:	f000 fb9e 	bl	800dc8e <lv_ll_init>

    if(disp_def == NULL) disp_def = disp;
 800d552:	4d1c      	ldr	r5, [pc, #112]	; (800d5c4 <lv_disp_drv_register+0xb0>)
 800d554:	682b      	ldr	r3, [r5, #0]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d100      	bne.n	800d55c <lv_disp_drv_register+0x48>
 800d55a:	602c      	str	r4, [r5, #0]

    lv_disp_t * disp_def_tmp = disp_def;
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
                                        new display*/

    disp->inv_p = 0;
 800d55c:	22b2      	movs	r2, #178	; 0xb2

    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800d55e:	2100      	movs	r1, #0
    disp->inv_p = 0;
 800d560:	0052      	lsls	r2, r2, #1
 800d562:	5aa3      	ldrh	r3, [r4, r2]
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800d564:	0008      	movs	r0, r1
    disp->inv_p = 0;
 800d566:	0a9b      	lsrs	r3, r3, #10
 800d568:	029b      	lsls	r3, r3, #10
 800d56a:	52a3      	strh	r3, [r4, r2]
    lv_disp_t * disp_def_tmp = disp_def;
 800d56c:	682e      	ldr	r6, [r5, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 800d56e:	602c      	str	r4, [r5, #0]
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800d570:	f7fb fb5e 	bl	8008c30 <lv_obj_create>
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800d574:	2100      	movs	r1, #0
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800d576:	63a0      	str	r0, [r4, #56]	; 0x38
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800d578:	0008      	movs	r0, r1
 800d57a:	f7fb fb59 	bl	8008c30 <lv_obj_create>
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800d57e:	2100      	movs	r1, #0
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800d580:	63e0      	str	r0, [r4, #60]	; 0x3c
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800d582:	0008      	movs	r0, r1
 800d584:	f7fb fb54 	bl	8008c30 <lv_obj_create>
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 800d588:	4f0f      	ldr	r7, [pc, #60]	; (800d5c8 <lv_disp_drv_register+0xb4>)
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800d58a:	6420      	str	r0, [r4, #64]	; 0x40
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 800d58c:	0039      	movs	r1, r7
 800d58e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800d590:	f7fb fd2f 	bl	8008ff2 <lv_obj_set_style>
    lv_obj_set_style(disp->sys_layer, &lv_style_transp);
 800d594:	0039      	movs	r1, r7
 800d596:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800d598:	f7fb fd2b 	bl	8008ff2 <lv_obj_set_style>

    lv_obj_invalidate(disp->act_scr);
 800d59c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800d59e:	f7fb f891 	bl	80086c4 <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/

    /*Create a refresh task*/
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 800d5a2:	0023      	movs	r3, r4
 800d5a4:	2203      	movs	r2, #3
 800d5a6:	211e      	movs	r1, #30
 800d5a8:	4808      	ldr	r0, [pc, #32]	; (800d5cc <lv_disp_drv_register+0xb8>)
    disp_def = disp_def_tmp; /*Revert the default display*/
 800d5aa:	602e      	str	r6, [r5, #0]
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 800d5ac:	f000 fed8 	bl	800e360 <lv_task_create>
 800d5b0:	62a0      	str	r0, [r4, #40]	; 0x28
    lv_mem_assert(disp->refr_task);
 800d5b2:	2800      	cmp	r0, #0
 800d5b4:	d100      	bne.n	800d5b8 <lv_disp_drv_register+0xa4>
 800d5b6:	e7fe      	b.n	800d5b6 <lv_disp_drv_register+0xa2>
    if(disp->refr_task == NULL) return NULL;

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 800d5b8:	f000 fee5 	bl	800e386 <lv_task_ready>

    return disp;
}
 800d5bc:	0020      	movs	r0, r4
 800d5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5c0:	200054c8 	.word	0x200054c8
 800d5c4:	2000167c 	.word	0x2000167c
 800d5c8:	200051dc 	.word	0x200051dc
 800d5cc:	080094f9 	.word	0x080094f9

0800d5d0 <lv_disp_get_default>:
 * Get the default display
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
 800d5d0:	4b01      	ldr	r3, [pc, #4]	; (800d5d8 <lv_disp_get_default+0x8>)
 800d5d2:	6818      	ldr	r0, [r3, #0]
}
 800d5d4:	4770      	bx	lr
 800d5d6:	46c0      	nop			; (mov r8, r8)
 800d5d8:	2000167c 	.word	0x2000167c

0800d5dc <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
 800d5dc:	1e03      	subs	r3, r0, #0
    if(disp == NULL) disp = lv_disp_get_default();
 800d5de:	d104      	bne.n	800d5ea <lv_disp_get_hor_res+0xe>
    return disp_def;
 800d5e0:	4b06      	ldr	r3, [pc, #24]	; (800d5fc <lv_disp_get_hor_res+0x20>)

    if(disp == NULL)
        return LV_HOR_RES_MAX;
 800d5e2:	20a0      	movs	r0, #160	; 0xa0
    return disp_def;
 800d5e4:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL)
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d004      	beq.n	800d5f4 <lv_disp_get_hor_res+0x18>
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 800d5ea:	7a1a      	ldrb	r2, [r3, #8]
 800d5ec:	0792      	lsls	r2, r2, #30
 800d5ee:	d402      	bmi.n	800d5f6 <lv_disp_get_hor_res+0x1a>
 800d5f0:	2000      	movs	r0, #0
 800d5f2:	5e18      	ldrsh	r0, [r3, r0]
}
 800d5f4:	4770      	bx	lr
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 800d5f6:	2002      	movs	r0, #2
 800d5f8:	5e18      	ldrsh	r0, [r3, r0]
 800d5fa:	e7fb      	b.n	800d5f4 <lv_disp_get_hor_res+0x18>
 800d5fc:	2000167c 	.word	0x2000167c

0800d600 <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
 800d600:	1e03      	subs	r3, r0, #0
    if(disp == NULL) disp = lv_disp_get_default();
 800d602:	d104      	bne.n	800d60e <lv_disp_get_ver_res+0xe>
    return disp_def;
 800d604:	4b06      	ldr	r3, [pc, #24]	; (800d620 <lv_disp_get_ver_res+0x20>)

    if(disp == NULL)
        return LV_VER_RES_MAX;
 800d606:	2080      	movs	r0, #128	; 0x80
    return disp_def;
 800d608:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL)
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d004      	beq.n	800d618 <lv_disp_get_ver_res+0x18>
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
 800d60e:	7a1a      	ldrb	r2, [r3, #8]
 800d610:	0792      	lsls	r2, r2, #30
 800d612:	d402      	bmi.n	800d61a <lv_disp_get_ver_res+0x1a>
 800d614:	2002      	movs	r0, #2
 800d616:	5e18      	ldrsh	r0, [r3, r0]
}
 800d618:	4770      	bx	lr
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
 800d61a:	2000      	movs	r0, #0
 800d61c:	5e18      	ldrsh	r0, [r3, r0]
 800d61e:	e7fb      	b.n	800d618 <lv_disp_get_ver_res+0x18>
 800d620:	2000167c 	.word	0x2000167c

0800d624 <lv_disp_get_antialiasing>:
 * Get if anti-aliasing is enabled for a display or not
 * @param disp pointer to a display (NULL to use the default display)
 * @return true: anti-aliasing is enabled; false: disabled
 */
bool lv_disp_get_antialiasing(lv_disp_t * disp)
{
 800d624:	1e03      	subs	r3, r0, #0
#if LV_ANTIALIAS == 0
    return false;
#else
    if(disp == NULL) disp = lv_disp_get_default();
 800d626:	d104      	bne.n	800d632 <lv_disp_get_antialiasing+0xe>
    if(disp == NULL) return false;
 800d628:	2000      	movs	r0, #0
    return disp_def;
 800d62a:	4b04      	ldr	r3, [pc, #16]	; (800d63c <lv_disp_get_antialiasing+0x18>)
 800d62c:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL) return false;
 800d62e:	4283      	cmp	r3, r0
 800d630:	d002      	beq.n	800d638 <lv_disp_get_antialiasing+0x14>

    return disp->driver.antialiasing ? true : false;
 800d632:	7a18      	ldrb	r0, [r3, #8]
 800d634:	2301      	movs	r3, #1
 800d636:	4018      	ands	r0, r3
#endif
}
 800d638:	4770      	bx	lr
 800d63a:	46c0      	nop			; (mov r8, r8)
 800d63c:	2000167c 	.word	0x2000167c

0800d640 <lv_disp_flush_ready>:
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
    disp_drv->buffer->flushing = 0;
 800d640:	2101      	movs	r1, #1
 800d642:	6842      	ldr	r2, [r0, #4]
 800d644:	7e13      	ldrb	r3, [r2, #24]
 800d646:	438b      	bics	r3, r1
 800d648:	7613      	strb	r3, [r2, #24]
#if LV_COLOR_SCREEN_TRANSP
    if(disp_drv->screen_transp) {
        memset(disp_drv->buffer->buf_act, 0x00, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif
}
 800d64a:	4770      	bx	lr

0800d64c <lv_disp_get_buf>:
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
 800d64c:	6840      	ldr	r0, [r0, #4]
}
 800d64e:	4770      	bx	lr

0800d650 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 800d650:	6843      	ldr	r3, [r0, #4]
        return true;
    else
        return false;
 800d652:	6818      	ldr	r0, [r3, #0]
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 800d654:	2800      	cmp	r0, #0
 800d656:	d003      	beq.n	800d660 <lv_disp_is_double_buf+0x10>
 800d658:	6858      	ldr	r0, [r3, #4]
 800d65a:	1e43      	subs	r3, r0, #1
 800d65c:	4198      	sbcs	r0, r3
 800d65e:	b2c0      	uxtb	r0, r0
}
 800d660:	4770      	bx	lr

0800d662 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
 800d662:	b510      	push	{r4, lr}
 800d664:	0004      	movs	r4, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 800d666:	f7ff fff3 	bl	800d650 <lv_disp_is_double_buf>
 800d66a:	2800      	cmp	r0, #0
 800d66c:	d00a      	beq.n	800d684 <lv_disp_is_true_double_buf+0x22>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
 800d66e:	2200      	movs	r2, #0
 800d670:	5ea3      	ldrsh	r3, [r4, r2]
 800d672:	2202      	movs	r2, #2
 800d674:	5ea0      	ldrsh	r0, [r4, r2]
 800d676:	4358      	muls	r0, r3
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 800d678:	6863      	ldr	r3, [r4, #4]
 800d67a:	68db      	ldr	r3, [r3, #12]
 800d67c:	1ac0      	subs	r0, r0, r3
 800d67e:	4243      	negs	r3, r0
 800d680:	4158      	adcs	r0, r3
 800d682:	b2c0      	uxtb	r0, r0
        return true;
    } else {
        return false;
    }
}
 800d684:	bd10      	pop	{r4, pc}
	...

0800d688 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 800d688:	0001      	movs	r1, r0
 800d68a:	b510      	push	{r4, lr}
 800d68c:	4804      	ldr	r0, [pc, #16]	; (800d6a0 <lv_indev_get_next+0x18>)
    if(indev == NULL)
 800d68e:	2900      	cmp	r1, #0
 800d690:	d102      	bne.n	800d698 <lv_indev_get_next+0x10>
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 800d692:	f000 fb46 	bl	800dd22 <lv_ll_get_head>
    else
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
}
 800d696:	bd10      	pop	{r4, pc}
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 800d698:	f000 fb4b 	bl	800dd32 <lv_ll_get_next>
 800d69c:	e7fb      	b.n	800d696 <lv_indev_get_next+0xe>
 800d69e:	46c0      	nop			; (mov r8, r8)
 800d6a0:	200054b8 	.word	0x200054b8

0800d6a4 <lv_tick_get>:
uint32_t lv_tick_get(void)
{
#if LV_TICK_CUSTOM == 0
    uint32_t result;
    do {
        tick_irq_flag = 1;
 800d6a4:	2101      	movs	r1, #1
 800d6a6:	4b04      	ldr	r3, [pc, #16]	; (800d6b8 <lv_tick_get+0x14>)
 800d6a8:	7019      	strb	r1, [r3, #0]
        result        = sys_time;
    } while(!tick_irq_flag); /*'lv_tick_inc()' clears this flag which can be in an interrupt.
 800d6aa:	781a      	ldrb	r2, [r3, #0]
 800d6ac:	2a00      	cmp	r2, #0
 800d6ae:	d0fb      	beq.n	800d6a8 <lv_tick_get+0x4>
        result        = sys_time;
 800d6b0:	4b02      	ldr	r3, [pc, #8]	; (800d6bc <lv_tick_get+0x18>)
                                Continue until make a non interrupted cycle */

    return result;
 800d6b2:	6818      	ldr	r0, [r3, #0]
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 800d6b4:	4770      	bx	lr
 800d6b6:	46c0      	nop			; (mov r8, r8)
 800d6b8:	20001684 	.word	0x20001684
 800d6bc:	20001680 	.word	0x20001680

0800d6c0 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 800d6c0:	b510      	push	{r4, lr}
 800d6c2:	0004      	movs	r4, r0
    uint32_t act_time = lv_tick_get();
 800d6c4:	f7ff ffee 	bl	800d6a4 <lv_tick_get>
    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
        prev_tick = act_time - prev_tick;
    } else {
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
 800d6c8:	1b00      	subs	r0, r0, r4
    }

    return prev_tick;
}
 800d6ca:	bd10      	pop	{r4, pc}

0800d6cc <lv_anim_path_linear>:
 * Calculate the current value of an animation applying linear characteristic
 * @param a pointer to an animation
 * @return the current value to set
 */
lv_anim_value_t lv_anim_path_linear(const lv_anim_t * a)
{
 800d6cc:	b510      	push	{r4, lr}
 800d6ce:	0004      	movs	r4, r0
    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
 800d6d0:	8b01      	ldrh	r1, [r0, #24]
 800d6d2:	231a      	movs	r3, #26
 800d6d4:	5ec0      	ldrsh	r0, [r0, r3]
 800d6d6:	4281      	cmp	r1, r0
 800d6d8:	d00a      	beq.n	800d6f0 <lv_anim_path_linear+0x24>
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
    } else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
 800d6da:	0280      	lsls	r0, r0, #10
 800d6dc:	f7f2 fdca 	bl	8000274 <__divsi3>
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
 800d6e0:	6923      	ldr	r3, [r4, #16]
 800d6e2:	6962      	ldr	r2, [r4, #20]
 800d6e4:	1ad2      	subs	r2, r2, r3
 800d6e6:	4350      	muls	r0, r2
    new_value = new_value >> LV_ANIM_RES_SHIFT;
 800d6e8:	1280      	asrs	r0, r0, #10
    new_value += a->start;
 800d6ea:	1818      	adds	r0, r3, r0

    return (lv_anim_value_t)new_value;
 800d6ec:	b200      	sxth	r0, r0
}
 800d6ee:	bd10      	pop	{r4, pc}
 800d6f0:	2080      	movs	r0, #128	; 0x80
 800d6f2:	00c0      	lsls	r0, r0, #3
 800d6f4:	e7f4      	b.n	800d6e0 <lv_anim_path_linear+0x14>
	...

0800d6f8 <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(lv_task_t * param)
{
 800d6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    (void)param;

    lv_anim_t * a;
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800d6fa:	4d40      	ldr	r5, [pc, #256]	; (800d7fc <anim_task+0x104>)
{
 800d6fc:	b08d      	sub	sp, #52	; 0x34
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800d6fe:	0028      	movs	r0, r5
 800d700:	f000 fb0f 	bl	800dd22 <lv_ll_get_head>
    {
        a->has_run = 0;
 800d704:	2408      	movs	r4, #8
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800d706:	2800      	cmp	r0, #0
 800d708:	d10e      	bne.n	800d728 <anim_task+0x30>
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
 800d70a:	4f3d      	ldr	r7, [pc, #244]	; (800d800 <anim_task+0x108>)
 800d70c:	6838      	ldr	r0, [r7, #0]
 800d70e:	f7ff ffd7 	bl	800d6c0 <lv_tick_elaps>
 800d712:	9001      	str	r0, [sp, #4]
        }

        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed)
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800d714:	0028      	movs	r0, r5
 800d716:	f000 fb04 	bl	800dd22 <lv_ll_get_head>
        else
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800d71a:	1e04      	subs	r4, r0, #0
    while(a != NULL) {
 800d71c:	d10d      	bne.n	800d73a <anim_task+0x42>
    }

    last_task_run = lv_tick_get();
 800d71e:	f7ff ffc1 	bl	800d6a4 <lv_tick_get>
 800d722:	6038      	str	r0, [r7, #0]
}
 800d724:	b00d      	add	sp, #52	; 0x34
 800d726:	bdf0      	pop	{r4, r5, r6, r7, pc}
        a->has_run = 0;
 800d728:	1c42      	adds	r2, r0, #1
 800d72a:	7fd3      	ldrb	r3, [r2, #31]
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800d72c:	0001      	movs	r1, r0
        a->has_run = 0;
 800d72e:	43a3      	bics	r3, r4
 800d730:	77d3      	strb	r3, [r2, #31]
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800d732:	0028      	movs	r0, r5
 800d734:	f000 fafd 	bl	800dd32 <lv_ll_get_next>
 800d738:	e7e5      	b.n	800d706 <anim_task+0xe>
        anim_list_changed = false;
 800d73a:	2300      	movs	r3, #0
 800d73c:	4a31      	ldr	r2, [pc, #196]	; (800d804 <anim_task+0x10c>)
        if(!a->has_run) {
 800d73e:	1c66      	adds	r6, r4, #1
        anim_list_changed = false;
 800d740:	7013      	strb	r3, [r2, #0]
        if(!a->has_run) {
 800d742:	2208      	movs	r2, #8
 800d744:	7ff3      	ldrb	r3, [r6, #31]
 800d746:	4213      	tst	r3, r2
 800d748:	d13a      	bne.n	800d7c0 <anim_task+0xc8>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
 800d74a:	4313      	orrs	r3, r2
 800d74c:	77f3      	strb	r3, [r6, #31]
            a->act_time += elaps;
 800d74e:	8b63      	ldrh	r3, [r4, #26]
 800d750:	9a01      	ldr	r2, [sp, #4]
 800d752:	189b      	adds	r3, r3, r2
 800d754:	b21b      	sxth	r3, r3
 800d756:	8363      	strh	r3, [r4, #26]
            if(a->act_time >= 0) {
 800d758:	2b00      	cmp	r3, #0
 800d75a:	db31      	blt.n	800d7c0 <anim_task+0xc8>
                if(a->act_time > a->time) a->act_time = a->time;
 800d75c:	8b22      	ldrh	r2, [r4, #24]
 800d75e:	4293      	cmp	r3, r2
 800d760:	dd00      	ble.n	800d764 <anim_task+0x6c>
 800d762:	8362      	strh	r2, [r4, #26]
                new_value = a->path_cb(a);
 800d764:	68a3      	ldr	r3, [r4, #8]
 800d766:	0020      	movs	r0, r4
 800d768:	4798      	blx	r3
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 800d76a:	6863      	ldr	r3, [r4, #4]
                new_value = a->path_cb(a);
 800d76c:	0001      	movs	r1, r0
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d001      	beq.n	800d776 <anim_task+0x7e>
 800d772:	6820      	ldr	r0, [r4, #0]
 800d774:	4798      	blx	r3
                if(a->act_time >= a->time) {
 800d776:	231a      	movs	r3, #26
 800d778:	5ee2      	ldrsh	r2, [r4, r3]
 800d77a:	8b23      	ldrh	r3, [r4, #24]
 800d77c:	429a      	cmp	r2, r3
 800d77e:	db1b      	blt.n	800d7b8 <anim_task+0xc0>
{

    /*Delete the animation if
     * - no repeat and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready */
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 800d780:	2203      	movs	r2, #3
 800d782:	7ff3      	ldrb	r3, [r6, #31]
 800d784:	4213      	tst	r3, r2
 800d786:	d003      	beq.n	800d790 <anim_task+0x98>
 800d788:	3204      	adds	r2, #4
 800d78a:	401a      	ands	r2, r3
 800d78c:	2a05      	cmp	r2, #5
 800d78e:	d11c      	bne.n	800d7ca <anim_task+0xd2>

        /*Create copy from the animation and delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        lv_anim_t a_tmp;
        memcpy(&a_tmp, a, sizeof(lv_anim_t));
 800d790:	2224      	movs	r2, #36	; 0x24
 800d792:	0021      	movs	r1, r4
 800d794:	a803      	add	r0, sp, #12
 800d796:	f002 f8d5 	bl	800f944 <memcpy>
        lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 800d79a:	0021      	movs	r1, r4
 800d79c:	0028      	movs	r0, r5
 800d79e:	f000 fb15 	bl	800ddcc <lv_ll_rem>
        lv_mem_free(a);
 800d7a2:	0020      	movs	r0, r4
 800d7a4:	f000 fc4c 	bl	800e040 <lv_mem_free>
        anim_list_changed = true;
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	4a16      	ldr	r2, [pc, #88]	; (800d804 <anim_task+0x10c>)
 800d7ac:	7013      	strb	r3, [r2, #0]

        /* Call the callback function at the end*/
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 800d7ae:	9b06      	ldr	r3, [sp, #24]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d001      	beq.n	800d7b8 <anim_task+0xc0>
 800d7b4:	a803      	add	r0, sp, #12
 800d7b6:	4798      	blx	r3
        if(anim_list_changed)
 800d7b8:	4b12      	ldr	r3, [pc, #72]	; (800d804 <anim_task+0x10c>)
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d1a9      	bne.n	800d714 <anim_task+0x1c>
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800d7c0:	0021      	movs	r1, r4
 800d7c2:	0028      	movs	r0, r5
 800d7c4:	f000 fab5 	bl	800dd32 <lv_ll_get_next>
 800d7c8:	e7a7      	b.n	800d71a <anim_task+0x22>
    }
    /*If the animation is not deleted then restart it*/
    else {
        a->act_time = -a->repeat_pause; /*Restart the animation*/
 800d7ca:	8be2      	ldrh	r2, [r4, #30]
 800d7cc:	4252      	negs	r2, r2
 800d7ce:	8362      	strh	r2, [r4, #26]
        /*Swap the start and end values in play back mode*/
        if(a->playback != 0) {
 800d7d0:	07da      	lsls	r2, r3, #31
 800d7d2:	d5f1      	bpl.n	800d7b8 <anim_task+0xc0>
            /*If now turning back use the 'playback_pause*/
            if(a->playback_now == 0) a->act_time = -a->playback_pause;
 800d7d4:	2204      	movs	r2, #4
 800d7d6:	4013      	ands	r3, r2
 800d7d8:	1e19      	subs	r1, r3, #0
 800d7da:	d102      	bne.n	800d7e2 <anim_task+0xea>
 800d7dc:	8ba2      	ldrh	r2, [r4, #28]
 800d7de:	4252      	negs	r2, r2
 800d7e0:	8362      	strh	r2, [r4, #26]

            /*Toggle the play back state*/
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 800d7e2:	424b      	negs	r3, r1
 800d7e4:	414b      	adcs	r3, r1
 800d7e6:	2104      	movs	r1, #4
 800d7e8:	7ff2      	ldrb	r2, [r6, #31]
 800d7ea:	009b      	lsls	r3, r3, #2
 800d7ec:	438a      	bics	r2, r1
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	77f3      	strb	r3, [r6, #31]
            /*Swap the start and end values*/
            int32_t tmp;
            tmp      = a->start;
 800d7f2:	6923      	ldr	r3, [r4, #16]
            a->start = a->end;
 800d7f4:	6962      	ldr	r2, [r4, #20]
            a->end   = tmp;
 800d7f6:	6163      	str	r3, [r4, #20]
            a->start = a->end;
 800d7f8:	6122      	str	r2, [r4, #16]
 800d7fa:	e7dd      	b.n	800d7b8 <anim_task+0xc0>
 800d7fc:	200054f4 	.word	0x200054f4
 800d800:	20001688 	.word	0x20001688
 800d804:	20001685 	.word	0x20001685

0800d808 <lv_anim_core_init>:
{
 800d808:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 800d80a:	2124      	movs	r1, #36	; 0x24
 800d80c:	4806      	ldr	r0, [pc, #24]	; (800d828 <lv_anim_core_init+0x20>)
 800d80e:	f000 fa3e 	bl	800dc8e <lv_ll_init>
    last_task_run = lv_tick_get();
 800d812:	f7ff ff47 	bl	800d6a4 <lv_tick_get>
 800d816:	4b05      	ldr	r3, [pc, #20]	; (800d82c <lv_anim_core_init+0x24>)
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800d818:	2203      	movs	r2, #3
    last_task_run = lv_tick_get();
 800d81a:	6018      	str	r0, [r3, #0]
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800d81c:	211e      	movs	r1, #30
 800d81e:	2300      	movs	r3, #0
 800d820:	4803      	ldr	r0, [pc, #12]	; (800d830 <lv_anim_core_init+0x28>)
 800d822:	f000 fd9d 	bl	800e360 <lv_task_create>
}
 800d826:	bd10      	pop	{r4, pc}
 800d828:	200054f4 	.word	0x200054f4
 800d82c:	20001688 	.word	0x20001688
 800d830:	0800d6f9 	.word	0x0800d6f9

0800d834 <lv_anim_del>:
{
 800d834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800d836:	4d13      	ldr	r5, [pc, #76]	; (800d884 <lv_anim_del+0x50>)
{
 800d838:	9001      	str	r0, [sp, #4]
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800d83a:	0028      	movs	r0, r5
{
 800d83c:	000f      	movs	r7, r1
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800d83e:	f000 fa70 	bl	800dd22 <lv_ll_get_head>
    bool del = false;
 800d842:	2600      	movs	r6, #0
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800d844:	0004      	movs	r4, r0
    while(a != NULL) {
 800d846:	2c00      	cmp	r4, #0
 800d848:	d101      	bne.n	800d84e <lv_anim_del+0x1a>
}
 800d84a:	0030      	movs	r0, r6
 800d84c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800d84e:	0021      	movs	r1, r4
 800d850:	0028      	movs	r0, r5
 800d852:	f000 fa6e 	bl	800dd32 <lv_ll_get_next>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 800d856:	6823      	ldr	r3, [r4, #0]
 800d858:	9a01      	ldr	r2, [sp, #4]
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800d85a:	9000      	str	r0, [sp, #0]
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d10f      	bne.n	800d880 <lv_anim_del+0x4c>
 800d860:	6863      	ldr	r3, [r4, #4]
 800d862:	42bb      	cmp	r3, r7
 800d864:	d001      	beq.n	800d86a <lv_anim_del+0x36>
 800d866:	2f00      	cmp	r7, #0
 800d868:	d10a      	bne.n	800d880 <lv_anim_del+0x4c>
            lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 800d86a:	0021      	movs	r1, r4
 800d86c:	0028      	movs	r0, r5
 800d86e:	f000 faad 	bl	800ddcc <lv_ll_rem>
            lv_mem_free(a);
 800d872:	0020      	movs	r0, r4
 800d874:	f000 fbe4 	bl	800e040 <lv_mem_free>
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 800d878:	2201      	movs	r2, #1
            del = true;
 800d87a:	2601      	movs	r6, #1
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 800d87c:	4b02      	ldr	r3, [pc, #8]	; (800d888 <lv_anim_del+0x54>)
 800d87e:	701a      	strb	r2, [r3, #0]
            del = true;
 800d880:	9c00      	ldr	r4, [sp, #0]
 800d882:	e7e0      	b.n	800d846 <lv_anim_del+0x12>
 800d884:	200054f4 	.word	0x200054f4
 800d888:	20001685 	.word	0x20001685

0800d88c <lv_anim_create>:
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 800d88c:	6841      	ldr	r1, [r0, #4]
{
 800d88e:	b570      	push	{r4, r5, r6, lr}
 800d890:	0005      	movs	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 800d892:	2900      	cmp	r1, #0
 800d894:	d002      	beq.n	800d89c <lv_anim_create+0x10>
 800d896:	6800      	ldr	r0, [r0, #0]
 800d898:	f7ff ffcc 	bl	800d834 <lv_anim_del>
    lv_anim_t * new_anim = lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 800d89c:	480c      	ldr	r0, [pc, #48]	; (800d8d0 <lv_anim_create+0x44>)
 800d89e:	f000 fa00 	bl	800dca2 <lv_ll_ins_head>
 800d8a2:	1e04      	subs	r4, r0, #0
    lv_mem_assert(new_anim);
 800d8a4:	d100      	bne.n	800d8a8 <lv_anim_create+0x1c>
 800d8a6:	e7fe      	b.n	800d8a6 <lv_anim_create+0x1a>
    a->playback_now = 0;
 800d8a8:	2104      	movs	r1, #4
 800d8aa:	1c6a      	adds	r2, r5, #1
 800d8ac:	7fd3      	ldrb	r3, [r2, #31]
 800d8ae:	438b      	bics	r3, r1
 800d8b0:	77d3      	strb	r3, [r2, #31]
    memcpy(new_anim, a, sizeof(lv_anim_t));
 800d8b2:	0029      	movs	r1, r5
 800d8b4:	2224      	movs	r2, #36	; 0x24
 800d8b6:	f002 f845 	bl	800f944 <memcpy>
    if(new_anim->exec_cb) new_anim->exec_cb(new_anim->var, new_anim->start);
 800d8ba:	6863      	ldr	r3, [r4, #4]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d003      	beq.n	800d8c8 <lv_anim_create+0x3c>
 800d8c0:	2210      	movs	r2, #16
 800d8c2:	5ea1      	ldrsh	r1, [r4, r2]
 800d8c4:	6820      	ldr	r0, [r4, #0]
 800d8c6:	4798      	blx	r3
    anim_list_changed = true;
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	4b02      	ldr	r3, [pc, #8]	; (800d8d4 <lv_anim_create+0x48>)
 800d8cc:	701a      	strb	r2, [r3, #0]
}
 800d8ce:	bd70      	pop	{r4, r5, r6, pc}
 800d8d0:	200054f4 	.word	0x200054f4
 800d8d4:	20001685 	.word	0x20001685

0800d8d8 <lv_anim_speed_to_time>:
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
 800d8d8:	1a89      	subs	r1, r1, r2
 800d8da:	17ca      	asrs	r2, r1, #31
{
 800d8dc:	0003      	movs	r3, r0
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
 800d8de:	1888      	adds	r0, r1, r2
 800d8e0:	4050      	eors	r0, r2
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 800d8e2:	22fa      	movs	r2, #250	; 0xfa
 800d8e4:	0092      	lsls	r2, r2, #2
 800d8e6:	4350      	muls	r0, r2
 800d8e8:	0019      	movs	r1, r3
{
 800d8ea:	b510      	push	{r4, lr}
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 800d8ec:	f7f2 fcc2 	bl	8000274 <__divsi3>
    if(time > UINT16_MAX) time = UINT16_MAX;
 800d8f0:	4a04      	ldr	r2, [pc, #16]	; (800d904 <lv_anim_speed_to_time+0x2c>)
 800d8f2:	0013      	movs	r3, r2
 800d8f4:	4290      	cmp	r0, r2
 800d8f6:	dc02      	bgt.n	800d8fe <lv_anim_speed_to_time+0x26>
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 800d8f8:	1e03      	subs	r3, r0, #0
    if(time == 0) {
 800d8fa:	d100      	bne.n	800d8fe <lv_anim_speed_to_time+0x26>
        time++;
 800d8fc:	3301      	adds	r3, #1
    return time;
 800d8fe:	b298      	uxth	r0, r3
}
 800d900:	bd10      	pop	{r4, pc}
 800d902:	46c0      	nop			; (mov r8, r8)
 800d904:	0000ffff 	.word	0x0000ffff

0800d908 <lv_area_set>:
 * @param y1 top coordinate of the area
 * @param x2 right coordinate of the area
 * @param y2 bottom coordinate of the area
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
 800d908:	b530      	push	{r4, r5, lr}
 800d90a:	ac03      	add	r4, sp, #12
 800d90c:	2500      	movs	r5, #0
 800d90e:	5f64      	ldrsh	r4, [r4, r5]
    area_p->x1 = x1;
 800d910:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 800d912:	8042      	strh	r2, [r0, #2]
    area_p->x2 = x2;
 800d914:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 800d916:	80c4      	strh	r4, [r0, #6]
}
 800d918:	bd30      	pop	{r4, r5, pc}

0800d91a <lv_area_get_size>:
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 800d91a:	2304      	movs	r3, #4
 800d91c:	5ec2      	ldrsh	r2, [r0, r3]
 800d91e:	2100      	movs	r1, #0
 800d920:	5e43      	ldrsh	r3, [r0, r1]
 800d922:	1ad2      	subs	r2, r2, r3
 800d924:	2106      	movs	r1, #6
 800d926:	5e43      	ldrsh	r3, [r0, r1]
 800d928:	2102      	movs	r1, #2
 800d92a:	5e40      	ldrsh	r0, [r0, r1]
 800d92c:	3201      	adds	r2, #1
 800d92e:	1a18      	subs	r0, r3, r0
 800d930:	3001      	adds	r0, #1
 800d932:	4350      	muls	r0, r2

    return size;
}
 800d934:	4770      	bx	lr

0800d936 <lv_area_intersect>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 800d936:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800d938:	8813      	ldrh	r3, [r2, #0]
 800d93a:	880d      	ldrh	r5, [r1, #0]
 800d93c:	1c1c      	adds	r4, r3, #0
 800d93e:	b22e      	sxth	r6, r5
 800d940:	b21b      	sxth	r3, r3
 800d942:	42b3      	cmp	r3, r6
 800d944:	da00      	bge.n	800d948 <lv_area_intersect+0x12>
 800d946:	1c2c      	adds	r4, r5, #0
 800d948:	8004      	strh	r4, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800d94a:	8853      	ldrh	r3, [r2, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800d94c:	b225      	sxth	r5, r4
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800d94e:	884c      	ldrh	r4, [r1, #2]
 800d950:	1c1e      	adds	r6, r3, #0
 800d952:	b227      	sxth	r7, r4
 800d954:	b21b      	sxth	r3, r3
 800d956:	42bb      	cmp	r3, r7
 800d958:	da00      	bge.n	800d95c <lv_area_intersect+0x26>
 800d95a:	1c26      	adds	r6, r4, #0
 800d95c:	8046      	strh	r6, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800d95e:	8893      	ldrh	r3, [r2, #4]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800d960:	b234      	sxth	r4, r6
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800d962:	888e      	ldrh	r6, [r1, #4]
 800d964:	1c1f      	adds	r7, r3, #0
 800d966:	b21b      	sxth	r3, r3
 800d968:	9301      	str	r3, [sp, #4]
 800d96a:	b233      	sxth	r3, r6
 800d96c:	469c      	mov	ip, r3
 800d96e:	9b01      	ldr	r3, [sp, #4]
 800d970:	4563      	cmp	r3, ip
 800d972:	dd00      	ble.n	800d976 <lv_area_intersect+0x40>
 800d974:	1c37      	adds	r7, r6, #0
 800d976:	8087      	strh	r7, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800d978:	88d3      	ldrh	r3, [r2, #6]
 800d97a:	88c9      	ldrh	r1, [r1, #6]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800d97c:	b23e      	sxth	r6, r7
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800d97e:	1c1a      	adds	r2, r3, #0
 800d980:	b20f      	sxth	r7, r1
 800d982:	b21b      	sxth	r3, r3
 800d984:	42bb      	cmp	r3, r7
 800d986:	dd00      	ble.n	800d98a <lv_area_intersect+0x54>
 800d988:	1c0a      	adds	r2, r1, #0
 800d98a:	80c2      	strh	r2, [r0, #6]
 800d98c:	b213      	sxth	r3, r2

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
        union_ok = false;
 800d98e:	2000      	movs	r0, #0
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 800d990:	42b5      	cmp	r5, r6
 800d992:	dc04      	bgt.n	800d99e <lv_area_intersect+0x68>
 800d994:	0fe0      	lsrs	r0, r4, #31
 800d996:	17da      	asrs	r2, r3, #31
 800d998:	42a3      	cmp	r3, r4
 800d99a:	4150      	adcs	r0, r2
 800d99c:	b2c0      	uxtb	r0, r0
    }

    return union_ok;
}
 800d99e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800d9a0 <lv_area_join>:
 * @param res_p pointer to an area, the result will be stored here
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 800d9a0:	b570      	push	{r4, r5, r6, lr}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 800d9a2:	8813      	ldrh	r3, [r2, #0]
 800d9a4:	880d      	ldrh	r5, [r1, #0]
 800d9a6:	1c1c      	adds	r4, r3, #0
 800d9a8:	b22e      	sxth	r6, r5
 800d9aa:	b21b      	sxth	r3, r3
 800d9ac:	42b3      	cmp	r3, r6
 800d9ae:	dd00      	ble.n	800d9b2 <lv_area_join+0x12>
 800d9b0:	1c2c      	adds	r4, r5, #0
 800d9b2:	8004      	strh	r4, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 800d9b4:	8853      	ldrh	r3, [r2, #2]
 800d9b6:	884d      	ldrh	r5, [r1, #2]
 800d9b8:	1c1c      	adds	r4, r3, #0
 800d9ba:	b22e      	sxth	r6, r5
 800d9bc:	b21b      	sxth	r3, r3
 800d9be:	42b3      	cmp	r3, r6
 800d9c0:	dd00      	ble.n	800d9c4 <lv_area_join+0x24>
 800d9c2:	1c2c      	adds	r4, r5, #0
 800d9c4:	8044      	strh	r4, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 800d9c6:	8893      	ldrh	r3, [r2, #4]
 800d9c8:	888d      	ldrh	r5, [r1, #4]
 800d9ca:	1c1c      	adds	r4, r3, #0
 800d9cc:	b22e      	sxth	r6, r5
 800d9ce:	b21b      	sxth	r3, r3
 800d9d0:	42b3      	cmp	r3, r6
 800d9d2:	da00      	bge.n	800d9d6 <lv_area_join+0x36>
 800d9d4:	1c2c      	adds	r4, r5, #0
 800d9d6:	8084      	strh	r4, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 800d9d8:	88d3      	ldrh	r3, [r2, #6]
 800d9da:	88c9      	ldrh	r1, [r1, #6]
 800d9dc:	1c1a      	adds	r2, r3, #0
 800d9de:	b20c      	sxth	r4, r1
 800d9e0:	b21b      	sxth	r3, r3
 800d9e2:	42a3      	cmp	r3, r4
 800d9e4:	da00      	bge.n	800d9e8 <lv_area_join+0x48>
 800d9e6:	1c0a      	adds	r2, r1, #0
 800d9e8:	80c2      	strh	r2, [r0, #6]
}
 800d9ea:	bd70      	pop	{r4, r5, r6, pc}

0800d9ec <lv_area_is_on>:
 * @param a1_p pointer to an area.
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 800d9ec:	b530      	push	{r4, r5, lr}
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 800d9ee:	2304      	movs	r3, #4
 800d9f0:	5eca      	ldrsh	r2, [r1, r3]
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	5ec4      	ldrsh	r4, [r0, r3]
        return true;
    } else {
        return false;
 800d9f6:	2300      	movs	r3, #0
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 800d9f8:	4294      	cmp	r4, r2
 800d9fa:	dc14      	bgt.n	800da26 <lv_area_is_on+0x3a>
 800d9fc:	2204      	movs	r2, #4
 800d9fe:	5e84      	ldrsh	r4, [r0, r2]
 800da00:	2500      	movs	r5, #0
 800da02:	5f4a      	ldrsh	r2, [r1, r5]
 800da04:	4294      	cmp	r4, r2
 800da06:	db0e      	blt.n	800da26 <lv_area_is_on+0x3a>
 800da08:	2202      	movs	r2, #2
 800da0a:	5e84      	ldrsh	r4, [r0, r2]
 800da0c:	2506      	movs	r5, #6
 800da0e:	5f4a      	ldrsh	r2, [r1, r5]
 800da10:	4294      	cmp	r4, r2
 800da12:	dc08      	bgt.n	800da26 <lv_area_is_on+0x3a>
 800da14:	2306      	movs	r3, #6
 800da16:	5ec4      	ldrsh	r4, [r0, r3]
 800da18:	2302      	movs	r3, #2
 800da1a:	5eca      	ldrsh	r2, [r1, r3]
 800da1c:	17e3      	asrs	r3, r4, #31
 800da1e:	0fd0      	lsrs	r0, r2, #31
 800da20:	4294      	cmp	r4, r2
 800da22:	4143      	adcs	r3, r0
 800da24:	b2db      	uxtb	r3, r3
    }
}
 800da26:	0018      	movs	r0, r3
 800da28:	bd30      	pop	{r4, r5, pc}

0800da2a <lv_area_is_in>:
 * @param ain_p pointer to an area which could be in 'aholder_p'
 * @param aholder pointer to an area which could involve 'ain_p'
 * @return
 */
bool lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p)
{
 800da2a:	b530      	push	{r4, r5, lr}
    bool is_in = false;

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800da2c:	2300      	movs	r3, #0
 800da2e:	5eca      	ldrsh	r2, [r1, r3]
 800da30:	2300      	movs	r3, #0
 800da32:	5ec4      	ldrsh	r4, [r0, r3]
    bool is_in = false;
 800da34:	2300      	movs	r3, #0
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800da36:	4294      	cmp	r4, r2
 800da38:	db14      	blt.n	800da64 <lv_area_is_in+0x3a>
 800da3a:	2202      	movs	r2, #2
 800da3c:	5e84      	ldrsh	r4, [r0, r2]
 800da3e:	2502      	movs	r5, #2
 800da40:	5f4a      	ldrsh	r2, [r1, r5]
 800da42:	4294      	cmp	r4, r2
 800da44:	db0e      	blt.n	800da64 <lv_area_is_in+0x3a>
 800da46:	2204      	movs	r2, #4
 800da48:	5e84      	ldrsh	r4, [r0, r2]
 800da4a:	2504      	movs	r5, #4
 800da4c:	5f4a      	ldrsh	r2, [r1, r5]
 800da4e:	4294      	cmp	r4, r2
 800da50:	dc08      	bgt.n	800da64 <lv_area_is_in+0x3a>
 800da52:	2306      	movs	r3, #6
 800da54:	5ec2      	ldrsh	r2, [r0, r3]
 800da56:	2306      	movs	r3, #6
 800da58:	5ec9      	ldrsh	r1, [r1, r3]
 800da5a:	0fd3      	lsrs	r3, r2, #31
 800da5c:	17c8      	asrs	r0, r1, #31
 800da5e:	4291      	cmp	r1, r2
 800da60:	4143      	adcs	r3, r0
 800da62:	b2db      	uxtb	r3, r3
       ain_p->y2 <= aholder_p->y2) {
        is_in = true;
    }

    return is_in;
}
 800da64:	0018      	movs	r0, r3
 800da66:	bd30      	pop	{r4, r5, pc}

0800da68 <lv_circ_init>:
 * @param radius radius of the circle
 */
void lv_circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
    c->x = radius;
    c->y = 0;
 800da68:	2300      	movs	r3, #0
 800da6a:	8043      	strh	r3, [r0, #2]
    *tmp = 1 - radius;
 800da6c:	3301      	adds	r3, #1
    c->x = radius;
 800da6e:	8002      	strh	r2, [r0, #0]
    *tmp = 1 - radius;
 800da70:	1a9a      	subs	r2, r3, r2
 800da72:	800a      	strh	r2, [r1, #0]
}
 800da74:	4770      	bx	lr

0800da76 <lv_circ_cont>:
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
bool lv_circ_cont(lv_point_t * c)
{
    return c->y <= c->x ? true : false;
 800da76:	2202      	movs	r2, #2
 800da78:	5e83      	ldrsh	r3, [r0, r2]
 800da7a:	2100      	movs	r1, #0
 800da7c:	5e42      	ldrsh	r2, [r0, r1]
 800da7e:	0fd8      	lsrs	r0, r3, #31
 800da80:	17d1      	asrs	r1, r2, #31
 800da82:	429a      	cmp	r2, r3
 800da84:	4148      	adcs	r0, r1
 800da86:	b2c0      	uxtb	r0, r0
}
 800da88:	4770      	bx	lr

0800da8a <lv_circ_next>:
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
void lv_circ_next(lv_point_t * c, lv_coord_t * tmp)
{
    c->y++;
 800da8a:	8843      	ldrh	r3, [r0, #2]
{
 800da8c:	b530      	push	{r4, r5, lr}
    c->y++;
 800da8e:	3301      	adds	r3, #1
 800da90:	b29b      	uxth	r3, r3
 800da92:	b21a      	sxth	r2, r3
 800da94:	8042      	strh	r2, [r0, #2]

    if(*tmp <= 0) {
 800da96:	2500      	movs	r5, #0
 800da98:	5f4c      	ldrsh	r4, [r1, r5]
 800da9a:	2c00      	cmp	r4, #0
 800da9c:	dc04      	bgt.n	800daa8 <lv_circ_next+0x1e>
        (*tmp) += 2 * c->y + 1; /*Change in decision criterion for y -> y+1*/
 800da9e:	005b      	lsls	r3, r3, #1
 800daa0:	3401      	adds	r4, #1
 800daa2:	191b      	adds	r3, r3, r4
 800daa4:	800b      	strh	r3, [r1, #0]
    } else {
        c->x--;
        (*tmp) += 2 * (c->y - c->x) + 1; /*Change for y -> y+1, x -> x-1*/
    }
}
 800daa6:	bd30      	pop	{r4, r5, pc}
        c->x--;
 800daa8:	8803      	ldrh	r3, [r0, #0]
 800daaa:	3b01      	subs	r3, #1
 800daac:	b21b      	sxth	r3, r3
 800daae:	8003      	strh	r3, [r0, #0]
        (*tmp) += 2 * (c->y - c->x) + 1; /*Change for y -> y+1, x -> x-1*/
 800dab0:	1ad2      	subs	r2, r2, r3
 800dab2:	880b      	ldrh	r3, [r1, #0]
 800dab4:	0052      	lsls	r2, r2, #1
 800dab6:	3301      	adds	r3, #1
 800dab8:	18d2      	adds	r2, r2, r3
 800daba:	800a      	strh	r2, [r1, #0]
}
 800dabc:	e7f3      	b.n	800daa6 <lv_circ_next+0x1c>

0800dabe <lv_fs_get_real_path>:

    path++; /*Ignore the driver letter*/

    while(*path != '\0') {
        if(*path == ':' || *path == '\\' || *path == '/') {
            path++;
 800dabe:	3001      	adds	r0, #1
    while(*path != '\0') {
 800dac0:	7803      	ldrb	r3, [r0, #0]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d005      	beq.n	800dad2 <lv_fs_get_real_path+0x14>
        if(*path == ':' || *path == '\\' || *path == '/') {
 800dac6:	2b3a      	cmp	r3, #58	; 0x3a
 800dac8:	d0f9      	beq.n	800dabe <lv_fs_get_real_path>
 800daca:	2b5c      	cmp	r3, #92	; 0x5c
 800dacc:	d0f7      	beq.n	800dabe <lv_fs_get_real_path>
 800dace:	2b2f      	cmp	r3, #47	; 0x2f
 800dad0:	d0f5      	beq.n	800dabe <lv_fs_get_real_path>
            break;
        }
    }

    return path;
}
 800dad2:	4770      	bx	lr

0800dad4 <lv_fs_init>:
{
 800dad4:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
 800dad6:	2144      	movs	r1, #68	; 0x44
 800dad8:	4801      	ldr	r0, [pc, #4]	; (800dae0 <lv_fs_init+0xc>)
 800dada:	f000 f8d8 	bl	800dc8e <lv_ll_init>
}
 800dade:	bd10      	pop	{r4, pc}
 800dae0:	200054e0 	.word	0x200054e0

0800dae4 <lv_fs_close>:
{
 800dae4:	b570      	push	{r4, r5, r6, lr}
 800dae6:	0004      	movs	r4, r0
    if(file_p->drv == NULL) {
 800dae8:	6840      	ldr	r0, [r0, #4]
        return LV_FS_RES_INV_PARAM;
 800daea:	250b      	movs	r5, #11
    if(file_p->drv == NULL) {
 800daec:	2800      	cmp	r0, #0
 800daee:	d00c      	beq.n	800db0a <lv_fs_close+0x26>
    if(file_p->drv->close_cb == NULL) {
 800daf0:	6903      	ldr	r3, [r0, #16]
        return LV_FS_RES_NOT_IMP;
 800daf2:	3d02      	subs	r5, #2
    if(file_p->drv->close_cb == NULL) {
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d008      	beq.n	800db0a <lv_fs_close+0x26>
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 800daf8:	6821      	ldr	r1, [r4, #0]
 800dafa:	4798      	blx	r3
 800dafc:	0005      	movs	r5, r0
    lv_mem_free(file_p->file_d); /*Clean up*/
 800dafe:	6820      	ldr	r0, [r4, #0]
 800db00:	f000 fa9e 	bl	800e040 <lv_mem_free>
    file_p->file_d = NULL;
 800db04:	2300      	movs	r3, #0
 800db06:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
 800db08:	6063      	str	r3, [r4, #4]
}
 800db0a:	0028      	movs	r0, r5
 800db0c:	bd70      	pop	{r4, r5, r6, pc}

0800db0e <lv_fs_read>:
{
 800db0e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800db10:	0006      	movs	r6, r0
 800db12:	1e1c      	subs	r4, r3, #0
    if(br != NULL) *br = 0;
 800db14:	d001      	beq.n	800db1a <lv_fs_read+0xc>
 800db16:	2300      	movs	r3, #0
 800db18:	6023      	str	r3, [r4, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 800db1a:	6870      	ldr	r0, [r6, #4]
 800db1c:	230b      	movs	r3, #11
 800db1e:	2800      	cmp	r0, #0
 800db20:	d010      	beq.n	800db44 <lv_fs_read+0x36>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 800db22:	6985      	ldr	r5, [r0, #24]
 800db24:	3b02      	subs	r3, #2
 800db26:	2d00      	cmp	r5, #0
 800db28:	d00c      	beq.n	800db44 <lv_fs_read+0x36>
    uint32_t br_tmp = 0;
 800db2a:	2300      	movs	r3, #0
 800db2c:	9303      	str	r3, [sp, #12]
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 800db2e:	ab03      	add	r3, sp, #12
 800db30:	9300      	str	r3, [sp, #0]
 800db32:	0013      	movs	r3, r2
 800db34:	000a      	movs	r2, r1
 800db36:	6831      	ldr	r1, [r6, #0]
 800db38:	47a8      	blx	r5
 800db3a:	0003      	movs	r3, r0
    if(br != NULL) *br = br_tmp;
 800db3c:	2c00      	cmp	r4, #0
 800db3e:	d001      	beq.n	800db44 <lv_fs_read+0x36>
 800db40:	9a03      	ldr	r2, [sp, #12]
 800db42:	6022      	str	r2, [r4, #0]
}
 800db44:	0018      	movs	r0, r3
 800db46:	b004      	add	sp, #16
 800db48:	bd70      	pop	{r4, r5, r6, pc}

0800db4a <lv_fs_seek>:
{
 800db4a:	b570      	push	{r4, r5, r6, lr}
 800db4c:	0005      	movs	r5, r0
    if(file_p->drv == NULL) {
 800db4e:	6840      	ldr	r0, [r0, #4]
{
 800db50:	000a      	movs	r2, r1
        return LV_FS_RES_INV_PARAM;
 800db52:	230b      	movs	r3, #11
    if(file_p->drv == NULL) {
 800db54:	2800      	cmp	r0, #0
 800db56:	d006      	beq.n	800db66 <lv_fs_seek+0x1c>
    if(file_p->drv->seek_cb == NULL) {
 800db58:	6a04      	ldr	r4, [r0, #32]
        return LV_FS_RES_NOT_IMP;
 800db5a:	3b02      	subs	r3, #2
    if(file_p->drv->seek_cb == NULL) {
 800db5c:	2c00      	cmp	r4, #0
 800db5e:	d002      	beq.n	800db66 <lv_fs_seek+0x1c>
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 800db60:	6829      	ldr	r1, [r5, #0]
 800db62:	47a0      	blx	r4
 800db64:	0003      	movs	r3, r0
}
 800db66:	0018      	movs	r0, r3
 800db68:	bd70      	pop	{r4, r5, r6, pc}
	...

0800db6c <lv_fs_get_drv>:
{
 800db6c:	b570      	push	{r4, r5, r6, lr}
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 800db6e:	4c08      	ldr	r4, [pc, #32]	; (800db90 <lv_fs_get_drv+0x24>)
{
 800db70:	0005      	movs	r5, r0
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 800db72:	0020      	movs	r0, r4
 800db74:	f000 f8d5 	bl	800dd22 <lv_ll_get_head>
 800db78:	2800      	cmp	r0, #0
 800db7a:	d100      	bne.n	800db7e <lv_fs_get_drv+0x12>
}
 800db7c:	bd70      	pop	{r4, r5, r6, pc}
        if(drv->letter == letter) {
 800db7e:	7803      	ldrb	r3, [r0, #0]
 800db80:	42ab      	cmp	r3, r5
 800db82:	d0fb      	beq.n	800db7c <lv_fs_get_drv+0x10>
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 800db84:	0001      	movs	r1, r0
 800db86:	0020      	movs	r0, r4
 800db88:	f000 f8d3 	bl	800dd32 <lv_ll_get_next>
 800db8c:	e7f4      	b.n	800db78 <lv_fs_get_drv+0xc>
 800db8e:	46c0      	nop			; (mov r8, r8)
 800db90:	200054e0 	.word	0x200054e0

0800db94 <lv_fs_open>:
    file_p->drv    = NULL;
 800db94:	2300      	movs	r3, #0
{
 800db96:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db98:	b085      	sub	sp, #20
 800db9a:	0004      	movs	r4, r0
 800db9c:	000f      	movs	r7, r1
 800db9e:	9203      	str	r2, [sp, #12]
    file_p->drv    = NULL;
 800dba0:	6043      	str	r3, [r0, #4]
    file_p->file_d = NULL;
 800dba2:	6003      	str	r3, [r0, #0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 800dba4:	4299      	cmp	r1, r3
 800dba6:	d035      	beq.n	800dc14 <lv_fs_open+0x80>
    file_p->drv = lv_fs_get_drv(letter);
 800dba8:	7808      	ldrb	r0, [r1, #0]
 800dbaa:	f7ff ffdf 	bl	800db6c <lv_fs_get_drv>
 800dbae:	6060      	str	r0, [r4, #4]
    if(file_p->drv == NULL) {
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	d104      	bne.n	800dbbe <lv_fs_open+0x2a>
        return LV_FS_RES_NOT_EX;
 800dbb4:	2503      	movs	r5, #3
        file_p->file_d = NULL;
 800dbb6:	6020      	str	r0, [r4, #0]
}
 800dbb8:	0028      	movs	r0, r5
 800dbba:	b005      	add	sp, #20
 800dbbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(file_p->drv->ready_cb != NULL) {
 800dbbe:	6883      	ldr	r3, [r0, #8]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d006      	beq.n	800dbd2 <lv_fs_open+0x3e>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
 800dbc4:	4798      	blx	r3
 800dbc6:	2800      	cmp	r0, #0
 800dbc8:	d103      	bne.n	800dbd2 <lv_fs_open+0x3e>
            file_p->drv    = NULL;
 800dbca:	6060      	str	r0, [r4, #4]
            file_p->file_d = NULL;
 800dbcc:	6020      	str	r0, [r4, #0]
            return LV_FS_RES_HW_ERR;
 800dbce:	2501      	movs	r5, #1
 800dbd0:	e7f2      	b.n	800dbb8 <lv_fs_open+0x24>
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
 800dbd2:	6863      	ldr	r3, [r4, #4]
 800dbd4:	8858      	ldrh	r0, [r3, #2]
 800dbd6:	f000 f9ff 	bl	800dfd8 <lv_mem_alloc>
 800dbda:	1e06      	subs	r6, r0, #0
 800dbdc:	6020      	str	r0, [r4, #0]
    lv_mem_assert(file_p->file_d);
 800dbde:	d100      	bne.n	800dbe2 <lv_fs_open+0x4e>
 800dbe0:	e7fe      	b.n	800dbe0 <lv_fs_open+0x4c>
    if(file_p->drv->open_cb == NULL) {
 800dbe2:	6863      	ldr	r3, [r4, #4]
        return LV_FS_RES_NOT_IMP;
 800dbe4:	2509      	movs	r5, #9
    if(file_p->drv->open_cb == NULL) {
 800dbe6:	9301      	str	r3, [sp, #4]
 800dbe8:	68db      	ldr	r3, [r3, #12]
 800dbea:	9302      	str	r3, [sp, #8]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d0e3      	beq.n	800dbb8 <lv_fs_open+0x24>
    const char * real_path = lv_fs_get_real_path(path);
 800dbf0:	0038      	movs	r0, r7
 800dbf2:	f7ff ff64 	bl	800dabe <lv_fs_get_real_path>
    lv_fs_res_t res        = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
 800dbf6:	9d02      	ldr	r5, [sp, #8]
    const char * real_path = lv_fs_get_real_path(path);
 800dbf8:	0002      	movs	r2, r0
    lv_fs_res_t res        = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
 800dbfa:	9b03      	ldr	r3, [sp, #12]
 800dbfc:	0031      	movs	r1, r6
 800dbfe:	9801      	ldr	r0, [sp, #4]
 800dc00:	47a8      	blx	r5
 800dc02:	1e05      	subs	r5, r0, #0
    if(res != LV_FS_RES_OK) {
 800dc04:	d0d8      	beq.n	800dbb8 <lv_fs_open+0x24>
        lv_mem_free(file_p->file_d);
 800dc06:	6820      	ldr	r0, [r4, #0]
 800dc08:	f000 fa1a 	bl	800e040 <lv_mem_free>
        file_p->file_d = NULL;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	6023      	str	r3, [r4, #0]
        file_p->drv    = NULL;
 800dc10:	6063      	str	r3, [r4, #4]
 800dc12:	e7d1      	b.n	800dbb8 <lv_fs_open+0x24>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 800dc14:	250b      	movs	r5, #11
 800dc16:	e7cf      	b.n	800dbb8 <lv_fs_open+0x24>

0800dc18 <lv_fs_get_ext>:
{
 800dc18:	b510      	push	{r4, lr}
 800dc1a:	0004      	movs	r4, r0
    for(i = strlen(fn); i > 0; i--) {
 800dc1c:	f7f2 fa7a 	bl	8000114 <strlen>
 800dc20:	b280      	uxth	r0, r0
 800dc22:	2800      	cmp	r0, #0
 800dc24:	d101      	bne.n	800dc2a <lv_fs_get_ext+0x12>
            return ""; /*No extension if a '\' or '/' found*/
 800dc26:	4807      	ldr	r0, [pc, #28]	; (800dc44 <lv_fs_get_ext+0x2c>)
 800dc28:	e004      	b.n	800dc34 <lv_fs_get_ext+0x1c>
        if(fn[i] == '.') {
 800dc2a:	5c23      	ldrb	r3, [r4, r0]
 800dc2c:	2b2e      	cmp	r3, #46	; 0x2e
 800dc2e:	d102      	bne.n	800dc36 <lv_fs_get_ext+0x1e>
            return &fn[i + 1];
 800dc30:	3001      	adds	r0, #1
 800dc32:	1820      	adds	r0, r4, r0
}
 800dc34:	bd10      	pop	{r4, pc}
        } else if(fn[i] == '/' || fn[i] == '\\') {
 800dc36:	2b2f      	cmp	r3, #47	; 0x2f
 800dc38:	d0f5      	beq.n	800dc26 <lv_fs_get_ext+0xe>
 800dc3a:	2b5c      	cmp	r3, #92	; 0x5c
 800dc3c:	d0f3      	beq.n	800dc26 <lv_fs_get_ext+0xe>
    for(i = strlen(fn); i > 0; i--) {
 800dc3e:	3801      	subs	r0, #1
 800dc40:	e7ee      	b.n	800dc20 <lv_fs_get_ext+0x8>
 800dc42:	46c0      	nop			; (mov r8, r8)
 800dc44:	08012655 	.word	0x08012655

0800dc48 <node_set_next.isra.0>:
 * Set the 'next node pointer' of a node
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
 800dc48:	b507      	push	{r0, r1, r2, lr}
 800dc4a:	1e0b      	subs	r3, r1, #0
 800dc4c:	9201      	str	r2, [sp, #4]
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 800dc4e:	d009      	beq.n	800dc64 <node_set_next.isra.0+0x1c>
 800dc50:	6800      	ldr	r0, [r0, #0]

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
    if(next)
 800dc52:	0011      	movs	r1, r2
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 800dc54:	3004      	adds	r0, #4
 800dc56:	1818      	adds	r0, r3, r0
 800dc58:	2204      	movs	r2, #4
    if(next)
 800dc5a:	2900      	cmp	r1, #0
 800dc5c:	d003      	beq.n	800dc66 <node_set_next.isra.0+0x1e>
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 800dc5e:	a901      	add	r1, sp, #4
 800dc60:	f001 fe70 	bl	800f944 <memcpy>
    else
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
}
 800dc64:	bd07      	pop	{r0, r1, r2, pc}
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 800dc66:	f001 fe76 	bl	800f956 <memset>
 800dc6a:	e7fb      	b.n	800dc64 <node_set_next.isra.0+0x1c>

0800dc6c <node_set_prev.isra.2>:
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
 800dc6c:	b507      	push	{r0, r1, r2, lr}
 800dc6e:	1e0b      	subs	r3, r1, #0
 800dc70:	9201      	str	r2, [sp, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 800dc72:	d008      	beq.n	800dc86 <node_set_prev.isra.2+0x1a>
 800dc74:	6800      	ldr	r0, [r0, #0]
    if(prev)
 800dc76:	0011      	movs	r1, r2
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 800dc78:	1818      	adds	r0, r3, r0
 800dc7a:	2204      	movs	r2, #4
    if(prev)
 800dc7c:	2900      	cmp	r1, #0
 800dc7e:	d003      	beq.n	800dc88 <node_set_prev.isra.2+0x1c>
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 800dc80:	a901      	add	r1, sp, #4
 800dc82:	f001 fe5f 	bl	800f944 <memcpy>
}
 800dc86:	bd07      	pop	{r0, r1, r2, pc}
        memset(act + LL_PREV_P_OFFSET(ll_p), 0, node_p_size);
 800dc88:	f001 fe65 	bl	800f956 <memset>
 800dc8c:	e7fb      	b.n	800dc86 <node_set_prev.isra.2+0x1a>

0800dc8e <lv_ll_init>:
    ll_p->head = NULL;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
 800dc92:	6083      	str	r3, [r0, #8]
    if(node_size & 0x3) {
 800dc94:	3303      	adds	r3, #3
 800dc96:	4219      	tst	r1, r3
 800dc98:	d001      	beq.n	800dc9e <lv_ll_init+0x10>
        node_size = node_size & (~0x3);
 800dc9a:	4399      	bics	r1, r3
        node_size += 4;
 800dc9c:	3104      	adds	r1, #4
    ll_p->n_size = node_size;
 800dc9e:	6001      	str	r1, [r0, #0]
}
 800dca0:	4770      	bx	lr

0800dca2 <lv_ll_ins_head>:
{
 800dca2:	b570      	push	{r4, r5, r6, lr}
 800dca4:	0004      	movs	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800dca6:	6800      	ldr	r0, [r0, #0]
 800dca8:	3008      	adds	r0, #8
 800dcaa:	f000 f995 	bl	800dfd8 <lv_mem_alloc>
 800dcae:	1e05      	subs	r5, r0, #0
    if(n_new != NULL) {
 800dcb0:	d015      	beq.n	800dcde <lv_ll_ins_head+0x3c>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 800dcb2:	0001      	movs	r1, r0
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	0020      	movs	r0, r4
 800dcb8:	f7ff ffd8 	bl	800dc6c <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 800dcbc:	0029      	movs	r1, r5
 800dcbe:	6862      	ldr	r2, [r4, #4]
 800dcc0:	0020      	movs	r0, r4
 800dcc2:	f7ff ffc1 	bl	800dc48 <node_set_next.isra.0>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 800dcc6:	6861      	ldr	r1, [r4, #4]
 800dcc8:	2900      	cmp	r1, #0
 800dcca:	d003      	beq.n	800dcd4 <lv_ll_ins_head+0x32>
            node_set_prev(ll_p, ll_p->head, n_new);
 800dccc:	002a      	movs	r2, r5
 800dcce:	0020      	movs	r0, r4
 800dcd0:	f7ff ffcc 	bl	800dc6c <node_set_prev.isra.2>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 800dcd4:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 800dcd6:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d100      	bne.n	800dcde <lv_ll_ins_head+0x3c>
            ll_p->tail = n_new;
 800dcdc:	60a5      	str	r5, [r4, #8]
}
 800dcde:	0028      	movs	r0, r5
 800dce0:	bd70      	pop	{r4, r5, r6, pc}

0800dce2 <lv_ll_ins_tail>:
{
 800dce2:	b570      	push	{r4, r5, r6, lr}
 800dce4:	0004      	movs	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800dce6:	6800      	ldr	r0, [r0, #0]
 800dce8:	3008      	adds	r0, #8
 800dcea:	f000 f975 	bl	800dfd8 <lv_mem_alloc>
 800dcee:	1e05      	subs	r5, r0, #0
    if(n_new == NULL) return NULL;
 800dcf0:	d015      	beq.n	800dd1e <lv_ll_ins_tail+0x3c>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 800dcf2:	0001      	movs	r1, r0
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	0020      	movs	r0, r4
 800dcf8:	f7ff ffa6 	bl	800dc48 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
 800dcfc:	0029      	movs	r1, r5
 800dcfe:	68a2      	ldr	r2, [r4, #8]
 800dd00:	0020      	movs	r0, r4
 800dd02:	f7ff ffb3 	bl	800dc6c <node_set_prev.isra.2>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 800dd06:	68a1      	ldr	r1, [r4, #8]
 800dd08:	2900      	cmp	r1, #0
 800dd0a:	d003      	beq.n	800dd14 <lv_ll_ins_tail+0x32>
            node_set_next(ll_p, ll_p->tail, n_new);
 800dd0c:	002a      	movs	r2, r5
 800dd0e:	0020      	movs	r0, r4
 800dd10:	f7ff ff9a 	bl	800dc48 <node_set_next.isra.0>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800dd14:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 800dd16:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d100      	bne.n	800dd1e <lv_ll_ins_tail+0x3c>
            ll_p->head = n_new;
 800dd1c:	6065      	str	r5, [r4, #4]
}
 800dd1e:	0028      	movs	r0, r5
 800dd20:	bd70      	pop	{r4, r5, r6, pc}

0800dd22 <lv_ll_get_head>:
    if(ll_p != NULL) {
 800dd22:	2800      	cmp	r0, #0
 800dd24:	d000      	beq.n	800dd28 <lv_ll_get_head+0x6>
        head = ll_p->head;
 800dd26:	6840      	ldr	r0, [r0, #4]
}
 800dd28:	4770      	bx	lr

0800dd2a <lv_ll_get_tail>:
    if(ll_p != NULL) {
 800dd2a:	2800      	cmp	r0, #0
 800dd2c:	d000      	beq.n	800dd30 <lv_ll_get_tail+0x6>
        tail = ll_p->tail;
 800dd2e:	6880      	ldr	r0, [r0, #8]
}
 800dd30:	4770      	bx	lr

0800dd32 <lv_ll_get_next>:
    void * next = NULL;
 800dd32:	2300      	movs	r3, #0
{
 800dd34:	b507      	push	{r0, r1, r2, lr}
    void * next = NULL;
 800dd36:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
 800dd38:	4298      	cmp	r0, r3
 800dd3a:	d006      	beq.n	800dd4a <lv_ll_get_next+0x18>
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 800dd3c:	6803      	ldr	r3, [r0, #0]
 800dd3e:	2204      	movs	r2, #4
 800dd40:	3304      	adds	r3, #4
 800dd42:	18c9      	adds	r1, r1, r3
 800dd44:	a801      	add	r0, sp, #4
 800dd46:	f001 fdfd 	bl	800f944 <memcpy>
}
 800dd4a:	9801      	ldr	r0, [sp, #4]
 800dd4c:	bd0e      	pop	{r1, r2, r3, pc}

0800dd4e <lv_ll_get_prev>:
    void * prev = NULL;
 800dd4e:	2300      	movs	r3, #0
{
 800dd50:	b507      	push	{r0, r1, r2, lr}
    void * prev = NULL;
 800dd52:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
 800dd54:	4298      	cmp	r0, r3
 800dd56:	d005      	beq.n	800dd64 <lv_ll_get_prev+0x16>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 800dd58:	6803      	ldr	r3, [r0, #0]
 800dd5a:	2204      	movs	r2, #4
 800dd5c:	18c9      	adds	r1, r1, r3
 800dd5e:	a801      	add	r0, sp, #4
 800dd60:	f001 fdf0 	bl	800f944 <memcpy>
}
 800dd64:	9801      	ldr	r0, [sp, #4]
 800dd66:	bd0e      	pop	{r1, r2, r3, pc}

0800dd68 <lv_ll_ins_prev>:
{
 800dd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd6a:	0005      	movs	r5, r0
 800dd6c:	000c      	movs	r4, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
 800dd6e:	2800      	cmp	r0, #0
 800dd70:	d02a      	beq.n	800ddc8 <lv_ll_ins_prev+0x60>
 800dd72:	2900      	cmp	r1, #0
 800dd74:	d005      	beq.n	800dd82 <lv_ll_ins_prev+0x1a>
    if(lv_ll_get_head(ll_p) == n_act) {
 800dd76:	6843      	ldr	r3, [r0, #4]
 800dd78:	4299      	cmp	r1, r3
 800dd7a:	d104      	bne.n	800dd86 <lv_ll_ins_prev+0x1e>
        n_new = lv_ll_ins_head(ll_p);
 800dd7c:	f7ff ff91 	bl	800dca2 <lv_ll_ins_head>
 800dd80:	0004      	movs	r4, r0
}
 800dd82:	0020      	movs	r0, r4
 800dd84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800dd86:	6800      	ldr	r0, [r0, #0]
 800dd88:	3008      	adds	r0, #8
 800dd8a:	f000 f925 	bl	800dfd8 <lv_mem_alloc>
 800dd8e:	1e06      	subs	r6, r0, #0
        if(n_new == NULL) return NULL;
 800dd90:	d018      	beq.n	800ddc4 <lv_ll_ins_prev+0x5c>
        n_prev = lv_ll_get_prev(ll_p, n_act);
 800dd92:	0021      	movs	r1, r4
 800dd94:	0028      	movs	r0, r5
 800dd96:	f7ff ffda 	bl	800dd4e <lv_ll_get_prev>
 800dd9a:	0007      	movs	r7, r0
        node_set_next(ll_p, n_prev, n_new);
 800dd9c:	0001      	movs	r1, r0
 800dd9e:	0032      	movs	r2, r6
 800dda0:	0028      	movs	r0, r5
 800dda2:	f7ff ff51 	bl	800dc48 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, n_prev);
 800dda6:	003a      	movs	r2, r7
 800dda8:	0031      	movs	r1, r6
 800ddaa:	0028      	movs	r0, r5
 800ddac:	f7ff ff5e 	bl	800dc6c <node_set_prev.isra.2>
        node_set_prev(ll_p, n_act, n_new);
 800ddb0:	0032      	movs	r2, r6
 800ddb2:	0021      	movs	r1, r4
 800ddb4:	0028      	movs	r0, r5
 800ddb6:	f7ff ff59 	bl	800dc6c <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, n_act);
 800ddba:	0022      	movs	r2, r4
 800ddbc:	0031      	movs	r1, r6
 800ddbe:	0028      	movs	r0, r5
 800ddc0:	f7ff ff42 	bl	800dc48 <node_set_next.isra.0>
        if(n_new == NULL) return NULL;
 800ddc4:	0034      	movs	r4, r6
 800ddc6:	e7dc      	b.n	800dd82 <lv_ll_ins_prev+0x1a>
    if(NULL == ll_p || NULL == n_act) return NULL;
 800ddc8:	0004      	movs	r4, r0
 800ddca:	e7da      	b.n	800dd82 <lv_ll_ins_prev+0x1a>

0800ddcc <lv_ll_rem>:
{
 800ddcc:	b570      	push	{r4, r5, r6, lr}
 800ddce:	0004      	movs	r4, r0
 800ddd0:	000d      	movs	r5, r1
    if(ll_p != NULL) {
 800ddd2:	2800      	cmp	r0, #0
 800ddd4:	d01b      	beq.n	800de0e <lv_ll_rem+0x42>
    if(lv_ll_get_head(ll_p) == node_p) {
 800ddd6:	6843      	ldr	r3, [r0, #4]
 800ddd8:	4299      	cmp	r1, r3
 800ddda:	d109      	bne.n	800ddf0 <lv_ll_rem+0x24>
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 800dddc:	0029      	movs	r1, r5
 800ddde:	0020      	movs	r0, r4
 800dde0:	f7ff ffa7 	bl	800dd32 <lv_ll_get_next>
            node_set_prev(ll_p, ll_p->head, NULL);
 800dde4:	2200      	movs	r2, #0
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 800dde6:	1e01      	subs	r1, r0, #0
 800dde8:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
 800ddea:	d123      	bne.n	800de34 <lv_ll_rem+0x68>
            ll_p->tail = NULL;
 800ddec:	60a0      	str	r0, [r4, #8]
}
 800ddee:	bd70      	pop	{r4, r5, r6, pc}
    } else if(lv_ll_get_tail(ll_p) == node_p) {
 800ddf0:	6883      	ldr	r3, [r0, #8]
 800ddf2:	4299      	cmp	r1, r3
 800ddf4:	d10d      	bne.n	800de12 <lv_ll_rem+0x46>
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
 800ddf6:	f7ff ffaa 	bl	800dd4e <lv_ll_get_prev>
 800ddfa:	1e01      	subs	r1, r0, #0
 800ddfc:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
 800ddfe:	d101      	bne.n	800de04 <lv_ll_rem+0x38>
            ll_p->head = NULL;
 800de00:	6060      	str	r0, [r4, #4]
 800de02:	e7f4      	b.n	800ddee <lv_ll_rem+0x22>
            node_set_next(ll_p, ll_p->tail, NULL);
 800de04:	2200      	movs	r2, #0
 800de06:	0020      	movs	r0, r4
 800de08:	f7ff ff1e 	bl	800dc48 <node_set_next.isra.0>
 800de0c:	e7ef      	b.n	800ddee <lv_ll_rem+0x22>
    if(lv_ll_get_head(ll_p) == node_p) {
 800de0e:	2900      	cmp	r1, #0
 800de10:	d0e4      	beq.n	800dddc <lv_ll_rem+0x10>
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
 800de12:	0029      	movs	r1, r5
 800de14:	0020      	movs	r0, r4
 800de16:	f7ff ff9a 	bl	800dd4e <lv_ll_get_prev>
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 800de1a:	0029      	movs	r1, r5
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
 800de1c:	0006      	movs	r6, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 800de1e:	0020      	movs	r0, r4
 800de20:	f7ff ff87 	bl	800dd32 <lv_ll_get_next>
 800de24:	0005      	movs	r5, r0
        node_set_next(ll_p, n_prev, n_next);
 800de26:	0002      	movs	r2, r0
 800de28:	0031      	movs	r1, r6
 800de2a:	0020      	movs	r0, r4
 800de2c:	f7ff ff0c 	bl	800dc48 <node_set_next.isra.0>
        node_set_prev(ll_p, n_next, n_prev);
 800de30:	0032      	movs	r2, r6
 800de32:	0029      	movs	r1, r5
 800de34:	0020      	movs	r0, r4
 800de36:	f7ff ff19 	bl	800dc6c <node_set_prev.isra.2>
}
 800de3a:	e7d8      	b.n	800ddee <lv_ll_rem+0x22>

0800de3c <lv_ll_chg_list>:
{
 800de3c:	b570      	push	{r4, r5, r6, lr}
 800de3e:	000c      	movs	r4, r1
    lv_ll_rem(ll_ori_p, node);
 800de40:	0011      	movs	r1, r2
{
 800de42:	001e      	movs	r6, r3
 800de44:	0015      	movs	r5, r2
    lv_ll_rem(ll_ori_p, node);
 800de46:	f7ff ffc1 	bl	800ddcc <lv_ll_rem>
    if(head) {
 800de4a:	2e00      	cmp	r6, #0
 800de4c:	d016      	beq.n	800de7c <lv_ll_chg_list+0x40>
        node_set_prev(ll_new_p, node, NULL);
 800de4e:	2200      	movs	r2, #0
 800de50:	0029      	movs	r1, r5
 800de52:	0020      	movs	r0, r4
 800de54:	f7ff ff0a 	bl	800dc6c <node_set_prev.isra.2>
        node_set_next(ll_new_p, node, ll_new_p->head);
 800de58:	0029      	movs	r1, r5
 800de5a:	6862      	ldr	r2, [r4, #4]
 800de5c:	0020      	movs	r0, r4
 800de5e:	f7ff fef3 	bl	800dc48 <node_set_next.isra.0>
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 800de62:	6861      	ldr	r1, [r4, #4]
 800de64:	2900      	cmp	r1, #0
 800de66:	d003      	beq.n	800de70 <lv_ll_chg_list+0x34>
            node_set_prev(ll_new_p, ll_new_p->head, node);
 800de68:	002a      	movs	r2, r5
 800de6a:	0020      	movs	r0, r4
 800de6c:	f7ff fefe 	bl	800dc6c <node_set_prev.isra.2>
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 800de70:	68a3      	ldr	r3, [r4, #8]
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
 800de72:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 800de74:	2b00      	cmp	r3, #0
 800de76:	d100      	bne.n	800de7a <lv_ll_chg_list+0x3e>
            ll_new_p->tail = node;
 800de78:	60a5      	str	r5, [r4, #8]
}
 800de7a:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
 800de7c:	68a2      	ldr	r2, [r4, #8]
 800de7e:	0029      	movs	r1, r5
 800de80:	0020      	movs	r0, r4
 800de82:	f7ff fef3 	bl	800dc6c <node_set_prev.isra.2>
        node_set_next(ll_new_p, node, NULL);
 800de86:	0029      	movs	r1, r5
 800de88:	0032      	movs	r2, r6
 800de8a:	0020      	movs	r0, r4
 800de8c:	f7ff fedc 	bl	800dc48 <node_set_next.isra.0>
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
 800de90:	68a1      	ldr	r1, [r4, #8]
 800de92:	2900      	cmp	r1, #0
 800de94:	d003      	beq.n	800de9e <lv_ll_chg_list+0x62>
            node_set_next(ll_new_p, ll_new_p->tail, node);
 800de96:	002a      	movs	r2, r5
 800de98:	0020      	movs	r0, r4
 800de9a:	f7ff fed5 	bl	800dc48 <node_set_next.isra.0>
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 800de9e:	6863      	ldr	r3, [r4, #4]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
 800dea0:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d1e9      	bne.n	800de7a <lv_ll_chg_list+0x3e>
            ll_new_p->head = node;
 800dea6:	6065      	str	r5, [r4, #4]
}
 800dea8:	e7e7      	b.n	800de7a <lv_ll_chg_list+0x3e>

0800deaa <lv_ll_move_before>:
{
 800deaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deac:	0004      	movs	r4, r0
 800deae:	000d      	movs	r5, r1
 800deb0:	0016      	movs	r6, r2
    if(n_act == n_after) return; /*Can't move before itself*/
 800deb2:	4291      	cmp	r1, r2
 800deb4:	d007      	beq.n	800dec6 <lv_ll_move_before+0x1c>
    if(n_after != NULL)
 800deb6:	2a00      	cmp	r2, #0
 800deb8:	d006      	beq.n	800dec8 <lv_ll_move_before+0x1e>
        n_before = lv_ll_get_prev(ll_p, n_after);
 800deba:	0011      	movs	r1, r2
 800debc:	f7ff ff47 	bl	800dd4e <lv_ll_get_prev>
 800dec0:	0007      	movs	r7, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
 800dec2:	4285      	cmp	r5, r0
 800dec4:	d122      	bne.n	800df0c <lv_ll_move_before+0x62>
}
 800dec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ll_p != NULL) {
 800dec8:	2800      	cmp	r0, #0
 800deca:	d000      	beq.n	800dece <lv_ll_move_before+0x24>
        tail = ll_p->tail;
 800decc:	6886      	ldr	r6, [r0, #8]
    if(n_act == n_before) return; /*Already before `n_after`*/
 800dece:	42b5      	cmp	r5, r6
 800ded0:	d0f9      	beq.n	800dec6 <lv_ll_move_before+0x1c>
    lv_ll_rem(ll_p, n_act);
 800ded2:	0029      	movs	r1, r5
 800ded4:	0020      	movs	r0, r4
 800ded6:	f7ff ff79 	bl	800ddcc <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
 800deda:	002a      	movs	r2, r5
 800dedc:	0031      	movs	r1, r6
 800dede:	0020      	movs	r0, r4
 800dee0:	f7ff feb2 	bl	800dc48 <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
 800dee4:	0032      	movs	r2, r6
 800dee6:	0029      	movs	r1, r5
 800dee8:	0020      	movs	r0, r4
 800deea:	f7ff febf 	bl	800dc6c <node_set_prev.isra.2>
    node_set_prev(ll_p, n_after, n_act);
 800deee:	002a      	movs	r2, r5
 800def0:	2100      	movs	r1, #0
 800def2:	0020      	movs	r0, r4
 800def4:	f7ff feba 	bl	800dc6c <node_set_prev.isra.2>
    node_set_next(ll_p, n_act, n_after);
 800def8:	2200      	movs	r2, #0
 800defa:	0029      	movs	r1, r5
 800defc:	0020      	movs	r0, r4
 800defe:	f7ff fea3 	bl	800dc48 <node_set_next.isra.0>
    if(n_after == NULL) ll_p->tail = n_act;
 800df02:	60a5      	str	r5, [r4, #8]
    if(n_before == NULL) ll_p->head = n_act;
 800df04:	2e00      	cmp	r6, #0
 800df06:	d1de      	bne.n	800dec6 <lv_ll_move_before+0x1c>
 800df08:	6065      	str	r5, [r4, #4]
 800df0a:	e7dc      	b.n	800dec6 <lv_ll_move_before+0x1c>
    lv_ll_rem(ll_p, n_act);
 800df0c:	0029      	movs	r1, r5
 800df0e:	0020      	movs	r0, r4
 800df10:	f7ff ff5c 	bl	800ddcc <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
 800df14:	002a      	movs	r2, r5
 800df16:	0039      	movs	r1, r7
 800df18:	0020      	movs	r0, r4
 800df1a:	f7ff fe95 	bl	800dc48 <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
 800df1e:	003a      	movs	r2, r7
 800df20:	0029      	movs	r1, r5
 800df22:	0020      	movs	r0, r4
 800df24:	f7ff fea2 	bl	800dc6c <node_set_prev.isra.2>
    node_set_prev(ll_p, n_after, n_act);
 800df28:	0031      	movs	r1, r6
 800df2a:	002a      	movs	r2, r5
 800df2c:	0020      	movs	r0, r4
 800df2e:	f7ff fe9d 	bl	800dc6c <node_set_prev.isra.2>
    node_set_next(ll_p, n_act, n_after);
 800df32:	0032      	movs	r2, r6
 800df34:	0029      	movs	r1, r5
 800df36:	0020      	movs	r0, r4
 800df38:	f7ff fe86 	bl	800dc48 <node_set_next.isra.0>
 800df3c:	003e      	movs	r6, r7
 800df3e:	e7e1      	b.n	800df04 <lv_ll_move_before+0x5a>

0800df40 <ent_get_next>:
 * Give the next entry after 'act_e'
 * @param act_e pointer to an entry
 * @return pointer to an entry after 'act_e'
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
 800df40:	4908      	ldr	r1, [pc, #32]	; (800df64 <ent_get_next+0x24>)
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
 800df42:	2800      	cmp	r0, #0
 800df44:	d101      	bne.n	800df4a <ent_get_next+0xa>
        next_e = (lv_mem_ent_t *)work_mem;
 800df46:	6808      	ldr	r0, [r1, #0]

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
    }

    return next_e;
}
 800df48:	4770      	bx	lr
        uint8_t * data = &act_e->first_data;
 800df4a:	1d03      	adds	r3, r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 800df4c:	6800      	ldr	r0, [r0, #0]
 800df4e:	0840      	lsrs	r0, r0, #1
 800df50:	1818      	adds	r0, r3, r0
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 800df52:	680b      	ldr	r3, [r1, #0]
 800df54:	21c0      	movs	r1, #192	; 0xc0
 800df56:	0189      	lsls	r1, r1, #6
 800df58:	1d02      	adds	r2, r0, #4
 800df5a:	185b      	adds	r3, r3, r1
 800df5c:	429a      	cmp	r2, r3
 800df5e:	419b      	sbcs	r3, r3
 800df60:	4018      	ands	r0, r3
 800df62:	e7f1      	b.n	800df48 <ent_get_next+0x8>
 800df64:	2000168c 	.word	0x2000168c

0800df68 <ent_trunc>:
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
 800df68:	2303      	movs	r3, #3
{
 800df6a:	b530      	push	{r4, r5, lr}
    if(size & 0x3) {
 800df6c:	4219      	tst	r1, r3
 800df6e:	d001      	beq.n	800df74 <ent_trunc+0xc>
        size = size & (~0x3);
 800df70:	4399      	bics	r1, r3
        size += 4;
 800df72:	3104      	adds	r1, #4
    }
#endif

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 800df74:	6803      	ldr	r3, [r0, #0]
 800df76:	1d0a      	adds	r2, r1, #4
 800df78:	085b      	lsrs	r3, r3, #1
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d015      	beq.n	800dfaa <ent_trunc+0x42>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
 800df7e:	4299      	cmp	r1, r3
 800df80:	d00c      	beq.n	800df9c <ent_trunc+0x34>
        uint8_t * e_data             = &e->first_data;
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
 800df82:	2401      	movs	r4, #1
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 800df84:	3b04      	subs	r3, #4
 800df86:	1a5b      	subs	r3, r3, r1
 800df88:	40a3      	lsls	r3, r4
        uint8_t * e_data             = &e->first_data;
 800df8a:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
 800df8c:	1852      	adds	r2, r2, r1
        after_new_e->header.s.used   = 0;
 800df8e:	7815      	ldrb	r5, [r2, #0]
 800df90:	43a5      	bics	r5, r4
 800df92:	7015      	strb	r5, [r2, #0]
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 800df94:	6815      	ldr	r5, [r2, #0]
 800df96:	402c      	ands	r4, r5
 800df98:	4323      	orrs	r3, r4
 800df9a:	6013      	str	r3, [r2, #0]
    }

    /* Set the new size for the original entry */
    e->header.s.d_size = size;
 800df9c:	2301      	movs	r3, #1
 800df9e:	6802      	ldr	r2, [r0, #0]
 800dfa0:	0049      	lsls	r1, r1, #1
 800dfa2:	4013      	ands	r3, r2
 800dfa4:	4319      	orrs	r1, r3
 800dfa6:	6001      	str	r1, [r0, #0]
}
 800dfa8:	bd30      	pop	{r4, r5, pc}
 800dfaa:	0019      	movs	r1, r3
 800dfac:	e7f6      	b.n	800df9c <ent_trunc+0x34>
	...

0800dfb0 <lv_mem_init>:
    full->header.s.used = 0;
 800dfb0:	2101      	movs	r1, #1
    work_mem = (uint8_t *)work_mem_int;
 800dfb2:	4b06      	ldr	r3, [pc, #24]	; (800dfcc <lv_mem_init+0x1c>)
 800dfb4:	4a06      	ldr	r2, [pc, #24]	; (800dfd0 <lv_mem_init+0x20>)
    full->header.s.used = 0;
 800dfb6:	7818      	ldrb	r0, [r3, #0]
    work_mem = (uint8_t *)work_mem_int;
 800dfb8:	6013      	str	r3, [r2, #0]
    full->header.s.used = 0;
 800dfba:	4388      	bics	r0, r1
 800dfbc:	7018      	strb	r0, [r3, #0]
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	4011      	ands	r1, r2
 800dfc2:	4a04      	ldr	r2, [pc, #16]	; (800dfd4 <lv_mem_init+0x24>)
 800dfc4:	430a      	orrs	r2, r1
 800dfc6:	601a      	str	r2, [r3, #0]
}
 800dfc8:	4770      	bx	lr
 800dfca:	46c0      	nop			; (mov r8, r8)
 800dfcc:	20001690 	.word	0x20001690
 800dfd0:	2000168c 	.word	0x2000168c
 800dfd4:	00005ff8 	.word	0x00005ff8

0800dfd8 <lv_mem_alloc>:
{
 800dfd8:	b570      	push	{r4, r5, r6, lr}
 800dfda:	1e05      	subs	r5, r0, #0
        return &zero_mem;
 800dfdc:	4c11      	ldr	r4, [pc, #68]	; (800e024 <lv_mem_alloc+0x4c>)
    if(size == 0) {
 800dfde:	d01e      	beq.n	800e01e <lv_mem_alloc+0x46>
    if(size & 0x3) {
 800dfe0:	2303      	movs	r3, #3
 800dfe2:	4218      	tst	r0, r3
 800dfe4:	d001      	beq.n	800dfea <lv_mem_alloc+0x12>
        size = size & (~0x3);
 800dfe6:	439d      	bics	r5, r3
        size += 4;
 800dfe8:	3504      	adds	r5, #4
    lv_mem_ent_t * e = NULL;
 800dfea:	2400      	movs	r4, #0
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 800dfec:	2601      	movs	r6, #1
        e = ent_get_next(e);
 800dfee:	0020      	movs	r0, r4
 800dff0:	f7ff ffa6 	bl	800df40 <ent_get_next>
 800dff4:	1e04      	subs	r4, r0, #0
        if(e != NULL) {
 800dff6:	d012      	beq.n	800e01e <lv_mem_alloc+0x46>
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 800dff8:	7803      	ldrb	r3, [r0, #0]
 800dffa:	4233      	tst	r3, r6
 800dffc:	d1f7      	bne.n	800dfee <lv_mem_alloc+0x16>
 800dffe:	6803      	ldr	r3, [r0, #0]
 800e000:	085b      	lsrs	r3, r3, #1
 800e002:	429d      	cmp	r5, r3
 800e004:	d8f3      	bhi.n	800dfee <lv_mem_alloc+0x16>
        ent_trunc(e, size),
 800e006:	0029      	movs	r1, r5
 800e008:	f7ff ffae 	bl	800df68 <ent_trunc>
            e->header.s.used = 1;
 800e00c:	7823      	ldrb	r3, [r4, #0]
    if(alloc != NULL) memset(alloc, 0xaa, size);
 800e00e:	002a      	movs	r2, r5
            e->header.s.used = 1;
 800e010:	431e      	orrs	r6, r3
 800e012:	7026      	strb	r6, [r4, #0]
        alloc = &e->first_data;
 800e014:	3404      	adds	r4, #4
    if(alloc != NULL) memset(alloc, 0xaa, size);
 800e016:	21aa      	movs	r1, #170	; 0xaa
 800e018:	0020      	movs	r0, r4
 800e01a:	f001 fc9c 	bl	800f956 <memset>
}
 800e01e:	0020      	movs	r0, r4
 800e020:	bd70      	pop	{r4, r5, r6, pc}
 800e022:	46c0      	nop			; (mov r8, r8)
 800e024:	20004690 	.word	0x20004690

0800e028 <lv_mem_get_size>:
{
 800e028:	1e03      	subs	r3, r0, #0
    if(data == NULL) return 0;
 800e02a:	d006      	beq.n	800e03a <lv_mem_get_size+0x12>
    if(data == &zero_mem) return 0;
 800e02c:	4a03      	ldr	r2, [pc, #12]	; (800e03c <lv_mem_get_size+0x14>)
    if(data == NULL) return 0;
 800e02e:	2000      	movs	r0, #0
    if(data == &zero_mem) return 0;
 800e030:	4293      	cmp	r3, r2
 800e032:	d002      	beq.n	800e03a <lv_mem_get_size+0x12>
    return e->header.s.d_size;
 800e034:	3b04      	subs	r3, #4
 800e036:	6818      	ldr	r0, [r3, #0]
 800e038:	0840      	lsrs	r0, r0, #1
}
 800e03a:	4770      	bx	lr
 800e03c:	20004690 	.word	0x20004690

0800e040 <lv_mem_free>:
    if(data == &zero_mem) return;
 800e040:	4b13      	ldr	r3, [pc, #76]	; (800e090 <lv_mem_free+0x50>)
{
 800e042:	b570      	push	{r4, r5, r6, lr}
 800e044:	0004      	movs	r4, r0
    if(data == &zero_mem) return;
 800e046:	4298      	cmp	r0, r3
 800e048:	d012      	beq.n	800e070 <lv_mem_free+0x30>
    if(data == NULL) return;
 800e04a:	2800      	cmp	r0, #0
 800e04c:	d010      	beq.n	800e070 <lv_mem_free+0x30>
    memset((void *)data, 0xbb, lv_mem_get_size(data));
 800e04e:	f7ff ffeb 	bl	800e028 <lv_mem_get_size>
    e->header.s.used = 0;
 800e052:	2501      	movs	r5, #1
    memset((void *)data, 0xbb, lv_mem_get_size(data));
 800e054:	0002      	movs	r2, r0
 800e056:	21bb      	movs	r1, #187	; 0xbb
 800e058:	0020      	movs	r0, r4
    e->header.s.used = 0;
 800e05a:	3c04      	subs	r4, #4
    memset((void *)data, 0xbb, lv_mem_get_size(data));
 800e05c:	f001 fc7b 	bl	800f956 <memset>
    e_next = ent_get_next(e);
 800e060:	0020      	movs	r0, r4
    e->header.s.used = 0;
 800e062:	7823      	ldrb	r3, [r4, #0]
 800e064:	43ab      	bics	r3, r5
 800e066:	7023      	strb	r3, [r4, #0]
        e_next = ent_get_next(e_next);
 800e068:	f7ff ff6a 	bl	800df40 <ent_get_next>
    while(e_next != NULL) {
 800e06c:	2800      	cmp	r0, #0
 800e06e:	d100      	bne.n	800e072 <lv_mem_free+0x32>
}
 800e070:	bd70      	pop	{r4, r5, r6, pc}
        if(e_next->header.s.used == 0) {
 800e072:	7803      	ldrb	r3, [r0, #0]
 800e074:	422b      	tst	r3, r5
 800e076:	d1fb      	bne.n	800e070 <lv_mem_free+0x30>
            e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
 800e078:	6822      	ldr	r2, [r4, #0]
 800e07a:	6801      	ldr	r1, [r0, #0]
 800e07c:	0853      	lsrs	r3, r2, #1
 800e07e:	3304      	adds	r3, #4
 800e080:	0849      	lsrs	r1, r1, #1
 800e082:	185b      	adds	r3, r3, r1
 800e084:	005b      	lsls	r3, r3, #1
 800e086:	402a      	ands	r2, r5
 800e088:	4313      	orrs	r3, r2
 800e08a:	6023      	str	r3, [r4, #0]
 800e08c:	e7ec      	b.n	800e068 <lv_mem_free+0x28>
 800e08e:	46c0      	nop			; (mov r8, r8)
 800e090:	20004690 	.word	0x20004690

0800e094 <lv_mem_realloc>:
{
 800e094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e096:	0004      	movs	r4, r0
 800e098:	000e      	movs	r6, r1
    if(data_p != NULL) {
 800e09a:	2800      	cmp	r0, #0
 800e09c:	d004      	beq.n	800e0a8 <lv_mem_realloc+0x14>
        if(e->header.s.used == 0) {
 800e09e:	1f03      	subs	r3, r0, #4
 800e0a0:	781b      	ldrb	r3, [r3, #0]
            data_p = NULL;
 800e0a2:	07db      	lsls	r3, r3, #31
 800e0a4:	17db      	asrs	r3, r3, #31
 800e0a6:	401c      	ands	r4, r3
    uint32_t old_size = lv_mem_get_size(data_p);
 800e0a8:	0020      	movs	r0, r4
 800e0aa:	f7ff ffbd 	bl	800e028 <lv_mem_get_size>
 800e0ae:	0027      	movs	r7, r4
 800e0b0:	0005      	movs	r5, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 800e0b2:	42b0      	cmp	r0, r6
 800e0b4:	d004      	beq.n	800e0c0 <lv_mem_realloc+0x2c>
    if(new_size < old_size) {
 800e0b6:	d905      	bls.n	800e0c4 <lv_mem_realloc+0x30>
        lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data_p - sizeof(lv_mem_header_t));
 800e0b8:	1f20      	subs	r0, r4, #4
        ent_trunc(e, new_size);
 800e0ba:	0031      	movs	r1, r6
 800e0bc:	f7ff ff54 	bl	800df68 <ent_trunc>
}
 800e0c0:	0038      	movs	r0, r7
 800e0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    new_p = lv_mem_alloc(new_size);
 800e0c4:	0030      	movs	r0, r6
 800e0c6:	f7ff ff87 	bl	800dfd8 <lv_mem_alloc>
 800e0ca:	1e07      	subs	r7, r0, #0
    if(new_p != NULL && data_p != NULL) {
 800e0cc:	d0f8      	beq.n	800e0c0 <lv_mem_realloc+0x2c>
 800e0ce:	2c00      	cmp	r4, #0
 800e0d0:	d0f6      	beq.n	800e0c0 <lv_mem_realloc+0x2c>
        if(old_size != 0) {
 800e0d2:	2d00      	cmp	r5, #0
 800e0d4:	d0f4      	beq.n	800e0c0 <lv_mem_realloc+0x2c>
            memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 800e0d6:	002a      	movs	r2, r5
 800e0d8:	42b5      	cmp	r5, r6
 800e0da:	d900      	bls.n	800e0de <lv_mem_realloc+0x4a>
 800e0dc:	0032      	movs	r2, r6
 800e0de:	0021      	movs	r1, r4
 800e0e0:	0038      	movs	r0, r7
 800e0e2:	f001 fc2f 	bl	800f944 <memcpy>
            lv_mem_free(data_p);
 800e0e6:	0020      	movs	r0, r4
 800e0e8:	f7ff ffaa 	bl	800e040 <lv_mem_free>
 800e0ec:	e7e8      	b.n	800e0c0 <lv_mem_realloc+0x2c>
	...

0800e0f0 <lv_task_core_init>:

/**
 * Init the lv_task module
 */
void lv_task_core_init(void)
{
 800e0f0:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 800e0f2:	2114      	movs	r1, #20
 800e0f4:	4803      	ldr	r0, [pc, #12]	; (800e104 <lv_task_core_init+0x14>)
 800e0f6:	f7ff fdca 	bl	800dc8e <lv_ll_init>
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	4b02      	ldr	r3, [pc, #8]	; (800e108 <lv_task_core_init+0x18>)
 800e0fe:	701a      	strb	r2, [r3, #0]
}
 800e100:	bd10      	pop	{r4, pc}
 800e102:	46c0      	nop			; (mov r8, r8)
 800e104:	200054ac 	.word	0x200054ac
 800e108:	200046a4 	.word	0x200046a4

0800e10c <lv_task_create_basic>:
{
 800e10c:	b570      	push	{r4, r5, r6, lr}
    tmp = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800e10e:	4c1c      	ldr	r4, [pc, #112]	; (800e180 <lv_task_create_basic+0x74>)
 800e110:	0020      	movs	r0, r4
 800e112:	f7ff fe06 	bl	800dd22 <lv_ll_get_head>
 800e116:	1e01      	subs	r1, r0, #0
    if(NULL == tmp) {
 800e118:	d105      	bne.n	800e126 <lv_task_create_basic+0x1a>
        new_task = lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 800e11a:	0020      	movs	r0, r4
 800e11c:	f7ff fdc1 	bl	800dca2 <lv_ll_ins_head>
 800e120:	1e04      	subs	r4, r0, #0
        lv_mem_assert(new_task);
 800e122:	d114      	bne.n	800e14e <lv_task_create_basic+0x42>
 800e124:	e7fe      	b.n	800e124 <lv_task_create_basic+0x18>
            if(tmp->prio <= DEF_PRIO) {
 800e126:	7c0b      	ldrb	r3, [r1, #16]
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 800e128:	0020      	movs	r0, r4
            if(tmp->prio <= DEF_PRIO) {
 800e12a:	075b      	lsls	r3, r3, #29
 800e12c:	0f5b      	lsrs	r3, r3, #29
 800e12e:	2b03      	cmp	r3, #3
 800e130:	dc04      	bgt.n	800e13c <lv_task_create_basic+0x30>
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 800e132:	f7ff fe19 	bl	800dd68 <lv_ll_ins_prev>
 800e136:	1e04      	subs	r4, r0, #0
                lv_mem_assert(new_task);
 800e138:	d109      	bne.n	800e14e <lv_task_create_basic+0x42>
 800e13a:	e7fe      	b.n	800e13a <lv_task_create_basic+0x2e>
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 800e13c:	f7ff fdf9 	bl	800dd32 <lv_ll_get_next>
 800e140:	1e01      	subs	r1, r0, #0
        } while(tmp != NULL);
 800e142:	d1f0      	bne.n	800e126 <lv_task_create_basic+0x1a>
            new_task = lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 800e144:	0020      	movs	r0, r4
 800e146:	f7ff fdcc 	bl	800dce2 <lv_ll_ins_tail>
 800e14a:	1e04      	subs	r4, r0, #0
            lv_mem_assert(new_task);
 800e14c:	d016      	beq.n	800e17c <lv_task_create_basic+0x70>
    new_task->period  = DEF_PERIOD;
 800e14e:	23fa      	movs	r3, #250	; 0xfa
    new_task->prio    = DEF_PRIO;
 800e150:	2207      	movs	r2, #7
    new_task->period  = DEF_PERIOD;
 800e152:	005b      	lsls	r3, r3, #1
 800e154:	6023      	str	r3, [r4, #0]
    new_task->prio    = DEF_PRIO;
 800e156:	7c23      	ldrb	r3, [r4, #16]
    new_task->task_cb = NULL;
 800e158:	2500      	movs	r5, #0
    new_task->prio    = DEF_PRIO;
 800e15a:	4393      	bics	r3, r2
 800e15c:	001a      	movs	r2, r3
    new_task->once     = 0;
 800e15e:	2303      	movs	r3, #3
 800e160:	4313      	orrs	r3, r2
 800e162:	2208      	movs	r2, #8
 800e164:	4393      	bics	r3, r2
    new_task->task_cb = NULL;
 800e166:	60a5      	str	r5, [r4, #8]
    new_task->once     = 0;
 800e168:	7423      	strb	r3, [r4, #16]
    new_task->last_run = lv_tick_get();
 800e16a:	f7ff fa9b 	bl	800d6a4 <lv_tick_get>
    task_created = true;
 800e16e:	2201      	movs	r2, #1
 800e170:	4b04      	ldr	r3, [pc, #16]	; (800e184 <lv_task_create_basic+0x78>)
    new_task->last_run = lv_tick_get();
 800e172:	6060      	str	r0, [r4, #4]
    new_task->user_data = NULL;
 800e174:	60e5      	str	r5, [r4, #12]
}
 800e176:	0020      	movs	r0, r4
    task_created = true;
 800e178:	701a      	strb	r2, [r3, #0]
}
 800e17a:	bd70      	pop	{r4, r5, r6, pc}
 800e17c:	e7fe      	b.n	800e17c <lv_task_create_basic+0x70>
 800e17e:	46c0      	nop			; (mov r8, r8)
 800e180:	200054ac 	.word	0x200054ac
 800e184:	200046a5 	.word	0x200046a5

0800e188 <lv_task_del>:
{
 800e188:	b510      	push	{r4, lr}
 800e18a:	0004      	movs	r4, r0
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
 800e18c:	0001      	movs	r1, r0
 800e18e:	4807      	ldr	r0, [pc, #28]	; (800e1ac <lv_task_del+0x24>)
 800e190:	f7ff fe1c 	bl	800ddcc <lv_ll_rem>
    lv_mem_free(task);
 800e194:	0020      	movs	r0, r4
 800e196:	f7ff ff53 	bl	800e040 <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 800e19a:	4b05      	ldr	r3, [pc, #20]	; (800e1b0 <lv_task_del+0x28>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	429c      	cmp	r4, r3
 800e1a0:	d102      	bne.n	800e1a8 <lv_task_del+0x20>
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	4b03      	ldr	r3, [pc, #12]	; (800e1b4 <lv_task_del+0x2c>)
 800e1a6:	701a      	strb	r2, [r3, #0]
}
 800e1a8:	bd10      	pop	{r4, pc}
 800e1aa:	46c0      	nop			; (mov r8, r8)
 800e1ac:	200054ac 	.word	0x200054ac
 800e1b0:	200054ec 	.word	0x200054ec
 800e1b4:	200046a6 	.word	0x200046a6

0800e1b8 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
 800e1b8:	b570      	push	{r4, r5, r6, lr}
 800e1ba:	0004      	movs	r4, r0
    bool exec = false;

    /*Execute if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
 800e1bc:	6840      	ldr	r0, [r0, #4]
 800e1be:	f7ff fa7f 	bl	800d6c0 <lv_tick_elaps>
    if(elp >= task->period) {
 800e1c2:	6823      	ldr	r3, [r4, #0]
    bool exec = false;
 800e1c4:	2500      	movs	r5, #0
    if(elp >= task->period) {
 800e1c6:	4298      	cmp	r0, r3
 800e1c8:	d315      	bcc.n	800e1f6 <lv_task_exec+0x3e>
        task->last_run = lv_tick_get();
 800e1ca:	f7ff fa6b 	bl	800d6a4 <lv_tick_get>
        task_deleted   = false;
        task_created   = false;
 800e1ce:	4b0b      	ldr	r3, [pc, #44]	; (800e1fc <lv_task_exec+0x44>)
        task_deleted   = false;
 800e1d0:	4e0b      	ldr	r6, [pc, #44]	; (800e200 <lv_task_exec+0x48>)
        task_created   = false;
 800e1d2:	701d      	strb	r5, [r3, #0]
        if(task->task_cb) task->task_cb(task);
 800e1d4:	68a3      	ldr	r3, [r4, #8]
        task->last_run = lv_tick_get();
 800e1d6:	6060      	str	r0, [r4, #4]
        task_deleted   = false;
 800e1d8:	7035      	strb	r5, [r6, #0]
        if(task->task_cb) task->task_cb(task);
 800e1da:	42ab      	cmp	r3, r5
 800e1dc:	d001      	beq.n	800e1e2 <lv_task_exec+0x2a>
 800e1de:	0020      	movs	r0, r4
 800e1e0:	4798      	blx	r3

        /*Delete if it was a one shot lv_task*/
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
 800e1e2:	7835      	ldrb	r5, [r6, #0]
 800e1e4:	2d00      	cmp	r5, #0
 800e1e6:	d106      	bne.n	800e1f6 <lv_task_exec+0x3e>
            if(task->once != 0) {
 800e1e8:	7c23      	ldrb	r3, [r4, #16]
                lv_task_del(task);
            }
        }
        exec = true;
 800e1ea:	3501      	adds	r5, #1
            if(task->once != 0) {
 800e1ec:	071b      	lsls	r3, r3, #28
 800e1ee:	d502      	bpl.n	800e1f6 <lv_task_exec+0x3e>
                lv_task_del(task);
 800e1f0:	0020      	movs	r0, r4
 800e1f2:	f7ff ffc9 	bl	800e188 <lv_task_del>
    }

    return exec;
}
 800e1f6:	0028      	movs	r0, r5
 800e1f8:	bd70      	pop	{r4, r5, r6, pc}
 800e1fa:	46c0      	nop			; (mov r8, r8)
 800e1fc:	200046a5 	.word	0x200046a5
 800e200:	200046a6 	.word	0x200046a6

0800e204 <lv_task_handler>:
{
 800e204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(task_handler_mutex) return;
 800e206:	4f38      	ldr	r7, [pc, #224]	; (800e2e8 <lv_task_handler+0xe4>)
 800e208:	783c      	ldrb	r4, [r7, #0]
 800e20a:	2c00      	cmp	r4, #0
 800e20c:	d107      	bne.n	800e21e <lv_task_handler+0x1a>
    task_handler_mutex = true;
 800e20e:	2301      	movs	r3, #1
 800e210:	703b      	strb	r3, [r7, #0]
    if(lv_task_run == false) {
 800e212:	4b36      	ldr	r3, [pc, #216]	; (800e2ec <lv_task_handler+0xe8>)
 800e214:	781b      	ldrb	r3, [r3, #0]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d102      	bne.n	800e220 <lv_task_handler+0x1c>
        task_handler_mutex = false; /*Release mutex*/
 800e21a:	2300      	movs	r3, #0
 800e21c:	703b      	strb	r3, [r7, #0]
}
 800e21e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    handler_start = lv_tick_get();
 800e220:	f7ff fa40 	bl	800d6a4 <lv_tick_get>
 800e224:	4e32      	ldr	r6, [pc, #200]	; (800e2f0 <lv_task_handler+0xec>)
 800e226:	6030      	str	r0, [r6, #0]
        task_deleted             = false;
 800e228:	2300      	movs	r3, #0
 800e22a:	4a32      	ldr	r2, [pc, #200]	; (800e2f4 <lv_task_handler+0xf0>)
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800e22c:	4832      	ldr	r0, [pc, #200]	; (800e2f8 <lv_task_handler+0xf4>)
        task_deleted             = false;
 800e22e:	7013      	strb	r3, [r2, #0]
        task_created             = false;
 800e230:	4a32      	ldr	r2, [pc, #200]	; (800e2fc <lv_task_handler+0xf8>)
 800e232:	7013      	strb	r3, [r2, #0]
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800e234:	f7ff fd75 	bl	800dd22 <lv_ll_get_head>
 800e238:	4b31      	ldr	r3, [pc, #196]	; (800e300 <lv_task_handler+0xfc>)
 800e23a:	6018      	str	r0, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 800e23c:	4d30      	ldr	r5, [pc, #192]	; (800e300 <lv_task_handler+0xfc>)
 800e23e:	6829      	ldr	r1, [r5, #0]
 800e240:	2900      	cmp	r1, #0
 800e242:	d123      	bne.n	800e28c <lv_task_handler+0x88>
    busy_time += lv_tick_elaps(handler_start);
 800e244:	6830      	ldr	r0, [r6, #0]
 800e246:	f7ff fa3b 	bl	800d6c0 <lv_tick_elaps>
 800e24a:	4c2e      	ldr	r4, [pc, #184]	; (800e304 <lv_task_handler+0x100>)
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 800e24c:	4e2e      	ldr	r6, [pc, #184]	; (800e308 <lv_task_handler+0x104>)
    busy_time += lv_tick_elaps(handler_start);
 800e24e:	6823      	ldr	r3, [r4, #0]
 800e250:	1818      	adds	r0, r3, r0
 800e252:	6020      	str	r0, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 800e254:	6830      	ldr	r0, [r6, #0]
 800e256:	f7ff fa33 	bl	800d6c0 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 800e25a:	23f4      	movs	r3, #244	; 0xf4
 800e25c:	33ff      	adds	r3, #255	; 0xff
 800e25e:	4298      	cmp	r0, r3
 800e260:	d9db      	bls.n	800e21a <lv_task_handler+0x16>
        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
 800e262:	2564      	movs	r5, #100	; 0x64
 800e264:	21fa      	movs	r1, #250	; 0xfa
 800e266:	6820      	ldr	r0, [r4, #0]
 800e268:	0049      	lsls	r1, r1, #1
 800e26a:	4368      	muls	r0, r5
 800e26c:	f7f1 ff78 	bl	8000160 <__udivsi3>
 800e270:	b2c0      	uxtb	r0, r0
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
 800e272:	2300      	movs	r3, #0
 800e274:	42a8      	cmp	r0, r5
 800e276:	d801      	bhi.n	800e27c <lv_task_handler+0x78>
 800e278:	1a2d      	subs	r5, r5, r0
 800e27a:	b2eb      	uxtb	r3, r5
 800e27c:	4a23      	ldr	r2, [pc, #140]	; (800e30c <lv_task_handler+0x108>)
 800e27e:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 800e280:	2300      	movs	r3, #0
 800e282:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
 800e284:	f7ff fa0e 	bl	800d6a4 <lv_tick_get>
 800e288:	6030      	str	r0, [r6, #0]
 800e28a:	e7c6      	b.n	800e21a <lv_task_handler+0x16>
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 800e28c:	481a      	ldr	r0, [pc, #104]	; (800e2f8 <lv_task_handler+0xf4>)
 800e28e:	f7ff fd50 	bl	800dd32 <lv_ll_get_next>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
 800e292:	2207      	movs	r2, #7
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 800e294:	9001      	str	r0, [sp, #4]
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
 800e296:	6828      	ldr	r0, [r5, #0]
 800e298:	7c03      	ldrb	r3, [r0, #16]
 800e29a:	401a      	ands	r2, r3
 800e29c:	d0d2      	beq.n	800e244 <lv_task_handler+0x40>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 800e29e:	4284      	cmp	r4, r0
 800e2a0:	d103      	bne.n	800e2aa <lv_task_handler+0xa6>
                LV_GC_ROOT(_lv_task_act) = next;
 800e2a2:	9b01      	ldr	r3, [sp, #4]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
 800e2a4:	2400      	movs	r4, #0
                LV_GC_ROOT(_lv_task_act) = next;
 800e2a6:	602b      	str	r3, [r5, #0]
                continue; /*Load the next task*/
 800e2a8:	e7c8      	b.n	800e23c <lv_task_handler+0x38>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
 800e2aa:	2a05      	cmp	r2, #5
 800e2ac:	d10d      	bne.n	800e2ca <lv_task_handler+0xc6>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 800e2ae:	f7ff ff83 	bl	800e1b8 <lv_task_exec>
            if(task_deleted) break; /*If a task was deleted then this or the next item might be corrupted*/
 800e2b2:	4b10      	ldr	r3, [pc, #64]	; (800e2f4 <lv_task_handler+0xf0>)
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d1c4      	bne.n	800e244 <lv_task_handler+0x40>
            if(task_created) break; /*If a task was created then this or the next item might be corrupted*/
 800e2ba:	4b10      	ldr	r3, [pc, #64]	; (800e2fc <lv_task_handler+0xf8>)
 800e2bc:	781b      	ldrb	r3, [r3, #0]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d1c0      	bne.n	800e244 <lv_task_handler+0x40>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
 800e2c2:	4b0f      	ldr	r3, [pc, #60]	; (800e300 <lv_task_handler+0xfc>)
 800e2c4:	9a01      	ldr	r2, [sp, #4]
 800e2c6:	601a      	str	r2, [r3, #0]
 800e2c8:	e7b8      	b.n	800e23c <lv_task_handler+0x38>
            else if(task_interrupter) {
 800e2ca:	2c00      	cmp	r4, #0
 800e2cc:	d006      	beq.n	800e2dc <lv_task_handler+0xd8>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
 800e2ce:	7c22      	ldrb	r2, [r4, #16]
 800e2d0:	075b      	lsls	r3, r3, #29
 800e2d2:	0752      	lsls	r2, r2, #29
 800e2d4:	0f5b      	lsrs	r3, r3, #29
 800e2d6:	0f52      	lsrs	r2, r2, #29
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	ddea      	ble.n	800e2b2 <lv_task_handler+0xae>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 800e2dc:	f7ff ff6c 	bl	800e1b8 <lv_task_exec>
 800e2e0:	2800      	cmp	r0, #0
 800e2e2:	d0e6      	beq.n	800e2b2 <lv_task_handler+0xae>
                    task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
 800e2e4:	682c      	ldr	r4, [r5, #0]
                    break;
 800e2e6:	e79f      	b.n	800e228 <lv_task_handler+0x24>
 800e2e8:	200046a7 	.word	0x200046a7
 800e2ec:	200046a4 	.word	0x200046a4
 800e2f0:	20004698 	.word	0x20004698
 800e2f4:	200046a6 	.word	0x200046a6
 800e2f8:	200054ac 	.word	0x200054ac
 800e2fc:	200046a5 	.word	0x200046a5
 800e300:	200054ec 	.word	0x200054ec
 800e304:	20004694 	.word	0x20004694
 800e308:	200046a0 	.word	0x200046a0
 800e30c:	2000469c 	.word	0x2000469c

0800e310 <lv_task_set_prio>:
    if(task->prio == prio) return;
 800e310:	7c03      	ldrb	r3, [r0, #16]
{
 800e312:	b570      	push	{r4, r5, r6, lr}
    if(task->prio == prio) return;
 800e314:	075b      	lsls	r3, r3, #29
{
 800e316:	0004      	movs	r4, r0
 800e318:	000d      	movs	r5, r1
    if(task->prio == prio) return;
 800e31a:	0f5b      	lsrs	r3, r3, #29
 800e31c:	428b      	cmp	r3, r1
 800e31e:	d017      	beq.n	800e350 <lv_task_set_prio+0x40>
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 800e320:	4e0e      	ldr	r6, [pc, #56]	; (800e35c <lv_task_set_prio+0x4c>)
 800e322:	0030      	movs	r0, r6
 800e324:	f7ff fcfd 	bl	800dd22 <lv_ll_get_head>
 800e328:	1e02      	subs	r2, r0, #0
 800e32a:	d006      	beq.n	800e33a <lv_task_set_prio+0x2a>
        if(i->prio <= prio) {
 800e32c:	7c13      	ldrb	r3, [r2, #16]
 800e32e:	075b      	lsls	r3, r3, #29
 800e330:	0f5b      	lsrs	r3, r3, #29
 800e332:	429d      	cmp	r5, r3
 800e334:	db0d      	blt.n	800e352 <lv_task_set_prio+0x42>
            if(i != task) lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 800e336:	42a2      	cmp	r2, r4
 800e338:	d003      	beq.n	800e342 <lv_task_set_prio+0x32>
        lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 800e33a:	0021      	movs	r1, r4
 800e33c:	0030      	movs	r0, r6
 800e33e:	f7ff fdb4 	bl	800deaa <lv_ll_move_before>
    task->prio = prio;
 800e342:	2307      	movs	r3, #7
 800e344:	002a      	movs	r2, r5
 800e346:	7c25      	ldrb	r5, [r4, #16]
 800e348:	401a      	ands	r2, r3
 800e34a:	439d      	bics	r5, r3
 800e34c:	4315      	orrs	r5, r2
 800e34e:	7425      	strb	r5, [r4, #16]
}
 800e350:	bd70      	pop	{r4, r5, r6, pc}
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 800e352:	0011      	movs	r1, r2
 800e354:	0030      	movs	r0, r6
 800e356:	f7ff fcec 	bl	800dd32 <lv_ll_get_next>
 800e35a:	e7e5      	b.n	800e328 <lv_task_set_prio+0x18>
 800e35c:	200054ac 	.word	0x200054ac

0800e360 <lv_task_create>:
{
 800e360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e362:	0007      	movs	r7, r0
 800e364:	000e      	movs	r6, r1
 800e366:	0015      	movs	r5, r2
 800e368:	9301      	str	r3, [sp, #4]
    lv_task_t * new_task = lv_task_create_basic();
 800e36a:	f7ff fecf 	bl	800e10c <lv_task_create_basic>
 800e36e:	1e04      	subs	r4, r0, #0
    lv_mem_assert(new_task);
 800e370:	d100      	bne.n	800e374 <lv_task_create+0x14>
 800e372:	e7fe      	b.n	800e372 <lv_task_create+0x12>
    task->task_cb = task_cb;
 800e374:	6087      	str	r7, [r0, #8]
    task->period = period;
 800e376:	6006      	str	r6, [r0, #0]
    lv_task_set_prio(new_task, prio);
 800e378:	0029      	movs	r1, r5
 800e37a:	f7ff ffc9 	bl	800e310 <lv_task_set_prio>
    new_task->user_data = user_data;
 800e37e:	9b01      	ldr	r3, [sp, #4]
}
 800e380:	0020      	movs	r0, r4
    new_task->user_data = user_data;
 800e382:	60e3      	str	r3, [r4, #12]
}
 800e384:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800e386 <lv_task_ready>:
{
 800e386:	b510      	push	{r4, lr}
 800e388:	0004      	movs	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
 800e38a:	f7ff f98b 	bl	800d6a4 <lv_tick_get>
 800e38e:	6823      	ldr	r3, [r4, #0]
 800e390:	43db      	mvns	r3, r3
 800e392:	1818      	adds	r0, r3, r0
 800e394:	6060      	str	r0, [r4, #4]
}
 800e396:	bd10      	pop	{r4, pc}

0800e398 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
 800e398:	7803      	ldrb	r3, [r0, #0]
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
        return 4;
    return 1; /*If the char was invalid step tell it's 1 byte long*/
 800e39a:	2001      	movs	r0, #1
    if((str[0] & 0x80) == 0)
 800e39c:	b25a      	sxtb	r2, r3
 800e39e:	2a00      	cmp	r2, #0
 800e3a0:	da11      	bge.n	800e3c6 <lv_txt_utf8_size+0x2e>
    else if((str[0] & 0xE0) == 0xC0)
 800e3a2:	221f      	movs	r2, #31
 800e3a4:	0019      	movs	r1, r3
        return 2;
 800e3a6:	1800      	adds	r0, r0, r0
    else if((str[0] & 0xE0) == 0xC0)
 800e3a8:	4391      	bics	r1, r2
 800e3aa:	29c0      	cmp	r1, #192	; 0xc0
 800e3ac:	d00b      	beq.n	800e3c6 <lv_txt_utf8_size+0x2e>
    else if((str[0] & 0xF0) == 0xE0)
 800e3ae:	220f      	movs	r2, #15
 800e3b0:	0019      	movs	r1, r3
        return 3;
 800e3b2:	3001      	adds	r0, #1
    else if((str[0] & 0xF0) == 0xE0)
 800e3b4:	4391      	bics	r1, r2
 800e3b6:	29e0      	cmp	r1, #224	; 0xe0
 800e3b8:	d005      	beq.n	800e3c6 <lv_txt_utf8_size+0x2e>
    else if((str[0] & 0xF8) == 0xF0)
 800e3ba:	2207      	movs	r2, #7
    return 1; /*If the char was invalid step tell it's 1 byte long*/
 800e3bc:	3802      	subs	r0, #2
    else if((str[0] & 0xF8) == 0xF0)
 800e3be:	4393      	bics	r3, r2
 800e3c0:	2bf0      	cmp	r3, #240	; 0xf0
 800e3c2:	d100      	bne.n	800e3c6 <lv_txt_utf8_size+0x2e>
        return 4;
 800e3c4:	3003      	adds	r0, #3
}
 800e3c6:	4770      	bx	lr

0800e3c8 <lv_txt_utf8_next>:
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 800e3c8:	2300      	movs	r3, #0
{
 800e3ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t i_tmp = 0;
 800e3cc:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 800e3ce:	4299      	cmp	r1, r3
 800e3d0:	d100      	bne.n	800e3d4 <lv_txt_utf8_next+0xc>
 800e3d2:	a901      	add	r1, sp, #4

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 800e3d4:	680a      	ldr	r2, [r1, #0]
 800e3d6:	5c84      	ldrb	r4, [r0, r2]
 800e3d8:	1c53      	adds	r3, r2, #1
 800e3da:	b265      	sxtb	r5, r4
 800e3dc:	2d00      	cmp	r5, #0
 800e3de:	db02      	blt.n	800e3e6 <lv_txt_utf8_next+0x1e>
        result = txt[*i];
 800e3e0:	0020      	movs	r0, r4
        (*i)++;
 800e3e2:	600b      	str	r3, [r1, #0]
        } else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 800e3e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if((txt[*i] & 0xE0) == 0xC0) {
 800e3e6:	251f      	movs	r5, #31
 800e3e8:	0026      	movs	r6, r4
 800e3ea:	43ae      	bics	r6, r5
 800e3ec:	0035      	movs	r5, r6
 800e3ee:	2ec0      	cmp	r6, #192	; 0xc0
 800e3f0:	d111      	bne.n	800e416 <lv_txt_utf8_next+0x4e>
            (*i)++;
 800e3f2:	600b      	str	r3, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800e3f4:	5cc3      	ldrb	r3, [r0, r3]
 800e3f6:	3d81      	subs	r5, #129	; 0x81
 800e3f8:	0018      	movs	r0, r3
 800e3fa:	43a8      	bics	r0, r5
 800e3fc:	2880      	cmp	r0, #128	; 0x80
 800e3fe:	d001      	beq.n	800e404 <lv_txt_utf8_next+0x3c>
    uint32_t result = 0;
 800e400:	2000      	movs	r0, #0
 800e402:	e7ef      	b.n	800e3e4 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 800e404:	01a0      	lsls	r0, r4, #6
 800e406:	24f8      	movs	r4, #248	; 0xf8
 800e408:	00e4      	lsls	r4, r4, #3
 800e40a:	4004      	ands	r4, r0
            result += (txt[*i] & 0x3F);
 800e40c:	402b      	ands	r3, r5
 800e40e:	1918      	adds	r0, r3, r4
            (*i)++;
 800e410:	3202      	adds	r2, #2
            (*i)++;
 800e412:	600a      	str	r2, [r1, #0]
 800e414:	e7e6      	b.n	800e3e4 <lv_txt_utf8_next+0x1c>
        else if((txt[*i] & 0xF0) == 0xE0) {
 800e416:	250f      	movs	r5, #15
 800e418:	0026      	movs	r6, r4
 800e41a:	43ae      	bics	r6, r5
 800e41c:	2ee0      	cmp	r6, #224	; 0xe0
 800e41e:	d119      	bne.n	800e454 <lv_txt_utf8_next+0x8c>
            (*i)++;
 800e420:	600b      	str	r3, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800e422:	5cc3      	ldrb	r3, [r0, r3]
 800e424:	263f      	movs	r6, #63	; 0x3f
 800e426:	001d      	movs	r5, r3
 800e428:	43b5      	bics	r5, r6
 800e42a:	2d80      	cmp	r5, #128	; 0x80
 800e42c:	d1e8      	bne.n	800e400 <lv_txt_utf8_next+0x38>
            (*i)++;
 800e42e:	1c95      	adds	r5, r2, #2
 800e430:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800e432:	5d45      	ldrb	r5, [r0, r5]
 800e434:	0028      	movs	r0, r5
 800e436:	43b0      	bics	r0, r6
 800e438:	2880      	cmp	r0, #128	; 0x80
 800e43a:	d1e1      	bne.n	800e400 <lv_txt_utf8_next+0x38>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 800e43c:	0720      	lsls	r0, r4, #28
            result += (txt[*i] & 0x3F);
 800e43e:	002c      	movs	r4, r5
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 800e440:	0c00      	lsrs	r0, r0, #16
            result += (txt[*i] & 0x3F);
 800e442:	4034      	ands	r4, r6
 800e444:	1904      	adds	r4, r0, r4
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 800e446:	0198      	lsls	r0, r3, #6
 800e448:	23fc      	movs	r3, #252	; 0xfc
 800e44a:	011b      	lsls	r3, r3, #4
 800e44c:	4018      	ands	r0, r3
            result += (txt[*i] & 0x3F);
 800e44e:	1900      	adds	r0, r0, r4
            (*i)++;
 800e450:	3203      	adds	r2, #3
 800e452:	e7de      	b.n	800e412 <lv_txt_utf8_next+0x4a>
        else if((txt[*i] & 0xF8) == 0xF0) {
 800e454:	2507      	movs	r5, #7
 800e456:	0026      	movs	r6, r4
            (*i)++;
 800e458:	600b      	str	r3, [r1, #0]
        else if((txt[*i] & 0xF8) == 0xF0) {
 800e45a:	43ae      	bics	r6, r5
 800e45c:	2ef0      	cmp	r6, #240	; 0xf0
 800e45e:	d1cf      	bne.n	800e400 <lv_txt_utf8_next+0x38>
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800e460:	5cc7      	ldrb	r7, [r0, r3]
 800e462:	263f      	movs	r6, #63	; 0x3f
 800e464:	003b      	movs	r3, r7
 800e466:	43b3      	bics	r3, r6
 800e468:	2b80      	cmp	r3, #128	; 0x80
 800e46a:	d1c9      	bne.n	800e400 <lv_txt_utf8_next+0x38>
            (*i)++;
 800e46c:	1c93      	adds	r3, r2, #2
 800e46e:	600b      	str	r3, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800e470:	5cc3      	ldrb	r3, [r0, r3]
 800e472:	001d      	movs	r5, r3
 800e474:	43b5      	bics	r5, r6
 800e476:	2d80      	cmp	r5, #128	; 0x80
 800e478:	d1c2      	bne.n	800e400 <lv_txt_utf8_next+0x38>
            (*i)++;
 800e47a:	1cd5      	adds	r5, r2, #3
 800e47c:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800e47e:	5d45      	ldrb	r5, [r0, r5]
 800e480:	0028      	movs	r0, r5
 800e482:	43b0      	bics	r0, r6
 800e484:	2880      	cmp	r0, #128	; 0x80
 800e486:	d1bb      	bne.n	800e400 <lv_txt_utf8_next+0x38>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 800e488:	20e0      	movs	r0, #224	; 0xe0
 800e48a:	04a4      	lsls	r4, r4, #18
 800e48c:	0340      	lsls	r0, r0, #13
 800e48e:	4004      	ands	r4, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 800e490:	20fc      	movs	r0, #252	; 0xfc
 800e492:	033f      	lsls	r7, r7, #12
 800e494:	0280      	lsls	r0, r0, #10
 800e496:	4038      	ands	r0, r7
 800e498:	4304      	orrs	r4, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 800e49a:	20fc      	movs	r0, #252	; 0xfc
 800e49c:	019b      	lsls	r3, r3, #6
 800e49e:	0100      	lsls	r0, r0, #4
 800e4a0:	4018      	ands	r0, r3
            result += txt[*i] & 0x3F;
 800e4a2:	4035      	ands	r5, r6
 800e4a4:	1940      	adds	r0, r0, r5
 800e4a6:	1900      	adds	r0, r0, r4
            (*i)++;
 800e4a8:	3204      	adds	r2, #4
 800e4aa:	e7b2      	b.n	800e412 <lv_txt_utf8_next+0x4a>

0800e4ac <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 800e4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
 800e4ae:	2400      	movs	r4, #0
{
 800e4b0:	0007      	movs	r7, r0
 800e4b2:	000e      	movs	r6, r1
    for(i = 0; i < utf8_id; i++) {
 800e4b4:	0025      	movs	r5, r4
 800e4b6:	42b5      	cmp	r5, r6
 800e4b8:	d101      	bne.n	800e4be <lv_txt_utf8_get_byte_id+0x12>
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
    }

    return byte_cnt;
}
 800e4ba:	0020      	movs	r0, r4
 800e4bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 800e4be:	4b03      	ldr	r3, [pc, #12]	; (800e4cc <lv_txt_utf8_get_byte_id+0x20>)
 800e4c0:	1938      	adds	r0, r7, r4
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	4798      	blx	r3
    for(i = 0; i < utf8_id; i++) {
 800e4c6:	3501      	adds	r5, #1
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 800e4c8:	1824      	adds	r4, r4, r0
 800e4ca:	e7f4      	b.n	800e4b6 <lv_txt_utf8_get_byte_id+0xa>
 800e4cc:	20000050 	.word	0x20000050

0800e4d0 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 800e4d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t i        = 0;
 800e4d2:	2400      	movs	r4, #0
{
 800e4d4:	0006      	movs	r6, r0
 800e4d6:	000d      	movs	r5, r1
    uint32_t i        = 0;
 800e4d8:	9401      	str	r4, [sp, #4]
    uint32_t char_cnt = 0;

    while(i < byte_id) {
 800e4da:	9b01      	ldr	r3, [sp, #4]
 800e4dc:	42ab      	cmp	r3, r5
 800e4de:	d301      	bcc.n	800e4e4 <lv_txt_utf8_get_char_id+0x14>
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
        char_cnt++;
    }

    return char_cnt;
}
 800e4e0:	0020      	movs	r0, r4
 800e4e2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 800e4e4:	4b03      	ldr	r3, [pc, #12]	; (800e4f4 <lv_txt_utf8_get_char_id+0x24>)
 800e4e6:	a901      	add	r1, sp, #4
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	0030      	movs	r0, r6
 800e4ec:	4798      	blx	r3
        char_cnt++;
 800e4ee:	3401      	adds	r4, #1
 800e4f0:	e7f3      	b.n	800e4da <lv_txt_utf8_get_char_id+0xa>
 800e4f2:	46c0      	nop			; (mov r8, r8)
 800e4f4:	20000048 	.word	0x20000048

0800e4f8 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 800e4f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t len = 0;
    uint32_t i   = 0;
 800e4fa:	2400      	movs	r4, #0
{
 800e4fc:	0005      	movs	r5, r0
    uint32_t i   = 0;
 800e4fe:	9401      	str	r4, [sp, #4]

    while(txt[i] != '\0') {
 800e500:	9b01      	ldr	r3, [sp, #4]
 800e502:	5ceb      	ldrb	r3, [r5, r3]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d101      	bne.n	800e50c <lv_txt_utf8_get_length+0x14>
        lv_txt_encoded_next(txt, &i);
        len++;
    }

    return len;
}
 800e508:	0020      	movs	r0, r4
 800e50a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        lv_txt_encoded_next(txt, &i);
 800e50c:	4b03      	ldr	r3, [pc, #12]	; (800e51c <lv_txt_utf8_get_length+0x24>)
 800e50e:	a901      	add	r1, sp, #4
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	0028      	movs	r0, r5
 800e514:	4798      	blx	r3
        len++;
 800e516:	3401      	adds	r4, #1
 800e518:	e7f2      	b.n	800e500 <lv_txt_utf8_get_length+0x8>
 800e51a:	46c0      	nop			; (mov r8, r8)
 800e51c:	20000048 	.word	0x20000048

0800e520 <lv_txt_utf8_prev>:
{
 800e520:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e522:	0006      	movs	r6, r0
 800e524:	000d      	movs	r5, r1
    (*i)--;
 800e526:	2404      	movs	r4, #4
 800e528:	680b      	ldr	r3, [r1, #0]
 800e52a:	3b01      	subs	r3, #1
 800e52c:	600b      	str	r3, [r1, #0]
        c_size = lv_txt_encoded_size(&txt[*i]);
 800e52e:	682b      	ldr	r3, [r5, #0]
 800e530:	18f0      	adds	r0, r6, r3
 800e532:	4b0b      	ldr	r3, [pc, #44]	; (800e560 <lv_txt_utf8_prev+0x40>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	4798      	blx	r3
 800e538:	682b      	ldr	r3, [r5, #0]
        if(c_size == 0) {
 800e53a:	2800      	cmp	r0, #0
 800e53c:	d109      	bne.n	800e552 <lv_txt_utf8_prev+0x32>
            if(*i != 0)
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d005      	beq.n	800e54e <lv_txt_utf8_prev+0x2e>
 800e542:	3c01      	subs	r4, #1
                (*i)--;
 800e544:	3b01      	subs	r3, #1
 800e546:	b2e4      	uxtb	r4, r4
 800e548:	602b      	str	r3, [r5, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 800e54a:	2c00      	cmp	r4, #0
 800e54c:	d1ef      	bne.n	800e52e <lv_txt_utf8_prev+0xe>
 800e54e:	2000      	movs	r0, #0
}
 800e550:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    uint32_t i_tmp  = *i;
 800e552:	9301      	str	r3, [sp, #4]
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 800e554:	4b03      	ldr	r3, [pc, #12]	; (800e564 <lv_txt_utf8_prev+0x44>)
 800e556:	a901      	add	r1, sp, #4
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	0030      	movs	r0, r6
 800e55c:	4798      	blx	r3
 800e55e:	e7f7      	b.n	800e550 <lv_txt_utf8_prev+0x30>
 800e560:	20000050 	.word	0x20000050
 800e564:	20000048 	.word	0x20000048

0800e568 <lv_txt_is_cmd>:
{
 800e568:	0002      	movs	r2, r0
    bool ret = false;
 800e56a:	2000      	movs	r0, #0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800e56c:	2923      	cmp	r1, #35	; 0x23
 800e56e:	d104      	bne.n	800e57a <lv_txt_is_cmd+0x12>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 800e570:	7813      	ldrb	r3, [r2, #0]
 800e572:	4283      	cmp	r3, r0
 800e574:	d10a      	bne.n	800e58c <lv_txt_is_cmd+0x24>
            *state = LV_TXT_CMD_STATE_PAR;
 800e576:	3001      	adds	r0, #1
            *state = LV_TXT_CMD_STATE_WAIT;
 800e578:	7010      	strb	r0, [r2, #0]
    if(*state == LV_TXT_CMD_STATE_PAR) {
 800e57a:	7813      	ldrb	r3, [r2, #0]
 800e57c:	2b01      	cmp	r3, #1
 800e57e:	d104      	bne.n	800e58a <lv_txt_is_cmd+0x22>
        ret = true;
 800e580:	0018      	movs	r0, r3
        if(c == ' ') {
 800e582:	2920      	cmp	r1, #32
 800e584:	d101      	bne.n	800e58a <lv_txt_is_cmd+0x22>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 800e586:	3301      	adds	r3, #1
 800e588:	7013      	strb	r3, [r2, #0]
}
 800e58a:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_PAR) {
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	d0f3      	beq.n	800e578 <lv_txt_is_cmd+0x10>
        else if(*state == LV_TXT_CMD_STATE_IN) {
 800e590:	2b02      	cmp	r3, #2
 800e592:	d1f2      	bne.n	800e57a <lv_txt_is_cmd+0x12>
            *state = LV_TXT_CMD_STATE_WAIT;
 800e594:	7010      	strb	r0, [r2, #0]
            ret    = true;
 800e596:	2001      	movs	r0, #1
 800e598:	e7ef      	b.n	800e57a <lv_txt_is_cmd+0x12>
	...

0800e59c <lv_txt_get_next_line>:
{
 800e59c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e59e:	b08b      	sub	sp, #44	; 0x2c
 800e5a0:	9303      	str	r3, [sp, #12]
 800e5a2:	ab10      	add	r3, sp, #64	; 0x40
 800e5a4:	781b      	ldrb	r3, [r3, #0]
 800e5a6:	1e05      	subs	r5, r0, #0
 800e5a8:	9101      	str	r1, [sp, #4]
 800e5aa:	9205      	str	r2, [sp, #20]
 800e5ac:	9304      	str	r3, [sp, #16]
    if(txt == NULL) return 0;
 800e5ae:	d03a      	beq.n	800e626 <lv_txt_get_next_line+0x8a>
 800e5b0:	1e08      	subs	r0, r1, #0
    if(font == NULL) return 0;
 800e5b2:	d038      	beq.n	800e626 <lv_txt_get_next_line+0x8a>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800e5b4:	9b04      	ldr	r3, [sp, #16]
 800e5b6:	079b      	lsls	r3, r3, #30
 800e5b8:	d501      	bpl.n	800e5be <lv_txt_get_next_line+0x22>
 800e5ba:	4b37      	ldr	r3, [pc, #220]	; (800e698 <lv_txt_get_next_line+0xfc>)
 800e5bc:	9303      	str	r3, [sp, #12]
    uint32_t i                   = 0;
 800e5be:	2400      	movs	r4, #0
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800e5c0:	ab06      	add	r3, sp, #24
 800e5c2:	71dc      	strb	r4, [r3, #7]
    letter_next = lv_txt_encoded_next(txt, &i_next);
 800e5c4:	4b35      	ldr	r3, [pc, #212]	; (800e69c <lv_txt_get_next_line+0x100>)
    uint32_t i                   = 0;
 800e5c6:	9408      	str	r4, [sp, #32]
    letter_next = lv_txt_encoded_next(txt, &i_next);
 800e5c8:	681b      	ldr	r3, [r3, #0]
    uint32_t i_next              = 0;
 800e5ca:	9409      	str	r4, [sp, #36]	; 0x24
    letter_next = lv_txt_encoded_next(txt, &i_next);
 800e5cc:	a909      	add	r1, sp, #36	; 0x24
 800e5ce:	0028      	movs	r0, r5
 800e5d0:	4798      	blx	r3
    uint32_t last_break          = NO_BREAK_FOUND;
 800e5d2:	2301      	movs	r3, #1
    letter_next = lv_txt_encoded_next(txt, &i_next);
 800e5d4:	0006      	movs	r6, r0
    uint32_t last_break          = NO_BREAK_FOUND;
 800e5d6:	425b      	negs	r3, r3
 800e5d8:	9300      	str	r3, [sp, #0]
    while(txt[i] != '\0') {
 800e5da:	9808      	ldr	r0, [sp, #32]
 800e5dc:	5c2b      	ldrb	r3, [r5, r0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d101      	bne.n	800e5e6 <lv_txt_get_next_line+0x4a>
    return i;
 800e5e2:	b280      	uxth	r0, r0
 800e5e4:	e01f      	b.n	800e626 <lv_txt_get_next_line+0x8a>
        i           = i_next;
 800e5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
        letter_next = lv_txt_encoded_next(txt, &i_next);
 800e5e8:	a909      	add	r1, sp, #36	; 0x24
        i           = i_next;
 800e5ea:	9308      	str	r3, [sp, #32]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 800e5ec:	4b2b      	ldr	r3, [pc, #172]	; (800e69c <lv_txt_get_next_line+0x100>)
 800e5ee:	0028      	movs	r0, r5
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	4798      	blx	r3
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800e5f4:	2201      	movs	r2, #1
 800e5f6:	9b04      	ldr	r3, [sp, #16]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 800e5f8:	0007      	movs	r7, r0
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800e5fa:	4213      	tst	r3, r2
 800e5fc:	d104      	bne.n	800e608 <lv_txt_get_next_line+0x6c>
        if(letter == '\n' || letter == '\r') {
 800e5fe:	2e0a      	cmp	r6, #10
 800e600:	d10b      	bne.n	800e61a <lv_txt_get_next_line+0x7e>
                return i;
 800e602:	ab06      	add	r3, sp, #24
 800e604:	8918      	ldrh	r0, [r3, #8]
 800e606:	e00e      	b.n	800e626 <lv_txt_get_next_line+0x8a>
            if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 800e608:	ab06      	add	r3, sp, #24
 800e60a:	0031      	movs	r1, r6
 800e60c:	1dd8      	adds	r0, r3, #7
 800e60e:	f7ff ffab 	bl	800e568 <lv_txt_is_cmd>
 800e612:	2800      	cmp	r0, #0
 800e614:	d0f3      	beq.n	800e5fe <lv_txt_get_next_line+0x62>
        letter_next = lv_txt_encoded_next(txt, &i_next);
 800e616:	003e      	movs	r6, r7
 800e618:	e7df      	b.n	800e5da <lv_txt_get_next_line+0x3e>
        if(letter == '\n' || letter == '\r') {
 800e61a:	2e0d      	cmp	r6, #13
 800e61c:	d105      	bne.n	800e62a <lv_txt_get_next_line+0x8e>
            if(letter == '\r' && letter_next == '\n')
 800e61e:	2f0a      	cmp	r7, #10
 800e620:	d1ef      	bne.n	800e602 <lv_txt_get_next_line+0x66>
                return i_next;
 800e622:	ab06      	add	r3, sp, #24
 800e624:	8998      	ldrh	r0, [r3, #12]
}
 800e626:	b00b      	add	sp, #44	; 0x2c
 800e628:	bdf0      	pop	{r4, r5, r6, r7, pc}
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800e62a:	003a      	movs	r2, r7
 800e62c:	0031      	movs	r1, r6
 800e62e:	9801      	ldr	r0, [sp, #4]
 800e630:	f7fe fe2a 	bl	800d288 <lv_font_get_glyph_width>
            cur_w += letter_w;
 800e634:	1904      	adds	r4, r0, r4
 800e636:	b2a3      	uxth	r3, r4
 800e638:	9302      	str	r3, [sp, #8]
 800e63a:	466b      	mov	r3, sp
 800e63c:	891b      	ldrh	r3, [r3, #8]
            if(cur_w > max_width) {
 800e63e:	9a03      	ldr	r2, [sp, #12]
            cur_w += letter_w;
 800e640:	b21c      	sxth	r4, r3
            if(cur_w > max_width) {
 800e642:	42a2      	cmp	r2, r4
 800e644:	db0c      	blt.n	800e660 <lv_txt_get_next_line+0xc4>
 800e646:	2200      	movs	r2, #0
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 800e648:	4915      	ldr	r1, [pc, #84]	; (800e6a0 <lv_txt_get_next_line+0x104>)
 800e64a:	5c8b      	ldrb	r3, [r1, r2]
 800e64c:	469c      	mov	ip, r3
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d11a      	bne.n	800e688 <lv_txt_get_next_line+0xec>
        if(letter_w > 0) {
 800e652:	2800      	cmp	r0, #0
 800e654:	d0df      	beq.n	800e616 <lv_txt_get_next_line+0x7a>
            cur_w += letter_space;
 800e656:	9b05      	ldr	r3, [sp, #20]
 800e658:	9a02      	ldr	r2, [sp, #8]
 800e65a:	18d3      	adds	r3, r2, r3
 800e65c:	b21c      	sxth	r4, r3
 800e65e:	e7da      	b.n	800e616 <lv_txt_get_next_line+0x7a>
                if(last_break != NO_BREAK_FOUND) {
 800e660:	9b00      	ldr	r3, [sp, #0]
 800e662:	3301      	adds	r3, #1
 800e664:	d00a      	beq.n	800e67c <lv_txt_get_next_line+0xe0>
                    i = last_break;
 800e666:	9b00      	ldr	r3, [sp, #0]
 800e668:	9308      	str	r3, [sp, #32]
                if(i == 0) lv_txt_encoded_next(txt, &i);
 800e66a:	9b08      	ldr	r3, [sp, #32]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d1c8      	bne.n	800e602 <lv_txt_get_next_line+0x66>
 800e670:	4b0a      	ldr	r3, [pc, #40]	; (800e69c <lv_txt_get_next_line+0x100>)
 800e672:	a908      	add	r1, sp, #32
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	0028      	movs	r0, r5
 800e678:	4798      	blx	r3
 800e67a:	e7c2      	b.n	800e602 <lv_txt_get_next_line+0x66>
                    lv_txt_encoded_prev(txt, &i);
 800e67c:	4b09      	ldr	r3, [pc, #36]	; (800e6a4 <lv_txt_get_next_line+0x108>)
 800e67e:	a908      	add	r1, sp, #32
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	0028      	movs	r0, r5
 800e684:	4798      	blx	r3
 800e686:	e7f0      	b.n	800e66a <lv_txt_get_next_line+0xce>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 800e688:	4566      	cmp	r6, ip
 800e68a:	d002      	beq.n	800e692 <lv_txt_get_next_line+0xf6>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 800e68c:	3201      	adds	r2, #1
 800e68e:	b2d2      	uxtb	r2, r2
 800e690:	e7db      	b.n	800e64a <lv_txt_get_next_line+0xae>
                last_break = i; /*Save the first char index after break*/
 800e692:	9b08      	ldr	r3, [sp, #32]
 800e694:	9300      	str	r3, [sp, #0]
 800e696:	e7dc      	b.n	800e652 <lv_txt_get_next_line+0xb6>
 800e698:	00007c18 	.word	0x00007c18
 800e69c:	20000048 	.word	0x20000048
 800e6a0:	08015708 	.word	0x08015708
 800e6a4:	2000004c 	.word	0x2000004c

0800e6a8 <lv_txt_get_width>:
{
 800e6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6aa:	b087      	sub	sp, #28
 800e6ac:	9302      	str	r3, [sp, #8]
 800e6ae:	ab0c      	add	r3, sp, #48	; 0x30
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	1e05      	subs	r5, r0, #0
 800e6b4:	9100      	str	r1, [sp, #0]
 800e6b6:	9201      	str	r2, [sp, #4]
 800e6b8:	9303      	str	r3, [sp, #12]
    if(txt == NULL) return 0;
 800e6ba:	d103      	bne.n	800e6c4 <lv_txt_get_width+0x1c>
 800e6bc:	2400      	movs	r4, #0
}
 800e6be:	0020      	movs	r0, r4
 800e6c0:	b007      	add	sp, #28
 800e6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(font == NULL) return 0;
 800e6c4:	9b01      	ldr	r3, [sp, #4]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d0f8      	beq.n	800e6bc <lv_txt_get_width+0x14>
    uint32_t i                   = 0;
 800e6ca:	2400      	movs	r4, #0
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800e6cc:	ab04      	add	r3, sp, #16
 800e6ce:	70dc      	strb	r4, [r3, #3]
    if(length != 0) {
 800e6d0:	9b00      	ldr	r3, [sp, #0]
    uint32_t i                   = 0;
 800e6d2:	9405      	str	r4, [sp, #20]
    if(length != 0) {
 800e6d4:	42a3      	cmp	r3, r4
 800e6d6:	d0f1      	beq.n	800e6bc <lv_txt_get_width+0x14>
        while(i < length) {
 800e6d8:	9b00      	ldr	r3, [sp, #0]
 800e6da:	9a05      	ldr	r2, [sp, #20]
 800e6dc:	4293      	cmp	r3, r2
 800e6de:	d805      	bhi.n	800e6ec <lv_txt_get_width+0x44>
        if(width > 0) {
 800e6e0:	2c00      	cmp	r4, #0
 800e6e2:	ddec      	ble.n	800e6be <lv_txt_get_width+0x16>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 800e6e4:	9b02      	ldr	r3, [sp, #8]
 800e6e6:	1ae4      	subs	r4, r4, r3
 800e6e8:	b224      	sxth	r4, r4
 800e6ea:	e7e8      	b.n	800e6be <lv_txt_get_width+0x16>
            letter      = lv_txt_encoded_next(txt, &i);
 800e6ec:	4f12      	ldr	r7, [pc, #72]	; (800e738 <lv_txt_get_width+0x90>)
 800e6ee:	a905      	add	r1, sp, #20
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	0028      	movs	r0, r5
 800e6f4:	4798      	blx	r3
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800e6f6:	9b05      	ldr	r3, [sp, #20]
            letter      = lv_txt_encoded_next(txt, &i);
 800e6f8:	0006      	movs	r6, r0
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800e6fa:	2100      	movs	r1, #0
 800e6fc:	18e8      	adds	r0, r5, r3
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	4798      	blx	r3
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800e702:	2201      	movs	r2, #1
 800e704:	9b03      	ldr	r3, [sp, #12]
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800e706:	0007      	movs	r7, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800e708:	4213      	tst	r3, r2
 800e70a:	d10c      	bne.n	800e726 <lv_txt_get_width+0x7e>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 800e70c:	003a      	movs	r2, r7
 800e70e:	0031      	movs	r1, r6
 800e710:	9801      	ldr	r0, [sp, #4]
 800e712:	f7fe fdb9 	bl	800d288 <lv_font_get_glyph_width>
            if(char_width > 0) {
 800e716:	b203      	sxth	r3, r0
 800e718:	2b00      	cmp	r3, #0
 800e71a:	dddd      	ble.n	800e6d8 <lv_txt_get_width+0x30>
                width += letter_space;
 800e71c:	9b02      	ldr	r3, [sp, #8]
 800e71e:	18e4      	adds	r4, r4, r3
 800e720:	1904      	adds	r4, r0, r4
 800e722:	b224      	sxth	r4, r4
 800e724:	e7d8      	b.n	800e6d8 <lv_txt_get_width+0x30>
                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 800e726:	ab04      	add	r3, sp, #16
 800e728:	0031      	movs	r1, r6
 800e72a:	1cd8      	adds	r0, r3, #3
 800e72c:	f7ff ff1c 	bl	800e568 <lv_txt_is_cmd>
 800e730:	2800      	cmp	r0, #0
 800e732:	d1d1      	bne.n	800e6d8 <lv_txt_get_width+0x30>
 800e734:	e7ea      	b.n	800e70c <lv_txt_get_width+0x64>
 800e736:	46c0      	nop			; (mov r8, r8)
 800e738:	20000048 	.word	0x20000048

0800e73c <lv_txt_get_size>:
{
 800e73c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e73e:	b089      	sub	sp, #36	; 0x24
 800e740:	9306      	str	r3, [sp, #24]
 800e742:	ab0e      	add	r3, sp, #56	; 0x38
 800e744:	0016      	movs	r6, r2
 800e746:	2200      	movs	r2, #0
 800e748:	5e9b      	ldrsh	r3, [r3, r2]
 800e74a:	0004      	movs	r4, r0
 800e74c:	9303      	str	r3, [sp, #12]
 800e74e:	ab0f      	add	r3, sp, #60	; 0x3c
 800e750:	2200      	movs	r2, #0
 800e752:	5e9b      	ldrsh	r3, [r3, r2]
 800e754:	9105      	str	r1, [sp, #20]
 800e756:	9307      	str	r3, [sp, #28]
 800e758:	ab10      	add	r3, sp, #64	; 0x40
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	9304      	str	r3, [sp, #16]
    size_res->x = 0;
 800e75e:	2300      	movs	r3, #0
 800e760:	8003      	strh	r3, [r0, #0]
    size_res->y = 0;
 800e762:	8043      	strh	r3, [r0, #2]
    if(text == NULL) return;
 800e764:	2900      	cmp	r1, #0
 800e766:	d023      	beq.n	800e7b0 <lv_txt_get_size+0x74>
    if(font == NULL) return;
 800e768:	2e00      	cmp	r6, #0
 800e76a:	d021      	beq.n	800e7b0 <lv_txt_get_size+0x74>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800e76c:	9b04      	ldr	r3, [sp, #16]
 800e76e:	079b      	lsls	r3, r3, #30
 800e770:	d501      	bpl.n	800e776 <lv_txt_get_size+0x3a>
 800e772:	4b21      	ldr	r3, [pc, #132]	; (800e7f8 <lv_txt_get_size+0xbc>)
 800e774:	9307      	str	r3, [sp, #28]
    uint32_t line_start     = 0;
 800e776:	2700      	movs	r7, #0
 800e778:	7a33      	ldrb	r3, [r6, #8]
 800e77a:	9302      	str	r3, [sp, #8]
    while(text[line_start] != '\0') {
 800e77c:	9b05      	ldr	r3, [sp, #20]
 800e77e:	19dd      	adds	r5, r3, r7
 800e780:	782b      	ldrb	r3, [r5, #0]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d116      	bne.n	800e7b4 <lv_txt_get_size+0x78>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 800e786:	2f00      	cmp	r7, #0
 800e788:	d00b      	beq.n	800e7a2 <lv_txt_get_size+0x66>
 800e78a:	3d01      	subs	r5, #1
 800e78c:	782b      	ldrb	r3, [r5, #0]
 800e78e:	2b0a      	cmp	r3, #10
 800e790:	d001      	beq.n	800e796 <lv_txt_get_size+0x5a>
 800e792:	2b0d      	cmp	r3, #13
 800e794:	d105      	bne.n	800e7a2 <lv_txt_get_size+0x66>
        size_res->y += letter_height + line_space;
 800e796:	9b02      	ldr	r3, [sp, #8]
 800e798:	9a03      	ldr	r2, [sp, #12]
 800e79a:	189a      	adds	r2, r3, r2
 800e79c:	8863      	ldrh	r3, [r4, #2]
 800e79e:	189b      	adds	r3, r3, r2
 800e7a0:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
 800e7a2:	2202      	movs	r2, #2
 800e7a4:	5ea3      	ldrsh	r3, [r4, r2]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d123      	bne.n	800e7f2 <lv_txt_get_size+0xb6>
        size_res->y = letter_height;
 800e7aa:	466b      	mov	r3, sp
 800e7ac:	891b      	ldrh	r3, [r3, #8]
        size_res->y -= line_space;
 800e7ae:	8063      	strh	r3, [r4, #2]
}
 800e7b0:	b009      	add	sp, #36	; 0x24
 800e7b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 800e7b4:	9b04      	ldr	r3, [sp, #16]
 800e7b6:	9a06      	ldr	r2, [sp, #24]
 800e7b8:	9300      	str	r3, [sp, #0]
 800e7ba:	0031      	movs	r1, r6
 800e7bc:	9b07      	ldr	r3, [sp, #28]
 800e7be:	0028      	movs	r0, r5
 800e7c0:	f7ff feec 	bl	800e59c <lv_txt_get_next_line>
        size_res->y += line_space;
 800e7c4:	9b02      	ldr	r3, [sp, #8]
 800e7c6:	9a03      	ldr	r2, [sp, #12]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 800e7c8:	0001      	movs	r1, r0
        size_res->y += line_space;
 800e7ca:	189a      	adds	r2, r3, r2
 800e7cc:	8863      	ldrh	r3, [r4, #2]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 800e7ce:	183f      	adds	r7, r7, r0
        size_res->y += line_space;
 800e7d0:	189b      	adds	r3, r3, r2
 800e7d2:	8063      	strh	r3, [r4, #2]
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 800e7d4:	9b04      	ldr	r3, [sp, #16]
 800e7d6:	0032      	movs	r2, r6
 800e7d8:	9300      	str	r3, [sp, #0]
 800e7da:	0028      	movs	r0, r5
 800e7dc:	9b06      	ldr	r3, [sp, #24]
 800e7de:	f7ff ff63 	bl	800e6a8 <lv_txt_get_width>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 800e7e2:	8823      	ldrh	r3, [r4, #0]
 800e7e4:	1c1a      	adds	r2, r3, #0
 800e7e6:	b21b      	sxth	r3, r3
 800e7e8:	4283      	cmp	r3, r0
 800e7ea:	da00      	bge.n	800e7ee <lv_txt_get_size+0xb2>
 800e7ec:	1c02      	adds	r2, r0, #0
 800e7ee:	8022      	strh	r2, [r4, #0]
 800e7f0:	e7c4      	b.n	800e77c <lv_txt_get_size+0x40>
        size_res->y -= line_space;
 800e7f2:	9a03      	ldr	r2, [sp, #12]
 800e7f4:	1a9b      	subs	r3, r3, r2
 800e7f6:	e7da      	b.n	800e7ae <lv_txt_get_size+0x72>
 800e7f8:	00007c18 	.word	0x00007c18

0800e7fc <lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                        int32_t (*cmp)(const void * pRef, const void * pElement))
{
 800e7fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7fe:	000f      	movs	r7, r1
 800e800:	0015      	movs	r5, r2
 800e802:	9001      	str	r0, [sp, #4]
 800e804:	9300      	str	r3, [sp, #0]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 800e806:	2d00      	cmp	r5, #0
 800e808:	d101      	bne.n	800e80e <lv_utils_bsearch+0x12>
            middle = base;
        } else {
            return (char *)middle;
        }
    }
    return NULL;
 800e80a:	0028      	movs	r0, r5
}
 800e80c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        middle += (n / 2) * size;
 800e80e:	9c00      	ldr	r4, [sp, #0]
 800e810:	086e      	lsrs	r6, r5, #1
 800e812:	4374      	muls	r4, r6
 800e814:	193c      	adds	r4, r7, r4
        if((c = (*cmp)(key, middle)) > 0) {
 800e816:	0021      	movs	r1, r4
 800e818:	9801      	ldr	r0, [sp, #4]
 800e81a:	9b08      	ldr	r3, [sp, #32]
 800e81c:	4798      	blx	r3
 800e81e:	2800      	cmp	r0, #0
 800e820:	dd06      	ble.n	800e830 <lv_utils_bsearch+0x34>
 800e822:	2301      	movs	r3, #1
 800e824:	43ab      	bics	r3, r5
            n    = (n / 2) - ((n & 1) == 0);
 800e826:	1af6      	subs	r6, r6, r3
            base = (middle += size);
 800e828:	9b00      	ldr	r3, [sp, #0]
 800e82a:	18e7      	adds	r7, r4, r3
 800e82c:	0035      	movs	r5, r6
 800e82e:	e7ea      	b.n	800e806 <lv_utils_bsearch+0xa>
        } else if(c < 0) {
 800e830:	2800      	cmp	r0, #0
 800e832:	d1fb      	bne.n	800e82c <lv_utils_bsearch+0x30>
        middle += (n / 2) * size;
 800e834:	0020      	movs	r0, r4
 800e836:	e7e9      	b.n	800e80c <lv_utils_bsearch+0x10>

0800e838 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
 800e838:	b570      	push	{r4, r5, r6, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e83a:	f7fa fcbf 	bl	80091bc <lv_obj_get_ext_attr>
 800e83e:	2502      	movs	r5, #2
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 800e840:	7c43      	ldrb	r3, [r0, #17]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e842:	0004      	movs	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 800e844:	422b      	tst	r3, r5
 800e846:	d004      	beq.n	800e852 <lv_label_dot_tmp_free+0x1a>
 800e848:	6840      	ldr	r0, [r0, #4]
 800e84a:	2800      	cmp	r0, #0
 800e84c:	d001      	beq.n	800e852 <lv_label_dot_tmp_free+0x1a>
        lv_mem_free(ext->dot.tmp_ptr);
 800e84e:	f7ff fbf7 	bl	800e040 <lv_mem_free>
    }
    ext->dot_tmp_alloc = false;
 800e852:	7c63      	ldrb	r3, [r4, #17]
 800e854:	43ab      	bics	r3, r5
 800e856:	7463      	strb	r3, [r4, #17]
    ext->dot.tmp_ptr   = NULL;
 800e858:	2300      	movs	r3, #0
 800e85a:	6063      	str	r3, [r4, #4]
}
 800e85c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e860 <lv_label_revert_dots>:
{
 800e860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e862:	0005      	movs	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e864:	f7fa fcaa 	bl	80091bc <lv_obj_get_ext_attr>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 800e868:	2307      	movs	r3, #7
 800e86a:	7c07      	ldrb	r7, [r0, #16]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e86c:	0004      	movs	r4, r0
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 800e86e:	401f      	ands	r7, r3
 800e870:	2f02      	cmp	r7, #2
 800e872:	d120      	bne.n	800e8b6 <lv_label_revert_dots+0x56>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 800e874:	8901      	ldrh	r1, [r0, #8]
 800e876:	4b13      	ldr	r3, [pc, #76]	; (800e8c4 <lv_label_revert_dots+0x64>)
 800e878:	4299      	cmp	r1, r3
 800e87a:	d01c      	beq.n	800e8b6 <lv_label_revert_dots+0x56>
    uint32_t byte_i   = lv_txt_encoded_get_byte_id(ext->text, letter_i);
 800e87c:	4b12      	ldr	r3, [pc, #72]	; (800e8c8 <lv_label_revert_dots+0x68>)
    uint32_t letter_i = ext->dot_end - LV_LABEL_DOT_NUM;
 800e87e:	3903      	subs	r1, #3
    uint32_t byte_i   = lv_txt_encoded_get_byte_id(ext->text, letter_i);
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	6800      	ldr	r0, [r0, #0]
 800e884:	4798      	blx	r3
 800e886:	0006      	movs	r6, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e888:	0028      	movs	r0, r5
 800e88a:	f7fa fc97 	bl	80091bc <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc) {
 800e88e:	7c43      	ldrb	r3, [r0, #17]
        return ext->dot.tmp;
 800e890:	1d01      	adds	r1, r0, #4
    if(ext->dot_tmp_alloc) {
 800e892:	423b      	tst	r3, r7
 800e894:	d000      	beq.n	800e898 <lv_label_revert_dots+0x38>
        return ext->dot.tmp_ptr;
 800e896:	6841      	ldr	r1, [r0, #4]
    uint8_t i      = 0;
 800e898:	2300      	movs	r3, #0
    while(ext->text[byte_i + i] != '\0') {
 800e89a:	6820      	ldr	r0, [r4, #0]
 800e89c:	18f2      	adds	r2, r6, r3
 800e89e:	1882      	adds	r2, r0, r2
 800e8a0:	7810      	ldrb	r0, [r2, #0]
 800e8a2:	2800      	cmp	r0, #0
 800e8a4:	d108      	bne.n	800e8b8 <lv_label_revert_dots+0x58>
    ext->text[byte_i + i] = dot_tmp[i];
 800e8a6:	5ccb      	ldrb	r3, [r1, r3]
    lv_label_dot_tmp_free(label);
 800e8a8:	0028      	movs	r0, r5
    ext->text[byte_i + i] = dot_tmp[i];
 800e8aa:	7013      	strb	r3, [r2, #0]
    lv_label_dot_tmp_free(label);
 800e8ac:	f7ff ffc4 	bl	800e838 <lv_label_dot_tmp_free>
    ext->dot_end = LV_LABEL_DOT_END_INV;
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	425b      	negs	r3, r3
 800e8b4:	8123      	strh	r3, [r4, #8]
}
 800e8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->text[byte_i + i] = dot_tmp[i];
 800e8b8:	5cc8      	ldrb	r0, [r1, r3]
        i++;
 800e8ba:	3301      	adds	r3, #1
        ext->text[byte_i + i] = dot_tmp[i];
 800e8bc:	7010      	strb	r0, [r2, #0]
        i++;
 800e8be:	b2db      	uxtb	r3, r3
 800e8c0:	e7eb      	b.n	800e89a <lv_label_revert_dots+0x3a>
 800e8c2:	46c0      	nop			; (mov r8, r8)
 800e8c4:	0000ffff 	.word	0x0000ffff
 800e8c8:	20000044 	.word	0x20000044

0800e8cc <lv_label_set_offset_y>:
{
 800e8cc:	b570      	push	{r4, r5, r6, lr}
 800e8ce:	000d      	movs	r5, r1
 800e8d0:	0004      	movs	r4, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e8d2:	f7fa fc73 	bl	80091bc <lv_obj_get_ext_attr>
    ext->offset.y        = y;
 800e8d6:	8185      	strh	r5, [r0, #12]
    lv_obj_invalidate(label);
 800e8d8:	0020      	movs	r0, r4
 800e8da:	f7f9 fef3 	bl	80086c4 <lv_obj_invalidate>
}
 800e8de:	bd70      	pop	{r4, r5, r6, pc}

0800e8e0 <lv_label_set_offset_x>:
{
 800e8e0:	b570      	push	{r4, r5, r6, lr}
 800e8e2:	000d      	movs	r5, r1
 800e8e4:	0004      	movs	r4, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e8e6:	f7fa fc69 	bl	80091bc <lv_obj_get_ext_attr>
    ext->offset.x        = x;
 800e8ea:	8145      	strh	r5, [r0, #10]
    lv_obj_invalidate(label);
 800e8ec:	0020      	movs	r0, r4
 800e8ee:	f7f9 fee9 	bl	80086c4 <lv_obj_invalidate>
}
 800e8f2:	bd70      	pop	{r4, r5, r6, pc}

0800e8f4 <lv_label_set_dot_tmp>:
{
 800e8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8f6:	0007      	movs	r7, r0
 800e8f8:	0015      	movs	r5, r2
 800e8fa:	000e      	movs	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e8fc:	f7fa fc5e 	bl	80091bc <lv_obj_get_ext_attr>
 800e900:	0004      	movs	r4, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
 800e902:	0038      	movs	r0, r7
 800e904:	f7ff ff98 	bl	800e838 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 800e908:	2d04      	cmp	r5, #4
 800e90a:	d913      	bls.n	800e934 <lv_label_set_dot_tmp+0x40>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
 800e90c:	1c68      	adds	r0, r5, #1
 800e90e:	f7ff fb63 	bl	800dfd8 <lv_mem_alloc>
 800e912:	6060      	str	r0, [r4, #4]
            return false;
 800e914:	1e03      	subs	r3, r0, #0
        if(ext->dot.tmp_ptr == NULL) {
 800e916:	d00b      	beq.n	800e930 <lv_label_set_dot_tmp+0x3c>
        memcpy(ext->dot.tmp_ptr, data, len);
 800e918:	002a      	movs	r2, r5
 800e91a:	0031      	movs	r1, r6
 800e91c:	f001 f812 	bl	800f944 <memcpy>
        ext->dot.tmp_ptr[len] = '\0';
 800e920:	2300      	movs	r3, #0
 800e922:	6862      	ldr	r2, [r4, #4]
 800e924:	5553      	strb	r3, [r2, r5]
        ext->dot_tmp_alloc    = true;
 800e926:	7c62      	ldrb	r2, [r4, #17]
 800e928:	3302      	adds	r3, #2
 800e92a:	4313      	orrs	r3, r2
 800e92c:	7463      	strb	r3, [r4, #17]
    return true;
 800e92e:	2301      	movs	r3, #1
}
 800e930:	0018      	movs	r0, r3
 800e932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->dot_tmp_alloc = false;
 800e934:	2202      	movs	r2, #2
 800e936:	7c63      	ldrb	r3, [r4, #17]
        memcpy(ext->dot.tmp, data, len);
 800e938:	1d20      	adds	r0, r4, #4
        ext->dot_tmp_alloc = false;
 800e93a:	4393      	bics	r3, r2
 800e93c:	7463      	strb	r3, [r4, #17]
        memcpy(ext->dot.tmp, data, len);
 800e93e:	002a      	movs	r2, r5
 800e940:	0031      	movs	r1, r6
 800e942:	f000 ffff 	bl	800f944 <memcpy>
 800e946:	e7f2      	b.n	800e92e <lv_label_set_dot_tmp+0x3a>

0800e948 <lv_label_design>:
{
 800e948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e94a:	b093      	sub	sp, #76	; 0x4c
 800e94c:	9007      	str	r0, [sp, #28]
 800e94e:	9108      	str	r1, [sp, #32]
        return false;
 800e950:	2000      	movs	r0, #0
    if(mode == LV_DESIGN_COVER_CHK)
 800e952:	2a02      	cmp	r2, #2
 800e954:	d100      	bne.n	800e958 <lv_label_design+0x10>
 800e956:	e0e4      	b.n	800eb22 <lv_label_design+0x1da>
    return true;
 800e958:	3001      	adds	r0, #1
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 800e95a:	2a00      	cmp	r2, #0
 800e95c:	d000      	beq.n	800e960 <lv_label_design+0x18>
 800e95e:	e0e0      	b.n	800eb22 <lv_label_design+0x1da>
        const lv_style_t * style = lv_obj_get_style(label);
 800e960:	9807      	ldr	r0, [sp, #28]
 800e962:	f7fa fb65 	bl	8009030 <lv_obj_get_style>
 800e966:	0004      	movs	r4, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
 800e968:	9807      	ldr	r0, [sp, #28]
 800e96a:	f7fa fbc0 	bl	80090ee <lv_obj_get_opa_scale>
        lv_obj_get_coords(label, &coords);
 800e96e:	a90e      	add	r1, sp, #56	; 0x38
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
 800e970:	9009      	str	r0, [sp, #36]	; 0x24
        lv_obj_get_coords(label, &coords);
 800e972:	9807      	ldr	r0, [sp, #28]
 800e974:	f7fa fb46 	bl	8009004 <lv_obj_get_coords>
        lv_group_t * g = lv_obj_get_group(label);
 800e978:	9807      	ldr	r0, [sp, #28]
 800e97a:	f7fa fc21 	bl	80091c0 <lv_obj_get_group>
        if(lv_group_get_focused(g) == label) {
 800e97e:	f7f9 fd9f 	bl	80084c0 <lv_group_get_focused>
 800e982:	9b07      	ldr	r3, [sp, #28]
 800e984:	4283      	cmp	r3, r0
 800e986:	d105      	bne.n	800e994 <lv_label_design+0x4c>
            lv_draw_rect(&coords, mask, style, opa_scale);
 800e988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e98a:	0022      	movs	r2, r4
 800e98c:	9908      	ldr	r1, [sp, #32]
 800e98e:	a80e      	add	r0, sp, #56	; 0x38
 800e990:	f7fc fa26 	bl	800ade0 <lv_draw_rect>
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e994:	9807      	ldr	r0, [sp, #28]
 800e996:	f7fa fc11 	bl	80091bc <lv_obj_get_ext_attr>
        if(ext->body_draw) {
 800e99a:	7c43      	ldrb	r3, [r0, #17]
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800e99c:	0005      	movs	r5, r0
        if(ext->body_draw) {
 800e99e:	07db      	lsls	r3, r3, #31
 800e9a0:	d51d      	bpl.n	800e9de <lv_label_design+0x96>
            lv_obj_get_coords(label, &bg);
 800e9a2:	ae10      	add	r6, sp, #64	; 0x40
 800e9a4:	0031      	movs	r1, r6
 800e9a6:	9807      	ldr	r0, [sp, #28]
 800e9a8:	f7fa fb2c 	bl	8009004 <lv_obj_get_coords>
            bg.x1 -= style->body.padding.left;
 800e9ac:	8b62      	ldrh	r2, [r4, #26]
 800e9ae:	8833      	ldrh	r3, [r6, #0]
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 800e9b0:	9807      	ldr	r0, [sp, #28]
            bg.x1 -= style->body.padding.left;
 800e9b2:	1a9b      	subs	r3, r3, r2
 800e9b4:	8033      	strh	r3, [r6, #0]
            bg.x2 += style->body.padding.right;
 800e9b6:	8ba2      	ldrh	r2, [r4, #28]
 800e9b8:	88b3      	ldrh	r3, [r6, #4]
 800e9ba:	189b      	adds	r3, r3, r2
 800e9bc:	80b3      	strh	r3, [r6, #4]
            bg.y1 -= style->body.padding.top;
 800e9be:	8ae2      	ldrh	r2, [r4, #22]
 800e9c0:	8873      	ldrh	r3, [r6, #2]
 800e9c2:	1a9b      	subs	r3, r3, r2
 800e9c4:	8073      	strh	r3, [r6, #2]
            bg.y2 += style->body.padding.bottom;
 800e9c6:	8b22      	ldrh	r2, [r4, #24]
 800e9c8:	88f3      	ldrh	r3, [r6, #6]
 800e9ca:	189b      	adds	r3, r3, r2
 800e9cc:	80f3      	strh	r3, [r6, #6]
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 800e9ce:	f7fa fb8e 	bl	80090ee <lv_obj_get_opa_scale>
 800e9d2:	0022      	movs	r2, r4
 800e9d4:	0003      	movs	r3, r0
 800e9d6:	9908      	ldr	r1, [sp, #32]
 800e9d8:	0030      	movs	r0, r6
 800e9da:	f7fc fa01 	bl	800ade0 <lv_draw_rect>
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 800e9de:	7c2b      	ldrb	r3, [r5, #16]
 800e9e0:	065f      	lsls	r7, r3, #25
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800e9e2:	b25a      	sxtb	r2, r3
        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 800e9e4:	0fff      	lsrs	r7, r7, #31
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800e9e6:	2a00      	cmp	r2, #0
 800e9e8:	da01      	bge.n	800e9ee <lv_label_design+0xa6>
 800e9ea:	2202      	movs	r2, #2
 800e9ec:	4317      	orrs	r7, r2
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 800e9ee:	2230      	movs	r2, #48	; 0x30
 800e9f0:	2104      	movs	r1, #4
 800e9f2:	401a      	ands	r2, r3
 800e9f4:	2a10      	cmp	r2, #16
 800e9f6:	d002      	beq.n	800e9fe <lv_label_design+0xb6>
        if(ext->align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
 800e9f8:	2a20      	cmp	r2, #32
 800e9fa:	d101      	bne.n	800ea00 <lv_label_design+0xb8>
 800e9fc:	2108      	movs	r1, #8
 800e9fe:	430f      	orrs	r7, r1
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
 800ea00:	2107      	movs	r1, #7
 800ea02:	400b      	ands	r3, r1
 800ea04:	3b03      	subs	r3, #3
 800ea06:	2b01      	cmp	r3, #1
 800ea08:	d81a      	bhi.n	800ea40 <lv_label_design+0xf8>
 800ea0a:	23e0      	movs	r3, #224	; 0xe0
 800ea0c:	3a10      	subs	r2, #16
 800ea0e:	421a      	tst	r2, r3
 800ea10:	d116      	bne.n	800ea40 <lv_label_design+0xf8>
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 800ea12:	2228      	movs	r2, #40	; 0x28
 800ea14:	5ea3      	ldrsh	r3, [r4, r2]
 800ea16:	4a44      	ldr	r2, [pc, #272]	; (800eb28 <lv_label_design+0x1e0>)
 800ea18:	9702      	str	r7, [sp, #8]
 800ea1a:	9201      	str	r2, [sp, #4]
 800ea1c:	212a      	movs	r1, #42	; 0x2a
 800ea1e:	5e62      	ldrsh	r2, [r4, r1]
 800ea20:	ae10      	add	r6, sp, #64	; 0x40
 800ea22:	9200      	str	r2, [sp, #0]
 800ea24:	0030      	movs	r0, r6
 800ea26:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ea28:	6829      	ldr	r1, [r5, #0]
 800ea2a:	f7ff fe87 	bl	800e73c <lv_txt_get_size>
            if(size.x > lv_obj_get_width(label)) {
 800ea2e:	9807      	ldr	r0, [sp, #28]
 800ea30:	2300      	movs	r3, #0
 800ea32:	5ef6      	ldrsh	r6, [r6, r3]
 800ea34:	f7fa faef 	bl	8009016 <lv_obj_get_width>
 800ea38:	4286      	cmp	r6, r0
 800ea3a:	dd01      	ble.n	800ea40 <lv_label_design+0xf8>
                flag &= ~LV_TXT_FLAG_CENTER;
 800ea3c:	230c      	movs	r3, #12
 800ea3e:	439f      	bics	r7, r3
        lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ext->offset,
 800ea40:	2300      	movs	r3, #0
 800ea42:	9305      	str	r3, [sp, #20]
 800ea44:	002b      	movs	r3, r5
 800ea46:	4e39      	ldr	r6, [pc, #228]	; (800eb2c <lv_label_design+0x1e4>)
 800ea48:	330a      	adds	r3, #10
 800ea4a:	9604      	str	r6, [sp, #16]
 800ea4c:	9603      	str	r6, [sp, #12]
 800ea4e:	9302      	str	r3, [sp, #8]
 800ea50:	9701      	str	r7, [sp, #4]
 800ea52:	682b      	ldr	r3, [r5, #0]
 800ea54:	0022      	movs	r2, r4
 800ea56:	9300      	str	r3, [sp, #0]
 800ea58:	9908      	ldr	r1, [sp, #32]
 800ea5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea5c:	a80e      	add	r0, sp, #56	; 0x38
 800ea5e:	f7fb ff19 	bl	800a894 <lv_draw_label>
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 800ea62:	2207      	movs	r2, #7
 800ea64:	7c2b      	ldrb	r3, [r5, #16]
 800ea66:	960a      	str	r6, [sp, #40]	; 0x28
 800ea68:	4013      	ands	r3, r2
 800ea6a:	2b04      	cmp	r3, #4
 800ea6c:	d158      	bne.n	800eb20 <lv_label_design+0x1d8>
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 800ea6e:	2228      	movs	r2, #40	; 0x28
 800ea70:	5ea3      	ldrsh	r3, [r4, r2]
 800ea72:	4a2d      	ldr	r2, [pc, #180]	; (800eb28 <lv_label_design+0x1e0>)
 800ea74:	9702      	str	r7, [sp, #8]
 800ea76:	9201      	str	r2, [sp, #4]
 800ea78:	212a      	movs	r1, #42	; 0x2a
 800ea7a:	5e62      	ldrsh	r2, [r4, r1]
 800ea7c:	ae0d      	add	r6, sp, #52	; 0x34
 800ea7e:	9200      	str	r2, [sp, #0]
 800ea80:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ea82:	6829      	ldr	r1, [r5, #0]
 800ea84:	0030      	movs	r0, r6
 800ea86:	f7ff fe59 	bl	800e73c <lv_txt_get_size>
            if(size.x > lv_obj_get_width(label)) {
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	5eb3      	ldrsh	r3, [r6, r2]
 800ea8e:	9807      	ldr	r0, [sp, #28]
 800ea90:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea92:	f7fa fac0 	bl	8009016 <lv_obj_get_width>
 800ea96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea98:	4283      	cmp	r3, r0
 800ea9a:	dd1e      	ble.n	800eada <lv_label_design+0x192>
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800ea9c:	2220      	movs	r2, #32
                ofs.x = ext->offset.x + size.x +
 800ea9e:	8968      	ldrh	r0, [r5, #10]
 800eaa0:	8836      	ldrh	r6, [r6, #0]
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800eaa2:	0011      	movs	r1, r2
                ofs.x = ext->offset.x + size.x +
 800eaa4:	1986      	adds	r6, r0, r6
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800eaa6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800eaa8:	f7fe fbee 	bl	800d288 <lv_font_get_glyph_width>
 800eaac:	2203      	movs	r2, #3
 800eaae:	4350      	muls	r0, r2
                ofs.x = ext->offset.x + size.x +
 800eab0:	b2b6      	uxth	r6, r6
 800eab2:	ab10      	add	r3, sp, #64	; 0x40
 800eab4:	1836      	adds	r6, r6, r0
 800eab6:	801e      	strh	r6, [r3, #0]
                ofs.y = ext->offset.y;
 800eab8:	89aa      	ldrh	r2, [r5, #12]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 800eaba:	9908      	ldr	r1, [sp, #32]
                ofs.y = ext->offset.y;
 800eabc:	805a      	strh	r2, [r3, #2]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 800eabe:	2200      	movs	r2, #0
 800eac0:	9205      	str	r2, [sp, #20]
 800eac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eac4:	9302      	str	r3, [sp, #8]
 800eac6:	9204      	str	r2, [sp, #16]
 800eac8:	9203      	str	r2, [sp, #12]
 800eaca:	9701      	str	r7, [sp, #4]
 800eacc:	682b      	ldr	r3, [r5, #0]
 800eace:	0022      	movs	r2, r4
 800ead0:	9300      	str	r3, [sp, #0]
 800ead2:	a80e      	add	r0, sp, #56	; 0x38
 800ead4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ead6:	f7fb fedd 	bl	800a894 <lv_draw_label>
            if(size.y > lv_obj_get_height(label)) {
 800eada:	ae0d      	add	r6, sp, #52	; 0x34
 800eadc:	2202      	movs	r2, #2
 800eade:	5eb3      	ldrsh	r3, [r6, r2]
 800eae0:	9807      	ldr	r0, [sp, #28]
 800eae2:	930b      	str	r3, [sp, #44]	; 0x2c
 800eae4:	f7fa fa9d 	bl	8009022 <lv_obj_get_height>
 800eae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eaea:	4283      	cmp	r3, r0
 800eaec:	dd18      	ble.n	800eb20 <lv_label_design+0x1d8>
                ofs.x = ext->offset.x;
 800eaee:	896b      	ldrh	r3, [r5, #10]
 800eaf0:	aa10      	add	r2, sp, #64	; 0x40
 800eaf2:	8013      	strh	r3, [r2, #0]
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
 800eaf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eaf6:	8871      	ldrh	r1, [r6, #2]
 800eaf8:	7a1b      	ldrb	r3, [r3, #8]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 800eafa:	a80e      	add	r0, sp, #56	; 0x38
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
 800eafc:	185b      	adds	r3, r3, r1
 800eafe:	89a9      	ldrh	r1, [r5, #12]
 800eb00:	185b      	adds	r3, r3, r1
 800eb02:	8053      	strh	r3, [r2, #2]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 800eb04:	2300      	movs	r3, #0
 800eb06:	9305      	str	r3, [sp, #20]
 800eb08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb0a:	9202      	str	r2, [sp, #8]
 800eb0c:	9304      	str	r3, [sp, #16]
 800eb0e:	9303      	str	r3, [sp, #12]
 800eb10:	9701      	str	r7, [sp, #4]
 800eb12:	682b      	ldr	r3, [r5, #0]
 800eb14:	0022      	movs	r2, r4
 800eb16:	9300      	str	r3, [sp, #0]
 800eb18:	9908      	ldr	r1, [sp, #32]
 800eb1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb1c:	f7fb feba 	bl	800a894 <lv_draw_label>
 800eb20:	2001      	movs	r0, #1
}
 800eb22:	b013      	add	sp, #76	; 0x4c
 800eb24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb26:	46c0      	nop			; (mov r8, r8)
 800eb28:	00007c18 	.word	0x00007c18
 800eb2c:	0000ffff 	.word	0x0000ffff

0800eb30 <lv_label_set_align>:
{
 800eb30:	b570      	push	{r4, r5, r6, lr}
 800eb32:	0004      	movs	r4, r0
 800eb34:	000d      	movs	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800eb36:	f7fa fb41 	bl	80091bc <lv_obj_get_ext_attr>
    if(ext->align == align) return;
 800eb3a:	7c03      	ldrb	r3, [r0, #16]
 800eb3c:	069a      	lsls	r2, r3, #26
 800eb3e:	0f92      	lsrs	r2, r2, #30
 800eb40:	42aa      	cmp	r2, r5
 800eb42:	d009      	beq.n	800eb58 <lv_label_set_align+0x28>
    ext->align = align;
 800eb44:	2203      	movs	r2, #3
 800eb46:	4015      	ands	r5, r2
 800eb48:	322d      	adds	r2, #45	; 0x2d
 800eb4a:	012d      	lsls	r5, r5, #4
 800eb4c:	4393      	bics	r3, r2
 800eb4e:	432b      	orrs	r3, r5
 800eb50:	7403      	strb	r3, [r0, #16]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
 800eb52:	0020      	movs	r0, r4
 800eb54:	f7f9 fdb6 	bl	80086c4 <lv_obj_invalidate>
}
 800eb58:	bd70      	pop	{r4, r5, r6, pc}

0800eb5a <lv_label_set_body_draw>:
{
 800eb5a:	b570      	push	{r4, r5, r6, lr}
 800eb5c:	0004      	movs	r4, r0
 800eb5e:	000d      	movs	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800eb60:	f7fa fb2c 	bl	80091bc <lv_obj_get_ext_attr>
    if(ext->body_draw == en) return;
 800eb64:	7c43      	ldrb	r3, [r0, #17]
 800eb66:	07da      	lsls	r2, r3, #31
 800eb68:	0fd2      	lsrs	r2, r2, #31
 800eb6a:	42aa      	cmp	r2, r5
 800eb6c:	d00a      	beq.n	800eb84 <lv_label_set_body_draw+0x2a>
    ext->body_draw = en == false ? 0 : 1;
 800eb6e:	2201      	movs	r2, #1
 800eb70:	4015      	ands	r5, r2
 800eb72:	4393      	bics	r3, r2
 800eb74:	432b      	orrs	r3, r5
 800eb76:	7443      	strb	r3, [r0, #17]
    lv_obj_refresh_ext_draw_pad(label);
 800eb78:	0020      	movs	r0, r4
 800eb7a:	f7fa fa03 	bl	8008f84 <lv_obj_refresh_ext_draw_pad>
    lv_obj_invalidate(label);
 800eb7e:	0020      	movs	r0, r4
 800eb80:	f7f9 fda0 	bl	80086c4 <lv_obj_invalidate>
}
 800eb84:	bd70      	pop	{r4, r5, r6, pc}

0800eb86 <lv_label_get_text>:
{
 800eb86:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800eb88:	f7fa fb18 	bl	80091bc <lv_obj_get_ext_attr>
    return ext->text;
 800eb8c:	6800      	ldr	r0, [r0, #0]
}
 800eb8e:	bd10      	pop	{r4, pc}

0800eb90 <lv_label_get_long_mode>:
{
 800eb90:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800eb92:	f7fa fb13 	bl	80091bc <lv_obj_get_ext_attr>
    return ext->long_mode;
 800eb96:	7c00      	ldrb	r0, [r0, #16]
 800eb98:	0740      	lsls	r0, r0, #29
 800eb9a:	0f40      	lsrs	r0, r0, #29
}
 800eb9c:	bd10      	pop	{r4, pc}

0800eb9e <lv_label_get_align>:
{
 800eb9e:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800eba0:	f7fa fb0c 	bl	80091bc <lv_obj_get_ext_attr>
    return ext->align;
 800eba4:	7c00      	ldrb	r0, [r0, #16]
 800eba6:	0680      	lsls	r0, r0, #26
 800eba8:	0f80      	lsrs	r0, r0, #30
}
 800ebaa:	bd10      	pop	{r4, pc}

0800ebac <lv_label_get_recolor>:
{
 800ebac:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800ebae:	f7fa fb05 	bl	80091bc <lv_obj_get_ext_attr>
    return ext->recolor == 0 ? false : true;
 800ebb2:	7c00      	ldrb	r0, [r0, #16]
 800ebb4:	0640      	lsls	r0, r0, #25
 800ebb6:	0fc0      	lsrs	r0, r0, #31
}
 800ebb8:	bd10      	pop	{r4, pc}

0800ebba <lv_label_get_body_draw>:
{
 800ebba:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800ebbc:	f7fa fafe 	bl	80091bc <lv_obj_get_ext_attr>
    return ext->body_draw == 0 ? false : true;
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	7c40      	ldrb	r0, [r0, #17]
 800ebc4:	4018      	ands	r0, r3
}
 800ebc6:	bd10      	pop	{r4, pc}

0800ebc8 <lv_label_get_letter_on>:
{
 800ebc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebca:	b08f      	sub	sp, #60	; 0x3c
 800ebcc:	0005      	movs	r5, r0
 800ebce:	910b      	str	r1, [sp, #44]	; 0x2c
    const char * txt         = lv_label_get_text(label);
 800ebd0:	f7ff ffd9 	bl	800eb86 <lv_label_get_text>
 800ebd4:	9005      	str	r0, [sp, #20]
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
 800ebd6:	0028      	movs	r0, r5
 800ebd8:	f7fa faf0 	bl	80091bc <lv_obj_get_ext_attr>
 800ebdc:	9008      	str	r0, [sp, #32]
    lv_coord_t max_w         = lv_obj_get_width(label);
 800ebde:	0028      	movs	r0, r5
 800ebe0:	f7fa fa19 	bl	8009016 <lv_obj_get_width>
 800ebe4:	9009      	str	r0, [sp, #36]	; 0x24
    const lv_style_t * style = lv_obj_get_style(label);
 800ebe6:	0028      	movs	r0, r5
 800ebe8:	f7fa fa22 	bl	8009030 <lv_obj_get_style>
    const lv_font_t * font   = style->text.font;
 800ebec:	6a43      	ldr	r3, [r0, #36]	; 0x24
    const lv_style_t * style = lv_obj_get_style(label);
 800ebee:	9006      	str	r0, [sp, #24]
    const lv_font_t * font   = style->text.font;
 800ebf0:	9307      	str	r3, [sp, #28]
 800ebf2:	7a1b      	ldrb	r3, [r3, #8]
 800ebf4:	930a      	str	r3, [sp, #40]	; 0x28
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 800ebf6:	9b08      	ldr	r3, [sp, #32]
 800ebf8:	7c1b      	ldrb	r3, [r3, #16]
 800ebfa:	065a      	lsls	r2, r3, #25
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
 800ebfc:	0fd2      	lsrs	r2, r2, #31
 800ebfe:	9203      	str	r2, [sp, #12]
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800ec00:	b25a      	sxtb	r2, r3
 800ec02:	2a00      	cmp	r2, #0
 800ec04:	da03      	bge.n	800ec0e <lv_label_get_letter_on+0x46>
 800ec06:	2202      	movs	r2, #2
 800ec08:	9903      	ldr	r1, [sp, #12]
 800ec0a:	4311      	orrs	r1, r2
 800ec0c:	9103      	str	r1, [sp, #12]
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 800ec0e:	2230      	movs	r2, #48	; 0x30
 800ec10:	401a      	ands	r2, r3
 800ec12:	2a10      	cmp	r2, #16
 800ec14:	d103      	bne.n	800ec1e <lv_label_get_letter_on+0x56>
 800ec16:	9903      	ldr	r1, [sp, #12]
 800ec18:	3a0c      	subs	r2, #12
 800ec1a:	4311      	orrs	r1, r2
 800ec1c:	9103      	str	r1, [sp, #12]
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 800ec1e:	075b      	lsls	r3, r3, #29
 800ec20:	d101      	bne.n	800ec26 <lv_label_get_letter_on+0x5e>
        max_w = LV_COORD_MAX;
 800ec22:	4b45      	ldr	r3, [pc, #276]	; (800ed38 <lv_label_get_letter_on+0x170>)
 800ec24:	9309      	str	r3, [sp, #36]	; 0x24
 800ec26:	2600      	movs	r6, #0
 800ec28:	0034      	movs	r4, r6
    while(txt[line_start] != '\0') {
 800ec2a:	9b05      	ldr	r3, [sp, #20]
 800ec2c:	191f      	adds	r7, r3, r4
 800ec2e:	783b      	ldrb	r3, [r7, #0]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d154      	bne.n	800ecde <lv_label_get_letter_on+0x116>
 800ec34:	9404      	str	r4, [sp, #16]
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 800ec36:	2230      	movs	r2, #48	; 0x30
 800ec38:	9b08      	ldr	r3, [sp, #32]
    lv_coord_t x = 0;
 800ec3a:	2600      	movs	r6, #0
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 800ec3c:	7c1b      	ldrb	r3, [r3, #16]
 800ec3e:	4013      	ands	r3, r2
 800ec40:	2b10      	cmp	r3, #16
 800ec42:	d117      	bne.n	800ec74 <lv_label_get_letter_on+0xac>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, style->text.letter_space, flag);
 800ec44:	9b06      	ldr	r3, [sp, #24]
 800ec46:	0038      	movs	r0, r7
 800ec48:	2228      	movs	r2, #40	; 0x28
 800ec4a:	5e9b      	ldrsh	r3, [r3, r2]
 800ec4c:	9a04      	ldr	r2, [sp, #16]
 800ec4e:	1b11      	subs	r1, r2, r4
 800ec50:	9a03      	ldr	r2, [sp, #12]
 800ec52:	b289      	uxth	r1, r1
 800ec54:	9200      	str	r2, [sp, #0]
 800ec56:	9a07      	ldr	r2, [sp, #28]
 800ec58:	f7ff fd26 	bl	800e6a8 <lv_txt_get_width>
 800ec5c:	0007      	movs	r7, r0
        x += lv_obj_get_width(label) / 2 - line_w / 2;
 800ec5e:	0028      	movs	r0, r5
 800ec60:	f7fa f9d9 	bl	8009016 <lv_obj_get_width>
 800ec64:	0fc6      	lsrs	r6, r0, #31
 800ec66:	1830      	adds	r0, r6, r0
 800ec68:	0ffe      	lsrs	r6, r7, #31
 800ec6a:	19f6      	adds	r6, r6, r7
 800ec6c:	1040      	asrs	r0, r0, #1
 800ec6e:	1076      	asrs	r6, r6, #1
 800ec70:	1b86      	subs	r6, r0, r6
 800ec72:	b236      	sxth	r6, r6
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800ec74:	230b      	movs	r3, #11
 800ec76:	2200      	movs	r2, #0
 800ec78:	a90a      	add	r1, sp, #40	; 0x28
 800ec7a:	185b      	adds	r3, r3, r1
 800ec7c:	701a      	strb	r2, [r3, #0]
    if(new_line_start > 0) {
 800ec7e:	9b04      	ldr	r3, [sp, #16]
    uint32_t i         = line_start;
 800ec80:	940d      	str	r4, [sp, #52]	; 0x34
    if(new_line_start > 0) {
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d023      	beq.n	800ecce <lv_label_get_letter_on+0x106>
        while(i <= new_line_start - 1) {
 800ec86:	9b04      	ldr	r3, [sp, #16]
 800ec88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ec8a:	3b01      	subs	r3, #1
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d31e      	bcc.n	800ecce <lv_label_get_letter_on+0x106>
            letter = lv_txt_encoded_next(txt, &i);
 800ec90:	4d2a      	ldr	r5, [pc, #168]	; (800ed3c <lv_label_get_letter_on+0x174>)
 800ec92:	a90d      	add	r1, sp, #52	; 0x34
 800ec94:	682b      	ldr	r3, [r5, #0]
 800ec96:	9805      	ldr	r0, [sp, #20]
 800ec98:	4798      	blx	r3
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800ec9a:	9b05      	ldr	r3, [sp, #20]
 800ec9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
            letter = lv_txt_encoded_next(txt, &i);
 800ec9e:	0007      	movs	r7, r0
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800eca0:	2100      	movs	r1, #0
 800eca2:	1898      	adds	r0, r3, r2
 800eca4:	682b      	ldr	r3, [r5, #0]
 800eca6:	4798      	blx	r3
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800eca8:	2201      	movs	r2, #1
 800ecaa:	9b03      	ldr	r3, [sp, #12]
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800ecac:	0005      	movs	r5, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800ecae:	4213      	tst	r3, r2
 800ecb0:	d130      	bne.n	800ed14 <lv_label_get_letter_on+0x14c>
            x += lv_font_get_glyph_width(font, letter, letter_next);
 800ecb2:	002a      	movs	r2, r5
 800ecb4:	0039      	movs	r1, r7
 800ecb6:	9807      	ldr	r0, [sp, #28]
 800ecb8:	f7fe fae6 	bl	800d288 <lv_font_get_glyph_width>
            if(pos->x < x) {
 800ecbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            x += lv_font_get_glyph_width(font, letter, letter_next);
 800ecbe:	1986      	adds	r6, r0, r6
 800ecc0:	b2b6      	uxth	r6, r6
            if(pos->x < x) {
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	5e9a      	ldrsh	r2, [r3, r2]
 800ecc6:	b233      	sxth	r3, r6
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	da2e      	bge.n	800ed2a <lv_label_get_letter_on+0x162>
                i = i_current;
 800eccc:	940d      	str	r4, [sp, #52]	; 0x34
    return lv_encoded_get_char_id(txt, i);
 800ecce:	4b1c      	ldr	r3, [pc, #112]	; (800ed40 <lv_label_get_letter_on+0x178>)
 800ecd0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	9805      	ldr	r0, [sp, #20]
 800ecd6:	4798      	blx	r3
 800ecd8:	b280      	uxth	r0, r0
}
 800ecda:	b00f      	add	sp, #60	; 0x3c
 800ecdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 800ecde:	9b06      	ldr	r3, [sp, #24]
 800ece0:	9907      	ldr	r1, [sp, #28]
 800ece2:	2228      	movs	r2, #40	; 0x28
 800ece4:	5e9a      	ldrsh	r2, [r3, r2]
 800ece6:	9b03      	ldr	r3, [sp, #12]
 800ece8:	0038      	movs	r0, r7
 800ecea:	9300      	str	r3, [sp, #0]
 800ecec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecee:	f7ff fc55 	bl	800e59c <lv_txt_get_next_line>
 800ecf2:	1903      	adds	r3, r0, r4
 800ecf4:	9304      	str	r3, [sp, #16]
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 800ecf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ecf8:	2202      	movs	r2, #2
 800ecfa:	5e9a      	ldrsh	r2, [r3, r2]
 800ecfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecfe:	18f3      	adds	r3, r6, r3
 800ed00:	429a      	cmp	r2, r3
 800ed02:	dd98      	ble.n	800ec36 <lv_label_get_letter_on+0x6e>
        y += letter_height + style->text.line_space;
 800ed04:	9b06      	ldr	r3, [sp, #24]
 800ed06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 800ed0a:	9c04      	ldr	r4, [sp, #16]
        y += letter_height + style->text.line_space;
 800ed0c:	189b      	adds	r3, r3, r2
 800ed0e:	199e      	adds	r6, r3, r6
 800ed10:	b236      	sxth	r6, r6
 800ed12:	e78a      	b.n	800ec2a <lv_label_get_letter_on+0x62>
                if(lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 800ed14:	200b      	movs	r0, #11
 800ed16:	9b05      	ldr	r3, [sp, #20]
 800ed18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ed1a:	5c99      	ldrb	r1, [r3, r2]
 800ed1c:	ab0a      	add	r3, sp, #40	; 0x28
 800ed1e:	18c0      	adds	r0, r0, r3
 800ed20:	f7ff fc22 	bl	800e568 <lv_txt_is_cmd>
 800ed24:	2800      	cmp	r0, #0
 800ed26:	d1ae      	bne.n	800ec86 <lv_label_get_letter_on+0xbe>
 800ed28:	e7c3      	b.n	800ecb2 <lv_label_get_letter_on+0xea>
            x += style->text.letter_space;
 800ed2a:	9b06      	ldr	r3, [sp, #24]
            i_current = i;
 800ed2c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
            x += style->text.letter_space;
 800ed2e:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 800ed30:	1836      	adds	r6, r6, r0
 800ed32:	b236      	sxth	r6, r6
 800ed34:	e7a7      	b.n	800ec86 <lv_label_get_letter_on+0xbe>
 800ed36:	46c0      	nop			; (mov r8, r8)
 800ed38:	00007c18 	.word	0x00007c18
 800ed3c:	20000048 	.word	0x20000048
 800ed40:	20000040 	.word	0x20000040

0800ed44 <lv_label_refr_text>:
{
 800ed44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed46:	b095      	sub	sp, #84	; 0x54
 800ed48:	9005      	str	r0, [sp, #20]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800ed4a:	f7fa fa37 	bl	80091bc <lv_obj_get_ext_attr>
    if(ext->text == NULL) return;
 800ed4e:	6803      	ldr	r3, [r0, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800ed50:	0005      	movs	r5, r0
    if(ext->text == NULL) return;
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d030      	beq.n	800edb8 <lv_label_refr_text+0x74>
    lv_coord_t max_w         = lv_obj_get_width(label);
 800ed56:	9805      	ldr	r0, [sp, #20]
 800ed58:	f7fa f95d 	bl	8009016 <lv_obj_get_width>
 800ed5c:	0004      	movs	r4, r0
    const lv_style_t * style = lv_obj_get_style(label);
 800ed5e:	9805      	ldr	r0, [sp, #20]
 800ed60:	f7fa f966 	bl	8009030 <lv_obj_get_style>
    const lv_font_t * font   = style->text.font;
 800ed64:	6a43      	ldr	r3, [r0, #36]	; 0x24
    const lv_style_t * style = lv_obj_get_style(label);
 800ed66:	0007      	movs	r7, r0
    const lv_font_t * font   = style->text.font;
 800ed68:	9306      	str	r3, [sp, #24]
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 800ed6a:	7c2b      	ldrb	r3, [r5, #16]
 800ed6c:	075a      	lsls	r2, r3, #29
 800ed6e:	d100      	bne.n	800ed72 <lv_label_refr_text+0x2e>
        max_w = LV_COORD_MAX;
 800ed70:	4cbd      	ldr	r4, [pc, #756]	; (800f068 <lv_label_refr_text+0x324>)
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 800ed72:	065a      	lsls	r2, r3, #25
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800ed74:	b25b      	sxtb	r3, r3
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 800ed76:	0fd2      	lsrs	r2, r2, #31
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	da01      	bge.n	800ed80 <lv_label_refr_text+0x3c>
 800ed7c:	2302      	movs	r3, #2
 800ed7e:	431a      	orrs	r2, r3
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 800ed80:	2128      	movs	r1, #40	; 0x28
 800ed82:	5e7b      	ldrsh	r3, [r7, r1]
 800ed84:	9401      	str	r4, [sp, #4]
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 800ed86:	2407      	movs	r4, #7
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 800ed88:	9202      	str	r2, [sp, #8]
 800ed8a:	212a      	movs	r1, #42	; 0x2a
 800ed8c:	5e7a      	ldrsh	r2, [r7, r1]
 800ed8e:	a809      	add	r0, sp, #36	; 0x24
 800ed90:	9200      	str	r2, [sp, #0]
 800ed92:	6829      	ldr	r1, [r5, #0]
 800ed94:	9a06      	ldr	r2, [sp, #24]
 800ed96:	f7ff fcd1 	bl	800e73c <lv_txt_get_size>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 800ed9a:	7c28      	ldrb	r0, [r5, #16]
 800ed9c:	4004      	ands	r4, r0
 800ed9e:	d10d      	bne.n	800edbc <lv_label_refr_text+0x78>
        lv_obj_set_size(label, size.x, size.y);
 800eda0:	ab04      	add	r3, sp, #16
 800eda2:	2216      	movs	r2, #22
 800eda4:	5e9a      	ldrsh	r2, [r3, r2]
 800eda6:	ab04      	add	r3, sp, #16
 800eda8:	2114      	movs	r1, #20
 800edaa:	5e59      	ldrsh	r1, [r3, r1]
 800edac:	9805      	ldr	r0, [sp, #20]
 800edae:	f7fa f887 	bl	8008ec0 <lv_obj_set_size>
    lv_obj_invalidate(label);
 800edb2:	9805      	ldr	r0, [sp, #20]
 800edb4:	f7f9 fc86 	bl	80086c4 <lv_obj_invalidate>
}
 800edb8:	b015      	add	sp, #84	; 0x54
 800edba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
 800edbc:	2c03      	cmp	r4, #3
 800edbe:	d174      	bne.n	800eeaa <lv_label_refr_text+0x166>
        anim.repeat   = 1;
 800edc0:	221d      	movs	r2, #29
        anim.var      = label;
 800edc2:	9b05      	ldr	r3, [sp, #20]
 800edc4:	ae0b      	add	r6, sp, #44	; 0x2c
 800edc6:	930b      	str	r3, [sp, #44]	; 0x2c
        anim.repeat   = 1;
 800edc8:	ab04      	add	r3, sp, #16
 800edca:	18d2      	adds	r2, r2, r3
        anim.playback = 1;
 800edcc:	2302      	movs	r3, #2
        anim.repeat   = 1;
 800edce:	7fd1      	ldrb	r1, [r2, #31]
        anim.playback = 1;
 800edd0:	430b      	orrs	r3, r1
 800edd2:	2101      	movs	r1, #1
 800edd4:	430b      	orrs	r3, r1
 800edd6:	77d3      	strb	r3, [r2, #31]
        anim.start    = 0;
 800edd8:	2300      	movs	r3, #0
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800edda:	2220      	movs	r2, #32
        anim.start    = 0;
 800eddc:	6133      	str	r3, [r6, #16]
        anim.ready_cb = NULL;
 800edde:	60f3      	str	r3, [r6, #12]
        anim.path_cb  = lv_anim_path_linear;
 800ede0:	4ba2      	ldr	r3, [pc, #648]	; (800f06c <lv_label_refr_text+0x328>)
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800ede2:	0011      	movs	r1, r2
 800ede4:	6a78      	ldr	r0, [r7, #36]	; 0x24
        anim.path_cb  = lv_anim_path_linear;
 800ede6:	60b3      	str	r3, [r6, #8]
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800ede8:	f7fe fa4e 	bl	800d288 <lv_font_get_glyph_width>
 800edec:	2228      	movs	r2, #40	; 0x28
 800edee:	5ebb      	ldrsh	r3, [r7, r2]
             ext->anim_speed) *
 800edf0:	89e9      	ldrh	r1, [r5, #14]
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800edf2:	181b      	adds	r3, r3, r0
 800edf4:	20fa      	movs	r0, #250	; 0xfa
 800edf6:	0080      	lsls	r0, r0, #2
 800edf8:	4358      	muls	r0, r3
 800edfa:	f7f1 fa3b 	bl	8000274 <__divsi3>
        anim.playback_pause =
 800edfe:	4360      	muls	r0, r4
 800ee00:	b280      	uxth	r0, r0
 800ee02:	83b0      	strh	r0, [r6, #28]
        anim.repeat_pause = anim.playback_pause;
 800ee04:	83f0      	strh	r0, [r6, #30]
        anim.act_time     = -anim.playback_pause;
 800ee06:	4240      	negs	r0, r0
 800ee08:	8370      	strh	r0, [r6, #26]
        if(size.x > lv_obj_get_width(label)) {
 800ee0a:	ab04      	add	r3, sp, #16
 800ee0c:	9805      	ldr	r0, [sp, #20]
 800ee0e:	2714      	movs	r7, #20
 800ee10:	5fdf      	ldrsh	r7, [r3, r7]
 800ee12:	f7fa f900 	bl	8009016 <lv_obj_get_width>
 800ee16:	4c96      	ldr	r4, [pc, #600]	; (800f070 <lv_label_refr_text+0x32c>)
 800ee18:	4287      	cmp	r7, r0
 800ee1a:	dd37      	ble.n	800ee8c <lv_label_refr_text+0x148>
            anim.end     = lv_obj_get_width(label) - size.x;
 800ee1c:	9805      	ldr	r0, [sp, #20]
 800ee1e:	f7fa f8fa 	bl	8009016 <lv_obj_get_width>
 800ee22:	ab04      	add	r3, sp, #16
 800ee24:	2214      	movs	r2, #20
 800ee26:	5e9a      	ldrsh	r2, [r3, r2]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 800ee28:	6074      	str	r4, [r6, #4]
            anim.end     = lv_obj_get_width(label) - size.x;
 800ee2a:	1a82      	subs	r2, r0, r2
 800ee2c:	6172      	str	r2, [r6, #20]
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800ee2e:	2310      	movs	r3, #16
 800ee30:	5ef1      	ldrsh	r1, [r6, r3]
 800ee32:	b212      	sxth	r2, r2
 800ee34:	89e8      	ldrh	r0, [r5, #14]
 800ee36:	f7fe fd4f 	bl	800d8d8 <lv_anim_speed_to_time>
 800ee3a:	8330      	strh	r0, [r6, #24]
            lv_anim_create(&anim);
 800ee3c:	0030      	movs	r0, r6
 800ee3e:	f7fe fd25 	bl	800d88c <lv_anim_create>
            hor_anim = true;
 800ee42:	2401      	movs	r4, #1
        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 800ee44:	ab04      	add	r3, sp, #16
 800ee46:	2216      	movs	r2, #22
 800ee48:	5e9b      	ldrsh	r3, [r3, r2]
 800ee4a:	9805      	ldr	r0, [sp, #20]
 800ee4c:	9307      	str	r3, [sp, #28]
 800ee4e:	f7fa f8e8 	bl	8009022 <lv_obj_get_height>
 800ee52:	9b07      	ldr	r3, [sp, #28]
 800ee54:	4f87      	ldr	r7, [pc, #540]	; (800f074 <lv_label_refr_text+0x330>)
 800ee56:	4283      	cmp	r3, r0
 800ee58:	dd20      	ble.n	800ee9c <lv_label_refr_text+0x158>
 800ee5a:	2c00      	cmp	r4, #0
 800ee5c:	d11e      	bne.n	800ee9c <lv_label_refr_text+0x158>
            anim.end     = lv_obj_get_height(label) - size.y - (lv_font_get_line_height(font));
 800ee5e:	9805      	ldr	r0, [sp, #20]
 800ee60:	f7fa f8df 	bl	8009022 <lv_obj_get_height>
 800ee64:	ab04      	add	r3, sp, #16
 800ee66:	2216      	movs	r2, #22
 800ee68:	5e9a      	ldrsh	r2, [r3, r2]
 800ee6a:	9b06      	ldr	r3, [sp, #24]
 800ee6c:	1a82      	subs	r2, r0, r2
 800ee6e:	7a18      	ldrb	r0, [r3, #8]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 800ee70:	6077      	str	r7, [r6, #4]
            anim.end     = lv_obj_get_height(label) - size.y - (lv_font_get_line_height(font));
 800ee72:	1a12      	subs	r2, r2, r0
 800ee74:	6172      	str	r2, [r6, #20]
            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800ee76:	2310      	movs	r3, #16
 800ee78:	5ef1      	ldrsh	r1, [r6, r3]
 800ee7a:	b212      	sxth	r2, r2
 800ee7c:	89e8      	ldrh	r0, [r5, #14]
 800ee7e:	f7fe fd2b 	bl	800d8d8 <lv_anim_speed_to_time>
 800ee82:	8330      	strh	r0, [r6, #24]
            lv_anim_create(&anim);
 800ee84:	0030      	movs	r0, r6
            lv_anim_create(&anim);
 800ee86:	f7fe fd01 	bl	800d88c <lv_anim_create>
 800ee8a:	e792      	b.n	800edb2 <lv_label_refr_text+0x6e>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 800ee8c:	0021      	movs	r1, r4
 800ee8e:	9805      	ldr	r0, [sp, #20]
 800ee90:	f7fe fcd0 	bl	800d834 <lv_anim_del>
            ext->offset.x = 0;
 800ee94:	2300      	movs	r3, #0
        bool hor_anim = false;
 800ee96:	2400      	movs	r4, #0
            ext->offset.x = 0;
 800ee98:	816b      	strh	r3, [r5, #10]
 800ee9a:	e7d3      	b.n	800ee44 <lv_label_refr_text+0x100>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 800ee9c:	0039      	movs	r1, r7
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 800ee9e:	9805      	ldr	r0, [sp, #20]
 800eea0:	f7fe fcc8 	bl	800d834 <lv_anim_del>
            ext->offset.y = 0;
 800eea4:	2300      	movs	r3, #0
 800eea6:	81ab      	strh	r3, [r5, #12]
 800eea8:	e783      	b.n	800edb2 <lv_label_refr_text+0x6e>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 800eeaa:	2c04      	cmp	r4, #4
 800eeac:	d168      	bne.n	800ef80 <lv_label_refr_text+0x23c>
        anim.repeat   = 1;
 800eeae:	221d      	movs	r2, #29
        anim.var      = label;
 800eeb0:	9b05      	ldr	r3, [sp, #20]
        anim.start    = 0;
 800eeb2:	2600      	movs	r6, #0
        anim.var      = label;
 800eeb4:	930b      	str	r3, [sp, #44]	; 0x2c
        anim.repeat   = 1;
 800eeb6:	ab04      	add	r3, sp, #16
 800eeb8:	18d2      	adds	r2, r2, r3
        anim.playback = 0;
 800eeba:	2302      	movs	r3, #2
        anim.repeat   = 1;
 800eebc:	7fd1      	ldrb	r1, [r2, #31]
        anim.var      = label;
 800eebe:	ac0b      	add	r4, sp, #44	; 0x2c
        anim.playback = 0;
 800eec0:	430b      	orrs	r3, r1
 800eec2:	2101      	movs	r1, #1
 800eec4:	438b      	bics	r3, r1
 800eec6:	77d3      	strb	r3, [r2, #31]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800eec8:	2220      	movs	r2, #32
 800eeca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eecc:	0011      	movs	r1, r2
        anim.start    = 0;
 800eece:	6126      	str	r6, [r4, #16]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800eed0:	f7fe f9da 	bl	800d288 <lv_font_get_glyph_width>
 800eed4:	2228      	movs	r2, #40	; 0x28
 800eed6:	5ebb      	ldrsh	r3, [r7, r2]
                          ext->anim_speed) *
 800eed8:	89e9      	ldrh	r1, [r5, #14]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800eeda:	181b      	adds	r3, r3, r0
 800eedc:	4866      	ldr	r0, [pc, #408]	; (800f078 <lv_label_refr_text+0x334>)
 800eede:	4358      	muls	r0, r3
 800eee0:	f7f1 f9c8 	bl	8000274 <__divsi3>
 800eee4:	2303      	movs	r3, #3
 800eee6:	4358      	muls	r0, r3
        anim.path_cb        = lv_anim_path_linear;
 800eee8:	4b60      	ldr	r3, [pc, #384]	; (800f06c <lv_label_refr_text+0x328>)
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800eeea:	8360      	strh	r0, [r4, #26]
        anim.path_cb        = lv_anim_path_linear;
 800eeec:	60a3      	str	r3, [r4, #8]
        if(size.x > lv_obj_get_width(label)) {
 800eeee:	9805      	ldr	r0, [sp, #20]
 800eef0:	ab04      	add	r3, sp, #16
 800eef2:	2714      	movs	r7, #20
 800eef4:	5fdf      	ldrsh	r7, [r3, r7]
        anim.ready_cb       = NULL;
 800eef6:	60e6      	str	r6, [r4, #12]
        anim.playback_pause = 0;
 800eef8:	83a6      	strh	r6, [r4, #28]
        anim.repeat_pause   = 0;
 800eefa:	83e6      	strh	r6, [r4, #30]
        if(size.x > lv_obj_get_width(label)) {
 800eefc:	f7fa f88b 	bl	8009016 <lv_obj_get_width>
 800ef00:	4287      	cmp	r7, r0
 800ef02:	dd36      	ble.n	800ef72 <lv_label_refr_text+0x22e>
            anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800ef04:	2220      	movs	r2, #32
 800ef06:	9806      	ldr	r0, [sp, #24]
 800ef08:	0011      	movs	r1, r2
 800ef0a:	f7fe f9bd 	bl	800d288 <lv_font_get_glyph_width>
 800ef0e:	ab04      	add	r3, sp, #16
 800ef10:	0082      	lsls	r2, r0, #2
 800ef12:	1a80      	subs	r0, r0, r2
 800ef14:	2214      	movs	r2, #20
 800ef16:	5e9a      	ldrsh	r2, [r3, r2]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 800ef18:	4b55      	ldr	r3, [pc, #340]	; (800f070 <lv_label_refr_text+0x32c>)
            anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800ef1a:	1a82      	subs	r2, r0, r2
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 800ef1c:	6063      	str	r3, [r4, #4]
            anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800ef1e:	6162      	str	r2, [r4, #20]
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800ef20:	2310      	movs	r3, #16
 800ef22:	5ee1      	ldrsh	r1, [r4, r3]
 800ef24:	b212      	sxth	r2, r2
 800ef26:	89e8      	ldrh	r0, [r5, #14]
 800ef28:	f7fe fcd6 	bl	800d8d8 <lv_anim_speed_to_time>
 800ef2c:	8320      	strh	r0, [r4, #24]
            lv_anim_create(&anim);
 800ef2e:	0020      	movs	r0, r4
 800ef30:	f7fe fcac 	bl	800d88c <lv_anim_create>
            hor_anim = true;
 800ef34:	2701      	movs	r7, #1
        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 800ef36:	ae09      	add	r6, sp, #36	; 0x24
 800ef38:	2202      	movs	r2, #2
 800ef3a:	5eb3      	ldrsh	r3, [r6, r2]
 800ef3c:	9805      	ldr	r0, [sp, #20]
 800ef3e:	9307      	str	r3, [sp, #28]
 800ef40:	f7fa f86f 	bl	8009022 <lv_obj_get_height>
 800ef44:	9b07      	ldr	r3, [sp, #28]
 800ef46:	494b      	ldr	r1, [pc, #300]	; (800f074 <lv_label_refr_text+0x330>)
 800ef48:	4283      	cmp	r3, r0
 800ef4a:	dda8      	ble.n	800ee9e <lv_label_refr_text+0x15a>
 800ef4c:	2f00      	cmp	r7, #0
 800ef4e:	d1a6      	bne.n	800ee9e <lv_label_refr_text+0x15a>
            anim.end     = -size.y - (lv_font_get_line_height(font));
 800ef50:	2302      	movs	r3, #2
 800ef52:	5ef2      	ldrsh	r2, [r6, r3]
 800ef54:	9b06      	ldr	r3, [sp, #24]
 800ef56:	4252      	negs	r2, r2
 800ef58:	7a1b      	ldrb	r3, [r3, #8]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 800ef5a:	6061      	str	r1, [r4, #4]
            anim.end     = -size.y - (lv_font_get_line_height(font));
 800ef5c:	1ad2      	subs	r2, r2, r3
 800ef5e:	6162      	str	r2, [r4, #20]
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800ef60:	2310      	movs	r3, #16
 800ef62:	5ee1      	ldrsh	r1, [r4, r3]
 800ef64:	b212      	sxth	r2, r2
 800ef66:	89e8      	ldrh	r0, [r5, #14]
 800ef68:	f7fe fcb6 	bl	800d8d8 <lv_anim_speed_to_time>
 800ef6c:	8320      	strh	r0, [r4, #24]
            lv_anim_create(&anim);
 800ef6e:	0020      	movs	r0, r4
 800ef70:	e789      	b.n	800ee86 <lv_label_refr_text+0x142>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 800ef72:	493f      	ldr	r1, [pc, #252]	; (800f070 <lv_label_refr_text+0x32c>)
 800ef74:	9805      	ldr	r0, [sp, #20]
 800ef76:	f7fe fc5d 	bl	800d834 <lv_anim_del>
        bool hor_anim = false;
 800ef7a:	0037      	movs	r7, r6
            ext->offset.x = 0;
 800ef7c:	816e      	strh	r6, [r5, #10]
 800ef7e:	e7da      	b.n	800ef36 <lv_label_refr_text+0x1f2>
    } else if(ext->long_mode == LV_LABEL_LONG_DOT) {
 800ef80:	2c02      	cmp	r4, #2
 800ef82:	d166      	bne.n	800f052 <lv_label_refr_text+0x30e>
        if(size.y <= lv_obj_get_height(label)) { /*No dots are required, the text is short enough*/
 800ef84:	ab04      	add	r3, sp, #16
 800ef86:	9805      	ldr	r0, [sp, #20]
 800ef88:	2416      	movs	r4, #22
 800ef8a:	5f1c      	ldrsh	r4, [r3, r4]
 800ef8c:	f7fa f849 	bl	8009022 <lv_obj_get_height>
 800ef90:	4284      	cmp	r4, r0
 800ef92:	dc03      	bgt.n	800ef9c <lv_label_refr_text+0x258>
            ext->dot_end = LV_LABEL_DOT_END_INV;
 800ef94:	2301      	movs	r3, #1
 800ef96:	425b      	negs	r3, r3
 800ef98:	812b      	strh	r3, [r5, #8]
 800ef9a:	e70a      	b.n	800edb2 <lv_label_refr_text+0x6e>
        } else if(lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) { /*Don't turn to dots all the characters*/
 800ef9c:	4b37      	ldr	r3, [pc, #220]	; (800f07c <lv_label_refr_text+0x338>)
 800ef9e:	6828      	ldr	r0, [r5, #0]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	4798      	blx	r3
 800efa4:	2803      	cmp	r0, #3
 800efa6:	d9f5      	bls.n	800ef94 <lv_label_refr_text+0x250>
            p.x = lv_obj_get_width(label) -
 800efa8:	9805      	ldr	r0, [sp, #20]
 800efaa:	f7fa f834 	bl	8009016 <lv_obj_get_width>
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 800efae:	222e      	movs	r2, #46	; 0x2e
            p.x = lv_obj_get_width(label) -
 800efb0:	0004      	movs	r4, r0
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 800efb2:	0011      	movs	r1, r2
 800efb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800efb6:	f7fe f967 	bl	800d288 <lv_font_get_glyph_width>
 800efba:	2228      	movs	r2, #40	; 0x28
 800efbc:	5ebb      	ldrsh	r3, [r7, r2]
 800efbe:	1818      	adds	r0, r3, r0
            p.x = lv_obj_get_width(label) -
 800efc0:	0083      	lsls	r3, r0, #2
 800efc2:	1ac0      	subs	r0, r0, r3
 800efc4:	1904      	adds	r4, r0, r4
 800efc6:	ab04      	add	r3, sp, #16
            p.y = lv_obj_get_height(label);
 800efc8:	9805      	ldr	r0, [sp, #20]
            p.x = lv_obj_get_width(label) -
 800efca:	831c      	strh	r4, [r3, #24]
            p.y = lv_obj_get_height(label);
 800efcc:	f7fa f829 	bl	8009022 <lv_obj_get_height>
                   (lv_font_get_line_height(style->text.font) + style->text.line_space); /*Round down to the last line*/
 800efd0:	232a      	movs	r3, #42	; 0x2a
 800efd2:	5efe      	ldrsh	r6, [r7, r3]
 800efd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
            p.y = lv_obj_get_height(label);
 800efd6:	0004      	movs	r4, r0
                   (lv_font_get_line_height(style->text.font) + style->text.line_space); /*Round down to the last line*/
 800efd8:	7a19      	ldrb	r1, [r3, #8]
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 800efda:	2704      	movs	r7, #4
                   (lv_font_get_line_height(style->text.font) + style->text.line_space); /*Round down to the last line*/
 800efdc:	1989      	adds	r1, r1, r6
            p.y -= p.y %
 800efde:	f7f1 fa2f 	bl	8000440 <__aeabi_idivmod>
 800efe2:	1a64      	subs	r4, r4, r1
            p.y -= style->text.line_space;                                               /*Trim the last line space*/
 800efe4:	1ba6      	subs	r6, r4, r6
 800efe6:	ab04      	add	r3, sp, #16
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 800efe8:	a90a      	add	r1, sp, #40	; 0x28
 800efea:	9805      	ldr	r0, [sp, #20]
            p.y -= style->text.line_space;                                               /*Trim the last line space*/
 800efec:	835e      	strh	r6, [r3, #26]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 800efee:	f7ff fdeb 	bl	800ebc8 <lv_label_get_letter_on>
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 800eff2:	4b23      	ldr	r3, [pc, #140]	; (800f080 <lv_label_refr_text+0x33c>)
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 800eff4:	9006      	str	r0, [sp, #24]
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 800eff6:	0001      	movs	r1, r0
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	6828      	ldr	r0, [r5, #0]
 800effc:	4798      	blx	r3
            uint8_t len          = 0;
 800effe:	2600      	movs	r6, #0
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 800f000:	0004      	movs	r4, r0
 800f002:	900b      	str	r0, [sp, #44]	; 0x2c
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 800f004:	682b      	ldr	r3, [r5, #0]
 800f006:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f008:	3f01      	subs	r7, #1
 800f00a:	1898      	adds	r0, r3, r2
 800f00c:	4b1d      	ldr	r3, [pc, #116]	; (800f084 <lv_label_refr_text+0x340>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	4798      	blx	r3
 800f012:	1983      	adds	r3, r0, r6
 800f014:	b2de      	uxtb	r6, r3
                lv_txt_encoded_next(ext->text, &byte_id);
 800f016:	4b1c      	ldr	r3, [pc, #112]	; (800f088 <lv_label_refr_text+0x344>)
 800f018:	a90b      	add	r1, sp, #44	; 0x2c
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	6828      	ldr	r0, [r5, #0]
 800f01e:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 800f020:	2f00      	cmp	r7, #0
 800f022:	d1ef      	bne.n	800f004 <lv_label_refr_text+0x2c0>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
 800f024:	682b      	ldr	r3, [r5, #0]
 800f026:	b2b2      	uxth	r2, r6
 800f028:	1919      	adds	r1, r3, r4
 800f02a:	9805      	ldr	r0, [sp, #20]
 800f02c:	f7ff fc62 	bl	800e8f4 <lv_label_set_dot_tmp>
 800f030:	2800      	cmp	r0, #0
 800f032:	d100      	bne.n	800f036 <lv_label_refr_text+0x2f2>
 800f034:	e6bd      	b.n	800edb2 <lv_label_refr_text+0x6e>
                    ext->text[byte_id_ori + i] = '.';
 800f036:	222e      	movs	r2, #46	; 0x2e
 800f038:	1ce3      	adds	r3, r4, #3
 800f03a:	6829      	ldr	r1, [r5, #0]
 800f03c:	550a      	strb	r2, [r1, r4]
 800f03e:	3401      	adds	r4, #1
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 800f040:	42a3      	cmp	r3, r4
 800f042:	d1fa      	bne.n	800f03a <lv_label_refr_text+0x2f6>
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 800f044:	2200      	movs	r2, #0
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 800f046:	9e06      	ldr	r6, [sp, #24]
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 800f048:	6829      	ldr	r1, [r5, #0]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 800f04a:	3603      	adds	r6, #3
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 800f04c:	54ca      	strb	r2, [r1, r3]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 800f04e:	812e      	strh	r6, [r5, #8]
 800f050:	e6af      	b.n	800edb2 <lv_label_refr_text+0x6e>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
 800f052:	2c01      	cmp	r4, #1
 800f054:	d000      	beq.n	800f058 <lv_label_refr_text+0x314>
 800f056:	e6ac      	b.n	800edb2 <lv_label_refr_text+0x6e>
        lv_obj_set_height(label, size.y);
 800f058:	ab04      	add	r3, sp, #16
 800f05a:	2116      	movs	r1, #22
 800f05c:	5e59      	ldrsh	r1, [r3, r1]
 800f05e:	9805      	ldr	r0, [sp, #20]
 800f060:	f7f9 ff79 	bl	8008f56 <lv_obj_set_height>
 800f064:	e6a5      	b.n	800edb2 <lv_label_refr_text+0x6e>
 800f066:	46c0      	nop			; (mov r8, r8)
 800f068:	00007c18 	.word	0x00007c18
 800f06c:	0800d6cd 	.word	0x0800d6cd
 800f070:	0800e8e1 	.word	0x0800e8e1
 800f074:	0800e8cd 	.word	0x0800e8cd
 800f078:	fffffc18 	.word	0xfffffc18
 800f07c:	20000054 	.word	0x20000054
 800f080:	20000044 	.word	0x20000044
 800f084:	20000050 	.word	0x20000050
 800f088:	20000048 	.word	0x20000048

0800f08c <lv_label_signal>:
    res = ancestor_signal(label, sign, param);
 800f08c:	4b3a      	ldr	r3, [pc, #232]	; (800f178 <lv_label_signal+0xec>)
{
 800f08e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    res = ancestor_signal(label, sign, param);
 800f090:	681b      	ldr	r3, [r3, #0]
{
 800f092:	0004      	movs	r4, r0
 800f094:	000e      	movs	r6, r1
 800f096:	0015      	movs	r5, r2
    res = ancestor_signal(label, sign, param);
 800f098:	4798      	blx	r3
 800f09a:	9001      	str	r0, [sp, #4]
    if(res != LV_RES_OK) return res;
 800f09c:	2801      	cmp	r0, #1
 800f09e:	d110      	bne.n	800f0c2 <lv_label_signal+0x36>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800f0a0:	0020      	movs	r0, r4
 800f0a2:	f7fa f88b 	bl	80091bc <lv_obj_get_ext_attr>
 800f0a6:	0007      	movs	r7, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 800f0a8:	2e00      	cmp	r6, #0
 800f0aa:	d10c      	bne.n	800f0c6 <lv_label_signal+0x3a>
        if(ext->static_txt == 0) {
 800f0ac:	2308      	movs	r3, #8
 800f0ae:	7c05      	ldrb	r5, [r0, #16]
 800f0b0:	401d      	ands	r5, r3
 800f0b2:	d103      	bne.n	800f0bc <lv_label_signal+0x30>
            lv_mem_free(ext->text);
 800f0b4:	6800      	ldr	r0, [r0, #0]
 800f0b6:	f7fe ffc3 	bl	800e040 <lv_mem_free>
            ext->text = NULL;
 800f0ba:	603d      	str	r5, [r7, #0]
        lv_label_dot_tmp_free(label);
 800f0bc:	0020      	movs	r0, r4
 800f0be:	f7ff fbbb 	bl	800e838 <lv_label_dot_tmp_free>
}
 800f0c2:	9801      	ldr	r0, [sp, #4]
 800f0c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 800f0c6:	2e04      	cmp	r6, #4
 800f0c8:	d106      	bne.n	800f0d8 <lv_label_signal+0x4c>
        lv_label_revert_dots(label);
 800f0ca:	0020      	movs	r0, r4
 800f0cc:	f7ff fbc8 	bl	800e860 <lv_label_revert_dots>
        lv_label_refr_text(label);
 800f0d0:	0020      	movs	r0, r4
 800f0d2:	f7ff fe37 	bl	800ed44 <lv_label_refr_text>
 800f0d6:	e7f4      	b.n	800f0c2 <lv_label_signal+0x36>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 800f0d8:	2e02      	cmp	r6, #2
 800f0da:	d118      	bne.n	800f10e <lv_label_signal+0x82>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 800f0dc:	8aa2      	ldrh	r2, [r4, #20]
 800f0de:	8a23      	ldrh	r3, [r4, #16]
 800f0e0:	3201      	adds	r2, #1
 800f0e2:	1ad2      	subs	r2, r2, r3
 800f0e4:	88ab      	ldrh	r3, [r5, #4]
 800f0e6:	8829      	ldrh	r1, [r5, #0]
 800f0e8:	3301      	adds	r3, #1
 800f0ea:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
 800f0ec:	b292      	uxth	r2, r2
 800f0ee:	b29b      	uxth	r3, r3
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	d1ea      	bne.n	800f0ca <lv_label_signal+0x3e>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 800f0f4:	8ae2      	ldrh	r2, [r4, #22]
 800f0f6:	8a63      	ldrh	r3, [r4, #18]
 800f0f8:	3201      	adds	r2, #1
 800f0fa:	1ad2      	subs	r2, r2, r3
 800f0fc:	88eb      	ldrh	r3, [r5, #6]
 800f0fe:	8869      	ldrh	r1, [r5, #2]
 800f100:	3301      	adds	r3, #1
 800f102:	1a5b      	subs	r3, r3, r1
 800f104:	b292      	uxth	r2, r2
 800f106:	b29b      	uxth	r3, r3
 800f108:	429a      	cmp	r2, r3
 800f10a:	d1de      	bne.n	800f0ca <lv_label_signal+0x3e>
 800f10c:	e7d9      	b.n	800f0c2 <lv_label_signal+0x36>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 800f10e:	2e05      	cmp	r6, #5
 800f110:	d122      	bne.n	800f158 <lv_label_signal+0xcc>
        if(ext->body_draw) {
 800f112:	7c43      	ldrb	r3, [r0, #17]
 800f114:	9a01      	ldr	r2, [sp, #4]
 800f116:	421a      	tst	r2, r3
 800f118:	d0d3      	beq.n	800f0c2 <lv_label_signal+0x36>
 * @return pointer to the label's style
 */
static inline const lv_style_t * lv_label_get_style(const lv_obj_t * label, lv_label_style_t type)
{
    (void)type; /*Unused*/
    return lv_obj_get_style(label);
 800f11a:	0020      	movs	r0, r4
 800f11c:	f7f9 ff88 	bl	8009030 <lv_obj_get_style>
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.right);
 800f120:	8b42      	ldrh	r2, [r0, #26]
 800f122:	8b81      	ldrh	r1, [r0, #28]
 800f124:	1c13      	adds	r3, r2, #0
 800f126:	b20d      	sxth	r5, r1
 800f128:	b212      	sxth	r2, r2
 800f12a:	42aa      	cmp	r2, r5
 800f12c:	da00      	bge.n	800f130 <lv_label_signal+0xa4>
 800f12e:	1c0b      	adds	r3, r1, #0
 800f130:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 800f132:	b21d      	sxth	r5, r3
 800f134:	b211      	sxth	r1, r2
 800f136:	428d      	cmp	r5, r1
 800f138:	da00      	bge.n	800f13c <lv_label_signal+0xb0>
 800f13a:	1c13      	adds	r3, r2, #0
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.top);
 800f13c:	8ac2      	ldrh	r2, [r0, #22]
 800f13e:	b21d      	sxth	r5, r3
 800f140:	b211      	sxth	r1, r2
 800f142:	428d      	cmp	r5, r1
 800f144:	da00      	bge.n	800f148 <lv_label_signal+0xbc>
 800f146:	1c13      	adds	r3, r2, #0
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.bottom);
 800f148:	8b02      	ldrh	r2, [r0, #24]
 800f14a:	b218      	sxth	r0, r3
 800f14c:	b211      	sxth	r1, r2
 800f14e:	4288      	cmp	r0, r1
 800f150:	da00      	bge.n	800f154 <lv_label_signal+0xc8>
 800f152:	1c13      	adds	r3, r2, #0
 800f154:	86a3      	strh	r3, [r4, #52]	; 0x34
 800f156:	e7b4      	b.n	800f0c2 <lv_label_signal+0x36>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800f158:	2e06      	cmp	r6, #6
 800f15a:	d1b2      	bne.n	800f0c2 <lv_label_signal+0x36>
 800f15c:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 800f15e:	0099      	lsls	r1, r3, #2
 800f160:	5869      	ldr	r1, [r5, r1]
 800f162:	b2da      	uxtb	r2, r3
 800f164:	2900      	cmp	r1, #0
 800f166:	d003      	beq.n	800f170 <lv_label_signal+0xe4>
 800f168:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 800f16a:	2b07      	cmp	r3, #7
 800f16c:	d1f7      	bne.n	800f15e <lv_label_signal+0xd2>
 800f16e:	001a      	movs	r2, r3
        buf->type[i] = "lv_label";
 800f170:	4b02      	ldr	r3, [pc, #8]	; (800f17c <lv_label_signal+0xf0>)
 800f172:	0092      	lsls	r2, r2, #2
 800f174:	5153      	str	r3, [r2, r5]
 800f176:	e7a4      	b.n	800f0c2 <lv_label_signal+0x36>
 800f178:	200046a8 	.word	0x200046a8
 800f17c:	08015715 	.word	0x08015715

0800f180 <lv_label_set_text>:
{
 800f180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f182:	0007      	movs	r7, r0
 800f184:	000d      	movs	r5, r1
    lv_obj_invalidate(label);
 800f186:	f7f9 fa9d 	bl	80086c4 <lv_obj_invalidate>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800f18a:	0038      	movs	r0, r7
 800f18c:	f7fa f816 	bl	80091bc <lv_obj_get_ext_attr>
 800f190:	0004      	movs	r4, r0
    if(text == NULL) {
 800f192:	2d00      	cmp	r5, #0
 800f194:	d103      	bne.n	800f19e <lv_label_set_text+0x1e>
        lv_label_refr_text(label);
 800f196:	0038      	movs	r0, r7
 800f198:	f7ff fdd4 	bl	800ed44 <lv_label_refr_text>
}
 800f19c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    if(ext->text == text) {
 800f19e:	6803      	ldr	r3, [r0, #0]
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 800f1a0:	0028      	movs	r0, r5
    if(ext->text == text) {
 800f1a2:	9300      	str	r3, [sp, #0]
 800f1a4:	429d      	cmp	r5, r3
 800f1a6:	d109      	bne.n	800f1bc <lv_label_set_text+0x3c>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 800f1a8:	f7f0 ffb4 	bl	8000114 <strlen>
 800f1ac:	1c41      	adds	r1, r0, #1
 800f1ae:	0028      	movs	r0, r5
 800f1b0:	f7fe ff70 	bl	800e094 <lv_mem_realloc>
 800f1b4:	6020      	str	r0, [r4, #0]
        lv_mem_assert(ext->text);
 800f1b6:	2800      	cmp	r0, #0
 800f1b8:	d1ed      	bne.n	800f196 <lv_label_set_text+0x16>
 800f1ba:	e7fe      	b.n	800f1ba <lv_label_set_text+0x3a>
        uint32_t len = strlen(text) + 1;
 800f1bc:	f7f0 ffaa 	bl	8000114 <strlen>
 800f1c0:	1c43      	adds	r3, r0, #1
 800f1c2:	9301      	str	r3, [sp, #4]
        if(ext->text != NULL && ext->static_txt == 0) {
 800f1c4:	9b00      	ldr	r3, [sp, #0]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d007      	beq.n	800f1da <lv_label_set_text+0x5a>
 800f1ca:	2308      	movs	r3, #8
 800f1cc:	7c26      	ldrb	r6, [r4, #16]
 800f1ce:	401e      	ands	r6, r3
 800f1d0:	d103      	bne.n	800f1da <lv_label_set_text+0x5a>
            lv_mem_free(ext->text);
 800f1d2:	9800      	ldr	r0, [sp, #0]
 800f1d4:	f7fe ff34 	bl	800e040 <lv_mem_free>
            ext->text = NULL;
 800f1d8:	6026      	str	r6, [r4, #0]
        ext->text = lv_mem_alloc(len);
 800f1da:	9801      	ldr	r0, [sp, #4]
 800f1dc:	f7fe fefc 	bl	800dfd8 <lv_mem_alloc>
 800f1e0:	6020      	str	r0, [r4, #0]
        lv_mem_assert(ext->text);
 800f1e2:	2800      	cmp	r0, #0
 800f1e4:	d100      	bne.n	800f1e8 <lv_label_set_text+0x68>
 800f1e6:	e7fe      	b.n	800f1e6 <lv_label_set_text+0x66>
        strcpy(ext->text, text);
 800f1e8:	0029      	movs	r1, r5
 800f1ea:	f000 fc01 	bl	800f9f0 <strcpy>
        ext->static_txt = 0; /*Now the text is dynamically allocated*/
 800f1ee:	2208      	movs	r2, #8
 800f1f0:	7c23      	ldrb	r3, [r4, #16]
 800f1f2:	4393      	bics	r3, r2
 800f1f4:	7423      	strb	r3, [r4, #16]
 800f1f6:	e7ce      	b.n	800f196 <lv_label_set_text+0x16>

0800f1f8 <lv_label_set_static_text>:
{
 800f1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1fa:	0006      	movs	r6, r0
 800f1fc:	000f      	movs	r7, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800f1fe:	f7f9 ffdd 	bl	80091bc <lv_obj_get_ext_attr>
    if(ext->static_txt == 0 && ext->text != NULL) {
 800f202:	2308      	movs	r3, #8
 800f204:	7c05      	ldrb	r5, [r0, #16]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800f206:	0004      	movs	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
 800f208:	401d      	ands	r5, r3
 800f20a:	d105      	bne.n	800f218 <lv_label_set_static_text+0x20>
 800f20c:	6800      	ldr	r0, [r0, #0]
 800f20e:	2800      	cmp	r0, #0
 800f210:	d002      	beq.n	800f218 <lv_label_set_static_text+0x20>
        lv_mem_free(ext->text);
 800f212:	f7fe ff15 	bl	800e040 <lv_mem_free>
        ext->text = NULL;
 800f216:	6025      	str	r5, [r4, #0]
    if(text != NULL) {
 800f218:	2f00      	cmp	r7, #0
 800f21a:	d004      	beq.n	800f226 <lv_label_set_static_text+0x2e>
        ext->static_txt = 1;
 800f21c:	2308      	movs	r3, #8
 800f21e:	7c22      	ldrb	r2, [r4, #16]
        ext->text       = (char *)text;
 800f220:	6027      	str	r7, [r4, #0]
        ext->static_txt = 1;
 800f222:	4313      	orrs	r3, r2
 800f224:	7423      	strb	r3, [r4, #16]
    lv_label_refr_text(label);
 800f226:	0030      	movs	r0, r6
 800f228:	f7ff fd8c 	bl	800ed44 <lv_label_refr_text>
}
 800f22c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f230 <lv_label_set_long_mode>:
{
 800f230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f232:	0005      	movs	r5, r0
 800f234:	000f      	movs	r7, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800f236:	f7f9 ffc1 	bl	80091bc <lv_obj_get_ext_attr>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
 800f23a:	491a      	ldr	r1, [pc, #104]	; (800f2a4 <lv_label_set_long_mode+0x74>)
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800f23c:	0004      	movs	r4, r0
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
 800f23e:	0028      	movs	r0, r5
 800f240:	f7fe faf8 	bl	800d834 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_y);
 800f244:	4918      	ldr	r1, [pc, #96]	; (800f2a8 <lv_label_set_long_mode+0x78>)
 800f246:	0028      	movs	r0, r5
 800f248:	f7fe faf4 	bl	800d834 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 800f24c:	4917      	ldr	r1, [pc, #92]	; (800f2ac <lv_label_set_long_mode+0x7c>)
 800f24e:	0028      	movs	r0, r5
 800f250:	f7fe faf0 	bl	800d834 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 800f254:	4916      	ldr	r1, [pc, #88]	; (800f2b0 <lv_label_set_long_mode+0x80>)
 800f256:	0028      	movs	r0, r5
 800f258:	f7fe faec 	bl	800d834 <lv_anim_del>
    ext->offset.x = 0;
 800f25c:	2300      	movs	r3, #0
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
 800f25e:	1efa      	subs	r2, r7, #3
    ext->offset.x = 0;
 800f260:	8163      	strh	r3, [r4, #10]
    ext->offset.y = 0;
 800f262:	81a3      	strh	r3, [r4, #12]
 800f264:	7c23      	ldrb	r3, [r4, #16]
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
 800f266:	2a02      	cmp	r2, #2
 800f268:	d818      	bhi.n	800f29c <lv_label_set_long_mode+0x6c>
        ext->expand = 1;
 800f26a:	2280      	movs	r2, #128	; 0x80
 800f26c:	4252      	negs	r2, r2
 800f26e:	4313      	orrs	r3, r2
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 800f270:	2607      	movs	r6, #7
        ext->expand = 0;
 800f272:	7423      	strb	r3, [r4, #16]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 800f274:	7c23      	ldrb	r3, [r4, #16]
 800f276:	4033      	ands	r3, r6
 800f278:	2b02      	cmp	r3, #2
 800f27a:	d106      	bne.n	800f28a <lv_label_set_long_mode+0x5a>
 800f27c:	8922      	ldrh	r2, [r4, #8]
 800f27e:	4b0d      	ldr	r3, [pc, #52]	; (800f2b4 <lv_label_set_long_mode+0x84>)
 800f280:	429a      	cmp	r2, r3
 800f282:	d002      	beq.n	800f28a <lv_label_set_long_mode+0x5a>
        lv_label_revert_dots(label);
 800f284:	0028      	movs	r0, r5
 800f286:	f7ff faeb 	bl	800e860 <lv_label_revert_dots>
    ext->long_mode = long_mode;
 800f28a:	7c21      	ldrb	r1, [r4, #16]
 800f28c:	4037      	ands	r7, r6
 800f28e:	43b1      	bics	r1, r6
 800f290:	4339      	orrs	r1, r7
    lv_label_refr_text(label);
 800f292:	0028      	movs	r0, r5
    ext->long_mode = long_mode;
 800f294:	7421      	strb	r1, [r4, #16]
    lv_label_refr_text(label);
 800f296:	f7ff fd55 	bl	800ed44 <lv_label_refr_text>
}
 800f29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->expand = 0;
 800f29c:	227f      	movs	r2, #127	; 0x7f
 800f29e:	4013      	ands	r3, r2
 800f2a0:	e7e6      	b.n	800f270 <lv_label_set_long_mode+0x40>
 800f2a2:	46c0      	nop			; (mov r8, r8)
 800f2a4:	0800881b 	.word	0x0800881b
 800f2a8:	0800882d 	.word	0x0800882d
 800f2ac:	0800e8e1 	.word	0x0800e8e1
 800f2b0:	0800e8cd 	.word	0x0800e8cd
 800f2b4:	0000ffff 	.word	0x0000ffff

0800f2b8 <lv_label_set_recolor>:
{
 800f2b8:	b570      	push	{r4, r5, r6, lr}
 800f2ba:	0004      	movs	r4, r0
 800f2bc:	000d      	movs	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800f2be:	f7f9 ff7d 	bl	80091bc <lv_obj_get_ext_attr>
    if(ext->recolor == en) return;
 800f2c2:	7c03      	ldrb	r3, [r0, #16]
 800f2c4:	065a      	lsls	r2, r3, #25
 800f2c6:	0fd2      	lsrs	r2, r2, #31
 800f2c8:	42aa      	cmp	r2, r5
 800f2ca:	d009      	beq.n	800f2e0 <lv_label_set_recolor+0x28>
    ext->recolor = en == false ? 0 : 1;
 800f2cc:	2201      	movs	r2, #1
 800f2ce:	4015      	ands	r5, r2
 800f2d0:	323f      	adds	r2, #63	; 0x3f
 800f2d2:	01ad      	lsls	r5, r5, #6
 800f2d4:	4393      	bics	r3, r2
 800f2d6:	432b      	orrs	r3, r5
 800f2d8:	7403      	strb	r3, [r0, #16]
    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
 800f2da:	0020      	movs	r0, r4
 800f2dc:	f7ff fd32 	bl	800ed44 <lv_label_refr_text>
}
 800f2e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f2e4 <lv_label_create>:
{
 800f2e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f2e6:	000e      	movs	r6, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
 800f2e8:	f7f9 fca2 	bl	8008c30 <lv_obj_create>
 800f2ec:	1e04      	subs	r4, r0, #0
    lv_mem_assert(new_label);
 800f2ee:	d100      	bne.n	800f2f2 <lv_label_create+0xe>
 800f2f0:	e7fe      	b.n	800f2f0 <lv_label_create+0xc>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
 800f2f2:	4d57      	ldr	r5, [pc, #348]	; (800f450 <lv_label_create+0x16c>)
 800f2f4:	682b      	ldr	r3, [r5, #0]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d102      	bne.n	800f300 <lv_label_create+0x1c>
 800f2fa:	f7f9 ff5d 	bl	80091b8 <lv_obj_get_signal_cb>
 800f2fe:	6028      	str	r0, [r5, #0]
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
 800f300:	2114      	movs	r1, #20
 800f302:	0020      	movs	r0, r4
 800f304:	f7f9 f9ae 	bl	8008664 <lv_obj_allocate_ext_attr>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
 800f308:	0020      	movs	r0, r4
 800f30a:	f7f9 ff57 	bl	80091bc <lv_obj_get_ext_attr>
 800f30e:	1e05      	subs	r5, r0, #0
    lv_mem_assert(ext);
 800f310:	d100      	bne.n	800f314 <lv_label_create+0x30>
 800f312:	e7fe      	b.n	800f312 <lv_label_create+0x2e>
    ext->text       = NULL;
 800f314:	2200      	movs	r2, #0
    ext->recolor    = 0;
 800f316:	2108      	movs	r1, #8
    ext->static_txt = 0;
 800f318:	7c03      	ldrb	r3, [r0, #16]
    ext->text       = NULL;
 800f31a:	6002      	str	r2, [r0, #0]
    ext->recolor    = 0;
 800f31c:	438b      	bics	r3, r1
    ext->body_draw  = 0;
 800f31e:	7c41      	ldrb	r1, [r0, #17]
    ext->dot_end    = LV_LABEL_DOT_END_INV;
 800f320:	2001      	movs	r0, #1
 800f322:	4240      	negs	r0, r0
 800f324:	8128      	strh	r0, [r5, #8]
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
 800f326:	3089      	adds	r0, #137	; 0x89
 800f328:	4003      	ands	r3, r0
 800f32a:	742b      	strb	r3, [r5, #16]
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 800f32c:	2319      	movs	r3, #25
 800f32e:	81eb      	strh	r3, [r5, #14]
    ext->dot_tmp_alloc = 0;
 800f330:	33e3      	adds	r3, #227	; 0xe3
 800f332:	400b      	ands	r3, r1
    lv_obj_set_design_cb(new_label, lv_label_design);
 800f334:	0020      	movs	r0, r4
 800f336:	4947      	ldr	r1, [pc, #284]	; (800f454 <lv_label_create+0x170>)
    ext->offset.x = 0;
 800f338:	816a      	strh	r2, [r5, #10]
    ext->offset.y = 0;
 800f33a:	81aa      	strh	r2, [r5, #12]
    ext->dot.tmp_ptr   = NULL;
 800f33c:	606a      	str	r2, [r5, #4]
    ext->dot_tmp_alloc = 0;
 800f33e:	746b      	strb	r3, [r5, #17]
    lv_obj_set_design_cb(new_label, lv_label_design);
 800f340:	f7f9 f98e 	bl	8008660 <lv_obj_set_design_cb>
    lv_obj_set_signal_cb(new_label, lv_label_signal);
 800f344:	4944      	ldr	r1, [pc, #272]	; (800f458 <lv_label_create+0x174>)
 800f346:	0020      	movs	r0, r4
 800f348:	f7f9 f988 	bl	800865c <lv_obj_set_signal_cb>
    if(copy == NULL) {
 800f34c:	2e00      	cmp	r6, #0
 800f34e:	d111      	bne.n	800f374 <lv_label_create+0x90>
        lv_obj_set_click(new_label, false);
 800f350:	0031      	movs	r1, r6
 800f352:	0020      	movs	r0, r4
 800f354:	f7f9 f924 	bl	80085a0 <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
 800f358:	0031      	movs	r1, r6
 800f35a:	0020      	movs	r0, r4
 800f35c:	f7ff ff68 	bl	800f230 <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
 800f360:	493e      	ldr	r1, [pc, #248]	; (800f45c <lv_label_create+0x178>)
 800f362:	0020      	movs	r0, r4
 800f364:	f7ff ff0c 	bl	800f180 <lv_label_set_text>
    lv_obj_set_style(label, style);
 800f368:	0031      	movs	r1, r6
 800f36a:	0020      	movs	r0, r4
 800f36c:	f7f9 fe41 	bl	8008ff2 <lv_obj_set_style>
}
 800f370:	0020      	movs	r0, r4
 800f372:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 800f374:	0030      	movs	r0, r6
 800f376:	f7f9 ff21 	bl	80091bc <lv_obj_get_ext_attr>
 800f37a:	0007      	movs	r7, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
 800f37c:	0030      	movs	r0, r6
 800f37e:	f7ff fc07 	bl	800eb90 <lv_label_get_long_mode>
 800f382:	0001      	movs	r1, r0
 800f384:	0020      	movs	r0, r4
 800f386:	f7ff ff53 	bl	800f230 <lv_label_set_long_mode>
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
 800f38a:	0030      	movs	r0, r6
 800f38c:	f7ff fc0e 	bl	800ebac <lv_label_get_recolor>
 800f390:	0001      	movs	r1, r0
 800f392:	0020      	movs	r0, r4
 800f394:	f7ff ff90 	bl	800f2b8 <lv_label_set_recolor>
        lv_label_set_body_draw(new_label, lv_label_get_body_draw(copy));
 800f398:	0030      	movs	r0, r6
 800f39a:	f7ff fc0e 	bl	800ebba <lv_label_get_body_draw>
 800f39e:	0001      	movs	r1, r0
 800f3a0:	0020      	movs	r0, r4
 800f3a2:	f7ff fbda 	bl	800eb5a <lv_label_set_body_draw>
        lv_label_set_align(new_label, lv_label_get_align(copy));
 800f3a6:	0030      	movs	r0, r6
 800f3a8:	f7ff fbf9 	bl	800eb9e <lv_label_get_align>
 800f3ac:	0001      	movs	r1, r0
 800f3ae:	0020      	movs	r0, r4
 800f3b0:	f7ff fbbe 	bl	800eb30 <lv_label_set_align>
        if(copy_ext->static_txt == 0)
 800f3b4:	2208      	movs	r2, #8
 800f3b6:	7c3b      	ldrb	r3, [r7, #16]
            lv_label_set_text(new_label, lv_label_get_text(copy));
 800f3b8:	0030      	movs	r0, r6
        if(copy_ext->static_txt == 0)
 800f3ba:	4213      	tst	r3, r2
 800f3bc:	d116      	bne.n	800f3ec <lv_label_create+0x108>
            lv_label_set_text(new_label, lv_label_get_text(copy));
 800f3be:	f7ff fbe2 	bl	800eb86 <lv_label_get_text>
 800f3c2:	0001      	movs	r1, r0
 800f3c4:	0020      	movs	r0, r4
 800f3c6:	f7ff fedb 	bl	800f180 <lv_label_set_text>
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
 800f3ca:	2207      	movs	r2, #7
 800f3cc:	7c3b      	ldrb	r3, [r7, #16]
 800f3ce:	4013      	ands	r3, r2
 800f3d0:	2b02      	cmp	r3, #2
 800f3d2:	d11c      	bne.n	800f40e <lv_label_create+0x12a>
            ext->text = lv_mem_realloc(ext->text, lv_mem_get_size(copy_ext->text));
 800f3d4:	6838      	ldr	r0, [r7, #0]
 800f3d6:	682e      	ldr	r6, [r5, #0]
 800f3d8:	f7fe fe26 	bl	800e028 <lv_mem_get_size>
 800f3dc:	0001      	movs	r1, r0
 800f3de:	0030      	movs	r0, r6
 800f3e0:	f7fe fe58 	bl	800e094 <lv_mem_realloc>
 800f3e4:	1e06      	subs	r6, r0, #0
 800f3e6:	6028      	str	r0, [r5, #0]
            lv_mem_assert(ext->text);
 800f3e8:	d107      	bne.n	800f3fa <lv_label_create+0x116>
 800f3ea:	e7fe      	b.n	800f3ea <lv_label_create+0x106>
            lv_label_set_static_text(new_label, lv_label_get_text(copy));
 800f3ec:	f7ff fbcb 	bl	800eb86 <lv_label_get_text>
 800f3f0:	0001      	movs	r1, r0
 800f3f2:	0020      	movs	r0, r4
 800f3f4:	f7ff ff00 	bl	800f1f8 <lv_label_set_static_text>
 800f3f8:	e7e7      	b.n	800f3ca <lv_label_create+0xe6>
            memcpy(ext->text, copy_ext->text, lv_mem_get_size(copy_ext->text));
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	0018      	movs	r0, r3
 800f3fe:	9301      	str	r3, [sp, #4]
 800f400:	f7fe fe12 	bl	800e028 <lv_mem_get_size>
 800f404:	9901      	ldr	r1, [sp, #4]
 800f406:	0002      	movs	r2, r0
 800f408:	0030      	movs	r0, r6
 800f40a:	f000 fa9b 	bl	800f944 <memcpy>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
 800f40e:	7c7b      	ldrb	r3, [r7, #17]
 800f410:	079b      	lsls	r3, r3, #30
 800f412:	d517      	bpl.n	800f444 <lv_label_create+0x160>
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	2800      	cmp	r0, #0
 800f418:	d014      	beq.n	800f444 <lv_label_create+0x160>
            int len = strlen(copy_ext->dot.tmp_ptr);
 800f41a:	f7f0 fe7b 	bl	8000114 <strlen>
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
 800f41e:	6869      	ldr	r1, [r5, #4]
 800f420:	b282      	uxth	r2, r0
 800f422:	0020      	movs	r0, r4
 800f424:	f7ff fa66 	bl	800e8f4 <lv_label_set_dot_tmp>
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
 800f428:	2202      	movs	r2, #2
 800f42a:	2102      	movs	r1, #2
 800f42c:	7c7b      	ldrb	r3, [r7, #17]
        lv_obj_refresh_style(new_label);
 800f42e:	0020      	movs	r0, r4
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
 800f430:	401a      	ands	r2, r3
 800f432:	7c6b      	ldrb	r3, [r5, #17]
 800f434:	438b      	bics	r3, r1
 800f436:	4313      	orrs	r3, r2
 800f438:	746b      	strb	r3, [r5, #17]
        ext->dot_end       = copy_ext->dot_end;
 800f43a:	893b      	ldrh	r3, [r7, #8]
 800f43c:	812b      	strh	r3, [r5, #8]
        lv_obj_refresh_style(new_label);
 800f43e:	f7f9 fd94 	bl	8008f6a <lv_obj_refresh_style>
 800f442:	e795      	b.n	800f370 <lv_label_create+0x8c>
            memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
 800f444:	1d28      	adds	r0, r5, #4
 800f446:	1d39      	adds	r1, r7, #4
 800f448:	2204      	movs	r2, #4
 800f44a:	f000 fa7b 	bl	800f944 <memcpy>
 800f44e:	e7eb      	b.n	800f428 <lv_label_create+0x144>
 800f450:	200046a8 	.word	0x200046a8
 800f454:	0800e949 	.word	0x0800e949
 800f458:	0800f08d 	.word	0x0800f08d
 800f45c:	08015710 	.word	0x08015710

0800f460 <lv_theme_get_current>:
 * @return pointer to the current system theme. NULL if not set.
 */
lv_theme_t * lv_theme_get_current(void)
{
#if LV_THEME_LIVE_UPDATE == 0
    return current_theme;
 800f460:	4b01      	ldr	r3, [pc, #4]	; (800f468 <lv_theme_get_current+0x8>)
 800f462:	6818      	ldr	r0, [r3, #0]
    if(!inited)
        return NULL;
    else
        return &current_theme;
#endif
}
 800f464:	4770      	bx	lr
 800f466:	46c0      	nop			; (mov r8, r8)
 800f468:	200046ac 	.word	0x200046ac

0800f46c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800f46c:	480d      	ldr	r0, [pc, #52]	; (800f4a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800f46e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800f470:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800f472:	e003      	b.n	800f47c <LoopCopyDataInit>

0800f474 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800f474:	4b0c      	ldr	r3, [pc, #48]	; (800f4a8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800f476:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800f478:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800f47a:	3104      	adds	r1, #4

0800f47c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800f47c:	480b      	ldr	r0, [pc, #44]	; (800f4ac <LoopForever+0xa>)
  ldr r3, =_edata
 800f47e:	4b0c      	ldr	r3, [pc, #48]	; (800f4b0 <LoopForever+0xe>)
  adds r2, r0, r1
 800f480:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800f482:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800f484:	d3f6      	bcc.n	800f474 <CopyDataInit>
  ldr r2, =_sbss
 800f486:	4a0b      	ldr	r2, [pc, #44]	; (800f4b4 <LoopForever+0x12>)
  b LoopFillZerobss
 800f488:	e002      	b.n	800f490 <LoopFillZerobss>

0800f48a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800f48a:	2300      	movs	r3, #0
  str  r3, [r2]
 800f48c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800f48e:	3204      	adds	r2, #4

0800f490 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800f490:	4b09      	ldr	r3, [pc, #36]	; (800f4b8 <LoopForever+0x16>)
  cmp r2, r3
 800f492:	429a      	cmp	r2, r3
  bcc FillZerobss
 800f494:	d3f9      	bcc.n	800f48a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800f496:	f7f4 fd9b 	bl	8003fd0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800f49a:	f000 f817 	bl	800f4cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800f49e:	f7f3 fa3b 	bl	8002918 <main>

0800f4a2 <LoopForever>:

LoopForever:
    b LoopForever
 800f4a2:	e7fe      	b.n	800f4a2 <LoopForever>
  ldr   r0, =_estack
 800f4a4:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 800f4a8:	08015998 	.word	0x08015998
  ldr r0, =_sdata
 800f4ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800f4b0:	200006c8 	.word	0x200006c8
  ldr r2, =_sbss
 800f4b4:	200006c8 	.word	0x200006c8
  ldr r3, = _ebss
 800f4b8:	20005528 	.word	0x20005528

0800f4bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800f4bc:	e7fe      	b.n	800f4bc <ADC1_IRQHandler>
	...

0800f4c0 <__errno>:
 800f4c0:	4b01      	ldr	r3, [pc, #4]	; (800f4c8 <__errno+0x8>)
 800f4c2:	6818      	ldr	r0, [r3, #0]
 800f4c4:	4770      	bx	lr
 800f4c6:	46c0      	nop			; (mov r8, r8)
 800f4c8:	20000058 	.word	0x20000058

0800f4cc <__libc_init_array>:
 800f4cc:	b570      	push	{r4, r5, r6, lr}
 800f4ce:	2600      	movs	r6, #0
 800f4d0:	4d0c      	ldr	r5, [pc, #48]	; (800f504 <__libc_init_array+0x38>)
 800f4d2:	4c0d      	ldr	r4, [pc, #52]	; (800f508 <__libc_init_array+0x3c>)
 800f4d4:	1b64      	subs	r4, r4, r5
 800f4d6:	10a4      	asrs	r4, r4, #2
 800f4d8:	42a6      	cmp	r6, r4
 800f4da:	d109      	bne.n	800f4f0 <__libc_init_array+0x24>
 800f4dc:	2600      	movs	r6, #0
 800f4de:	f002 ffcb 	bl	8012478 <_init>
 800f4e2:	4d0a      	ldr	r5, [pc, #40]	; (800f50c <__libc_init_array+0x40>)
 800f4e4:	4c0a      	ldr	r4, [pc, #40]	; (800f510 <__libc_init_array+0x44>)
 800f4e6:	1b64      	subs	r4, r4, r5
 800f4e8:	10a4      	asrs	r4, r4, #2
 800f4ea:	42a6      	cmp	r6, r4
 800f4ec:	d105      	bne.n	800f4fa <__libc_init_array+0x2e>
 800f4ee:	bd70      	pop	{r4, r5, r6, pc}
 800f4f0:	00b3      	lsls	r3, r6, #2
 800f4f2:	58eb      	ldr	r3, [r5, r3]
 800f4f4:	4798      	blx	r3
 800f4f6:	3601      	adds	r6, #1
 800f4f8:	e7ee      	b.n	800f4d8 <__libc_init_array+0xc>
 800f4fa:	00b3      	lsls	r3, r6, #2
 800f4fc:	58eb      	ldr	r3, [r5, r3]
 800f4fe:	4798      	blx	r3
 800f500:	3601      	adds	r6, #1
 800f502:	e7f2      	b.n	800f4ea <__libc_init_array+0x1e>
 800f504:	08015990 	.word	0x08015990
 800f508:	08015990 	.word	0x08015990
 800f50c:	08015990 	.word	0x08015990
 800f510:	08015994 	.word	0x08015994

0800f514 <malloc>:
 800f514:	b510      	push	{r4, lr}
 800f516:	4b03      	ldr	r3, [pc, #12]	; (800f524 <malloc+0x10>)
 800f518:	0001      	movs	r1, r0
 800f51a:	6818      	ldr	r0, [r3, #0]
 800f51c:	f000 f80e 	bl	800f53c <_malloc_r>
 800f520:	bd10      	pop	{r4, pc}
 800f522:	46c0      	nop			; (mov r8, r8)
 800f524:	20000058 	.word	0x20000058

0800f528 <free>:
 800f528:	b510      	push	{r4, lr}
 800f52a:	4b03      	ldr	r3, [pc, #12]	; (800f538 <free+0x10>)
 800f52c:	0001      	movs	r1, r0
 800f52e:	6818      	ldr	r0, [r3, #0]
 800f530:	f002 f99c 	bl	801186c <_free_r>
 800f534:	bd10      	pop	{r4, pc}
 800f536:	46c0      	nop			; (mov r8, r8)
 800f538:	20000058 	.word	0x20000058

0800f53c <_malloc_r>:
 800f53c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f53e:	000d      	movs	r5, r1
 800f540:	b085      	sub	sp, #20
 800f542:	350b      	adds	r5, #11
 800f544:	9001      	str	r0, [sp, #4]
 800f546:	2d16      	cmp	r5, #22
 800f548:	d908      	bls.n	800f55c <_malloc_r+0x20>
 800f54a:	2307      	movs	r3, #7
 800f54c:	439d      	bics	r5, r3
 800f54e:	d506      	bpl.n	800f55e <_malloc_r+0x22>
 800f550:	230c      	movs	r3, #12
 800f552:	9a01      	ldr	r2, [sp, #4]
 800f554:	6013      	str	r3, [r2, #0]
 800f556:	2000      	movs	r0, #0
 800f558:	b005      	add	sp, #20
 800f55a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f55c:	2510      	movs	r5, #16
 800f55e:	428d      	cmp	r5, r1
 800f560:	d3f6      	bcc.n	800f550 <_malloc_r+0x14>
 800f562:	9801      	ldr	r0, [sp, #4]
 800f564:	f000 fa00 	bl	800f968 <__malloc_lock>
 800f568:	23f8      	movs	r3, #248	; 0xf8
 800f56a:	33ff      	adds	r3, #255	; 0xff
 800f56c:	48ba      	ldr	r0, [pc, #744]	; (800f858 <_malloc_r+0x31c>)
 800f56e:	429d      	cmp	r5, r3
 800f570:	d81f      	bhi.n	800f5b2 <_malloc_r+0x76>
 800f572:	002a      	movs	r2, r5
 800f574:	3208      	adds	r2, #8
 800f576:	1882      	adds	r2, r0, r2
 800f578:	0011      	movs	r1, r2
 800f57a:	6854      	ldr	r4, [r2, #4]
 800f57c:	3908      	subs	r1, #8
 800f57e:	08eb      	lsrs	r3, r5, #3
 800f580:	428c      	cmp	r4, r1
 800f582:	d103      	bne.n	800f58c <_malloc_r+0x50>
 800f584:	68d4      	ldr	r4, [r2, #12]
 800f586:	3302      	adds	r3, #2
 800f588:	42a2      	cmp	r2, r4
 800f58a:	d029      	beq.n	800f5e0 <_malloc_r+0xa4>
 800f58c:	2303      	movs	r3, #3
 800f58e:	6862      	ldr	r2, [r4, #4]
 800f590:	68a1      	ldr	r1, [r4, #8]
 800f592:	439a      	bics	r2, r3
 800f594:	0013      	movs	r3, r2
 800f596:	68e2      	ldr	r2, [r4, #12]
 800f598:	18e3      	adds	r3, r4, r3
 800f59a:	60ca      	str	r2, [r1, #12]
 800f59c:	6091      	str	r1, [r2, #8]
 800f59e:	2201      	movs	r2, #1
 800f5a0:	6859      	ldr	r1, [r3, #4]
 800f5a2:	430a      	orrs	r2, r1
 800f5a4:	605a      	str	r2, [r3, #4]
 800f5a6:	9801      	ldr	r0, [sp, #4]
 800f5a8:	f000 f9e6 	bl	800f978 <__malloc_unlock>
 800f5ac:	0020      	movs	r0, r4
 800f5ae:	3008      	adds	r0, #8
 800f5b0:	e7d2      	b.n	800f558 <_malloc_r+0x1c>
 800f5b2:	0a6a      	lsrs	r2, r5, #9
 800f5b4:	233f      	movs	r3, #63	; 0x3f
 800f5b6:	2a00      	cmp	r2, #0
 800f5b8:	d003      	beq.n	800f5c2 <_malloc_r+0x86>
 800f5ba:	2a04      	cmp	r2, #4
 800f5bc:	d828      	bhi.n	800f610 <_malloc_r+0xd4>
 800f5be:	09ab      	lsrs	r3, r5, #6
 800f5c0:	3338      	adds	r3, #56	; 0x38
 800f5c2:	2203      	movs	r2, #3
 800f5c4:	4694      	mov	ip, r2
 800f5c6:	00d9      	lsls	r1, r3, #3
 800f5c8:	1809      	adds	r1, r1, r0
 800f5ca:	68cc      	ldr	r4, [r1, #12]
 800f5cc:	428c      	cmp	r4, r1
 800f5ce:	d006      	beq.n	800f5de <_malloc_r+0xa2>
 800f5d0:	4666      	mov	r6, ip
 800f5d2:	6862      	ldr	r2, [r4, #4]
 800f5d4:	43b2      	bics	r2, r6
 800f5d6:	1b57      	subs	r7, r2, r5
 800f5d8:	2f0f      	cmp	r7, #15
 800f5da:	dd31      	ble.n	800f640 <_malloc_r+0x104>
 800f5dc:	3b01      	subs	r3, #1
 800f5de:	3301      	adds	r3, #1
 800f5e0:	0001      	movs	r1, r0
 800f5e2:	6904      	ldr	r4, [r0, #16]
 800f5e4:	3108      	adds	r1, #8
 800f5e6:	428c      	cmp	r4, r1
 800f5e8:	d04e      	beq.n	800f688 <_malloc_r+0x14c>
 800f5ea:	2203      	movs	r2, #3
 800f5ec:	6866      	ldr	r6, [r4, #4]
 800f5ee:	4396      	bics	r6, r2
 800f5f0:	0032      	movs	r2, r6
 800f5f2:	1b76      	subs	r6, r6, r5
 800f5f4:	2e0f      	cmp	r6, #15
 800f5f6:	dd31      	ble.n	800f65c <_malloc_r+0x120>
 800f5f8:	2701      	movs	r7, #1
 800f5fa:	1963      	adds	r3, r4, r5
 800f5fc:	433d      	orrs	r5, r7
 800f5fe:	4337      	orrs	r7, r6
 800f600:	6065      	str	r5, [r4, #4]
 800f602:	6143      	str	r3, [r0, #20]
 800f604:	6103      	str	r3, [r0, #16]
 800f606:	60d9      	str	r1, [r3, #12]
 800f608:	6099      	str	r1, [r3, #8]
 800f60a:	605f      	str	r7, [r3, #4]
 800f60c:	50a6      	str	r6, [r4, r2]
 800f60e:	e7ca      	b.n	800f5a6 <_malloc_r+0x6a>
 800f610:	2a14      	cmp	r2, #20
 800f612:	d802      	bhi.n	800f61a <_malloc_r+0xde>
 800f614:	0013      	movs	r3, r2
 800f616:	335b      	adds	r3, #91	; 0x5b
 800f618:	e7d3      	b.n	800f5c2 <_malloc_r+0x86>
 800f61a:	2a54      	cmp	r2, #84	; 0x54
 800f61c:	d802      	bhi.n	800f624 <_malloc_r+0xe8>
 800f61e:	0b2b      	lsrs	r3, r5, #12
 800f620:	336e      	adds	r3, #110	; 0x6e
 800f622:	e7ce      	b.n	800f5c2 <_malloc_r+0x86>
 800f624:	23aa      	movs	r3, #170	; 0xaa
 800f626:	005b      	lsls	r3, r3, #1
 800f628:	429a      	cmp	r2, r3
 800f62a:	d802      	bhi.n	800f632 <_malloc_r+0xf6>
 800f62c:	0beb      	lsrs	r3, r5, #15
 800f62e:	3377      	adds	r3, #119	; 0x77
 800f630:	e7c7      	b.n	800f5c2 <_malloc_r+0x86>
 800f632:	498a      	ldr	r1, [pc, #552]	; (800f85c <_malloc_r+0x320>)
 800f634:	237e      	movs	r3, #126	; 0x7e
 800f636:	428a      	cmp	r2, r1
 800f638:	d8c3      	bhi.n	800f5c2 <_malloc_r+0x86>
 800f63a:	0cab      	lsrs	r3, r5, #18
 800f63c:	337c      	adds	r3, #124	; 0x7c
 800f63e:	e7c0      	b.n	800f5c2 <_malloc_r+0x86>
 800f640:	68e6      	ldr	r6, [r4, #12]
 800f642:	2f00      	cmp	r7, #0
 800f644:	db08      	blt.n	800f658 <_malloc_r+0x11c>
 800f646:	68a3      	ldr	r3, [r4, #8]
 800f648:	60de      	str	r6, [r3, #12]
 800f64a:	60b3      	str	r3, [r6, #8]
 800f64c:	2301      	movs	r3, #1
 800f64e:	18a2      	adds	r2, r4, r2
 800f650:	6851      	ldr	r1, [r2, #4]
 800f652:	430b      	orrs	r3, r1
 800f654:	6053      	str	r3, [r2, #4]
 800f656:	e7a6      	b.n	800f5a6 <_malloc_r+0x6a>
 800f658:	0034      	movs	r4, r6
 800f65a:	e7b7      	b.n	800f5cc <_malloc_r+0x90>
 800f65c:	6141      	str	r1, [r0, #20]
 800f65e:	6101      	str	r1, [r0, #16]
 800f660:	2e00      	cmp	r6, #0
 800f662:	daf3      	bge.n	800f64c <_malloc_r+0x110>
 800f664:	497e      	ldr	r1, [pc, #504]	; (800f860 <_malloc_r+0x324>)
 800f666:	428a      	cmp	r2, r1
 800f668:	d842      	bhi.n	800f6f0 <_malloc_r+0x1b4>
 800f66a:	08d2      	lsrs	r2, r2, #3
 800f66c:	39ff      	subs	r1, #255	; 0xff
 800f66e:	1096      	asrs	r6, r2, #2
 800f670:	39ff      	subs	r1, #255	; 0xff
 800f672:	40b1      	lsls	r1, r6
 800f674:	6846      	ldr	r6, [r0, #4]
 800f676:	00d2      	lsls	r2, r2, #3
 800f678:	4331      	orrs	r1, r6
 800f67a:	6041      	str	r1, [r0, #4]
 800f67c:	1810      	adds	r0, r2, r0
 800f67e:	6882      	ldr	r2, [r0, #8]
 800f680:	60e0      	str	r0, [r4, #12]
 800f682:	60a2      	str	r2, [r4, #8]
 800f684:	6084      	str	r4, [r0, #8]
 800f686:	60d4      	str	r4, [r2, #12]
 800f688:	2201      	movs	r2, #1
 800f68a:	1099      	asrs	r1, r3, #2
 800f68c:	408a      	lsls	r2, r1
 800f68e:	4972      	ldr	r1, [pc, #456]	; (800f858 <_malloc_r+0x31c>)
 800f690:	6848      	ldr	r0, [r1, #4]
 800f692:	4282      	cmp	r2, r0
 800f694:	d900      	bls.n	800f698 <_malloc_r+0x15c>
 800f696:	e097      	b.n	800f7c8 <_malloc_r+0x28c>
 800f698:	4210      	tst	r0, r2
 800f69a:	d105      	bne.n	800f6a8 <_malloc_r+0x16c>
 800f69c:	2403      	movs	r4, #3
 800f69e:	43a3      	bics	r3, r4
 800f6a0:	0052      	lsls	r2, r2, #1
 800f6a2:	3304      	adds	r3, #4
 800f6a4:	4210      	tst	r0, r2
 800f6a6:	d0fb      	beq.n	800f6a0 <_malloc_r+0x164>
 800f6a8:	469c      	mov	ip, r3
 800f6aa:	00d8      	lsls	r0, r3, #3
 800f6ac:	1808      	adds	r0, r1, r0
 800f6ae:	9002      	str	r0, [sp, #8]
 800f6b0:	9c02      	ldr	r4, [sp, #8]
 800f6b2:	68e4      	ldr	r4, [r4, #12]
 800f6b4:	9e02      	ldr	r6, [sp, #8]
 800f6b6:	42b4      	cmp	r4, r6
 800f6b8:	d158      	bne.n	800f76c <_malloc_r+0x230>
 800f6ba:	0034      	movs	r4, r6
 800f6bc:	3408      	adds	r4, #8
 800f6be:	9402      	str	r4, [sp, #8]
 800f6c0:	2401      	movs	r4, #1
 800f6c2:	44a4      	add	ip, r4
 800f6c4:	4664      	mov	r4, ip
 800f6c6:	2603      	movs	r6, #3
 800f6c8:	4234      	tst	r4, r6
 800f6ca:	d1f1      	bne.n	800f6b0 <_malloc_r+0x174>
 800f6cc:	2403      	movs	r4, #3
 800f6ce:	4223      	tst	r3, r4
 800f6d0:	d174      	bne.n	800f7bc <_malloc_r+0x280>
 800f6d2:	684b      	ldr	r3, [r1, #4]
 800f6d4:	4393      	bics	r3, r2
 800f6d6:	604b      	str	r3, [r1, #4]
 800f6d8:	6848      	ldr	r0, [r1, #4]
 800f6da:	0052      	lsls	r2, r2, #1
 800f6dc:	4282      	cmp	r2, r0
 800f6de:	d873      	bhi.n	800f7c8 <_malloc_r+0x28c>
 800f6e0:	2a00      	cmp	r2, #0
 800f6e2:	d071      	beq.n	800f7c8 <_malloc_r+0x28c>
 800f6e4:	4663      	mov	r3, ip
 800f6e6:	4210      	tst	r0, r2
 800f6e8:	d1de      	bne.n	800f6a8 <_malloc_r+0x16c>
 800f6ea:	3304      	adds	r3, #4
 800f6ec:	0052      	lsls	r2, r2, #1
 800f6ee:	e7fa      	b.n	800f6e6 <_malloc_r+0x1aa>
 800f6f0:	0a56      	lsrs	r6, r2, #9
 800f6f2:	2e04      	cmp	r6, #4
 800f6f4:	d816      	bhi.n	800f724 <_malloc_r+0x1e8>
 800f6f6:	0991      	lsrs	r1, r2, #6
 800f6f8:	3138      	adds	r1, #56	; 0x38
 800f6fa:	00cf      	lsls	r7, r1, #3
 800f6fc:	183e      	adds	r6, r7, r0
 800f6fe:	2703      	movs	r7, #3
 800f700:	9602      	str	r6, [sp, #8]
 800f702:	46bc      	mov	ip, r7
 800f704:	68b6      	ldr	r6, [r6, #8]
 800f706:	9f02      	ldr	r7, [sp, #8]
 800f708:	42b7      	cmp	r7, r6
 800f70a:	d127      	bne.n	800f75c <_malloc_r+0x220>
 800f70c:	2201      	movs	r2, #1
 800f70e:	1089      	asrs	r1, r1, #2
 800f710:	408a      	lsls	r2, r1
 800f712:	6841      	ldr	r1, [r0, #4]
 800f714:	430a      	orrs	r2, r1
 800f716:	6042      	str	r2, [r0, #4]
 800f718:	9a02      	ldr	r2, [sp, #8]
 800f71a:	60a6      	str	r6, [r4, #8]
 800f71c:	60e2      	str	r2, [r4, #12]
 800f71e:	6094      	str	r4, [r2, #8]
 800f720:	60f4      	str	r4, [r6, #12]
 800f722:	e7b1      	b.n	800f688 <_malloc_r+0x14c>
 800f724:	2e14      	cmp	r6, #20
 800f726:	d802      	bhi.n	800f72e <_malloc_r+0x1f2>
 800f728:	0031      	movs	r1, r6
 800f72a:	315b      	adds	r1, #91	; 0x5b
 800f72c:	e7e5      	b.n	800f6fa <_malloc_r+0x1be>
 800f72e:	2e54      	cmp	r6, #84	; 0x54
 800f730:	d802      	bhi.n	800f738 <_malloc_r+0x1fc>
 800f732:	0b11      	lsrs	r1, r2, #12
 800f734:	316e      	adds	r1, #110	; 0x6e
 800f736:	e7e0      	b.n	800f6fa <_malloc_r+0x1be>
 800f738:	21aa      	movs	r1, #170	; 0xaa
 800f73a:	0049      	lsls	r1, r1, #1
 800f73c:	428e      	cmp	r6, r1
 800f73e:	d802      	bhi.n	800f746 <_malloc_r+0x20a>
 800f740:	0bd1      	lsrs	r1, r2, #15
 800f742:	3177      	adds	r1, #119	; 0x77
 800f744:	e7d9      	b.n	800f6fa <_malloc_r+0x1be>
 800f746:	4f45      	ldr	r7, [pc, #276]	; (800f85c <_malloc_r+0x320>)
 800f748:	217e      	movs	r1, #126	; 0x7e
 800f74a:	42be      	cmp	r6, r7
 800f74c:	d8d5      	bhi.n	800f6fa <_malloc_r+0x1be>
 800f74e:	0c91      	lsrs	r1, r2, #18
 800f750:	317c      	adds	r1, #124	; 0x7c
 800f752:	e7d2      	b.n	800f6fa <_malloc_r+0x1be>
 800f754:	68b6      	ldr	r6, [r6, #8]
 800f756:	9902      	ldr	r1, [sp, #8]
 800f758:	42b1      	cmp	r1, r6
 800f75a:	d004      	beq.n	800f766 <_malloc_r+0x22a>
 800f75c:	4660      	mov	r0, ip
 800f75e:	6871      	ldr	r1, [r6, #4]
 800f760:	4381      	bics	r1, r0
 800f762:	428a      	cmp	r2, r1
 800f764:	d3f6      	bcc.n	800f754 <_malloc_r+0x218>
 800f766:	68f2      	ldr	r2, [r6, #12]
 800f768:	9202      	str	r2, [sp, #8]
 800f76a:	e7d5      	b.n	800f718 <_malloc_r+0x1dc>
 800f76c:	2603      	movs	r6, #3
 800f76e:	6867      	ldr	r7, [r4, #4]
 800f770:	43b7      	bics	r7, r6
 800f772:	9703      	str	r7, [sp, #12]
 800f774:	1b7e      	subs	r6, r7, r5
 800f776:	2e0f      	cmp	r6, #15
 800f778:	dd11      	ble.n	800f79e <_malloc_r+0x262>
 800f77a:	2201      	movs	r2, #1
 800f77c:	1963      	adds	r3, r4, r5
 800f77e:	4315      	orrs	r5, r2
 800f780:	6065      	str	r5, [r4, #4]
 800f782:	68e0      	ldr	r0, [r4, #12]
 800f784:	68a5      	ldr	r5, [r4, #8]
 800f786:	3108      	adds	r1, #8
 800f788:	60e8      	str	r0, [r5, #12]
 800f78a:	4332      	orrs	r2, r6
 800f78c:	6085      	str	r5, [r0, #8]
 800f78e:	60cb      	str	r3, [r1, #12]
 800f790:	608b      	str	r3, [r1, #8]
 800f792:	60d9      	str	r1, [r3, #12]
 800f794:	6099      	str	r1, [r3, #8]
 800f796:	605a      	str	r2, [r3, #4]
 800f798:	003b      	movs	r3, r7
 800f79a:	50e6      	str	r6, [r4, r3]
 800f79c:	e703      	b.n	800f5a6 <_malloc_r+0x6a>
 800f79e:	68e7      	ldr	r7, [r4, #12]
 800f7a0:	2e00      	cmp	r6, #0
 800f7a2:	db09      	blt.n	800f7b8 <_malloc_r+0x27c>
 800f7a4:	2201      	movs	r2, #1
 800f7a6:	9b03      	ldr	r3, [sp, #12]
 800f7a8:	18e3      	adds	r3, r4, r3
 800f7aa:	6859      	ldr	r1, [r3, #4]
 800f7ac:	430a      	orrs	r2, r1
 800f7ae:	605a      	str	r2, [r3, #4]
 800f7b0:	68a3      	ldr	r3, [r4, #8]
 800f7b2:	60df      	str	r7, [r3, #12]
 800f7b4:	60bb      	str	r3, [r7, #8]
 800f7b6:	e6f6      	b.n	800f5a6 <_malloc_r+0x6a>
 800f7b8:	003c      	movs	r4, r7
 800f7ba:	e77b      	b.n	800f6b4 <_malloc_r+0x178>
 800f7bc:	3808      	subs	r0, #8
 800f7be:	6884      	ldr	r4, [r0, #8]
 800f7c0:	3b01      	subs	r3, #1
 800f7c2:	42a0      	cmp	r0, r4
 800f7c4:	d082      	beq.n	800f6cc <_malloc_r+0x190>
 800f7c6:	e787      	b.n	800f6d8 <_malloc_r+0x19c>
 800f7c8:	2303      	movs	r3, #3
 800f7ca:	688f      	ldr	r7, [r1, #8]
 800f7cc:	687a      	ldr	r2, [r7, #4]
 800f7ce:	439a      	bics	r2, r3
 800f7d0:	9202      	str	r2, [sp, #8]
 800f7d2:	4295      	cmp	r5, r2
 800f7d4:	d803      	bhi.n	800f7de <_malloc_r+0x2a2>
 800f7d6:	1b52      	subs	r2, r2, r5
 800f7d8:	2a0f      	cmp	r2, #15
 800f7da:	dd00      	ble.n	800f7de <_malloc_r+0x2a2>
 800f7dc:	e09f      	b.n	800f91e <_malloc_r+0x3e2>
 800f7de:	9b02      	ldr	r3, [sp, #8]
 800f7e0:	18fb      	adds	r3, r7, r3
 800f7e2:	9303      	str	r3, [sp, #12]
 800f7e4:	4b1f      	ldr	r3, [pc, #124]	; (800f864 <_malloc_r+0x328>)
 800f7e6:	681e      	ldr	r6, [r3, #0]
 800f7e8:	4b1f      	ldr	r3, [pc, #124]	; (800f868 <_malloc_r+0x32c>)
 800f7ea:	3610      	adds	r6, #16
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	1976      	adds	r6, r6, r5
 800f7f0:	3301      	adds	r3, #1
 800f7f2:	d005      	beq.n	800f800 <_malloc_r+0x2c4>
 800f7f4:	4b1d      	ldr	r3, [pc, #116]	; (800f86c <_malloc_r+0x330>)
 800f7f6:	3b01      	subs	r3, #1
 800f7f8:	199e      	adds	r6, r3, r6
 800f7fa:	4b1c      	ldr	r3, [pc, #112]	; (800f86c <_malloc_r+0x330>)
 800f7fc:	425b      	negs	r3, r3
 800f7fe:	401e      	ands	r6, r3
 800f800:	0031      	movs	r1, r6
 800f802:	9801      	ldr	r0, [sp, #4]
 800f804:	f000 f8c0 	bl	800f988 <_sbrk_r>
 800f808:	0004      	movs	r4, r0
 800f80a:	1c43      	adds	r3, r0, #1
 800f80c:	d05f      	beq.n	800f8ce <_malloc_r+0x392>
 800f80e:	9b03      	ldr	r3, [sp, #12]
 800f810:	4283      	cmp	r3, r0
 800f812:	d902      	bls.n	800f81a <_malloc_r+0x2de>
 800f814:	4b10      	ldr	r3, [pc, #64]	; (800f858 <_malloc_r+0x31c>)
 800f816:	429f      	cmp	r7, r3
 800f818:	d159      	bne.n	800f8ce <_malloc_r+0x392>
 800f81a:	4b15      	ldr	r3, [pc, #84]	; (800f870 <_malloc_r+0x334>)
 800f81c:	681a      	ldr	r2, [r3, #0]
 800f81e:	18b1      	adds	r1, r6, r2
 800f820:	6019      	str	r1, [r3, #0]
 800f822:	4b12      	ldr	r3, [pc, #72]	; (800f86c <_malloc_r+0x330>)
 800f824:	1e5a      	subs	r2, r3, #1
 800f826:	9b03      	ldr	r3, [sp, #12]
 800f828:	42a3      	cmp	r3, r4
 800f82a:	d127      	bne.n	800f87c <_malloc_r+0x340>
 800f82c:	4213      	tst	r3, r2
 800f82e:	d125      	bne.n	800f87c <_malloc_r+0x340>
 800f830:	9a02      	ldr	r2, [sp, #8]
 800f832:	4b09      	ldr	r3, [pc, #36]	; (800f858 <_malloc_r+0x31c>)
 800f834:	1992      	adds	r2, r2, r6
 800f836:	2601      	movs	r6, #1
 800f838:	689b      	ldr	r3, [r3, #8]
 800f83a:	4316      	orrs	r6, r2
 800f83c:	605e      	str	r6, [r3, #4]
 800f83e:	4b0c      	ldr	r3, [pc, #48]	; (800f870 <_malloc_r+0x334>)
 800f840:	4a0c      	ldr	r2, [pc, #48]	; (800f874 <_malloc_r+0x338>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	6811      	ldr	r1, [r2, #0]
 800f846:	428b      	cmp	r3, r1
 800f848:	d900      	bls.n	800f84c <_malloc_r+0x310>
 800f84a:	6013      	str	r3, [r2, #0]
 800f84c:	4a0a      	ldr	r2, [pc, #40]	; (800f878 <_malloc_r+0x33c>)
 800f84e:	6811      	ldr	r1, [r2, #0]
 800f850:	428b      	cmp	r3, r1
 800f852:	d93c      	bls.n	800f8ce <_malloc_r+0x392>
 800f854:	6013      	str	r3, [r2, #0]
 800f856:	e03a      	b.n	800f8ce <_malloc_r+0x392>
 800f858:	2000014c 	.word	0x2000014c
 800f85c:	00000554 	.word	0x00000554
 800f860:	000001ff 	.word	0x000001ff
 800f864:	200046e0 	.word	0x200046e0
 800f868:	20000554 	.word	0x20000554
 800f86c:	00000080 	.word	0x00000080
 800f870:	200046b0 	.word	0x200046b0
 800f874:	200046d8 	.word	0x200046d8
 800f878:	200046dc 	.word	0x200046dc
 800f87c:	4b2d      	ldr	r3, [pc, #180]	; (800f934 <_malloc_r+0x3f8>)
 800f87e:	6818      	ldr	r0, [r3, #0]
 800f880:	3001      	adds	r0, #1
 800f882:	d132      	bne.n	800f8ea <_malloc_r+0x3ae>
 800f884:	601c      	str	r4, [r3, #0]
 800f886:	2007      	movs	r0, #7
 800f888:	4020      	ands	r0, r4
 800f88a:	d002      	beq.n	800f892 <_malloc_r+0x356>
 800f88c:	2308      	movs	r3, #8
 800f88e:	1a18      	subs	r0, r3, r0
 800f890:	1824      	adds	r4, r4, r0
 800f892:	4b29      	ldr	r3, [pc, #164]	; (800f938 <_malloc_r+0x3fc>)
 800f894:	19a6      	adds	r6, r4, r6
 800f896:	1818      	adds	r0, r3, r0
 800f898:	4016      	ands	r6, r2
 800f89a:	1b86      	subs	r6, r0, r6
 800f89c:	0031      	movs	r1, r6
 800f89e:	9801      	ldr	r0, [sp, #4]
 800f8a0:	f000 f872 	bl	800f988 <_sbrk_r>
 800f8a4:	1c43      	adds	r3, r0, #1
 800f8a6:	d101      	bne.n	800f8ac <_malloc_r+0x370>
 800f8a8:	0020      	movs	r0, r4
 800f8aa:	2600      	movs	r6, #0
 800f8ac:	4a23      	ldr	r2, [pc, #140]	; (800f93c <_malloc_r+0x400>)
 800f8ae:	1b00      	subs	r0, r0, r4
 800f8b0:	6813      	ldr	r3, [r2, #0]
 800f8b2:	199b      	adds	r3, r3, r6
 800f8b4:	6013      	str	r3, [r2, #0]
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	4a21      	ldr	r2, [pc, #132]	; (800f940 <_malloc_r+0x404>)
 800f8ba:	1986      	adds	r6, r0, r6
 800f8bc:	431e      	orrs	r6, r3
 800f8be:	6094      	str	r4, [r2, #8]
 800f8c0:	6066      	str	r6, [r4, #4]
 800f8c2:	4297      	cmp	r7, r2
 800f8c4:	d0bb      	beq.n	800f83e <_malloc_r+0x302>
 800f8c6:	9a02      	ldr	r2, [sp, #8]
 800f8c8:	2a0f      	cmp	r2, #15
 800f8ca:	d814      	bhi.n	800f8f6 <_malloc_r+0x3ba>
 800f8cc:	6063      	str	r3, [r4, #4]
 800f8ce:	2203      	movs	r2, #3
 800f8d0:	4b1b      	ldr	r3, [pc, #108]	; (800f940 <_malloc_r+0x404>)
 800f8d2:	689b      	ldr	r3, [r3, #8]
 800f8d4:	685b      	ldr	r3, [r3, #4]
 800f8d6:	4393      	bics	r3, r2
 800f8d8:	1b5a      	subs	r2, r3, r5
 800f8da:	429d      	cmp	r5, r3
 800f8dc:	d801      	bhi.n	800f8e2 <_malloc_r+0x3a6>
 800f8de:	2a0f      	cmp	r2, #15
 800f8e0:	dc1d      	bgt.n	800f91e <_malloc_r+0x3e2>
 800f8e2:	9801      	ldr	r0, [sp, #4]
 800f8e4:	f000 f848 	bl	800f978 <__malloc_unlock>
 800f8e8:	e635      	b.n	800f556 <_malloc_r+0x1a>
 800f8ea:	9b03      	ldr	r3, [sp, #12]
 800f8ec:	1ae3      	subs	r3, r4, r3
 800f8ee:	185b      	adds	r3, r3, r1
 800f8f0:	4912      	ldr	r1, [pc, #72]	; (800f93c <_malloc_r+0x400>)
 800f8f2:	600b      	str	r3, [r1, #0]
 800f8f4:	e7c7      	b.n	800f886 <_malloc_r+0x34a>
 800f8f6:	2207      	movs	r2, #7
 800f8f8:	9e02      	ldr	r6, [sp, #8]
 800f8fa:	3e0c      	subs	r6, #12
 800f8fc:	4396      	bics	r6, r2
 800f8fe:	687a      	ldr	r2, [r7, #4]
 800f900:	4013      	ands	r3, r2
 800f902:	2205      	movs	r2, #5
 800f904:	4333      	orrs	r3, r6
 800f906:	607b      	str	r3, [r7, #4]
 800f908:	19bb      	adds	r3, r7, r6
 800f90a:	605a      	str	r2, [r3, #4]
 800f90c:	609a      	str	r2, [r3, #8]
 800f90e:	2e0f      	cmp	r6, #15
 800f910:	d995      	bls.n	800f83e <_malloc_r+0x302>
 800f912:	0039      	movs	r1, r7
 800f914:	9801      	ldr	r0, [sp, #4]
 800f916:	3108      	adds	r1, #8
 800f918:	f001 ffa8 	bl	801186c <_free_r>
 800f91c:	e78f      	b.n	800f83e <_malloc_r+0x302>
 800f91e:	2301      	movs	r3, #1
 800f920:	0018      	movs	r0, r3
 800f922:	4907      	ldr	r1, [pc, #28]	; (800f940 <_malloc_r+0x404>)
 800f924:	4328      	orrs	r0, r5
 800f926:	688c      	ldr	r4, [r1, #8]
 800f928:	4313      	orrs	r3, r2
 800f92a:	1965      	adds	r5, r4, r5
 800f92c:	6060      	str	r0, [r4, #4]
 800f92e:	608d      	str	r5, [r1, #8]
 800f930:	606b      	str	r3, [r5, #4]
 800f932:	e638      	b.n	800f5a6 <_malloc_r+0x6a>
 800f934:	20000554 	.word	0x20000554
 800f938:	00000080 	.word	0x00000080
 800f93c:	200046b0 	.word	0x200046b0
 800f940:	2000014c 	.word	0x2000014c

0800f944 <memcpy>:
 800f944:	2300      	movs	r3, #0
 800f946:	b510      	push	{r4, lr}
 800f948:	429a      	cmp	r2, r3
 800f94a:	d100      	bne.n	800f94e <memcpy+0xa>
 800f94c:	bd10      	pop	{r4, pc}
 800f94e:	5ccc      	ldrb	r4, [r1, r3]
 800f950:	54c4      	strb	r4, [r0, r3]
 800f952:	3301      	adds	r3, #1
 800f954:	e7f8      	b.n	800f948 <memcpy+0x4>

0800f956 <memset>:
 800f956:	0003      	movs	r3, r0
 800f958:	1882      	adds	r2, r0, r2
 800f95a:	4293      	cmp	r3, r2
 800f95c:	d100      	bne.n	800f960 <memset+0xa>
 800f95e:	4770      	bx	lr
 800f960:	7019      	strb	r1, [r3, #0]
 800f962:	3301      	adds	r3, #1
 800f964:	e7f9      	b.n	800f95a <memset+0x4>
	...

0800f968 <__malloc_lock>:
 800f968:	b510      	push	{r4, lr}
 800f96a:	4802      	ldr	r0, [pc, #8]	; (800f974 <__malloc_lock+0xc>)
 800f96c:	f002 f83e 	bl	80119ec <__retarget_lock_acquire_recursive>
 800f970:	bd10      	pop	{r4, pc}
 800f972:	46c0      	nop			; (mov r8, r8)
 800f974:	2000551c 	.word	0x2000551c

0800f978 <__malloc_unlock>:
 800f978:	b510      	push	{r4, lr}
 800f97a:	4802      	ldr	r0, [pc, #8]	; (800f984 <__malloc_unlock+0xc>)
 800f97c:	f002 f837 	bl	80119ee <__retarget_lock_release_recursive>
 800f980:	bd10      	pop	{r4, pc}
 800f982:	46c0      	nop			; (mov r8, r8)
 800f984:	2000551c 	.word	0x2000551c

0800f988 <_sbrk_r>:
 800f988:	2300      	movs	r3, #0
 800f98a:	b570      	push	{r4, r5, r6, lr}
 800f98c:	4c06      	ldr	r4, [pc, #24]	; (800f9a8 <_sbrk_r+0x20>)
 800f98e:	0005      	movs	r5, r0
 800f990:	0008      	movs	r0, r1
 800f992:	6023      	str	r3, [r4, #0]
 800f994:	f7f4 fb02 	bl	8003f9c <_sbrk>
 800f998:	1c43      	adds	r3, r0, #1
 800f99a:	d103      	bne.n	800f9a4 <_sbrk_r+0x1c>
 800f99c:	6823      	ldr	r3, [r4, #0]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d000      	beq.n	800f9a4 <_sbrk_r+0x1c>
 800f9a2:	602b      	str	r3, [r5, #0]
 800f9a4:	bd70      	pop	{r4, r5, r6, pc}
 800f9a6:	46c0      	nop			; (mov r8, r8)
 800f9a8:	20005524 	.word	0x20005524

0800f9ac <sprintf>:
 800f9ac:	b40e      	push	{r1, r2, r3}
 800f9ae:	b510      	push	{r4, lr}
 800f9b0:	b09d      	sub	sp, #116	; 0x74
 800f9b2:	a902      	add	r1, sp, #8
 800f9b4:	9002      	str	r0, [sp, #8]
 800f9b6:	6108      	str	r0, [r1, #16]
 800f9b8:	480b      	ldr	r0, [pc, #44]	; (800f9e8 <sprintf+0x3c>)
 800f9ba:	2482      	movs	r4, #130	; 0x82
 800f9bc:	6088      	str	r0, [r1, #8]
 800f9be:	6148      	str	r0, [r1, #20]
 800f9c0:	2001      	movs	r0, #1
 800f9c2:	4240      	negs	r0, r0
 800f9c4:	ab1f      	add	r3, sp, #124	; 0x7c
 800f9c6:	81c8      	strh	r0, [r1, #14]
 800f9c8:	4808      	ldr	r0, [pc, #32]	; (800f9ec <sprintf+0x40>)
 800f9ca:	cb04      	ldmia	r3!, {r2}
 800f9cc:	00a4      	lsls	r4, r4, #2
 800f9ce:	6800      	ldr	r0, [r0, #0]
 800f9d0:	9301      	str	r3, [sp, #4]
 800f9d2:	818c      	strh	r4, [r1, #12]
 800f9d4:	f000 f814 	bl	800fa00 <_svfprintf_r>
 800f9d8:	2300      	movs	r3, #0
 800f9da:	9a02      	ldr	r2, [sp, #8]
 800f9dc:	7013      	strb	r3, [r2, #0]
 800f9de:	b01d      	add	sp, #116	; 0x74
 800f9e0:	bc10      	pop	{r4}
 800f9e2:	bc08      	pop	{r3}
 800f9e4:	b003      	add	sp, #12
 800f9e6:	4718      	bx	r3
 800f9e8:	7fffffff 	.word	0x7fffffff
 800f9ec:	20000058 	.word	0x20000058

0800f9f0 <strcpy>:
 800f9f0:	1c03      	adds	r3, r0, #0
 800f9f2:	780a      	ldrb	r2, [r1, #0]
 800f9f4:	3101      	adds	r1, #1
 800f9f6:	701a      	strb	r2, [r3, #0]
 800f9f8:	3301      	adds	r3, #1
 800f9fa:	2a00      	cmp	r2, #0
 800f9fc:	d1f9      	bne.n	800f9f2 <strcpy+0x2>
 800f9fe:	4770      	bx	lr

0800fa00 <_svfprintf_r>:
 800fa00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa02:	b0c5      	sub	sp, #276	; 0x114
 800fa04:	9109      	str	r1, [sp, #36]	; 0x24
 800fa06:	0014      	movs	r4, r2
 800fa08:	001d      	movs	r5, r3
 800fa0a:	900a      	str	r0, [sp, #40]	; 0x28
 800fa0c:	f001 ffe2 	bl	80119d4 <_localeconv_r>
 800fa10:	6803      	ldr	r3, [r0, #0]
 800fa12:	0018      	movs	r0, r3
 800fa14:	9318      	str	r3, [sp, #96]	; 0x60
 800fa16:	f7f0 fb7d 	bl	8000114 <strlen>
 800fa1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa1c:	9012      	str	r0, [sp, #72]	; 0x48
 800fa1e:	899b      	ldrh	r3, [r3, #12]
 800fa20:	061b      	lsls	r3, r3, #24
 800fa22:	d518      	bpl.n	800fa56 <_svfprintf_r+0x56>
 800fa24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa26:	691b      	ldr	r3, [r3, #16]
 800fa28:	930b      	str	r3, [sp, #44]	; 0x2c
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d113      	bne.n	800fa56 <_svfprintf_r+0x56>
 800fa2e:	2140      	movs	r1, #64	; 0x40
 800fa30:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fa32:	f7ff fd83 	bl	800f53c <_malloc_r>
 800fa36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa38:	6018      	str	r0, [r3, #0]
 800fa3a:	6118      	str	r0, [r3, #16]
 800fa3c:	2800      	cmp	r0, #0
 800fa3e:	d107      	bne.n	800fa50 <_svfprintf_r+0x50>
 800fa40:	230c      	movs	r3, #12
 800fa42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa44:	6013      	str	r3, [r2, #0]
 800fa46:	3b0d      	subs	r3, #13
 800fa48:	9313      	str	r3, [sp, #76]	; 0x4c
 800fa4a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800fa4c:	b045      	add	sp, #276	; 0x114
 800fa4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa50:	2340      	movs	r3, #64	; 0x40
 800fa52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa54:	6153      	str	r3, [r2, #20]
 800fa56:	2300      	movs	r3, #0
 800fa58:	af34      	add	r7, sp, #208	; 0xd0
 800fa5a:	9727      	str	r7, [sp, #156]	; 0x9c
 800fa5c:	9329      	str	r3, [sp, #164]	; 0xa4
 800fa5e:	9328      	str	r3, [sp, #160]	; 0xa0
 800fa60:	9411      	str	r4, [sp, #68]	; 0x44
 800fa62:	930e      	str	r3, [sp, #56]	; 0x38
 800fa64:	9316      	str	r3, [sp, #88]	; 0x58
 800fa66:	9317      	str	r3, [sp, #92]	; 0x5c
 800fa68:	931a      	str	r3, [sp, #104]	; 0x68
 800fa6a:	9319      	str	r3, [sp, #100]	; 0x64
 800fa6c:	9313      	str	r3, [sp, #76]	; 0x4c
 800fa6e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800fa70:	7823      	ldrb	r3, [r4, #0]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d002      	beq.n	800fa7c <_svfprintf_r+0x7c>
 800fa76:	2b25      	cmp	r3, #37	; 0x25
 800fa78:	d000      	beq.n	800fa7c <_svfprintf_r+0x7c>
 800fa7a:	e091      	b.n	800fba0 <_svfprintf_r+0x1a0>
 800fa7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fa7e:	1ae6      	subs	r6, r4, r3
 800fa80:	d018      	beq.n	800fab4 <_svfprintf_r+0xb4>
 800fa82:	603b      	str	r3, [r7, #0]
 800fa84:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800fa86:	607e      	str	r6, [r7, #4]
 800fa88:	199b      	adds	r3, r3, r6
 800fa8a:	9329      	str	r3, [sp, #164]	; 0xa4
 800fa8c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800fa8e:	3708      	adds	r7, #8
 800fa90:	930b      	str	r3, [sp, #44]	; 0x2c
 800fa92:	3301      	adds	r3, #1
 800fa94:	9328      	str	r3, [sp, #160]	; 0xa0
 800fa96:	2b07      	cmp	r3, #7
 800fa98:	dd09      	ble.n	800faae <_svfprintf_r+0xae>
 800fa9a:	aa27      	add	r2, sp, #156	; 0x9c
 800fa9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fa9e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800faa0:	f002 fa94 	bl	8011fcc <__ssprint_r>
 800faa4:	2800      	cmp	r0, #0
 800faa6:	d001      	beq.n	800faac <_svfprintf_r+0xac>
 800faa8:	f000 ffa8 	bl	80109fc <_svfprintf_r+0xffc>
 800faac:	af34      	add	r7, sp, #208	; 0xd0
 800faae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fab0:	199b      	adds	r3, r3, r6
 800fab2:	9313      	str	r3, [sp, #76]	; 0x4c
 800fab4:	7823      	ldrb	r3, [r4, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d101      	bne.n	800fabe <_svfprintf_r+0xbe>
 800faba:	f000 ffbe 	bl	8010a3a <_svfprintf_r+0x103a>
 800fabe:	221f      	movs	r2, #31
 800fac0:	2300      	movs	r3, #0
 800fac2:	a918      	add	r1, sp, #96	; 0x60
 800fac4:	1852      	adds	r2, r2, r1
 800fac6:	2101      	movs	r1, #1
 800fac8:	7013      	strb	r3, [r2, #0]
 800faca:	001e      	movs	r6, r3
 800facc:	001a      	movs	r2, r3
 800face:	4249      	negs	r1, r1
 800fad0:	3401      	adds	r4, #1
 800fad2:	910b      	str	r1, [sp, #44]	; 0x2c
 800fad4:	9314      	str	r3, [sp, #80]	; 0x50
 800fad6:	1c61      	adds	r1, r4, #1
 800fad8:	9111      	str	r1, [sp, #68]	; 0x44
 800fada:	7821      	ldrb	r1, [r4, #0]
 800fadc:	910d      	str	r1, [sp, #52]	; 0x34
 800fade:	980d      	ldr	r0, [sp, #52]	; 0x34
 800fae0:	3820      	subs	r0, #32
 800fae2:	2858      	cmp	r0, #88	; 0x58
 800fae4:	d901      	bls.n	800faea <_svfprintf_r+0xea>
 800fae6:	f000 fca7 	bl	8010438 <_svfprintf_r+0xa38>
 800faea:	f7f0 fb2f 	bl	800014c <__gnu_thumb1_case_uhi>
 800faee:	00cc      	.short	0x00cc
 800faf0:	04a504a5 	.word	0x04a504a5
 800faf4:	04a500d1 	.word	0x04a500d1
 800faf8:	04a504a5 	.word	0x04a504a5
 800fafc:	04a504a5 	.word	0x04a504a5
 800fb00:	00d404a5 	.word	0x00d404a5
 800fb04:	04a5005b 	.word	0x04a5005b
 800fb08:	00de00dc 	.word	0x00de00dc
 800fb0c:	010304a5 	.word	0x010304a5
 800fb10:	01050105 	.word	0x01050105
 800fb14:	01050105 	.word	0x01050105
 800fb18:	01050105 	.word	0x01050105
 800fb1c:	01050105 	.word	0x01050105
 800fb20:	04a50105 	.word	0x04a50105
 800fb24:	04a504a5 	.word	0x04a504a5
 800fb28:	04a504a5 	.word	0x04a504a5
 800fb2c:	04a504a5 	.word	0x04a504a5
 800fb30:	04a504a5 	.word	0x04a504a5
 800fb34:	013504a5 	.word	0x013504a5
 800fb38:	04a5014d 	.word	0x04a5014d
 800fb3c:	04a5014d 	.word	0x04a5014d
 800fb40:	04a504a5 	.word	0x04a504a5
 800fb44:	011704a5 	.word	0x011704a5
 800fb48:	04a504a5 	.word	0x04a504a5
 800fb4c:	04a503ad 	.word	0x04a503ad
 800fb50:	04a504a5 	.word	0x04a504a5
 800fb54:	04a504a5 	.word	0x04a504a5
 800fb58:	04a50407 	.word	0x04a50407
 800fb5c:	00a304a5 	.word	0x00a304a5
 800fb60:	04a504a5 	.word	0x04a504a5
 800fb64:	04a504a5 	.word	0x04a504a5
 800fb68:	04a504a5 	.word	0x04a504a5
 800fb6c:	04a504a5 	.word	0x04a504a5
 800fb70:	04a504a5 	.word	0x04a504a5
 800fb74:	005f0126 	.word	0x005f0126
 800fb78:	014d014d 	.word	0x014d014d
 800fb7c:	0119014d 	.word	0x0119014d
 800fb80:	04a5005f 	.word	0x04a5005f
 800fb84:	011b04a5 	.word	0x011b04a5
 800fb88:	038e04a5 	.word	0x038e04a5
 800fb8c:	03d903af 	.word	0x03d903af
 800fb90:	04a50122 	.word	0x04a50122
 800fb94:	04a503ea 	.word	0x04a503ea
 800fb98:	04a50409 	.word	0x04a50409
 800fb9c:	043004a5 	.word	0x043004a5
 800fba0:	3401      	adds	r4, #1
 800fba2:	e765      	b.n	800fa70 <_svfprintf_r+0x70>
 800fba4:	2301      	movs	r3, #1
 800fba6:	222b      	movs	r2, #43	; 0x2b
 800fba8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800fbaa:	e794      	b.n	800fad6 <_svfprintf_r+0xd6>
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d003      	beq.n	800fbb8 <_svfprintf_r+0x1b8>
 800fbb0:	231f      	movs	r3, #31
 800fbb2:	a918      	add	r1, sp, #96	; 0x60
 800fbb4:	185b      	adds	r3, r3, r1
 800fbb6:	701a      	strb	r2, [r3, #0]
 800fbb8:	06b3      	lsls	r3, r6, #26
 800fbba:	d400      	bmi.n	800fbbe <_svfprintf_r+0x1be>
 800fbbc:	e0d5      	b.n	800fd6a <_svfprintf_r+0x36a>
 800fbbe:	2307      	movs	r3, #7
 800fbc0:	3507      	adds	r5, #7
 800fbc2:	439d      	bics	r5, r3
 800fbc4:	002b      	movs	r3, r5
 800fbc6:	3308      	adds	r3, #8
 800fbc8:	930f      	str	r3, [sp, #60]	; 0x3c
 800fbca:	682b      	ldr	r3, [r5, #0]
 800fbcc:	686c      	ldr	r4, [r5, #4]
 800fbce:	9306      	str	r3, [sp, #24]
 800fbd0:	9407      	str	r4, [sp, #28]
 800fbd2:	9a07      	ldr	r2, [sp, #28]
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	2a00      	cmp	r2, #0
 800fbd8:	da0c      	bge.n	800fbf4 <_svfprintf_r+0x1f4>
 800fbda:	9906      	ldr	r1, [sp, #24]
 800fbdc:	9a07      	ldr	r2, [sp, #28]
 800fbde:	2400      	movs	r4, #0
 800fbe0:	424b      	negs	r3, r1
 800fbe2:	4194      	sbcs	r4, r2
 800fbe4:	9306      	str	r3, [sp, #24]
 800fbe6:	9407      	str	r4, [sp, #28]
 800fbe8:	231f      	movs	r3, #31
 800fbea:	222d      	movs	r2, #45	; 0x2d
 800fbec:	a918      	add	r1, sp, #96	; 0x60
 800fbee:	185b      	adds	r3, r3, r1
 800fbf0:	701a      	strb	r2, [r3, #0]
 800fbf2:	2301      	movs	r3, #1
 800fbf4:	9907      	ldr	r1, [sp, #28]
 800fbf6:	9a06      	ldr	r2, [sp, #24]
 800fbf8:	430a      	orrs	r2, r1
 800fbfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fbfc:	3101      	adds	r1, #1
 800fbfe:	d101      	bne.n	800fc04 <_svfprintf_r+0x204>
 800fc00:	f000 ff3f 	bl	8010a82 <_svfprintf_r+0x1082>
 800fc04:	2180      	movs	r1, #128	; 0x80
 800fc06:	0035      	movs	r5, r6
 800fc08:	438d      	bics	r5, r1
 800fc0a:	2a00      	cmp	r2, #0
 800fc0c:	d001      	beq.n	800fc12 <_svfprintf_r+0x212>
 800fc0e:	f000 ff3d 	bl	8010a8c <_svfprintf_r+0x108c>
 800fc12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fc14:	2a00      	cmp	r2, #0
 800fc16:	d101      	bne.n	800fc1c <_svfprintf_r+0x21c>
 800fc18:	f000 fc04 	bl	8010424 <_svfprintf_r+0xa24>
 800fc1c:	2b01      	cmp	r3, #1
 800fc1e:	d100      	bne.n	800fc22 <_svfprintf_r+0x222>
 800fc20:	e3b7      	b.n	8010392 <_svfprintf_r+0x992>
 800fc22:	2b02      	cmp	r3, #2
 800fc24:	d100      	bne.n	800fc28 <_svfprintf_r+0x228>
 800fc26:	e3df      	b.n	80103e8 <_svfprintf_r+0x9e8>
 800fc28:	2300      	movs	r3, #0
 800fc2a:	2400      	movs	r4, #0
 800fc2c:	9306      	str	r3, [sp, #24]
 800fc2e:	9407      	str	r4, [sp, #28]
 800fc30:	f000 ff32 	bl	8010a98 <_svfprintf_r+0x1098>
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d003      	beq.n	800fc40 <_svfprintf_r+0x240>
 800fc38:	231f      	movs	r3, #31
 800fc3a:	a918      	add	r1, sp, #96	; 0x60
 800fc3c:	185b      	adds	r3, r3, r1
 800fc3e:	701a      	strb	r2, [r3, #0]
 800fc40:	4b8c      	ldr	r3, [pc, #560]	; (800fe74 <_svfprintf_r+0x474>)
 800fc42:	931a      	str	r3, [sp, #104]	; 0x68
 800fc44:	2320      	movs	r3, #32
 800fc46:	4033      	ands	r3, r6
 800fc48:	d100      	bne.n	800fc4c <_svfprintf_r+0x24c>
 800fc4a:	e388      	b.n	801035e <_svfprintf_r+0x95e>
 800fc4c:	2307      	movs	r3, #7
 800fc4e:	3507      	adds	r5, #7
 800fc50:	439d      	bics	r5, r3
 800fc52:	002b      	movs	r3, r5
 800fc54:	3308      	adds	r3, #8
 800fc56:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc58:	682b      	ldr	r3, [r5, #0]
 800fc5a:	686c      	ldr	r4, [r5, #4]
 800fc5c:	9306      	str	r3, [sp, #24]
 800fc5e:	9407      	str	r4, [sp, #28]
 800fc60:	2302      	movs	r3, #2
 800fc62:	07f2      	lsls	r2, r6, #31
 800fc64:	d400      	bmi.n	800fc68 <_svfprintf_r+0x268>
 800fc66:	e2ff      	b.n	8010268 <_svfprintf_r+0x868>
 800fc68:	9a06      	ldr	r2, [sp, #24]
 800fc6a:	9907      	ldr	r1, [sp, #28]
 800fc6c:	430a      	orrs	r2, r1
 800fc6e:	d100      	bne.n	800fc72 <_svfprintf_r+0x272>
 800fc70:	e2fa      	b.n	8010268 <_svfprintf_r+0x868>
 800fc72:	2130      	movs	r1, #48	; 0x30
 800fc74:	aa20      	add	r2, sp, #128	; 0x80
 800fc76:	7011      	strb	r1, [r2, #0]
 800fc78:	2034      	movs	r0, #52	; 0x34
 800fc7a:	4669      	mov	r1, sp
 800fc7c:	1809      	adds	r1, r1, r0
 800fc7e:	7809      	ldrb	r1, [r1, #0]
 800fc80:	431e      	orrs	r6, r3
 800fc82:	7051      	strb	r1, [r2, #1]
 800fc84:	e2f0      	b.n	8010268 <_svfprintf_r+0x868>
 800fc86:	2a00      	cmp	r2, #0
 800fc88:	d18e      	bne.n	800fba8 <_svfprintf_r+0x1a8>
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	2220      	movs	r2, #32
 800fc8e:	e78b      	b.n	800fba8 <_svfprintf_r+0x1a8>
 800fc90:	2101      	movs	r1, #1
 800fc92:	430e      	orrs	r6, r1
 800fc94:	e788      	b.n	800fba8 <_svfprintf_r+0x1a8>
 800fc96:	6829      	ldr	r1, [r5, #0]
 800fc98:	3504      	adds	r5, #4
 800fc9a:	9114      	str	r1, [sp, #80]	; 0x50
 800fc9c:	2900      	cmp	r1, #0
 800fc9e:	db00      	blt.n	800fca2 <_svfprintf_r+0x2a2>
 800fca0:	e782      	b.n	800fba8 <_svfprintf_r+0x1a8>
 800fca2:	4249      	negs	r1, r1
 800fca4:	9114      	str	r1, [sp, #80]	; 0x50
 800fca6:	2104      	movs	r1, #4
 800fca8:	e7f3      	b.n	800fc92 <_svfprintf_r+0x292>
 800fcaa:	9811      	ldr	r0, [sp, #68]	; 0x44
 800fcac:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fcae:	7800      	ldrb	r0, [r0, #0]
 800fcb0:	3101      	adds	r1, #1
 800fcb2:	900d      	str	r0, [sp, #52]	; 0x34
 800fcb4:	282a      	cmp	r0, #42	; 0x2a
 800fcb6:	d009      	beq.n	800fccc <_svfprintf_r+0x2cc>
 800fcb8:	2000      	movs	r0, #0
 800fcba:	900b      	str	r0, [sp, #44]	; 0x2c
 800fcbc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800fcbe:	0008      	movs	r0, r1
 800fcc0:	3c30      	subs	r4, #48	; 0x30
 800fcc2:	46a4      	mov	ip, r4
 800fcc4:	2c09      	cmp	r4, #9
 800fcc6:	d90c      	bls.n	800fce2 <_svfprintf_r+0x2e2>
 800fcc8:	9011      	str	r0, [sp, #68]	; 0x44
 800fcca:	e708      	b.n	800fade <_svfprintf_r+0xde>
 800fccc:	682c      	ldr	r4, [r5, #0]
 800fcce:	1d28      	adds	r0, r5, #4
 800fcd0:	940b      	str	r4, [sp, #44]	; 0x2c
 800fcd2:	2c00      	cmp	r4, #0
 800fcd4:	da02      	bge.n	800fcdc <_svfprintf_r+0x2dc>
 800fcd6:	2401      	movs	r4, #1
 800fcd8:	4264      	negs	r4, r4
 800fcda:	940b      	str	r4, [sp, #44]	; 0x2c
 800fcdc:	0005      	movs	r5, r0
 800fcde:	9111      	str	r1, [sp, #68]	; 0x44
 800fce0:	e762      	b.n	800fba8 <_svfprintf_r+0x1a8>
 800fce2:	240a      	movs	r4, #10
 800fce4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800fce6:	4360      	muls	r0, r4
 800fce8:	4460      	add	r0, ip
 800fcea:	900b      	str	r0, [sp, #44]	; 0x2c
 800fcec:	7808      	ldrb	r0, [r1, #0]
 800fcee:	3101      	adds	r1, #1
 800fcf0:	900d      	str	r0, [sp, #52]	; 0x34
 800fcf2:	e7e3      	b.n	800fcbc <_svfprintf_r+0x2bc>
 800fcf4:	2180      	movs	r1, #128	; 0x80
 800fcf6:	e7cc      	b.n	800fc92 <_svfprintf_r+0x292>
 800fcf8:	2100      	movs	r1, #0
 800fcfa:	9114      	str	r1, [sp, #80]	; 0x50
 800fcfc:	200a      	movs	r0, #10
 800fcfe:	9914      	ldr	r1, [sp, #80]	; 0x50
 800fd00:	4341      	muls	r1, r0
 800fd02:	980d      	ldr	r0, [sp, #52]	; 0x34
 800fd04:	3830      	subs	r0, #48	; 0x30
 800fd06:	1841      	adds	r1, r0, r1
 800fd08:	9114      	str	r1, [sp, #80]	; 0x50
 800fd0a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fd0c:	1c48      	adds	r0, r1, #1
 800fd0e:	7809      	ldrb	r1, [r1, #0]
 800fd10:	9011      	str	r0, [sp, #68]	; 0x44
 800fd12:	910d      	str	r1, [sp, #52]	; 0x34
 800fd14:	3930      	subs	r1, #48	; 0x30
 800fd16:	2909      	cmp	r1, #9
 800fd18:	d9f0      	bls.n	800fcfc <_svfprintf_r+0x2fc>
 800fd1a:	e7d5      	b.n	800fcc8 <_svfprintf_r+0x2c8>
 800fd1c:	2108      	movs	r1, #8
 800fd1e:	e7b8      	b.n	800fc92 <_svfprintf_r+0x292>
 800fd20:	2140      	movs	r1, #64	; 0x40
 800fd22:	e7b6      	b.n	800fc92 <_svfprintf_r+0x292>
 800fd24:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fd26:	7809      	ldrb	r1, [r1, #0]
 800fd28:	296c      	cmp	r1, #108	; 0x6c
 800fd2a:	d104      	bne.n	800fd36 <_svfprintf_r+0x336>
 800fd2c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fd2e:	3101      	adds	r1, #1
 800fd30:	9111      	str	r1, [sp, #68]	; 0x44
 800fd32:	2120      	movs	r1, #32
 800fd34:	e7ad      	b.n	800fc92 <_svfprintf_r+0x292>
 800fd36:	2110      	movs	r1, #16
 800fd38:	e7ab      	b.n	800fc92 <_svfprintf_r+0x292>
 800fd3a:	1d2b      	adds	r3, r5, #4
 800fd3c:	682a      	ldr	r2, [r5, #0]
 800fd3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd40:	ab2a      	add	r3, sp, #168	; 0xa8
 800fd42:	701a      	strb	r2, [r3, #0]
 800fd44:	221f      	movs	r2, #31
 800fd46:	2400      	movs	r4, #0
 800fd48:	a918      	add	r1, sp, #96	; 0x60
 800fd4a:	1852      	adds	r2, r2, r1
 800fd4c:	7014      	strb	r4, [r2, #0]
 800fd4e:	2201      	movs	r2, #1
 800fd50:	9410      	str	r4, [sp, #64]	; 0x40
 800fd52:	920b      	str	r2, [sp, #44]	; 0x2c
 800fd54:	930c      	str	r3, [sp, #48]	; 0x30
 800fd56:	e134      	b.n	800ffc2 <_svfprintf_r+0x5c2>
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d003      	beq.n	800fd64 <_svfprintf_r+0x364>
 800fd5c:	231f      	movs	r3, #31
 800fd5e:	a918      	add	r1, sp, #96	; 0x60
 800fd60:	185b      	adds	r3, r3, r1
 800fd62:	701a      	strb	r2, [r3, #0]
 800fd64:	2310      	movs	r3, #16
 800fd66:	431e      	orrs	r6, r3
 800fd68:	e726      	b.n	800fbb8 <_svfprintf_r+0x1b8>
 800fd6a:	1d2a      	adds	r2, r5, #4
 800fd6c:	06f3      	lsls	r3, r6, #27
 800fd6e:	d505      	bpl.n	800fd7c <_svfprintf_r+0x37c>
 800fd70:	682b      	ldr	r3, [r5, #0]
 800fd72:	920f      	str	r2, [sp, #60]	; 0x3c
 800fd74:	9306      	str	r3, [sp, #24]
 800fd76:	17db      	asrs	r3, r3, #31
 800fd78:	9307      	str	r3, [sp, #28]
 800fd7a:	e72a      	b.n	800fbd2 <_svfprintf_r+0x1d2>
 800fd7c:	682b      	ldr	r3, [r5, #0]
 800fd7e:	920f      	str	r2, [sp, #60]	; 0x3c
 800fd80:	0671      	lsls	r1, r6, #25
 800fd82:	d5f7      	bpl.n	800fd74 <_svfprintf_r+0x374>
 800fd84:	b21b      	sxth	r3, r3
 800fd86:	e7f5      	b.n	800fd74 <_svfprintf_r+0x374>
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d003      	beq.n	800fd94 <_svfprintf_r+0x394>
 800fd8c:	231f      	movs	r3, #31
 800fd8e:	a918      	add	r1, sp, #96	; 0x60
 800fd90:	185b      	adds	r3, r3, r1
 800fd92:	701a      	strb	r2, [r3, #0]
 800fd94:	2307      	movs	r3, #7
 800fd96:	3507      	adds	r5, #7
 800fd98:	439d      	bics	r5, r3
 800fd9a:	002b      	movs	r3, r5
 800fd9c:	2201      	movs	r2, #1
 800fd9e:	3308      	adds	r3, #8
 800fda0:	930f      	str	r3, [sp, #60]	; 0x3c
 800fda2:	682b      	ldr	r3, [r5, #0]
 800fda4:	4252      	negs	r2, r2
 800fda6:	9316      	str	r3, [sp, #88]	; 0x58
 800fda8:	686b      	ldr	r3, [r5, #4]
 800fdaa:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800fdac:	9317      	str	r3, [sp, #92]	; 0x5c
 800fdae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fdb0:	0028      	movs	r0, r5
 800fdb2:	005c      	lsls	r4, r3, #1
 800fdb4:	0864      	lsrs	r4, r4, #1
 800fdb6:	4b30      	ldr	r3, [pc, #192]	; (800fe78 <_svfprintf_r+0x478>)
 800fdb8:	0021      	movs	r1, r4
 800fdba:	f7f2 f95d 	bl	8002078 <__aeabi_dcmpun>
 800fdbe:	2800      	cmp	r0, #0
 800fdc0:	d001      	beq.n	800fdc6 <_svfprintf_r+0x3c6>
 800fdc2:	f000 fe44 	bl	8010a4e <_svfprintf_r+0x104e>
 800fdc6:	2201      	movs	r2, #1
 800fdc8:	4b2b      	ldr	r3, [pc, #172]	; (800fe78 <_svfprintf_r+0x478>)
 800fdca:	4252      	negs	r2, r2
 800fdcc:	0028      	movs	r0, r5
 800fdce:	0021      	movs	r1, r4
 800fdd0:	f7f0 fb5c 	bl	800048c <__aeabi_dcmple>
 800fdd4:	2800      	cmp	r0, #0
 800fdd6:	d001      	beq.n	800fddc <_svfprintf_r+0x3dc>
 800fdd8:	f000 fe39 	bl	8010a4e <_svfprintf_r+0x104e>
 800fddc:	2200      	movs	r2, #0
 800fdde:	2300      	movs	r3, #0
 800fde0:	9816      	ldr	r0, [sp, #88]	; 0x58
 800fde2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800fde4:	f7f0 fb48 	bl	8000478 <__aeabi_dcmplt>
 800fde8:	2800      	cmp	r0, #0
 800fdea:	d004      	beq.n	800fdf6 <_svfprintf_r+0x3f6>
 800fdec:	231f      	movs	r3, #31
 800fdee:	222d      	movs	r2, #45	; 0x2d
 800fdf0:	a918      	add	r1, sp, #96	; 0x60
 800fdf2:	185b      	adds	r3, r3, r1
 800fdf4:	701a      	strb	r2, [r3, #0]
 800fdf6:	4b21      	ldr	r3, [pc, #132]	; (800fe7c <_svfprintf_r+0x47c>)
 800fdf8:	930c      	str	r3, [sp, #48]	; 0x30
 800fdfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fdfc:	2b47      	cmp	r3, #71	; 0x47
 800fdfe:	dc01      	bgt.n	800fe04 <_svfprintf_r+0x404>
 800fe00:	4b1f      	ldr	r3, [pc, #124]	; (800fe80 <_svfprintf_r+0x480>)
 800fe02:	930c      	str	r3, [sp, #48]	; 0x30
 800fe04:	2380      	movs	r3, #128	; 0x80
 800fe06:	2400      	movs	r4, #0
 800fe08:	439e      	bics	r6, r3
 800fe0a:	3b7d      	subs	r3, #125	; 0x7d
 800fe0c:	930b      	str	r3, [sp, #44]	; 0x2c
 800fe0e:	9410      	str	r4, [sp, #64]	; 0x40
 800fe10:	e0d7      	b.n	800ffc2 <_svfprintf_r+0x5c2>
 800fe12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe14:	3301      	adds	r3, #1
 800fe16:	d024      	beq.n	800fe62 <_svfprintf_r+0x462>
 800fe18:	2320      	movs	r3, #32
 800fe1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fe1c:	439a      	bics	r2, r3
 800fe1e:	2a47      	cmp	r2, #71	; 0x47
 800fe20:	d102      	bne.n	800fe28 <_svfprintf_r+0x428>
 800fe22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d01f      	beq.n	800fe68 <_svfprintf_r+0x468>
 800fe28:	2380      	movs	r3, #128	; 0x80
 800fe2a:	005b      	lsls	r3, r3, #1
 800fe2c:	4333      	orrs	r3, r6
 800fe2e:	931c      	str	r3, [sp, #112]	; 0x70
 800fe30:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800fe32:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fe34:	9310      	str	r3, [sp, #64]	; 0x40
 800fe36:	2c00      	cmp	r4, #0
 800fe38:	da18      	bge.n	800fe6c <_svfprintf_r+0x46c>
 800fe3a:	2280      	movs	r2, #128	; 0x80
 800fe3c:	0612      	lsls	r2, r2, #24
 800fe3e:	0023      	movs	r3, r4
 800fe40:	4694      	mov	ip, r2
 800fe42:	4463      	add	r3, ip
 800fe44:	9315      	str	r3, [sp, #84]	; 0x54
 800fe46:	232d      	movs	r3, #45	; 0x2d
 800fe48:	931b      	str	r3, [sp, #108]	; 0x6c
 800fe4a:	2320      	movs	r3, #32
 800fe4c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800fe4e:	439c      	bics	r4, r3
 800fe50:	2c46      	cmp	r4, #70	; 0x46
 800fe52:	d017      	beq.n	800fe84 <_svfprintf_r+0x484>
 800fe54:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800fe56:	2c45      	cmp	r4, #69	; 0x45
 800fe58:	d101      	bne.n	800fe5e <_svfprintf_r+0x45e>
 800fe5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe5c:	1c5d      	adds	r5, r3, #1
 800fe5e:	2302      	movs	r3, #2
 800fe60:	e012      	b.n	800fe88 <_svfprintf_r+0x488>
 800fe62:	2306      	movs	r3, #6
 800fe64:	930b      	str	r3, [sp, #44]	; 0x2c
 800fe66:	e7df      	b.n	800fe28 <_svfprintf_r+0x428>
 800fe68:	2301      	movs	r3, #1
 800fe6a:	e7fb      	b.n	800fe64 <_svfprintf_r+0x464>
 800fe6c:	9415      	str	r4, [sp, #84]	; 0x54
 800fe6e:	2300      	movs	r3, #0
 800fe70:	e7ea      	b.n	800fe48 <_svfprintf_r+0x448>
 800fe72:	46c0      	nop			; (mov r8, r8)
 800fe74:	0801572e 	.word	0x0801572e
 800fe78:	7fefffff 	.word	0x7fefffff
 800fe7c:	08015722 	.word	0x08015722
 800fe80:	0801571e 	.word	0x0801571e
 800fe84:	2303      	movs	r3, #3
 800fe86:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800fe88:	aa25      	add	r2, sp, #148	; 0x94
 800fe8a:	9204      	str	r2, [sp, #16]
 800fe8c:	aa22      	add	r2, sp, #136	; 0x88
 800fe8e:	9203      	str	r2, [sp, #12]
 800fe90:	aa21      	add	r2, sp, #132	; 0x84
 800fe92:	9202      	str	r2, [sp, #8]
 800fe94:	9300      	str	r3, [sp, #0]
 800fe96:	9501      	str	r5, [sp, #4]
 800fe98:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fe9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fe9e:	f000 fea9 	bl	8010bf4 <_dtoa_r>
 800fea2:	900c      	str	r0, [sp, #48]	; 0x30
 800fea4:	2c47      	cmp	r4, #71	; 0x47
 800fea6:	d103      	bne.n	800feb0 <_svfprintf_r+0x4b0>
 800fea8:	07f3      	lsls	r3, r6, #31
 800feaa:	d401      	bmi.n	800feb0 <_svfprintf_r+0x4b0>
 800feac:	f000 fde3 	bl	8010a76 <_svfprintf_r+0x1076>
 800feb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800feb2:	195b      	adds	r3, r3, r5
 800feb4:	930e      	str	r3, [sp, #56]	; 0x38
 800feb6:	2c46      	cmp	r4, #70	; 0x46
 800feb8:	d113      	bne.n	800fee2 <_svfprintf_r+0x4e2>
 800feba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800febc:	781b      	ldrb	r3, [r3, #0]
 800febe:	2b30      	cmp	r3, #48	; 0x30
 800fec0:	d10a      	bne.n	800fed8 <_svfprintf_r+0x4d8>
 800fec2:	2200      	movs	r2, #0
 800fec4:	2300      	movs	r3, #0
 800fec6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fec8:	9915      	ldr	r1, [sp, #84]	; 0x54
 800feca:	f7f0 facf 	bl	800046c <__aeabi_dcmpeq>
 800fece:	2800      	cmp	r0, #0
 800fed0:	d102      	bne.n	800fed8 <_svfprintf_r+0x4d8>
 800fed2:	2301      	movs	r3, #1
 800fed4:	1b5d      	subs	r5, r3, r5
 800fed6:	9521      	str	r5, [sp, #132]	; 0x84
 800fed8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800feda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fedc:	4694      	mov	ip, r2
 800fede:	4463      	add	r3, ip
 800fee0:	930e      	str	r3, [sp, #56]	; 0x38
 800fee2:	2200      	movs	r2, #0
 800fee4:	2300      	movs	r3, #0
 800fee6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fee8:	9915      	ldr	r1, [sp, #84]	; 0x54
 800feea:	f7f0 fabf 	bl	800046c <__aeabi_dcmpeq>
 800feee:	2230      	movs	r2, #48	; 0x30
 800fef0:	2800      	cmp	r0, #0
 800fef2:	d100      	bne.n	800fef6 <_svfprintf_r+0x4f6>
 800fef4:	e13d      	b.n	8010172 <_svfprintf_r+0x772>
 800fef6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fef8:	9325      	str	r3, [sp, #148]	; 0x94
 800fefa:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800fefc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fefe:	1a9b      	subs	r3, r3, r2
 800ff00:	930e      	str	r3, [sp, #56]	; 0x38
 800ff02:	2c47      	cmp	r4, #71	; 0x47
 800ff04:	d000      	beq.n	800ff08 <_svfprintf_r+0x508>
 800ff06:	e139      	b.n	801017c <_svfprintf_r+0x77c>
 800ff08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff0a:	1cda      	adds	r2, r3, #3
 800ff0c:	db03      	blt.n	800ff16 <_svfprintf_r+0x516>
 800ff0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ff10:	429a      	cmp	r2, r3
 800ff12:	db00      	blt.n	800ff16 <_svfprintf_r+0x516>
 800ff14:	e162      	b.n	80101dc <_svfprintf_r+0x7dc>
 800ff16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff18:	3b02      	subs	r3, #2
 800ff1a:	930d      	str	r3, [sp, #52]	; 0x34
 800ff1c:	4669      	mov	r1, sp
 800ff1e:	2034      	movs	r0, #52	; 0x34
 800ff20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ff22:	1809      	adds	r1, r1, r0
 800ff24:	7809      	ldrb	r1, [r1, #0]
 800ff26:	1e54      	subs	r4, r2, #1
 800ff28:	ab23      	add	r3, sp, #140	; 0x8c
 800ff2a:	9421      	str	r4, [sp, #132]	; 0x84
 800ff2c:	7019      	strb	r1, [r3, #0]
 800ff2e:	2c00      	cmp	r4, #0
 800ff30:	db00      	blt.n	800ff34 <_svfprintf_r+0x534>
 800ff32:	e13a      	b.n	80101aa <_svfprintf_r+0x7aa>
 800ff34:	2401      	movs	r4, #1
 800ff36:	1aa4      	subs	r4, r4, r2
 800ff38:	222d      	movs	r2, #45	; 0x2d
 800ff3a:	705a      	strb	r2, [r3, #1]
 800ff3c:	2c09      	cmp	r4, #9
 800ff3e:	dc00      	bgt.n	800ff42 <_svfprintf_r+0x542>
 800ff40:	e13c      	b.n	80101bc <_svfprintf_r+0x7bc>
 800ff42:	253b      	movs	r5, #59	; 0x3b
 800ff44:	ab18      	add	r3, sp, #96	; 0x60
 800ff46:	18ed      	adds	r5, r5, r3
 800ff48:	1e6b      	subs	r3, r5, #1
 800ff4a:	0020      	movs	r0, r4
 800ff4c:	210a      	movs	r1, #10
 800ff4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff50:	f7f0 fa76 	bl	8000440 <__aeabi_idivmod>
 800ff54:	1e6b      	subs	r3, r5, #1
 800ff56:	3130      	adds	r1, #48	; 0x30
 800ff58:	7019      	strb	r1, [r3, #0]
 800ff5a:	0020      	movs	r0, r4
 800ff5c:	210a      	movs	r1, #10
 800ff5e:	f7f0 f989 	bl	8000274 <__divsi3>
 800ff62:	0004      	movs	r4, r0
 800ff64:	2809      	cmp	r0, #9
 800ff66:	dd00      	ble.n	800ff6a <_svfprintf_r+0x56a>
 800ff68:	e121      	b.n	80101ae <_svfprintf_r+0x7ae>
 800ff6a:	232e      	movs	r3, #46	; 0x2e
 800ff6c:	213b      	movs	r1, #59	; 0x3b
 800ff6e:	aa18      	add	r2, sp, #96	; 0x60
 800ff70:	3d02      	subs	r5, #2
 800ff72:	3430      	adds	r4, #48	; 0x30
 800ff74:	702c      	strb	r4, [r5, #0]
 800ff76:	189b      	adds	r3, r3, r2
 800ff78:	1889      	adds	r1, r1, r2
 800ff7a:	001a      	movs	r2, r3
 800ff7c:	428d      	cmp	r5, r1
 800ff7e:	d200      	bcs.n	800ff82 <_svfprintf_r+0x582>
 800ff80:	e117      	b.n	80101b2 <_svfprintf_r+0x7b2>
 800ff82:	ab23      	add	r3, sp, #140	; 0x8c
 800ff84:	1ad3      	subs	r3, r2, r3
 800ff86:	9319      	str	r3, [sp, #100]	; 0x64
 800ff88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ff8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ff8c:	4694      	mov	ip, r2
 800ff8e:	4463      	add	r3, ip
 800ff90:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ff94:	2b01      	cmp	r3, #1
 800ff96:	dc03      	bgt.n	800ffa0 <_svfprintf_r+0x5a0>
 800ff98:	2301      	movs	r3, #1
 800ff9a:	401e      	ands	r6, r3
 800ff9c:	9610      	str	r6, [sp, #64]	; 0x40
 800ff9e:	d006      	beq.n	800ffae <_svfprintf_r+0x5ae>
 800ffa0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ffa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ffa4:	4694      	mov	ip, r2
 800ffa6:	4463      	add	r3, ip
 800ffa8:	930b      	str	r3, [sp, #44]	; 0x2c
 800ffaa:	2300      	movs	r3, #0
 800ffac:	9310      	str	r3, [sp, #64]	; 0x40
 800ffae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d004      	beq.n	800ffbe <_svfprintf_r+0x5be>
 800ffb4:	231f      	movs	r3, #31
 800ffb6:	222d      	movs	r2, #45	; 0x2d
 800ffb8:	a918      	add	r1, sp, #96	; 0x60
 800ffba:	185b      	adds	r3, r3, r1
 800ffbc:	701a      	strb	r2, [r3, #0]
 800ffbe:	2400      	movs	r4, #0
 800ffc0:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800ffc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ffc4:	9415      	str	r4, [sp, #84]	; 0x54
 800ffc6:	429c      	cmp	r4, r3
 800ffc8:	da00      	bge.n	800ffcc <_svfprintf_r+0x5cc>
 800ffca:	9315      	str	r3, [sp, #84]	; 0x54
 800ffcc:	231f      	movs	r3, #31
 800ffce:	aa18      	add	r2, sp, #96	; 0x60
 800ffd0:	189b      	adds	r3, r3, r2
 800ffd2:	781b      	ldrb	r3, [r3, #0]
 800ffd4:	1e5a      	subs	r2, r3, #1
 800ffd6:	4193      	sbcs	r3, r2
 800ffd8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ffda:	18d3      	adds	r3, r2, r3
 800ffdc:	9315      	str	r3, [sp, #84]	; 0x54
 800ffde:	2302      	movs	r3, #2
 800ffe0:	4033      	ands	r3, r6
 800ffe2:	931b      	str	r3, [sp, #108]	; 0x6c
 800ffe4:	d002      	beq.n	800ffec <_svfprintf_r+0x5ec>
 800ffe6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ffe8:	3302      	adds	r3, #2
 800ffea:	9315      	str	r3, [sp, #84]	; 0x54
 800ffec:	2384      	movs	r3, #132	; 0x84
 800ffee:	4033      	ands	r3, r6
 800fff0:	931c      	str	r3, [sp, #112]	; 0x70
 800fff2:	d11e      	bne.n	8010032 <_svfprintf_r+0x632>
 800fff4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fff6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fff8:	1a9d      	subs	r5, r3, r2
 800fffa:	2d00      	cmp	r5, #0
 800fffc:	dd19      	ble.n	8010032 <_svfprintf_r+0x632>
 800fffe:	4bcc      	ldr	r3, [pc, #816]	; (8010330 <_svfprintf_r+0x930>)
 8010000:	603b      	str	r3, [r7, #0]
 8010002:	2d10      	cmp	r5, #16
 8010004:	dd00      	ble.n	8010008 <_svfprintf_r+0x608>
 8010006:	e230      	b.n	801046a <_svfprintf_r+0xa6a>
 8010008:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801000a:	607d      	str	r5, [r7, #4]
 801000c:	195d      	adds	r5, r3, r5
 801000e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010010:	9529      	str	r5, [sp, #164]	; 0xa4
 8010012:	931d      	str	r3, [sp, #116]	; 0x74
 8010014:	3301      	adds	r3, #1
 8010016:	9328      	str	r3, [sp, #160]	; 0xa0
 8010018:	3708      	adds	r7, #8
 801001a:	2b07      	cmp	r3, #7
 801001c:	dd09      	ble.n	8010032 <_svfprintf_r+0x632>
 801001e:	aa27      	add	r2, sp, #156	; 0x9c
 8010020:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010022:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010024:	f001 ffd2 	bl	8011fcc <__ssprint_r>
 8010028:	2800      	cmp	r0, #0
 801002a:	d001      	beq.n	8010030 <_svfprintf_r+0x630>
 801002c:	f000 fce6 	bl	80109fc <_svfprintf_r+0xffc>
 8010030:	af34      	add	r7, sp, #208	; 0xd0
 8010032:	231f      	movs	r3, #31
 8010034:	aa18      	add	r2, sp, #96	; 0x60
 8010036:	189b      	adds	r3, r3, r2
 8010038:	781a      	ldrb	r2, [r3, #0]
 801003a:	2a00      	cmp	r2, #0
 801003c:	d016      	beq.n	801006c <_svfprintf_r+0x66c>
 801003e:	603b      	str	r3, [r7, #0]
 8010040:	2301      	movs	r3, #1
 8010042:	607b      	str	r3, [r7, #4]
 8010044:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010046:	3708      	adds	r7, #8
 8010048:	3301      	adds	r3, #1
 801004a:	9329      	str	r3, [sp, #164]	; 0xa4
 801004c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801004e:	931d      	str	r3, [sp, #116]	; 0x74
 8010050:	3301      	adds	r3, #1
 8010052:	9328      	str	r3, [sp, #160]	; 0xa0
 8010054:	2b07      	cmp	r3, #7
 8010056:	dd09      	ble.n	801006c <_svfprintf_r+0x66c>
 8010058:	aa27      	add	r2, sp, #156	; 0x9c
 801005a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801005c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801005e:	f001 ffb5 	bl	8011fcc <__ssprint_r>
 8010062:	2800      	cmp	r0, #0
 8010064:	d001      	beq.n	801006a <_svfprintf_r+0x66a>
 8010066:	f000 fcc9 	bl	80109fc <_svfprintf_r+0xffc>
 801006a:	af34      	add	r7, sp, #208	; 0xd0
 801006c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801006e:	2b00      	cmp	r3, #0
 8010070:	d017      	beq.n	80100a2 <_svfprintf_r+0x6a2>
 8010072:	ab20      	add	r3, sp, #128	; 0x80
 8010074:	603b      	str	r3, [r7, #0]
 8010076:	2302      	movs	r3, #2
 8010078:	607b      	str	r3, [r7, #4]
 801007a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801007c:	3708      	adds	r7, #8
 801007e:	3302      	adds	r3, #2
 8010080:	9329      	str	r3, [sp, #164]	; 0xa4
 8010082:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010084:	931b      	str	r3, [sp, #108]	; 0x6c
 8010086:	3301      	adds	r3, #1
 8010088:	9328      	str	r3, [sp, #160]	; 0xa0
 801008a:	2b07      	cmp	r3, #7
 801008c:	dd09      	ble.n	80100a2 <_svfprintf_r+0x6a2>
 801008e:	aa27      	add	r2, sp, #156	; 0x9c
 8010090:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010092:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010094:	f001 ff9a 	bl	8011fcc <__ssprint_r>
 8010098:	2800      	cmp	r0, #0
 801009a:	d001      	beq.n	80100a0 <_svfprintf_r+0x6a0>
 801009c:	f000 fcae 	bl	80109fc <_svfprintf_r+0xffc>
 80100a0:	af34      	add	r7, sp, #208	; 0xd0
 80100a2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80100a4:	2b80      	cmp	r3, #128	; 0x80
 80100a6:	d11e      	bne.n	80100e6 <_svfprintf_r+0x6e6>
 80100a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80100aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80100ac:	1a9d      	subs	r5, r3, r2
 80100ae:	2d00      	cmp	r5, #0
 80100b0:	dd19      	ble.n	80100e6 <_svfprintf_r+0x6e6>
 80100b2:	4ba0      	ldr	r3, [pc, #640]	; (8010334 <_svfprintf_r+0x934>)
 80100b4:	603b      	str	r3, [r7, #0]
 80100b6:	2d10      	cmp	r5, #16
 80100b8:	dd00      	ble.n	80100bc <_svfprintf_r+0x6bc>
 80100ba:	e1ed      	b.n	8010498 <_svfprintf_r+0xa98>
 80100bc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80100be:	607d      	str	r5, [r7, #4]
 80100c0:	195d      	adds	r5, r3, r5
 80100c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80100c4:	9529      	str	r5, [sp, #164]	; 0xa4
 80100c6:	931b      	str	r3, [sp, #108]	; 0x6c
 80100c8:	3301      	adds	r3, #1
 80100ca:	9328      	str	r3, [sp, #160]	; 0xa0
 80100cc:	3708      	adds	r7, #8
 80100ce:	2b07      	cmp	r3, #7
 80100d0:	dd09      	ble.n	80100e6 <_svfprintf_r+0x6e6>
 80100d2:	aa27      	add	r2, sp, #156	; 0x9c
 80100d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80100d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80100d8:	f001 ff78 	bl	8011fcc <__ssprint_r>
 80100dc:	2800      	cmp	r0, #0
 80100de:	d001      	beq.n	80100e4 <_svfprintf_r+0x6e4>
 80100e0:	f000 fc8c 	bl	80109fc <_svfprintf_r+0xffc>
 80100e4:	af34      	add	r7, sp, #208	; 0xd0
 80100e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100e8:	2510      	movs	r5, #16
 80100ea:	1ae4      	subs	r4, r4, r3
 80100ec:	2c00      	cmp	r4, #0
 80100ee:	dd00      	ble.n	80100f2 <_svfprintf_r+0x6f2>
 80100f0:	e1fe      	b.n	80104f0 <_svfprintf_r+0xaf0>
 80100f2:	05f3      	lsls	r3, r6, #23
 80100f4:	d500      	bpl.n	80100f8 <_svfprintf_r+0x6f8>
 80100f6:	e215      	b.n	8010524 <_svfprintf_r+0xb24>
 80100f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80100fa:	603b      	str	r3, [r7, #0]
 80100fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100fe:	607b      	str	r3, [r7, #4]
 8010100:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010102:	3708      	adds	r7, #8
 8010104:	930c      	str	r3, [sp, #48]	; 0x30
 8010106:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801010a:	4694      	mov	ip, r2
 801010c:	4463      	add	r3, ip
 801010e:	9329      	str	r3, [sp, #164]	; 0xa4
 8010110:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010112:	930b      	str	r3, [sp, #44]	; 0x2c
 8010114:	3301      	adds	r3, #1
 8010116:	9328      	str	r3, [sp, #160]	; 0xa0
 8010118:	2b07      	cmp	r3, #7
 801011a:	dd09      	ble.n	8010130 <_svfprintf_r+0x730>
 801011c:	aa27      	add	r2, sp, #156	; 0x9c
 801011e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010120:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010122:	f001 ff53 	bl	8011fcc <__ssprint_r>
 8010126:	2800      	cmp	r0, #0
 8010128:	d001      	beq.n	801012e <_svfprintf_r+0x72e>
 801012a:	f000 fc67 	bl	80109fc <_svfprintf_r+0xffc>
 801012e:	af34      	add	r7, sp, #208	; 0xd0
 8010130:	0773      	lsls	r3, r6, #29
 8010132:	d501      	bpl.n	8010138 <_svfprintf_r+0x738>
 8010134:	f000 fc41 	bl	80109ba <_svfprintf_r+0xfba>
 8010138:	9914      	ldr	r1, [sp, #80]	; 0x50
 801013a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801013c:	4299      	cmp	r1, r3
 801013e:	da00      	bge.n	8010142 <_svfprintf_r+0x742>
 8010140:	0019      	movs	r1, r3
 8010142:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010144:	185b      	adds	r3, r3, r1
 8010146:	9313      	str	r3, [sp, #76]	; 0x4c
 8010148:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801014a:	930b      	str	r3, [sp, #44]	; 0x2c
 801014c:	2b00      	cmp	r3, #0
 801014e:	d008      	beq.n	8010162 <_svfprintf_r+0x762>
 8010150:	aa27      	add	r2, sp, #156	; 0x9c
 8010152:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010154:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010156:	f001 ff39 	bl	8011fcc <__ssprint_r>
 801015a:	2800      	cmp	r0, #0
 801015c:	d001      	beq.n	8010162 <_svfprintf_r+0x762>
 801015e:	f000 fc4d 	bl	80109fc <_svfprintf_r+0xffc>
 8010162:	2300      	movs	r3, #0
 8010164:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010166:	9328      	str	r3, [sp, #160]	; 0xa0
 8010168:	af34      	add	r7, sp, #208	; 0xd0
 801016a:	e480      	b.n	800fa6e <_svfprintf_r+0x6e>
 801016c:	1c59      	adds	r1, r3, #1
 801016e:	9125      	str	r1, [sp, #148]	; 0x94
 8010170:	701a      	strb	r2, [r3, #0]
 8010172:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8010174:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010176:	4299      	cmp	r1, r3
 8010178:	d8f8      	bhi.n	801016c <_svfprintf_r+0x76c>
 801017a:	e6be      	b.n	800fefa <_svfprintf_r+0x4fa>
 801017c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801017e:	2b65      	cmp	r3, #101	; 0x65
 8010180:	dc00      	bgt.n	8010184 <_svfprintf_r+0x784>
 8010182:	e6cb      	b.n	800ff1c <_svfprintf_r+0x51c>
 8010184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010186:	2b66      	cmp	r3, #102	; 0x66
 8010188:	d128      	bne.n	80101dc <_svfprintf_r+0x7dc>
 801018a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801018c:	2b00      	cmp	r3, #0
 801018e:	dd1c      	ble.n	80101ca <_svfprintf_r+0x7ca>
 8010190:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010192:	2a00      	cmp	r2, #0
 8010194:	d101      	bne.n	801019a <_svfprintf_r+0x79a>
 8010196:	07f2      	lsls	r2, r6, #31
 8010198:	d503      	bpl.n	80101a2 <_svfprintf_r+0x7a2>
 801019a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801019c:	189b      	adds	r3, r3, r2
 801019e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80101a0:	189b      	adds	r3, r3, r2
 80101a2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80101a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80101a6:	9210      	str	r2, [sp, #64]	; 0x40
 80101a8:	e701      	b.n	800ffae <_svfprintf_r+0x5ae>
 80101aa:	222b      	movs	r2, #43	; 0x2b
 80101ac:	e6c5      	b.n	800ff3a <_svfprintf_r+0x53a>
 80101ae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80101b0:	e6ca      	b.n	800ff48 <_svfprintf_r+0x548>
 80101b2:	782a      	ldrb	r2, [r5, #0]
 80101b4:	3501      	adds	r5, #1
 80101b6:	701a      	strb	r2, [r3, #0]
 80101b8:	3301      	adds	r3, #1
 80101ba:	e6de      	b.n	800ff7a <_svfprintf_r+0x57a>
 80101bc:	2230      	movs	r2, #48	; 0x30
 80101be:	ab23      	add	r3, sp, #140	; 0x8c
 80101c0:	18a4      	adds	r4, r4, r2
 80101c2:	709a      	strb	r2, [r3, #2]
 80101c4:	70dc      	strb	r4, [r3, #3]
 80101c6:	aa24      	add	r2, sp, #144	; 0x90
 80101c8:	e6db      	b.n	800ff82 <_svfprintf_r+0x582>
 80101ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d102      	bne.n	80101d6 <_svfprintf_r+0x7d6>
 80101d0:	3301      	adds	r3, #1
 80101d2:	421e      	tst	r6, r3
 80101d4:	d0e5      	beq.n	80101a2 <_svfprintf_r+0x7a2>
 80101d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80101d8:	3301      	adds	r3, #1
 80101da:	e7e0      	b.n	801019e <_svfprintf_r+0x79e>
 80101dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80101de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80101e0:	429a      	cmp	r2, r3
 80101e2:	db06      	blt.n	80101f2 <_svfprintf_r+0x7f2>
 80101e4:	07f3      	lsls	r3, r6, #31
 80101e6:	d50e      	bpl.n	8010206 <_svfprintf_r+0x806>
 80101e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80101ea:	18d3      	adds	r3, r2, r3
 80101ec:	2267      	movs	r2, #103	; 0x67
 80101ee:	920d      	str	r2, [sp, #52]	; 0x34
 80101f0:	e7d7      	b.n	80101a2 <_svfprintf_r+0x7a2>
 80101f2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80101f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80101f6:	185b      	adds	r3, r3, r1
 80101f8:	2167      	movs	r1, #103	; 0x67
 80101fa:	910d      	str	r1, [sp, #52]	; 0x34
 80101fc:	2a00      	cmp	r2, #0
 80101fe:	dcd0      	bgt.n	80101a2 <_svfprintf_r+0x7a2>
 8010200:	1a9b      	subs	r3, r3, r2
 8010202:	3301      	adds	r3, #1
 8010204:	e7cd      	b.n	80101a2 <_svfprintf_r+0x7a2>
 8010206:	0013      	movs	r3, r2
 8010208:	e7f0      	b.n	80101ec <_svfprintf_r+0x7ec>
 801020a:	2b00      	cmp	r3, #0
 801020c:	d003      	beq.n	8010216 <_svfprintf_r+0x816>
 801020e:	231f      	movs	r3, #31
 8010210:	a918      	add	r1, sp, #96	; 0x60
 8010212:	185b      	adds	r3, r3, r1
 8010214:	701a      	strb	r2, [r3, #0]
 8010216:	1d2b      	adds	r3, r5, #4
 8010218:	06b2      	lsls	r2, r6, #26
 801021a:	d506      	bpl.n	801022a <_svfprintf_r+0x82a>
 801021c:	682a      	ldr	r2, [r5, #0]
 801021e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010220:	6011      	str	r1, [r2, #0]
 8010222:	17c9      	asrs	r1, r1, #31
 8010224:	6051      	str	r1, [r2, #4]
 8010226:	001d      	movs	r5, r3
 8010228:	e421      	b.n	800fa6e <_svfprintf_r+0x6e>
 801022a:	06f2      	lsls	r2, r6, #27
 801022c:	d503      	bpl.n	8010236 <_svfprintf_r+0x836>
 801022e:	682a      	ldr	r2, [r5, #0]
 8010230:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010232:	6011      	str	r1, [r2, #0]
 8010234:	e7f7      	b.n	8010226 <_svfprintf_r+0x826>
 8010236:	0672      	lsls	r2, r6, #25
 8010238:	d5f9      	bpl.n	801022e <_svfprintf_r+0x82e>
 801023a:	4669      	mov	r1, sp
 801023c:	204c      	movs	r0, #76	; 0x4c
 801023e:	1809      	adds	r1, r1, r0
 8010240:	682a      	ldr	r2, [r5, #0]
 8010242:	8809      	ldrh	r1, [r1, #0]
 8010244:	8011      	strh	r1, [r2, #0]
 8010246:	e7ee      	b.n	8010226 <_svfprintf_r+0x826>
 8010248:	2310      	movs	r3, #16
 801024a:	431e      	orrs	r6, r3
 801024c:	2120      	movs	r1, #32
 801024e:	4031      	ands	r1, r6
 8010250:	d010      	beq.n	8010274 <_svfprintf_r+0x874>
 8010252:	2307      	movs	r3, #7
 8010254:	3507      	adds	r5, #7
 8010256:	439d      	bics	r5, r3
 8010258:	002b      	movs	r3, r5
 801025a:	3308      	adds	r3, #8
 801025c:	930f      	str	r3, [sp, #60]	; 0x3c
 801025e:	682b      	ldr	r3, [r5, #0]
 8010260:	686c      	ldr	r4, [r5, #4]
 8010262:	9306      	str	r3, [sp, #24]
 8010264:	9407      	str	r4, [sp, #28]
 8010266:	2300      	movs	r3, #0
 8010268:	221f      	movs	r2, #31
 801026a:	2100      	movs	r1, #0
 801026c:	a818      	add	r0, sp, #96	; 0x60
 801026e:	1812      	adds	r2, r2, r0
 8010270:	7011      	strb	r1, [r2, #0]
 8010272:	e4bf      	b.n	800fbf4 <_svfprintf_r+0x1f4>
 8010274:	2210      	movs	r2, #16
 8010276:	1d28      	adds	r0, r5, #4
 8010278:	4032      	ands	r2, r6
 801027a:	d004      	beq.n	8010286 <_svfprintf_r+0x886>
 801027c:	682b      	ldr	r3, [r5, #0]
 801027e:	900f      	str	r0, [sp, #60]	; 0x3c
 8010280:	9306      	str	r3, [sp, #24]
 8010282:	9107      	str	r1, [sp, #28]
 8010284:	e7ef      	b.n	8010266 <_svfprintf_r+0x866>
 8010286:	2340      	movs	r3, #64	; 0x40
 8010288:	900f      	str	r0, [sp, #60]	; 0x3c
 801028a:	4033      	ands	r3, r6
 801028c:	d004      	beq.n	8010298 <_svfprintf_r+0x898>
 801028e:	682b      	ldr	r3, [r5, #0]
 8010290:	9207      	str	r2, [sp, #28]
 8010292:	b29b      	uxth	r3, r3
 8010294:	9306      	str	r3, [sp, #24]
 8010296:	e7e6      	b.n	8010266 <_svfprintf_r+0x866>
 8010298:	682a      	ldr	r2, [r5, #0]
 801029a:	9307      	str	r3, [sp, #28]
 801029c:	9206      	str	r2, [sp, #24]
 801029e:	e7e3      	b.n	8010268 <_svfprintf_r+0x868>
 80102a0:	1d2b      	adds	r3, r5, #4
 80102a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80102a4:	682b      	ldr	r3, [r5, #0]
 80102a6:	2078      	movs	r0, #120	; 0x78
 80102a8:	2130      	movs	r1, #48	; 0x30
 80102aa:	9306      	str	r3, [sp, #24]
 80102ac:	2300      	movs	r3, #0
 80102ae:	aa20      	add	r2, sp, #128	; 0x80
 80102b0:	7011      	strb	r1, [r2, #0]
 80102b2:	7050      	strb	r0, [r2, #1]
 80102b4:	4a20      	ldr	r2, [pc, #128]	; (8010338 <_svfprintf_r+0x938>)
 80102b6:	9307      	str	r3, [sp, #28]
 80102b8:	3302      	adds	r3, #2
 80102ba:	431e      	orrs	r6, r3
 80102bc:	921a      	str	r2, [sp, #104]	; 0x68
 80102be:	900d      	str	r0, [sp, #52]	; 0x34
 80102c0:	e7d2      	b.n	8010268 <_svfprintf_r+0x868>
 80102c2:	1d2b      	adds	r3, r5, #4
 80102c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80102c6:	682b      	ldr	r3, [r5, #0]
 80102c8:	2400      	movs	r4, #0
 80102ca:	930c      	str	r3, [sp, #48]	; 0x30
 80102cc:	231f      	movs	r3, #31
 80102ce:	aa18      	add	r2, sp, #96	; 0x60
 80102d0:	189b      	adds	r3, r3, r2
 80102d2:	701c      	strb	r4, [r3, #0]
 80102d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102d6:	3301      	adds	r3, #1
 80102d8:	d00b      	beq.n	80102f2 <_svfprintf_r+0x8f2>
 80102da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80102dc:	0021      	movs	r1, r4
 80102de:	980c      	ldr	r0, [sp, #48]	; 0x30
 80102e0:	f001 fb86 	bl	80119f0 <memchr>
 80102e4:	42a0      	cmp	r0, r4
 80102e6:	d100      	bne.n	80102ea <_svfprintf_r+0x8ea>
 80102e8:	e0bd      	b.n	8010466 <_svfprintf_r+0xa66>
 80102ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80102ec:	1ac3      	subs	r3, r0, r3
 80102ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80102f0:	e58d      	b.n	800fe0e <_svfprintf_r+0x40e>
 80102f2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80102f4:	f7ef ff0e 	bl	8000114 <strlen>
 80102f8:	900b      	str	r0, [sp, #44]	; 0x2c
 80102fa:	e588      	b.n	800fe0e <_svfprintf_r+0x40e>
 80102fc:	2310      	movs	r3, #16
 80102fe:	431e      	orrs	r6, r3
 8010300:	2320      	movs	r3, #32
 8010302:	4033      	ands	r3, r6
 8010304:	d00b      	beq.n	801031e <_svfprintf_r+0x91e>
 8010306:	2307      	movs	r3, #7
 8010308:	3507      	adds	r5, #7
 801030a:	439d      	bics	r5, r3
 801030c:	002b      	movs	r3, r5
 801030e:	3308      	adds	r3, #8
 8010310:	930f      	str	r3, [sp, #60]	; 0x3c
 8010312:	682b      	ldr	r3, [r5, #0]
 8010314:	686c      	ldr	r4, [r5, #4]
 8010316:	9306      	str	r3, [sp, #24]
 8010318:	9407      	str	r4, [sp, #28]
 801031a:	2301      	movs	r3, #1
 801031c:	e7a4      	b.n	8010268 <_svfprintf_r+0x868>
 801031e:	2210      	movs	r2, #16
 8010320:	1d29      	adds	r1, r5, #4
 8010322:	4032      	ands	r2, r6
 8010324:	d00a      	beq.n	801033c <_svfprintf_r+0x93c>
 8010326:	910f      	str	r1, [sp, #60]	; 0x3c
 8010328:	682a      	ldr	r2, [r5, #0]
 801032a:	9307      	str	r3, [sp, #28]
 801032c:	9206      	str	r2, [sp, #24]
 801032e:	e7f4      	b.n	801031a <_svfprintf_r+0x91a>
 8010330:	08015752 	.word	0x08015752
 8010334:	08015762 	.word	0x08015762
 8010338:	0801573f 	.word	0x0801573f
 801033c:	2340      	movs	r3, #64	; 0x40
 801033e:	910f      	str	r1, [sp, #60]	; 0x3c
 8010340:	4033      	ands	r3, r6
 8010342:	d0f1      	beq.n	8010328 <_svfprintf_r+0x928>
 8010344:	682b      	ldr	r3, [r5, #0]
 8010346:	9207      	str	r2, [sp, #28]
 8010348:	b29b      	uxth	r3, r3
 801034a:	9306      	str	r3, [sp, #24]
 801034c:	e7e5      	b.n	801031a <_svfprintf_r+0x91a>
 801034e:	2b00      	cmp	r3, #0
 8010350:	d003      	beq.n	801035a <_svfprintf_r+0x95a>
 8010352:	231f      	movs	r3, #31
 8010354:	a918      	add	r1, sp, #96	; 0x60
 8010356:	185b      	adds	r3, r3, r1
 8010358:	701a      	strb	r2, [r3, #0]
 801035a:	4baa      	ldr	r3, [pc, #680]	; (8010604 <_svfprintf_r+0xc04>)
 801035c:	e471      	b.n	800fc42 <_svfprintf_r+0x242>
 801035e:	2210      	movs	r2, #16
 8010360:	1d29      	adds	r1, r5, #4
 8010362:	4032      	ands	r2, r6
 8010364:	d004      	beq.n	8010370 <_svfprintf_r+0x970>
 8010366:	910f      	str	r1, [sp, #60]	; 0x3c
 8010368:	682a      	ldr	r2, [r5, #0]
 801036a:	9307      	str	r3, [sp, #28]
 801036c:	9206      	str	r2, [sp, #24]
 801036e:	e477      	b.n	800fc60 <_svfprintf_r+0x260>
 8010370:	2340      	movs	r3, #64	; 0x40
 8010372:	910f      	str	r1, [sp, #60]	; 0x3c
 8010374:	4033      	ands	r3, r6
 8010376:	d0f7      	beq.n	8010368 <_svfprintf_r+0x968>
 8010378:	682b      	ldr	r3, [r5, #0]
 801037a:	9207      	str	r2, [sp, #28]
 801037c:	b29b      	uxth	r3, r3
 801037e:	9306      	str	r3, [sp, #24]
 8010380:	e46e      	b.n	800fc60 <_svfprintf_r+0x260>
 8010382:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010384:	e38a      	b.n	8010a9c <_svfprintf_r+0x109c>
 8010386:	9b07      	ldr	r3, [sp, #28]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d10a      	bne.n	80103a2 <_svfprintf_r+0x9a2>
 801038c:	9b06      	ldr	r3, [sp, #24]
 801038e:	2b09      	cmp	r3, #9
 8010390:	d807      	bhi.n	80103a2 <_svfprintf_r+0x9a2>
 8010392:	9b06      	ldr	r3, [sp, #24]
 8010394:	aa2c      	add	r2, sp, #176	; 0xb0
 8010396:	3330      	adds	r3, #48	; 0x30
 8010398:	77d3      	strb	r3, [r2, #31]
 801039a:	236f      	movs	r3, #111	; 0x6f
 801039c:	aa18      	add	r2, sp, #96	; 0x60
 801039e:	189b      	adds	r3, r3, r2
 80103a0:	e39a      	b.n	8010ad8 <_svfprintf_r+0x10d8>
 80103a2:	ab34      	add	r3, sp, #208	; 0xd0
 80103a4:	930c      	str	r3, [sp, #48]	; 0x30
 80103a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80103a8:	9806      	ldr	r0, [sp, #24]
 80103aa:	9907      	ldr	r1, [sp, #28]
 80103ac:	3b01      	subs	r3, #1
 80103ae:	930c      	str	r3, [sp, #48]	; 0x30
 80103b0:	220a      	movs	r2, #10
 80103b2:	2300      	movs	r3, #0
 80103b4:	f7f0 f888 	bl	80004c8 <__aeabi_uldivmod>
 80103b8:	9806      	ldr	r0, [sp, #24]
 80103ba:	9907      	ldr	r1, [sp, #28]
 80103bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80103be:	3230      	adds	r2, #48	; 0x30
 80103c0:	701a      	strb	r2, [r3, #0]
 80103c2:	220a      	movs	r2, #10
 80103c4:	2300      	movs	r3, #0
 80103c6:	f7f0 f87f 	bl	80004c8 <__aeabi_uldivmod>
 80103ca:	9006      	str	r0, [sp, #24]
 80103cc:	9107      	str	r1, [sp, #28]
 80103ce:	9b06      	ldr	r3, [sp, #24]
 80103d0:	9a07      	ldr	r2, [sp, #28]
 80103d2:	4313      	orrs	r3, r2
 80103d4:	d1e7      	bne.n	80103a6 <_svfprintf_r+0x9a6>
 80103d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80103d8:	ab34      	add	r3, sp, #208	; 0xd0
 80103da:	1a9b      	subs	r3, r3, r2
 80103dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80103de:	930b      	str	r3, [sp, #44]	; 0x2c
 80103e0:	2300      	movs	r3, #0
 80103e2:	002e      	movs	r6, r5
 80103e4:	9310      	str	r3, [sp, #64]	; 0x40
 80103e6:	e5ec      	b.n	800ffc2 <_svfprintf_r+0x5c2>
 80103e8:	2300      	movs	r3, #0
 80103ea:	2400      	movs	r4, #0
 80103ec:	9306      	str	r3, [sp, #24]
 80103ee:	9407      	str	r4, [sp, #28]
 80103f0:	200f      	movs	r0, #15
 80103f2:	ab34      	add	r3, sp, #208	; 0xd0
 80103f4:	930c      	str	r3, [sp, #48]	; 0x30
 80103f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80103f8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80103fa:	3b01      	subs	r3, #1
 80103fc:	930c      	str	r3, [sp, #48]	; 0x30
 80103fe:	9b06      	ldr	r3, [sp, #24]
 8010400:	4003      	ands	r3, r0
 8010402:	5cd3      	ldrb	r3, [r2, r3]
 8010404:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010406:	7013      	strb	r3, [r2, #0]
 8010408:	9b07      	ldr	r3, [sp, #28]
 801040a:	0719      	lsls	r1, r3, #28
 801040c:	9b06      	ldr	r3, [sp, #24]
 801040e:	091a      	lsrs	r2, r3, #4
 8010410:	9b07      	ldr	r3, [sp, #28]
 8010412:	4311      	orrs	r1, r2
 8010414:	091b      	lsrs	r3, r3, #4
 8010416:	9307      	str	r3, [sp, #28]
 8010418:	000b      	movs	r3, r1
 801041a:	9a07      	ldr	r2, [sp, #28]
 801041c:	9106      	str	r1, [sp, #24]
 801041e:	4313      	orrs	r3, r2
 8010420:	d1e9      	bne.n	80103f6 <_svfprintf_r+0x9f6>
 8010422:	e7d8      	b.n	80103d6 <_svfprintf_r+0x9d6>
 8010424:	aa34      	add	r2, sp, #208	; 0xd0
 8010426:	920c      	str	r2, [sp, #48]	; 0x30
 8010428:	2b00      	cmp	r3, #0
 801042a:	d1d4      	bne.n	80103d6 <_svfprintf_r+0x9d6>
 801042c:	07f3      	lsls	r3, r6, #31
 801042e:	d5d2      	bpl.n	80103d6 <_svfprintf_r+0x9d6>
 8010430:	2230      	movs	r2, #48	; 0x30
 8010432:	ab2c      	add	r3, sp, #176	; 0xb0
 8010434:	77da      	strb	r2, [r3, #31]
 8010436:	e7b0      	b.n	801039a <_svfprintf_r+0x99a>
 8010438:	2b00      	cmp	r3, #0
 801043a:	d003      	beq.n	8010444 <_svfprintf_r+0xa44>
 801043c:	231f      	movs	r3, #31
 801043e:	a918      	add	r1, sp, #96	; 0x60
 8010440:	185b      	adds	r3, r3, r1
 8010442:	701a      	strb	r2, [r3, #0]
 8010444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010446:	2b00      	cmp	r3, #0
 8010448:	d100      	bne.n	801044c <_svfprintf_r+0xa4c>
 801044a:	e2f6      	b.n	8010a3a <_svfprintf_r+0x103a>
 801044c:	2134      	movs	r1, #52	; 0x34
 801044e:	466a      	mov	r2, sp
 8010450:	1852      	adds	r2, r2, r1
 8010452:	7812      	ldrb	r2, [r2, #0]
 8010454:	ab2a      	add	r3, sp, #168	; 0xa8
 8010456:	701a      	strb	r2, [r3, #0]
 8010458:	221f      	movs	r2, #31
 801045a:	2400      	movs	r4, #0
 801045c:	a918      	add	r1, sp, #96	; 0x60
 801045e:	1852      	adds	r2, r2, r1
 8010460:	7014      	strb	r4, [r2, #0]
 8010462:	950f      	str	r5, [sp, #60]	; 0x3c
 8010464:	e473      	b.n	800fd4e <_svfprintf_r+0x34e>
 8010466:	0004      	movs	r4, r0
 8010468:	e4d1      	b.n	800fe0e <_svfprintf_r+0x40e>
 801046a:	2310      	movs	r3, #16
 801046c:	607b      	str	r3, [r7, #4]
 801046e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010470:	3708      	adds	r7, #8
 8010472:	3310      	adds	r3, #16
 8010474:	9329      	str	r3, [sp, #164]	; 0xa4
 8010476:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010478:	931d      	str	r3, [sp, #116]	; 0x74
 801047a:	3301      	adds	r3, #1
 801047c:	9328      	str	r3, [sp, #160]	; 0xa0
 801047e:	2b07      	cmp	r3, #7
 8010480:	dd08      	ble.n	8010494 <_svfprintf_r+0xa94>
 8010482:	aa27      	add	r2, sp, #156	; 0x9c
 8010484:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010486:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010488:	f001 fda0 	bl	8011fcc <__ssprint_r>
 801048c:	2800      	cmp	r0, #0
 801048e:	d000      	beq.n	8010492 <_svfprintf_r+0xa92>
 8010490:	e2b4      	b.n	80109fc <_svfprintf_r+0xffc>
 8010492:	af34      	add	r7, sp, #208	; 0xd0
 8010494:	3d10      	subs	r5, #16
 8010496:	e5b2      	b.n	800fffe <_svfprintf_r+0x5fe>
 8010498:	2310      	movs	r3, #16
 801049a:	607b      	str	r3, [r7, #4]
 801049c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801049e:	3708      	adds	r7, #8
 80104a0:	3310      	adds	r3, #16
 80104a2:	9329      	str	r3, [sp, #164]	; 0xa4
 80104a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80104a6:	931b      	str	r3, [sp, #108]	; 0x6c
 80104a8:	3301      	adds	r3, #1
 80104aa:	9328      	str	r3, [sp, #160]	; 0xa0
 80104ac:	2b07      	cmp	r3, #7
 80104ae:	dd08      	ble.n	80104c2 <_svfprintf_r+0xac2>
 80104b0:	aa27      	add	r2, sp, #156	; 0x9c
 80104b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80104b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80104b6:	f001 fd89 	bl	8011fcc <__ssprint_r>
 80104ba:	2800      	cmp	r0, #0
 80104bc:	d000      	beq.n	80104c0 <_svfprintf_r+0xac0>
 80104be:	e29d      	b.n	80109fc <_svfprintf_r+0xffc>
 80104c0:	af34      	add	r7, sp, #208	; 0xd0
 80104c2:	3d10      	subs	r5, #16
 80104c4:	e5f5      	b.n	80100b2 <_svfprintf_r+0x6b2>
 80104c6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80104c8:	607d      	str	r5, [r7, #4]
 80104ca:	3310      	adds	r3, #16
 80104cc:	9329      	str	r3, [sp, #164]	; 0xa4
 80104ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80104d0:	3708      	adds	r7, #8
 80104d2:	931b      	str	r3, [sp, #108]	; 0x6c
 80104d4:	3301      	adds	r3, #1
 80104d6:	9328      	str	r3, [sp, #160]	; 0xa0
 80104d8:	2b07      	cmp	r3, #7
 80104da:	dd08      	ble.n	80104ee <_svfprintf_r+0xaee>
 80104dc:	aa27      	add	r2, sp, #156	; 0x9c
 80104de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80104e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80104e2:	f001 fd73 	bl	8011fcc <__ssprint_r>
 80104e6:	2800      	cmp	r0, #0
 80104e8:	d000      	beq.n	80104ec <_svfprintf_r+0xaec>
 80104ea:	e287      	b.n	80109fc <_svfprintf_r+0xffc>
 80104ec:	af34      	add	r7, sp, #208	; 0xd0
 80104ee:	3c10      	subs	r4, #16
 80104f0:	4b45      	ldr	r3, [pc, #276]	; (8010608 <_svfprintf_r+0xc08>)
 80104f2:	603b      	str	r3, [r7, #0]
 80104f4:	2c10      	cmp	r4, #16
 80104f6:	dce6      	bgt.n	80104c6 <_svfprintf_r+0xac6>
 80104f8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80104fa:	607c      	str	r4, [r7, #4]
 80104fc:	191c      	adds	r4, r3, r4
 80104fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010500:	9429      	str	r4, [sp, #164]	; 0xa4
 8010502:	931b      	str	r3, [sp, #108]	; 0x6c
 8010504:	3301      	adds	r3, #1
 8010506:	9328      	str	r3, [sp, #160]	; 0xa0
 8010508:	3708      	adds	r7, #8
 801050a:	2b07      	cmp	r3, #7
 801050c:	dc00      	bgt.n	8010510 <_svfprintf_r+0xb10>
 801050e:	e5f0      	b.n	80100f2 <_svfprintf_r+0x6f2>
 8010510:	aa27      	add	r2, sp, #156	; 0x9c
 8010512:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010514:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010516:	f001 fd59 	bl	8011fcc <__ssprint_r>
 801051a:	2800      	cmp	r0, #0
 801051c:	d000      	beq.n	8010520 <_svfprintf_r+0xb20>
 801051e:	e26d      	b.n	80109fc <_svfprintf_r+0xffc>
 8010520:	af34      	add	r7, sp, #208	; 0xd0
 8010522:	e5e6      	b.n	80100f2 <_svfprintf_r+0x6f2>
 8010524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010526:	2b65      	cmp	r3, #101	; 0x65
 8010528:	dc00      	bgt.n	801052c <_svfprintf_r+0xb2c>
 801052a:	e1b0      	b.n	801088e <_svfprintf_r+0xe8e>
 801052c:	2200      	movs	r2, #0
 801052e:	2300      	movs	r3, #0
 8010530:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010532:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8010534:	f7ef ff9a 	bl	800046c <__aeabi_dcmpeq>
 8010538:	2800      	cmp	r0, #0
 801053a:	d069      	beq.n	8010610 <_svfprintf_r+0xc10>
 801053c:	4b33      	ldr	r3, [pc, #204]	; (801060c <_svfprintf_r+0xc0c>)
 801053e:	603b      	str	r3, [r7, #0]
 8010540:	2301      	movs	r3, #1
 8010542:	607b      	str	r3, [r7, #4]
 8010544:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010546:	3708      	adds	r7, #8
 8010548:	3301      	adds	r3, #1
 801054a:	9329      	str	r3, [sp, #164]	; 0xa4
 801054c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801054e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010550:	3301      	adds	r3, #1
 8010552:	9328      	str	r3, [sp, #160]	; 0xa0
 8010554:	2b07      	cmp	r3, #7
 8010556:	dd08      	ble.n	801056a <_svfprintf_r+0xb6a>
 8010558:	aa27      	add	r2, sp, #156	; 0x9c
 801055a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801055c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801055e:	f001 fd35 	bl	8011fcc <__ssprint_r>
 8010562:	2800      	cmp	r0, #0
 8010564:	d000      	beq.n	8010568 <_svfprintf_r+0xb68>
 8010566:	e249      	b.n	80109fc <_svfprintf_r+0xffc>
 8010568:	af34      	add	r7, sp, #208	; 0xd0
 801056a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801056c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801056e:	4293      	cmp	r3, r2
 8010570:	db02      	blt.n	8010578 <_svfprintf_r+0xb78>
 8010572:	07f3      	lsls	r3, r6, #31
 8010574:	d400      	bmi.n	8010578 <_svfprintf_r+0xb78>
 8010576:	e5db      	b.n	8010130 <_svfprintf_r+0x730>
 8010578:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801057a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801057c:	4694      	mov	ip, r2
 801057e:	603b      	str	r3, [r7, #0]
 8010580:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010582:	607b      	str	r3, [r7, #4]
 8010584:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010586:	3708      	adds	r7, #8
 8010588:	4463      	add	r3, ip
 801058a:	9329      	str	r3, [sp, #164]	; 0xa4
 801058c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801058e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010590:	3301      	adds	r3, #1
 8010592:	9328      	str	r3, [sp, #160]	; 0xa0
 8010594:	2b07      	cmp	r3, #7
 8010596:	dd08      	ble.n	80105aa <_svfprintf_r+0xbaa>
 8010598:	aa27      	add	r2, sp, #156	; 0x9c
 801059a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801059c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801059e:	f001 fd15 	bl	8011fcc <__ssprint_r>
 80105a2:	2800      	cmp	r0, #0
 80105a4:	d000      	beq.n	80105a8 <_svfprintf_r+0xba8>
 80105a6:	e229      	b.n	80109fc <_svfprintf_r+0xffc>
 80105a8:	af34      	add	r7, sp, #208	; 0xd0
 80105aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80105ac:	2510      	movs	r5, #16
 80105ae:	1e5c      	subs	r4, r3, #1
 80105b0:	2c00      	cmp	r4, #0
 80105b2:	dc00      	bgt.n	80105b6 <_svfprintf_r+0xbb6>
 80105b4:	e5bc      	b.n	8010130 <_svfprintf_r+0x730>
 80105b6:	4b14      	ldr	r3, [pc, #80]	; (8010608 <_svfprintf_r+0xc08>)
 80105b8:	603b      	str	r3, [r7, #0]
 80105ba:	2c10      	cmp	r4, #16
 80105bc:	dc0b      	bgt.n	80105d6 <_svfprintf_r+0xbd6>
 80105be:	607c      	str	r4, [r7, #4]
 80105c0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80105c2:	191c      	adds	r4, r3, r4
 80105c4:	9429      	str	r4, [sp, #164]	; 0xa4
 80105c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80105c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80105ca:	3301      	adds	r3, #1
 80105cc:	9328      	str	r3, [sp, #160]	; 0xa0
 80105ce:	2b07      	cmp	r3, #7
 80105d0:	dc00      	bgt.n	80105d4 <_svfprintf_r+0xbd4>
 80105d2:	e086      	b.n	80106e2 <_svfprintf_r+0xce2>
 80105d4:	e5a2      	b.n	801011c <_svfprintf_r+0x71c>
 80105d6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80105d8:	607d      	str	r5, [r7, #4]
 80105da:	3310      	adds	r3, #16
 80105dc:	9329      	str	r3, [sp, #164]	; 0xa4
 80105de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80105e0:	3708      	adds	r7, #8
 80105e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80105e4:	3301      	adds	r3, #1
 80105e6:	9328      	str	r3, [sp, #160]	; 0xa0
 80105e8:	2b07      	cmp	r3, #7
 80105ea:	dd08      	ble.n	80105fe <_svfprintf_r+0xbfe>
 80105ec:	aa27      	add	r2, sp, #156	; 0x9c
 80105ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80105f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80105f2:	f001 fceb 	bl	8011fcc <__ssprint_r>
 80105f6:	2800      	cmp	r0, #0
 80105f8:	d000      	beq.n	80105fc <_svfprintf_r+0xbfc>
 80105fa:	e1ff      	b.n	80109fc <_svfprintf_r+0xffc>
 80105fc:	af34      	add	r7, sp, #208	; 0xd0
 80105fe:	3c10      	subs	r4, #16
 8010600:	e7d9      	b.n	80105b6 <_svfprintf_r+0xbb6>
 8010602:	46c0      	nop			; (mov r8, r8)
 8010604:	0801573f 	.word	0x0801573f
 8010608:	08015762 	.word	0x08015762
 801060c:	08015750 	.word	0x08015750
 8010610:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010612:	2b00      	cmp	r3, #0
 8010614:	dc7e      	bgt.n	8010714 <_svfprintf_r+0xd14>
 8010616:	4bcf      	ldr	r3, [pc, #828]	; (8010954 <_svfprintf_r+0xf54>)
 8010618:	603b      	str	r3, [r7, #0]
 801061a:	2301      	movs	r3, #1
 801061c:	607b      	str	r3, [r7, #4]
 801061e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010620:	3708      	adds	r7, #8
 8010622:	3301      	adds	r3, #1
 8010624:	9329      	str	r3, [sp, #164]	; 0xa4
 8010626:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010628:	930b      	str	r3, [sp, #44]	; 0x2c
 801062a:	3301      	adds	r3, #1
 801062c:	9328      	str	r3, [sp, #160]	; 0xa0
 801062e:	2b07      	cmp	r3, #7
 8010630:	dd08      	ble.n	8010644 <_svfprintf_r+0xc44>
 8010632:	aa27      	add	r2, sp, #156	; 0x9c
 8010634:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010636:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010638:	f001 fcc8 	bl	8011fcc <__ssprint_r>
 801063c:	2800      	cmp	r0, #0
 801063e:	d000      	beq.n	8010642 <_svfprintf_r+0xc42>
 8010640:	e1dc      	b.n	80109fc <_svfprintf_r+0xffc>
 8010642:	af34      	add	r7, sp, #208	; 0xd0
 8010644:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010646:	2b00      	cmp	r3, #0
 8010648:	d105      	bne.n	8010656 <_svfprintf_r+0xc56>
 801064a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801064c:	2b00      	cmp	r3, #0
 801064e:	d102      	bne.n	8010656 <_svfprintf_r+0xc56>
 8010650:	07f3      	lsls	r3, r6, #31
 8010652:	d400      	bmi.n	8010656 <_svfprintf_r+0xc56>
 8010654:	e56c      	b.n	8010130 <_svfprintf_r+0x730>
 8010656:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010658:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801065a:	4694      	mov	ip, r2
 801065c:	603b      	str	r3, [r7, #0]
 801065e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010660:	607b      	str	r3, [r7, #4]
 8010662:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010664:	3708      	adds	r7, #8
 8010666:	4463      	add	r3, ip
 8010668:	9329      	str	r3, [sp, #164]	; 0xa4
 801066a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801066c:	930b      	str	r3, [sp, #44]	; 0x2c
 801066e:	3301      	adds	r3, #1
 8010670:	9328      	str	r3, [sp, #160]	; 0xa0
 8010672:	2b07      	cmp	r3, #7
 8010674:	dd08      	ble.n	8010688 <_svfprintf_r+0xc88>
 8010676:	aa27      	add	r2, sp, #156	; 0x9c
 8010678:	9909      	ldr	r1, [sp, #36]	; 0x24
 801067a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801067c:	f001 fca6 	bl	8011fcc <__ssprint_r>
 8010680:	2800      	cmp	r0, #0
 8010682:	d000      	beq.n	8010686 <_svfprintf_r+0xc86>
 8010684:	e1ba      	b.n	80109fc <_svfprintf_r+0xffc>
 8010686:	af34      	add	r7, sp, #208	; 0xd0
 8010688:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801068a:	2c00      	cmp	r4, #0
 801068c:	da19      	bge.n	80106c2 <_svfprintf_r+0xcc2>
 801068e:	2510      	movs	r5, #16
 8010690:	4264      	negs	r4, r4
 8010692:	4ab1      	ldr	r2, [pc, #708]	; (8010958 <_svfprintf_r+0xf58>)
 8010694:	603a      	str	r2, [r7, #0]
 8010696:	2c10      	cmp	r4, #16
 8010698:	dc25      	bgt.n	80106e6 <_svfprintf_r+0xce6>
 801069a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801069c:	607c      	str	r4, [r7, #4]
 801069e:	191c      	adds	r4, r3, r4
 80106a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80106a2:	9429      	str	r4, [sp, #164]	; 0xa4
 80106a4:	1c5a      	adds	r2, r3, #1
 80106a6:	3708      	adds	r7, #8
 80106a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80106aa:	9228      	str	r2, [sp, #160]	; 0xa0
 80106ac:	2a07      	cmp	r2, #7
 80106ae:	dd08      	ble.n	80106c2 <_svfprintf_r+0xcc2>
 80106b0:	aa27      	add	r2, sp, #156	; 0x9c
 80106b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80106b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80106b6:	f001 fc89 	bl	8011fcc <__ssprint_r>
 80106ba:	2800      	cmp	r0, #0
 80106bc:	d000      	beq.n	80106c0 <_svfprintf_r+0xcc0>
 80106be:	e19d      	b.n	80109fc <_svfprintf_r+0xffc>
 80106c0:	af34      	add	r7, sp, #208	; 0xd0
 80106c2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80106c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80106c6:	468c      	mov	ip, r1
 80106c8:	603b      	str	r3, [r7, #0]
 80106ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80106cc:	607b      	str	r3, [r7, #4]
 80106ce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80106d0:	4463      	add	r3, ip
 80106d2:	9329      	str	r3, [sp, #164]	; 0xa4
 80106d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80106d6:	1c5a      	adds	r2, r3, #1
 80106d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80106da:	9228      	str	r2, [sp, #160]	; 0xa0
 80106dc:	2a07      	cmp	r2, #7
 80106de:	dd00      	ble.n	80106e2 <_svfprintf_r+0xce2>
 80106e0:	e51c      	b.n	801011c <_svfprintf_r+0x71c>
 80106e2:	3708      	adds	r7, #8
 80106e4:	e524      	b.n	8010130 <_svfprintf_r+0x730>
 80106e6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80106e8:	607d      	str	r5, [r7, #4]
 80106ea:	001a      	movs	r2, r3
 80106ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80106ee:	3210      	adds	r2, #16
 80106f0:	9229      	str	r2, [sp, #164]	; 0xa4
 80106f2:	1c5a      	adds	r2, r3, #1
 80106f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80106f6:	9228      	str	r2, [sp, #160]	; 0xa0
 80106f8:	3708      	adds	r7, #8
 80106fa:	2a07      	cmp	r2, #7
 80106fc:	dd08      	ble.n	8010710 <_svfprintf_r+0xd10>
 80106fe:	aa27      	add	r2, sp, #156	; 0x9c
 8010700:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010702:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010704:	f001 fc62 	bl	8011fcc <__ssprint_r>
 8010708:	2800      	cmp	r0, #0
 801070a:	d000      	beq.n	801070e <_svfprintf_r+0xd0e>
 801070c:	e176      	b.n	80109fc <_svfprintf_r+0xffc>
 801070e:	af34      	add	r7, sp, #208	; 0xd0
 8010710:	3c10      	subs	r4, #16
 8010712:	e7be      	b.n	8010692 <_svfprintf_r+0xc92>
 8010714:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8010716:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010718:	4294      	cmp	r4, r2
 801071a:	dd00      	ble.n	801071e <_svfprintf_r+0xd1e>
 801071c:	0014      	movs	r4, r2
 801071e:	2c00      	cmp	r4, #0
 8010720:	dd15      	ble.n	801074e <_svfprintf_r+0xd4e>
 8010722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010724:	607c      	str	r4, [r7, #4]
 8010726:	603b      	str	r3, [r7, #0]
 8010728:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801072a:	3708      	adds	r7, #8
 801072c:	191b      	adds	r3, r3, r4
 801072e:	9329      	str	r3, [sp, #164]	; 0xa4
 8010730:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010732:	930b      	str	r3, [sp, #44]	; 0x2c
 8010734:	3301      	adds	r3, #1
 8010736:	9328      	str	r3, [sp, #160]	; 0xa0
 8010738:	2b07      	cmp	r3, #7
 801073a:	dd08      	ble.n	801074e <_svfprintf_r+0xd4e>
 801073c:	aa27      	add	r2, sp, #156	; 0x9c
 801073e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010740:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010742:	f001 fc43 	bl	8011fcc <__ssprint_r>
 8010746:	2800      	cmp	r0, #0
 8010748:	d000      	beq.n	801074c <_svfprintf_r+0xd4c>
 801074a:	e157      	b.n	80109fc <_svfprintf_r+0xffc>
 801074c:	af34      	add	r7, sp, #208	; 0xd0
 801074e:	43e3      	mvns	r3, r4
 8010750:	17db      	asrs	r3, r3, #31
 8010752:	401c      	ands	r4, r3
 8010754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010756:	2510      	movs	r5, #16
 8010758:	1b1c      	subs	r4, r3, r4
 801075a:	2c00      	cmp	r4, #0
 801075c:	dc7d      	bgt.n	801085a <_svfprintf_r+0xe5a>
 801075e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010760:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010762:	4293      	cmp	r3, r2
 8010764:	db01      	blt.n	801076a <_svfprintf_r+0xd6a>
 8010766:	07f3      	lsls	r3, r6, #31
 8010768:	d518      	bpl.n	801079c <_svfprintf_r+0xd9c>
 801076a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801076c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801076e:	4694      	mov	ip, r2
 8010770:	603b      	str	r3, [r7, #0]
 8010772:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010774:	607b      	str	r3, [r7, #4]
 8010776:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010778:	3708      	adds	r7, #8
 801077a:	4463      	add	r3, ip
 801077c:	9329      	str	r3, [sp, #164]	; 0xa4
 801077e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010780:	930b      	str	r3, [sp, #44]	; 0x2c
 8010782:	3301      	adds	r3, #1
 8010784:	9328      	str	r3, [sp, #160]	; 0xa0
 8010786:	2b07      	cmp	r3, #7
 8010788:	dd08      	ble.n	801079c <_svfprintf_r+0xd9c>
 801078a:	aa27      	add	r2, sp, #156	; 0x9c
 801078c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801078e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010790:	f001 fc1c 	bl	8011fcc <__ssprint_r>
 8010794:	2800      	cmp	r0, #0
 8010796:	d000      	beq.n	801079a <_svfprintf_r+0xd9a>
 8010798:	e130      	b.n	80109fc <_svfprintf_r+0xffc>
 801079a:	af34      	add	r7, sp, #208	; 0xd0
 801079c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801079e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80107a0:	9921      	ldr	r1, [sp, #132]	; 0x84
 80107a2:	1a9b      	subs	r3, r3, r2
 80107a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80107a6:	1a54      	subs	r4, r2, r1
 80107a8:	429c      	cmp	r4, r3
 80107aa:	dd00      	ble.n	80107ae <_svfprintf_r+0xdae>
 80107ac:	001c      	movs	r4, r3
 80107ae:	2c00      	cmp	r4, #0
 80107b0:	dd18      	ble.n	80107e4 <_svfprintf_r+0xde4>
 80107b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80107b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80107b6:	4694      	mov	ip, r2
 80107b8:	4463      	add	r3, ip
 80107ba:	603b      	str	r3, [r7, #0]
 80107bc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80107be:	607c      	str	r4, [r7, #4]
 80107c0:	191b      	adds	r3, r3, r4
 80107c2:	9329      	str	r3, [sp, #164]	; 0xa4
 80107c4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80107c6:	3708      	adds	r7, #8
 80107c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80107ca:	3301      	adds	r3, #1
 80107cc:	9328      	str	r3, [sp, #160]	; 0xa0
 80107ce:	2b07      	cmp	r3, #7
 80107d0:	dd08      	ble.n	80107e4 <_svfprintf_r+0xde4>
 80107d2:	aa27      	add	r2, sp, #156	; 0x9c
 80107d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80107d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80107d8:	f001 fbf8 	bl	8011fcc <__ssprint_r>
 80107dc:	2800      	cmp	r0, #0
 80107de:	d000      	beq.n	80107e2 <_svfprintf_r+0xde2>
 80107e0:	e10c      	b.n	80109fc <_svfprintf_r+0xffc>
 80107e2:	af34      	add	r7, sp, #208	; 0xd0
 80107e4:	43e3      	mvns	r3, r4
 80107e6:	17db      	asrs	r3, r3, #31
 80107e8:	401c      	ands	r4, r3
 80107ea:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80107ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80107ee:	2510      	movs	r5, #16
 80107f0:	1a9b      	subs	r3, r3, r2
 80107f2:	1b1c      	subs	r4, r3, r4
 80107f4:	2c00      	cmp	r4, #0
 80107f6:	dc00      	bgt.n	80107fa <_svfprintf_r+0xdfa>
 80107f8:	e49a      	b.n	8010130 <_svfprintf_r+0x730>
 80107fa:	4b57      	ldr	r3, [pc, #348]	; (8010958 <_svfprintf_r+0xf58>)
 80107fc:	603b      	str	r3, [r7, #0]
 80107fe:	2c10      	cmp	r4, #16
 8010800:	dc00      	bgt.n	8010804 <_svfprintf_r+0xe04>
 8010802:	e6dc      	b.n	80105be <_svfprintf_r+0xbbe>
 8010804:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010806:	607d      	str	r5, [r7, #4]
 8010808:	3310      	adds	r3, #16
 801080a:	9329      	str	r3, [sp, #164]	; 0xa4
 801080c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801080e:	3708      	adds	r7, #8
 8010810:	930b      	str	r3, [sp, #44]	; 0x2c
 8010812:	3301      	adds	r3, #1
 8010814:	9328      	str	r3, [sp, #160]	; 0xa0
 8010816:	2b07      	cmp	r3, #7
 8010818:	dd08      	ble.n	801082c <_svfprintf_r+0xe2c>
 801081a:	aa27      	add	r2, sp, #156	; 0x9c
 801081c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801081e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010820:	f001 fbd4 	bl	8011fcc <__ssprint_r>
 8010824:	2800      	cmp	r0, #0
 8010826:	d000      	beq.n	801082a <_svfprintf_r+0xe2a>
 8010828:	e0e8      	b.n	80109fc <_svfprintf_r+0xffc>
 801082a:	af34      	add	r7, sp, #208	; 0xd0
 801082c:	3c10      	subs	r4, #16
 801082e:	e7e4      	b.n	80107fa <_svfprintf_r+0xdfa>
 8010830:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010832:	607d      	str	r5, [r7, #4]
 8010834:	3310      	adds	r3, #16
 8010836:	9329      	str	r3, [sp, #164]	; 0xa4
 8010838:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801083a:	3708      	adds	r7, #8
 801083c:	930b      	str	r3, [sp, #44]	; 0x2c
 801083e:	3301      	adds	r3, #1
 8010840:	9328      	str	r3, [sp, #160]	; 0xa0
 8010842:	2b07      	cmp	r3, #7
 8010844:	dd08      	ble.n	8010858 <_svfprintf_r+0xe58>
 8010846:	aa27      	add	r2, sp, #156	; 0x9c
 8010848:	9909      	ldr	r1, [sp, #36]	; 0x24
 801084a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801084c:	f001 fbbe 	bl	8011fcc <__ssprint_r>
 8010850:	2800      	cmp	r0, #0
 8010852:	d000      	beq.n	8010856 <_svfprintf_r+0xe56>
 8010854:	e0d2      	b.n	80109fc <_svfprintf_r+0xffc>
 8010856:	af34      	add	r7, sp, #208	; 0xd0
 8010858:	3c10      	subs	r4, #16
 801085a:	4b3f      	ldr	r3, [pc, #252]	; (8010958 <_svfprintf_r+0xf58>)
 801085c:	603b      	str	r3, [r7, #0]
 801085e:	2c10      	cmp	r4, #16
 8010860:	dce6      	bgt.n	8010830 <_svfprintf_r+0xe30>
 8010862:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010864:	607c      	str	r4, [r7, #4]
 8010866:	191c      	adds	r4, r3, r4
 8010868:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801086a:	9429      	str	r4, [sp, #164]	; 0xa4
 801086c:	930b      	str	r3, [sp, #44]	; 0x2c
 801086e:	3301      	adds	r3, #1
 8010870:	9328      	str	r3, [sp, #160]	; 0xa0
 8010872:	3708      	adds	r7, #8
 8010874:	2b07      	cmp	r3, #7
 8010876:	dc00      	bgt.n	801087a <_svfprintf_r+0xe7a>
 8010878:	e771      	b.n	801075e <_svfprintf_r+0xd5e>
 801087a:	aa27      	add	r2, sp, #156	; 0x9c
 801087c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801087e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010880:	f001 fba4 	bl	8011fcc <__ssprint_r>
 8010884:	2800      	cmp	r0, #0
 8010886:	d000      	beq.n	801088a <_svfprintf_r+0xe8a>
 8010888:	e0b8      	b.n	80109fc <_svfprintf_r+0xffc>
 801088a:	af34      	add	r7, sp, #208	; 0xd0
 801088c:	e767      	b.n	801075e <_svfprintf_r+0xd5e>
 801088e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010890:	2b01      	cmp	r3, #1
 8010892:	dc03      	bgt.n	801089c <_svfprintf_r+0xe9c>
 8010894:	2301      	movs	r3, #1
 8010896:	421e      	tst	r6, r3
 8010898:	d100      	bne.n	801089c <_svfprintf_r+0xe9c>
 801089a:	e087      	b.n	80109ac <_svfprintf_r+0xfac>
 801089c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801089e:	603b      	str	r3, [r7, #0]
 80108a0:	2301      	movs	r3, #1
 80108a2:	607b      	str	r3, [r7, #4]
 80108a4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80108a6:	3708      	adds	r7, #8
 80108a8:	3301      	adds	r3, #1
 80108aa:	9329      	str	r3, [sp, #164]	; 0xa4
 80108ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80108ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80108b0:	3301      	adds	r3, #1
 80108b2:	9328      	str	r3, [sp, #160]	; 0xa0
 80108b4:	2b07      	cmp	r3, #7
 80108b6:	dd08      	ble.n	80108ca <_svfprintf_r+0xeca>
 80108b8:	aa27      	add	r2, sp, #156	; 0x9c
 80108ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80108bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80108be:	f001 fb85 	bl	8011fcc <__ssprint_r>
 80108c2:	2800      	cmp	r0, #0
 80108c4:	d000      	beq.n	80108c8 <_svfprintf_r+0xec8>
 80108c6:	e099      	b.n	80109fc <_svfprintf_r+0xffc>
 80108c8:	af34      	add	r7, sp, #208	; 0xd0
 80108ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80108cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80108ce:	4694      	mov	ip, r2
 80108d0:	603b      	str	r3, [r7, #0]
 80108d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80108d4:	607b      	str	r3, [r7, #4]
 80108d6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80108d8:	3708      	adds	r7, #8
 80108da:	4463      	add	r3, ip
 80108dc:	9329      	str	r3, [sp, #164]	; 0xa4
 80108de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80108e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80108e2:	3301      	adds	r3, #1
 80108e4:	9328      	str	r3, [sp, #160]	; 0xa0
 80108e6:	2b07      	cmp	r3, #7
 80108e8:	dd08      	ble.n	80108fc <_svfprintf_r+0xefc>
 80108ea:	aa27      	add	r2, sp, #156	; 0x9c
 80108ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80108ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 80108f0:	f001 fb6c 	bl	8011fcc <__ssprint_r>
 80108f4:	2800      	cmp	r0, #0
 80108f6:	d000      	beq.n	80108fa <_svfprintf_r+0xefa>
 80108f8:	e080      	b.n	80109fc <_svfprintf_r+0xffc>
 80108fa:	af34      	add	r7, sp, #208	; 0xd0
 80108fc:	2300      	movs	r3, #0
 80108fe:	2200      	movs	r2, #0
 8010900:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010902:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8010904:	f7ef fdb2 	bl	800046c <__aeabi_dcmpeq>
 8010908:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801090a:	1e5d      	subs	r5, r3, #1
 801090c:	2800      	cmp	r0, #0
 801090e:	d125      	bne.n	801095c <_svfprintf_r+0xf5c>
 8010910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010912:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010914:	3301      	adds	r3, #1
 8010916:	603b      	str	r3, [r7, #0]
 8010918:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801091a:	607d      	str	r5, [r7, #4]
 801091c:	3b01      	subs	r3, #1
 801091e:	189b      	adds	r3, r3, r2
 8010920:	9329      	str	r3, [sp, #164]	; 0xa4
 8010922:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010924:	3708      	adds	r7, #8
 8010926:	930b      	str	r3, [sp, #44]	; 0x2c
 8010928:	3301      	adds	r3, #1
 801092a:	9328      	str	r3, [sp, #160]	; 0xa0
 801092c:	2b07      	cmp	r3, #7
 801092e:	dd07      	ble.n	8010940 <_svfprintf_r+0xf40>
 8010930:	aa27      	add	r2, sp, #156	; 0x9c
 8010932:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010934:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010936:	f001 fb49 	bl	8011fcc <__ssprint_r>
 801093a:	2800      	cmp	r0, #0
 801093c:	d15e      	bne.n	80109fc <_svfprintf_r+0xffc>
 801093e:	af34      	add	r7, sp, #208	; 0xd0
 8010940:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010942:	ab23      	add	r3, sp, #140	; 0x8c
 8010944:	4694      	mov	ip, r2
 8010946:	603b      	str	r3, [r7, #0]
 8010948:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801094a:	607b      	str	r3, [r7, #4]
 801094c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801094e:	4463      	add	r3, ip
 8010950:	9329      	str	r3, [sp, #164]	; 0xa4
 8010952:	e638      	b.n	80105c6 <_svfprintf_r+0xbc6>
 8010954:	08015750 	.word	0x08015750
 8010958:	08015762 	.word	0x08015762
 801095c:	2410      	movs	r4, #16
 801095e:	2d00      	cmp	r5, #0
 8010960:	ddee      	ble.n	8010940 <_svfprintf_r+0xf40>
 8010962:	4b5e      	ldr	r3, [pc, #376]	; (8010adc <_svfprintf_r+0x10dc>)
 8010964:	603b      	str	r3, [r7, #0]
 8010966:	2d10      	cmp	r5, #16
 8010968:	dc0b      	bgt.n	8010982 <_svfprintf_r+0xf82>
 801096a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801096c:	607d      	str	r5, [r7, #4]
 801096e:	195d      	adds	r5, r3, r5
 8010970:	9529      	str	r5, [sp, #164]	; 0xa4
 8010972:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010974:	930b      	str	r3, [sp, #44]	; 0x2c
 8010976:	3301      	adds	r3, #1
 8010978:	9328      	str	r3, [sp, #160]	; 0xa0
 801097a:	2b07      	cmp	r3, #7
 801097c:	dcd8      	bgt.n	8010930 <_svfprintf_r+0xf30>
 801097e:	3708      	adds	r7, #8
 8010980:	e7de      	b.n	8010940 <_svfprintf_r+0xf40>
 8010982:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010984:	607c      	str	r4, [r7, #4]
 8010986:	3310      	adds	r3, #16
 8010988:	9329      	str	r3, [sp, #164]	; 0xa4
 801098a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801098c:	3708      	adds	r7, #8
 801098e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010990:	3301      	adds	r3, #1
 8010992:	9328      	str	r3, [sp, #160]	; 0xa0
 8010994:	2b07      	cmp	r3, #7
 8010996:	dd07      	ble.n	80109a8 <_svfprintf_r+0xfa8>
 8010998:	aa27      	add	r2, sp, #156	; 0x9c
 801099a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801099c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801099e:	f001 fb15 	bl	8011fcc <__ssprint_r>
 80109a2:	2800      	cmp	r0, #0
 80109a4:	d12a      	bne.n	80109fc <_svfprintf_r+0xffc>
 80109a6:	af34      	add	r7, sp, #208	; 0xd0
 80109a8:	3d10      	subs	r5, #16
 80109aa:	e7da      	b.n	8010962 <_svfprintf_r+0xf62>
 80109ac:	607b      	str	r3, [r7, #4]
 80109ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80109b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80109b2:	3301      	adds	r3, #1
 80109b4:	603a      	str	r2, [r7, #0]
 80109b6:	9329      	str	r3, [sp, #164]	; 0xa4
 80109b8:	e7db      	b.n	8010972 <_svfprintf_r+0xf72>
 80109ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80109bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80109be:	2510      	movs	r5, #16
 80109c0:	1a9c      	subs	r4, r3, r2
 80109c2:	2c00      	cmp	r4, #0
 80109c4:	dc01      	bgt.n	80109ca <_svfprintf_r+0xfca>
 80109c6:	f7ff fbb7 	bl	8010138 <_svfprintf_r+0x738>
 80109ca:	4b45      	ldr	r3, [pc, #276]	; (8010ae0 <_svfprintf_r+0x10e0>)
 80109cc:	603b      	str	r3, [r7, #0]
 80109ce:	2c10      	cmp	r4, #16
 80109d0:	dc1e      	bgt.n	8010a10 <_svfprintf_r+0x1010>
 80109d2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80109d4:	607c      	str	r4, [r7, #4]
 80109d6:	191c      	adds	r4, r3, r4
 80109d8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80109da:	9429      	str	r4, [sp, #164]	; 0xa4
 80109dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80109de:	3301      	adds	r3, #1
 80109e0:	9328      	str	r3, [sp, #160]	; 0xa0
 80109e2:	2b07      	cmp	r3, #7
 80109e4:	dc01      	bgt.n	80109ea <_svfprintf_r+0xfea>
 80109e6:	f7ff fba7 	bl	8010138 <_svfprintf_r+0x738>
 80109ea:	aa27      	add	r2, sp, #156	; 0x9c
 80109ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80109ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 80109f0:	f001 faec 	bl	8011fcc <__ssprint_r>
 80109f4:	2800      	cmp	r0, #0
 80109f6:	d101      	bne.n	80109fc <_svfprintf_r+0xffc>
 80109f8:	f7ff fb9e 	bl	8010138 <_svfprintf_r+0x738>
 80109fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109fe:	899b      	ldrh	r3, [r3, #12]
 8010a00:	065b      	lsls	r3, r3, #25
 8010a02:	d401      	bmi.n	8010a08 <_svfprintf_r+0x1008>
 8010a04:	f7ff f821 	bl	800fa4a <_svfprintf_r+0x4a>
 8010a08:	2301      	movs	r3, #1
 8010a0a:	425b      	negs	r3, r3
 8010a0c:	f7ff f81c 	bl	800fa48 <_svfprintf_r+0x48>
 8010a10:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010a12:	607d      	str	r5, [r7, #4]
 8010a14:	3310      	adds	r3, #16
 8010a16:	9329      	str	r3, [sp, #164]	; 0xa4
 8010a18:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010a1a:	3708      	adds	r7, #8
 8010a1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a1e:	3301      	adds	r3, #1
 8010a20:	9328      	str	r3, [sp, #160]	; 0xa0
 8010a22:	2b07      	cmp	r3, #7
 8010a24:	dd07      	ble.n	8010a36 <_svfprintf_r+0x1036>
 8010a26:	aa27      	add	r2, sp, #156	; 0x9c
 8010a28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010a2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010a2c:	f001 face 	bl	8011fcc <__ssprint_r>
 8010a30:	2800      	cmp	r0, #0
 8010a32:	d1e3      	bne.n	80109fc <_svfprintf_r+0xffc>
 8010a34:	af34      	add	r7, sp, #208	; 0xd0
 8010a36:	3c10      	subs	r4, #16
 8010a38:	e7c7      	b.n	80109ca <_svfprintf_r+0xfca>
 8010a3a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010a3c:	9306      	str	r3, [sp, #24]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d0dc      	beq.n	80109fc <_svfprintf_r+0xffc>
 8010a42:	aa27      	add	r2, sp, #156	; 0x9c
 8010a44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010a46:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010a48:	f001 fac0 	bl	8011fcc <__ssprint_r>
 8010a4c:	e7d6      	b.n	80109fc <_svfprintf_r+0xffc>
 8010a4e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010a50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010a52:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010a54:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8010a56:	f7f1 fb0f 	bl	8002078 <__aeabi_dcmpun>
 8010a5a:	2800      	cmp	r0, #0
 8010a5c:	d101      	bne.n	8010a62 <_svfprintf_r+0x1062>
 8010a5e:	f7ff f9d8 	bl	800fe12 <_svfprintf_r+0x412>
 8010a62:	4b20      	ldr	r3, [pc, #128]	; (8010ae4 <_svfprintf_r+0x10e4>)
 8010a64:	930c      	str	r3, [sp, #48]	; 0x30
 8010a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a68:	2b47      	cmp	r3, #71	; 0x47
 8010a6a:	dd01      	ble.n	8010a70 <_svfprintf_r+0x1070>
 8010a6c:	f7ff f9ca 	bl	800fe04 <_svfprintf_r+0x404>
 8010a70:	4b1d      	ldr	r3, [pc, #116]	; (8010ae8 <_svfprintf_r+0x10e8>)
 8010a72:	f7ff f9c6 	bl	800fe02 <_svfprintf_r+0x402>
 8010a76:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8010a78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a7a:	1a9b      	subs	r3, r3, r2
 8010a7c:	930e      	str	r3, [sp, #56]	; 0x38
 8010a7e:	f7ff fa43 	bl	800ff08 <_svfprintf_r+0x508>
 8010a82:	0035      	movs	r5, r6
 8010a84:	2a00      	cmp	r2, #0
 8010a86:	d101      	bne.n	8010a8c <_svfprintf_r+0x108c>
 8010a88:	f7ff f8c8 	bl	800fc1c <_svfprintf_r+0x21c>
 8010a8c:	2b01      	cmp	r3, #1
 8010a8e:	d100      	bne.n	8010a92 <_svfprintf_r+0x1092>
 8010a90:	e479      	b.n	8010386 <_svfprintf_r+0x986>
 8010a92:	2b02      	cmp	r3, #2
 8010a94:	d100      	bne.n	8010a98 <_svfprintf_r+0x1098>
 8010a96:	e4ab      	b.n	80103f0 <_svfprintf_r+0x9f0>
 8010a98:	2607      	movs	r6, #7
 8010a9a:	ab34      	add	r3, sp, #208	; 0xd0
 8010a9c:	1e5a      	subs	r2, r3, #1
 8010a9e:	920c      	str	r2, [sp, #48]	; 0x30
 8010aa0:	9a06      	ldr	r2, [sp, #24]
 8010aa2:	1e59      	subs	r1, r3, #1
 8010aa4:	4032      	ands	r2, r6
 8010aa6:	3230      	adds	r2, #48	; 0x30
 8010aa8:	700a      	strb	r2, [r1, #0]
 8010aaa:	9907      	ldr	r1, [sp, #28]
 8010aac:	074c      	lsls	r4, r1, #29
 8010aae:	9906      	ldr	r1, [sp, #24]
 8010ab0:	08c8      	lsrs	r0, r1, #3
 8010ab2:	9907      	ldr	r1, [sp, #28]
 8010ab4:	4304      	orrs	r4, r0
 8010ab6:	08c9      	lsrs	r1, r1, #3
 8010ab8:	9107      	str	r1, [sp, #28]
 8010aba:	0021      	movs	r1, r4
 8010abc:	9807      	ldr	r0, [sp, #28]
 8010abe:	9406      	str	r4, [sp, #24]
 8010ac0:	4301      	orrs	r1, r0
 8010ac2:	d000      	beq.n	8010ac6 <_svfprintf_r+0x10c6>
 8010ac4:	e45d      	b.n	8010382 <_svfprintf_r+0x982>
 8010ac6:	07e9      	lsls	r1, r5, #31
 8010ac8:	d400      	bmi.n	8010acc <_svfprintf_r+0x10cc>
 8010aca:	e484      	b.n	80103d6 <_svfprintf_r+0x9d6>
 8010acc:	2a30      	cmp	r2, #48	; 0x30
 8010ace:	d100      	bne.n	8010ad2 <_svfprintf_r+0x10d2>
 8010ad0:	e481      	b.n	80103d6 <_svfprintf_r+0x9d6>
 8010ad2:	2230      	movs	r2, #48	; 0x30
 8010ad4:	3b02      	subs	r3, #2
 8010ad6:	701a      	strb	r2, [r3, #0]
 8010ad8:	930c      	str	r3, [sp, #48]	; 0x30
 8010ada:	e47c      	b.n	80103d6 <_svfprintf_r+0x9d6>
 8010adc:	08015762 	.word	0x08015762
 8010ae0:	08015752 	.word	0x08015752
 8010ae4:	0801572a 	.word	0x0801572a
 8010ae8:	08015726 	.word	0x08015726

08010aec <quorem>:
 8010aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010aee:	6903      	ldr	r3, [r0, #16]
 8010af0:	690c      	ldr	r4, [r1, #16]
 8010af2:	b089      	sub	sp, #36	; 0x24
 8010af4:	0007      	movs	r7, r0
 8010af6:	9105      	str	r1, [sp, #20]
 8010af8:	2600      	movs	r6, #0
 8010afa:	429c      	cmp	r4, r3
 8010afc:	dc6d      	bgt.n	8010bda <quorem+0xee>
 8010afe:	000b      	movs	r3, r1
 8010b00:	3c01      	subs	r4, #1
 8010b02:	3314      	adds	r3, #20
 8010b04:	00a5      	lsls	r5, r4, #2
 8010b06:	9303      	str	r3, [sp, #12]
 8010b08:	195b      	adds	r3, r3, r5
 8010b0a:	9304      	str	r3, [sp, #16]
 8010b0c:	0003      	movs	r3, r0
 8010b0e:	3314      	adds	r3, #20
 8010b10:	9302      	str	r3, [sp, #8]
 8010b12:	195d      	adds	r5, r3, r5
 8010b14:	9b04      	ldr	r3, [sp, #16]
 8010b16:	6828      	ldr	r0, [r5, #0]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	1c59      	adds	r1, r3, #1
 8010b1c:	9301      	str	r3, [sp, #4]
 8010b1e:	f7ef fb1f 	bl	8000160 <__udivsi3>
 8010b22:	9001      	str	r0, [sp, #4]
 8010b24:	42b0      	cmp	r0, r6
 8010b26:	d02d      	beq.n	8010b84 <quorem+0x98>
 8010b28:	9b03      	ldr	r3, [sp, #12]
 8010b2a:	9802      	ldr	r0, [sp, #8]
 8010b2c:	469c      	mov	ip, r3
 8010b2e:	9606      	str	r6, [sp, #24]
 8010b30:	4662      	mov	r2, ip
 8010b32:	ca08      	ldmia	r2!, {r3}
 8010b34:	4694      	mov	ip, r2
 8010b36:	9a01      	ldr	r2, [sp, #4]
 8010b38:	b299      	uxth	r1, r3
 8010b3a:	4351      	muls	r1, r2
 8010b3c:	0c1b      	lsrs	r3, r3, #16
 8010b3e:	4353      	muls	r3, r2
 8010b40:	1989      	adds	r1, r1, r6
 8010b42:	0c0a      	lsrs	r2, r1, #16
 8010b44:	189b      	adds	r3, r3, r2
 8010b46:	9307      	str	r3, [sp, #28]
 8010b48:	8802      	ldrh	r2, [r0, #0]
 8010b4a:	0c1e      	lsrs	r6, r3, #16
 8010b4c:	9b06      	ldr	r3, [sp, #24]
 8010b4e:	b289      	uxth	r1, r1
 8010b50:	18d2      	adds	r2, r2, r3
 8010b52:	6803      	ldr	r3, [r0, #0]
 8010b54:	1a52      	subs	r2, r2, r1
 8010b56:	0c19      	lsrs	r1, r3, #16
 8010b58:	466b      	mov	r3, sp
 8010b5a:	8b9b      	ldrh	r3, [r3, #28]
 8010b5c:	1acb      	subs	r3, r1, r3
 8010b5e:	1411      	asrs	r1, r2, #16
 8010b60:	185b      	adds	r3, r3, r1
 8010b62:	1419      	asrs	r1, r3, #16
 8010b64:	b292      	uxth	r2, r2
 8010b66:	041b      	lsls	r3, r3, #16
 8010b68:	431a      	orrs	r2, r3
 8010b6a:	9b04      	ldr	r3, [sp, #16]
 8010b6c:	9106      	str	r1, [sp, #24]
 8010b6e:	c004      	stmia	r0!, {r2}
 8010b70:	4563      	cmp	r3, ip
 8010b72:	d2dd      	bcs.n	8010b30 <quorem+0x44>
 8010b74:	682b      	ldr	r3, [r5, #0]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d104      	bne.n	8010b84 <quorem+0x98>
 8010b7a:	9b02      	ldr	r3, [sp, #8]
 8010b7c:	3d04      	subs	r5, #4
 8010b7e:	42ab      	cmp	r3, r5
 8010b80:	d32e      	bcc.n	8010be0 <quorem+0xf4>
 8010b82:	613c      	str	r4, [r7, #16]
 8010b84:	9905      	ldr	r1, [sp, #20]
 8010b86:	0038      	movs	r0, r7
 8010b88:	f001 f94f 	bl	8011e2a <__mcmp>
 8010b8c:	2800      	cmp	r0, #0
 8010b8e:	db23      	blt.n	8010bd8 <quorem+0xec>
 8010b90:	2500      	movs	r5, #0
 8010b92:	9b01      	ldr	r3, [sp, #4]
 8010b94:	9802      	ldr	r0, [sp, #8]
 8010b96:	3301      	adds	r3, #1
 8010b98:	9903      	ldr	r1, [sp, #12]
 8010b9a:	9301      	str	r3, [sp, #4]
 8010b9c:	c908      	ldmia	r1!, {r3}
 8010b9e:	8802      	ldrh	r2, [r0, #0]
 8010ba0:	1955      	adds	r5, r2, r5
 8010ba2:	b29a      	uxth	r2, r3
 8010ba4:	1aaa      	subs	r2, r5, r2
 8010ba6:	6805      	ldr	r5, [r0, #0]
 8010ba8:	0c1b      	lsrs	r3, r3, #16
 8010baa:	0c2d      	lsrs	r5, r5, #16
 8010bac:	1aeb      	subs	r3, r5, r3
 8010bae:	1415      	asrs	r5, r2, #16
 8010bb0:	195b      	adds	r3, r3, r5
 8010bb2:	141d      	asrs	r5, r3, #16
 8010bb4:	b292      	uxth	r2, r2
 8010bb6:	041b      	lsls	r3, r3, #16
 8010bb8:	4313      	orrs	r3, r2
 8010bba:	c008      	stmia	r0!, {r3}
 8010bbc:	9b04      	ldr	r3, [sp, #16]
 8010bbe:	428b      	cmp	r3, r1
 8010bc0:	d2ec      	bcs.n	8010b9c <quorem+0xb0>
 8010bc2:	9a02      	ldr	r2, [sp, #8]
 8010bc4:	00a3      	lsls	r3, r4, #2
 8010bc6:	18d3      	adds	r3, r2, r3
 8010bc8:	681a      	ldr	r2, [r3, #0]
 8010bca:	2a00      	cmp	r2, #0
 8010bcc:	d104      	bne.n	8010bd8 <quorem+0xec>
 8010bce:	9a02      	ldr	r2, [sp, #8]
 8010bd0:	3b04      	subs	r3, #4
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d309      	bcc.n	8010bea <quorem+0xfe>
 8010bd6:	613c      	str	r4, [r7, #16]
 8010bd8:	9e01      	ldr	r6, [sp, #4]
 8010bda:	0030      	movs	r0, r6
 8010bdc:	b009      	add	sp, #36	; 0x24
 8010bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010be0:	682b      	ldr	r3, [r5, #0]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d1cd      	bne.n	8010b82 <quorem+0x96>
 8010be6:	3c01      	subs	r4, #1
 8010be8:	e7c7      	b.n	8010b7a <quorem+0x8e>
 8010bea:	681a      	ldr	r2, [r3, #0]
 8010bec:	2a00      	cmp	r2, #0
 8010bee:	d1f2      	bne.n	8010bd6 <quorem+0xea>
 8010bf0:	3c01      	subs	r4, #1
 8010bf2:	e7ec      	b.n	8010bce <quorem+0xe2>

08010bf4 <_dtoa_r>:
 8010bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bf6:	0016      	movs	r6, r2
 8010bf8:	001f      	movs	r7, r3
 8010bfa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010bfc:	b09d      	sub	sp, #116	; 0x74
 8010bfe:	9004      	str	r0, [sp, #16]
 8010c00:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8010c02:	9606      	str	r6, [sp, #24]
 8010c04:	9707      	str	r7, [sp, #28]
 8010c06:	2c00      	cmp	r4, #0
 8010c08:	d108      	bne.n	8010c1c <_dtoa_r+0x28>
 8010c0a:	2010      	movs	r0, #16
 8010c0c:	f7fe fc82 	bl	800f514 <malloc>
 8010c10:	9b04      	ldr	r3, [sp, #16]
 8010c12:	6258      	str	r0, [r3, #36]	; 0x24
 8010c14:	6044      	str	r4, [r0, #4]
 8010c16:	6084      	str	r4, [r0, #8]
 8010c18:	6004      	str	r4, [r0, #0]
 8010c1a:	60c4      	str	r4, [r0, #12]
 8010c1c:	9b04      	ldr	r3, [sp, #16]
 8010c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c20:	6819      	ldr	r1, [r3, #0]
 8010c22:	2900      	cmp	r1, #0
 8010c24:	d00b      	beq.n	8010c3e <_dtoa_r+0x4a>
 8010c26:	685a      	ldr	r2, [r3, #4]
 8010c28:	2301      	movs	r3, #1
 8010c2a:	4093      	lsls	r3, r2
 8010c2c:	604a      	str	r2, [r1, #4]
 8010c2e:	608b      	str	r3, [r1, #8]
 8010c30:	9804      	ldr	r0, [sp, #16]
 8010c32:	f000 ff20 	bl	8011a76 <_Bfree>
 8010c36:	2200      	movs	r2, #0
 8010c38:	9b04      	ldr	r3, [sp, #16]
 8010c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c3c:	601a      	str	r2, [r3, #0]
 8010c3e:	9b07      	ldr	r3, [sp, #28]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	da1f      	bge.n	8010c84 <_dtoa_r+0x90>
 8010c44:	2301      	movs	r3, #1
 8010c46:	602b      	str	r3, [r5, #0]
 8010c48:	007b      	lsls	r3, r7, #1
 8010c4a:	085b      	lsrs	r3, r3, #1
 8010c4c:	9307      	str	r3, [sp, #28]
 8010c4e:	9c07      	ldr	r4, [sp, #28]
 8010c50:	4bb7      	ldr	r3, [pc, #732]	; (8010f30 <_dtoa_r+0x33c>)
 8010c52:	0022      	movs	r2, r4
 8010c54:	9319      	str	r3, [sp, #100]	; 0x64
 8010c56:	401a      	ands	r2, r3
 8010c58:	429a      	cmp	r2, r3
 8010c5a:	d116      	bne.n	8010c8a <_dtoa_r+0x96>
 8010c5c:	4bb5      	ldr	r3, [pc, #724]	; (8010f34 <_dtoa_r+0x340>)
 8010c5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010c60:	6013      	str	r3, [r2, #0]
 8010c62:	9b06      	ldr	r3, [sp, #24]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d103      	bne.n	8010c70 <_dtoa_r+0x7c>
 8010c68:	0324      	lsls	r4, r4, #12
 8010c6a:	d101      	bne.n	8010c70 <_dtoa_r+0x7c>
 8010c6c:	f000 fd91 	bl	8011792 <_dtoa_r+0xb9e>
 8010c70:	4bb1      	ldr	r3, [pc, #708]	; (8010f38 <_dtoa_r+0x344>)
 8010c72:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010c74:	930a      	str	r3, [sp, #40]	; 0x28
 8010c76:	4bb1      	ldr	r3, [pc, #708]	; (8010f3c <_dtoa_r+0x348>)
 8010c78:	2a00      	cmp	r2, #0
 8010c7a:	d001      	beq.n	8010c80 <_dtoa_r+0x8c>
 8010c7c:	f000 fd8f 	bl	801179e <_dtoa_r+0xbaa>
 8010c80:	f000 fd8f 	bl	80117a2 <_dtoa_r+0xbae>
 8010c84:	2300      	movs	r3, #0
 8010c86:	602b      	str	r3, [r5, #0]
 8010c88:	e7e1      	b.n	8010c4e <_dtoa_r+0x5a>
 8010c8a:	9e06      	ldr	r6, [sp, #24]
 8010c8c:	9f07      	ldr	r7, [sp, #28]
 8010c8e:	2200      	movs	r2, #0
 8010c90:	2300      	movs	r3, #0
 8010c92:	0030      	movs	r0, r6
 8010c94:	0039      	movs	r1, r7
 8010c96:	f7ef fbe9 	bl	800046c <__aeabi_dcmpeq>
 8010c9a:	1e05      	subs	r5, r0, #0
 8010c9c:	d00e      	beq.n	8010cbc <_dtoa_r+0xc8>
 8010c9e:	2301      	movs	r3, #1
 8010ca0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010ca2:	6013      	str	r3, [r2, #0]
 8010ca4:	4ba6      	ldr	r3, [pc, #664]	; (8010f40 <_dtoa_r+0x34c>)
 8010ca6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010ca8:	930a      	str	r3, [sp, #40]	; 0x28
 8010caa:	2a00      	cmp	r2, #0
 8010cac:	d101      	bne.n	8010cb2 <_dtoa_r+0xbe>
 8010cae:	f000 fd78 	bl	80117a2 <_dtoa_r+0xbae>
 8010cb2:	4aa4      	ldr	r2, [pc, #656]	; (8010f44 <_dtoa_r+0x350>)
 8010cb4:	9926      	ldr	r1, [sp, #152]	; 0x98
 8010cb6:	600a      	str	r2, [r1, #0]
 8010cb8:	f000 fd73 	bl	80117a2 <_dtoa_r+0xbae>
 8010cbc:	ab1a      	add	r3, sp, #104	; 0x68
 8010cbe:	9301      	str	r3, [sp, #4]
 8010cc0:	ab1b      	add	r3, sp, #108	; 0x6c
 8010cc2:	9300      	str	r3, [sp, #0]
 8010cc4:	0032      	movs	r2, r6
 8010cc6:	003b      	movs	r3, r7
 8010cc8:	9804      	ldr	r0, [sp, #16]
 8010cca:	f001 f92b 	bl	8011f24 <__d2b>
 8010cce:	0063      	lsls	r3, r4, #1
 8010cd0:	9005      	str	r0, [sp, #20]
 8010cd2:	0d5b      	lsrs	r3, r3, #21
 8010cd4:	d100      	bne.n	8010cd8 <_dtoa_r+0xe4>
 8010cd6:	e07f      	b.n	8010dd8 <_dtoa_r+0x1e4>
 8010cd8:	033a      	lsls	r2, r7, #12
 8010cda:	4c9b      	ldr	r4, [pc, #620]	; (8010f48 <_dtoa_r+0x354>)
 8010cdc:	0b12      	lsrs	r2, r2, #12
 8010cde:	4314      	orrs	r4, r2
 8010ce0:	0021      	movs	r1, r4
 8010ce2:	4a9a      	ldr	r2, [pc, #616]	; (8010f4c <_dtoa_r+0x358>)
 8010ce4:	0030      	movs	r0, r6
 8010ce6:	9518      	str	r5, [sp, #96]	; 0x60
 8010ce8:	189e      	adds	r6, r3, r2
 8010cea:	2200      	movs	r2, #0
 8010cec:	4b98      	ldr	r3, [pc, #608]	; (8010f50 <_dtoa_r+0x35c>)
 8010cee:	f7f0 fead 	bl	8001a4c <__aeabi_dsub>
 8010cf2:	4a98      	ldr	r2, [pc, #608]	; (8010f54 <_dtoa_r+0x360>)
 8010cf4:	4b98      	ldr	r3, [pc, #608]	; (8010f58 <_dtoa_r+0x364>)
 8010cf6:	f7f0 fc29 	bl	800154c <__aeabi_dmul>
 8010cfa:	4a98      	ldr	r2, [pc, #608]	; (8010f5c <_dtoa_r+0x368>)
 8010cfc:	4b98      	ldr	r3, [pc, #608]	; (8010f60 <_dtoa_r+0x36c>)
 8010cfe:	f7ef fce1 	bl	80006c4 <__aeabi_dadd>
 8010d02:	0004      	movs	r4, r0
 8010d04:	0030      	movs	r0, r6
 8010d06:	000d      	movs	r5, r1
 8010d08:	f7f1 fa0a 	bl	8002120 <__aeabi_i2d>
 8010d0c:	4a95      	ldr	r2, [pc, #596]	; (8010f64 <_dtoa_r+0x370>)
 8010d0e:	4b96      	ldr	r3, [pc, #600]	; (8010f68 <_dtoa_r+0x374>)
 8010d10:	f7f0 fc1c 	bl	800154c <__aeabi_dmul>
 8010d14:	0002      	movs	r2, r0
 8010d16:	000b      	movs	r3, r1
 8010d18:	0020      	movs	r0, r4
 8010d1a:	0029      	movs	r1, r5
 8010d1c:	f7ef fcd2 	bl	80006c4 <__aeabi_dadd>
 8010d20:	0004      	movs	r4, r0
 8010d22:	000d      	movs	r5, r1
 8010d24:	f7f1 f9c8 	bl	80020b8 <__aeabi_d2iz>
 8010d28:	2200      	movs	r2, #0
 8010d2a:	9003      	str	r0, [sp, #12]
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	0020      	movs	r0, r4
 8010d30:	0029      	movs	r1, r5
 8010d32:	f7ef fba1 	bl	8000478 <__aeabi_dcmplt>
 8010d36:	2800      	cmp	r0, #0
 8010d38:	d00e      	beq.n	8010d58 <_dtoa_r+0x164>
 8010d3a:	9803      	ldr	r0, [sp, #12]
 8010d3c:	f7f1 f9f0 	bl	8002120 <__aeabi_i2d>
 8010d40:	000b      	movs	r3, r1
 8010d42:	0002      	movs	r2, r0
 8010d44:	0029      	movs	r1, r5
 8010d46:	0020      	movs	r0, r4
 8010d48:	f7ef fb90 	bl	800046c <__aeabi_dcmpeq>
 8010d4c:	0003      	movs	r3, r0
 8010d4e:	4258      	negs	r0, r3
 8010d50:	4158      	adcs	r0, r3
 8010d52:	9b03      	ldr	r3, [sp, #12]
 8010d54:	1a1b      	subs	r3, r3, r0
 8010d56:	9303      	str	r3, [sp, #12]
 8010d58:	2301      	movs	r3, #1
 8010d5a:	9316      	str	r3, [sp, #88]	; 0x58
 8010d5c:	9b03      	ldr	r3, [sp, #12]
 8010d5e:	2b16      	cmp	r3, #22
 8010d60:	d80f      	bhi.n	8010d82 <_dtoa_r+0x18e>
 8010d62:	4982      	ldr	r1, [pc, #520]	; (8010f6c <_dtoa_r+0x378>)
 8010d64:	00db      	lsls	r3, r3, #3
 8010d66:	18c9      	adds	r1, r1, r3
 8010d68:	6808      	ldr	r0, [r1, #0]
 8010d6a:	6849      	ldr	r1, [r1, #4]
 8010d6c:	9a06      	ldr	r2, [sp, #24]
 8010d6e:	9b07      	ldr	r3, [sp, #28]
 8010d70:	f7ef fb96 	bl	80004a0 <__aeabi_dcmpgt>
 8010d74:	2800      	cmp	r0, #0
 8010d76:	d04b      	beq.n	8010e10 <_dtoa_r+0x21c>
 8010d78:	9b03      	ldr	r3, [sp, #12]
 8010d7a:	3b01      	subs	r3, #1
 8010d7c:	9303      	str	r3, [sp, #12]
 8010d7e:	2300      	movs	r3, #0
 8010d80:	9316      	str	r3, [sp, #88]	; 0x58
 8010d82:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010d84:	1b9e      	subs	r6, r3, r6
 8010d86:	2300      	movs	r3, #0
 8010d88:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d8a:	0033      	movs	r3, r6
 8010d8c:	3b01      	subs	r3, #1
 8010d8e:	930c      	str	r3, [sp, #48]	; 0x30
 8010d90:	d504      	bpl.n	8010d9c <_dtoa_r+0x1a8>
 8010d92:	2301      	movs	r3, #1
 8010d94:	1b9b      	subs	r3, r3, r6
 8010d96:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d98:	2300      	movs	r3, #0
 8010d9a:	930c      	str	r3, [sp, #48]	; 0x30
 8010d9c:	9b03      	ldr	r3, [sp, #12]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	db38      	blt.n	8010e14 <_dtoa_r+0x220>
 8010da2:	9a03      	ldr	r2, [sp, #12]
 8010da4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010da6:	4694      	mov	ip, r2
 8010da8:	4463      	add	r3, ip
 8010daa:	930c      	str	r3, [sp, #48]	; 0x30
 8010dac:	2300      	movs	r3, #0
 8010dae:	920f      	str	r2, [sp, #60]	; 0x3c
 8010db0:	9308      	str	r3, [sp, #32]
 8010db2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010db4:	2501      	movs	r5, #1
 8010db6:	2b09      	cmp	r3, #9
 8010db8:	d900      	bls.n	8010dbc <_dtoa_r+0x1c8>
 8010dba:	e091      	b.n	8010ee0 <_dtoa_r+0x2ec>
 8010dbc:	2b05      	cmp	r3, #5
 8010dbe:	dd02      	ble.n	8010dc6 <_dtoa_r+0x1d2>
 8010dc0:	2500      	movs	r5, #0
 8010dc2:	3b04      	subs	r3, #4
 8010dc4:	9322      	str	r3, [sp, #136]	; 0x88
 8010dc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010dc8:	1e98      	subs	r0, r3, #2
 8010dca:	2803      	cmp	r0, #3
 8010dcc:	d900      	bls.n	8010dd0 <_dtoa_r+0x1dc>
 8010dce:	e091      	b.n	8010ef4 <_dtoa_r+0x300>
 8010dd0:	f7ef f9a8 	bl	8000124 <__gnu_thumb1_case_uqi>
 8010dd4:	76298482 	.word	0x76298482
 8010dd8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010dda:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8010ddc:	189e      	adds	r6, r3, r2
 8010dde:	4b64      	ldr	r3, [pc, #400]	; (8010f70 <_dtoa_r+0x37c>)
 8010de0:	18f2      	adds	r2, r6, r3
 8010de2:	2a20      	cmp	r2, #32
 8010de4:	dd0f      	ble.n	8010e06 <_dtoa_r+0x212>
 8010de6:	4b63      	ldr	r3, [pc, #396]	; (8010f74 <_dtoa_r+0x380>)
 8010de8:	9806      	ldr	r0, [sp, #24]
 8010dea:	18f3      	adds	r3, r6, r3
 8010dec:	40d8      	lsrs	r0, r3
 8010dee:	2340      	movs	r3, #64	; 0x40
 8010df0:	1a9b      	subs	r3, r3, r2
 8010df2:	409c      	lsls	r4, r3
 8010df4:	4320      	orrs	r0, r4
 8010df6:	f7f1 f9d5 	bl	80021a4 <__aeabi_ui2d>
 8010dfa:	2301      	movs	r3, #1
 8010dfc:	4c5e      	ldr	r4, [pc, #376]	; (8010f78 <_dtoa_r+0x384>)
 8010dfe:	3e01      	subs	r6, #1
 8010e00:	1909      	adds	r1, r1, r4
 8010e02:	9318      	str	r3, [sp, #96]	; 0x60
 8010e04:	e771      	b.n	8010cea <_dtoa_r+0xf6>
 8010e06:	2320      	movs	r3, #32
 8010e08:	9806      	ldr	r0, [sp, #24]
 8010e0a:	1a9b      	subs	r3, r3, r2
 8010e0c:	4098      	lsls	r0, r3
 8010e0e:	e7f2      	b.n	8010df6 <_dtoa_r+0x202>
 8010e10:	9016      	str	r0, [sp, #88]	; 0x58
 8010e12:	e7b6      	b.n	8010d82 <_dtoa_r+0x18e>
 8010e14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e16:	9a03      	ldr	r2, [sp, #12]
 8010e18:	1a9b      	subs	r3, r3, r2
 8010e1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e1c:	4253      	negs	r3, r2
 8010e1e:	9308      	str	r3, [sp, #32]
 8010e20:	2300      	movs	r3, #0
 8010e22:	930f      	str	r3, [sp, #60]	; 0x3c
 8010e24:	e7c5      	b.n	8010db2 <_dtoa_r+0x1be>
 8010e26:	2301      	movs	r3, #1
 8010e28:	930e      	str	r3, [sp, #56]	; 0x38
 8010e2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	dd65      	ble.n	8010efc <_dtoa_r+0x308>
 8010e30:	001f      	movs	r7, r3
 8010e32:	930d      	str	r3, [sp, #52]	; 0x34
 8010e34:	9a04      	ldr	r2, [sp, #16]
 8010e36:	6a54      	ldr	r4, [r2, #36]	; 0x24
 8010e38:	2200      	movs	r2, #0
 8010e3a:	6062      	str	r2, [r4, #4]
 8010e3c:	3204      	adds	r2, #4
 8010e3e:	0011      	movs	r1, r2
 8010e40:	3114      	adds	r1, #20
 8010e42:	4299      	cmp	r1, r3
 8010e44:	d95f      	bls.n	8010f06 <_dtoa_r+0x312>
 8010e46:	6861      	ldr	r1, [r4, #4]
 8010e48:	9804      	ldr	r0, [sp, #16]
 8010e4a:	f000 fddc 	bl	8011a06 <_Balloc>
 8010e4e:	9b04      	ldr	r3, [sp, #16]
 8010e50:	6020      	str	r0, [r4, #0]
 8010e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	930a      	str	r3, [sp, #40]	; 0x28
 8010e58:	2f0e      	cmp	r7, #14
 8010e5a:	d900      	bls.n	8010e5e <_dtoa_r+0x26a>
 8010e5c:	e105      	b.n	801106a <_dtoa_r+0x476>
 8010e5e:	2d00      	cmp	r5, #0
 8010e60:	d100      	bne.n	8010e64 <_dtoa_r+0x270>
 8010e62:	e102      	b.n	801106a <_dtoa_r+0x476>
 8010e64:	9b06      	ldr	r3, [sp, #24]
 8010e66:	9c07      	ldr	r4, [sp, #28]
 8010e68:	9314      	str	r3, [sp, #80]	; 0x50
 8010e6a:	9415      	str	r4, [sp, #84]	; 0x54
 8010e6c:	9b03      	ldr	r3, [sp, #12]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	dc00      	bgt.n	8010e74 <_dtoa_r+0x280>
 8010e72:	e085      	b.n	8010f80 <_dtoa_r+0x38c>
 8010e74:	001a      	movs	r2, r3
 8010e76:	210f      	movs	r1, #15
 8010e78:	4b3c      	ldr	r3, [pc, #240]	; (8010f6c <_dtoa_r+0x378>)
 8010e7a:	400a      	ands	r2, r1
 8010e7c:	00d2      	lsls	r2, r2, #3
 8010e7e:	189b      	adds	r3, r3, r2
 8010e80:	685c      	ldr	r4, [r3, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	9310      	str	r3, [sp, #64]	; 0x40
 8010e86:	9411      	str	r4, [sp, #68]	; 0x44
 8010e88:	9b03      	ldr	r3, [sp, #12]
 8010e8a:	2402      	movs	r4, #2
 8010e8c:	111d      	asrs	r5, r3, #4
 8010e8e:	06eb      	lsls	r3, r5, #27
 8010e90:	d50a      	bpl.n	8010ea8 <_dtoa_r+0x2b4>
 8010e92:	4b3a      	ldr	r3, [pc, #232]	; (8010f7c <_dtoa_r+0x388>)
 8010e94:	400d      	ands	r5, r1
 8010e96:	6a1a      	ldr	r2, [r3, #32]
 8010e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e9a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8010e9c:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010e9e:	f7ef ff21 	bl	8000ce4 <__aeabi_ddiv>
 8010ea2:	9006      	str	r0, [sp, #24]
 8010ea4:	9107      	str	r1, [sp, #28]
 8010ea6:	3401      	adds	r4, #1
 8010ea8:	4e34      	ldr	r6, [pc, #208]	; (8010f7c <_dtoa_r+0x388>)
 8010eaa:	2d00      	cmp	r5, #0
 8010eac:	d130      	bne.n	8010f10 <_dtoa_r+0x31c>
 8010eae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010eb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010eb2:	9806      	ldr	r0, [sp, #24]
 8010eb4:	9907      	ldr	r1, [sp, #28]
 8010eb6:	f7ef ff15 	bl	8000ce4 <__aeabi_ddiv>
 8010eba:	9006      	str	r0, [sp, #24]
 8010ebc:	9107      	str	r1, [sp, #28]
 8010ebe:	e07a      	b.n	8010fb6 <_dtoa_r+0x3c2>
 8010ec0:	2301      	movs	r3, #1
 8010ec2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8010ec4:	930e      	str	r3, [sp, #56]	; 0x38
 8010ec6:	4694      	mov	ip, r2
 8010ec8:	9b03      	ldr	r3, [sp, #12]
 8010eca:	4463      	add	r3, ip
 8010ecc:	1c5f      	adds	r7, r3, #1
 8010ece:	930d      	str	r3, [sp, #52]	; 0x34
 8010ed0:	1e3b      	subs	r3, r7, #0
 8010ed2:	dcaf      	bgt.n	8010e34 <_dtoa_r+0x240>
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	e7ad      	b.n	8010e34 <_dtoa_r+0x240>
 8010ed8:	2300      	movs	r3, #0
 8010eda:	e7a5      	b.n	8010e28 <_dtoa_r+0x234>
 8010edc:	2300      	movs	r3, #0
 8010ede:	e7f0      	b.n	8010ec2 <_dtoa_r+0x2ce>
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	950e      	str	r5, [sp, #56]	; 0x38
 8010ee4:	9322      	str	r3, [sp, #136]	; 0x88
 8010ee6:	3b01      	subs	r3, #1
 8010ee8:	2200      	movs	r2, #0
 8010eea:	930d      	str	r3, [sp, #52]	; 0x34
 8010eec:	001f      	movs	r7, r3
 8010eee:	3313      	adds	r3, #19
 8010ef0:	9223      	str	r2, [sp, #140]	; 0x8c
 8010ef2:	e79f      	b.n	8010e34 <_dtoa_r+0x240>
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	930e      	str	r3, [sp, #56]	; 0x38
 8010ef8:	3b02      	subs	r3, #2
 8010efa:	e7f5      	b.n	8010ee8 <_dtoa_r+0x2f4>
 8010efc:	2301      	movs	r3, #1
 8010efe:	930d      	str	r3, [sp, #52]	; 0x34
 8010f00:	001f      	movs	r7, r3
 8010f02:	001a      	movs	r2, r3
 8010f04:	e7f4      	b.n	8010ef0 <_dtoa_r+0x2fc>
 8010f06:	6861      	ldr	r1, [r4, #4]
 8010f08:	0052      	lsls	r2, r2, #1
 8010f0a:	3101      	adds	r1, #1
 8010f0c:	6061      	str	r1, [r4, #4]
 8010f0e:	e796      	b.n	8010e3e <_dtoa_r+0x24a>
 8010f10:	2301      	movs	r3, #1
 8010f12:	421d      	tst	r5, r3
 8010f14:	d008      	beq.n	8010f28 <_dtoa_r+0x334>
 8010f16:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010f18:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010f1a:	18e4      	adds	r4, r4, r3
 8010f1c:	6832      	ldr	r2, [r6, #0]
 8010f1e:	6873      	ldr	r3, [r6, #4]
 8010f20:	f7f0 fb14 	bl	800154c <__aeabi_dmul>
 8010f24:	9010      	str	r0, [sp, #64]	; 0x40
 8010f26:	9111      	str	r1, [sp, #68]	; 0x44
 8010f28:	106d      	asrs	r5, r5, #1
 8010f2a:	3608      	adds	r6, #8
 8010f2c:	e7bd      	b.n	8010eaa <_dtoa_r+0x2b6>
 8010f2e:	46c0      	nop			; (mov r8, r8)
 8010f30:	7ff00000 	.word	0x7ff00000
 8010f34:	0000270f 	.word	0x0000270f
 8010f38:	0801577b 	.word	0x0801577b
 8010f3c:	0801577e 	.word	0x0801577e
 8010f40:	08015750 	.word	0x08015750
 8010f44:	08015751 	.word	0x08015751
 8010f48:	3ff00000 	.word	0x3ff00000
 8010f4c:	fffffc01 	.word	0xfffffc01
 8010f50:	3ff80000 	.word	0x3ff80000
 8010f54:	636f4361 	.word	0x636f4361
 8010f58:	3fd287a7 	.word	0x3fd287a7
 8010f5c:	8b60c8b3 	.word	0x8b60c8b3
 8010f60:	3fc68a28 	.word	0x3fc68a28
 8010f64:	509f79fb 	.word	0x509f79fb
 8010f68:	3fd34413 	.word	0x3fd34413
 8010f6c:	080157a8 	.word	0x080157a8
 8010f70:	00000432 	.word	0x00000432
 8010f74:	00000412 	.word	0x00000412
 8010f78:	fe100000 	.word	0xfe100000
 8010f7c:	08015780 	.word	0x08015780
 8010f80:	9b03      	ldr	r3, [sp, #12]
 8010f82:	2402      	movs	r4, #2
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d016      	beq.n	8010fb6 <_dtoa_r+0x3c2>
 8010f88:	9814      	ldr	r0, [sp, #80]	; 0x50
 8010f8a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010f8c:	425d      	negs	r5, r3
 8010f8e:	230f      	movs	r3, #15
 8010f90:	4aca      	ldr	r2, [pc, #808]	; (80112bc <_dtoa_r+0x6c8>)
 8010f92:	402b      	ands	r3, r5
 8010f94:	00db      	lsls	r3, r3, #3
 8010f96:	18d3      	adds	r3, r2, r3
 8010f98:	681a      	ldr	r2, [r3, #0]
 8010f9a:	685b      	ldr	r3, [r3, #4]
 8010f9c:	f7f0 fad6 	bl	800154c <__aeabi_dmul>
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	9006      	str	r0, [sp, #24]
 8010fa4:	9107      	str	r1, [sp, #28]
 8010fa6:	4ec6      	ldr	r6, [pc, #792]	; (80112c0 <_dtoa_r+0x6cc>)
 8010fa8:	112d      	asrs	r5, r5, #4
 8010faa:	2d00      	cmp	r5, #0
 8010fac:	d000      	beq.n	8010fb0 <_dtoa_r+0x3bc>
 8010fae:	e08c      	b.n	80110ca <_dtoa_r+0x4d6>
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d000      	beq.n	8010fb6 <_dtoa_r+0x3c2>
 8010fb4:	e781      	b.n	8010eba <_dtoa_r+0x2c6>
 8010fb6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d100      	bne.n	8010fbe <_dtoa_r+0x3ca>
 8010fbc:	e091      	b.n	80110e2 <_dtoa_r+0x4ee>
 8010fbe:	9a06      	ldr	r2, [sp, #24]
 8010fc0:	9b07      	ldr	r3, [sp, #28]
 8010fc2:	9210      	str	r2, [sp, #64]	; 0x40
 8010fc4:	9311      	str	r3, [sp, #68]	; 0x44
 8010fc6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010fc8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010fca:	2200      	movs	r2, #0
 8010fcc:	4bbd      	ldr	r3, [pc, #756]	; (80112c4 <_dtoa_r+0x6d0>)
 8010fce:	f7ef fa53 	bl	8000478 <__aeabi_dcmplt>
 8010fd2:	2800      	cmp	r0, #0
 8010fd4:	d100      	bne.n	8010fd8 <_dtoa_r+0x3e4>
 8010fd6:	e084      	b.n	80110e2 <_dtoa_r+0x4ee>
 8010fd8:	2f00      	cmp	r7, #0
 8010fda:	d100      	bne.n	8010fde <_dtoa_r+0x3ea>
 8010fdc:	e081      	b.n	80110e2 <_dtoa_r+0x4ee>
 8010fde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	dd3e      	ble.n	8011062 <_dtoa_r+0x46e>
 8010fe4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010fe6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010fe8:	9b03      	ldr	r3, [sp, #12]
 8010fea:	2200      	movs	r2, #0
 8010fec:	1e5e      	subs	r6, r3, #1
 8010fee:	4bb6      	ldr	r3, [pc, #728]	; (80112c8 <_dtoa_r+0x6d4>)
 8010ff0:	f7f0 faac 	bl	800154c <__aeabi_dmul>
 8010ff4:	9006      	str	r0, [sp, #24]
 8010ff6:	9107      	str	r1, [sp, #28]
 8010ff8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010ffa:	3401      	adds	r4, #1
 8010ffc:	0020      	movs	r0, r4
 8010ffe:	f7f1 f88f 	bl	8002120 <__aeabi_i2d>
 8011002:	9a06      	ldr	r2, [sp, #24]
 8011004:	9b07      	ldr	r3, [sp, #28]
 8011006:	f7f0 faa1 	bl	800154c <__aeabi_dmul>
 801100a:	2200      	movs	r2, #0
 801100c:	4baf      	ldr	r3, [pc, #700]	; (80112cc <_dtoa_r+0x6d8>)
 801100e:	f7ef fb59 	bl	80006c4 <__aeabi_dadd>
 8011012:	9012      	str	r0, [sp, #72]	; 0x48
 8011014:	9113      	str	r1, [sp, #76]	; 0x4c
 8011016:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011018:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801101a:	4aad      	ldr	r2, [pc, #692]	; (80112d0 <_dtoa_r+0x6dc>)
 801101c:	9310      	str	r3, [sp, #64]	; 0x40
 801101e:	9411      	str	r4, [sp, #68]	; 0x44
 8011020:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011022:	189c      	adds	r4, r3, r2
 8011024:	9411      	str	r4, [sp, #68]	; 0x44
 8011026:	2d00      	cmp	r5, #0
 8011028:	d15e      	bne.n	80110e8 <_dtoa_r+0x4f4>
 801102a:	9806      	ldr	r0, [sp, #24]
 801102c:	9907      	ldr	r1, [sp, #28]
 801102e:	2200      	movs	r2, #0
 8011030:	4ba8      	ldr	r3, [pc, #672]	; (80112d4 <_dtoa_r+0x6e0>)
 8011032:	f7f0 fd0b 	bl	8001a4c <__aeabi_dsub>
 8011036:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011038:	0023      	movs	r3, r4
 801103a:	9006      	str	r0, [sp, #24]
 801103c:	9107      	str	r1, [sp, #28]
 801103e:	f7ef fa2f 	bl	80004a0 <__aeabi_dcmpgt>
 8011042:	2800      	cmp	r0, #0
 8011044:	d000      	beq.n	8011048 <_dtoa_r+0x454>
 8011046:	e301      	b.n	801164c <_dtoa_r+0xa58>
 8011048:	48a3      	ldr	r0, [pc, #652]	; (80112d8 <_dtoa_r+0x6e4>)
 801104a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801104c:	4684      	mov	ip, r0
 801104e:	4461      	add	r1, ip
 8011050:	000b      	movs	r3, r1
 8011052:	9806      	ldr	r0, [sp, #24]
 8011054:	9907      	ldr	r1, [sp, #28]
 8011056:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011058:	f7ef fa0e 	bl	8000478 <__aeabi_dcmplt>
 801105c:	2800      	cmp	r0, #0
 801105e:	d000      	beq.n	8011062 <_dtoa_r+0x46e>
 8011060:	e2e8      	b.n	8011634 <_dtoa_r+0xa40>
 8011062:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011064:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8011066:	9306      	str	r3, [sp, #24]
 8011068:	9407      	str	r4, [sp, #28]
 801106a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801106c:	2b00      	cmp	r3, #0
 801106e:	da00      	bge.n	8011072 <_dtoa_r+0x47e>
 8011070:	e157      	b.n	8011322 <_dtoa_r+0x72e>
 8011072:	9a03      	ldr	r2, [sp, #12]
 8011074:	2a0e      	cmp	r2, #14
 8011076:	dd00      	ble.n	801107a <_dtoa_r+0x486>
 8011078:	e153      	b.n	8011322 <_dtoa_r+0x72e>
 801107a:	4b90      	ldr	r3, [pc, #576]	; (80112bc <_dtoa_r+0x6c8>)
 801107c:	00d2      	lsls	r2, r2, #3
 801107e:	189b      	adds	r3, r3, r2
 8011080:	685c      	ldr	r4, [r3, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	9308      	str	r3, [sp, #32]
 8011086:	9409      	str	r4, [sp, #36]	; 0x24
 8011088:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801108a:	2b00      	cmp	r3, #0
 801108c:	db00      	blt.n	8011090 <_dtoa_r+0x49c>
 801108e:	e0ce      	b.n	801122e <_dtoa_r+0x63a>
 8011090:	2f00      	cmp	r7, #0
 8011092:	dd00      	ble.n	8011096 <_dtoa_r+0x4a2>
 8011094:	e0cb      	b.n	801122e <_dtoa_r+0x63a>
 8011096:	d000      	beq.n	801109a <_dtoa_r+0x4a6>
 8011098:	e2cf      	b.n	801163a <_dtoa_r+0xa46>
 801109a:	9808      	ldr	r0, [sp, #32]
 801109c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801109e:	2200      	movs	r2, #0
 80110a0:	4b8c      	ldr	r3, [pc, #560]	; (80112d4 <_dtoa_r+0x6e0>)
 80110a2:	f7f0 fa53 	bl	800154c <__aeabi_dmul>
 80110a6:	9a06      	ldr	r2, [sp, #24]
 80110a8:	9b07      	ldr	r3, [sp, #28]
 80110aa:	f7ef fa03 	bl	80004b4 <__aeabi_dcmpge>
 80110ae:	003e      	movs	r6, r7
 80110b0:	9708      	str	r7, [sp, #32]
 80110b2:	2800      	cmp	r0, #0
 80110b4:	d000      	beq.n	80110b8 <_dtoa_r+0x4c4>
 80110b6:	e2a4      	b.n	8011602 <_dtoa_r+0xa0e>
 80110b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80110bc:	1c5d      	adds	r5, r3, #1
 80110be:	2331      	movs	r3, #49	; 0x31
 80110c0:	7013      	strb	r3, [r2, #0]
 80110c2:	9b03      	ldr	r3, [sp, #12]
 80110c4:	3301      	adds	r3, #1
 80110c6:	9303      	str	r3, [sp, #12]
 80110c8:	e29f      	b.n	801160a <_dtoa_r+0xa16>
 80110ca:	2201      	movs	r2, #1
 80110cc:	4215      	tst	r5, r2
 80110ce:	d005      	beq.n	80110dc <_dtoa_r+0x4e8>
 80110d0:	18a4      	adds	r4, r4, r2
 80110d2:	6832      	ldr	r2, [r6, #0]
 80110d4:	6873      	ldr	r3, [r6, #4]
 80110d6:	f7f0 fa39 	bl	800154c <__aeabi_dmul>
 80110da:	2301      	movs	r3, #1
 80110dc:	106d      	asrs	r5, r5, #1
 80110de:	3608      	adds	r6, #8
 80110e0:	e763      	b.n	8010faa <_dtoa_r+0x3b6>
 80110e2:	9e03      	ldr	r6, [sp, #12]
 80110e4:	003d      	movs	r5, r7
 80110e6:	e789      	b.n	8010ffc <_dtoa_r+0x408>
 80110e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80110ea:	1e69      	subs	r1, r5, #1
 80110ec:	1952      	adds	r2, r2, r5
 80110ee:	9217      	str	r2, [sp, #92]	; 0x5c
 80110f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80110f2:	4b72      	ldr	r3, [pc, #456]	; (80112bc <_dtoa_r+0x6c8>)
 80110f4:	00c9      	lsls	r1, r1, #3
 80110f6:	2a00      	cmp	r2, #0
 80110f8:	d04a      	beq.n	8011190 <_dtoa_r+0x59c>
 80110fa:	185b      	adds	r3, r3, r1
 80110fc:	681a      	ldr	r2, [r3, #0]
 80110fe:	685b      	ldr	r3, [r3, #4]
 8011100:	2000      	movs	r0, #0
 8011102:	4976      	ldr	r1, [pc, #472]	; (80112dc <_dtoa_r+0x6e8>)
 8011104:	f7ef fdee 	bl	8000ce4 <__aeabi_ddiv>
 8011108:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801110a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801110c:	f7f0 fc9e 	bl	8001a4c <__aeabi_dsub>
 8011110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011112:	9010      	str	r0, [sp, #64]	; 0x40
 8011114:	9111      	str	r1, [sp, #68]	; 0x44
 8011116:	9312      	str	r3, [sp, #72]	; 0x48
 8011118:	9806      	ldr	r0, [sp, #24]
 801111a:	9907      	ldr	r1, [sp, #28]
 801111c:	f7f0 ffcc 	bl	80020b8 <__aeabi_d2iz>
 8011120:	0004      	movs	r4, r0
 8011122:	f7f0 fffd 	bl	8002120 <__aeabi_i2d>
 8011126:	0002      	movs	r2, r0
 8011128:	000b      	movs	r3, r1
 801112a:	9806      	ldr	r0, [sp, #24]
 801112c:	9907      	ldr	r1, [sp, #28]
 801112e:	f7f0 fc8d 	bl	8001a4c <__aeabi_dsub>
 8011132:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011134:	3430      	adds	r4, #48	; 0x30
 8011136:	1c5d      	adds	r5, r3, #1
 8011138:	701c      	strb	r4, [r3, #0]
 801113a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801113c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801113e:	9006      	str	r0, [sp, #24]
 8011140:	9107      	str	r1, [sp, #28]
 8011142:	f7ef f999 	bl	8000478 <__aeabi_dcmplt>
 8011146:	2800      	cmp	r0, #0
 8011148:	d165      	bne.n	8011216 <_dtoa_r+0x622>
 801114a:	9a06      	ldr	r2, [sp, #24]
 801114c:	9b07      	ldr	r3, [sp, #28]
 801114e:	2000      	movs	r0, #0
 8011150:	495c      	ldr	r1, [pc, #368]	; (80112c4 <_dtoa_r+0x6d0>)
 8011152:	f7f0 fc7b 	bl	8001a4c <__aeabi_dsub>
 8011156:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011158:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801115a:	f7ef f98d 	bl	8000478 <__aeabi_dcmplt>
 801115e:	2800      	cmp	r0, #0
 8011160:	d000      	beq.n	8011164 <_dtoa_r+0x570>
 8011162:	e0be      	b.n	80112e2 <_dtoa_r+0x6ee>
 8011164:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011166:	429d      	cmp	r5, r3
 8011168:	d100      	bne.n	801116c <_dtoa_r+0x578>
 801116a:	e77a      	b.n	8011062 <_dtoa_r+0x46e>
 801116c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801116e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011170:	2200      	movs	r2, #0
 8011172:	4b55      	ldr	r3, [pc, #340]	; (80112c8 <_dtoa_r+0x6d4>)
 8011174:	f7f0 f9ea 	bl	800154c <__aeabi_dmul>
 8011178:	2200      	movs	r2, #0
 801117a:	9010      	str	r0, [sp, #64]	; 0x40
 801117c:	9111      	str	r1, [sp, #68]	; 0x44
 801117e:	9806      	ldr	r0, [sp, #24]
 8011180:	9907      	ldr	r1, [sp, #28]
 8011182:	4b51      	ldr	r3, [pc, #324]	; (80112c8 <_dtoa_r+0x6d4>)
 8011184:	f7f0 f9e2 	bl	800154c <__aeabi_dmul>
 8011188:	9512      	str	r5, [sp, #72]	; 0x48
 801118a:	9006      	str	r0, [sp, #24]
 801118c:	9107      	str	r1, [sp, #28]
 801118e:	e7c3      	b.n	8011118 <_dtoa_r+0x524>
 8011190:	1859      	adds	r1, r3, r1
 8011192:	6808      	ldr	r0, [r1, #0]
 8011194:	6849      	ldr	r1, [r1, #4]
 8011196:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011198:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801119a:	f7f0 f9d7 	bl	800154c <__aeabi_dmul>
 801119e:	9010      	str	r0, [sp, #64]	; 0x40
 80111a0:	9111      	str	r1, [sp, #68]	; 0x44
 80111a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80111a4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80111a6:	9806      	ldr	r0, [sp, #24]
 80111a8:	9907      	ldr	r1, [sp, #28]
 80111aa:	f7f0 ff85 	bl	80020b8 <__aeabi_d2iz>
 80111ae:	9012      	str	r0, [sp, #72]	; 0x48
 80111b0:	f7f0 ffb6 	bl	8002120 <__aeabi_i2d>
 80111b4:	0002      	movs	r2, r0
 80111b6:	000b      	movs	r3, r1
 80111b8:	9806      	ldr	r0, [sp, #24]
 80111ba:	9907      	ldr	r1, [sp, #28]
 80111bc:	f7f0 fc46 	bl	8001a4c <__aeabi_dsub>
 80111c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80111c2:	9006      	str	r0, [sp, #24]
 80111c4:	9107      	str	r1, [sp, #28]
 80111c6:	3330      	adds	r3, #48	; 0x30
 80111c8:	7023      	strb	r3, [r4, #0]
 80111ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80111cc:	3401      	adds	r4, #1
 80111ce:	2200      	movs	r2, #0
 80111d0:	42a3      	cmp	r3, r4
 80111d2:	d124      	bne.n	801121e <_dtoa_r+0x62a>
 80111d4:	4b41      	ldr	r3, [pc, #260]	; (80112dc <_dtoa_r+0x6e8>)
 80111d6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80111d8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80111da:	f7ef fa73 	bl	80006c4 <__aeabi_dadd>
 80111de:	0002      	movs	r2, r0
 80111e0:	000b      	movs	r3, r1
 80111e2:	9806      	ldr	r0, [sp, #24]
 80111e4:	9907      	ldr	r1, [sp, #28]
 80111e6:	f7ef f95b 	bl	80004a0 <__aeabi_dcmpgt>
 80111ea:	2800      	cmp	r0, #0
 80111ec:	d000      	beq.n	80111f0 <_dtoa_r+0x5fc>
 80111ee:	e078      	b.n	80112e2 <_dtoa_r+0x6ee>
 80111f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80111f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80111f4:	2000      	movs	r0, #0
 80111f6:	4939      	ldr	r1, [pc, #228]	; (80112dc <_dtoa_r+0x6e8>)
 80111f8:	f7f0 fc28 	bl	8001a4c <__aeabi_dsub>
 80111fc:	0002      	movs	r2, r0
 80111fe:	000b      	movs	r3, r1
 8011200:	9806      	ldr	r0, [sp, #24]
 8011202:	9907      	ldr	r1, [sp, #28]
 8011204:	f7ef f938 	bl	8000478 <__aeabi_dcmplt>
 8011208:	2800      	cmp	r0, #0
 801120a:	d100      	bne.n	801120e <_dtoa_r+0x61a>
 801120c:	e729      	b.n	8011062 <_dtoa_r+0x46e>
 801120e:	1e6b      	subs	r3, r5, #1
 8011210:	781a      	ldrb	r2, [r3, #0]
 8011212:	2a30      	cmp	r2, #48	; 0x30
 8011214:	d001      	beq.n	801121a <_dtoa_r+0x626>
 8011216:	9603      	str	r6, [sp, #12]
 8011218:	e03f      	b.n	801129a <_dtoa_r+0x6a6>
 801121a:	001d      	movs	r5, r3
 801121c:	e7f7      	b.n	801120e <_dtoa_r+0x61a>
 801121e:	9806      	ldr	r0, [sp, #24]
 8011220:	9907      	ldr	r1, [sp, #28]
 8011222:	4b29      	ldr	r3, [pc, #164]	; (80112c8 <_dtoa_r+0x6d4>)
 8011224:	f7f0 f992 	bl	800154c <__aeabi_dmul>
 8011228:	9006      	str	r0, [sp, #24]
 801122a:	9107      	str	r1, [sp, #28]
 801122c:	e7bb      	b.n	80111a6 <_dtoa_r+0x5b2>
 801122e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011230:	9a08      	ldr	r2, [sp, #32]
 8011232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011234:	9806      	ldr	r0, [sp, #24]
 8011236:	9907      	ldr	r1, [sp, #28]
 8011238:	f7ef fd54 	bl	8000ce4 <__aeabi_ddiv>
 801123c:	f7f0 ff3c 	bl	80020b8 <__aeabi_d2iz>
 8011240:	0004      	movs	r4, r0
 8011242:	f7f0 ff6d 	bl	8002120 <__aeabi_i2d>
 8011246:	9a08      	ldr	r2, [sp, #32]
 8011248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801124a:	f7f0 f97f 	bl	800154c <__aeabi_dmul>
 801124e:	000b      	movs	r3, r1
 8011250:	0002      	movs	r2, r0
 8011252:	9806      	ldr	r0, [sp, #24]
 8011254:	9907      	ldr	r1, [sp, #28]
 8011256:	f7f0 fbf9 	bl	8001a4c <__aeabi_dsub>
 801125a:	0023      	movs	r3, r4
 801125c:	3330      	adds	r3, #48	; 0x30
 801125e:	7033      	strb	r3, [r6, #0]
 8011260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011262:	1c75      	adds	r5, r6, #1
 8011264:	1aeb      	subs	r3, r5, r3
 8011266:	429f      	cmp	r7, r3
 8011268:	d14c      	bne.n	8011304 <_dtoa_r+0x710>
 801126a:	0002      	movs	r2, r0
 801126c:	000b      	movs	r3, r1
 801126e:	f7ef fa29 	bl	80006c4 <__aeabi_dadd>
 8011272:	0006      	movs	r6, r0
 8011274:	000f      	movs	r7, r1
 8011276:	0002      	movs	r2, r0
 8011278:	000b      	movs	r3, r1
 801127a:	9808      	ldr	r0, [sp, #32]
 801127c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801127e:	f7ef f8fb 	bl	8000478 <__aeabi_dcmplt>
 8011282:	2800      	cmp	r0, #0
 8011284:	d12c      	bne.n	80112e0 <_dtoa_r+0x6ec>
 8011286:	9808      	ldr	r0, [sp, #32]
 8011288:	9909      	ldr	r1, [sp, #36]	; 0x24
 801128a:	0032      	movs	r2, r6
 801128c:	003b      	movs	r3, r7
 801128e:	f7ef f8ed 	bl	800046c <__aeabi_dcmpeq>
 8011292:	2800      	cmp	r0, #0
 8011294:	d001      	beq.n	801129a <_dtoa_r+0x6a6>
 8011296:	07e3      	lsls	r3, r4, #31
 8011298:	d422      	bmi.n	80112e0 <_dtoa_r+0x6ec>
 801129a:	9905      	ldr	r1, [sp, #20]
 801129c:	9804      	ldr	r0, [sp, #16]
 801129e:	f000 fbea 	bl	8011a76 <_Bfree>
 80112a2:	2300      	movs	r3, #0
 80112a4:	702b      	strb	r3, [r5, #0]
 80112a6:	9b03      	ldr	r3, [sp, #12]
 80112a8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80112aa:	3301      	adds	r3, #1
 80112ac:	6013      	str	r3, [r2, #0]
 80112ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d100      	bne.n	80112b6 <_dtoa_r+0x6c2>
 80112b4:	e275      	b.n	80117a2 <_dtoa_r+0xbae>
 80112b6:	601d      	str	r5, [r3, #0]
 80112b8:	e273      	b.n	80117a2 <_dtoa_r+0xbae>
 80112ba:	46c0      	nop			; (mov r8, r8)
 80112bc:	080157a8 	.word	0x080157a8
 80112c0:	08015780 	.word	0x08015780
 80112c4:	3ff00000 	.word	0x3ff00000
 80112c8:	40240000 	.word	0x40240000
 80112cc:	401c0000 	.word	0x401c0000
 80112d0:	fcc00000 	.word	0xfcc00000
 80112d4:	40140000 	.word	0x40140000
 80112d8:	7cc00000 	.word	0x7cc00000
 80112dc:	3fe00000 	.word	0x3fe00000
 80112e0:	9e03      	ldr	r6, [sp, #12]
 80112e2:	1e6b      	subs	r3, r5, #1
 80112e4:	781a      	ldrb	r2, [r3, #0]
 80112e6:	2a39      	cmp	r2, #57	; 0x39
 80112e8:	d106      	bne.n	80112f8 <_dtoa_r+0x704>
 80112ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80112ec:	429a      	cmp	r2, r3
 80112ee:	d107      	bne.n	8011300 <_dtoa_r+0x70c>
 80112f0:	2330      	movs	r3, #48	; 0x30
 80112f2:	7013      	strb	r3, [r2, #0]
 80112f4:	0013      	movs	r3, r2
 80112f6:	3601      	adds	r6, #1
 80112f8:	781a      	ldrb	r2, [r3, #0]
 80112fa:	3201      	adds	r2, #1
 80112fc:	701a      	strb	r2, [r3, #0]
 80112fe:	e78a      	b.n	8011216 <_dtoa_r+0x622>
 8011300:	001d      	movs	r5, r3
 8011302:	e7ee      	b.n	80112e2 <_dtoa_r+0x6ee>
 8011304:	2200      	movs	r2, #0
 8011306:	4bcf      	ldr	r3, [pc, #828]	; (8011644 <_dtoa_r+0xa50>)
 8011308:	f7f0 f920 	bl	800154c <__aeabi_dmul>
 801130c:	2200      	movs	r2, #0
 801130e:	2300      	movs	r3, #0
 8011310:	9006      	str	r0, [sp, #24]
 8011312:	9107      	str	r1, [sp, #28]
 8011314:	002e      	movs	r6, r5
 8011316:	f7ef f8a9 	bl	800046c <__aeabi_dcmpeq>
 801131a:	2800      	cmp	r0, #0
 801131c:	d100      	bne.n	8011320 <_dtoa_r+0x72c>
 801131e:	e787      	b.n	8011230 <_dtoa_r+0x63c>
 8011320:	e7bb      	b.n	801129a <_dtoa_r+0x6a6>
 8011322:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011324:	2a00      	cmp	r2, #0
 8011326:	d100      	bne.n	801132a <_dtoa_r+0x736>
 8011328:	e087      	b.n	801143a <_dtoa_r+0x846>
 801132a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801132c:	2a01      	cmp	r2, #1
 801132e:	dc6e      	bgt.n	801140e <_dtoa_r+0x81a>
 8011330:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011332:	2a00      	cmp	r2, #0
 8011334:	d067      	beq.n	8011406 <_dtoa_r+0x812>
 8011336:	4ac4      	ldr	r2, [pc, #784]	; (8011648 <_dtoa_r+0xa54>)
 8011338:	189b      	adds	r3, r3, r2
 801133a:	9d08      	ldr	r5, [sp, #32]
 801133c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801133e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011340:	2101      	movs	r1, #1
 8011342:	18d2      	adds	r2, r2, r3
 8011344:	920b      	str	r2, [sp, #44]	; 0x2c
 8011346:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011348:	9804      	ldr	r0, [sp, #16]
 801134a:	18d3      	adds	r3, r2, r3
 801134c:	930c      	str	r3, [sp, #48]	; 0x30
 801134e:	f000 fc30 	bl	8011bb2 <__i2b>
 8011352:	0006      	movs	r6, r0
 8011354:	2c00      	cmp	r4, #0
 8011356:	dd0e      	ble.n	8011376 <_dtoa_r+0x782>
 8011358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801135a:	2b00      	cmp	r3, #0
 801135c:	dd0b      	ble.n	8011376 <_dtoa_r+0x782>
 801135e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011360:	0023      	movs	r3, r4
 8011362:	4294      	cmp	r4, r2
 8011364:	dd00      	ble.n	8011368 <_dtoa_r+0x774>
 8011366:	0013      	movs	r3, r2
 8011368:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801136a:	1ae4      	subs	r4, r4, r3
 801136c:	1ad2      	subs	r2, r2, r3
 801136e:	920b      	str	r2, [sp, #44]	; 0x2c
 8011370:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011372:	1ad3      	subs	r3, r2, r3
 8011374:	930c      	str	r3, [sp, #48]	; 0x30
 8011376:	9b08      	ldr	r3, [sp, #32]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d01e      	beq.n	80113ba <_dtoa_r+0x7c6>
 801137c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801137e:	2b00      	cmp	r3, #0
 8011380:	d05f      	beq.n	8011442 <_dtoa_r+0x84e>
 8011382:	2d00      	cmp	r5, #0
 8011384:	dd11      	ble.n	80113aa <_dtoa_r+0x7b6>
 8011386:	0031      	movs	r1, r6
 8011388:	002a      	movs	r2, r5
 801138a:	9804      	ldr	r0, [sp, #16]
 801138c:	f000 fcaa 	bl	8011ce4 <__pow5mult>
 8011390:	9a05      	ldr	r2, [sp, #20]
 8011392:	0001      	movs	r1, r0
 8011394:	0006      	movs	r6, r0
 8011396:	9804      	ldr	r0, [sp, #16]
 8011398:	f000 fc14 	bl	8011bc4 <__multiply>
 801139c:	9905      	ldr	r1, [sp, #20]
 801139e:	9010      	str	r0, [sp, #64]	; 0x40
 80113a0:	9804      	ldr	r0, [sp, #16]
 80113a2:	f000 fb68 	bl	8011a76 <_Bfree>
 80113a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80113a8:	9305      	str	r3, [sp, #20]
 80113aa:	9b08      	ldr	r3, [sp, #32]
 80113ac:	1b5a      	subs	r2, r3, r5
 80113ae:	d004      	beq.n	80113ba <_dtoa_r+0x7c6>
 80113b0:	9905      	ldr	r1, [sp, #20]
 80113b2:	9804      	ldr	r0, [sp, #16]
 80113b4:	f000 fc96 	bl	8011ce4 <__pow5mult>
 80113b8:	9005      	str	r0, [sp, #20]
 80113ba:	2101      	movs	r1, #1
 80113bc:	9804      	ldr	r0, [sp, #16]
 80113be:	f000 fbf8 	bl	8011bb2 <__i2b>
 80113c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80113c4:	9008      	str	r0, [sp, #32]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	dd3d      	ble.n	8011446 <_dtoa_r+0x852>
 80113ca:	001a      	movs	r2, r3
 80113cc:	0001      	movs	r1, r0
 80113ce:	9804      	ldr	r0, [sp, #16]
 80113d0:	f000 fc88 	bl	8011ce4 <__pow5mult>
 80113d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80113d6:	9008      	str	r0, [sp, #32]
 80113d8:	2500      	movs	r5, #0
 80113da:	2b01      	cmp	r3, #1
 80113dc:	dc3b      	bgt.n	8011456 <_dtoa_r+0x862>
 80113de:	2500      	movs	r5, #0
 80113e0:	9b06      	ldr	r3, [sp, #24]
 80113e2:	42ab      	cmp	r3, r5
 80113e4:	d133      	bne.n	801144e <_dtoa_r+0x85a>
 80113e6:	9b07      	ldr	r3, [sp, #28]
 80113e8:	031b      	lsls	r3, r3, #12
 80113ea:	42ab      	cmp	r3, r5
 80113ec:	d12f      	bne.n	801144e <_dtoa_r+0x85a>
 80113ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80113f0:	9a07      	ldr	r2, [sp, #28]
 80113f2:	4213      	tst	r3, r2
 80113f4:	d02b      	beq.n	801144e <_dtoa_r+0x85a>
 80113f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80113f8:	3501      	adds	r5, #1
 80113fa:	3301      	adds	r3, #1
 80113fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80113fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011400:	3301      	adds	r3, #1
 8011402:	930c      	str	r3, [sp, #48]	; 0x30
 8011404:	e023      	b.n	801144e <_dtoa_r+0x85a>
 8011406:	2336      	movs	r3, #54	; 0x36
 8011408:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801140a:	1a9b      	subs	r3, r3, r2
 801140c:	e795      	b.n	801133a <_dtoa_r+0x746>
 801140e:	9b08      	ldr	r3, [sp, #32]
 8011410:	1e7d      	subs	r5, r7, #1
 8011412:	42ab      	cmp	r3, r5
 8011414:	db06      	blt.n	8011424 <_dtoa_r+0x830>
 8011416:	1b5d      	subs	r5, r3, r5
 8011418:	2f00      	cmp	r7, #0
 801141a:	da0b      	bge.n	8011434 <_dtoa_r+0x840>
 801141c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801141e:	1bdc      	subs	r4, r3, r7
 8011420:	2300      	movs	r3, #0
 8011422:	e78c      	b.n	801133e <_dtoa_r+0x74a>
 8011424:	9b08      	ldr	r3, [sp, #32]
 8011426:	9508      	str	r5, [sp, #32]
 8011428:	1aea      	subs	r2, r5, r3
 801142a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801142c:	2500      	movs	r5, #0
 801142e:	189b      	adds	r3, r3, r2
 8011430:	930f      	str	r3, [sp, #60]	; 0x3c
 8011432:	e7f1      	b.n	8011418 <_dtoa_r+0x824>
 8011434:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8011436:	003b      	movs	r3, r7
 8011438:	e781      	b.n	801133e <_dtoa_r+0x74a>
 801143a:	9d08      	ldr	r5, [sp, #32]
 801143c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801143e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011440:	e788      	b.n	8011354 <_dtoa_r+0x760>
 8011442:	9a08      	ldr	r2, [sp, #32]
 8011444:	e7b4      	b.n	80113b0 <_dtoa_r+0x7bc>
 8011446:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011448:	2500      	movs	r5, #0
 801144a:	2b01      	cmp	r3, #1
 801144c:	ddc7      	ble.n	80113de <_dtoa_r+0x7ea>
 801144e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011450:	2001      	movs	r0, #1
 8011452:	2b00      	cmp	r3, #0
 8011454:	d00b      	beq.n	801146e <_dtoa_r+0x87a>
 8011456:	9b08      	ldr	r3, [sp, #32]
 8011458:	9a08      	ldr	r2, [sp, #32]
 801145a:	691b      	ldr	r3, [r3, #16]
 801145c:	930f      	str	r3, [sp, #60]	; 0x3c
 801145e:	3303      	adds	r3, #3
 8011460:	009b      	lsls	r3, r3, #2
 8011462:	18d3      	adds	r3, r2, r3
 8011464:	6858      	ldr	r0, [r3, #4]
 8011466:	f000 fb5b 	bl	8011b20 <__hi0bits>
 801146a:	2320      	movs	r3, #32
 801146c:	1a18      	subs	r0, r3, r0
 801146e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011470:	18c0      	adds	r0, r0, r3
 8011472:	231f      	movs	r3, #31
 8011474:	4018      	ands	r0, r3
 8011476:	d100      	bne.n	801147a <_dtoa_r+0x886>
 8011478:	e0ab      	b.n	80115d2 <_dtoa_r+0x9de>
 801147a:	3301      	adds	r3, #1
 801147c:	1a1b      	subs	r3, r3, r0
 801147e:	2b04      	cmp	r3, #4
 8011480:	dc00      	bgt.n	8011484 <_dtoa_r+0x890>
 8011482:	e09b      	b.n	80115bc <_dtoa_r+0x9c8>
 8011484:	231c      	movs	r3, #28
 8011486:	1a18      	subs	r0, r3, r0
 8011488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801148a:	1824      	adds	r4, r4, r0
 801148c:	181b      	adds	r3, r3, r0
 801148e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011492:	181b      	adds	r3, r3, r0
 8011494:	930c      	str	r3, [sp, #48]	; 0x30
 8011496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011498:	2b00      	cmp	r3, #0
 801149a:	dd05      	ble.n	80114a8 <_dtoa_r+0x8b4>
 801149c:	001a      	movs	r2, r3
 801149e:	9905      	ldr	r1, [sp, #20]
 80114a0:	9804      	ldr	r0, [sp, #16]
 80114a2:	f000 fc71 	bl	8011d88 <__lshift>
 80114a6:	9005      	str	r0, [sp, #20]
 80114a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	dd05      	ble.n	80114ba <_dtoa_r+0x8c6>
 80114ae:	001a      	movs	r2, r3
 80114b0:	9908      	ldr	r1, [sp, #32]
 80114b2:	9804      	ldr	r0, [sp, #16]
 80114b4:	f000 fc68 	bl	8011d88 <__lshift>
 80114b8:	9008      	str	r0, [sp, #32]
 80114ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d100      	bne.n	80114c2 <_dtoa_r+0x8ce>
 80114c0:	e089      	b.n	80115d6 <_dtoa_r+0x9e2>
 80114c2:	9908      	ldr	r1, [sp, #32]
 80114c4:	9805      	ldr	r0, [sp, #20]
 80114c6:	f000 fcb0 	bl	8011e2a <__mcmp>
 80114ca:	2800      	cmp	r0, #0
 80114cc:	db00      	blt.n	80114d0 <_dtoa_r+0x8dc>
 80114ce:	e082      	b.n	80115d6 <_dtoa_r+0x9e2>
 80114d0:	9b03      	ldr	r3, [sp, #12]
 80114d2:	220a      	movs	r2, #10
 80114d4:	3b01      	subs	r3, #1
 80114d6:	9303      	str	r3, [sp, #12]
 80114d8:	9905      	ldr	r1, [sp, #20]
 80114da:	2300      	movs	r3, #0
 80114dc:	9804      	ldr	r0, [sp, #16]
 80114de:	f000 fae3 	bl	8011aa8 <__multadd>
 80114e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80114e4:	9005      	str	r0, [sp, #20]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d100      	bne.n	80114ec <_dtoa_r+0x8f8>
 80114ea:	e15d      	b.n	80117a8 <_dtoa_r+0xbb4>
 80114ec:	2300      	movs	r3, #0
 80114ee:	0031      	movs	r1, r6
 80114f0:	220a      	movs	r2, #10
 80114f2:	9804      	ldr	r0, [sp, #16]
 80114f4:	f000 fad8 	bl	8011aa8 <__multadd>
 80114f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80114fa:	0006      	movs	r6, r0
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	dc02      	bgt.n	8011506 <_dtoa_r+0x912>
 8011500:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011502:	2b02      	cmp	r3, #2
 8011504:	dc6d      	bgt.n	80115e2 <_dtoa_r+0x9ee>
 8011506:	2c00      	cmp	r4, #0
 8011508:	dd05      	ble.n	8011516 <_dtoa_r+0x922>
 801150a:	0031      	movs	r1, r6
 801150c:	0022      	movs	r2, r4
 801150e:	9804      	ldr	r0, [sp, #16]
 8011510:	f000 fc3a 	bl	8011d88 <__lshift>
 8011514:	0006      	movs	r6, r0
 8011516:	0030      	movs	r0, r6
 8011518:	2d00      	cmp	r5, #0
 801151a:	d011      	beq.n	8011540 <_dtoa_r+0x94c>
 801151c:	6871      	ldr	r1, [r6, #4]
 801151e:	9804      	ldr	r0, [sp, #16]
 8011520:	f000 fa71 	bl	8011a06 <_Balloc>
 8011524:	0031      	movs	r1, r6
 8011526:	0004      	movs	r4, r0
 8011528:	6933      	ldr	r3, [r6, #16]
 801152a:	310c      	adds	r1, #12
 801152c:	1c9a      	adds	r2, r3, #2
 801152e:	0092      	lsls	r2, r2, #2
 8011530:	300c      	adds	r0, #12
 8011532:	f7fe fa07 	bl	800f944 <memcpy>
 8011536:	2201      	movs	r2, #1
 8011538:	0021      	movs	r1, r4
 801153a:	9804      	ldr	r0, [sp, #16]
 801153c:	f000 fc24 	bl	8011d88 <__lshift>
 8011540:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8011542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011544:	3f01      	subs	r7, #1
 8011546:	930b      	str	r3, [sp, #44]	; 0x2c
 8011548:	19db      	adds	r3, r3, r7
 801154a:	0037      	movs	r7, r6
 801154c:	0006      	movs	r6, r0
 801154e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011550:	9908      	ldr	r1, [sp, #32]
 8011552:	9805      	ldr	r0, [sp, #20]
 8011554:	f7ff faca 	bl	8010aec <quorem>
 8011558:	0039      	movs	r1, r7
 801155a:	900d      	str	r0, [sp, #52]	; 0x34
 801155c:	0004      	movs	r4, r0
 801155e:	9805      	ldr	r0, [sp, #20]
 8011560:	f000 fc63 	bl	8011e2a <__mcmp>
 8011564:	0032      	movs	r2, r6
 8011566:	900e      	str	r0, [sp, #56]	; 0x38
 8011568:	9908      	ldr	r1, [sp, #32]
 801156a:	9804      	ldr	r0, [sp, #16]
 801156c:	f000 fc76 	bl	8011e5c <__mdiff>
 8011570:	2301      	movs	r3, #1
 8011572:	930c      	str	r3, [sp, #48]	; 0x30
 8011574:	68c3      	ldr	r3, [r0, #12]
 8011576:	3430      	adds	r4, #48	; 0x30
 8011578:	0005      	movs	r5, r0
 801157a:	2b00      	cmp	r3, #0
 801157c:	d104      	bne.n	8011588 <_dtoa_r+0x994>
 801157e:	0001      	movs	r1, r0
 8011580:	9805      	ldr	r0, [sp, #20]
 8011582:	f000 fc52 	bl	8011e2a <__mcmp>
 8011586:	900c      	str	r0, [sp, #48]	; 0x30
 8011588:	0029      	movs	r1, r5
 801158a:	9804      	ldr	r0, [sp, #16]
 801158c:	f000 fa73 	bl	8011a76 <_Bfree>
 8011590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011592:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8011594:	4313      	orrs	r3, r2
 8011596:	d000      	beq.n	801159a <_dtoa_r+0x9a6>
 8011598:	e089      	b.n	80116ae <_dtoa_r+0xaba>
 801159a:	9a06      	ldr	r2, [sp, #24]
 801159c:	3301      	adds	r3, #1
 801159e:	4213      	tst	r3, r2
 80115a0:	d000      	beq.n	80115a4 <_dtoa_r+0x9b0>
 80115a2:	e084      	b.n	80116ae <_dtoa_r+0xaba>
 80115a4:	2c39      	cmp	r4, #57	; 0x39
 80115a6:	d100      	bne.n	80115aa <_dtoa_r+0x9b6>
 80115a8:	e0a3      	b.n	80116f2 <_dtoa_r+0xafe>
 80115aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	dd01      	ble.n	80115b4 <_dtoa_r+0x9c0>
 80115b0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80115b2:	3431      	adds	r4, #49	; 0x31
 80115b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115b6:	1c5d      	adds	r5, r3, #1
 80115b8:	701c      	strb	r4, [r3, #0]
 80115ba:	e027      	b.n	801160c <_dtoa_r+0xa18>
 80115bc:	2b04      	cmp	r3, #4
 80115be:	d100      	bne.n	80115c2 <_dtoa_r+0x9ce>
 80115c0:	e769      	b.n	8011496 <_dtoa_r+0x8a2>
 80115c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80115c4:	331c      	adds	r3, #28
 80115c6:	18d2      	adds	r2, r2, r3
 80115c8:	920b      	str	r2, [sp, #44]	; 0x2c
 80115ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80115cc:	18e4      	adds	r4, r4, r3
 80115ce:	18d3      	adds	r3, r2, r3
 80115d0:	e760      	b.n	8011494 <_dtoa_r+0x8a0>
 80115d2:	0003      	movs	r3, r0
 80115d4:	e7f5      	b.n	80115c2 <_dtoa_r+0x9ce>
 80115d6:	2f00      	cmp	r7, #0
 80115d8:	dc3c      	bgt.n	8011654 <_dtoa_r+0xa60>
 80115da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80115dc:	2b02      	cmp	r3, #2
 80115de:	dd39      	ble.n	8011654 <_dtoa_r+0xa60>
 80115e0:	970d      	str	r7, [sp, #52]	; 0x34
 80115e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d10c      	bne.n	8011602 <_dtoa_r+0xa0e>
 80115e8:	9908      	ldr	r1, [sp, #32]
 80115ea:	2205      	movs	r2, #5
 80115ec:	9804      	ldr	r0, [sp, #16]
 80115ee:	f000 fa5b 	bl	8011aa8 <__multadd>
 80115f2:	9008      	str	r0, [sp, #32]
 80115f4:	0001      	movs	r1, r0
 80115f6:	9805      	ldr	r0, [sp, #20]
 80115f8:	f000 fc17 	bl	8011e2a <__mcmp>
 80115fc:	2800      	cmp	r0, #0
 80115fe:	dd00      	ble.n	8011602 <_dtoa_r+0xa0e>
 8011600:	e55a      	b.n	80110b8 <_dtoa_r+0x4c4>
 8011602:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011604:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011606:	43db      	mvns	r3, r3
 8011608:	9303      	str	r3, [sp, #12]
 801160a:	2700      	movs	r7, #0
 801160c:	9908      	ldr	r1, [sp, #32]
 801160e:	9804      	ldr	r0, [sp, #16]
 8011610:	f000 fa31 	bl	8011a76 <_Bfree>
 8011614:	2e00      	cmp	r6, #0
 8011616:	d100      	bne.n	801161a <_dtoa_r+0xa26>
 8011618:	e63f      	b.n	801129a <_dtoa_r+0x6a6>
 801161a:	2f00      	cmp	r7, #0
 801161c:	d005      	beq.n	801162a <_dtoa_r+0xa36>
 801161e:	42b7      	cmp	r7, r6
 8011620:	d003      	beq.n	801162a <_dtoa_r+0xa36>
 8011622:	0039      	movs	r1, r7
 8011624:	9804      	ldr	r0, [sp, #16]
 8011626:	f000 fa26 	bl	8011a76 <_Bfree>
 801162a:	0031      	movs	r1, r6
 801162c:	9804      	ldr	r0, [sp, #16]
 801162e:	f000 fa22 	bl	8011a76 <_Bfree>
 8011632:	e632      	b.n	801129a <_dtoa_r+0x6a6>
 8011634:	9508      	str	r5, [sp, #32]
 8011636:	002e      	movs	r6, r5
 8011638:	e7e3      	b.n	8011602 <_dtoa_r+0xa0e>
 801163a:	2300      	movs	r3, #0
 801163c:	9308      	str	r3, [sp, #32]
 801163e:	001e      	movs	r6, r3
 8011640:	e7df      	b.n	8011602 <_dtoa_r+0xa0e>
 8011642:	46c0      	nop			; (mov r8, r8)
 8011644:	40240000 	.word	0x40240000
 8011648:	00000433 	.word	0x00000433
 801164c:	9603      	str	r6, [sp, #12]
 801164e:	9508      	str	r5, [sp, #32]
 8011650:	002e      	movs	r6, r5
 8011652:	e531      	b.n	80110b8 <_dtoa_r+0x4c4>
 8011654:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011656:	970d      	str	r7, [sp, #52]	; 0x34
 8011658:	2b00      	cmp	r3, #0
 801165a:	d000      	beq.n	801165e <_dtoa_r+0xa6a>
 801165c:	e753      	b.n	8011506 <_dtoa_r+0x912>
 801165e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011660:	9908      	ldr	r1, [sp, #32]
 8011662:	9805      	ldr	r0, [sp, #20]
 8011664:	f7ff fa42 	bl	8010aec <quorem>
 8011668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801166a:	3030      	adds	r0, #48	; 0x30
 801166c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801166e:	7028      	strb	r0, [r5, #0]
 8011670:	3501      	adds	r5, #1
 8011672:	0004      	movs	r4, r0
 8011674:	1aeb      	subs	r3, r5, r3
 8011676:	429a      	cmp	r2, r3
 8011678:	dc78      	bgt.n	801176c <_dtoa_r+0xb78>
 801167a:	1e15      	subs	r5, r2, #0
 801167c:	dc00      	bgt.n	8011680 <_dtoa_r+0xa8c>
 801167e:	2501      	movs	r5, #1
 8011680:	2700      	movs	r7, #0
 8011682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011684:	195d      	adds	r5, r3, r5
 8011686:	9905      	ldr	r1, [sp, #20]
 8011688:	2201      	movs	r2, #1
 801168a:	9804      	ldr	r0, [sp, #16]
 801168c:	f000 fb7c 	bl	8011d88 <__lshift>
 8011690:	9908      	ldr	r1, [sp, #32]
 8011692:	9005      	str	r0, [sp, #20]
 8011694:	f000 fbc9 	bl	8011e2a <__mcmp>
 8011698:	2800      	cmp	r0, #0
 801169a:	dc2f      	bgt.n	80116fc <_dtoa_r+0xb08>
 801169c:	d101      	bne.n	80116a2 <_dtoa_r+0xaae>
 801169e:	07e3      	lsls	r3, r4, #31
 80116a0:	d42c      	bmi.n	80116fc <_dtoa_r+0xb08>
 80116a2:	1e6b      	subs	r3, r5, #1
 80116a4:	781a      	ldrb	r2, [r3, #0]
 80116a6:	2a30      	cmp	r2, #48	; 0x30
 80116a8:	d1b0      	bne.n	801160c <_dtoa_r+0xa18>
 80116aa:	001d      	movs	r5, r3
 80116ac:	e7f9      	b.n	80116a2 <_dtoa_r+0xaae>
 80116ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	db07      	blt.n	80116c4 <_dtoa_r+0xad0>
 80116b4:	001d      	movs	r5, r3
 80116b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80116b8:	431d      	orrs	r5, r3
 80116ba:	d126      	bne.n	801170a <_dtoa_r+0xb16>
 80116bc:	2301      	movs	r3, #1
 80116be:	9a06      	ldr	r2, [sp, #24]
 80116c0:	4213      	tst	r3, r2
 80116c2:	d122      	bne.n	801170a <_dtoa_r+0xb16>
 80116c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	dc00      	bgt.n	80116cc <_dtoa_r+0xad8>
 80116ca:	e773      	b.n	80115b4 <_dtoa_r+0x9c0>
 80116cc:	9905      	ldr	r1, [sp, #20]
 80116ce:	2201      	movs	r2, #1
 80116d0:	9804      	ldr	r0, [sp, #16]
 80116d2:	f000 fb59 	bl	8011d88 <__lshift>
 80116d6:	9908      	ldr	r1, [sp, #32]
 80116d8:	9005      	str	r0, [sp, #20]
 80116da:	f000 fba6 	bl	8011e2a <__mcmp>
 80116de:	2800      	cmp	r0, #0
 80116e0:	dc04      	bgt.n	80116ec <_dtoa_r+0xaf8>
 80116e2:	d000      	beq.n	80116e6 <_dtoa_r+0xaf2>
 80116e4:	e766      	b.n	80115b4 <_dtoa_r+0x9c0>
 80116e6:	07e3      	lsls	r3, r4, #31
 80116e8:	d400      	bmi.n	80116ec <_dtoa_r+0xaf8>
 80116ea:	e763      	b.n	80115b4 <_dtoa_r+0x9c0>
 80116ec:	2c39      	cmp	r4, #57	; 0x39
 80116ee:	d000      	beq.n	80116f2 <_dtoa_r+0xafe>
 80116f0:	e75e      	b.n	80115b0 <_dtoa_r+0x9bc>
 80116f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80116f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80116f6:	1c5d      	adds	r5, r3, #1
 80116f8:	2339      	movs	r3, #57	; 0x39
 80116fa:	7013      	strb	r3, [r2, #0]
 80116fc:	1e6b      	subs	r3, r5, #1
 80116fe:	781a      	ldrb	r2, [r3, #0]
 8011700:	2a39      	cmp	r2, #57	; 0x39
 8011702:	d03b      	beq.n	801177c <_dtoa_r+0xb88>
 8011704:	3201      	adds	r2, #1
 8011706:	701a      	strb	r2, [r3, #0]
 8011708:	e780      	b.n	801160c <_dtoa_r+0xa18>
 801170a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801170c:	3301      	adds	r3, #1
 801170e:	930d      	str	r3, [sp, #52]	; 0x34
 8011710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011712:	2b00      	cmp	r3, #0
 8011714:	dd05      	ble.n	8011722 <_dtoa_r+0xb2e>
 8011716:	2c39      	cmp	r4, #57	; 0x39
 8011718:	d0eb      	beq.n	80116f2 <_dtoa_r+0xafe>
 801171a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801171c:	3401      	adds	r4, #1
 801171e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011720:	e74a      	b.n	80115b8 <_dtoa_r+0x9c4>
 8011722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011724:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011726:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011728:	701c      	strb	r4, [r3, #0]
 801172a:	4293      	cmp	r3, r2
 801172c:	d0ab      	beq.n	8011686 <_dtoa_r+0xa92>
 801172e:	2300      	movs	r3, #0
 8011730:	220a      	movs	r2, #10
 8011732:	9905      	ldr	r1, [sp, #20]
 8011734:	9804      	ldr	r0, [sp, #16]
 8011736:	f000 f9b7 	bl	8011aa8 <__multadd>
 801173a:	2300      	movs	r3, #0
 801173c:	9005      	str	r0, [sp, #20]
 801173e:	220a      	movs	r2, #10
 8011740:	0039      	movs	r1, r7
 8011742:	9804      	ldr	r0, [sp, #16]
 8011744:	42b7      	cmp	r7, r6
 8011746:	d106      	bne.n	8011756 <_dtoa_r+0xb62>
 8011748:	f000 f9ae 	bl	8011aa8 <__multadd>
 801174c:	0007      	movs	r7, r0
 801174e:	0006      	movs	r6, r0
 8011750:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011752:	930b      	str	r3, [sp, #44]	; 0x2c
 8011754:	e6fc      	b.n	8011550 <_dtoa_r+0x95c>
 8011756:	f000 f9a7 	bl	8011aa8 <__multadd>
 801175a:	0031      	movs	r1, r6
 801175c:	0007      	movs	r7, r0
 801175e:	2300      	movs	r3, #0
 8011760:	220a      	movs	r2, #10
 8011762:	9804      	ldr	r0, [sp, #16]
 8011764:	f000 f9a0 	bl	8011aa8 <__multadd>
 8011768:	0006      	movs	r6, r0
 801176a:	e7f1      	b.n	8011750 <_dtoa_r+0xb5c>
 801176c:	2300      	movs	r3, #0
 801176e:	220a      	movs	r2, #10
 8011770:	9905      	ldr	r1, [sp, #20]
 8011772:	9804      	ldr	r0, [sp, #16]
 8011774:	f000 f998 	bl	8011aa8 <__multadd>
 8011778:	9005      	str	r0, [sp, #20]
 801177a:	e771      	b.n	8011660 <_dtoa_r+0xa6c>
 801177c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801177e:	429a      	cmp	r2, r3
 8011780:	d105      	bne.n	801178e <_dtoa_r+0xb9a>
 8011782:	9b03      	ldr	r3, [sp, #12]
 8011784:	3301      	adds	r3, #1
 8011786:	9303      	str	r3, [sp, #12]
 8011788:	2331      	movs	r3, #49	; 0x31
 801178a:	7013      	strb	r3, [r2, #0]
 801178c:	e73e      	b.n	801160c <_dtoa_r+0xa18>
 801178e:	001d      	movs	r5, r3
 8011790:	e7b4      	b.n	80116fc <_dtoa_r+0xb08>
 8011792:	4b0a      	ldr	r3, [pc, #40]	; (80117bc <_dtoa_r+0xbc8>)
 8011794:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011796:	930a      	str	r3, [sp, #40]	; 0x28
 8011798:	4b09      	ldr	r3, [pc, #36]	; (80117c0 <_dtoa_r+0xbcc>)
 801179a:	2a00      	cmp	r2, #0
 801179c:	d001      	beq.n	80117a2 <_dtoa_r+0xbae>
 801179e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80117a0:	6013      	str	r3, [r2, #0]
 80117a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80117a4:	b01d      	add	sp, #116	; 0x74
 80117a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	dd00      	ble.n	80117b0 <_dtoa_r+0xbbc>
 80117ae:	e756      	b.n	801165e <_dtoa_r+0xa6a>
 80117b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80117b2:	2b02      	cmp	r3, #2
 80117b4:	dc00      	bgt.n	80117b8 <_dtoa_r+0xbc4>
 80117b6:	e752      	b.n	801165e <_dtoa_r+0xa6a>
 80117b8:	e713      	b.n	80115e2 <_dtoa_r+0x9ee>
 80117ba:	46c0      	nop			; (mov r8, r8)
 80117bc:	08015772 	.word	0x08015772
 80117c0:	0801577a 	.word	0x0801577a

080117c4 <_malloc_trim_r>:
 80117c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80117c6:	4f25      	ldr	r7, [pc, #148]	; (801185c <_malloc_trim_r+0x98>)
 80117c8:	000c      	movs	r4, r1
 80117ca:	0005      	movs	r5, r0
 80117cc:	f7fe f8cc 	bl	800f968 <__malloc_lock>
 80117d0:	0038      	movs	r0, r7
 80117d2:	2203      	movs	r2, #3
 80117d4:	4e22      	ldr	r6, [pc, #136]	; (8011860 <_malloc_trim_r+0x9c>)
 80117d6:	3811      	subs	r0, #17
 80117d8:	68b3      	ldr	r3, [r6, #8]
 80117da:	1b00      	subs	r0, r0, r4
 80117dc:	685b      	ldr	r3, [r3, #4]
 80117de:	0039      	movs	r1, r7
 80117e0:	4393      	bics	r3, r2
 80117e2:	18c0      	adds	r0, r0, r3
 80117e4:	9301      	str	r3, [sp, #4]
 80117e6:	f7ee fcbb 	bl	8000160 <__udivsi3>
 80117ea:	1e44      	subs	r4, r0, #1
 80117ec:	437c      	muls	r4, r7
 80117ee:	42bc      	cmp	r4, r7
 80117f0:	da04      	bge.n	80117fc <_malloc_trim_r+0x38>
 80117f2:	0028      	movs	r0, r5
 80117f4:	f7fe f8c0 	bl	800f978 <__malloc_unlock>
 80117f8:	2000      	movs	r0, #0
 80117fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80117fc:	2100      	movs	r1, #0
 80117fe:	0028      	movs	r0, r5
 8011800:	f7fe f8c2 	bl	800f988 <_sbrk_r>
 8011804:	68b3      	ldr	r3, [r6, #8]
 8011806:	9a01      	ldr	r2, [sp, #4]
 8011808:	189b      	adds	r3, r3, r2
 801180a:	4298      	cmp	r0, r3
 801180c:	d1f1      	bne.n	80117f2 <_malloc_trim_r+0x2e>
 801180e:	4261      	negs	r1, r4
 8011810:	0028      	movs	r0, r5
 8011812:	f7fe f8b9 	bl	800f988 <_sbrk_r>
 8011816:	1c43      	adds	r3, r0, #1
 8011818:	d110      	bne.n	801183c <_malloc_trim_r+0x78>
 801181a:	2100      	movs	r1, #0
 801181c:	0028      	movs	r0, r5
 801181e:	f7fe f8b3 	bl	800f988 <_sbrk_r>
 8011822:	68b2      	ldr	r2, [r6, #8]
 8011824:	1a81      	subs	r1, r0, r2
 8011826:	290f      	cmp	r1, #15
 8011828:	dde3      	ble.n	80117f2 <_malloc_trim_r+0x2e>
 801182a:	4b0e      	ldr	r3, [pc, #56]	; (8011864 <_malloc_trim_r+0xa0>)
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	1ac0      	subs	r0, r0, r3
 8011830:	4b0d      	ldr	r3, [pc, #52]	; (8011868 <_malloc_trim_r+0xa4>)
 8011832:	6018      	str	r0, [r3, #0]
 8011834:	2301      	movs	r3, #1
 8011836:	430b      	orrs	r3, r1
 8011838:	6053      	str	r3, [r2, #4]
 801183a:	e7da      	b.n	80117f2 <_malloc_trim_r+0x2e>
 801183c:	68b2      	ldr	r2, [r6, #8]
 801183e:	2601      	movs	r6, #1
 8011840:	9b01      	ldr	r3, [sp, #4]
 8011842:	0028      	movs	r0, r5
 8011844:	1b1b      	subs	r3, r3, r4
 8011846:	4333      	orrs	r3, r6
 8011848:	6053      	str	r3, [r2, #4]
 801184a:	4b07      	ldr	r3, [pc, #28]	; (8011868 <_malloc_trim_r+0xa4>)
 801184c:	681a      	ldr	r2, [r3, #0]
 801184e:	1b14      	subs	r4, r2, r4
 8011850:	601c      	str	r4, [r3, #0]
 8011852:	f7fe f891 	bl	800f978 <__malloc_unlock>
 8011856:	0030      	movs	r0, r6
 8011858:	e7cf      	b.n	80117fa <_malloc_trim_r+0x36>
 801185a:	46c0      	nop			; (mov r8, r8)
 801185c:	00000080 	.word	0x00000080
 8011860:	2000014c 	.word	0x2000014c
 8011864:	20000554 	.word	0x20000554
 8011868:	200046b0 	.word	0x200046b0

0801186c <_free_r>:
 801186c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801186e:	1e0d      	subs	r5, r1, #0
 8011870:	9001      	str	r0, [sp, #4]
 8011872:	d02d      	beq.n	80118d0 <_free_r+0x64>
 8011874:	f7fe f878 	bl	800f968 <__malloc_lock>
 8011878:	2301      	movs	r3, #1
 801187a:	0029      	movs	r1, r5
 801187c:	469c      	mov	ip, r3
 801187e:	3908      	subs	r1, #8
 8011880:	684f      	ldr	r7, [r1, #4]
 8011882:	4662      	mov	r2, ip
 8011884:	003b      	movs	r3, r7
 8011886:	4666      	mov	r6, ip
 8011888:	4393      	bics	r3, r2
 801188a:	18c8      	adds	r0, r1, r3
 801188c:	6845      	ldr	r5, [r0, #4]
 801188e:	3202      	adds	r2, #2
 8011890:	4395      	bics	r5, r2
 8011892:	4a4a      	ldr	r2, [pc, #296]	; (80119bc <_free_r+0x150>)
 8011894:	4037      	ands	r7, r6
 8011896:	6896      	ldr	r6, [r2, #8]
 8011898:	42b0      	cmp	r0, r6
 801189a:	d11a      	bne.n	80118d2 <_free_r+0x66>
 801189c:	195b      	adds	r3, r3, r5
 801189e:	2f00      	cmp	r7, #0
 80118a0:	d106      	bne.n	80118b0 <_free_r+0x44>
 80118a2:	6808      	ldr	r0, [r1, #0]
 80118a4:	1a09      	subs	r1, r1, r0
 80118a6:	688d      	ldr	r5, [r1, #8]
 80118a8:	181b      	adds	r3, r3, r0
 80118aa:	68c8      	ldr	r0, [r1, #12]
 80118ac:	60e8      	str	r0, [r5, #12]
 80118ae:	6085      	str	r5, [r0, #8]
 80118b0:	2001      	movs	r0, #1
 80118b2:	4318      	orrs	r0, r3
 80118b4:	6048      	str	r0, [r1, #4]
 80118b6:	6091      	str	r1, [r2, #8]
 80118b8:	4a41      	ldr	r2, [pc, #260]	; (80119c0 <_free_r+0x154>)
 80118ba:	6812      	ldr	r2, [r2, #0]
 80118bc:	4293      	cmp	r3, r2
 80118be:	d304      	bcc.n	80118ca <_free_r+0x5e>
 80118c0:	4b40      	ldr	r3, [pc, #256]	; (80119c4 <_free_r+0x158>)
 80118c2:	9801      	ldr	r0, [sp, #4]
 80118c4:	6819      	ldr	r1, [r3, #0]
 80118c6:	f7ff ff7d 	bl	80117c4 <_malloc_trim_r>
 80118ca:	9801      	ldr	r0, [sp, #4]
 80118cc:	f7fe f854 	bl	800f978 <__malloc_unlock>
 80118d0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80118d2:	2600      	movs	r6, #0
 80118d4:	6045      	str	r5, [r0, #4]
 80118d6:	42b7      	cmp	r7, r6
 80118d8:	d109      	bne.n	80118ee <_free_r+0x82>
 80118da:	680f      	ldr	r7, [r1, #0]
 80118dc:	4c3a      	ldr	r4, [pc, #232]	; (80119c8 <_free_r+0x15c>)
 80118de:	1bc9      	subs	r1, r1, r7
 80118e0:	19db      	adds	r3, r3, r7
 80118e2:	688f      	ldr	r7, [r1, #8]
 80118e4:	42a7      	cmp	r7, r4
 80118e6:	d02b      	beq.n	8011940 <_free_r+0xd4>
 80118e8:	68cc      	ldr	r4, [r1, #12]
 80118ea:	60fc      	str	r4, [r7, #12]
 80118ec:	60a7      	str	r7, [r4, #8]
 80118ee:	1947      	adds	r7, r0, r5
 80118f0:	687c      	ldr	r4, [r7, #4]
 80118f2:	2701      	movs	r7, #1
 80118f4:	423c      	tst	r4, r7
 80118f6:	d10b      	bne.n	8011910 <_free_r+0xa4>
 80118f8:	195b      	adds	r3, r3, r5
 80118fa:	6885      	ldr	r5, [r0, #8]
 80118fc:	2e00      	cmp	r6, #0
 80118fe:	d121      	bne.n	8011944 <_free_r+0xd8>
 8011900:	4c31      	ldr	r4, [pc, #196]	; (80119c8 <_free_r+0x15c>)
 8011902:	42a5      	cmp	r5, r4
 8011904:	d11e      	bne.n	8011944 <_free_r+0xd8>
 8011906:	003e      	movs	r6, r7
 8011908:	6151      	str	r1, [r2, #20]
 801190a:	6111      	str	r1, [r2, #16]
 801190c:	60cd      	str	r5, [r1, #12]
 801190e:	608d      	str	r5, [r1, #8]
 8011910:	2001      	movs	r0, #1
 8011912:	0005      	movs	r5, r0
 8011914:	431d      	orrs	r5, r3
 8011916:	604d      	str	r5, [r1, #4]
 8011918:	50cb      	str	r3, [r1, r3]
 801191a:	2e00      	cmp	r6, #0
 801191c:	d1d5      	bne.n	80118ca <_free_r+0x5e>
 801191e:	4d2b      	ldr	r5, [pc, #172]	; (80119cc <_free_r+0x160>)
 8011920:	42ab      	cmp	r3, r5
 8011922:	d813      	bhi.n	801194c <_free_r+0xe0>
 8011924:	08db      	lsrs	r3, r3, #3
 8011926:	109d      	asrs	r5, r3, #2
 8011928:	40a8      	lsls	r0, r5
 801192a:	6854      	ldr	r4, [r2, #4]
 801192c:	00db      	lsls	r3, r3, #3
 801192e:	4320      	orrs	r0, r4
 8011930:	6050      	str	r0, [r2, #4]
 8011932:	189a      	adds	r2, r3, r2
 8011934:	6893      	ldr	r3, [r2, #8]
 8011936:	60ca      	str	r2, [r1, #12]
 8011938:	608b      	str	r3, [r1, #8]
 801193a:	6091      	str	r1, [r2, #8]
 801193c:	60d9      	str	r1, [r3, #12]
 801193e:	e7c4      	b.n	80118ca <_free_r+0x5e>
 8011940:	4666      	mov	r6, ip
 8011942:	e7d4      	b.n	80118ee <_free_r+0x82>
 8011944:	68c0      	ldr	r0, [r0, #12]
 8011946:	60e8      	str	r0, [r5, #12]
 8011948:	6085      	str	r5, [r0, #8]
 801194a:	e7e1      	b.n	8011910 <_free_r+0xa4>
 801194c:	0a5d      	lsrs	r5, r3, #9
 801194e:	2d04      	cmp	r5, #4
 8011950:	d812      	bhi.n	8011978 <_free_r+0x10c>
 8011952:	0998      	lsrs	r0, r3, #6
 8011954:	3038      	adds	r0, #56	; 0x38
 8011956:	00c6      	lsls	r6, r0, #3
 8011958:	18b6      	adds	r6, r6, r2
 801195a:	68b5      	ldr	r5, [r6, #8]
 801195c:	2703      	movs	r7, #3
 801195e:	42ae      	cmp	r6, r5
 8011960:	d125      	bne.n	80119ae <_free_r+0x142>
 8011962:	2301      	movs	r3, #1
 8011964:	1080      	asrs	r0, r0, #2
 8011966:	4083      	lsls	r3, r0
 8011968:	6850      	ldr	r0, [r2, #4]
 801196a:	4303      	orrs	r3, r0
 801196c:	6053      	str	r3, [r2, #4]
 801196e:	60ce      	str	r6, [r1, #12]
 8011970:	608d      	str	r5, [r1, #8]
 8011972:	60b1      	str	r1, [r6, #8]
 8011974:	60e9      	str	r1, [r5, #12]
 8011976:	e7a8      	b.n	80118ca <_free_r+0x5e>
 8011978:	2d14      	cmp	r5, #20
 801197a:	d802      	bhi.n	8011982 <_free_r+0x116>
 801197c:	0028      	movs	r0, r5
 801197e:	305b      	adds	r0, #91	; 0x5b
 8011980:	e7e9      	b.n	8011956 <_free_r+0xea>
 8011982:	2d54      	cmp	r5, #84	; 0x54
 8011984:	d802      	bhi.n	801198c <_free_r+0x120>
 8011986:	0b18      	lsrs	r0, r3, #12
 8011988:	306e      	adds	r0, #110	; 0x6e
 801198a:	e7e4      	b.n	8011956 <_free_r+0xea>
 801198c:	20aa      	movs	r0, #170	; 0xaa
 801198e:	0040      	lsls	r0, r0, #1
 8011990:	4285      	cmp	r5, r0
 8011992:	d802      	bhi.n	801199a <_free_r+0x12e>
 8011994:	0bd8      	lsrs	r0, r3, #15
 8011996:	3077      	adds	r0, #119	; 0x77
 8011998:	e7dd      	b.n	8011956 <_free_r+0xea>
 801199a:	4e0d      	ldr	r6, [pc, #52]	; (80119d0 <_free_r+0x164>)
 801199c:	207e      	movs	r0, #126	; 0x7e
 801199e:	42b5      	cmp	r5, r6
 80119a0:	d8d9      	bhi.n	8011956 <_free_r+0xea>
 80119a2:	0c98      	lsrs	r0, r3, #18
 80119a4:	307c      	adds	r0, #124	; 0x7c
 80119a6:	e7d6      	b.n	8011956 <_free_r+0xea>
 80119a8:	68ad      	ldr	r5, [r5, #8]
 80119aa:	42ae      	cmp	r6, r5
 80119ac:	d003      	beq.n	80119b6 <_free_r+0x14a>
 80119ae:	686a      	ldr	r2, [r5, #4]
 80119b0:	43ba      	bics	r2, r7
 80119b2:	4293      	cmp	r3, r2
 80119b4:	d3f8      	bcc.n	80119a8 <_free_r+0x13c>
 80119b6:	68ee      	ldr	r6, [r5, #12]
 80119b8:	e7d9      	b.n	801196e <_free_r+0x102>
 80119ba:	46c0      	nop			; (mov r8, r8)
 80119bc:	2000014c 	.word	0x2000014c
 80119c0:	20000558 	.word	0x20000558
 80119c4:	200046e0 	.word	0x200046e0
 80119c8:	20000154 	.word	0x20000154
 80119cc:	000001ff 	.word	0x000001ff
 80119d0:	00000554 	.word	0x00000554

080119d4 <_localeconv_r>:
 80119d4:	4b03      	ldr	r3, [pc, #12]	; (80119e4 <_localeconv_r+0x10>)
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	6a18      	ldr	r0, [r3, #32]
 80119da:	2800      	cmp	r0, #0
 80119dc:	d100      	bne.n	80119e0 <_localeconv_r+0xc>
 80119de:	4802      	ldr	r0, [pc, #8]	; (80119e8 <_localeconv_r+0x14>)
 80119e0:	30f0      	adds	r0, #240	; 0xf0
 80119e2:	4770      	bx	lr
 80119e4:	20000058 	.word	0x20000058
 80119e8:	2000055c 	.word	0x2000055c

080119ec <__retarget_lock_acquire_recursive>:
 80119ec:	4770      	bx	lr

080119ee <__retarget_lock_release_recursive>:
 80119ee:	4770      	bx	lr

080119f0 <memchr>:
 80119f0:	b2c9      	uxtb	r1, r1
 80119f2:	1882      	adds	r2, r0, r2
 80119f4:	4290      	cmp	r0, r2
 80119f6:	d101      	bne.n	80119fc <memchr+0xc>
 80119f8:	2000      	movs	r0, #0
 80119fa:	4770      	bx	lr
 80119fc:	7803      	ldrb	r3, [r0, #0]
 80119fe:	428b      	cmp	r3, r1
 8011a00:	d0fb      	beq.n	80119fa <memchr+0xa>
 8011a02:	3001      	adds	r0, #1
 8011a04:	e7f6      	b.n	80119f4 <memchr+0x4>

08011a06 <_Balloc>:
 8011a06:	b570      	push	{r4, r5, r6, lr}
 8011a08:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011a0a:	0004      	movs	r4, r0
 8011a0c:	000d      	movs	r5, r1
 8011a0e:	2e00      	cmp	r6, #0
 8011a10:	d107      	bne.n	8011a22 <_Balloc+0x1c>
 8011a12:	2010      	movs	r0, #16
 8011a14:	f7fd fd7e 	bl	800f514 <malloc>
 8011a18:	6260      	str	r0, [r4, #36]	; 0x24
 8011a1a:	6046      	str	r6, [r0, #4]
 8011a1c:	6086      	str	r6, [r0, #8]
 8011a1e:	6006      	str	r6, [r0, #0]
 8011a20:	60c6      	str	r6, [r0, #12]
 8011a22:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011a24:	68f3      	ldr	r3, [r6, #12]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d013      	beq.n	8011a52 <_Balloc+0x4c>
 8011a2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a2c:	00aa      	lsls	r2, r5, #2
 8011a2e:	68db      	ldr	r3, [r3, #12]
 8011a30:	189b      	adds	r3, r3, r2
 8011a32:	6818      	ldr	r0, [r3, #0]
 8011a34:	2800      	cmp	r0, #0
 8011a36:	d118      	bne.n	8011a6a <_Balloc+0x64>
 8011a38:	2101      	movs	r1, #1
 8011a3a:	000e      	movs	r6, r1
 8011a3c:	40ae      	lsls	r6, r5
 8011a3e:	1d72      	adds	r2, r6, #5
 8011a40:	0092      	lsls	r2, r2, #2
 8011a42:	0020      	movs	r0, r4
 8011a44:	f000 fb40 	bl	80120c8 <_calloc_r>
 8011a48:	2800      	cmp	r0, #0
 8011a4a:	d00c      	beq.n	8011a66 <_Balloc+0x60>
 8011a4c:	6045      	str	r5, [r0, #4]
 8011a4e:	6086      	str	r6, [r0, #8]
 8011a50:	e00d      	b.n	8011a6e <_Balloc+0x68>
 8011a52:	2221      	movs	r2, #33	; 0x21
 8011a54:	2104      	movs	r1, #4
 8011a56:	0020      	movs	r0, r4
 8011a58:	f000 fb36 	bl	80120c8 <_calloc_r>
 8011a5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a5e:	60f0      	str	r0, [r6, #12]
 8011a60:	68db      	ldr	r3, [r3, #12]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d1e1      	bne.n	8011a2a <_Balloc+0x24>
 8011a66:	2000      	movs	r0, #0
 8011a68:	bd70      	pop	{r4, r5, r6, pc}
 8011a6a:	6802      	ldr	r2, [r0, #0]
 8011a6c:	601a      	str	r2, [r3, #0]
 8011a6e:	2300      	movs	r3, #0
 8011a70:	6103      	str	r3, [r0, #16]
 8011a72:	60c3      	str	r3, [r0, #12]
 8011a74:	e7f8      	b.n	8011a68 <_Balloc+0x62>

08011a76 <_Bfree>:
 8011a76:	b570      	push	{r4, r5, r6, lr}
 8011a78:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011a7a:	0006      	movs	r6, r0
 8011a7c:	000d      	movs	r5, r1
 8011a7e:	2c00      	cmp	r4, #0
 8011a80:	d107      	bne.n	8011a92 <_Bfree+0x1c>
 8011a82:	2010      	movs	r0, #16
 8011a84:	f7fd fd46 	bl	800f514 <malloc>
 8011a88:	6270      	str	r0, [r6, #36]	; 0x24
 8011a8a:	6044      	str	r4, [r0, #4]
 8011a8c:	6084      	str	r4, [r0, #8]
 8011a8e:	6004      	str	r4, [r0, #0]
 8011a90:	60c4      	str	r4, [r0, #12]
 8011a92:	2d00      	cmp	r5, #0
 8011a94:	d007      	beq.n	8011aa6 <_Bfree+0x30>
 8011a96:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011a98:	686a      	ldr	r2, [r5, #4]
 8011a9a:	68db      	ldr	r3, [r3, #12]
 8011a9c:	0092      	lsls	r2, r2, #2
 8011a9e:	189b      	adds	r3, r3, r2
 8011aa0:	681a      	ldr	r2, [r3, #0]
 8011aa2:	602a      	str	r2, [r5, #0]
 8011aa4:	601d      	str	r5, [r3, #0]
 8011aa6:	bd70      	pop	{r4, r5, r6, pc}

08011aa8 <__multadd>:
 8011aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011aaa:	001e      	movs	r6, r3
 8011aac:	2314      	movs	r3, #20
 8011aae:	469c      	mov	ip, r3
 8011ab0:	0007      	movs	r7, r0
 8011ab2:	000c      	movs	r4, r1
 8011ab4:	2000      	movs	r0, #0
 8011ab6:	690d      	ldr	r5, [r1, #16]
 8011ab8:	448c      	add	ip, r1
 8011aba:	4663      	mov	r3, ip
 8011abc:	8819      	ldrh	r1, [r3, #0]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	4351      	muls	r1, r2
 8011ac2:	0c1b      	lsrs	r3, r3, #16
 8011ac4:	4353      	muls	r3, r2
 8011ac6:	1989      	adds	r1, r1, r6
 8011ac8:	0c0e      	lsrs	r6, r1, #16
 8011aca:	199b      	adds	r3, r3, r6
 8011acc:	b289      	uxth	r1, r1
 8011ace:	0c1e      	lsrs	r6, r3, #16
 8011ad0:	041b      	lsls	r3, r3, #16
 8011ad2:	185b      	adds	r3, r3, r1
 8011ad4:	4661      	mov	r1, ip
 8011ad6:	3001      	adds	r0, #1
 8011ad8:	c108      	stmia	r1!, {r3}
 8011ada:	468c      	mov	ip, r1
 8011adc:	4285      	cmp	r5, r0
 8011ade:	dcec      	bgt.n	8011aba <__multadd+0x12>
 8011ae0:	2e00      	cmp	r6, #0
 8011ae2:	d01b      	beq.n	8011b1c <__multadd+0x74>
 8011ae4:	68a3      	ldr	r3, [r4, #8]
 8011ae6:	429d      	cmp	r5, r3
 8011ae8:	db12      	blt.n	8011b10 <__multadd+0x68>
 8011aea:	6863      	ldr	r3, [r4, #4]
 8011aec:	0038      	movs	r0, r7
 8011aee:	1c59      	adds	r1, r3, #1
 8011af0:	f7ff ff89 	bl	8011a06 <_Balloc>
 8011af4:	0021      	movs	r1, r4
 8011af6:	6923      	ldr	r3, [r4, #16]
 8011af8:	9001      	str	r0, [sp, #4]
 8011afa:	1c9a      	adds	r2, r3, #2
 8011afc:	0092      	lsls	r2, r2, #2
 8011afe:	310c      	adds	r1, #12
 8011b00:	300c      	adds	r0, #12
 8011b02:	f7fd ff1f 	bl	800f944 <memcpy>
 8011b06:	0021      	movs	r1, r4
 8011b08:	0038      	movs	r0, r7
 8011b0a:	f7ff ffb4 	bl	8011a76 <_Bfree>
 8011b0e:	9c01      	ldr	r4, [sp, #4]
 8011b10:	1d2b      	adds	r3, r5, #4
 8011b12:	009b      	lsls	r3, r3, #2
 8011b14:	18e3      	adds	r3, r4, r3
 8011b16:	3501      	adds	r5, #1
 8011b18:	605e      	str	r6, [r3, #4]
 8011b1a:	6125      	str	r5, [r4, #16]
 8011b1c:	0020      	movs	r0, r4
 8011b1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08011b20 <__hi0bits>:
 8011b20:	0003      	movs	r3, r0
 8011b22:	0c02      	lsrs	r2, r0, #16
 8011b24:	2000      	movs	r0, #0
 8011b26:	4282      	cmp	r2, r0
 8011b28:	d101      	bne.n	8011b2e <__hi0bits+0xe>
 8011b2a:	041b      	lsls	r3, r3, #16
 8011b2c:	3010      	adds	r0, #16
 8011b2e:	0e1a      	lsrs	r2, r3, #24
 8011b30:	d101      	bne.n	8011b36 <__hi0bits+0x16>
 8011b32:	3008      	adds	r0, #8
 8011b34:	021b      	lsls	r3, r3, #8
 8011b36:	0f1a      	lsrs	r2, r3, #28
 8011b38:	d101      	bne.n	8011b3e <__hi0bits+0x1e>
 8011b3a:	3004      	adds	r0, #4
 8011b3c:	011b      	lsls	r3, r3, #4
 8011b3e:	0f9a      	lsrs	r2, r3, #30
 8011b40:	d101      	bne.n	8011b46 <__hi0bits+0x26>
 8011b42:	3002      	adds	r0, #2
 8011b44:	009b      	lsls	r3, r3, #2
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	db03      	blt.n	8011b52 <__hi0bits+0x32>
 8011b4a:	3001      	adds	r0, #1
 8011b4c:	005b      	lsls	r3, r3, #1
 8011b4e:	d400      	bmi.n	8011b52 <__hi0bits+0x32>
 8011b50:	2020      	movs	r0, #32
 8011b52:	4770      	bx	lr

08011b54 <__lo0bits>:
 8011b54:	2207      	movs	r2, #7
 8011b56:	6803      	ldr	r3, [r0, #0]
 8011b58:	b510      	push	{r4, lr}
 8011b5a:	0001      	movs	r1, r0
 8011b5c:	401a      	ands	r2, r3
 8011b5e:	d00d      	beq.n	8011b7c <__lo0bits+0x28>
 8011b60:	2401      	movs	r4, #1
 8011b62:	2000      	movs	r0, #0
 8011b64:	4223      	tst	r3, r4
 8011b66:	d105      	bne.n	8011b74 <__lo0bits+0x20>
 8011b68:	3002      	adds	r0, #2
 8011b6a:	4203      	tst	r3, r0
 8011b6c:	d003      	beq.n	8011b76 <__lo0bits+0x22>
 8011b6e:	40e3      	lsrs	r3, r4
 8011b70:	0020      	movs	r0, r4
 8011b72:	600b      	str	r3, [r1, #0]
 8011b74:	bd10      	pop	{r4, pc}
 8011b76:	089b      	lsrs	r3, r3, #2
 8011b78:	600b      	str	r3, [r1, #0]
 8011b7a:	e7fb      	b.n	8011b74 <__lo0bits+0x20>
 8011b7c:	b29c      	uxth	r4, r3
 8011b7e:	0010      	movs	r0, r2
 8011b80:	2c00      	cmp	r4, #0
 8011b82:	d101      	bne.n	8011b88 <__lo0bits+0x34>
 8011b84:	2010      	movs	r0, #16
 8011b86:	0c1b      	lsrs	r3, r3, #16
 8011b88:	b2da      	uxtb	r2, r3
 8011b8a:	2a00      	cmp	r2, #0
 8011b8c:	d101      	bne.n	8011b92 <__lo0bits+0x3e>
 8011b8e:	3008      	adds	r0, #8
 8011b90:	0a1b      	lsrs	r3, r3, #8
 8011b92:	071a      	lsls	r2, r3, #28
 8011b94:	d101      	bne.n	8011b9a <__lo0bits+0x46>
 8011b96:	3004      	adds	r0, #4
 8011b98:	091b      	lsrs	r3, r3, #4
 8011b9a:	079a      	lsls	r2, r3, #30
 8011b9c:	d101      	bne.n	8011ba2 <__lo0bits+0x4e>
 8011b9e:	3002      	adds	r0, #2
 8011ba0:	089b      	lsrs	r3, r3, #2
 8011ba2:	07da      	lsls	r2, r3, #31
 8011ba4:	d4e8      	bmi.n	8011b78 <__lo0bits+0x24>
 8011ba6:	085b      	lsrs	r3, r3, #1
 8011ba8:	d001      	beq.n	8011bae <__lo0bits+0x5a>
 8011baa:	3001      	adds	r0, #1
 8011bac:	e7e4      	b.n	8011b78 <__lo0bits+0x24>
 8011bae:	2020      	movs	r0, #32
 8011bb0:	e7e0      	b.n	8011b74 <__lo0bits+0x20>

08011bb2 <__i2b>:
 8011bb2:	b510      	push	{r4, lr}
 8011bb4:	000c      	movs	r4, r1
 8011bb6:	2101      	movs	r1, #1
 8011bb8:	f7ff ff25 	bl	8011a06 <_Balloc>
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	6144      	str	r4, [r0, #20]
 8011bc0:	6103      	str	r3, [r0, #16]
 8011bc2:	bd10      	pop	{r4, pc}

08011bc4 <__multiply>:
 8011bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bc6:	690b      	ldr	r3, [r1, #16]
 8011bc8:	0015      	movs	r5, r2
 8011bca:	6912      	ldr	r2, [r2, #16]
 8011bcc:	b089      	sub	sp, #36	; 0x24
 8011bce:	000c      	movs	r4, r1
 8011bd0:	4293      	cmp	r3, r2
 8011bd2:	da01      	bge.n	8011bd8 <__multiply+0x14>
 8011bd4:	002c      	movs	r4, r5
 8011bd6:	000d      	movs	r5, r1
 8011bd8:	6927      	ldr	r7, [r4, #16]
 8011bda:	692e      	ldr	r6, [r5, #16]
 8011bdc:	68a2      	ldr	r2, [r4, #8]
 8011bde:	19bb      	adds	r3, r7, r6
 8011be0:	6861      	ldr	r1, [r4, #4]
 8011be2:	9301      	str	r3, [sp, #4]
 8011be4:	4293      	cmp	r3, r2
 8011be6:	dd00      	ble.n	8011bea <__multiply+0x26>
 8011be8:	3101      	adds	r1, #1
 8011bea:	f7ff ff0c 	bl	8011a06 <_Balloc>
 8011bee:	0003      	movs	r3, r0
 8011bf0:	3314      	adds	r3, #20
 8011bf2:	9300      	str	r3, [sp, #0]
 8011bf4:	9a00      	ldr	r2, [sp, #0]
 8011bf6:	19bb      	adds	r3, r7, r6
 8011bf8:	4694      	mov	ip, r2
 8011bfa:	009b      	lsls	r3, r3, #2
 8011bfc:	449c      	add	ip, r3
 8011bfe:	0013      	movs	r3, r2
 8011c00:	2200      	movs	r2, #0
 8011c02:	9004      	str	r0, [sp, #16]
 8011c04:	4563      	cmp	r3, ip
 8011c06:	d31c      	bcc.n	8011c42 <__multiply+0x7e>
 8011c08:	002a      	movs	r2, r5
 8011c0a:	3414      	adds	r4, #20
 8011c0c:	00bf      	lsls	r7, r7, #2
 8011c0e:	19e3      	adds	r3, r4, r7
 8011c10:	3214      	adds	r2, #20
 8011c12:	00b6      	lsls	r6, r6, #2
 8011c14:	9305      	str	r3, [sp, #20]
 8011c16:	1993      	adds	r3, r2, r6
 8011c18:	9402      	str	r4, [sp, #8]
 8011c1a:	9306      	str	r3, [sp, #24]
 8011c1c:	9b06      	ldr	r3, [sp, #24]
 8011c1e:	429a      	cmp	r2, r3
 8011c20:	d311      	bcc.n	8011c46 <__multiply+0x82>
 8011c22:	9b01      	ldr	r3, [sp, #4]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	dd06      	ble.n	8011c36 <__multiply+0x72>
 8011c28:	2304      	movs	r3, #4
 8011c2a:	425b      	negs	r3, r3
 8011c2c:	449c      	add	ip, r3
 8011c2e:	4663      	mov	r3, ip
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d051      	beq.n	8011cda <__multiply+0x116>
 8011c36:	9b04      	ldr	r3, [sp, #16]
 8011c38:	9a01      	ldr	r2, [sp, #4]
 8011c3a:	0018      	movs	r0, r3
 8011c3c:	611a      	str	r2, [r3, #16]
 8011c3e:	b009      	add	sp, #36	; 0x24
 8011c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c42:	c304      	stmia	r3!, {r2}
 8011c44:	e7de      	b.n	8011c04 <__multiply+0x40>
 8011c46:	8814      	ldrh	r4, [r2, #0]
 8011c48:	2c00      	cmp	r4, #0
 8011c4a:	d01e      	beq.n	8011c8a <__multiply+0xc6>
 8011c4c:	2600      	movs	r6, #0
 8011c4e:	9d00      	ldr	r5, [sp, #0]
 8011c50:	9f02      	ldr	r7, [sp, #8]
 8011c52:	cf01      	ldmia	r7!, {r0}
 8011c54:	9507      	str	r5, [sp, #28]
 8011c56:	cd08      	ldmia	r5!, {r3}
 8011c58:	9303      	str	r3, [sp, #12]
 8011c5a:	b283      	uxth	r3, r0
 8011c5c:	4363      	muls	r3, r4
 8011c5e:	0019      	movs	r1, r3
 8011c60:	466b      	mov	r3, sp
 8011c62:	0c00      	lsrs	r0, r0, #16
 8011c64:	899b      	ldrh	r3, [r3, #12]
 8011c66:	4360      	muls	r0, r4
 8011c68:	18cb      	adds	r3, r1, r3
 8011c6a:	9903      	ldr	r1, [sp, #12]
 8011c6c:	199b      	adds	r3, r3, r6
 8011c6e:	0c09      	lsrs	r1, r1, #16
 8011c70:	1841      	adds	r1, r0, r1
 8011c72:	0c18      	lsrs	r0, r3, #16
 8011c74:	1809      	adds	r1, r1, r0
 8011c76:	0c0e      	lsrs	r6, r1, #16
 8011c78:	b29b      	uxth	r3, r3
 8011c7a:	0409      	lsls	r1, r1, #16
 8011c7c:	430b      	orrs	r3, r1
 8011c7e:	9907      	ldr	r1, [sp, #28]
 8011c80:	600b      	str	r3, [r1, #0]
 8011c82:	9b05      	ldr	r3, [sp, #20]
 8011c84:	42bb      	cmp	r3, r7
 8011c86:	d8e4      	bhi.n	8011c52 <__multiply+0x8e>
 8011c88:	602e      	str	r6, [r5, #0]
 8011c8a:	6813      	ldr	r3, [r2, #0]
 8011c8c:	0c1b      	lsrs	r3, r3, #16
 8011c8e:	9303      	str	r3, [sp, #12]
 8011c90:	d01e      	beq.n	8011cd0 <__multiply+0x10c>
 8011c92:	2600      	movs	r6, #0
 8011c94:	9b00      	ldr	r3, [sp, #0]
 8011c96:	9c02      	ldr	r4, [sp, #8]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	9800      	ldr	r0, [sp, #0]
 8011c9c:	0007      	movs	r7, r0
 8011c9e:	8821      	ldrh	r1, [r4, #0]
 8011ca0:	9d03      	ldr	r5, [sp, #12]
 8011ca2:	b29b      	uxth	r3, r3
 8011ca4:	4369      	muls	r1, r5
 8011ca6:	c820      	ldmia	r0!, {r5}
 8011ca8:	0c2d      	lsrs	r5, r5, #16
 8011caa:	1949      	adds	r1, r1, r5
 8011cac:	198e      	adds	r6, r1, r6
 8011cae:	0431      	lsls	r1, r6, #16
 8011cb0:	430b      	orrs	r3, r1
 8011cb2:	603b      	str	r3, [r7, #0]
 8011cb4:	cc08      	ldmia	r4!, {r3}
 8011cb6:	9903      	ldr	r1, [sp, #12]
 8011cb8:	0c1b      	lsrs	r3, r3, #16
 8011cba:	434b      	muls	r3, r1
 8011cbc:	6879      	ldr	r1, [r7, #4]
 8011cbe:	0c36      	lsrs	r6, r6, #16
 8011cc0:	b289      	uxth	r1, r1
 8011cc2:	185b      	adds	r3, r3, r1
 8011cc4:	9905      	ldr	r1, [sp, #20]
 8011cc6:	199b      	adds	r3, r3, r6
 8011cc8:	0c1e      	lsrs	r6, r3, #16
 8011cca:	42a1      	cmp	r1, r4
 8011ccc:	d8e6      	bhi.n	8011c9c <__multiply+0xd8>
 8011cce:	6003      	str	r3, [r0, #0]
 8011cd0:	9b00      	ldr	r3, [sp, #0]
 8011cd2:	3204      	adds	r2, #4
 8011cd4:	3304      	adds	r3, #4
 8011cd6:	9300      	str	r3, [sp, #0]
 8011cd8:	e7a0      	b.n	8011c1c <__multiply+0x58>
 8011cda:	9b01      	ldr	r3, [sp, #4]
 8011cdc:	3b01      	subs	r3, #1
 8011cde:	9301      	str	r3, [sp, #4]
 8011ce0:	e79f      	b.n	8011c22 <__multiply+0x5e>
	...

08011ce4 <__pow5mult>:
 8011ce4:	2303      	movs	r3, #3
 8011ce6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ce8:	4013      	ands	r3, r2
 8011cea:	0005      	movs	r5, r0
 8011cec:	000e      	movs	r6, r1
 8011cee:	0014      	movs	r4, r2
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d008      	beq.n	8011d06 <__pow5mult+0x22>
 8011cf4:	4922      	ldr	r1, [pc, #136]	; (8011d80 <__pow5mult+0x9c>)
 8011cf6:	3b01      	subs	r3, #1
 8011cf8:	009a      	lsls	r2, r3, #2
 8011cfa:	5852      	ldr	r2, [r2, r1]
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	0031      	movs	r1, r6
 8011d00:	f7ff fed2 	bl	8011aa8 <__multadd>
 8011d04:	0006      	movs	r6, r0
 8011d06:	10a3      	asrs	r3, r4, #2
 8011d08:	9301      	str	r3, [sp, #4]
 8011d0a:	d036      	beq.n	8011d7a <__pow5mult+0x96>
 8011d0c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8011d0e:	2c00      	cmp	r4, #0
 8011d10:	d107      	bne.n	8011d22 <__pow5mult+0x3e>
 8011d12:	2010      	movs	r0, #16
 8011d14:	f7fd fbfe 	bl	800f514 <malloc>
 8011d18:	6268      	str	r0, [r5, #36]	; 0x24
 8011d1a:	6044      	str	r4, [r0, #4]
 8011d1c:	6084      	str	r4, [r0, #8]
 8011d1e:	6004      	str	r4, [r0, #0]
 8011d20:	60c4      	str	r4, [r0, #12]
 8011d22:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8011d24:	68bc      	ldr	r4, [r7, #8]
 8011d26:	2c00      	cmp	r4, #0
 8011d28:	d107      	bne.n	8011d3a <__pow5mult+0x56>
 8011d2a:	4916      	ldr	r1, [pc, #88]	; (8011d84 <__pow5mult+0xa0>)
 8011d2c:	0028      	movs	r0, r5
 8011d2e:	f7ff ff40 	bl	8011bb2 <__i2b>
 8011d32:	2300      	movs	r3, #0
 8011d34:	0004      	movs	r4, r0
 8011d36:	60b8      	str	r0, [r7, #8]
 8011d38:	6003      	str	r3, [r0, #0]
 8011d3a:	2201      	movs	r2, #1
 8011d3c:	9b01      	ldr	r3, [sp, #4]
 8011d3e:	4213      	tst	r3, r2
 8011d40:	d00a      	beq.n	8011d58 <__pow5mult+0x74>
 8011d42:	0031      	movs	r1, r6
 8011d44:	0022      	movs	r2, r4
 8011d46:	0028      	movs	r0, r5
 8011d48:	f7ff ff3c 	bl	8011bc4 <__multiply>
 8011d4c:	0007      	movs	r7, r0
 8011d4e:	0031      	movs	r1, r6
 8011d50:	0028      	movs	r0, r5
 8011d52:	f7ff fe90 	bl	8011a76 <_Bfree>
 8011d56:	003e      	movs	r6, r7
 8011d58:	9b01      	ldr	r3, [sp, #4]
 8011d5a:	105b      	asrs	r3, r3, #1
 8011d5c:	9301      	str	r3, [sp, #4]
 8011d5e:	d00c      	beq.n	8011d7a <__pow5mult+0x96>
 8011d60:	6820      	ldr	r0, [r4, #0]
 8011d62:	2800      	cmp	r0, #0
 8011d64:	d107      	bne.n	8011d76 <__pow5mult+0x92>
 8011d66:	0022      	movs	r2, r4
 8011d68:	0021      	movs	r1, r4
 8011d6a:	0028      	movs	r0, r5
 8011d6c:	f7ff ff2a 	bl	8011bc4 <__multiply>
 8011d70:	2300      	movs	r3, #0
 8011d72:	6020      	str	r0, [r4, #0]
 8011d74:	6003      	str	r3, [r0, #0]
 8011d76:	0004      	movs	r4, r0
 8011d78:	e7df      	b.n	8011d3a <__pow5mult+0x56>
 8011d7a:	0030      	movs	r0, r6
 8011d7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011d7e:	46c0      	nop			; (mov r8, r8)
 8011d80:	08015870 	.word	0x08015870
 8011d84:	00000271 	.word	0x00000271

08011d88 <__lshift>:
 8011d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d8a:	000d      	movs	r5, r1
 8011d8c:	0017      	movs	r7, r2
 8011d8e:	692b      	ldr	r3, [r5, #16]
 8011d90:	1154      	asrs	r4, r2, #5
 8011d92:	b085      	sub	sp, #20
 8011d94:	18e3      	adds	r3, r4, r3
 8011d96:	9302      	str	r3, [sp, #8]
 8011d98:	3301      	adds	r3, #1
 8011d9a:	9301      	str	r3, [sp, #4]
 8011d9c:	6849      	ldr	r1, [r1, #4]
 8011d9e:	68ab      	ldr	r3, [r5, #8]
 8011da0:	9003      	str	r0, [sp, #12]
 8011da2:	9a01      	ldr	r2, [sp, #4]
 8011da4:	4293      	cmp	r3, r2
 8011da6:	db34      	blt.n	8011e12 <__lshift+0x8a>
 8011da8:	9803      	ldr	r0, [sp, #12]
 8011daa:	f7ff fe2c 	bl	8011a06 <_Balloc>
 8011dae:	2300      	movs	r3, #0
 8011db0:	0002      	movs	r2, r0
 8011db2:	0006      	movs	r6, r0
 8011db4:	0019      	movs	r1, r3
 8011db6:	3214      	adds	r2, #20
 8011db8:	42a3      	cmp	r3, r4
 8011dba:	db2d      	blt.n	8011e18 <__lshift+0x90>
 8011dbc:	43e3      	mvns	r3, r4
 8011dbe:	17db      	asrs	r3, r3, #31
 8011dc0:	401c      	ands	r4, r3
 8011dc2:	002b      	movs	r3, r5
 8011dc4:	211f      	movs	r1, #31
 8011dc6:	00a4      	lsls	r4, r4, #2
 8011dc8:	1914      	adds	r4, r2, r4
 8011dca:	692a      	ldr	r2, [r5, #16]
 8011dcc:	3314      	adds	r3, #20
 8011dce:	0092      	lsls	r2, r2, #2
 8011dd0:	189a      	adds	r2, r3, r2
 8011dd2:	400f      	ands	r7, r1
 8011dd4:	d024      	beq.n	8011e20 <__lshift+0x98>
 8011dd6:	3101      	adds	r1, #1
 8011dd8:	1bc9      	subs	r1, r1, r7
 8011dda:	468c      	mov	ip, r1
 8011ddc:	2100      	movs	r1, #0
 8011dde:	6818      	ldr	r0, [r3, #0]
 8011de0:	40b8      	lsls	r0, r7
 8011de2:	4301      	orrs	r1, r0
 8011de4:	4660      	mov	r0, ip
 8011de6:	6021      	str	r1, [r4, #0]
 8011de8:	cb02      	ldmia	r3!, {r1}
 8011dea:	3404      	adds	r4, #4
 8011dec:	40c1      	lsrs	r1, r0
 8011dee:	429a      	cmp	r2, r3
 8011df0:	d8f5      	bhi.n	8011dde <__lshift+0x56>
 8011df2:	6021      	str	r1, [r4, #0]
 8011df4:	2900      	cmp	r1, #0
 8011df6:	d002      	beq.n	8011dfe <__lshift+0x76>
 8011df8:	9b02      	ldr	r3, [sp, #8]
 8011dfa:	3302      	adds	r3, #2
 8011dfc:	9301      	str	r3, [sp, #4]
 8011dfe:	9b01      	ldr	r3, [sp, #4]
 8011e00:	9803      	ldr	r0, [sp, #12]
 8011e02:	3b01      	subs	r3, #1
 8011e04:	6133      	str	r3, [r6, #16]
 8011e06:	0029      	movs	r1, r5
 8011e08:	f7ff fe35 	bl	8011a76 <_Bfree>
 8011e0c:	0030      	movs	r0, r6
 8011e0e:	b005      	add	sp, #20
 8011e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e12:	3101      	adds	r1, #1
 8011e14:	005b      	lsls	r3, r3, #1
 8011e16:	e7c4      	b.n	8011da2 <__lshift+0x1a>
 8011e18:	0098      	lsls	r0, r3, #2
 8011e1a:	5011      	str	r1, [r2, r0]
 8011e1c:	3301      	adds	r3, #1
 8011e1e:	e7cb      	b.n	8011db8 <__lshift+0x30>
 8011e20:	cb02      	ldmia	r3!, {r1}
 8011e22:	c402      	stmia	r4!, {r1}
 8011e24:	429a      	cmp	r2, r3
 8011e26:	d8fb      	bhi.n	8011e20 <__lshift+0x98>
 8011e28:	e7e9      	b.n	8011dfe <__lshift+0x76>

08011e2a <__mcmp>:
 8011e2a:	690a      	ldr	r2, [r1, #16]
 8011e2c:	6903      	ldr	r3, [r0, #16]
 8011e2e:	b530      	push	{r4, r5, lr}
 8011e30:	1a9b      	subs	r3, r3, r2
 8011e32:	d10e      	bne.n	8011e52 <__mcmp+0x28>
 8011e34:	0092      	lsls	r2, r2, #2
 8011e36:	3014      	adds	r0, #20
 8011e38:	3114      	adds	r1, #20
 8011e3a:	1884      	adds	r4, r0, r2
 8011e3c:	1889      	adds	r1, r1, r2
 8011e3e:	3c04      	subs	r4, #4
 8011e40:	3904      	subs	r1, #4
 8011e42:	6822      	ldr	r2, [r4, #0]
 8011e44:	680d      	ldr	r5, [r1, #0]
 8011e46:	42aa      	cmp	r2, r5
 8011e48:	d005      	beq.n	8011e56 <__mcmp+0x2c>
 8011e4a:	42aa      	cmp	r2, r5
 8011e4c:	4192      	sbcs	r2, r2
 8011e4e:	2301      	movs	r3, #1
 8011e50:	4313      	orrs	r3, r2
 8011e52:	0018      	movs	r0, r3
 8011e54:	bd30      	pop	{r4, r5, pc}
 8011e56:	42a0      	cmp	r0, r4
 8011e58:	d3f1      	bcc.n	8011e3e <__mcmp+0x14>
 8011e5a:	e7fa      	b.n	8011e52 <__mcmp+0x28>

08011e5c <__mdiff>:
 8011e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e5e:	000d      	movs	r5, r1
 8011e60:	b085      	sub	sp, #20
 8011e62:	0007      	movs	r7, r0
 8011e64:	0011      	movs	r1, r2
 8011e66:	0028      	movs	r0, r5
 8011e68:	0014      	movs	r4, r2
 8011e6a:	f7ff ffde 	bl	8011e2a <__mcmp>
 8011e6e:	1e06      	subs	r6, r0, #0
 8011e70:	d108      	bne.n	8011e84 <__mdiff+0x28>
 8011e72:	0001      	movs	r1, r0
 8011e74:	0038      	movs	r0, r7
 8011e76:	f7ff fdc6 	bl	8011a06 <_Balloc>
 8011e7a:	2301      	movs	r3, #1
 8011e7c:	6146      	str	r6, [r0, #20]
 8011e7e:	6103      	str	r3, [r0, #16]
 8011e80:	b005      	add	sp, #20
 8011e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e84:	2301      	movs	r3, #1
 8011e86:	9301      	str	r3, [sp, #4]
 8011e88:	2800      	cmp	r0, #0
 8011e8a:	db04      	blt.n	8011e96 <__mdiff+0x3a>
 8011e8c:	0023      	movs	r3, r4
 8011e8e:	002c      	movs	r4, r5
 8011e90:	001d      	movs	r5, r3
 8011e92:	2300      	movs	r3, #0
 8011e94:	9301      	str	r3, [sp, #4]
 8011e96:	6861      	ldr	r1, [r4, #4]
 8011e98:	0038      	movs	r0, r7
 8011e9a:	f7ff fdb4 	bl	8011a06 <_Balloc>
 8011e9e:	002f      	movs	r7, r5
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	9b01      	ldr	r3, [sp, #4]
 8011ea4:	6926      	ldr	r6, [r4, #16]
 8011ea6:	60c3      	str	r3, [r0, #12]
 8011ea8:	3414      	adds	r4, #20
 8011eaa:	00b3      	lsls	r3, r6, #2
 8011eac:	18e3      	adds	r3, r4, r3
 8011eae:	9302      	str	r3, [sp, #8]
 8011eb0:	692b      	ldr	r3, [r5, #16]
 8011eb2:	3714      	adds	r7, #20
 8011eb4:	009b      	lsls	r3, r3, #2
 8011eb6:	18fb      	adds	r3, r7, r3
 8011eb8:	9303      	str	r3, [sp, #12]
 8011eba:	0003      	movs	r3, r0
 8011ebc:	4694      	mov	ip, r2
 8011ebe:	3314      	adds	r3, #20
 8011ec0:	cc20      	ldmia	r4!, {r5}
 8011ec2:	cf04      	ldmia	r7!, {r2}
 8011ec4:	9201      	str	r2, [sp, #4]
 8011ec6:	b2aa      	uxth	r2, r5
 8011ec8:	4494      	add	ip, r2
 8011eca:	466a      	mov	r2, sp
 8011ecc:	4661      	mov	r1, ip
 8011ece:	8892      	ldrh	r2, [r2, #4]
 8011ed0:	0c2d      	lsrs	r5, r5, #16
 8011ed2:	1a8a      	subs	r2, r1, r2
 8011ed4:	9901      	ldr	r1, [sp, #4]
 8011ed6:	0c09      	lsrs	r1, r1, #16
 8011ed8:	1a69      	subs	r1, r5, r1
 8011eda:	1415      	asrs	r5, r2, #16
 8011edc:	1949      	adds	r1, r1, r5
 8011ede:	140d      	asrs	r5, r1, #16
 8011ee0:	b292      	uxth	r2, r2
 8011ee2:	0409      	lsls	r1, r1, #16
 8011ee4:	430a      	orrs	r2, r1
 8011ee6:	601a      	str	r2, [r3, #0]
 8011ee8:	9a03      	ldr	r2, [sp, #12]
 8011eea:	46ac      	mov	ip, r5
 8011eec:	3304      	adds	r3, #4
 8011eee:	42ba      	cmp	r2, r7
 8011ef0:	d8e6      	bhi.n	8011ec0 <__mdiff+0x64>
 8011ef2:	9902      	ldr	r1, [sp, #8]
 8011ef4:	001a      	movs	r2, r3
 8011ef6:	428c      	cmp	r4, r1
 8011ef8:	d305      	bcc.n	8011f06 <__mdiff+0xaa>
 8011efa:	3a04      	subs	r2, #4
 8011efc:	6813      	ldr	r3, [r2, #0]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d00e      	beq.n	8011f20 <__mdiff+0xc4>
 8011f02:	6106      	str	r6, [r0, #16]
 8011f04:	e7bc      	b.n	8011e80 <__mdiff+0x24>
 8011f06:	cc04      	ldmia	r4!, {r2}
 8011f08:	b291      	uxth	r1, r2
 8011f0a:	4461      	add	r1, ip
 8011f0c:	140d      	asrs	r5, r1, #16
 8011f0e:	0c12      	lsrs	r2, r2, #16
 8011f10:	1952      	adds	r2, r2, r5
 8011f12:	1415      	asrs	r5, r2, #16
 8011f14:	b289      	uxth	r1, r1
 8011f16:	0412      	lsls	r2, r2, #16
 8011f18:	430a      	orrs	r2, r1
 8011f1a:	46ac      	mov	ip, r5
 8011f1c:	c304      	stmia	r3!, {r2}
 8011f1e:	e7e8      	b.n	8011ef2 <__mdiff+0x96>
 8011f20:	3e01      	subs	r6, #1
 8011f22:	e7ea      	b.n	8011efa <__mdiff+0x9e>

08011f24 <__d2b>:
 8011f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f26:	001d      	movs	r5, r3
 8011f28:	2101      	movs	r1, #1
 8011f2a:	9f08      	ldr	r7, [sp, #32]
 8011f2c:	0014      	movs	r4, r2
 8011f2e:	f7ff fd6a 	bl	8011a06 <_Balloc>
 8011f32:	032b      	lsls	r3, r5, #12
 8011f34:	006d      	lsls	r5, r5, #1
 8011f36:	0006      	movs	r6, r0
 8011f38:	0b1b      	lsrs	r3, r3, #12
 8011f3a:	0d6d      	lsrs	r5, r5, #21
 8011f3c:	d124      	bne.n	8011f88 <__d2b+0x64>
 8011f3e:	9301      	str	r3, [sp, #4]
 8011f40:	2c00      	cmp	r4, #0
 8011f42:	d027      	beq.n	8011f94 <__d2b+0x70>
 8011f44:	4668      	mov	r0, sp
 8011f46:	9400      	str	r4, [sp, #0]
 8011f48:	f7ff fe04 	bl	8011b54 <__lo0bits>
 8011f4c:	9c00      	ldr	r4, [sp, #0]
 8011f4e:	2800      	cmp	r0, #0
 8011f50:	d01e      	beq.n	8011f90 <__d2b+0x6c>
 8011f52:	9b01      	ldr	r3, [sp, #4]
 8011f54:	2120      	movs	r1, #32
 8011f56:	001a      	movs	r2, r3
 8011f58:	1a09      	subs	r1, r1, r0
 8011f5a:	408a      	lsls	r2, r1
 8011f5c:	40c3      	lsrs	r3, r0
 8011f5e:	4322      	orrs	r2, r4
 8011f60:	6172      	str	r2, [r6, #20]
 8011f62:	9301      	str	r3, [sp, #4]
 8011f64:	9c01      	ldr	r4, [sp, #4]
 8011f66:	61b4      	str	r4, [r6, #24]
 8011f68:	1e63      	subs	r3, r4, #1
 8011f6a:	419c      	sbcs	r4, r3
 8011f6c:	3401      	adds	r4, #1
 8011f6e:	6134      	str	r4, [r6, #16]
 8011f70:	2d00      	cmp	r5, #0
 8011f72:	d018      	beq.n	8011fa6 <__d2b+0x82>
 8011f74:	4b12      	ldr	r3, [pc, #72]	; (8011fc0 <__d2b+0x9c>)
 8011f76:	18ed      	adds	r5, r5, r3
 8011f78:	2335      	movs	r3, #53	; 0x35
 8011f7a:	182d      	adds	r5, r5, r0
 8011f7c:	603d      	str	r5, [r7, #0]
 8011f7e:	1a18      	subs	r0, r3, r0
 8011f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f82:	6018      	str	r0, [r3, #0]
 8011f84:	0030      	movs	r0, r6
 8011f86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011f88:	2280      	movs	r2, #128	; 0x80
 8011f8a:	0352      	lsls	r2, r2, #13
 8011f8c:	4313      	orrs	r3, r2
 8011f8e:	e7d6      	b.n	8011f3e <__d2b+0x1a>
 8011f90:	6174      	str	r4, [r6, #20]
 8011f92:	e7e7      	b.n	8011f64 <__d2b+0x40>
 8011f94:	a801      	add	r0, sp, #4
 8011f96:	f7ff fddd 	bl	8011b54 <__lo0bits>
 8011f9a:	2401      	movs	r4, #1
 8011f9c:	9b01      	ldr	r3, [sp, #4]
 8011f9e:	6134      	str	r4, [r6, #16]
 8011fa0:	6173      	str	r3, [r6, #20]
 8011fa2:	3020      	adds	r0, #32
 8011fa4:	e7e4      	b.n	8011f70 <__d2b+0x4c>
 8011fa6:	4b07      	ldr	r3, [pc, #28]	; (8011fc4 <__d2b+0xa0>)
 8011fa8:	18c0      	adds	r0, r0, r3
 8011faa:	4b07      	ldr	r3, [pc, #28]	; (8011fc8 <__d2b+0xa4>)
 8011fac:	6038      	str	r0, [r7, #0]
 8011fae:	18e3      	adds	r3, r4, r3
 8011fb0:	009b      	lsls	r3, r3, #2
 8011fb2:	18f3      	adds	r3, r6, r3
 8011fb4:	6958      	ldr	r0, [r3, #20]
 8011fb6:	f7ff fdb3 	bl	8011b20 <__hi0bits>
 8011fba:	0164      	lsls	r4, r4, #5
 8011fbc:	1a20      	subs	r0, r4, r0
 8011fbe:	e7df      	b.n	8011f80 <__d2b+0x5c>
 8011fc0:	fffffbcd 	.word	0xfffffbcd
 8011fc4:	fffffbce 	.word	0xfffffbce
 8011fc8:	3fffffff 	.word	0x3fffffff

08011fcc <__ssprint_r>:
 8011fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fce:	6893      	ldr	r3, [r2, #8]
 8011fd0:	b087      	sub	sp, #28
 8011fd2:	9002      	str	r0, [sp, #8]
 8011fd4:	000c      	movs	r4, r1
 8011fd6:	0016      	movs	r6, r2
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d063      	beq.n	80120a4 <__ssprint_r+0xd8>
 8011fdc:	6813      	ldr	r3, [r2, #0]
 8011fde:	9303      	str	r3, [sp, #12]
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	001f      	movs	r7, r3
 8011fe4:	9305      	str	r3, [sp, #20]
 8011fe6:	2f00      	cmp	r7, #0
 8011fe8:	d02e      	beq.n	8012048 <__ssprint_r+0x7c>
 8011fea:	68a5      	ldr	r5, [r4, #8]
 8011fec:	42af      	cmp	r7, r5
 8011fee:	d349      	bcc.n	8012084 <__ssprint_r+0xb8>
 8011ff0:	2390      	movs	r3, #144	; 0x90
 8011ff2:	89a2      	ldrh	r2, [r4, #12]
 8011ff4:	00db      	lsls	r3, r3, #3
 8011ff6:	421a      	tst	r2, r3
 8011ff8:	d042      	beq.n	8012080 <__ssprint_r+0xb4>
 8011ffa:	2003      	movs	r0, #3
 8011ffc:	6921      	ldr	r1, [r4, #16]
 8011ffe:	6823      	ldr	r3, [r4, #0]
 8012000:	1a5b      	subs	r3, r3, r1
 8012002:	9304      	str	r3, [sp, #16]
 8012004:	6963      	ldr	r3, [r4, #20]
 8012006:	4343      	muls	r3, r0
 8012008:	0fd8      	lsrs	r0, r3, #31
 801200a:	18c3      	adds	r3, r0, r3
 801200c:	105b      	asrs	r3, r3, #1
 801200e:	9301      	str	r3, [sp, #4]
 8012010:	9b04      	ldr	r3, [sp, #16]
 8012012:	9801      	ldr	r0, [sp, #4]
 8012014:	3301      	adds	r3, #1
 8012016:	19db      	adds	r3, r3, r7
 8012018:	4283      	cmp	r3, r0
 801201a:	d900      	bls.n	801201e <__ssprint_r+0x52>
 801201c:	9301      	str	r3, [sp, #4]
 801201e:	0553      	lsls	r3, r2, #21
 8012020:	d544      	bpl.n	80120ac <__ssprint_r+0xe0>
 8012022:	9901      	ldr	r1, [sp, #4]
 8012024:	9802      	ldr	r0, [sp, #8]
 8012026:	f7fd fa89 	bl	800f53c <_malloc_r>
 801202a:	1e05      	subs	r5, r0, #0
 801202c:	d114      	bne.n	8012058 <__ssprint_r+0x8c>
 801202e:	230c      	movs	r3, #12
 8012030:	9a02      	ldr	r2, [sp, #8]
 8012032:	2001      	movs	r0, #1
 8012034:	6013      	str	r3, [r2, #0]
 8012036:	2340      	movs	r3, #64	; 0x40
 8012038:	89a2      	ldrh	r2, [r4, #12]
 801203a:	4240      	negs	r0, r0
 801203c:	4313      	orrs	r3, r2
 801203e:	81a3      	strh	r3, [r4, #12]
 8012040:	2300      	movs	r3, #0
 8012042:	60b3      	str	r3, [r6, #8]
 8012044:	6073      	str	r3, [r6, #4]
 8012046:	e02f      	b.n	80120a8 <__ssprint_r+0xdc>
 8012048:	9b03      	ldr	r3, [sp, #12]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	9305      	str	r3, [sp, #20]
 801204e:	9b03      	ldr	r3, [sp, #12]
 8012050:	685f      	ldr	r7, [r3, #4]
 8012052:	3308      	adds	r3, #8
 8012054:	9303      	str	r3, [sp, #12]
 8012056:	e7c6      	b.n	8011fe6 <__ssprint_r+0x1a>
 8012058:	9a04      	ldr	r2, [sp, #16]
 801205a:	6921      	ldr	r1, [r4, #16]
 801205c:	f7fd fc72 	bl	800f944 <memcpy>
 8012060:	89a3      	ldrh	r3, [r4, #12]
 8012062:	4a18      	ldr	r2, [pc, #96]	; (80120c4 <__ssprint_r+0xf8>)
 8012064:	401a      	ands	r2, r3
 8012066:	2380      	movs	r3, #128	; 0x80
 8012068:	4313      	orrs	r3, r2
 801206a:	81a3      	strh	r3, [r4, #12]
 801206c:	9b04      	ldr	r3, [sp, #16]
 801206e:	6125      	str	r5, [r4, #16]
 8012070:	18ed      	adds	r5, r5, r3
 8012072:	6025      	str	r5, [r4, #0]
 8012074:	003d      	movs	r5, r7
 8012076:	9b01      	ldr	r3, [sp, #4]
 8012078:	9a04      	ldr	r2, [sp, #16]
 801207a:	6163      	str	r3, [r4, #20]
 801207c:	1a9b      	subs	r3, r3, r2
 801207e:	60a3      	str	r3, [r4, #8]
 8012080:	42af      	cmp	r7, r5
 8012082:	d200      	bcs.n	8012086 <__ssprint_r+0xba>
 8012084:	003d      	movs	r5, r7
 8012086:	002a      	movs	r2, r5
 8012088:	9905      	ldr	r1, [sp, #20]
 801208a:	6820      	ldr	r0, [r4, #0]
 801208c:	f000 f85a 	bl	8012144 <memmove>
 8012090:	68a3      	ldr	r3, [r4, #8]
 8012092:	1b5b      	subs	r3, r3, r5
 8012094:	60a3      	str	r3, [r4, #8]
 8012096:	6823      	ldr	r3, [r4, #0]
 8012098:	195d      	adds	r5, r3, r5
 801209a:	68b3      	ldr	r3, [r6, #8]
 801209c:	6025      	str	r5, [r4, #0]
 801209e:	1bdb      	subs	r3, r3, r7
 80120a0:	60b3      	str	r3, [r6, #8]
 80120a2:	d1d1      	bne.n	8012048 <__ssprint_r+0x7c>
 80120a4:	2000      	movs	r0, #0
 80120a6:	6070      	str	r0, [r6, #4]
 80120a8:	b007      	add	sp, #28
 80120aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120ac:	9a01      	ldr	r2, [sp, #4]
 80120ae:	9802      	ldr	r0, [sp, #8]
 80120b0:	f000 f85a 	bl	8012168 <_realloc_r>
 80120b4:	1e05      	subs	r5, r0, #0
 80120b6:	d1d9      	bne.n	801206c <__ssprint_r+0xa0>
 80120b8:	6921      	ldr	r1, [r4, #16]
 80120ba:	9802      	ldr	r0, [sp, #8]
 80120bc:	f7ff fbd6 	bl	801186c <_free_r>
 80120c0:	e7b5      	b.n	801202e <__ssprint_r+0x62>
 80120c2:	46c0      	nop			; (mov r8, r8)
 80120c4:	fffffb7f 	.word	0xfffffb7f

080120c8 <_calloc_r>:
 80120c8:	b510      	push	{r4, lr}
 80120ca:	4351      	muls	r1, r2
 80120cc:	f7fd fa36 	bl	800f53c <_malloc_r>
 80120d0:	1e04      	subs	r4, r0, #0
 80120d2:	d01a      	beq.n	801210a <_calloc_r+0x42>
 80120d4:	0003      	movs	r3, r0
 80120d6:	3b08      	subs	r3, #8
 80120d8:	685a      	ldr	r2, [r3, #4]
 80120da:	2303      	movs	r3, #3
 80120dc:	439a      	bics	r2, r3
 80120de:	3a04      	subs	r2, #4
 80120e0:	2a24      	cmp	r2, #36	; 0x24
 80120e2:	d819      	bhi.n	8012118 <_calloc_r+0x50>
 80120e4:	0003      	movs	r3, r0
 80120e6:	2a13      	cmp	r2, #19
 80120e8:	d90b      	bls.n	8012102 <_calloc_r+0x3a>
 80120ea:	2100      	movs	r1, #0
 80120ec:	3308      	adds	r3, #8
 80120ee:	6001      	str	r1, [r0, #0]
 80120f0:	6041      	str	r1, [r0, #4]
 80120f2:	2a1b      	cmp	r2, #27
 80120f4:	d905      	bls.n	8012102 <_calloc_r+0x3a>
 80120f6:	6081      	str	r1, [r0, #8]
 80120f8:	60c1      	str	r1, [r0, #12]
 80120fa:	2a24      	cmp	r2, #36	; 0x24
 80120fc:	d007      	beq.n	801210e <_calloc_r+0x46>
 80120fe:	0003      	movs	r3, r0
 8012100:	3310      	adds	r3, #16
 8012102:	2200      	movs	r2, #0
 8012104:	601a      	str	r2, [r3, #0]
 8012106:	605a      	str	r2, [r3, #4]
 8012108:	609a      	str	r2, [r3, #8]
 801210a:	0020      	movs	r0, r4
 801210c:	bd10      	pop	{r4, pc}
 801210e:	0003      	movs	r3, r0
 8012110:	6101      	str	r1, [r0, #16]
 8012112:	3318      	adds	r3, #24
 8012114:	6141      	str	r1, [r0, #20]
 8012116:	e7f4      	b.n	8012102 <_calloc_r+0x3a>
 8012118:	2100      	movs	r1, #0
 801211a:	f7fd fc1c 	bl	800f956 <memset>
 801211e:	e7f4      	b.n	801210a <_calloc_r+0x42>

08012120 <__ascii_mbtowc>:
 8012120:	b082      	sub	sp, #8
 8012122:	2900      	cmp	r1, #0
 8012124:	d100      	bne.n	8012128 <__ascii_mbtowc+0x8>
 8012126:	a901      	add	r1, sp, #4
 8012128:	1e10      	subs	r0, r2, #0
 801212a:	d006      	beq.n	801213a <__ascii_mbtowc+0x1a>
 801212c:	2b00      	cmp	r3, #0
 801212e:	d006      	beq.n	801213e <__ascii_mbtowc+0x1e>
 8012130:	7813      	ldrb	r3, [r2, #0]
 8012132:	600b      	str	r3, [r1, #0]
 8012134:	7810      	ldrb	r0, [r2, #0]
 8012136:	1e43      	subs	r3, r0, #1
 8012138:	4198      	sbcs	r0, r3
 801213a:	b002      	add	sp, #8
 801213c:	4770      	bx	lr
 801213e:	2002      	movs	r0, #2
 8012140:	4240      	negs	r0, r0
 8012142:	e7fa      	b.n	801213a <__ascii_mbtowc+0x1a>

08012144 <memmove>:
 8012144:	b510      	push	{r4, lr}
 8012146:	4288      	cmp	r0, r1
 8012148:	d902      	bls.n	8012150 <memmove+0xc>
 801214a:	188b      	adds	r3, r1, r2
 801214c:	4298      	cmp	r0, r3
 801214e:	d308      	bcc.n	8012162 <memmove+0x1e>
 8012150:	2300      	movs	r3, #0
 8012152:	429a      	cmp	r2, r3
 8012154:	d007      	beq.n	8012166 <memmove+0x22>
 8012156:	5ccc      	ldrb	r4, [r1, r3]
 8012158:	54c4      	strb	r4, [r0, r3]
 801215a:	3301      	adds	r3, #1
 801215c:	e7f9      	b.n	8012152 <memmove+0xe>
 801215e:	5c8b      	ldrb	r3, [r1, r2]
 8012160:	5483      	strb	r3, [r0, r2]
 8012162:	3a01      	subs	r2, #1
 8012164:	d2fb      	bcs.n	801215e <memmove+0x1a>
 8012166:	bd10      	pop	{r4, pc}

08012168 <_realloc_r>:
 8012168:	b5f0      	push	{r4, r5, r6, r7, lr}
 801216a:	b087      	sub	sp, #28
 801216c:	9002      	str	r0, [sp, #8]
 801216e:	1e0c      	subs	r4, r1, #0
 8012170:	9204      	str	r2, [sp, #16]
 8012172:	d106      	bne.n	8012182 <_realloc_r+0x1a>
 8012174:	0011      	movs	r1, r2
 8012176:	f7fd f9e1 	bl	800f53c <_malloc_r>
 801217a:	0006      	movs	r6, r0
 801217c:	0030      	movs	r0, r6
 801217e:	b007      	add	sp, #28
 8012180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012182:	0027      	movs	r7, r4
 8012184:	9802      	ldr	r0, [sp, #8]
 8012186:	3f08      	subs	r7, #8
 8012188:	f7fd fbee 	bl	800f968 <__malloc_lock>
 801218c:	6878      	ldr	r0, [r7, #4]
 801218e:	2303      	movs	r3, #3
 8012190:	0002      	movs	r2, r0
 8012192:	9e04      	ldr	r6, [sp, #16]
 8012194:	439a      	bics	r2, r3
 8012196:	360b      	adds	r6, #11
 8012198:	9203      	str	r2, [sp, #12]
 801219a:	2e16      	cmp	r6, #22
 801219c:	d908      	bls.n	80121b0 <_realloc_r+0x48>
 801219e:	3304      	adds	r3, #4
 80121a0:	439e      	bics	r6, r3
 80121a2:	9601      	str	r6, [sp, #4]
 80121a4:	d506      	bpl.n	80121b4 <_realloc_r+0x4c>
 80121a6:	230c      	movs	r3, #12
 80121a8:	9a02      	ldr	r2, [sp, #8]
 80121aa:	2600      	movs	r6, #0
 80121ac:	6013      	str	r3, [r2, #0]
 80121ae:	e7e5      	b.n	801217c <_realloc_r+0x14>
 80121b0:	2310      	movs	r3, #16
 80121b2:	9301      	str	r3, [sp, #4]
 80121b4:	9b01      	ldr	r3, [sp, #4]
 80121b6:	9a04      	ldr	r2, [sp, #16]
 80121b8:	4293      	cmp	r3, r2
 80121ba:	d3f4      	bcc.n	80121a6 <_realloc_r+0x3e>
 80121bc:	9b01      	ldr	r3, [sp, #4]
 80121be:	9a03      	ldr	r2, [sp, #12]
 80121c0:	4293      	cmp	r3, r2
 80121c2:	dc00      	bgt.n	80121c6 <_realloc_r+0x5e>
 80121c4:	e141      	b.n	801244a <_realloc_r+0x2e2>
 80121c6:	18bb      	adds	r3, r7, r2
 80121c8:	4aa4      	ldr	r2, [pc, #656]	; (801245c <_realloc_r+0x2f4>)
 80121ca:	6891      	ldr	r1, [r2, #8]
 80121cc:	468c      	mov	ip, r1
 80121ce:	428b      	cmp	r3, r1
 80121d0:	d006      	beq.n	80121e0 <_realloc_r+0x78>
 80121d2:	2501      	movs	r5, #1
 80121d4:	6859      	ldr	r1, [r3, #4]
 80121d6:	43a9      	bics	r1, r5
 80121d8:	1859      	adds	r1, r3, r1
 80121da:	6849      	ldr	r1, [r1, #4]
 80121dc:	4229      	tst	r1, r5
 80121de:	d142      	bne.n	8012266 <_realloc_r+0xfe>
 80121e0:	2103      	movs	r1, #3
 80121e2:	685d      	ldr	r5, [r3, #4]
 80121e4:	438d      	bics	r5, r1
 80121e6:	0029      	movs	r1, r5
 80121e8:	9d03      	ldr	r5, [sp, #12]
 80121ea:	186e      	adds	r6, r5, r1
 80121ec:	4563      	cmp	r3, ip
 80121ee:	d116      	bne.n	801221e <_realloc_r+0xb6>
 80121f0:	9d01      	ldr	r5, [sp, #4]
 80121f2:	3510      	adds	r5, #16
 80121f4:	42ae      	cmp	r6, r5
 80121f6:	db38      	blt.n	801226a <_realloc_r+0x102>
 80121f8:	9b01      	ldr	r3, [sp, #4]
 80121fa:	9802      	ldr	r0, [sp, #8]
 80121fc:	18ff      	adds	r7, r7, r3
 80121fe:	6097      	str	r7, [r2, #8]
 8012200:	2201      	movs	r2, #1
 8012202:	1af6      	subs	r6, r6, r3
 8012204:	0023      	movs	r3, r4
 8012206:	4316      	orrs	r6, r2
 8012208:	607e      	str	r6, [r7, #4]
 801220a:	3b08      	subs	r3, #8
 801220c:	685e      	ldr	r6, [r3, #4]
 801220e:	4016      	ands	r6, r2
 8012210:	9a01      	ldr	r2, [sp, #4]
 8012212:	4316      	orrs	r6, r2
 8012214:	605e      	str	r6, [r3, #4]
 8012216:	f7fd fbaf 	bl	800f978 <__malloc_unlock>
 801221a:	0026      	movs	r6, r4
 801221c:	e7ae      	b.n	801217c <_realloc_r+0x14>
 801221e:	9a01      	ldr	r2, [sp, #4]
 8012220:	42b2      	cmp	r2, r6
 8012222:	dc22      	bgt.n	801226a <_realloc_r+0x102>
 8012224:	68da      	ldr	r2, [r3, #12]
 8012226:	689b      	ldr	r3, [r3, #8]
 8012228:	60da      	str	r2, [r3, #12]
 801222a:	6093      	str	r3, [r2, #8]
 801222c:	9b01      	ldr	r3, [sp, #4]
 801222e:	2201      	movs	r2, #1
 8012230:	1af4      	subs	r4, r6, r3
 8012232:	19b8      	adds	r0, r7, r6
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	2c0f      	cmp	r4, #15
 8012238:	d800      	bhi.n	801223c <_realloc_r+0xd4>
 801223a:	e108      	b.n	801244e <_realloc_r+0x2e6>
 801223c:	9901      	ldr	r1, [sp, #4]
 801223e:	9d01      	ldr	r5, [sp, #4]
 8012240:	4013      	ands	r3, r2
 8012242:	1879      	adds	r1, r7, r1
 8012244:	432b      	orrs	r3, r5
 8012246:	4314      	orrs	r4, r2
 8012248:	607b      	str	r3, [r7, #4]
 801224a:	604c      	str	r4, [r1, #4]
 801224c:	6843      	ldr	r3, [r0, #4]
 801224e:	3108      	adds	r1, #8
 8012250:	431a      	orrs	r2, r3
 8012252:	6042      	str	r2, [r0, #4]
 8012254:	9802      	ldr	r0, [sp, #8]
 8012256:	f7ff fb09 	bl	801186c <_free_r>
 801225a:	003e      	movs	r6, r7
 801225c:	9802      	ldr	r0, [sp, #8]
 801225e:	f7fd fb8b 	bl	800f978 <__malloc_unlock>
 8012262:	3608      	adds	r6, #8
 8012264:	e78a      	b.n	801217c <_realloc_r+0x14>
 8012266:	2100      	movs	r1, #0
 8012268:	000b      	movs	r3, r1
 801226a:	07c2      	lsls	r2, r0, #31
 801226c:	d500      	bpl.n	8012270 <_realloc_r+0x108>
 801226e:	e088      	b.n	8012382 <_realloc_r+0x21a>
 8012270:	0022      	movs	r2, r4
 8012272:	3a08      	subs	r2, #8
 8012274:	6815      	ldr	r5, [r2, #0]
 8012276:	2203      	movs	r2, #3
 8012278:	1b7d      	subs	r5, r7, r5
 801227a:	6868      	ldr	r0, [r5, #4]
 801227c:	4390      	bics	r0, r2
 801227e:	0002      	movs	r2, r0
 8012280:	9803      	ldr	r0, [sp, #12]
 8012282:	1882      	adds	r2, r0, r2
 8012284:	2b00      	cmp	r3, #0
 8012286:	d078      	beq.n	801237a <_realloc_r+0x212>
 8012288:	4563      	cmp	r3, ip
 801228a:	d150      	bne.n	801232e <_realloc_r+0x1c6>
 801228c:	1853      	adds	r3, r2, r1
 801228e:	9305      	str	r3, [sp, #20]
 8012290:	9b01      	ldr	r3, [sp, #4]
 8012292:	9905      	ldr	r1, [sp, #20]
 8012294:	3310      	adds	r3, #16
 8012296:	4299      	cmp	r1, r3
 8012298:	db6f      	blt.n	801237a <_realloc_r+0x212>
 801229a:	68aa      	ldr	r2, [r5, #8]
 801229c:	68eb      	ldr	r3, [r5, #12]
 801229e:	002e      	movs	r6, r5
 80122a0:	60d3      	str	r3, [r2, #12]
 80122a2:	609a      	str	r2, [r3, #8]
 80122a4:	0002      	movs	r2, r0
 80122a6:	3a04      	subs	r2, #4
 80122a8:	3608      	adds	r6, #8
 80122aa:	2a24      	cmp	r2, #36	; 0x24
 80122ac:	d83a      	bhi.n	8012324 <_realloc_r+0x1bc>
 80122ae:	2a13      	cmp	r2, #19
 80122b0:	d935      	bls.n	801231e <_realloc_r+0x1b6>
 80122b2:	6823      	ldr	r3, [r4, #0]
 80122b4:	60ab      	str	r3, [r5, #8]
 80122b6:	6863      	ldr	r3, [r4, #4]
 80122b8:	60eb      	str	r3, [r5, #12]
 80122ba:	2a1b      	cmp	r2, #27
 80122bc:	d81b      	bhi.n	80122f6 <_realloc_r+0x18e>
 80122be:	002b      	movs	r3, r5
 80122c0:	0022      	movs	r2, r4
 80122c2:	3310      	adds	r3, #16
 80122c4:	3208      	adds	r2, #8
 80122c6:	6811      	ldr	r1, [r2, #0]
 80122c8:	6019      	str	r1, [r3, #0]
 80122ca:	6851      	ldr	r1, [r2, #4]
 80122cc:	6059      	str	r1, [r3, #4]
 80122ce:	6892      	ldr	r2, [r2, #8]
 80122d0:	609a      	str	r2, [r3, #8]
 80122d2:	9b01      	ldr	r3, [sp, #4]
 80122d4:	9901      	ldr	r1, [sp, #4]
 80122d6:	18ea      	adds	r2, r5, r3
 80122d8:	4b60      	ldr	r3, [pc, #384]	; (801245c <_realloc_r+0x2f4>)
 80122da:	609a      	str	r2, [r3, #8]
 80122dc:	9b05      	ldr	r3, [sp, #20]
 80122de:	1a5f      	subs	r7, r3, r1
 80122e0:	2301      	movs	r3, #1
 80122e2:	431f      	orrs	r7, r3
 80122e4:	6057      	str	r7, [r2, #4]
 80122e6:	686a      	ldr	r2, [r5, #4]
 80122e8:	4013      	ands	r3, r2
 80122ea:	430b      	orrs	r3, r1
 80122ec:	606b      	str	r3, [r5, #4]
 80122ee:	9802      	ldr	r0, [sp, #8]
 80122f0:	f7fd fb42 	bl	800f978 <__malloc_unlock>
 80122f4:	e742      	b.n	801217c <_realloc_r+0x14>
 80122f6:	68a3      	ldr	r3, [r4, #8]
 80122f8:	612b      	str	r3, [r5, #16]
 80122fa:	68e3      	ldr	r3, [r4, #12]
 80122fc:	616b      	str	r3, [r5, #20]
 80122fe:	2a24      	cmp	r2, #36	; 0x24
 8012300:	d004      	beq.n	801230c <_realloc_r+0x1a4>
 8012302:	002b      	movs	r3, r5
 8012304:	0022      	movs	r2, r4
 8012306:	3318      	adds	r3, #24
 8012308:	3210      	adds	r2, #16
 801230a:	e7dc      	b.n	80122c6 <_realloc_r+0x15e>
 801230c:	6923      	ldr	r3, [r4, #16]
 801230e:	0022      	movs	r2, r4
 8012310:	61ab      	str	r3, [r5, #24]
 8012312:	002b      	movs	r3, r5
 8012314:	6961      	ldr	r1, [r4, #20]
 8012316:	3320      	adds	r3, #32
 8012318:	3218      	adds	r2, #24
 801231a:	61e9      	str	r1, [r5, #28]
 801231c:	e7d3      	b.n	80122c6 <_realloc_r+0x15e>
 801231e:	0033      	movs	r3, r6
 8012320:	0022      	movs	r2, r4
 8012322:	e7d0      	b.n	80122c6 <_realloc_r+0x15e>
 8012324:	0021      	movs	r1, r4
 8012326:	0030      	movs	r0, r6
 8012328:	f7ff ff0c 	bl	8012144 <memmove>
 801232c:	e7d1      	b.n	80122d2 <_realloc_r+0x16a>
 801232e:	1856      	adds	r6, r2, r1
 8012330:	9901      	ldr	r1, [sp, #4]
 8012332:	42b1      	cmp	r1, r6
 8012334:	dc21      	bgt.n	801237a <_realloc_r+0x212>
 8012336:	68da      	ldr	r2, [r3, #12]
 8012338:	689b      	ldr	r3, [r3, #8]
 801233a:	60da      	str	r2, [r3, #12]
 801233c:	6093      	str	r3, [r2, #8]
 801233e:	0028      	movs	r0, r5
 8012340:	68aa      	ldr	r2, [r5, #8]
 8012342:	68eb      	ldr	r3, [r5, #12]
 8012344:	3008      	adds	r0, #8
 8012346:	60d3      	str	r3, [r2, #12]
 8012348:	609a      	str	r2, [r3, #8]
 801234a:	9a03      	ldr	r2, [sp, #12]
 801234c:	3a04      	subs	r2, #4
 801234e:	2a24      	cmp	r2, #36	; 0x24
 8012350:	d841      	bhi.n	80123d6 <_realloc_r+0x26e>
 8012352:	0023      	movs	r3, r4
 8012354:	2a13      	cmp	r2, #19
 8012356:	d908      	bls.n	801236a <_realloc_r+0x202>
 8012358:	6823      	ldr	r3, [r4, #0]
 801235a:	60ab      	str	r3, [r5, #8]
 801235c:	6863      	ldr	r3, [r4, #4]
 801235e:	60eb      	str	r3, [r5, #12]
 8012360:	2a1b      	cmp	r2, #27
 8012362:	d824      	bhi.n	80123ae <_realloc_r+0x246>
 8012364:	0023      	movs	r3, r4
 8012366:	3008      	adds	r0, #8
 8012368:	3308      	adds	r3, #8
 801236a:	681a      	ldr	r2, [r3, #0]
 801236c:	6002      	str	r2, [r0, #0]
 801236e:	685a      	ldr	r2, [r3, #4]
 8012370:	6042      	str	r2, [r0, #4]
 8012372:	689b      	ldr	r3, [r3, #8]
 8012374:	6083      	str	r3, [r0, #8]
 8012376:	002f      	movs	r7, r5
 8012378:	e758      	b.n	801222c <_realloc_r+0xc4>
 801237a:	9b01      	ldr	r3, [sp, #4]
 801237c:	0016      	movs	r6, r2
 801237e:	4293      	cmp	r3, r2
 8012380:	dddd      	ble.n	801233e <_realloc_r+0x1d6>
 8012382:	9904      	ldr	r1, [sp, #16]
 8012384:	9802      	ldr	r0, [sp, #8]
 8012386:	f7fd f8d9 	bl	800f53c <_malloc_r>
 801238a:	1e06      	subs	r6, r0, #0
 801238c:	d0af      	beq.n	80122ee <_realloc_r+0x186>
 801238e:	0023      	movs	r3, r4
 8012390:	2101      	movs	r1, #1
 8012392:	0002      	movs	r2, r0
 8012394:	3b08      	subs	r3, #8
 8012396:	685b      	ldr	r3, [r3, #4]
 8012398:	3a08      	subs	r2, #8
 801239a:	438b      	bics	r3, r1
 801239c:	18fb      	adds	r3, r7, r3
 801239e:	429a      	cmp	r2, r3
 80123a0:	d11d      	bne.n	80123de <_realloc_r+0x276>
 80123a2:	2303      	movs	r3, #3
 80123a4:	6856      	ldr	r6, [r2, #4]
 80123a6:	439e      	bics	r6, r3
 80123a8:	9b03      	ldr	r3, [sp, #12]
 80123aa:	18f6      	adds	r6, r6, r3
 80123ac:	e73e      	b.n	801222c <_realloc_r+0xc4>
 80123ae:	68a3      	ldr	r3, [r4, #8]
 80123b0:	612b      	str	r3, [r5, #16]
 80123b2:	68e3      	ldr	r3, [r4, #12]
 80123b4:	616b      	str	r3, [r5, #20]
 80123b6:	2a24      	cmp	r2, #36	; 0x24
 80123b8:	d004      	beq.n	80123c4 <_realloc_r+0x25c>
 80123ba:	0028      	movs	r0, r5
 80123bc:	0023      	movs	r3, r4
 80123be:	3018      	adds	r0, #24
 80123c0:	3310      	adds	r3, #16
 80123c2:	e7d2      	b.n	801236a <_realloc_r+0x202>
 80123c4:	6923      	ldr	r3, [r4, #16]
 80123c6:	0028      	movs	r0, r5
 80123c8:	61ab      	str	r3, [r5, #24]
 80123ca:	0023      	movs	r3, r4
 80123cc:	6962      	ldr	r2, [r4, #20]
 80123ce:	3020      	adds	r0, #32
 80123d0:	3318      	adds	r3, #24
 80123d2:	61ea      	str	r2, [r5, #28]
 80123d4:	e7c9      	b.n	801236a <_realloc_r+0x202>
 80123d6:	0021      	movs	r1, r4
 80123d8:	f7ff feb4 	bl	8012144 <memmove>
 80123dc:	e7cb      	b.n	8012376 <_realloc_r+0x20e>
 80123de:	9a03      	ldr	r2, [sp, #12]
 80123e0:	3a04      	subs	r2, #4
 80123e2:	2a24      	cmp	r2, #36	; 0x24
 80123e4:	d82d      	bhi.n	8012442 <_realloc_r+0x2da>
 80123e6:	2a13      	cmp	r2, #19
 80123e8:	d928      	bls.n	801243c <_realloc_r+0x2d4>
 80123ea:	6823      	ldr	r3, [r4, #0]
 80123ec:	6003      	str	r3, [r0, #0]
 80123ee:	6863      	ldr	r3, [r4, #4]
 80123f0:	6043      	str	r3, [r0, #4]
 80123f2:	2a1b      	cmp	r2, #27
 80123f4:	d80e      	bhi.n	8012414 <_realloc_r+0x2ac>
 80123f6:	0003      	movs	r3, r0
 80123f8:	0022      	movs	r2, r4
 80123fa:	3308      	adds	r3, #8
 80123fc:	3208      	adds	r2, #8
 80123fe:	6811      	ldr	r1, [r2, #0]
 8012400:	6019      	str	r1, [r3, #0]
 8012402:	6851      	ldr	r1, [r2, #4]
 8012404:	6059      	str	r1, [r3, #4]
 8012406:	6892      	ldr	r2, [r2, #8]
 8012408:	609a      	str	r2, [r3, #8]
 801240a:	0021      	movs	r1, r4
 801240c:	9802      	ldr	r0, [sp, #8]
 801240e:	f7ff fa2d 	bl	801186c <_free_r>
 8012412:	e76c      	b.n	80122ee <_realloc_r+0x186>
 8012414:	68a3      	ldr	r3, [r4, #8]
 8012416:	6083      	str	r3, [r0, #8]
 8012418:	68e3      	ldr	r3, [r4, #12]
 801241a:	60c3      	str	r3, [r0, #12]
 801241c:	2a24      	cmp	r2, #36	; 0x24
 801241e:	d004      	beq.n	801242a <_realloc_r+0x2c2>
 8012420:	0003      	movs	r3, r0
 8012422:	0022      	movs	r2, r4
 8012424:	3310      	adds	r3, #16
 8012426:	3210      	adds	r2, #16
 8012428:	e7e9      	b.n	80123fe <_realloc_r+0x296>
 801242a:	6923      	ldr	r3, [r4, #16]
 801242c:	0022      	movs	r2, r4
 801242e:	6103      	str	r3, [r0, #16]
 8012430:	0003      	movs	r3, r0
 8012432:	6961      	ldr	r1, [r4, #20]
 8012434:	3318      	adds	r3, #24
 8012436:	3218      	adds	r2, #24
 8012438:	6141      	str	r1, [r0, #20]
 801243a:	e7e0      	b.n	80123fe <_realloc_r+0x296>
 801243c:	0003      	movs	r3, r0
 801243e:	0022      	movs	r2, r4
 8012440:	e7dd      	b.n	80123fe <_realloc_r+0x296>
 8012442:	0021      	movs	r1, r4
 8012444:	f7ff fe7e 	bl	8012144 <memmove>
 8012448:	e7df      	b.n	801240a <_realloc_r+0x2a2>
 801244a:	9e03      	ldr	r6, [sp, #12]
 801244c:	e6ee      	b.n	801222c <_realloc_r+0xc4>
 801244e:	4013      	ands	r3, r2
 8012450:	431e      	orrs	r6, r3
 8012452:	607e      	str	r6, [r7, #4]
 8012454:	6843      	ldr	r3, [r0, #4]
 8012456:	431a      	orrs	r2, r3
 8012458:	6042      	str	r2, [r0, #4]
 801245a:	e6fe      	b.n	801225a <_realloc_r+0xf2>
 801245c:	2000014c 	.word	0x2000014c

08012460 <__ascii_wctomb>:
 8012460:	1e0b      	subs	r3, r1, #0
 8012462:	d004      	beq.n	801246e <__ascii_wctomb+0xe>
 8012464:	2aff      	cmp	r2, #255	; 0xff
 8012466:	d904      	bls.n	8012472 <__ascii_wctomb+0x12>
 8012468:	238a      	movs	r3, #138	; 0x8a
 801246a:	6003      	str	r3, [r0, #0]
 801246c:	3b8b      	subs	r3, #139	; 0x8b
 801246e:	0018      	movs	r0, r3
 8012470:	4770      	bx	lr
 8012472:	700a      	strb	r2, [r1, #0]
 8012474:	2301      	movs	r3, #1
 8012476:	e7fa      	b.n	801246e <__ascii_wctomb+0xe>

08012478 <_init>:
 8012478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801247a:	46c0      	nop			; (mov r8, r8)
 801247c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801247e:	bc08      	pop	{r3}
 8012480:	469e      	mov	lr, r3
 8012482:	4770      	bx	lr

08012484 <_fini>:
 8012484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012486:	46c0      	nop			; (mov r8, r8)
 8012488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801248a:	bc08      	pop	{r3}
 801248c:	469e      	mov	lr, r3
 801248e:	4770      	bx	lr
