
FatFS_G070.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004998  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08004a50  08004a50  00014a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004b48  08004b48  00014b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004b4c  08004b4c  00014b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000518  20000000  08004b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000928  20000518  08005068  00020518  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000e40  08005068  00020e40  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020518  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002210a  00000000  00000000  00020540  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000440a  00000000  00000000  0004264a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000111df  00000000  00000000  00046a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000012d8  00000000  00000000  00057c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001d08  00000000  00000000  00058f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000b848  00000000  00000000  0005ac18  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00007091  00000000  00000000  00066460  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0006d4f1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003dc8  00000000  00000000  0006d570  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000518 	.word	0x20000518
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004a38 	.word	0x08004a38

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000051c 	.word	0x2000051c
 80000fc:	08004a38 	.word	0x08004a38

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			; (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	; 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	; 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	; 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000424:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000426:	2610      	movs	r6, #16
{
 8000428:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042a:	2234      	movs	r2, #52	; 0x34
 800042c:	2100      	movs	r1, #0
 800042e:	a80b      	add	r0, sp, #44	; 0x2c
 8000430:	f004 f9c6 	bl	80047c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000434:	0032      	movs	r2, r6
 8000436:	2100      	movs	r1, #0
 8000438:	4668      	mov	r0, sp
 800043a:	f004 f9c1 	bl	80047c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800043e:	221c      	movs	r2, #28
 8000440:	2100      	movs	r1, #0
 8000442:	a804      	add	r0, sp, #16
 8000444:	f004 f9bc 	bl	80047c0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000448:	2080      	movs	r0, #128	; 0x80
 800044a:	0080      	lsls	r0, r0, #2
 800044c:	f001 fe6c 	bl	8002128 <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000450:	2118      	movs	r1, #24
 8000452:	4a1b      	ldr	r2, [pc, #108]	; (80004c0 <SystemClock_Config+0x9c>)
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000454:	2502      	movs	r5, #2
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000456:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000458:	2400      	movs	r4, #0
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800045a:	438b      	bics	r3, r1
 800045c:	65d3      	str	r3, [r2, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800045e:	2305      	movs	r3, #5
 8000460:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000462:	23a0      	movs	r3, #160	; 0xa0
 8000464:	02db      	lsls	r3, r3, #11
 8000466:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000468:	2301      	movs	r3, #1
 800046a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800046c:	195b      	adds	r3, r3, r5
 800046e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 16;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000470:	2380      	movs	r3, #128	; 0x80
 8000472:	029b      	lsls	r3, r3, #10
 8000474:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000476:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000478:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800047a:	059b      	lsls	r3, r3, #22
 800047c:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047e:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000480:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000482:	9615      	str	r6, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000484:	f001 fe7a 	bl	800217c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000488:	2307      	movs	r3, #7
 800048a:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800048c:	2380      	movs	r3, #128	; 0x80

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800048e:	0029      	movs	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000490:	01db      	lsls	r3, r3, #7
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000492:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000494:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000496:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000498:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800049a:	f002 f8d5 	bl	8002648 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 800049e:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <SystemClock_Config+0xa0>)
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004a0:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 80004a2:	9304      	str	r3, [sp, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80004a4:	2380      	movs	r3, #128	; 0x80
 80004a6:	005b      	lsls	r3, r3, #1
 80004a8:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004aa:	9406      	str	r4, [sp, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80004ac:	9407      	str	r4, [sp, #28]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80004ae:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b0:	f002 f9cc 	bl	800284c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 80004b4:	f002 f9a4 	bl	8002800 <HAL_RCC_EnableCSS>
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableLSECSS();
 80004b8:	f002 f9ac 	bl	8002814 <HAL_RCC_EnableLSECSS>
}
 80004bc:	b018      	add	sp, #96	; 0x60
 80004be:	bd70      	pop	{r4, r5, r6, pc}
 80004c0:	40021000 	.word	0x40021000
 80004c4:	00024042 	.word	0x00024042

080004c8 <main>:
{
 80004c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ca:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 80004cc:	f001 f994 	bl	80017f8 <HAL_Init>
  SystemClock_Config();
 80004d0:	f7ff ffa8 	bl	8000424 <SystemClock_Config>
  BSP_SD_Init();
 80004d4:	f000 faba 	bl	8000a4c <BSP_SD_Init>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d8:	2214      	movs	r2, #20
 80004da:	2100      	movs	r1, #0
 80004dc:	a80d      	add	r0, sp, #52	; 0x34
 80004de:	f004 f96f 	bl	80047c0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	2104      	movs	r1, #4
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004e4:	2620      	movs	r6, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e6:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e8:	4beb      	ldr	r3, [pc, #940]	; (8000898 <main+0x3d0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 80004ea:	48ec      	ldr	r0, [pc, #944]	; (800089c <main+0x3d4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FLASH_CS_Pin|LCD_RST_Pin|LCD_CS_Pin|LCD_WR_Pin 
 80004ee:	4fec      	ldr	r7, [pc, #944]	; (80008a0 <main+0x3d8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f0:	430a      	orrs	r2, r1
 80004f2:	635a      	str	r2, [r3, #52]	; 0x34
 80004f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : SW_USER_Pin */
  GPIO_InitStruct.Pin = SW_USER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f6:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f8:	400a      	ands	r2, r1
 80004fa:	9201      	str	r2, [sp, #4]
 80004fc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000500:	3902      	subs	r1, #2
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000502:	4332      	orrs	r2, r6
 8000504:	635a      	str	r2, [r3, #52]	; 0x34
 8000506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000508:	4032      	ands	r2, r6
 800050a:	9202      	str	r2, [sp, #8]
 800050c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000510:	432a      	orrs	r2, r5
 8000512:	635a      	str	r2, [r3, #52]	; 0x34
 8000514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000516:	402a      	ands	r2, r5
 8000518:	9203      	str	r2, [sp, #12]
 800051a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800051e:	430a      	orrs	r2, r1
 8000520:	635a      	str	r2, [r3, #52]	; 0x34
 8000522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000524:	400a      	ands	r2, r1
 8000526:	9204      	str	r2, [sp, #16]
 8000528:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800052a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800052c:	3106      	adds	r1, #6
 800052e:	430a      	orrs	r2, r1
 8000530:	635a      	str	r2, [r3, #52]	; 0x34
 8000532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOC, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 8000534:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000536:	400b      	ands	r3, r1
 8000538:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 800053a:	31f7      	adds	r1, #247	; 0xf7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800053c:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 800053e:	f001 fd45 	bl	8001fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000542:	20a0      	movs	r0, #160	; 0xa0
 8000544:	0031      	movs	r1, r6
 8000546:	2200      	movs	r2, #0
 8000548:	05c0      	lsls	r0, r0, #23
 800054a:	f001 fd3f 	bl	8001fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, FLASH_CS_Pin|LCD_RST_Pin|LCD_CS_Pin|LCD_WR_Pin 
 800054e:	002a      	movs	r2, r5
 8000550:	0039      	movs	r1, r7
 8000552:	48d4      	ldr	r0, [pc, #848]	; (80008a4 <main+0x3dc>)
 8000554:	f001 fd3a 	bl	8001fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000558:	2180      	movs	r1, #128	; 0x80
 800055a:	20a0      	movs	r0, #160	; 0xa0
 800055c:	002a      	movs	r2, r5
 800055e:	00c9      	lsls	r1, r1, #3
 8000560:	05c0      	lsls	r0, r0, #23
 8000562:	f001 fd33 	bl	8001fcc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SW_USER_Pin;
 8000566:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(SW_USER_GPIO_Port, &GPIO_InitStruct);
 8000568:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pin = SW_USER_Pin;
 800056a:	019b      	lsls	r3, r3, #6
  HAL_GPIO_Init(SW_USER_GPIO_Port, &GPIO_InitStruct);
 800056c:	48cb      	ldr	r0, [pc, #812]	; (800089c <main+0x3d4>)
  GPIO_InitStruct.Pin = SW_USER_Pin;
 800056e:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000570:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000572:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SW_USER_GPIO_Port, &GPIO_InitStruct);
 8000574:	f001 fc0c 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D0_Pin LCD_D1_Pin LCD_D2_Pin LCD_D3_Pin 
                           LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 8000578:	23ff      	movs	r3, #255	; 0xff
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800057a:	a90d      	add	r1, sp, #52	; 0x34
 800057c:	48c7      	ldr	r0, [pc, #796]	; (800089c <main+0x3d4>)
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 800057e:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000586:	f001 fc03 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = LED_Pin|SD_CS_Pin;
 800058a:	2384      	movs	r3, #132	; 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058c:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = LED_Pin|SD_CS_Pin;
 800058e:	00db      	lsls	r3, r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000590:	a90d      	add	r1, sp, #52	; 0x34
 8000592:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LED_Pin|SD_CS_Pin;
 8000594:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059a:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059c:	f001 fbf8 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_DN_Pin KEY_UP_Pin KEY_ENTER_Pin KEY_ESC_Pin */
  GPIO_InitStruct.Pin = KEY_DN_Pin|KEY_UP_Pin|KEY_ENTER_Pin|KEY_ESC_Pin;
 80005a0:	230f      	movs	r3, #15
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a2:	a90d      	add	r1, sp, #52	; 0x34
 80005a4:	48c0      	ldr	r0, [pc, #768]	; (80008a8 <main+0x3e0>)
  GPIO_InitStruct.Pin = KEY_DN_Pin|KEY_UP_Pin|KEY_ENTER_Pin|KEY_ESC_Pin;
 80005a6:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a8:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005aa:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ac:	f001 fbf0 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	015b      	lsls	r3, r3, #5
 80005b4:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005b6:	4bbd      	ldr	r3, [pc, #756]	; (80008ac <main+0x3e4>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b8:	a90d      	add	r1, sp, #52	; 0x34
 80005ba:	48bb      	ldr	r0, [pc, #748]	; (80008a8 <main+0x3e0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005bc:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005be:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c0:	f001 fbe6 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_B_Pin ENC_A_Pin */
  GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 80005c4:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c6:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 80005c8:	009b      	lsls	r3, r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ca:	a90d      	add	r1, sp, #52	; 0x34
 80005cc:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 80005ce:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d0:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d4:	f001 fbdc 	bl	8001d90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FLASH_CS_Pin|LCD_RST_Pin|LCD_CS_Pin|LCD_WR_Pin 
                          |LCD_RD_Pin|LCD_DC_Pin|TOUCH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005d8:	a90d      	add	r1, sp, #52	; 0x34
 80005da:	48b2      	ldr	r0, [pc, #712]	; (80008a4 <main+0x3dc>)
  GPIO_InitStruct.Pin = FLASH_CS_Pin|LCD_RST_Pin|LCD_CS_Pin|LCD_WR_Pin 
 80005dc:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005e4:	f001 fbd4 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 80005e8:	a90d      	add	r1, sp, #52	; 0x34
 80005ea:	48ae      	ldr	r0, [pc, #696]	; (80008a4 <main+0x3dc>)
  GPIO_InitStruct.Pin = SW_Pin;
 80005ec:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ee:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005f0:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 80005f2:	f001 fbcd 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_C_Pin ENC_D_Pin */
  GPIO_InitStruct.Pin = ENC_C_Pin|ENC_D_Pin;
 80005f6:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f8:	a90d      	add	r1, sp, #52	; 0x34
 80005fa:	48ab      	ldr	r0, [pc, #684]	; (80008a8 <main+0x3e0>)
  GPIO_InitStruct.Pin = ENC_C_Pin|ENC_D_Pin;
 80005fc:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005fe:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000602:	f001 fbc5 	bl	8001d90 <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000606:	220c      	movs	r2, #12
 8000608:	0021      	movs	r1, r4
 800060a:	a80d      	add	r0, sp, #52	; 0x34
 800060c:	f004 f8d8 	bl	80047c0 <memset>
  hadc1.Instance = ADC1;
 8000610:	4ea7      	ldr	r6, [pc, #668]	; (80008b0 <main+0x3e8>)
 8000612:	4ba8      	ldr	r3, [pc, #672]	; (80008b4 <main+0x3ec>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000614:	2780      	movs	r7, #128	; 0x80
  hadc1.Instance = ADC1;
 8000616:	6033      	str	r3, [r6, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	039b      	lsls	r3, r3, #14
 800061c:	6133      	str	r3, [r6, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800061e:	2304      	movs	r3, #4
 8000620:	6173      	str	r3, [r6, #20]
  hadc1.Init.NbrOfConversion = 2;
 8000622:	3b02      	subs	r3, #2
 8000624:	61f3      	str	r3, [r6, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000626:	1973      	adds	r3, r6, r5
 8000628:	77dc      	strb	r4, [r3, #31]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062a:	0033      	movs	r3, r6
 800062c:	332c      	adds	r3, #44	; 0x2c
 800062e:	701c      	strb	r4, [r3, #0]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000630:	2307      	movs	r3, #7
 8000632:	6373      	str	r3, [r6, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8000634:	3b01      	subs	r3, #1
 8000636:	63b3      	str	r3, [r6, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000638:	0033      	movs	r3, r6
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800063a:	05ff      	lsls	r7, r7, #23
  hadc1.Init.OversamplingMode = DISABLE;
 800063c:	333c      	adds	r3, #60	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063e:	0030      	movs	r0, r6
  hadc1.Init.OversamplingMode = DISABLE;
 8000640:	701c      	strb	r4, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000642:	6077      	str	r7, [r6, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000644:	60b4      	str	r4, [r6, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000646:	60f4      	str	r4, [r6, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000648:	7634      	strb	r4, [r6, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800064a:	7674      	strb	r4, [r6, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800064c:	76b5      	strb	r5, [r6, #26]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064e:	6274      	str	r4, [r6, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000650:	62b4      	str	r4, [r6, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000652:	6334      	str	r4, [r6, #48]	; 0x30
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000654:	64f4      	str	r4, [r6, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000656:	f001 f90b 	bl	8001870 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065a:	a90d      	add	r1, sp, #52	; 0x34
 800065c:	0030      	movs	r0, r6
  sConfig.Channel = ADC_CHANNEL_0;
 800065e:	950d      	str	r5, [sp, #52]	; 0x34
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000660:	940e      	str	r4, [sp, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000662:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000664:	f001 fa3c 	bl	8001ae0 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 8000668:	4b93      	ldr	r3, [pc, #588]	; (80008b8 <main+0x3f0>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066a:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.Channel = ADC_CHANNEL_1;
 800066c:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800066e:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000670:	0030      	movs	r0, r6
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000672:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000674:	f001 fa34 	bl	8001ae0 <HAL_ADC_ConfigChannel>
  hi2c1.Instance = I2C1;
 8000678:	4e90      	ldr	r6, [pc, #576]	; (80008bc <main+0x3f4>)
 800067a:	4b91      	ldr	r3, [pc, #580]	; (80008c0 <main+0x3f8>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800067c:	0030      	movs	r0, r6
  hi2c1.Instance = I2C1;
 800067e:	6033      	str	r3, [r6, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8000680:	4b90      	ldr	r3, [pc, #576]	; (80008c4 <main+0x3fc>)
  hi2c1.Init.OwnAddress1 = 0;
 8000682:	60b4      	str	r4, [r6, #8]
  hi2c1.Init.Timing = 0x00300F38;
 8000684:	6073      	str	r3, [r6, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000686:	60f5      	str	r5, [r6, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000688:	6134      	str	r4, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800068a:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800068c:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800068e:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000690:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000692:	f001 fca9 	bl	8001fe8 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000696:	0021      	movs	r1, r4
 8000698:	0030      	movs	r0, r6
 800069a:	f001 fcfb 	bl	8002094 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800069e:	0021      	movs	r1, r4
 80006a0:	0030      	movs	r0, r6
 80006a2:	f001 fd1d 	bl	80020e0 <HAL_I2CEx_ConfigDigitalFilter>
  hrtc.Instance = RTC;
 80006a6:	4888      	ldr	r0, [pc, #544]	; (80008c8 <main+0x400>)
 80006a8:	4b88      	ldr	r3, [pc, #544]	; (80008cc <main+0x404>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006aa:	6084      	str	r4, [r0, #8]
  hrtc.Instance = RTC;
 80006ac:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = 127;
 80006ae:	237f      	movs	r3, #127	; 0x7f
 80006b0:	60c3      	str	r3, [r0, #12]
  hrtc.Init.SynchPrediv = 255;
 80006b2:	3380      	adds	r3, #128	; 0x80
 80006b4:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006b6:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006b8:	6184      	str	r4, [r0, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006ba:	61c4      	str	r4, [r0, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006bc:	6207      	str	r7, [r0, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80006be:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006c0:	f002 f9d6 	bl	8002a70 <HAL_RTC_Init>
  hspi1.Instance = SPI1;
 80006c4:	4882      	ldr	r0, [pc, #520]	; (80008d0 <main+0x408>)
 80006c6:	4b83      	ldr	r3, [pc, #524]	; (80008d4 <main+0x40c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c8:	2782      	movs	r7, #130	; 0x82
  hspi1.Instance = SPI1;
 80006ca:	6003      	str	r3, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006cc:	23e0      	movs	r3, #224	; 0xe0
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	60c3      	str	r3, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80006d2:	2308      	movs	r3, #8
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006d4:	2680      	movs	r6, #128	; 0x80
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80006d6:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 80006d8:	3b01      	subs	r3, #1
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006da:	00b6      	lsls	r6, r6, #2
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006dc:	007f      	lsls	r7, r7, #1
  hspi1.Init.CRCPolynomial = 7;
 80006de:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006e0:	195b      	adds	r3, r3, r5
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006e2:	6084      	str	r4, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e4:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e6:	6144      	str	r4, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e8:	6186      	str	r6, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ea:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ec:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ee:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006f0:	6304      	str	r4, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006f2:	6343      	str	r3, [r0, #52]	; 0x34
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006f4:	6047      	str	r7, [r0, #4]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006f6:	f002 fa8d 	bl	8002c14 <HAL_SPI_Init>
  hspi2.Instance = SPI2;
 80006fa:	4877      	ldr	r0, [pc, #476]	; (80008d8 <main+0x410>)
 80006fc:	4b77      	ldr	r3, [pc, #476]	; (80008dc <main+0x414>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006fe:	6084      	str	r4, [r0, #8]
  hspi2.Instance = SPI2;
 8000700:	6003      	str	r3, [r0, #0]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000702:	23e0      	movs	r3, #224	; 0xe0
 8000704:	00db      	lsls	r3, r3, #3
 8000706:	60c3      	str	r3, [r0, #12]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000708:	2308      	movs	r3, #8
 800070a:	61c3      	str	r3, [r0, #28]
  hspi2.Init.CRCPolynomial = 7;
 800070c:	3b01      	subs	r3, #1
 800070e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000710:	195b      	adds	r3, r3, r5
 8000712:	6343      	str	r3, [r0, #52]	; 0x34
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000714:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000716:	6144      	str	r4, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000718:	6186      	str	r6, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800071a:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800071c:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800071e:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000720:	6304      	str	r4, [r0, #48]	; 0x30
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000722:	6047      	str	r7, [r0, #4]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000724:	f002 fa76 	bl	8002c14 <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000728:	0021      	movs	r1, r4
 800072a:	2210      	movs	r2, #16
 800072c:	a809      	add	r0, sp, #36	; 0x24
 800072e:	f004 f847 	bl	80047c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000732:	0021      	movs	r1, r4
 8000734:	220c      	movs	r2, #12
 8000736:	a806      	add	r0, sp, #24
 8000738:	f004 f842 	bl	80047c0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800073c:	221c      	movs	r2, #28
 800073e:	0021      	movs	r1, r4
 8000740:	a80d      	add	r0, sp, #52	; 0x34
 8000742:	f004 f83d 	bl	80047c0 <memset>
  htim3.Instance = TIM3;
 8000746:	4e66      	ldr	r6, [pc, #408]	; (80008e0 <main+0x418>)
 8000748:	4b66      	ldr	r3, [pc, #408]	; (80008e4 <main+0x41c>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800074a:	0030      	movs	r0, r6
  htim3.Instance = TIM3;
 800074c:	6033      	str	r3, [r6, #0]
  htim3.Init.Period = 4095;
 800074e:	4b66      	ldr	r3, [pc, #408]	; (80008e8 <main+0x420>)
  htim3.Init.Prescaler = 1;
 8000750:	6075      	str	r5, [r6, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000752:	60b4      	str	r4, [r6, #8]
  htim3.Init.Period = 4095;
 8000754:	60f3      	str	r3, [r6, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000756:	6134      	str	r4, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000758:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800075a:	f002 fe53 	bl	8003404 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800075e:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000760:	a909      	add	r1, sp, #36	; 0x24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000762:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000764:	0030      	movs	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000766:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000768:	f003 f83c 	bl	80037e4 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800076c:	0030      	movs	r0, r6
 800076e:	f002 fe64 	bl	800343a <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000772:	a906      	add	r1, sp, #24
 8000774:	0030      	movs	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000776:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000778:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800077a:	f003 f8c9 	bl	8003910 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800077e:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000780:	0022      	movs	r2, r4
 8000782:	a90d      	add	r1, sp, #52	; 0x34
 8000784:	0030      	movs	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000786:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000788:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800078a:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800078c:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800078e:	f002 fecb 	bl	8003528 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000792:	2204      	movs	r2, #4
 8000794:	a90d      	add	r1, sp, #52	; 0x34
 8000796:	0030      	movs	r0, r6
 8000798:	f002 fec6 	bl	8003528 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 800079c:	0030      	movs	r0, r6
 800079e:	f000 fe5f 	bl	8001460 <HAL_TIM_MspPostInit>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007a2:	0021      	movs	r1, r4
 80007a4:	2210      	movs	r2, #16
 80007a6:	a80d      	add	r0, sp, #52	; 0x34
 80007a8:	f004 f80a 	bl	80047c0 <memset>
  htim14.Instance = TIM14;
 80007ac:	4e4f      	ldr	r6, [pc, #316]	; (80008ec <main+0x424>)
 80007ae:	4b50      	ldr	r3, [pc, #320]	; (80008f0 <main+0x428>)
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80007b0:	0030      	movs	r0, r6
  htim14.Instance = TIM14;
 80007b2:	6033      	str	r3, [r6, #0]
  htim14.Init.Prescaler = 0;
 80007b4:	6074      	str	r4, [r6, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b6:	60b4      	str	r4, [r6, #8]
  htim14.Init.Period = 0;
 80007b8:	60f4      	str	r4, [r6, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ba:	6134      	str	r4, [r6, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007bc:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80007be:	f002 fe21 	bl	8003404 <HAL_TIM_Base_Init>
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 80007c2:	0030      	movs	r0, r6
 80007c4:	f002 fe54 	bl	8003470 <HAL_TIM_IC_Init>
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007c8:	0022      	movs	r2, r4
 80007ca:	a90d      	add	r1, sp, #52	; 0x34
 80007cc:	0030      	movs	r0, r6
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007ce:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007d0:	950e      	str	r5, [sp, #56]	; 0x38
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007d2:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigIC.ICFilter = 0;
 80007d4:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007d6:	f002 ff5b 	bl	8003690 <HAL_TIM_IC_ConfigChannel>
  huart2.Instance = USART2;
 80007da:	4d46      	ldr	r5, [pc, #280]	; (80008f4 <main+0x42c>)
 80007dc:	4b46      	ldr	r3, [pc, #280]	; (80008f8 <main+0x430>)
  huart2.Init.BaudRate = 115200;
 80007de:	26e1      	movs	r6, #225	; 0xe1
  huart2.Instance = USART2;
 80007e0:	602b      	str	r3, [r5, #0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e2:	230c      	movs	r3, #12
  huart2.Init.BaudRate = 115200;
 80007e4:	0276      	lsls	r6, r6, #9
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e6:	0028      	movs	r0, r5
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e8:	616b      	str	r3, [r5, #20]
  huart2.Init.BaudRate = 115200;
 80007ea:	606e      	str	r6, [r5, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ec:	60ac      	str	r4, [r5, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ee:	60ec      	str	r4, [r5, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f0:	612c      	str	r4, [r5, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	61ec      	str	r4, [r5, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f6:	622c      	str	r4, [r5, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007f8:	626c      	str	r4, [r5, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007fa:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fc:	f003 fbf2 	bl	8003fe4 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000800:	0021      	movs	r1, r4
 8000802:	0028      	movs	r0, r5
 8000804:	f003 fc7e 	bl	8004104 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000808:	0021      	movs	r1, r4
 800080a:	0028      	movs	r0, r5
 800080c:	f003 fc9c 	bl	8004148 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8000810:	0028      	movs	r0, r5
 8000812:	f003 fc59 	bl	80040c8 <HAL_UARTEx_EnableFifoMode>
  huart3.Instance = USART3;
 8000816:	4839      	ldr	r0, [pc, #228]	; (80008fc <main+0x434>)
 8000818:	4b39      	ldr	r3, [pc, #228]	; (8000900 <main+0x438>)
  huart3.Init.BaudRate = 115200;
 800081a:	6046      	str	r6, [r0, #4]
  huart3.Instance = USART3;
 800081c:	6003      	str	r3, [r0, #0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800081e:	230c      	movs	r3, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000820:	6084      	str	r4, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000822:	6143      	str	r3, [r0, #20]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000824:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000826:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000828:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800082a:	61c4      	str	r4, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082c:	6204      	str	r4, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800082e:	6244      	str	r4, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000830:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000832:	f003 fbd7 	bl	8003fe4 <HAL_UART_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000836:	f003 fcab 	bl	8004190 <MX_FATFS_Init>
  sprintf(buffer, "STM32G070 FatFs - INIC OK\n\r");
 800083a:	4c32      	ldr	r4, [pc, #200]	; (8000904 <main+0x43c>)
 800083c:	4932      	ldr	r1, [pc, #200]	; (8000908 <main+0x440>)
 800083e:	0020      	movs	r0, r4
 8000840:	f003 ffe8 	bl	8004814 <strcpy>
  HAL_UART_Transmit(&huart2, (uint8_t *)&buffer, strlen(buffer), 0xFFFF);
 8000844:	0020      	movs	r0, r4
 8000846:	f7ff fc5b 	bl	8000100 <strlen>
	    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800084a:	26a0      	movs	r6, #160	; 0xa0
  HAL_UART_Transmit(&huart2, (uint8_t *)&buffer, strlen(buffer), 0xFFFF);
 800084c:	b282      	uxth	r2, r0
 800084e:	4b2f      	ldr	r3, [pc, #188]	; (800090c <main+0x444>)
 8000850:	0021      	movs	r1, r4
 8000852:	0028      	movs	r0, r5
 8000854:	f003 fb26 	bl	8003ea4 <HAL_UART_Transmit>
	    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000858:	05f6      	lsls	r6, r6, #23
	    ProcessStatus = MX_FATFS_Process();
 800085a:	f003 fcad 	bl	80041b8 <MX_FATFS_Process>
 800085e:	4b2c      	ldr	r3, [pc, #176]	; (8000910 <main+0x448>)
	      sprintf(buffer, "STM32G070 FatFs ProcessStatus Error...\n\r");
 8000860:	492c      	ldr	r1, [pc, #176]	; (8000914 <main+0x44c>)
	    ProcessStatus = MX_FATFS_Process();
 8000862:	6018      	str	r0, [r3, #0]
	    if (ProcessStatus == APP_ERROR)
 8000864:	1c43      	adds	r3, r0, #1
 8000866:	d002      	beq.n	800086e <main+0x3a6>
	    else if (ProcessStatus == APP_OK)
 8000868:	2800      	cmp	r0, #0
 800086a:	d10c      	bne.n	8000886 <main+0x3be>
	      sprintf(buffer, "STM32G070 FatFs - ProcessStatus OK...\n\r");
 800086c:	492a      	ldr	r1, [pc, #168]	; (8000918 <main+0x450>)
 800086e:	0020      	movs	r0, r4
 8000870:	f003 ffd0 	bl	8004814 <strcpy>
	      HAL_UART_Transmit(&huart2, (uint8_t *)&buffer, strlen(buffer), 0xFFFF);
 8000874:	0020      	movs	r0, r4
 8000876:	f7ff fc43 	bl	8000100 <strlen>
 800087a:	4b24      	ldr	r3, [pc, #144]	; (800090c <main+0x444>)
 800087c:	b282      	uxth	r2, r0
 800087e:	0021      	movs	r1, r4
 8000880:	0028      	movs	r0, r5
 8000882:	f003 fb0f 	bl	8003ea4 <HAL_UART_Transmit>
	    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000886:	0030      	movs	r0, r6
 8000888:	2120      	movs	r1, #32
 800088a:	f001 fba5 	bl	8001fd8 <HAL_GPIO_TogglePin>
	    HAL_Delay(10);
 800088e:	200a      	movs	r0, #10
 8000890:	f000 ffd8 	bl	8001844 <HAL_Delay>
	    ProcessStatus = MX_FATFS_Process();
 8000894:	e7e1      	b.n	800085a <main+0x392>
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	40021000 	.word	0x40021000
 800089c:	50000800 	.word	0x50000800
 80008a0:	0000025f 	.word	0x0000025f
 80008a4:	50000c00 	.word	0x50000c00
 80008a8:	50000400 	.word	0x50000400
 80008ac:	10110000 	.word	0x10110000
 80008b0:	200007c8 	.word	0x200007c8
 80008b4:	40012400 	.word	0x40012400
 80008b8:	04000002 	.word	0x04000002
 80008bc:	2000073c 	.word	0x2000073c
 80008c0:	40005400 	.word	0x40005400
 80008c4:	00300f38 	.word	0x00300f38
 80008c8:	2000082c 	.word	0x2000082c
 80008cc:	40002800 	.word	0x40002800
 80008d0:	20000858 	.word	0x20000858
 80008d4:	40013000 	.word	0x40013000
 80008d8:	2000064c 	.word	0x2000064c
 80008dc:	40003800 	.word	0x40003800
 80008e0:	20000788 	.word	0x20000788
 80008e4:	40000400 	.word	0x40000400
 80008e8:	00000fff 	.word	0x00000fff
 80008ec:	20000948 	.word	0x20000948
 80008f0:	40002000 	.word	0x40002000
 80008f4:	200008bc 	.word	0x200008bc
 80008f8:	40004400 	.word	0x40004400
 80008fc:	200006b0 	.word	0x200006b0
 8000900:	40004800 	.word	0x40004800
 8000904:	20000538 	.word	0x20000538
 8000908:	08004a50 	.word	0x08004a50
 800090c:	0000ffff 	.word	0x0000ffff
 8000910:	20000534 	.word	0x20000534
 8000914:	08004a6c 	.word	0x08004a6c
 8000918:	08004a95 	.word	0x08004a95

0800091c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800091c:	4b03      	ldr	r3, [pc, #12]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x10>)
 800091e:	6802      	ldr	r2, [r0, #0]
{
 8000920:	b510      	push	{r4, lr}
  if (htim->Instance == TIM6) {
 8000922:	429a      	cmp	r2, r3
 8000924:	d101      	bne.n	800092a <HAL_TIM_PeriodElapsedCallback+0xe>
    HAL_IncTick();
 8000926:	f000 ff7b 	bl	8001820 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092a:	bd10      	pop	{r4, pc}
 800092c:	40001000 	.word	0x40001000

08000930 <SD_ReadData>:
  * @brief  Waits a data until a value different from SD_DUMMY_BITE
  * @param  None
  * @retval the value read
  */
uint8_t SD_ReadData(void)
{
 8000930:	b510      	push	{r4, lr}
 8000932:	2408      	movs	r4, #8
  uint8_t timeout = 0x08;
  uint8_t readvalue;

  /* Check if response is got or a timeout is happen */
  do {
    readvalue = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000934:	20ff      	movs	r0, #255	; 0xff
 8000936:	f000 fee8 	bl	800170a <SD_IO_WriteByte>
    timeout--;

  }while ((readvalue == SD_DUMMY_BYTE) && timeout);
 800093a:	28ff      	cmp	r0, #255	; 0xff
 800093c:	d103      	bne.n	8000946 <SD_ReadData+0x16>
 800093e:	3c01      	subs	r4, #1
 8000940:	b2e4      	uxtb	r4, r4
 8000942:	2c00      	cmp	r4, #0
 8000944:	d1f6      	bne.n	8000934 <SD_ReadData+0x4>

  /* Right response got */
  return readvalue;
}
 8000946:	bd10      	pop	{r4, pc}

08000948 <SD_SendCmd>:
{
 8000948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094a:	b087      	sub	sp, #28
 800094c:	0004      	movs	r4, r0
 800094e:	a80c      	add	r0, sp, #48	; 0x30
 8000950:	7805      	ldrb	r5, [r0, #0]
  frame[0] = (Cmd | 0x40);         /* Construct byte 1 */
 8000952:	2040      	movs	r0, #64	; 0x40
 8000954:	4301      	orrs	r1, r0
 8000956:	a802      	add	r0, sp, #8
 8000958:	7001      	strb	r1, [r0, #0]
  frame[1] = (uint8_t)(Arg >> 24); /* Construct byte 2 */
 800095a:	0e11      	lsrs	r1, r2, #24
 800095c:	7041      	strb	r1, [r0, #1]
  frame[2] = (uint8_t)(Arg >> 16); /* Construct byte 3 */
 800095e:	0c11      	lsrs	r1, r2, #16
 8000960:	7081      	strb	r1, [r0, #2]
  frame[4] = (uint8_t)(Arg);       /* Construct byte 5 */
 8000962:	7102      	strb	r2, [r0, #4]
  frame[3] = (uint8_t)(Arg >> 8);  /* Construct byte 4 */
 8000964:	0a11      	lsrs	r1, r2, #8
  frame[5] = (Crc | 0x01);         /* Construct byte 6 */
 8000966:	2201      	movs	r2, #1
 8000968:	4313      	orrs	r3, r2
  frame[3] = (uint8_t)(Arg >> 8);  /* Construct byte 4 */
 800096a:	70c1      	strb	r1, [r0, #3]
  frame[5] = (Crc | 0x01);         /* Construct byte 6 */
 800096c:	7143      	strb	r3, [r0, #5]
  SD_IO_CSState(0);
 800096e:	2000      	movs	r0, #0
 8000970:	f000 feba 	bl	80016e8 <SD_IO_CSState>
  SD_IO_WriteReadData(frame, frameout, SD_CMD_LENGTH); /* Send the Cmd bytes */
 8000974:	2206      	movs	r2, #6
 8000976:	a904      	add	r1, sp, #16
 8000978:	a802      	add	r0, sp, #8
 800097a:	f000 fec2 	bl	8001702 <SD_IO_WriteReadData>
  switch(Answer)
 800097e:	2d05      	cmp	r5, #5
 8000980:	d84a      	bhi.n	8000a18 <SD_SendCmd+0xd0>
 8000982:	0028      	movs	r0, r5
 8000984:	f7ff fbc4 	bl	8000110 <__gnu_thumb1_case_uqi>
 8000988:	352c1403 	.word	0x352c1403
 800098c:	3548      	.short	0x3548
    retr.r1 = SD_ReadData();
 800098e:	f7ff ffcf 	bl	8000930 <SD_ReadData>
 8000992:	0007      	movs	r7, r0
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 8000994:	20ff      	movs	r0, #255	; 0xff
 8000996:	0005      	movs	r5, r0
 8000998:	0006      	movs	r6, r0
 800099a:	9001      	str	r0, [sp, #4]
  return retr;
 800099c:	466b      	mov	r3, sp
 800099e:	7120      	strb	r0, [r4, #4]
}
 80009a0:	0020      	movs	r0, r4
  return retr;
 80009a2:	791b      	ldrb	r3, [r3, #4]
 80009a4:	7027      	strb	r7, [r4, #0]
 80009a6:	7066      	strb	r6, [r4, #1]
 80009a8:	70a5      	strb	r5, [r4, #2]
 80009aa:	70e3      	strb	r3, [r4, #3]
}
 80009ac:	b007      	add	sp, #28
 80009ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    retr.r1 = SD_ReadData();
 80009b0:	f7ff ffbe 	bl	8000930 <SD_ReadData>
 80009b4:	0007      	movs	r7, r0
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80009b6:	20ff      	movs	r0, #255	; 0xff
 80009b8:	f000 fea7 	bl	800170a <SD_IO_WriteByte>
 80009bc:	0006      	movs	r6, r0
    SD_IO_CSState(1);
 80009be:	2001      	movs	r0, #1
 80009c0:	f000 fe92 	bl	80016e8 <SD_IO_CSState>
    HAL_Delay(1);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f000 ff3d 	bl	8001844 <HAL_Delay>
    SD_IO_CSState(0);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f000 fe8c 	bl	80016e8 <SD_IO_CSState>
    while (SD_IO_WriteByte(SD_DUMMY_BYTE) != 0xFF);
 80009d0:	20ff      	movs	r0, #255	; 0xff
 80009d2:	f000 fe9a 	bl	800170a <SD_IO_WriteByte>
 80009d6:	28ff      	cmp	r0, #255	; 0xff
 80009d8:	d1fa      	bne.n	80009d0 <SD_SendCmd+0x88>
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 80009da:	9001      	str	r0, [sp, #4]
 80009dc:	0005      	movs	r5, r0
    break;
 80009de:	e7dd      	b.n	800099c <SD_SendCmd+0x54>
    retr.r1 = SD_ReadData();
 80009e0:	f7ff ffa6 	bl	8000930 <SD_ReadData>
 80009e4:	0007      	movs	r7, r0
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80009e6:	20ff      	movs	r0, #255	; 0xff
 80009e8:	f000 fe8f 	bl	800170a <SD_IO_WriteByte>
 80009ec:	0006      	movs	r6, r0
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 80009ee:	20ff      	movs	r0, #255	; 0xff
 80009f0:	e7f3      	b.n	80009da <SD_SendCmd+0x92>
    retr.r1 = SD_ReadData();
 80009f2:	f7ff ff9d 	bl	8000930 <SD_ReadData>
 80009f6:	0007      	movs	r7, r0
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80009f8:	20ff      	movs	r0, #255	; 0xff
 80009fa:	f000 fe86 	bl	800170a <SD_IO_WriteByte>
 80009fe:	0006      	movs	r6, r0
    retr.r3 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000a00:	20ff      	movs	r0, #255	; 0xff
 8000a02:	f000 fe82 	bl	800170a <SD_IO_WriteByte>
 8000a06:	0005      	movs	r5, r0
    retr.r4 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000a08:	20ff      	movs	r0, #255	; 0xff
 8000a0a:	f000 fe7e 	bl	800170a <SD_IO_WriteByte>
 8000a0e:	9001      	str	r0, [sp, #4]
    retr.r5 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000a10:	20ff      	movs	r0, #255	; 0xff
 8000a12:	f000 fe7a 	bl	800170a <SD_IO_WriteByte>
    break;
 8000a16:	e7c1      	b.n	800099c <SD_SendCmd+0x54>
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 8000a18:	20ff      	movs	r0, #255	; 0xff
 8000a1a:	9001      	str	r0, [sp, #4]
 8000a1c:	0005      	movs	r5, r0
 8000a1e:	0006      	movs	r6, r0
 8000a20:	0007      	movs	r7, r0
 8000a22:	e7bb      	b.n	800099c <SD_SendCmd+0x54>

08000a24 <SD_WaitData.constprop.0>:
/**
  * @brief  Waits a data from the SD card
  * @param  data : Expected data from the SD card
  * @retval BSP_SD_OK or BSP_SD_TIMEOUT
  */
uint8_t SD_WaitData(uint8_t data)
 8000a24:	b510      	push	{r4, lr}
{
  uint16_t timeout = 0xFFFF;
 8000a26:	4c08      	ldr	r4, [pc, #32]	; (8000a48 <SD_WaitData.constprop.0+0x24>)
  uint8_t readvalue;

  /* Check if response is got or a timeout is happen */

  do {
    readvalue = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000a28:	20ff      	movs	r0, #255	; 0xff
 8000a2a:	f000 fe6e 	bl	800170a <SD_IO_WriteByte>
    timeout--;
 8000a2e:	3c01      	subs	r4, #1
 8000a30:	b2a4      	uxth	r4, r4
  }while ((readvalue != data) && timeout);
 8000a32:	28fe      	cmp	r0, #254	; 0xfe
 8000a34:	d003      	beq.n	8000a3e <SD_WaitData.constprop.0+0x1a>
 8000a36:	2c00      	cmp	r4, #0
 8000a38:	d1f6      	bne.n	8000a28 <SD_WaitData.constprop.0+0x4>

  if (timeout == 0)
  {
    /* After time out */
    return BSP_SD_TIMEOUT;
 8000a3a:	2002      	movs	r0, #2
  }

  /* Right response got */
  return BSP_SD_OK;
}
 8000a3c:	bd10      	pop	{r4, pc}
  return BSP_SD_OK;
 8000a3e:	4260      	negs	r0, r4
 8000a40:	4160      	adcs	r0, r4
 8000a42:	0040      	lsls	r0, r0, #1
 8000a44:	e7fa      	b.n	8000a3c <SD_WaitData.constprop.0+0x18>
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	0000ffff 	.word	0x0000ffff

08000a4c <BSP_SD_Init>:
{
 8000a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a4e:	b089      	sub	sp, #36	; 0x24
  SD_IO_Init();
 8000a50:	f000 fe6a 	bl	8001728 <SD_IO_Init>
  SdStatus = SD_PRESENT;
 8000a54:	2201      	movs	r2, #1
  __IO uint8_t counter = 0;
 8000a56:	250f      	movs	r5, #15
  SdStatus = SD_PRESENT;
 8000a58:	4b5b      	ldr	r3, [pc, #364]	; (8000bc8 <BSP_SD_Init+0x17c>)
 8000a5a:	701a      	strb	r2, [r3, #0]
  __IO uint8_t counter = 0;
 8000a5c:	ab02      	add	r3, sp, #8
 8000a5e:	18ed      	adds	r5, r5, r3
 8000a60:	2300      	movs	r3, #0
 8000a62:	702b      	strb	r3, [r5, #0]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8000a64:	2100      	movs	r1, #0
    counter++;
 8000a66:	782b      	ldrb	r3, [r5, #0]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8000a68:	ac06      	add	r4, sp, #24
    counter++;
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	702b      	strb	r3, [r5, #0]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8000a70:	000a      	movs	r2, r1
 8000a72:	2395      	movs	r3, #149	; 0x95
 8000a74:	9100      	str	r1, [sp, #0]
 8000a76:	0020      	movs	r0, r4
 8000a78:	f7ff ff66 	bl	8000948 <SD_SendCmd>
    SD_IO_CSState(1);
 8000a7c:	2001      	movs	r0, #1
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8000a7e:	7827      	ldrb	r7, [r4, #0]
    SD_IO_CSState(1);
 8000a80:	f000 fe32 	bl	80016e8 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000a84:	20ff      	movs	r0, #255	; 0xff
 8000a86:	f000 fe40 	bl	800170a <SD_IO_WriteByte>
    if(counter >= SD_MAX_TRY)
 8000a8a:	782b      	ldrb	r3, [r5, #0]
 8000a8c:	2b63      	cmp	r3, #99	; 0x63
 8000a8e:	d903      	bls.n	8000a98 <BSP_SD_Init+0x4c>
      return BSP_SD_ERROR;
 8000a90:	2501      	movs	r5, #1
}
 8000a92:	0028      	movs	r0, r5
 8000a94:	b009      	add	sp, #36	; 0x24
 8000a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while(response.r1 != SD_R1_IN_IDLE_STATE);
 8000a98:	2f01      	cmp	r7, #1
 8000a9a:	d1e3      	bne.n	8000a64 <BSP_SD_Init+0x18>
  response = SD_SendCmd(SD_CMD_SEND_IF_COND, 0x1AA, 0x87, SD_ANSWER_R7_EXPECTED);
 8000a9c:	2305      	movs	r3, #5
 8000a9e:	22d5      	movs	r2, #213	; 0xd5
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	0052      	lsls	r2, r2, #1
 8000aa4:	3382      	adds	r3, #130	; 0x82
 8000aa6:	2108      	movs	r1, #8
 8000aa8:	0020      	movs	r0, r4
 8000aaa:	f7ff ff4d 	bl	8000948 <SD_SendCmd>
 8000aae:	7825      	ldrb	r5, [r4, #0]
  SD_IO_CSState(1);
 8000ab0:	0038      	movs	r0, r7
 8000ab2:	f000 fe19 	bl	80016e8 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000ab6:	20ff      	movs	r0, #255	; 0xff
 8000ab8:	f000 fe27 	bl	800170a <SD_IO_WriteByte>
  if((response.r1  & SD_R1_ILLEGAL_COMMAND) == SD_R1_ILLEGAL_COMMAND)
 8000abc:	076b      	lsls	r3, r5, #29
 8000abe:	d523      	bpl.n	8000b08 <BSP_SD_Init+0xbc>
      response = SD_SendCmd(SD_CMD_APP_CMD, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000ac0:	26ff      	movs	r6, #255	; 0xff
 8000ac2:	2500      	movs	r5, #0
 8000ac4:	0033      	movs	r3, r6
 8000ac6:	002a      	movs	r2, r5
 8000ac8:	2137      	movs	r1, #55	; 0x37
 8000aca:	0020      	movs	r0, r4
 8000acc:	9500      	str	r5, [sp, #0]
 8000ace:	f7ff ff3b 	bl	8000948 <SD_SendCmd>
      SD_IO_CSState(1);
 8000ad2:	0038      	movs	r0, r7
 8000ad4:	f000 fe08 	bl	80016e8 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000ad8:	0030      	movs	r0, r6
 8000ada:	f000 fe16 	bl	800170a <SD_IO_WriteByte>
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000ade:	002a      	movs	r2, r5
 8000ae0:	2129      	movs	r1, #41	; 0x29
 8000ae2:	0033      	movs	r3, r6
 8000ae4:	0020      	movs	r0, r4
 8000ae6:	9500      	str	r5, [sp, #0]
 8000ae8:	f7ff ff2e 	bl	8000948 <SD_SendCmd>
 8000aec:	7823      	ldrb	r3, [r4, #0]
      SD_IO_CSState(1);
 8000aee:	0038      	movs	r0, r7
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000af0:	9303      	str	r3, [sp, #12]
      SD_IO_CSState(1);
 8000af2:	f000 fdf9 	bl	80016e8 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000af6:	0030      	movs	r0, r6
 8000af8:	f000 fe07 	bl	800170a <SD_IO_WriteByte>
    while(response.r1 == SD_R1_IN_IDLE_STATE);
 8000afc:	9b03      	ldr	r3, [sp, #12]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d0df      	beq.n	8000ac2 <BSP_SD_Init+0x76>
    flag_SDHC = 0;
 8000b02:	4b32      	ldr	r3, [pc, #200]	; (8000bcc <BSP_SD_Init+0x180>)
 8000b04:	801d      	strh	r5, [r3, #0]
 8000b06:	e7c4      	b.n	8000a92 <BSP_SD_Init+0x46>
  else if(response.r1 == SD_R1_IN_IDLE_STATE)
 8000b08:	2d01      	cmp	r5, #1
 8000b0a:	d1c1      	bne.n	8000a90 <BSP_SD_Init+0x44>
      response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000b0c:	27ff      	movs	r7, #255	; 0xff
 8000b0e:	2600      	movs	r6, #0
 8000b10:	003b      	movs	r3, r7
 8000b12:	0032      	movs	r2, r6
 8000b14:	2137      	movs	r1, #55	; 0x37
 8000b16:	9600      	str	r6, [sp, #0]
 8000b18:	0020      	movs	r0, r4
 8000b1a:	f7ff ff15 	bl	8000948 <SD_SendCmd>
      SD_IO_CSState(1);
 8000b1e:	0028      	movs	r0, r5
 8000b20:	f000 fde2 	bl	80016e8 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000b24:	0038      	movs	r0, r7
 8000b26:	f000 fdf0 	bl	800170a <SD_IO_WriteByte>
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x40000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000b2a:	2280      	movs	r2, #128	; 0x80
 8000b2c:	9600      	str	r6, [sp, #0]
 8000b2e:	003b      	movs	r3, r7
 8000b30:	05d2      	lsls	r2, r2, #23
 8000b32:	2129      	movs	r1, #41	; 0x29
 8000b34:	0020      	movs	r0, r4
 8000b36:	f7ff ff07 	bl	8000948 <SD_SendCmd>
 8000b3a:	7826      	ldrb	r6, [r4, #0]
      SD_IO_CSState(1);
 8000b3c:	0028      	movs	r0, r5
 8000b3e:	f000 fdd3 	bl	80016e8 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000b42:	0038      	movs	r0, r7
 8000b44:	f000 fde1 	bl	800170a <SD_IO_WriteByte>
    while(response.r1 == SD_R1_IN_IDLE_STATE);
 8000b48:	2e01      	cmp	r6, #1
 8000b4a:	d0e0      	beq.n	8000b0e <BSP_SD_Init+0xc2>
        response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000b4c:	25ff      	movs	r5, #255	; 0xff
    if((response.r1 & SD_R1_ILLEGAL_COMMAND) == SD_R1_ILLEGAL_COMMAND)
 8000b4e:	0773      	lsls	r3, r6, #29
 8000b50:	d417      	bmi.n	8000b82 <BSP_SD_Init+0x136>
    response = SD_SendCmd(SD_CMD_READ_OCR, 0x00000000, 0xFF, SD_ANSWER_R3_EXPECTED);
 8000b52:	2303      	movs	r3, #3
 8000b54:	2200      	movs	r2, #0
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	213a      	movs	r1, #58	; 0x3a
 8000b5a:	33fc      	adds	r3, #252	; 0xfc
 8000b5c:	0020      	movs	r0, r4
 8000b5e:	f7ff fef3 	bl	8000948 <SD_SendCmd>
 8000b62:	7825      	ldrb	r5, [r4, #0]
    SD_IO_CSState(1);
 8000b64:	2001      	movs	r0, #1
 8000b66:	f000 fdbf 	bl	80016e8 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000b6a:	20ff      	movs	r0, #255	; 0xff
 8000b6c:	f000 fdcd 	bl	800170a <SD_IO_WriteByte>
    if(response.r1 != SD_R1_NO_ERROR)
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d000      	beq.n	8000b76 <BSP_SD_Init+0x12a>
 8000b74:	e78c      	b.n	8000a90 <BSP_SD_Init+0x44>
    flag_SDHC = (response.r2 & 0x40) >> 6;
 8000b76:	7863      	ldrb	r3, [r4, #1]
 8000b78:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <BSP_SD_Init+0x180>)
 8000b7a:	065b      	lsls	r3, r3, #25
 8000b7c:	0fdb      	lsrs	r3, r3, #31
 8000b7e:	8013      	strh	r3, [r2, #0]
 8000b80:	e787      	b.n	8000a92 <BSP_SD_Init+0x46>
        response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000b82:	2600      	movs	r6, #0
 8000b84:	002b      	movs	r3, r5
 8000b86:	0032      	movs	r2, r6
 8000b88:	2137      	movs	r1, #55	; 0x37
 8000b8a:	0020      	movs	r0, r4
 8000b8c:	9600      	str	r6, [sp, #0]
 8000b8e:	f7ff fedb 	bl	8000948 <SD_SendCmd>
 8000b92:	7827      	ldrb	r7, [r4, #0]
        SD_IO_CSState(1);
 8000b94:	2001      	movs	r0, #1
 8000b96:	f000 fda7 	bl	80016e8 <SD_IO_CSState>
        SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000b9a:	0028      	movs	r0, r5
 8000b9c:	f000 fdb5 	bl	800170a <SD_IO_WriteByte>
        if(response.r1 != SD_R1_IN_IDLE_STATE)
 8000ba0:	2f01      	cmp	r7, #1
 8000ba2:	d000      	beq.n	8000ba6 <BSP_SD_Init+0x15a>
 8000ba4:	e774      	b.n	8000a90 <BSP_SD_Init+0x44>
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000ba6:	0032      	movs	r2, r6
 8000ba8:	9600      	str	r6, [sp, #0]
 8000baa:	002b      	movs	r3, r5
 8000bac:	2129      	movs	r1, #41	; 0x29
 8000bae:	0020      	movs	r0, r4
 8000bb0:	f7ff feca 	bl	8000948 <SD_SendCmd>
 8000bb4:	7826      	ldrb	r6, [r4, #0]
        SD_IO_CSState(1);
 8000bb6:	0038      	movs	r0, r7
 8000bb8:	f000 fd96 	bl	80016e8 <SD_IO_CSState>
        SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000bbc:	0028      	movs	r0, r5
 8000bbe:	f000 fda4 	bl	800170a <SD_IO_WriteByte>
      while(response.r1 == SD_R1_IN_IDLE_STATE);
 8000bc2:	2e01      	cmp	r6, #1
 8000bc4:	d0dd      	beq.n	8000b82 <BSP_SD_Init+0x136>
 8000bc6:	e7c4      	b.n	8000b52 <BSP_SD_Init+0x106>
 8000bc8:	2000059c 	.word	0x2000059c
 8000bcc:	2000059e 	.word	0x2000059e

08000bd0 <BSP_SD_GetCardInfo>:
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000bd0:	2200      	movs	r2, #0
{
 8000bd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd4:	b08b      	sub	sp, #44	; 0x2c
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000bd6:	ad04      	add	r5, sp, #16
 8000bd8:	23ff      	movs	r3, #255	; 0xff
{
 8000bda:	0004      	movs	r4, r0
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000bdc:	9200      	str	r2, [sp, #0]
 8000bde:	2109      	movs	r1, #9
 8000be0:	0028      	movs	r0, r5
 8000be2:	f7ff feb1 	bl	8000948 <SD_SendCmd>
  if(response.r1 == SD_R1_NO_ERROR)
 8000be6:	782b      	ldrb	r3, [r5, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d030      	beq.n	8000c4e <BSP_SD_GetCardInfo+0x7e>
  uint8_t retr = BSP_SD_ERROR;
 8000bec:	2301      	movs	r3, #1
 8000bee:	9303      	str	r3, [sp, #12]
  SD_IO_CSState(1);
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f000 fd79 	bl	80016e8 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000bf6:	20ff      	movs	r0, #255	; 0xff
 8000bf8:	f000 fd87 	bl	800170a <SD_IO_WriteByte>
  response = SD_SendCmd(SD_CMD_SEND_CID, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	ad04      	add	r5, sp, #16
 8000c00:	23ff      	movs	r3, #255	; 0xff
 8000c02:	9200      	str	r2, [sp, #0]
 8000c04:	210a      	movs	r1, #10
 8000c06:	0028      	movs	r0, r5
 8000c08:	f7ff fe9e 	bl	8000948 <SD_SendCmd>
  if(response.r1 == SD_R1_NO_ERROR)
 8000c0c:	782b      	ldrb	r3, [r5, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d100      	bne.n	8000c14 <BSP_SD_GetCardInfo+0x44>
 8000c12:	e12b      	b.n	8000e6c <BSP_SD_GetCardInfo+0x29c>
  uint8_t retr = BSP_SD_ERROR;
 8000c14:	2601      	movs	r6, #1
  SD_IO_CSState(1);
 8000c16:	2001      	movs	r0, #1
 8000c18:	f000 fd66 	bl	80016e8 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000c1c:	20ff      	movs	r0, #255	; 0xff
 8000c1e:	f000 fd74 	bl	800170a <SD_IO_WriteByte>
  status|= SD_GetCIDRegister(&(pCardInfo->Cid));
 8000c22:	9b03      	ldr	r3, [sp, #12]
 8000c24:	431e      	orrs	r6, r3
  if(flag_SDHC == 1 )
 8000c26:	4bca      	ldr	r3, [pc, #808]	; (8000f50 <BSP_SD_GetCardInfo+0x380>)
  status|= SD_GetCIDRegister(&(pCardInfo->Cid));
 8000c28:	b2f0      	uxtb	r0, r6
  if(flag_SDHC == 1 )
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d000      	beq.n	8000c32 <BSP_SD_GetCardInfo+0x62>
 8000c30:	e17b      	b.n	8000f2a <BSP_SD_GetCardInfo+0x35a>
    pCardInfo->LogBlockSize = 512;
 8000c32:	2380      	movs	r3, #128	; 0x80
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	63e3      	str	r3, [r4, #60]	; 0x3c
    pCardInfo->CardBlockSize = 512;
 8000c38:	6363      	str	r3, [r4, #52]	; 0x34
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v2.DeviceSize + 1) * 1024 * pCardInfo->LogBlockSize;
 8000c3a:	68a3      	ldr	r3, [r4, #8]
 8000c3c:	011b      	lsls	r3, r3, #4
 8000c3e:	0a9b      	lsrs	r3, r3, #10
 8000c40:	3301      	adds	r3, #1
 8000c42:	04db      	lsls	r3, r3, #19
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8000c44:	6323      	str	r3, [r4, #48]	; 0x30
    pCardInfo->LogBlockNbr = (pCardInfo->CardCapacity) / (pCardInfo->LogBlockSize);
 8000c46:	0a5b      	lsrs	r3, r3, #9
 8000c48:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8000c4a:	b00b      	add	sp, #44	; 0x2c
 8000c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 8000c4e:	f7ff fee9 	bl	8000a24 <SD_WaitData.constprop.0>
 8000c52:	9003      	str	r0, [sp, #12]
 8000c54:	2800      	cmp	r0, #0
 8000c56:	d1c9      	bne.n	8000bec <BSP_SD_GetCardInfo+0x1c>
 8000c58:	0006      	movs	r6, r0
        CSD_Tab[counter] = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000c5a:	20ff      	movs	r0, #255	; 0xff
 8000c5c:	f000 fd55 	bl	800170a <SD_IO_WriteByte>
 8000c60:	ad06      	add	r5, sp, #24
 8000c62:	5570      	strb	r0, [r6, r5]
 8000c64:	3601      	adds	r6, #1
      for (counter = 0; counter < 16; counter++)
 8000c66:	2e10      	cmp	r6, #16
 8000c68:	d1f7      	bne.n	8000c5a <BSP_SD_GetCardInfo+0x8a>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000c6a:	20ff      	movs	r0, #255	; 0xff
 8000c6c:	f000 fd4d 	bl	800170a <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000c70:	20ff      	movs	r0, #255	; 0xff
 8000c72:	f000 fd4a 	bl	800170a <SD_IO_WriteByte>
      Csd->PartBlockRead   = (CSD_Tab[6] & 0x80) >> 7;
 8000c76:	2001      	movs	r0, #1
      Csd->CSDStruct = (CSD_Tab[0] & 0xC0) >> 6;
 8000c78:	782b      	ldrb	r3, [r5, #0]
      Csd->Reserved1 =  CSD_Tab[0] & 0x3F;
 8000c7a:	009a      	lsls	r2, r3, #2
 8000c7c:	099b      	lsrs	r3, r3, #6
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	7023      	strb	r3, [r4, #0]
      Csd->TAAC = CSD_Tab[1];
 8000c82:	786b      	ldrb	r3, [r5, #1]
 8000c84:	7063      	strb	r3, [r4, #1]
      Csd->NSAC = CSD_Tab[2];
 8000c86:	78ab      	ldrb	r3, [r5, #2]
 8000c88:	70a3      	strb	r3, [r4, #2]
      Csd->MaxBusClkFrec = CSD_Tab[3];
 8000c8a:	78eb      	ldrb	r3, [r5, #3]
 8000c8c:	70e3      	strb	r3, [r4, #3]
      Csd->CardComdClasses = (CSD_Tab[4] << 4) | ((CSD_Tab[5] & 0xF0) >> 4);
 8000c8e:	796a      	ldrb	r2, [r5, #5]
 8000c90:	792b      	ldrb	r3, [r5, #4]
 8000c92:	0911      	lsrs	r1, r2, #4
 8000c94:	011b      	lsls	r3, r3, #4
 8000c96:	4319      	orrs	r1, r3
 8000c98:	88a3      	ldrh	r3, [r4, #4]
      Csd->RdBlockLen = CSD_Tab[5] & 0x0F;
 8000c9a:	0112      	lsls	r2, r2, #4
      Csd->CardComdClasses = (CSD_Tab[4] << 4) | ((CSD_Tab[5] & 0xF0) >> 4);
 8000c9c:	0b1b      	lsrs	r3, r3, #12
 8000c9e:	031b      	lsls	r3, r3, #12
 8000ca0:	430b      	orrs	r3, r1
 8000ca2:	80a3      	strh	r3, [r4, #4]
      Csd->RdBlockLen = CSD_Tab[5] & 0x0F;
 8000ca4:	051b      	lsls	r3, r3, #20
 8000ca6:	0f1b      	lsrs	r3, r3, #28
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	7163      	strb	r3, [r4, #5]
      Csd->PartBlockRead   = (CSD_Tab[6] & 0x80) >> 7;
 8000cac:	79ab      	ldrb	r3, [r5, #6]
 8000cae:	79a1      	ldrb	r1, [r4, #6]
 8000cb0:	09da      	lsrs	r2, r3, #7
 8000cb2:	4381      	bics	r1, r0
      Csd->WrBlockMisalign = (CSD_Tab[6] & 0x40) >> 6;
 8000cb4:	119f      	asrs	r7, r3, #6
 8000cb6:	4007      	ands	r7, r0
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	2102      	movs	r1, #2
 8000cbc:	4087      	lsls	r7, r0
 8000cbe:	438a      	bics	r2, r1
      Csd->RdBlockMisalign = (CSD_Tab[6] & 0x20) >> 5;
 8000cc0:	433a      	orrs	r2, r7
 8000cc2:	2704      	movs	r7, #4
 8000cc4:	1159      	asrs	r1, r3, #5
 8000cc6:	4001      	ands	r1, r0
 8000cc8:	0089      	lsls	r1, r1, #2
 8000cca:	43ba      	bics	r2, r7
      Csd->DSRImpl         = (CSD_Tab[6] & 0x10) >> 4;
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	2108      	movs	r1, #8
 8000cd0:	111f      	asrs	r7, r3, #4
 8000cd2:	4038      	ands	r0, r7
 8000cd4:	438a      	bics	r2, r1
 8000cd6:	00c0      	lsls	r0, r0, #3
 8000cd8:	4302      	orrs	r2, r0
 8000cda:	71a2      	strb	r2, [r4, #6]
      if(flag_SDHC == 0)
 8000cdc:	4a9c      	ldr	r2, [pc, #624]	; (8000f50 <BSP_SD_GetCardInfo+0x380>)
 8000cde:	8811      	ldrh	r1, [r2, #0]
 8000ce0:	79ea      	ldrb	r2, [r5, #7]
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d000      	beq.n	8000ce8 <BSP_SD_GetCardInfo+0x118>
 8000ce6:	e0a7      	b.n	8000e38 <BSP_SD_GetCardInfo+0x268>
        Csd->version.v1.Reserved1 = ((CSD_Tab[6] & 0x0C) >> 2);
 8000ce8:	1098      	asrs	r0, r3, #2
 8000cea:	3103      	adds	r1, #3
 8000cec:	4008      	ands	r0, r1
 8000cee:	7a21      	ldrb	r1, [r4, #8]
 8000cf0:	3e0d      	subs	r6, #13
 8000cf2:	43b1      	bics	r1, r6
 8000cf4:	4301      	orrs	r1, r0
 8000cf6:	7221      	strb	r1, [r4, #8]
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 8000cf8:	7a29      	ldrb	r1, [r5, #8]
                                    |  (CSD_Tab[7] << 2)
 8000cfa:	0090      	lsls	r0, r2, #2
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 8000cfc:	098a      	lsrs	r2, r1, #6
 8000cfe:	4302      	orrs	r2, r0
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10)
 8000d00:	029b      	lsls	r3, r3, #10
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 8000d02:	4313      	orrs	r3, r2
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10)
 8000d04:	4893      	ldr	r0, [pc, #588]	; (8000f54 <BSP_SD_GetCardInfo+0x384>)
 8000d06:	8922      	ldrh	r2, [r4, #8]
 8000d08:	051b      	lsls	r3, r3, #20
 8000d0a:	4002      	ands	r2, r0
 8000d0c:	0c9b      	lsrs	r3, r3, #18
 8000d0e:	4313      	orrs	r3, r2
        Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
 8000d10:	2207      	movs	r2, #7
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10)
 8000d12:	8123      	strh	r3, [r4, #8]
        Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
 8000d14:	7aa3      	ldrb	r3, [r4, #10]
 8000d16:	10c8      	asrs	r0, r1, #3
 8000d18:	4010      	ands	r0, r2
 8000d1a:	4393      	bics	r3, r2
        Csd->version.v1.MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07);
 8000d1c:	4303      	orrs	r3, r0
 8000d1e:	4011      	ands	r1, r2
 8000d20:	2038      	movs	r0, #56	; 0x38
 8000d22:	40b1      	lsls	r1, r6
 8000d24:	4383      	bics	r3, r0
 8000d26:	430b      	orrs	r3, r1
 8000d28:	72a3      	strb	r3, [r4, #10]
        Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0) >> 5;
 8000d2a:	7a6b      	ldrb	r3, [r5, #9]
 8000d2c:	7ae1      	ldrb	r1, [r4, #11]
 8000d2e:	095f      	lsrs	r7, r3, #5
        Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 8000d30:	109e      	asrs	r6, r3, #2
        Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0) >> 5;
 8000d32:	4391      	bics	r1, r2
        Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 8000d34:	4016      	ands	r6, r2
 8000d36:	4339      	orrs	r1, r7
 8000d38:	00f6      	lsls	r6, r6, #3
 8000d3a:	4381      	bics	r1, r0
 8000d3c:	4331      	orrs	r1, r6
 8000d3e:	72e1      	strb	r1, [r4, #11]
        Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03) << 1)
 8000d40:	2106      	movs	r1, #6
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	400b      	ands	r3, r1
                                       |((CSD_Tab[10] & 0x80) >> 7);
 8000d46:	7aa9      	ldrb	r1, [r5, #10]
 8000d48:	40d1      	lsrs	r1, r2
 8000d4a:	430b      	orrs	r3, r1
        Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03) << 1)
 8000d4c:	7b21      	ldrb	r1, [r4, #12]
 8000d4e:	4391      	bics	r1, r2
 8000d50:	430b      	orrs	r3, r1
 8000d52:	7323      	strb	r3, [r4, #12]
      Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40) >> 6;
 8000d54:	2001      	movs	r0, #1
 8000d56:	ae06      	add	r6, sp, #24
 8000d58:	7ab3      	ldrb	r3, [r6, #10]
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8000d5a:	277e      	movs	r7, #126	; 0x7e
      Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40) >> 6;
 8000d5c:	119d      	asrs	r5, r3, #6
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8000d5e:	4083      	lsls	r3, r0
      Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40) >> 6;
 8000d60:	7c22      	ldrb	r2, [r4, #16]
 8000d62:	4005      	ands	r5, r0
 8000d64:	4382      	bics	r2, r0
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8000d66:	432a      	orrs	r2, r5
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 8000d68:	257f      	movs	r5, #127	; 0x7f
                              |((CSD_Tab[11] & 0x80) >> 7);
 8000d6a:	7af1      	ldrb	r1, [r6, #11]
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8000d6c:	403b      	ands	r3, r7
                              |((CSD_Tab[11] & 0x80) >> 7);
 8000d6e:	09cf      	lsrs	r7, r1, #7
 8000d70:	433b      	orrs	r3, r7
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8000d72:	4083      	lsls	r3, r0
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 8000d74:	4029      	ands	r1, r5
 8000d76:	000f      	movs	r7, r1
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8000d78:	4002      	ands	r2, r0
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	7423      	strb	r3, [r4, #16]
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 8000d7e:	7c63      	ldrb	r3, [r4, #17]
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 8000d80:	7b31      	ldrb	r1, [r6, #12]
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 8000d82:	43ab      	bics	r3, r5
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 8000d84:	09ca      	lsrs	r2, r1, #7
 8000d86:	433b      	orrs	r3, r7
 8000d88:	01d2      	lsls	r2, r2, #7
 8000d8a:	402b      	ands	r3, r5
 8000d8c:	4313      	orrs	r3, r2
      Csd->Reserved2         = (CSD_Tab[12] & 0x60) >> 5;
 8000d8e:	2203      	movs	r2, #3
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 8000d90:	7463      	strb	r3, [r4, #17]
      Csd->Reserved2         = (CSD_Tab[12] & 0x60) >> 5;
 8000d92:	114b      	asrs	r3, r1, #5
 8000d94:	4013      	ands	r3, r2
 8000d96:	469c      	mov	ip, r3
      Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1C) >> 2;
 8000d98:	4667      	mov	r7, ip
      Csd->Reserved2         = (CSD_Tab[12] & 0x60) >> 5;
 8000d9a:	7ca3      	ldrb	r3, [r4, #18]
 8000d9c:	4393      	bics	r3, r2
      Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1C) >> 2;
 8000d9e:	433b      	orrs	r3, r7
 8000da0:	271c      	movs	r7, #28
 8000da2:	3219      	adds	r2, #25
 8000da4:	43bb      	bics	r3, r7
 8000da6:	400a      	ands	r2, r1
 8000da8:	431a      	orrs	r2, r3
 8000daa:	74a2      	strb	r2, [r4, #18]
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8000dac:	220c      	movs	r2, #12
                              |((CSD_Tab[13] & 0xC0) >> 6);
 8000dae:	7b73      	ldrb	r3, [r6, #13]
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8000db0:	0089      	lsls	r1, r1, #2
 8000db2:	4011      	ands	r1, r2
                              |((CSD_Tab[13] & 0xC0) >> 6);
 8000db4:	099a      	lsrs	r2, r3, #6
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8000db6:	4311      	orrs	r1, r2
 8000db8:	468c      	mov	ip, r1
 8000dba:	220f      	movs	r2, #15
      Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20) >> 5;
 8000dbc:	4667      	mov	r7, ip
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8000dbe:	7ce1      	ldrb	r1, [r4, #19]
 8000dc0:	4391      	bics	r1, r2
      Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20) >> 5;
 8000dc2:	4339      	orrs	r1, r7
 8000dc4:	2710      	movs	r7, #16
 8000dc6:	115a      	asrs	r2, r3, #5
 8000dc8:	4002      	ands	r2, r0
 8000dca:	43b9      	bics	r1, r7
 8000dcc:	0112      	lsls	r2, r2, #4
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	74e2      	strb	r2, [r4, #19]
      Csd->Reserved3         = (CSD_Tab[13] & 0x1F);
 8000dd2:	221f      	movs	r2, #31
 8000dd4:	7d21      	ldrb	r1, [r4, #20]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	4391      	bics	r1, r2
      Csd->FileFormatGrouop  = (CSD_Tab[14] & 0x80) >> 7;
 8000dda:	430b      	orrs	r3, r1
 8000ddc:	2120      	movs	r1, #32
 8000dde:	7bb2      	ldrb	r2, [r6, #14]
 8000de0:	438b      	bics	r3, r1
 8000de2:	09d7      	lsrs	r7, r2, #7
 8000de4:	017f      	lsls	r7, r7, #5
      Csd->CopyFlag          = (CSD_Tab[14] & 0x40) >> 6;
 8000de6:	433b      	orrs	r3, r7
 8000de8:	2740      	movs	r7, #64	; 0x40
 8000dea:	1191      	asrs	r1, r2, #6
 8000dec:	4001      	ands	r1, r0
 8000dee:	0189      	lsls	r1, r1, #6
 8000df0:	43bb      	bics	r3, r7
      Csd->PermWrProtect     = (CSD_Tab[14] & 0x20) >> 5;
 8000df2:	430b      	orrs	r3, r1
 8000df4:	1157      	asrs	r7, r2, #5
 8000df6:	01ff      	lsls	r7, r7, #7
 8000df8:	402b      	ands	r3, r5
      Csd->TempWrProtect     = (CSD_Tab[14] & 0x10) >> 4;
 8000dfa:	7d61      	ldrb	r1, [r4, #21]
      Csd->PermWrProtect     = (CSD_Tab[14] & 0x20) >> 5;
 8000dfc:	433b      	orrs	r3, r7
 8000dfe:	7523      	strb	r3, [r4, #20]
      Csd->TempWrProtect     = (CSD_Tab[14] & 0x10) >> 4;
 8000e00:	4381      	bics	r1, r0
 8000e02:	1113      	asrs	r3, r2, #4
 8000e04:	4003      	ands	r3, r0
 8000e06:	0008      	movs	r0, r1
      Csd->FileFormat        = (CSD_Tab[14] & 0x0C) >> 2;
 8000e08:	2703      	movs	r7, #3
 8000e0a:	4303      	orrs	r3, r0
 8000e0c:	2006      	movs	r0, #6
 8000e0e:	1091      	asrs	r1, r2, #2
 8000e10:	4039      	ands	r1, r7
 8000e12:	0049      	lsls	r1, r1, #1
 8000e14:	4383      	bics	r3, r0
      Csd->Reserved4         = (CSD_Tab[14] & 0x03);
 8000e16:	430b      	orrs	r3, r1
 8000e18:	403a      	ands	r2, r7
 8000e1a:	2118      	movs	r1, #24
 8000e1c:	40ba      	lsls	r2, r7
 8000e1e:	438b      	bics	r3, r1
 8000e20:	431a      	orrs	r2, r3
 8000e22:	7562      	strb	r2, [r4, #21]
      Csd->crc               = (CSD_Tab[15] & 0xFE) >> 1;
 8000e24:	7bf2      	ldrb	r2, [r6, #15]
 8000e26:	7da3      	ldrb	r3, [r4, #22]
 8000e28:	0851      	lsrs	r1, r2, #1
 8000e2a:	43ab      	bics	r3, r5
      Csd->Reserved5         = (CSD_Tab[15] & 0x01);
 8000e2c:	430b      	orrs	r3, r1
 8000e2e:	01d2      	lsls	r2, r2, #7
 8000e30:	401d      	ands	r5, r3
 8000e32:	4315      	orrs	r5, r2
 8000e34:	75a5      	strb	r5, [r4, #22]
 8000e36:	e6db      	b.n	8000bf0 <BSP_SD_GetCardInfo+0x20>
        Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0F) << 2) | ((CSD_Tab[7] & 0xC0) >> 6);
 8000e38:	213c      	movs	r1, #60	; 0x3c
 8000e3a:	203f      	movs	r0, #63	; 0x3f
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	400b      	ands	r3, r1
 8000e40:	0991      	lsrs	r1, r2, #6
 8000e42:	430b      	orrs	r3, r1
 8000e44:	7a21      	ldrb	r1, [r4, #8]
        Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3F) << 16) | (CSD_Tab[8] << 8) | CSD_Tab[9];
 8000e46:	0412      	lsls	r2, r2, #16
        Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0F) << 2) | ((CSD_Tab[7] & 0xC0) >> 6);
 8000e48:	4381      	bics	r1, r0
 8000e4a:	430b      	orrs	r3, r1
 8000e4c:	7223      	strb	r3, [r4, #8]
        Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3F) << 16) | (CSD_Tab[8] << 8) | CSD_Tab[9];
 8000e4e:	892b      	ldrh	r3, [r5, #8]
 8000e50:	68a1      	ldr	r1, [r4, #8]
 8000e52:	ba5b      	rev16	r3, r3
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	431a      	orrs	r2, r3
 8000e58:	4b3f      	ldr	r3, [pc, #252]	; (8000f58 <BSP_SD_GetCardInfo+0x388>)
 8000e5a:	0292      	lsls	r2, r2, #10
 8000e5c:	0912      	lsrs	r2, r2, #4
 8000e5e:	400b      	ands	r3, r1
 8000e60:	431a      	orrs	r2, r3
 8000e62:	60a2      	str	r2, [r4, #8]
        Csd->version.v2.Reserved2 = ((CSD_Tab[10] & 0x80) >> 8);
 8000e64:	0e12      	lsrs	r2, r2, #24
 8000e66:	43b2      	bics	r2, r6
 8000e68:	72e2      	strb	r2, [r4, #11]
 8000e6a:	e773      	b.n	8000d54 <BSP_SD_GetCardInfo+0x184>
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 8000e6c:	f7ff fdda 	bl	8000a24 <SD_WaitData.constprop.0>
 8000e70:	1e06      	subs	r6, r0, #0
 8000e72:	d000      	beq.n	8000e76 <BSP_SD_GetCardInfo+0x2a6>
 8000e74:	e6ce      	b.n	8000c14 <BSP_SD_GetCardInfo+0x44>
 8000e76:	0007      	movs	r7, r0
        CID_Tab[counter] = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000e78:	20ff      	movs	r0, #255	; 0xff
 8000e7a:	f000 fc46 	bl	800170a <SD_IO_WriteByte>
 8000e7e:	ad06      	add	r5, sp, #24
 8000e80:	5578      	strb	r0, [r7, r5]
      for (counter = 0; counter < 16; counter++)
 8000e82:	3701      	adds	r7, #1
 8000e84:	2f10      	cmp	r7, #16
 8000e86:	d1f7      	bne.n	8000e78 <BSP_SD_GetCardInfo+0x2a8>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000e88:	20ff      	movs	r0, #255	; 0xff
 8000e8a:	f000 fc3e 	bl	800170a <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000e8e:	20ff      	movs	r0, #255	; 0xff
 8000e90:	f000 fc3b 	bl	800170a <SD_IO_WriteByte>
      Cid->ManufacturerID = CID_Tab[0];
 8000e94:	782b      	ldrb	r3, [r5, #0]
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 8000e96:	0021      	movs	r1, r4
      Cid->ManufacturerID = CID_Tab[0];
 8000e98:	7623      	strb	r3, [r4, #24]
      Cid->OEM_AppliID = CID_Tab[1] << 8;
 8000e9a:	786b      	ldrb	r3, [r5, #1]
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 8000e9c:	3128      	adds	r1, #40	; 0x28
      Cid->OEM_AppliID = CID_Tab[1] << 8;
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	8363      	strh	r3, [r4, #26]
      Cid->OEM_AppliID |= CID_Tab[2];
 8000ea2:	8b63      	ldrh	r3, [r4, #26]
 8000ea4:	78aa      	ldrb	r2, [r5, #2]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	8363      	strh	r3, [r4, #26]
      Cid->ProdName1 = CID_Tab[3] << 24;
 8000eaa:	78eb      	ldrb	r3, [r5, #3]
 8000eac:	061b      	lsls	r3, r3, #24
 8000eae:	61e3      	str	r3, [r4, #28]
      Cid->ProdName1 |= CID_Tab[4] << 16;
 8000eb0:	792b      	ldrb	r3, [r5, #4]
 8000eb2:	69e2      	ldr	r2, [r4, #28]
 8000eb4:	041b      	lsls	r3, r3, #16
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61e3      	str	r3, [r4, #28]
      Cid->ProdName1 |= CID_Tab[5] << 8;
 8000eba:	796b      	ldrb	r3, [r5, #5]
 8000ebc:	69e2      	ldr	r2, [r4, #28]
 8000ebe:	021b      	lsls	r3, r3, #8
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61e3      	str	r3, [r4, #28]
      Cid->ProdName1 |= CID_Tab[6];
 8000ec4:	69e2      	ldr	r2, [r4, #28]
 8000ec6:	79ab      	ldrb	r3, [r5, #6]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	61e3      	str	r3, [r4, #28]
      Cid->ProdName2 = CID_Tab[7];
 8000ecc:	79ea      	ldrb	r2, [r5, #7]
 8000ece:	1c63      	adds	r3, r4, #1
 8000ed0:	77da      	strb	r2, [r3, #31]
      Cid->ProdRev = CID_Tab[8];
 8000ed2:	7a2a      	ldrb	r2, [r5, #8]
 8000ed4:	1ca3      	adds	r3, r4, #2
 8000ed6:	77da      	strb	r2, [r3, #31]
      Cid->ProdSN = CID_Tab[9] << 24;
 8000ed8:	7a6b      	ldrb	r3, [r5, #9]
 8000eda:	061b      	lsls	r3, r3, #24
 8000edc:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->ProdSN |= CID_Tab[10] << 16;
 8000ede:	7aab      	ldrb	r3, [r5, #10]
 8000ee0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ee2:	041b      	lsls	r3, r3, #16
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->ProdSN |= CID_Tab[11] << 8;
 8000ee8:	7aeb      	ldrb	r3, [r5, #11]
 8000eea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000eec:	021b      	lsls	r3, r3, #8
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->ProdSN |= CID_Tab[12];
 8000ef2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ef4:	7b2b      	ldrb	r3, [r5, #12]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 8000efa:	7b6b      	ldrb	r3, [r5, #13]
 8000efc:	780a      	ldrb	r2, [r1, #0]
 8000efe:	0918      	lsrs	r0, r3, #4
 8000f00:	4302      	orrs	r2, r0
 8000f02:	700a      	strb	r2, [r1, #0]
      Cid->ManufactDate = (CID_Tab[13] & 0x0F) << 8;
 8000f04:	22f0      	movs	r2, #240	; 0xf0
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	8563      	strh	r3, [r4, #42]	; 0x2a
      Cid->ManufactDate |= CID_Tab[14];
 8000f0e:	7baa      	ldrb	r2, [r5, #14]
 8000f10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f12:	4313      	orrs	r3, r2
      Cid->CID_CRC = (CID_Tab[15] & 0xFE) >> 1;
 8000f14:	0022      	movs	r2, r4
      Cid->ManufactDate |= CID_Tab[14];
 8000f16:	8563      	strh	r3, [r4, #42]	; 0x2a
      Cid->CID_CRC = (CID_Tab[15] & 0xFE) >> 1;
 8000f18:	7beb      	ldrb	r3, [r5, #15]
 8000f1a:	322c      	adds	r2, #44	; 0x2c
 8000f1c:	085b      	lsrs	r3, r3, #1
 8000f1e:	7013      	strb	r3, [r2, #0]
      Cid->Reserved2 = 1;
 8000f20:	0023      	movs	r3, r4
 8000f22:	2201      	movs	r2, #1
 8000f24:	332d      	adds	r3, #45	; 0x2d
 8000f26:	701a      	strb	r2, [r3, #0]
 8000f28:	e675      	b.n	8000c16 <BSP_SD_GetCardInfo+0x46>
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 8000f2a:	8923      	ldrh	r3, [r4, #8]
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 8000f2c:	7b22      	ldrb	r2, [r4, #12]
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 8000f2e:	049b      	lsls	r3, r3, #18
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 8000f30:	0752      	lsls	r2, r2, #29
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 8000f32:	0d1b      	lsrs	r3, r3, #20
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 8000f34:	0f52      	lsrs	r2, r2, #29
 8000f36:	3202      	adds	r2, #2
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 8000f38:	3301      	adds	r3, #1
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 8000f3a:	4093      	lsls	r3, r2
    pCardInfo->LogBlockSize = 512;
 8000f3c:	2280      	movs	r2, #128	; 0x80
    pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 8000f3e:	2101      	movs	r1, #1
    pCardInfo->LogBlockSize = 512;
 8000f40:	0092      	lsls	r2, r2, #2
 8000f42:	63e2      	str	r2, [r4, #60]	; 0x3c
    pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 8000f44:	7962      	ldrb	r2, [r4, #5]
 8000f46:	0912      	lsrs	r2, r2, #4
 8000f48:	4091      	lsls	r1, r2
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8000f4a:	4093      	lsls	r3, r2
    pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 8000f4c:	6361      	str	r1, [r4, #52]	; 0x34
 8000f4e:	e679      	b.n	8000c44 <BSP_SD_GetCardInfo+0x74>
 8000f50:	2000059e 	.word	0x2000059e
 8000f54:	ffffc003 	.word	0xffffc003
 8000f58:	f000003f 	.word	0xf000003f

08000f5c <BSP_SD_ReadBlocks>:
{
 8000f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f5e:	b087      	sub	sp, #28
 8000f60:	9203      	str	r2, [sp, #12]
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000f62:	2300      	movs	r3, #0
 8000f64:	2280      	movs	r2, #128	; 0x80
 8000f66:	ad04      	add	r5, sp, #16
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	0092      	lsls	r2, r2, #2
 8000f6c:	33ff      	adds	r3, #255	; 0xff
{
 8000f6e:	0007      	movs	r7, r0
 8000f70:	000c      	movs	r4, r1
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000f72:	0028      	movs	r0, r5
 8000f74:	2110      	movs	r1, #16
 8000f76:	f7ff fce7 	bl	8000948 <SD_SendCmd>
 8000f7a:	782e      	ldrb	r6, [r5, #0]
  SD_IO_CSState(1);
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f000 fbb3 	bl	80016e8 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000f82:	20ff      	movs	r0, #255	; 0xff
 8000f84:	f000 fbc1 	bl	800170a <SD_IO_WriteByte>
  if ( response.r1 != SD_R1_NO_ERROR)
 8000f88:	2e00      	cmp	r6, #0
 8000f8a:	d002      	beq.n	8000f92 <BSP_SD_ReadBlocks+0x36>
  uint8_t *ptr = NULL;
 8000f8c:	2500      	movs	r5, #0
  uint8_t retr = BSP_SD_ERROR;
 8000f8e:	2601      	movs	r6, #1
 8000f90:	e014      	b.n	8000fbc <BSP_SD_ReadBlocks+0x60>
  ptr = malloc(sizeof(uint8_t)*BlockSize);
 8000f92:	2080      	movs	r0, #128	; 0x80
 8000f94:	0080      	lsls	r0, r0, #2
 8000f96:	f003 f9fb 	bl	8004390 <malloc>
 8000f9a:	1e05      	subs	r5, r0, #0
  if( ptr == NULL )
 8000f9c:	d0f6      	beq.n	8000f8c <BSP_SD_ReadBlocks+0x30>
  memset(ptr, SD_DUMMY_BYTE, sizeof(uint8_t)*BlockSize);
 8000f9e:	2280      	movs	r2, #128	; 0x80
 8000fa0:	21ff      	movs	r1, #255	; 0xff
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	f003 fc0c 	bl	80047c0 <memset>
  addr = (ReadAddr * ((flag_SDHC == 1) ? 1 : BlockSize));
 8000fa8:	4b24      	ldr	r3, [pc, #144]	; (800103c <BSP_SD_ReadBlocks+0xe0>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d001      	beq.n	8000fb4 <BSP_SD_ReadBlocks+0x58>
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	435c      	muls	r4, r3
  while (NumOfBlocks--)
 8000fb6:	9b03      	ldr	r3, [sp, #12]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d10d      	bne.n	8000fd8 <BSP_SD_ReadBlocks+0x7c>
  SD_IO_CSState(1);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f000 fb93 	bl	80016e8 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8000fc2:	20ff      	movs	r0, #255	; 0xff
 8000fc4:	f000 fba1 	bl	800170a <SD_IO_WriteByte>
  if(ptr != NULL) free(ptr);
 8000fc8:	2d00      	cmp	r5, #0
 8000fca:	d002      	beq.n	8000fd2 <BSP_SD_ReadBlocks+0x76>
 8000fcc:	0028      	movs	r0, r5
 8000fce:	f003 f9e9 	bl	80043a4 <free>
}
 8000fd2:	0030      	movs	r0, r6
 8000fd4:	b007      	add	sp, #28
 8000fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    response = SD_SendCmd(SD_CMD_READ_SINGLE_BLOCK, addr, 0xFF, SD_ANSWER_R1_EXPECTED);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	0022      	movs	r2, r4
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2111      	movs	r1, #17
 8000fe0:	33ff      	adds	r3, #255	; 0xff
 8000fe2:	a804      	add	r0, sp, #16
 8000fe4:	f7ff fcb0 	bl	8000948 <SD_SendCmd>
    if ( response.r1 != SD_R1_NO_ERROR)
 8000fe8:	ab02      	add	r3, sp, #8
 8000fea:	7a1b      	ldrb	r3, [r3, #8]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1ce      	bne.n	8000f8e <BSP_SD_ReadBlocks+0x32>
    if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 8000ff0:	f7ff fd18 	bl	8000a24 <SD_WaitData.constprop.0>
 8000ff4:	2800      	cmp	r0, #0
 8000ff6:	d1ca      	bne.n	8000f8e <BSP_SD_ReadBlocks+0x32>
      SD_IO_WriteReadData(ptr, (uint8_t*)pData + offset, BlockSize);
 8000ff8:	2280      	movs	r2, #128	; 0x80
 8000ffa:	0039      	movs	r1, r7
 8000ffc:	0092      	lsls	r2, r2, #2
 8000ffe:	0028      	movs	r0, r5
 8001000:	f000 fb7f 	bl	8001702 <SD_IO_WriteReadData>
      addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 8001004:	4b0d      	ldr	r3, [pc, #52]	; (800103c <BSP_SD_ReadBlocks+0xe0>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d113      	bne.n	8001034 <BSP_SD_ReadBlocks+0xd8>
 800100c:	3401      	adds	r4, #1
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 800100e:	20ff      	movs	r0, #255	; 0xff
 8001010:	f000 fb7b 	bl	800170a <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001014:	20ff      	movs	r0, #255	; 0xff
 8001016:	f000 fb78 	bl	800170a <SD_IO_WriteByte>
    SD_IO_CSState(1);
 800101a:	2001      	movs	r0, #1
 800101c:	f000 fb64 	bl	80016e8 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001020:	20ff      	movs	r0, #255	; 0xff
 8001022:	f000 fb72 	bl	800170a <SD_IO_WriteByte>
 8001026:	9b03      	ldr	r3, [sp, #12]
 8001028:	3b01      	subs	r3, #1
 800102a:	9303      	str	r3, [sp, #12]
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	18ff      	adds	r7, r7, r3
 8001032:	e7c0      	b.n	8000fb6 <BSP_SD_ReadBlocks+0x5a>
      addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	18e4      	adds	r4, r4, r3
 800103a:	e7e8      	b.n	800100e <BSP_SD_ReadBlocks+0xb2>
 800103c:	2000059e 	.word	0x2000059e

08001040 <BSP_SD_WriteBlocks>:
{
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	b087      	sub	sp, #28
 8001044:	9203      	str	r2, [sp, #12]
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 8001046:	2300      	movs	r3, #0
 8001048:	2280      	movs	r2, #128	; 0x80
 800104a:	ad04      	add	r5, sp, #16
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	0092      	lsls	r2, r2, #2
 8001050:	33ff      	adds	r3, #255	; 0xff
{
 8001052:	0007      	movs	r7, r0
 8001054:	000c      	movs	r4, r1
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 8001056:	0028      	movs	r0, r5
 8001058:	2110      	movs	r1, #16
 800105a:	f7ff fc75 	bl	8000948 <SD_SendCmd>
 800105e:	782d      	ldrb	r5, [r5, #0]
  SD_IO_CSState(1);
 8001060:	2001      	movs	r0, #1
 8001062:	f000 fb41 	bl	80016e8 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001066:	20ff      	movs	r0, #255	; 0xff
 8001068:	f000 fb4f 	bl	800170a <SD_IO_WriteByte>
  if ( response.r1 != SD_R1_NO_ERROR)
 800106c:	2d00      	cmp	r5, #0
 800106e:	d009      	beq.n	8001084 <BSP_SD_WriteBlocks+0x44>
  uint8_t retr = BSP_SD_ERROR;
 8001070:	2501      	movs	r5, #1
  SD_IO_CSState(1);
 8001072:	2001      	movs	r0, #1
 8001074:	f000 fb38 	bl	80016e8 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001078:	20ff      	movs	r0, #255	; 0xff
 800107a:	f000 fb46 	bl	800170a <SD_IO_WriteByte>
}
 800107e:	0028      	movs	r0, r5
 8001080:	b007      	add	sp, #28
 8001082:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ptr = malloc(sizeof(uint8_t)*BlockSize);
 8001084:	2080      	movs	r0, #128	; 0x80
 8001086:	0080      	lsls	r0, r0, #2
 8001088:	f003 f982 	bl	8004390 <malloc>
 800108c:	1e06      	subs	r6, r0, #0
  if (ptr == NULL)
 800108e:	d0ef      	beq.n	8001070 <BSP_SD_WriteBlocks+0x30>
  addr = (WriteAddr * ((flag_SDHC == 1) ? 1 : BlockSize));
 8001090:	4b30      	ldr	r3, [pc, #192]	; (8001154 <BSP_SD_WriteBlocks+0x114>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d001      	beq.n	800109c <BSP_SD_WriteBlocks+0x5c>
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	435c      	muls	r4, r3
 800109e:	9702      	str	r7, [sp, #8]
  while (NumOfBlocks--)
 80010a0:	9b03      	ldr	r3, [sp, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d103      	bne.n	80010ae <BSP_SD_WriteBlocks+0x6e>
  if(ptr != NULL) free(ptr);
 80010a6:	0030      	movs	r0, r6
 80010a8:	f003 f97c 	bl	80043a4 <free>
 80010ac:	e7e1      	b.n	8001072 <BSP_SD_WriteBlocks+0x32>
    response = SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK, addr, 0xFF, SD_ANSWER_R1_EXPECTED);
 80010ae:	2300      	movs	r3, #0
 80010b0:	af04      	add	r7, sp, #16
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	0022      	movs	r2, r4
 80010b6:	33ff      	adds	r3, #255	; 0xff
 80010b8:	2118      	movs	r1, #24
 80010ba:	0038      	movs	r0, r7
 80010bc:	f7ff fc44 	bl	8000948 <SD_SendCmd>
    if (response.r1 != SD_R1_NO_ERROR)
 80010c0:	783b      	ldrb	r3, [r7, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d144      	bne.n	8001150 <BSP_SD_WriteBlocks+0x110>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80010c6:	20ff      	movs	r0, #255	; 0xff
 80010c8:	f000 fb1f 	bl	800170a <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80010cc:	20ff      	movs	r0, #255	; 0xff
 80010ce:	f000 fb1c 	bl	800170a <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_TOKEN_START_DATA_SINGLE_BLOCK_WRITE);
 80010d2:	20fe      	movs	r0, #254	; 0xfe
 80010d4:	f000 fb19 	bl	800170a <SD_IO_WriteByte>
    SD_IO_WriteReadData((uint8_t*)pData + offset, ptr, BlockSize);
 80010d8:	2280      	movs	r2, #128	; 0x80
 80010da:	0031      	movs	r1, r6
 80010dc:	0092      	lsls	r2, r2, #2
 80010de:	9802      	ldr	r0, [sp, #8]
 80010e0:	f000 fb0f 	bl	8001702 <SD_IO_WriteReadData>
    addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <BSP_SD_WriteBlocks+0x114>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d12d      	bne.n	8001148 <BSP_SD_WriteBlocks+0x108>
 80010ec:	3401      	adds	r4, #1
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80010ee:	20ff      	movs	r0, #255	; 0xff
 80010f0:	f000 fb0b 	bl	800170a <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80010f4:	20ff      	movs	r0, #255	; 0xff
 80010f6:	f000 fb08 	bl	800170a <SD_IO_WriteByte>
  dataresponse = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80010fa:	20ff      	movs	r0, #255	; 0xff
 80010fc:	f000 fb05 	bl	800170a <SD_IO_WriteByte>
 8001100:	0007      	movs	r7, r0
  SD_IO_WriteByte(SD_DUMMY_BYTE); /* read the busy response byte*/
 8001102:	20ff      	movs	r0, #255	; 0xff
 8001104:	f000 fb01 	bl	800170a <SD_IO_WriteByte>
  switch (dataresponse & 0x1F)
 8001108:	231f      	movs	r3, #31
 800110a:	401f      	ands	r7, r3
 800110c:	2f05      	cmp	r7, #5
 800110e:	d11f      	bne.n	8001150 <BSP_SD_WriteBlocks+0x110>
    SD_IO_CSState(1);
 8001110:	2001      	movs	r0, #1
 8001112:	f000 fae9 	bl	80016e8 <SD_IO_CSState>
    SD_IO_CSState(0);
 8001116:	2000      	movs	r0, #0
 8001118:	f000 fae6 	bl	80016e8 <SD_IO_CSState>
    while (SD_IO_WriteByte(SD_DUMMY_BYTE) != 0xFF);
 800111c:	20ff      	movs	r0, #255	; 0xff
 800111e:	f000 faf4 	bl	800170a <SD_IO_WriteByte>
 8001122:	0007      	movs	r7, r0
 8001124:	28ff      	cmp	r0, #255	; 0xff
 8001126:	d1f9      	bne.n	800111c <BSP_SD_WriteBlocks+0xdc>
    SD_IO_CSState(1);
 8001128:	2001      	movs	r0, #1
 800112a:	f000 fadd 	bl	80016e8 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 800112e:	0038      	movs	r0, r7
 8001130:	f000 faeb 	bl	800170a <SD_IO_WriteByte>
 8001134:	2280      	movs	r2, #128	; 0x80
 8001136:	0092      	lsls	r2, r2, #2
 8001138:	4694      	mov	ip, r2
 800113a:	9b03      	ldr	r3, [sp, #12]
 800113c:	3b01      	subs	r3, #1
 800113e:	9303      	str	r3, [sp, #12]
 8001140:	9b02      	ldr	r3, [sp, #8]
 8001142:	4463      	add	r3, ip
 8001144:	9302      	str	r3, [sp, #8]
 8001146:	e7ab      	b.n	80010a0 <BSP_SD_WriteBlocks+0x60>
    addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	18e4      	adds	r4, r4, r3
 800114e:	e7ce      	b.n	80010ee <BSP_SD_WriteBlocks+0xae>
  uint8_t retr = BSP_SD_ERROR;
 8001150:	2501      	movs	r5, #1
 8001152:	e7a8      	b.n	80010a6 <BSP_SD_WriteBlocks+0x66>
 8001154:	2000059e 	.word	0x2000059e

08001158 <BSP_SD_GetCardState>:
{
 8001158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  retr = SD_SendCmd(SD_CMD_SEND_STATUS, 0, 0xFF, SD_ANSWER_R2_EXPECTED);
 800115a:	2302      	movs	r3, #2
 800115c:	ac02      	add	r4, sp, #8
 800115e:	2200      	movs	r2, #0
 8001160:	210d      	movs	r1, #13
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	0020      	movs	r0, r4
 8001166:	33fd      	adds	r3, #253	; 0xfd
 8001168:	f7ff fbee 	bl	8000948 <SD_SendCmd>
  SD_IO_CSState(1);
 800116c:	2001      	movs	r0, #1
 800116e:	f000 fabb 	bl	80016e8 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001172:	20ff      	movs	r0, #255	; 0xff
 8001174:	f000 fac9 	bl	800170a <SD_IO_WriteByte>
  if(( retr.r1 == SD_R1_NO_ERROR) && ( retr.r2 == SD_R2_NO_ERROR))
 8001178:	7823      	ldrb	r3, [r4, #0]
 800117a:	2001      	movs	r0, #1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d103      	bne.n	8001188 <BSP_SD_GetCardState+0x30>
 8001180:	7860      	ldrb	r0, [r4, #1]
 8001182:	1e43      	subs	r3, r0, #1
 8001184:	4198      	sbcs	r0, r3
 8001186:	b2c0      	uxtb	r0, r0
}
 8001188:	b004      	add	sp, #16
 800118a:	bd10      	pop	{r4, pc}

0800118c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118c:	2001      	movs	r0, #1
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <HAL_MspInit+0x2c>)
{
 8001190:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001194:	4301      	orrs	r1, r0
 8001196:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8001198:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 800119c:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119e:	4002      	ands	r2, r0
 80011a0:	9200      	str	r2, [sp, #0]
 80011a2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011a6:	430a      	orrs	r2, r1
 80011a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80011aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ac:	400b      	ands	r3, r1
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b2:	b002      	add	sp, #8
 80011b4:	4770      	bx	lr
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	40021000 	.word	0x40021000

080011bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011bc:	b510      	push	{r4, lr}
 80011be:	0004      	movs	r4, r0
 80011c0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	2214      	movs	r2, #20
 80011c4:	2100      	movs	r1, #0
 80011c6:	a803      	add	r0, sp, #12
 80011c8:	f003 fafa 	bl	80047c0 <memset>
  if(hadc->Instance==ADC1)
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_ADC_MspInit+0x50>)
 80011ce:	6822      	ldr	r2, [r4, #0]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d119      	bne.n	8001208 <HAL_ADC_MspInit+0x4c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011d4:	2080      	movs	r0, #128	; 0x80
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_ADC_MspInit+0x54>)
 80011d8:	0340      	lsls	r0, r0, #13
 80011da:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80011dc:	4301      	orrs	r1, r0
 80011de:	6419      	str	r1, [r3, #64]	; 0x40
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e0:	2101      	movs	r1, #1
    __HAL_RCC_ADC_CLK_ENABLE();
 80011e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e4:	4002      	ands	r2, r0
 80011e6:	9201      	str	r2, [sp, #4]
 80011e8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	430a      	orrs	r2, r1
 80011f0:	635a      	str	r2, [r3, #52]	; 0x34
 80011f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	400b      	ands	r3, r1
 80011f8:	9302      	str	r3, [sp, #8]
 80011fa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011fc:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001200:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001202:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001204:	f000 fdc4 	bl	8001d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001208:	b008      	add	sp, #32
 800120a:	bd10      	pop	{r4, pc}
 800120c:	40012400 	.word	0x40012400
 8001210:	40021000 	.word	0x40021000

08001214 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001214:	b510      	push	{r4, lr}
 8001216:	0004      	movs	r4, r0
 8001218:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121a:	2214      	movs	r2, #20
 800121c:	2100      	movs	r1, #0
 800121e:	a803      	add	r0, sp, #12
 8001220:	f003 face 	bl	80047c0 <memset>
  if(hi2c->Instance==I2C1)
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_I2C_MspInit+0x5c>)
 8001226:	6822      	ldr	r2, [r4, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d11e      	bne.n	800126a <HAL_I2C_MspInit+0x56>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122c:	2102      	movs	r1, #2
 800122e:	4c11      	ldr	r4, [pc, #68]	; (8001274 <HAL_I2C_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001230:	4811      	ldr	r0, [pc, #68]	; (8001278 <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001234:	430a      	orrs	r2, r1
 8001236:	6362      	str	r2, [r4, #52]	; 0x34
 8001238:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800123a:	400b      	ands	r3, r1
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001240:	2390      	movs	r3, #144	; 0x90
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001246:	2312      	movs	r3, #18
 8001248:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800124a:	3b11      	subs	r3, #17
 800124c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001250:	3305      	adds	r3, #5
 8001252:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001254:	f000 fd9c 	bl	8001d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001258:	2180      	movs	r1, #128	; 0x80
 800125a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800125c:	0389      	lsls	r1, r1, #14
 800125e:	430a      	orrs	r2, r1
 8001260:	63e2      	str	r2, [r4, #60]	; 0x3c
 8001262:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001264:	400b      	ands	r3, r1
 8001266:	9302      	str	r3, [sp, #8]
 8001268:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800126a:	b008      	add	sp, #32
 800126c:	bd10      	pop	{r4, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	40005400 	.word	0x40005400
 8001274:	40021000 	.word	0x40021000
 8001278:	50000400 	.word	0x50000400

0800127c <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <HAL_RTC_MspInit+0x2c>)
 800127e:	6802      	ldr	r2, [r0, #0]
{
 8001280:	b082      	sub	sp, #8
  if(hrtc->Instance==RTC)
 8001282:	429a      	cmp	r2, r3
 8001284:	d10e      	bne.n	80012a4 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001286:	2280      	movs	r2, #128	; 0x80
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <HAL_RTC_MspInit+0x30>)
 800128a:	0212      	lsls	r2, r2, #8
 800128c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800128e:	430a      	orrs	r2, r1
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001290:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_RTC_ENABLE();
 8001292:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001294:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001296:	00c9      	lsls	r1, r1, #3
 8001298:	430a      	orrs	r2, r1
 800129a:	63da      	str	r2, [r3, #60]	; 0x3c
 800129c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800129e:	400b      	ands	r3, r1
 80012a0:	9301      	str	r3, [sp, #4]
 80012a2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80012a4:	b002      	add	sp, #8
 80012a6:	4770      	bx	lr
 80012a8:	40002800 	.word	0x40002800
 80012ac:	40021000 	.word	0x40021000

080012b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012b0:	b510      	push	{r4, lr}
 80012b2:	0004      	movs	r4, r0
 80012b4:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	2214      	movs	r2, #20
 80012b8:	2100      	movs	r1, #0
 80012ba:	a805      	add	r0, sp, #20
 80012bc:	f003 fa80 	bl	80047c0 <memset>
  if(hspi->Instance==SPI1)
 80012c0:	6823      	ldr	r3, [r4, #0]
 80012c2:	4a29      	ldr	r2, [pc, #164]	; (8001368 <HAL_SPI_MspInit+0xb8>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d132      	bne.n	800132e <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012c8:	2080      	movs	r0, #128	; 0x80
 80012ca:	4b28      	ldr	r3, [pc, #160]	; (800136c <HAL_SPI_MspInit+0xbc>)
 80012cc:	0140      	lsls	r0, r0, #5
 80012ce:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PD8     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2402      	movs	r4, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012d2:	4301      	orrs	r1, r0
 80012d4:	6419      	str	r1, [r3, #64]	; 0x40
 80012d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012d8:	4002      	ands	r2, r0
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012da:	2008      	movs	r0, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012dc:	9200      	str	r2, [sp, #0]
 80012de:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012e2:	4301      	orrs	r1, r0
 80012e4:	6359      	str	r1, [r3, #52]	; 0x34
 80012e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012e8:	4002      	ands	r2, r0
 80012ea:	9201      	str	r2, [sp, #4]
 80012ec:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	2201      	movs	r2, #1
 80012f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f2:	481f      	ldr	r0, [pc, #124]	; (8001370 <HAL_SPI_MspInit+0xc0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f4:	4311      	orrs	r1, r2
 80012f6:	6359      	str	r1, [r3, #52]	; 0x34
 80012f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012fa:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	4013      	ands	r3, r2
 80012fe:	9302      	str	r3, [sp, #8]
 8001300:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 800130a:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130c:	f000 fd40 	bl	8001d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001310:	23c0      	movs	r3, #192	; 0xc0
 8001312:	015b      	lsls	r3, r3, #5
 8001314:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001316:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001320:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	a905      	add	r1, sp, #20
 8001324:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001326:	f000 fd33 	bl	8001d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800132a:	b00a      	add	sp, #40	; 0x28
 800132c:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 800132e:	4a11      	ldr	r2, [pc, #68]	; (8001374 <HAL_SPI_MspInit+0xc4>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d1fa      	bne.n	800132a <HAL_SPI_MspInit+0x7a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001334:	2080      	movs	r0, #128	; 0x80
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <HAL_SPI_MspInit+0xbc>)
 8001338:	01c0      	lsls	r0, r0, #7
 800133a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800133c:	4301      	orrs	r1, r0
 800133e:	63d9      	str	r1, [r3, #60]	; 0x3c
 8001340:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001342:	4002      	ands	r2, r0
 8001344:	9203      	str	r2, [sp, #12]
 8001346:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001348:	2202      	movs	r2, #2
 800134a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134c:	480a      	ldr	r0, [pc, #40]	; (8001378 <HAL_SPI_MspInit+0xc8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	4311      	orrs	r1, r2
 8001350:	6359      	str	r1, [r3, #52]	; 0x34
 8001352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	4013      	ands	r3, r2
 8001358:	9304      	str	r3, [sp, #16]
 800135a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800135c:	23e0      	movs	r3, #224	; 0xe0
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	9206      	str	r2, [sp, #24]
 8001364:	e7df      	b.n	8001326 <HAL_SPI_MspInit+0x76>
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	40013000 	.word	0x40013000
 800136c:	40021000 	.word	0x40021000
 8001370:	50000c00 	.word	0x50000c00
 8001374:	40003800 	.word	0x40003800
 8001378:	50000400 	.word	0x50000400

0800137c <HAL_SPI_MspDeInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
  if(hspi->Instance==SPI1)
 800137c:	6803      	ldr	r3, [r0, #0]
 800137e:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <HAL_SPI_MspDeInit+0x44>)
{
 8001380:	b510      	push	{r4, lr}
  if(hspi->Instance==SPI1)
 8001382:	4293      	cmp	r3, r2
 8001384:	d110      	bne.n	80013a8 <HAL_SPI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001386:	4a0f      	ldr	r2, [pc, #60]	; (80013c4 <HAL_SPI_MspDeInit+0x48>)
 8001388:	490f      	ldr	r1, [pc, #60]	; (80013c8 <HAL_SPI_MspDeInit+0x4c>)
 800138a:	6c13      	ldr	r3, [r2, #64]	; 0x40
    /**SPI1 GPIO Configuration    
    PD8     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI 
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8);
 800138c:	480f      	ldr	r0, [pc, #60]	; (80013cc <HAL_SPI_MspDeInit+0x50>)
    __HAL_RCC_SPI1_CLK_DISABLE();
 800138e:	400b      	ands	r3, r1
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8);
 8001390:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001392:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8);
 8001394:	0049      	lsls	r1, r1, #1
 8001396:	f000 fda3 	bl	8001ee0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 800139a:	21c0      	movs	r1, #192	; 0xc0
 800139c:	20a0      	movs	r0, #160	; 0xa0
 800139e:	0149      	lsls	r1, r1, #5
 80013a0:	05c0      	lsls	r0, r0, #23
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 80013a2:	f000 fd9d 	bl	8001ee0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 80013a6:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 80013a8:	4a09      	ldr	r2, [pc, #36]	; (80013d0 <HAL_SPI_MspDeInit+0x54>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d1fb      	bne.n	80013a6 <HAL_SPI_MspDeInit+0x2a>
    __HAL_RCC_SPI2_CLK_DISABLE();
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <HAL_SPI_MspDeInit+0x48>)
 80013b0:	4908      	ldr	r1, [pc, #32]	; (80013d4 <HAL_SPI_MspDeInit+0x58>)
 80013b2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 80013b4:	4808      	ldr	r0, [pc, #32]	; (80013d8 <HAL_SPI_MspDeInit+0x5c>)
    __HAL_RCC_SPI2_CLK_DISABLE();
 80013b6:	400b      	ands	r3, r1
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 80013b8:	21e0      	movs	r1, #224	; 0xe0
    __HAL_RCC_SPI2_CLK_DISABLE();
 80013ba:	63d3      	str	r3, [r2, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 80013bc:	0209      	lsls	r1, r1, #8
 80013be:	e7f0      	b.n	80013a2 <HAL_SPI_MspDeInit+0x26>
 80013c0:	40013000 	.word	0x40013000
 80013c4:	40021000 	.word	0x40021000
 80013c8:	ffffefff 	.word	0xffffefff
 80013cc:	50000c00 	.word	0x50000c00
 80013d0:	40003800 	.word	0x40003800
 80013d4:	ffffbfff 	.word	0xffffbfff
 80013d8:	50000400 	.word	0x50000400

080013dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013dc:	b510      	push	{r4, lr}
 80013de:	0004      	movs	r4, r0
 80013e0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	2214      	movs	r2, #20
 80013e4:	2100      	movs	r1, #0
 80013e6:	a803      	add	r0, sp, #12
 80013e8:	f003 f9ea 	bl	80047c0 <memset>
  if(htim_base->Instance==TIM3)
 80013ec:	6823      	ldr	r3, [r4, #0]
 80013ee:	4a18      	ldr	r2, [pc, #96]	; (8001450 <HAL_TIM_Base_MspInit+0x74>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d10a      	bne.n	800140a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013f4:	2002      	movs	r0, #2
 80013f6:	4a17      	ldr	r2, [pc, #92]	; (8001454 <HAL_TIM_Base_MspInit+0x78>)
 80013f8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80013fa:	4301      	orrs	r1, r0
 80013fc:	63d1      	str	r1, [r2, #60]	; 0x3c
 80013fe:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8001400:	4003      	ands	r3, r0
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001406:	b008      	add	sp, #32
 8001408:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM14)
 800140a:	4a13      	ldr	r2, [pc, #76]	; (8001458 <HAL_TIM_Base_MspInit+0x7c>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d1fa      	bne.n	8001406 <HAL_TIM_Base_MspInit+0x2a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001410:	2080      	movs	r0, #128	; 0x80
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <HAL_TIM_Base_MspInit+0x78>)
 8001414:	0200      	lsls	r0, r0, #8
 8001416:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001418:	4301      	orrs	r1, r0
 800141a:	6419      	str	r1, [r3, #64]	; 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800141c:	2104      	movs	r1, #4
    __HAL_RCC_TIM14_CLK_ENABLE();
 800141e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001420:	4002      	ands	r2, r0
 8001422:	9201      	str	r2, [sp, #4]
 8001424:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001428:	480c      	ldr	r0, [pc, #48]	; (800145c <HAL_TIM_Base_MspInit+0x80>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800142a:	430a      	orrs	r2, r1
 800142c:	635a      	str	r2, [r3, #52]	; 0x34
 800142e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001430:	2201      	movs	r2, #1
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001432:	400b      	ands	r3, r1
 8001434:	9302      	str	r3, [sp, #8]
 8001436:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	015b      	lsls	r3, r3, #5
 800143c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001440:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001444:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM14;
 8001446:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001448:	f000 fca2 	bl	8001d90 <HAL_GPIO_Init>
}
 800144c:	e7db      	b.n	8001406 <HAL_TIM_Base_MspInit+0x2a>
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	40000400 	.word	0x40000400
 8001454:	40021000 	.word	0x40021000
 8001458:	40002000 	.word	0x40002000
 800145c:	50000800 	.word	0x50000800

08001460 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001460:	b510      	push	{r4, lr}
 8001462:	0004      	movs	r4, r0
 8001464:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	2214      	movs	r2, #20
 8001468:	2100      	movs	r1, #0
 800146a:	a801      	add	r0, sp, #4
 800146c:	f003 f9a8 	bl	80047c0 <memset>
  if(htim->Instance==TIM3)
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <HAL_TIM_MspPostInit+0x44>)
 8001472:	6822      	ldr	r2, [r4, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	d112      	bne.n	800149e <HAL_TIM_MspPostInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001478:	2301      	movs	r3, #1
 800147a:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = PWM_1_Pin|PWM_LCD_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	6b51      	ldr	r1, [r2, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	4319      	orrs	r1, r3
 8001484:	6351      	str	r1, [r2, #52]	; 0x34
 8001486:	6b52      	ldr	r2, [r2, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001488:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	401a      	ands	r2, r3
 800148c:	9200      	str	r2, [sp, #0]
 800148e:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = PWM_1_Pin|PWM_LCD_Pin;
 8001490:	22c0      	movs	r2, #192	; 0xc0
 8001492:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	3abe      	subs	r2, #190	; 0xbe
 8001496:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001498:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149a:	f000 fc79 	bl	8001d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800149e:	b006      	add	sp, #24
 80014a0:	bd10      	pop	{r4, pc}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	40000400 	.word	0x40000400
 80014a8:	40021000 	.word	0x40021000

080014ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014ac:	b510      	push	{r4, lr}
 80014ae:	0004      	movs	r4, r0
 80014b0:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b2:	2214      	movs	r2, #20
 80014b4:	2100      	movs	r1, #0
 80014b6:	a805      	add	r0, sp, #20
 80014b8:	f003 f982 	bl	80047c0 <memset>
  if(huart->Instance==USART2)
 80014bc:	6823      	ldr	r3, [r4, #0]
 80014be:	4a1f      	ldr	r2, [pc, #124]	; (800153c <HAL_UART_MspInit+0x90>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d11d      	bne.n	8001500 <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014c4:	2080      	movs	r0, #128	; 0x80
 80014c6:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <HAL_UART_MspInit+0x94>)
 80014c8:	0280      	lsls	r0, r0, #10
 80014ca:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80014cc:	4301      	orrs	r1, r0
 80014ce:	63d9      	str	r1, [r3, #60]	; 0x3c
 80014d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014d2:	4002      	ands	r2, r0
 80014d4:	9201      	str	r2, [sp, #4]
 80014d6:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d8:	2201      	movs	r2, #1
 80014da:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	4311      	orrs	r1, r2
 80014e0:	6359      	str	r1, [r3, #52]	; 0x34
 80014e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e4:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	4013      	ands	r3, r2
 80014e8:	9302      	str	r3, [sp, #8]
 80014ea:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014ec:	230c      	movs	r3, #12
 80014ee:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	3b0a      	subs	r3, #10
 80014f2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80014f4:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f8:	f000 fc4a 	bl	8001d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014fc:	b00a      	add	sp, #40	; 0x28
 80014fe:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 8001500:	4a10      	ldr	r2, [pc, #64]	; (8001544 <HAL_UART_MspInit+0x98>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d1fa      	bne.n	80014fc <HAL_UART_MspInit+0x50>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001506:	2080      	movs	r0, #128	; 0x80
 8001508:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <HAL_UART_MspInit+0x94>)
 800150a:	02c0      	lsls	r0, r0, #11
 800150c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800150e:	4301      	orrs	r1, r0
 8001510:	63d9      	str	r1, [r3, #60]	; 0x3c
 8001512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001514:	4002      	ands	r2, r0
 8001516:	9203      	str	r2, [sp, #12]
 8001518:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	2202      	movs	r2, #2
 800151c:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	480a      	ldr	r0, [pc, #40]	; (8001548 <HAL_UART_MspInit+0x9c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001520:	4311      	orrs	r1, r2
 8001522:	6359      	str	r1, [r3, #52]	; 0x34
 8001524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001526:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001528:	4013      	ands	r3, r2
 800152a:	9304      	str	r3, [sp, #16]
 800152c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800152e:	23c0      	movs	r3, #192	; 0xc0
 8001530:	011b      	lsls	r3, r3, #4
 8001532:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8001534:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8001538:	9309      	str	r3, [sp, #36]	; 0x24
 800153a:	e7dd      	b.n	80014f8 <HAL_UART_MspInit+0x4c>
 800153c:	40004400 	.word	0x40004400
 8001540:	40021000 	.word	0x40021000
 8001544:	40004800 	.word	0x40004800
 8001548:	50000400 	.word	0x50000400

0800154c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800154c:	b510      	push	{r4, lr}
 800154e:	0001      	movs	r1, r0
 8001550:	b086      	sub	sp, #24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0); 
 8001552:	2200      	movs	r2, #0
 8001554:	2011      	movs	r0, #17
 8001556:	f000 fbdf 	bl	8001d18 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn); 
 800155a:	2011      	movs	r0, #17
 800155c:	f000 fc0c 	bl	8001d78 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001560:	2010      	movs	r0, #16
 8001562:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <HAL_InitTick+0x68>)
 8001564:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001566:	4301      	orrs	r1, r0
 8001568:	63d1      	str	r1, [r2, #60]	; 0x3c
 800156a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800156c:	4669      	mov	r1, sp
  __HAL_RCC_TIM6_CLK_ENABLE();
 800156e:	4003      	ands	r3, r0
 8001570:	9301      	str	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001572:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001574:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001576:	f001 f929 	bl	80027cc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800157a:	f001 f913 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800157e:	4c0e      	ldr	r4, [pc, #56]	; (80015b8 <HAL_InitTick+0x6c>)
 8001580:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <HAL_InitTick+0x70>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001582:	490f      	ldr	r1, [pc, #60]	; (80015c0 <HAL_InitTick+0x74>)
  htim6.Instance = TIM6;
 8001584:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001586:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <HAL_InitTick+0x78>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001588:	0040      	lsls	r0, r0, #1
  htim6.Init.Period = (1000000 / 1000) - 1;
 800158a:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800158c:	f7fe fdd4 	bl	8000138 <__udivsi3>
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 8001590:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001592:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8001594:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001596:	0020      	movs	r0, r4
  htim6.Init.ClockDivision = 0;
 8001598:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800159c:	f001 ff32 	bl	8003404 <HAL_TIM_Base_Init>
 80015a0:	0003      	movs	r3, r0
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 80015a2:	2001      	movs	r0, #1
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <HAL_InitTick+0x62>
    return HAL_TIM_Base_Start_IT(&htim6);
 80015a8:	0020      	movs	r0, r4
 80015aa:	f001 fe15 	bl	80031d8 <HAL_TIM_Base_Start_IT>
}
 80015ae:	b006      	add	sp, #24
 80015b0:	bd10      	pop	{r4, pc}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	40021000 	.word	0x40021000
 80015b8:	20000988 	.word	0x20000988
 80015bc:	40001000 	.word	0x40001000
 80015c0:	000f4240 	.word	0x000f4240
 80015c4:	000003e7 	.word	0x000003e7

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80015ca:	f001 f92d 	bl	8002828 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015ce:	bd10      	pop	{r4, pc}

080015d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d0:	e7fe      	b.n	80015d0 <HardFault_Handler>

080015d2 <SVC_Handler>:
 80015d2:	4770      	bx	lr

080015d4 <PendSV_Handler>:
 80015d4:	4770      	bx	lr

080015d6 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d6:	4770      	bx	lr

080015d8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80015d8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015da:	4802      	ldr	r0, [pc, #8]	; (80015e4 <TIM6_IRQHandler+0xc>)
 80015dc:	f001 fe16 	bl	800320c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80015e0:	bd10      	pop	{r4, pc}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	20000988 	.word	0x20000988

080015e8 <SPIx_Init>:
/**
  * @brief  Initialize SPI HAL.
  * @retval None
  */
static void SPIx_Init(void)
{
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(HAL_SPI_GetState(&hnucleo_Spi) == HAL_SPI_STATE_RESET)
 80015ea:	4c2f      	ldr	r4, [pc, #188]	; (80016a8 <SPIx_Init+0xc0>)
{
 80015ec:	b089      	sub	sp, #36	; 0x24
  if(HAL_SPI_GetState(&hnucleo_Spi) == HAL_SPI_STATE_RESET)
 80015ee:	0020      	movs	r0, r4
 80015f0:	f001 fcb8 	bl	8002f64 <HAL_SPI_GetState>
 80015f4:	1e06      	subs	r6, r0, #0
 80015f6:	d155      	bne.n	80016a4 <SPIx_Init+0xbc>
  {
    /* SPI Config */
    hnucleo_Spi.Instance = NUCLEO_SPIx;
 80015f8:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <SPIx_Init+0xc4>)
          - SD card SPI interface max baudrate is 25MHz for write/read
          - PCLK1 max frequency is 48 MHz 
       */ 
    hnucleo_Spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
    hnucleo_Spi.Init.Direction = SPI_DIRECTION_2LINES;
    hnucleo_Spi.Init.CLKPhase = SPI_PHASE_2EDGE;
 80015fa:	2701      	movs	r7, #1
    hnucleo_Spi.Instance = NUCLEO_SPIx;
 80015fc:	6023      	str	r3, [r4, #0]
    hnucleo_Spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015fe:	2308      	movs	r3, #8
 8001600:	61e3      	str	r3, [r4, #28]
    hnucleo_Spi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001602:	3b06      	subs	r3, #6
 8001604:	6123      	str	r3, [r4, #16]
    hnucleo_Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    hnucleo_Spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    hnucleo_Spi.Init.CRCPolynomial = 7;
 8001606:	3305      	adds	r3, #5
 8001608:	62e3      	str	r3, [r4, #44]	; 0x2c
    hnucleo_Spi.Init.DataSize = SPI_DATASIZE_8BIT;
 800160a:	23e0      	movs	r3, #224	; 0xe0
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	60e3      	str	r3, [r4, #12]
    hnucleo_Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
    hnucleo_Spi.Init.NSS = SPI_NSS_SOFT;
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	009b      	lsls	r3, r3, #2
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001614:	0001      	movs	r1, r0
    hnucleo_Spi.Init.Direction = SPI_DIRECTION_2LINES;
 8001616:	60a0      	str	r0, [r4, #8]
    hnucleo_Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001618:	62a0      	str	r0, [r4, #40]	; 0x28
    hnucleo_Spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800161a:	6320      	str	r0, [r4, #48]	; 0x30
    hnucleo_Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800161c:	6220      	str	r0, [r4, #32]
    hnucleo_Spi.Init.NSS = SPI_NSS_SOFT;
 800161e:	61a3      	str	r3, [r4, #24]
    hnucleo_Spi.Init.TIMode = SPI_TIMODE_DISABLE;
 8001620:	6260      	str	r0, [r4, #36]	; 0x24
    hnucleo_Spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    hnucleo_Spi.Init.Mode = SPI_MODE_MASTER;
 8001622:	3bfc      	subs	r3, #252	; 0xfc
    hnucleo_Spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001624:	6360      	str	r0, [r4, #52]	; 0x34
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001626:	2214      	movs	r2, #20
 8001628:	a803      	add	r0, sp, #12
    hnucleo_Spi.Init.CLKPhase = SPI_PHASE_2EDGE;
 800162a:	6167      	str	r7, [r4, #20]
    hnucleo_Spi.Init.Mode = SPI_MODE_MASTER;
 800162c:	6063      	str	r3, [r4, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800162e:	f003 f8c7 	bl	80047c0 <memset>
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 8001632:	2208      	movs	r2, #8
 8001634:	4d1e      	ldr	r5, [pc, #120]	; (80016b0 <SPIx_Init+0xc8>)
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &gpioinitstruct);
 8001636:	a903      	add	r1, sp, #12
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 8001638:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &gpioinitstruct);
 800163a:	481e      	ldr	r0, [pc, #120]	; (80016b4 <SPIx_Init+0xcc>)
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 800163c:	4313      	orrs	r3, r2
 800163e:	636b      	str	r3, [r5, #52]	; 0x34
 8001640:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001642:	4013      	ands	r3, r2
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	9b00      	ldr	r3, [sp, #0]
  NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 8001648:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800164a:	433b      	orrs	r3, r7
 800164c:	636b      	str	r3, [r5, #52]	; 0x34
 800164e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  gpioinitstruct.Pull  = GPIO_PULLUP;
 8001650:	9705      	str	r7, [sp, #20]
  NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 8001652:	403b      	ands	r3, r7
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	9b01      	ldr	r3, [sp, #4]
  gpioinitstruct.Pin = NUCLEO_SPIx_SCK_PIN;
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	9303      	str	r3, [sp, #12]
  gpioinitstruct.Mode = GPIO_MODE_AF_PP;
 800165e:	3bfe      	subs	r3, #254	; 0xfe
 8001660:	9304      	str	r3, [sp, #16]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001662:	19db      	adds	r3, r3, r7
 8001664:	9306      	str	r3, [sp, #24]
  gpioinitstruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 8001666:	2780      	movs	r7, #128	; 0x80
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &gpioinitstruct);
 8001668:	f000 fb92 	bl	8001d90 <HAL_GPIO_Init>
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 800166c:	20a0      	movs	r0, #160	; 0xa0
  gpioinitstruct.Pull  = GPIO_PULLDOWN;
 800166e:	2302      	movs	r3, #2
  gpioinitstruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 8001670:	017f      	lsls	r7, r7, #5
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8001672:	a903      	add	r1, sp, #12
 8001674:	05c0      	lsls	r0, r0, #23
  gpioinitstruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 8001676:	9703      	str	r7, [sp, #12]
  gpioinitstruct.Pull  = GPIO_PULLDOWN;
 8001678:	9305      	str	r3, [sp, #20]
  gpioinitstruct.Alternate = NUCLEO_SPIx_MISO_MOSI_AF;
 800167a:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 800167c:	f000 fb88 	bl	8001d90 <HAL_GPIO_Init>
  gpioinitstruct.Pin = NUCLEO_SPIx_MISO_PIN;
 8001680:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8001682:	20a0      	movs	r0, #160	; 0xa0
  gpioinitstruct.Pin = NUCLEO_SPIx_MISO_PIN;
 8001684:	011b      	lsls	r3, r3, #4
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8001686:	05c0      	lsls	r0, r0, #23
 8001688:	a903      	add	r1, sp, #12
  gpioinitstruct.Pin = NUCLEO_SPIx_MISO_PIN;
 800168a:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 800168c:	f000 fb80 	bl	8001d90 <HAL_GPIO_Init>
  NUCLEO_SPIx_CLK_ENABLE();
 8001690:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    
    SPIx_MspInit();
    HAL_SPI_Init(&hnucleo_Spi);
 8001692:	0020      	movs	r0, r4
  NUCLEO_SPIx_CLK_ENABLE();
 8001694:	433b      	orrs	r3, r7
 8001696:	642b      	str	r3, [r5, #64]	; 0x40
 8001698:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800169a:	401f      	ands	r7, r3
 800169c:	9702      	str	r7, [sp, #8]
 800169e:	9b02      	ldr	r3, [sp, #8]
    HAL_SPI_Init(&hnucleo_Spi);
 80016a0:	f001 fab8 	bl	8002c14 <HAL_SPI_Init>
  }
}
 80016a4:	b009      	add	sp, #36	; 0x24
 80016a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016a8:	200005a0 	.word	0x200005a0
 80016ac:	40013000 	.word	0x40013000
 80016b0:	40021000 	.word	0x40021000
 80016b4:	50000c00 	.word	0x50000c00

080016b8 <SPIx_WriteReadData>:
  * @param  DataOut: read value
  * @param  DataLength: value data length
  * @retval None
  */
static void SPIx_WriteReadData(const uint8_t *DataIn, uint8_t *DataOut, uint16_t DataLength)
{
 80016b8:	b513      	push	{r0, r1, r4, lr}
 80016ba:	0013      	movs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_SPI_TransmitReceive(&hnucleo_Spi, (uint8_t*) DataIn, DataOut, DataLength, SpixTimeout);
 80016bc:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <SPIx_WriteReadData+0x28>)
 80016be:	4c09      	ldr	r4, [pc, #36]	; (80016e4 <SPIx_WriteReadData+0x2c>)
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	9200      	str	r2, [sp, #0]
 80016c4:	000a      	movs	r2, r1
 80016c6:	0001      	movs	r1, r0
 80016c8:	0020      	movs	r0, r4
 80016ca:	f001 fb19 	bl	8002d00 <HAL_SPI_TransmitReceive>

  /* Check the communication status */
  if(status != HAL_OK)
 80016ce:	2800      	cmp	r0, #0
 80016d0:	d004      	beq.n	80016dc <SPIx_WriteReadData+0x24>
  * @retval None
  */
static void SPIx_Error (void)
{
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&hnucleo_Spi);
 80016d2:	0020      	movs	r0, r4
 80016d4:	f001 fafc 	bl	8002cd0 <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI communication BUS */
  SPIx_Init();
 80016d8:	f7ff ff86 	bl	80015e8 <SPIx_Init>
}
 80016dc:	bd13      	pop	{r0, r1, r4, pc}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	20000000 	.word	0x20000000
 80016e4:	200005a0 	.word	0x200005a0

080016e8 <SD_IO_CSState>:
  * @brief  Set the SD_CS pin.
  * @param  val: pin value.
  * @retval None
  */
void SD_IO_CSState(uint8_t val)
{
 80016e8:	b510      	push	{r4, lr}
 80016ea:	0002      	movs	r2, r0
  if(val == 1) 
 80016ec:	2801      	cmp	r0, #1
 80016ee:	d106      	bne.n	80016fe <SD_IO_CSState+0x16>
  {
    SD_CS_HIGH();
  }
  else
  {
    SD_CS_LOW();
 80016f0:	2180      	movs	r1, #128	; 0x80
 80016f2:	20a0      	movs	r0, #160	; 0xa0
 80016f4:	00c9      	lsls	r1, r1, #3
 80016f6:	05c0      	lsls	r0, r0, #23
 80016f8:	f000 fc68 	bl	8001fcc <HAL_GPIO_WritePin>
  }
}
 80016fc:	bd10      	pop	{r4, pc}
    SD_CS_LOW();
 80016fe:	2200      	movs	r2, #0
 8001700:	e7f6      	b.n	80016f0 <SD_IO_CSState+0x8>

08001702 <SD_IO_WriteReadData>:
  * @param  DataOut: Pointer to data buffer for read data
  * @param  DataLength: number of bytes to write
  * @retval None
  */
void SD_IO_WriteReadData(const uint8_t *DataIn, uint8_t *DataOut, uint16_t DataLength)
{
 8001702:	b510      	push	{r4, lr}
  /* Send the byte */
  SPIx_WriteReadData(DataIn, DataOut, DataLength);
 8001704:	f7ff ffd8 	bl	80016b8 <SPIx_WriteReadData>
}
 8001708:	bd10      	pop	{r4, pc}

0800170a <SD_IO_WriteByte>:
  * @brief  Write a byte on the SD.
  * @param  Data: byte to send.
  * @retval Data written
  */
uint8_t SD_IO_WriteByte(uint8_t Data)
{
 800170a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t tmp;

  /* Send the byte */
  SPIx_WriteReadData(&Data,&tmp,1);
 800170c:	240f      	movs	r4, #15
{
 800170e:	466b      	mov	r3, sp
  SPIx_WriteReadData(&Data,&tmp,1);
 8001710:	446c      	add	r4, sp
{
 8001712:	71d8      	strb	r0, [r3, #7]
 8001714:	3307      	adds	r3, #7
  SPIx_WriteReadData(&Data,&tmp,1);
 8001716:	0018      	movs	r0, r3
 8001718:	2201      	movs	r2, #1
 800171a:	0021      	movs	r1, r4
 800171c:	f7ff ffcc 	bl	80016b8 <SPIx_WriteReadData>
  return tmp;
 8001720:	7820      	ldrb	r0, [r4, #0]
  }
 8001722:	b004      	add	sp, #16
 8001724:	bd10      	pop	{r4, pc}
	...

08001728 <SD_IO_Init>:
{
 8001728:	b530      	push	{r4, r5, lr}
  SD_CS_GPIO_CLK_ENABLE();
 800172a:	2401      	movs	r4, #1
{
 800172c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800172e:	2214      	movs	r2, #20
 8001730:	2100      	movs	r1, #0
 8001732:	a803      	add	r0, sp, #12
 8001734:	f003 f844 	bl	80047c0 <memset>
  LCD_CS_GPIO_CLK_ENABLE();
 8001738:	2102      	movs	r1, #2
  SD_CS_HIGH();
 800173a:	2580      	movs	r5, #128	; 0x80
 800173c:	20a0      	movs	r0, #160	; 0xa0
  SD_CS_GPIO_CLK_ENABLE();
 800173e:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <SD_IO_Init+0x84>)
  SD_CS_HIGH();
 8001740:	00ed      	lsls	r5, r5, #3
  SD_CS_GPIO_CLK_ENABLE();
 8001742:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  SD_CS_HIGH();
 8001744:	05c0      	lsls	r0, r0, #23
  SD_CS_GPIO_CLK_ENABLE();
 8001746:	4322      	orrs	r2, r4
 8001748:	635a      	str	r2, [r3, #52]	; 0x34
 800174a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800174c:	4022      	ands	r2, r4
 800174e:	9201      	str	r2, [sp, #4]
 8001750:	9a01      	ldr	r2, [sp, #4]
  LCD_CS_GPIO_CLK_ENABLE();
 8001752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001754:	430a      	orrs	r2, r1
 8001756:	635a      	str	r2, [r3, #52]	; 0x34
 8001758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  SD_CS_HIGH();
 800175a:	0022      	movs	r2, r4
  LCD_CS_GPIO_CLK_ENABLE();
 800175c:	400b      	ands	r3, r1
 800175e:	9302      	str	r3, [sp, #8]
  SD_CS_HIGH();
 8001760:	0029      	movs	r1, r5
  LCD_CS_GPIO_CLK_ENABLE();
 8001762:	9b02      	ldr	r3, [sp, #8]
  SD_CS_HIGH();
 8001764:	f000 fc32 	bl	8001fcc <HAL_GPIO_WritePin>
  LCD_CS_HIGH();
 8001768:	0022      	movs	r2, r4
 800176a:	0021      	movs	r1, r4
 800176c:	4810      	ldr	r0, [pc, #64]	; (80017b0 <SD_IO_Init+0x88>)
 800176e:	f000 fc2d 	bl	8001fcc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 8001772:	20a0      	movs	r0, #160	; 0xa0
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001774:	2303      	movs	r3, #3
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 8001776:	a903      	add	r1, sp, #12
 8001778:	05c0      	lsls	r0, r0, #23
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177a:	9306      	str	r3, [sp, #24]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	9404      	str	r4, [sp, #16]
  gpioinitstruct.Pull = GPIO_PULLUP;
 800177e:	9405      	str	r4, [sp, #20]
  gpioinitstruct.Pin = SD_CS_PIN;
 8001780:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 8001782:	f000 fb05 	bl	8001d90 <HAL_GPIO_Init>
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 8001786:	20a0      	movs	r0, #160	; 0xa0
 8001788:	a903      	add	r1, sp, #12
 800178a:	05c0      	lsls	r0, r0, #23
  gpioinitstruct.Pin   = LCD_CS_PIN;
 800178c:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 800178e:	f000 faff 	bl	8001d90 <HAL_GPIO_Init>
  SPIx_Init();
 8001792:	f7ff ff29 	bl	80015e8 <SPIx_Init>
 8001796:	3409      	adds	r4, #9
 8001798:	3c01      	subs	r4, #1
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 800179a:	20ff      	movs	r0, #255	; 0xff
 800179c:	b2e4      	uxtb	r4, r4
 800179e:	f7ff ffb4 	bl	800170a <SD_IO_WriteByte>
  for (counter = 0; counter <= 9; counter++)
 80017a2:	2c00      	cmp	r4, #0
 80017a4:	d1f8      	bne.n	8001798 <SD_IO_Init+0x70>
}
 80017a6:	b009      	add	sp, #36	; 0x24
 80017a8:	bd30      	pop	{r4, r5, pc}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	40021000 	.word	0x40021000
 80017b0:	50000400 	.word	0x50000400

080017b4 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80017b4:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <_sbrk+0x2c>)
{
 80017b6:	b510      	push	{r4, lr}
	if (heap_end == 0)
 80017b8:	6819      	ldr	r1, [r3, #0]
{
 80017ba:	0002      	movs	r2, r0
	if (heap_end == 0)
 80017bc:	2900      	cmp	r1, #0
 80017be:	d101      	bne.n	80017c4 <_sbrk+0x10>
		heap_end = &end;
 80017c0:	4908      	ldr	r1, [pc, #32]	; (80017e4 <_sbrk+0x30>)
 80017c2:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80017c4:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80017c6:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80017c8:	1882      	adds	r2, r0, r2
 80017ca:	428a      	cmp	r2, r1
 80017cc:	d906      	bls.n	80017dc <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80017ce:	f002 fdb5 	bl	800433c <__errno>
 80017d2:	230c      	movs	r3, #12
 80017d4:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80017d6:	2001      	movs	r0, #1
 80017d8:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80017da:	bd10      	pop	{r4, pc}
	heap_end += incr;
 80017dc:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 80017de:	e7fc      	b.n	80017da <_sbrk+0x26>
 80017e0:	20000604 	.word	0x20000604
 80017e4:	20000e40 	.word	0x20000e40

080017e8 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017e8:	2280      	movs	r2, #128	; 0x80
 80017ea:	4b02      	ldr	r3, [pc, #8]	; (80017f4 <SystemInit+0xc>)
 80017ec:	0512      	lsls	r2, r2, #20
 80017ee:	609a      	str	r2, [r3, #8]
#endif
}
 80017f0:	4770      	bx	lr
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <HAL_Init>:
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	4a08      	ldr	r2, [pc, #32]	; (800181c <HAL_Init+0x24>)
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	6811      	ldr	r1, [r2, #0]
{
 8001800:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001802:	430b      	orrs	r3, r1
 8001804:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001806:	2000      	movs	r0, #0
 8001808:	f7ff fea0 	bl	800154c <HAL_InitTick>
 800180c:	1e04      	subs	r4, r0, #0
 800180e:	d103      	bne.n	8001818 <HAL_Init+0x20>
    status = HAL_ERROR;
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001810:	f7ff fcbc 	bl	800118c <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8001814:	0020      	movs	r0, r4
 8001816:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001818:	2401      	movs	r4, #1
 800181a:	e7fb      	b.n	8001814 <HAL_Init+0x1c>
 800181c:	40022000 	.word	0x40022000

08001820 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001820:	4a03      	ldr	r2, [pc, #12]	; (8001830 <HAL_IncTick+0x10>)
 8001822:	4904      	ldr	r1, [pc, #16]	; (8001834 <HAL_IncTick+0x14>)
 8001824:	6813      	ldr	r3, [r2, #0]
 8001826:	6809      	ldr	r1, [r1, #0]
 8001828:	185b      	adds	r3, r3, r1
 800182a:	6013      	str	r3, [r2, #0]
}
 800182c:	4770      	bx	lr
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	200009c8 	.word	0x200009c8
 8001834:	20000008 	.word	0x20000008

08001838 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001838:	4b01      	ldr	r3, [pc, #4]	; (8001840 <HAL_GetTick+0x8>)
 800183a:	6818      	ldr	r0, [r3, #0]
}
 800183c:	4770      	bx	lr
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	200009c8 	.word	0x200009c8

08001844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001844:	b570      	push	{r4, r5, r6, lr}
 8001846:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001848:	f7ff fff6 	bl	8001838 <HAL_GetTick>
 800184c:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800184e:	1c63      	adds	r3, r4, #1
 8001850:	d002      	beq.n	8001858 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001852:	4b04      	ldr	r3, [pc, #16]	; (8001864 <HAL_Delay+0x20>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001858:	f7ff ffee 	bl	8001838 <HAL_GetTick>
 800185c:	1b40      	subs	r0, r0, r5
 800185e:	4284      	cmp	r4, r0
 8001860:	d8fa      	bhi.n	8001858 <HAL_Delay+0x14>
  {
  }
}
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	20000008 	.word	0x20000008

08001868 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001868:	6880      	ldr	r0, [r0, #8]
 800186a:	0740      	lsls	r0, r0, #29
 800186c:	0fc0      	lsrs	r0, r0, #31
}
 800186e:	4770      	bx	lr

08001870 <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001870:	2300      	movs	r3, #0
{
 8001872:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001874:	b085      	sub	sp, #20
 8001876:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8001878:	9303      	str	r3, [sp, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 800187a:	2501      	movs	r5, #1
  if(hadc == NULL)
 800187c:	4298      	cmp	r0, r3
 800187e:	d100      	bne.n	8001882 <HAL_ADC_Init+0x12>
 8001880:	e09a      	b.n	80019b8 <HAL_ADC_Init+0x148>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001882:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8001884:	429d      	cmp	r5, r3
 8001886:	d105      	bne.n	8001894 <HAL_ADC_Init+0x24>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001888:	f7ff fc98 	bl	80011bc <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800188c:	0023      	movs	r3, r4
 800188e:	3354      	adds	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8001890:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8001892:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001894:	2380      	movs	r3, #128	; 0x80
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001896:	6826      	ldr	r6, [r4, #0]
 8001898:	055b      	lsls	r3, r3, #21
 800189a:	68b2      	ldr	r2, [r6, #8]
 800189c:	421a      	tst	r2, r3
 800189e:	d100      	bne.n	80018a2 <HAL_ADC_Init+0x32>
 80018a0:	e0d0      	b.n	8001a44 <HAL_ADC_Init+0x1d4>
 80018a2:	68b3      	ldr	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a4:	2500      	movs	r5, #0
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	d400      	bmi.n	80018ac <HAL_ADC_Init+0x3c>
 80018aa:	e0d8      	b.n	8001a5e <HAL_ADC_Init+0x1ee>
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018ac:	0030      	movs	r0, r6
 80018ae:	f7ff ffdb 	bl	8001868 <LL_ADC_REG_IsConversionOngoing>
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018b2:	2310      	movs	r3, #16
 80018b4:	6da6      	ldr	r6, [r4, #88]	; 0x58
 80018b6:	401e      	ands	r6, r3
 80018b8:	d000      	beq.n	80018bc <HAL_ADC_Init+0x4c>
 80018ba:	e0be      	b.n	8001a3a <HAL_ADC_Init+0x1ca>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80018bc:	2800      	cmp	r0, #0
 80018be:	d000      	beq.n	80018c2 <HAL_ADC_Init+0x52>
 80018c0:	e0bb      	b.n	8001a3a <HAL_ADC_Init+0x1ca>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80018c4:	4a7c      	ldr	r2, [pc, #496]	; (8001ab8 <HAL_ADC_Init+0x248>)
 80018c6:	401a      	ands	r2, r3
 80018c8:	2302      	movs	r3, #2
 80018ca:	4313      	orrs	r3, r2
 80018cc:	65a3      	str	r3, [r4, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018ce:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	07d2      	lsls	r2, r2, #31
 80018d4:	d400      	bmi.n	80018d8 <HAL_ADC_Init+0x68>
 80018d6:	e0cb      	b.n	8001a70 <HAL_ADC_Init+0x200>
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80018d8:	6b27      	ldr	r7, [r4, #48]	; 0x30
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018da:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80018dc:	1e78      	subs	r0, r7, #1
 80018de:	4187      	sbcs	r7, r0
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80018e0:	7e62      	ldrb	r2, [r4, #25]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80018e2:	0338      	lsls	r0, r7, #12
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80018e4:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018e6:	0389      	lsls	r1, r1, #14
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80018e8:	9001      	str	r0, [sp, #4]
 80018ea:	68e0      	ldr	r0, [r4, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018ec:	4311      	orrs	r1, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80018ee:	7ea2      	ldrb	r2, [r4, #26]
 80018f0:	4301      	orrs	r1, r0
                 hadc->Init.DataAlign                                             |
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 80018f2:	6920      	ldr	r0, [r4, #16]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80018f4:	4694      	mov	ip, r2
 80018f6:	0352      	lsls	r2, r2, #13
 80018f8:	4311      	orrs	r1, r2
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 80018fa:	2800      	cmp	r0, #0
 80018fc:	da66      	bge.n	80019cc <HAL_ADC_Init+0x15c>
 80018fe:	0047      	lsls	r7, r0, #1
 8001900:	087f      	lsrs	r7, r7, #1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001902:	0022      	movs	r2, r4
 8001904:	322c      	adds	r2, #44	; 0x2c
 8001906:	7812      	ldrb	r2, [r2, #0]
 8001908:	0052      	lsls	r2, r2, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 800190a:	430a      	orrs	r2, r1
 800190c:	9901      	ldr	r1, [sp, #4]
 800190e:	430a      	orrs	r2, r1
 8001910:	4317      	orrs	r7, r2
 8001912:	9701      	str	r7, [sp, #4]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001914:	1c62      	adds	r2, r4, #1
 8001916:	7fd2      	ldrb	r2, [r2, #31]
 8001918:	2a01      	cmp	r2, #1
 800191a:	d107      	bne.n	800192c <HAL_ADC_Init+0xbc>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800191c:	4661      	mov	r1, ip
 800191e:	2900      	cmp	r1, #0
 8001920:	d157      	bne.n	80019d2 <HAL_ADC_Init+0x162>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001922:	2280      	movs	r2, #128	; 0x80
 8001924:	0039      	movs	r1, r7
 8001926:	0252      	lsls	r2, r2, #9
 8001928:	4311      	orrs	r1, r2
 800192a:	9101      	str	r1, [sp, #4]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800192c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800192e:	2a00      	cmp	r2, #0
 8001930:	d007      	beq.n	8001942 <HAL_ADC_Init+0xd2>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001932:	21e0      	movs	r1, #224	; 0xe0
 8001934:	0049      	lsls	r1, r1, #1
 8001936:	400a      	ands	r2, r1
 8001938:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800193a:	430a      	orrs	r2, r1
 800193c:	9901      	ldr	r1, [sp, #4]
 800193e:	4311      	orrs	r1, r2
 8001940:	9101      	str	r1, [sp, #4]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8001942:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001944:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001946:	430a      	orrs	r2, r1
                  hadc->Init.Oversampling.RightBitShift |
 8001948:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800194a:	430a      	orrs	r2, r1
                  hadc->Init.Oversampling.TriggeredMode |
 800194c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800194e:	430a      	orrs	r2, r1
                  hadc->Init.TriggerFrequencyMode
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 8001950:	0021      	movs	r1, r4
 8001952:	313c      	adds	r1, #60	; 0x3c
 8001954:	7809      	ldrb	r1, [r1, #0]
 8001956:	2901      	cmp	r1, #1
 8001958:	d100      	bne.n	800195c <HAL_ADC_Init+0xec>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 800195a:	430a      	orrs	r2, r1
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 800195c:	68d9      	ldr	r1, [r3, #12]
 800195e:	4f57      	ldr	r7, [pc, #348]	; (8001abc <HAL_ADC_Init+0x24c>)
 8001960:	4039      	ands	r1, r7
 8001962:	9f01      	ldr	r7, [sp, #4]
 8001964:	4339      	orrs	r1, r7
 8001966:	60d9      	str	r1, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 8001968:	6919      	ldr	r1, [r3, #16]
 800196a:	4f55      	ldr	r7, [pc, #340]	; (8001ac0 <HAL_ADC_Init+0x250>)
 800196c:	4039      	ands	r1, r7
 800196e:	430a      	orrs	r2, r1
  MODIFY_REG(ADCx->SMPR,
 8001970:	2107      	movs	r1, #7
 8001972:	2770      	movs	r7, #112	; 0x70
 8001974:	611a      	str	r2, [r3, #16]
 8001976:	695a      	ldr	r2, [r3, #20]
 8001978:	438a      	bics	r2, r1
 800197a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800197c:	430a      	orrs	r2, r1
 800197e:	615a      	str	r2, [r3, #20]
 8001980:	695a      	ldr	r2, [r3, #20]
 8001982:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001984:	43ba      	bics	r2, r7
 8001986:	0109      	lsls	r1, r1, #4
 8001988:	430a      	orrs	r2, r1
 800198a:	615a      	str	r2, [r3, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800198c:	2800      	cmp	r0, #0
 800198e:	d12a      	bne.n	80019e6 <HAL_ADC_Init+0x176>
      if(ADCGroupRegularSequencerRanksCount == 1UL)
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8001990:	2210      	movs	r2, #16
 8001992:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001994:	4252      	negs	r2, r2
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001996:	430a      	orrs	r2, r1
 8001998:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800199a:	4a4a      	ldr	r2, [pc, #296]	; (8001ac4 <HAL_ADC_Init+0x254>)
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	4013      	ands	r3, r2
 80019a0:	9a01      	ldr	r2, [sp, #4]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d13d      	bne.n	8001a22 <HAL_ADC_Init+0x1b2>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019a6:	2300      	movs	r3, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019a8:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80019aa:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80019ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80019ae:	4393      	bics	r3, r2
 80019b0:	001a      	movs	r2, r3
 80019b2:	2301      	movs	r3, #1
 80019b4:	4313      	orrs	r3, r2
 80019b6:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80019b8:	0028      	movs	r0, r5
 80019ba:	b005      	add	sp, #20
 80019bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index--;
 80019be:	9b03      	ldr	r3, [sp, #12]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	9303      	str	r3, [sp, #12]
    while(wait_loop_index != 0UL)
 80019c4:	9b03      	ldr	r3, [sp, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f9      	bne.n	80019be <HAL_ADC_Init+0x14e>
 80019ca:	e76a      	b.n	80018a2 <HAL_ADC_Init+0x32>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 80019cc:	2780      	movs	r7, #128	; 0x80
 80019ce:	03bf      	lsls	r7, r7, #14
 80019d0:	e797      	b.n	8001902 <HAL_ADC_Init+0x92>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80019d4:	468c      	mov	ip, r1
 80019d6:	2120      	movs	r1, #32
 80019d8:	4667      	mov	r7, ip
 80019da:	4339      	orrs	r1, r7
 80019dc:	65a1      	str	r1, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019de:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80019e0:	430a      	orrs	r2, r1
 80019e2:	65e2      	str	r2, [r4, #92]	; 0x5c
 80019e4:	e7a2      	b.n	800192c <HAL_ADC_Init+0xbc>
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019e6:	2280      	movs	r2, #128	; 0x80
 80019e8:	0392      	lsls	r2, r2, #14
 80019ea:	4290      	cmp	r0, r2
 80019ec:	d1d5      	bne.n	800199a <HAL_ADC_Init+0x12a>
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 80019ee:	200f      	movs	r0, #15
 80019f0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80019f2:	000f      	movs	r7, r1
 80019f4:	00b2      	lsls	r2, r6, #2
 80019f6:	40d7      	lsrs	r7, r2
 80019f8:	003a      	movs	r2, r7
 80019fa:	4002      	ands	r2, r0
 80019fc:	2a0f      	cmp	r2, #15
 80019fe:	d00d      	beq.n	8001a1c <HAL_ADC_Init+0x1ac>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001a00:	3601      	adds	r6, #1
 8001a02:	2e08      	cmp	r6, #8
 8001a04:	d1f5      	bne.n	80019f2 <HAL_ADC_Init+0x182>
        MODIFY_REG(hadc->Instance->CHSELR,
 8001a06:	4830      	ldr	r0, [pc, #192]	; (8001ac8 <HAL_ADC_Init+0x258>)
 8001a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a0a:	69e2      	ldr	r2, [r4, #28]
 8001a0c:	1812      	adds	r2, r2, r0
 8001a0e:	201c      	movs	r0, #28
 8001a10:	0092      	lsls	r2, r2, #2
 8001a12:	4002      	ands	r2, r0
 8001a14:	382c      	subs	r0, #44	; 0x2c
 8001a16:	4090      	lsls	r0, r2
 8001a18:	0002      	movs	r2, r0
 8001a1a:	e7bc      	b.n	8001996 <HAL_ADC_Init+0x126>
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 8001a1c:	2e01      	cmp	r6, #1
 8001a1e:	d0b7      	beq.n	8001990 <HAL_ADC_Init+0x120>
 8001a20:	e7f1      	b.n	8001a06 <HAL_ADC_Init+0x196>
      ADC_STATE_CLR_SET(hadc->State,
 8001a22:	2212      	movs	r2, #18
 8001a24:	6da3      	ldr	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a26:	2501      	movs	r5, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001a28:	4393      	bics	r3, r2
 8001a2a:	001a      	movs	r2, r3
 8001a2c:	2310      	movs	r3, #16
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a32:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001a34:	432b      	orrs	r3, r5
 8001a36:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001a38:	e7be      	b.n	80019b8 <HAL_ADC_Init+0x148>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a3a:	6da2      	ldr	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8001a3c:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	65a3      	str	r3, [r4, #88]	; 0x58
 8001a42:	e7b9      	b.n	80019b8 <HAL_ADC_Init+0x148>
  MODIFY_REG(ADCx->CR,
 8001a44:	68b2      	ldr	r2, [r6, #8]
 8001a46:	4921      	ldr	r1, [pc, #132]	; (8001acc <HAL_ADC_Init+0x25c>)
 8001a48:	400a      	ands	r2, r1
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	60b3      	str	r3, [r6, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001a4e:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <HAL_ADC_Init+0x260>)
 8001a50:	4920      	ldr	r1, [pc, #128]	; (8001ad4 <HAL_ADC_Init+0x264>)
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	f7fe fb70 	bl	8000138 <__udivsi3>
 8001a58:	0040      	lsls	r0, r0, #1
 8001a5a:	9003      	str	r0, [sp, #12]
    while(wait_loop_index != 0UL)
 8001a5c:	e7b2      	b.n	80019c4 <HAL_ADC_Init+0x154>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a5e:	2310      	movs	r3, #16
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a60:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a62:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001a64:	4313      	orrs	r3, r2
 8001a66:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a68:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001a6a:	432b      	orrs	r3, r5
 8001a6c:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001a6e:	e71d      	b.n	80018ac <HAL_ADC_Init+0x3c>
      MODIFY_REG(hadc->Instance->CFGR1,
 8001a70:	2118      	movs	r1, #24
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	438a      	bics	r2, r1
 8001a76:	68a1      	ldr	r1, [r4, #8]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 8001a7c:	6861      	ldr	r1, [r4, #4]
 8001a7e:	691a      	ldr	r2, [r3, #16]
 8001a80:	0f88      	lsrs	r0, r1, #30
 8001a82:	0092      	lsls	r2, r2, #2
 8001a84:	0780      	lsls	r0, r0, #30
 8001a86:	0892      	lsrs	r2, r2, #2
 8001a88:	4302      	orrs	r2, r0
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001a8a:	2080      	movs	r0, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 8001a8c:	611a      	str	r2, [r3, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001a8e:	004a      	lsls	r2, r1, #1
 8001a90:	0852      	lsrs	r2, r2, #1
 8001a92:	05c0      	lsls	r0, r0, #23
 8001a94:	4282      	cmp	r2, r0
 8001a96:	d100      	bne.n	8001a9a <HAL_ADC_Init+0x22a>
 8001a98:	e71e      	b.n	80018d8 <HAL_ADC_Init+0x68>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001a9a:	2280      	movs	r2, #128	; 0x80
 8001a9c:	0612      	lsls	r2, r2, #24
 8001a9e:	4291      	cmp	r1, r2
 8001aa0:	d100      	bne.n	8001aa4 <HAL_ADC_Init+0x234>
 8001aa2:	e719      	b.n	80018d8 <HAL_ADC_Init+0x68>
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 8001aa4:	480c      	ldr	r0, [pc, #48]	; (8001ad8 <HAL_ADC_Init+0x268>)
 8001aa6:	4f0d      	ldr	r7, [pc, #52]	; (8001adc <HAL_ADC_Init+0x26c>)
 8001aa8:	6802      	ldr	r2, [r0, #0]
 8001aaa:	403a      	ands	r2, r7
 8001aac:	27f0      	movs	r7, #240	; 0xf0
 8001aae:	03bf      	lsls	r7, r7, #14
 8001ab0:	4039      	ands	r1, r7
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	6002      	str	r2, [r0, #0]
 8001ab6:	e70f      	b.n	80018d8 <HAL_ADC_Init+0x68>
 8001ab8:	fffffefd 	.word	0xfffffefd
 8001abc:	fffe0219 	.word	0xfffe0219
 8001ac0:	dffffc02 	.word	0xdffffc02
 8001ac4:	833fffe7 	.word	0x833fffe7
 8001ac8:	3fffffff 	.word	0x3fffffff
 8001acc:	6fffffe8 	.word	0x6fffffe8
 8001ad0:	20000004 	.word	0x20000004
 8001ad4:	00030d40 	.word	0x00030d40
 8001ad8:	40012708 	.word	0x40012708
 8001adc:	ffc3ffff 	.word	0xffc3ffff

08001ae0 <HAL_ADC_ConfigChannel>:
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ae0:	2300      	movs	r3, #0
{
 8001ae2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae4:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t wait_loop_index = 0UL;
 8001ae6:	9307      	str	r3, [sp, #28]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ae8:	0003      	movs	r3, r0
 8001aea:	3354      	adds	r3, #84	; 0x54
 8001aec:	781a      	ldrb	r2, [r3, #0]
{
 8001aee:	0005      	movs	r5, r0
 8001af0:	000f      	movs	r7, r1
  __HAL_LOCK(hadc);
 8001af2:	2402      	movs	r4, #2
 8001af4:	2a01      	cmp	r2, #1
 8001af6:	d100      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x1a>
 8001af8:	e0c1      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x19e>
 8001afa:	2601      	movs	r6, #1
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001afc:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hadc);
 8001afe:	701e      	strb	r6, [r3, #0]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b00:	f7ff feb2 	bl	8001868 <LL_ADC_REG_IsConversionOngoing>
 8001b04:	9003      	str	r0, [sp, #12]
 8001b06:	2800      	cmp	r0, #0
 8001b08:	d000      	beq.n	8001b0c <HAL_ADC_ConfigChannel+0x2c>
 8001b0a:	e0ef      	b.n	8001cec <HAL_ADC_ConfigChannel+0x20c>
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	2180      	movs	r1, #128	; 0x80
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4694      	mov	ip, r2
 8001b14:	9301      	str	r3, [sp, #4]
 8001b16:	9801      	ldr	r0, [sp, #4]
 8001b18:	692b      	ldr	r3, [r5, #16]
 8001b1a:	0609      	lsls	r1, r1, #24
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	42a0      	cmp	r0, r4
 8001b20:	d100      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x44>
 8001b22:	e0b6      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x1b2>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001b24:	4660      	mov	r0, ip
 8001b26:	4383      	bics	r3, r0
 8001b28:	428b      	cmp	r3, r1
 8001b2a:	d113      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x74>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001b2c:	6829      	ldr	r1, [r5, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b2e:	0353      	lsls	r3, r2, #13
 8001b30:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8001b32:	0b5b      	lsrs	r3, r3, #13
  MODIFY_REG(ADCx->CHSELR,
 8001b34:	4303      	orrs	r3, r0
 8001b36:	628b      	str	r3, [r1, #40]	; 0x28
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b38:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(ADCx->SMPR,
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	496e      	ldr	r1, [pc, #440]	; (8001cf8 <HAL_ADC_ConfigChannel+0x218>)
 8001b3e:	6944      	ldr	r4, [r0, #20]
 8001b40:	4019      	ands	r1, r3
 8001b42:	4061      	eors	r1, r4
 8001b44:	0213      	lsls	r3, r2, #8
 8001b46:	400b      	ands	r3, r1
 8001b48:	4063      	eors	r3, r4
 8001b4a:	6143      	str	r3, [r0, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b4c:	2a00      	cmp	r2, #0
 8001b4e:	db65      	blt.n	8001c1c <HAL_ADC_ConfigChannel+0x13c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b50:	2400      	movs	r4, #0
 8001b52:	e091      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x198>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001b54:	211f      	movs	r1, #31
 8001b56:	9b01      	ldr	r3, [sp, #4]
 8001b58:	400b      	ands	r3, r1
 8001b5a:	9302      	str	r3, [sp, #8]
 8001b5c:	230f      	movs	r3, #15
 8001b5e:	9802      	ldr	r0, [sp, #8]
 8001b60:	4083      	lsls	r3, r0
 8001b62:	43db      	mvns	r3, r3
 8001b64:	9304      	str	r3, [sp, #16]
 8001b66:	9804      	ldr	r0, [sp, #16]
 8001b68:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001b6a:	4003      	ands	r3, r0
 8001b6c:	9305      	str	r3, [sp, #20]
 8001b6e:	0350      	lsls	r0, r2, #13
 8001b70:	0013      	movs	r3, r2
 8001b72:	2800      	cmp	r0, #0
 8001b74:	d115      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0xc2>
 8001b76:	0e90      	lsrs	r0, r2, #26
 8001b78:	4008      	ands	r0, r1
 8001b7a:	9902      	ldr	r1, [sp, #8]
 8001b7c:	4088      	lsls	r0, r1
 8001b7e:	9905      	ldr	r1, [sp, #20]
 8001b80:	4308      	orrs	r0, r1
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001b82:	9901      	ldr	r1, [sp, #4]
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001b84:	6628      	str	r0, [r5, #96]	; 0x60
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001b86:	0889      	lsrs	r1, r1, #2
 8001b88:	69e8      	ldr	r0, [r5, #28]
 8001b8a:	3101      	adds	r1, #1
 8001b8c:	4281      	cmp	r1, r0
 8001b8e:	d8d3      	bhi.n	8001b38 <HAL_ADC_ConfigChannel+0x58>
  MODIFY_REG(ADCx->CHSELR,
 8001b90:	9c02      	ldr	r4, [sp, #8]
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b92:	6829      	ldr	r1, [r5, #0]
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	0f1b      	lsrs	r3, r3, #28
 8001b98:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8001b9a:	40a3      	lsls	r3, r4
 8001b9c:	9c04      	ldr	r4, [sp, #16]
 8001b9e:	4020      	ands	r0, r4
 8001ba0:	e7c8      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x54>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001ba2:	9803      	ldr	r0, [sp, #12]
 8001ba4:	4232      	tst	r2, r6
 8001ba6:	d1e8      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x9a>
 8001ba8:	0030      	movs	r0, r6
 8001baa:	4222      	tst	r2, r4
 8001bac:	d1e5      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x9a>
 8001bae:	4661      	mov	r1, ip
 8001bb0:	0020      	movs	r0, r4
 8001bb2:	420a      	tst	r2, r1
 8001bb4:	d1e1      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x9a>
 8001bb6:	2003      	movs	r0, #3
 8001bb8:	0711      	lsls	r1, r2, #28
 8001bba:	d4de      	bmi.n	8001b7a <HAL_ADC_ConfigChannel+0x9a>
 8001bbc:	4660      	mov	r0, ip
 8001bbe:	06d1      	lsls	r1, r2, #27
 8001bc0:	d4db      	bmi.n	8001b7a <HAL_ADC_ConfigChannel+0x9a>
 8001bc2:	2005      	movs	r0, #5
 8001bc4:	0691      	lsls	r1, r2, #26
 8001bc6:	d4d8      	bmi.n	8001b7a <HAL_ADC_ConfigChannel+0x9a>
 8001bc8:	3001      	adds	r0, #1
 8001bca:	0651      	lsls	r1, r2, #25
 8001bcc:	d4d5      	bmi.n	8001b7a <HAL_ADC_ConfigChannel+0x9a>
 8001bce:	3001      	adds	r0, #1
 8001bd0:	0611      	lsls	r1, r2, #24
 8001bd2:	d4d2      	bmi.n	8001b7a <HAL_ADC_ConfigChannel+0x9a>
 8001bd4:	3001      	adds	r0, #1
 8001bd6:	05d1      	lsls	r1, r2, #23
 8001bd8:	d4cf      	bmi.n	8001b7a <HAL_ADC_ConfigChannel+0x9a>
 8001bda:	3001      	adds	r0, #1
 8001bdc:	0591      	lsls	r1, r2, #22
 8001bde:	d4cc      	bmi.n	8001b7a <HAL_ADC_ConfigChannel+0x9a>
 8001be0:	3001      	adds	r0, #1
 8001be2:	0551      	lsls	r1, r2, #21
 8001be4:	d4c9      	bmi.n	8001b7a <HAL_ADC_ConfigChannel+0x9a>
 8001be6:	3001      	adds	r0, #1
 8001be8:	0511      	lsls	r1, r2, #20
 8001bea:	d4c6      	bmi.n	8001b7a <HAL_ADC_ConfigChannel+0x9a>
 8001bec:	3001      	adds	r0, #1
 8001bee:	04d1      	lsls	r1, r2, #19
 8001bf0:	d4c3      	bmi.n	8001b7a <HAL_ADC_ConfigChannel+0x9a>
 8001bf2:	3001      	adds	r0, #1
 8001bf4:	0491      	lsls	r1, r2, #18
 8001bf6:	d4c0      	bmi.n	8001b7a <HAL_ADC_ConfigChannel+0x9a>
 8001bf8:	3001      	adds	r0, #1
 8001bfa:	0451      	lsls	r1, r2, #17
 8001bfc:	d4bd      	bmi.n	8001b7a <HAL_ADC_ConfigChannel+0x9a>
 8001bfe:	3001      	adds	r0, #1
 8001c00:	0411      	lsls	r1, r2, #16
 8001c02:	d4ba      	bmi.n	8001b7a <HAL_ADC_ConfigChannel+0x9a>
 8001c04:	3001      	adds	r0, #1
 8001c06:	03d1      	lsls	r1, r2, #15
 8001c08:	d4b7      	bmi.n	8001b7a <HAL_ADC_ConfigChannel+0x9a>
 8001c0a:	3001      	adds	r0, #1
 8001c0c:	0391      	lsls	r1, r2, #14
 8001c0e:	d4b4      	bmi.n	8001b7a <HAL_ADC_ConfigChannel+0x9a>
 8001c10:	2080      	movs	r0, #128	; 0x80
 8001c12:	02c0      	lsls	r0, r0, #11
 8001c14:	4010      	ands	r0, r2
 8001c16:	d0b0      	beq.n	8001b7a <HAL_ADC_ConfigChannel+0x9a>
 8001c18:	2012      	movs	r0, #18
 8001c1a:	e7ae      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x9a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c1c:	21e0      	movs	r1, #224	; 0xe0
 8001c1e:	4b37      	ldr	r3, [pc, #220]	; (8001cfc <HAL_ADC_ConfigChannel+0x21c>)
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c20:	4837      	ldr	r0, [pc, #220]	; (8001d00 <HAL_ADC_ConfigChannel+0x220>)
 8001c22:	681c      	ldr	r4, [r3, #0]
 8001c24:	0449      	lsls	r1, r1, #17
 8001c26:	4021      	ands	r1, r4
 8001c28:	4282      	cmp	r2, r0
 8001c2a:	d117      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x17c>
 8001c2c:	2080      	movs	r0, #128	; 0x80
 8001c2e:	0400      	lsls	r0, r0, #16
 8001c30:	4204      	tst	r4, r0
 8001c32:	d18d      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x70>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	4c33      	ldr	r4, [pc, #204]	; (8001d04 <HAL_ADC_ConfigChannel+0x224>)
 8001c38:	4022      	ands	r2, r4
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	4302      	orrs	r2, r0
 8001c3e:	601a      	str	r2, [r3, #0]
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001c40:	4b31      	ldr	r3, [pc, #196]	; (8001d08 <HAL_ADC_ConfigChannel+0x228>)
 8001c42:	4932      	ldr	r1, [pc, #200]	; (8001d0c <HAL_ADC_ConfigChannel+0x22c>)
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	f7fe fa77 	bl	8000138 <__udivsi3>
 8001c4a:	9007      	str	r0, [sp, #28]
          while(wait_loop_index != 0UL)
 8001c4c:	9b07      	ldr	r3, [sp, #28]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d100      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x174>
 8001c52:	e77d      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x70>
          {
            wait_loop_index--;
 8001c54:	9b07      	ldr	r3, [sp, #28]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	9307      	str	r3, [sp, #28]
 8001c5a:	e7f7      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x16c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c5c:	482c      	ldr	r0, [pc, #176]	; (8001d10 <HAL_ADC_ConfigChannel+0x230>)
 8001c5e:	4282      	cmp	r2, r0
 8001c60:	d110      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x1a4>
 8001c62:	2080      	movs	r0, #128	; 0x80
 8001c64:	0440      	lsls	r0, r0, #17
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c66:	4004      	ands	r4, r0
 8001c68:	d000      	beq.n	8001c6c <HAL_ADC_ConfigChannel+0x18c>
 8001c6a:	e771      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x70>
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4e25      	ldr	r6, [pc, #148]	; (8001d04 <HAL_ADC_ConfigChannel+0x224>)
 8001c70:	4032      	ands	r2, r6
 8001c72:	430a      	orrs	r2, r1
 8001c74:	4302      	orrs	r2, r0
 8001c76:	601a      	str	r2, [r3, #0]
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c78:	2300      	movs	r3, #0
 8001c7a:	3554      	adds	r5, #84	; 0x54
 8001c7c:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 8001c7e:	0020      	movs	r0, r4
 8001c80:	b009      	add	sp, #36	; 0x24
 8001c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c84:	4823      	ldr	r0, [pc, #140]	; (8001d14 <HAL_ADC_ConfigChannel+0x234>)
 8001c86:	4282      	cmp	r2, r0
 8001c88:	d000      	beq.n	8001c8c <HAL_ADC_ConfigChannel+0x1ac>
 8001c8a:	e761      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x70>
 8001c8c:	2080      	movs	r0, #128	; 0x80
 8001c8e:	03c0      	lsls	r0, r0, #15
 8001c90:	e7e9      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x186>
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001c92:	4660      	mov	r0, ip
 8001c94:	4383      	bics	r3, r0
 8001c96:	428b      	cmp	r3, r1
 8001c98:	d105      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x1c6>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001c9a:	6828      	ldr	r0, [r5, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001c9c:	0351      	lsls	r1, r2, #13
 8001c9e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001ca0:	0b49      	lsrs	r1, r1, #13
 8001ca2:	438b      	bics	r3, r1
 8001ca4:	6283      	str	r3, [r0, #40]	; 0x28
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ca6:	2a00      	cmp	r2, #0
 8001ca8:	db00      	blt.n	8001cac <HAL_ADC_ConfigChannel+0x1cc>
 8001caa:	e751      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x70>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cac:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <HAL_ADC_ConfigChannel+0x21c>)
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cae:	4914      	ldr	r1, [pc, #80]	; (8001d00 <HAL_ADC_ConfigChannel+0x220>)
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	428a      	cmp	r2, r1
 8001cb4:	d108      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x1e8>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 8001cb6:	22a0      	movs	r2, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001cb8:	681c      	ldr	r4, [r3, #0]
 8001cba:	0452      	lsls	r2, r2, #17
 8001cbc:	4911      	ldr	r1, [pc, #68]	; (8001d04 <HAL_ADC_ConfigChannel+0x224>)
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8001cbe:	4002      	ands	r2, r0
 8001cc0:	4021      	ands	r1, r4
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	e743      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x70>
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8001cc8:	4911      	ldr	r1, [pc, #68]	; (8001d10 <HAL_ADC_ConfigChannel+0x230>)
 8001cca:	428a      	cmp	r2, r1
 8001ccc:	d103      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x1f6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8001cce:	22c0      	movs	r2, #192	; 0xc0
 8001cd0:	681c      	ldr	r4, [r3, #0]
 8001cd2:	0412      	lsls	r2, r2, #16
 8001cd4:	e7f2      	b.n	8001cbc <HAL_ADC_ConfigChannel+0x1dc>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cd6:	490f      	ldr	r1, [pc, #60]	; (8001d14 <HAL_ADC_ConfigChannel+0x234>)
 8001cd8:	428a      	cmp	r2, r1
 8001cda:	d000      	beq.n	8001cde <HAL_ADC_ConfigChannel+0x1fe>
 8001cdc:	e738      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x70>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 8001cde:	22c0      	movs	r2, #192	; 0xc0
 8001ce0:	0452      	lsls	r2, r2, #17
 8001ce2:	6819      	ldr	r1, [r3, #0]
 8001ce4:	4002      	ands	r2, r0
 8001ce6:	4807      	ldr	r0, [pc, #28]	; (8001d04 <HAL_ADC_ConfigChannel+0x224>)
 8001ce8:	4001      	ands	r1, r0
 8001cea:	e7ea      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x1e2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cec:	2320      	movs	r3, #32
 8001cee:	6daa      	ldr	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8001cf0:	0034      	movs	r4, r6
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	65ab      	str	r3, [r5, #88]	; 0x58
 8001cf6:	e7bf      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x198>
 8001cf8:	07ffff00 	.word	0x07ffff00
 8001cfc:	40012708 	.word	0x40012708
 8001d00:	b0001000 	.word	0xb0001000
 8001d04:	fe3fffff 	.word	0xfe3fffff
 8001d08:	20000004 	.word	0x20000004
 8001d0c:	00030d40 	.word	0x00030d40
 8001d10:	b8004000 	.word	0xb8004000
 8001d14:	b4002000 	.word	0xb4002000

08001d18 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d18:	b570      	push	{r4, r5, r6, lr}
 8001d1a:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001d1c:	2800      	cmp	r0, #0
 8001d1e:	db12      	blt.n	8001d46 <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d20:	0883      	lsrs	r3, r0, #2
 8001d22:	4a13      	ldr	r2, [pc, #76]	; (8001d70 <HAL_NVIC_SetPriority+0x58>)
 8001d24:	2403      	movs	r4, #3
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	189b      	adds	r3, r3, r2
 8001d2a:	22ff      	movs	r2, #255	; 0xff
 8001d2c:	4020      	ands	r0, r4
 8001d2e:	40a0      	lsls	r0, r4
 8001d30:	0014      	movs	r4, r2
 8001d32:	25c0      	movs	r5, #192	; 0xc0
 8001d34:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d36:	4011      	ands	r1, r2
 8001d38:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d3a:	00ad      	lsls	r5, r5, #2
 8001d3c:	595e      	ldr	r6, [r3, r5]
 8001d3e:	43a6      	bics	r6, r4
 8001d40:	4331      	orrs	r1, r6
 8001d42:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001d44:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d46:	2403      	movs	r4, #3
 8001d48:	230f      	movs	r3, #15
 8001d4a:	b2c0      	uxtb	r0, r0
 8001d4c:	4003      	ands	r3, r0
 8001d4e:	4020      	ands	r0, r4
 8001d50:	40a0      	lsls	r0, r4
 8001d52:	34fc      	adds	r4, #252	; 0xfc
 8001d54:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d56:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d58:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d5a:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d5c:	3b08      	subs	r3, #8
 8001d5e:	4a05      	ldr	r2, [pc, #20]	; (8001d74 <HAL_NVIC_SetPriority+0x5c>)
 8001d60:	089b      	lsrs	r3, r3, #2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	189b      	adds	r3, r3, r2
 8001d66:	69da      	ldr	r2, [r3, #28]
 8001d68:	43aa      	bics	r2, r5
 8001d6a:	4311      	orrs	r1, r2
 8001d6c:	61d9      	str	r1, [r3, #28]
 8001d6e:	e7e9      	b.n	8001d44 <HAL_NVIC_SetPriority+0x2c>
 8001d70:	e000e100 	.word	0xe000e100
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	db05      	blt.n	8001d88 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7c:	231f      	movs	r3, #31
 8001d7e:	4018      	ands	r0, r3
 8001d80:	3b1e      	subs	r3, #30
 8001d82:	4083      	lsls	r3, r0
 8001d84:	4a01      	ldr	r2, [pc, #4]	; (8001d8c <HAL_NVIC_EnableIRQ+0x14>)
 8001d86:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001d88:	4770      	bx	lr
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	e000e100 	.word	0xe000e100

08001d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d90:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d92:	680b      	ldr	r3, [r1, #0]
{
 8001d94:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d96:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00u;
 8001d98:	2300      	movs	r3, #0
{
 8001d9a:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9c:	9a02      	ldr	r2, [sp, #8]
 8001d9e:	40da      	lsrs	r2, r3
 8001da0:	d101      	bne.n	8001da6 <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  }
}
 8001da2:	b005      	add	sp, #20
 8001da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001da6:	2201      	movs	r2, #1
 8001da8:	409a      	lsls	r2, r3
 8001daa:	9203      	str	r2, [sp, #12]
 8001dac:	9903      	ldr	r1, [sp, #12]
 8001dae:	9a02      	ldr	r2, [sp, #8]
 8001db0:	400a      	ands	r2, r1
 8001db2:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8001db4:	d100      	bne.n	8001db8 <HAL_GPIO_Init+0x28>
 8001db6:	e085      	b.n	8001ec4 <HAL_GPIO_Init+0x134>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001db8:	9a01      	ldr	r2, [sp, #4]
 8001dba:	2110      	movs	r1, #16
 8001dbc:	6852      	ldr	r2, [r2, #4]
 8001dbe:	0016      	movs	r6, r2
 8001dc0:	438e      	bics	r6, r1
 8001dc2:	2e02      	cmp	r6, #2
 8001dc4:	d10e      	bne.n	8001de4 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dc6:	2507      	movs	r5, #7
 8001dc8:	401d      	ands	r5, r3
 8001dca:	00ad      	lsls	r5, r5, #2
 8001dcc:	3901      	subs	r1, #1
 8001dce:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8001dd0:	08dc      	lsrs	r4, r3, #3
 8001dd2:	00a4      	lsls	r4, r4, #2
 8001dd4:	1904      	adds	r4, r0, r4
 8001dd6:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dd8:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dda:	9901      	ldr	r1, [sp, #4]
 8001ddc:	6909      	ldr	r1, [r1, #16]
 8001dde:	40a9      	lsls	r1, r5
 8001de0:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8001de2:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001de4:	2403      	movs	r4, #3
 8001de6:	005f      	lsls	r7, r3, #1
 8001de8:	40bc      	lsls	r4, r7
 8001dea:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8001dec:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dee:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001df0:	4025      	ands	r5, r4
 8001df2:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001df4:	2503      	movs	r5, #3
 8001df6:	4015      	ands	r5, r2
 8001df8:	40bd      	lsls	r5, r7
 8001dfa:	4661      	mov	r1, ip
 8001dfc:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8001dfe:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e00:	2e01      	cmp	r6, #1
 8001e02:	d80f      	bhi.n	8001e24 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e04:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8001e06:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e08:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e0a:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e0c:	40bd      	lsls	r5, r7
 8001e0e:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8001e10:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8001e12:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e14:	9903      	ldr	r1, [sp, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e16:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e18:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	400d      	ands	r5, r1
 8001e1e:	409d      	lsls	r5, r3
 8001e20:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001e22:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8001e24:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e26:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e28:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e2a:	688d      	ldr	r5, [r1, #8]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e2c:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e2e:	40bd      	lsls	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e30:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e32:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001e34:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e36:	420a      	tst	r2, r1
 8001e38:	d044      	beq.n	8001ec4 <HAL_GPIO_Init+0x134>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001e3a:	2603      	movs	r6, #3
 8001e3c:	240f      	movs	r4, #15
 8001e3e:	4922      	ldr	r1, [pc, #136]	; (8001ec8 <HAL_GPIO_Init+0x138>)
        temp = EXTI->EXTICR[position >> 2u];
 8001e40:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001e42:	401e      	ands	r6, r3
 8001e44:	00ad      	lsls	r5, r5, #2
 8001e46:	00f6      	lsls	r6, r6, #3
 8001e48:	186d      	adds	r5, r5, r1
 8001e4a:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001e4c:	21a0      	movs	r1, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 8001e4e:	6e2f      	ldr	r7, [r5, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001e50:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001e52:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001e54:	2400      	movs	r4, #0
 8001e56:	4288      	cmp	r0, r1
 8001e58:	d00c      	beq.n	8001e74 <HAL_GPIO_Init+0xe4>
 8001e5a:	491c      	ldr	r1, [pc, #112]	; (8001ecc <HAL_GPIO_Init+0x13c>)
 8001e5c:	3401      	adds	r4, #1
 8001e5e:	4288      	cmp	r0, r1
 8001e60:	d008      	beq.n	8001e74 <HAL_GPIO_Init+0xe4>
 8001e62:	491b      	ldr	r1, [pc, #108]	; (8001ed0 <HAL_GPIO_Init+0x140>)
 8001e64:	3401      	adds	r4, #1
 8001e66:	4288      	cmp	r0, r1
 8001e68:	d004      	beq.n	8001e74 <HAL_GPIO_Init+0xe4>
 8001e6a:	491a      	ldr	r1, [pc, #104]	; (8001ed4 <HAL_GPIO_Init+0x144>)
 8001e6c:	3403      	adds	r4, #3
 8001e6e:	4288      	cmp	r0, r1
 8001e70:	d100      	bne.n	8001e74 <HAL_GPIO_Init+0xe4>
 8001e72:	3c02      	subs	r4, #2
 8001e74:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 8001e76:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001e78:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8001e7a:	000e      	movs	r6, r1
        EXTI->EXTICR[position >> 2u] = temp;
 8001e7c:	662c      	str	r4, [r5, #96]	; 0x60
        temp = EXTI->IMR1;
 8001e7e:	4c16      	ldr	r4, [pc, #88]	; (8001ed8 <HAL_GPIO_Init+0x148>)
        temp &= ~(iocurrent);
 8001e80:	43cd      	mvns	r5, r1
        temp = EXTI->IMR1;
 8001e82:	6fe7      	ldr	r7, [r4, #124]	; 0x7c
          temp |= iocurrent;
 8001e84:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e86:	03d1      	lsls	r1, r2, #15
 8001e88:	d401      	bmi.n	8001e8e <HAL_GPIO_Init+0xfe>
        temp &= ~(iocurrent);
 8001e8a:	003e      	movs	r6, r7
 8001e8c:	402e      	ands	r6, r5
        EXTI->IMR1 = temp;
 8001e8e:	67e6      	str	r6, [r4, #124]	; 0x7c
        temp = EXTI->EMR1;
 8001e90:	4e12      	ldr	r6, [pc, #72]	; (8001edc <HAL_GPIO_Init+0x14c>)
          temp |= iocurrent;
 8001e92:	9f00      	ldr	r7, [sp, #0]
        temp = EXTI->EMR1;
 8001e94:	6ff4      	ldr	r4, [r6, #124]	; 0x7c
          temp |= iocurrent;
 8001e96:	4327      	orrs	r7, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e98:	0391      	lsls	r1, r2, #14
 8001e9a:	d401      	bmi.n	8001ea0 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 8001e9c:	402c      	ands	r4, r5
 8001e9e:	0027      	movs	r7, r4
        EXTI->EMR1 = temp;
 8001ea0:	4c09      	ldr	r4, [pc, #36]	; (8001ec8 <HAL_GPIO_Init+0x138>)
 8001ea2:	67f7      	str	r7, [r6, #124]	; 0x7c
        temp = EXTI->RTSR1;
 8001ea4:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 8001ea6:	9e00      	ldr	r6, [sp, #0]
 8001ea8:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eaa:	02d1      	lsls	r1, r2, #11
 8001eac:	d401      	bmi.n	8001eb2 <HAL_GPIO_Init+0x122>
        temp &= ~(iocurrent);
 8001eae:	003e      	movs	r6, r7
 8001eb0:	402e      	ands	r6, r5
        EXTI->RTSR1 = temp;
 8001eb2:	6026      	str	r6, [r4, #0]
        temp = EXTI->FTSR1;
 8001eb4:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 8001eb6:	9f00      	ldr	r7, [sp, #0]
 8001eb8:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eba:	0292      	lsls	r2, r2, #10
 8001ebc:	d401      	bmi.n	8001ec2 <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 8001ebe:	402e      	ands	r6, r5
 8001ec0:	0037      	movs	r7, r6
        EXTI->FTSR1 = temp;
 8001ec2:	6067      	str	r7, [r4, #4]
    position++;
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	e769      	b.n	8001d9c <HAL_GPIO_Init+0xc>
 8001ec8:	40021800 	.word	0x40021800
 8001ecc:	50000400 	.word	0x50000400
 8001ed0:	50000800 	.word	0x50000800
 8001ed4:	50000c00 	.word	0x50000c00
 8001ed8:	40021804 	.word	0x40021804
 8001edc:	40021808 	.word	0x40021808

08001ee0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 8001ee2:	2300      	movs	r3, #0
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8001ee4:	2703      	movs	r7, #3
{
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	9102      	str	r1, [sp, #8]
  while ((GPIO_Pin >> position) != 0x00u)
 8001eea:	9a02      	ldr	r2, [sp, #8]
 8001eec:	40da      	lsrs	r2, r3
 8001eee:	d101      	bne.n	8001ef4 <HAL_GPIO_DeInit+0x14>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
    }

    position++;
  }
}
 8001ef0:	b005      	add	sp, #20
 8001ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	409a      	lsls	r2, r3
 8001ef8:	9902      	ldr	r1, [sp, #8]
 8001efa:	9200      	str	r2, [sp, #0]
 8001efc:	4011      	ands	r1, r2
    if (iocurrent != 0x00u)
 8001efe:	d056      	beq.n	8001fae <HAL_GPIO_DeInit+0xce>
 8001f00:	4c2c      	ldr	r4, [pc, #176]	; (8001fb4 <HAL_GPIO_DeInit+0xd4>)
      tmp = EXTI->EXTICR[position >> 2u];
 8001f02:	089a      	lsrs	r2, r3, #2
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8001f04:	001d      	movs	r5, r3
 8001f06:	0092      	lsls	r2, r2, #2
 8001f08:	1912      	adds	r2, r2, r4
 8001f0a:	240f      	movs	r4, #15
 8001f0c:	403d      	ands	r5, r7
 8001f0e:	00ed      	lsls	r5, r5, #3
 8001f10:	40ac      	lsls	r4, r5
      tmp = EXTI->EXTICR[position >> 2u];
 8001f12:	6e16      	ldr	r6, [r2, #96]	; 0x60
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8001f14:	9401      	str	r4, [sp, #4]
 8001f16:	4026      	ands	r6, r4
 8001f18:	9603      	str	r6, [sp, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8001f1a:	26a0      	movs	r6, #160	; 0xa0
 8001f1c:	2400      	movs	r4, #0
 8001f1e:	05f6      	lsls	r6, r6, #23
 8001f20:	42b0      	cmp	r0, r6
 8001f22:	d00f      	beq.n	8001f44 <HAL_GPIO_DeInit+0x64>
 8001f24:	4c24      	ldr	r4, [pc, #144]	; (8001fb8 <HAL_GPIO_DeInit+0xd8>)
 8001f26:	46a4      	mov	ip, r4
 8001f28:	2401      	movs	r4, #1
 8001f2a:	4560      	cmp	r0, ip
 8001f2c:	d00a      	beq.n	8001f44 <HAL_GPIO_DeInit+0x64>
 8001f2e:	4c23      	ldr	r4, [pc, #140]	; (8001fbc <HAL_GPIO_DeInit+0xdc>)
 8001f30:	46a4      	mov	ip, r4
 8001f32:	2402      	movs	r4, #2
 8001f34:	4560      	cmp	r0, ip
 8001f36:	d005      	beq.n	8001f44 <HAL_GPIO_DeInit+0x64>
 8001f38:	4c21      	ldr	r4, [pc, #132]	; (8001fc0 <HAL_GPIO_DeInit+0xe0>)
 8001f3a:	46a4      	mov	ip, r4
 8001f3c:	003c      	movs	r4, r7
 8001f3e:	4560      	cmp	r0, ip
 8001f40:	d000      	beq.n	8001f44 <HAL_GPIO_DeInit+0x64>
 8001f42:	2405      	movs	r4, #5
 8001f44:	40ac      	lsls	r4, r5
 8001f46:	9d03      	ldr	r5, [sp, #12]
 8001f48:	42a5      	cmp	r5, r4
 8001f4a:	d113      	bne.n	8001f74 <HAL_GPIO_DeInit+0x94>
        EXTI->IMR1 &= ~(iocurrent);
 8001f4c:	43c9      	mvns	r1, r1
 8001f4e:	4e1d      	ldr	r6, [pc, #116]	; (8001fc4 <HAL_GPIO_DeInit+0xe4>)
 8001f50:	4c18      	ldr	r4, [pc, #96]	; (8001fb4 <HAL_GPIO_DeInit+0xd4>)
 8001f52:	6ff5      	ldr	r5, [r6, #124]	; 0x7c
 8001f54:	400d      	ands	r5, r1
 8001f56:	67f5      	str	r5, [r6, #124]	; 0x7c
        EXTI->EMR1 &= ~(iocurrent);
 8001f58:	4e1b      	ldr	r6, [pc, #108]	; (8001fc8 <HAL_GPIO_DeInit+0xe8>)
 8001f5a:	6ff5      	ldr	r5, [r6, #124]	; 0x7c
 8001f5c:	400d      	ands	r5, r1
 8001f5e:	67f5      	str	r5, [r6, #124]	; 0x7c
        EXTI->RTSR1 &= ~(iocurrent);
 8001f60:	6825      	ldr	r5, [r4, #0]
 8001f62:	400d      	ands	r5, r1
 8001f64:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8001f66:	6865      	ldr	r5, [r4, #4]
 8001f68:	4029      	ands	r1, r5
 8001f6a:	6061      	str	r1, [r4, #4]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8001f6c:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001f6e:	9c01      	ldr	r4, [sp, #4]
 8001f70:	43a1      	bics	r1, r4
 8001f72:	6611      	str	r1, [r2, #96]	; 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001f74:	003c      	movs	r4, r7
 8001f76:	0059      	lsls	r1, r3, #1
 8001f78:	408c      	lsls	r4, r1
 8001f7a:	6802      	ldr	r2, [r0, #0]
 8001f7c:	0021      	movs	r1, r4
 8001f7e:	4322      	orrs	r2, r4
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001f80:	2407      	movs	r4, #7
 8001f82:	260f      	movs	r6, #15
 8001f84:	401c      	ands	r4, r3
 8001f86:	00a4      	lsls	r4, r4, #2
 8001f88:	40a6      	lsls	r6, r4
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f8a:	43c9      	mvns	r1, r1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001f8c:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001f8e:	08da      	lsrs	r2, r3, #3
 8001f90:	0092      	lsls	r2, r2, #2
 8001f92:	1882      	adds	r2, r0, r2
 8001f94:	6a15      	ldr	r5, [r2, #32]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f96:	9c00      	ldr	r4, [sp, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001f98:	43b5      	bics	r5, r6
 8001f9a:	6215      	str	r5, [r2, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f9c:	6882      	ldr	r2, [r0, #8]
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	6082      	str	r2, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fa2:	6842      	ldr	r2, [r0, #4]
 8001fa4:	43a2      	bics	r2, r4
 8001fa6:	6042      	str	r2, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001fa8:	68c2      	ldr	r2, [r0, #12]
 8001faa:	4011      	ands	r1, r2
 8001fac:	60c1      	str	r1, [r0, #12]
    position++;
 8001fae:	3301      	adds	r3, #1
 8001fb0:	e79b      	b.n	8001eea <HAL_GPIO_DeInit+0xa>
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	40021800 	.word	0x40021800
 8001fb8:	50000400 	.word	0x50000400
 8001fbc:	50000800 	.word	0x50000800
 8001fc0:	50000c00 	.word	0x50000c00
 8001fc4:	40021804 	.word	0x40021804
 8001fc8:	40021808 	.word	0x40021808

08001fcc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fcc:	2a00      	cmp	r2, #0
 8001fce:	d001      	beq.n	8001fd4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fd0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fd2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fd4:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001fd6:	e7fc      	b.n	8001fd2 <HAL_GPIO_WritePin+0x6>

08001fd8 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001fd8:	6943      	ldr	r3, [r0, #20]
 8001fda:	4219      	tst	r1, r3
 8001fdc:	d001      	beq.n	8001fe2 <HAL_GPIO_TogglePin+0xa>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fde:	6281      	str	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001fe0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fe2:	6181      	str	r1, [r0, #24]
}
 8001fe4:	e7fc      	b.n	8001fe0 <HAL_GPIO_TogglePin+0x8>
	...

08001fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fe8:	b570      	push	{r4, r5, r6, lr}
 8001fea:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 8001fec:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8001fee:	2c00      	cmp	r4, #0
 8001ff0:	d03f      	beq.n	8002072 <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ff2:	0025      	movs	r5, r4
 8001ff4:	3541      	adds	r5, #65	; 0x41
 8001ff6:	782b      	ldrb	r3, [r5, #0]
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d105      	bne.n	800200a <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ffe:	0022      	movs	r2, r4
 8002000:	3240      	adds	r2, #64	; 0x40
 8002002:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002004:	0020      	movs	r0, r4
 8002006:	f7ff f905 	bl	8001214 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800200a:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800200c:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800200e:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8002010:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002012:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68a6      	ldr	r6, [r4, #8]
 8002018:	438a      	bics	r2, r1
 800201a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800201c:	6861      	ldr	r1, [r4, #4]
 800201e:	4a1a      	ldr	r2, [pc, #104]	; (8002088 <HAL_I2C_Init+0xa0>)
 8002020:	400a      	ands	r2, r1
 8002022:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002024:	6899      	ldr	r1, [r3, #8]
 8002026:	4a19      	ldr	r2, [pc, #100]	; (800208c <HAL_I2C_Init+0xa4>)
 8002028:	4011      	ands	r1, r2
 800202a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800202c:	2801      	cmp	r0, #1
 800202e:	d121      	bne.n	8002074 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002030:	2180      	movs	r1, #128	; 0x80
 8002032:	0209      	lsls	r1, r1, #8
 8002034:	4331      	orrs	r1, r6
 8002036:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002038:	6858      	ldr	r0, [r3, #4]
 800203a:	4915      	ldr	r1, [pc, #84]	; (8002090 <HAL_I2C_Init+0xa8>)
 800203c:	4301      	orrs	r1, r0
 800203e:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002040:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002042:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002044:	400a      	ands	r2, r1
 8002046:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002048:	6961      	ldr	r1, [r4, #20]
 800204a:	6922      	ldr	r2, [r4, #16]
 800204c:	430a      	orrs	r2, r1
 800204e:	69a1      	ldr	r1, [r4, #24]
 8002050:	0209      	lsls	r1, r1, #8
 8002052:	430a      	orrs	r2, r1
 8002054:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002056:	6a21      	ldr	r1, [r4, #32]
 8002058:	69e2      	ldr	r2, [r4, #28]
 800205a:	430a      	orrs	r2, r1
 800205c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800205e:	2201      	movs	r2, #1
 8002060:	6819      	ldr	r1, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002066:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002068:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800206a:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 800206c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800206e:	3442      	adds	r4, #66	; 0x42
 8002070:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8002072:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002074:	2184      	movs	r1, #132	; 0x84
 8002076:	0209      	lsls	r1, r1, #8
 8002078:	4331      	orrs	r1, r6
 800207a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800207c:	2802      	cmp	r0, #2
 800207e:	d1db      	bne.n	8002038 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002080:	2180      	movs	r1, #128	; 0x80
 8002082:	0109      	lsls	r1, r1, #4
 8002084:	6059      	str	r1, [r3, #4]
 8002086:	e7d7      	b.n	8002038 <HAL_I2C_Init+0x50>
 8002088:	f0ffffff 	.word	0xf0ffffff
 800208c:	ffff7fff 	.word	0xffff7fff
 8002090:	02008000 	.word	0x02008000

08002094 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002094:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002096:	0004      	movs	r4, r0
 8002098:	3441      	adds	r4, #65	; 0x41
 800209a:	7822      	ldrb	r2, [r4, #0]
{
 800209c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800209e:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80020a0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a2:	2a20      	cmp	r2, #32
 80020a4:	d118      	bne.n	80020d8 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 80020a6:	001d      	movs	r5, r3
 80020a8:	3540      	adds	r5, #64	; 0x40
 80020aa:	782e      	ldrb	r6, [r5, #0]
 80020ac:	2e01      	cmp	r6, #1
 80020ae:	d013      	beq.n	80020d8 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 80020b0:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80020b2:	3022      	adds	r0, #34	; 0x22
 80020b4:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 80020b6:	681e      	ldr	r6, [r3, #0]
 80020b8:	3823      	subs	r0, #35	; 0x23
 80020ba:	4386      	bics	r6, r0
 80020bc:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020be:	681e      	ldr	r6, [r3, #0]
 80020c0:	4f06      	ldr	r7, [pc, #24]	; (80020dc <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 80020c2:	403e      	ands	r6, r7
 80020c4:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80020c6:	681e      	ldr	r6, [r3, #0]
 80020c8:	4331      	orrs	r1, r6
 80020ca:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80020cc:	6819      	ldr	r1, [r3, #0]
 80020ce:	4308      	orrs	r0, r1
 80020d0:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80020d2:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80020d4:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80020d6:	7028      	strb	r0, [r5, #0]
  }
}
 80020d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	ffffefff 	.word	0xffffefff

080020e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e2:	0005      	movs	r5, r0
 80020e4:	3541      	adds	r5, #65	; 0x41
 80020e6:	782a      	ldrb	r2, [r5, #0]
{
 80020e8:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ea:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80020ec:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ee:	2a20      	cmp	r2, #32
 80020f0:	d117      	bne.n	8002122 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 80020f2:	001c      	movs	r4, r3
 80020f4:	3440      	adds	r4, #64	; 0x40
 80020f6:	7826      	ldrb	r6, [r4, #0]
 80020f8:	2e01      	cmp	r6, #1
 80020fa:	d012      	beq.n	8002122 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 80020fc:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80020fe:	3022      	adds	r0, #34	; 0x22
 8002100:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002102:	681e      	ldr	r6, [r3, #0]
 8002104:	3823      	subs	r0, #35	; 0x23
 8002106:	4386      	bics	r6, r0
 8002108:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 800210a:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800210c:	4f05      	ldr	r7, [pc, #20]	; (8002124 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 800210e:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8002110:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8002112:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8002114:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002116:	6819      	ldr	r1, [r3, #0]
 8002118:	4308      	orrs	r0, r1
 800211a:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800211c:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800211e:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8002120:	7020      	strb	r0, [r4, #0]
  }
}
 8002122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002124:	fffff0ff 	.word	0xfffff0ff

08002128 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002128:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800212a:	4c10      	ldr	r4, [pc, #64]	; (800216c <HAL_PWREx_ControlVoltageScaling+0x44>)
 800212c:	4910      	ldr	r1, [pc, #64]	; (8002170 <HAL_PWREx_ControlVoltageScaling+0x48>)
 800212e:	6823      	ldr	r3, [r4, #0]
{
 8002130:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002132:	400b      	ands	r3, r1
 8002134:	4303      	orrs	r3, r0
 8002136:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002138:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800213a:	2000      	movs	r0, #0
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	429a      	cmp	r2, r3
 8002140:	d10c      	bne.n	800215c <HAL_PWREx_ControlVoltageScaling+0x34>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002142:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8002144:	490c      	ldr	r1, [pc, #48]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8002146:	6818      	ldr	r0, [r3, #0]
 8002148:	2306      	movs	r3, #6
 800214a:	4358      	muls	r0, r3
 800214c:	f7fd fff4 	bl	8000138 <__udivsi3>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002150:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002152:	1c43      	adds	r3, r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002154:	00d2      	lsls	r2, r2, #3
 8002156:	6960      	ldr	r0, [r4, #20]
 8002158:	4010      	ands	r0, r2
 800215a:	d100      	bne.n	800215e <HAL_PWREx_ControlVoltageScaling+0x36>
}
 800215c:	bd10      	pop	{r4, pc}
      if(wait_loop_index != 0U)
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_PWREx_ControlVoltageScaling+0x3e>
        wait_loop_index--;
 8002162:	3b01      	subs	r3, #1
 8002164:	e7f7      	b.n	8002156 <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 8002166:	2003      	movs	r0, #3
 8002168:	e7f8      	b.n	800215c <HAL_PWREx_ControlVoltageScaling+0x34>
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	40007000 	.word	0x40007000
 8002170:	fffff9ff 	.word	0xfffff9ff
 8002174:	20000004 	.word	0x20000004
 8002178:	000f4240 	.word	0x000f4240

0800217c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800217c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800217e:	0004      	movs	r4, r0
 8002180:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002182:	2800      	cmp	r0, #0
 8002184:	d102      	bne.n	800218c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002186:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8002188:	b005      	add	sp, #20
 800218a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218c:	6803      	ldr	r3, [r0, #0]
 800218e:	07db      	lsls	r3, r3, #31
 8002190:	d410      	bmi.n	80021b4 <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002192:	6823      	ldr	r3, [r4, #0]
 8002194:	079b      	lsls	r3, r3, #30
 8002196:	d45c      	bmi.n	8002252 <HAL_RCC_OscConfig+0xd6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002198:	6823      	ldr	r3, [r4, #0]
 800219a:	071b      	lsls	r3, r3, #28
 800219c:	d500      	bpl.n	80021a0 <HAL_RCC_OscConfig+0x24>
 800219e:	e0c2      	b.n	8002326 <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a0:	6823      	ldr	r3, [r4, #0]
 80021a2:	075b      	lsls	r3, r3, #29
 80021a4:	d500      	bpl.n	80021a8 <HAL_RCC_OscConfig+0x2c>
 80021a6:	e0f4      	b.n	8002392 <HAL_RCC_OscConfig+0x216>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021a8:	69e2      	ldr	r2, [r4, #28]
 80021aa:	2a00      	cmp	r2, #0
 80021ac:	d000      	beq.n	80021b0 <HAL_RCC_OscConfig+0x34>
 80021ae:	e173      	b.n	8002498 <HAL_RCC_OscConfig+0x31c>
  return HAL_OK;
 80021b0:	2000      	movs	r0, #0
 80021b2:	e7e9      	b.n	8002188 <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021b4:	2238      	movs	r2, #56	; 0x38
 80021b6:	4dac      	ldr	r5, [pc, #688]	; (8002468 <HAL_RCC_OscConfig+0x2ec>)
 80021b8:	68ab      	ldr	r3, [r5, #8]
 80021ba:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021bc:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80021be:	2b10      	cmp	r3, #16
 80021c0:	d109      	bne.n	80021d6 <HAL_RCC_OscConfig+0x5a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021c2:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80021c4:	0793      	lsls	r3, r2, #30
 80021c6:	d108      	bne.n	80021da <HAL_RCC_OscConfig+0x5e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c8:	682b      	ldr	r3, [r5, #0]
 80021ca:	039b      	lsls	r3, r3, #14
 80021cc:	d5e1      	bpl.n	8002192 <HAL_RCC_OscConfig+0x16>
 80021ce:	6863      	ldr	r3, [r4, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1de      	bne.n	8002192 <HAL_RCC_OscConfig+0x16>
 80021d4:	e7d7      	b.n	8002186 <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d0f6      	beq.n	80021c8 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021da:	2280      	movs	r2, #128	; 0x80
 80021dc:	6863      	ldr	r3, [r4, #4]
 80021de:	0252      	lsls	r2, r2, #9
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d111      	bne.n	8002208 <HAL_RCC_OscConfig+0x8c>
 80021e4:	682a      	ldr	r2, [r5, #0]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80021ea:	f7ff fb25 	bl	8001838 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ee:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80021f0:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021f2:	02b6      	lsls	r6, r6, #10
 80021f4:	682b      	ldr	r3, [r5, #0]
 80021f6:	4233      	tst	r3, r6
 80021f8:	d1cb      	bne.n	8002192 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021fa:	f7ff fb1d 	bl	8001838 <HAL_GetTick>
 80021fe:	1bc0      	subs	r0, r0, r7
 8002200:	2864      	cmp	r0, #100	; 0x64
 8002202:	d9f7      	bls.n	80021f4 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8002204:	2003      	movs	r0, #3
 8002206:	e7bf      	b.n	8002188 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002208:	21a0      	movs	r1, #160	; 0xa0
 800220a:	02c9      	lsls	r1, r1, #11
 800220c:	428b      	cmp	r3, r1
 800220e:	d108      	bne.n	8002222 <HAL_RCC_OscConfig+0xa6>
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	6829      	ldr	r1, [r5, #0]
 8002214:	02db      	lsls	r3, r3, #11
 8002216:	430b      	orrs	r3, r1
 8002218:	602b      	str	r3, [r5, #0]
 800221a:	682b      	ldr	r3, [r5, #0]
 800221c:	431a      	orrs	r2, r3
 800221e:	602a      	str	r2, [r5, #0]
 8002220:	e7e3      	b.n	80021ea <HAL_RCC_OscConfig+0x6e>
 8002222:	682a      	ldr	r2, [r5, #0]
 8002224:	4991      	ldr	r1, [pc, #580]	; (800246c <HAL_RCC_OscConfig+0x2f0>)
 8002226:	400a      	ands	r2, r1
 8002228:	602a      	str	r2, [r5, #0]
 800222a:	682a      	ldr	r2, [r5, #0]
 800222c:	4990      	ldr	r1, [pc, #576]	; (8002470 <HAL_RCC_OscConfig+0x2f4>)
 800222e:	400a      	ands	r2, r1
 8002230:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1d9      	bne.n	80021ea <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8002236:	f7ff faff 	bl	8001838 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800223a:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800223c:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800223e:	02b6      	lsls	r6, r6, #10
 8002240:	682b      	ldr	r3, [r5, #0]
 8002242:	4233      	tst	r3, r6
 8002244:	d0a5      	beq.n	8002192 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002246:	f7ff faf7 	bl	8001838 <HAL_GetTick>
 800224a:	1bc0      	subs	r0, r0, r7
 800224c:	2864      	cmp	r0, #100	; 0x64
 800224e:	d9f7      	bls.n	8002240 <HAL_RCC_OscConfig+0xc4>
 8002250:	e7d8      	b.n	8002204 <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002252:	2338      	movs	r3, #56	; 0x38
 8002254:	4d84      	ldr	r5, [pc, #528]	; (8002468 <HAL_RCC_OscConfig+0x2ec>)
 8002256:	68aa      	ldr	r2, [r5, #8]
 8002258:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800225a:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800225c:	2b10      	cmp	r3, #16
 800225e:	d129      	bne.n	80022b4 <HAL_RCC_OscConfig+0x138>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002260:	2103      	movs	r1, #3
 8002262:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002264:	2a02      	cmp	r2, #2
 8002266:	d127      	bne.n	80022b8 <HAL_RCC_OscConfig+0x13c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002268:	682a      	ldr	r2, [r5, #0]
 800226a:	0552      	lsls	r2, r2, #21
 800226c:	d503      	bpl.n	8002276 <HAL_RCC_OscConfig+0xfa>
 800226e:	68e2      	ldr	r2, [r4, #12]
 8002270:	2a00      	cmp	r2, #0
 8002272:	d100      	bne.n	8002276 <HAL_RCC_OscConfig+0xfa>
 8002274:	e787      	b.n	8002186 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002276:	6869      	ldr	r1, [r5, #4]
 8002278:	6962      	ldr	r2, [r4, #20]
 800227a:	487e      	ldr	r0, [pc, #504]	; (8002474 <HAL_RCC_OscConfig+0x2f8>)
 800227c:	0212      	lsls	r2, r2, #8
 800227e:	4001      	ands	r1, r0
 8002280:	430a      	orrs	r2, r1
 8002282:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10d      	bne.n	80022a4 <HAL_RCC_OscConfig+0x128>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002288:	682b      	ldr	r3, [r5, #0]
 800228a:	4a7b      	ldr	r2, [pc, #492]	; (8002478 <HAL_RCC_OscConfig+0x2fc>)
 800228c:	4013      	ands	r3, r2
 800228e:	6922      	ldr	r2, [r4, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002294:	682b      	ldr	r3, [r5, #0]
 8002296:	4a79      	ldr	r2, [pc, #484]	; (800247c <HAL_RCC_OscConfig+0x300>)
 8002298:	049b      	lsls	r3, r3, #18
 800229a:	0f5b      	lsrs	r3, r3, #29
 800229c:	40da      	lsrs	r2, r3
 800229e:	0013      	movs	r3, r2
 80022a0:	4a77      	ldr	r2, [pc, #476]	; (8002480 <HAL_RCC_OscConfig+0x304>)
 80022a2:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022a4:	4b77      	ldr	r3, [pc, #476]	; (8002484 <HAL_RCC_OscConfig+0x308>)
 80022a6:	6818      	ldr	r0, [r3, #0]
 80022a8:	f7ff f950 	bl	800154c <HAL_InitTick>
 80022ac:	2800      	cmp	r0, #0
 80022ae:	d100      	bne.n	80022b2 <HAL_RCC_OscConfig+0x136>
 80022b0:	e772      	b.n	8002198 <HAL_RCC_OscConfig+0x1c>
 80022b2:	e768      	b.n	8002186 <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0d7      	beq.n	8002268 <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022b8:	68e3      	ldr	r3, [r4, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d020      	beq.n	8002300 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80022be:	682b      	ldr	r3, [r5, #0]
 80022c0:	4a6d      	ldr	r2, [pc, #436]	; (8002478 <HAL_RCC_OscConfig+0x2fc>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022c2:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80022c4:	4013      	ands	r3, r2
 80022c6:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022c8:	00f6      	lsls	r6, r6, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80022ca:	4313      	orrs	r3, r2
 80022cc:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	682a      	ldr	r2, [r5, #0]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	4313      	orrs	r3, r2
 80022d6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80022d8:	f7ff faae 	bl	8001838 <HAL_GetTick>
 80022dc:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022de:	682b      	ldr	r3, [r5, #0]
 80022e0:	4233      	tst	r3, r6
 80022e2:	d007      	beq.n	80022f4 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e4:	686a      	ldr	r2, [r5, #4]
 80022e6:	6963      	ldr	r3, [r4, #20]
 80022e8:	4962      	ldr	r1, [pc, #392]	; (8002474 <HAL_RCC_OscConfig+0x2f8>)
 80022ea:	021b      	lsls	r3, r3, #8
 80022ec:	400a      	ands	r2, r1
 80022ee:	4313      	orrs	r3, r2
 80022f0:	606b      	str	r3, [r5, #4]
 80022f2:	e751      	b.n	8002198 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f4:	f7ff faa0 	bl	8001838 <HAL_GetTick>
 80022f8:	1bc0      	subs	r0, r0, r7
 80022fa:	2802      	cmp	r0, #2
 80022fc:	d9ef      	bls.n	80022de <HAL_RCC_OscConfig+0x162>
 80022fe:	e781      	b.n	8002204 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8002300:	682b      	ldr	r3, [r5, #0]
 8002302:	4a61      	ldr	r2, [pc, #388]	; (8002488 <HAL_RCC_OscConfig+0x30c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002304:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8002306:	4013      	ands	r3, r2
 8002308:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800230a:	f7ff fa95 	bl	8001838 <HAL_GetTick>
 800230e:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002310:	00f6      	lsls	r6, r6, #3
 8002312:	682b      	ldr	r3, [r5, #0]
 8002314:	4233      	tst	r3, r6
 8002316:	d100      	bne.n	800231a <HAL_RCC_OscConfig+0x19e>
 8002318:	e73e      	b.n	8002198 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231a:	f7ff fa8d 	bl	8001838 <HAL_GetTick>
 800231e:	1bc0      	subs	r0, r0, r7
 8002320:	2802      	cmp	r0, #2
 8002322:	d9f6      	bls.n	8002312 <HAL_RCC_OscConfig+0x196>
 8002324:	e76e      	b.n	8002204 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002326:	2138      	movs	r1, #56	; 0x38
 8002328:	4b4f      	ldr	r3, [pc, #316]	; (8002468 <HAL_RCC_OscConfig+0x2ec>)
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	001d      	movs	r5, r3
 800232e:	400a      	ands	r2, r1
 8002330:	2a18      	cmp	r2, #24
 8002332:	d108      	bne.n	8002346 <HAL_RCC_OscConfig+0x1ca>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002336:	079b      	lsls	r3, r3, #30
 8002338:	d400      	bmi.n	800233c <HAL_RCC_OscConfig+0x1c0>
 800233a:	e731      	b.n	80021a0 <HAL_RCC_OscConfig+0x24>
 800233c:	69a3      	ldr	r3, [r4, #24]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d000      	beq.n	8002344 <HAL_RCC_OscConfig+0x1c8>
 8002342:	e72d      	b.n	80021a0 <HAL_RCC_OscConfig+0x24>
 8002344:	e71f      	b.n	8002186 <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002346:	69a2      	ldr	r2, [r4, #24]
 8002348:	2301      	movs	r3, #1
 800234a:	2a00      	cmp	r2, #0
 800234c:	d010      	beq.n	8002370 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_LSI_ENABLE();
 800234e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002350:	2602      	movs	r6, #2
        __HAL_RCC_LSI_ENABLE();
 8002352:	4313      	orrs	r3, r2
 8002354:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002356:	f7ff fa6f 	bl	8001838 <HAL_GetTick>
 800235a:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800235c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800235e:	4233      	tst	r3, r6
 8002360:	d000      	beq.n	8002364 <HAL_RCC_OscConfig+0x1e8>
 8002362:	e71d      	b.n	80021a0 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002364:	f7ff fa68 	bl	8001838 <HAL_GetTick>
 8002368:	1bc0      	subs	r0, r0, r7
 800236a:	2802      	cmp	r0, #2
 800236c:	d9f6      	bls.n	800235c <HAL_RCC_OscConfig+0x1e0>
 800236e:	e749      	b.n	8002204 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_LSI_DISABLE();
 8002370:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002372:	2602      	movs	r6, #2
        __HAL_RCC_LSI_DISABLE();
 8002374:	439a      	bics	r2, r3
 8002376:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002378:	f7ff fa5e 	bl	8001838 <HAL_GetTick>
 800237c:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800237e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8002380:	4233      	tst	r3, r6
 8002382:	d100      	bne.n	8002386 <HAL_RCC_OscConfig+0x20a>
 8002384:	e70c      	b.n	80021a0 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002386:	f7ff fa57 	bl	8001838 <HAL_GetTick>
 800238a:	1bc0      	subs	r0, r0, r7
 800238c:	2802      	cmp	r0, #2
 800238e:	d9f6      	bls.n	800237e <HAL_RCC_OscConfig+0x202>
 8002390:	e738      	b.n	8002204 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002392:	2138      	movs	r1, #56	; 0x38
 8002394:	4b34      	ldr	r3, [pc, #208]	; (8002468 <HAL_RCC_OscConfig+0x2ec>)
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	001d      	movs	r5, r3
 800239a:	400a      	ands	r2, r1
 800239c:	2a20      	cmp	r2, #32
 800239e:	d108      	bne.n	80023b2 <HAL_RCC_OscConfig+0x236>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80023a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a2:	079b      	lsls	r3, r3, #30
 80023a4:	d400      	bmi.n	80023a8 <HAL_RCC_OscConfig+0x22c>
 80023a6:	e6ff      	b.n	80021a8 <HAL_RCC_OscConfig+0x2c>
 80023a8:	68a3      	ldr	r3, [r4, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d000      	beq.n	80023b0 <HAL_RCC_OscConfig+0x234>
 80023ae:	e6fb      	b.n	80021a8 <HAL_RCC_OscConfig+0x2c>
 80023b0:	e6e9      	b.n	8002186 <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023b2:	2280      	movs	r2, #128	; 0x80
 80023b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b6:	0552      	lsls	r2, r2, #21
 80023b8:	4213      	tst	r3, r2
 80023ba:	d100      	bne.n	80023be <HAL_RCC_OscConfig+0x242>
 80023bc:	e0ed      	b.n	800259a <HAL_RCC_OscConfig+0x41e>
    FlagStatus       pwrclkchanged = RESET;
 80023be:	2300      	movs	r3, #0
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023c0:	2780      	movs	r7, #128	; 0x80
 80023c2:	4e32      	ldr	r6, [pc, #200]	; (800248c <HAL_RCC_OscConfig+0x310>)
    FlagStatus       pwrclkchanged = RESET;
 80023c4:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023c6:	6833      	ldr	r3, [r6, #0]
 80023c8:	007f      	lsls	r7, r7, #1
 80023ca:	423b      	tst	r3, r7
 80023cc:	d015      	beq.n	80023fa <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ce:	68a3      	ldr	r3, [r4, #8]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d122      	bne.n	800241a <HAL_RCC_OscConfig+0x29e>
 80023d4:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80023d6:	4313      	orrs	r3, r2
 80023d8:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 80023da:	f7ff fa2d 	bl	8001838 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023de:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80023e0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023e2:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80023e4:	423b      	tst	r3, r7
 80023e6:	d038      	beq.n	800245a <HAL_RCC_OscConfig+0x2de>
      if (pwrclkchanged == SET)
 80023e8:	9b00      	ldr	r3, [sp, #0]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d000      	beq.n	80023f0 <HAL_RCC_OscConfig+0x274>
 80023ee:	e6db      	b.n	80021a8 <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 80023f0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80023f2:	4a27      	ldr	r2, [pc, #156]	; (8002490 <HAL_RCC_OscConfig+0x314>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	63eb      	str	r3, [r5, #60]	; 0x3c
 80023f8:	e6d6      	b.n	80021a8 <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fa:	6833      	ldr	r3, [r6, #0]
 80023fc:	433b      	orrs	r3, r7
 80023fe:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002400:	f7ff fa1a 	bl	8001838 <HAL_GetTick>
 8002404:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002406:	6833      	ldr	r3, [r6, #0]
 8002408:	423b      	tst	r3, r7
 800240a:	d1e0      	bne.n	80023ce <HAL_RCC_OscConfig+0x252>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240c:	f7ff fa14 	bl	8001838 <HAL_GetTick>
 8002410:	9b01      	ldr	r3, [sp, #4]
 8002412:	1ac0      	subs	r0, r0, r3
 8002414:	2802      	cmp	r0, #2
 8002416:	d9f6      	bls.n	8002406 <HAL_RCC_OscConfig+0x28a>
 8002418:	e6f4      	b.n	8002204 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800241a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800241c:	2b05      	cmp	r3, #5
 800241e:	d105      	bne.n	800242c <HAL_RCC_OscConfig+0x2b0>
 8002420:	3b01      	subs	r3, #1
 8002422:	4313      	orrs	r3, r2
 8002424:	65eb      	str	r3, [r5, #92]	; 0x5c
 8002426:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002428:	2301      	movs	r3, #1
 800242a:	e7d4      	b.n	80023d6 <HAL_RCC_OscConfig+0x25a>
 800242c:	2101      	movs	r1, #1
 800242e:	438a      	bics	r2, r1
 8002430:	65ea      	str	r2, [r5, #92]	; 0x5c
 8002432:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002434:	3103      	adds	r1, #3
 8002436:	438a      	bics	r2, r1
 8002438:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1cd      	bne.n	80023da <HAL_RCC_OscConfig+0x25e>
        tickstart = HAL_GetTick();
 800243e:	f7ff f9fb 	bl	8001838 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002442:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8002444:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002446:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8002448:	423b      	tst	r3, r7
 800244a:	d0cd      	beq.n	80023e8 <HAL_RCC_OscConfig+0x26c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244c:	f7ff f9f4 	bl	8001838 <HAL_GetTick>
 8002450:	4b10      	ldr	r3, [pc, #64]	; (8002494 <HAL_RCC_OscConfig+0x318>)
 8002452:	1b80      	subs	r0, r0, r6
 8002454:	4298      	cmp	r0, r3
 8002456:	d9f6      	bls.n	8002446 <HAL_RCC_OscConfig+0x2ca>
 8002458:	e6d4      	b.n	8002204 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245a:	f7ff f9ed 	bl	8001838 <HAL_GetTick>
 800245e:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <HAL_RCC_OscConfig+0x318>)
 8002460:	1b80      	subs	r0, r0, r6
 8002462:	4298      	cmp	r0, r3
 8002464:	d9bd      	bls.n	80023e2 <HAL_RCC_OscConfig+0x266>
 8002466:	e6cd      	b.n	8002204 <HAL_RCC_OscConfig+0x88>
 8002468:	40021000 	.word	0x40021000
 800246c:	fffeffff 	.word	0xfffeffff
 8002470:	fffbffff 	.word	0xfffbffff
 8002474:	ffff80ff 	.word	0xffff80ff
 8002478:	ffffc7ff 	.word	0xffffc7ff
 800247c:	00f42400 	.word	0x00f42400
 8002480:	20000004 	.word	0x20000004
 8002484:	2000000c 	.word	0x2000000c
 8002488:	fffffeff 	.word	0xfffffeff
 800248c:	40007000 	.word	0x40007000
 8002490:	efffffff 	.word	0xefffffff
 8002494:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002498:	2038      	movs	r0, #56	; 0x38
 800249a:	4b44      	ldr	r3, [pc, #272]	; (80025ac <HAL_RCC_OscConfig+0x430>)
 800249c:	6899      	ldr	r1, [r3, #8]
 800249e:	001d      	movs	r5, r3
 80024a0:	4001      	ands	r1, r0
 80024a2:	2910      	cmp	r1, #16
 80024a4:	d052      	beq.n	800254c <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_DISABLE();
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4941      	ldr	r1, [pc, #260]	; (80025b0 <HAL_RCC_OscConfig+0x434>)
 80024aa:	400b      	ands	r3, r1
 80024ac:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024ae:	2a02      	cmp	r2, #2
 80024b0:	d135      	bne.n	800251e <HAL_RCC_OscConfig+0x3a2>
        tickstart = HAL_GetTick();
 80024b2:	f7ff f9c1 	bl	8001838 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b6:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80024b8:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ba:	04b6      	lsls	r6, r6, #18
 80024bc:	682b      	ldr	r3, [r5, #0]
 80024be:	4233      	tst	r3, r6
 80024c0:	d127      	bne.n	8002512 <HAL_RCC_OscConfig+0x396>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80024c4:	6a23      	ldr	r3, [r4, #32]
 80024c6:	68ea      	ldr	r2, [r5, #12]
 80024c8:	430b      	orrs	r3, r1
 80024ca:	493a      	ldr	r1, [pc, #232]	; (80025b4 <HAL_RCC_OscConfig+0x438>)
 80024cc:	400a      	ands	r2, r1
 80024ce:	4313      	orrs	r3, r2
 80024d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80024d2:	4313      	orrs	r3, r2
 80024d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80024d6:	4313      	orrs	r3, r2
 80024d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024da:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024dc:	0212      	lsls	r2, r2, #8
 80024de:	4313      	orrs	r3, r2
 80024e0:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80024e2:	2380      	movs	r3, #128	; 0x80
 80024e4:	682a      	ldr	r2, [r5, #0]
 80024e6:	045b      	lsls	r3, r3, #17
 80024e8:	4313      	orrs	r3, r2
 80024ea:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	68ea      	ldr	r2, [r5, #12]
 80024f0:	055b      	lsls	r3, r3, #21
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80024f6:	f7ff f99f 	bl	8001838 <HAL_GetTick>
 80024fa:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024fc:	04a4      	lsls	r4, r4, #18
 80024fe:	682b      	ldr	r3, [r5, #0]
 8002500:	4223      	tst	r3, r4
 8002502:	d000      	beq.n	8002506 <HAL_RCC_OscConfig+0x38a>
 8002504:	e654      	b.n	80021b0 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002506:	f7ff f997 	bl	8001838 <HAL_GetTick>
 800250a:	1b80      	subs	r0, r0, r6
 800250c:	2802      	cmp	r0, #2
 800250e:	d9f6      	bls.n	80024fe <HAL_RCC_OscConfig+0x382>
 8002510:	e678      	b.n	8002204 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002512:	f7ff f991 	bl	8001838 <HAL_GetTick>
 8002516:	1bc0      	subs	r0, r0, r7
 8002518:	2802      	cmp	r0, #2
 800251a:	d9cf      	bls.n	80024bc <HAL_RCC_OscConfig+0x340>
 800251c:	e672      	b.n	8002204 <HAL_RCC_OscConfig+0x88>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800251e:	2203      	movs	r2, #3
 8002520:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002522:	2480      	movs	r4, #128	; 0x80
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002524:	4393      	bics	r3, r2
 8002526:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002528:	68eb      	ldr	r3, [r5, #12]
 800252a:	4a23      	ldr	r2, [pc, #140]	; (80025b8 <HAL_RCC_OscConfig+0x43c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800252c:	04a4      	lsls	r4, r4, #18
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800252e:	4013      	ands	r3, r2
 8002530:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8002532:	f7ff f981 	bl	8001838 <HAL_GetTick>
 8002536:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002538:	682b      	ldr	r3, [r5, #0]
 800253a:	4223      	tst	r3, r4
 800253c:	d100      	bne.n	8002540 <HAL_RCC_OscConfig+0x3c4>
 800253e:	e637      	b.n	80021b0 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002540:	f7ff f97a 	bl	8001838 <HAL_GetTick>
 8002544:	1b80      	subs	r0, r0, r6
 8002546:	2802      	cmp	r0, #2
 8002548:	d9f6      	bls.n	8002538 <HAL_RCC_OscConfig+0x3bc>
 800254a:	e65b      	b.n	8002204 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800254c:	2a01      	cmp	r2, #1
 800254e:	d100      	bne.n	8002552 <HAL_RCC_OscConfig+0x3d6>
 8002550:	e619      	b.n	8002186 <HAL_RCC_OscConfig+0xa>
        temp_pllckcfg = RCC->PLLCFGR;
 8002552:	68d8      	ldr	r0, [r3, #12]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002554:	2303      	movs	r3, #3
 8002556:	6a22      	ldr	r2, [r4, #32]
 8002558:	4003      	ands	r3, r0
 800255a:	4293      	cmp	r3, r2
 800255c:	d000      	beq.n	8002560 <HAL_RCC_OscConfig+0x3e4>
 800255e:	e612      	b.n	8002186 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002560:	2370      	movs	r3, #112	; 0x70
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002562:	6a62      	ldr	r2, [r4, #36]	; 0x24
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002564:	4003      	ands	r3, r0
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002566:	4293      	cmp	r3, r2
 8002568:	d000      	beq.n	800256c <HAL_RCC_OscConfig+0x3f0>
 800256a:	e60c      	b.n	8002186 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800256c:	22fe      	movs	r2, #254	; 0xfe
 800256e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002570:	01d2      	lsls	r2, r2, #7
 8002572:	4002      	ands	r2, r0
 8002574:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002576:	429a      	cmp	r2, r3
 8002578:	d000      	beq.n	800257c <HAL_RCC_OscConfig+0x400>
 800257a:	e604      	b.n	8002186 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800257c:	23f8      	movs	r3, #248	; 0xf8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800257e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002580:	039b      	lsls	r3, r3, #14
 8002582:	4003      	ands	r3, r0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002584:	4293      	cmp	r3, r2
 8002586:	d000      	beq.n	800258a <HAL_RCC_OscConfig+0x40e>
 8002588:	e5fd      	b.n	8002186 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800258a:	6b23      	ldr	r3, [r4, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800258c:	0f40      	lsrs	r0, r0, #29
 800258e:	0740      	lsls	r0, r0, #29
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002590:	1ac0      	subs	r0, r0, r3
 8002592:	1e43      	subs	r3, r0, #1
 8002594:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8002596:	b2c0      	uxtb	r0, r0
 8002598:	e5f6      	b.n	8002188 <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_PWR_CLK_ENABLE();
 800259a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800259c:	4313      	orrs	r3, r2
 800259e:	63eb      	str	r3, [r5, #60]	; 0x3c
 80025a0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80025a2:	4013      	ands	r3, r2
 80025a4:	9303      	str	r3, [sp, #12]
 80025a6:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e709      	b.n	80023c0 <HAL_RCC_OscConfig+0x244>
 80025ac:	40021000 	.word	0x40021000
 80025b0:	feffffff 	.word	0xfeffffff
 80025b4:	1fc1808c 	.word	0x1fc1808c
 80025b8:	effeffff 	.word	0xeffeffff

080025bc <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025bc:	2338      	movs	r3, #56	; 0x38
 80025be:	4a1f      	ldr	r2, [pc, #124]	; (800263c <HAL_RCC_GetSysClockFreq+0x80>)
{
 80025c0:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025c2:	6891      	ldr	r1, [r2, #8]
 80025c4:	0014      	movs	r4, r2
 80025c6:	4219      	tst	r1, r3
 80025c8:	d108      	bne.n	80025dc <HAL_RCC_GetSysClockFreq+0x20>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80025ca:	2101      	movs	r1, #1
 80025cc:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80025ce:	481c      	ldr	r0, [pc, #112]	; (8002640 <HAL_RCC_GetSysClockFreq+0x84>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80025d0:	049b      	lsls	r3, r3, #18
 80025d2:	0f5b      	lsrs	r3, r3, #29
 80025d4:	4099      	lsls	r1, r3
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
        break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
    sysclockfreq = pllvco / pllr;
 80025d6:	f7fd fdaf 	bl	8000138 <__udivsi3>
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80025da:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025dc:	6891      	ldr	r1, [r2, #8]
 80025de:	4019      	ands	r1, r3
 80025e0:	2908      	cmp	r1, #8
 80025e2:	d025      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80025e4:	6891      	ldr	r1, [r2, #8]
 80025e6:	4019      	ands	r1, r3
 80025e8:	2910      	cmp	r1, #16
 80025ea:	d115      	bne.n	8002618 <HAL_RCC_GetSysClockFreq+0x5c>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80025ec:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025ee:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80025f0:	43db      	mvns	r3, r3
 80025f2:	227f      	movs	r2, #127	; 0x7f
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025f4:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025f6:	0649      	lsls	r1, r1, #25
 80025f8:	0f49      	lsrs	r1, r1, #29
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025fa:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025fc:	3101      	adds	r1, #1
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025fe:	4015      	ands	r5, r2
    switch (pllsource)
 8002600:	079b      	lsls	r3, r3, #30
 8002602:	d107      	bne.n	8002614 <HAL_RCC_GetSysClockFreq+0x58>
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002604:	480f      	ldr	r0, [pc, #60]	; (8002644 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002606:	f7fd fd97 	bl	8000138 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800260a:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800260c:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800260e:	0f49      	lsrs	r1, r1, #29
 8002610:	3101      	adds	r1, #1
 8002612:	e7e0      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002614:	480a      	ldr	r0, [pc, #40]	; (8002640 <HAL_RCC_GetSysClockFreq+0x84>)
 8002616:	e7f6      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002618:	6891      	ldr	r1, [r2, #8]
 800261a:	4019      	ands	r1, r3
 800261c:	2920      	cmp	r1, #32
 800261e:	d009      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002620:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 8002622:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002624:	4013      	ands	r3, r2
 8002626:	2b18      	cmp	r3, #24
 8002628:	d1d7      	bne.n	80025da <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSI_VALUE;
 800262a:	20fa      	movs	r0, #250	; 0xfa
 800262c:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 800262e:	e7d4      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = HSE_VALUE;
 8002630:	4804      	ldr	r0, [pc, #16]	; (8002644 <HAL_RCC_GetSysClockFreq+0x88>)
 8002632:	e7d2      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSE_VALUE;
 8002634:	2080      	movs	r0, #128	; 0x80
 8002636:	0200      	lsls	r0, r0, #8
 8002638:	e7cf      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x1e>
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	40021000 	.word	0x40021000
 8002640:	00f42400 	.word	0x00f42400
 8002644:	007a1200 	.word	0x007a1200

08002648 <HAL_RCC_ClockConfig>:
{
 8002648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800264a:	0005      	movs	r5, r0
 800264c:	000e      	movs	r6, r1
  if (RCC_ClkInitStruct == NULL)
 800264e:	2800      	cmp	r0, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8002652:	2001      	movs	r0, #1
}
 8002654:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002656:	2707      	movs	r7, #7
 8002658:	4c4a      	ldr	r4, [pc, #296]	; (8002784 <HAL_RCC_ClockConfig+0x13c>)
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	403b      	ands	r3, r7
 800265e:	428b      	cmp	r3, r1
 8002660:	d32a      	bcc.n	80026b8 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002662:	6829      	ldr	r1, [r5, #0]
 8002664:	078b      	lsls	r3, r1, #30
 8002666:	d43b      	bmi.n	80026e0 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002668:	07cb      	lsls	r3, r1, #31
 800266a:	d448      	bmi.n	80026fe <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800266c:	2707      	movs	r7, #7
 800266e:	6823      	ldr	r3, [r4, #0]
 8002670:	403b      	ands	r3, r7
 8002672:	429e      	cmp	r6, r3
 8002674:	d20a      	bcs.n	800268c <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	43bb      	bics	r3, r7
 800267a:	4333      	orrs	r3, r6
 800267c:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800267e:	f7ff f8db 	bl	8001838 <HAL_GetTick>
 8002682:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002684:	6823      	ldr	r3, [r4, #0]
 8002686:	403b      	ands	r3, r7
 8002688:	429e      	cmp	r6, r3
 800268a:	d16b      	bne.n	8002764 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800268c:	682b      	ldr	r3, [r5, #0]
 800268e:	4c3e      	ldr	r4, [pc, #248]	; (8002788 <HAL_RCC_ClockConfig+0x140>)
 8002690:	075b      	lsls	r3, r3, #29
 8002692:	d46f      	bmi.n	8002774 <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002694:	f7ff ff92 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8002698:	68a3      	ldr	r3, [r4, #8]
 800269a:	4a3c      	ldr	r2, [pc, #240]	; (800278c <HAL_RCC_ClockConfig+0x144>)
 800269c:	051b      	lsls	r3, r3, #20
 800269e:	0f1b      	lsrs	r3, r3, #28
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	589b      	ldr	r3, [r3, r2]
 80026a4:	221f      	movs	r2, #31
 80026a6:	4013      	ands	r3, r2
 80026a8:	40d8      	lsrs	r0, r3
 80026aa:	4b39      	ldr	r3, [pc, #228]	; (8002790 <HAL_RCC_ClockConfig+0x148>)
 80026ac:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80026ae:	4b39      	ldr	r3, [pc, #228]	; (8002794 <HAL_RCC_ClockConfig+0x14c>)
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	f7fe ff4b 	bl	800154c <HAL_InitTick>
 80026b6:	e7cd      	b.n	8002654 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b8:	6823      	ldr	r3, [r4, #0]
 80026ba:	43bb      	bics	r3, r7
 80026bc:	430b      	orrs	r3, r1
 80026be:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80026c0:	f7ff f8ba 	bl	8001838 <HAL_GetTick>
 80026c4:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	403b      	ands	r3, r7
 80026ca:	429e      	cmp	r6, r3
 80026cc:	d0c9      	beq.n	8002662 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ce:	f7ff f8b3 	bl	8001838 <HAL_GetTick>
 80026d2:	9b01      	ldr	r3, [sp, #4]
 80026d4:	1ac0      	subs	r0, r0, r3
 80026d6:	4b30      	ldr	r3, [pc, #192]	; (8002798 <HAL_RCC_ClockConfig+0x150>)
 80026d8:	4298      	cmp	r0, r3
 80026da:	d9f4      	bls.n	80026c6 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 80026dc:	2003      	movs	r0, #3
 80026de:	e7b9      	b.n	8002654 <HAL_RCC_ClockConfig+0xc>
 80026e0:	4a29      	ldr	r2, [pc, #164]	; (8002788 <HAL_RCC_ClockConfig+0x140>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e2:	074b      	lsls	r3, r1, #29
 80026e4:	d504      	bpl.n	80026f0 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80026e6:	23e0      	movs	r3, #224	; 0xe0
 80026e8:	6890      	ldr	r0, [r2, #8]
 80026ea:	01db      	lsls	r3, r3, #7
 80026ec:	4303      	orrs	r3, r0
 80026ee:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f0:	6893      	ldr	r3, [r2, #8]
 80026f2:	482a      	ldr	r0, [pc, #168]	; (800279c <HAL_RCC_ClockConfig+0x154>)
 80026f4:	4003      	ands	r3, r0
 80026f6:	68a8      	ldr	r0, [r5, #8]
 80026f8:	4303      	orrs	r3, r0
 80026fa:	6093      	str	r3, [r2, #8]
 80026fc:	e7b4      	b.n	8002668 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fe:	686a      	ldr	r2, [r5, #4]
 8002700:	4f21      	ldr	r7, [pc, #132]	; (8002788 <HAL_RCC_ClockConfig+0x140>)
 8002702:	2a01      	cmp	r2, #1
 8002704:	d119      	bne.n	800273a <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	039b      	lsls	r3, r3, #14
 800270a:	d5a2      	bpl.n	8002652 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800270c:	2107      	movs	r1, #7
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	438b      	bics	r3, r1
 8002712:	4313      	orrs	r3, r2
 8002714:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8002716:	f7ff f88f 	bl	8001838 <HAL_GetTick>
 800271a:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271c:	2338      	movs	r3, #56	; 0x38
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	401a      	ands	r2, r3
 8002722:	686b      	ldr	r3, [r5, #4]
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	429a      	cmp	r2, r3
 8002728:	d0a0      	beq.n	800266c <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800272a:	f7ff f885 	bl	8001838 <HAL_GetTick>
 800272e:	9b01      	ldr	r3, [sp, #4]
 8002730:	1ac0      	subs	r0, r0, r3
 8002732:	4b19      	ldr	r3, [pc, #100]	; (8002798 <HAL_RCC_ClockConfig+0x150>)
 8002734:	4298      	cmp	r0, r3
 8002736:	d9f1      	bls.n	800271c <HAL_RCC_ClockConfig+0xd4>
 8002738:	e7d0      	b.n	80026dc <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800273a:	2a02      	cmp	r2, #2
 800273c:	d103      	bne.n	8002746 <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	019b      	lsls	r3, r3, #6
 8002742:	d4e3      	bmi.n	800270c <HAL_RCC_ClockConfig+0xc4>
 8002744:	e785      	b.n	8002652 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002746:	2a00      	cmp	r2, #0
 8002748:	d103      	bne.n	8002752 <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	055b      	lsls	r3, r3, #21
 800274e:	d4dd      	bmi.n	800270c <HAL_RCC_ClockConfig+0xc4>
 8002750:	e77f      	b.n	8002652 <HAL_RCC_ClockConfig+0xa>
 8002752:	2302      	movs	r3, #2
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002754:	2a03      	cmp	r2, #3
 8002756:	d103      	bne.n	8002760 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002758:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800275a:	4219      	tst	r1, r3
 800275c:	d1d6      	bne.n	800270c <HAL_RCC_ClockConfig+0xc4>
 800275e:	e778      	b.n	8002652 <HAL_RCC_ClockConfig+0xa>
 8002760:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002762:	e7fa      	b.n	800275a <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002764:	f7ff f868 	bl	8001838 <HAL_GetTick>
 8002768:	9b01      	ldr	r3, [sp, #4]
 800276a:	1ac0      	subs	r0, r0, r3
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <HAL_RCC_ClockConfig+0x150>)
 800276e:	4298      	cmp	r0, r3
 8002770:	d988      	bls.n	8002684 <HAL_RCC_ClockConfig+0x3c>
 8002772:	e7b3      	b.n	80026dc <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002774:	68a3      	ldr	r3, [r4, #8]
 8002776:	4a0a      	ldr	r2, [pc, #40]	; (80027a0 <HAL_RCC_ClockConfig+0x158>)
 8002778:	4013      	ands	r3, r2
 800277a:	68ea      	ldr	r2, [r5, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	60a3      	str	r3, [r4, #8]
 8002780:	e788      	b.n	8002694 <HAL_RCC_ClockConfig+0x4c>
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	40022000 	.word	0x40022000
 8002788:	40021000 	.word	0x40021000
 800278c:	08004ac0 	.word	0x08004ac0
 8002790:	20000004 	.word	0x20000004
 8002794:	2000000c 	.word	0x2000000c
 8002798:	00001388 	.word	0x00001388
 800279c:	fffff0ff 	.word	0xfffff0ff
 80027a0:	ffff8fff 	.word	0xffff8fff

080027a4 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80027a4:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80027a6:	4a07      	ldr	r2, [pc, #28]	; (80027c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	045b      	lsls	r3, r3, #17
 80027ac:	0f5b      	lsrs	r3, r3, #29
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	589b      	ldr	r3, [r3, r2]
 80027b2:	221f      	movs	r2, #31
 80027b4:	4013      	ands	r3, r2
 80027b6:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b8:	6810      	ldr	r0, [r2, #0]
 80027ba:	40d8      	lsrs	r0, r3
}
 80027bc:	4770      	bx	lr
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	40021000 	.word	0x40021000
 80027c4:	08004b00 	.word	0x08004b00
 80027c8:	20000004 	.word	0x20000004

080027cc <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80027cc:	2207      	movs	r2, #7
{
 80027ce:	b530      	push	{r4, r5, lr}

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027d0:	25f0      	movs	r5, #240	; 0xf0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <HAL_RCC_GetClockConfig+0x2c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80027d4:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027d6:	689c      	ldr	r4, [r3, #8]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027d8:	012d      	lsls	r5, r5, #4
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027da:	4014      	ands	r4, r2
 80027dc:	6044      	str	r4, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027de:	689c      	ldr	r4, [r3, #8]
 80027e0:	402c      	ands	r4, r5
 80027e2:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80027e4:	24e0      	movs	r4, #224	; 0xe0
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	01e4      	lsls	r4, r4, #7
 80027ea:	4023      	ands	r3, r4
 80027ec:	60c3      	str	r3, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027ee:	4b03      	ldr	r3, [pc, #12]	; (80027fc <HAL_RCC_GetClockConfig+0x30>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4013      	ands	r3, r2
 80027f4:	600b      	str	r3, [r1, #0]
}
 80027f6:	bd30      	pop	{r4, r5, pc}
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40022000 	.word	0x40022000

08002800 <HAL_RCC_EnableCSS>:
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	4a03      	ldr	r2, [pc, #12]	; (8002810 <HAL_RCC_EnableCSS+0x10>)
 8002804:	031b      	lsls	r3, r3, #12
 8002806:	6811      	ldr	r1, [r2, #0]
 8002808:	430b      	orrs	r3, r1
 800280a:	6013      	str	r3, [r2, #0]
}
 800280c:	4770      	bx	lr
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	40021000 	.word	0x40021000

08002814 <HAL_RCC_EnableLSECSS>:
  *         cleared by a backup domain reset.
  * @retval None
  */
void HAL_RCC_EnableLSECSS(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8002814:	2320      	movs	r3, #32
 8002816:	4a02      	ldr	r2, [pc, #8]	; (8002820 <HAL_RCC_EnableLSECSS+0xc>)
 8002818:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 800281a:	430b      	orrs	r3, r1
 800281c:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800281e:	4770      	bx	lr
 8002820:	40021000 	.word	0x40021000

08002824 <HAL_RCC_CSSCallback>:
 8002824:	4770      	bx	lr

08002826 <HAL_RCC_LSECSSCallback>:
__weak void HAL_RCC_LSECSSCallback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_LSECSSCallback should be implemented in the user file
   */
}
 8002826:	4770      	bx	lr

08002828 <HAL_RCC_NMI_IRQHandler>:
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 8002828:	23c0      	movs	r3, #192	; 0xc0
  uint32_t itflag = RCC->CIFR;
 800282a:	4a07      	ldr	r2, [pc, #28]	; (8002848 <HAL_RCC_NMI_IRQHandler+0x20>)
{
 800282c:	b510      	push	{r4, lr}
  uint32_t itflag = RCC->CIFR;
 800282e:	69d4      	ldr	r4, [r2, #28]
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4023      	ands	r3, r4
 8002834:	6213      	str	r3, [r2, #32]
  if ((itflag & RCC_CIFR_CSSF) != 0x00u)
 8002836:	05e3      	lsls	r3, r4, #23
 8002838:	d501      	bpl.n	800283e <HAL_RCC_NMI_IRQHandler+0x16>
    HAL_RCC_CSSCallback();
 800283a:	f7ff fff3 	bl	8002824 <HAL_RCC_CSSCallback>
  if ((itflag & RCC_CIFR_LSECSSF) != 0x00u)
 800283e:	05a3      	lsls	r3, r4, #22
 8002840:	d501      	bpl.n	8002846 <HAL_RCC_NMI_IRQHandler+0x1e>
    HAL_RCC_LSECSSCallback();
 8002842:	f7ff fff0 	bl	8002826 <HAL_RCC_LSECSSCallback>
}
 8002846:	bd10      	pop	{r4, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800284c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800284e:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002850:	682b      	ldr	r3, [r5, #0]
{
 8002852:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002854:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002856:	039b      	lsls	r3, r3, #14
 8002858:	d54f      	bpl.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0xae>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800285a:	2280      	movs	r2, #128	; 0x80
 800285c:	4c4b      	ldr	r4, [pc, #300]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800285e:	0552      	lsls	r2, r2, #21
 8002860:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8002862:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002864:	4213      	tst	r3, r2
 8002866:	d108      	bne.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002868:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800286a:	4313      	orrs	r3, r2
 800286c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800286e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002870:	4013      	ands	r3, r2
 8002872:	9303      	str	r3, [sp, #12]
 8002874:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002876:	2301      	movs	r3, #1
 8002878:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800287a:	2780      	movs	r7, #128	; 0x80
 800287c:	4e44      	ldr	r6, [pc, #272]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800287e:	007f      	lsls	r7, r7, #1
 8002880:	6833      	ldr	r3, [r6, #0]
 8002882:	433b      	orrs	r3, r7
 8002884:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002886:	f7fe ffd7 	bl	8001838 <HAL_GetTick>
 800288a:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800288c:	6833      	ldr	r3, [r6, #0]
 800288e:	423b      	tst	r3, r7
 8002890:	d025      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002892:	23c0      	movs	r3, #192	; 0xc0
 8002894:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800289a:	d00f      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x70>
 800289c:	69aa      	ldr	r2, [r5, #24]
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00c      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x70>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028a2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80028a4:	4b3b      	ldr	r3, [pc, #236]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x148>)
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028a6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028a8:	4013      	ands	r3, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 80028aa:	2280      	movs	r2, #128	; 0x80
 80028ac:	0252      	lsls	r2, r2, #9
 80028ae:	430a      	orrs	r2, r1
 80028b0:	65e2      	str	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028b2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80028b4:	4938      	ldr	r1, [pc, #224]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80028b6:	400a      	ands	r2, r1
 80028b8:	65e2      	str	r2, [r4, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028ba:	65e3      	str	r3, [r4, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028bc:	07db      	lsls	r3, r3, #31
 80028be:	d506      	bpl.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c0:	f7fe ffba 	bl	8001838 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c4:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80028c6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80028ca:	423b      	tst	r3, r7
 80028cc:	d057      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x132>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80028d0:	4a30      	ldr	r2, [pc, #192]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x148>)
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028d2:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028d4:	4013      	ands	r3, r2
 80028d6:	69aa      	ldr	r2, [r5, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	65e3      	str	r3, [r4, #92]	; 0x5c
 80028dc:	e006      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028de:	f7fe ffab 	bl	8001838 <HAL_GetTick>
 80028e2:	9b01      	ldr	r3, [sp, #4]
 80028e4:	1ac0      	subs	r0, r0, r3
 80028e6:	2802      	cmp	r0, #2
 80028e8:	d9d0      	bls.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 80028ea:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028ec:	9b00      	ldr	r3, [sp, #0]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d103      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80028f4:	4a29      	ldr	r2, [pc, #164]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028fa:	682a      	ldr	r2, [r5, #0]
 80028fc:	07d3      	lsls	r3, r2, #31
 80028fe:	d506      	bpl.n	800290e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002900:	2403      	movs	r4, #3
 8002902:	4922      	ldr	r1, [pc, #136]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002904:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8002906:	43a3      	bics	r3, r4
 8002908:	686c      	ldr	r4, [r5, #4]
 800290a:	4323      	orrs	r3, r4
 800290c:	654b      	str	r3, [r1, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800290e:	0793      	lsls	r3, r2, #30
 8002910:	d506      	bpl.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002912:	240c      	movs	r4, #12
 8002914:	491d      	ldr	r1, [pc, #116]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002916:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8002918:	43a3      	bics	r3, r4
 800291a:	68ac      	ldr	r4, [r5, #8]
 800291c:	4323      	orrs	r3, r4
 800291e:	654b      	str	r3, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002920:	0653      	lsls	r3, r2, #25
 8002922:	d506      	bpl.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002924:	4919      	ldr	r1, [pc, #100]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002926:	4c1e      	ldr	r4, [pc, #120]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002928:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800292a:	4023      	ands	r3, r4
 800292c:	68ec      	ldr	r4, [r5, #12]
 800292e:	4323      	orrs	r3, r4
 8002930:	654b      	str	r3, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002932:	0453      	lsls	r3, r2, #17
 8002934:	d50f      	bpl.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002936:	4915      	ldr	r1, [pc, #84]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002938:	696c      	ldr	r4, [r5, #20]
 800293a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	089b      	lsrs	r3, r3, #2
 8002940:	4323      	orrs	r3, r4
 8002942:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	05db      	lsls	r3, r3, #23
 8002948:	429c      	cmp	r4, r3
 800294a:	d104      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	68cc      	ldr	r4, [r1, #12]
 8002950:	025b      	lsls	r3, r3, #9
 8002952:	4323      	orrs	r3, r4
 8002954:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002956:	0513      	lsls	r3, r2, #20
 8002958:	d50f      	bpl.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800295a:	490c      	ldr	r1, [pc, #48]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800295c:	4c11      	ldr	r4, [pc, #68]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800295e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8002960:	692a      	ldr	r2, [r5, #16]
 8002962:	4023      	ands	r3, r4
 8002964:	4313      	orrs	r3, r2
 8002966:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	01db      	lsls	r3, r3, #7
 800296c:	429a      	cmp	r2, r3
 800296e:	d104      	bne.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x12e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002970:	2380      	movs	r3, #128	; 0x80
 8002972:	68ca      	ldr	r2, [r1, #12]
 8002974:	025b      	lsls	r3, r3, #9
 8002976:	4313      	orrs	r3, r2
 8002978:	60cb      	str	r3, [r1, #12]
    }
  }

  return status;
}
 800297a:	b005      	add	sp, #20
 800297c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297e:	f7fe ff5b 	bl	8001838 <HAL_GetTick>
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002984:	1b80      	subs	r0, r0, r6
 8002986:	4298      	cmp	r0, r3
 8002988:	d99e      	bls.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800298a:	e7ae      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800298c:	40021000 	.word	0x40021000
 8002990:	40007000 	.word	0x40007000
 8002994:	fffffcff 	.word	0xfffffcff
 8002998:	fffeffff 	.word	0xfffeffff
 800299c:	efffffff 	.word	0xefffffff
 80029a0:	ffffcfff 	.word	0xffffcfff
 80029a4:	ffff3fff 	.word	0xffff3fff
 80029a8:	00001388 	.word	0x00001388

080029ac <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80029ac:	21a0      	movs	r1, #160	; 0xa0
 80029ae:	6802      	ldr	r2, [r0, #0]
{
 80029b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80029b2:	68d3      	ldr	r3, [r2, #12]
{
 80029b4:	0004      	movs	r4, r0
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80029b6:	438b      	bics	r3, r1
 80029b8:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80029ba:	f7fe ff3d 	bl	8001838 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80029be:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 80029c0:	0006      	movs	r6, r0
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80029c2:	2520      	movs	r5, #32
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80029c4:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	422b      	tst	r3, r5
 80029cc:	d001      	beq.n	80029d2 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80029ce:	2000      	movs	r0, #0
}
 80029d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80029d2:	f7fe ff31 	bl	8001838 <HAL_GetTick>
 80029d6:	1b80      	subs	r0, r0, r6
 80029d8:	42b8      	cmp	r0, r7
 80029da:	d9f4      	bls.n	80029c6 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 80029dc:	2003      	movs	r0, #3
 80029de:	e7f7      	b.n	80029d0 <HAL_RTC_WaitForSynchro+0x24>

080029e0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80029e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80029e2:	2740      	movs	r7, #64	; 0x40
 80029e4:	6803      	ldr	r3, [r0, #0]
{
 80029e6:	0005      	movs	r5, r0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80029e8:	68da      	ldr	r2, [r3, #12]
  HAL_StatusTypeDef status = HAL_OK;  
 80029ea:	2400      	movs	r4, #0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80029ec:	423a      	tst	r2, r7
 80029ee:	d10c      	bne.n	8002a0a <RTC_EnterInitMode+0x2a>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80029f0:	2280      	movs	r2, #128	; 0x80
 80029f2:	68d9      	ldr	r1, [r3, #12]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80029f8:	f7fe ff1e 	bl	8001838 <HAL_GetTick>
 80029fc:	0006      	movs	r6, r0
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80029fe:	682b      	ldr	r3, [r5, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	423b      	tst	r3, r7
 8002a04:	d101      	bne.n	8002a0a <RTC_EnterInitMode+0x2a>
 8002a06:	2c03      	cmp	r4, #3
 8002a08:	d101      	bne.n	8002a0e <RTC_EnterInitMode+0x2e>
      }
    }
  }

  return status;
}
 8002a0a:	0020      	movs	r0, r4
 8002a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002a0e:	f7fe ff13 	bl	8001838 <HAL_GetTick>
 8002a12:	23fa      	movs	r3, #250	; 0xfa
 8002a14:	1b80      	subs	r0, r0, r6
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4298      	cmp	r0, r3
 8002a1a:	d9f0      	bls.n	80029fe <RTC_EnterInitMode+0x1e>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a1c:	002b      	movs	r3, r5
 8002a1e:	2403      	movs	r4, #3
 8002a20:	3329      	adds	r3, #41	; 0x29
 8002a22:	701c      	strb	r4, [r3, #0]
 8002a24:	e7eb      	b.n	80029fe <RTC_EnterInitMode+0x1e>
	...

08002a28 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002a28:	2280      	movs	r2, #128	; 0x80
{
 8002a2a:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002a2c:	4c0f      	ldr	r4, [pc, #60]	; (8002a6c <RTC_ExitInitMode+0x44>)
{
 8002a2e:	0005      	movs	r5, r0
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002a30:	68e3      	ldr	r3, [r4, #12]
 8002a32:	4393      	bics	r3, r2
 8002a34:	60e3      	str	r3, [r4, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002a36:	69a3      	ldr	r3, [r4, #24]
 8002a38:	3a60      	subs	r2, #96	; 0x60
 8002a3a:	4213      	tst	r3, r2
 8002a3c:	d107      	bne.n	8002a4e <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a3e:	f7ff ffb5 	bl	80029ac <HAL_RTC_WaitForSynchro>
 8002a42:	2800      	cmp	r0, #0
 8002a44:	d002      	beq.n	8002a4c <RTC_ExitInitMode+0x24>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a46:	2003      	movs	r0, #3
 8002a48:	3529      	adds	r5, #41	; 0x29
 8002a4a:	7028      	strb	r0, [r5, #0]
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 8002a4c:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002a4e:	69a3      	ldr	r3, [r4, #24]
 8002a50:	4393      	bics	r3, r2
 8002a52:	61a3      	str	r3, [r4, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a54:	f7ff ffaa 	bl	80029ac <HAL_RTC_WaitForSynchro>
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	d002      	beq.n	8002a62 <RTC_ExitInitMode+0x3a>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a5c:	2003      	movs	r0, #3
 8002a5e:	3529      	adds	r5, #41	; 0x29
 8002a60:	7028      	strb	r0, [r5, #0]
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002a62:	2320      	movs	r3, #32
 8002a64:	69a2      	ldr	r2, [r4, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61a3      	str	r3, [r4, #24]
 8002a6a:	e7ef      	b.n	8002a4c <RTC_ExitInitMode+0x24>
 8002a6c:	40002800 	.word	0x40002800

08002a70 <HAL_RTC_Init>:
{
 8002a70:	b570      	push	{r4, r5, r6, lr}
 8002a72:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a74:	2001      	movs	r0, #1
  if(hrtc != NULL)
 8002a76:	2c00      	cmp	r4, #0
 8002a78:	d047      	beq.n	8002b0a <HAL_RTC_Init+0x9a>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002a7a:	0025      	movs	r5, r4
 8002a7c:	3529      	adds	r5, #41	; 0x29
 8002a7e:	782b      	ldrb	r3, [r5, #0]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d108      	bne.n	8002a98 <HAL_RTC_Init+0x28>
    hrtc->Lock = HAL_UNLOCKED;
 8002a86:	0022      	movs	r2, r4
 8002a88:	3228      	adds	r2, #40	; 0x28
 8002a8a:	7013      	strb	r3, [r2, #0]
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002a8c:	2388      	movs	r3, #136	; 0x88
 8002a8e:	021b      	lsls	r3, r3, #8
 8002a90:	6063      	str	r3, [r4, #4]
    HAL_RTC_MspInit(hrtc);
 8002a92:	0020      	movs	r0, r4
 8002a94:	f7fe fbf2 	bl	800127c <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002a98:	2302      	movs	r3, #2
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a9a:	22ca      	movs	r2, #202	; 0xca
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002a9c:	702b      	strb	r3, [r5, #0]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a9e:	6823      	ldr	r3, [r4, #0]
    status = RTC_EnterInitMode(hrtc);
 8002aa0:	0020      	movs	r0, r4
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002aa2:	625a      	str	r2, [r3, #36]	; 0x24
 8002aa4:	3a77      	subs	r2, #119	; 0x77
 8002aa6:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8002aa8:	f7ff ff9a 	bl	80029e0 <RTC_EnterInitMode>
    if(status == HAL_OK)
 8002aac:	2800      	cmp	r0, #0
 8002aae:	d125      	bne.n	8002afc <HAL_RTC_Init+0x8c>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002ab0:	6823      	ldr	r3, [r4, #0]
 8002ab2:	4916      	ldr	r1, [pc, #88]	; (8002b0c <HAL_RTC_Init+0x9c>)
 8002ab4:	699a      	ldr	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ab6:	6960      	ldr	r0, [r4, #20]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002ab8:	400a      	ands	r2, r1
 8002aba:	619a      	str	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002abc:	68a2      	ldr	r2, [r4, #8]
 8002abe:	6999      	ldr	r1, [r3, #24]
 8002ac0:	4302      	orrs	r2, r0
 8002ac2:	69e0      	ldr	r0, [r4, #28]
 8002ac4:	4302      	orrs	r2, r0
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	619a      	str	r2, [r3, #24]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002aca:	6922      	ldr	r2, [r4, #16]
      status = RTC_ExitInitMode(hrtc);
 8002acc:	0020      	movs	r0, r4
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002ace:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002ad0:	68e2      	ldr	r2, [r4, #12]
 8002ad2:	6919      	ldr	r1, [r3, #16]
 8002ad4:	0412      	lsls	r2, r2, #16
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8002ada:	f7ff ffa5 	bl	8002a28 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8002ade:	2800      	cmp	r0, #0
 8002ae0:	d10c      	bne.n	8002afc <HAL_RTC_Init+0x8c>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002ae2:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002ae4:	6a26      	ldr	r6, [r4, #32]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002ae6:	6993      	ldr	r3, [r2, #24]
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	08db      	lsrs	r3, r3, #3
 8002aec:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002aee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002af0:	6991      	ldr	r1, [r2, #24]
 8002af2:	4333      	orrs	r3, r6
 8002af4:	69a6      	ldr	r6, [r4, #24]
 8002af6:	4333      	orrs	r3, r6
 8002af8:	430b      	orrs	r3, r1
 8002afa:	6193      	str	r3, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002afc:	22ff      	movs	r2, #255	; 0xff
 8002afe:	6823      	ldr	r3, [r4, #0]
 8002b00:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8002b02:	2800      	cmp	r0, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RTC_Init+0x9a>
      hrtc->State = HAL_RTC_STATE_READY;
 8002b06:	2301      	movs	r3, #1
 8002b08:	702b      	strb	r3, [r5, #0]
}
 8002b0a:	bd70      	pop	{r4, r5, r6, pc}
 8002b0c:	fb8fffbf 	.word	0xfb8fffbf

08002b10 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b10:	21e0      	movs	r1, #224	; 0xe0
 8002b12:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002b14:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	438a      	bics	r2, r1
 8002b1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b1c:	2282      	movs	r2, #130	; 0x82
 8002b1e:	6841      	ldr	r1, [r0, #4]
 8002b20:	0052      	lsls	r2, r2, #1
 8002b22:	4291      	cmp	r1, r2
 8002b24:	d10c      	bne.n	8002b40 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
 8002b26:	2180      	movs	r1, #128	; 0x80
 8002b28:	6882      	ldr	r2, [r0, #8]
 8002b2a:	0209      	lsls	r1, r1, #8
 8002b2c:	428a      	cmp	r2, r1
 8002b2e:	d003      	beq.n	8002b38 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b30:	2180      	movs	r1, #128	; 0x80
 8002b32:	00c9      	lsls	r1, r1, #3
 8002b34:	428a      	cmp	r2, r1
 8002b36:	d103      	bne.n	8002b40 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b38:	2140      	movs	r1, #64	; 0x40
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	438a      	bics	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b40:	2180      	movs	r1, #128	; 0x80
 8002b42:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002b44:	0189      	lsls	r1, r1, #6
 8002b46:	428a      	cmp	r2, r1
 8002b48:	d106      	bne.n	8002b58 <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
        {
          SPI_RESET_CRC(hspi);
 8002b4a:	6819      	ldr	r1, [r3, #0]
 8002b4c:	4c07      	ldr	r4, [pc, #28]	; (8002b6c <SPI_WaitFifoStateUntilTimeout.part.1+0x5c>)
 8002b4e:	4021      	ands	r1, r4
 8002b50:	6019      	str	r1, [r3, #0]
 8002b52:	6819      	ldr	r1, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b58:	0003      	movs	r3, r0
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	335d      	adds	r3, #93	; 0x5d
 8002b5e:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b60:	2300      	movs	r3, #0
 8002b62:	305c      	adds	r0, #92	; 0x5c
 8002b64:	7003      	strb	r3, [r0, #0]
      }
    }
  }

  return HAL_OK;
}
 8002b66:	2003      	movs	r0, #3
 8002b68:	bd10      	pop	{r4, pc}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	ffffdfff 	.word	0xffffdfff

08002b70 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b72:	0004      	movs	r4, r0
 8002b74:	000d      	movs	r5, r1
 8002b76:	0017      	movs	r7, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b78:	2680      	movs	r6, #128	; 0x80
 8002b7a:	6823      	ldr	r3, [r4, #0]
 8002b7c:	6898      	ldr	r0, [r3, #8]
 8002b7e:	4030      	ands	r0, r6
 8002b80:	d009      	beq.n	8002b96 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x26>
    if (Timeout != HAL_MAX_DELAY)
 8002b82:	1c6a      	adds	r2, r5, #1
 8002b84:	d0fa      	beq.n	8002b7c <SPI_WaitFlagStateUntilTimeout.constprop.10+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002b86:	f7fe fe57 	bl	8001838 <HAL_GetTick>
 8002b8a:	1bc0      	subs	r0, r0, r7
 8002b8c:	4285      	cmp	r5, r0
 8002b8e:	d8f4      	bhi.n	8002b7a <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
 8002b90:	0020      	movs	r0, r4
 8002b92:	f7ff ffbd 	bl	8002b10 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8002b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002b98 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002b9a:	27c0      	movs	r7, #192	; 0xc0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002b9c:	0005      	movs	r5, r0
 8002b9e:	000c      	movs	r4, r1
 8002ba0:	0016      	movs	r6, r2
 8002ba2:	9301      	str	r3, [sp, #4]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002ba4:	00ff      	lsls	r7, r7, #3
  while ((hspi->Instance->SR & Fifo) != State)
 8002ba6:	682b      	ldr	r3, [r5, #0]
 8002ba8:	6898      	ldr	r0, [r3, #8]
 8002baa:	4020      	ands	r0, r4
 8002bac:	d00d      	beq.n	8002bca <SPI_WaitFifoStateUntilTimeout.constprop.11+0x32>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002bae:	42bc      	cmp	r4, r7
 8002bb0:	d100      	bne.n	8002bb4 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x1c>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002bb2:	7b1a      	ldrb	r2, [r3, #12]
    if (Timeout != HAL_MAX_DELAY)
 8002bb4:	1c72      	adds	r2, r6, #1
 8002bb6:	d0f7      	beq.n	8002ba8 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x10>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002bb8:	f7fe fe3e 	bl	8001838 <HAL_GetTick>
 8002bbc:	9b01      	ldr	r3, [sp, #4]
 8002bbe:	1ac0      	subs	r0, r0, r3
 8002bc0:	4286      	cmp	r6, r0
 8002bc2:	d8f0      	bhi.n	8002ba6 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xe>
 8002bc4:	0028      	movs	r0, r5
 8002bc6:	f7ff ffa3 	bl	8002b10 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8002bca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08002bcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bcc:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002bce:	0013      	movs	r3, r2
{
 8002bd0:	000d      	movs	r5, r1
 8002bd2:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002bd4:	000a      	movs	r2, r1
 8002bd6:	21c0      	movs	r1, #192	; 0xc0
 8002bd8:	0149      	lsls	r1, r1, #5
{
 8002bda:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002bdc:	f7ff ffdc 	bl	8002b98 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8002be0:	2800      	cmp	r0, #0
 8002be2:	d005      	beq.n	8002bf0 <SPI_EndRxTxTransaction+0x24>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002be4:	2320      	movs	r3, #32
 8002be6:	6e22      	ldr	r2, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8002be8:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bea:	4313      	orrs	r3, r2
 8002bec:	6623      	str	r3, [r4, #96]	; 0x60
 8002bee:	e00f      	b.n	8002c10 <SPI_EndRxTxTransaction+0x44>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf0:	0032      	movs	r2, r6
 8002bf2:	0029      	movs	r1, r5
 8002bf4:	0020      	movs	r0, r4
 8002bf6:	f7ff ffbb 	bl	8002b70 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8002bfa:	2800      	cmp	r0, #0
 8002bfc:	d1f2      	bne.n	8002be4 <SPI_EndRxTxTransaction+0x18>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002bfe:	21c0      	movs	r1, #192	; 0xc0
 8002c00:	0033      	movs	r3, r6
 8002c02:	002a      	movs	r2, r5
 8002c04:	00c9      	lsls	r1, r1, #3
 8002c06:	0020      	movs	r0, r4
 8002c08:	f7ff ffc6 	bl	8002b98 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8002c0c:	2800      	cmp	r0, #0
 8002c0e:	d1e9      	bne.n	8002be4 <SPI_EndRxTxTransaction+0x18>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8002c10:	bd70      	pop	{r4, r5, r6, pc}
	...

08002c14 <HAL_SPI_Init>:
{
 8002c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c16:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002c18:	2001      	movs	r0, #1
  if (hspi == NULL)
 8002c1a:	2c00      	cmp	r4, #0
 8002c1c:	d04b      	beq.n	8002cb6 <HAL_SPI_Init+0xa2>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c1e:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c20:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c22:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c24:	355d      	adds	r5, #93	; 0x5d
 8002c26:	782b      	ldrb	r3, [r5, #0]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d105      	bne.n	8002c3a <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 8002c2e:	0022      	movs	r2, r4
 8002c30:	325c      	adds	r2, #92	; 0x5c
 8002c32:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8002c34:	0020      	movs	r0, r4
 8002c36:	f7fe fb3b 	bl	80012b0 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002c3a:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002c3c:	2240      	movs	r2, #64	; 0x40
 8002c3e:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002c40:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8002c42:	680b      	ldr	r3, [r1, #0]
 8002c44:	2000      	movs	r0, #0
 8002c46:	4393      	bics	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]
 8002c4a:	23e0      	movs	r3, #224	; 0xe0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c4c:	68e2      	ldr	r2, [r4, #12]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d931      	bls.n	8002cb8 <HAL_SPI_Init+0xa4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c54:	26f0      	movs	r6, #240	; 0xf0
 8002c56:	0136      	lsls	r6, r6, #4
 8002c58:	42b2      	cmp	r2, r6
 8002c5a:	d133      	bne.n	8002cc4 <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c5c:	0006      	movs	r6, r0
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002c5e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002c60:	2800      	cmp	r0, #0
 8002c62:	d103      	bne.n	8002c6c <HAL_SPI_Init+0x58>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d92f      	bls.n	8002cc8 <HAL_SPI_Init+0xb4>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002c68:	2302      	movs	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002c6a:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002c6c:	68a7      	ldr	r7, [r4, #8]
 8002c6e:	6863      	ldr	r3, [r4, #4]
 8002c70:	69a0      	ldr	r0, [r4, #24]
 8002c72:	433b      	orrs	r3, r7
 8002c74:	6927      	ldr	r7, [r4, #16]
 8002c76:	433b      	orrs	r3, r7
 8002c78:	6967      	ldr	r7, [r4, #20]
 8002c7a:	433b      	orrs	r3, r7
 8002c7c:	69e7      	ldr	r7, [r4, #28]
 8002c7e:	433b      	orrs	r3, r7
 8002c80:	6a27      	ldr	r7, [r4, #32]
 8002c82:	433b      	orrs	r3, r7
 8002c84:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8002c86:	433b      	orrs	r3, r7
 8002c88:	2780      	movs	r7, #128	; 0x80
 8002c8a:	00bf      	lsls	r7, r7, #2
 8002c8c:	4007      	ands	r7, r0
 8002c8e:	433b      	orrs	r3, r7
 8002c90:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c94:	0c00      	lsrs	r0, r0, #16
 8002c96:	431a      	orrs	r2, r3
 8002c98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	2304      	movs	r3, #4
 8002c9e:	4018      	ands	r0, r3
 8002ca0:	4310      	orrs	r0, r2
 8002ca2:	4306      	orrs	r6, r0
 8002ca4:	604e      	str	r6, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ca6:	69cb      	ldr	r3, [r1, #28]
 8002ca8:	4a08      	ldr	r2, [pc, #32]	; (8002ccc <HAL_SPI_Init+0xb8>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002caa:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cac:	4013      	ands	r3, r2
 8002cae:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002cb0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cb2:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002cb4:	702b      	strb	r3, [r5, #0]
}
 8002cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002cb8:	2680      	movs	r6, #128	; 0x80
 8002cba:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d0ce      	beq.n	8002c5e <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cc0:	62a0      	str	r0, [r4, #40]	; 0x28
 8002cc2:	e7cc      	b.n	8002c5e <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002cc4:	0006      	movs	r6, r0
 8002cc6:	e7fb      	b.n	8002cc0 <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e7ce      	b.n	8002c6a <HAL_SPI_Init+0x56>
 8002ccc:	fffff7ff 	.word	0xfffff7ff

08002cd0 <HAL_SPI_DeInit>:
{
 8002cd0:	b570      	push	{r4, r5, r6, lr}
 8002cd2:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002cd4:	2001      	movs	r0, #1
  if (hspi == NULL)
 8002cd6:	2c00      	cmp	r4, #0
 8002cd8:	d010      	beq.n	8002cfc <HAL_SPI_DeInit+0x2c>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002cda:	0025      	movs	r5, r4
 8002cdc:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002cde:	2140      	movs	r1, #64	; 0x40
 8002ce0:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002ce2:	355d      	adds	r5, #93	; 0x5d
 8002ce4:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8002ce6:	6813      	ldr	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8002ce8:	0020      	movs	r0, r4
  __HAL_SPI_DISABLE(hspi);
 8002cea:	438b      	bics	r3, r1
 8002cec:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8002cee:	f7fe fb45 	bl	800137c <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cf2:	2000      	movs	r0, #0
  __HAL_UNLOCK(hspi);
 8002cf4:	345c      	adds	r4, #92	; 0x5c
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cf6:	6060      	str	r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_RESET;
 8002cf8:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hspi);
 8002cfa:	7020      	strb	r0, [r4, #0]
}
 8002cfc:	bd70      	pop	{r4, r5, r6, pc}
	...

08002d00 <HAL_SPI_TransmitReceive>:
{
 8002d00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d02:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8002d04:	0003      	movs	r3, r0
{
 8002d06:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hspi);
 8002d08:	335c      	adds	r3, #92	; 0x5c
 8002d0a:	781a      	ldrb	r2, [r3, #0]
{
 8002d0c:	0004      	movs	r4, r0
 8002d0e:	000f      	movs	r7, r1
  __HAL_LOCK(hspi);
 8002d10:	2502      	movs	r5, #2
 8002d12:	2a01      	cmp	r2, #1
 8002d14:	d100      	bne.n	8002d18 <HAL_SPI_TransmitReceive+0x18>
 8002d16:	e0ac      	b.n	8002e72 <HAL_SPI_TransmitReceive+0x172>
 8002d18:	2201      	movs	r2, #1
 8002d1a:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002d1c:	f7fe fd8c 	bl	8001838 <HAL_GetTick>
  tmp_state           = hspi->State;
 8002d20:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8002d22:	9000      	str	r0, [sp, #0]
  tmp_state           = hspi->State;
 8002d24:	335d      	adds	r3, #93	; 0x5d
 8002d26:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002d28:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8002d2a:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d00b      	beq.n	8002d48 <HAL_SPI_TransmitReceive+0x48>
 8002d30:	2282      	movs	r2, #130	; 0x82
 8002d32:	0052      	lsls	r2, r2, #1
 8002d34:	4291      	cmp	r1, r2
 8002d36:	d000      	beq.n	8002d3a <HAL_SPI_TransmitReceive+0x3a>
 8002d38:	e094      	b.n	8002e64 <HAL_SPI_TransmitReceive+0x164>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d3a:	68a2      	ldr	r2, [r4, #8]
 8002d3c:	2a00      	cmp	r2, #0
 8002d3e:	d000      	beq.n	8002d42 <HAL_SPI_TransmitReceive+0x42>
 8002d40:	e090      	b.n	8002e64 <HAL_SPI_TransmitReceive+0x164>
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d000      	beq.n	8002d48 <HAL_SPI_TransmitReceive+0x48>
 8002d46:	e08d      	b.n	8002e64 <HAL_SPI_TransmitReceive+0x164>
    errorcode = HAL_ERROR;
 8002d48:	2501      	movs	r5, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d4a:	2f00      	cmp	r7, #0
 8002d4c:	d100      	bne.n	8002d50 <HAL_SPI_TransmitReceive+0x50>
 8002d4e:	e089      	b.n	8002e64 <HAL_SPI_TransmitReceive+0x164>
 8002d50:	9b01      	ldr	r3, [sp, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d100      	bne.n	8002d58 <HAL_SPI_TransmitReceive+0x58>
 8002d56:	e085      	b.n	8002e64 <HAL_SPI_TransmitReceive+0x164>
 8002d58:	2e00      	cmp	r6, #0
 8002d5a:	d100      	bne.n	8002d5e <HAL_SPI_TransmitReceive+0x5e>
 8002d5c:	e082      	b.n	8002e64 <HAL_SPI_TransmitReceive+0x164>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d5e:	0023      	movs	r3, r4
 8002d60:	335d      	adds	r3, #93	; 0x5d
 8002d62:	781a      	ldrb	r2, [r3, #0]
 8002d64:	2a04      	cmp	r2, #4
 8002d66:	d001      	beq.n	8002d6c <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d68:	2205      	movs	r2, #5
 8002d6a:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d6c:	9a01      	ldr	r2, [sp, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d6e:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d70:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002d72:	0022      	movs	r2, r4
 8002d74:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d76:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8002d78:	87d6      	strh	r6, [r2, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002d7a:	1da2      	adds	r2, r4, #6
 8002d7c:	87d6      	strh	r6, [r2, #62]	; 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002d7e:	22e0      	movs	r2, #224	; 0xe0
 8002d80:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 8002d82:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002d84:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d86:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002d88:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002d8a:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002d8c:	00d2      	lsls	r2, r2, #3
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	4290      	cmp	r0, r2
 8002d92:	d801      	bhi.n	8002d98 <HAL_SPI_TransmitReceive+0x98>
 8002d94:	2e01      	cmp	r6, #1
 8002d96:	d931      	bls.n	8002dfc <HAL_SPI_TransmitReceive+0xfc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	4d71      	ldr	r5, [pc, #452]	; (8002f60 <HAL_SPI_TransmitReceive+0x260>)
 8002d9c:	402a      	ands	r2, r5
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d9e:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002da0:	2240      	movs	r2, #64	; 0x40
 8002da2:	6823      	ldr	r3, [r4, #0]
 8002da4:	681d      	ldr	r5, [r3, #0]
 8002da6:	4215      	tst	r5, r2
 8002da8:	d102      	bne.n	8002db0 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8002daa:	681d      	ldr	r5, [r3, #0]
 8002dac:	432a      	orrs	r2, r5
 8002dae:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002db0:	22e0      	movs	r2, #224	; 0xe0
 8002db2:	00d2      	lsls	r2, r2, #3
 8002db4:	4290      	cmp	r0, r2
 8002db6:	d95e      	bls.n	8002e76 <HAL_SPI_TransmitReceive+0x176>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002db8:	2900      	cmp	r1, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_SPI_TransmitReceive+0xc0>
 8002dbc:	2e01      	cmp	r6, #1
 8002dbe:	d107      	bne.n	8002dd0 <HAL_SPI_TransmitReceive+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dc0:	883a      	ldrh	r2, [r7, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dc2:	3702      	adds	r7, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dc4:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002dc6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dc8:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002dd0:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002dd2:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002dd4:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dd6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d114      	bne.n	8002e06 <HAL_SPI_TransmitReceive+0x106>
 8002ddc:	0023      	movs	r3, r4
 8002dde:	3308      	adds	r3, #8
 8002de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10f      	bne.n	8002e06 <HAL_SPI_TransmitReceive+0x106>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002de6:	9a00      	ldr	r2, [sp, #0]
 8002de8:	9908      	ldr	r1, [sp, #32]
 8002dea:	0020      	movs	r0, r4
 8002dec:	f7ff feee 	bl	8002bcc <SPI_EndRxTxTransaction>
 8002df0:	1e05      	subs	r5, r0, #0
 8002df2:	d037      	beq.n	8002e64 <HAL_SPI_TransmitReceive+0x164>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002df4:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8002df6:	2501      	movs	r5, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002df8:	6623      	str	r3, [r4, #96]	; 0x60
 8002dfa:	e033      	b.n	8002e64 <HAL_SPI_TransmitReceive+0x164>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002dfc:	2280      	movs	r2, #128	; 0x80
 8002dfe:	685d      	ldr	r5, [r3, #4]
 8002e00:	0152      	lsls	r2, r2, #5
 8002e02:	432a      	orrs	r2, r5
 8002e04:	e7cb      	b.n	8002d9e <HAL_SPI_TransmitReceive+0x9e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e06:	6822      	ldr	r2, [r4, #0]
 8002e08:	6893      	ldr	r3, [r2, #8]
 8002e0a:	423b      	tst	r3, r7
 8002e0c:	d00e      	beq.n	8002e2c <HAL_SPI_TransmitReceive+0x12c>
 8002e0e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00b      	beq.n	8002e2c <HAL_SPI_TransmitReceive+0x12c>
 8002e14:	2d01      	cmp	r5, #1
 8002e16:	d109      	bne.n	8002e2c <HAL_SPI_TransmitReceive+0x12c>
        txallowed = 0U;
 8002e18:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e1c:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e1e:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e20:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e22:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002e24:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e2c:	6893      	ldr	r3, [r2, #8]
 8002e2e:	4233      	tst	r3, r6
 8002e30:	d00e      	beq.n	8002e50 <HAL_SPI_TransmitReceive+0x150>
 8002e32:	0021      	movs	r1, r4
 8002e34:	3108      	adds	r1, #8
 8002e36:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d009      	beq.n	8002e50 <HAL_SPI_TransmitReceive+0x150>
        txallowed = 1U;
 8002e3c:	0035      	movs	r5, r6
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e40:	68d2      	ldr	r2, [r2, #12]
 8002e42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e44:	3302      	adds	r3, #2
 8002e46:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8002e48:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	87cb      	strh	r3, [r1, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e50:	f7fe fcf2 	bl	8001838 <HAL_GetTick>
 8002e54:	9b00      	ldr	r3, [sp, #0]
 8002e56:	1ac0      	subs	r0, r0, r3
 8002e58:	9b08      	ldr	r3, [sp, #32]
 8002e5a:	4283      	cmp	r3, r0
 8002e5c:	d8bb      	bhi.n	8002dd6 <HAL_SPI_TransmitReceive+0xd6>
 8002e5e:	3301      	adds	r3, #1
 8002e60:	d0b9      	beq.n	8002dd6 <HAL_SPI_TransmitReceive+0xd6>
        errorcode = HAL_TIMEOUT;
 8002e62:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002e64:	0023      	movs	r3, r4
 8002e66:	2201      	movs	r2, #1
 8002e68:	335d      	adds	r3, #93	; 0x5d
 8002e6a:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	345c      	adds	r4, #92	; 0x5c
 8002e70:	7023      	strb	r3, [r4, #0]
}
 8002e72:	0028      	movs	r0, r5
 8002e74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e76:	2900      	cmp	r1, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_SPI_TransmitReceive+0x17e>
 8002e7a:	2e01      	cmp	r6, #1
 8002e7c:	d10a      	bne.n	8002e94 <HAL_SPI_TransmitReceive+0x194>
      if (hspi->TxXferCount > 1U)
 8002e7e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002e80:	2a01      	cmp	r2, #1
 8002e82:	d951      	bls.n	8002f28 <HAL_SPI_TransmitReceive+0x228>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e84:	883a      	ldrh	r2, [r7, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e86:	3702      	adds	r7, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e88:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8002e8a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e8c:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002e8e:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002e94:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e96:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e98:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e9a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d105      	bne.n	8002eac <HAL_SPI_TransmitReceive+0x1ac>
 8002ea0:	0023      	movs	r3, r4
 8002ea2:	3308      	adds	r3, #8
 8002ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d100      	bne.n	8002eac <HAL_SPI_TransmitReceive+0x1ac>
 8002eaa:	e79c      	b.n	8002de6 <HAL_SPI_TransmitReceive+0xe6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002eac:	6822      	ldr	r2, [r4, #0]
 8002eae:	6893      	ldr	r3, [r2, #8]
 8002eb0:	423b      	tst	r3, r7
 8002eb2:	d011      	beq.n	8002ed8 <HAL_SPI_TransmitReceive+0x1d8>
 8002eb4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00e      	beq.n	8002ed8 <HAL_SPI_TransmitReceive+0x1d8>
 8002eba:	2d01      	cmp	r5, #1
 8002ebc:	d10c      	bne.n	8002ed8 <HAL_SPI_TransmitReceive+0x1d8>
        if (hspi->TxXferCount > 1U)
 8002ebe:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8002ec0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ec2:	2901      	cmp	r1, #1
 8002ec4:	d938      	bls.n	8002f38 <HAL_SPI_TransmitReceive+0x238>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ec6:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ec8:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eca:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ecc:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002ece:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ed0:	3b02      	subs	r3, #2
        txallowed = 0U;
 8002ed2:	2500      	movs	r5, #0
          hspi->TxXferCount--;
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ed8:	6821      	ldr	r1, [r4, #0]
 8002eda:	688b      	ldr	r3, [r1, #8]
 8002edc:	4233      	tst	r3, r6
 8002ede:	d019      	beq.n	8002f14 <HAL_SPI_TransmitReceive+0x214>
 8002ee0:	0023      	movs	r3, r4
 8002ee2:	3308      	adds	r3, #8
 8002ee4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002ee6:	2a00      	cmp	r2, #0
 8002ee8:	d014      	beq.n	8002f14 <HAL_SPI_TransmitReceive+0x214>
        if (hspi->RxXferCount > 1U)
 8002eea:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 8002eec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002eee:	2801      	cmp	r0, #1
 8002ef0:	d92a      	bls.n	8002f48 <HAL_SPI_TransmitReceive+0x248>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ef2:	68c8      	ldr	r0, [r1, #12]
        txallowed = 1U;
 8002ef4:	0035      	movs	r5, r6
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ef6:	8010      	strh	r0, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ef8:	3202      	adds	r2, #2
 8002efa:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002efc:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002efe:	3a02      	subs	r2, #2
 8002f00:	b292      	uxth	r2, r2
 8002f02:	87da      	strh	r2, [r3, #62]	; 0x3e
          if (hspi->RxXferCount <= 1U)
 8002f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d804      	bhi.n	8002f14 <HAL_SPI_TransmitReceive+0x214>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f0a:	2380      	movs	r3, #128	; 0x80
 8002f0c:	684a      	ldr	r2, [r1, #4]
 8002f0e:	015b      	lsls	r3, r3, #5
 8002f10:	4313      	orrs	r3, r2
 8002f12:	604b      	str	r3, [r1, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f14:	f7fe fc90 	bl	8001838 <HAL_GetTick>
 8002f18:	9b00      	ldr	r3, [sp, #0]
 8002f1a:	1ac0      	subs	r0, r0, r3
 8002f1c:	9b08      	ldr	r3, [sp, #32]
 8002f1e:	4283      	cmp	r3, r0
 8002f20:	d8bb      	bhi.n	8002e9a <HAL_SPI_TransmitReceive+0x19a>
 8002f22:	3301      	adds	r3, #1
 8002f24:	d0b9      	beq.n	8002e9a <HAL_SPI_TransmitReceive+0x19a>
 8002f26:	e79c      	b.n	8002e62 <HAL_SPI_TransmitReceive+0x162>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f28:	783a      	ldrb	r2, [r7, #0]
 8002f2a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8002f2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f2e:	3301      	adds	r3, #1
 8002f30:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002f32:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f34:	3b01      	subs	r3, #1
 8002f36:	e7ab      	b.n	8002e90 <HAL_SPI_TransmitReceive+0x190>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8002f3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f3e:	3301      	adds	r3, #1
 8002f40:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8002f42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f44:	3b01      	subs	r3, #1
 8002f46:	e7c4      	b.n	8002ed2 <HAL_SPI_TransmitReceive+0x1d2>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f48:	7b09      	ldrb	r1, [r1, #12]
        txallowed = 1U;
 8002f4a:	0035      	movs	r5, r6
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f4c:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 8002f4e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002f50:	3201      	adds	r2, #1
 8002f52:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8002f54:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002f56:	3a01      	subs	r2, #1
 8002f58:	b292      	uxth	r2, r2
 8002f5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f5c:	e7da      	b.n	8002f14 <HAL_SPI_TransmitReceive+0x214>
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	ffffefff 	.word	0xffffefff

08002f64 <HAL_SPI_GetState>:
  return hspi->State;
 8002f64:	305d      	adds	r0, #93	; 0x5d
 8002f66:	7800      	ldrb	r0, [r0, #0]
 8002f68:	b2c0      	uxtb	r0, r0
}
 8002f6a:	4770      	bx	lr

08002f6c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	6a03      	ldr	r3, [r0, #32]
{
 8002f70:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f72:	4393      	bics	r3, r2
 8002f74:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f76:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f78:	4a19      	ldr	r2, [pc, #100]	; (8002fe0 <TIM_OC1_SetConfig+0x74>)
  tmpcr2 =  TIMx->CR2;
 8002f7a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002f7c:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f7e:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f80:	680a      	ldr	r2, [r1, #0]
 8002f82:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f84:	2202      	movs	r2, #2
 8002f86:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f88:	688a      	ldr	r2, [r1, #8]
 8002f8a:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f8c:	4a15      	ldr	r2, [pc, #84]	; (8002fe4 <TIM_OC1_SetConfig+0x78>)
 8002f8e:	4290      	cmp	r0, r2
 8002f90:	d008      	beq.n	8002fa4 <TIM_OC1_SetConfig+0x38>
 8002f92:	4e15      	ldr	r6, [pc, #84]	; (8002fe8 <TIM_OC1_SetConfig+0x7c>)
 8002f94:	42b0      	cmp	r0, r6
 8002f96:	d005      	beq.n	8002fa4 <TIM_OC1_SetConfig+0x38>
 8002f98:	4e14      	ldr	r6, [pc, #80]	; (8002fec <TIM_OC1_SetConfig+0x80>)
 8002f9a:	42b0      	cmp	r0, r6
 8002f9c:	d002      	beq.n	8002fa4 <TIM_OC1_SetConfig+0x38>
 8002f9e:	4e14      	ldr	r6, [pc, #80]	; (8002ff0 <TIM_OC1_SetConfig+0x84>)
 8002fa0:	42b0      	cmp	r0, r6
 8002fa2:	d116      	bne.n	8002fd2 <TIM_OC1_SetConfig+0x66>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fa4:	2608      	movs	r6, #8
 8002fa6:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fa8:	68ce      	ldr	r6, [r1, #12]
 8002faa:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fac:	2604      	movs	r6, #4
 8002fae:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fb0:	4290      	cmp	r0, r2
 8002fb2:	d008      	beq.n	8002fc6 <TIM_OC1_SetConfig+0x5a>
 8002fb4:	4a0c      	ldr	r2, [pc, #48]	; (8002fe8 <TIM_OC1_SetConfig+0x7c>)
 8002fb6:	4290      	cmp	r0, r2
 8002fb8:	d005      	beq.n	8002fc6 <TIM_OC1_SetConfig+0x5a>
 8002fba:	4a0c      	ldr	r2, [pc, #48]	; (8002fec <TIM_OC1_SetConfig+0x80>)
 8002fbc:	4290      	cmp	r0, r2
 8002fbe:	d002      	beq.n	8002fc6 <TIM_OC1_SetConfig+0x5a>
 8002fc0:	4a0b      	ldr	r2, [pc, #44]	; (8002ff0 <TIM_OC1_SetConfig+0x84>)
 8002fc2:	4290      	cmp	r0, r2
 8002fc4:	d105      	bne.n	8002fd2 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fc6:	4a0b      	ldr	r2, [pc, #44]	; (8002ff4 <TIM_OC1_SetConfig+0x88>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fc8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fca:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fcc:	694c      	ldr	r4, [r1, #20]
 8002fce:	4334      	orrs	r4, r6
 8002fd0:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fd2:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002fd4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002fd6:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002fd8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fda:	6203      	str	r3, [r0, #32]
}
 8002fdc:	bd70      	pop	{r4, r5, r6, pc}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	fffeff8c 	.word	0xfffeff8c
 8002fe4:	40012c00 	.word	0x40012c00
 8002fe8:	40014000 	.word	0x40014000
 8002fec:	40014400 	.word	0x40014400
 8002ff0:	40014800 	.word	0x40014800
 8002ff4:	fffffcff 	.word	0xfffffcff

08002ff8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ff8:	6a03      	ldr	r3, [r0, #32]
 8002ffa:	4a18      	ldr	r2, [pc, #96]	; (800305c <TIM_OC3_SetConfig+0x64>)
{
 8002ffc:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ffe:	4013      	ands	r3, r2
 8003000:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003002:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003004:	4d16      	ldr	r5, [pc, #88]	; (8003060 <TIM_OC3_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 8003006:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003008:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800300a:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800300c:	680d      	ldr	r5, [r1, #0]
 800300e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003010:	4d14      	ldr	r5, [pc, #80]	; (8003064 <TIM_OC3_SetConfig+0x6c>)
 8003012:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003014:	688d      	ldr	r5, [r1, #8]
 8003016:	022d      	lsls	r5, r5, #8
 8003018:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800301a:	4d13      	ldr	r5, [pc, #76]	; (8003068 <TIM_OC3_SetConfig+0x70>)
 800301c:	42a8      	cmp	r0, r5
 800301e:	d10e      	bne.n	800303e <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003020:	4d12      	ldr	r5, [pc, #72]	; (800306c <TIM_OC3_SetConfig+0x74>)
 8003022:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003024:	68cb      	ldr	r3, [r1, #12]
 8003026:	021b      	lsls	r3, r3, #8
 8003028:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800302a:	4d11      	ldr	r5, [pc, #68]	; (8003070 <TIM_OC3_SetConfig+0x78>)
 800302c:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800302e:	4d11      	ldr	r5, [pc, #68]	; (8003074 <TIM_OC3_SetConfig+0x7c>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003030:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003032:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003034:	698a      	ldr	r2, [r1, #24]
 8003036:	4332      	orrs	r2, r6
 8003038:	0112      	lsls	r2, r2, #4
 800303a:	432a      	orrs	r2, r5
 800303c:	e008      	b.n	8003050 <TIM_OC3_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800303e:	4d0e      	ldr	r5, [pc, #56]	; (8003078 <TIM_OC3_SetConfig+0x80>)
 8003040:	42a8      	cmp	r0, r5
 8003042:	d0f4      	beq.n	800302e <TIM_OC3_SetConfig+0x36>
 8003044:	4d0d      	ldr	r5, [pc, #52]	; (800307c <TIM_OC3_SetConfig+0x84>)
 8003046:	42a8      	cmp	r0, r5
 8003048:	d0f1      	beq.n	800302e <TIM_OC3_SetConfig+0x36>
 800304a:	4d0d      	ldr	r5, [pc, #52]	; (8003080 <TIM_OC3_SetConfig+0x88>)
 800304c:	42a8      	cmp	r0, r5
 800304e:	d0ee      	beq.n	800302e <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003050:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003052:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003054:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003056:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003058:	6203      	str	r3, [r0, #32]
}
 800305a:	bd70      	pop	{r4, r5, r6, pc}
 800305c:	fffffeff 	.word	0xfffffeff
 8003060:	fffeff8c 	.word	0xfffeff8c
 8003064:	fffffdff 	.word	0xfffffdff
 8003068:	40012c00 	.word	0x40012c00
 800306c:	fffff7ff 	.word	0xfffff7ff
 8003070:	fffffbff 	.word	0xfffffbff
 8003074:	ffffcfff 	.word	0xffffcfff
 8003078:	40014000 	.word	0x40014000
 800307c:	40014400 	.word	0x40014400
 8003080:	40014800 	.word	0x40014800

08003084 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003084:	6a03      	ldr	r3, [r0, #32]
 8003086:	4a14      	ldr	r2, [pc, #80]	; (80030d8 <TIM_OC4_SetConfig+0x54>)
{
 8003088:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800308a:	4013      	ands	r3, r2
 800308c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800308e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003090:	4c12      	ldr	r4, [pc, #72]	; (80030dc <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 8003092:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003094:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003096:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003098:	680c      	ldr	r4, [r1, #0]
 800309a:	0224      	lsls	r4, r4, #8
 800309c:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800309e:	4c10      	ldr	r4, [pc, #64]	; (80030e0 <TIM_OC4_SetConfig+0x5c>)
 80030a0:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030a2:	688c      	ldr	r4, [r1, #8]
 80030a4:	0324      	lsls	r4, r4, #12
 80030a6:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030a8:	4c0e      	ldr	r4, [pc, #56]	; (80030e4 <TIM_OC4_SetConfig+0x60>)
 80030aa:	42a0      	cmp	r0, r4
 80030ac:	d008      	beq.n	80030c0 <TIM_OC4_SetConfig+0x3c>
 80030ae:	4c0e      	ldr	r4, [pc, #56]	; (80030e8 <TIM_OC4_SetConfig+0x64>)
 80030b0:	42a0      	cmp	r0, r4
 80030b2:	d005      	beq.n	80030c0 <TIM_OC4_SetConfig+0x3c>
 80030b4:	4c0d      	ldr	r4, [pc, #52]	; (80030ec <TIM_OC4_SetConfig+0x68>)
 80030b6:	42a0      	cmp	r0, r4
 80030b8:	d002      	beq.n	80030c0 <TIM_OC4_SetConfig+0x3c>
 80030ba:	4c0d      	ldr	r4, [pc, #52]	; (80030f0 <TIM_OC4_SetConfig+0x6c>)
 80030bc:	42a0      	cmp	r0, r4
 80030be:	d104      	bne.n	80030ca <TIM_OC4_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030c0:	4c0c      	ldr	r4, [pc, #48]	; (80030f4 <TIM_OC4_SetConfig+0x70>)
 80030c2:	4023      	ands	r3, r4

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030c4:	694c      	ldr	r4, [r1, #20]
 80030c6:	01a4      	lsls	r4, r4, #6
 80030c8:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ca:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030cc:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80030ce:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80030d0:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d2:	6202      	str	r2, [r0, #32]
}
 80030d4:	bd30      	pop	{r4, r5, pc}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	ffffefff 	.word	0xffffefff
 80030dc:	feff8cff 	.word	0xfeff8cff
 80030e0:	ffffdfff 	.word	0xffffdfff
 80030e4:	40012c00 	.word	0x40012c00
 80030e8:	40014000 	.word	0x40014000
 80030ec:	40014400 	.word	0x40014400
 80030f0:	40014800 	.word	0x40014800
 80030f4:	ffffbfff 	.word	0xffffbfff

080030f8 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80030f8:	6a03      	ldr	r3, [r0, #32]
 80030fa:	4a13      	ldr	r2, [pc, #76]	; (8003148 <TIM_OC5_SetConfig+0x50>)
{
 80030fc:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80030fe:	4013      	ands	r3, r2
 8003100:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003102:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003104:	4e11      	ldr	r6, [pc, #68]	; (800314c <TIM_OC5_SetConfig+0x54>)
  tmpcr2 =  TIMx->CR2;
 8003106:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8003108:	6d45      	ldr	r5, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800310a:	4035      	ands	r5, r6
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800310c:	680e      	ldr	r6, [r1, #0]
 800310e:	4335      	orrs	r5, r6

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003110:	4e0f      	ldr	r6, [pc, #60]	; (8003150 <TIM_OC5_SetConfig+0x58>)
 8003112:	4034      	ands	r4, r6
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003114:	688e      	ldr	r6, [r1, #8]
 8003116:	0436      	lsls	r6, r6, #16
 8003118:	4334      	orrs	r4, r6

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800311a:	4e0e      	ldr	r6, [pc, #56]	; (8003154 <TIM_OC5_SetConfig+0x5c>)
 800311c:	42b0      	cmp	r0, r6
 800311e:	d008      	beq.n	8003132 <TIM_OC5_SetConfig+0x3a>
 8003120:	4e0d      	ldr	r6, [pc, #52]	; (8003158 <TIM_OC5_SetConfig+0x60>)
 8003122:	42b0      	cmp	r0, r6
 8003124:	d005      	beq.n	8003132 <TIM_OC5_SetConfig+0x3a>
 8003126:	4e0d      	ldr	r6, [pc, #52]	; (800315c <TIM_OC5_SetConfig+0x64>)
 8003128:	42b0      	cmp	r0, r6
 800312a:	d002      	beq.n	8003132 <TIM_OC5_SetConfig+0x3a>
 800312c:	4e0c      	ldr	r6, [pc, #48]	; (8003160 <TIM_OC5_SetConfig+0x68>)
 800312e:	42b0      	cmp	r0, r6
 8003130:	d103      	bne.n	800313a <TIM_OC5_SetConfig+0x42>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003132:	4013      	ands	r3, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003134:	694a      	ldr	r2, [r1, #20]
 8003136:	0212      	lsls	r2, r2, #8
 8003138:	4313      	orrs	r3, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800313a:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800313c:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 800313e:	6545      	str	r5, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8003140:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003142:	6204      	str	r4, [r0, #32]
}
 8003144:	bd70      	pop	{r4, r5, r6, pc}
 8003146:	46c0      	nop			; (mov r8, r8)
 8003148:	fffeffff 	.word	0xfffeffff
 800314c:	fffeff8f 	.word	0xfffeff8f
 8003150:	fffdffff 	.word	0xfffdffff
 8003154:	40012c00 	.word	0x40012c00
 8003158:	40014000 	.word	0x40014000
 800315c:	40014400 	.word	0x40014400
 8003160:	40014800 	.word	0x40014800

08003164 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003164:	6a03      	ldr	r3, [r0, #32]
 8003166:	4a14      	ldr	r2, [pc, #80]	; (80031b8 <TIM_OC6_SetConfig+0x54>)
{
 8003168:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800316a:	4013      	ands	r3, r2
 800316c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800316e:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003170:	4c12      	ldr	r4, [pc, #72]	; (80031bc <TIM_OC6_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 8003172:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8003174:	6d45      	ldr	r5, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003176:	4025      	ands	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003178:	680c      	ldr	r4, [r1, #0]
 800317a:	0224      	lsls	r4, r4, #8
 800317c:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800317e:	4c10      	ldr	r4, [pc, #64]	; (80031c0 <TIM_OC6_SetConfig+0x5c>)
 8003180:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003182:	688c      	ldr	r4, [r1, #8]
 8003184:	0524      	lsls	r4, r4, #20
 8003186:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003188:	4c0e      	ldr	r4, [pc, #56]	; (80031c4 <TIM_OC6_SetConfig+0x60>)
 800318a:	42a0      	cmp	r0, r4
 800318c:	d008      	beq.n	80031a0 <TIM_OC6_SetConfig+0x3c>
 800318e:	4c0e      	ldr	r4, [pc, #56]	; (80031c8 <TIM_OC6_SetConfig+0x64>)
 8003190:	42a0      	cmp	r0, r4
 8003192:	d005      	beq.n	80031a0 <TIM_OC6_SetConfig+0x3c>
 8003194:	4c0d      	ldr	r4, [pc, #52]	; (80031cc <TIM_OC6_SetConfig+0x68>)
 8003196:	42a0      	cmp	r0, r4
 8003198:	d002      	beq.n	80031a0 <TIM_OC6_SetConfig+0x3c>
 800319a:	4c0d      	ldr	r4, [pc, #52]	; (80031d0 <TIM_OC6_SetConfig+0x6c>)
 800319c:	42a0      	cmp	r0, r4
 800319e:	d104      	bne.n	80031aa <TIM_OC6_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80031a0:	4c0c      	ldr	r4, [pc, #48]	; (80031d4 <TIM_OC6_SetConfig+0x70>)
 80031a2:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80031a4:	694c      	ldr	r4, [r1, #20]
 80031a6:	02a4      	lsls	r4, r4, #10
 80031a8:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031aa:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80031ac:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 80031ae:	6545      	str	r5, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 80031b0:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b2:	6202      	str	r2, [r0, #32]
}
 80031b4:	bd30      	pop	{r4, r5, pc}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	ffefffff 	.word	0xffefffff
 80031bc:	feff8fff 	.word	0xfeff8fff
 80031c0:	ffdfffff 	.word	0xffdfffff
 80031c4:	40012c00 	.word	0x40012c00
 80031c8:	40014000 	.word	0x40014000
 80031cc:	40014400 	.word	0x40014400
 80031d0:	40014800 	.word	0x40014800
 80031d4:	fffbffff 	.word	0xfffbffff

080031d8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031d8:	2201      	movs	r2, #1
 80031da:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031dc:	4807      	ldr	r0, [pc, #28]	; (80031fc <HAL_TIM_Base_Start_IT+0x24>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031de:	68d9      	ldr	r1, [r3, #12]
 80031e0:	4311      	orrs	r1, r2
 80031e2:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031e4:	6899      	ldr	r1, [r3, #8]
 80031e6:	4001      	ands	r1, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e8:	2906      	cmp	r1, #6
 80031ea:	d005      	beq.n	80031f8 <HAL_TIM_Base_Start_IT+0x20>
 80031ec:	3807      	subs	r0, #7
 80031ee:	4281      	cmp	r1, r0
 80031f0:	d002      	beq.n	80031f8 <HAL_TIM_Base_Start_IT+0x20>
    __HAL_TIM_ENABLE(htim);
 80031f2:	6819      	ldr	r1, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	601a      	str	r2, [r3, #0]
}
 80031f8:	2000      	movs	r0, #0
 80031fa:	4770      	bx	lr
 80031fc:	00010007 	.word	0x00010007

08003200 <HAL_TIM_PWM_MspInit>:
 8003200:	4770      	bx	lr

08003202 <HAL_TIM_IC_MspInit>:
 8003202:	4770      	bx	lr

08003204 <HAL_TIM_OC_DelayElapsedCallback>:
 8003204:	4770      	bx	lr

08003206 <HAL_TIM_IC_CaptureCallback>:
 8003206:	4770      	bx	lr

08003208 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003208:	4770      	bx	lr

0800320a <HAL_TIM_TriggerCallback>:
 800320a:	4770      	bx	lr

0800320c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800320c:	2202      	movs	r2, #2
 800320e:	6803      	ldr	r3, [r0, #0]
{
 8003210:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003212:	6919      	ldr	r1, [r3, #16]
{
 8003214:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003216:	4211      	tst	r1, r2
 8003218:	d00e      	beq.n	8003238 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800321a:	68d9      	ldr	r1, [r3, #12]
 800321c:	4211      	tst	r1, r2
 800321e:	d00b      	beq.n	8003238 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003220:	3a05      	subs	r2, #5
 8003222:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003224:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003226:	3204      	adds	r2, #4
 8003228:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800322a:	079b      	lsls	r3, r3, #30
 800322c:	d100      	bne.n	8003230 <HAL_TIM_IRQHandler+0x24>
 800322e:	e086      	b.n	800333e <HAL_TIM_IRQHandler+0x132>
          HAL_TIM_IC_CaptureCallback(htim);
 8003230:	f7ff ffe9 	bl	8003206 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003234:	2300      	movs	r3, #0
 8003236:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003238:	2204      	movs	r2, #4
 800323a:	6823      	ldr	r3, [r4, #0]
 800323c:	6919      	ldr	r1, [r3, #16]
 800323e:	4211      	tst	r1, r2
 8003240:	d011      	beq.n	8003266 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003242:	68d9      	ldr	r1, [r3, #12]
 8003244:	4211      	tst	r1, r2
 8003246:	d00e      	beq.n	8003266 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003248:	3a09      	subs	r2, #9
 800324a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800324c:	3207      	adds	r2, #7
 800324e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003250:	699a      	ldr	r2, [r3, #24]
 8003252:	23c0      	movs	r3, #192	; 0xc0
 8003254:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8003256:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003258:	421a      	tst	r2, r3
 800325a:	d100      	bne.n	800325e <HAL_TIM_IRQHandler+0x52>
 800325c:	e075      	b.n	800334a <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_IC_CaptureCallback(htim);
 800325e:	f7ff ffd2 	bl	8003206 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003262:	2300      	movs	r3, #0
 8003264:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003266:	2208      	movs	r2, #8
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	6919      	ldr	r1, [r3, #16]
 800326c:	4211      	tst	r1, r2
 800326e:	d00e      	beq.n	800328e <HAL_TIM_IRQHandler+0x82>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003270:	68d9      	ldr	r1, [r3, #12]
 8003272:	4211      	tst	r1, r2
 8003274:	d00b      	beq.n	800328e <HAL_TIM_IRQHandler+0x82>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003276:	3a11      	subs	r2, #17
 8003278:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800327a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800327c:	320d      	adds	r2, #13
 800327e:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003280:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003282:	079b      	lsls	r3, r3, #30
 8003284:	d067      	beq.n	8003356 <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003286:	f7ff ffbe 	bl	8003206 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328a:	2300      	movs	r3, #0
 800328c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800328e:	2210      	movs	r2, #16
 8003290:	6823      	ldr	r3, [r4, #0]
 8003292:	6919      	ldr	r1, [r3, #16]
 8003294:	4211      	tst	r1, r2
 8003296:	d010      	beq.n	80032ba <HAL_TIM_IRQHandler+0xae>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003298:	68d9      	ldr	r1, [r3, #12]
 800329a:	4211      	tst	r1, r2
 800329c:	d00d      	beq.n	80032ba <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800329e:	3a21      	subs	r2, #33	; 0x21
 80032a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032a2:	3219      	adds	r2, #25
 80032a4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032a6:	69da      	ldr	r2, [r3, #28]
 80032a8:	23c0      	movs	r3, #192	; 0xc0
 80032aa:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80032ac:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032ae:	421a      	tst	r2, r3
 80032b0:	d057      	beq.n	8003362 <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_IC_CaptureCallback(htim);
 80032b2:	f7ff ffa8 	bl	8003206 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b6:	2300      	movs	r3, #0
 80032b8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032ba:	2201      	movs	r2, #1
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	6919      	ldr	r1, [r3, #16]
 80032c0:	4211      	tst	r1, r2
 80032c2:	d007      	beq.n	80032d4 <HAL_TIM_IRQHandler+0xc8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032c4:	68d9      	ldr	r1, [r3, #12]
 80032c6:	4211      	tst	r1, r2
 80032c8:	d004      	beq.n	80032d4 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032ca:	3a03      	subs	r2, #3
 80032cc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80032ce:	0020      	movs	r0, r4
 80032d0:	f7fd fb24 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032d4:	2280      	movs	r2, #128	; 0x80
 80032d6:	6823      	ldr	r3, [r4, #0]
 80032d8:	6919      	ldr	r1, [r3, #16]
 80032da:	4211      	tst	r1, r2
 80032dc:	d008      	beq.n	80032f0 <HAL_TIM_IRQHandler+0xe4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032de:	68d9      	ldr	r1, [r3, #12]
 80032e0:	4211      	tst	r1, r2
 80032e2:	d005      	beq.n	80032f0 <HAL_TIM_IRQHandler+0xe4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032e4:	3a02      	subs	r2, #2
 80032e6:	3aff      	subs	r2, #255	; 0xff
 80032e8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80032ea:	0020      	movs	r0, r4
 80032ec:	f000 fb3b 	bl	8003966 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	05d2      	lsls	r2, r2, #23
 80032f6:	d507      	bpl.n	8003308 <HAL_TIM_IRQHandler+0xfc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	0612      	lsls	r2, r2, #24
 80032fc:	d504      	bpl.n	8003308 <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032fe:	4a1c      	ldr	r2, [pc, #112]	; (8003370 <HAL_TIM_IRQHandler+0x164>)
      HAL_TIMEx_Break2Callback(htim);
 8003300:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003302:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003304:	f000 fb30 	bl	8003968 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003308:	2240      	movs	r2, #64	; 0x40
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	6919      	ldr	r1, [r3, #16]
 800330e:	4211      	tst	r1, r2
 8003310:	d007      	beq.n	8003322 <HAL_TIM_IRQHandler+0x116>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003312:	68d9      	ldr	r1, [r3, #12]
 8003314:	4211      	tst	r1, r2
 8003316:	d004      	beq.n	8003322 <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003318:	3a81      	subs	r2, #129	; 0x81
 800331a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800331c:	0020      	movs	r0, r4
 800331e:	f7ff ff74 	bl	800320a <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003322:	2220      	movs	r2, #32
 8003324:	6823      	ldr	r3, [r4, #0]
 8003326:	6919      	ldr	r1, [r3, #16]
 8003328:	4211      	tst	r1, r2
 800332a:	d007      	beq.n	800333c <HAL_TIM_IRQHandler+0x130>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800332c:	68d9      	ldr	r1, [r3, #12]
 800332e:	4211      	tst	r1, r2
 8003330:	d004      	beq.n	800333c <HAL_TIM_IRQHandler+0x130>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003332:	3a41      	subs	r2, #65	; 0x41
 8003334:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003336:	0020      	movs	r0, r4
 8003338:	f000 fb14 	bl	8003964 <HAL_TIMEx_CommutCallback>
}
 800333c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800333e:	f7ff ff61 	bl	8003204 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003342:	0020      	movs	r0, r4
 8003344:	f7ff ff60 	bl	8003208 <HAL_TIM_PWM_PulseFinishedCallback>
 8003348:	e774      	b.n	8003234 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800334a:	f7ff ff5b 	bl	8003204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800334e:	0020      	movs	r0, r4
 8003350:	f7ff ff5a 	bl	8003208 <HAL_TIM_PWM_PulseFinishedCallback>
 8003354:	e785      	b.n	8003262 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003356:	f7ff ff55 	bl	8003204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800335a:	0020      	movs	r0, r4
 800335c:	f7ff ff54 	bl	8003208 <HAL_TIM_PWM_PulseFinishedCallback>
 8003360:	e793      	b.n	800328a <HAL_TIM_IRQHandler+0x7e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003362:	f7ff ff4f 	bl	8003204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003366:	0020      	movs	r0, r4
 8003368:	f7ff ff4e 	bl	8003208 <HAL_TIM_PWM_PulseFinishedCallback>
 800336c:	e7a3      	b.n	80032b6 <HAL_TIM_IRQHandler+0xaa>
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	fffffeff 	.word	0xfffffeff

08003374 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003374:	4a1c      	ldr	r2, [pc, #112]	; (80033e8 <TIM_Base_SetConfig+0x74>)
{
 8003376:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8003378:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800337a:	4290      	cmp	r0, r2
 800337c:	d002      	beq.n	8003384 <TIM_Base_SetConfig+0x10>
 800337e:	4c1b      	ldr	r4, [pc, #108]	; (80033ec <TIM_Base_SetConfig+0x78>)
 8003380:	42a0      	cmp	r0, r4
 8003382:	d108      	bne.n	8003396 <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003384:	2470      	movs	r4, #112	; 0x70
 8003386:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8003388:	684c      	ldr	r4, [r1, #4]
 800338a:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800338c:	4290      	cmp	r0, r2
 800338e:	d00e      	beq.n	80033ae <TIM_Base_SetConfig+0x3a>
 8003390:	4c16      	ldr	r4, [pc, #88]	; (80033ec <TIM_Base_SetConfig+0x78>)
 8003392:	42a0      	cmp	r0, r4
 8003394:	d00b      	beq.n	80033ae <TIM_Base_SetConfig+0x3a>
 8003396:	4c16      	ldr	r4, [pc, #88]	; (80033f0 <TIM_Base_SetConfig+0x7c>)
 8003398:	42a0      	cmp	r0, r4
 800339a:	d008      	beq.n	80033ae <TIM_Base_SetConfig+0x3a>
 800339c:	4c15      	ldr	r4, [pc, #84]	; (80033f4 <TIM_Base_SetConfig+0x80>)
 800339e:	42a0      	cmp	r0, r4
 80033a0:	d005      	beq.n	80033ae <TIM_Base_SetConfig+0x3a>
 80033a2:	4c15      	ldr	r4, [pc, #84]	; (80033f8 <TIM_Base_SetConfig+0x84>)
 80033a4:	42a0      	cmp	r0, r4
 80033a6:	d002      	beq.n	80033ae <TIM_Base_SetConfig+0x3a>
 80033a8:	4c14      	ldr	r4, [pc, #80]	; (80033fc <TIM_Base_SetConfig+0x88>)
 80033aa:	42a0      	cmp	r0, r4
 80033ac:	d103      	bne.n	80033b6 <TIM_Base_SetConfig+0x42>
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ae:	4c14      	ldr	r4, [pc, #80]	; (8003400 <TIM_Base_SetConfig+0x8c>)
 80033b0:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033b2:	68cc      	ldr	r4, [r1, #12]
 80033b4:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033b6:	2480      	movs	r4, #128	; 0x80
 80033b8:	43a3      	bics	r3, r4
 80033ba:	694c      	ldr	r4, [r1, #20]
 80033bc:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 80033be:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033c0:	688b      	ldr	r3, [r1, #8]
 80033c2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80033c4:	680b      	ldr	r3, [r1, #0]
 80033c6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033c8:	4290      	cmp	r0, r2
 80033ca:	d008      	beq.n	80033de <TIM_Base_SetConfig+0x6a>
 80033cc:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <TIM_Base_SetConfig+0x80>)
 80033ce:	4298      	cmp	r0, r3
 80033d0:	d005      	beq.n	80033de <TIM_Base_SetConfig+0x6a>
 80033d2:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <TIM_Base_SetConfig+0x84>)
 80033d4:	4298      	cmp	r0, r3
 80033d6:	d002      	beq.n	80033de <TIM_Base_SetConfig+0x6a>
 80033d8:	4b08      	ldr	r3, [pc, #32]	; (80033fc <TIM_Base_SetConfig+0x88>)
 80033da:	4298      	cmp	r0, r3
 80033dc:	d101      	bne.n	80033e2 <TIM_Base_SetConfig+0x6e>
    TIMx->RCR = Structure->RepetitionCounter;
 80033de:	690b      	ldr	r3, [r1, #16]
 80033e0:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80033e2:	2301      	movs	r3, #1
 80033e4:	6143      	str	r3, [r0, #20]
}
 80033e6:	bd10      	pop	{r4, pc}
 80033e8:	40012c00 	.word	0x40012c00
 80033ec:	40000400 	.word	0x40000400
 80033f0:	40002000 	.word	0x40002000
 80033f4:	40014000 	.word	0x40014000
 80033f8:	40014400 	.word	0x40014400
 80033fc:	40014800 	.word	0x40014800
 8003400:	fffffcff 	.word	0xfffffcff

08003404 <HAL_TIM_Base_Init>:
{
 8003404:	b570      	push	{r4, r5, r6, lr}
 8003406:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003408:	2001      	movs	r0, #1
  if (htim == NULL)
 800340a:	2c00      	cmp	r4, #0
 800340c:	d014      	beq.n	8003438 <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 800340e:	0025      	movs	r5, r4
 8003410:	353d      	adds	r5, #61	; 0x3d
 8003412:	782b      	ldrb	r3, [r5, #0]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d105      	bne.n	8003426 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800341a:	0022      	movs	r2, r4
 800341c:	323c      	adds	r2, #60	; 0x3c
 800341e:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8003420:	0020      	movs	r0, r4
 8003422:	f7fd ffdb 	bl	80013dc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003426:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003428:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800342a:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800342c:	1d21      	adds	r1, r4, #4
 800342e:	f7ff ffa1 	bl	8003374 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003432:	2301      	movs	r3, #1
  return HAL_OK;
 8003434:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003436:	702b      	strb	r3, [r5, #0]
}
 8003438:	bd70      	pop	{r4, r5, r6, pc}

0800343a <HAL_TIM_PWM_Init>:
{
 800343a:	b570      	push	{r4, r5, r6, lr}
 800343c:	0004      	movs	r4, r0
    return HAL_ERROR;
 800343e:	2001      	movs	r0, #1
  if (htim == NULL)
 8003440:	2c00      	cmp	r4, #0
 8003442:	d014      	beq.n	800346e <HAL_TIM_PWM_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003444:	0025      	movs	r5, r4
 8003446:	353d      	adds	r5, #61	; 0x3d
 8003448:	782b      	ldrb	r3, [r5, #0]
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d105      	bne.n	800345c <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8003450:	0022      	movs	r2, r4
 8003452:	323c      	adds	r2, #60	; 0x3c
 8003454:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 8003456:	0020      	movs	r0, r4
 8003458:	f7ff fed2 	bl	8003200 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800345c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800345e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003460:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003462:	1d21      	adds	r1, r4, #4
 8003464:	f7ff ff86 	bl	8003374 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003468:	2301      	movs	r3, #1
  return HAL_OK;
 800346a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800346c:	702b      	strb	r3, [r5, #0]
}
 800346e:	bd70      	pop	{r4, r5, r6, pc}

08003470 <HAL_TIM_IC_Init>:
{
 8003470:	b570      	push	{r4, r5, r6, lr}
 8003472:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003474:	2001      	movs	r0, #1
  if (htim == NULL)
 8003476:	2c00      	cmp	r4, #0
 8003478:	d014      	beq.n	80034a4 <HAL_TIM_IC_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 800347a:	0025      	movs	r5, r4
 800347c:	353d      	adds	r5, #61	; 0x3d
 800347e:	782b      	ldrb	r3, [r5, #0]
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d105      	bne.n	8003492 <HAL_TIM_IC_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8003486:	0022      	movs	r2, r4
 8003488:	323c      	adds	r2, #60	; 0x3c
 800348a:	7013      	strb	r3, [r2, #0]
    HAL_TIM_IC_MspInit(htim);
 800348c:	0020      	movs	r0, r4
 800348e:	f7ff feb8 	bl	8003202 <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003492:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003494:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003496:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003498:	1d21      	adds	r1, r4, #4
 800349a:	f7ff ff6b 	bl	8003374 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800349e:	2301      	movs	r3, #1
  return HAL_OK;
 80034a0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80034a2:	702b      	strb	r3, [r5, #0]
}
 80034a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080034a8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034a8:	2210      	movs	r2, #16
 80034aa:	6a03      	ldr	r3, [r0, #32]
{
 80034ac:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ae:	4393      	bics	r3, r2
 80034b0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80034b2:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034b4:	4d16      	ldr	r5, [pc, #88]	; (8003510 <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 80034b6:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80034b8:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034ba:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034bc:	680d      	ldr	r5, [r1, #0]
 80034be:	022d      	lsls	r5, r5, #8
 80034c0:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 80034c2:	2520      	movs	r5, #32
 80034c4:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034c6:	688d      	ldr	r5, [r1, #8]
 80034c8:	012d      	lsls	r5, r5, #4
 80034ca:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034cc:	4d11      	ldr	r5, [pc, #68]	; (8003514 <TIM_OC2_SetConfig+0x6c>)
 80034ce:	42a8      	cmp	r0, r5
 80034d0:	d10f      	bne.n	80034f2 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 80034d2:	2580      	movs	r5, #128	; 0x80
 80034d4:	43aa      	bics	r2, r5
 80034d6:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034d8:	68ca      	ldr	r2, [r1, #12]
 80034da:	0112      	lsls	r2, r2, #4
 80034dc:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80034de:	2540      	movs	r5, #64	; 0x40
 80034e0:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034e2:	4d0d      	ldr	r5, [pc, #52]	; (8003518 <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034e4:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034e6:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034e8:	698b      	ldr	r3, [r1, #24]
 80034ea:	4333      	orrs	r3, r6
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	432b      	orrs	r3, r5
 80034f0:	e008      	b.n	8003504 <TIM_OC2_SetConfig+0x5c>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f2:	4d0a      	ldr	r5, [pc, #40]	; (800351c <TIM_OC2_SetConfig+0x74>)
 80034f4:	42a8      	cmp	r0, r5
 80034f6:	d0f4      	beq.n	80034e2 <TIM_OC2_SetConfig+0x3a>
 80034f8:	4d09      	ldr	r5, [pc, #36]	; (8003520 <TIM_OC2_SetConfig+0x78>)
 80034fa:	42a8      	cmp	r0, r5
 80034fc:	d0f1      	beq.n	80034e2 <TIM_OC2_SetConfig+0x3a>
 80034fe:	4d09      	ldr	r5, [pc, #36]	; (8003524 <TIM_OC2_SetConfig+0x7c>)
 8003500:	42a8      	cmp	r0, r5
 8003502:	d0ee      	beq.n	80034e2 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8003504:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8003506:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003508:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800350a:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800350c:	6202      	str	r2, [r0, #32]
}
 800350e:	bd70      	pop	{r4, r5, r6, pc}
 8003510:	feff8cff 	.word	0xfeff8cff
 8003514:	40012c00 	.word	0x40012c00
 8003518:	fffff3ff 	.word	0xfffff3ff
 800351c:	40014000 	.word	0x40014000
 8003520:	40014400 	.word	0x40014400
 8003524:	40014800 	.word	0x40014800

08003528 <HAL_TIM_PWM_ConfigChannel>:
{
 8003528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800352a:	0007      	movs	r7, r0
 800352c:	2302      	movs	r3, #2
 800352e:	373c      	adds	r7, #60	; 0x3c
{
 8003530:	0016      	movs	r6, r2
  __HAL_LOCK(htim);
 8003532:	783a      	ldrb	r2, [r7, #0]
{
 8003534:	0004      	movs	r4, r0
 8003536:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8003538:	0018      	movs	r0, r3
 800353a:	2a01      	cmp	r2, #1
 800353c:	d011      	beq.n	8003562 <HAL_TIM_PWM_ConfigChannel+0x3a>
 800353e:	2201      	movs	r2, #1
 8003540:	703a      	strb	r2, [r7, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003542:	0022      	movs	r2, r4
 8003544:	323d      	adds	r2, #61	; 0x3d
 8003546:	9201      	str	r2, [sp, #4]
 8003548:	7013      	strb	r3, [r2, #0]
  switch (Channel)
 800354a:	2e08      	cmp	r6, #8
 800354c:	d043      	beq.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0xae>
 800354e:	d809      	bhi.n	8003564 <HAL_TIM_PWM_ConfigChannel+0x3c>
 8003550:	2e00      	cmp	r6, #0
 8003552:	d01e      	beq.n	8003592 <HAL_TIM_PWM_ConfigChannel+0x6a>
 8003554:	2e04      	cmp	r6, #4
 8003556:	d02d      	beq.n	80035b4 <HAL_TIM_PWM_ConfigChannel+0x8c>
  htim->State = HAL_TIM_STATE_READY;
 8003558:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800355a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800355c:	9a01      	ldr	r2, [sp, #4]
 800355e:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(htim);
 8003560:	7038      	strb	r0, [r7, #0]
}
 8003562:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8003564:	2e10      	cmp	r6, #16
 8003566:	d046      	beq.n	80035f6 <HAL_TIM_PWM_ConfigChannel+0xce>
 8003568:	2e14      	cmp	r6, #20
 800356a:	d055      	beq.n	8003618 <HAL_TIM_PWM_ConfigChannel+0xf0>
 800356c:	2e0c      	cmp	r6, #12
 800356e:	d1f3      	bne.n	8003558 <HAL_TIM_PWM_ConfigChannel+0x30>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003570:	6820      	ldr	r0, [r4, #0]
 8003572:	f7ff fd87 	bl	8003084 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003576:	2280      	movs	r2, #128	; 0x80
 8003578:	6823      	ldr	r3, [r4, #0]
 800357a:	0112      	lsls	r2, r2, #4
 800357c:	69d9      	ldr	r1, [r3, #28]
 800357e:	430a      	orrs	r2, r1
 8003580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003582:	69da      	ldr	r2, [r3, #28]
 8003584:	492d      	ldr	r1, [pc, #180]	; (800363c <HAL_TIM_PWM_ConfigChannel+0x114>)
 8003586:	400a      	ands	r2, r1
 8003588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800358a:	692a      	ldr	r2, [r5, #16]
 800358c:	69d9      	ldr	r1, [r3, #28]
 800358e:	0212      	lsls	r2, r2, #8
 8003590:	e02e      	b.n	80035f0 <HAL_TIM_PWM_ConfigChannel+0xc8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003592:	6820      	ldr	r0, [r4, #0]
 8003594:	f7ff fcea 	bl	8002f6c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003598:	2208      	movs	r2, #8
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	6999      	ldr	r1, [r3, #24]
 800359e:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035a0:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035a4:	699a      	ldr	r2, [r3, #24]
 80035a6:	438a      	bics	r2, r1
 80035a8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035aa:	699a      	ldr	r2, [r3, #24]
 80035ac:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035ae:	430a      	orrs	r2, r1
 80035b0:	619a      	str	r2, [r3, #24]
      break;
 80035b2:	e7d1      	b.n	8003558 <HAL_TIM_PWM_ConfigChannel+0x30>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035b4:	6820      	ldr	r0, [r4, #0]
 80035b6:	f7ff ff77 	bl	80034a8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035ba:	2280      	movs	r2, #128	; 0x80
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	0112      	lsls	r2, r2, #4
 80035c0:	6999      	ldr	r1, [r3, #24]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035c6:	699a      	ldr	r2, [r3, #24]
 80035c8:	491c      	ldr	r1, [pc, #112]	; (800363c <HAL_TIM_PWM_ConfigChannel+0x114>)
 80035ca:	400a      	ands	r2, r1
 80035cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035ce:	692a      	ldr	r2, [r5, #16]
 80035d0:	6999      	ldr	r1, [r3, #24]
 80035d2:	0212      	lsls	r2, r2, #8
 80035d4:	e7eb      	b.n	80035ae <HAL_TIM_PWM_ConfigChannel+0x86>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035d6:	6820      	ldr	r0, [r4, #0]
 80035d8:	f7ff fd0e 	bl	8002ff8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035dc:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	69da      	ldr	r2, [r3, #28]
 80035e2:	4316      	orrs	r6, r2
 80035e4:	61de      	str	r6, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035e6:	69da      	ldr	r2, [r3, #28]
 80035e8:	438a      	bics	r2, r1
 80035ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035ec:	69da      	ldr	r2, [r3, #28]
 80035ee:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035f0:	430a      	orrs	r2, r1
 80035f2:	61da      	str	r2, [r3, #28]
      break;
 80035f4:	e7b0      	b.n	8003558 <HAL_TIM_PWM_ConfigChannel+0x30>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80035f6:	6820      	ldr	r0, [r4, #0]
 80035f8:	f7ff fd7e 	bl	80030f8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80035fc:	2208      	movs	r2, #8
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003602:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003604:	2104      	movs	r1, #4
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003606:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800360a:	438a      	bics	r2, r1
 800360c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800360e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003610:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003612:	430a      	orrs	r2, r1
 8003614:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003616:	e79f      	b.n	8003558 <HAL_TIM_PWM_ConfigChannel+0x30>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003618:	6820      	ldr	r0, [r4, #0]
 800361a:	f7ff fda3 	bl	8003164 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800361e:	2280      	movs	r2, #128	; 0x80
 8003620:	6823      	ldr	r3, [r4, #0]
 8003622:	0112      	lsls	r2, r2, #4
 8003624:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003626:	430a      	orrs	r2, r1
 8003628:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800362a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800362c:	4903      	ldr	r1, [pc, #12]	; (800363c <HAL_TIM_PWM_ConfigChannel+0x114>)
 800362e:	400a      	ands	r2, r1
 8003630:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003632:	692a      	ldr	r2, [r5, #16]
 8003634:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003636:	0212      	lsls	r2, r2, #8
 8003638:	e7eb      	b.n	8003612 <HAL_TIM_PWM_ConfigChannel+0xea>
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	fffffbff 	.word	0xfffffbff

08003640 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003640:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003642:	2401      	movs	r4, #1
 8003644:	6a05      	ldr	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003646:	4f0f      	ldr	r7, [pc, #60]	; (8003684 <TIM_TI1_SetConfig+0x44>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003648:	43a5      	bics	r5, r4
 800364a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800364c:	6986      	ldr	r6, [r0, #24]
  tmpccer = TIMx->CCER;
 800364e:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003650:	42b8      	cmp	r0, r7
 8003652:	d005      	beq.n	8003660 <TIM_TI1_SetConfig+0x20>
 8003654:	4f0c      	ldr	r7, [pc, #48]	; (8003688 <TIM_TI1_SetConfig+0x48>)
 8003656:	42b8      	cmp	r0, r7
 8003658:	d002      	beq.n	8003660 <TIM_TI1_SetConfig+0x20>
 800365a:	4f0c      	ldr	r7, [pc, #48]	; (800368c <TIM_TI1_SetConfig+0x4c>)
 800365c:	42b8      	cmp	r0, r7
 800365e:	d10f      	bne.n	8003680 <TIM_TI1_SetConfig+0x40>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003660:	2403      	movs	r4, #3
 8003662:	43a6      	bics	r6, r4
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003664:	24f0      	movs	r4, #240	; 0xf0
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003666:	4332      	orrs	r2, r6
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003668:	43a2      	bics	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	340f      	adds	r4, #15
 800366e:	4023      	ands	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003670:	3cf5      	subs	r4, #245	; 0xf5
 8003672:	43a5      	bics	r5, r4
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003674:	4021      	ands	r1, r4
 8003676:	4329      	orrs	r1, r5
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003678:	431a      	orrs	r2, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800367a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800367c:	6201      	str	r1, [r0, #32]
}
 800367e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003680:	0022      	movs	r2, r4
 8003682:	e7ef      	b.n	8003664 <TIM_TI1_SetConfig+0x24>
 8003684:	40012c00 	.word	0x40012c00
 8003688:	40000400 	.word	0x40000400
 800368c:	40014000 	.word	0x40014000

08003690 <HAL_TIM_IC_ConfigChannel>:
{
 8003690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003692:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8003694:	0001      	movs	r1, r0
 8003696:	2302      	movs	r3, #2
 8003698:	313c      	adds	r1, #60	; 0x3c
 800369a:	780e      	ldrb	r6, [r1, #0]
{
 800369c:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 800369e:	0018      	movs	r0, r3
 80036a0:	2e01      	cmp	r6, #1
 80036a2:	d01a      	beq.n	80036da <HAL_TIM_IC_ConfigChannel+0x4a>
 80036a4:	3801      	subs	r0, #1
 80036a6:	7008      	strb	r0, [r1, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80036a8:	704b      	strb	r3, [r1, #1]
  if (Channel == TIM_CHANNEL_1)
 80036aa:	2a00      	cmp	r2, #0
 80036ac:	d116      	bne.n	80036dc <HAL_TIM_IC_ConfigChannel+0x4c>
    TIM_TI1_SetConfig(htim->Instance,
 80036ae:	68eb      	ldr	r3, [r5, #12]
 80036b0:	686a      	ldr	r2, [r5, #4]
 80036b2:	6829      	ldr	r1, [r5, #0]
 80036b4:	6820      	ldr	r0, [r4, #0]
 80036b6:	f7ff ffc3 	bl	8003640 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80036ba:	210c      	movs	r1, #12
 80036bc:	6823      	ldr	r3, [r4, #0]
 80036be:	699a      	ldr	r2, [r3, #24]
 80036c0:	438a      	bics	r2, r1
 80036c2:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80036c8:	430a      	orrs	r2, r1
 80036ca:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80036cc:	0023      	movs	r3, r4
 80036ce:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 80036d0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80036d2:	333d      	adds	r3, #61	; 0x3d
  __HAL_UNLOCK(htim);
 80036d4:	343c      	adds	r4, #60	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80036d6:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(htim);
 80036d8:	7020      	strb	r0, [r4, #0]
}
 80036da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80036dc:	6829      	ldr	r1, [r5, #0]
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	9101      	str	r1, [sp, #4]
 80036e2:	686e      	ldr	r6, [r5, #4]
 80036e4:	68e8      	ldr	r0, [r5, #12]
  else if (Channel == TIM_CHANNEL_2)
 80036e6:	2a04      	cmp	r2, #4
 80036e8:	d11e      	bne.n	8003728 <HAL_TIM_IC_ConfigChannel+0x98>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036ea:	2710      	movs	r7, #16
 80036ec:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80036ee:	4930      	ldr	r1, [pc, #192]	; (80037b0 <HAL_TIM_IC_ConfigChannel+0x120>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036f0:	43ba      	bics	r2, r7
 80036f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036f4:	699f      	ldr	r7, [r3, #24]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80036f6:	0236      	lsls	r6, r6, #8
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80036f8:	400f      	ands	r7, r1
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80036fa:	433e      	orrs	r6, r7

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036fc:	4f2d      	ldr	r7, [pc, #180]	; (80037b4 <HAL_TIM_IC_ConfigChannel+0x124>)
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80036fe:	0700      	lsls	r0, r0, #28
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003700:	403e      	ands	r6, r7
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003702:	0c00      	lsrs	r0, r0, #16
 8003704:	4330      	orrs	r0, r6

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003706:	26a0      	movs	r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003708:	9901      	ldr	r1, [sp, #4]
  tmpccer = TIMx->CCER;
 800370a:	6a1a      	ldr	r2, [r3, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800370c:	0109      	lsls	r1, r1, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800370e:	43b2      	bics	r2, r6
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003710:	4031      	ands	r1, r6
 8003712:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003714:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 8003716:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003718:	699a      	ldr	r2, [r3, #24]
 800371a:	4927      	ldr	r1, [pc, #156]	; (80037b8 <HAL_TIM_IC_ConfigChannel+0x128>)
 800371c:	400a      	ands	r2, r1
 800371e:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003720:	68aa      	ldr	r2, [r5, #8]
 8003722:	6999      	ldr	r1, [r3, #24]
 8003724:	0212      	lsls	r2, r2, #8
 8003726:	e7cf      	b.n	80036c8 <HAL_TIM_IC_ConfigChannel+0x38>
 8003728:	68ad      	ldr	r5, [r5, #8]
  else if (Channel == TIM_CHANNEL_3)
 800372a:	2a08      	cmp	r2, #8
 800372c:	d120      	bne.n	8003770 <HAL_TIM_IC_ConfigChannel+0xe0>
  TIMx->CCER &= ~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800372e:	2103      	movs	r1, #3
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003730:	6a1a      	ldr	r2, [r3, #32]
 8003732:	4f22      	ldr	r7, [pc, #136]	; (80037bc <HAL_TIM_IC_ConfigChannel+0x12c>)
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003734:	0100      	lsls	r0, r0, #4
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003736:	403a      	ands	r2, r7
 8003738:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800373a:	69df      	ldr	r7, [r3, #28]
  tmpccer = TIMx->CCER;
 800373c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800373e:	438f      	bics	r7, r1
  tmpccmr2 |= TIM_ICSelection;
 8003740:	433e      	orrs	r6, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003742:	27f0      	movs	r7, #240	; 0xf0
 8003744:	43be      	bics	r6, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003746:	370f      	adds	r7, #15
 8003748:	4038      	ands	r0, r7
 800374a:	4306      	orrs	r6, r0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800374c:	481c      	ldr	r0, [pc, #112]	; (80037c0 <HAL_TIM_IC_ConfigChannel+0x130>)
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800374e:	9901      	ldr	r1, [sp, #4]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003750:	4002      	ands	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003752:	20a0      	movs	r0, #160	; 0xa0
 8003754:	0209      	lsls	r1, r1, #8
 8003756:	0100      	lsls	r0, r0, #4
 8003758:	4001      	ands	r1, r0
 800375a:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800375c:	61de      	str	r6, [r3, #28]
  TIMx->CCER = tmpccer;
 800375e:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003760:	210c      	movs	r1, #12
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	438a      	bics	r2, r1
 8003766:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003768:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800376a:	4315      	orrs	r5, r2
 800376c:	61dd      	str	r5, [r3, #28]
 800376e:	e7ad      	b.n	80036cc <HAL_TIM_IC_ConfigChannel+0x3c>
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003770:	6a1a      	ldr	r2, [r3, #32]
 8003772:	4f14      	ldr	r7, [pc, #80]	; (80037c4 <HAL_TIM_IC_ConfigChannel+0x134>)
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003774:	490e      	ldr	r1, [pc, #56]	; (80037b0 <HAL_TIM_IC_ConfigChannel+0x120>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003776:	403a      	ands	r2, r7
 8003778:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800377a:	69df      	ldr	r7, [r3, #28]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800377c:	0236      	lsls	r6, r6, #8
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800377e:	400f      	ands	r7, r1
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003780:	433e      	orrs	r6, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003782:	4f0c      	ldr	r7, [pc, #48]	; (80037b4 <HAL_TIM_IC_ConfigChannel+0x124>)
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003784:	0700      	lsls	r0, r0, #28
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003786:	403e      	ands	r6, r7
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003788:	0c00      	lsrs	r0, r0, #16
  tmpccer = TIMx->CCER;
 800378a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800378c:	4330      	orrs	r0, r6

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800378e:	4e0e      	ldr	r6, [pc, #56]	; (80037c8 <HAL_TIM_IC_ConfigChannel+0x138>)
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003790:	9901      	ldr	r1, [sp, #4]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003792:	4032      	ands	r2, r6
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003794:	26a0      	movs	r6, #160	; 0xa0
 8003796:	0309      	lsls	r1, r1, #12
 8003798:	0236      	lsls	r6, r6, #8
 800379a:	4031      	ands	r1, r6
 800379c:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800379e:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 80037a0:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80037a2:	69da      	ldr	r2, [r3, #28]
 80037a4:	4904      	ldr	r1, [pc, #16]	; (80037b8 <HAL_TIM_IC_ConfigChannel+0x128>)
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80037a6:	022d      	lsls	r5, r5, #8
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80037a8:	400a      	ands	r2, r1
 80037aa:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80037ac:	69da      	ldr	r2, [r3, #28]
 80037ae:	e7dc      	b.n	800376a <HAL_TIM_IC_ConfigChannel+0xda>
 80037b0:	fffffcff 	.word	0xfffffcff
 80037b4:	ffff0fff 	.word	0xffff0fff
 80037b8:	fffff3ff 	.word	0xfffff3ff
 80037bc:	fffffeff 	.word	0xfffffeff
 80037c0:	fffff5ff 	.word	0xfffff5ff
 80037c4:	ffffefff 	.word	0xffffefff
 80037c8:	ffff5fff 	.word	0xffff5fff

080037cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037cc:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037ce:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037d0:	4d03      	ldr	r5, [pc, #12]	; (80037e0 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037d2:	430a      	orrs	r2, r1
 80037d4:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037d6:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037d8:	4313      	orrs	r3, r2
 80037da:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037dc:	6083      	str	r3, [r0, #8]
}
 80037de:	bd30      	pop	{r4, r5, pc}
 80037e0:	ffff00ff 	.word	0xffff00ff

080037e4 <HAL_TIM_ConfigClockSource>:
{
 80037e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80037e6:	0005      	movs	r5, r0
 80037e8:	2302      	movs	r3, #2
 80037ea:	353c      	adds	r5, #60	; 0x3c
 80037ec:	782a      	ldrb	r2, [r5, #0]
{
 80037ee:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80037f0:	0018      	movs	r0, r3
 80037f2:	2a01      	cmp	r2, #1
 80037f4:	d016      	beq.n	8003824 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 80037f6:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 80037f8:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 80037fa:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80037fc:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 80037fe:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003800:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8003802:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003804:	4a3f      	ldr	r2, [pc, #252]	; (8003904 <HAL_TIM_ConfigClockSource+0x120>)
 8003806:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8003808:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800380a:	680b      	ldr	r3, [r1, #0]
 800380c:	2b40      	cmp	r3, #64	; 0x40
 800380e:	d063      	beq.n	80038d8 <HAL_TIM_ConfigClockSource+0xf4>
 8003810:	d814      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x58>
 8003812:	2b10      	cmp	r3, #16
 8003814:	d00b      	beq.n	800382e <HAL_TIM_ConfigClockSource+0x4a>
 8003816:	d806      	bhi.n	8003826 <HAL_TIM_ConfigClockSource+0x42>
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 800381c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800381e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003820:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8003822:	7028      	strb	r0, [r5, #0]
}
 8003824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8003826:	2b20      	cmp	r3, #32
 8003828:	d001      	beq.n	800382e <HAL_TIM_ConfigClockSource+0x4a>
 800382a:	2b30      	cmp	r3, #48	; 0x30
 800382c:	d1f6      	bne.n	800381c <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr &= ~TIM_SMCR_TS;
 800382e:	4a36      	ldr	r2, [pc, #216]	; (8003908 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = TIMx->SMCR;
 8003830:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003832:	4011      	ands	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003834:	2207      	movs	r2, #7
 8003836:	4313      	orrs	r3, r2
 8003838:	430b      	orrs	r3, r1
 800383a:	e019      	b.n	8003870 <HAL_TIM_ConfigClockSource+0x8c>
  switch (sClockSourceConfig->ClockSource)
 800383c:	2b60      	cmp	r3, #96	; 0x60
 800383e:	d034      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0xc6>
 8003840:	d818      	bhi.n	8003874 <HAL_TIM_ConfigClockSource+0x90>
 8003842:	2b50      	cmp	r3, #80	; 0x50
 8003844:	d1ea      	bne.n	800381c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003846:	684a      	ldr	r2, [r1, #4]
 8003848:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 800384a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800384c:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800384e:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003850:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003852:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003854:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003856:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003858:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800385a:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800385c:	240a      	movs	r4, #10
 800385e:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8003860:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003862:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003864:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003866:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003868:	4a27      	ldr	r2, [pc, #156]	; (8003908 <HAL_TIM_ConfigClockSource+0x124>)
 800386a:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800386c:	2357      	movs	r3, #87	; 0x57
 800386e:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8003870:	6083      	str	r3, [r0, #8]
 8003872:	e7d3      	b.n	800381c <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8003874:	2b70      	cmp	r3, #112	; 0x70
 8003876:	d00d      	beq.n	8003894 <HAL_TIM_ConfigClockSource+0xb0>
 8003878:	2280      	movs	r2, #128	; 0x80
 800387a:	0192      	lsls	r2, r2, #6
 800387c:	4293      	cmp	r3, r2
 800387e:	d1cd      	bne.n	800381c <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8003880:	68cb      	ldr	r3, [r1, #12]
 8003882:	684a      	ldr	r2, [r1, #4]
 8003884:	6889      	ldr	r1, [r1, #8]
 8003886:	f7ff ffa1 	bl	80037cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800388a:	2380      	movs	r3, #128	; 0x80
 800388c:	6822      	ldr	r2, [r4, #0]
 800388e:	01db      	lsls	r3, r3, #7
 8003890:	6891      	ldr	r1, [r2, #8]
 8003892:	e007      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0xc0>
      TIM_ETR_SetConfig(htim->Instance,
 8003894:	68cb      	ldr	r3, [r1, #12]
 8003896:	684a      	ldr	r2, [r1, #4]
 8003898:	6889      	ldr	r1, [r1, #8]
 800389a:	f7ff ff97 	bl	80037cc <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800389e:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 80038a0:	6822      	ldr	r2, [r4, #0]
 80038a2:	6891      	ldr	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038a4:	430b      	orrs	r3, r1
 80038a6:	6093      	str	r3, [r2, #8]
      break;
 80038a8:	e7b8      	b.n	800381c <HAL_TIM_ConfigClockSource+0x38>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038aa:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ac:	684b      	ldr	r3, [r1, #4]
 80038ae:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038b0:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038b2:	4f16      	ldr	r7, [pc, #88]	; (800390c <HAL_TIM_ConfigClockSource+0x128>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038b4:	43a1      	bics	r1, r4
 80038b6:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038b8:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038ba:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038bc:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038be:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038c0:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 80038c2:	6a01      	ldr	r1, [r0, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038c4:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038c6:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 80038c8:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 80038ca:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80038cc:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80038ce:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80038d0:	4a0d      	ldr	r2, [pc, #52]	; (8003908 <HAL_TIM_ConfigClockSource+0x124>)
 80038d2:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038d4:	2367      	movs	r3, #103	; 0x67
 80038d6:	e7ca      	b.n	800386e <HAL_TIM_ConfigClockSource+0x8a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d8:	684a      	ldr	r2, [r1, #4]
 80038da:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80038dc:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038de:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038e0:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038e2:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038e4:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038e6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e8:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038ea:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038ec:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ee:	240a      	movs	r4, #10
 80038f0:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80038f2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80038f4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80038f6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80038f8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80038fa:	4a03      	ldr	r2, [pc, #12]	; (8003908 <HAL_TIM_ConfigClockSource+0x124>)
 80038fc:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038fe:	2347      	movs	r3, #71	; 0x47
 8003900:	e7b5      	b.n	800386e <HAL_TIM_ConfigClockSource+0x8a>
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	ffce0088 	.word	0xffce0088
 8003908:	ffcfff8f 	.word	0xffcfff8f
 800390c:	ffff0fff 	.word	0xffff0fff

08003910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003910:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003912:	0004      	movs	r4, r0
 8003914:	2202      	movs	r2, #2
 8003916:	343c      	adds	r4, #60	; 0x3c
 8003918:	7825      	ldrb	r5, [r4, #0]
{
 800391a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 800391c:	0010      	movs	r0, r2
 800391e:	2d01      	cmp	r5, #1
 8003920:	d01a      	beq.n	8003958 <HAL_TIMEx_MasterConfigSynchronization+0x48>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003922:	001d      	movs	r5, r3
 8003924:	353d      	adds	r5, #61	; 0x3d
 8003926:	702a      	strb	r2, [r5, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003928:	4e0c      	ldr	r6, [pc, #48]	; (800395c <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
  tmpcr2 = htim->Instance->CR2;
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800392e:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003930:	42b2      	cmp	r2, r6
 8003932:	d103      	bne.n	800393c <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003934:	4e0a      	ldr	r6, [pc, #40]	; (8003960 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8003936:	4033      	ands	r3, r6
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003938:	684e      	ldr	r6, [r1, #4]
 800393a:	4333      	orrs	r3, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800393c:	2670      	movs	r6, #112	; 0x70
 800393e:	43b3      	bics	r3, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003940:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003942:	6889      	ldr	r1, [r1, #8]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003944:	4333      	orrs	r3, r6
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003946:	2680      	movs	r6, #128	; 0x80
 8003948:	43b0      	bics	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800394a:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800394c:	4301      	orrs	r1, r0

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800394e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003950:	2000      	movs	r0, #0
  htim->Instance->SMCR = tmpsmcr;
 8003952:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003954:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8003956:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003958:	bd70      	pop	{r4, r5, r6, pc}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	40012c00 	.word	0x40012c00
 8003960:	ff0fffff 	.word	0xff0fffff

08003964 <HAL_TIMEx_CommutCallback>:
 8003964:	4770      	bx	lr

08003966 <HAL_TIMEx_BreakCallback>:
 8003966:	4770      	bx	lr

08003968 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003968:	4770      	bx	lr
	...

0800396c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800396c:	b570      	push	{r4, r5, r6, lr}
 800396e:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003970:	6902      	ldr	r2, [r0, #16]
 8003972:	6883      	ldr	r3, [r0, #8]
 8003974:	69c1      	ldr	r1, [r0, #28]
 8003976:	4313      	orrs	r3, r2
 8003978:	6942      	ldr	r2, [r0, #20]
  tmpreg |= (uint32_t)huart->FifoMode;
 800397a:	6e65      	ldr	r5, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800397c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800397e:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003980:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003982:	6810      	ldr	r0, [r2, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 8003984:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003986:	4d9f      	ldr	r5, [pc, #636]	; (8003c04 <UART_SetConfig+0x298>)
 8003988:	4028      	ands	r0, r5
 800398a:	4303      	orrs	r3, r0
 800398c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800398e:	6853      	ldr	r3, [r2, #4]
 8003990:	489d      	ldr	r0, [pc, #628]	; (8003c08 <UART_SetConfig+0x29c>)
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003992:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003994:	4003      	ands	r3, r0
 8003996:	68e0      	ldr	r0, [r4, #12]
 8003998:	4303      	orrs	r3, r0
 800399a:	6053      	str	r3, [r2, #4]
    tmpreg |= huart->Init.OneBitSampling;
 800399c:	69a3      	ldr	r3, [r4, #24]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800399e:	6890      	ldr	r0, [r2, #8]
    tmpreg |= huart->Init.OneBitSampling;
 80039a0:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039a2:	4d9a      	ldr	r5, [pc, #616]	; (8003c0c <UART_SetConfig+0x2a0>)
 80039a4:	4028      	ands	r0, r5

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80039a6:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039a8:	4303      	orrs	r3, r0
 80039aa:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80039ac:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80039ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039b0:	43a8      	bics	r0, r5
 80039b2:	4318      	orrs	r0, r3
 80039b4:	62d0      	str	r0, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039b6:	4896      	ldr	r0, [pc, #600]	; (8003c10 <UART_SetConfig+0x2a4>)
 80039b8:	4282      	cmp	r2, r0
 80039ba:	d113      	bne.n	80039e4 <UART_SetConfig+0x78>
 80039bc:	2003      	movs	r0, #3
 80039be:	4a95      	ldr	r2, [pc, #596]	; (8003c14 <UART_SetConfig+0x2a8>)
 80039c0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80039c2:	4002      	ands	r2, r0
 80039c4:	4894      	ldr	r0, [pc, #592]	; (8003c18 <UART_SetConfig+0x2ac>)
 80039c6:	5c80      	ldrb	r0, [r0, r2]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039c8:	2280      	movs	r2, #128	; 0x80
 80039ca:	0212      	lsls	r2, r2, #8
 80039cc:	4291      	cmp	r1, r2
 80039ce:	d100      	bne.n	80039d2 <UART_SetConfig+0x66>
 80039d0:	e1b7      	b.n	8003d42 <UART_SetConfig+0x3d6>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80039d2:	2808      	cmp	r0, #8
 80039d4:	d817      	bhi.n	8003a06 <UART_SetConfig+0x9a>
 80039d6:	f7fc fb9b 	bl	8000110 <__gnu_thumb1_case_uqi>
 80039da:	1684      	.short	0x1684
 80039dc:	16f216be 	.word	0x16f216be
 80039e0:	1616      	.short	0x1616
 80039e2:	f5          	.byte	0xf5
 80039e3:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039e4:	488d      	ldr	r0, [pc, #564]	; (8003c1c <UART_SetConfig+0x2b0>)
 80039e6:	4282      	cmp	r2, r0
 80039e8:	d105      	bne.n	80039f6 <UART_SetConfig+0x8a>
 80039ea:	200c      	movs	r0, #12
 80039ec:	4a89      	ldr	r2, [pc, #548]	; (8003c14 <UART_SetConfig+0x2a8>)
 80039ee:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80039f0:	4002      	ands	r2, r0
 80039f2:	488b      	ldr	r0, [pc, #556]	; (8003c20 <UART_SetConfig+0x2b4>)
 80039f4:	e7e7      	b.n	80039c6 <UART_SetConfig+0x5a>
 80039f6:	4b8b      	ldr	r3, [pc, #556]	; (8003c24 <UART_SetConfig+0x2b8>)
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d100      	bne.n	80039fe <UART_SetConfig+0x92>
 80039fc:	e150      	b.n	8003ca0 <UART_SetConfig+0x334>
 80039fe:	4b8a      	ldr	r3, [pc, #552]	; (8003c28 <UART_SetConfig+0x2bc>)
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d100      	bne.n	8003a06 <UART_SetConfig+0x9a>
 8003a04:	e14c      	b.n	8003ca0 <UART_SetConfig+0x334>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 8003a06:	2001      	movs	r0, #1
 8003a08:	e191      	b.n	8003d2e <UART_SetConfig+0x3c2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d02f      	beq.n	8003a6e <UART_SetConfig+0x102>
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d019      	beq.n	8003a46 <UART_SetConfig+0xda>
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d019      	beq.n	8003a4a <UART_SetConfig+0xde>
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d019      	beq.n	8003a4e <UART_SetConfig+0xe2>
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d019      	beq.n	8003a52 <UART_SetConfig+0xe6>
 8003a1e:	2b05      	cmp	r3, #5
 8003a20:	d019      	beq.n	8003a56 <UART_SetConfig+0xea>
 8003a22:	2b06      	cmp	r3, #6
 8003a24:	d019      	beq.n	8003a5a <UART_SetConfig+0xee>
 8003a26:	2b07      	cmp	r3, #7
 8003a28:	d019      	beq.n	8003a5e <UART_SetConfig+0xf2>
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d019      	beq.n	8003a62 <UART_SetConfig+0xf6>
 8003a2e:	2b09      	cmp	r3, #9
 8003a30:	d019      	beq.n	8003a66 <UART_SetConfig+0xfa>
 8003a32:	2b0a      	cmp	r3, #10
 8003a34:	d019      	beq.n	8003a6a <UART_SetConfig+0xfe>
 8003a36:	2b0b      	cmp	r3, #11
 8003a38:	d119      	bne.n	8003a6e <UART_SetConfig+0x102>
 8003a3a:	487c      	ldr	r0, [pc, #496]	; (8003c2c <UART_SetConfig+0x2c0>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a3c:	6863      	ldr	r3, [r4, #4]
 8003a3e:	6861      	ldr	r1, [r4, #4]
 8003a40:	085b      	lsrs	r3, r3, #1
 8003a42:	1818      	adds	r0, r3, r0
 8003a44:	e160      	b.n	8003d08 <UART_SetConfig+0x39c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a46:	487a      	ldr	r0, [pc, #488]	; (8003c30 <UART_SetConfig+0x2c4>)
 8003a48:	e7f8      	b.n	8003a3c <UART_SetConfig+0xd0>
 8003a4a:	487a      	ldr	r0, [pc, #488]	; (8003c34 <UART_SetConfig+0x2c8>)
 8003a4c:	e7f6      	b.n	8003a3c <UART_SetConfig+0xd0>
 8003a4e:	487a      	ldr	r0, [pc, #488]	; (8003c38 <UART_SetConfig+0x2cc>)
 8003a50:	e7f4      	b.n	8003a3c <UART_SetConfig+0xd0>
 8003a52:	487a      	ldr	r0, [pc, #488]	; (8003c3c <UART_SetConfig+0x2d0>)
 8003a54:	e7f2      	b.n	8003a3c <UART_SetConfig+0xd0>
 8003a56:	487a      	ldr	r0, [pc, #488]	; (8003c40 <UART_SetConfig+0x2d4>)
 8003a58:	e7f0      	b.n	8003a3c <UART_SetConfig+0xd0>
 8003a5a:	487a      	ldr	r0, [pc, #488]	; (8003c44 <UART_SetConfig+0x2d8>)
 8003a5c:	e7ee      	b.n	8003a3c <UART_SetConfig+0xd0>
 8003a5e:	487a      	ldr	r0, [pc, #488]	; (8003c48 <UART_SetConfig+0x2dc>)
 8003a60:	e7ec      	b.n	8003a3c <UART_SetConfig+0xd0>
 8003a62:	487a      	ldr	r0, [pc, #488]	; (8003c4c <UART_SetConfig+0x2e0>)
 8003a64:	e7ea      	b.n	8003a3c <UART_SetConfig+0xd0>
 8003a66:	487a      	ldr	r0, [pc, #488]	; (8003c50 <UART_SetConfig+0x2e4>)
 8003a68:	e7e8      	b.n	8003a3c <UART_SetConfig+0xd0>
 8003a6a:	487a      	ldr	r0, [pc, #488]	; (8003c54 <UART_SetConfig+0x2e8>)
 8003a6c:	e7e6      	b.n	8003a3c <UART_SetConfig+0xd0>
 8003a6e:	487a      	ldr	r0, [pc, #488]	; (8003c58 <UART_SetConfig+0x2ec>)
 8003a70:	e7e4      	b.n	8003a3c <UART_SetConfig+0xd0>
        pclk = HAL_RCC_GetSysClockFreq();
 8003a72:	f7fe fda3 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8003a76:	e11a      	b.n	8003cae <UART_SetConfig+0x342>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d018      	beq.n	8003aae <UART_SetConfig+0x142>
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d019      	beq.n	8003ab4 <UART_SetConfig+0x148>
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d01a      	beq.n	8003aba <UART_SetConfig+0x14e>
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d01b      	beq.n	8003ac0 <UART_SetConfig+0x154>
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	d01b      	beq.n	8003ac4 <UART_SetConfig+0x158>
 8003a8c:	2b05      	cmp	r3, #5
 8003a8e:	d01c      	beq.n	8003aca <UART_SetConfig+0x15e>
 8003a90:	2b06      	cmp	r3, #6
 8003a92:	d01c      	beq.n	8003ace <UART_SetConfig+0x162>
 8003a94:	2080      	movs	r0, #128	; 0x80
 8003a96:	2b07      	cmp	r3, #7
 8003a98:	d01b      	beq.n	8003ad2 <UART_SetConfig+0x166>
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d01b      	beq.n	8003ad6 <UART_SetConfig+0x16a>
 8003a9e:	2b09      	cmp	r3, #9
 8003aa0:	d01b      	beq.n	8003ada <UART_SetConfig+0x16e>
 8003aa2:	2b0a      	cmp	r3, #10
 8003aa4:	d01b      	beq.n	8003ade <UART_SetConfig+0x172>
 8003aa6:	2b0b      	cmp	r3, #11
 8003aa8:	d102      	bne.n	8003ab0 <UART_SetConfig+0x144>
 8003aaa:	0040      	lsls	r0, r0, #1
 8003aac:	e7c6      	b.n	8003a3c <UART_SetConfig+0xd0>
 8003aae:	2080      	movs	r0, #128	; 0x80
 8003ab0:	0240      	lsls	r0, r0, #9
 8003ab2:	e7c3      	b.n	8003a3c <UART_SetConfig+0xd0>
 8003ab4:	2080      	movs	r0, #128	; 0x80
 8003ab6:	0200      	lsls	r0, r0, #8
 8003ab8:	e7c0      	b.n	8003a3c <UART_SetConfig+0xd0>
 8003aba:	2080      	movs	r0, #128	; 0x80
 8003abc:	01c0      	lsls	r0, r0, #7
 8003abe:	e7bd      	b.n	8003a3c <UART_SetConfig+0xd0>
 8003ac0:	4866      	ldr	r0, [pc, #408]	; (8003c5c <UART_SetConfig+0x2f0>)
 8003ac2:	e7bb      	b.n	8003a3c <UART_SetConfig+0xd0>
 8003ac4:	2080      	movs	r0, #128	; 0x80
 8003ac6:	0180      	lsls	r0, r0, #6
 8003ac8:	e7b8      	b.n	8003a3c <UART_SetConfig+0xd0>
 8003aca:	4865      	ldr	r0, [pc, #404]	; (8003c60 <UART_SetConfig+0x2f4>)
 8003acc:	e7b6      	b.n	8003a3c <UART_SetConfig+0xd0>
 8003ace:	4865      	ldr	r0, [pc, #404]	; (8003c64 <UART_SetConfig+0x2f8>)
 8003ad0:	e7b4      	b.n	8003a3c <UART_SetConfig+0xd0>
 8003ad2:	0140      	lsls	r0, r0, #5
 8003ad4:	e7b2      	b.n	8003a3c <UART_SetConfig+0xd0>
 8003ad6:	0100      	lsls	r0, r0, #4
 8003ad8:	e7b0      	b.n	8003a3c <UART_SetConfig+0xd0>
 8003ada:	00c0      	lsls	r0, r0, #3
 8003adc:	e7ae      	b.n	8003a3c <UART_SetConfig+0xd0>
 8003ade:	0080      	lsls	r0, r0, #2
 8003ae0:	e7ac      	b.n	8003a3c <UART_SetConfig+0xd0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ae2:	f7fe fe5f 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ae8:	2101      	movs	r1, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d021      	beq.n	8003b32 <UART_SetConfig+0x1c6>
 8003aee:	1849      	adds	r1, r1, r1
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d01e      	beq.n	8003b32 <UART_SetConfig+0x1c6>
 8003af4:	3102      	adds	r1, #2
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d01b      	beq.n	8003b32 <UART_SetConfig+0x1c6>
 8003afa:	3102      	adds	r1, #2
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d018      	beq.n	8003b32 <UART_SetConfig+0x1c6>
 8003b00:	3102      	adds	r1, #2
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d015      	beq.n	8003b32 <UART_SetConfig+0x1c6>
 8003b06:	3102      	adds	r1, #2
 8003b08:	2b05      	cmp	r3, #5
 8003b0a:	d012      	beq.n	8003b32 <UART_SetConfig+0x1c6>
 8003b0c:	3102      	adds	r1, #2
 8003b0e:	2b06      	cmp	r3, #6
 8003b10:	d00f      	beq.n	8003b32 <UART_SetConfig+0x1c6>
 8003b12:	3104      	adds	r1, #4
 8003b14:	2b07      	cmp	r3, #7
 8003b16:	d00c      	beq.n	8003b32 <UART_SetConfig+0x1c6>
 8003b18:	3110      	adds	r1, #16
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d009      	beq.n	8003b32 <UART_SetConfig+0x1c6>
 8003b1e:	3120      	adds	r1, #32
 8003b20:	2b09      	cmp	r3, #9
 8003b22:	d006      	beq.n	8003b32 <UART_SetConfig+0x1c6>
 8003b24:	3140      	adds	r1, #64	; 0x40
 8003b26:	2b0a      	cmp	r3, #10
 8003b28:	d003      	beq.n	8003b32 <UART_SetConfig+0x1c6>
 8003b2a:	397f      	subs	r1, #127	; 0x7f
 8003b2c:	2b0b      	cmp	r3, #11
 8003b2e:	d100      	bne.n	8003b32 <UART_SetConfig+0x1c6>
 8003b30:	31ff      	adds	r1, #255	; 0xff
 8003b32:	6865      	ldr	r5, [r4, #4]
 8003b34:	f7fc fb00 	bl	8000138 <__udivsi3>
 8003b38:	0029      	movs	r1, r5
 8003b3a:	086b      	lsrs	r3, r5, #1
 8003b3c:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b3e:	f7fc fafb 	bl	8000138 <__udivsi3>
 8003b42:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b44:	0003      	movs	r3, r0
 8003b46:	4a48      	ldr	r2, [pc, #288]	; (8003c68 <UART_SetConfig+0x2fc>)
 8003b48:	3b10      	subs	r3, #16
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d900      	bls.n	8003b50 <UART_SetConfig+0x1e4>
 8003b4e:	e75a      	b.n	8003a06 <UART_SetConfig+0x9a>
      huart->Instance->BRR = usartdiv;
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	60d8      	str	r0, [r3, #12]
 8003b54:	e0ea      	b.n	8003d2c <UART_SetConfig+0x3c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d02f      	beq.n	8003bba <UART_SetConfig+0x24e>
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d019      	beq.n	8003b92 <UART_SetConfig+0x226>
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d019      	beq.n	8003b96 <UART_SetConfig+0x22a>
 8003b62:	2b03      	cmp	r3, #3
 8003b64:	d019      	beq.n	8003b9a <UART_SetConfig+0x22e>
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d019      	beq.n	8003b9e <UART_SetConfig+0x232>
 8003b6a:	2b05      	cmp	r3, #5
 8003b6c:	d019      	beq.n	8003ba2 <UART_SetConfig+0x236>
 8003b6e:	2b06      	cmp	r3, #6
 8003b70:	d019      	beq.n	8003ba6 <UART_SetConfig+0x23a>
 8003b72:	2b07      	cmp	r3, #7
 8003b74:	d019      	beq.n	8003baa <UART_SetConfig+0x23e>
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d019      	beq.n	8003bae <UART_SetConfig+0x242>
 8003b7a:	2b09      	cmp	r3, #9
 8003b7c:	d019      	beq.n	8003bb2 <UART_SetConfig+0x246>
 8003b7e:	2b0a      	cmp	r3, #10
 8003b80:	d019      	beq.n	8003bb6 <UART_SetConfig+0x24a>
 8003b82:	2b0b      	cmp	r3, #11
 8003b84:	d119      	bne.n	8003bba <UART_SetConfig+0x24e>
 8003b86:	4839      	ldr	r0, [pc, #228]	; (8003c6c <UART_SetConfig+0x300>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b88:	6863      	ldr	r3, [r4, #4]
 8003b8a:	6861      	ldr	r1, [r4, #4]
 8003b8c:	085b      	lsrs	r3, r3, #1
 8003b8e:	1818      	adds	r0, r3, r0
 8003b90:	e7d5      	b.n	8003b3e <UART_SetConfig+0x1d2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b92:	4828      	ldr	r0, [pc, #160]	; (8003c34 <UART_SetConfig+0x2c8>)
 8003b94:	e7f8      	b.n	8003b88 <UART_SetConfig+0x21c>
 8003b96:	4829      	ldr	r0, [pc, #164]	; (8003c3c <UART_SetConfig+0x2d0>)
 8003b98:	e7f6      	b.n	8003b88 <UART_SetConfig+0x21c>
 8003b9a:	482a      	ldr	r0, [pc, #168]	; (8003c44 <UART_SetConfig+0x2d8>)
 8003b9c:	e7f4      	b.n	8003b88 <UART_SetConfig+0x21c>
 8003b9e:	482a      	ldr	r0, [pc, #168]	; (8003c48 <UART_SetConfig+0x2dc>)
 8003ba0:	e7f2      	b.n	8003b88 <UART_SetConfig+0x21c>
 8003ba2:	4833      	ldr	r0, [pc, #204]	; (8003c70 <UART_SetConfig+0x304>)
 8003ba4:	e7f0      	b.n	8003b88 <UART_SetConfig+0x21c>
 8003ba6:	4833      	ldr	r0, [pc, #204]	; (8003c74 <UART_SetConfig+0x308>)
 8003ba8:	e7ee      	b.n	8003b88 <UART_SetConfig+0x21c>
 8003baa:	4828      	ldr	r0, [pc, #160]	; (8003c4c <UART_SetConfig+0x2e0>)
 8003bac:	e7ec      	b.n	8003b88 <UART_SetConfig+0x21c>
 8003bae:	4828      	ldr	r0, [pc, #160]	; (8003c50 <UART_SetConfig+0x2e4>)
 8003bb0:	e7ea      	b.n	8003b88 <UART_SetConfig+0x21c>
 8003bb2:	4828      	ldr	r0, [pc, #160]	; (8003c54 <UART_SetConfig+0x2e8>)
 8003bb4:	e7e8      	b.n	8003b88 <UART_SetConfig+0x21c>
 8003bb6:	481d      	ldr	r0, [pc, #116]	; (8003c2c <UART_SetConfig+0x2c0>)
 8003bb8:	e7e6      	b.n	8003b88 <UART_SetConfig+0x21c>
 8003bba:	481d      	ldr	r0, [pc, #116]	; (8003c30 <UART_SetConfig+0x2c4>)
 8003bbc:	e7e4      	b.n	8003b88 <UART_SetConfig+0x21c>
        pclk = HAL_RCC_GetSysClockFreq();
 8003bbe:	f7fe fcfd 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8003bc2:	e790      	b.n	8003ae6 <UART_SetConfig+0x17a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d018      	beq.n	8003bfa <UART_SetConfig+0x28e>
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d018      	beq.n	8003bfe <UART_SetConfig+0x292>
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d053      	beq.n	8003c78 <UART_SetConfig+0x30c>
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	d054      	beq.n	8003c7e <UART_SetConfig+0x312>
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d054      	beq.n	8003c82 <UART_SetConfig+0x316>
 8003bd8:	2b05      	cmp	r3, #5
 8003bda:	d055      	beq.n	8003c88 <UART_SetConfig+0x31c>
 8003bdc:	2b06      	cmp	r3, #6
 8003bde:	d055      	beq.n	8003c8c <UART_SetConfig+0x320>
 8003be0:	2080      	movs	r0, #128	; 0x80
 8003be2:	2b07      	cmp	r3, #7
 8003be4:	d054      	beq.n	8003c90 <UART_SetConfig+0x324>
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d054      	beq.n	8003c94 <UART_SetConfig+0x328>
 8003bea:	2b09      	cmp	r3, #9
 8003bec:	d054      	beq.n	8003c98 <UART_SetConfig+0x32c>
 8003bee:	2b0a      	cmp	r3, #10
 8003bf0:	d054      	beq.n	8003c9c <UART_SetConfig+0x330>
 8003bf2:	2b0b      	cmp	r3, #11
 8003bf4:	d0c8      	beq.n	8003b88 <UART_SetConfig+0x21c>
 8003bf6:	0200      	lsls	r0, r0, #8
 8003bf8:	e7c6      	b.n	8003b88 <UART_SetConfig+0x21c>
 8003bfa:	2080      	movs	r0, #128	; 0x80
 8003bfc:	e7fb      	b.n	8003bf6 <UART_SetConfig+0x28a>
 8003bfe:	2080      	movs	r0, #128	; 0x80
 8003c00:	01c0      	lsls	r0, r0, #7
 8003c02:	e7c1      	b.n	8003b88 <UART_SetConfig+0x21c>
 8003c04:	cfff69f3 	.word	0xcfff69f3
 8003c08:	ffffcfff 	.word	0xffffcfff
 8003c0c:	11fff4ff 	.word	0x11fff4ff
 8003c10:	40013800 	.word	0x40013800
 8003c14:	40021000 	.word	0x40021000
 8003c18:	08004b20 	.word	0x08004b20
 8003c1c:	40004400 	.word	0x40004400
 8003c20:	08004b24 	.word	0x08004b24
 8003c24:	40004800 	.word	0x40004800
 8003c28:	40004c00 	.word	0x40004c00
 8003c2c:	0001e848 	.word	0x0001e848
 8003c30:	00f42400 	.word	0x00f42400
 8003c34:	007a1200 	.word	0x007a1200
 8003c38:	00516154 	.word	0x00516154
 8003c3c:	003d0900 	.word	0x003d0900
 8003c40:	0030d400 	.word	0x0030d400
 8003c44:	0028b0aa 	.word	0x0028b0aa
 8003c48:	001e8480 	.word	0x001e8480
 8003c4c:	000f4240 	.word	0x000f4240
 8003c50:	0007a120 	.word	0x0007a120
 8003c54:	0003d090 	.word	0x0003d090
 8003c58:	01e84800 	.word	0x01e84800
 8003c5c:	00002aaa 	.word	0x00002aaa
 8003c60:	00001998 	.word	0x00001998
 8003c64:	00001554 	.word	0x00001554
 8003c68:	0000ffef 	.word	0x0000ffef
 8003c6c:	0000f424 	.word	0x0000f424
 8003c70:	00186a00 	.word	0x00186a00
 8003c74:	00145855 	.word	0x00145855
 8003c78:	2080      	movs	r0, #128	; 0x80
 8003c7a:	0180      	lsls	r0, r0, #6
 8003c7c:	e784      	b.n	8003b88 <UART_SetConfig+0x21c>
 8003c7e:	4838      	ldr	r0, [pc, #224]	; (8003d60 <UART_SetConfig+0x3f4>)
 8003c80:	e782      	b.n	8003b88 <UART_SetConfig+0x21c>
 8003c82:	2080      	movs	r0, #128	; 0x80
 8003c84:	0140      	lsls	r0, r0, #5
 8003c86:	e77f      	b.n	8003b88 <UART_SetConfig+0x21c>
 8003c88:	4836      	ldr	r0, [pc, #216]	; (8003d64 <UART_SetConfig+0x3f8>)
 8003c8a:	e77d      	b.n	8003b88 <UART_SetConfig+0x21c>
 8003c8c:	4836      	ldr	r0, [pc, #216]	; (8003d68 <UART_SetConfig+0x3fc>)
 8003c8e:	e77b      	b.n	8003b88 <UART_SetConfig+0x21c>
 8003c90:	0100      	lsls	r0, r0, #4
 8003c92:	e779      	b.n	8003b88 <UART_SetConfig+0x21c>
 8003c94:	00c0      	lsls	r0, r0, #3
 8003c96:	e777      	b.n	8003b88 <UART_SetConfig+0x21c>
 8003c98:	0080      	lsls	r0, r0, #2
 8003c9a:	e775      	b.n	8003b88 <UART_SetConfig+0x21c>
 8003c9c:	0040      	lsls	r0, r0, #1
 8003c9e:	e773      	b.n	8003b88 <UART_SetConfig+0x21c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ca0:	2380      	movs	r3, #128	; 0x80
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	4299      	cmp	r1, r3
 8003ca6:	d000      	beq.n	8003caa <UART_SetConfig+0x33e>
 8003ca8:	e71b      	b.n	8003ae2 <UART_SetConfig+0x176>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003caa:	f7fe fd7b 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d021      	beq.n	8003cfa <UART_SetConfig+0x38e>
 8003cb6:	1849      	adds	r1, r1, r1
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d01e      	beq.n	8003cfa <UART_SetConfig+0x38e>
 8003cbc:	3102      	adds	r1, #2
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d01b      	beq.n	8003cfa <UART_SetConfig+0x38e>
 8003cc2:	3102      	adds	r1, #2
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	d018      	beq.n	8003cfa <UART_SetConfig+0x38e>
 8003cc8:	3102      	adds	r1, #2
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d015      	beq.n	8003cfa <UART_SetConfig+0x38e>
 8003cce:	3102      	adds	r1, #2
 8003cd0:	2b05      	cmp	r3, #5
 8003cd2:	d012      	beq.n	8003cfa <UART_SetConfig+0x38e>
 8003cd4:	3102      	adds	r1, #2
 8003cd6:	2b06      	cmp	r3, #6
 8003cd8:	d00f      	beq.n	8003cfa <UART_SetConfig+0x38e>
 8003cda:	3104      	adds	r1, #4
 8003cdc:	2b07      	cmp	r3, #7
 8003cde:	d00c      	beq.n	8003cfa <UART_SetConfig+0x38e>
 8003ce0:	3110      	adds	r1, #16
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	d009      	beq.n	8003cfa <UART_SetConfig+0x38e>
 8003ce6:	3120      	adds	r1, #32
 8003ce8:	2b09      	cmp	r3, #9
 8003cea:	d006      	beq.n	8003cfa <UART_SetConfig+0x38e>
 8003cec:	3140      	adds	r1, #64	; 0x40
 8003cee:	2b0a      	cmp	r3, #10
 8003cf0:	d003      	beq.n	8003cfa <UART_SetConfig+0x38e>
 8003cf2:	397f      	subs	r1, #127	; 0x7f
 8003cf4:	2b0b      	cmp	r3, #11
 8003cf6:	d100      	bne.n	8003cfa <UART_SetConfig+0x38e>
 8003cf8:	31ff      	adds	r1, #255	; 0xff
 8003cfa:	f7fc fa1d 	bl	8000138 <__udivsi3>
 8003cfe:	6865      	ldr	r5, [r4, #4]
 8003d00:	0040      	lsls	r0, r0, #1
 8003d02:	0029      	movs	r1, r5
 8003d04:	086b      	lsrs	r3, r5, #1
 8003d06:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d08:	f7fc fa16 	bl	8000138 <__udivsi3>
 8003d0c:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d0e:	0003      	movs	r3, r0
 8003d10:	4a16      	ldr	r2, [pc, #88]	; (8003d6c <UART_SetConfig+0x400>)
 8003d12:	3b10      	subs	r3, #16
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d900      	bls.n	8003d1a <UART_SetConfig+0x3ae>
 8003d18:	e675      	b.n	8003a06 <UART_SetConfig+0x9a>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d1a:	230f      	movs	r3, #15
 8003d1c:	0002      	movs	r2, r0
 8003d1e:	439a      	bics	r2, r3
 8003d20:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d22:	0700      	lsls	r0, r0, #28
      huart->Instance->BRR = brrtemp;
 8003d24:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d26:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 8003d28:	4318      	orrs	r0, r3
 8003d2a:	60d0      	str	r0, [r2, #12]
 8003d2c:	2000      	movs	r0, #0
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003d2e:	0022      	movs	r2, r4
 8003d30:	2301      	movs	r3, #1
 8003d32:	326a      	adds	r2, #106	; 0x6a
 8003d34:	8013      	strh	r3, [r2, #0]
  huart->NbRxDataToProcess = 1;
 8003d36:	3a02      	subs	r2, #2
 8003d38:	8013      	strh	r3, [r2, #0]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8003d3e:	6723      	str	r3, [r4, #112]	; 0x70

  return ret;
}
 8003d40:	bd70      	pop	{r4, r5, r6, pc}
    switch (clocksource)
 8003d42:	2808      	cmp	r0, #8
 8003d44:	d900      	bls.n	8003d48 <UART_SetConfig+0x3dc>
 8003d46:	e65e      	b.n	8003a06 <UART_SetConfig+0x9a>
 8003d48:	f7fc f9ec 	bl	8000124 <__gnu_thumb1_case_shi>
 8003d4c:	fe5dffaf 	.word	0xfe5dffaf
 8003d50:	fe5dfe5f 	.word	0xfe5dfe5f
 8003d54:	fe5dfe93 	.word	0xfe5dfe93
 8003d58:	fe5dfe5d 	.word	0xfe5dfe5d
 8003d5c:	fe96      	.short	0xfe96
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	00001555 	.word	0x00001555
 8003d64:	00000ccc 	.word	0x00000ccc
 8003d68:	00000aaa 	.word	0x00000aaa
 8003d6c:	0000ffef 	.word	0x0000ffef

08003d70 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d70:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8003d72:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d74:	07da      	lsls	r2, r3, #31
 8003d76:	d506      	bpl.n	8003d86 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d78:	6801      	ldr	r1, [r0, #0]
 8003d7a:	4c28      	ldr	r4, [pc, #160]	; (8003e1c <UART_AdvFeatureConfig+0xac>)
 8003d7c:	684a      	ldr	r2, [r1, #4]
 8003d7e:	4022      	ands	r2, r4
 8003d80:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003d82:	4322      	orrs	r2, r4
 8003d84:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d86:	079a      	lsls	r2, r3, #30
 8003d88:	d506      	bpl.n	8003d98 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d8a:	6801      	ldr	r1, [r0, #0]
 8003d8c:	4c24      	ldr	r4, [pc, #144]	; (8003e20 <UART_AdvFeatureConfig+0xb0>)
 8003d8e:	684a      	ldr	r2, [r1, #4]
 8003d90:	4022      	ands	r2, r4
 8003d92:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003d94:	4322      	orrs	r2, r4
 8003d96:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d98:	075a      	lsls	r2, r3, #29
 8003d9a:	d506      	bpl.n	8003daa <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d9c:	6801      	ldr	r1, [r0, #0]
 8003d9e:	4c21      	ldr	r4, [pc, #132]	; (8003e24 <UART_AdvFeatureConfig+0xb4>)
 8003da0:	684a      	ldr	r2, [r1, #4]
 8003da2:	4022      	ands	r2, r4
 8003da4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003da6:	4322      	orrs	r2, r4
 8003da8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003daa:	071a      	lsls	r2, r3, #28
 8003dac:	d506      	bpl.n	8003dbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dae:	6801      	ldr	r1, [r0, #0]
 8003db0:	4c1d      	ldr	r4, [pc, #116]	; (8003e28 <UART_AdvFeatureConfig+0xb8>)
 8003db2:	684a      	ldr	r2, [r1, #4]
 8003db4:	4022      	ands	r2, r4
 8003db6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003db8:	4322      	orrs	r2, r4
 8003dba:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dbc:	06da      	lsls	r2, r3, #27
 8003dbe:	d506      	bpl.n	8003dce <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dc0:	6801      	ldr	r1, [r0, #0]
 8003dc2:	4c1a      	ldr	r4, [pc, #104]	; (8003e2c <UART_AdvFeatureConfig+0xbc>)
 8003dc4:	688a      	ldr	r2, [r1, #8]
 8003dc6:	4022      	ands	r2, r4
 8003dc8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003dca:	4322      	orrs	r2, r4
 8003dcc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dce:	069a      	lsls	r2, r3, #26
 8003dd0:	d506      	bpl.n	8003de0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dd2:	6801      	ldr	r1, [r0, #0]
 8003dd4:	4c16      	ldr	r4, [pc, #88]	; (8003e30 <UART_AdvFeatureConfig+0xc0>)
 8003dd6:	688a      	ldr	r2, [r1, #8]
 8003dd8:	4022      	ands	r2, r4
 8003dda:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003ddc:	4322      	orrs	r2, r4
 8003dde:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003de0:	065a      	lsls	r2, r3, #25
 8003de2:	d510      	bpl.n	8003e06 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003de4:	6801      	ldr	r1, [r0, #0]
 8003de6:	4d13      	ldr	r5, [pc, #76]	; (8003e34 <UART_AdvFeatureConfig+0xc4>)
 8003de8:	684a      	ldr	r2, [r1, #4]
 8003dea:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003dec:	402a      	ands	r2, r5
 8003dee:	4322      	orrs	r2, r4
 8003df0:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003df2:	2280      	movs	r2, #128	; 0x80
 8003df4:	0352      	lsls	r2, r2, #13
 8003df6:	4294      	cmp	r4, r2
 8003df8:	d105      	bne.n	8003e06 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dfa:	684a      	ldr	r2, [r1, #4]
 8003dfc:	4c0e      	ldr	r4, [pc, #56]	; (8003e38 <UART_AdvFeatureConfig+0xc8>)
 8003dfe:	4022      	ands	r2, r4
 8003e00:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003e02:	4322      	orrs	r2, r4
 8003e04:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e06:	061b      	lsls	r3, r3, #24
 8003e08:	d506      	bpl.n	8003e18 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e0a:	6802      	ldr	r2, [r0, #0]
 8003e0c:	490b      	ldr	r1, [pc, #44]	; (8003e3c <UART_AdvFeatureConfig+0xcc>)
 8003e0e:	6853      	ldr	r3, [r2, #4]
 8003e10:	400b      	ands	r3, r1
 8003e12:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003e14:	430b      	orrs	r3, r1
 8003e16:	6053      	str	r3, [r2, #4]
  }
}
 8003e18:	bd30      	pop	{r4, r5, pc}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	fffdffff 	.word	0xfffdffff
 8003e20:	fffeffff 	.word	0xfffeffff
 8003e24:	fffbffff 	.word	0xfffbffff
 8003e28:	ffff7fff 	.word	0xffff7fff
 8003e2c:	ffffefff 	.word	0xffffefff
 8003e30:	ffffdfff 	.word	0xffffdfff
 8003e34:	ffefffff 	.word	0xffefffff
 8003e38:	ff9fffff 	.word	0xff9fffff
 8003e3c:	fff7ffff 	.word	0xfff7ffff

08003e40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	0004      	movs	r4, r0
 8003e44:	000e      	movs	r6, r1
 8003e46:	0015      	movs	r5, r2
 8003e48:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e4a:	6822      	ldr	r2, [r4, #0]
 8003e4c:	69d3      	ldr	r3, [r2, #28]
 8003e4e:	4033      	ands	r3, r6
 8003e50:	1b9b      	subs	r3, r3, r6
 8003e52:	4259      	negs	r1, r3
 8003e54:	414b      	adcs	r3, r1
 8003e56:	42ab      	cmp	r3, r5
 8003e58:	d001      	beq.n	8003e5e <UART_WaitOnFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	e01e      	b.n	8003e9c <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8003e5e:	9b06      	ldr	r3, [sp, #24]
 8003e60:	3301      	adds	r3, #1
 8003e62:	d0f3      	beq.n	8003e4c <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e64:	f7fd fce8 	bl	8001838 <HAL_GetTick>
 8003e68:	9b06      	ldr	r3, [sp, #24]
 8003e6a:	1bc0      	subs	r0, r0, r7
 8003e6c:	4283      	cmp	r3, r0
 8003e6e:	d301      	bcc.n	8003e74 <UART_WaitOnFlagUntilTimeout+0x34>
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1ea      	bne.n	8003e4a <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003e74:	0022      	movs	r2, r4
 8003e76:	ca08      	ldmia	r2!, {r3}
 8003e78:	4809      	ldr	r0, [pc, #36]	; (8003ea0 <UART_WaitOnFlagUntilTimeout+0x60>)
 8003e7a:	6819      	ldr	r1, [r3, #0]
 8003e7c:	4001      	ands	r1, r0
 8003e7e:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e80:	6899      	ldr	r1, [r3, #8]
 8003e82:	30a3      	adds	r0, #163	; 0xa3
 8003e84:	30ff      	adds	r0, #255	; 0xff
 8003e86:	4381      	bics	r1, r0
 8003e88:	6099      	str	r1, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003e8a:	2320      	movs	r3, #32
 8003e8c:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003e8e:	0022      	movs	r2, r4
 8003e90:	3208      	adds	r2, #8
 8003e92:	67d3      	str	r3, [r2, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8003e94:	2300      	movs	r3, #0
 8003e96:	347c      	adds	r4, #124	; 0x7c
 8003e98:	7023      	strb	r3, [r4, #0]
 8003e9a:	3002      	adds	r0, #2
}
 8003e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	fffffe5f 	.word	0xfffffe5f

08003ea4 <HAL_UART_Transmit>:
{
 8003ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8003ea6:	1d07      	adds	r7, r0, #4
{
 8003ea8:	b087      	sub	sp, #28
 8003eaa:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8003eac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
{
 8003eae:	0004      	movs	r4, r0
 8003eb0:	000d      	movs	r5, r1
 8003eb2:	0016      	movs	r6, r2
    return HAL_BUSY;
 8003eb4:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8003eb6:	2b20      	cmp	r3, #32
 8003eb8:	d14a      	bne.n	8003f50 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 8003eba:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003ebc:	2900      	cmp	r1, #0
 8003ebe:	d047      	beq.n	8003f50 <HAL_UART_Transmit+0xac>
 8003ec0:	2a00      	cmp	r2, #0
 8003ec2:	d045      	beq.n	8003f50 <HAL_UART_Transmit+0xac>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec4:	2380      	movs	r3, #128	; 0x80
 8003ec6:	68a2      	ldr	r2, [r4, #8]
 8003ec8:	015b      	lsls	r3, r3, #5
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d104      	bne.n	8003ed8 <HAL_UART_Transmit+0x34>
 8003ece:	6923      	ldr	r3, [r4, #16]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_UART_Transmit+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003ed4:	4201      	tst	r1, r0
 8003ed6:	d13b      	bne.n	8003f50 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8003ed8:	0023      	movs	r3, r4
 8003eda:	337c      	adds	r3, #124	; 0x7c
 8003edc:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8003ede:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8003ee0:	2a01      	cmp	r2, #1
 8003ee2:	d035      	beq.n	8003f50 <HAL_UART_Transmit+0xac>
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee8:	2200      	movs	r2, #0
 8003eea:	60da      	str	r2, [r3, #12]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eec:	2321      	movs	r3, #33	; 0x21
 8003eee:	67fb      	str	r3, [r7, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8003ef0:	f7fd fca2 	bl	8001838 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8003ef4:	0023      	movs	r3, r4
 8003ef6:	3354      	adds	r3, #84	; 0x54
 8003ef8:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8003efa:	3302      	adds	r3, #2
 8003efc:	801e      	strh	r6, [r3, #0]
 8003efe:	9303      	str	r3, [sp, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f00:	2380      	movs	r3, #128	; 0x80
 8003f02:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8003f04:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f06:	015b      	lsls	r3, r3, #5
      pdata16bits = NULL;
 8003f08:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d104      	bne.n	8003f18 <HAL_UART_Transmit+0x74>
 8003f0e:	6923      	ldr	r3, [r4, #16]
 8003f10:	42b3      	cmp	r3, r6
 8003f12:	d101      	bne.n	8003f18 <HAL_UART_Transmit+0x74>
 8003f14:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8003f16:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8003f18:	0023      	movs	r3, r4
 8003f1a:	3356      	adds	r3, #86	; 0x56
 8003f1c:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f1e:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 8003f20:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 8003f26:	2a00      	cmp	r2, #0
 8003f28:	d10a      	bne.n	8003f40 <HAL_UART_Transmit+0x9c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f2a:	2140      	movs	r1, #64	; 0x40
 8003f2c:	0020      	movs	r0, r4
 8003f2e:	f7ff ff87 	bl	8003e40 <UART_WaitOnFlagUntilTimeout>
 8003f32:	2800      	cmp	r0, #0
 8003f34:	d10b      	bne.n	8003f4e <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_READY;
 8003f36:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8003f38:	347c      	adds	r4, #124	; 0x7c
    huart->gState = HAL_UART_STATE_READY;
 8003f3a:	67fb      	str	r3, [r7, #124]	; 0x7c
    __HAL_UNLOCK(huart);
 8003f3c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8003f3e:	e007      	b.n	8003f50 <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f40:	2200      	movs	r2, #0
 8003f42:	2180      	movs	r1, #128	; 0x80
 8003f44:	0020      	movs	r0, r4
 8003f46:	f7ff ff7b 	bl	8003e40 <UART_WaitOnFlagUntilTimeout>
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d002      	beq.n	8003f54 <HAL_UART_Transmit+0xb0>
        return HAL_TIMEOUT;
 8003f4e:	2003      	movs	r0, #3
}
 8003f50:	b007      	add	sp, #28
 8003f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f54:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003f56:	2d00      	cmp	r5, #0
 8003f58:	d10b      	bne.n	8003f72 <HAL_UART_Transmit+0xce>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f5a:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8003f5c:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f5e:	05db      	lsls	r3, r3, #23
 8003f60:	0ddb      	lsrs	r3, r3, #23
 8003f62:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003f64:	9b03      	ldr	r3, [sp, #12]
 8003f66:	9a03      	ldr	r2, [sp, #12]
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	8013      	strh	r3, [r2, #0]
 8003f70:	e7d2      	b.n	8003f18 <HAL_UART_Transmit+0x74>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f72:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8003f74:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f76:	6293      	str	r3, [r2, #40]	; 0x28
 8003f78:	e7f4      	b.n	8003f64 <HAL_UART_Transmit+0xc0>
	...

08003f7c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f7c:	0003      	movs	r3, r0
{
 8003f7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f80:	2600      	movs	r6, #0
{
 8003f82:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f84:	3388      	adds	r3, #136	; 0x88
 8003f86:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8003f88:	f7fd fc56 	bl	8001838 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f8c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003f8e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	071b      	lsls	r3, r3, #28
 8003f94:	d417      	bmi.n	8003fc6 <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	075b      	lsls	r3, r3, #29
 8003f9c:	d50a      	bpl.n	8003fb4 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f9e:	2180      	movs	r1, #128	; 0x80
 8003fa0:	4b0f      	ldr	r3, [pc, #60]	; (8003fe0 <UART_CheckIdleState+0x64>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	03c9      	lsls	r1, r1, #15
 8003fa8:	002b      	movs	r3, r5
 8003faa:	0020      	movs	r0, r4
 8003fac:	f7ff ff48 	bl	8003e40 <UART_WaitOnFlagUntilTimeout>
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	d113      	bne.n	8003fdc <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8003fb4:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003fb6:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003fb8:	1d22      	adds	r2, r4, #4
 8003fba:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8003fbc:	347c      	adds	r4, #124	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003fbe:	3204      	adds	r2, #4
 8003fc0:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8003fc2:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8003fc4:	e00b      	b.n	8003fde <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fc6:	2180      	movs	r1, #128	; 0x80
 8003fc8:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <UART_CheckIdleState+0x64>)
 8003fca:	0032      	movs	r2, r6
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	0389      	lsls	r1, r1, #14
 8003fd0:	0003      	movs	r3, r0
 8003fd2:	0020      	movs	r0, r4
 8003fd4:	f7ff ff34 	bl	8003e40 <UART_WaitOnFlagUntilTimeout>
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	d0dc      	beq.n	8003f96 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003fdc:	2003      	movs	r0, #3
}
 8003fde:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8003fe0:	01ffffff 	.word	0x01ffffff

08003fe4 <HAL_UART_Init>:
{
 8003fe4:	b570      	push	{r4, r5, r6, lr}
 8003fe6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003fe8:	d101      	bne.n	8003fee <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8003fea:	2001      	movs	r0, #1
}
 8003fec:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8003fee:	1d05      	adds	r5, r0, #4
 8003ff0:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d104      	bne.n	8004000 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8003ff6:	0002      	movs	r2, r0
 8003ff8:	327c      	adds	r2, #124	; 0x7c
 8003ffa:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8003ffc:	f7fd fa56 	bl	80014ac <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004000:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004002:	2101      	movs	r1, #1
 8004004:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004006:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8004008:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800400a:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800400c:	438b      	bics	r3, r1
 800400e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004010:	f7ff fcac 	bl	800396c <UART_SetConfig>
 8004014:	2801      	cmp	r0, #1
 8004016:	d0e8      	beq.n	8003fea <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004018:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <HAL_UART_Init+0x40>
    UART_AdvFeatureConfig(huart);
 800401e:	0020      	movs	r0, r4
 8004020:	f7ff fea6 	bl	8003d70 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004024:	6823      	ldr	r3, [r4, #0]
 8004026:	4908      	ldr	r1, [pc, #32]	; (8004048 <HAL_UART_Init+0x64>)
 8004028:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800402a:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800402c:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800402e:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004030:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	438a      	bics	r2, r1
 8004036:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004038:	2201      	movs	r2, #1
 800403a:	6819      	ldr	r1, [r3, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004040:	f7ff ff9c 	bl	8003f7c <UART_CheckIdleState>
 8004044:	e7d2      	b.n	8003fec <HAL_UART_Init+0x8>
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	ffffb7ff 	.word	0xffffb7ff

0800404c <UARTEx_SetNbDataToProcess>:
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800404c:	2301      	movs	r3, #1
{
 800404e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004050:	b087      	sub	sp, #28
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004052:	aa02      	add	r2, sp, #8
 8004054:	7013      	strb	r3, [r2, #0]
 8004056:	7053      	strb	r3, [r2, #1]
 8004058:	7093      	strb	r3, [r2, #2]
 800405a:	2203      	movs	r2, #3
 800405c:	a902      	add	r1, sp, #8
 800405e:	70ca      	strb	r2, [r1, #3]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004060:	2502      	movs	r5, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004062:	2200      	movs	r2, #0
 8004064:	2607      	movs	r6, #7
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004066:	ac04      	add	r4, sp, #16
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004068:	718a      	strb	r2, [r1, #6]
 800406a:	71ca      	strb	r2, [r1, #7]
 800406c:	710e      	strb	r6, [r1, #4]
 800406e:	714b      	strb	r3, [r1, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004070:	70a5      	strb	r5, [r4, #2]
 8004072:	2104      	movs	r1, #4
 8004074:	0007      	movs	r7, r0
 8004076:	0005      	movs	r5, r0
 8004078:	3208      	adds	r2, #8
 800407a:	7022      	strb	r2, [r4, #0]
 800407c:	7122      	strb	r2, [r4, #4]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800407e:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004080:	7061      	strb	r1, [r4, #1]
 8004082:	70e1      	strb	r1, [r4, #3]
 8004084:	7163      	strb	r3, [r4, #5]
 8004086:	71a3      	strb	r3, [r4, #6]
 8004088:	71e3      	strb	r3, [r4, #7]
 800408a:	376a      	adds	r7, #106	; 0x6a
 800408c:	3568      	adds	r5, #104	; 0x68
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800408e:	2a00      	cmp	r2, #0
 8004090:	d103      	bne.n	800409a <UARTEx_SetNbDataToProcess+0x4e>
  {
    huart->NbTxDataToProcess = 1U;
 8004092:	803b      	strh	r3, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 8004094:	802b      	strh	r3, [r5, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004096:	b007      	add	sp, #28
 8004098:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800409a:	6803      	ldr	r3, [r0, #0]
 800409c:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800409e:	689b      	ldr	r3, [r3, #8]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80040a0:	9201      	str	r2, [sp, #4]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80040a2:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80040a4:	aa02      	add	r2, sp, #8
 80040a6:	5cd0      	ldrb	r0, [r2, r3]
 80040a8:	5ce1      	ldrb	r1, [r4, r3]
 80040aa:	00c0      	lsls	r0, r0, #3
 80040ac:	f7fc f8ce 	bl	800024c <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80040b0:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80040b2:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80040b4:	0e5b      	lsrs	r3, r3, #25
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80040b6:	401e      	ands	r6, r3
 80040b8:	ab02      	add	r3, sp, #8
 80040ba:	5d98      	ldrb	r0, [r3, r6]
 80040bc:	5da1      	ldrb	r1, [r4, r6]
 80040be:	00c0      	lsls	r0, r0, #3
 80040c0:	f7fc f8c4 	bl	800024c <__divsi3>
 80040c4:	8028      	strh	r0, [r5, #0]
}
 80040c6:	e7e6      	b.n	8004096 <UARTEx_SetNbDataToProcess+0x4a>

080040c8 <HAL_UARTEx_EnableFifoMode>:
{
 80040c8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80040ca:	0004      	movs	r4, r0
 80040cc:	347c      	adds	r4, #124	; 0x7c
 80040ce:	7822      	ldrb	r2, [r4, #0]
 80040d0:	2302      	movs	r3, #2
 80040d2:	2a01      	cmp	r2, #1
 80040d4:	d014      	beq.n	8004100 <HAL_UARTEx_EnableFifoMode+0x38>
 80040d6:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80040d8:	1d05      	adds	r5, r0, #4
 80040da:	3322      	adds	r3, #34	; 0x22
  __HAL_LOCK(huart);
 80040dc:	7026      	strb	r6, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80040de:	67eb      	str	r3, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040e0:	6803      	ldr	r3, [r0, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80040e4:	6819      	ldr	r1, [r3, #0]
 80040e6:	43b1      	bics	r1, r6
 80040e8:	6019      	str	r1, [r3, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80040ea:	2180      	movs	r1, #128	; 0x80
 80040ec:	0589      	lsls	r1, r1, #22
 80040ee:	430a      	orrs	r2, r1
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80040f0:	6641      	str	r1, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040f2:	601a      	str	r2, [r3, #0]
  UARTEx_SetNbDataToProcess(huart);
 80040f4:	f7ff ffaa 	bl	800404c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80040f8:	2320      	movs	r3, #32
 80040fa:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 80040fc:	2300      	movs	r3, #0
 80040fe:	7023      	strb	r3, [r4, #0]
}
 8004100:	0018      	movs	r0, r3
 8004102:	bd70      	pop	{r4, r5, r6, pc}

08004104 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8004104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8004106:	0005      	movs	r5, r0
 8004108:	357c      	adds	r5, #124	; 0x7c
 800410a:	782b      	ldrb	r3, [r5, #0]
{
 800410c:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 800410e:	2002      	movs	r0, #2
 8004110:	2b01      	cmp	r3, #1
 8004112:	d017      	beq.n	8004144 <HAL_UARTEx_SetTxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 8004114:	2324      	movs	r3, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004116:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(huart);
 8004118:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800411a:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 800411c:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800411e:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004120:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8004122:	6813      	ldr	r3, [r2, #0]
 8004124:	4383      	bics	r3, r0
 8004126:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004128:	6893      	ldr	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800412a:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	08db      	lsrs	r3, r3, #3
 8004130:	4319      	orrs	r1, r3
 8004132:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004134:	f7ff ff8a 	bl	800404c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004138:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 800413a:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800413c:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800413e:	2320      	movs	r3, #32
 8004140:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8004142:	7028      	strb	r0, [r5, #0]
}
 8004144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004148 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8004148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 800414a:	0005      	movs	r5, r0
 800414c:	357c      	adds	r5, #124	; 0x7c
 800414e:	782b      	ldrb	r3, [r5, #0]
{
 8004150:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 8004152:	2002      	movs	r0, #2
 8004154:	2b01      	cmp	r3, #1
 8004156:	d017      	beq.n	8004188 <HAL_UARTEx_SetRxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 8004158:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 800415a:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800415c:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 800415e:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004160:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004162:	6823      	ldr	r3, [r4, #0]
 8004164:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	4382      	bics	r2, r0
 800416a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	4807      	ldr	r0, [pc, #28]	; (800418c <HAL_UARTEx_SetRxFifoThreshold+0x44>)
 8004170:	4002      	ands	r2, r0
 8004172:	4311      	orrs	r1, r2
 8004174:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004176:	0020      	movs	r0, r4
 8004178:	f7ff ff68 	bl	800404c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800417c:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 800417e:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004180:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004182:	2320      	movs	r3, #32
 8004184:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8004186:	7028      	strb	r0, [r5, #0]
}
 8004188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	f1ffffff 	.word	0xf1ffffff

08004190 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result 
  */
int32_t MX_FATFS_Init(void) 
{
 8004190:	b510      	push	{r4, lr}
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 8004192:	4906      	ldr	r1, [pc, #24]	; (80041ac <MX_FATFS_Init+0x1c>)
 8004194:	4806      	ldr	r0, [pc, #24]	; (80041b0 <MX_FATFS_Init+0x20>)
 8004196:	f000 f8a1 	bl	80042dc <FATFS_LinkDriver>
 800419a:	2800      	cmp	r0, #0
 800419c:	d103      	bne.n	80041a6 <MX_FATFS_Init+0x16>
  {
    return APP_ERROR;
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800419e:	2201      	movs	r2, #1
 80041a0:	4b04      	ldr	r3, [pc, #16]	; (80041b4 <MX_FATFS_Init+0x24>)
 80041a2:	701a      	strb	r2, [r3, #0]
    return APP_OK;
  }
  /* USER CODE END FATFS_Init */
}
 80041a4:	bd10      	pop	{r4, pc}
    return APP_ERROR;
 80041a6:	2001      	movs	r0, #1
 80041a8:	4240      	negs	r0, r0
 80041aa:	e7fb      	b.n	80041a4 <MX_FATFS_Init+0x14>
 80041ac:	200009cc 	.word	0x200009cc
 80041b0:	08004b34 	.word	0x08004b34
 80041b4:	20000608 	.word	0x20000608

080041b8 <MX_FATFS_Process>:
  /* USER CODE BEGIN FATFS_Process */
  int32_t process_res = APP_OK;  
    
  return process_res;
  /* USER CODE END FATFS_Process */
}  
 80041b8:	2000      	movs	r0, #0
 80041ba:	4770      	bx	lr

080041bc <SD_CheckStatus.isra.0>:
  SD_ioctl,
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 80041bc:	b570      	push	{r4, r5, r6, lr}
{
  Stat = STA_NOINIT;
 80041be:	2501      	movs	r5, #1
 80041c0:	4c05      	ldr	r4, [pc, #20]	; (80041d8 <SD_CheckStatus.isra.0+0x1c>)
 80041c2:	7025      	strb	r5, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80041c4:	f7fc ffc8 	bl	8001158 <BSP_SD_GetCardState>
 80041c8:	2800      	cmp	r0, #0
 80041ca:	d102      	bne.n	80041d2 <SD_CheckStatus.isra.0+0x16>
  {
    Stat &= ~STA_NOINIT;
 80041cc:	7823      	ldrb	r3, [r4, #0]
 80041ce:	43ab      	bics	r3, r5
 80041d0:	7023      	strb	r3, [r4, #0]
  }

  return Stat;
 80041d2:	7820      	ldrb	r0, [r4, #0]
 80041d4:	b2c0      	uxtb	r0, r0
}
 80041d6:	bd70      	pop	{r4, r5, r6, pc}
 80041d8:	20000010 	.word	0x20000010

080041dc <SD_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
  /* USER CODE BEGIN SDinitialize */
  Stat = STA_NOINIT;
 80041dc:	2301      	movs	r3, #1
{
 80041de:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80041e0:	4c05      	ldr	r4, [pc, #20]	; (80041f8 <SD_initialize+0x1c>)
 80041e2:	7023      	strb	r3, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80041e4:	f7fc fc32 	bl	8000a4c <BSP_SD_Init>
 80041e8:	2800      	cmp	r0, #0
 80041ea:	d102      	bne.n	80041f2 <SD_initialize+0x16>
  {
    Stat = SD_CheckStatus(lun);
 80041ec:	f7ff ffe6 	bl	80041bc <SD_CheckStatus.isra.0>
 80041f0:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80041f2:	7820      	ldrb	r0, [r4, #0]
 80041f4:	b2c0      	uxtb	r0, r0
  /* USER CODE END SDinitialize */
}
 80041f6:	bd10      	pop	{r4, pc}
 80041f8:	20000010 	.word	0x20000010

080041fc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80041fc:	b510      	push	{r4, lr}
  return SD_CheckStatus(lun);
 80041fe:	f7ff ffdd 	bl	80041bc <SD_CheckStatus.isra.0>
}
 8004202:	bd10      	pop	{r4, pc}

08004204 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004204:	0008      	movs	r0, r1
 8004206:	b510      	push	{r4, lr}
 8004208:	0011      	movs	r1, r2
 800420a:	001a      	movs	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800420c:	4b05      	ldr	r3, [pc, #20]	; (8004224 <SD_read+0x20>)
 800420e:	f7fc fea5 	bl	8000f5c <BSP_SD_ReadBlocks>
 8004212:	0003      	movs	r3, r0
  DRESULT res = RES_ERROR;
 8004214:	2001      	movs	r0, #1
  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004216:	2b00      	cmp	r3, #0
 8004218:	d103      	bne.n	8004222 <SD_read+0x1e>
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
  /* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800421a:	f7fc ff9d 	bl	8001158 <BSP_SD_GetCardState>
 800421e:	2800      	cmp	r0, #0
 8004220:	d1fb      	bne.n	800421a <SD_read+0x16>
}
 8004222:	bd10      	pop	{r4, pc}
 8004224:	05f5e100 	.word	0x05f5e100

08004228 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004228:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800422a:	4b11      	ldr	r3, [pc, #68]	; (8004270 <SD_ioctl+0x48>)
{
 800422c:	0014      	movs	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800422e:	781a      	ldrb	r2, [r3, #0]
{
 8004230:	b090      	sub	sp, #64	; 0x40
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004232:	2003      	movs	r0, #3
 8004234:	07d3      	lsls	r3, r2, #31
 8004236:	d413      	bmi.n	8004260 <SD_ioctl+0x38>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
     res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8004238:	3001      	adds	r0, #1
  switch (cmd)
 800423a:	2903      	cmp	r1, #3
 800423c:	d810      	bhi.n	8004260 <SD_ioctl+0x38>
 800423e:	0008      	movs	r0, r1
 8004240:	f7fb ff66 	bl	8000110 <__gnu_thumb1_case_uqi>
 8004244:	1008020d 	.word	0x1008020d
    BSP_SD_GetCardInfo(&CardInfo);
 8004248:	4668      	mov	r0, sp
 800424a:	f7fc fcc1 	bl	8000bd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800424e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	e004      	b.n	800425e <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8004254:	4668      	mov	r0, sp
 8004256:	f7fc fcbb 	bl	8000bd0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800425a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800425c:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 800425e:	2000      	movs	r0, #0
  }

  return res;
}
 8004260:	b010      	add	sp, #64	; 0x40
 8004262:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8004264:	4668      	mov	r0, sp
 8004266:	f7fc fcb3 	bl	8000bd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800426a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800426c:	0a5b      	lsrs	r3, r3, #9
 800426e:	e7ef      	b.n	8004250 <SD_ioctl+0x28>
 8004270:	20000010 	.word	0x20000010

08004274 <SD_write>:
{
 8004274:	0008      	movs	r0, r1
 8004276:	b510      	push	{r4, lr}
 8004278:	0011      	movs	r1, r2
 800427a:	001a      	movs	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <SD_write+0x20>)
 800427e:	f7fc fedf 	bl	8001040 <BSP_SD_WriteBlocks>
 8004282:	0003      	movs	r3, r0
  DRESULT res = RES_ERROR;
 8004284:	2001      	movs	r0, #1
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8004286:	2b00      	cmp	r3, #0
 8004288:	d103      	bne.n	8004292 <SD_write+0x1e>
    while(BSP_SD_GetCardState() != MSD_OK)
 800428a:	f7fc ff65 	bl	8001158 <BSP_SD_GetCardState>
 800428e:	2800      	cmp	r0, #0
 8004290:	d1fb      	bne.n	800428a <SD_write+0x16>
}
 8004292:	bd10      	pop	{r4, pc}
 8004294:	05f5e100 	.word	0x05f5e100

08004298 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004298:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800429a:	4b0f      	ldr	r3, [pc, #60]	; (80042d8 <FATFS_LinkDriverEx+0x40>)
  uint8_t ret = 1;
 800429c:	2501      	movs	r5, #1
  if(disk.nbr < _VOLUMES)
 800429e:	7a5c      	ldrb	r4, [r3, #9]
 80042a0:	b2e4      	uxtb	r4, r4
 80042a2:	2c00      	cmp	r4, #0
 80042a4:	d115      	bne.n	80042d2 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 80042a6:	7a5d      	ldrb	r5, [r3, #9]
 80042a8:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 80042aa:	7a5d      	ldrb	r5, [r3, #9]
 80042ac:	00ad      	lsls	r5, r5, #2
 80042ae:	195d      	adds	r5, r3, r5
 80042b0:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 80042b2:	7a58      	ldrb	r0, [r3, #9]
    DiskNum = disk.nbr++;
    path[0] = DiskNum + '0';
    path[1] = ':';
    path[2] = '/';
    path[3] = 0;
 80042b4:	0025      	movs	r5, r4
    disk.lun[disk.nbr] = lun;
 80042b6:	1818      	adds	r0, r3, r0
 80042b8:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 80042ba:	7a5a      	ldrb	r2, [r3, #9]
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	1c50      	adds	r0, r2, #1
 80042c0:	b2c0      	uxtb	r0, r0
 80042c2:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 80042c4:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 80042c6:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 80042c8:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80042ca:	3b0b      	subs	r3, #11
    path[0] = DiskNum + '0';
 80042cc:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 80042ce:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 80042d0:	70cc      	strb	r4, [r1, #3]
    ret = 0;
  }

  return ret;
}
 80042d2:	0028      	movs	r0, r5
 80042d4:	bd30      	pop	{r4, r5, pc}
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	2000060c 	.word	0x2000060c

080042dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80042dc:	b510      	push	{r4, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 80042de:	2200      	movs	r2, #0
 80042e0:	f7ff ffda 	bl	8004298 <FATFS_LinkDriverEx>
}
 80042e4:	bd10      	pop	{r4, pc}
	...

080042e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80042e8:	480d      	ldr	r0, [pc, #52]	; (8004320 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80042ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80042ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80042ee:	e003      	b.n	80042f8 <LoopCopyDataInit>

080042f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80042f0:	4b0c      	ldr	r3, [pc, #48]	; (8004324 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80042f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80042f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80042f6:	3104      	adds	r1, #4

080042f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80042f8:	480b      	ldr	r0, [pc, #44]	; (8004328 <LoopForever+0xa>)
  ldr r3, =_edata
 80042fa:	4b0c      	ldr	r3, [pc, #48]	; (800432c <LoopForever+0xe>)
  adds r2, r0, r1
 80042fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80042fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004300:	d3f6      	bcc.n	80042f0 <CopyDataInit>
  ldr r2, =_sbss
 8004302:	4a0b      	ldr	r2, [pc, #44]	; (8004330 <LoopForever+0x12>)
  b LoopFillZerobss
 8004304:	e002      	b.n	800430c <LoopFillZerobss>

08004306 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004306:	2300      	movs	r3, #0
  str  r3, [r2]
 8004308:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800430a:	3204      	adds	r2, #4

0800430c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <LoopForever+0x16>)
  cmp r2, r3
 800430e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004310:	d3f9      	bcc.n	8004306 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004312:	f7fd fa69 	bl	80017e8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004316:	f000 f817 	bl	8004348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800431a:	f7fc f8d5 	bl	80004c8 <main>

0800431e <LoopForever>:

LoopForever:
    b LoopForever
 800431e:	e7fe      	b.n	800431e <LoopForever>
  ldr   r0, =_estack
 8004320:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8004324:	08004b50 	.word	0x08004b50
  ldr r0, =_sdata
 8004328:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800432c:	20000518 	.word	0x20000518
  ldr r2, =_sbss
 8004330:	20000518 	.word	0x20000518
  ldr r3, = _ebss
 8004334:	20000e40 	.word	0x20000e40

08004338 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004338:	e7fe      	b.n	8004338 <ADC1_IRQHandler>
	...

0800433c <__errno>:
 800433c:	4b01      	ldr	r3, [pc, #4]	; (8004344 <__errno+0x8>)
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	4770      	bx	lr
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	20000014 	.word	0x20000014

08004348 <__libc_init_array>:
 8004348:	b570      	push	{r4, r5, r6, lr}
 800434a:	2600      	movs	r6, #0
 800434c:	4d0c      	ldr	r5, [pc, #48]	; (8004380 <__libc_init_array+0x38>)
 800434e:	4c0d      	ldr	r4, [pc, #52]	; (8004384 <__libc_init_array+0x3c>)
 8004350:	1b64      	subs	r4, r4, r5
 8004352:	10a4      	asrs	r4, r4, #2
 8004354:	42a6      	cmp	r6, r4
 8004356:	d109      	bne.n	800436c <__libc_init_array+0x24>
 8004358:	2600      	movs	r6, #0
 800435a:	f000 fb6d 	bl	8004a38 <_init>
 800435e:	4d0a      	ldr	r5, [pc, #40]	; (8004388 <__libc_init_array+0x40>)
 8004360:	4c0a      	ldr	r4, [pc, #40]	; (800438c <__libc_init_array+0x44>)
 8004362:	1b64      	subs	r4, r4, r5
 8004364:	10a4      	asrs	r4, r4, #2
 8004366:	42a6      	cmp	r6, r4
 8004368:	d105      	bne.n	8004376 <__libc_init_array+0x2e>
 800436a:	bd70      	pop	{r4, r5, r6, pc}
 800436c:	00b3      	lsls	r3, r6, #2
 800436e:	58eb      	ldr	r3, [r5, r3]
 8004370:	4798      	blx	r3
 8004372:	3601      	adds	r6, #1
 8004374:	e7ee      	b.n	8004354 <__libc_init_array+0xc>
 8004376:	00b3      	lsls	r3, r6, #2
 8004378:	58eb      	ldr	r3, [r5, r3]
 800437a:	4798      	blx	r3
 800437c:	3601      	adds	r6, #1
 800437e:	e7f2      	b.n	8004366 <__libc_init_array+0x1e>
 8004380:	08004b48 	.word	0x08004b48
 8004384:	08004b48 	.word	0x08004b48
 8004388:	08004b48 	.word	0x08004b48
 800438c:	08004b4c 	.word	0x08004b4c

08004390 <malloc>:
 8004390:	b510      	push	{r4, lr}
 8004392:	4b03      	ldr	r3, [pc, #12]	; (80043a0 <malloc+0x10>)
 8004394:	0001      	movs	r1, r0
 8004396:	6818      	ldr	r0, [r3, #0]
 8004398:	f000 f80e 	bl	80043b8 <_malloc_r>
 800439c:	bd10      	pop	{r4, pc}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	20000014 	.word	0x20000014

080043a4 <free>:
 80043a4:	b510      	push	{r4, lr}
 80043a6:	4b03      	ldr	r3, [pc, #12]	; (80043b4 <free+0x10>)
 80043a8:	0001      	movs	r1, r0
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	f000 fa8e 	bl	80048cc <_free_r>
 80043b0:	bd10      	pop	{r4, pc}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	20000014 	.word	0x20000014

080043b8 <_malloc_r>:
 80043b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ba:	000d      	movs	r5, r1
 80043bc:	b085      	sub	sp, #20
 80043be:	350b      	adds	r5, #11
 80043c0:	9001      	str	r0, [sp, #4]
 80043c2:	2d16      	cmp	r5, #22
 80043c4:	d908      	bls.n	80043d8 <_malloc_r+0x20>
 80043c6:	2307      	movs	r3, #7
 80043c8:	439d      	bics	r5, r3
 80043ca:	d506      	bpl.n	80043da <_malloc_r+0x22>
 80043cc:	230c      	movs	r3, #12
 80043ce:	9a01      	ldr	r2, [sp, #4]
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	2000      	movs	r0, #0
 80043d4:	b005      	add	sp, #20
 80043d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043d8:	2510      	movs	r5, #16
 80043da:	428d      	cmp	r5, r1
 80043dc:	d3f6      	bcc.n	80043cc <_malloc_r+0x14>
 80043de:	9801      	ldr	r0, [sp, #4]
 80043e0:	f000 f9f6 	bl	80047d0 <__malloc_lock>
 80043e4:	23f8      	movs	r3, #248	; 0xf8
 80043e6:	33ff      	adds	r3, #255	; 0xff
 80043e8:	48ba      	ldr	r0, [pc, #744]	; (80046d4 <_malloc_r+0x31c>)
 80043ea:	429d      	cmp	r5, r3
 80043ec:	d81f      	bhi.n	800442e <_malloc_r+0x76>
 80043ee:	002a      	movs	r2, r5
 80043f0:	3208      	adds	r2, #8
 80043f2:	1882      	adds	r2, r0, r2
 80043f4:	0011      	movs	r1, r2
 80043f6:	6854      	ldr	r4, [r2, #4]
 80043f8:	3908      	subs	r1, #8
 80043fa:	08eb      	lsrs	r3, r5, #3
 80043fc:	428c      	cmp	r4, r1
 80043fe:	d103      	bne.n	8004408 <_malloc_r+0x50>
 8004400:	68d4      	ldr	r4, [r2, #12]
 8004402:	3302      	adds	r3, #2
 8004404:	42a2      	cmp	r2, r4
 8004406:	d029      	beq.n	800445c <_malloc_r+0xa4>
 8004408:	2303      	movs	r3, #3
 800440a:	6862      	ldr	r2, [r4, #4]
 800440c:	68a1      	ldr	r1, [r4, #8]
 800440e:	439a      	bics	r2, r3
 8004410:	0013      	movs	r3, r2
 8004412:	68e2      	ldr	r2, [r4, #12]
 8004414:	18e3      	adds	r3, r4, r3
 8004416:	60ca      	str	r2, [r1, #12]
 8004418:	6091      	str	r1, [r2, #8]
 800441a:	2201      	movs	r2, #1
 800441c:	6859      	ldr	r1, [r3, #4]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
 8004422:	9801      	ldr	r0, [sp, #4]
 8004424:	f000 f9dc 	bl	80047e0 <__malloc_unlock>
 8004428:	0020      	movs	r0, r4
 800442a:	3008      	adds	r0, #8
 800442c:	e7d2      	b.n	80043d4 <_malloc_r+0x1c>
 800442e:	0a6a      	lsrs	r2, r5, #9
 8004430:	233f      	movs	r3, #63	; 0x3f
 8004432:	2a00      	cmp	r2, #0
 8004434:	d003      	beq.n	800443e <_malloc_r+0x86>
 8004436:	2a04      	cmp	r2, #4
 8004438:	d828      	bhi.n	800448c <_malloc_r+0xd4>
 800443a:	09ab      	lsrs	r3, r5, #6
 800443c:	3338      	adds	r3, #56	; 0x38
 800443e:	2203      	movs	r2, #3
 8004440:	4694      	mov	ip, r2
 8004442:	00d9      	lsls	r1, r3, #3
 8004444:	1809      	adds	r1, r1, r0
 8004446:	68cc      	ldr	r4, [r1, #12]
 8004448:	428c      	cmp	r4, r1
 800444a:	d006      	beq.n	800445a <_malloc_r+0xa2>
 800444c:	4666      	mov	r6, ip
 800444e:	6862      	ldr	r2, [r4, #4]
 8004450:	43b2      	bics	r2, r6
 8004452:	1b57      	subs	r7, r2, r5
 8004454:	2f0f      	cmp	r7, #15
 8004456:	dd31      	ble.n	80044bc <_malloc_r+0x104>
 8004458:	3b01      	subs	r3, #1
 800445a:	3301      	adds	r3, #1
 800445c:	0001      	movs	r1, r0
 800445e:	6904      	ldr	r4, [r0, #16]
 8004460:	3108      	adds	r1, #8
 8004462:	428c      	cmp	r4, r1
 8004464:	d04e      	beq.n	8004504 <_malloc_r+0x14c>
 8004466:	2203      	movs	r2, #3
 8004468:	6866      	ldr	r6, [r4, #4]
 800446a:	4396      	bics	r6, r2
 800446c:	0032      	movs	r2, r6
 800446e:	1b76      	subs	r6, r6, r5
 8004470:	2e0f      	cmp	r6, #15
 8004472:	dd31      	ble.n	80044d8 <_malloc_r+0x120>
 8004474:	2701      	movs	r7, #1
 8004476:	1963      	adds	r3, r4, r5
 8004478:	433d      	orrs	r5, r7
 800447a:	4337      	orrs	r7, r6
 800447c:	6065      	str	r5, [r4, #4]
 800447e:	6143      	str	r3, [r0, #20]
 8004480:	6103      	str	r3, [r0, #16]
 8004482:	60d9      	str	r1, [r3, #12]
 8004484:	6099      	str	r1, [r3, #8]
 8004486:	605f      	str	r7, [r3, #4]
 8004488:	50a6      	str	r6, [r4, r2]
 800448a:	e7ca      	b.n	8004422 <_malloc_r+0x6a>
 800448c:	2a14      	cmp	r2, #20
 800448e:	d802      	bhi.n	8004496 <_malloc_r+0xde>
 8004490:	0013      	movs	r3, r2
 8004492:	335b      	adds	r3, #91	; 0x5b
 8004494:	e7d3      	b.n	800443e <_malloc_r+0x86>
 8004496:	2a54      	cmp	r2, #84	; 0x54
 8004498:	d802      	bhi.n	80044a0 <_malloc_r+0xe8>
 800449a:	0b2b      	lsrs	r3, r5, #12
 800449c:	336e      	adds	r3, #110	; 0x6e
 800449e:	e7ce      	b.n	800443e <_malloc_r+0x86>
 80044a0:	23aa      	movs	r3, #170	; 0xaa
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d802      	bhi.n	80044ae <_malloc_r+0xf6>
 80044a8:	0beb      	lsrs	r3, r5, #15
 80044aa:	3377      	adds	r3, #119	; 0x77
 80044ac:	e7c7      	b.n	800443e <_malloc_r+0x86>
 80044ae:	498a      	ldr	r1, [pc, #552]	; (80046d8 <_malloc_r+0x320>)
 80044b0:	237e      	movs	r3, #126	; 0x7e
 80044b2:	428a      	cmp	r2, r1
 80044b4:	d8c3      	bhi.n	800443e <_malloc_r+0x86>
 80044b6:	0cab      	lsrs	r3, r5, #18
 80044b8:	337c      	adds	r3, #124	; 0x7c
 80044ba:	e7c0      	b.n	800443e <_malloc_r+0x86>
 80044bc:	68e6      	ldr	r6, [r4, #12]
 80044be:	2f00      	cmp	r7, #0
 80044c0:	db08      	blt.n	80044d4 <_malloc_r+0x11c>
 80044c2:	68a3      	ldr	r3, [r4, #8]
 80044c4:	60de      	str	r6, [r3, #12]
 80044c6:	60b3      	str	r3, [r6, #8]
 80044c8:	2301      	movs	r3, #1
 80044ca:	18a2      	adds	r2, r4, r2
 80044cc:	6851      	ldr	r1, [r2, #4]
 80044ce:	430b      	orrs	r3, r1
 80044d0:	6053      	str	r3, [r2, #4]
 80044d2:	e7a6      	b.n	8004422 <_malloc_r+0x6a>
 80044d4:	0034      	movs	r4, r6
 80044d6:	e7b7      	b.n	8004448 <_malloc_r+0x90>
 80044d8:	6141      	str	r1, [r0, #20]
 80044da:	6101      	str	r1, [r0, #16]
 80044dc:	2e00      	cmp	r6, #0
 80044de:	daf3      	bge.n	80044c8 <_malloc_r+0x110>
 80044e0:	497e      	ldr	r1, [pc, #504]	; (80046dc <_malloc_r+0x324>)
 80044e2:	428a      	cmp	r2, r1
 80044e4:	d842      	bhi.n	800456c <_malloc_r+0x1b4>
 80044e6:	08d2      	lsrs	r2, r2, #3
 80044e8:	39ff      	subs	r1, #255	; 0xff
 80044ea:	1096      	asrs	r6, r2, #2
 80044ec:	39ff      	subs	r1, #255	; 0xff
 80044ee:	40b1      	lsls	r1, r6
 80044f0:	6846      	ldr	r6, [r0, #4]
 80044f2:	00d2      	lsls	r2, r2, #3
 80044f4:	4331      	orrs	r1, r6
 80044f6:	6041      	str	r1, [r0, #4]
 80044f8:	1810      	adds	r0, r2, r0
 80044fa:	6882      	ldr	r2, [r0, #8]
 80044fc:	60e0      	str	r0, [r4, #12]
 80044fe:	60a2      	str	r2, [r4, #8]
 8004500:	6084      	str	r4, [r0, #8]
 8004502:	60d4      	str	r4, [r2, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	1099      	asrs	r1, r3, #2
 8004508:	408a      	lsls	r2, r1
 800450a:	4972      	ldr	r1, [pc, #456]	; (80046d4 <_malloc_r+0x31c>)
 800450c:	6848      	ldr	r0, [r1, #4]
 800450e:	4282      	cmp	r2, r0
 8004510:	d900      	bls.n	8004514 <_malloc_r+0x15c>
 8004512:	e097      	b.n	8004644 <_malloc_r+0x28c>
 8004514:	4210      	tst	r0, r2
 8004516:	d105      	bne.n	8004524 <_malloc_r+0x16c>
 8004518:	2403      	movs	r4, #3
 800451a:	43a3      	bics	r3, r4
 800451c:	0052      	lsls	r2, r2, #1
 800451e:	3304      	adds	r3, #4
 8004520:	4210      	tst	r0, r2
 8004522:	d0fb      	beq.n	800451c <_malloc_r+0x164>
 8004524:	469c      	mov	ip, r3
 8004526:	00d8      	lsls	r0, r3, #3
 8004528:	1808      	adds	r0, r1, r0
 800452a:	9002      	str	r0, [sp, #8]
 800452c:	9c02      	ldr	r4, [sp, #8]
 800452e:	68e4      	ldr	r4, [r4, #12]
 8004530:	9e02      	ldr	r6, [sp, #8]
 8004532:	42b4      	cmp	r4, r6
 8004534:	d158      	bne.n	80045e8 <_malloc_r+0x230>
 8004536:	0034      	movs	r4, r6
 8004538:	3408      	adds	r4, #8
 800453a:	9402      	str	r4, [sp, #8]
 800453c:	2401      	movs	r4, #1
 800453e:	44a4      	add	ip, r4
 8004540:	4664      	mov	r4, ip
 8004542:	2603      	movs	r6, #3
 8004544:	4234      	tst	r4, r6
 8004546:	d1f1      	bne.n	800452c <_malloc_r+0x174>
 8004548:	2403      	movs	r4, #3
 800454a:	4223      	tst	r3, r4
 800454c:	d174      	bne.n	8004638 <_malloc_r+0x280>
 800454e:	684b      	ldr	r3, [r1, #4]
 8004550:	4393      	bics	r3, r2
 8004552:	604b      	str	r3, [r1, #4]
 8004554:	6848      	ldr	r0, [r1, #4]
 8004556:	0052      	lsls	r2, r2, #1
 8004558:	4282      	cmp	r2, r0
 800455a:	d873      	bhi.n	8004644 <_malloc_r+0x28c>
 800455c:	2a00      	cmp	r2, #0
 800455e:	d071      	beq.n	8004644 <_malloc_r+0x28c>
 8004560:	4663      	mov	r3, ip
 8004562:	4210      	tst	r0, r2
 8004564:	d1de      	bne.n	8004524 <_malloc_r+0x16c>
 8004566:	3304      	adds	r3, #4
 8004568:	0052      	lsls	r2, r2, #1
 800456a:	e7fa      	b.n	8004562 <_malloc_r+0x1aa>
 800456c:	0a56      	lsrs	r6, r2, #9
 800456e:	2e04      	cmp	r6, #4
 8004570:	d816      	bhi.n	80045a0 <_malloc_r+0x1e8>
 8004572:	0991      	lsrs	r1, r2, #6
 8004574:	3138      	adds	r1, #56	; 0x38
 8004576:	00cf      	lsls	r7, r1, #3
 8004578:	183e      	adds	r6, r7, r0
 800457a:	2703      	movs	r7, #3
 800457c:	9602      	str	r6, [sp, #8]
 800457e:	46bc      	mov	ip, r7
 8004580:	68b6      	ldr	r6, [r6, #8]
 8004582:	9f02      	ldr	r7, [sp, #8]
 8004584:	42b7      	cmp	r7, r6
 8004586:	d127      	bne.n	80045d8 <_malloc_r+0x220>
 8004588:	2201      	movs	r2, #1
 800458a:	1089      	asrs	r1, r1, #2
 800458c:	408a      	lsls	r2, r1
 800458e:	6841      	ldr	r1, [r0, #4]
 8004590:	430a      	orrs	r2, r1
 8004592:	6042      	str	r2, [r0, #4]
 8004594:	9a02      	ldr	r2, [sp, #8]
 8004596:	60a6      	str	r6, [r4, #8]
 8004598:	60e2      	str	r2, [r4, #12]
 800459a:	6094      	str	r4, [r2, #8]
 800459c:	60f4      	str	r4, [r6, #12]
 800459e:	e7b1      	b.n	8004504 <_malloc_r+0x14c>
 80045a0:	2e14      	cmp	r6, #20
 80045a2:	d802      	bhi.n	80045aa <_malloc_r+0x1f2>
 80045a4:	0031      	movs	r1, r6
 80045a6:	315b      	adds	r1, #91	; 0x5b
 80045a8:	e7e5      	b.n	8004576 <_malloc_r+0x1be>
 80045aa:	2e54      	cmp	r6, #84	; 0x54
 80045ac:	d802      	bhi.n	80045b4 <_malloc_r+0x1fc>
 80045ae:	0b11      	lsrs	r1, r2, #12
 80045b0:	316e      	adds	r1, #110	; 0x6e
 80045b2:	e7e0      	b.n	8004576 <_malloc_r+0x1be>
 80045b4:	21aa      	movs	r1, #170	; 0xaa
 80045b6:	0049      	lsls	r1, r1, #1
 80045b8:	428e      	cmp	r6, r1
 80045ba:	d802      	bhi.n	80045c2 <_malloc_r+0x20a>
 80045bc:	0bd1      	lsrs	r1, r2, #15
 80045be:	3177      	adds	r1, #119	; 0x77
 80045c0:	e7d9      	b.n	8004576 <_malloc_r+0x1be>
 80045c2:	4f45      	ldr	r7, [pc, #276]	; (80046d8 <_malloc_r+0x320>)
 80045c4:	217e      	movs	r1, #126	; 0x7e
 80045c6:	42be      	cmp	r6, r7
 80045c8:	d8d5      	bhi.n	8004576 <_malloc_r+0x1be>
 80045ca:	0c91      	lsrs	r1, r2, #18
 80045cc:	317c      	adds	r1, #124	; 0x7c
 80045ce:	e7d2      	b.n	8004576 <_malloc_r+0x1be>
 80045d0:	68b6      	ldr	r6, [r6, #8]
 80045d2:	9902      	ldr	r1, [sp, #8]
 80045d4:	42b1      	cmp	r1, r6
 80045d6:	d004      	beq.n	80045e2 <_malloc_r+0x22a>
 80045d8:	4660      	mov	r0, ip
 80045da:	6871      	ldr	r1, [r6, #4]
 80045dc:	4381      	bics	r1, r0
 80045de:	428a      	cmp	r2, r1
 80045e0:	d3f6      	bcc.n	80045d0 <_malloc_r+0x218>
 80045e2:	68f2      	ldr	r2, [r6, #12]
 80045e4:	9202      	str	r2, [sp, #8]
 80045e6:	e7d5      	b.n	8004594 <_malloc_r+0x1dc>
 80045e8:	2603      	movs	r6, #3
 80045ea:	6867      	ldr	r7, [r4, #4]
 80045ec:	43b7      	bics	r7, r6
 80045ee:	9703      	str	r7, [sp, #12]
 80045f0:	1b7e      	subs	r6, r7, r5
 80045f2:	2e0f      	cmp	r6, #15
 80045f4:	dd11      	ble.n	800461a <_malloc_r+0x262>
 80045f6:	2201      	movs	r2, #1
 80045f8:	1963      	adds	r3, r4, r5
 80045fa:	4315      	orrs	r5, r2
 80045fc:	6065      	str	r5, [r4, #4]
 80045fe:	68e0      	ldr	r0, [r4, #12]
 8004600:	68a5      	ldr	r5, [r4, #8]
 8004602:	3108      	adds	r1, #8
 8004604:	60e8      	str	r0, [r5, #12]
 8004606:	4332      	orrs	r2, r6
 8004608:	6085      	str	r5, [r0, #8]
 800460a:	60cb      	str	r3, [r1, #12]
 800460c:	608b      	str	r3, [r1, #8]
 800460e:	60d9      	str	r1, [r3, #12]
 8004610:	6099      	str	r1, [r3, #8]
 8004612:	605a      	str	r2, [r3, #4]
 8004614:	003b      	movs	r3, r7
 8004616:	50e6      	str	r6, [r4, r3]
 8004618:	e703      	b.n	8004422 <_malloc_r+0x6a>
 800461a:	68e7      	ldr	r7, [r4, #12]
 800461c:	2e00      	cmp	r6, #0
 800461e:	db09      	blt.n	8004634 <_malloc_r+0x27c>
 8004620:	2201      	movs	r2, #1
 8004622:	9b03      	ldr	r3, [sp, #12]
 8004624:	18e3      	adds	r3, r4, r3
 8004626:	6859      	ldr	r1, [r3, #4]
 8004628:	430a      	orrs	r2, r1
 800462a:	605a      	str	r2, [r3, #4]
 800462c:	68a3      	ldr	r3, [r4, #8]
 800462e:	60df      	str	r7, [r3, #12]
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	e6f6      	b.n	8004422 <_malloc_r+0x6a>
 8004634:	003c      	movs	r4, r7
 8004636:	e77b      	b.n	8004530 <_malloc_r+0x178>
 8004638:	3808      	subs	r0, #8
 800463a:	6884      	ldr	r4, [r0, #8]
 800463c:	3b01      	subs	r3, #1
 800463e:	42a0      	cmp	r0, r4
 8004640:	d082      	beq.n	8004548 <_malloc_r+0x190>
 8004642:	e787      	b.n	8004554 <_malloc_r+0x19c>
 8004644:	2303      	movs	r3, #3
 8004646:	688f      	ldr	r7, [r1, #8]
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	439a      	bics	r2, r3
 800464c:	9202      	str	r2, [sp, #8]
 800464e:	4295      	cmp	r5, r2
 8004650:	d803      	bhi.n	800465a <_malloc_r+0x2a2>
 8004652:	1b52      	subs	r2, r2, r5
 8004654:	2a0f      	cmp	r2, #15
 8004656:	dd00      	ble.n	800465a <_malloc_r+0x2a2>
 8004658:	e09f      	b.n	800479a <_malloc_r+0x3e2>
 800465a:	9b02      	ldr	r3, [sp, #8]
 800465c:	18fb      	adds	r3, r7, r3
 800465e:	9303      	str	r3, [sp, #12]
 8004660:	4b1f      	ldr	r3, [pc, #124]	; (80046e0 <_malloc_r+0x328>)
 8004662:	681e      	ldr	r6, [r3, #0]
 8004664:	4b1f      	ldr	r3, [pc, #124]	; (80046e4 <_malloc_r+0x32c>)
 8004666:	3610      	adds	r6, #16
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	1976      	adds	r6, r6, r5
 800466c:	3301      	adds	r3, #1
 800466e:	d005      	beq.n	800467c <_malloc_r+0x2c4>
 8004670:	4b1d      	ldr	r3, [pc, #116]	; (80046e8 <_malloc_r+0x330>)
 8004672:	3b01      	subs	r3, #1
 8004674:	199e      	adds	r6, r3, r6
 8004676:	4b1c      	ldr	r3, [pc, #112]	; (80046e8 <_malloc_r+0x330>)
 8004678:	425b      	negs	r3, r3
 800467a:	401e      	ands	r6, r3
 800467c:	0031      	movs	r1, r6
 800467e:	9801      	ldr	r0, [sp, #4]
 8004680:	f000 f8b6 	bl	80047f0 <_sbrk_r>
 8004684:	0004      	movs	r4, r0
 8004686:	1c43      	adds	r3, r0, #1
 8004688:	d05f      	beq.n	800474a <_malloc_r+0x392>
 800468a:	9b03      	ldr	r3, [sp, #12]
 800468c:	4283      	cmp	r3, r0
 800468e:	d902      	bls.n	8004696 <_malloc_r+0x2de>
 8004690:	4b10      	ldr	r3, [pc, #64]	; (80046d4 <_malloc_r+0x31c>)
 8004692:	429f      	cmp	r7, r3
 8004694:	d159      	bne.n	800474a <_malloc_r+0x392>
 8004696:	4b15      	ldr	r3, [pc, #84]	; (80046ec <_malloc_r+0x334>)
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	18b1      	adds	r1, r6, r2
 800469c:	6019      	str	r1, [r3, #0]
 800469e:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <_malloc_r+0x330>)
 80046a0:	1e5a      	subs	r2, r3, #1
 80046a2:	9b03      	ldr	r3, [sp, #12]
 80046a4:	42a3      	cmp	r3, r4
 80046a6:	d127      	bne.n	80046f8 <_malloc_r+0x340>
 80046a8:	4213      	tst	r3, r2
 80046aa:	d125      	bne.n	80046f8 <_malloc_r+0x340>
 80046ac:	9a02      	ldr	r2, [sp, #8]
 80046ae:	4b09      	ldr	r3, [pc, #36]	; (80046d4 <_malloc_r+0x31c>)
 80046b0:	1992      	adds	r2, r2, r6
 80046b2:	2601      	movs	r6, #1
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	4316      	orrs	r6, r2
 80046b8:	605e      	str	r6, [r3, #4]
 80046ba:	4b0c      	ldr	r3, [pc, #48]	; (80046ec <_malloc_r+0x334>)
 80046bc:	4a0c      	ldr	r2, [pc, #48]	; (80046f0 <_malloc_r+0x338>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6811      	ldr	r1, [r2, #0]
 80046c2:	428b      	cmp	r3, r1
 80046c4:	d900      	bls.n	80046c8 <_malloc_r+0x310>
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	4a0a      	ldr	r2, [pc, #40]	; (80046f4 <_malloc_r+0x33c>)
 80046ca:	6811      	ldr	r1, [r2, #0]
 80046cc:	428b      	cmp	r3, r1
 80046ce:	d93c      	bls.n	800474a <_malloc_r+0x392>
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	e03a      	b.n	800474a <_malloc_r+0x392>
 80046d4:	20000108 	.word	0x20000108
 80046d8:	00000554 	.word	0x00000554
 80046dc:	000001ff 	.word	0x000001ff
 80046e0:	20000648 	.word	0x20000648
 80046e4:	20000510 	.word	0x20000510
 80046e8:	00000080 	.word	0x00000080
 80046ec:	20000618 	.word	0x20000618
 80046f0:	20000640 	.word	0x20000640
 80046f4:	20000644 	.word	0x20000644
 80046f8:	4b2d      	ldr	r3, [pc, #180]	; (80047b0 <_malloc_r+0x3f8>)
 80046fa:	6818      	ldr	r0, [r3, #0]
 80046fc:	3001      	adds	r0, #1
 80046fe:	d132      	bne.n	8004766 <_malloc_r+0x3ae>
 8004700:	601c      	str	r4, [r3, #0]
 8004702:	2007      	movs	r0, #7
 8004704:	4020      	ands	r0, r4
 8004706:	d002      	beq.n	800470e <_malloc_r+0x356>
 8004708:	2308      	movs	r3, #8
 800470a:	1a18      	subs	r0, r3, r0
 800470c:	1824      	adds	r4, r4, r0
 800470e:	4b29      	ldr	r3, [pc, #164]	; (80047b4 <_malloc_r+0x3fc>)
 8004710:	19a6      	adds	r6, r4, r6
 8004712:	1818      	adds	r0, r3, r0
 8004714:	4016      	ands	r6, r2
 8004716:	1b86      	subs	r6, r0, r6
 8004718:	0031      	movs	r1, r6
 800471a:	9801      	ldr	r0, [sp, #4]
 800471c:	f000 f868 	bl	80047f0 <_sbrk_r>
 8004720:	1c43      	adds	r3, r0, #1
 8004722:	d101      	bne.n	8004728 <_malloc_r+0x370>
 8004724:	0020      	movs	r0, r4
 8004726:	2600      	movs	r6, #0
 8004728:	4a23      	ldr	r2, [pc, #140]	; (80047b8 <_malloc_r+0x400>)
 800472a:	1b00      	subs	r0, r0, r4
 800472c:	6813      	ldr	r3, [r2, #0]
 800472e:	199b      	adds	r3, r3, r6
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	2301      	movs	r3, #1
 8004734:	4a21      	ldr	r2, [pc, #132]	; (80047bc <_malloc_r+0x404>)
 8004736:	1986      	adds	r6, r0, r6
 8004738:	431e      	orrs	r6, r3
 800473a:	6094      	str	r4, [r2, #8]
 800473c:	6066      	str	r6, [r4, #4]
 800473e:	4297      	cmp	r7, r2
 8004740:	d0bb      	beq.n	80046ba <_malloc_r+0x302>
 8004742:	9a02      	ldr	r2, [sp, #8]
 8004744:	2a0f      	cmp	r2, #15
 8004746:	d814      	bhi.n	8004772 <_malloc_r+0x3ba>
 8004748:	6063      	str	r3, [r4, #4]
 800474a:	2203      	movs	r2, #3
 800474c:	4b1b      	ldr	r3, [pc, #108]	; (80047bc <_malloc_r+0x404>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	4393      	bics	r3, r2
 8004754:	1b5a      	subs	r2, r3, r5
 8004756:	429d      	cmp	r5, r3
 8004758:	d801      	bhi.n	800475e <_malloc_r+0x3a6>
 800475a:	2a0f      	cmp	r2, #15
 800475c:	dc1d      	bgt.n	800479a <_malloc_r+0x3e2>
 800475e:	9801      	ldr	r0, [sp, #4]
 8004760:	f000 f83e 	bl	80047e0 <__malloc_unlock>
 8004764:	e635      	b.n	80043d2 <_malloc_r+0x1a>
 8004766:	9b03      	ldr	r3, [sp, #12]
 8004768:	1ae3      	subs	r3, r4, r3
 800476a:	185b      	adds	r3, r3, r1
 800476c:	4912      	ldr	r1, [pc, #72]	; (80047b8 <_malloc_r+0x400>)
 800476e:	600b      	str	r3, [r1, #0]
 8004770:	e7c7      	b.n	8004702 <_malloc_r+0x34a>
 8004772:	2207      	movs	r2, #7
 8004774:	9e02      	ldr	r6, [sp, #8]
 8004776:	3e0c      	subs	r6, #12
 8004778:	4396      	bics	r6, r2
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	4013      	ands	r3, r2
 800477e:	2205      	movs	r2, #5
 8004780:	4333      	orrs	r3, r6
 8004782:	607b      	str	r3, [r7, #4]
 8004784:	19bb      	adds	r3, r7, r6
 8004786:	605a      	str	r2, [r3, #4]
 8004788:	609a      	str	r2, [r3, #8]
 800478a:	2e0f      	cmp	r6, #15
 800478c:	d995      	bls.n	80046ba <_malloc_r+0x302>
 800478e:	0039      	movs	r1, r7
 8004790:	9801      	ldr	r0, [sp, #4]
 8004792:	3108      	adds	r1, #8
 8004794:	f000 f89a 	bl	80048cc <_free_r>
 8004798:	e78f      	b.n	80046ba <_malloc_r+0x302>
 800479a:	2301      	movs	r3, #1
 800479c:	0018      	movs	r0, r3
 800479e:	4907      	ldr	r1, [pc, #28]	; (80047bc <_malloc_r+0x404>)
 80047a0:	4328      	orrs	r0, r5
 80047a2:	688c      	ldr	r4, [r1, #8]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	1965      	adds	r5, r4, r5
 80047a8:	6060      	str	r0, [r4, #4]
 80047aa:	608d      	str	r5, [r1, #8]
 80047ac:	606b      	str	r3, [r5, #4]
 80047ae:	e638      	b.n	8004422 <_malloc_r+0x6a>
 80047b0:	20000510 	.word	0x20000510
 80047b4:	00000080 	.word	0x00000080
 80047b8:	20000618 	.word	0x20000618
 80047bc:	20000108 	.word	0x20000108

080047c0 <memset>:
 80047c0:	0003      	movs	r3, r0
 80047c2:	1882      	adds	r2, r0, r2
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d100      	bne.n	80047ca <memset+0xa>
 80047c8:	4770      	bx	lr
 80047ca:	7019      	strb	r1, [r3, #0]
 80047cc:	3301      	adds	r3, #1
 80047ce:	e7f9      	b.n	80047c4 <memset+0x4>

080047d0 <__malloc_lock>:
 80047d0:	b510      	push	{r4, lr}
 80047d2:	4802      	ldr	r0, [pc, #8]	; (80047dc <__malloc_lock+0xc>)
 80047d4:	f000 f92e 	bl	8004a34 <__retarget_lock_acquire_recursive>
 80047d8:	bd10      	pop	{r4, pc}
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	20000e34 	.word	0x20000e34

080047e0 <__malloc_unlock>:
 80047e0:	b510      	push	{r4, lr}
 80047e2:	4802      	ldr	r0, [pc, #8]	; (80047ec <__malloc_unlock+0xc>)
 80047e4:	f000 f927 	bl	8004a36 <__retarget_lock_release_recursive>
 80047e8:	bd10      	pop	{r4, pc}
 80047ea:	46c0      	nop			; (mov r8, r8)
 80047ec:	20000e34 	.word	0x20000e34

080047f0 <_sbrk_r>:
 80047f0:	2300      	movs	r3, #0
 80047f2:	b570      	push	{r4, r5, r6, lr}
 80047f4:	4c06      	ldr	r4, [pc, #24]	; (8004810 <_sbrk_r+0x20>)
 80047f6:	0005      	movs	r5, r0
 80047f8:	0008      	movs	r0, r1
 80047fa:	6023      	str	r3, [r4, #0]
 80047fc:	f7fc ffda 	bl	80017b4 <_sbrk>
 8004800:	1c43      	adds	r3, r0, #1
 8004802:	d103      	bne.n	800480c <_sbrk_r+0x1c>
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d000      	beq.n	800480c <_sbrk_r+0x1c>
 800480a:	602b      	str	r3, [r5, #0]
 800480c:	bd70      	pop	{r4, r5, r6, pc}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	20000e3c 	.word	0x20000e3c

08004814 <strcpy>:
 8004814:	1c03      	adds	r3, r0, #0
 8004816:	780a      	ldrb	r2, [r1, #0]
 8004818:	3101      	adds	r1, #1
 800481a:	701a      	strb	r2, [r3, #0]
 800481c:	3301      	adds	r3, #1
 800481e:	2a00      	cmp	r2, #0
 8004820:	d1f9      	bne.n	8004816 <strcpy+0x2>
 8004822:	4770      	bx	lr

08004824 <_malloc_trim_r>:
 8004824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004826:	4f25      	ldr	r7, [pc, #148]	; (80048bc <_malloc_trim_r+0x98>)
 8004828:	000c      	movs	r4, r1
 800482a:	0005      	movs	r5, r0
 800482c:	f7ff ffd0 	bl	80047d0 <__malloc_lock>
 8004830:	0038      	movs	r0, r7
 8004832:	2203      	movs	r2, #3
 8004834:	4e22      	ldr	r6, [pc, #136]	; (80048c0 <_malloc_trim_r+0x9c>)
 8004836:	3811      	subs	r0, #17
 8004838:	68b3      	ldr	r3, [r6, #8]
 800483a:	1b00      	subs	r0, r0, r4
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	0039      	movs	r1, r7
 8004840:	4393      	bics	r3, r2
 8004842:	18c0      	adds	r0, r0, r3
 8004844:	9301      	str	r3, [sp, #4]
 8004846:	f7fb fc77 	bl	8000138 <__udivsi3>
 800484a:	1e44      	subs	r4, r0, #1
 800484c:	437c      	muls	r4, r7
 800484e:	42bc      	cmp	r4, r7
 8004850:	da04      	bge.n	800485c <_malloc_trim_r+0x38>
 8004852:	0028      	movs	r0, r5
 8004854:	f7ff ffc4 	bl	80047e0 <__malloc_unlock>
 8004858:	2000      	movs	r0, #0
 800485a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800485c:	2100      	movs	r1, #0
 800485e:	0028      	movs	r0, r5
 8004860:	f7ff ffc6 	bl	80047f0 <_sbrk_r>
 8004864:	68b3      	ldr	r3, [r6, #8]
 8004866:	9a01      	ldr	r2, [sp, #4]
 8004868:	189b      	adds	r3, r3, r2
 800486a:	4298      	cmp	r0, r3
 800486c:	d1f1      	bne.n	8004852 <_malloc_trim_r+0x2e>
 800486e:	4261      	negs	r1, r4
 8004870:	0028      	movs	r0, r5
 8004872:	f7ff ffbd 	bl	80047f0 <_sbrk_r>
 8004876:	1c43      	adds	r3, r0, #1
 8004878:	d110      	bne.n	800489c <_malloc_trim_r+0x78>
 800487a:	2100      	movs	r1, #0
 800487c:	0028      	movs	r0, r5
 800487e:	f7ff ffb7 	bl	80047f0 <_sbrk_r>
 8004882:	68b2      	ldr	r2, [r6, #8]
 8004884:	1a81      	subs	r1, r0, r2
 8004886:	290f      	cmp	r1, #15
 8004888:	dde3      	ble.n	8004852 <_malloc_trim_r+0x2e>
 800488a:	4b0e      	ldr	r3, [pc, #56]	; (80048c4 <_malloc_trim_r+0xa0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	1ac0      	subs	r0, r0, r3
 8004890:	4b0d      	ldr	r3, [pc, #52]	; (80048c8 <_malloc_trim_r+0xa4>)
 8004892:	6018      	str	r0, [r3, #0]
 8004894:	2301      	movs	r3, #1
 8004896:	430b      	orrs	r3, r1
 8004898:	6053      	str	r3, [r2, #4]
 800489a:	e7da      	b.n	8004852 <_malloc_trim_r+0x2e>
 800489c:	68b2      	ldr	r2, [r6, #8]
 800489e:	2601      	movs	r6, #1
 80048a0:	9b01      	ldr	r3, [sp, #4]
 80048a2:	0028      	movs	r0, r5
 80048a4:	1b1b      	subs	r3, r3, r4
 80048a6:	4333      	orrs	r3, r6
 80048a8:	6053      	str	r3, [r2, #4]
 80048aa:	4b07      	ldr	r3, [pc, #28]	; (80048c8 <_malloc_trim_r+0xa4>)
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	1b14      	subs	r4, r2, r4
 80048b0:	601c      	str	r4, [r3, #0]
 80048b2:	f7ff ff95 	bl	80047e0 <__malloc_unlock>
 80048b6:	0030      	movs	r0, r6
 80048b8:	e7cf      	b.n	800485a <_malloc_trim_r+0x36>
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	00000080 	.word	0x00000080
 80048c0:	20000108 	.word	0x20000108
 80048c4:	20000510 	.word	0x20000510
 80048c8:	20000618 	.word	0x20000618

080048cc <_free_r>:
 80048cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048ce:	1e0d      	subs	r5, r1, #0
 80048d0:	9001      	str	r0, [sp, #4]
 80048d2:	d02d      	beq.n	8004930 <_free_r+0x64>
 80048d4:	f7ff ff7c 	bl	80047d0 <__malloc_lock>
 80048d8:	2301      	movs	r3, #1
 80048da:	0029      	movs	r1, r5
 80048dc:	469c      	mov	ip, r3
 80048de:	3908      	subs	r1, #8
 80048e0:	684f      	ldr	r7, [r1, #4]
 80048e2:	4662      	mov	r2, ip
 80048e4:	003b      	movs	r3, r7
 80048e6:	4666      	mov	r6, ip
 80048e8:	4393      	bics	r3, r2
 80048ea:	18c8      	adds	r0, r1, r3
 80048ec:	6845      	ldr	r5, [r0, #4]
 80048ee:	3202      	adds	r2, #2
 80048f0:	4395      	bics	r5, r2
 80048f2:	4a4a      	ldr	r2, [pc, #296]	; (8004a1c <_free_r+0x150>)
 80048f4:	4037      	ands	r7, r6
 80048f6:	6896      	ldr	r6, [r2, #8]
 80048f8:	42b0      	cmp	r0, r6
 80048fa:	d11a      	bne.n	8004932 <_free_r+0x66>
 80048fc:	195b      	adds	r3, r3, r5
 80048fe:	2f00      	cmp	r7, #0
 8004900:	d106      	bne.n	8004910 <_free_r+0x44>
 8004902:	6808      	ldr	r0, [r1, #0]
 8004904:	1a09      	subs	r1, r1, r0
 8004906:	688d      	ldr	r5, [r1, #8]
 8004908:	181b      	adds	r3, r3, r0
 800490a:	68c8      	ldr	r0, [r1, #12]
 800490c:	60e8      	str	r0, [r5, #12]
 800490e:	6085      	str	r5, [r0, #8]
 8004910:	2001      	movs	r0, #1
 8004912:	4318      	orrs	r0, r3
 8004914:	6048      	str	r0, [r1, #4]
 8004916:	6091      	str	r1, [r2, #8]
 8004918:	4a41      	ldr	r2, [pc, #260]	; (8004a20 <_free_r+0x154>)
 800491a:	6812      	ldr	r2, [r2, #0]
 800491c:	4293      	cmp	r3, r2
 800491e:	d304      	bcc.n	800492a <_free_r+0x5e>
 8004920:	4b40      	ldr	r3, [pc, #256]	; (8004a24 <_free_r+0x158>)
 8004922:	9801      	ldr	r0, [sp, #4]
 8004924:	6819      	ldr	r1, [r3, #0]
 8004926:	f7ff ff7d 	bl	8004824 <_malloc_trim_r>
 800492a:	9801      	ldr	r0, [sp, #4]
 800492c:	f7ff ff58 	bl	80047e0 <__malloc_unlock>
 8004930:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004932:	2600      	movs	r6, #0
 8004934:	6045      	str	r5, [r0, #4]
 8004936:	42b7      	cmp	r7, r6
 8004938:	d109      	bne.n	800494e <_free_r+0x82>
 800493a:	680f      	ldr	r7, [r1, #0]
 800493c:	4c3a      	ldr	r4, [pc, #232]	; (8004a28 <_free_r+0x15c>)
 800493e:	1bc9      	subs	r1, r1, r7
 8004940:	19db      	adds	r3, r3, r7
 8004942:	688f      	ldr	r7, [r1, #8]
 8004944:	42a7      	cmp	r7, r4
 8004946:	d02b      	beq.n	80049a0 <_free_r+0xd4>
 8004948:	68cc      	ldr	r4, [r1, #12]
 800494a:	60fc      	str	r4, [r7, #12]
 800494c:	60a7      	str	r7, [r4, #8]
 800494e:	1947      	adds	r7, r0, r5
 8004950:	687c      	ldr	r4, [r7, #4]
 8004952:	2701      	movs	r7, #1
 8004954:	423c      	tst	r4, r7
 8004956:	d10b      	bne.n	8004970 <_free_r+0xa4>
 8004958:	195b      	adds	r3, r3, r5
 800495a:	6885      	ldr	r5, [r0, #8]
 800495c:	2e00      	cmp	r6, #0
 800495e:	d121      	bne.n	80049a4 <_free_r+0xd8>
 8004960:	4c31      	ldr	r4, [pc, #196]	; (8004a28 <_free_r+0x15c>)
 8004962:	42a5      	cmp	r5, r4
 8004964:	d11e      	bne.n	80049a4 <_free_r+0xd8>
 8004966:	003e      	movs	r6, r7
 8004968:	6151      	str	r1, [r2, #20]
 800496a:	6111      	str	r1, [r2, #16]
 800496c:	60cd      	str	r5, [r1, #12]
 800496e:	608d      	str	r5, [r1, #8]
 8004970:	2001      	movs	r0, #1
 8004972:	0005      	movs	r5, r0
 8004974:	431d      	orrs	r5, r3
 8004976:	604d      	str	r5, [r1, #4]
 8004978:	50cb      	str	r3, [r1, r3]
 800497a:	2e00      	cmp	r6, #0
 800497c:	d1d5      	bne.n	800492a <_free_r+0x5e>
 800497e:	4d2b      	ldr	r5, [pc, #172]	; (8004a2c <_free_r+0x160>)
 8004980:	42ab      	cmp	r3, r5
 8004982:	d813      	bhi.n	80049ac <_free_r+0xe0>
 8004984:	08db      	lsrs	r3, r3, #3
 8004986:	109d      	asrs	r5, r3, #2
 8004988:	40a8      	lsls	r0, r5
 800498a:	6854      	ldr	r4, [r2, #4]
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	4320      	orrs	r0, r4
 8004990:	6050      	str	r0, [r2, #4]
 8004992:	189a      	adds	r2, r3, r2
 8004994:	6893      	ldr	r3, [r2, #8]
 8004996:	60ca      	str	r2, [r1, #12]
 8004998:	608b      	str	r3, [r1, #8]
 800499a:	6091      	str	r1, [r2, #8]
 800499c:	60d9      	str	r1, [r3, #12]
 800499e:	e7c4      	b.n	800492a <_free_r+0x5e>
 80049a0:	4666      	mov	r6, ip
 80049a2:	e7d4      	b.n	800494e <_free_r+0x82>
 80049a4:	68c0      	ldr	r0, [r0, #12]
 80049a6:	60e8      	str	r0, [r5, #12]
 80049a8:	6085      	str	r5, [r0, #8]
 80049aa:	e7e1      	b.n	8004970 <_free_r+0xa4>
 80049ac:	0a5d      	lsrs	r5, r3, #9
 80049ae:	2d04      	cmp	r5, #4
 80049b0:	d812      	bhi.n	80049d8 <_free_r+0x10c>
 80049b2:	0998      	lsrs	r0, r3, #6
 80049b4:	3038      	adds	r0, #56	; 0x38
 80049b6:	00c6      	lsls	r6, r0, #3
 80049b8:	18b6      	adds	r6, r6, r2
 80049ba:	68b5      	ldr	r5, [r6, #8]
 80049bc:	2703      	movs	r7, #3
 80049be:	42ae      	cmp	r6, r5
 80049c0:	d125      	bne.n	8004a0e <_free_r+0x142>
 80049c2:	2301      	movs	r3, #1
 80049c4:	1080      	asrs	r0, r0, #2
 80049c6:	4083      	lsls	r3, r0
 80049c8:	6850      	ldr	r0, [r2, #4]
 80049ca:	4303      	orrs	r3, r0
 80049cc:	6053      	str	r3, [r2, #4]
 80049ce:	60ce      	str	r6, [r1, #12]
 80049d0:	608d      	str	r5, [r1, #8]
 80049d2:	60b1      	str	r1, [r6, #8]
 80049d4:	60e9      	str	r1, [r5, #12]
 80049d6:	e7a8      	b.n	800492a <_free_r+0x5e>
 80049d8:	2d14      	cmp	r5, #20
 80049da:	d802      	bhi.n	80049e2 <_free_r+0x116>
 80049dc:	0028      	movs	r0, r5
 80049de:	305b      	adds	r0, #91	; 0x5b
 80049e0:	e7e9      	b.n	80049b6 <_free_r+0xea>
 80049e2:	2d54      	cmp	r5, #84	; 0x54
 80049e4:	d802      	bhi.n	80049ec <_free_r+0x120>
 80049e6:	0b18      	lsrs	r0, r3, #12
 80049e8:	306e      	adds	r0, #110	; 0x6e
 80049ea:	e7e4      	b.n	80049b6 <_free_r+0xea>
 80049ec:	20aa      	movs	r0, #170	; 0xaa
 80049ee:	0040      	lsls	r0, r0, #1
 80049f0:	4285      	cmp	r5, r0
 80049f2:	d802      	bhi.n	80049fa <_free_r+0x12e>
 80049f4:	0bd8      	lsrs	r0, r3, #15
 80049f6:	3077      	adds	r0, #119	; 0x77
 80049f8:	e7dd      	b.n	80049b6 <_free_r+0xea>
 80049fa:	4e0d      	ldr	r6, [pc, #52]	; (8004a30 <_free_r+0x164>)
 80049fc:	207e      	movs	r0, #126	; 0x7e
 80049fe:	42b5      	cmp	r5, r6
 8004a00:	d8d9      	bhi.n	80049b6 <_free_r+0xea>
 8004a02:	0c98      	lsrs	r0, r3, #18
 8004a04:	307c      	adds	r0, #124	; 0x7c
 8004a06:	e7d6      	b.n	80049b6 <_free_r+0xea>
 8004a08:	68ad      	ldr	r5, [r5, #8]
 8004a0a:	42ae      	cmp	r6, r5
 8004a0c:	d003      	beq.n	8004a16 <_free_r+0x14a>
 8004a0e:	686a      	ldr	r2, [r5, #4]
 8004a10:	43ba      	bics	r2, r7
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d3f8      	bcc.n	8004a08 <_free_r+0x13c>
 8004a16:	68ee      	ldr	r6, [r5, #12]
 8004a18:	e7d9      	b.n	80049ce <_free_r+0x102>
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	20000108 	.word	0x20000108
 8004a20:	20000514 	.word	0x20000514
 8004a24:	20000648 	.word	0x20000648
 8004a28:	20000110 	.word	0x20000110
 8004a2c:	000001ff 	.word	0x000001ff
 8004a30:	00000554 	.word	0x00000554

08004a34 <__retarget_lock_acquire_recursive>:
 8004a34:	4770      	bx	lr

08004a36 <__retarget_lock_release_recursive>:
 8004a36:	4770      	bx	lr

08004a38 <_init>:
 8004a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3e:	bc08      	pop	{r3}
 8004a40:	469e      	mov	lr, r3
 8004a42:	4770      	bx	lr

08004a44 <_fini>:
 8004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a4a:	bc08      	pop	{r3}
 8004a4c:	469e      	mov	lr, r3
 8004a4e:	4770      	bx	lr
