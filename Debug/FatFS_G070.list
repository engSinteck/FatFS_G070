
FatFS_G070.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009630  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  080096e8  080096e8  000196e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009ae8  08009ae8  00019ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009af0  08009af0  00019af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009af4  08009af4  00019af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000684  20000000  08009af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c0c  20000684  0800a17c  00020684  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001290  0800a17c  00021290  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020684  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a553  00000000  00000000  000206ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005168  00000000  00000000  0004abff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00012840  00000000  00000000  0004fd67  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000014a8  00000000  00000000  000625a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001ee8  00000000  00000000  00063a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000d348  00000000  00000000  00065938  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007a8d  00000000  00000000  00072c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0007a70d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004b08  00000000  00000000  0007a78c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000684 	.word	0x20000684
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080096d0 	.word	0x080096d0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000688 	.word	0x20000688
 80000fc:	080096d0 	.word	0x080096d0

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			; (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__gnu_thumb1_case_uhi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5a09      	ldrh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__udivsi3>:
 800014c:	2200      	movs	r2, #0
 800014e:	0843      	lsrs	r3, r0, #1
 8000150:	428b      	cmp	r3, r1
 8000152:	d374      	bcc.n	800023e <__udivsi3+0xf2>
 8000154:	0903      	lsrs	r3, r0, #4
 8000156:	428b      	cmp	r3, r1
 8000158:	d35f      	bcc.n	800021a <__udivsi3+0xce>
 800015a:	0a03      	lsrs	r3, r0, #8
 800015c:	428b      	cmp	r3, r1
 800015e:	d344      	bcc.n	80001ea <__udivsi3+0x9e>
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d328      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d30d      	bcc.n	8000188 <__udivsi3+0x3c>
 800016c:	22ff      	movs	r2, #255	; 0xff
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	ba12      	rev	r2, r2
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d302      	bcc.n	800017e <__udivsi3+0x32>
 8000178:	1212      	asrs	r2, r2, #8
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	d065      	beq.n	800024a <__udivsi3+0xfe>
 800017e:	0b03      	lsrs	r3, r0, #12
 8000180:	428b      	cmp	r3, r1
 8000182:	d319      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000184:	e000      	b.n	8000188 <__udivsi3+0x3c>
 8000186:	0a09      	lsrs	r1, r1, #8
 8000188:	0bc3      	lsrs	r3, r0, #15
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x46>
 800018e:	03cb      	lsls	r3, r1, #15
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b83      	lsrs	r3, r0, #14
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x52>
 800019a:	038b      	lsls	r3, r1, #14
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b43      	lsrs	r3, r0, #13
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x5e>
 80001a6:	034b      	lsls	r3, r1, #13
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b03      	lsrs	r3, r0, #12
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x6a>
 80001b2:	030b      	lsls	r3, r1, #12
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0ac3      	lsrs	r3, r0, #11
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x76>
 80001be:	02cb      	lsls	r3, r1, #11
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a83      	lsrs	r3, r0, #10
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x82>
 80001ca:	028b      	lsls	r3, r1, #10
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a43      	lsrs	r3, r0, #9
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x8e>
 80001d6:	024b      	lsls	r3, r1, #9
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a03      	lsrs	r3, r0, #8
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x9a>
 80001e2:	020b      	lsls	r3, r1, #8
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	d2cd      	bcs.n	8000186 <__udivsi3+0x3a>
 80001ea:	09c3      	lsrs	r3, r0, #7
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xa8>
 80001f0:	01cb      	lsls	r3, r1, #7
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0983      	lsrs	r3, r0, #6
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xb4>
 80001fc:	018b      	lsls	r3, r1, #6
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0943      	lsrs	r3, r0, #5
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xc0>
 8000208:	014b      	lsls	r3, r1, #5
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0903      	lsrs	r3, r0, #4
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xcc>
 8000214:	010b      	lsls	r3, r1, #4
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	08c3      	lsrs	r3, r0, #3
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xd8>
 8000220:	00cb      	lsls	r3, r1, #3
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0883      	lsrs	r3, r0, #2
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xe4>
 800022c:	008b      	lsls	r3, r1, #2
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0843      	lsrs	r3, r0, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xf0>
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	1a41      	subs	r1, r0, r1
 8000240:	d200      	bcs.n	8000244 <__udivsi3+0xf8>
 8000242:	4601      	mov	r1, r0
 8000244:	4152      	adcs	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4770      	bx	lr
 800024a:	e7ff      	b.n	800024c <__udivsi3+0x100>
 800024c:	b501      	push	{r0, lr}
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f8f0 	bl	8000434 <__aeabi_idiv0>
 8000254:	bd02      	pop	{r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uidivmod>:
 8000258:	2900      	cmp	r1, #0
 800025a:	d0f7      	beq.n	800024c <__udivsi3+0x100>
 800025c:	e776      	b.n	800014c <__udivsi3>
 800025e:	4770      	bx	lr

08000260 <__divsi3>:
 8000260:	4603      	mov	r3, r0
 8000262:	430b      	orrs	r3, r1
 8000264:	d47f      	bmi.n	8000366 <__divsi3+0x106>
 8000266:	2200      	movs	r2, #0
 8000268:	0843      	lsrs	r3, r0, #1
 800026a:	428b      	cmp	r3, r1
 800026c:	d374      	bcc.n	8000358 <__divsi3+0xf8>
 800026e:	0903      	lsrs	r3, r0, #4
 8000270:	428b      	cmp	r3, r1
 8000272:	d35f      	bcc.n	8000334 <__divsi3+0xd4>
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d344      	bcc.n	8000304 <__divsi3+0xa4>
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d328      	bcc.n	80002d2 <__divsi3+0x72>
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d30d      	bcc.n	80002a2 <__divsi3+0x42>
 8000286:	22ff      	movs	r2, #255	; 0xff
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	ba12      	rev	r2, r2
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d302      	bcc.n	8000298 <__divsi3+0x38>
 8000292:	1212      	asrs	r2, r2, #8
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	d065      	beq.n	8000364 <__divsi3+0x104>
 8000298:	0b03      	lsrs	r3, r0, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d319      	bcc.n	80002d2 <__divsi3+0x72>
 800029e:	e000      	b.n	80002a2 <__divsi3+0x42>
 80002a0:	0a09      	lsrs	r1, r1, #8
 80002a2:	0bc3      	lsrs	r3, r0, #15
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x4c>
 80002a8:	03cb      	lsls	r3, r1, #15
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b83      	lsrs	r3, r0, #14
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x58>
 80002b4:	038b      	lsls	r3, r1, #14
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b43      	lsrs	r3, r0, #13
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x64>
 80002c0:	034b      	lsls	r3, r1, #13
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b03      	lsrs	r3, r0, #12
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x70>
 80002cc:	030b      	lsls	r3, r1, #12
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0ac3      	lsrs	r3, r0, #11
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x7c>
 80002d8:	02cb      	lsls	r3, r1, #11
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a83      	lsrs	r3, r0, #10
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x88>
 80002e4:	028b      	lsls	r3, r1, #10
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a43      	lsrs	r3, r0, #9
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x94>
 80002f0:	024b      	lsls	r3, r1, #9
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a03      	lsrs	r3, r0, #8
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0xa0>
 80002fc:	020b      	lsls	r3, r1, #8
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	d2cd      	bcs.n	80002a0 <__divsi3+0x40>
 8000304:	09c3      	lsrs	r3, r0, #7
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xae>
 800030a:	01cb      	lsls	r3, r1, #7
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0983      	lsrs	r3, r0, #6
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xba>
 8000316:	018b      	lsls	r3, r1, #6
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0943      	lsrs	r3, r0, #5
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xc6>
 8000322:	014b      	lsls	r3, r1, #5
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0903      	lsrs	r3, r0, #4
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xd2>
 800032e:	010b      	lsls	r3, r1, #4
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	08c3      	lsrs	r3, r0, #3
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xde>
 800033a:	00cb      	lsls	r3, r1, #3
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0883      	lsrs	r3, r0, #2
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xea>
 8000346:	008b      	lsls	r3, r1, #2
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0843      	lsrs	r3, r0, #1
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xf6>
 8000352:	004b      	lsls	r3, r1, #1
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	1a41      	subs	r1, r0, r1
 800035a:	d200      	bcs.n	800035e <__divsi3+0xfe>
 800035c:	4601      	mov	r1, r0
 800035e:	4152      	adcs	r2, r2
 8000360:	4610      	mov	r0, r2
 8000362:	4770      	bx	lr
 8000364:	e05d      	b.n	8000422 <__divsi3+0x1c2>
 8000366:	0fca      	lsrs	r2, r1, #31
 8000368:	d000      	beq.n	800036c <__divsi3+0x10c>
 800036a:	4249      	negs	r1, r1
 800036c:	1003      	asrs	r3, r0, #32
 800036e:	d300      	bcc.n	8000372 <__divsi3+0x112>
 8000370:	4240      	negs	r0, r0
 8000372:	4053      	eors	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	469c      	mov	ip, r3
 8000378:	0903      	lsrs	r3, r0, #4
 800037a:	428b      	cmp	r3, r1
 800037c:	d32d      	bcc.n	80003da <__divsi3+0x17a>
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d312      	bcc.n	80003aa <__divsi3+0x14a>
 8000384:	22fc      	movs	r2, #252	; 0xfc
 8000386:	0189      	lsls	r1, r1, #6
 8000388:	ba12      	rev	r2, r2
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d30c      	bcc.n	80003aa <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d308      	bcc.n	80003aa <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d304      	bcc.n	80003aa <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	d03a      	beq.n	800041a <__divsi3+0x1ba>
 80003a4:	1192      	asrs	r2, r2, #6
 80003a6:	e000      	b.n	80003aa <__divsi3+0x14a>
 80003a8:	0989      	lsrs	r1, r1, #6
 80003aa:	09c3      	lsrs	r3, r0, #7
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x154>
 80003b0:	01cb      	lsls	r3, r1, #7
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0983      	lsrs	r3, r0, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x160>
 80003bc:	018b      	lsls	r3, r1, #6
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0943      	lsrs	r3, r0, #5
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x16c>
 80003c8:	014b      	lsls	r3, r1, #5
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0903      	lsrs	r3, r0, #4
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x178>
 80003d4:	010b      	lsls	r3, r1, #4
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	08c3      	lsrs	r3, r0, #3
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x184>
 80003e0:	00cb      	lsls	r3, r1, #3
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	0883      	lsrs	r3, r0, #2
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x190>
 80003ec:	008b      	lsls	r3, r1, #2
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	d2d9      	bcs.n	80003a8 <__divsi3+0x148>
 80003f4:	0843      	lsrs	r3, r0, #1
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d301      	bcc.n	80003fe <__divsi3+0x19e>
 80003fa:	004b      	lsls	r3, r1, #1
 80003fc:	1ac0      	subs	r0, r0, r3
 80003fe:	4152      	adcs	r2, r2
 8000400:	1a41      	subs	r1, r0, r1
 8000402:	d200      	bcs.n	8000406 <__divsi3+0x1a6>
 8000404:	4601      	mov	r1, r0
 8000406:	4663      	mov	r3, ip
 8000408:	4152      	adcs	r2, r2
 800040a:	105b      	asrs	r3, r3, #1
 800040c:	4610      	mov	r0, r2
 800040e:	d301      	bcc.n	8000414 <__divsi3+0x1b4>
 8000410:	4240      	negs	r0, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d500      	bpl.n	8000418 <__divsi3+0x1b8>
 8000416:	4249      	negs	r1, r1
 8000418:	4770      	bx	lr
 800041a:	4663      	mov	r3, ip
 800041c:	105b      	asrs	r3, r3, #1
 800041e:	d300      	bcc.n	8000422 <__divsi3+0x1c2>
 8000420:	4240      	negs	r0, r0
 8000422:	b501      	push	{r0, lr}
 8000424:	2000      	movs	r0, #0
 8000426:	f000 f805 	bl	8000434 <__aeabi_idiv0>
 800042a:	bd02      	pop	{r1, pc}

0800042c <__aeabi_idivmod>:
 800042c:	2900      	cmp	r1, #0
 800042e:	d0f8      	beq.n	8000422 <__divsi3+0x1c2>
 8000430:	e716      	b.n	8000260 <__divsi3>
 8000432:	4770      	bx	lr

08000434 <__aeabi_idiv0>:
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdrcmple>:
 8000438:	4684      	mov	ip, r0
 800043a:	1c10      	adds	r0, r2, #0
 800043c:	4662      	mov	r2, ip
 800043e:	468c      	mov	ip, r1
 8000440:	1c19      	adds	r1, r3, #0
 8000442:	4663      	mov	r3, ip
 8000444:	e000      	b.n	8000448 <__aeabi_cdcmpeq>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_cdcmpeq>:
 8000448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044a:	f000 fff5 	bl	8001438 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	d401      	bmi.n	8000456 <__aeabi_cdcmpeq+0xe>
 8000452:	2100      	movs	r1, #0
 8000454:	42c8      	cmn	r0, r1
 8000456:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000458 <__aeabi_dcmpeq>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff4f 	bl	80012fc <__eqdf2>
 800045e:	4240      	negs	r0, r0
 8000460:	3001      	adds	r0, #1
 8000462:	bd10      	pop	{r4, pc}

08000464 <__aeabi_dcmplt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 ffe7 	bl	8001438 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	db01      	blt.n	8000472 <__aeabi_dcmplt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmple>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 ffdd 	bl	8001438 <__ledf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dd01      	ble.n	8000486 <__aeabi_dcmple+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpgt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f000 ff6f 	bl	8001370 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	dc01      	bgt.n	800049a <__aeabi_dcmpgt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_dcmpge>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f000 ff65 	bl	8001370 <__gedf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	da01      	bge.n	80004ae <__aeabi_dcmpge+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_uldivmod>:
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d111      	bne.n	80004dc <__aeabi_uldivmod+0x28>
 80004b8:	2a00      	cmp	r2, #0
 80004ba:	d10f      	bne.n	80004dc <__aeabi_uldivmod+0x28>
 80004bc:	2900      	cmp	r1, #0
 80004be:	d100      	bne.n	80004c2 <__aeabi_uldivmod+0xe>
 80004c0:	2800      	cmp	r0, #0
 80004c2:	d002      	beq.n	80004ca <__aeabi_uldivmod+0x16>
 80004c4:	2100      	movs	r1, #0
 80004c6:	43c9      	mvns	r1, r1
 80004c8:	1c08      	adds	r0, r1, #0
 80004ca:	b407      	push	{r0, r1, r2}
 80004cc:	4802      	ldr	r0, [pc, #8]	; (80004d8 <__aeabi_uldivmod+0x24>)
 80004ce:	a102      	add	r1, pc, #8	; (adr r1, 80004d8 <__aeabi_uldivmod+0x24>)
 80004d0:	1840      	adds	r0, r0, r1
 80004d2:	9002      	str	r0, [sp, #8]
 80004d4:	bd03      	pop	{r0, r1, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	ffffff5d 	.word	0xffffff5d
 80004dc:	b403      	push	{r0, r1}
 80004de:	4668      	mov	r0, sp
 80004e0:	b501      	push	{r0, lr}
 80004e2:	9802      	ldr	r0, [sp, #8]
 80004e4:	f000 f806 	bl	80004f4 <__udivmoddi4>
 80004e8:	9b01      	ldr	r3, [sp, #4]
 80004ea:	469e      	mov	lr, r3
 80004ec:	b002      	add	sp, #8
 80004ee:	bc0c      	pop	{r2, r3}
 80004f0:	4770      	bx	lr
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__udivmoddi4>:
 80004f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004f6:	4657      	mov	r7, sl
 80004f8:	464e      	mov	r6, r9
 80004fa:	4645      	mov	r5, r8
 80004fc:	46de      	mov	lr, fp
 80004fe:	b5e0      	push	{r5, r6, r7, lr}
 8000500:	0004      	movs	r4, r0
 8000502:	b083      	sub	sp, #12
 8000504:	000d      	movs	r5, r1
 8000506:	4692      	mov	sl, r2
 8000508:	4699      	mov	r9, r3
 800050a:	428b      	cmp	r3, r1
 800050c:	d82f      	bhi.n	800056e <__udivmoddi4+0x7a>
 800050e:	d02c      	beq.n	800056a <__udivmoddi4+0x76>
 8000510:	4649      	mov	r1, r9
 8000512:	4650      	mov	r0, sl
 8000514:	f001 fe74 	bl	8002200 <__clzdi2>
 8000518:	0029      	movs	r1, r5
 800051a:	0006      	movs	r6, r0
 800051c:	0020      	movs	r0, r4
 800051e:	f001 fe6f 	bl	8002200 <__clzdi2>
 8000522:	1a33      	subs	r3, r6, r0
 8000524:	4698      	mov	r8, r3
 8000526:	3b20      	subs	r3, #32
 8000528:	469b      	mov	fp, r3
 800052a:	d500      	bpl.n	800052e <__udivmoddi4+0x3a>
 800052c:	e074      	b.n	8000618 <__udivmoddi4+0x124>
 800052e:	4653      	mov	r3, sl
 8000530:	465a      	mov	r2, fp
 8000532:	4093      	lsls	r3, r2
 8000534:	001f      	movs	r7, r3
 8000536:	4653      	mov	r3, sl
 8000538:	4642      	mov	r2, r8
 800053a:	4093      	lsls	r3, r2
 800053c:	001e      	movs	r6, r3
 800053e:	42af      	cmp	r7, r5
 8000540:	d829      	bhi.n	8000596 <__udivmoddi4+0xa2>
 8000542:	d026      	beq.n	8000592 <__udivmoddi4+0x9e>
 8000544:	465b      	mov	r3, fp
 8000546:	1ba4      	subs	r4, r4, r6
 8000548:	41bd      	sbcs	r5, r7
 800054a:	2b00      	cmp	r3, #0
 800054c:	da00      	bge.n	8000550 <__udivmoddi4+0x5c>
 800054e:	e079      	b.n	8000644 <__udivmoddi4+0x150>
 8000550:	2200      	movs	r2, #0
 8000552:	2300      	movs	r3, #0
 8000554:	9200      	str	r2, [sp, #0]
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	2301      	movs	r3, #1
 800055a:	465a      	mov	r2, fp
 800055c:	4093      	lsls	r3, r2
 800055e:	9301      	str	r3, [sp, #4]
 8000560:	2301      	movs	r3, #1
 8000562:	4642      	mov	r2, r8
 8000564:	4093      	lsls	r3, r2
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	e019      	b.n	800059e <__udivmoddi4+0xaa>
 800056a:	4282      	cmp	r2, r0
 800056c:	d9d0      	bls.n	8000510 <__udivmoddi4+0x1c>
 800056e:	2200      	movs	r2, #0
 8000570:	2300      	movs	r3, #0
 8000572:	9200      	str	r2, [sp, #0]
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <__udivmoddi4+0x8c>
 800057c:	601c      	str	r4, [r3, #0]
 800057e:	605d      	str	r5, [r3, #4]
 8000580:	9800      	ldr	r0, [sp, #0]
 8000582:	9901      	ldr	r1, [sp, #4]
 8000584:	b003      	add	sp, #12
 8000586:	bc3c      	pop	{r2, r3, r4, r5}
 8000588:	4690      	mov	r8, r2
 800058a:	4699      	mov	r9, r3
 800058c:	46a2      	mov	sl, r4
 800058e:	46ab      	mov	fp, r5
 8000590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000592:	42a3      	cmp	r3, r4
 8000594:	d9d6      	bls.n	8000544 <__udivmoddi4+0x50>
 8000596:	2200      	movs	r2, #0
 8000598:	2300      	movs	r3, #0
 800059a:	9200      	str	r2, [sp, #0]
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	4643      	mov	r3, r8
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d0e8      	beq.n	8000576 <__udivmoddi4+0x82>
 80005a4:	07fb      	lsls	r3, r7, #31
 80005a6:	0872      	lsrs	r2, r6, #1
 80005a8:	431a      	orrs	r2, r3
 80005aa:	4646      	mov	r6, r8
 80005ac:	087b      	lsrs	r3, r7, #1
 80005ae:	e00e      	b.n	80005ce <__udivmoddi4+0xda>
 80005b0:	42ab      	cmp	r3, r5
 80005b2:	d101      	bne.n	80005b8 <__udivmoddi4+0xc4>
 80005b4:	42a2      	cmp	r2, r4
 80005b6:	d80c      	bhi.n	80005d2 <__udivmoddi4+0xde>
 80005b8:	1aa4      	subs	r4, r4, r2
 80005ba:	419d      	sbcs	r5, r3
 80005bc:	2001      	movs	r0, #1
 80005be:	1924      	adds	r4, r4, r4
 80005c0:	416d      	adcs	r5, r5
 80005c2:	2100      	movs	r1, #0
 80005c4:	3e01      	subs	r6, #1
 80005c6:	1824      	adds	r4, r4, r0
 80005c8:	414d      	adcs	r5, r1
 80005ca:	2e00      	cmp	r6, #0
 80005cc:	d006      	beq.n	80005dc <__udivmoddi4+0xe8>
 80005ce:	42ab      	cmp	r3, r5
 80005d0:	d9ee      	bls.n	80005b0 <__udivmoddi4+0xbc>
 80005d2:	3e01      	subs	r6, #1
 80005d4:	1924      	adds	r4, r4, r4
 80005d6:	416d      	adcs	r5, r5
 80005d8:	2e00      	cmp	r6, #0
 80005da:	d1f8      	bne.n	80005ce <__udivmoddi4+0xda>
 80005dc:	465b      	mov	r3, fp
 80005de:	9800      	ldr	r0, [sp, #0]
 80005e0:	9901      	ldr	r1, [sp, #4]
 80005e2:	1900      	adds	r0, r0, r4
 80005e4:	4169      	adcs	r1, r5
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	db22      	blt.n	8000630 <__udivmoddi4+0x13c>
 80005ea:	002b      	movs	r3, r5
 80005ec:	465a      	mov	r2, fp
 80005ee:	40d3      	lsrs	r3, r2
 80005f0:	002a      	movs	r2, r5
 80005f2:	4644      	mov	r4, r8
 80005f4:	40e2      	lsrs	r2, r4
 80005f6:	001c      	movs	r4, r3
 80005f8:	465b      	mov	r3, fp
 80005fa:	0015      	movs	r5, r2
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db2c      	blt.n	800065a <__udivmoddi4+0x166>
 8000600:	0026      	movs	r6, r4
 8000602:	409e      	lsls	r6, r3
 8000604:	0033      	movs	r3, r6
 8000606:	0026      	movs	r6, r4
 8000608:	4647      	mov	r7, r8
 800060a:	40be      	lsls	r6, r7
 800060c:	0032      	movs	r2, r6
 800060e:	1a80      	subs	r0, r0, r2
 8000610:	4199      	sbcs	r1, r3
 8000612:	9000      	str	r0, [sp, #0]
 8000614:	9101      	str	r1, [sp, #4]
 8000616:	e7ae      	b.n	8000576 <__udivmoddi4+0x82>
 8000618:	4642      	mov	r2, r8
 800061a:	2320      	movs	r3, #32
 800061c:	1a9b      	subs	r3, r3, r2
 800061e:	4652      	mov	r2, sl
 8000620:	40da      	lsrs	r2, r3
 8000622:	4641      	mov	r1, r8
 8000624:	0013      	movs	r3, r2
 8000626:	464a      	mov	r2, r9
 8000628:	408a      	lsls	r2, r1
 800062a:	0017      	movs	r7, r2
 800062c:	431f      	orrs	r7, r3
 800062e:	e782      	b.n	8000536 <__udivmoddi4+0x42>
 8000630:	4642      	mov	r2, r8
 8000632:	2320      	movs	r3, #32
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	002a      	movs	r2, r5
 8000638:	4646      	mov	r6, r8
 800063a:	409a      	lsls	r2, r3
 800063c:	0023      	movs	r3, r4
 800063e:	40f3      	lsrs	r3, r6
 8000640:	4313      	orrs	r3, r2
 8000642:	e7d5      	b.n	80005f0 <__udivmoddi4+0xfc>
 8000644:	4642      	mov	r2, r8
 8000646:	2320      	movs	r3, #32
 8000648:	2100      	movs	r1, #0
 800064a:	1a9b      	subs	r3, r3, r2
 800064c:	2200      	movs	r2, #0
 800064e:	9100      	str	r1, [sp, #0]
 8000650:	9201      	str	r2, [sp, #4]
 8000652:	2201      	movs	r2, #1
 8000654:	40da      	lsrs	r2, r3
 8000656:	9201      	str	r2, [sp, #4]
 8000658:	e782      	b.n	8000560 <__udivmoddi4+0x6c>
 800065a:	4642      	mov	r2, r8
 800065c:	2320      	movs	r3, #32
 800065e:	0026      	movs	r6, r4
 8000660:	1a9b      	subs	r3, r3, r2
 8000662:	40de      	lsrs	r6, r3
 8000664:	002f      	movs	r7, r5
 8000666:	46b4      	mov	ip, r6
 8000668:	4097      	lsls	r7, r2
 800066a:	4666      	mov	r6, ip
 800066c:	003b      	movs	r3, r7
 800066e:	4333      	orrs	r3, r6
 8000670:	e7c9      	b.n	8000606 <__udivmoddi4+0x112>
 8000672:	46c0      	nop			; (mov r8, r8)

08000674 <__aeabi_dadd>:
 8000674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000676:	4645      	mov	r5, r8
 8000678:	46de      	mov	lr, fp
 800067a:	4657      	mov	r7, sl
 800067c:	464e      	mov	r6, r9
 800067e:	030c      	lsls	r4, r1, #12
 8000680:	b5e0      	push	{r5, r6, r7, lr}
 8000682:	004e      	lsls	r6, r1, #1
 8000684:	0fc9      	lsrs	r1, r1, #31
 8000686:	4688      	mov	r8, r1
 8000688:	000d      	movs	r5, r1
 800068a:	0a61      	lsrs	r1, r4, #9
 800068c:	0f44      	lsrs	r4, r0, #29
 800068e:	430c      	orrs	r4, r1
 8000690:	00c7      	lsls	r7, r0, #3
 8000692:	0319      	lsls	r1, r3, #12
 8000694:	0058      	lsls	r0, r3, #1
 8000696:	0fdb      	lsrs	r3, r3, #31
 8000698:	469b      	mov	fp, r3
 800069a:	0a4b      	lsrs	r3, r1, #9
 800069c:	0f51      	lsrs	r1, r2, #29
 800069e:	430b      	orrs	r3, r1
 80006a0:	0d76      	lsrs	r6, r6, #21
 80006a2:	0d40      	lsrs	r0, r0, #21
 80006a4:	0019      	movs	r1, r3
 80006a6:	00d2      	lsls	r2, r2, #3
 80006a8:	45d8      	cmp	r8, fp
 80006aa:	d100      	bne.n	80006ae <__aeabi_dadd+0x3a>
 80006ac:	e0ae      	b.n	800080c <__aeabi_dadd+0x198>
 80006ae:	1a35      	subs	r5, r6, r0
 80006b0:	2d00      	cmp	r5, #0
 80006b2:	dc00      	bgt.n	80006b6 <__aeabi_dadd+0x42>
 80006b4:	e0f6      	b.n	80008a4 <__aeabi_dadd+0x230>
 80006b6:	2800      	cmp	r0, #0
 80006b8:	d10f      	bne.n	80006da <__aeabi_dadd+0x66>
 80006ba:	4313      	orrs	r3, r2
 80006bc:	d100      	bne.n	80006c0 <__aeabi_dadd+0x4c>
 80006be:	e0db      	b.n	8000878 <__aeabi_dadd+0x204>
 80006c0:	1e6b      	subs	r3, r5, #1
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d000      	beq.n	80006c8 <__aeabi_dadd+0x54>
 80006c6:	e137      	b.n	8000938 <__aeabi_dadd+0x2c4>
 80006c8:	1aba      	subs	r2, r7, r2
 80006ca:	4297      	cmp	r7, r2
 80006cc:	41bf      	sbcs	r7, r7
 80006ce:	1a64      	subs	r4, r4, r1
 80006d0:	427f      	negs	r7, r7
 80006d2:	1be4      	subs	r4, r4, r7
 80006d4:	2601      	movs	r6, #1
 80006d6:	0017      	movs	r7, r2
 80006d8:	e024      	b.n	8000724 <__aeabi_dadd+0xb0>
 80006da:	4bc6      	ldr	r3, [pc, #792]	; (80009f4 <__aeabi_dadd+0x380>)
 80006dc:	429e      	cmp	r6, r3
 80006de:	d04d      	beq.n	800077c <__aeabi_dadd+0x108>
 80006e0:	2380      	movs	r3, #128	; 0x80
 80006e2:	041b      	lsls	r3, r3, #16
 80006e4:	4319      	orrs	r1, r3
 80006e6:	2d38      	cmp	r5, #56	; 0x38
 80006e8:	dd00      	ble.n	80006ec <__aeabi_dadd+0x78>
 80006ea:	e107      	b.n	80008fc <__aeabi_dadd+0x288>
 80006ec:	2d1f      	cmp	r5, #31
 80006ee:	dd00      	ble.n	80006f2 <__aeabi_dadd+0x7e>
 80006f0:	e138      	b.n	8000964 <__aeabi_dadd+0x2f0>
 80006f2:	2020      	movs	r0, #32
 80006f4:	1b43      	subs	r3, r0, r5
 80006f6:	469a      	mov	sl, r3
 80006f8:	000b      	movs	r3, r1
 80006fa:	4650      	mov	r0, sl
 80006fc:	4083      	lsls	r3, r0
 80006fe:	4699      	mov	r9, r3
 8000700:	0013      	movs	r3, r2
 8000702:	4648      	mov	r0, r9
 8000704:	40eb      	lsrs	r3, r5
 8000706:	4318      	orrs	r0, r3
 8000708:	0003      	movs	r3, r0
 800070a:	4650      	mov	r0, sl
 800070c:	4082      	lsls	r2, r0
 800070e:	1e50      	subs	r0, r2, #1
 8000710:	4182      	sbcs	r2, r0
 8000712:	40e9      	lsrs	r1, r5
 8000714:	431a      	orrs	r2, r3
 8000716:	1aba      	subs	r2, r7, r2
 8000718:	1a61      	subs	r1, r4, r1
 800071a:	4297      	cmp	r7, r2
 800071c:	41a4      	sbcs	r4, r4
 800071e:	0017      	movs	r7, r2
 8000720:	4264      	negs	r4, r4
 8000722:	1b0c      	subs	r4, r1, r4
 8000724:	0223      	lsls	r3, r4, #8
 8000726:	d562      	bpl.n	80007ee <__aeabi_dadd+0x17a>
 8000728:	0264      	lsls	r4, r4, #9
 800072a:	0a65      	lsrs	r5, r4, #9
 800072c:	2d00      	cmp	r5, #0
 800072e:	d100      	bne.n	8000732 <__aeabi_dadd+0xbe>
 8000730:	e0df      	b.n	80008f2 <__aeabi_dadd+0x27e>
 8000732:	0028      	movs	r0, r5
 8000734:	f001 fd46 	bl	80021c4 <__clzsi2>
 8000738:	0003      	movs	r3, r0
 800073a:	3b08      	subs	r3, #8
 800073c:	2b1f      	cmp	r3, #31
 800073e:	dd00      	ble.n	8000742 <__aeabi_dadd+0xce>
 8000740:	e0d2      	b.n	80008e8 <__aeabi_dadd+0x274>
 8000742:	2220      	movs	r2, #32
 8000744:	003c      	movs	r4, r7
 8000746:	1ad2      	subs	r2, r2, r3
 8000748:	409d      	lsls	r5, r3
 800074a:	40d4      	lsrs	r4, r2
 800074c:	409f      	lsls	r7, r3
 800074e:	4325      	orrs	r5, r4
 8000750:	429e      	cmp	r6, r3
 8000752:	dd00      	ble.n	8000756 <__aeabi_dadd+0xe2>
 8000754:	e0c4      	b.n	80008e0 <__aeabi_dadd+0x26c>
 8000756:	1b9e      	subs	r6, r3, r6
 8000758:	1c73      	adds	r3, r6, #1
 800075a:	2b1f      	cmp	r3, #31
 800075c:	dd00      	ble.n	8000760 <__aeabi_dadd+0xec>
 800075e:	e0f1      	b.n	8000944 <__aeabi_dadd+0x2d0>
 8000760:	2220      	movs	r2, #32
 8000762:	0038      	movs	r0, r7
 8000764:	0029      	movs	r1, r5
 8000766:	1ad2      	subs	r2, r2, r3
 8000768:	40d8      	lsrs	r0, r3
 800076a:	4091      	lsls	r1, r2
 800076c:	4097      	lsls	r7, r2
 800076e:	002c      	movs	r4, r5
 8000770:	4301      	orrs	r1, r0
 8000772:	1e78      	subs	r0, r7, #1
 8000774:	4187      	sbcs	r7, r0
 8000776:	40dc      	lsrs	r4, r3
 8000778:	2600      	movs	r6, #0
 800077a:	430f      	orrs	r7, r1
 800077c:	077b      	lsls	r3, r7, #29
 800077e:	d009      	beq.n	8000794 <__aeabi_dadd+0x120>
 8000780:	230f      	movs	r3, #15
 8000782:	403b      	ands	r3, r7
 8000784:	2b04      	cmp	r3, #4
 8000786:	d005      	beq.n	8000794 <__aeabi_dadd+0x120>
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	42bb      	cmp	r3, r7
 800078c:	41bf      	sbcs	r7, r7
 800078e:	427f      	negs	r7, r7
 8000790:	19e4      	adds	r4, r4, r7
 8000792:	001f      	movs	r7, r3
 8000794:	0223      	lsls	r3, r4, #8
 8000796:	d52c      	bpl.n	80007f2 <__aeabi_dadd+0x17e>
 8000798:	4b96      	ldr	r3, [pc, #600]	; (80009f4 <__aeabi_dadd+0x380>)
 800079a:	3601      	adds	r6, #1
 800079c:	429e      	cmp	r6, r3
 800079e:	d100      	bne.n	80007a2 <__aeabi_dadd+0x12e>
 80007a0:	e09a      	b.n	80008d8 <__aeabi_dadd+0x264>
 80007a2:	4645      	mov	r5, r8
 80007a4:	4b94      	ldr	r3, [pc, #592]	; (80009f8 <__aeabi_dadd+0x384>)
 80007a6:	08ff      	lsrs	r7, r7, #3
 80007a8:	401c      	ands	r4, r3
 80007aa:	0760      	lsls	r0, r4, #29
 80007ac:	0576      	lsls	r6, r6, #21
 80007ae:	0264      	lsls	r4, r4, #9
 80007b0:	4307      	orrs	r7, r0
 80007b2:	0b24      	lsrs	r4, r4, #12
 80007b4:	0d76      	lsrs	r6, r6, #21
 80007b6:	2100      	movs	r1, #0
 80007b8:	0324      	lsls	r4, r4, #12
 80007ba:	0b23      	lsrs	r3, r4, #12
 80007bc:	0d0c      	lsrs	r4, r1, #20
 80007be:	4a8f      	ldr	r2, [pc, #572]	; (80009fc <__aeabi_dadd+0x388>)
 80007c0:	0524      	lsls	r4, r4, #20
 80007c2:	431c      	orrs	r4, r3
 80007c4:	4014      	ands	r4, r2
 80007c6:	0533      	lsls	r3, r6, #20
 80007c8:	4323      	orrs	r3, r4
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	07ed      	lsls	r5, r5, #31
 80007ce:	085b      	lsrs	r3, r3, #1
 80007d0:	432b      	orrs	r3, r5
 80007d2:	0038      	movs	r0, r7
 80007d4:	0019      	movs	r1, r3
 80007d6:	bc3c      	pop	{r2, r3, r4, r5}
 80007d8:	4690      	mov	r8, r2
 80007da:	4699      	mov	r9, r3
 80007dc:	46a2      	mov	sl, r4
 80007de:	46ab      	mov	fp, r5
 80007e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007e2:	4664      	mov	r4, ip
 80007e4:	4304      	orrs	r4, r0
 80007e6:	d100      	bne.n	80007ea <__aeabi_dadd+0x176>
 80007e8:	e211      	b.n	8000c0e <__aeabi_dadd+0x59a>
 80007ea:	0004      	movs	r4, r0
 80007ec:	4667      	mov	r7, ip
 80007ee:	077b      	lsls	r3, r7, #29
 80007f0:	d1c6      	bne.n	8000780 <__aeabi_dadd+0x10c>
 80007f2:	4645      	mov	r5, r8
 80007f4:	0760      	lsls	r0, r4, #29
 80007f6:	08ff      	lsrs	r7, r7, #3
 80007f8:	4307      	orrs	r7, r0
 80007fa:	08e4      	lsrs	r4, r4, #3
 80007fc:	4b7d      	ldr	r3, [pc, #500]	; (80009f4 <__aeabi_dadd+0x380>)
 80007fe:	429e      	cmp	r6, r3
 8000800:	d030      	beq.n	8000864 <__aeabi_dadd+0x1f0>
 8000802:	0324      	lsls	r4, r4, #12
 8000804:	0576      	lsls	r6, r6, #21
 8000806:	0b24      	lsrs	r4, r4, #12
 8000808:	0d76      	lsrs	r6, r6, #21
 800080a:	e7d4      	b.n	80007b6 <__aeabi_dadd+0x142>
 800080c:	1a33      	subs	r3, r6, r0
 800080e:	469a      	mov	sl, r3
 8000810:	2b00      	cmp	r3, #0
 8000812:	dd78      	ble.n	8000906 <__aeabi_dadd+0x292>
 8000814:	2800      	cmp	r0, #0
 8000816:	d031      	beq.n	800087c <__aeabi_dadd+0x208>
 8000818:	4876      	ldr	r0, [pc, #472]	; (80009f4 <__aeabi_dadd+0x380>)
 800081a:	4286      	cmp	r6, r0
 800081c:	d0ae      	beq.n	800077c <__aeabi_dadd+0x108>
 800081e:	2080      	movs	r0, #128	; 0x80
 8000820:	0400      	lsls	r0, r0, #16
 8000822:	4301      	orrs	r1, r0
 8000824:	4653      	mov	r3, sl
 8000826:	2b38      	cmp	r3, #56	; 0x38
 8000828:	dc00      	bgt.n	800082c <__aeabi_dadd+0x1b8>
 800082a:	e0e9      	b.n	8000a00 <__aeabi_dadd+0x38c>
 800082c:	430a      	orrs	r2, r1
 800082e:	1e51      	subs	r1, r2, #1
 8000830:	418a      	sbcs	r2, r1
 8000832:	2100      	movs	r1, #0
 8000834:	19d2      	adds	r2, r2, r7
 8000836:	42ba      	cmp	r2, r7
 8000838:	41bf      	sbcs	r7, r7
 800083a:	1909      	adds	r1, r1, r4
 800083c:	427c      	negs	r4, r7
 800083e:	0017      	movs	r7, r2
 8000840:	190c      	adds	r4, r1, r4
 8000842:	0223      	lsls	r3, r4, #8
 8000844:	d5d3      	bpl.n	80007ee <__aeabi_dadd+0x17a>
 8000846:	4b6b      	ldr	r3, [pc, #428]	; (80009f4 <__aeabi_dadd+0x380>)
 8000848:	3601      	adds	r6, #1
 800084a:	429e      	cmp	r6, r3
 800084c:	d100      	bne.n	8000850 <__aeabi_dadd+0x1dc>
 800084e:	e13a      	b.n	8000ac6 <__aeabi_dadd+0x452>
 8000850:	2001      	movs	r0, #1
 8000852:	4b69      	ldr	r3, [pc, #420]	; (80009f8 <__aeabi_dadd+0x384>)
 8000854:	401c      	ands	r4, r3
 8000856:	087b      	lsrs	r3, r7, #1
 8000858:	4007      	ands	r7, r0
 800085a:	431f      	orrs	r7, r3
 800085c:	07e0      	lsls	r0, r4, #31
 800085e:	4307      	orrs	r7, r0
 8000860:	0864      	lsrs	r4, r4, #1
 8000862:	e78b      	b.n	800077c <__aeabi_dadd+0x108>
 8000864:	0023      	movs	r3, r4
 8000866:	433b      	orrs	r3, r7
 8000868:	d100      	bne.n	800086c <__aeabi_dadd+0x1f8>
 800086a:	e1cb      	b.n	8000c04 <__aeabi_dadd+0x590>
 800086c:	2280      	movs	r2, #128	; 0x80
 800086e:	0312      	lsls	r2, r2, #12
 8000870:	4314      	orrs	r4, r2
 8000872:	0324      	lsls	r4, r4, #12
 8000874:	0b24      	lsrs	r4, r4, #12
 8000876:	e79e      	b.n	80007b6 <__aeabi_dadd+0x142>
 8000878:	002e      	movs	r6, r5
 800087a:	e77f      	b.n	800077c <__aeabi_dadd+0x108>
 800087c:	0008      	movs	r0, r1
 800087e:	4310      	orrs	r0, r2
 8000880:	d100      	bne.n	8000884 <__aeabi_dadd+0x210>
 8000882:	e0b4      	b.n	80009ee <__aeabi_dadd+0x37a>
 8000884:	1e58      	subs	r0, r3, #1
 8000886:	2800      	cmp	r0, #0
 8000888:	d000      	beq.n	800088c <__aeabi_dadd+0x218>
 800088a:	e0de      	b.n	8000a4a <__aeabi_dadd+0x3d6>
 800088c:	18ba      	adds	r2, r7, r2
 800088e:	42ba      	cmp	r2, r7
 8000890:	419b      	sbcs	r3, r3
 8000892:	1864      	adds	r4, r4, r1
 8000894:	425b      	negs	r3, r3
 8000896:	18e4      	adds	r4, r4, r3
 8000898:	0017      	movs	r7, r2
 800089a:	2601      	movs	r6, #1
 800089c:	0223      	lsls	r3, r4, #8
 800089e:	d5a6      	bpl.n	80007ee <__aeabi_dadd+0x17a>
 80008a0:	2602      	movs	r6, #2
 80008a2:	e7d5      	b.n	8000850 <__aeabi_dadd+0x1dc>
 80008a4:	2d00      	cmp	r5, #0
 80008a6:	d16e      	bne.n	8000986 <__aeabi_dadd+0x312>
 80008a8:	1c70      	adds	r0, r6, #1
 80008aa:	0540      	lsls	r0, r0, #21
 80008ac:	0d40      	lsrs	r0, r0, #21
 80008ae:	2801      	cmp	r0, #1
 80008b0:	dc00      	bgt.n	80008b4 <__aeabi_dadd+0x240>
 80008b2:	e0f9      	b.n	8000aa8 <__aeabi_dadd+0x434>
 80008b4:	1ab8      	subs	r0, r7, r2
 80008b6:	4684      	mov	ip, r0
 80008b8:	4287      	cmp	r7, r0
 80008ba:	4180      	sbcs	r0, r0
 80008bc:	1ae5      	subs	r5, r4, r3
 80008be:	4240      	negs	r0, r0
 80008c0:	1a2d      	subs	r5, r5, r0
 80008c2:	0228      	lsls	r0, r5, #8
 80008c4:	d400      	bmi.n	80008c8 <__aeabi_dadd+0x254>
 80008c6:	e089      	b.n	80009dc <__aeabi_dadd+0x368>
 80008c8:	1bd7      	subs	r7, r2, r7
 80008ca:	42ba      	cmp	r2, r7
 80008cc:	4192      	sbcs	r2, r2
 80008ce:	1b1c      	subs	r4, r3, r4
 80008d0:	4252      	negs	r2, r2
 80008d2:	1aa5      	subs	r5, r4, r2
 80008d4:	46d8      	mov	r8, fp
 80008d6:	e729      	b.n	800072c <__aeabi_dadd+0xb8>
 80008d8:	4645      	mov	r5, r8
 80008da:	2400      	movs	r4, #0
 80008dc:	2700      	movs	r7, #0
 80008de:	e76a      	b.n	80007b6 <__aeabi_dadd+0x142>
 80008e0:	4c45      	ldr	r4, [pc, #276]	; (80009f8 <__aeabi_dadd+0x384>)
 80008e2:	1af6      	subs	r6, r6, r3
 80008e4:	402c      	ands	r4, r5
 80008e6:	e749      	b.n	800077c <__aeabi_dadd+0x108>
 80008e8:	003d      	movs	r5, r7
 80008ea:	3828      	subs	r0, #40	; 0x28
 80008ec:	4085      	lsls	r5, r0
 80008ee:	2700      	movs	r7, #0
 80008f0:	e72e      	b.n	8000750 <__aeabi_dadd+0xdc>
 80008f2:	0038      	movs	r0, r7
 80008f4:	f001 fc66 	bl	80021c4 <__clzsi2>
 80008f8:	3020      	adds	r0, #32
 80008fa:	e71d      	b.n	8000738 <__aeabi_dadd+0xc4>
 80008fc:	430a      	orrs	r2, r1
 80008fe:	1e51      	subs	r1, r2, #1
 8000900:	418a      	sbcs	r2, r1
 8000902:	2100      	movs	r1, #0
 8000904:	e707      	b.n	8000716 <__aeabi_dadd+0xa2>
 8000906:	2b00      	cmp	r3, #0
 8000908:	d000      	beq.n	800090c <__aeabi_dadd+0x298>
 800090a:	e0f3      	b.n	8000af4 <__aeabi_dadd+0x480>
 800090c:	1c70      	adds	r0, r6, #1
 800090e:	0543      	lsls	r3, r0, #21
 8000910:	0d5b      	lsrs	r3, r3, #21
 8000912:	2b01      	cmp	r3, #1
 8000914:	dc00      	bgt.n	8000918 <__aeabi_dadd+0x2a4>
 8000916:	e0ad      	b.n	8000a74 <__aeabi_dadd+0x400>
 8000918:	4b36      	ldr	r3, [pc, #216]	; (80009f4 <__aeabi_dadd+0x380>)
 800091a:	4298      	cmp	r0, r3
 800091c:	d100      	bne.n	8000920 <__aeabi_dadd+0x2ac>
 800091e:	e0d1      	b.n	8000ac4 <__aeabi_dadd+0x450>
 8000920:	18ba      	adds	r2, r7, r2
 8000922:	42ba      	cmp	r2, r7
 8000924:	41bf      	sbcs	r7, r7
 8000926:	1864      	adds	r4, r4, r1
 8000928:	427f      	negs	r7, r7
 800092a:	19e4      	adds	r4, r4, r7
 800092c:	07e7      	lsls	r7, r4, #31
 800092e:	0852      	lsrs	r2, r2, #1
 8000930:	4317      	orrs	r7, r2
 8000932:	0864      	lsrs	r4, r4, #1
 8000934:	0006      	movs	r6, r0
 8000936:	e721      	b.n	800077c <__aeabi_dadd+0x108>
 8000938:	482e      	ldr	r0, [pc, #184]	; (80009f4 <__aeabi_dadd+0x380>)
 800093a:	4285      	cmp	r5, r0
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x2cc>
 800093e:	e093      	b.n	8000a68 <__aeabi_dadd+0x3f4>
 8000940:	001d      	movs	r5, r3
 8000942:	e6d0      	b.n	80006e6 <__aeabi_dadd+0x72>
 8000944:	0029      	movs	r1, r5
 8000946:	3e1f      	subs	r6, #31
 8000948:	40f1      	lsrs	r1, r6
 800094a:	2b20      	cmp	r3, #32
 800094c:	d100      	bne.n	8000950 <__aeabi_dadd+0x2dc>
 800094e:	e08d      	b.n	8000a6c <__aeabi_dadd+0x3f8>
 8000950:	2240      	movs	r2, #64	; 0x40
 8000952:	1ad3      	subs	r3, r2, r3
 8000954:	409d      	lsls	r5, r3
 8000956:	432f      	orrs	r7, r5
 8000958:	1e7d      	subs	r5, r7, #1
 800095a:	41af      	sbcs	r7, r5
 800095c:	2400      	movs	r4, #0
 800095e:	430f      	orrs	r7, r1
 8000960:	2600      	movs	r6, #0
 8000962:	e744      	b.n	80007ee <__aeabi_dadd+0x17a>
 8000964:	002b      	movs	r3, r5
 8000966:	0008      	movs	r0, r1
 8000968:	3b20      	subs	r3, #32
 800096a:	40d8      	lsrs	r0, r3
 800096c:	0003      	movs	r3, r0
 800096e:	2d20      	cmp	r5, #32
 8000970:	d100      	bne.n	8000974 <__aeabi_dadd+0x300>
 8000972:	e07d      	b.n	8000a70 <__aeabi_dadd+0x3fc>
 8000974:	2040      	movs	r0, #64	; 0x40
 8000976:	1b45      	subs	r5, r0, r5
 8000978:	40a9      	lsls	r1, r5
 800097a:	430a      	orrs	r2, r1
 800097c:	1e51      	subs	r1, r2, #1
 800097e:	418a      	sbcs	r2, r1
 8000980:	2100      	movs	r1, #0
 8000982:	431a      	orrs	r2, r3
 8000984:	e6c7      	b.n	8000716 <__aeabi_dadd+0xa2>
 8000986:	2e00      	cmp	r6, #0
 8000988:	d050      	beq.n	8000a2c <__aeabi_dadd+0x3b8>
 800098a:	4e1a      	ldr	r6, [pc, #104]	; (80009f4 <__aeabi_dadd+0x380>)
 800098c:	42b0      	cmp	r0, r6
 800098e:	d057      	beq.n	8000a40 <__aeabi_dadd+0x3cc>
 8000990:	2680      	movs	r6, #128	; 0x80
 8000992:	426b      	negs	r3, r5
 8000994:	4699      	mov	r9, r3
 8000996:	0436      	lsls	r6, r6, #16
 8000998:	4334      	orrs	r4, r6
 800099a:	464b      	mov	r3, r9
 800099c:	2b38      	cmp	r3, #56	; 0x38
 800099e:	dd00      	ble.n	80009a2 <__aeabi_dadd+0x32e>
 80009a0:	e0d6      	b.n	8000b50 <__aeabi_dadd+0x4dc>
 80009a2:	2b1f      	cmp	r3, #31
 80009a4:	dd00      	ble.n	80009a8 <__aeabi_dadd+0x334>
 80009a6:	e135      	b.n	8000c14 <__aeabi_dadd+0x5a0>
 80009a8:	2620      	movs	r6, #32
 80009aa:	1af5      	subs	r5, r6, r3
 80009ac:	0026      	movs	r6, r4
 80009ae:	40ae      	lsls	r6, r5
 80009b0:	46b2      	mov	sl, r6
 80009b2:	003e      	movs	r6, r7
 80009b4:	40de      	lsrs	r6, r3
 80009b6:	46ac      	mov	ip, r5
 80009b8:	0035      	movs	r5, r6
 80009ba:	4656      	mov	r6, sl
 80009bc:	432e      	orrs	r6, r5
 80009be:	4665      	mov	r5, ip
 80009c0:	40af      	lsls	r7, r5
 80009c2:	1e7d      	subs	r5, r7, #1
 80009c4:	41af      	sbcs	r7, r5
 80009c6:	40dc      	lsrs	r4, r3
 80009c8:	4337      	orrs	r7, r6
 80009ca:	1bd7      	subs	r7, r2, r7
 80009cc:	42ba      	cmp	r2, r7
 80009ce:	4192      	sbcs	r2, r2
 80009d0:	1b0c      	subs	r4, r1, r4
 80009d2:	4252      	negs	r2, r2
 80009d4:	1aa4      	subs	r4, r4, r2
 80009d6:	0006      	movs	r6, r0
 80009d8:	46d8      	mov	r8, fp
 80009da:	e6a3      	b.n	8000724 <__aeabi_dadd+0xb0>
 80009dc:	4664      	mov	r4, ip
 80009de:	4667      	mov	r7, ip
 80009e0:	432c      	orrs	r4, r5
 80009e2:	d000      	beq.n	80009e6 <__aeabi_dadd+0x372>
 80009e4:	e6a2      	b.n	800072c <__aeabi_dadd+0xb8>
 80009e6:	2500      	movs	r5, #0
 80009e8:	2600      	movs	r6, #0
 80009ea:	2700      	movs	r7, #0
 80009ec:	e706      	b.n	80007fc <__aeabi_dadd+0x188>
 80009ee:	001e      	movs	r6, r3
 80009f0:	e6c4      	b.n	800077c <__aeabi_dadd+0x108>
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	000007ff 	.word	0x000007ff
 80009f8:	ff7fffff 	.word	0xff7fffff
 80009fc:	800fffff 	.word	0x800fffff
 8000a00:	2b1f      	cmp	r3, #31
 8000a02:	dc63      	bgt.n	8000acc <__aeabi_dadd+0x458>
 8000a04:	2020      	movs	r0, #32
 8000a06:	1ac3      	subs	r3, r0, r3
 8000a08:	0008      	movs	r0, r1
 8000a0a:	4098      	lsls	r0, r3
 8000a0c:	469c      	mov	ip, r3
 8000a0e:	4683      	mov	fp, r0
 8000a10:	4653      	mov	r3, sl
 8000a12:	0010      	movs	r0, r2
 8000a14:	40d8      	lsrs	r0, r3
 8000a16:	0003      	movs	r3, r0
 8000a18:	4658      	mov	r0, fp
 8000a1a:	4318      	orrs	r0, r3
 8000a1c:	4663      	mov	r3, ip
 8000a1e:	409a      	lsls	r2, r3
 8000a20:	1e53      	subs	r3, r2, #1
 8000a22:	419a      	sbcs	r2, r3
 8000a24:	4653      	mov	r3, sl
 8000a26:	4302      	orrs	r2, r0
 8000a28:	40d9      	lsrs	r1, r3
 8000a2a:	e703      	b.n	8000834 <__aeabi_dadd+0x1c0>
 8000a2c:	0026      	movs	r6, r4
 8000a2e:	433e      	orrs	r6, r7
 8000a30:	d006      	beq.n	8000a40 <__aeabi_dadd+0x3cc>
 8000a32:	43eb      	mvns	r3, r5
 8000a34:	4699      	mov	r9, r3
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d0c7      	beq.n	80009ca <__aeabi_dadd+0x356>
 8000a3a:	4e94      	ldr	r6, [pc, #592]	; (8000c8c <__aeabi_dadd+0x618>)
 8000a3c:	42b0      	cmp	r0, r6
 8000a3e:	d1ac      	bne.n	800099a <__aeabi_dadd+0x326>
 8000a40:	000c      	movs	r4, r1
 8000a42:	0017      	movs	r7, r2
 8000a44:	0006      	movs	r6, r0
 8000a46:	46d8      	mov	r8, fp
 8000a48:	e698      	b.n	800077c <__aeabi_dadd+0x108>
 8000a4a:	4b90      	ldr	r3, [pc, #576]	; (8000c8c <__aeabi_dadd+0x618>)
 8000a4c:	459a      	cmp	sl, r3
 8000a4e:	d00b      	beq.n	8000a68 <__aeabi_dadd+0x3f4>
 8000a50:	4682      	mov	sl, r0
 8000a52:	e6e7      	b.n	8000824 <__aeabi_dadd+0x1b0>
 8000a54:	2800      	cmp	r0, #0
 8000a56:	d000      	beq.n	8000a5a <__aeabi_dadd+0x3e6>
 8000a58:	e09e      	b.n	8000b98 <__aeabi_dadd+0x524>
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	4310      	orrs	r0, r2
 8000a5e:	d100      	bne.n	8000a62 <__aeabi_dadd+0x3ee>
 8000a60:	e0e9      	b.n	8000c36 <__aeabi_dadd+0x5c2>
 8000a62:	001c      	movs	r4, r3
 8000a64:	0017      	movs	r7, r2
 8000a66:	46d8      	mov	r8, fp
 8000a68:	4e88      	ldr	r6, [pc, #544]	; (8000c8c <__aeabi_dadd+0x618>)
 8000a6a:	e687      	b.n	800077c <__aeabi_dadd+0x108>
 8000a6c:	2500      	movs	r5, #0
 8000a6e:	e772      	b.n	8000956 <__aeabi_dadd+0x2e2>
 8000a70:	2100      	movs	r1, #0
 8000a72:	e782      	b.n	800097a <__aeabi_dadd+0x306>
 8000a74:	0023      	movs	r3, r4
 8000a76:	433b      	orrs	r3, r7
 8000a78:	2e00      	cmp	r6, #0
 8000a7a:	d000      	beq.n	8000a7e <__aeabi_dadd+0x40a>
 8000a7c:	e0ab      	b.n	8000bd6 <__aeabi_dadd+0x562>
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d100      	bne.n	8000a84 <__aeabi_dadd+0x410>
 8000a82:	e0e7      	b.n	8000c54 <__aeabi_dadd+0x5e0>
 8000a84:	000b      	movs	r3, r1
 8000a86:	4313      	orrs	r3, r2
 8000a88:	d100      	bne.n	8000a8c <__aeabi_dadd+0x418>
 8000a8a:	e677      	b.n	800077c <__aeabi_dadd+0x108>
 8000a8c:	18ba      	adds	r2, r7, r2
 8000a8e:	42ba      	cmp	r2, r7
 8000a90:	41bf      	sbcs	r7, r7
 8000a92:	1864      	adds	r4, r4, r1
 8000a94:	427f      	negs	r7, r7
 8000a96:	19e4      	adds	r4, r4, r7
 8000a98:	0223      	lsls	r3, r4, #8
 8000a9a:	d400      	bmi.n	8000a9e <__aeabi_dadd+0x42a>
 8000a9c:	e0f2      	b.n	8000c84 <__aeabi_dadd+0x610>
 8000a9e:	4b7c      	ldr	r3, [pc, #496]	; (8000c90 <__aeabi_dadd+0x61c>)
 8000aa0:	0017      	movs	r7, r2
 8000aa2:	401c      	ands	r4, r3
 8000aa4:	0006      	movs	r6, r0
 8000aa6:	e669      	b.n	800077c <__aeabi_dadd+0x108>
 8000aa8:	0020      	movs	r0, r4
 8000aaa:	4338      	orrs	r0, r7
 8000aac:	2e00      	cmp	r6, #0
 8000aae:	d1d1      	bne.n	8000a54 <__aeabi_dadd+0x3e0>
 8000ab0:	2800      	cmp	r0, #0
 8000ab2:	d15b      	bne.n	8000b6c <__aeabi_dadd+0x4f8>
 8000ab4:	001c      	movs	r4, r3
 8000ab6:	4314      	orrs	r4, r2
 8000ab8:	d100      	bne.n	8000abc <__aeabi_dadd+0x448>
 8000aba:	e0a8      	b.n	8000c0e <__aeabi_dadd+0x59a>
 8000abc:	001c      	movs	r4, r3
 8000abe:	0017      	movs	r7, r2
 8000ac0:	46d8      	mov	r8, fp
 8000ac2:	e65b      	b.n	800077c <__aeabi_dadd+0x108>
 8000ac4:	0006      	movs	r6, r0
 8000ac6:	2400      	movs	r4, #0
 8000ac8:	2700      	movs	r7, #0
 8000aca:	e697      	b.n	80007fc <__aeabi_dadd+0x188>
 8000acc:	4650      	mov	r0, sl
 8000ace:	000b      	movs	r3, r1
 8000ad0:	3820      	subs	r0, #32
 8000ad2:	40c3      	lsrs	r3, r0
 8000ad4:	4699      	mov	r9, r3
 8000ad6:	4653      	mov	r3, sl
 8000ad8:	2b20      	cmp	r3, #32
 8000ada:	d100      	bne.n	8000ade <__aeabi_dadd+0x46a>
 8000adc:	e095      	b.n	8000c0a <__aeabi_dadd+0x596>
 8000ade:	2340      	movs	r3, #64	; 0x40
 8000ae0:	4650      	mov	r0, sl
 8000ae2:	1a1b      	subs	r3, r3, r0
 8000ae4:	4099      	lsls	r1, r3
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	1e51      	subs	r1, r2, #1
 8000aea:	418a      	sbcs	r2, r1
 8000aec:	464b      	mov	r3, r9
 8000aee:	2100      	movs	r1, #0
 8000af0:	431a      	orrs	r2, r3
 8000af2:	e69f      	b.n	8000834 <__aeabi_dadd+0x1c0>
 8000af4:	2e00      	cmp	r6, #0
 8000af6:	d130      	bne.n	8000b5a <__aeabi_dadd+0x4e6>
 8000af8:	0026      	movs	r6, r4
 8000afa:	433e      	orrs	r6, r7
 8000afc:	d067      	beq.n	8000bce <__aeabi_dadd+0x55a>
 8000afe:	43db      	mvns	r3, r3
 8000b00:	469a      	mov	sl, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d01c      	beq.n	8000b40 <__aeabi_dadd+0x4cc>
 8000b06:	4e61      	ldr	r6, [pc, #388]	; (8000c8c <__aeabi_dadd+0x618>)
 8000b08:	42b0      	cmp	r0, r6
 8000b0a:	d060      	beq.n	8000bce <__aeabi_dadd+0x55a>
 8000b0c:	4653      	mov	r3, sl
 8000b0e:	2b38      	cmp	r3, #56	; 0x38
 8000b10:	dd00      	ble.n	8000b14 <__aeabi_dadd+0x4a0>
 8000b12:	e096      	b.n	8000c42 <__aeabi_dadd+0x5ce>
 8000b14:	2b1f      	cmp	r3, #31
 8000b16:	dd00      	ble.n	8000b1a <__aeabi_dadd+0x4a6>
 8000b18:	e09f      	b.n	8000c5a <__aeabi_dadd+0x5e6>
 8000b1a:	2620      	movs	r6, #32
 8000b1c:	1af3      	subs	r3, r6, r3
 8000b1e:	0026      	movs	r6, r4
 8000b20:	409e      	lsls	r6, r3
 8000b22:	469c      	mov	ip, r3
 8000b24:	46b3      	mov	fp, r6
 8000b26:	4653      	mov	r3, sl
 8000b28:	003e      	movs	r6, r7
 8000b2a:	40de      	lsrs	r6, r3
 8000b2c:	0033      	movs	r3, r6
 8000b2e:	465e      	mov	r6, fp
 8000b30:	431e      	orrs	r6, r3
 8000b32:	4663      	mov	r3, ip
 8000b34:	409f      	lsls	r7, r3
 8000b36:	1e7b      	subs	r3, r7, #1
 8000b38:	419f      	sbcs	r7, r3
 8000b3a:	4653      	mov	r3, sl
 8000b3c:	40dc      	lsrs	r4, r3
 8000b3e:	4337      	orrs	r7, r6
 8000b40:	18bf      	adds	r7, r7, r2
 8000b42:	4297      	cmp	r7, r2
 8000b44:	4192      	sbcs	r2, r2
 8000b46:	1864      	adds	r4, r4, r1
 8000b48:	4252      	negs	r2, r2
 8000b4a:	18a4      	adds	r4, r4, r2
 8000b4c:	0006      	movs	r6, r0
 8000b4e:	e678      	b.n	8000842 <__aeabi_dadd+0x1ce>
 8000b50:	4327      	orrs	r7, r4
 8000b52:	1e7c      	subs	r4, r7, #1
 8000b54:	41a7      	sbcs	r7, r4
 8000b56:	2400      	movs	r4, #0
 8000b58:	e737      	b.n	80009ca <__aeabi_dadd+0x356>
 8000b5a:	4e4c      	ldr	r6, [pc, #304]	; (8000c8c <__aeabi_dadd+0x618>)
 8000b5c:	42b0      	cmp	r0, r6
 8000b5e:	d036      	beq.n	8000bce <__aeabi_dadd+0x55a>
 8000b60:	2680      	movs	r6, #128	; 0x80
 8000b62:	425b      	negs	r3, r3
 8000b64:	0436      	lsls	r6, r6, #16
 8000b66:	469a      	mov	sl, r3
 8000b68:	4334      	orrs	r4, r6
 8000b6a:	e7cf      	b.n	8000b0c <__aeabi_dadd+0x498>
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	4310      	orrs	r0, r2
 8000b70:	d100      	bne.n	8000b74 <__aeabi_dadd+0x500>
 8000b72:	e603      	b.n	800077c <__aeabi_dadd+0x108>
 8000b74:	1ab8      	subs	r0, r7, r2
 8000b76:	4684      	mov	ip, r0
 8000b78:	4567      	cmp	r7, ip
 8000b7a:	41ad      	sbcs	r5, r5
 8000b7c:	1ae0      	subs	r0, r4, r3
 8000b7e:	426d      	negs	r5, r5
 8000b80:	1b40      	subs	r0, r0, r5
 8000b82:	0205      	lsls	r5, r0, #8
 8000b84:	d400      	bmi.n	8000b88 <__aeabi_dadd+0x514>
 8000b86:	e62c      	b.n	80007e2 <__aeabi_dadd+0x16e>
 8000b88:	1bd7      	subs	r7, r2, r7
 8000b8a:	42ba      	cmp	r2, r7
 8000b8c:	4192      	sbcs	r2, r2
 8000b8e:	1b1c      	subs	r4, r3, r4
 8000b90:	4252      	negs	r2, r2
 8000b92:	1aa4      	subs	r4, r4, r2
 8000b94:	46d8      	mov	r8, fp
 8000b96:	e5f1      	b.n	800077c <__aeabi_dadd+0x108>
 8000b98:	0018      	movs	r0, r3
 8000b9a:	4310      	orrs	r0, r2
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_dadd+0x52c>
 8000b9e:	e763      	b.n	8000a68 <__aeabi_dadd+0x3f4>
 8000ba0:	08f8      	lsrs	r0, r7, #3
 8000ba2:	0767      	lsls	r7, r4, #29
 8000ba4:	4307      	orrs	r7, r0
 8000ba6:	2080      	movs	r0, #128	; 0x80
 8000ba8:	08e4      	lsrs	r4, r4, #3
 8000baa:	0300      	lsls	r0, r0, #12
 8000bac:	4204      	tst	r4, r0
 8000bae:	d008      	beq.n	8000bc2 <__aeabi_dadd+0x54e>
 8000bb0:	08dd      	lsrs	r5, r3, #3
 8000bb2:	4205      	tst	r5, r0
 8000bb4:	d105      	bne.n	8000bc2 <__aeabi_dadd+0x54e>
 8000bb6:	08d2      	lsrs	r2, r2, #3
 8000bb8:	0759      	lsls	r1, r3, #29
 8000bba:	4311      	orrs	r1, r2
 8000bbc:	000f      	movs	r7, r1
 8000bbe:	002c      	movs	r4, r5
 8000bc0:	46d8      	mov	r8, fp
 8000bc2:	0f7b      	lsrs	r3, r7, #29
 8000bc4:	00e4      	lsls	r4, r4, #3
 8000bc6:	431c      	orrs	r4, r3
 8000bc8:	00ff      	lsls	r7, r7, #3
 8000bca:	4e30      	ldr	r6, [pc, #192]	; (8000c8c <__aeabi_dadd+0x618>)
 8000bcc:	e5d6      	b.n	800077c <__aeabi_dadd+0x108>
 8000bce:	000c      	movs	r4, r1
 8000bd0:	0017      	movs	r7, r2
 8000bd2:	0006      	movs	r6, r0
 8000bd4:	e5d2      	b.n	800077c <__aeabi_dadd+0x108>
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d038      	beq.n	8000c4c <__aeabi_dadd+0x5d8>
 8000bda:	000b      	movs	r3, r1
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	d100      	bne.n	8000be2 <__aeabi_dadd+0x56e>
 8000be0:	e742      	b.n	8000a68 <__aeabi_dadd+0x3f4>
 8000be2:	08f8      	lsrs	r0, r7, #3
 8000be4:	0767      	lsls	r7, r4, #29
 8000be6:	4307      	orrs	r7, r0
 8000be8:	2080      	movs	r0, #128	; 0x80
 8000bea:	08e4      	lsrs	r4, r4, #3
 8000bec:	0300      	lsls	r0, r0, #12
 8000bee:	4204      	tst	r4, r0
 8000bf0:	d0e7      	beq.n	8000bc2 <__aeabi_dadd+0x54e>
 8000bf2:	08cb      	lsrs	r3, r1, #3
 8000bf4:	4203      	tst	r3, r0
 8000bf6:	d1e4      	bne.n	8000bc2 <__aeabi_dadd+0x54e>
 8000bf8:	08d2      	lsrs	r2, r2, #3
 8000bfa:	0749      	lsls	r1, r1, #29
 8000bfc:	4311      	orrs	r1, r2
 8000bfe:	000f      	movs	r7, r1
 8000c00:	001c      	movs	r4, r3
 8000c02:	e7de      	b.n	8000bc2 <__aeabi_dadd+0x54e>
 8000c04:	2700      	movs	r7, #0
 8000c06:	2400      	movs	r4, #0
 8000c08:	e5d5      	b.n	80007b6 <__aeabi_dadd+0x142>
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	e76b      	b.n	8000ae6 <__aeabi_dadd+0x472>
 8000c0e:	2500      	movs	r5, #0
 8000c10:	2700      	movs	r7, #0
 8000c12:	e5f3      	b.n	80007fc <__aeabi_dadd+0x188>
 8000c14:	464e      	mov	r6, r9
 8000c16:	0025      	movs	r5, r4
 8000c18:	3e20      	subs	r6, #32
 8000c1a:	40f5      	lsrs	r5, r6
 8000c1c:	464b      	mov	r3, r9
 8000c1e:	002e      	movs	r6, r5
 8000c20:	2b20      	cmp	r3, #32
 8000c22:	d02d      	beq.n	8000c80 <__aeabi_dadd+0x60c>
 8000c24:	2540      	movs	r5, #64	; 0x40
 8000c26:	1aed      	subs	r5, r5, r3
 8000c28:	40ac      	lsls	r4, r5
 8000c2a:	4327      	orrs	r7, r4
 8000c2c:	1e7c      	subs	r4, r7, #1
 8000c2e:	41a7      	sbcs	r7, r4
 8000c30:	2400      	movs	r4, #0
 8000c32:	4337      	orrs	r7, r6
 8000c34:	e6c9      	b.n	80009ca <__aeabi_dadd+0x356>
 8000c36:	2480      	movs	r4, #128	; 0x80
 8000c38:	2500      	movs	r5, #0
 8000c3a:	0324      	lsls	r4, r4, #12
 8000c3c:	4e13      	ldr	r6, [pc, #76]	; (8000c8c <__aeabi_dadd+0x618>)
 8000c3e:	2700      	movs	r7, #0
 8000c40:	e5dc      	b.n	80007fc <__aeabi_dadd+0x188>
 8000c42:	4327      	orrs	r7, r4
 8000c44:	1e7c      	subs	r4, r7, #1
 8000c46:	41a7      	sbcs	r7, r4
 8000c48:	2400      	movs	r4, #0
 8000c4a:	e779      	b.n	8000b40 <__aeabi_dadd+0x4cc>
 8000c4c:	000c      	movs	r4, r1
 8000c4e:	0017      	movs	r7, r2
 8000c50:	4e0e      	ldr	r6, [pc, #56]	; (8000c8c <__aeabi_dadd+0x618>)
 8000c52:	e593      	b.n	800077c <__aeabi_dadd+0x108>
 8000c54:	000c      	movs	r4, r1
 8000c56:	0017      	movs	r7, r2
 8000c58:	e590      	b.n	800077c <__aeabi_dadd+0x108>
 8000c5a:	4656      	mov	r6, sl
 8000c5c:	0023      	movs	r3, r4
 8000c5e:	3e20      	subs	r6, #32
 8000c60:	40f3      	lsrs	r3, r6
 8000c62:	4699      	mov	r9, r3
 8000c64:	4653      	mov	r3, sl
 8000c66:	2b20      	cmp	r3, #32
 8000c68:	d00e      	beq.n	8000c88 <__aeabi_dadd+0x614>
 8000c6a:	2340      	movs	r3, #64	; 0x40
 8000c6c:	4656      	mov	r6, sl
 8000c6e:	1b9b      	subs	r3, r3, r6
 8000c70:	409c      	lsls	r4, r3
 8000c72:	4327      	orrs	r7, r4
 8000c74:	1e7c      	subs	r4, r7, #1
 8000c76:	41a7      	sbcs	r7, r4
 8000c78:	464b      	mov	r3, r9
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	431f      	orrs	r7, r3
 8000c7e:	e75f      	b.n	8000b40 <__aeabi_dadd+0x4cc>
 8000c80:	2400      	movs	r4, #0
 8000c82:	e7d2      	b.n	8000c2a <__aeabi_dadd+0x5b6>
 8000c84:	0017      	movs	r7, r2
 8000c86:	e5b2      	b.n	80007ee <__aeabi_dadd+0x17a>
 8000c88:	2400      	movs	r4, #0
 8000c8a:	e7f2      	b.n	8000c72 <__aeabi_dadd+0x5fe>
 8000c8c:	000007ff 	.word	0x000007ff
 8000c90:	ff7fffff 	.word	0xff7fffff

08000c94 <__aeabi_ddiv>:
 8000c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c96:	4657      	mov	r7, sl
 8000c98:	4645      	mov	r5, r8
 8000c9a:	46de      	mov	lr, fp
 8000c9c:	464e      	mov	r6, r9
 8000c9e:	b5e0      	push	{r5, r6, r7, lr}
 8000ca0:	004c      	lsls	r4, r1, #1
 8000ca2:	030e      	lsls	r6, r1, #12
 8000ca4:	b087      	sub	sp, #28
 8000ca6:	4683      	mov	fp, r0
 8000ca8:	4692      	mov	sl, r2
 8000caa:	001d      	movs	r5, r3
 8000cac:	4680      	mov	r8, r0
 8000cae:	0b36      	lsrs	r6, r6, #12
 8000cb0:	0d64      	lsrs	r4, r4, #21
 8000cb2:	0fcf      	lsrs	r7, r1, #31
 8000cb4:	2c00      	cmp	r4, #0
 8000cb6:	d04f      	beq.n	8000d58 <__aeabi_ddiv+0xc4>
 8000cb8:	4b6f      	ldr	r3, [pc, #444]	; (8000e78 <__aeabi_ddiv+0x1e4>)
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	d035      	beq.n	8000d2a <__aeabi_ddiv+0x96>
 8000cbe:	2380      	movs	r3, #128	; 0x80
 8000cc0:	0f42      	lsrs	r2, r0, #29
 8000cc2:	041b      	lsls	r3, r3, #16
 8000cc4:	00f6      	lsls	r6, r6, #3
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	4333      	orrs	r3, r6
 8000cca:	4699      	mov	r9, r3
 8000ccc:	00c3      	lsls	r3, r0, #3
 8000cce:	4698      	mov	r8, r3
 8000cd0:	4b6a      	ldr	r3, [pc, #424]	; (8000e7c <__aeabi_ddiv+0x1e8>)
 8000cd2:	2600      	movs	r6, #0
 8000cd4:	469c      	mov	ip, r3
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	4464      	add	r4, ip
 8000cda:	9303      	str	r3, [sp, #12]
 8000cdc:	032b      	lsls	r3, r5, #12
 8000cde:	0b1b      	lsrs	r3, r3, #12
 8000ce0:	469b      	mov	fp, r3
 8000ce2:	006b      	lsls	r3, r5, #1
 8000ce4:	0fed      	lsrs	r5, r5, #31
 8000ce6:	4650      	mov	r0, sl
 8000ce8:	0d5b      	lsrs	r3, r3, #21
 8000cea:	9501      	str	r5, [sp, #4]
 8000cec:	d05e      	beq.n	8000dac <__aeabi_ddiv+0x118>
 8000cee:	4a62      	ldr	r2, [pc, #392]	; (8000e78 <__aeabi_ddiv+0x1e4>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d053      	beq.n	8000d9c <__aeabi_ddiv+0x108>
 8000cf4:	465a      	mov	r2, fp
 8000cf6:	00d1      	lsls	r1, r2, #3
 8000cf8:	2280      	movs	r2, #128	; 0x80
 8000cfa:	0f40      	lsrs	r0, r0, #29
 8000cfc:	0412      	lsls	r2, r2, #16
 8000cfe:	4302      	orrs	r2, r0
 8000d00:	430a      	orrs	r2, r1
 8000d02:	4693      	mov	fp, r2
 8000d04:	4652      	mov	r2, sl
 8000d06:	00d1      	lsls	r1, r2, #3
 8000d08:	4a5c      	ldr	r2, [pc, #368]	; (8000e7c <__aeabi_ddiv+0x1e8>)
 8000d0a:	4694      	mov	ip, r2
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4463      	add	r3, ip
 8000d10:	0038      	movs	r0, r7
 8000d12:	4068      	eors	r0, r5
 8000d14:	4684      	mov	ip, r0
 8000d16:	9002      	str	r0, [sp, #8]
 8000d18:	1ae4      	subs	r4, r4, r3
 8000d1a:	4316      	orrs	r6, r2
 8000d1c:	2e0f      	cmp	r6, #15
 8000d1e:	d900      	bls.n	8000d22 <__aeabi_ddiv+0x8e>
 8000d20:	e0b4      	b.n	8000e8c <__aeabi_ddiv+0x1f8>
 8000d22:	4b57      	ldr	r3, [pc, #348]	; (8000e80 <__aeabi_ddiv+0x1ec>)
 8000d24:	00b6      	lsls	r6, r6, #2
 8000d26:	599b      	ldr	r3, [r3, r6]
 8000d28:	469f      	mov	pc, r3
 8000d2a:	0003      	movs	r3, r0
 8000d2c:	4333      	orrs	r3, r6
 8000d2e:	4699      	mov	r9, r3
 8000d30:	d16c      	bne.n	8000e0c <__aeabi_ddiv+0x178>
 8000d32:	2300      	movs	r3, #0
 8000d34:	4698      	mov	r8, r3
 8000d36:	3302      	adds	r3, #2
 8000d38:	2608      	movs	r6, #8
 8000d3a:	9303      	str	r3, [sp, #12]
 8000d3c:	e7ce      	b.n	8000cdc <__aeabi_ddiv+0x48>
 8000d3e:	46cb      	mov	fp, r9
 8000d40:	4641      	mov	r1, r8
 8000d42:	9a03      	ldr	r2, [sp, #12]
 8000d44:	9701      	str	r7, [sp, #4]
 8000d46:	2a02      	cmp	r2, #2
 8000d48:	d165      	bne.n	8000e16 <__aeabi_ddiv+0x182>
 8000d4a:	9b01      	ldr	r3, [sp, #4]
 8000d4c:	4c4a      	ldr	r4, [pc, #296]	; (8000e78 <__aeabi_ddiv+0x1e4>)
 8000d4e:	469c      	mov	ip, r3
 8000d50:	2300      	movs	r3, #0
 8000d52:	2200      	movs	r2, #0
 8000d54:	4698      	mov	r8, r3
 8000d56:	e06b      	b.n	8000e30 <__aeabi_ddiv+0x19c>
 8000d58:	0003      	movs	r3, r0
 8000d5a:	4333      	orrs	r3, r6
 8000d5c:	4699      	mov	r9, r3
 8000d5e:	d04e      	beq.n	8000dfe <__aeabi_ddiv+0x16a>
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d100      	bne.n	8000d66 <__aeabi_ddiv+0xd2>
 8000d64:	e1bc      	b.n	80010e0 <__aeabi_ddiv+0x44c>
 8000d66:	0030      	movs	r0, r6
 8000d68:	f001 fa2c 	bl	80021c4 <__clzsi2>
 8000d6c:	0003      	movs	r3, r0
 8000d6e:	3b0b      	subs	r3, #11
 8000d70:	2b1c      	cmp	r3, #28
 8000d72:	dd00      	ble.n	8000d76 <__aeabi_ddiv+0xe2>
 8000d74:	e1ac      	b.n	80010d0 <__aeabi_ddiv+0x43c>
 8000d76:	221d      	movs	r2, #29
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	465a      	mov	r2, fp
 8000d7c:	0001      	movs	r1, r0
 8000d7e:	40da      	lsrs	r2, r3
 8000d80:	3908      	subs	r1, #8
 8000d82:	408e      	lsls	r6, r1
 8000d84:	0013      	movs	r3, r2
 8000d86:	4333      	orrs	r3, r6
 8000d88:	4699      	mov	r9, r3
 8000d8a:	465b      	mov	r3, fp
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	4698      	mov	r8, r3
 8000d90:	2300      	movs	r3, #0
 8000d92:	4c3c      	ldr	r4, [pc, #240]	; (8000e84 <__aeabi_ddiv+0x1f0>)
 8000d94:	2600      	movs	r6, #0
 8000d96:	1a24      	subs	r4, r4, r0
 8000d98:	9303      	str	r3, [sp, #12]
 8000d9a:	e79f      	b.n	8000cdc <__aeabi_ddiv+0x48>
 8000d9c:	4651      	mov	r1, sl
 8000d9e:	465a      	mov	r2, fp
 8000da0:	4311      	orrs	r1, r2
 8000da2:	d129      	bne.n	8000df8 <__aeabi_ddiv+0x164>
 8000da4:	2200      	movs	r2, #0
 8000da6:	4693      	mov	fp, r2
 8000da8:	3202      	adds	r2, #2
 8000daa:	e7b1      	b.n	8000d10 <__aeabi_ddiv+0x7c>
 8000dac:	4659      	mov	r1, fp
 8000dae:	4301      	orrs	r1, r0
 8000db0:	d01e      	beq.n	8000df0 <__aeabi_ddiv+0x15c>
 8000db2:	465b      	mov	r3, fp
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d100      	bne.n	8000dba <__aeabi_ddiv+0x126>
 8000db8:	e19e      	b.n	80010f8 <__aeabi_ddiv+0x464>
 8000dba:	4658      	mov	r0, fp
 8000dbc:	f001 fa02 	bl	80021c4 <__clzsi2>
 8000dc0:	0003      	movs	r3, r0
 8000dc2:	3b0b      	subs	r3, #11
 8000dc4:	2b1c      	cmp	r3, #28
 8000dc6:	dd00      	ble.n	8000dca <__aeabi_ddiv+0x136>
 8000dc8:	e18f      	b.n	80010ea <__aeabi_ddiv+0x456>
 8000dca:	0002      	movs	r2, r0
 8000dcc:	4659      	mov	r1, fp
 8000dce:	3a08      	subs	r2, #8
 8000dd0:	4091      	lsls	r1, r2
 8000dd2:	468b      	mov	fp, r1
 8000dd4:	211d      	movs	r1, #29
 8000dd6:	1acb      	subs	r3, r1, r3
 8000dd8:	4651      	mov	r1, sl
 8000dda:	40d9      	lsrs	r1, r3
 8000ddc:	000b      	movs	r3, r1
 8000dde:	4659      	mov	r1, fp
 8000de0:	430b      	orrs	r3, r1
 8000de2:	4651      	mov	r1, sl
 8000de4:	469b      	mov	fp, r3
 8000de6:	4091      	lsls	r1, r2
 8000de8:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <__aeabi_ddiv+0x1f0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	1a1b      	subs	r3, r3, r0
 8000dee:	e78f      	b.n	8000d10 <__aeabi_ddiv+0x7c>
 8000df0:	2300      	movs	r3, #0
 8000df2:	2201      	movs	r2, #1
 8000df4:	469b      	mov	fp, r3
 8000df6:	e78b      	b.n	8000d10 <__aeabi_ddiv+0x7c>
 8000df8:	4651      	mov	r1, sl
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	e788      	b.n	8000d10 <__aeabi_ddiv+0x7c>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	4698      	mov	r8, r3
 8000e02:	3301      	adds	r3, #1
 8000e04:	2604      	movs	r6, #4
 8000e06:	2400      	movs	r4, #0
 8000e08:	9303      	str	r3, [sp, #12]
 8000e0a:	e767      	b.n	8000cdc <__aeabi_ddiv+0x48>
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	46b1      	mov	r9, r6
 8000e10:	9303      	str	r3, [sp, #12]
 8000e12:	260c      	movs	r6, #12
 8000e14:	e762      	b.n	8000cdc <__aeabi_ddiv+0x48>
 8000e16:	2a03      	cmp	r2, #3
 8000e18:	d100      	bne.n	8000e1c <__aeabi_ddiv+0x188>
 8000e1a:	e25c      	b.n	80012d6 <__aeabi_ddiv+0x642>
 8000e1c:	9b01      	ldr	r3, [sp, #4]
 8000e1e:	2a01      	cmp	r2, #1
 8000e20:	d000      	beq.n	8000e24 <__aeabi_ddiv+0x190>
 8000e22:	e1e4      	b.n	80011ee <__aeabi_ddiv+0x55a>
 8000e24:	4013      	ands	r3, r2
 8000e26:	469c      	mov	ip, r3
 8000e28:	2300      	movs	r3, #0
 8000e2a:	2400      	movs	r4, #0
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	4698      	mov	r8, r3
 8000e30:	2100      	movs	r1, #0
 8000e32:	0312      	lsls	r2, r2, #12
 8000e34:	0b13      	lsrs	r3, r2, #12
 8000e36:	0d0a      	lsrs	r2, r1, #20
 8000e38:	0512      	lsls	r2, r2, #20
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	0523      	lsls	r3, r4, #20
 8000e3e:	4c12      	ldr	r4, [pc, #72]	; (8000e88 <__aeabi_ddiv+0x1f4>)
 8000e40:	4640      	mov	r0, r8
 8000e42:	4022      	ands	r2, r4
 8000e44:	4313      	orrs	r3, r2
 8000e46:	4662      	mov	r2, ip
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	07d2      	lsls	r2, r2, #31
 8000e4c:	085b      	lsrs	r3, r3, #1
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	0019      	movs	r1, r3
 8000e52:	b007      	add	sp, #28
 8000e54:	bc3c      	pop	{r2, r3, r4, r5}
 8000e56:	4690      	mov	r8, r2
 8000e58:	4699      	mov	r9, r3
 8000e5a:	46a2      	mov	sl, r4
 8000e5c:	46ab      	mov	fp, r5
 8000e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e60:	2300      	movs	r3, #0
 8000e62:	2280      	movs	r2, #128	; 0x80
 8000e64:	469c      	mov	ip, r3
 8000e66:	0312      	lsls	r2, r2, #12
 8000e68:	4698      	mov	r8, r3
 8000e6a:	4c03      	ldr	r4, [pc, #12]	; (8000e78 <__aeabi_ddiv+0x1e4>)
 8000e6c:	e7e0      	b.n	8000e30 <__aeabi_ddiv+0x19c>
 8000e6e:	2300      	movs	r3, #0
 8000e70:	4c01      	ldr	r4, [pc, #4]	; (8000e78 <__aeabi_ddiv+0x1e4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	4698      	mov	r8, r3
 8000e76:	e7db      	b.n	8000e30 <__aeabi_ddiv+0x19c>
 8000e78:	000007ff 	.word	0x000007ff
 8000e7c:	fffffc01 	.word	0xfffffc01
 8000e80:	080096e8 	.word	0x080096e8
 8000e84:	fffffc0d 	.word	0xfffffc0d
 8000e88:	800fffff 	.word	0x800fffff
 8000e8c:	45d9      	cmp	r9, fp
 8000e8e:	d900      	bls.n	8000e92 <__aeabi_ddiv+0x1fe>
 8000e90:	e139      	b.n	8001106 <__aeabi_ddiv+0x472>
 8000e92:	d100      	bne.n	8000e96 <__aeabi_ddiv+0x202>
 8000e94:	e134      	b.n	8001100 <__aeabi_ddiv+0x46c>
 8000e96:	2300      	movs	r3, #0
 8000e98:	4646      	mov	r6, r8
 8000e9a:	464d      	mov	r5, r9
 8000e9c:	469a      	mov	sl, r3
 8000e9e:	3c01      	subs	r4, #1
 8000ea0:	465b      	mov	r3, fp
 8000ea2:	0e0a      	lsrs	r2, r1, #24
 8000ea4:	021b      	lsls	r3, r3, #8
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	020b      	lsls	r3, r1, #8
 8000eaa:	0c17      	lsrs	r7, r2, #16
 8000eac:	9303      	str	r3, [sp, #12]
 8000eae:	0413      	lsls	r3, r2, #16
 8000eb0:	0c1b      	lsrs	r3, r3, #16
 8000eb2:	0039      	movs	r1, r7
 8000eb4:	0028      	movs	r0, r5
 8000eb6:	4690      	mov	r8, r2
 8000eb8:	9301      	str	r3, [sp, #4]
 8000eba:	f7ff f947 	bl	800014c <__udivsi3>
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	9b01      	ldr	r3, [sp, #4]
 8000ec2:	4683      	mov	fp, r0
 8000ec4:	435a      	muls	r2, r3
 8000ec6:	0028      	movs	r0, r5
 8000ec8:	0039      	movs	r1, r7
 8000eca:	4691      	mov	r9, r2
 8000ecc:	f7ff f9c4 	bl	8000258 <__aeabi_uidivmod>
 8000ed0:	0c35      	lsrs	r5, r6, #16
 8000ed2:	0409      	lsls	r1, r1, #16
 8000ed4:	430d      	orrs	r5, r1
 8000ed6:	45a9      	cmp	r9, r5
 8000ed8:	d90d      	bls.n	8000ef6 <__aeabi_ddiv+0x262>
 8000eda:	465b      	mov	r3, fp
 8000edc:	4445      	add	r5, r8
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	45a8      	cmp	r8, r5
 8000ee2:	d900      	bls.n	8000ee6 <__aeabi_ddiv+0x252>
 8000ee4:	e13a      	b.n	800115c <__aeabi_ddiv+0x4c8>
 8000ee6:	45a9      	cmp	r9, r5
 8000ee8:	d800      	bhi.n	8000eec <__aeabi_ddiv+0x258>
 8000eea:	e137      	b.n	800115c <__aeabi_ddiv+0x4c8>
 8000eec:	2302      	movs	r3, #2
 8000eee:	425b      	negs	r3, r3
 8000ef0:	469c      	mov	ip, r3
 8000ef2:	4445      	add	r5, r8
 8000ef4:	44e3      	add	fp, ip
 8000ef6:	464b      	mov	r3, r9
 8000ef8:	1aeb      	subs	r3, r5, r3
 8000efa:	0039      	movs	r1, r7
 8000efc:	0018      	movs	r0, r3
 8000efe:	9304      	str	r3, [sp, #16]
 8000f00:	f7ff f924 	bl	800014c <__udivsi3>
 8000f04:	9b01      	ldr	r3, [sp, #4]
 8000f06:	0005      	movs	r5, r0
 8000f08:	4343      	muls	r3, r0
 8000f0a:	0039      	movs	r1, r7
 8000f0c:	9804      	ldr	r0, [sp, #16]
 8000f0e:	4699      	mov	r9, r3
 8000f10:	f7ff f9a2 	bl	8000258 <__aeabi_uidivmod>
 8000f14:	0433      	lsls	r3, r6, #16
 8000f16:	0409      	lsls	r1, r1, #16
 8000f18:	0c1b      	lsrs	r3, r3, #16
 8000f1a:	430b      	orrs	r3, r1
 8000f1c:	4599      	cmp	r9, r3
 8000f1e:	d909      	bls.n	8000f34 <__aeabi_ddiv+0x2a0>
 8000f20:	4443      	add	r3, r8
 8000f22:	1e6a      	subs	r2, r5, #1
 8000f24:	4598      	cmp	r8, r3
 8000f26:	d900      	bls.n	8000f2a <__aeabi_ddiv+0x296>
 8000f28:	e11a      	b.n	8001160 <__aeabi_ddiv+0x4cc>
 8000f2a:	4599      	cmp	r9, r3
 8000f2c:	d800      	bhi.n	8000f30 <__aeabi_ddiv+0x29c>
 8000f2e:	e117      	b.n	8001160 <__aeabi_ddiv+0x4cc>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4443      	add	r3, r8
 8000f34:	464a      	mov	r2, r9
 8000f36:	1a9b      	subs	r3, r3, r2
 8000f38:	465a      	mov	r2, fp
 8000f3a:	0412      	lsls	r2, r2, #16
 8000f3c:	432a      	orrs	r2, r5
 8000f3e:	9903      	ldr	r1, [sp, #12]
 8000f40:	4693      	mov	fp, r2
 8000f42:	0c10      	lsrs	r0, r2, #16
 8000f44:	0c0a      	lsrs	r2, r1, #16
 8000f46:	4691      	mov	r9, r2
 8000f48:	0409      	lsls	r1, r1, #16
 8000f4a:	465a      	mov	r2, fp
 8000f4c:	0c09      	lsrs	r1, r1, #16
 8000f4e:	464e      	mov	r6, r9
 8000f50:	000d      	movs	r5, r1
 8000f52:	0412      	lsls	r2, r2, #16
 8000f54:	0c12      	lsrs	r2, r2, #16
 8000f56:	4345      	muls	r5, r0
 8000f58:	9105      	str	r1, [sp, #20]
 8000f5a:	4351      	muls	r1, r2
 8000f5c:	4372      	muls	r2, r6
 8000f5e:	4370      	muls	r0, r6
 8000f60:	1952      	adds	r2, r2, r5
 8000f62:	0c0e      	lsrs	r6, r1, #16
 8000f64:	18b2      	adds	r2, r6, r2
 8000f66:	4295      	cmp	r5, r2
 8000f68:	d903      	bls.n	8000f72 <__aeabi_ddiv+0x2de>
 8000f6a:	2580      	movs	r5, #128	; 0x80
 8000f6c:	026d      	lsls	r5, r5, #9
 8000f6e:	46ac      	mov	ip, r5
 8000f70:	4460      	add	r0, ip
 8000f72:	0c15      	lsrs	r5, r2, #16
 8000f74:	0409      	lsls	r1, r1, #16
 8000f76:	0412      	lsls	r2, r2, #16
 8000f78:	0c09      	lsrs	r1, r1, #16
 8000f7a:	1828      	adds	r0, r5, r0
 8000f7c:	1852      	adds	r2, r2, r1
 8000f7e:	4283      	cmp	r3, r0
 8000f80:	d200      	bcs.n	8000f84 <__aeabi_ddiv+0x2f0>
 8000f82:	e0ce      	b.n	8001122 <__aeabi_ddiv+0x48e>
 8000f84:	d100      	bne.n	8000f88 <__aeabi_ddiv+0x2f4>
 8000f86:	e0c8      	b.n	800111a <__aeabi_ddiv+0x486>
 8000f88:	1a1d      	subs	r5, r3, r0
 8000f8a:	4653      	mov	r3, sl
 8000f8c:	1a9e      	subs	r6, r3, r2
 8000f8e:	45b2      	cmp	sl, r6
 8000f90:	4192      	sbcs	r2, r2
 8000f92:	4252      	negs	r2, r2
 8000f94:	1aab      	subs	r3, r5, r2
 8000f96:	469a      	mov	sl, r3
 8000f98:	4598      	cmp	r8, r3
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_ddiv+0x30a>
 8000f9c:	e117      	b.n	80011ce <__aeabi_ddiv+0x53a>
 8000f9e:	0039      	movs	r1, r7
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f7ff f8d3 	bl	800014c <__udivsi3>
 8000fa6:	9b01      	ldr	r3, [sp, #4]
 8000fa8:	0005      	movs	r5, r0
 8000faa:	4343      	muls	r3, r0
 8000fac:	0039      	movs	r1, r7
 8000fae:	4650      	mov	r0, sl
 8000fb0:	9304      	str	r3, [sp, #16]
 8000fb2:	f7ff f951 	bl	8000258 <__aeabi_uidivmod>
 8000fb6:	9804      	ldr	r0, [sp, #16]
 8000fb8:	040b      	lsls	r3, r1, #16
 8000fba:	0c31      	lsrs	r1, r6, #16
 8000fbc:	4319      	orrs	r1, r3
 8000fbe:	4288      	cmp	r0, r1
 8000fc0:	d909      	bls.n	8000fd6 <__aeabi_ddiv+0x342>
 8000fc2:	4441      	add	r1, r8
 8000fc4:	1e6b      	subs	r3, r5, #1
 8000fc6:	4588      	cmp	r8, r1
 8000fc8:	d900      	bls.n	8000fcc <__aeabi_ddiv+0x338>
 8000fca:	e107      	b.n	80011dc <__aeabi_ddiv+0x548>
 8000fcc:	4288      	cmp	r0, r1
 8000fce:	d800      	bhi.n	8000fd2 <__aeabi_ddiv+0x33e>
 8000fd0:	e104      	b.n	80011dc <__aeabi_ddiv+0x548>
 8000fd2:	3d02      	subs	r5, #2
 8000fd4:	4441      	add	r1, r8
 8000fd6:	9b04      	ldr	r3, [sp, #16]
 8000fd8:	1acb      	subs	r3, r1, r3
 8000fda:	0018      	movs	r0, r3
 8000fdc:	0039      	movs	r1, r7
 8000fde:	9304      	str	r3, [sp, #16]
 8000fe0:	f7ff f8b4 	bl	800014c <__udivsi3>
 8000fe4:	9b01      	ldr	r3, [sp, #4]
 8000fe6:	4682      	mov	sl, r0
 8000fe8:	4343      	muls	r3, r0
 8000fea:	0039      	movs	r1, r7
 8000fec:	9804      	ldr	r0, [sp, #16]
 8000fee:	9301      	str	r3, [sp, #4]
 8000ff0:	f7ff f932 	bl	8000258 <__aeabi_uidivmod>
 8000ff4:	9801      	ldr	r0, [sp, #4]
 8000ff6:	040b      	lsls	r3, r1, #16
 8000ff8:	0431      	lsls	r1, r6, #16
 8000ffa:	0c09      	lsrs	r1, r1, #16
 8000ffc:	4319      	orrs	r1, r3
 8000ffe:	4288      	cmp	r0, r1
 8001000:	d90d      	bls.n	800101e <__aeabi_ddiv+0x38a>
 8001002:	4653      	mov	r3, sl
 8001004:	4441      	add	r1, r8
 8001006:	3b01      	subs	r3, #1
 8001008:	4588      	cmp	r8, r1
 800100a:	d900      	bls.n	800100e <__aeabi_ddiv+0x37a>
 800100c:	e0e8      	b.n	80011e0 <__aeabi_ddiv+0x54c>
 800100e:	4288      	cmp	r0, r1
 8001010:	d800      	bhi.n	8001014 <__aeabi_ddiv+0x380>
 8001012:	e0e5      	b.n	80011e0 <__aeabi_ddiv+0x54c>
 8001014:	2302      	movs	r3, #2
 8001016:	425b      	negs	r3, r3
 8001018:	469c      	mov	ip, r3
 800101a:	4441      	add	r1, r8
 800101c:	44e2      	add	sl, ip
 800101e:	9b01      	ldr	r3, [sp, #4]
 8001020:	042d      	lsls	r5, r5, #16
 8001022:	1ace      	subs	r6, r1, r3
 8001024:	4651      	mov	r1, sl
 8001026:	4329      	orrs	r1, r5
 8001028:	9d05      	ldr	r5, [sp, #20]
 800102a:	464f      	mov	r7, r9
 800102c:	002a      	movs	r2, r5
 800102e:	040b      	lsls	r3, r1, #16
 8001030:	0c08      	lsrs	r0, r1, #16
 8001032:	0c1b      	lsrs	r3, r3, #16
 8001034:	435a      	muls	r2, r3
 8001036:	4345      	muls	r5, r0
 8001038:	437b      	muls	r3, r7
 800103a:	4378      	muls	r0, r7
 800103c:	195b      	adds	r3, r3, r5
 800103e:	0c17      	lsrs	r7, r2, #16
 8001040:	18fb      	adds	r3, r7, r3
 8001042:	429d      	cmp	r5, r3
 8001044:	d903      	bls.n	800104e <__aeabi_ddiv+0x3ba>
 8001046:	2580      	movs	r5, #128	; 0x80
 8001048:	026d      	lsls	r5, r5, #9
 800104a:	46ac      	mov	ip, r5
 800104c:	4460      	add	r0, ip
 800104e:	0c1d      	lsrs	r5, r3, #16
 8001050:	0412      	lsls	r2, r2, #16
 8001052:	041b      	lsls	r3, r3, #16
 8001054:	0c12      	lsrs	r2, r2, #16
 8001056:	1828      	adds	r0, r5, r0
 8001058:	189b      	adds	r3, r3, r2
 800105a:	4286      	cmp	r6, r0
 800105c:	d200      	bcs.n	8001060 <__aeabi_ddiv+0x3cc>
 800105e:	e093      	b.n	8001188 <__aeabi_ddiv+0x4f4>
 8001060:	d100      	bne.n	8001064 <__aeabi_ddiv+0x3d0>
 8001062:	e08e      	b.n	8001182 <__aeabi_ddiv+0x4ee>
 8001064:	2301      	movs	r3, #1
 8001066:	4319      	orrs	r1, r3
 8001068:	4ba0      	ldr	r3, [pc, #640]	; (80012ec <__aeabi_ddiv+0x658>)
 800106a:	18e3      	adds	r3, r4, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	dc00      	bgt.n	8001072 <__aeabi_ddiv+0x3de>
 8001070:	e099      	b.n	80011a6 <__aeabi_ddiv+0x512>
 8001072:	074a      	lsls	r2, r1, #29
 8001074:	d000      	beq.n	8001078 <__aeabi_ddiv+0x3e4>
 8001076:	e09e      	b.n	80011b6 <__aeabi_ddiv+0x522>
 8001078:	465a      	mov	r2, fp
 800107a:	01d2      	lsls	r2, r2, #7
 800107c:	d506      	bpl.n	800108c <__aeabi_ddiv+0x3f8>
 800107e:	465a      	mov	r2, fp
 8001080:	4b9b      	ldr	r3, [pc, #620]	; (80012f0 <__aeabi_ddiv+0x65c>)
 8001082:	401a      	ands	r2, r3
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	4693      	mov	fp, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	18e3      	adds	r3, r4, r3
 800108c:	4a99      	ldr	r2, [pc, #612]	; (80012f4 <__aeabi_ddiv+0x660>)
 800108e:	4293      	cmp	r3, r2
 8001090:	dd68      	ble.n	8001164 <__aeabi_ddiv+0x4d0>
 8001092:	2301      	movs	r3, #1
 8001094:	9a02      	ldr	r2, [sp, #8]
 8001096:	4c98      	ldr	r4, [pc, #608]	; (80012f8 <__aeabi_ddiv+0x664>)
 8001098:	401a      	ands	r2, r3
 800109a:	2300      	movs	r3, #0
 800109c:	4694      	mov	ip, r2
 800109e:	4698      	mov	r8, r3
 80010a0:	2200      	movs	r2, #0
 80010a2:	e6c5      	b.n	8000e30 <__aeabi_ddiv+0x19c>
 80010a4:	2280      	movs	r2, #128	; 0x80
 80010a6:	464b      	mov	r3, r9
 80010a8:	0312      	lsls	r2, r2, #12
 80010aa:	4213      	tst	r3, r2
 80010ac:	d00a      	beq.n	80010c4 <__aeabi_ddiv+0x430>
 80010ae:	465b      	mov	r3, fp
 80010b0:	4213      	tst	r3, r2
 80010b2:	d106      	bne.n	80010c2 <__aeabi_ddiv+0x42e>
 80010b4:	431a      	orrs	r2, r3
 80010b6:	0312      	lsls	r2, r2, #12
 80010b8:	0b12      	lsrs	r2, r2, #12
 80010ba:	46ac      	mov	ip, r5
 80010bc:	4688      	mov	r8, r1
 80010be:	4c8e      	ldr	r4, [pc, #568]	; (80012f8 <__aeabi_ddiv+0x664>)
 80010c0:	e6b6      	b.n	8000e30 <__aeabi_ddiv+0x19c>
 80010c2:	464b      	mov	r3, r9
 80010c4:	431a      	orrs	r2, r3
 80010c6:	0312      	lsls	r2, r2, #12
 80010c8:	0b12      	lsrs	r2, r2, #12
 80010ca:	46bc      	mov	ip, r7
 80010cc:	4c8a      	ldr	r4, [pc, #552]	; (80012f8 <__aeabi_ddiv+0x664>)
 80010ce:	e6af      	b.n	8000e30 <__aeabi_ddiv+0x19c>
 80010d0:	0003      	movs	r3, r0
 80010d2:	465a      	mov	r2, fp
 80010d4:	3b28      	subs	r3, #40	; 0x28
 80010d6:	409a      	lsls	r2, r3
 80010d8:	2300      	movs	r3, #0
 80010da:	4691      	mov	r9, r2
 80010dc:	4698      	mov	r8, r3
 80010de:	e657      	b.n	8000d90 <__aeabi_ddiv+0xfc>
 80010e0:	4658      	mov	r0, fp
 80010e2:	f001 f86f 	bl	80021c4 <__clzsi2>
 80010e6:	3020      	adds	r0, #32
 80010e8:	e640      	b.n	8000d6c <__aeabi_ddiv+0xd8>
 80010ea:	0003      	movs	r3, r0
 80010ec:	4652      	mov	r2, sl
 80010ee:	3b28      	subs	r3, #40	; 0x28
 80010f0:	409a      	lsls	r2, r3
 80010f2:	2100      	movs	r1, #0
 80010f4:	4693      	mov	fp, r2
 80010f6:	e677      	b.n	8000de8 <__aeabi_ddiv+0x154>
 80010f8:	f001 f864 	bl	80021c4 <__clzsi2>
 80010fc:	3020      	adds	r0, #32
 80010fe:	e65f      	b.n	8000dc0 <__aeabi_ddiv+0x12c>
 8001100:	4588      	cmp	r8, r1
 8001102:	d200      	bcs.n	8001106 <__aeabi_ddiv+0x472>
 8001104:	e6c7      	b.n	8000e96 <__aeabi_ddiv+0x202>
 8001106:	464b      	mov	r3, r9
 8001108:	07de      	lsls	r6, r3, #31
 800110a:	085d      	lsrs	r5, r3, #1
 800110c:	4643      	mov	r3, r8
 800110e:	085b      	lsrs	r3, r3, #1
 8001110:	431e      	orrs	r6, r3
 8001112:	4643      	mov	r3, r8
 8001114:	07db      	lsls	r3, r3, #31
 8001116:	469a      	mov	sl, r3
 8001118:	e6c2      	b.n	8000ea0 <__aeabi_ddiv+0x20c>
 800111a:	2500      	movs	r5, #0
 800111c:	4592      	cmp	sl, r2
 800111e:	d300      	bcc.n	8001122 <__aeabi_ddiv+0x48e>
 8001120:	e733      	b.n	8000f8a <__aeabi_ddiv+0x2f6>
 8001122:	9e03      	ldr	r6, [sp, #12]
 8001124:	4659      	mov	r1, fp
 8001126:	46b4      	mov	ip, r6
 8001128:	44e2      	add	sl, ip
 800112a:	45b2      	cmp	sl, r6
 800112c:	41ad      	sbcs	r5, r5
 800112e:	426d      	negs	r5, r5
 8001130:	4445      	add	r5, r8
 8001132:	18eb      	adds	r3, r5, r3
 8001134:	3901      	subs	r1, #1
 8001136:	4598      	cmp	r8, r3
 8001138:	d207      	bcs.n	800114a <__aeabi_ddiv+0x4b6>
 800113a:	4298      	cmp	r0, r3
 800113c:	d900      	bls.n	8001140 <__aeabi_ddiv+0x4ac>
 800113e:	e07f      	b.n	8001240 <__aeabi_ddiv+0x5ac>
 8001140:	d100      	bne.n	8001144 <__aeabi_ddiv+0x4b0>
 8001142:	e0bc      	b.n	80012be <__aeabi_ddiv+0x62a>
 8001144:	1a1d      	subs	r5, r3, r0
 8001146:	468b      	mov	fp, r1
 8001148:	e71f      	b.n	8000f8a <__aeabi_ddiv+0x2f6>
 800114a:	4598      	cmp	r8, r3
 800114c:	d1fa      	bne.n	8001144 <__aeabi_ddiv+0x4b0>
 800114e:	9d03      	ldr	r5, [sp, #12]
 8001150:	4555      	cmp	r5, sl
 8001152:	d9f2      	bls.n	800113a <__aeabi_ddiv+0x4a6>
 8001154:	4643      	mov	r3, r8
 8001156:	468b      	mov	fp, r1
 8001158:	1a1d      	subs	r5, r3, r0
 800115a:	e716      	b.n	8000f8a <__aeabi_ddiv+0x2f6>
 800115c:	469b      	mov	fp, r3
 800115e:	e6ca      	b.n	8000ef6 <__aeabi_ddiv+0x262>
 8001160:	0015      	movs	r5, r2
 8001162:	e6e7      	b.n	8000f34 <__aeabi_ddiv+0x2a0>
 8001164:	465a      	mov	r2, fp
 8001166:	08c9      	lsrs	r1, r1, #3
 8001168:	0752      	lsls	r2, r2, #29
 800116a:	430a      	orrs	r2, r1
 800116c:	055b      	lsls	r3, r3, #21
 800116e:	4690      	mov	r8, r2
 8001170:	0d5c      	lsrs	r4, r3, #21
 8001172:	465a      	mov	r2, fp
 8001174:	2301      	movs	r3, #1
 8001176:	9902      	ldr	r1, [sp, #8]
 8001178:	0252      	lsls	r2, r2, #9
 800117a:	4019      	ands	r1, r3
 800117c:	0b12      	lsrs	r2, r2, #12
 800117e:	468c      	mov	ip, r1
 8001180:	e656      	b.n	8000e30 <__aeabi_ddiv+0x19c>
 8001182:	2b00      	cmp	r3, #0
 8001184:	d100      	bne.n	8001188 <__aeabi_ddiv+0x4f4>
 8001186:	e76f      	b.n	8001068 <__aeabi_ddiv+0x3d4>
 8001188:	4446      	add	r6, r8
 800118a:	1e4a      	subs	r2, r1, #1
 800118c:	45b0      	cmp	r8, r6
 800118e:	d929      	bls.n	80011e4 <__aeabi_ddiv+0x550>
 8001190:	0011      	movs	r1, r2
 8001192:	4286      	cmp	r6, r0
 8001194:	d000      	beq.n	8001198 <__aeabi_ddiv+0x504>
 8001196:	e765      	b.n	8001064 <__aeabi_ddiv+0x3d0>
 8001198:	9a03      	ldr	r2, [sp, #12]
 800119a:	4293      	cmp	r3, r2
 800119c:	d000      	beq.n	80011a0 <__aeabi_ddiv+0x50c>
 800119e:	e761      	b.n	8001064 <__aeabi_ddiv+0x3d0>
 80011a0:	e762      	b.n	8001068 <__aeabi_ddiv+0x3d4>
 80011a2:	2101      	movs	r1, #1
 80011a4:	4249      	negs	r1, r1
 80011a6:	2001      	movs	r0, #1
 80011a8:	1ac2      	subs	r2, r0, r3
 80011aa:	2a38      	cmp	r2, #56	; 0x38
 80011ac:	dd21      	ble.n	80011f2 <__aeabi_ddiv+0x55e>
 80011ae:	9b02      	ldr	r3, [sp, #8]
 80011b0:	4003      	ands	r3, r0
 80011b2:	469c      	mov	ip, r3
 80011b4:	e638      	b.n	8000e28 <__aeabi_ddiv+0x194>
 80011b6:	220f      	movs	r2, #15
 80011b8:	400a      	ands	r2, r1
 80011ba:	2a04      	cmp	r2, #4
 80011bc:	d100      	bne.n	80011c0 <__aeabi_ddiv+0x52c>
 80011be:	e75b      	b.n	8001078 <__aeabi_ddiv+0x3e4>
 80011c0:	000a      	movs	r2, r1
 80011c2:	1d11      	adds	r1, r2, #4
 80011c4:	4291      	cmp	r1, r2
 80011c6:	4192      	sbcs	r2, r2
 80011c8:	4252      	negs	r2, r2
 80011ca:	4493      	add	fp, r2
 80011cc:	e754      	b.n	8001078 <__aeabi_ddiv+0x3e4>
 80011ce:	4b47      	ldr	r3, [pc, #284]	; (80012ec <__aeabi_ddiv+0x658>)
 80011d0:	18e3      	adds	r3, r4, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	dde5      	ble.n	80011a2 <__aeabi_ddiv+0x50e>
 80011d6:	2201      	movs	r2, #1
 80011d8:	4252      	negs	r2, r2
 80011da:	e7f2      	b.n	80011c2 <__aeabi_ddiv+0x52e>
 80011dc:	001d      	movs	r5, r3
 80011de:	e6fa      	b.n	8000fd6 <__aeabi_ddiv+0x342>
 80011e0:	469a      	mov	sl, r3
 80011e2:	e71c      	b.n	800101e <__aeabi_ddiv+0x38a>
 80011e4:	42b0      	cmp	r0, r6
 80011e6:	d839      	bhi.n	800125c <__aeabi_ddiv+0x5c8>
 80011e8:	d06e      	beq.n	80012c8 <__aeabi_ddiv+0x634>
 80011ea:	0011      	movs	r1, r2
 80011ec:	e73a      	b.n	8001064 <__aeabi_ddiv+0x3d0>
 80011ee:	9302      	str	r3, [sp, #8]
 80011f0:	e73a      	b.n	8001068 <__aeabi_ddiv+0x3d4>
 80011f2:	2a1f      	cmp	r2, #31
 80011f4:	dc3c      	bgt.n	8001270 <__aeabi_ddiv+0x5dc>
 80011f6:	2320      	movs	r3, #32
 80011f8:	1a9b      	subs	r3, r3, r2
 80011fa:	000c      	movs	r4, r1
 80011fc:	4658      	mov	r0, fp
 80011fe:	4099      	lsls	r1, r3
 8001200:	4098      	lsls	r0, r3
 8001202:	1e4b      	subs	r3, r1, #1
 8001204:	4199      	sbcs	r1, r3
 8001206:	465b      	mov	r3, fp
 8001208:	40d4      	lsrs	r4, r2
 800120a:	40d3      	lsrs	r3, r2
 800120c:	4320      	orrs	r0, r4
 800120e:	4308      	orrs	r0, r1
 8001210:	001a      	movs	r2, r3
 8001212:	0743      	lsls	r3, r0, #29
 8001214:	d009      	beq.n	800122a <__aeabi_ddiv+0x596>
 8001216:	230f      	movs	r3, #15
 8001218:	4003      	ands	r3, r0
 800121a:	2b04      	cmp	r3, #4
 800121c:	d005      	beq.n	800122a <__aeabi_ddiv+0x596>
 800121e:	0001      	movs	r1, r0
 8001220:	1d08      	adds	r0, r1, #4
 8001222:	4288      	cmp	r0, r1
 8001224:	419b      	sbcs	r3, r3
 8001226:	425b      	negs	r3, r3
 8001228:	18d2      	adds	r2, r2, r3
 800122a:	0213      	lsls	r3, r2, #8
 800122c:	d53a      	bpl.n	80012a4 <__aeabi_ddiv+0x610>
 800122e:	2301      	movs	r3, #1
 8001230:	9a02      	ldr	r2, [sp, #8]
 8001232:	2401      	movs	r4, #1
 8001234:	401a      	ands	r2, r3
 8001236:	2300      	movs	r3, #0
 8001238:	4694      	mov	ip, r2
 800123a:	4698      	mov	r8, r3
 800123c:	2200      	movs	r2, #0
 800123e:	e5f7      	b.n	8000e30 <__aeabi_ddiv+0x19c>
 8001240:	2102      	movs	r1, #2
 8001242:	4249      	negs	r1, r1
 8001244:	468c      	mov	ip, r1
 8001246:	9d03      	ldr	r5, [sp, #12]
 8001248:	44e3      	add	fp, ip
 800124a:	46ac      	mov	ip, r5
 800124c:	44e2      	add	sl, ip
 800124e:	45aa      	cmp	sl, r5
 8001250:	41ad      	sbcs	r5, r5
 8001252:	426d      	negs	r5, r5
 8001254:	4445      	add	r5, r8
 8001256:	18ed      	adds	r5, r5, r3
 8001258:	1a2d      	subs	r5, r5, r0
 800125a:	e696      	b.n	8000f8a <__aeabi_ddiv+0x2f6>
 800125c:	1e8a      	subs	r2, r1, #2
 800125e:	9903      	ldr	r1, [sp, #12]
 8001260:	004d      	lsls	r5, r1, #1
 8001262:	428d      	cmp	r5, r1
 8001264:	4189      	sbcs	r1, r1
 8001266:	4249      	negs	r1, r1
 8001268:	4441      	add	r1, r8
 800126a:	1876      	adds	r6, r6, r1
 800126c:	9503      	str	r5, [sp, #12]
 800126e:	e78f      	b.n	8001190 <__aeabi_ddiv+0x4fc>
 8001270:	201f      	movs	r0, #31
 8001272:	4240      	negs	r0, r0
 8001274:	1ac3      	subs	r3, r0, r3
 8001276:	4658      	mov	r0, fp
 8001278:	40d8      	lsrs	r0, r3
 800127a:	0003      	movs	r3, r0
 800127c:	2a20      	cmp	r2, #32
 800127e:	d028      	beq.n	80012d2 <__aeabi_ddiv+0x63e>
 8001280:	2040      	movs	r0, #64	; 0x40
 8001282:	465d      	mov	r5, fp
 8001284:	1a82      	subs	r2, r0, r2
 8001286:	4095      	lsls	r5, r2
 8001288:	4329      	orrs	r1, r5
 800128a:	1e4a      	subs	r2, r1, #1
 800128c:	4191      	sbcs	r1, r2
 800128e:	4319      	orrs	r1, r3
 8001290:	2307      	movs	r3, #7
 8001292:	2200      	movs	r2, #0
 8001294:	400b      	ands	r3, r1
 8001296:	d009      	beq.n	80012ac <__aeabi_ddiv+0x618>
 8001298:	230f      	movs	r3, #15
 800129a:	2200      	movs	r2, #0
 800129c:	400b      	ands	r3, r1
 800129e:	0008      	movs	r0, r1
 80012a0:	2b04      	cmp	r3, #4
 80012a2:	d1bd      	bne.n	8001220 <__aeabi_ddiv+0x58c>
 80012a4:	0001      	movs	r1, r0
 80012a6:	0753      	lsls	r3, r2, #29
 80012a8:	0252      	lsls	r2, r2, #9
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	08c9      	lsrs	r1, r1, #3
 80012ae:	4319      	orrs	r1, r3
 80012b0:	2301      	movs	r3, #1
 80012b2:	4688      	mov	r8, r1
 80012b4:	9902      	ldr	r1, [sp, #8]
 80012b6:	2400      	movs	r4, #0
 80012b8:	4019      	ands	r1, r3
 80012ba:	468c      	mov	ip, r1
 80012bc:	e5b8      	b.n	8000e30 <__aeabi_ddiv+0x19c>
 80012be:	4552      	cmp	r2, sl
 80012c0:	d8be      	bhi.n	8001240 <__aeabi_ddiv+0x5ac>
 80012c2:	468b      	mov	fp, r1
 80012c4:	2500      	movs	r5, #0
 80012c6:	e660      	b.n	8000f8a <__aeabi_ddiv+0x2f6>
 80012c8:	9d03      	ldr	r5, [sp, #12]
 80012ca:	429d      	cmp	r5, r3
 80012cc:	d3c6      	bcc.n	800125c <__aeabi_ddiv+0x5c8>
 80012ce:	0011      	movs	r1, r2
 80012d0:	e762      	b.n	8001198 <__aeabi_ddiv+0x504>
 80012d2:	2500      	movs	r5, #0
 80012d4:	e7d8      	b.n	8001288 <__aeabi_ddiv+0x5f4>
 80012d6:	2280      	movs	r2, #128	; 0x80
 80012d8:	465b      	mov	r3, fp
 80012da:	0312      	lsls	r2, r2, #12
 80012dc:	431a      	orrs	r2, r3
 80012de:	9b01      	ldr	r3, [sp, #4]
 80012e0:	0312      	lsls	r2, r2, #12
 80012e2:	0b12      	lsrs	r2, r2, #12
 80012e4:	469c      	mov	ip, r3
 80012e6:	4688      	mov	r8, r1
 80012e8:	4c03      	ldr	r4, [pc, #12]	; (80012f8 <__aeabi_ddiv+0x664>)
 80012ea:	e5a1      	b.n	8000e30 <__aeabi_ddiv+0x19c>
 80012ec:	000003ff 	.word	0x000003ff
 80012f0:	feffffff 	.word	0xfeffffff
 80012f4:	000007fe 	.word	0x000007fe
 80012f8:	000007ff 	.word	0x000007ff

080012fc <__eqdf2>:
 80012fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fe:	464f      	mov	r7, r9
 8001300:	4646      	mov	r6, r8
 8001302:	46d6      	mov	lr, sl
 8001304:	005c      	lsls	r4, r3, #1
 8001306:	b5c0      	push	{r6, r7, lr}
 8001308:	031f      	lsls	r7, r3, #12
 800130a:	0fdb      	lsrs	r3, r3, #31
 800130c:	469a      	mov	sl, r3
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <__eqdf2+0x70>)
 8001310:	030e      	lsls	r6, r1, #12
 8001312:	004d      	lsls	r5, r1, #1
 8001314:	4684      	mov	ip, r0
 8001316:	4680      	mov	r8, r0
 8001318:	0b36      	lsrs	r6, r6, #12
 800131a:	0d6d      	lsrs	r5, r5, #21
 800131c:	0fc9      	lsrs	r1, r1, #31
 800131e:	4691      	mov	r9, r2
 8001320:	0b3f      	lsrs	r7, r7, #12
 8001322:	0d64      	lsrs	r4, r4, #21
 8001324:	2001      	movs	r0, #1
 8001326:	429d      	cmp	r5, r3
 8001328:	d008      	beq.n	800133c <__eqdf2+0x40>
 800132a:	429c      	cmp	r4, r3
 800132c:	d001      	beq.n	8001332 <__eqdf2+0x36>
 800132e:	42a5      	cmp	r5, r4
 8001330:	d00b      	beq.n	800134a <__eqdf2+0x4e>
 8001332:	bc1c      	pop	{r2, r3, r4}
 8001334:	4690      	mov	r8, r2
 8001336:	4699      	mov	r9, r3
 8001338:	46a2      	mov	sl, r4
 800133a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800133c:	4663      	mov	r3, ip
 800133e:	4333      	orrs	r3, r6
 8001340:	d1f7      	bne.n	8001332 <__eqdf2+0x36>
 8001342:	42ac      	cmp	r4, r5
 8001344:	d1f5      	bne.n	8001332 <__eqdf2+0x36>
 8001346:	433a      	orrs	r2, r7
 8001348:	d1f3      	bne.n	8001332 <__eqdf2+0x36>
 800134a:	2001      	movs	r0, #1
 800134c:	42be      	cmp	r6, r7
 800134e:	d1f0      	bne.n	8001332 <__eqdf2+0x36>
 8001350:	45c8      	cmp	r8, r9
 8001352:	d1ee      	bne.n	8001332 <__eqdf2+0x36>
 8001354:	4551      	cmp	r1, sl
 8001356:	d007      	beq.n	8001368 <__eqdf2+0x6c>
 8001358:	2d00      	cmp	r5, #0
 800135a:	d1ea      	bne.n	8001332 <__eqdf2+0x36>
 800135c:	4663      	mov	r3, ip
 800135e:	431e      	orrs	r6, r3
 8001360:	0030      	movs	r0, r6
 8001362:	1e46      	subs	r6, r0, #1
 8001364:	41b0      	sbcs	r0, r6
 8001366:	e7e4      	b.n	8001332 <__eqdf2+0x36>
 8001368:	2000      	movs	r0, #0
 800136a:	e7e2      	b.n	8001332 <__eqdf2+0x36>
 800136c:	000007ff 	.word	0x000007ff

08001370 <__gedf2>:
 8001370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001372:	4645      	mov	r5, r8
 8001374:	46de      	mov	lr, fp
 8001376:	4657      	mov	r7, sl
 8001378:	464e      	mov	r6, r9
 800137a:	b5e0      	push	{r5, r6, r7, lr}
 800137c:	031f      	lsls	r7, r3, #12
 800137e:	0b3d      	lsrs	r5, r7, #12
 8001380:	4f2c      	ldr	r7, [pc, #176]	; (8001434 <__gedf2+0xc4>)
 8001382:	030e      	lsls	r6, r1, #12
 8001384:	004c      	lsls	r4, r1, #1
 8001386:	46ab      	mov	fp, r5
 8001388:	005d      	lsls	r5, r3, #1
 800138a:	4684      	mov	ip, r0
 800138c:	0b36      	lsrs	r6, r6, #12
 800138e:	0d64      	lsrs	r4, r4, #21
 8001390:	0fc9      	lsrs	r1, r1, #31
 8001392:	4690      	mov	r8, r2
 8001394:	0d6d      	lsrs	r5, r5, #21
 8001396:	0fdb      	lsrs	r3, r3, #31
 8001398:	42bc      	cmp	r4, r7
 800139a:	d02a      	beq.n	80013f2 <__gedf2+0x82>
 800139c:	4f25      	ldr	r7, [pc, #148]	; (8001434 <__gedf2+0xc4>)
 800139e:	42bd      	cmp	r5, r7
 80013a0:	d02d      	beq.n	80013fe <__gedf2+0x8e>
 80013a2:	2c00      	cmp	r4, #0
 80013a4:	d10f      	bne.n	80013c6 <__gedf2+0x56>
 80013a6:	4330      	orrs	r0, r6
 80013a8:	0007      	movs	r7, r0
 80013aa:	4681      	mov	r9, r0
 80013ac:	4278      	negs	r0, r7
 80013ae:	4178      	adcs	r0, r7
 80013b0:	b2c0      	uxtb	r0, r0
 80013b2:	2d00      	cmp	r5, #0
 80013b4:	d117      	bne.n	80013e6 <__gedf2+0x76>
 80013b6:	465f      	mov	r7, fp
 80013b8:	433a      	orrs	r2, r7
 80013ba:	d114      	bne.n	80013e6 <__gedf2+0x76>
 80013bc:	464b      	mov	r3, r9
 80013be:	2000      	movs	r0, #0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d00a      	beq.n	80013da <__gedf2+0x6a>
 80013c4:	e006      	b.n	80013d4 <__gedf2+0x64>
 80013c6:	2d00      	cmp	r5, #0
 80013c8:	d102      	bne.n	80013d0 <__gedf2+0x60>
 80013ca:	4658      	mov	r0, fp
 80013cc:	4302      	orrs	r2, r0
 80013ce:	d001      	beq.n	80013d4 <__gedf2+0x64>
 80013d0:	4299      	cmp	r1, r3
 80013d2:	d018      	beq.n	8001406 <__gedf2+0x96>
 80013d4:	4248      	negs	r0, r1
 80013d6:	2101      	movs	r1, #1
 80013d8:	4308      	orrs	r0, r1
 80013da:	bc3c      	pop	{r2, r3, r4, r5}
 80013dc:	4690      	mov	r8, r2
 80013de:	4699      	mov	r9, r3
 80013e0:	46a2      	mov	sl, r4
 80013e2:	46ab      	mov	fp, r5
 80013e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e6:	2800      	cmp	r0, #0
 80013e8:	d0f2      	beq.n	80013d0 <__gedf2+0x60>
 80013ea:	2001      	movs	r0, #1
 80013ec:	3b01      	subs	r3, #1
 80013ee:	4318      	orrs	r0, r3
 80013f0:	e7f3      	b.n	80013da <__gedf2+0x6a>
 80013f2:	0037      	movs	r7, r6
 80013f4:	4307      	orrs	r7, r0
 80013f6:	d0d1      	beq.n	800139c <__gedf2+0x2c>
 80013f8:	2002      	movs	r0, #2
 80013fa:	4240      	negs	r0, r0
 80013fc:	e7ed      	b.n	80013da <__gedf2+0x6a>
 80013fe:	465f      	mov	r7, fp
 8001400:	4317      	orrs	r7, r2
 8001402:	d0ce      	beq.n	80013a2 <__gedf2+0x32>
 8001404:	e7f8      	b.n	80013f8 <__gedf2+0x88>
 8001406:	42ac      	cmp	r4, r5
 8001408:	dce4      	bgt.n	80013d4 <__gedf2+0x64>
 800140a:	da03      	bge.n	8001414 <__gedf2+0xa4>
 800140c:	1e48      	subs	r0, r1, #1
 800140e:	2101      	movs	r1, #1
 8001410:	4308      	orrs	r0, r1
 8001412:	e7e2      	b.n	80013da <__gedf2+0x6a>
 8001414:	455e      	cmp	r6, fp
 8001416:	d8dd      	bhi.n	80013d4 <__gedf2+0x64>
 8001418:	d006      	beq.n	8001428 <__gedf2+0xb8>
 800141a:	2000      	movs	r0, #0
 800141c:	455e      	cmp	r6, fp
 800141e:	d2dc      	bcs.n	80013da <__gedf2+0x6a>
 8001420:	2301      	movs	r3, #1
 8001422:	1e48      	subs	r0, r1, #1
 8001424:	4318      	orrs	r0, r3
 8001426:	e7d8      	b.n	80013da <__gedf2+0x6a>
 8001428:	45c4      	cmp	ip, r8
 800142a:	d8d3      	bhi.n	80013d4 <__gedf2+0x64>
 800142c:	2000      	movs	r0, #0
 800142e:	45c4      	cmp	ip, r8
 8001430:	d3f6      	bcc.n	8001420 <__gedf2+0xb0>
 8001432:	e7d2      	b.n	80013da <__gedf2+0x6a>
 8001434:	000007ff 	.word	0x000007ff

08001438 <__ledf2>:
 8001438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143a:	464e      	mov	r6, r9
 800143c:	4645      	mov	r5, r8
 800143e:	46de      	mov	lr, fp
 8001440:	4657      	mov	r7, sl
 8001442:	005c      	lsls	r4, r3, #1
 8001444:	b5e0      	push	{r5, r6, r7, lr}
 8001446:	031f      	lsls	r7, r3, #12
 8001448:	0fdb      	lsrs	r3, r3, #31
 800144a:	4699      	mov	r9, r3
 800144c:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <__ledf2+0xc0>)
 800144e:	030e      	lsls	r6, r1, #12
 8001450:	004d      	lsls	r5, r1, #1
 8001452:	0fc9      	lsrs	r1, r1, #31
 8001454:	4684      	mov	ip, r0
 8001456:	0b36      	lsrs	r6, r6, #12
 8001458:	0d6d      	lsrs	r5, r5, #21
 800145a:	468b      	mov	fp, r1
 800145c:	4690      	mov	r8, r2
 800145e:	0b3f      	lsrs	r7, r7, #12
 8001460:	0d64      	lsrs	r4, r4, #21
 8001462:	429d      	cmp	r5, r3
 8001464:	d020      	beq.n	80014a8 <__ledf2+0x70>
 8001466:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <__ledf2+0xc0>)
 8001468:	429c      	cmp	r4, r3
 800146a:	d022      	beq.n	80014b2 <__ledf2+0x7a>
 800146c:	2d00      	cmp	r5, #0
 800146e:	d112      	bne.n	8001496 <__ledf2+0x5e>
 8001470:	4330      	orrs	r0, r6
 8001472:	4243      	negs	r3, r0
 8001474:	4143      	adcs	r3, r0
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2c00      	cmp	r4, #0
 800147a:	d01f      	beq.n	80014bc <__ledf2+0x84>
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00c      	beq.n	800149a <__ledf2+0x62>
 8001480:	464b      	mov	r3, r9
 8001482:	2001      	movs	r0, #1
 8001484:	3b01      	subs	r3, #1
 8001486:	4303      	orrs	r3, r0
 8001488:	0018      	movs	r0, r3
 800148a:	bc3c      	pop	{r2, r3, r4, r5}
 800148c:	4690      	mov	r8, r2
 800148e:	4699      	mov	r9, r3
 8001490:	46a2      	mov	sl, r4
 8001492:	46ab      	mov	fp, r5
 8001494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001496:	2c00      	cmp	r4, #0
 8001498:	d016      	beq.n	80014c8 <__ledf2+0x90>
 800149a:	45cb      	cmp	fp, r9
 800149c:	d017      	beq.n	80014ce <__ledf2+0x96>
 800149e:	465b      	mov	r3, fp
 80014a0:	4259      	negs	r1, r3
 80014a2:	2301      	movs	r3, #1
 80014a4:	430b      	orrs	r3, r1
 80014a6:	e7ef      	b.n	8001488 <__ledf2+0x50>
 80014a8:	0031      	movs	r1, r6
 80014aa:	2302      	movs	r3, #2
 80014ac:	4301      	orrs	r1, r0
 80014ae:	d1eb      	bne.n	8001488 <__ledf2+0x50>
 80014b0:	e7d9      	b.n	8001466 <__ledf2+0x2e>
 80014b2:	0039      	movs	r1, r7
 80014b4:	2302      	movs	r3, #2
 80014b6:	4311      	orrs	r1, r2
 80014b8:	d1e6      	bne.n	8001488 <__ledf2+0x50>
 80014ba:	e7d7      	b.n	800146c <__ledf2+0x34>
 80014bc:	433a      	orrs	r2, r7
 80014be:	d1dd      	bne.n	800147c <__ledf2+0x44>
 80014c0:	2300      	movs	r3, #0
 80014c2:	2800      	cmp	r0, #0
 80014c4:	d0e0      	beq.n	8001488 <__ledf2+0x50>
 80014c6:	e7ea      	b.n	800149e <__ledf2+0x66>
 80014c8:	433a      	orrs	r2, r7
 80014ca:	d1e6      	bne.n	800149a <__ledf2+0x62>
 80014cc:	e7e7      	b.n	800149e <__ledf2+0x66>
 80014ce:	42a5      	cmp	r5, r4
 80014d0:	dce5      	bgt.n	800149e <__ledf2+0x66>
 80014d2:	db05      	blt.n	80014e0 <__ledf2+0xa8>
 80014d4:	42be      	cmp	r6, r7
 80014d6:	d8e2      	bhi.n	800149e <__ledf2+0x66>
 80014d8:	d007      	beq.n	80014ea <__ledf2+0xb2>
 80014da:	2300      	movs	r3, #0
 80014dc:	42be      	cmp	r6, r7
 80014de:	d2d3      	bcs.n	8001488 <__ledf2+0x50>
 80014e0:	4659      	mov	r1, fp
 80014e2:	2301      	movs	r3, #1
 80014e4:	3901      	subs	r1, #1
 80014e6:	430b      	orrs	r3, r1
 80014e8:	e7ce      	b.n	8001488 <__ledf2+0x50>
 80014ea:	45c4      	cmp	ip, r8
 80014ec:	d8d7      	bhi.n	800149e <__ledf2+0x66>
 80014ee:	2300      	movs	r3, #0
 80014f0:	45c4      	cmp	ip, r8
 80014f2:	d3f5      	bcc.n	80014e0 <__ledf2+0xa8>
 80014f4:	e7c8      	b.n	8001488 <__ledf2+0x50>
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	000007ff 	.word	0x000007ff

080014fc <__aeabi_dmul>:
 80014fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fe:	4657      	mov	r7, sl
 8001500:	4645      	mov	r5, r8
 8001502:	46de      	mov	lr, fp
 8001504:	464e      	mov	r6, r9
 8001506:	b5e0      	push	{r5, r6, r7, lr}
 8001508:	030c      	lsls	r4, r1, #12
 800150a:	4698      	mov	r8, r3
 800150c:	004e      	lsls	r6, r1, #1
 800150e:	0b23      	lsrs	r3, r4, #12
 8001510:	b087      	sub	sp, #28
 8001512:	0007      	movs	r7, r0
 8001514:	4692      	mov	sl, r2
 8001516:	469b      	mov	fp, r3
 8001518:	0d76      	lsrs	r6, r6, #21
 800151a:	0fcd      	lsrs	r5, r1, #31
 800151c:	2e00      	cmp	r6, #0
 800151e:	d06b      	beq.n	80015f8 <__aeabi_dmul+0xfc>
 8001520:	4b6d      	ldr	r3, [pc, #436]	; (80016d8 <__aeabi_dmul+0x1dc>)
 8001522:	429e      	cmp	r6, r3
 8001524:	d035      	beq.n	8001592 <__aeabi_dmul+0x96>
 8001526:	2480      	movs	r4, #128	; 0x80
 8001528:	465b      	mov	r3, fp
 800152a:	0f42      	lsrs	r2, r0, #29
 800152c:	0424      	lsls	r4, r4, #16
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4314      	orrs	r4, r2
 8001532:	431c      	orrs	r4, r3
 8001534:	00c3      	lsls	r3, r0, #3
 8001536:	4699      	mov	r9, r3
 8001538:	4b68      	ldr	r3, [pc, #416]	; (80016dc <__aeabi_dmul+0x1e0>)
 800153a:	46a3      	mov	fp, r4
 800153c:	469c      	mov	ip, r3
 800153e:	2300      	movs	r3, #0
 8001540:	2700      	movs	r7, #0
 8001542:	4466      	add	r6, ip
 8001544:	9302      	str	r3, [sp, #8]
 8001546:	4643      	mov	r3, r8
 8001548:	031c      	lsls	r4, r3, #12
 800154a:	005a      	lsls	r2, r3, #1
 800154c:	0fdb      	lsrs	r3, r3, #31
 800154e:	4650      	mov	r0, sl
 8001550:	0b24      	lsrs	r4, r4, #12
 8001552:	0d52      	lsrs	r2, r2, #21
 8001554:	4698      	mov	r8, r3
 8001556:	d100      	bne.n	800155a <__aeabi_dmul+0x5e>
 8001558:	e076      	b.n	8001648 <__aeabi_dmul+0x14c>
 800155a:	4b5f      	ldr	r3, [pc, #380]	; (80016d8 <__aeabi_dmul+0x1dc>)
 800155c:	429a      	cmp	r2, r3
 800155e:	d06d      	beq.n	800163c <__aeabi_dmul+0x140>
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	0f41      	lsrs	r1, r0, #29
 8001564:	041b      	lsls	r3, r3, #16
 8001566:	430b      	orrs	r3, r1
 8001568:	495c      	ldr	r1, [pc, #368]	; (80016dc <__aeabi_dmul+0x1e0>)
 800156a:	00e4      	lsls	r4, r4, #3
 800156c:	468c      	mov	ip, r1
 800156e:	431c      	orrs	r4, r3
 8001570:	00c3      	lsls	r3, r0, #3
 8001572:	2000      	movs	r0, #0
 8001574:	4462      	add	r2, ip
 8001576:	4641      	mov	r1, r8
 8001578:	18b6      	adds	r6, r6, r2
 800157a:	4069      	eors	r1, r5
 800157c:	1c72      	adds	r2, r6, #1
 800157e:	9101      	str	r1, [sp, #4]
 8001580:	4694      	mov	ip, r2
 8001582:	4307      	orrs	r7, r0
 8001584:	2f0f      	cmp	r7, #15
 8001586:	d900      	bls.n	800158a <__aeabi_dmul+0x8e>
 8001588:	e0b0      	b.n	80016ec <__aeabi_dmul+0x1f0>
 800158a:	4a55      	ldr	r2, [pc, #340]	; (80016e0 <__aeabi_dmul+0x1e4>)
 800158c:	00bf      	lsls	r7, r7, #2
 800158e:	59d2      	ldr	r2, [r2, r7]
 8001590:	4697      	mov	pc, r2
 8001592:	465b      	mov	r3, fp
 8001594:	4303      	orrs	r3, r0
 8001596:	4699      	mov	r9, r3
 8001598:	d000      	beq.n	800159c <__aeabi_dmul+0xa0>
 800159a:	e087      	b.n	80016ac <__aeabi_dmul+0x1b0>
 800159c:	2300      	movs	r3, #0
 800159e:	469b      	mov	fp, r3
 80015a0:	3302      	adds	r3, #2
 80015a2:	2708      	movs	r7, #8
 80015a4:	9302      	str	r3, [sp, #8]
 80015a6:	e7ce      	b.n	8001546 <__aeabi_dmul+0x4a>
 80015a8:	4642      	mov	r2, r8
 80015aa:	9201      	str	r2, [sp, #4]
 80015ac:	2802      	cmp	r0, #2
 80015ae:	d067      	beq.n	8001680 <__aeabi_dmul+0x184>
 80015b0:	2803      	cmp	r0, #3
 80015b2:	d100      	bne.n	80015b6 <__aeabi_dmul+0xba>
 80015b4:	e20e      	b.n	80019d4 <__aeabi_dmul+0x4d8>
 80015b6:	2801      	cmp	r0, #1
 80015b8:	d000      	beq.n	80015bc <__aeabi_dmul+0xc0>
 80015ba:	e162      	b.n	8001882 <__aeabi_dmul+0x386>
 80015bc:	2300      	movs	r3, #0
 80015be:	2400      	movs	r4, #0
 80015c0:	2200      	movs	r2, #0
 80015c2:	4699      	mov	r9, r3
 80015c4:	9901      	ldr	r1, [sp, #4]
 80015c6:	4001      	ands	r1, r0
 80015c8:	b2cd      	uxtb	r5, r1
 80015ca:	2100      	movs	r1, #0
 80015cc:	0312      	lsls	r2, r2, #12
 80015ce:	0d0b      	lsrs	r3, r1, #20
 80015d0:	0b12      	lsrs	r2, r2, #12
 80015d2:	051b      	lsls	r3, r3, #20
 80015d4:	4313      	orrs	r3, r2
 80015d6:	4a43      	ldr	r2, [pc, #268]	; (80016e4 <__aeabi_dmul+0x1e8>)
 80015d8:	0524      	lsls	r4, r4, #20
 80015da:	4013      	ands	r3, r2
 80015dc:	431c      	orrs	r4, r3
 80015de:	0064      	lsls	r4, r4, #1
 80015e0:	07ed      	lsls	r5, r5, #31
 80015e2:	0864      	lsrs	r4, r4, #1
 80015e4:	432c      	orrs	r4, r5
 80015e6:	4648      	mov	r0, r9
 80015e8:	0021      	movs	r1, r4
 80015ea:	b007      	add	sp, #28
 80015ec:	bc3c      	pop	{r2, r3, r4, r5}
 80015ee:	4690      	mov	r8, r2
 80015f0:	4699      	mov	r9, r3
 80015f2:	46a2      	mov	sl, r4
 80015f4:	46ab      	mov	fp, r5
 80015f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015f8:	4303      	orrs	r3, r0
 80015fa:	4699      	mov	r9, r3
 80015fc:	d04f      	beq.n	800169e <__aeabi_dmul+0x1a2>
 80015fe:	465b      	mov	r3, fp
 8001600:	2b00      	cmp	r3, #0
 8001602:	d100      	bne.n	8001606 <__aeabi_dmul+0x10a>
 8001604:	e189      	b.n	800191a <__aeabi_dmul+0x41e>
 8001606:	4658      	mov	r0, fp
 8001608:	f000 fddc 	bl	80021c4 <__clzsi2>
 800160c:	0003      	movs	r3, r0
 800160e:	3b0b      	subs	r3, #11
 8001610:	2b1c      	cmp	r3, #28
 8001612:	dd00      	ble.n	8001616 <__aeabi_dmul+0x11a>
 8001614:	e17a      	b.n	800190c <__aeabi_dmul+0x410>
 8001616:	221d      	movs	r2, #29
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	003a      	movs	r2, r7
 800161c:	0001      	movs	r1, r0
 800161e:	465c      	mov	r4, fp
 8001620:	40da      	lsrs	r2, r3
 8001622:	3908      	subs	r1, #8
 8001624:	408c      	lsls	r4, r1
 8001626:	0013      	movs	r3, r2
 8001628:	408f      	lsls	r7, r1
 800162a:	4323      	orrs	r3, r4
 800162c:	469b      	mov	fp, r3
 800162e:	46b9      	mov	r9, r7
 8001630:	2300      	movs	r3, #0
 8001632:	4e2d      	ldr	r6, [pc, #180]	; (80016e8 <__aeabi_dmul+0x1ec>)
 8001634:	2700      	movs	r7, #0
 8001636:	1a36      	subs	r6, r6, r0
 8001638:	9302      	str	r3, [sp, #8]
 800163a:	e784      	b.n	8001546 <__aeabi_dmul+0x4a>
 800163c:	4653      	mov	r3, sl
 800163e:	4323      	orrs	r3, r4
 8001640:	d12a      	bne.n	8001698 <__aeabi_dmul+0x19c>
 8001642:	2400      	movs	r4, #0
 8001644:	2002      	movs	r0, #2
 8001646:	e796      	b.n	8001576 <__aeabi_dmul+0x7a>
 8001648:	4653      	mov	r3, sl
 800164a:	4323      	orrs	r3, r4
 800164c:	d020      	beq.n	8001690 <__aeabi_dmul+0x194>
 800164e:	2c00      	cmp	r4, #0
 8001650:	d100      	bne.n	8001654 <__aeabi_dmul+0x158>
 8001652:	e157      	b.n	8001904 <__aeabi_dmul+0x408>
 8001654:	0020      	movs	r0, r4
 8001656:	f000 fdb5 	bl	80021c4 <__clzsi2>
 800165a:	0003      	movs	r3, r0
 800165c:	3b0b      	subs	r3, #11
 800165e:	2b1c      	cmp	r3, #28
 8001660:	dd00      	ble.n	8001664 <__aeabi_dmul+0x168>
 8001662:	e149      	b.n	80018f8 <__aeabi_dmul+0x3fc>
 8001664:	211d      	movs	r1, #29
 8001666:	1acb      	subs	r3, r1, r3
 8001668:	4651      	mov	r1, sl
 800166a:	0002      	movs	r2, r0
 800166c:	40d9      	lsrs	r1, r3
 800166e:	4653      	mov	r3, sl
 8001670:	3a08      	subs	r2, #8
 8001672:	4094      	lsls	r4, r2
 8001674:	4093      	lsls	r3, r2
 8001676:	430c      	orrs	r4, r1
 8001678:	4a1b      	ldr	r2, [pc, #108]	; (80016e8 <__aeabi_dmul+0x1ec>)
 800167a:	1a12      	subs	r2, r2, r0
 800167c:	2000      	movs	r0, #0
 800167e:	e77a      	b.n	8001576 <__aeabi_dmul+0x7a>
 8001680:	2501      	movs	r5, #1
 8001682:	9b01      	ldr	r3, [sp, #4]
 8001684:	4c14      	ldr	r4, [pc, #80]	; (80016d8 <__aeabi_dmul+0x1dc>)
 8001686:	401d      	ands	r5, r3
 8001688:	2300      	movs	r3, #0
 800168a:	2200      	movs	r2, #0
 800168c:	4699      	mov	r9, r3
 800168e:	e79c      	b.n	80015ca <__aeabi_dmul+0xce>
 8001690:	2400      	movs	r4, #0
 8001692:	2200      	movs	r2, #0
 8001694:	2001      	movs	r0, #1
 8001696:	e76e      	b.n	8001576 <__aeabi_dmul+0x7a>
 8001698:	4653      	mov	r3, sl
 800169a:	2003      	movs	r0, #3
 800169c:	e76b      	b.n	8001576 <__aeabi_dmul+0x7a>
 800169e:	2300      	movs	r3, #0
 80016a0:	469b      	mov	fp, r3
 80016a2:	3301      	adds	r3, #1
 80016a4:	2704      	movs	r7, #4
 80016a6:	2600      	movs	r6, #0
 80016a8:	9302      	str	r3, [sp, #8]
 80016aa:	e74c      	b.n	8001546 <__aeabi_dmul+0x4a>
 80016ac:	2303      	movs	r3, #3
 80016ae:	4681      	mov	r9, r0
 80016b0:	270c      	movs	r7, #12
 80016b2:	9302      	str	r3, [sp, #8]
 80016b4:	e747      	b.n	8001546 <__aeabi_dmul+0x4a>
 80016b6:	2280      	movs	r2, #128	; 0x80
 80016b8:	2300      	movs	r3, #0
 80016ba:	2500      	movs	r5, #0
 80016bc:	0312      	lsls	r2, r2, #12
 80016be:	4699      	mov	r9, r3
 80016c0:	4c05      	ldr	r4, [pc, #20]	; (80016d8 <__aeabi_dmul+0x1dc>)
 80016c2:	e782      	b.n	80015ca <__aeabi_dmul+0xce>
 80016c4:	465c      	mov	r4, fp
 80016c6:	464b      	mov	r3, r9
 80016c8:	9802      	ldr	r0, [sp, #8]
 80016ca:	e76f      	b.n	80015ac <__aeabi_dmul+0xb0>
 80016cc:	465c      	mov	r4, fp
 80016ce:	464b      	mov	r3, r9
 80016d0:	9501      	str	r5, [sp, #4]
 80016d2:	9802      	ldr	r0, [sp, #8]
 80016d4:	e76a      	b.n	80015ac <__aeabi_dmul+0xb0>
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	000007ff 	.word	0x000007ff
 80016dc:	fffffc01 	.word	0xfffffc01
 80016e0:	08009728 	.word	0x08009728
 80016e4:	800fffff 	.word	0x800fffff
 80016e8:	fffffc0d 	.word	0xfffffc0d
 80016ec:	464a      	mov	r2, r9
 80016ee:	4649      	mov	r1, r9
 80016f0:	0c17      	lsrs	r7, r2, #16
 80016f2:	0c1a      	lsrs	r2, r3, #16
 80016f4:	041b      	lsls	r3, r3, #16
 80016f6:	0c1b      	lsrs	r3, r3, #16
 80016f8:	0408      	lsls	r0, r1, #16
 80016fa:	0019      	movs	r1, r3
 80016fc:	0c00      	lsrs	r0, r0, #16
 80016fe:	4341      	muls	r1, r0
 8001700:	0015      	movs	r5, r2
 8001702:	4688      	mov	r8, r1
 8001704:	0019      	movs	r1, r3
 8001706:	437d      	muls	r5, r7
 8001708:	4379      	muls	r1, r7
 800170a:	9503      	str	r5, [sp, #12]
 800170c:	4689      	mov	r9, r1
 800170e:	0029      	movs	r1, r5
 8001710:	0015      	movs	r5, r2
 8001712:	4345      	muls	r5, r0
 8001714:	444d      	add	r5, r9
 8001716:	9502      	str	r5, [sp, #8]
 8001718:	4645      	mov	r5, r8
 800171a:	0c2d      	lsrs	r5, r5, #16
 800171c:	46aa      	mov	sl, r5
 800171e:	9d02      	ldr	r5, [sp, #8]
 8001720:	4455      	add	r5, sl
 8001722:	45a9      	cmp	r9, r5
 8001724:	d906      	bls.n	8001734 <__aeabi_dmul+0x238>
 8001726:	468a      	mov	sl, r1
 8001728:	2180      	movs	r1, #128	; 0x80
 800172a:	0249      	lsls	r1, r1, #9
 800172c:	4689      	mov	r9, r1
 800172e:	44ca      	add	sl, r9
 8001730:	4651      	mov	r1, sl
 8001732:	9103      	str	r1, [sp, #12]
 8001734:	0c29      	lsrs	r1, r5, #16
 8001736:	9104      	str	r1, [sp, #16]
 8001738:	4641      	mov	r1, r8
 800173a:	0409      	lsls	r1, r1, #16
 800173c:	042d      	lsls	r5, r5, #16
 800173e:	0c09      	lsrs	r1, r1, #16
 8001740:	4688      	mov	r8, r1
 8001742:	0029      	movs	r1, r5
 8001744:	0c25      	lsrs	r5, r4, #16
 8001746:	0424      	lsls	r4, r4, #16
 8001748:	4441      	add	r1, r8
 800174a:	0c24      	lsrs	r4, r4, #16
 800174c:	9105      	str	r1, [sp, #20]
 800174e:	0021      	movs	r1, r4
 8001750:	4341      	muls	r1, r0
 8001752:	4688      	mov	r8, r1
 8001754:	0021      	movs	r1, r4
 8001756:	4379      	muls	r1, r7
 8001758:	468a      	mov	sl, r1
 800175a:	4368      	muls	r0, r5
 800175c:	4641      	mov	r1, r8
 800175e:	4450      	add	r0, sl
 8001760:	4681      	mov	r9, r0
 8001762:	0c08      	lsrs	r0, r1, #16
 8001764:	4448      	add	r0, r9
 8001766:	436f      	muls	r7, r5
 8001768:	4582      	cmp	sl, r0
 800176a:	d903      	bls.n	8001774 <__aeabi_dmul+0x278>
 800176c:	2180      	movs	r1, #128	; 0x80
 800176e:	0249      	lsls	r1, r1, #9
 8001770:	4689      	mov	r9, r1
 8001772:	444f      	add	r7, r9
 8001774:	0c01      	lsrs	r1, r0, #16
 8001776:	4689      	mov	r9, r1
 8001778:	0039      	movs	r1, r7
 800177a:	4449      	add	r1, r9
 800177c:	9102      	str	r1, [sp, #8]
 800177e:	4641      	mov	r1, r8
 8001780:	040f      	lsls	r7, r1, #16
 8001782:	9904      	ldr	r1, [sp, #16]
 8001784:	0c3f      	lsrs	r7, r7, #16
 8001786:	4688      	mov	r8, r1
 8001788:	0400      	lsls	r0, r0, #16
 800178a:	19c0      	adds	r0, r0, r7
 800178c:	4480      	add	r8, r0
 800178e:	4641      	mov	r1, r8
 8001790:	9104      	str	r1, [sp, #16]
 8001792:	4659      	mov	r1, fp
 8001794:	0c0f      	lsrs	r7, r1, #16
 8001796:	0409      	lsls	r1, r1, #16
 8001798:	0c09      	lsrs	r1, r1, #16
 800179a:	4688      	mov	r8, r1
 800179c:	4359      	muls	r1, r3
 800179e:	468a      	mov	sl, r1
 80017a0:	0039      	movs	r1, r7
 80017a2:	4351      	muls	r1, r2
 80017a4:	4689      	mov	r9, r1
 80017a6:	4641      	mov	r1, r8
 80017a8:	434a      	muls	r2, r1
 80017aa:	4651      	mov	r1, sl
 80017ac:	0c09      	lsrs	r1, r1, #16
 80017ae:	468b      	mov	fp, r1
 80017b0:	437b      	muls	r3, r7
 80017b2:	18d2      	adds	r2, r2, r3
 80017b4:	445a      	add	r2, fp
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d903      	bls.n	80017c2 <__aeabi_dmul+0x2c6>
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	025b      	lsls	r3, r3, #9
 80017be:	469b      	mov	fp, r3
 80017c0:	44d9      	add	r9, fp
 80017c2:	4651      	mov	r1, sl
 80017c4:	0409      	lsls	r1, r1, #16
 80017c6:	0c09      	lsrs	r1, r1, #16
 80017c8:	468a      	mov	sl, r1
 80017ca:	4641      	mov	r1, r8
 80017cc:	4361      	muls	r1, r4
 80017ce:	437c      	muls	r4, r7
 80017d0:	0c13      	lsrs	r3, r2, #16
 80017d2:	0412      	lsls	r2, r2, #16
 80017d4:	444b      	add	r3, r9
 80017d6:	4452      	add	r2, sl
 80017d8:	46a1      	mov	r9, r4
 80017da:	468a      	mov	sl, r1
 80017dc:	003c      	movs	r4, r7
 80017de:	4641      	mov	r1, r8
 80017e0:	436c      	muls	r4, r5
 80017e2:	434d      	muls	r5, r1
 80017e4:	4651      	mov	r1, sl
 80017e6:	444d      	add	r5, r9
 80017e8:	0c0f      	lsrs	r7, r1, #16
 80017ea:	197d      	adds	r5, r7, r5
 80017ec:	45a9      	cmp	r9, r5
 80017ee:	d903      	bls.n	80017f8 <__aeabi_dmul+0x2fc>
 80017f0:	2180      	movs	r1, #128	; 0x80
 80017f2:	0249      	lsls	r1, r1, #9
 80017f4:	4688      	mov	r8, r1
 80017f6:	4444      	add	r4, r8
 80017f8:	9f04      	ldr	r7, [sp, #16]
 80017fa:	9903      	ldr	r1, [sp, #12]
 80017fc:	46b8      	mov	r8, r7
 80017fe:	4441      	add	r1, r8
 8001800:	468b      	mov	fp, r1
 8001802:	4583      	cmp	fp, r0
 8001804:	4180      	sbcs	r0, r0
 8001806:	4241      	negs	r1, r0
 8001808:	4688      	mov	r8, r1
 800180a:	4651      	mov	r1, sl
 800180c:	0408      	lsls	r0, r1, #16
 800180e:	042f      	lsls	r7, r5, #16
 8001810:	0c00      	lsrs	r0, r0, #16
 8001812:	183f      	adds	r7, r7, r0
 8001814:	4658      	mov	r0, fp
 8001816:	9902      	ldr	r1, [sp, #8]
 8001818:	1810      	adds	r0, r2, r0
 800181a:	4689      	mov	r9, r1
 800181c:	4290      	cmp	r0, r2
 800181e:	4192      	sbcs	r2, r2
 8001820:	444f      	add	r7, r9
 8001822:	46ba      	mov	sl, r7
 8001824:	4252      	negs	r2, r2
 8001826:	4699      	mov	r9, r3
 8001828:	4693      	mov	fp, r2
 800182a:	44c2      	add	sl, r8
 800182c:	44d1      	add	r9, sl
 800182e:	44cb      	add	fp, r9
 8001830:	428f      	cmp	r7, r1
 8001832:	41bf      	sbcs	r7, r7
 8001834:	45c2      	cmp	sl, r8
 8001836:	4189      	sbcs	r1, r1
 8001838:	4599      	cmp	r9, r3
 800183a:	419b      	sbcs	r3, r3
 800183c:	4593      	cmp	fp, r2
 800183e:	4192      	sbcs	r2, r2
 8001840:	427f      	negs	r7, r7
 8001842:	4249      	negs	r1, r1
 8001844:	0c2d      	lsrs	r5, r5, #16
 8001846:	4252      	negs	r2, r2
 8001848:	430f      	orrs	r7, r1
 800184a:	425b      	negs	r3, r3
 800184c:	4313      	orrs	r3, r2
 800184e:	197f      	adds	r7, r7, r5
 8001850:	18ff      	adds	r7, r7, r3
 8001852:	465b      	mov	r3, fp
 8001854:	193c      	adds	r4, r7, r4
 8001856:	0ddb      	lsrs	r3, r3, #23
 8001858:	9a05      	ldr	r2, [sp, #20]
 800185a:	0264      	lsls	r4, r4, #9
 800185c:	431c      	orrs	r4, r3
 800185e:	0243      	lsls	r3, r0, #9
 8001860:	4313      	orrs	r3, r2
 8001862:	1e5d      	subs	r5, r3, #1
 8001864:	41ab      	sbcs	r3, r5
 8001866:	465a      	mov	r2, fp
 8001868:	0dc0      	lsrs	r0, r0, #23
 800186a:	4303      	orrs	r3, r0
 800186c:	0252      	lsls	r2, r2, #9
 800186e:	4313      	orrs	r3, r2
 8001870:	01e2      	lsls	r2, r4, #7
 8001872:	d556      	bpl.n	8001922 <__aeabi_dmul+0x426>
 8001874:	2001      	movs	r0, #1
 8001876:	085a      	lsrs	r2, r3, #1
 8001878:	4003      	ands	r3, r0
 800187a:	4313      	orrs	r3, r2
 800187c:	07e2      	lsls	r2, r4, #31
 800187e:	4313      	orrs	r3, r2
 8001880:	0864      	lsrs	r4, r4, #1
 8001882:	485a      	ldr	r0, [pc, #360]	; (80019ec <__aeabi_dmul+0x4f0>)
 8001884:	4460      	add	r0, ip
 8001886:	2800      	cmp	r0, #0
 8001888:	dd4d      	ble.n	8001926 <__aeabi_dmul+0x42a>
 800188a:	075a      	lsls	r2, r3, #29
 800188c:	d009      	beq.n	80018a2 <__aeabi_dmul+0x3a6>
 800188e:	220f      	movs	r2, #15
 8001890:	401a      	ands	r2, r3
 8001892:	2a04      	cmp	r2, #4
 8001894:	d005      	beq.n	80018a2 <__aeabi_dmul+0x3a6>
 8001896:	1d1a      	adds	r2, r3, #4
 8001898:	429a      	cmp	r2, r3
 800189a:	419b      	sbcs	r3, r3
 800189c:	425b      	negs	r3, r3
 800189e:	18e4      	adds	r4, r4, r3
 80018a0:	0013      	movs	r3, r2
 80018a2:	01e2      	lsls	r2, r4, #7
 80018a4:	d504      	bpl.n	80018b0 <__aeabi_dmul+0x3b4>
 80018a6:	2080      	movs	r0, #128	; 0x80
 80018a8:	4a51      	ldr	r2, [pc, #324]	; (80019f0 <__aeabi_dmul+0x4f4>)
 80018aa:	00c0      	lsls	r0, r0, #3
 80018ac:	4014      	ands	r4, r2
 80018ae:	4460      	add	r0, ip
 80018b0:	4a50      	ldr	r2, [pc, #320]	; (80019f4 <__aeabi_dmul+0x4f8>)
 80018b2:	4290      	cmp	r0, r2
 80018b4:	dd00      	ble.n	80018b8 <__aeabi_dmul+0x3bc>
 80018b6:	e6e3      	b.n	8001680 <__aeabi_dmul+0x184>
 80018b8:	2501      	movs	r5, #1
 80018ba:	08db      	lsrs	r3, r3, #3
 80018bc:	0762      	lsls	r2, r4, #29
 80018be:	431a      	orrs	r2, r3
 80018c0:	0264      	lsls	r4, r4, #9
 80018c2:	9b01      	ldr	r3, [sp, #4]
 80018c4:	4691      	mov	r9, r2
 80018c6:	0b22      	lsrs	r2, r4, #12
 80018c8:	0544      	lsls	r4, r0, #21
 80018ca:	0d64      	lsrs	r4, r4, #21
 80018cc:	401d      	ands	r5, r3
 80018ce:	e67c      	b.n	80015ca <__aeabi_dmul+0xce>
 80018d0:	2280      	movs	r2, #128	; 0x80
 80018d2:	4659      	mov	r1, fp
 80018d4:	0312      	lsls	r2, r2, #12
 80018d6:	4211      	tst	r1, r2
 80018d8:	d008      	beq.n	80018ec <__aeabi_dmul+0x3f0>
 80018da:	4214      	tst	r4, r2
 80018dc:	d106      	bne.n	80018ec <__aeabi_dmul+0x3f0>
 80018de:	4322      	orrs	r2, r4
 80018e0:	0312      	lsls	r2, r2, #12
 80018e2:	0b12      	lsrs	r2, r2, #12
 80018e4:	4645      	mov	r5, r8
 80018e6:	4699      	mov	r9, r3
 80018e8:	4c43      	ldr	r4, [pc, #268]	; (80019f8 <__aeabi_dmul+0x4fc>)
 80018ea:	e66e      	b.n	80015ca <__aeabi_dmul+0xce>
 80018ec:	465b      	mov	r3, fp
 80018ee:	431a      	orrs	r2, r3
 80018f0:	0312      	lsls	r2, r2, #12
 80018f2:	0b12      	lsrs	r2, r2, #12
 80018f4:	4c40      	ldr	r4, [pc, #256]	; (80019f8 <__aeabi_dmul+0x4fc>)
 80018f6:	e668      	b.n	80015ca <__aeabi_dmul+0xce>
 80018f8:	0003      	movs	r3, r0
 80018fa:	4654      	mov	r4, sl
 80018fc:	3b28      	subs	r3, #40	; 0x28
 80018fe:	409c      	lsls	r4, r3
 8001900:	2300      	movs	r3, #0
 8001902:	e6b9      	b.n	8001678 <__aeabi_dmul+0x17c>
 8001904:	f000 fc5e 	bl	80021c4 <__clzsi2>
 8001908:	3020      	adds	r0, #32
 800190a:	e6a6      	b.n	800165a <__aeabi_dmul+0x15e>
 800190c:	0003      	movs	r3, r0
 800190e:	3b28      	subs	r3, #40	; 0x28
 8001910:	409f      	lsls	r7, r3
 8001912:	2300      	movs	r3, #0
 8001914:	46bb      	mov	fp, r7
 8001916:	4699      	mov	r9, r3
 8001918:	e68a      	b.n	8001630 <__aeabi_dmul+0x134>
 800191a:	f000 fc53 	bl	80021c4 <__clzsi2>
 800191e:	3020      	adds	r0, #32
 8001920:	e674      	b.n	800160c <__aeabi_dmul+0x110>
 8001922:	46b4      	mov	ip, r6
 8001924:	e7ad      	b.n	8001882 <__aeabi_dmul+0x386>
 8001926:	2501      	movs	r5, #1
 8001928:	1a2a      	subs	r2, r5, r0
 800192a:	2a38      	cmp	r2, #56	; 0x38
 800192c:	dd06      	ble.n	800193c <__aeabi_dmul+0x440>
 800192e:	9b01      	ldr	r3, [sp, #4]
 8001930:	2400      	movs	r4, #0
 8001932:	401d      	ands	r5, r3
 8001934:	2300      	movs	r3, #0
 8001936:	2200      	movs	r2, #0
 8001938:	4699      	mov	r9, r3
 800193a:	e646      	b.n	80015ca <__aeabi_dmul+0xce>
 800193c:	2a1f      	cmp	r2, #31
 800193e:	dc21      	bgt.n	8001984 <__aeabi_dmul+0x488>
 8001940:	2520      	movs	r5, #32
 8001942:	0020      	movs	r0, r4
 8001944:	1aad      	subs	r5, r5, r2
 8001946:	001e      	movs	r6, r3
 8001948:	40ab      	lsls	r3, r5
 800194a:	40a8      	lsls	r0, r5
 800194c:	40d6      	lsrs	r6, r2
 800194e:	1e5d      	subs	r5, r3, #1
 8001950:	41ab      	sbcs	r3, r5
 8001952:	4330      	orrs	r0, r6
 8001954:	4318      	orrs	r0, r3
 8001956:	40d4      	lsrs	r4, r2
 8001958:	0743      	lsls	r3, r0, #29
 800195a:	d009      	beq.n	8001970 <__aeabi_dmul+0x474>
 800195c:	230f      	movs	r3, #15
 800195e:	4003      	ands	r3, r0
 8001960:	2b04      	cmp	r3, #4
 8001962:	d005      	beq.n	8001970 <__aeabi_dmul+0x474>
 8001964:	0003      	movs	r3, r0
 8001966:	1d18      	adds	r0, r3, #4
 8001968:	4298      	cmp	r0, r3
 800196a:	419b      	sbcs	r3, r3
 800196c:	425b      	negs	r3, r3
 800196e:	18e4      	adds	r4, r4, r3
 8001970:	0223      	lsls	r3, r4, #8
 8001972:	d521      	bpl.n	80019b8 <__aeabi_dmul+0x4bc>
 8001974:	2501      	movs	r5, #1
 8001976:	9b01      	ldr	r3, [sp, #4]
 8001978:	2401      	movs	r4, #1
 800197a:	401d      	ands	r5, r3
 800197c:	2300      	movs	r3, #0
 800197e:	2200      	movs	r2, #0
 8001980:	4699      	mov	r9, r3
 8001982:	e622      	b.n	80015ca <__aeabi_dmul+0xce>
 8001984:	251f      	movs	r5, #31
 8001986:	0021      	movs	r1, r4
 8001988:	426d      	negs	r5, r5
 800198a:	1a28      	subs	r0, r5, r0
 800198c:	40c1      	lsrs	r1, r0
 800198e:	0008      	movs	r0, r1
 8001990:	2a20      	cmp	r2, #32
 8001992:	d01d      	beq.n	80019d0 <__aeabi_dmul+0x4d4>
 8001994:	355f      	adds	r5, #95	; 0x5f
 8001996:	1aaa      	subs	r2, r5, r2
 8001998:	4094      	lsls	r4, r2
 800199a:	4323      	orrs	r3, r4
 800199c:	1e5c      	subs	r4, r3, #1
 800199e:	41a3      	sbcs	r3, r4
 80019a0:	2507      	movs	r5, #7
 80019a2:	4303      	orrs	r3, r0
 80019a4:	401d      	ands	r5, r3
 80019a6:	2200      	movs	r2, #0
 80019a8:	2d00      	cmp	r5, #0
 80019aa:	d009      	beq.n	80019c0 <__aeabi_dmul+0x4c4>
 80019ac:	220f      	movs	r2, #15
 80019ae:	2400      	movs	r4, #0
 80019b0:	401a      	ands	r2, r3
 80019b2:	0018      	movs	r0, r3
 80019b4:	2a04      	cmp	r2, #4
 80019b6:	d1d6      	bne.n	8001966 <__aeabi_dmul+0x46a>
 80019b8:	0003      	movs	r3, r0
 80019ba:	0765      	lsls	r5, r4, #29
 80019bc:	0264      	lsls	r4, r4, #9
 80019be:	0b22      	lsrs	r2, r4, #12
 80019c0:	08db      	lsrs	r3, r3, #3
 80019c2:	432b      	orrs	r3, r5
 80019c4:	2501      	movs	r5, #1
 80019c6:	4699      	mov	r9, r3
 80019c8:	9b01      	ldr	r3, [sp, #4]
 80019ca:	2400      	movs	r4, #0
 80019cc:	401d      	ands	r5, r3
 80019ce:	e5fc      	b.n	80015ca <__aeabi_dmul+0xce>
 80019d0:	2400      	movs	r4, #0
 80019d2:	e7e2      	b.n	800199a <__aeabi_dmul+0x49e>
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	2501      	movs	r5, #1
 80019d8:	0312      	lsls	r2, r2, #12
 80019da:	4322      	orrs	r2, r4
 80019dc:	9901      	ldr	r1, [sp, #4]
 80019de:	0312      	lsls	r2, r2, #12
 80019e0:	0b12      	lsrs	r2, r2, #12
 80019e2:	400d      	ands	r5, r1
 80019e4:	4699      	mov	r9, r3
 80019e6:	4c04      	ldr	r4, [pc, #16]	; (80019f8 <__aeabi_dmul+0x4fc>)
 80019e8:	e5ef      	b.n	80015ca <__aeabi_dmul+0xce>
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	000003ff 	.word	0x000003ff
 80019f0:	feffffff 	.word	0xfeffffff
 80019f4:	000007fe 	.word	0x000007fe
 80019f8:	000007ff 	.word	0x000007ff

080019fc <__aeabi_dsub>:
 80019fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019fe:	4646      	mov	r6, r8
 8001a00:	46d6      	mov	lr, sl
 8001a02:	464f      	mov	r7, r9
 8001a04:	030c      	lsls	r4, r1, #12
 8001a06:	b5c0      	push	{r6, r7, lr}
 8001a08:	0fcd      	lsrs	r5, r1, #31
 8001a0a:	004e      	lsls	r6, r1, #1
 8001a0c:	0a61      	lsrs	r1, r4, #9
 8001a0e:	0f44      	lsrs	r4, r0, #29
 8001a10:	430c      	orrs	r4, r1
 8001a12:	00c1      	lsls	r1, r0, #3
 8001a14:	0058      	lsls	r0, r3, #1
 8001a16:	0d40      	lsrs	r0, r0, #21
 8001a18:	4684      	mov	ip, r0
 8001a1a:	468a      	mov	sl, r1
 8001a1c:	000f      	movs	r7, r1
 8001a1e:	0319      	lsls	r1, r3, #12
 8001a20:	0f50      	lsrs	r0, r2, #29
 8001a22:	0a49      	lsrs	r1, r1, #9
 8001a24:	4301      	orrs	r1, r0
 8001a26:	48c6      	ldr	r0, [pc, #792]	; (8001d40 <__aeabi_dsub+0x344>)
 8001a28:	0d76      	lsrs	r6, r6, #21
 8001a2a:	46a8      	mov	r8, r5
 8001a2c:	0fdb      	lsrs	r3, r3, #31
 8001a2e:	00d2      	lsls	r2, r2, #3
 8001a30:	4584      	cmp	ip, r0
 8001a32:	d100      	bne.n	8001a36 <__aeabi_dsub+0x3a>
 8001a34:	e0d8      	b.n	8001be8 <__aeabi_dsub+0x1ec>
 8001a36:	2001      	movs	r0, #1
 8001a38:	4043      	eors	r3, r0
 8001a3a:	42ab      	cmp	r3, r5
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_dsub+0x44>
 8001a3e:	e0a6      	b.n	8001b8e <__aeabi_dsub+0x192>
 8001a40:	4660      	mov	r0, ip
 8001a42:	1a35      	subs	r5, r6, r0
 8001a44:	2d00      	cmp	r5, #0
 8001a46:	dc00      	bgt.n	8001a4a <__aeabi_dsub+0x4e>
 8001a48:	e105      	b.n	8001c56 <__aeabi_dsub+0x25a>
 8001a4a:	2800      	cmp	r0, #0
 8001a4c:	d110      	bne.n	8001a70 <__aeabi_dsub+0x74>
 8001a4e:	000b      	movs	r3, r1
 8001a50:	4313      	orrs	r3, r2
 8001a52:	d100      	bne.n	8001a56 <__aeabi_dsub+0x5a>
 8001a54:	e0d7      	b.n	8001c06 <__aeabi_dsub+0x20a>
 8001a56:	1e6b      	subs	r3, r5, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d000      	beq.n	8001a5e <__aeabi_dsub+0x62>
 8001a5c:	e14b      	b.n	8001cf6 <__aeabi_dsub+0x2fa>
 8001a5e:	4653      	mov	r3, sl
 8001a60:	1a9f      	subs	r7, r3, r2
 8001a62:	45ba      	cmp	sl, r7
 8001a64:	4180      	sbcs	r0, r0
 8001a66:	1a64      	subs	r4, r4, r1
 8001a68:	4240      	negs	r0, r0
 8001a6a:	1a24      	subs	r4, r4, r0
 8001a6c:	2601      	movs	r6, #1
 8001a6e:	e01e      	b.n	8001aae <__aeabi_dsub+0xb2>
 8001a70:	4bb3      	ldr	r3, [pc, #716]	; (8001d40 <__aeabi_dsub+0x344>)
 8001a72:	429e      	cmp	r6, r3
 8001a74:	d048      	beq.n	8001b08 <__aeabi_dsub+0x10c>
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	041b      	lsls	r3, r3, #16
 8001a7a:	4319      	orrs	r1, r3
 8001a7c:	2d38      	cmp	r5, #56	; 0x38
 8001a7e:	dd00      	ble.n	8001a82 <__aeabi_dsub+0x86>
 8001a80:	e119      	b.n	8001cb6 <__aeabi_dsub+0x2ba>
 8001a82:	2d1f      	cmp	r5, #31
 8001a84:	dd00      	ble.n	8001a88 <__aeabi_dsub+0x8c>
 8001a86:	e14c      	b.n	8001d22 <__aeabi_dsub+0x326>
 8001a88:	2320      	movs	r3, #32
 8001a8a:	000f      	movs	r7, r1
 8001a8c:	1b5b      	subs	r3, r3, r5
 8001a8e:	0010      	movs	r0, r2
 8001a90:	409a      	lsls	r2, r3
 8001a92:	409f      	lsls	r7, r3
 8001a94:	40e8      	lsrs	r0, r5
 8001a96:	1e53      	subs	r3, r2, #1
 8001a98:	419a      	sbcs	r2, r3
 8001a9a:	40e9      	lsrs	r1, r5
 8001a9c:	4307      	orrs	r7, r0
 8001a9e:	4317      	orrs	r7, r2
 8001aa0:	4653      	mov	r3, sl
 8001aa2:	1bdf      	subs	r7, r3, r7
 8001aa4:	1a61      	subs	r1, r4, r1
 8001aa6:	45ba      	cmp	sl, r7
 8001aa8:	41a4      	sbcs	r4, r4
 8001aaa:	4264      	negs	r4, r4
 8001aac:	1b0c      	subs	r4, r1, r4
 8001aae:	0223      	lsls	r3, r4, #8
 8001ab0:	d400      	bmi.n	8001ab4 <__aeabi_dsub+0xb8>
 8001ab2:	e0c5      	b.n	8001c40 <__aeabi_dsub+0x244>
 8001ab4:	0264      	lsls	r4, r4, #9
 8001ab6:	0a65      	lsrs	r5, r4, #9
 8001ab8:	2d00      	cmp	r5, #0
 8001aba:	d100      	bne.n	8001abe <__aeabi_dsub+0xc2>
 8001abc:	e0f6      	b.n	8001cac <__aeabi_dsub+0x2b0>
 8001abe:	0028      	movs	r0, r5
 8001ac0:	f000 fb80 	bl	80021c4 <__clzsi2>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	3b08      	subs	r3, #8
 8001ac8:	2b1f      	cmp	r3, #31
 8001aca:	dd00      	ble.n	8001ace <__aeabi_dsub+0xd2>
 8001acc:	e0e9      	b.n	8001ca2 <__aeabi_dsub+0x2a6>
 8001ace:	2220      	movs	r2, #32
 8001ad0:	003c      	movs	r4, r7
 8001ad2:	1ad2      	subs	r2, r2, r3
 8001ad4:	409d      	lsls	r5, r3
 8001ad6:	40d4      	lsrs	r4, r2
 8001ad8:	409f      	lsls	r7, r3
 8001ada:	4325      	orrs	r5, r4
 8001adc:	429e      	cmp	r6, r3
 8001ade:	dd00      	ble.n	8001ae2 <__aeabi_dsub+0xe6>
 8001ae0:	e0db      	b.n	8001c9a <__aeabi_dsub+0x29e>
 8001ae2:	1b9e      	subs	r6, r3, r6
 8001ae4:	1c73      	adds	r3, r6, #1
 8001ae6:	2b1f      	cmp	r3, #31
 8001ae8:	dd00      	ble.n	8001aec <__aeabi_dsub+0xf0>
 8001aea:	e10a      	b.n	8001d02 <__aeabi_dsub+0x306>
 8001aec:	2220      	movs	r2, #32
 8001aee:	0038      	movs	r0, r7
 8001af0:	1ad2      	subs	r2, r2, r3
 8001af2:	0029      	movs	r1, r5
 8001af4:	4097      	lsls	r7, r2
 8001af6:	002c      	movs	r4, r5
 8001af8:	4091      	lsls	r1, r2
 8001afa:	40d8      	lsrs	r0, r3
 8001afc:	1e7a      	subs	r2, r7, #1
 8001afe:	4197      	sbcs	r7, r2
 8001b00:	40dc      	lsrs	r4, r3
 8001b02:	2600      	movs	r6, #0
 8001b04:	4301      	orrs	r1, r0
 8001b06:	430f      	orrs	r7, r1
 8001b08:	077b      	lsls	r3, r7, #29
 8001b0a:	d009      	beq.n	8001b20 <__aeabi_dsub+0x124>
 8001b0c:	230f      	movs	r3, #15
 8001b0e:	403b      	ands	r3, r7
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d005      	beq.n	8001b20 <__aeabi_dsub+0x124>
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	42bb      	cmp	r3, r7
 8001b18:	41bf      	sbcs	r7, r7
 8001b1a:	427f      	negs	r7, r7
 8001b1c:	19e4      	adds	r4, r4, r7
 8001b1e:	001f      	movs	r7, r3
 8001b20:	0223      	lsls	r3, r4, #8
 8001b22:	d525      	bpl.n	8001b70 <__aeabi_dsub+0x174>
 8001b24:	4b86      	ldr	r3, [pc, #536]	; (8001d40 <__aeabi_dsub+0x344>)
 8001b26:	3601      	adds	r6, #1
 8001b28:	429e      	cmp	r6, r3
 8001b2a:	d100      	bne.n	8001b2e <__aeabi_dsub+0x132>
 8001b2c:	e0af      	b.n	8001c8e <__aeabi_dsub+0x292>
 8001b2e:	4b85      	ldr	r3, [pc, #532]	; (8001d44 <__aeabi_dsub+0x348>)
 8001b30:	2501      	movs	r5, #1
 8001b32:	401c      	ands	r4, r3
 8001b34:	4643      	mov	r3, r8
 8001b36:	0762      	lsls	r2, r4, #29
 8001b38:	08ff      	lsrs	r7, r7, #3
 8001b3a:	0264      	lsls	r4, r4, #9
 8001b3c:	0576      	lsls	r6, r6, #21
 8001b3e:	4317      	orrs	r7, r2
 8001b40:	0b24      	lsrs	r4, r4, #12
 8001b42:	0d76      	lsrs	r6, r6, #21
 8001b44:	401d      	ands	r5, r3
 8001b46:	2100      	movs	r1, #0
 8001b48:	0324      	lsls	r4, r4, #12
 8001b4a:	0b23      	lsrs	r3, r4, #12
 8001b4c:	0d0c      	lsrs	r4, r1, #20
 8001b4e:	4a7e      	ldr	r2, [pc, #504]	; (8001d48 <__aeabi_dsub+0x34c>)
 8001b50:	0524      	lsls	r4, r4, #20
 8001b52:	431c      	orrs	r4, r3
 8001b54:	4014      	ands	r4, r2
 8001b56:	0533      	lsls	r3, r6, #20
 8001b58:	4323      	orrs	r3, r4
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	07ed      	lsls	r5, r5, #31
 8001b5e:	085b      	lsrs	r3, r3, #1
 8001b60:	432b      	orrs	r3, r5
 8001b62:	0038      	movs	r0, r7
 8001b64:	0019      	movs	r1, r3
 8001b66:	bc1c      	pop	{r2, r3, r4}
 8001b68:	4690      	mov	r8, r2
 8001b6a:	4699      	mov	r9, r3
 8001b6c:	46a2      	mov	sl, r4
 8001b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b70:	2501      	movs	r5, #1
 8001b72:	4643      	mov	r3, r8
 8001b74:	0762      	lsls	r2, r4, #29
 8001b76:	08ff      	lsrs	r7, r7, #3
 8001b78:	4317      	orrs	r7, r2
 8001b7a:	08e4      	lsrs	r4, r4, #3
 8001b7c:	401d      	ands	r5, r3
 8001b7e:	4b70      	ldr	r3, [pc, #448]	; (8001d40 <__aeabi_dsub+0x344>)
 8001b80:	429e      	cmp	r6, r3
 8001b82:	d036      	beq.n	8001bf2 <__aeabi_dsub+0x1f6>
 8001b84:	0324      	lsls	r4, r4, #12
 8001b86:	0576      	lsls	r6, r6, #21
 8001b88:	0b24      	lsrs	r4, r4, #12
 8001b8a:	0d76      	lsrs	r6, r6, #21
 8001b8c:	e7db      	b.n	8001b46 <__aeabi_dsub+0x14a>
 8001b8e:	4663      	mov	r3, ip
 8001b90:	1af3      	subs	r3, r6, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	dc00      	bgt.n	8001b98 <__aeabi_dsub+0x19c>
 8001b96:	e094      	b.n	8001cc2 <__aeabi_dsub+0x2c6>
 8001b98:	4660      	mov	r0, ip
 8001b9a:	2800      	cmp	r0, #0
 8001b9c:	d035      	beq.n	8001c0a <__aeabi_dsub+0x20e>
 8001b9e:	4868      	ldr	r0, [pc, #416]	; (8001d40 <__aeabi_dsub+0x344>)
 8001ba0:	4286      	cmp	r6, r0
 8001ba2:	d0b1      	beq.n	8001b08 <__aeabi_dsub+0x10c>
 8001ba4:	2780      	movs	r7, #128	; 0x80
 8001ba6:	043f      	lsls	r7, r7, #16
 8001ba8:	4339      	orrs	r1, r7
 8001baa:	2b38      	cmp	r3, #56	; 0x38
 8001bac:	dc00      	bgt.n	8001bb0 <__aeabi_dsub+0x1b4>
 8001bae:	e0fd      	b.n	8001dac <__aeabi_dsub+0x3b0>
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	0017      	movs	r7, r2
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	1e7a      	subs	r2, r7, #1
 8001bb8:	4197      	sbcs	r7, r2
 8001bba:	4457      	add	r7, sl
 8001bbc:	4557      	cmp	r7, sl
 8001bbe:	4180      	sbcs	r0, r0
 8001bc0:	1909      	adds	r1, r1, r4
 8001bc2:	4244      	negs	r4, r0
 8001bc4:	190c      	adds	r4, r1, r4
 8001bc6:	0223      	lsls	r3, r4, #8
 8001bc8:	d53a      	bpl.n	8001c40 <__aeabi_dsub+0x244>
 8001bca:	4b5d      	ldr	r3, [pc, #372]	; (8001d40 <__aeabi_dsub+0x344>)
 8001bcc:	3601      	adds	r6, #1
 8001bce:	429e      	cmp	r6, r3
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dsub+0x1d8>
 8001bd2:	e14b      	b.n	8001e6c <__aeabi_dsub+0x470>
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	4b5b      	ldr	r3, [pc, #364]	; (8001d44 <__aeabi_dsub+0x348>)
 8001bd8:	401c      	ands	r4, r3
 8001bda:	087b      	lsrs	r3, r7, #1
 8001bdc:	4017      	ands	r7, r2
 8001bde:	431f      	orrs	r7, r3
 8001be0:	07e2      	lsls	r2, r4, #31
 8001be2:	4317      	orrs	r7, r2
 8001be4:	0864      	lsrs	r4, r4, #1
 8001be6:	e78f      	b.n	8001b08 <__aeabi_dsub+0x10c>
 8001be8:	0008      	movs	r0, r1
 8001bea:	4310      	orrs	r0, r2
 8001bec:	d000      	beq.n	8001bf0 <__aeabi_dsub+0x1f4>
 8001bee:	e724      	b.n	8001a3a <__aeabi_dsub+0x3e>
 8001bf0:	e721      	b.n	8001a36 <__aeabi_dsub+0x3a>
 8001bf2:	0023      	movs	r3, r4
 8001bf4:	433b      	orrs	r3, r7
 8001bf6:	d100      	bne.n	8001bfa <__aeabi_dsub+0x1fe>
 8001bf8:	e1b9      	b.n	8001f6e <__aeabi_dsub+0x572>
 8001bfa:	2280      	movs	r2, #128	; 0x80
 8001bfc:	0312      	lsls	r2, r2, #12
 8001bfe:	4314      	orrs	r4, r2
 8001c00:	0324      	lsls	r4, r4, #12
 8001c02:	0b24      	lsrs	r4, r4, #12
 8001c04:	e79f      	b.n	8001b46 <__aeabi_dsub+0x14a>
 8001c06:	002e      	movs	r6, r5
 8001c08:	e77e      	b.n	8001b08 <__aeabi_dsub+0x10c>
 8001c0a:	0008      	movs	r0, r1
 8001c0c:	4310      	orrs	r0, r2
 8001c0e:	d100      	bne.n	8001c12 <__aeabi_dsub+0x216>
 8001c10:	e0ca      	b.n	8001da8 <__aeabi_dsub+0x3ac>
 8001c12:	1e58      	subs	r0, r3, #1
 8001c14:	4684      	mov	ip, r0
 8001c16:	2800      	cmp	r0, #0
 8001c18:	d000      	beq.n	8001c1c <__aeabi_dsub+0x220>
 8001c1a:	e0e7      	b.n	8001dec <__aeabi_dsub+0x3f0>
 8001c1c:	4452      	add	r2, sl
 8001c1e:	4552      	cmp	r2, sl
 8001c20:	4180      	sbcs	r0, r0
 8001c22:	1864      	adds	r4, r4, r1
 8001c24:	4240      	negs	r0, r0
 8001c26:	1824      	adds	r4, r4, r0
 8001c28:	0017      	movs	r7, r2
 8001c2a:	2601      	movs	r6, #1
 8001c2c:	0223      	lsls	r3, r4, #8
 8001c2e:	d507      	bpl.n	8001c40 <__aeabi_dsub+0x244>
 8001c30:	2602      	movs	r6, #2
 8001c32:	e7cf      	b.n	8001bd4 <__aeabi_dsub+0x1d8>
 8001c34:	4664      	mov	r4, ip
 8001c36:	432c      	orrs	r4, r5
 8001c38:	d100      	bne.n	8001c3c <__aeabi_dsub+0x240>
 8001c3a:	e1b3      	b.n	8001fa4 <__aeabi_dsub+0x5a8>
 8001c3c:	002c      	movs	r4, r5
 8001c3e:	4667      	mov	r7, ip
 8001c40:	077b      	lsls	r3, r7, #29
 8001c42:	d000      	beq.n	8001c46 <__aeabi_dsub+0x24a>
 8001c44:	e762      	b.n	8001b0c <__aeabi_dsub+0x110>
 8001c46:	0763      	lsls	r3, r4, #29
 8001c48:	08ff      	lsrs	r7, r7, #3
 8001c4a:	431f      	orrs	r7, r3
 8001c4c:	2501      	movs	r5, #1
 8001c4e:	4643      	mov	r3, r8
 8001c50:	08e4      	lsrs	r4, r4, #3
 8001c52:	401d      	ands	r5, r3
 8001c54:	e793      	b.n	8001b7e <__aeabi_dsub+0x182>
 8001c56:	2d00      	cmp	r5, #0
 8001c58:	d178      	bne.n	8001d4c <__aeabi_dsub+0x350>
 8001c5a:	1c75      	adds	r5, r6, #1
 8001c5c:	056d      	lsls	r5, r5, #21
 8001c5e:	0d6d      	lsrs	r5, r5, #21
 8001c60:	2d01      	cmp	r5, #1
 8001c62:	dc00      	bgt.n	8001c66 <__aeabi_dsub+0x26a>
 8001c64:	e0f2      	b.n	8001e4c <__aeabi_dsub+0x450>
 8001c66:	4650      	mov	r0, sl
 8001c68:	1a80      	subs	r0, r0, r2
 8001c6a:	4582      	cmp	sl, r0
 8001c6c:	41bf      	sbcs	r7, r7
 8001c6e:	1a65      	subs	r5, r4, r1
 8001c70:	427f      	negs	r7, r7
 8001c72:	1bed      	subs	r5, r5, r7
 8001c74:	4684      	mov	ip, r0
 8001c76:	0228      	lsls	r0, r5, #8
 8001c78:	d400      	bmi.n	8001c7c <__aeabi_dsub+0x280>
 8001c7a:	e08c      	b.n	8001d96 <__aeabi_dsub+0x39a>
 8001c7c:	4650      	mov	r0, sl
 8001c7e:	1a17      	subs	r7, r2, r0
 8001c80:	42ba      	cmp	r2, r7
 8001c82:	4192      	sbcs	r2, r2
 8001c84:	1b0c      	subs	r4, r1, r4
 8001c86:	4255      	negs	r5, r2
 8001c88:	1b65      	subs	r5, r4, r5
 8001c8a:	4698      	mov	r8, r3
 8001c8c:	e714      	b.n	8001ab8 <__aeabi_dsub+0xbc>
 8001c8e:	2501      	movs	r5, #1
 8001c90:	4643      	mov	r3, r8
 8001c92:	2400      	movs	r4, #0
 8001c94:	401d      	ands	r5, r3
 8001c96:	2700      	movs	r7, #0
 8001c98:	e755      	b.n	8001b46 <__aeabi_dsub+0x14a>
 8001c9a:	4c2a      	ldr	r4, [pc, #168]	; (8001d44 <__aeabi_dsub+0x348>)
 8001c9c:	1af6      	subs	r6, r6, r3
 8001c9e:	402c      	ands	r4, r5
 8001ca0:	e732      	b.n	8001b08 <__aeabi_dsub+0x10c>
 8001ca2:	003d      	movs	r5, r7
 8001ca4:	3828      	subs	r0, #40	; 0x28
 8001ca6:	4085      	lsls	r5, r0
 8001ca8:	2700      	movs	r7, #0
 8001caa:	e717      	b.n	8001adc <__aeabi_dsub+0xe0>
 8001cac:	0038      	movs	r0, r7
 8001cae:	f000 fa89 	bl	80021c4 <__clzsi2>
 8001cb2:	3020      	adds	r0, #32
 8001cb4:	e706      	b.n	8001ac4 <__aeabi_dsub+0xc8>
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	0017      	movs	r7, r2
 8001cba:	2100      	movs	r1, #0
 8001cbc:	1e7a      	subs	r2, r7, #1
 8001cbe:	4197      	sbcs	r7, r2
 8001cc0:	e6ee      	b.n	8001aa0 <__aeabi_dsub+0xa4>
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d000      	beq.n	8001cc8 <__aeabi_dsub+0x2cc>
 8001cc6:	e0e5      	b.n	8001e94 <__aeabi_dsub+0x498>
 8001cc8:	1c73      	adds	r3, r6, #1
 8001cca:	469c      	mov	ip, r3
 8001ccc:	055b      	lsls	r3, r3, #21
 8001cce:	0d5b      	lsrs	r3, r3, #21
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	dc00      	bgt.n	8001cd6 <__aeabi_dsub+0x2da>
 8001cd4:	e09f      	b.n	8001e16 <__aeabi_dsub+0x41a>
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <__aeabi_dsub+0x344>)
 8001cd8:	459c      	cmp	ip, r3
 8001cda:	d100      	bne.n	8001cde <__aeabi_dsub+0x2e2>
 8001cdc:	e0c5      	b.n	8001e6a <__aeabi_dsub+0x46e>
 8001cde:	4452      	add	r2, sl
 8001ce0:	4552      	cmp	r2, sl
 8001ce2:	4180      	sbcs	r0, r0
 8001ce4:	1864      	adds	r4, r4, r1
 8001ce6:	4240      	negs	r0, r0
 8001ce8:	1824      	adds	r4, r4, r0
 8001cea:	07e7      	lsls	r7, r4, #31
 8001cec:	0852      	lsrs	r2, r2, #1
 8001cee:	4317      	orrs	r7, r2
 8001cf0:	0864      	lsrs	r4, r4, #1
 8001cf2:	4666      	mov	r6, ip
 8001cf4:	e708      	b.n	8001b08 <__aeabi_dsub+0x10c>
 8001cf6:	4812      	ldr	r0, [pc, #72]	; (8001d40 <__aeabi_dsub+0x344>)
 8001cf8:	4285      	cmp	r5, r0
 8001cfa:	d100      	bne.n	8001cfe <__aeabi_dsub+0x302>
 8001cfc:	e085      	b.n	8001e0a <__aeabi_dsub+0x40e>
 8001cfe:	001d      	movs	r5, r3
 8001d00:	e6bc      	b.n	8001a7c <__aeabi_dsub+0x80>
 8001d02:	0029      	movs	r1, r5
 8001d04:	3e1f      	subs	r6, #31
 8001d06:	40f1      	lsrs	r1, r6
 8001d08:	2b20      	cmp	r3, #32
 8001d0a:	d100      	bne.n	8001d0e <__aeabi_dsub+0x312>
 8001d0c:	e07f      	b.n	8001e0e <__aeabi_dsub+0x412>
 8001d0e:	2240      	movs	r2, #64	; 0x40
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	409d      	lsls	r5, r3
 8001d14:	432f      	orrs	r7, r5
 8001d16:	1e7d      	subs	r5, r7, #1
 8001d18:	41af      	sbcs	r7, r5
 8001d1a:	2400      	movs	r4, #0
 8001d1c:	430f      	orrs	r7, r1
 8001d1e:	2600      	movs	r6, #0
 8001d20:	e78e      	b.n	8001c40 <__aeabi_dsub+0x244>
 8001d22:	002b      	movs	r3, r5
 8001d24:	000f      	movs	r7, r1
 8001d26:	3b20      	subs	r3, #32
 8001d28:	40df      	lsrs	r7, r3
 8001d2a:	2d20      	cmp	r5, #32
 8001d2c:	d071      	beq.n	8001e12 <__aeabi_dsub+0x416>
 8001d2e:	2340      	movs	r3, #64	; 0x40
 8001d30:	1b5d      	subs	r5, r3, r5
 8001d32:	40a9      	lsls	r1, r5
 8001d34:	430a      	orrs	r2, r1
 8001d36:	1e51      	subs	r1, r2, #1
 8001d38:	418a      	sbcs	r2, r1
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4317      	orrs	r7, r2
 8001d3e:	e6af      	b.n	8001aa0 <__aeabi_dsub+0xa4>
 8001d40:	000007ff 	.word	0x000007ff
 8001d44:	ff7fffff 	.word	0xff7fffff
 8001d48:	800fffff 	.word	0x800fffff
 8001d4c:	2e00      	cmp	r6, #0
 8001d4e:	d03e      	beq.n	8001dce <__aeabi_dsub+0x3d2>
 8001d50:	4eb3      	ldr	r6, [pc, #716]	; (8002020 <__aeabi_dsub+0x624>)
 8001d52:	45b4      	cmp	ip, r6
 8001d54:	d045      	beq.n	8001de2 <__aeabi_dsub+0x3e6>
 8001d56:	2680      	movs	r6, #128	; 0x80
 8001d58:	0436      	lsls	r6, r6, #16
 8001d5a:	426d      	negs	r5, r5
 8001d5c:	4334      	orrs	r4, r6
 8001d5e:	2d38      	cmp	r5, #56	; 0x38
 8001d60:	dd00      	ble.n	8001d64 <__aeabi_dsub+0x368>
 8001d62:	e0a8      	b.n	8001eb6 <__aeabi_dsub+0x4ba>
 8001d64:	2d1f      	cmp	r5, #31
 8001d66:	dd00      	ble.n	8001d6a <__aeabi_dsub+0x36e>
 8001d68:	e11f      	b.n	8001faa <__aeabi_dsub+0x5ae>
 8001d6a:	2620      	movs	r6, #32
 8001d6c:	0027      	movs	r7, r4
 8001d6e:	4650      	mov	r0, sl
 8001d70:	1b76      	subs	r6, r6, r5
 8001d72:	40b7      	lsls	r7, r6
 8001d74:	40e8      	lsrs	r0, r5
 8001d76:	4307      	orrs	r7, r0
 8001d78:	4650      	mov	r0, sl
 8001d7a:	40b0      	lsls	r0, r6
 8001d7c:	1e46      	subs	r6, r0, #1
 8001d7e:	41b0      	sbcs	r0, r6
 8001d80:	40ec      	lsrs	r4, r5
 8001d82:	4338      	orrs	r0, r7
 8001d84:	1a17      	subs	r7, r2, r0
 8001d86:	42ba      	cmp	r2, r7
 8001d88:	4192      	sbcs	r2, r2
 8001d8a:	1b0c      	subs	r4, r1, r4
 8001d8c:	4252      	negs	r2, r2
 8001d8e:	1aa4      	subs	r4, r4, r2
 8001d90:	4666      	mov	r6, ip
 8001d92:	4698      	mov	r8, r3
 8001d94:	e68b      	b.n	8001aae <__aeabi_dsub+0xb2>
 8001d96:	4664      	mov	r4, ip
 8001d98:	4667      	mov	r7, ip
 8001d9a:	432c      	orrs	r4, r5
 8001d9c:	d000      	beq.n	8001da0 <__aeabi_dsub+0x3a4>
 8001d9e:	e68b      	b.n	8001ab8 <__aeabi_dsub+0xbc>
 8001da0:	2500      	movs	r5, #0
 8001da2:	2600      	movs	r6, #0
 8001da4:	2700      	movs	r7, #0
 8001da6:	e6ea      	b.n	8001b7e <__aeabi_dsub+0x182>
 8001da8:	001e      	movs	r6, r3
 8001daa:	e6ad      	b.n	8001b08 <__aeabi_dsub+0x10c>
 8001dac:	2b1f      	cmp	r3, #31
 8001dae:	dc60      	bgt.n	8001e72 <__aeabi_dsub+0x476>
 8001db0:	2720      	movs	r7, #32
 8001db2:	1af8      	subs	r0, r7, r3
 8001db4:	000f      	movs	r7, r1
 8001db6:	4684      	mov	ip, r0
 8001db8:	4087      	lsls	r7, r0
 8001dba:	0010      	movs	r0, r2
 8001dbc:	40d8      	lsrs	r0, r3
 8001dbe:	4307      	orrs	r7, r0
 8001dc0:	4660      	mov	r0, ip
 8001dc2:	4082      	lsls	r2, r0
 8001dc4:	1e50      	subs	r0, r2, #1
 8001dc6:	4182      	sbcs	r2, r0
 8001dc8:	40d9      	lsrs	r1, r3
 8001dca:	4317      	orrs	r7, r2
 8001dcc:	e6f5      	b.n	8001bba <__aeabi_dsub+0x1be>
 8001dce:	0026      	movs	r6, r4
 8001dd0:	4650      	mov	r0, sl
 8001dd2:	4306      	orrs	r6, r0
 8001dd4:	d005      	beq.n	8001de2 <__aeabi_dsub+0x3e6>
 8001dd6:	43ed      	mvns	r5, r5
 8001dd8:	2d00      	cmp	r5, #0
 8001dda:	d0d3      	beq.n	8001d84 <__aeabi_dsub+0x388>
 8001ddc:	4e90      	ldr	r6, [pc, #576]	; (8002020 <__aeabi_dsub+0x624>)
 8001dde:	45b4      	cmp	ip, r6
 8001de0:	d1bd      	bne.n	8001d5e <__aeabi_dsub+0x362>
 8001de2:	000c      	movs	r4, r1
 8001de4:	0017      	movs	r7, r2
 8001de6:	4666      	mov	r6, ip
 8001de8:	4698      	mov	r8, r3
 8001dea:	e68d      	b.n	8001b08 <__aeabi_dsub+0x10c>
 8001dec:	488c      	ldr	r0, [pc, #560]	; (8002020 <__aeabi_dsub+0x624>)
 8001dee:	4283      	cmp	r3, r0
 8001df0:	d00b      	beq.n	8001e0a <__aeabi_dsub+0x40e>
 8001df2:	4663      	mov	r3, ip
 8001df4:	e6d9      	b.n	8001baa <__aeabi_dsub+0x1ae>
 8001df6:	2d00      	cmp	r5, #0
 8001df8:	d000      	beq.n	8001dfc <__aeabi_dsub+0x400>
 8001dfa:	e096      	b.n	8001f2a <__aeabi_dsub+0x52e>
 8001dfc:	0008      	movs	r0, r1
 8001dfe:	4310      	orrs	r0, r2
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x408>
 8001e02:	e0e2      	b.n	8001fca <__aeabi_dsub+0x5ce>
 8001e04:	000c      	movs	r4, r1
 8001e06:	0017      	movs	r7, r2
 8001e08:	4698      	mov	r8, r3
 8001e0a:	4e85      	ldr	r6, [pc, #532]	; (8002020 <__aeabi_dsub+0x624>)
 8001e0c:	e67c      	b.n	8001b08 <__aeabi_dsub+0x10c>
 8001e0e:	2500      	movs	r5, #0
 8001e10:	e780      	b.n	8001d14 <__aeabi_dsub+0x318>
 8001e12:	2100      	movs	r1, #0
 8001e14:	e78e      	b.n	8001d34 <__aeabi_dsub+0x338>
 8001e16:	0023      	movs	r3, r4
 8001e18:	4650      	mov	r0, sl
 8001e1a:	4303      	orrs	r3, r0
 8001e1c:	2e00      	cmp	r6, #0
 8001e1e:	d000      	beq.n	8001e22 <__aeabi_dsub+0x426>
 8001e20:	e0a8      	b.n	8001f74 <__aeabi_dsub+0x578>
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d100      	bne.n	8001e28 <__aeabi_dsub+0x42c>
 8001e26:	e0de      	b.n	8001fe6 <__aeabi_dsub+0x5ea>
 8001e28:	000b      	movs	r3, r1
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	d100      	bne.n	8001e30 <__aeabi_dsub+0x434>
 8001e2e:	e66b      	b.n	8001b08 <__aeabi_dsub+0x10c>
 8001e30:	4452      	add	r2, sl
 8001e32:	4552      	cmp	r2, sl
 8001e34:	4180      	sbcs	r0, r0
 8001e36:	1864      	adds	r4, r4, r1
 8001e38:	4240      	negs	r0, r0
 8001e3a:	1824      	adds	r4, r4, r0
 8001e3c:	0017      	movs	r7, r2
 8001e3e:	0223      	lsls	r3, r4, #8
 8001e40:	d400      	bmi.n	8001e44 <__aeabi_dsub+0x448>
 8001e42:	e6fd      	b.n	8001c40 <__aeabi_dsub+0x244>
 8001e44:	4b77      	ldr	r3, [pc, #476]	; (8002024 <__aeabi_dsub+0x628>)
 8001e46:	4666      	mov	r6, ip
 8001e48:	401c      	ands	r4, r3
 8001e4a:	e65d      	b.n	8001b08 <__aeabi_dsub+0x10c>
 8001e4c:	0025      	movs	r5, r4
 8001e4e:	4650      	mov	r0, sl
 8001e50:	4305      	orrs	r5, r0
 8001e52:	2e00      	cmp	r6, #0
 8001e54:	d1cf      	bne.n	8001df6 <__aeabi_dsub+0x3fa>
 8001e56:	2d00      	cmp	r5, #0
 8001e58:	d14f      	bne.n	8001efa <__aeabi_dsub+0x4fe>
 8001e5a:	000c      	movs	r4, r1
 8001e5c:	4314      	orrs	r4, r2
 8001e5e:	d100      	bne.n	8001e62 <__aeabi_dsub+0x466>
 8001e60:	e0a0      	b.n	8001fa4 <__aeabi_dsub+0x5a8>
 8001e62:	000c      	movs	r4, r1
 8001e64:	0017      	movs	r7, r2
 8001e66:	4698      	mov	r8, r3
 8001e68:	e64e      	b.n	8001b08 <__aeabi_dsub+0x10c>
 8001e6a:	4666      	mov	r6, ip
 8001e6c:	2400      	movs	r4, #0
 8001e6e:	2700      	movs	r7, #0
 8001e70:	e685      	b.n	8001b7e <__aeabi_dsub+0x182>
 8001e72:	001f      	movs	r7, r3
 8001e74:	0008      	movs	r0, r1
 8001e76:	3f20      	subs	r7, #32
 8001e78:	40f8      	lsrs	r0, r7
 8001e7a:	0007      	movs	r7, r0
 8001e7c:	2b20      	cmp	r3, #32
 8001e7e:	d100      	bne.n	8001e82 <__aeabi_dsub+0x486>
 8001e80:	e08e      	b.n	8001fa0 <__aeabi_dsub+0x5a4>
 8001e82:	2040      	movs	r0, #64	; 0x40
 8001e84:	1ac3      	subs	r3, r0, r3
 8001e86:	4099      	lsls	r1, r3
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	1e51      	subs	r1, r2, #1
 8001e8c:	418a      	sbcs	r2, r1
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4317      	orrs	r7, r2
 8001e92:	e692      	b.n	8001bba <__aeabi_dsub+0x1be>
 8001e94:	2e00      	cmp	r6, #0
 8001e96:	d114      	bne.n	8001ec2 <__aeabi_dsub+0x4c6>
 8001e98:	0026      	movs	r6, r4
 8001e9a:	4650      	mov	r0, sl
 8001e9c:	4306      	orrs	r6, r0
 8001e9e:	d062      	beq.n	8001f66 <__aeabi_dsub+0x56a>
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d15c      	bne.n	8001f60 <__aeabi_dsub+0x564>
 8001ea6:	1887      	adds	r7, r0, r2
 8001ea8:	4297      	cmp	r7, r2
 8001eaa:	4192      	sbcs	r2, r2
 8001eac:	1864      	adds	r4, r4, r1
 8001eae:	4252      	negs	r2, r2
 8001eb0:	18a4      	adds	r4, r4, r2
 8001eb2:	4666      	mov	r6, ip
 8001eb4:	e687      	b.n	8001bc6 <__aeabi_dsub+0x1ca>
 8001eb6:	4650      	mov	r0, sl
 8001eb8:	4320      	orrs	r0, r4
 8001eba:	1e44      	subs	r4, r0, #1
 8001ebc:	41a0      	sbcs	r0, r4
 8001ebe:	2400      	movs	r4, #0
 8001ec0:	e760      	b.n	8001d84 <__aeabi_dsub+0x388>
 8001ec2:	4e57      	ldr	r6, [pc, #348]	; (8002020 <__aeabi_dsub+0x624>)
 8001ec4:	45b4      	cmp	ip, r6
 8001ec6:	d04e      	beq.n	8001f66 <__aeabi_dsub+0x56a>
 8001ec8:	2680      	movs	r6, #128	; 0x80
 8001eca:	0436      	lsls	r6, r6, #16
 8001ecc:	425b      	negs	r3, r3
 8001ece:	4334      	orrs	r4, r6
 8001ed0:	2b38      	cmp	r3, #56	; 0x38
 8001ed2:	dd00      	ble.n	8001ed6 <__aeabi_dsub+0x4da>
 8001ed4:	e07f      	b.n	8001fd6 <__aeabi_dsub+0x5da>
 8001ed6:	2b1f      	cmp	r3, #31
 8001ed8:	dd00      	ble.n	8001edc <__aeabi_dsub+0x4e0>
 8001eda:	e08b      	b.n	8001ff4 <__aeabi_dsub+0x5f8>
 8001edc:	2620      	movs	r6, #32
 8001ede:	0027      	movs	r7, r4
 8001ee0:	4650      	mov	r0, sl
 8001ee2:	1af6      	subs	r6, r6, r3
 8001ee4:	40b7      	lsls	r7, r6
 8001ee6:	40d8      	lsrs	r0, r3
 8001ee8:	4307      	orrs	r7, r0
 8001eea:	4650      	mov	r0, sl
 8001eec:	40b0      	lsls	r0, r6
 8001eee:	1e46      	subs	r6, r0, #1
 8001ef0:	41b0      	sbcs	r0, r6
 8001ef2:	4307      	orrs	r7, r0
 8001ef4:	40dc      	lsrs	r4, r3
 8001ef6:	18bf      	adds	r7, r7, r2
 8001ef8:	e7d6      	b.n	8001ea8 <__aeabi_dsub+0x4ac>
 8001efa:	000d      	movs	r5, r1
 8001efc:	4315      	orrs	r5, r2
 8001efe:	d100      	bne.n	8001f02 <__aeabi_dsub+0x506>
 8001f00:	e602      	b.n	8001b08 <__aeabi_dsub+0x10c>
 8001f02:	4650      	mov	r0, sl
 8001f04:	1a80      	subs	r0, r0, r2
 8001f06:	4582      	cmp	sl, r0
 8001f08:	41bf      	sbcs	r7, r7
 8001f0a:	1a65      	subs	r5, r4, r1
 8001f0c:	427f      	negs	r7, r7
 8001f0e:	1bed      	subs	r5, r5, r7
 8001f10:	4684      	mov	ip, r0
 8001f12:	0228      	lsls	r0, r5, #8
 8001f14:	d400      	bmi.n	8001f18 <__aeabi_dsub+0x51c>
 8001f16:	e68d      	b.n	8001c34 <__aeabi_dsub+0x238>
 8001f18:	4650      	mov	r0, sl
 8001f1a:	1a17      	subs	r7, r2, r0
 8001f1c:	42ba      	cmp	r2, r7
 8001f1e:	4192      	sbcs	r2, r2
 8001f20:	1b0c      	subs	r4, r1, r4
 8001f22:	4252      	negs	r2, r2
 8001f24:	1aa4      	subs	r4, r4, r2
 8001f26:	4698      	mov	r8, r3
 8001f28:	e5ee      	b.n	8001b08 <__aeabi_dsub+0x10c>
 8001f2a:	000d      	movs	r5, r1
 8001f2c:	4315      	orrs	r5, r2
 8001f2e:	d100      	bne.n	8001f32 <__aeabi_dsub+0x536>
 8001f30:	e76b      	b.n	8001e0a <__aeabi_dsub+0x40e>
 8001f32:	4650      	mov	r0, sl
 8001f34:	0767      	lsls	r7, r4, #29
 8001f36:	08c0      	lsrs	r0, r0, #3
 8001f38:	4307      	orrs	r7, r0
 8001f3a:	2080      	movs	r0, #128	; 0x80
 8001f3c:	08e4      	lsrs	r4, r4, #3
 8001f3e:	0300      	lsls	r0, r0, #12
 8001f40:	4204      	tst	r4, r0
 8001f42:	d007      	beq.n	8001f54 <__aeabi_dsub+0x558>
 8001f44:	08cd      	lsrs	r5, r1, #3
 8001f46:	4205      	tst	r5, r0
 8001f48:	d104      	bne.n	8001f54 <__aeabi_dsub+0x558>
 8001f4a:	002c      	movs	r4, r5
 8001f4c:	4698      	mov	r8, r3
 8001f4e:	08d7      	lsrs	r7, r2, #3
 8001f50:	0749      	lsls	r1, r1, #29
 8001f52:	430f      	orrs	r7, r1
 8001f54:	0f7b      	lsrs	r3, r7, #29
 8001f56:	00e4      	lsls	r4, r4, #3
 8001f58:	431c      	orrs	r4, r3
 8001f5a:	00ff      	lsls	r7, r7, #3
 8001f5c:	4e30      	ldr	r6, [pc, #192]	; (8002020 <__aeabi_dsub+0x624>)
 8001f5e:	e5d3      	b.n	8001b08 <__aeabi_dsub+0x10c>
 8001f60:	4e2f      	ldr	r6, [pc, #188]	; (8002020 <__aeabi_dsub+0x624>)
 8001f62:	45b4      	cmp	ip, r6
 8001f64:	d1b4      	bne.n	8001ed0 <__aeabi_dsub+0x4d4>
 8001f66:	000c      	movs	r4, r1
 8001f68:	0017      	movs	r7, r2
 8001f6a:	4666      	mov	r6, ip
 8001f6c:	e5cc      	b.n	8001b08 <__aeabi_dsub+0x10c>
 8001f6e:	2700      	movs	r7, #0
 8001f70:	2400      	movs	r4, #0
 8001f72:	e5e8      	b.n	8001b46 <__aeabi_dsub+0x14a>
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d039      	beq.n	8001fec <__aeabi_dsub+0x5f0>
 8001f78:	000b      	movs	r3, r1
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	d100      	bne.n	8001f80 <__aeabi_dsub+0x584>
 8001f7e:	e744      	b.n	8001e0a <__aeabi_dsub+0x40e>
 8001f80:	08c0      	lsrs	r0, r0, #3
 8001f82:	0767      	lsls	r7, r4, #29
 8001f84:	4307      	orrs	r7, r0
 8001f86:	2080      	movs	r0, #128	; 0x80
 8001f88:	08e4      	lsrs	r4, r4, #3
 8001f8a:	0300      	lsls	r0, r0, #12
 8001f8c:	4204      	tst	r4, r0
 8001f8e:	d0e1      	beq.n	8001f54 <__aeabi_dsub+0x558>
 8001f90:	08cb      	lsrs	r3, r1, #3
 8001f92:	4203      	tst	r3, r0
 8001f94:	d1de      	bne.n	8001f54 <__aeabi_dsub+0x558>
 8001f96:	08d7      	lsrs	r7, r2, #3
 8001f98:	0749      	lsls	r1, r1, #29
 8001f9a:	430f      	orrs	r7, r1
 8001f9c:	001c      	movs	r4, r3
 8001f9e:	e7d9      	b.n	8001f54 <__aeabi_dsub+0x558>
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	e771      	b.n	8001e88 <__aeabi_dsub+0x48c>
 8001fa4:	2500      	movs	r5, #0
 8001fa6:	2700      	movs	r7, #0
 8001fa8:	e5e9      	b.n	8001b7e <__aeabi_dsub+0x182>
 8001faa:	002e      	movs	r6, r5
 8001fac:	0027      	movs	r7, r4
 8001fae:	3e20      	subs	r6, #32
 8001fb0:	40f7      	lsrs	r7, r6
 8001fb2:	2d20      	cmp	r5, #32
 8001fb4:	d02f      	beq.n	8002016 <__aeabi_dsub+0x61a>
 8001fb6:	2640      	movs	r6, #64	; 0x40
 8001fb8:	1b75      	subs	r5, r6, r5
 8001fba:	40ac      	lsls	r4, r5
 8001fbc:	4650      	mov	r0, sl
 8001fbe:	4320      	orrs	r0, r4
 8001fc0:	1e44      	subs	r4, r0, #1
 8001fc2:	41a0      	sbcs	r0, r4
 8001fc4:	2400      	movs	r4, #0
 8001fc6:	4338      	orrs	r0, r7
 8001fc8:	e6dc      	b.n	8001d84 <__aeabi_dsub+0x388>
 8001fca:	2480      	movs	r4, #128	; 0x80
 8001fcc:	2500      	movs	r5, #0
 8001fce:	0324      	lsls	r4, r4, #12
 8001fd0:	4e13      	ldr	r6, [pc, #76]	; (8002020 <__aeabi_dsub+0x624>)
 8001fd2:	2700      	movs	r7, #0
 8001fd4:	e5d3      	b.n	8001b7e <__aeabi_dsub+0x182>
 8001fd6:	4650      	mov	r0, sl
 8001fd8:	4320      	orrs	r0, r4
 8001fda:	0007      	movs	r7, r0
 8001fdc:	1e78      	subs	r0, r7, #1
 8001fde:	4187      	sbcs	r7, r0
 8001fe0:	2400      	movs	r4, #0
 8001fe2:	18bf      	adds	r7, r7, r2
 8001fe4:	e760      	b.n	8001ea8 <__aeabi_dsub+0x4ac>
 8001fe6:	000c      	movs	r4, r1
 8001fe8:	0017      	movs	r7, r2
 8001fea:	e58d      	b.n	8001b08 <__aeabi_dsub+0x10c>
 8001fec:	000c      	movs	r4, r1
 8001fee:	0017      	movs	r7, r2
 8001ff0:	4e0b      	ldr	r6, [pc, #44]	; (8002020 <__aeabi_dsub+0x624>)
 8001ff2:	e589      	b.n	8001b08 <__aeabi_dsub+0x10c>
 8001ff4:	001e      	movs	r6, r3
 8001ff6:	0027      	movs	r7, r4
 8001ff8:	3e20      	subs	r6, #32
 8001ffa:	40f7      	lsrs	r7, r6
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	d00c      	beq.n	800201a <__aeabi_dsub+0x61e>
 8002000:	2640      	movs	r6, #64	; 0x40
 8002002:	1af3      	subs	r3, r6, r3
 8002004:	409c      	lsls	r4, r3
 8002006:	4650      	mov	r0, sl
 8002008:	4320      	orrs	r0, r4
 800200a:	1e44      	subs	r4, r0, #1
 800200c:	41a0      	sbcs	r0, r4
 800200e:	4307      	orrs	r7, r0
 8002010:	2400      	movs	r4, #0
 8002012:	18bf      	adds	r7, r7, r2
 8002014:	e748      	b.n	8001ea8 <__aeabi_dsub+0x4ac>
 8002016:	2400      	movs	r4, #0
 8002018:	e7d0      	b.n	8001fbc <__aeabi_dsub+0x5c0>
 800201a:	2400      	movs	r4, #0
 800201c:	e7f3      	b.n	8002006 <__aeabi_dsub+0x60a>
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	000007ff 	.word	0x000007ff
 8002024:	ff7fffff 	.word	0xff7fffff

08002028 <__aeabi_dcmpun>:
 8002028:	b570      	push	{r4, r5, r6, lr}
 800202a:	4e0e      	ldr	r6, [pc, #56]	; (8002064 <__aeabi_dcmpun+0x3c>)
 800202c:	030d      	lsls	r5, r1, #12
 800202e:	031c      	lsls	r4, r3, #12
 8002030:	0049      	lsls	r1, r1, #1
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	0b2d      	lsrs	r5, r5, #12
 8002036:	0d49      	lsrs	r1, r1, #21
 8002038:	0b24      	lsrs	r4, r4, #12
 800203a:	0d5b      	lsrs	r3, r3, #21
 800203c:	42b1      	cmp	r1, r6
 800203e:	d004      	beq.n	800204a <__aeabi_dcmpun+0x22>
 8002040:	4908      	ldr	r1, [pc, #32]	; (8002064 <__aeabi_dcmpun+0x3c>)
 8002042:	2000      	movs	r0, #0
 8002044:	428b      	cmp	r3, r1
 8002046:	d008      	beq.n	800205a <__aeabi_dcmpun+0x32>
 8002048:	bd70      	pop	{r4, r5, r6, pc}
 800204a:	4305      	orrs	r5, r0
 800204c:	2001      	movs	r0, #1
 800204e:	2d00      	cmp	r5, #0
 8002050:	d1fa      	bne.n	8002048 <__aeabi_dcmpun+0x20>
 8002052:	4904      	ldr	r1, [pc, #16]	; (8002064 <__aeabi_dcmpun+0x3c>)
 8002054:	2000      	movs	r0, #0
 8002056:	428b      	cmp	r3, r1
 8002058:	d1f6      	bne.n	8002048 <__aeabi_dcmpun+0x20>
 800205a:	4314      	orrs	r4, r2
 800205c:	0020      	movs	r0, r4
 800205e:	1e44      	subs	r4, r0, #1
 8002060:	41a0      	sbcs	r0, r4
 8002062:	e7f1      	b.n	8002048 <__aeabi_dcmpun+0x20>
 8002064:	000007ff 	.word	0x000007ff

08002068 <__aeabi_d2iz>:
 8002068:	b530      	push	{r4, r5, lr}
 800206a:	4d13      	ldr	r5, [pc, #76]	; (80020b8 <__aeabi_d2iz+0x50>)
 800206c:	030a      	lsls	r2, r1, #12
 800206e:	004b      	lsls	r3, r1, #1
 8002070:	0b12      	lsrs	r2, r2, #12
 8002072:	0d5b      	lsrs	r3, r3, #21
 8002074:	0fc9      	lsrs	r1, r1, #31
 8002076:	2400      	movs	r4, #0
 8002078:	42ab      	cmp	r3, r5
 800207a:	dd10      	ble.n	800209e <__aeabi_d2iz+0x36>
 800207c:	4c0f      	ldr	r4, [pc, #60]	; (80020bc <__aeabi_d2iz+0x54>)
 800207e:	42a3      	cmp	r3, r4
 8002080:	dc0f      	bgt.n	80020a2 <__aeabi_d2iz+0x3a>
 8002082:	2480      	movs	r4, #128	; 0x80
 8002084:	4d0e      	ldr	r5, [pc, #56]	; (80020c0 <__aeabi_d2iz+0x58>)
 8002086:	0364      	lsls	r4, r4, #13
 8002088:	4322      	orrs	r2, r4
 800208a:	1aed      	subs	r5, r5, r3
 800208c:	2d1f      	cmp	r5, #31
 800208e:	dd0b      	ble.n	80020a8 <__aeabi_d2iz+0x40>
 8002090:	480c      	ldr	r0, [pc, #48]	; (80020c4 <__aeabi_d2iz+0x5c>)
 8002092:	1ac3      	subs	r3, r0, r3
 8002094:	40da      	lsrs	r2, r3
 8002096:	4254      	negs	r4, r2
 8002098:	2900      	cmp	r1, #0
 800209a:	d100      	bne.n	800209e <__aeabi_d2iz+0x36>
 800209c:	0014      	movs	r4, r2
 800209e:	0020      	movs	r0, r4
 80020a0:	bd30      	pop	{r4, r5, pc}
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <__aeabi_d2iz+0x60>)
 80020a4:	18cc      	adds	r4, r1, r3
 80020a6:	e7fa      	b.n	800209e <__aeabi_d2iz+0x36>
 80020a8:	4c08      	ldr	r4, [pc, #32]	; (80020cc <__aeabi_d2iz+0x64>)
 80020aa:	40e8      	lsrs	r0, r5
 80020ac:	46a4      	mov	ip, r4
 80020ae:	4463      	add	r3, ip
 80020b0:	409a      	lsls	r2, r3
 80020b2:	4302      	orrs	r2, r0
 80020b4:	e7ef      	b.n	8002096 <__aeabi_d2iz+0x2e>
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	000003fe 	.word	0x000003fe
 80020bc:	0000041d 	.word	0x0000041d
 80020c0:	00000433 	.word	0x00000433
 80020c4:	00000413 	.word	0x00000413
 80020c8:	7fffffff 	.word	0x7fffffff
 80020cc:	fffffbed 	.word	0xfffffbed

080020d0 <__aeabi_i2d>:
 80020d0:	b570      	push	{r4, r5, r6, lr}
 80020d2:	2800      	cmp	r0, #0
 80020d4:	d030      	beq.n	8002138 <__aeabi_i2d+0x68>
 80020d6:	17c3      	asrs	r3, r0, #31
 80020d8:	18c4      	adds	r4, r0, r3
 80020da:	405c      	eors	r4, r3
 80020dc:	0fc5      	lsrs	r5, r0, #31
 80020de:	0020      	movs	r0, r4
 80020e0:	f000 f870 	bl	80021c4 <__clzsi2>
 80020e4:	4b17      	ldr	r3, [pc, #92]	; (8002144 <__aeabi_i2d+0x74>)
 80020e6:	4a18      	ldr	r2, [pc, #96]	; (8002148 <__aeabi_i2d+0x78>)
 80020e8:	1a1b      	subs	r3, r3, r0
 80020ea:	1ad2      	subs	r2, r2, r3
 80020ec:	2a1f      	cmp	r2, #31
 80020ee:	dd18      	ble.n	8002122 <__aeabi_i2d+0x52>
 80020f0:	4a16      	ldr	r2, [pc, #88]	; (800214c <__aeabi_i2d+0x7c>)
 80020f2:	1ad2      	subs	r2, r2, r3
 80020f4:	4094      	lsls	r4, r2
 80020f6:	2200      	movs	r2, #0
 80020f8:	0324      	lsls	r4, r4, #12
 80020fa:	055b      	lsls	r3, r3, #21
 80020fc:	0b24      	lsrs	r4, r4, #12
 80020fe:	0d5b      	lsrs	r3, r3, #21
 8002100:	2100      	movs	r1, #0
 8002102:	0010      	movs	r0, r2
 8002104:	0324      	lsls	r4, r4, #12
 8002106:	0d0a      	lsrs	r2, r1, #20
 8002108:	0b24      	lsrs	r4, r4, #12
 800210a:	0512      	lsls	r2, r2, #20
 800210c:	4322      	orrs	r2, r4
 800210e:	4c10      	ldr	r4, [pc, #64]	; (8002150 <__aeabi_i2d+0x80>)
 8002110:	051b      	lsls	r3, r3, #20
 8002112:	4022      	ands	r2, r4
 8002114:	4313      	orrs	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	07ed      	lsls	r5, r5, #31
 800211a:	085b      	lsrs	r3, r3, #1
 800211c:	432b      	orrs	r3, r5
 800211e:	0019      	movs	r1, r3
 8002120:	bd70      	pop	{r4, r5, r6, pc}
 8002122:	0021      	movs	r1, r4
 8002124:	4091      	lsls	r1, r2
 8002126:	000a      	movs	r2, r1
 8002128:	210b      	movs	r1, #11
 800212a:	1a08      	subs	r0, r1, r0
 800212c:	40c4      	lsrs	r4, r0
 800212e:	055b      	lsls	r3, r3, #21
 8002130:	0324      	lsls	r4, r4, #12
 8002132:	0b24      	lsrs	r4, r4, #12
 8002134:	0d5b      	lsrs	r3, r3, #21
 8002136:	e7e3      	b.n	8002100 <__aeabi_i2d+0x30>
 8002138:	2500      	movs	r5, #0
 800213a:	2300      	movs	r3, #0
 800213c:	2400      	movs	r4, #0
 800213e:	2200      	movs	r2, #0
 8002140:	e7de      	b.n	8002100 <__aeabi_i2d+0x30>
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	0000041e 	.word	0x0000041e
 8002148:	00000433 	.word	0x00000433
 800214c:	00000413 	.word	0x00000413
 8002150:	800fffff 	.word	0x800fffff

08002154 <__aeabi_ui2d>:
 8002154:	b510      	push	{r4, lr}
 8002156:	1e04      	subs	r4, r0, #0
 8002158:	d028      	beq.n	80021ac <__aeabi_ui2d+0x58>
 800215a:	f000 f833 	bl	80021c4 <__clzsi2>
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <__aeabi_ui2d+0x60>)
 8002160:	4a15      	ldr	r2, [pc, #84]	; (80021b8 <__aeabi_ui2d+0x64>)
 8002162:	1a1b      	subs	r3, r3, r0
 8002164:	1ad2      	subs	r2, r2, r3
 8002166:	2a1f      	cmp	r2, #31
 8002168:	dd15      	ble.n	8002196 <__aeabi_ui2d+0x42>
 800216a:	4a14      	ldr	r2, [pc, #80]	; (80021bc <__aeabi_ui2d+0x68>)
 800216c:	1ad2      	subs	r2, r2, r3
 800216e:	4094      	lsls	r4, r2
 8002170:	2200      	movs	r2, #0
 8002172:	0324      	lsls	r4, r4, #12
 8002174:	055b      	lsls	r3, r3, #21
 8002176:	0b24      	lsrs	r4, r4, #12
 8002178:	0d5b      	lsrs	r3, r3, #21
 800217a:	2100      	movs	r1, #0
 800217c:	0010      	movs	r0, r2
 800217e:	0324      	lsls	r4, r4, #12
 8002180:	0d0a      	lsrs	r2, r1, #20
 8002182:	0b24      	lsrs	r4, r4, #12
 8002184:	0512      	lsls	r2, r2, #20
 8002186:	4322      	orrs	r2, r4
 8002188:	4c0d      	ldr	r4, [pc, #52]	; (80021c0 <__aeabi_ui2d+0x6c>)
 800218a:	051b      	lsls	r3, r3, #20
 800218c:	4022      	ands	r2, r4
 800218e:	4313      	orrs	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	0859      	lsrs	r1, r3, #1
 8002194:	bd10      	pop	{r4, pc}
 8002196:	0021      	movs	r1, r4
 8002198:	4091      	lsls	r1, r2
 800219a:	000a      	movs	r2, r1
 800219c:	210b      	movs	r1, #11
 800219e:	1a08      	subs	r0, r1, r0
 80021a0:	40c4      	lsrs	r4, r0
 80021a2:	055b      	lsls	r3, r3, #21
 80021a4:	0324      	lsls	r4, r4, #12
 80021a6:	0b24      	lsrs	r4, r4, #12
 80021a8:	0d5b      	lsrs	r3, r3, #21
 80021aa:	e7e6      	b.n	800217a <__aeabi_ui2d+0x26>
 80021ac:	2300      	movs	r3, #0
 80021ae:	2400      	movs	r4, #0
 80021b0:	2200      	movs	r2, #0
 80021b2:	e7e2      	b.n	800217a <__aeabi_ui2d+0x26>
 80021b4:	0000041e 	.word	0x0000041e
 80021b8:	00000433 	.word	0x00000433
 80021bc:	00000413 	.word	0x00000413
 80021c0:	800fffff 	.word	0x800fffff

080021c4 <__clzsi2>:
 80021c4:	211c      	movs	r1, #28
 80021c6:	2301      	movs	r3, #1
 80021c8:	041b      	lsls	r3, r3, #16
 80021ca:	4298      	cmp	r0, r3
 80021cc:	d301      	bcc.n	80021d2 <__clzsi2+0xe>
 80021ce:	0c00      	lsrs	r0, r0, #16
 80021d0:	3910      	subs	r1, #16
 80021d2:	0a1b      	lsrs	r3, r3, #8
 80021d4:	4298      	cmp	r0, r3
 80021d6:	d301      	bcc.n	80021dc <__clzsi2+0x18>
 80021d8:	0a00      	lsrs	r0, r0, #8
 80021da:	3908      	subs	r1, #8
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	4298      	cmp	r0, r3
 80021e0:	d301      	bcc.n	80021e6 <__clzsi2+0x22>
 80021e2:	0900      	lsrs	r0, r0, #4
 80021e4:	3904      	subs	r1, #4
 80021e6:	a202      	add	r2, pc, #8	; (adr r2, 80021f0 <__clzsi2+0x2c>)
 80021e8:	5c10      	ldrb	r0, [r2, r0]
 80021ea:	1840      	adds	r0, r0, r1
 80021ec:	4770      	bx	lr
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	02020304 	.word	0x02020304
 80021f4:	01010101 	.word	0x01010101
	...

08002200 <__clzdi2>:
 8002200:	b510      	push	{r4, lr}
 8002202:	2900      	cmp	r1, #0
 8002204:	d103      	bne.n	800220e <__clzdi2+0xe>
 8002206:	f7ff ffdd 	bl	80021c4 <__clzsi2>
 800220a:	3020      	adds	r0, #32
 800220c:	e002      	b.n	8002214 <__clzdi2+0x14>
 800220e:	1c08      	adds	r0, r1, #0
 8002210:	f7ff ffd8 	bl	80021c4 <__clzsi2>
 8002214:	bd10      	pop	{r4, pc}
 8002216:	46c0      	nop			; (mov r8, r8)

08002218 <ST7735_write>:
uint16_t scr_height;
//uint8_t buf_tft[3300] = {0};
static lv_disp_drv_t * disp_p;

void ST7735_write(uint8_t data)
{
 8002218:	b507      	push	{r0, r1, r2, lr}
 800221a:	466b      	mov	r3, sp
 800221c:	1dd9      	adds	r1, r3, #7
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 800221e:	2301      	movs	r3, #1
{
 8002220:	7008      	strb	r0, [r1, #0]
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 8002222:	425b      	negs	r3, r3
 8002224:	2201      	movs	r2, #1
 8002226:	4802      	ldr	r0, [pc, #8]	; (8002230 <ST7735_write+0x18>)
 8002228:	f002 fe47 	bl	8004eba <HAL_SPI_Transmit>
}
 800222c:	bd07      	pop	{r0, r1, r2, pc}
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	20000a98 	.word	0x20000a98

08002234 <ST7735_cmd>:
	tmp[0] = color >> 8;
	tmp[1] = color;
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&tmp[0], 2, HAL_MAX_DELAY);
}

void ST7735_cmd(uint8_t cmd) {
 8002234:	b510      	push	{r4, lr}
 8002236:	0004      	movs	r4, r0
	A0_L();
 8002238:	2200      	movs	r2, #0
 800223a:	2110      	movs	r1, #16
 800223c:	4803      	ldr	r0, [pc, #12]	; (800224c <ST7735_cmd+0x18>)
 800223e:	f001 ffa3 	bl	8004188 <HAL_GPIO_WritePin>
	ST7735_write(cmd);
 8002242:	0020      	movs	r0, r4
 8002244:	f7ff ffe8 	bl	8002218 <ST7735_write>
}
 8002248:	bd10      	pop	{r4, pc}
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	50000c00 	.word	0x50000c00

08002250 <ST7735_data>:

void ST7735_data(uint8_t data) {
 8002250:	b510      	push	{r4, lr}
 8002252:	0004      	movs	r4, r0
	A0_H();
 8002254:	2201      	movs	r2, #1
 8002256:	2110      	movs	r1, #16
 8002258:	4803      	ldr	r0, [pc, #12]	; (8002268 <ST7735_data+0x18>)
 800225a:	f001 ff95 	bl	8004188 <HAL_GPIO_WritePin>
	ST7735_write(data);
 800225e:	0020      	movs	r0, r4
 8002260:	f7ff ffda 	bl	8002218 <ST7735_write>
}
 8002264:	bd10      	pop	{r4, pc}
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	50000c00 	.word	0x50000c00

0800226c <ST7735_Orientation>:
	CS_H();

	ST7735_Orientation(scr_CCW);
}

void ST7735_Orientation(ScrOrientation_TypeDef orientation) {
 800226c:	b510      	push	{r4, lr}
	CS_L();
 800226e:	2200      	movs	r2, #0
 8002270:	2102      	movs	r1, #2
void ST7735_Orientation(ScrOrientation_TypeDef orientation) {
 8002272:	0004      	movs	r4, r0
	CS_L();
 8002274:	4813      	ldr	r0, [pc, #76]	; (80022c4 <ST7735_Orientation+0x58>)
 8002276:	f001 ff87 	bl	8004188 <HAL_GPIO_WritePin>
	ST7735_cmd(0x36); // Memory data access control:
 800227a:	2036      	movs	r0, #54	; 0x36
 800227c:	f7ff ffda 	bl	8002234 <ST7735_cmd>
 8002280:	4a11      	ldr	r2, [pc, #68]	; (80022c8 <ST7735_Orientation+0x5c>)
 8002282:	20a0      	movs	r0, #160	; 0xa0
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <ST7735_Orientation+0x60>)
	switch(orientation) {
 8002286:	2c02      	cmp	r4, #2
 8002288:	d00e      	beq.n	80022a8 <ST7735_Orientation+0x3c>
 800228a:	2180      	movs	r1, #128	; 0x80
 800228c:	2c03      	cmp	r4, #3
 800228e:	d010      	beq.n	80022b2 <ST7735_Orientation+0x46>
 8002290:	2c01      	cmp	r4, #1
 8002292:	d112      	bne.n	80022ba <ST7735_Orientation+0x4e>
	case scr_CW:
		scr_width  = TFT_H;
 8002294:	8010      	strh	r0, [r2, #0]
		scr_height = TFT_W;
 8002296:	8019      	strh	r1, [r3, #0]
		ST7735_data(0xc0); // X-Mirror,Y-Mirror: Bottom to top; Right to left; RGB
		break;
	default:
		scr_width  = TFT_W;
		scr_height = TFT_H;
		ST7735_data(0x00); // Normal: Top to Bottom; Left to Right; RGB
 8002298:	f7ff ffda 	bl	8002250 <ST7735_data>
		break;
	}
	CS_H();
 800229c:	2201      	movs	r2, #1
 800229e:	2102      	movs	r1, #2
 80022a0:	4808      	ldr	r0, [pc, #32]	; (80022c4 <ST7735_Orientation+0x58>)
 80022a2:	f001 ff71 	bl	8004188 <HAL_GPIO_WritePin>
}
 80022a6:	bd10      	pop	{r4, pc}
		scr_width  = TFT_H;
 80022a8:	8010      	strh	r0, [r2, #0]
		scr_height = TFT_W;
 80022aa:	2280      	movs	r2, #128	; 0x80
		ST7735_data(0x60); // X-Y Exchange,X-Mirror
 80022ac:	2060      	movs	r0, #96	; 0x60
		scr_height = TFT_W;
 80022ae:	801a      	strh	r2, [r3, #0]
 80022b0:	e7f2      	b.n	8002298 <ST7735_Orientation+0x2c>
		scr_height = TFT_H;
 80022b2:	8018      	strh	r0, [r3, #0]
		scr_width  = TFT_W;
 80022b4:	8011      	strh	r1, [r2, #0]
		ST7735_data(0xc0); // X-Mirror,Y-Mirror: Bottom to top; Right to left; RGB
 80022b6:	20c0      	movs	r0, #192	; 0xc0
 80022b8:	e7ee      	b.n	8002298 <ST7735_Orientation+0x2c>
		scr_height = TFT_H;
 80022ba:	8018      	strh	r0, [r3, #0]
		scr_width  = TFT_W;
 80022bc:	8011      	strh	r1, [r2, #0]
		ST7735_data(0x00); // Normal: Top to Bottom; Left to Right; RGB
 80022be:	2000      	movs	r0, #0
 80022c0:	e7ea      	b.n	8002298 <ST7735_Orientation+0x2c>
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	50000c00 	.word	0x50000c00
 80022c8:	2000083c 	.word	0x2000083c
 80022cc:	2000083e 	.word	0x2000083e

080022d0 <ST7735_Init>:
void ST7735_Init(void) {
 80022d0:	b510      	push	{r4, lr}
	CS_H();
 80022d2:	4c44      	ldr	r4, [pc, #272]	; (80023e4 <ST7735_Init+0x114>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	0020      	movs	r0, r4
 80022d8:	2102      	movs	r1, #2
 80022da:	f001 ff55 	bl	8004188 <HAL_GPIO_WritePin>
	RST_H();
 80022de:	2201      	movs	r2, #1
 80022e0:	0020      	movs	r0, r4
 80022e2:	0011      	movs	r1, r2
 80022e4:	f001 ff50 	bl	8004188 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80022e8:	2005      	movs	r0, #5
 80022ea:	f001 fb89 	bl	8003a00 <HAL_Delay>
	RST_L();
 80022ee:	2200      	movs	r2, #0
 80022f0:	2101      	movs	r1, #1
 80022f2:	0020      	movs	r0, r4
 80022f4:	f001 ff48 	bl	8004188 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80022f8:	2005      	movs	r0, #5
 80022fa:	f001 fb81 	bl	8003a00 <HAL_Delay>
	RST_H();
 80022fe:	2201      	movs	r2, #1
 8002300:	0020      	movs	r0, r4
 8002302:	0011      	movs	r1, r2
 8002304:	f001 ff40 	bl	8004188 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002308:	2005      	movs	r0, #5
 800230a:	f001 fb79 	bl	8003a00 <HAL_Delay>
	CS_L();
 800230e:	2200      	movs	r2, #0
 8002310:	2102      	movs	r1, #2
 8002312:	0020      	movs	r0, r4
 8002314:	f001 ff38 	bl	8004188 <HAL_GPIO_WritePin>
	ST7735_cmd(0x11); 	// Sleep out & booster on
 8002318:	2011      	movs	r0, #17
 800231a:	f7ff ff8b 	bl	8002234 <ST7735_cmd>
	HAL_Delay(25); 		// Datasheet says what display wakes about 120ms (may be much faster actually)
 800231e:	2019      	movs	r0, #25
 8002320:	f001 fb6e 	bl	8003a00 <HAL_Delay>
	ST7735_cmd(0xb1);   // In normal mode (full colors):
 8002324:	20b1      	movs	r0, #177	; 0xb1
 8002326:	f7ff ff85 	bl	8002234 <ST7735_cmd>
	A0_H();
 800232a:	2201      	movs	r2, #1
 800232c:	2110      	movs	r1, #16
 800232e:	0020      	movs	r0, r4
 8002330:	f001 ff2a 	bl	8004188 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNA set 1-line period: RTNA2, RTNA0
 8002334:	2005      	movs	r0, #5
 8002336:	f7ff ff6f 	bl	8002218 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPA5,FPA4,FPA3,FPA2
 800233a:	203c      	movs	r0, #60	; 0x3c
 800233c:	f7ff ff6c 	bl	8002218 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPA5,BPA4,BPA3,BPA2
 8002340:	203c      	movs	r0, #60	; 0x3c
 8002342:	f7ff ff69 	bl	8002218 <ST7735_write>
	ST7735_cmd(0xb2);   // In idle mode (8-colors):
 8002346:	20b2      	movs	r0, #178	; 0xb2
 8002348:	f7ff ff74 	bl	8002234 <ST7735_cmd>
	A0_H();
 800234c:	2201      	movs	r2, #1
 800234e:	2110      	movs	r1, #16
 8002350:	0020      	movs	r0, r4
 8002352:	f001 ff19 	bl	8004188 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNB set 1-line period: RTNAB, RTNB0
 8002356:	2005      	movs	r0, #5
 8002358:	f7ff ff5e 	bl	8002218 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPB5,FPB4,FPB3,FPB2
 800235c:	203c      	movs	r0, #60	; 0x3c
 800235e:	f7ff ff5b 	bl	8002218 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPB5,BPB4,BPB3,BPB2
 8002362:	203c      	movs	r0, #60	; 0x3c
 8002364:	f7ff ff58 	bl	8002218 <ST7735_write>
	ST7735_cmd(0xb3);   // In partial mode + full colors:
 8002368:	20b3      	movs	r0, #179	; 0xb3
 800236a:	f7ff ff63 	bl	8002234 <ST7735_cmd>
	A0_H();
 800236e:	2201      	movs	r2, #1
 8002370:	2110      	movs	r1, #16
 8002372:	0020      	movs	r0, r4
 8002374:	f001 ff08 	bl	8004188 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNC set 1-line period: RTNC2, RTNC0
 8002378:	2005      	movs	r0, #5
 800237a:	f7ff ff4d 	bl	8002218 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPC5,FPC4,FPC3,FPC2
 800237e:	203c      	movs	r0, #60	; 0x3c
 8002380:	f7ff ff4a 	bl	8002218 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPC5,BPC4,BPC3,BPC2
 8002384:	203c      	movs	r0, #60	; 0x3c
 8002386:	f7ff ff47 	bl	8002218 <ST7735_write>
	ST7735_write(0x05); //   RTND set 1-line period: RTND2, RTND0
 800238a:	2005      	movs	r0, #5
 800238c:	f7ff ff44 	bl	8002218 <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPD5,FPD4,FPD3,FPD2
 8002390:	203c      	movs	r0, #60	; 0x3c
 8002392:	f7ff ff41 	bl	8002218 <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPD5,BPD4,BPD3,BPD2
 8002396:	203c      	movs	r0, #60	; 0x3c
 8002398:	f7ff ff3e 	bl	8002218 <ST7735_write>
	ST7735_cmd(0xB4);   // Display dot inversion control:
 800239c:	20b4      	movs	r0, #180	; 0xb4
 800239e:	f7ff ff49 	bl	8002234 <ST7735_cmd>
	ST7735_data(0x03);  //   NLB,NLC
 80023a2:	2003      	movs	r0, #3
 80023a4:	f7ff ff54 	bl	8002250 <ST7735_data>
	ST7735_cmd(0x3a);   // Interface pixel format
 80023a8:	203a      	movs	r0, #58	; 0x3a
 80023aa:	f7ff ff43 	bl	8002234 <ST7735_cmd>
	ST7735_data(0x05);  // 16-bit/pixel RGB 5-6-5 (65k colors)
 80023ae:	2005      	movs	r0, #5
 80023b0:	f7ff ff4e 	bl	8002250 <ST7735_data>
	ST7735_cmd(0x20);   // Display inversion off
 80023b4:	2020      	movs	r0, #32
 80023b6:	f7ff ff3d 	bl	8002234 <ST7735_cmd>
	ST7735_cmd(0x13);   // Partial mode off
 80023ba:	2013      	movs	r0, #19
 80023bc:	f7ff ff3a 	bl	8002234 <ST7735_cmd>
	ST7735_cmd(0x26);   // Gamma curve set:
 80023c0:	2026      	movs	r0, #38	; 0x26
 80023c2:	f7ff ff37 	bl	8002234 <ST7735_cmd>
	ST7735_data(0x01);  //   Gamma curve 1 (G2.2) or (G1.0)
 80023c6:	2001      	movs	r0, #1
 80023c8:	f7ff ff42 	bl	8002250 <ST7735_data>
	ST7735_cmd(0x29);   // Display on
 80023cc:	2029      	movs	r0, #41	; 0x29
 80023ce:	f7ff ff31 	bl	8002234 <ST7735_cmd>
	CS_H();
 80023d2:	2201      	movs	r2, #1
 80023d4:	2102      	movs	r1, #2
 80023d6:	0020      	movs	r0, r4
 80023d8:	f001 fed6 	bl	8004188 <HAL_GPIO_WritePin>
	ST7735_Orientation(scr_CCW);
 80023dc:	2002      	movs	r0, #2
 80023de:	f7ff ff45 	bl	800226c <ST7735_Orientation>
}
 80023e2:	bd10      	pop	{r4, pc}
 80023e4:	50000c00 	.word	0x50000c00

080023e8 <ST7735_AddrSet>:

void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 80023e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023ea:	0006      	movs	r6, r0
 80023ec:	0015      	movs	r5, r2
 80023ee:	000c      	movs	r4, r1
	ST7735_cmd(0x2a); // Column address set
	A0_H();
 80023f0:	4f17      	ldr	r7, [pc, #92]	; (8002450 <ST7735_AddrSet+0x68>)
	ST7735_cmd(0x2a); // Column address set
 80023f2:	202a      	movs	r0, #42	; 0x2a
void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 80023f4:	9301      	str	r3, [sp, #4]
	ST7735_cmd(0x2a); // Column address set
 80023f6:	f7ff ff1d 	bl	8002234 <ST7735_cmd>
	A0_H();
 80023fa:	2201      	movs	r2, #1
 80023fc:	2110      	movs	r1, #16
 80023fe:	0038      	movs	r0, r7
 8002400:	f001 fec2 	bl	8004188 <HAL_GPIO_WritePin>
	ST7735_write(XS >> 8);
 8002404:	0a30      	lsrs	r0, r6, #8
 8002406:	f7ff ff07 	bl	8002218 <ST7735_write>
	ST7735_write(XS);
 800240a:	b2f0      	uxtb	r0, r6
 800240c:	f7ff ff04 	bl	8002218 <ST7735_write>
	ST7735_write(XE >> 8);
 8002410:	0a28      	lsrs	r0, r5, #8
 8002412:	f7ff ff01 	bl	8002218 <ST7735_write>
	ST7735_write(XE);
 8002416:	b2e8      	uxtb	r0, r5
 8002418:	f7ff fefe 	bl	8002218 <ST7735_write>

	ST7735_cmd(0x2b); // Row address set
 800241c:	202b      	movs	r0, #43	; 0x2b
 800241e:	f7ff ff09 	bl	8002234 <ST7735_cmd>
	A0_H();
 8002422:	2201      	movs	r2, #1
 8002424:	2110      	movs	r1, #16
 8002426:	0038      	movs	r0, r7
 8002428:	f001 feae 	bl	8004188 <HAL_GPIO_WritePin>
	ST7735_write(YS >> 8);
 800242c:	0a20      	lsrs	r0, r4, #8
 800242e:	f7ff fef3 	bl	8002218 <ST7735_write>
	ST7735_write(YS);
 8002432:	b2e0      	uxtb	r0, r4
 8002434:	f7ff fef0 	bl	8002218 <ST7735_write>
	ST7735_write(YE >> 8);
 8002438:	9b01      	ldr	r3, [sp, #4]
 800243a:	0a18      	lsrs	r0, r3, #8
 800243c:	f7ff feec 	bl	8002218 <ST7735_write>
	ST7735_write(YE);
 8002440:	466b      	mov	r3, sp
 8002442:	7918      	ldrb	r0, [r3, #4]
 8002444:	f7ff fee8 	bl	8002218 <ST7735_write>

	ST7735_cmd(0x2c); // Memory write
 8002448:	202c      	movs	r0, #44	; 0x2c
 800244a:	f7ff fef3 	bl	8002234 <ST7735_cmd>
}
 800244e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002450:	50000c00 	.word	0x50000c00

08002454 <ST7735_Clear>:

void ST7735_Clear(uint16_t color) {
 8002454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t i;
	uint8_t  CH,CL;

	CH = color >> 8;
 8002456:	0a03      	lsrs	r3, r0, #8
	CL = (uint8_t)color;

	CS_L();
 8002458:	2200      	movs	r2, #0
 800245a:	2102      	movs	r1, #2
	CL = (uint8_t)color;
 800245c:	b2c5      	uxtb	r5, r0
	CS_L();
 800245e:	4815      	ldr	r0, [pc, #84]	; (80024b4 <ST7735_Clear+0x60>)
	CH = color >> 8;
 8002460:	9301      	str	r3, [sp, #4]
	CS_L();
 8002462:	f001 fe91 	bl	8004188 <HAL_GPIO_WritePin>
	ST7735_AddrSet(0, 0, scr_width - 1, scr_height - 1);
 8002466:	2100      	movs	r1, #0
 8002468:	4e13      	ldr	r6, [pc, #76]	; (80024b8 <ST7735_Clear+0x64>)
 800246a:	4f14      	ldr	r7, [pc, #80]	; (80024bc <ST7735_Clear+0x68>)
 800246c:	8833      	ldrh	r3, [r6, #0]
 800246e:	883a      	ldrh	r2, [r7, #0]
 8002470:	3b01      	subs	r3, #1
 8002472:	3a01      	subs	r2, #1
 8002474:	0008      	movs	r0, r1
 8002476:	b29b      	uxth	r3, r3
 8002478:	b292      	uxth	r2, r2
 800247a:	f7ff ffb5 	bl	80023e8 <ST7735_AddrSet>
	A0_H();
 800247e:	2201      	movs	r2, #1
 8002480:	2110      	movs	r1, #16
 8002482:	480c      	ldr	r0, [pc, #48]	; (80024b4 <ST7735_Clear+0x60>)
 8002484:	f001 fe80 	bl	8004188 <HAL_GPIO_WritePin>
	for (i = 0; i < scr_width * scr_height; i++) {
 8002488:	2400      	movs	r4, #0
 800248a:	883a      	ldrh	r2, [r7, #0]
 800248c:	8833      	ldrh	r3, [r6, #0]
 800248e:	4353      	muls	r3, r2
 8002490:	429c      	cmp	r4, r3
 8002492:	db05      	blt.n	80024a0 <ST7735_Clear+0x4c>
		ST7735_write(CH);
		ST7735_write(CL);
	}
	CS_H();
 8002494:	2201      	movs	r2, #1
 8002496:	2102      	movs	r1, #2
 8002498:	4806      	ldr	r0, [pc, #24]	; (80024b4 <ST7735_Clear+0x60>)
 800249a:	f001 fe75 	bl	8004188 <HAL_GPIO_WritePin>
}
 800249e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		ST7735_write(CH);
 80024a0:	9801      	ldr	r0, [sp, #4]
 80024a2:	f7ff feb9 	bl	8002218 <ST7735_write>
	for (i = 0; i < scr_width * scr_height; i++) {
 80024a6:	3401      	adds	r4, #1
		ST7735_write(CL);
 80024a8:	0028      	movs	r0, r5
 80024aa:	f7ff feb5 	bl	8002218 <ST7735_write>
	for (i = 0; i < scr_width * scr_height; i++) {
 80024ae:	b2a4      	uxth	r4, r4
 80024b0:	e7eb      	b.n	800248a <ST7735_Clear+0x36>
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	50000c00 	.word	0x50000c00
 80024b8:	2000083e 	.word	0x2000083e
 80024bc:	2000083c 	.word	0x2000083c

080024c0 <ClearLog>:

/** Clear the duration parameter and the click count parameter of the button.
 */
void ClearLog(uint8_t key, uint8_t index)
{
	if(index < 8)
 80024c0:	2907      	cmp	r1, #7
 80024c2:	d807      	bhi.n	80024d4 <ClearLog+0x14>
	{
		bt[key]->click[index] = bt[key]->duration[index] = 0;
 80024c4:	2360      	movs	r3, #96	; 0x60
 80024c6:	4343      	muls	r3, r0
 80024c8:	4803      	ldr	r0, [pc, #12]	; (80024d8 <ClearLog+0x18>)
 80024ca:	18c0      	adds	r0, r0, r3
 80024cc:	2300      	movs	r3, #0
 80024ce:	1841      	adds	r1, r0, r1
 80024d0:	728b      	strb	r3, [r1, #10]
 80024d2:	708b      	strb	r3, [r1, #2]
	}
}
 80024d4:	4770      	bx	lr
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	20000858 	.word	0x20000858

080024dc <KeyboardInit>:
{
 80024dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024de:	0006      	movs	r6, r0
	for(x = 0; x < 6; x++) {
 80024e0:	2500      	movs	r5, #0
 80024e2:	4c0a      	ldr	r4, [pc, #40]	; (800250c <KeyboardInit+0x30>)
		bt[x]->old_state = bt[x]->new_state = 0;
 80024e4:	2700      	movs	r7, #0
		bt[x]->mask = mask;
 80024e6:	74a6      	strb	r6, [r4, #18]
		bt[x]->old_state = bt[x]->new_state = 0;
 80024e8:	7067      	strb	r7, [r4, #1]
 80024ea:	7027      	strb	r7, [r4, #0]
		bt[x]->mode = 0;
 80024ec:	74e7      	strb	r7, [r4, #19]
		bt[x]->flag = 0;
 80024ee:	6167      	str	r7, [r4, #20]
			ClearLog(x, i);
 80024f0:	b2f9      	uxtb	r1, r7
 80024f2:	0028      	movs	r0, r5
		for(i = 0; i < 8; i++) {
 80024f4:	3701      	adds	r7, #1
			ClearLog(x, i);
 80024f6:	f7ff ffe3 	bl	80024c0 <ClearLog>
		for(i = 0; i < 8; i++) {
 80024fa:	2f08      	cmp	r7, #8
 80024fc:	d1f8      	bne.n	80024f0 <KeyboardInit+0x14>
	for(x = 0; x < 6; x++) {
 80024fe:	3501      	adds	r5, #1
 8002500:	b2ed      	uxtb	r5, r5
 8002502:	3460      	adds	r4, #96	; 0x60
 8002504:	2d06      	cmp	r5, #6
 8002506:	d1ed      	bne.n	80024e4 <KeyboardInit+0x8>
}
 8002508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	20000858 	.word	0x20000858

08002510 <Evt_InitQueue>:
 * the data in the queue.
 */
void Evt_InitQueue(void)
{
	// clear queue by resetting the pointers
	evt_queue.head = evt_queue.tail = 0;
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <Evt_InitQueue+0x10>)
 8002512:	2200      	movs	r2, #0
 8002514:	0019      	movs	r1, r3
 8002516:	3380      	adds	r3, #128	; 0x80
 8002518:	3181      	adds	r1, #129	; 0x81
 800251a:	700a      	strb	r2, [r1, #0]
 800251c:	701a      	strb	r2, [r3, #0]
}
 800251e:	4770      	bx	lr
 8002520:	200006a0 	.word	0x200006a0

08002524 <HAL_printf_valist>:
/** Custom printf function in order to use HAL_UART_Transmit()
 * @param *fmt String to print
 * @param argp Parameters list
 */
void HAL_printf_valist(const char *fmt, va_list argp)
{
 8002524:	b510      	push	{r4, lr}
 8002526:	b0c0      	sub	sp, #256	; 0x100
 8002528:	000a      	movs	r2, r1
  char string[PRINT_BUFFER_SIZE];

  if (vsprintf(string, fmt, argp) > 0) {
 800252a:	0001      	movs	r1, r0
 800252c:	4668      	mov	r0, sp
 800252e:	f005 fc29 	bl	8007d84 <vsprintf>
 8002532:	4c0b      	ldr	r4, [pc, #44]	; (8002560 <HAL_printf_valist+0x3c>)
 8002534:	2800      	cmp	r0, #0
 8002536:	dd0e      	ble.n	8002556 <HAL_printf_valist+0x32>
    HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), HAL_MAX_DELAY); // send message via UART
 8002538:	4668      	mov	r0, sp
 800253a:	f7fd fde1 	bl	8000100 <strlen>
 800253e:	2301      	movs	r3, #1
 8002540:	4669      	mov	r1, sp
 8002542:	b282      	uxth	r2, r0
 8002544:	425b      	negs	r3, r3
  } else {
	HAL_UART_Transmit(&huart2, (uint8_t*)"E - Print\n", 14, HAL_MAX_DELAY);
 8002546:	0020      	movs	r0, r4
 8002548:	f003 fe98 	bl	800627c <HAL_UART_Transmit>
  }
  HAL_Delay(10);
 800254c:	200a      	movs	r0, #10
 800254e:	f001 fa57 	bl	8003a00 <HAL_Delay>
}
 8002552:	b040      	add	sp, #256	; 0x100
 8002554:	bd10      	pop	{r4, pc}
	HAL_UART_Transmit(&huart2, (uint8_t*)"E - Print\n", 14, HAL_MAX_DELAY);
 8002556:	2301      	movs	r3, #1
 8002558:	220e      	movs	r2, #14
 800255a:	425b      	negs	r3, r3
 800255c:	4901      	ldr	r1, [pc, #4]	; (8002564 <HAL_printf_valist+0x40>)
 800255e:	e7f2      	b.n	8002546 <HAL_printf_valist+0x22>
 8002560:	20000d0c 	.word	0x20000d0c
 8002564:	08009768 	.word	0x08009768

08002568 <logI>:
/** LOG procedure - Info
 * @param *fmt String to print
 * @param ... Parameters list
 */
void logI(const char* fmt, ...)
{
 8002568:	b40f      	push	{r0, r1, r2, r3}
 800256a:	b507      	push	{r0, r1, r2, lr}
 800256c:	a904      	add	r1, sp, #16
 800256e:	c901      	ldmia	r1!, {r0}
	va_list argp;

	va_start(argp, fmt);
 8002570:	9101      	str	r1, [sp, #4]
	HAL_printf_valist(fmt, argp);
 8002572:	f7ff ffd7 	bl	8002524 <HAL_printf_valist>
	logUSB(fmt, argp);
	va_end(argp);
}
 8002576:	b003      	add	sp, #12
 8002578:	bc08      	pop	{r3}
 800257a:	b004      	add	sp, #16
 800257c:	4718      	bx	r3
	...

08002580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002580:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002582:	2610      	movs	r6, #16
{
 8002584:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002586:	2234      	movs	r2, #52	; 0x34
 8002588:	2100      	movs	r1, #0
 800258a:	a80b      	add	r0, sp, #44	; 0x2c
 800258c:	f004 fb39 	bl	8006c02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002590:	0032      	movs	r2, r6
 8002592:	2100      	movs	r1, #0
 8002594:	4668      	mov	r0, sp
 8002596:	f004 fb34 	bl	8006c02 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800259a:	221c      	movs	r2, #28
 800259c:	2100      	movs	r1, #0
 800259e:	a804      	add	r0, sp, #16
 80025a0:	f004 fb2f 	bl	8006c02 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025a4:	2080      	movs	r0, #128	; 0x80
 80025a6:	0080      	lsls	r0, r0, #2
 80025a8:	f001 fe9c 	bl	80042e4 <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80025ac:	2118      	movs	r1, #24
 80025ae:	4a1b      	ldr	r2, [pc, #108]	; (800261c <SystemClock_Config+0x9c>)
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025b0:	2502      	movs	r5, #2
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80025b2:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80025b4:	2400      	movs	r4, #0
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80025b6:	438b      	bics	r3, r1
 80025b8:	65d3      	str	r3, [r2, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80025ba:	2305      	movs	r3, #5
 80025bc:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80025be:	23a0      	movs	r3, #160	; 0xa0
 80025c0:	02db      	lsls	r3, r3, #11
 80025c2:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80025c4:	2301      	movs	r3, #1
 80025c6:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025c8:	195b      	adds	r3, r3, r5
 80025ca:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 16;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	029b      	lsls	r3, r3, #10
 80025d0:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80025d2:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025d4:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80025d6:	059b      	lsls	r3, r3, #22
 80025d8:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025da:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80025dc:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 80025de:	9615      	str	r6, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025e0:	f001 feaa 	bl	8004338 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025e4:	2307      	movs	r3, #7
 80025e6:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025e8:	2380      	movs	r3, #128	; 0x80

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025ea:	0029      	movs	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025ec:	01db      	lsls	r3, r3, #7
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025ee:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025f0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025f2:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025f4:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025f6:	f002 f905 	bl	8004804 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 80025fa:	4b09      	ldr	r3, [pc, #36]	; (8002620 <SystemClock_Config+0xa0>)
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025fc:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 80025fe:	9304      	str	r3, [sp, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002606:	9406      	str	r4, [sp, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002608:	9407      	str	r4, [sp, #28]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800260a:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800260c:	f002 f9fc 	bl	8004a08 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 8002610:	f002 f9d4 	bl	80049bc <HAL_RCC_EnableCSS>
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableLSECSS();
 8002614:	f002 f9dc 	bl	80049d0 <HAL_RCC_EnableLSECSS>
}
 8002618:	b018      	add	sp, #96	; 0x60
 800261a:	bd70      	pop	{r4, r5, r6, pc}
 800261c:	40021000 	.word	0x40021000
 8002620:	00024042 	.word	0x00024042

08002624 <main>:
{
 8002624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002626:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 8002628:	f001 f9c4 	bl	80039b4 <HAL_Init>
  SystemClock_Config();
 800262c:	f7ff ffa8 	bl	8002580 <SystemClock_Config>
  BSP_SD_Init();
 8002630:	f000 faea 	bl	8002c08 <BSP_SD_Init>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	2214      	movs	r2, #20
 8002636:	2100      	movs	r1, #0
 8002638:	a80d      	add	r0, sp, #52	; 0x34
 800263a:	f004 fae2 	bl	8006c02 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800263e:	2104      	movs	r1, #4
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002640:	2520      	movs	r5, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002642:	2701      	movs	r7, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002644:	4bf8      	ldr	r3, [pc, #992]	; (8002a28 <main+0x404>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 8002646:	48f9      	ldr	r0, [pc, #996]	; (8002a2c <main+0x408>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002648:	6b5a      	ldr	r2, [r3, #52]	; 0x34

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FLASH_CS_Pin|LCD_RST_Pin|LCD_CS_Pin|LCD_WR_Pin 
 800264a:	4ef9      	ldr	r6, [pc, #996]	; (8002a30 <main+0x40c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800264c:	430a      	orrs	r2, r1
 800264e:	635a      	str	r2, [r3, #52]	; 0x34
 8002650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : SW_USER_Pin */
  GPIO_InitStruct.Pin = SW_USER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002652:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002654:	400a      	ands	r2, r1
 8002656:	9201      	str	r2, [sp, #4]
 8002658:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800265a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800265c:	3902      	subs	r1, #2
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800265e:	432a      	orrs	r2, r5
 8002660:	635a      	str	r2, [r3, #52]	; 0x34
 8002662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002664:	402a      	ands	r2, r5
 8002666:	9202      	str	r2, [sp, #8]
 8002668:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800266a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800266c:	433a      	orrs	r2, r7
 800266e:	635a      	str	r2, [r3, #52]	; 0x34
 8002670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002672:	403a      	ands	r2, r7
 8002674:	9203      	str	r2, [sp, #12]
 8002676:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800267a:	430a      	orrs	r2, r1
 800267c:	635a      	str	r2, [r3, #52]	; 0x34
 800267e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002680:	400a      	ands	r2, r1
 8002682:	9204      	str	r2, [sp, #16]
 8002684:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002688:	3106      	adds	r1, #6
 800268a:	430a      	orrs	r2, r1
 800268c:	635a      	str	r2, [r3, #52]	; 0x34
 800268e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOC, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 8002690:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002692:	400b      	ands	r3, r1
 8002694:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 8002696:	31f7      	adds	r1, #247	; 0xf7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002698:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 800269a:	f001 fd75 	bl	8004188 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800269e:	20a0      	movs	r0, #160	; 0xa0
 80026a0:	0029      	movs	r1, r5
 80026a2:	2200      	movs	r2, #0
 80026a4:	05c0      	lsls	r0, r0, #23
 80026a6:	f001 fd6f 	bl	8004188 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, FLASH_CS_Pin|LCD_RST_Pin|LCD_CS_Pin|LCD_WR_Pin 
 80026aa:	0031      	movs	r1, r6
 80026ac:	003a      	movs	r2, r7
 80026ae:	48e1      	ldr	r0, [pc, #900]	; (8002a34 <main+0x410>)
 80026b0:	f001 fd6a 	bl	8004188 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80026b4:	2180      	movs	r1, #128	; 0x80
 80026b6:	20a0      	movs	r0, #160	; 0xa0
 80026b8:	003a      	movs	r2, r7
 80026ba:	00c9      	lsls	r1, r1, #3
 80026bc:	05c0      	lsls	r0, r0, #23
 80026be:	f001 fd63 	bl	8004188 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SW_USER_Pin;
 80026c2:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(SW_USER_GPIO_Port, &GPIO_InitStruct);
 80026c4:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pin = SW_USER_Pin;
 80026c6:	019b      	lsls	r3, r3, #6
  HAL_GPIO_Init(SW_USER_GPIO_Port, &GPIO_InitStruct);
 80026c8:	48d8      	ldr	r0, [pc, #864]	; (8002a2c <main+0x408>)
  GPIO_InitStruct.Pin = SW_USER_Pin;
 80026ca:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026cc:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026ce:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SW_USER_GPIO_Port, &GPIO_InitStruct);
 80026d0:	f001 fc3c 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D0_Pin LCD_D1_Pin LCD_D2_Pin LCD_D3_Pin 
                           LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 80026d4:	23ff      	movs	r3, #255	; 0xff
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026d6:	a90d      	add	r1, sp, #52	; 0x34
 80026d8:	48d4      	ldr	r0, [pc, #848]	; (8002a2c <main+0x408>)
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 80026da:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e0:	970e      	str	r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026e2:	f001 fc33 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = LED_Pin|SD_CS_Pin;
 80026e6:	2384      	movs	r3, #132	; 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e8:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = LED_Pin|SD_CS_Pin;
 80026ea:	00db      	lsls	r3, r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ec:	a90d      	add	r1, sp, #52	; 0x34
 80026ee:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LED_Pin|SD_CS_Pin;
 80026f0:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f4:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f6:	970e      	str	r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f8:	f001 fc28 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_DN_Pin KEY_UP_Pin KEY_ENTER_Pin KEY_ESC_Pin */
  GPIO_InitStruct.Pin = KEY_DN_Pin|KEY_UP_Pin|KEY_ENTER_Pin|KEY_ESC_Pin;
 80026fc:	230f      	movs	r3, #15
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fe:	a90d      	add	r1, sp, #52	; 0x34
 8002700:	48cd      	ldr	r0, [pc, #820]	; (8002a38 <main+0x414>)
  GPIO_InitStruct.Pin = KEY_DN_Pin|KEY_UP_Pin|KEY_ENTER_Pin|KEY_ESC_Pin;
 8002702:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002704:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002706:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002708:	f001 fc20 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	015b      	lsls	r3, r3, #5
 8002710:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002712:	4bca      	ldr	r3, [pc, #808]	; (8002a3c <main+0x418>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002714:	a90d      	add	r1, sp, #52	; 0x34
 8002716:	48c8      	ldr	r0, [pc, #800]	; (8002a38 <main+0x414>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002718:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800271a:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271c:	f001 fc16 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_B_Pin ENC_A_Pin */
  GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 8002720:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002722:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 8002724:	009b      	lsls	r3, r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002726:	a90d      	add	r1, sp, #52	; 0x34
 8002728:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 800272a:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800272c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002730:	f001 fc0c 	bl	8003f4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FLASH_CS_Pin|LCD_RST_Pin|LCD_CS_Pin|LCD_WR_Pin 
                          |LCD_RD_Pin|LCD_DC_Pin|TOUCH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002734:	a90d      	add	r1, sp, #52	; 0x34
 8002736:	48bf      	ldr	r0, [pc, #764]	; (8002a34 <main+0x410>)
  GPIO_InitStruct.Pin = FLASH_CS_Pin|LCD_RST_Pin|LCD_CS_Pin|LCD_WR_Pin 
 8002738:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273c:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273e:	970e      	str	r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002740:	f001 fc04 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8002744:	a90d      	add	r1, sp, #52	; 0x34
 8002746:	48bb      	ldr	r0, [pc, #748]	; (8002a34 <main+0x410>)
  GPIO_InitStruct.Pin = SW_Pin;
 8002748:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800274a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800274c:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 800274e:	f001 fbfd 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_C_Pin ENC_D_Pin */
  GPIO_InitStruct.Pin = ENC_C_Pin|ENC_D_Pin;
 8002752:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002754:	a90d      	add	r1, sp, #52	; 0x34
 8002756:	48b8      	ldr	r0, [pc, #736]	; (8002a38 <main+0x414>)
  GPIO_InitStruct.Pin = ENC_C_Pin|ENC_D_Pin;
 8002758:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800275a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275e:	f001 fbf5 	bl	8003f4c <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002762:	220c      	movs	r2, #12
 8002764:	0021      	movs	r1, r4
 8002766:	a80d      	add	r0, sp, #52	; 0x34
 8002768:	f004 fa4b 	bl	8006c02 <memset>
  hadc1.Instance = ADC1;
 800276c:	4db4      	ldr	r5, [pc, #720]	; (8002a40 <main+0x41c>)
 800276e:	4bb5      	ldr	r3, [pc, #724]	; (8002a44 <main+0x420>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002770:	2680      	movs	r6, #128	; 0x80
  hadc1.Instance = ADC1;
 8002772:	602b      	str	r3, [r5, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002774:	2380      	movs	r3, #128	; 0x80
 8002776:	039b      	lsls	r3, r3, #14
 8002778:	612b      	str	r3, [r5, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800277a:	2304      	movs	r3, #4
 800277c:	616b      	str	r3, [r5, #20]
  hadc1.Init.NbrOfConversion = 2;
 800277e:	3b02      	subs	r3, #2
 8002780:	61eb      	str	r3, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002782:	19eb      	adds	r3, r5, r7
 8002784:	77dc      	strb	r4, [r3, #31]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002786:	002b      	movs	r3, r5
 8002788:	332c      	adds	r3, #44	; 0x2c
 800278a:	701c      	strb	r4, [r3, #0]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800278c:	2307      	movs	r3, #7
 800278e:	636b      	str	r3, [r5, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8002790:	3b01      	subs	r3, #1
 8002792:	63ab      	str	r3, [r5, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002794:	002b      	movs	r3, r5
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002796:	05f6      	lsls	r6, r6, #23
  hadc1.Init.OversamplingMode = DISABLE;
 8002798:	333c      	adds	r3, #60	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800279a:	0028      	movs	r0, r5
  hadc1.Init.OversamplingMode = DISABLE;
 800279c:	701c      	strb	r4, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800279e:	606e      	str	r6, [r5, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80027a0:	60ac      	str	r4, [r5, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027a2:	60ec      	str	r4, [r5, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80027a4:	762c      	strb	r4, [r5, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80027a6:	766c      	strb	r4, [r5, #25]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027a8:	626c      	str	r4, [r5, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027aa:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80027ac:	632c      	str	r4, [r5, #48]	; 0x30
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80027ae:	64ec      	str	r4, [r5, #76]	; 0x4c
  hadc1.Init.ContinuousConvMode = ENABLE;
 80027b0:	76af      	strb	r7, [r5, #26]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027b2:	f001 f93b 	bl	8003a2c <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027b6:	a90d      	add	r1, sp, #52	; 0x34
 80027b8:	0028      	movs	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80027ba:	940e      	str	r4, [sp, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80027bc:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfig.Channel = ADC_CHANNEL_0;
 80027be:	970d      	str	r7, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027c0:	f001 fa6c 	bl	8003c9c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 80027c4:	4ba0      	ldr	r3, [pc, #640]	; (8002a48 <main+0x424>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027c6:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.Channel = ADC_CHANNEL_1;
 80027c8:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80027ca:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027cc:	0028      	movs	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80027ce:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027d0:	f001 fa64 	bl	8003c9c <HAL_ADC_ConfigChannel>
  hi2c1.Instance = I2C1;
 80027d4:	4d9d      	ldr	r5, [pc, #628]	; (8002a4c <main+0x428>)
 80027d6:	4b9e      	ldr	r3, [pc, #632]	; (8002a50 <main+0x42c>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027d8:	0028      	movs	r0, r5
  hi2c1.Instance = I2C1;
 80027da:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x00300F38;
 80027dc:	4b9d      	ldr	r3, [pc, #628]	; (8002a54 <main+0x430>)
  hi2c1.Init.OwnAddress1 = 0;
 80027de:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.Timing = 0x00300F38;
 80027e0:	606b      	str	r3, [r5, #4]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027e2:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80027e4:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027e6:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027e8:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027ea:	622c      	str	r4, [r5, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027ec:	60ef      	str	r7, [r5, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027ee:	f001 fcd9 	bl	80041a4 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027f2:	0021      	movs	r1, r4
 80027f4:	0028      	movs	r0, r5
 80027f6:	f001 fd2b 	bl	8004250 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80027fa:	0021      	movs	r1, r4
 80027fc:	0028      	movs	r0, r5
 80027fe:	f001 fd4d 	bl	800429c <HAL_I2CEx_ConfigDigitalFilter>
  hrtc.Instance = RTC;
 8002802:	4895      	ldr	r0, [pc, #596]	; (8002a58 <main+0x434>)
 8002804:	4b95      	ldr	r3, [pc, #596]	; (8002a5c <main+0x438>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002806:	6084      	str	r4, [r0, #8]
  hrtc.Instance = RTC;
 8002808:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = 127;
 800280a:	237f      	movs	r3, #127	; 0x7f
 800280c:	60c3      	str	r3, [r0, #12]
  hrtc.Init.SynchPrediv = 255;
 800280e:	3380      	adds	r3, #128	; 0x80
 8002810:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002812:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002814:	6184      	str	r4, [r0, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002816:	61c4      	str	r4, [r0, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002818:	6206      	str	r6, [r0, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800281a:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800281c:	f002 fa06 	bl	8004c2c <HAL_RTC_Init>
  hspi1.Instance = SPI1;
 8002820:	488f      	ldr	r0, [pc, #572]	; (8002a60 <main+0x43c>)
 8002822:	4b90      	ldr	r3, [pc, #576]	; (8002a64 <main+0x440>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002824:	2682      	movs	r6, #130	; 0x82
  hspi1.Instance = SPI1;
 8002826:	6003      	str	r3, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002828:	23e0      	movs	r3, #224	; 0xe0
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	60c3      	str	r3, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800282e:	2308      	movs	r3, #8
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002830:	2580      	movs	r5, #128	; 0x80
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002832:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8002834:	3b01      	subs	r3, #1
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002836:	0076      	lsls	r6, r6, #1
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002838:	00ad      	lsls	r5, r5, #2
  hspi1.Init.CRCPolynomial = 7;
 800283a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800283c:	19db      	adds	r3, r3, r7
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800283e:	6046      	str	r6, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002840:	6084      	str	r4, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002842:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002844:	6144      	str	r4, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002846:	6185      	str	r5, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002848:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800284a:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800284c:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800284e:	6304      	str	r4, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002850:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002852:	f002 fabd 	bl	8004dd0 <HAL_SPI_Init>
  hspi2.Instance = SPI2;
 8002856:	4884      	ldr	r0, [pc, #528]	; (8002a68 <main+0x444>)
 8002858:	4b84      	ldr	r3, [pc, #528]	; (8002a6c <main+0x448>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800285a:	6046      	str	r6, [r0, #4]
  hspi2.Instance = SPI2;
 800285c:	6003      	str	r3, [r0, #0]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800285e:	23e0      	movs	r3, #224	; 0xe0
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	60c3      	str	r3, [r0, #12]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002864:	2308      	movs	r3, #8
 8002866:	61c3      	str	r3, [r0, #28]
  hspi2.Init.CRCPolynomial = 7;
 8002868:	3b01      	subs	r3, #1
 800286a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800286c:	19db      	adds	r3, r3, r7
 800286e:	6343      	str	r3, [r0, #52]	; 0x34
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002870:	6084      	str	r4, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002872:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002874:	6144      	str	r4, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002876:	6185      	str	r5, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002878:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800287a:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800287c:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800287e:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002880:	f002 faa6 	bl	8004dd0 <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002884:	0021      	movs	r1, r4
 8002886:	2210      	movs	r2, #16
 8002888:	a809      	add	r0, sp, #36	; 0x24
 800288a:	f004 f9ba 	bl	8006c02 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800288e:	0021      	movs	r1, r4
 8002890:	220c      	movs	r2, #12
 8002892:	a806      	add	r0, sp, #24
 8002894:	f004 f9b5 	bl	8006c02 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002898:	221c      	movs	r2, #28
 800289a:	0021      	movs	r1, r4
 800289c:	a80d      	add	r0, sp, #52	; 0x34
 800289e:	f004 f9b0 	bl	8006c02 <memset>
  htim3.Instance = TIM3;
 80028a2:	4e73      	ldr	r6, [pc, #460]	; (8002a70 <main+0x44c>)
 80028a4:	4b73      	ldr	r3, [pc, #460]	; (8002a74 <main+0x450>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028a6:	0030      	movs	r0, r6
  htim3.Instance = TIM3;
 80028a8:	6033      	str	r3, [r6, #0]
  htim3.Init.Period = 4095;
 80028aa:	4b73      	ldr	r3, [pc, #460]	; (8002a78 <main+0x454>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ac:	60b4      	str	r4, [r6, #8]
  htim3.Init.Period = 4095;
 80028ae:	60f3      	str	r3, [r6, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b0:	6134      	str	r4, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028b2:	61b4      	str	r4, [r6, #24]
  htim3.Init.Prescaler = 1;
 80028b4:	6077      	str	r7, [r6, #4]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028b6:	f002 ff51 	bl	800575c <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028ba:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028bc:	a909      	add	r1, sp, #36	; 0x24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028be:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028c0:	0030      	movs	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028c2:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028c4:	f003 f93a 	bl	8005b3c <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80028c8:	0030      	movs	r0, r6
 80028ca:	f002 ff62 	bl	8005792 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028ce:	a906      	add	r1, sp, #24
 80028d0:	0030      	movs	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028d2:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d4:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028d6:	f003 fa07 	bl	8005ce8 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028da:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028dc:	0022      	movs	r2, r4
 80028de:	a90d      	add	r1, sp, #52	; 0x34
 80028e0:	0030      	movs	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028e2:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80028e4:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028e6:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028e8:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028ea:	f002 ffc9 	bl	8005880 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028ee:	2204      	movs	r2, #4
 80028f0:	a90d      	add	r1, sp, #52	; 0x34
 80028f2:	0030      	movs	r0, r6
 80028f4:	f002 ffc4 	bl	8005880 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 80028f8:	0030      	movs	r0, r6
 80028fa:	f000 fe8f 	bl	800361c <HAL_TIM_MspPostInit>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80028fe:	0021      	movs	r1, r4
 8002900:	2210      	movs	r2, #16
 8002902:	a80d      	add	r0, sp, #52	; 0x34
 8002904:	f004 f97d 	bl	8006c02 <memset>
  htim14.Instance = TIM14;
 8002908:	4d5c      	ldr	r5, [pc, #368]	; (8002a7c <main+0x458>)
 800290a:	4b5d      	ldr	r3, [pc, #372]	; (8002a80 <main+0x45c>)
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800290c:	0028      	movs	r0, r5
  htim14.Instance = TIM14;
 800290e:	602b      	str	r3, [r5, #0]
  htim14.Init.Prescaler = 0;
 8002910:	606c      	str	r4, [r5, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002912:	60ac      	str	r4, [r5, #8]
  htim14.Init.Period = 0;
 8002914:	60ec      	str	r4, [r5, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002916:	612c      	str	r4, [r5, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002918:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800291a:	f002 ff1f 	bl	800575c <HAL_TIM_Base_Init>
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 800291e:	0028      	movs	r0, r5
 8002920:	f002 ff52 	bl	80057c8 <HAL_TIM_IC_Init>
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002924:	0022      	movs	r2, r4
 8002926:	a90d      	add	r1, sp, #52	; 0x34
 8002928:	0028      	movs	r0, r5
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800292a:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800292c:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigIC.ICFilter = 0;
 800292e:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002930:	970e      	str	r7, [sp, #56]	; 0x38
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002932:	f003 f859 	bl	80059e8 <HAL_TIM_IC_ConfigChannel>
  huart2.Instance = USART2;
 8002936:	4d53      	ldr	r5, [pc, #332]	; (8002a84 <main+0x460>)
 8002938:	4b53      	ldr	r3, [pc, #332]	; (8002a88 <main+0x464>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800293a:	0028      	movs	r0, r5
  huart2.Instance = USART2;
 800293c:	602b      	str	r3, [r5, #0]
  huart2.Init.BaudRate = 115200;
 800293e:	23e1      	movs	r3, #225	; 0xe1
 8002940:	025b      	lsls	r3, r3, #9
 8002942:	606b      	str	r3, [r5, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002944:	230c      	movs	r3, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002946:	60ac      	str	r4, [r5, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002948:	616b      	str	r3, [r5, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800294a:	60ec      	str	r4, [r5, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800294c:	612c      	str	r4, [r5, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800294e:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002950:	61ec      	str	r4, [r5, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002952:	622c      	str	r4, [r5, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002954:	626c      	str	r4, [r5, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002956:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002958:	f003 fd30 	bl	80063bc <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800295c:	0021      	movs	r1, r4
 800295e:	0028      	movs	r0, r5
 8002960:	f003 fdbc 	bl	80064dc <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002964:	0021      	movs	r1, r4
 8002966:	0028      	movs	r0, r5
 8002968:	f003 fdda 	bl	8006520 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 800296c:	0028      	movs	r0, r5
 800296e:	f003 fd97 	bl	80064a0 <HAL_UARTEx_EnableFifoMode>
  huart3.Instance = USART3;
 8002972:	4846      	ldr	r0, [pc, #280]	; (8002a8c <main+0x468>)
 8002974:	4b46      	ldr	r3, [pc, #280]	; (8002a90 <main+0x46c>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002976:	6084      	str	r4, [r0, #8]
  huart3.Instance = USART3;
 8002978:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 800297a:	23e1      	movs	r3, #225	; 0xe1
 800297c:	025b      	lsls	r3, r3, #9
 800297e:	6043      	str	r3, [r0, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002980:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002982:	60c4      	str	r4, [r0, #12]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002984:	6143      	str	r3, [r0, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002986:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002988:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800298a:	61c4      	str	r4, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800298c:	6204      	str	r4, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800298e:	6244      	str	r4, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002990:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002992:	f003 fd13 	bl	80063bc <HAL_UART_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8002996:	f003 fde7 	bl	8006568 <MX_FATFS_Init>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800299a:	0021      	movs	r1, r4
 800299c:	0030      	movs	r0, r6
 800299e:	f003 f971 	bl	8005c84 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80029a2:	2104      	movs	r1, #4
 80029a4:	0030      	movs	r0, r6
 80029a6:	f003 f96d 	bl	8005c84 <HAL_TIM_PWM_Start>
   __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 4095);			// PWM_CH1 = 4095 100% brilho
 80029aa:	6833      	ldr	r3, [r6, #0]
 80029ac:	4a32      	ldr	r2, [pc, #200]	; (8002a78 <main+0x454>)
	    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80029ae:	26a0      	movs	r6, #160	; 0xa0
   __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 4095);			// PWM_CH1 = 4095 100% brilho
 80029b0:	635a      	str	r2, [r3, #52]	; 0x34
   __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 4095);		    // PWM_CH2 = 4095
 80029b2:	639a      	str	r2, [r3, #56]	; 0x38
  ST7735_Init();
 80029b4:	f7ff fc8c 	bl	80022d0 <ST7735_Init>
  ST7735_Clear(0x0000);
 80029b8:	0020      	movs	r0, r4
 80029ba:	f7ff fd4b 	bl	8002454 <ST7735_Clear>
  tft_backlight(100);
 80029be:	2064      	movs	r0, #100	; 0x64
 80029c0:	f000 f87e 	bl	8002ac0 <tft_backlight>
  Evt_InitQueue();
 80029c4:	f7ff fda4 	bl	8002510 <Evt_InitQueue>
  KeyboardInit(0x01);
 80029c8:	0038      	movs	r0, r7
 80029ca:	f7ff fd87 	bl	80024dc <KeyboardInit>
  sprintf(buffer, "STM32G070 FatFs - INIC OK\n\r");
 80029ce:	4c31      	ldr	r4, [pc, #196]	; (8002a94 <main+0x470>)
 80029d0:	4931      	ldr	r1, [pc, #196]	; (8002a98 <main+0x474>)
 80029d2:	0020      	movs	r0, r4
 80029d4:	f004 f940 	bl	8006c58 <strcpy>
  HAL_UART_Transmit(&huart2, (uint8_t *)&buffer, strlen(buffer), 0xFFFF);
 80029d8:	0020      	movs	r0, r4
 80029da:	f7fd fb91 	bl	8000100 <strlen>
 80029de:	4b2f      	ldr	r3, [pc, #188]	; (8002a9c <main+0x478>)
 80029e0:	b282      	uxth	r2, r0
 80029e2:	0021      	movs	r1, r4
 80029e4:	0028      	movs	r0, r5
 80029e6:	f003 fc49 	bl	800627c <HAL_UART_Transmit>
	    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80029ea:	05f6      	lsls	r6, r6, #23
	    ProcessStatus = MX_FATFS_Process();
 80029ec:	f003 fdd0 	bl	8006590 <MX_FATFS_Process>
 80029f0:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <main+0x47c>)
	      sprintf(buffer, "STM32G070 FatFs ProcessStatus Error...\n\r");
 80029f2:	492c      	ldr	r1, [pc, #176]	; (8002aa4 <main+0x480>)
	    ProcessStatus = MX_FATFS_Process();
 80029f4:	6018      	str	r0, [r3, #0]
	    if (ProcessStatus == APP_ERROR)
 80029f6:	1c43      	adds	r3, r0, #1
 80029f8:	d002      	beq.n	8002a00 <main+0x3dc>
	    else if (ProcessStatus == APP_OK)
 80029fa:	2800      	cmp	r0, #0
 80029fc:	d10c      	bne.n	8002a18 <main+0x3f4>
	      sprintf(buffer, "STM32G070 FatFs - ProcessStatus OK...\n\r");
 80029fe:	492a      	ldr	r1, [pc, #168]	; (8002aa8 <main+0x484>)
 8002a00:	0020      	movs	r0, r4
 8002a02:	f004 f929 	bl	8006c58 <strcpy>
	      HAL_UART_Transmit(&huart2, (uint8_t *)&buffer, strlen(buffer), 0xFFFF);
 8002a06:	0020      	movs	r0, r4
 8002a08:	f7fd fb7a 	bl	8000100 <strlen>
 8002a0c:	4b23      	ldr	r3, [pc, #140]	; (8002a9c <main+0x478>)
 8002a0e:	b282      	uxth	r2, r0
 8002a10:	0021      	movs	r1, r4
 8002a12:	0028      	movs	r0, r5
 8002a14:	f003 fc32 	bl	800627c <HAL_UART_Transmit>
	    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002a18:	0030      	movs	r0, r6
 8002a1a:	2120      	movs	r1, #32
 8002a1c:	f001 fbba 	bl	8004194 <HAL_GPIO_TogglePin>
	    HAL_Delay(10);
 8002a20:	200a      	movs	r0, #10
 8002a22:	f000 ffed 	bl	8003a00 <HAL_Delay>
	    ProcessStatus = MX_FATFS_Process();
 8002a26:	e7e1      	b.n	80029ec <main+0x3c8>
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	50000800 	.word	0x50000800
 8002a30:	0000025f 	.word	0x0000025f
 8002a34:	50000c00 	.word	0x50000c00
 8002a38:	50000400 	.word	0x50000400
 8002a3c:	10110000 	.word	0x10110000
 8002a40:	20000c14 	.word	0x20000c14
 8002a44:	40012400 	.word	0x40012400
 8002a48:	04000002 	.word	0x04000002
 8002a4c:	20000b88 	.word	0x20000b88
 8002a50:	40005400 	.word	0x40005400
 8002a54:	00300f38 	.word	0x00300f38
 8002a58:	20000c7c 	.word	0x20000c7c
 8002a5c:	40002800 	.word	0x40002800
 8002a60:	20000ca8 	.word	0x20000ca8
 8002a64:	40013000 	.word	0x40013000
 8002a68:	20000a98 	.word	0x20000a98
 8002a6c:	40003800 	.word	0x40003800
 8002a70:	20000bd4 	.word	0x20000bd4
 8002a74:	40000400 	.word	0x40000400
 8002a78:	00000fff 	.word	0x00000fff
 8002a7c:	20000d98 	.word	0x20000d98
 8002a80:	40002000 	.word	0x40002000
 8002a84:	20000d0c 	.word	0x20000d0c
 8002a88:	40004400 	.word	0x40004400
 8002a8c:	20000afc 	.word	0x20000afc
 8002a90:	40004800 	.word	0x40004800
 8002a94:	20000728 	.word	0x20000728
 8002a98:	08009773 	.word	0x08009773
 8002a9c:	0000ffff 	.word	0x0000ffff
 8002aa0:	20000724 	.word	0x20000724
 8002aa4:	0800978f 	.word	0x0800978f
 8002aa8:	080097b8 	.word	0x080097b8

08002aac <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002aac:	4b03      	ldr	r3, [pc, #12]	; (8002abc <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002aae:	6802      	ldr	r2, [r0, #0]
{
 8002ab0:	b510      	push	{r4, lr}
  if (htim->Instance == TIM6) {
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d101      	bne.n	8002aba <HAL_TIM_PeriodElapsedCallback+0xe>
    HAL_IncTick();
 8002ab6:	f000 ff91 	bl	80039dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002aba:	bd10      	pop	{r4, pc}
 8002abc:	40001000 	.word	0x40001000

08002ac0 <tft_backlight>:
	        break;
	}
}

void tft_backlight(uint16_t value)
{
 8002ac0:	b510      	push	{r4, lr}
	if(value >= 0 && value <= 100) {
 8002ac2:	2864      	cmp	r0, #100	; 0x64
 8002ac4:	d80a      	bhi.n	8002adc <tft_backlight+0x1c>
		tft_pwm = value * 40;
 8002ac6:	2128      	movs	r1, #40	; 0x28
 8002ac8:	4341      	muls	r1, r0
 8002aca:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <tft_backlight+0x20>)
 8002acc:	b289      	uxth	r1, r1
 8002ace:	8019      	strh	r1, [r3, #0]
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, tft_pwm);		// PWM_CH1 = TFT
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <tft_backlight+0x24>)
		//__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, tft_pwm);		// PWM_CH2 = TFT
		logI("I - TFT_PWM: %ld\n\r", tft_pwm);
 8002ad2:	4805      	ldr	r0, [pc, #20]	; (8002ae8 <tft_backlight+0x28>)
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, tft_pwm);		// PWM_CH1 = TFT
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6359      	str	r1, [r3, #52]	; 0x34
		logI("I - TFT_PWM: %ld\n\r", tft_pwm);
 8002ad8:	f7ff fd46 	bl	8002568 <logI>
	}
}
 8002adc:	bd10      	pop	{r4, pc}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	20000c78 	.word	0x20000c78
 8002ae4:	20000bd4 	.word	0x20000bd4
 8002ae8:	080097e0 	.word	0x080097e0

08002aec <SD_ReadData>:
  * @brief  Waits a data until a value different from SD_DUMMY_BITE
  * @param  None
  * @retval the value read
  */
uint8_t SD_ReadData(void)
{
 8002aec:	b510      	push	{r4, lr}
 8002aee:	2408      	movs	r4, #8
  uint8_t timeout = 0x08;
  uint8_t readvalue;

  /* Check if response is got or a timeout is happen */
  do {
    readvalue = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002af0:	20ff      	movs	r0, #255	; 0xff
 8002af2:	f000 fee8 	bl	80038c6 <SD_IO_WriteByte>
    timeout--;

  }while ((readvalue == SD_DUMMY_BYTE) && timeout);
 8002af6:	28ff      	cmp	r0, #255	; 0xff
 8002af8:	d103      	bne.n	8002b02 <SD_ReadData+0x16>
 8002afa:	3c01      	subs	r4, #1
 8002afc:	b2e4      	uxtb	r4, r4
 8002afe:	2c00      	cmp	r4, #0
 8002b00:	d1f6      	bne.n	8002af0 <SD_ReadData+0x4>

  /* Right response got */
  return readvalue;
}
 8002b02:	bd10      	pop	{r4, pc}

08002b04 <SD_SendCmd>:
{
 8002b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b06:	b087      	sub	sp, #28
 8002b08:	0004      	movs	r4, r0
 8002b0a:	a80c      	add	r0, sp, #48	; 0x30
 8002b0c:	7805      	ldrb	r5, [r0, #0]
  frame[0] = (Cmd | 0x40);         /* Construct byte 1 */
 8002b0e:	2040      	movs	r0, #64	; 0x40
 8002b10:	4301      	orrs	r1, r0
 8002b12:	a802      	add	r0, sp, #8
 8002b14:	7001      	strb	r1, [r0, #0]
  frame[1] = (uint8_t)(Arg >> 24); /* Construct byte 2 */
 8002b16:	0e11      	lsrs	r1, r2, #24
 8002b18:	7041      	strb	r1, [r0, #1]
  frame[2] = (uint8_t)(Arg >> 16); /* Construct byte 3 */
 8002b1a:	0c11      	lsrs	r1, r2, #16
 8002b1c:	7081      	strb	r1, [r0, #2]
  frame[4] = (uint8_t)(Arg);       /* Construct byte 5 */
 8002b1e:	7102      	strb	r2, [r0, #4]
  frame[3] = (uint8_t)(Arg >> 8);  /* Construct byte 4 */
 8002b20:	0a11      	lsrs	r1, r2, #8
  frame[5] = (Crc | 0x01);         /* Construct byte 6 */
 8002b22:	2201      	movs	r2, #1
 8002b24:	4313      	orrs	r3, r2
  frame[3] = (uint8_t)(Arg >> 8);  /* Construct byte 4 */
 8002b26:	70c1      	strb	r1, [r0, #3]
  frame[5] = (Crc | 0x01);         /* Construct byte 6 */
 8002b28:	7143      	strb	r3, [r0, #5]
  SD_IO_CSState(0);
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f000 feba 	bl	80038a4 <SD_IO_CSState>
  SD_IO_WriteReadData(frame, frameout, SD_CMD_LENGTH); /* Send the Cmd bytes */
 8002b30:	2206      	movs	r2, #6
 8002b32:	a904      	add	r1, sp, #16
 8002b34:	a802      	add	r0, sp, #8
 8002b36:	f000 fec2 	bl	80038be <SD_IO_WriteReadData>
  switch(Answer)
 8002b3a:	2d05      	cmp	r5, #5
 8002b3c:	d84a      	bhi.n	8002bd4 <SD_SendCmd+0xd0>
 8002b3e:	0028      	movs	r0, r5
 8002b40:	f7fd fae6 	bl	8000110 <__gnu_thumb1_case_uqi>
 8002b44:	352c1403 	.word	0x352c1403
 8002b48:	3548      	.short	0x3548
    retr.r1 = SD_ReadData();
 8002b4a:	f7ff ffcf 	bl	8002aec <SD_ReadData>
 8002b4e:	0007      	movs	r7, r0
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 8002b50:	20ff      	movs	r0, #255	; 0xff
 8002b52:	0005      	movs	r5, r0
 8002b54:	0006      	movs	r6, r0
 8002b56:	9001      	str	r0, [sp, #4]
  return retr;
 8002b58:	466b      	mov	r3, sp
 8002b5a:	7120      	strb	r0, [r4, #4]
}
 8002b5c:	0020      	movs	r0, r4
  return retr;
 8002b5e:	791b      	ldrb	r3, [r3, #4]
 8002b60:	7027      	strb	r7, [r4, #0]
 8002b62:	7066      	strb	r6, [r4, #1]
 8002b64:	70a5      	strb	r5, [r4, #2]
 8002b66:	70e3      	strb	r3, [r4, #3]
}
 8002b68:	b007      	add	sp, #28
 8002b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    retr.r1 = SD_ReadData();
 8002b6c:	f7ff ffbe 	bl	8002aec <SD_ReadData>
 8002b70:	0007      	movs	r7, r0
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002b72:	20ff      	movs	r0, #255	; 0xff
 8002b74:	f000 fea7 	bl	80038c6 <SD_IO_WriteByte>
 8002b78:	0006      	movs	r6, r0
    SD_IO_CSState(1);
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	f000 fe92 	bl	80038a4 <SD_IO_CSState>
    HAL_Delay(1);
 8002b80:	2001      	movs	r0, #1
 8002b82:	f000 ff3d 	bl	8003a00 <HAL_Delay>
    SD_IO_CSState(0);
 8002b86:	2000      	movs	r0, #0
 8002b88:	f000 fe8c 	bl	80038a4 <SD_IO_CSState>
    while (SD_IO_WriteByte(SD_DUMMY_BYTE) != 0xFF);
 8002b8c:	20ff      	movs	r0, #255	; 0xff
 8002b8e:	f000 fe9a 	bl	80038c6 <SD_IO_WriteByte>
 8002b92:	28ff      	cmp	r0, #255	; 0xff
 8002b94:	d1fa      	bne.n	8002b8c <SD_SendCmd+0x88>
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 8002b96:	9001      	str	r0, [sp, #4]
 8002b98:	0005      	movs	r5, r0
    break;
 8002b9a:	e7dd      	b.n	8002b58 <SD_SendCmd+0x54>
    retr.r1 = SD_ReadData();
 8002b9c:	f7ff ffa6 	bl	8002aec <SD_ReadData>
 8002ba0:	0007      	movs	r7, r0
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002ba2:	20ff      	movs	r0, #255	; 0xff
 8002ba4:	f000 fe8f 	bl	80038c6 <SD_IO_WriteByte>
 8002ba8:	0006      	movs	r6, r0
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 8002baa:	20ff      	movs	r0, #255	; 0xff
 8002bac:	e7f3      	b.n	8002b96 <SD_SendCmd+0x92>
    retr.r1 = SD_ReadData();
 8002bae:	f7ff ff9d 	bl	8002aec <SD_ReadData>
 8002bb2:	0007      	movs	r7, r0
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002bb4:	20ff      	movs	r0, #255	; 0xff
 8002bb6:	f000 fe86 	bl	80038c6 <SD_IO_WriteByte>
 8002bba:	0006      	movs	r6, r0
    retr.r3 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002bbc:	20ff      	movs	r0, #255	; 0xff
 8002bbe:	f000 fe82 	bl	80038c6 <SD_IO_WriteByte>
 8002bc2:	0005      	movs	r5, r0
    retr.r4 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002bc4:	20ff      	movs	r0, #255	; 0xff
 8002bc6:	f000 fe7e 	bl	80038c6 <SD_IO_WriteByte>
 8002bca:	9001      	str	r0, [sp, #4]
    retr.r5 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002bcc:	20ff      	movs	r0, #255	; 0xff
 8002bce:	f000 fe7a 	bl	80038c6 <SD_IO_WriteByte>
    break;
 8002bd2:	e7c1      	b.n	8002b58 <SD_SendCmd+0x54>
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 8002bd4:	20ff      	movs	r0, #255	; 0xff
 8002bd6:	9001      	str	r0, [sp, #4]
 8002bd8:	0005      	movs	r5, r0
 8002bda:	0006      	movs	r6, r0
 8002bdc:	0007      	movs	r7, r0
 8002bde:	e7bb      	b.n	8002b58 <SD_SendCmd+0x54>

08002be0 <SD_WaitData.constprop.0>:
/**
  * @brief  Waits a data from the SD card
  * @param  data : Expected data from the SD card
  * @retval BSP_SD_OK or BSP_SD_TIMEOUT
  */
uint8_t SD_WaitData(uint8_t data)
 8002be0:	b510      	push	{r4, lr}
{
  uint16_t timeout = 0xFFFF;
 8002be2:	4c08      	ldr	r4, [pc, #32]	; (8002c04 <SD_WaitData.constprop.0+0x24>)
  uint8_t readvalue;

  /* Check if response is got or a timeout is happen */

  do {
    readvalue = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002be4:	20ff      	movs	r0, #255	; 0xff
 8002be6:	f000 fe6e 	bl	80038c6 <SD_IO_WriteByte>
    timeout--;
 8002bea:	3c01      	subs	r4, #1
 8002bec:	b2a4      	uxth	r4, r4
  }while ((readvalue != data) && timeout);
 8002bee:	28fe      	cmp	r0, #254	; 0xfe
 8002bf0:	d003      	beq.n	8002bfa <SD_WaitData.constprop.0+0x1a>
 8002bf2:	2c00      	cmp	r4, #0
 8002bf4:	d1f6      	bne.n	8002be4 <SD_WaitData.constprop.0+0x4>

  if (timeout == 0)
  {
    /* After time out */
    return BSP_SD_TIMEOUT;
 8002bf6:	2002      	movs	r0, #2
  }

  /* Right response got */
  return BSP_SD_OK;
}
 8002bf8:	bd10      	pop	{r4, pc}
  return BSP_SD_OK;
 8002bfa:	4260      	negs	r0, r4
 8002bfc:	4160      	adcs	r0, r4
 8002bfe:	0040      	lsls	r0, r0, #1
 8002c00:	e7fa      	b.n	8002bf8 <SD_WaitData.constprop.0+0x18>
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	0000ffff 	.word	0x0000ffff

08002c08 <BSP_SD_Init>:
{
 8002c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c0a:	b089      	sub	sp, #36	; 0x24
  SD_IO_Init();
 8002c0c:	f000 fe6a 	bl	80038e4 <SD_IO_Init>
  SdStatus = SD_PRESENT;
 8002c10:	2201      	movs	r2, #1
  __IO uint8_t counter = 0;
 8002c12:	250f      	movs	r5, #15
  SdStatus = SD_PRESENT;
 8002c14:	4b5b      	ldr	r3, [pc, #364]	; (8002d84 <BSP_SD_Init+0x17c>)
 8002c16:	701a      	strb	r2, [r3, #0]
  __IO uint8_t counter = 0;
 8002c18:	ab02      	add	r3, sp, #8
 8002c1a:	18ed      	adds	r5, r5, r3
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	702b      	strb	r3, [r5, #0]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8002c20:	2100      	movs	r1, #0
    counter++;
 8002c22:	782b      	ldrb	r3, [r5, #0]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8002c24:	ac06      	add	r4, sp, #24
    counter++;
 8002c26:	3301      	adds	r3, #1
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	702b      	strb	r3, [r5, #0]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8002c2c:	000a      	movs	r2, r1
 8002c2e:	2395      	movs	r3, #149	; 0x95
 8002c30:	9100      	str	r1, [sp, #0]
 8002c32:	0020      	movs	r0, r4
 8002c34:	f7ff ff66 	bl	8002b04 <SD_SendCmd>
    SD_IO_CSState(1);
 8002c38:	2001      	movs	r0, #1
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8002c3a:	7827      	ldrb	r7, [r4, #0]
    SD_IO_CSState(1);
 8002c3c:	f000 fe32 	bl	80038a4 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002c40:	20ff      	movs	r0, #255	; 0xff
 8002c42:	f000 fe40 	bl	80038c6 <SD_IO_WriteByte>
    if(counter >= SD_MAX_TRY)
 8002c46:	782b      	ldrb	r3, [r5, #0]
 8002c48:	2b63      	cmp	r3, #99	; 0x63
 8002c4a:	d903      	bls.n	8002c54 <BSP_SD_Init+0x4c>
      return BSP_SD_ERROR;
 8002c4c:	2501      	movs	r5, #1
}
 8002c4e:	0028      	movs	r0, r5
 8002c50:	b009      	add	sp, #36	; 0x24
 8002c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while(response.r1 != SD_R1_IN_IDLE_STATE);
 8002c54:	2f01      	cmp	r7, #1
 8002c56:	d1e3      	bne.n	8002c20 <BSP_SD_Init+0x18>
  response = SD_SendCmd(SD_CMD_SEND_IF_COND, 0x1AA, 0x87, SD_ANSWER_R7_EXPECTED);
 8002c58:	2305      	movs	r3, #5
 8002c5a:	22d5      	movs	r2, #213	; 0xd5
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	0052      	lsls	r2, r2, #1
 8002c60:	3382      	adds	r3, #130	; 0x82
 8002c62:	2108      	movs	r1, #8
 8002c64:	0020      	movs	r0, r4
 8002c66:	f7ff ff4d 	bl	8002b04 <SD_SendCmd>
 8002c6a:	7825      	ldrb	r5, [r4, #0]
  SD_IO_CSState(1);
 8002c6c:	0038      	movs	r0, r7
 8002c6e:	f000 fe19 	bl	80038a4 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002c72:	20ff      	movs	r0, #255	; 0xff
 8002c74:	f000 fe27 	bl	80038c6 <SD_IO_WriteByte>
  if((response.r1  & SD_R1_ILLEGAL_COMMAND) == SD_R1_ILLEGAL_COMMAND)
 8002c78:	076b      	lsls	r3, r5, #29
 8002c7a:	d523      	bpl.n	8002cc4 <BSP_SD_Init+0xbc>
      response = SD_SendCmd(SD_CMD_APP_CMD, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8002c7c:	26ff      	movs	r6, #255	; 0xff
 8002c7e:	2500      	movs	r5, #0
 8002c80:	0033      	movs	r3, r6
 8002c82:	002a      	movs	r2, r5
 8002c84:	2137      	movs	r1, #55	; 0x37
 8002c86:	0020      	movs	r0, r4
 8002c88:	9500      	str	r5, [sp, #0]
 8002c8a:	f7ff ff3b 	bl	8002b04 <SD_SendCmd>
      SD_IO_CSState(1);
 8002c8e:	0038      	movs	r0, r7
 8002c90:	f000 fe08 	bl	80038a4 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002c94:	0030      	movs	r0, r6
 8002c96:	f000 fe16 	bl	80038c6 <SD_IO_WriteByte>
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8002c9a:	002a      	movs	r2, r5
 8002c9c:	2129      	movs	r1, #41	; 0x29
 8002c9e:	0033      	movs	r3, r6
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	9500      	str	r5, [sp, #0]
 8002ca4:	f7ff ff2e 	bl	8002b04 <SD_SendCmd>
 8002ca8:	7823      	ldrb	r3, [r4, #0]
      SD_IO_CSState(1);
 8002caa:	0038      	movs	r0, r7
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8002cac:	9303      	str	r3, [sp, #12]
      SD_IO_CSState(1);
 8002cae:	f000 fdf9 	bl	80038a4 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002cb2:	0030      	movs	r0, r6
 8002cb4:	f000 fe07 	bl	80038c6 <SD_IO_WriteByte>
    while(response.r1 == SD_R1_IN_IDLE_STATE);
 8002cb8:	9b03      	ldr	r3, [sp, #12]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d0df      	beq.n	8002c7e <BSP_SD_Init+0x76>
    flag_SDHC = 0;
 8002cbe:	4b32      	ldr	r3, [pc, #200]	; (8002d88 <BSP_SD_Init+0x180>)
 8002cc0:	801d      	strh	r5, [r3, #0]
 8002cc2:	e7c4      	b.n	8002c4e <BSP_SD_Init+0x46>
  else if(response.r1 == SD_R1_IN_IDLE_STATE)
 8002cc4:	2d01      	cmp	r5, #1
 8002cc6:	d1c1      	bne.n	8002c4c <BSP_SD_Init+0x44>
      response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8002cc8:	27ff      	movs	r7, #255	; 0xff
 8002cca:	2600      	movs	r6, #0
 8002ccc:	003b      	movs	r3, r7
 8002cce:	0032      	movs	r2, r6
 8002cd0:	2137      	movs	r1, #55	; 0x37
 8002cd2:	9600      	str	r6, [sp, #0]
 8002cd4:	0020      	movs	r0, r4
 8002cd6:	f7ff ff15 	bl	8002b04 <SD_SendCmd>
      SD_IO_CSState(1);
 8002cda:	0028      	movs	r0, r5
 8002cdc:	f000 fde2 	bl	80038a4 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002ce0:	0038      	movs	r0, r7
 8002ce2:	f000 fdf0 	bl	80038c6 <SD_IO_WriteByte>
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x40000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8002ce6:	2280      	movs	r2, #128	; 0x80
 8002ce8:	9600      	str	r6, [sp, #0]
 8002cea:	003b      	movs	r3, r7
 8002cec:	05d2      	lsls	r2, r2, #23
 8002cee:	2129      	movs	r1, #41	; 0x29
 8002cf0:	0020      	movs	r0, r4
 8002cf2:	f7ff ff07 	bl	8002b04 <SD_SendCmd>
 8002cf6:	7826      	ldrb	r6, [r4, #0]
      SD_IO_CSState(1);
 8002cf8:	0028      	movs	r0, r5
 8002cfa:	f000 fdd3 	bl	80038a4 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002cfe:	0038      	movs	r0, r7
 8002d00:	f000 fde1 	bl	80038c6 <SD_IO_WriteByte>
    while(response.r1 == SD_R1_IN_IDLE_STATE);
 8002d04:	2e01      	cmp	r6, #1
 8002d06:	d0e0      	beq.n	8002cca <BSP_SD_Init+0xc2>
        response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8002d08:	25ff      	movs	r5, #255	; 0xff
    if((response.r1 & SD_R1_ILLEGAL_COMMAND) == SD_R1_ILLEGAL_COMMAND)
 8002d0a:	0773      	lsls	r3, r6, #29
 8002d0c:	d417      	bmi.n	8002d3e <BSP_SD_Init+0x136>
    response = SD_SendCmd(SD_CMD_READ_OCR, 0x00000000, 0xFF, SD_ANSWER_R3_EXPECTED);
 8002d0e:	2303      	movs	r3, #3
 8002d10:	2200      	movs	r2, #0
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	213a      	movs	r1, #58	; 0x3a
 8002d16:	33fc      	adds	r3, #252	; 0xfc
 8002d18:	0020      	movs	r0, r4
 8002d1a:	f7ff fef3 	bl	8002b04 <SD_SendCmd>
 8002d1e:	7825      	ldrb	r5, [r4, #0]
    SD_IO_CSState(1);
 8002d20:	2001      	movs	r0, #1
 8002d22:	f000 fdbf 	bl	80038a4 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002d26:	20ff      	movs	r0, #255	; 0xff
 8002d28:	f000 fdcd 	bl	80038c6 <SD_IO_WriteByte>
    if(response.r1 != SD_R1_NO_ERROR)
 8002d2c:	2d00      	cmp	r5, #0
 8002d2e:	d000      	beq.n	8002d32 <BSP_SD_Init+0x12a>
 8002d30:	e78c      	b.n	8002c4c <BSP_SD_Init+0x44>
    flag_SDHC = (response.r2 & 0x40) >> 6;
 8002d32:	7863      	ldrb	r3, [r4, #1]
 8002d34:	4a14      	ldr	r2, [pc, #80]	; (8002d88 <BSP_SD_Init+0x180>)
 8002d36:	065b      	lsls	r3, r3, #25
 8002d38:	0fdb      	lsrs	r3, r3, #31
 8002d3a:	8013      	strh	r3, [r2, #0]
 8002d3c:	e787      	b.n	8002c4e <BSP_SD_Init+0x46>
        response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8002d3e:	2600      	movs	r6, #0
 8002d40:	002b      	movs	r3, r5
 8002d42:	0032      	movs	r2, r6
 8002d44:	2137      	movs	r1, #55	; 0x37
 8002d46:	0020      	movs	r0, r4
 8002d48:	9600      	str	r6, [sp, #0]
 8002d4a:	f7ff fedb 	bl	8002b04 <SD_SendCmd>
 8002d4e:	7827      	ldrb	r7, [r4, #0]
        SD_IO_CSState(1);
 8002d50:	2001      	movs	r0, #1
 8002d52:	f000 fda7 	bl	80038a4 <SD_IO_CSState>
        SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002d56:	0028      	movs	r0, r5
 8002d58:	f000 fdb5 	bl	80038c6 <SD_IO_WriteByte>
        if(response.r1 != SD_R1_IN_IDLE_STATE)
 8002d5c:	2f01      	cmp	r7, #1
 8002d5e:	d000      	beq.n	8002d62 <BSP_SD_Init+0x15a>
 8002d60:	e774      	b.n	8002c4c <BSP_SD_Init+0x44>
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8002d62:	0032      	movs	r2, r6
 8002d64:	9600      	str	r6, [sp, #0]
 8002d66:	002b      	movs	r3, r5
 8002d68:	2129      	movs	r1, #41	; 0x29
 8002d6a:	0020      	movs	r0, r4
 8002d6c:	f7ff feca 	bl	8002b04 <SD_SendCmd>
 8002d70:	7826      	ldrb	r6, [r4, #0]
        SD_IO_CSState(1);
 8002d72:	0038      	movs	r0, r7
 8002d74:	f000 fd96 	bl	80038a4 <SD_IO_CSState>
        SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002d78:	0028      	movs	r0, r5
 8002d7a:	f000 fda4 	bl	80038c6 <SD_IO_WriteByte>
      while(response.r1 == SD_R1_IN_IDLE_STATE);
 8002d7e:	2e01      	cmp	r6, #1
 8002d80:	d0dd      	beq.n	8002d3e <BSP_SD_Init+0x136>
 8002d82:	e7c4      	b.n	8002d0e <BSP_SD_Init+0x106>
 8002d84:	2000078c 	.word	0x2000078c
 8002d88:	2000078e 	.word	0x2000078e

08002d8c <BSP_SD_GetCardInfo>:
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8002d8c:	2200      	movs	r2, #0
{
 8002d8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d90:	b08b      	sub	sp, #44	; 0x2c
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8002d92:	ad04      	add	r5, sp, #16
 8002d94:	23ff      	movs	r3, #255	; 0xff
{
 8002d96:	0004      	movs	r4, r0
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8002d98:	9200      	str	r2, [sp, #0]
 8002d9a:	2109      	movs	r1, #9
 8002d9c:	0028      	movs	r0, r5
 8002d9e:	f7ff feb1 	bl	8002b04 <SD_SendCmd>
  if(response.r1 == SD_R1_NO_ERROR)
 8002da2:	782b      	ldrb	r3, [r5, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d030      	beq.n	8002e0a <BSP_SD_GetCardInfo+0x7e>
  uint8_t retr = BSP_SD_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	9303      	str	r3, [sp, #12]
  SD_IO_CSState(1);
 8002dac:	2001      	movs	r0, #1
 8002dae:	f000 fd79 	bl	80038a4 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002db2:	20ff      	movs	r0, #255	; 0xff
 8002db4:	f000 fd87 	bl	80038c6 <SD_IO_WriteByte>
  response = SD_SendCmd(SD_CMD_SEND_CID, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8002db8:	2200      	movs	r2, #0
 8002dba:	ad04      	add	r5, sp, #16
 8002dbc:	23ff      	movs	r3, #255	; 0xff
 8002dbe:	9200      	str	r2, [sp, #0]
 8002dc0:	210a      	movs	r1, #10
 8002dc2:	0028      	movs	r0, r5
 8002dc4:	f7ff fe9e 	bl	8002b04 <SD_SendCmd>
  if(response.r1 == SD_R1_NO_ERROR)
 8002dc8:	782b      	ldrb	r3, [r5, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d100      	bne.n	8002dd0 <BSP_SD_GetCardInfo+0x44>
 8002dce:	e12b      	b.n	8003028 <BSP_SD_GetCardInfo+0x29c>
  uint8_t retr = BSP_SD_ERROR;
 8002dd0:	2601      	movs	r6, #1
  SD_IO_CSState(1);
 8002dd2:	2001      	movs	r0, #1
 8002dd4:	f000 fd66 	bl	80038a4 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002dd8:	20ff      	movs	r0, #255	; 0xff
 8002dda:	f000 fd74 	bl	80038c6 <SD_IO_WriteByte>
  status|= SD_GetCIDRegister(&(pCardInfo->Cid));
 8002dde:	9b03      	ldr	r3, [sp, #12]
 8002de0:	431e      	orrs	r6, r3
  if(flag_SDHC == 1 )
 8002de2:	4bca      	ldr	r3, [pc, #808]	; (800310c <BSP_SD_GetCardInfo+0x380>)
  status|= SD_GetCIDRegister(&(pCardInfo->Cid));
 8002de4:	b2f0      	uxtb	r0, r6
  if(flag_SDHC == 1 )
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d000      	beq.n	8002dee <BSP_SD_GetCardInfo+0x62>
 8002dec:	e17b      	b.n	80030e6 <BSP_SD_GetCardInfo+0x35a>
    pCardInfo->LogBlockSize = 512;
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	63e3      	str	r3, [r4, #60]	; 0x3c
    pCardInfo->CardBlockSize = 512;
 8002df4:	6363      	str	r3, [r4, #52]	; 0x34
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v2.DeviceSize + 1) * 1024 * pCardInfo->LogBlockSize;
 8002df6:	68a3      	ldr	r3, [r4, #8]
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	0a9b      	lsrs	r3, r3, #10
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	04db      	lsls	r3, r3, #19
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8002e00:	6323      	str	r3, [r4, #48]	; 0x30
    pCardInfo->LogBlockNbr = (pCardInfo->CardCapacity) / (pCardInfo->LogBlockSize);
 8002e02:	0a5b      	lsrs	r3, r3, #9
 8002e04:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002e06:	b00b      	add	sp, #44	; 0x2c
 8002e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 8002e0a:	f7ff fee9 	bl	8002be0 <SD_WaitData.constprop.0>
 8002e0e:	9003      	str	r0, [sp, #12]
 8002e10:	2800      	cmp	r0, #0
 8002e12:	d1c9      	bne.n	8002da8 <BSP_SD_GetCardInfo+0x1c>
 8002e14:	0006      	movs	r6, r0
        CSD_Tab[counter] = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002e16:	20ff      	movs	r0, #255	; 0xff
 8002e18:	f000 fd55 	bl	80038c6 <SD_IO_WriteByte>
 8002e1c:	ad06      	add	r5, sp, #24
 8002e1e:	5570      	strb	r0, [r6, r5]
 8002e20:	3601      	adds	r6, #1
      for (counter = 0; counter < 16; counter++)
 8002e22:	2e10      	cmp	r6, #16
 8002e24:	d1f7      	bne.n	8002e16 <BSP_SD_GetCardInfo+0x8a>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002e26:	20ff      	movs	r0, #255	; 0xff
 8002e28:	f000 fd4d 	bl	80038c6 <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002e2c:	20ff      	movs	r0, #255	; 0xff
 8002e2e:	f000 fd4a 	bl	80038c6 <SD_IO_WriteByte>
      Csd->PartBlockRead   = (CSD_Tab[6] & 0x80) >> 7;
 8002e32:	2001      	movs	r0, #1
      Csd->CSDStruct = (CSD_Tab[0] & 0xC0) >> 6;
 8002e34:	782b      	ldrb	r3, [r5, #0]
      Csd->Reserved1 =  CSD_Tab[0] & 0x3F;
 8002e36:	009a      	lsls	r2, r3, #2
 8002e38:	099b      	lsrs	r3, r3, #6
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	7023      	strb	r3, [r4, #0]
      Csd->TAAC = CSD_Tab[1];
 8002e3e:	786b      	ldrb	r3, [r5, #1]
 8002e40:	7063      	strb	r3, [r4, #1]
      Csd->NSAC = CSD_Tab[2];
 8002e42:	78ab      	ldrb	r3, [r5, #2]
 8002e44:	70a3      	strb	r3, [r4, #2]
      Csd->MaxBusClkFrec = CSD_Tab[3];
 8002e46:	78eb      	ldrb	r3, [r5, #3]
 8002e48:	70e3      	strb	r3, [r4, #3]
      Csd->CardComdClasses = (CSD_Tab[4] << 4) | ((CSD_Tab[5] & 0xF0) >> 4);
 8002e4a:	796a      	ldrb	r2, [r5, #5]
 8002e4c:	792b      	ldrb	r3, [r5, #4]
 8002e4e:	0911      	lsrs	r1, r2, #4
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	4319      	orrs	r1, r3
 8002e54:	88a3      	ldrh	r3, [r4, #4]
      Csd->RdBlockLen = CSD_Tab[5] & 0x0F;
 8002e56:	0112      	lsls	r2, r2, #4
      Csd->CardComdClasses = (CSD_Tab[4] << 4) | ((CSD_Tab[5] & 0xF0) >> 4);
 8002e58:	0b1b      	lsrs	r3, r3, #12
 8002e5a:	031b      	lsls	r3, r3, #12
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	80a3      	strh	r3, [r4, #4]
      Csd->RdBlockLen = CSD_Tab[5] & 0x0F;
 8002e60:	051b      	lsls	r3, r3, #20
 8002e62:	0f1b      	lsrs	r3, r3, #28
 8002e64:	4313      	orrs	r3, r2
 8002e66:	7163      	strb	r3, [r4, #5]
      Csd->PartBlockRead   = (CSD_Tab[6] & 0x80) >> 7;
 8002e68:	79ab      	ldrb	r3, [r5, #6]
 8002e6a:	79a1      	ldrb	r1, [r4, #6]
 8002e6c:	09da      	lsrs	r2, r3, #7
 8002e6e:	4381      	bics	r1, r0
      Csd->WrBlockMisalign = (CSD_Tab[6] & 0x40) >> 6;
 8002e70:	119f      	asrs	r7, r3, #6
 8002e72:	4007      	ands	r7, r0
 8002e74:	430a      	orrs	r2, r1
 8002e76:	2102      	movs	r1, #2
 8002e78:	4087      	lsls	r7, r0
 8002e7a:	438a      	bics	r2, r1
      Csd->RdBlockMisalign = (CSD_Tab[6] & 0x20) >> 5;
 8002e7c:	433a      	orrs	r2, r7
 8002e7e:	2704      	movs	r7, #4
 8002e80:	1159      	asrs	r1, r3, #5
 8002e82:	4001      	ands	r1, r0
 8002e84:	0089      	lsls	r1, r1, #2
 8002e86:	43ba      	bics	r2, r7
      Csd->DSRImpl         = (CSD_Tab[6] & 0x10) >> 4;
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	2108      	movs	r1, #8
 8002e8c:	111f      	asrs	r7, r3, #4
 8002e8e:	4038      	ands	r0, r7
 8002e90:	438a      	bics	r2, r1
 8002e92:	00c0      	lsls	r0, r0, #3
 8002e94:	4302      	orrs	r2, r0
 8002e96:	71a2      	strb	r2, [r4, #6]
      if(flag_SDHC == 0)
 8002e98:	4a9c      	ldr	r2, [pc, #624]	; (800310c <BSP_SD_GetCardInfo+0x380>)
 8002e9a:	8811      	ldrh	r1, [r2, #0]
 8002e9c:	79ea      	ldrb	r2, [r5, #7]
 8002e9e:	2900      	cmp	r1, #0
 8002ea0:	d000      	beq.n	8002ea4 <BSP_SD_GetCardInfo+0x118>
 8002ea2:	e0a7      	b.n	8002ff4 <BSP_SD_GetCardInfo+0x268>
        Csd->version.v1.Reserved1 = ((CSD_Tab[6] & 0x0C) >> 2);
 8002ea4:	1098      	asrs	r0, r3, #2
 8002ea6:	3103      	adds	r1, #3
 8002ea8:	4008      	ands	r0, r1
 8002eaa:	7a21      	ldrb	r1, [r4, #8]
 8002eac:	3e0d      	subs	r6, #13
 8002eae:	43b1      	bics	r1, r6
 8002eb0:	4301      	orrs	r1, r0
 8002eb2:	7221      	strb	r1, [r4, #8]
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 8002eb4:	7a29      	ldrb	r1, [r5, #8]
                                    |  (CSD_Tab[7] << 2)
 8002eb6:	0090      	lsls	r0, r2, #2
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 8002eb8:	098a      	lsrs	r2, r1, #6
 8002eba:	4302      	orrs	r2, r0
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10)
 8002ebc:	029b      	lsls	r3, r3, #10
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 8002ebe:	4313      	orrs	r3, r2
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10)
 8002ec0:	4893      	ldr	r0, [pc, #588]	; (8003110 <BSP_SD_GetCardInfo+0x384>)
 8002ec2:	8922      	ldrh	r2, [r4, #8]
 8002ec4:	051b      	lsls	r3, r3, #20
 8002ec6:	4002      	ands	r2, r0
 8002ec8:	0c9b      	lsrs	r3, r3, #18
 8002eca:	4313      	orrs	r3, r2
        Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
 8002ecc:	2207      	movs	r2, #7
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10)
 8002ece:	8123      	strh	r3, [r4, #8]
        Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
 8002ed0:	7aa3      	ldrb	r3, [r4, #10]
 8002ed2:	10c8      	asrs	r0, r1, #3
 8002ed4:	4010      	ands	r0, r2
 8002ed6:	4393      	bics	r3, r2
        Csd->version.v1.MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07);
 8002ed8:	4303      	orrs	r3, r0
 8002eda:	4011      	ands	r1, r2
 8002edc:	2038      	movs	r0, #56	; 0x38
 8002ede:	40b1      	lsls	r1, r6
 8002ee0:	4383      	bics	r3, r0
 8002ee2:	430b      	orrs	r3, r1
 8002ee4:	72a3      	strb	r3, [r4, #10]
        Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0) >> 5;
 8002ee6:	7a6b      	ldrb	r3, [r5, #9]
 8002ee8:	7ae1      	ldrb	r1, [r4, #11]
 8002eea:	095f      	lsrs	r7, r3, #5
        Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 8002eec:	109e      	asrs	r6, r3, #2
        Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0) >> 5;
 8002eee:	4391      	bics	r1, r2
        Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 8002ef0:	4016      	ands	r6, r2
 8002ef2:	4339      	orrs	r1, r7
 8002ef4:	00f6      	lsls	r6, r6, #3
 8002ef6:	4381      	bics	r1, r0
 8002ef8:	4331      	orrs	r1, r6
 8002efa:	72e1      	strb	r1, [r4, #11]
        Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03) << 1)
 8002efc:	2106      	movs	r1, #6
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	400b      	ands	r3, r1
                                       |((CSD_Tab[10] & 0x80) >> 7);
 8002f02:	7aa9      	ldrb	r1, [r5, #10]
 8002f04:	40d1      	lsrs	r1, r2
 8002f06:	430b      	orrs	r3, r1
        Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03) << 1)
 8002f08:	7b21      	ldrb	r1, [r4, #12]
 8002f0a:	4391      	bics	r1, r2
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	7323      	strb	r3, [r4, #12]
      Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40) >> 6;
 8002f10:	2001      	movs	r0, #1
 8002f12:	ae06      	add	r6, sp, #24
 8002f14:	7ab3      	ldrb	r3, [r6, #10]
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8002f16:	277e      	movs	r7, #126	; 0x7e
      Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40) >> 6;
 8002f18:	119d      	asrs	r5, r3, #6
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8002f1a:	4083      	lsls	r3, r0
      Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40) >> 6;
 8002f1c:	7c22      	ldrb	r2, [r4, #16]
 8002f1e:	4005      	ands	r5, r0
 8002f20:	4382      	bics	r2, r0
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8002f22:	432a      	orrs	r2, r5
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 8002f24:	257f      	movs	r5, #127	; 0x7f
                              |((CSD_Tab[11] & 0x80) >> 7);
 8002f26:	7af1      	ldrb	r1, [r6, #11]
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8002f28:	403b      	ands	r3, r7
                              |((CSD_Tab[11] & 0x80) >> 7);
 8002f2a:	09cf      	lsrs	r7, r1, #7
 8002f2c:	433b      	orrs	r3, r7
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8002f2e:	4083      	lsls	r3, r0
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 8002f30:	4029      	ands	r1, r5
 8002f32:	000f      	movs	r7, r1
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8002f34:	4002      	ands	r2, r0
 8002f36:	4313      	orrs	r3, r2
 8002f38:	7423      	strb	r3, [r4, #16]
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 8002f3a:	7c63      	ldrb	r3, [r4, #17]
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 8002f3c:	7b31      	ldrb	r1, [r6, #12]
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 8002f3e:	43ab      	bics	r3, r5
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 8002f40:	09ca      	lsrs	r2, r1, #7
 8002f42:	433b      	orrs	r3, r7
 8002f44:	01d2      	lsls	r2, r2, #7
 8002f46:	402b      	ands	r3, r5
 8002f48:	4313      	orrs	r3, r2
      Csd->Reserved2         = (CSD_Tab[12] & 0x60) >> 5;
 8002f4a:	2203      	movs	r2, #3
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 8002f4c:	7463      	strb	r3, [r4, #17]
      Csd->Reserved2         = (CSD_Tab[12] & 0x60) >> 5;
 8002f4e:	114b      	asrs	r3, r1, #5
 8002f50:	4013      	ands	r3, r2
 8002f52:	469c      	mov	ip, r3
      Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1C) >> 2;
 8002f54:	4667      	mov	r7, ip
      Csd->Reserved2         = (CSD_Tab[12] & 0x60) >> 5;
 8002f56:	7ca3      	ldrb	r3, [r4, #18]
 8002f58:	4393      	bics	r3, r2
      Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1C) >> 2;
 8002f5a:	433b      	orrs	r3, r7
 8002f5c:	271c      	movs	r7, #28
 8002f5e:	3219      	adds	r2, #25
 8002f60:	43bb      	bics	r3, r7
 8002f62:	400a      	ands	r2, r1
 8002f64:	431a      	orrs	r2, r3
 8002f66:	74a2      	strb	r2, [r4, #18]
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8002f68:	220c      	movs	r2, #12
                              |((CSD_Tab[13] & 0xC0) >> 6);
 8002f6a:	7b73      	ldrb	r3, [r6, #13]
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8002f6c:	0089      	lsls	r1, r1, #2
 8002f6e:	4011      	ands	r1, r2
                              |((CSD_Tab[13] & 0xC0) >> 6);
 8002f70:	099a      	lsrs	r2, r3, #6
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8002f72:	4311      	orrs	r1, r2
 8002f74:	468c      	mov	ip, r1
 8002f76:	220f      	movs	r2, #15
      Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20) >> 5;
 8002f78:	4667      	mov	r7, ip
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8002f7a:	7ce1      	ldrb	r1, [r4, #19]
 8002f7c:	4391      	bics	r1, r2
      Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20) >> 5;
 8002f7e:	4339      	orrs	r1, r7
 8002f80:	2710      	movs	r7, #16
 8002f82:	115a      	asrs	r2, r3, #5
 8002f84:	4002      	ands	r2, r0
 8002f86:	43b9      	bics	r1, r7
 8002f88:	0112      	lsls	r2, r2, #4
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	74e2      	strb	r2, [r4, #19]
      Csd->Reserved3         = (CSD_Tab[13] & 0x1F);
 8002f8e:	221f      	movs	r2, #31
 8002f90:	7d21      	ldrb	r1, [r4, #20]
 8002f92:	4013      	ands	r3, r2
 8002f94:	4391      	bics	r1, r2
      Csd->FileFormatGrouop  = (CSD_Tab[14] & 0x80) >> 7;
 8002f96:	430b      	orrs	r3, r1
 8002f98:	2120      	movs	r1, #32
 8002f9a:	7bb2      	ldrb	r2, [r6, #14]
 8002f9c:	438b      	bics	r3, r1
 8002f9e:	09d7      	lsrs	r7, r2, #7
 8002fa0:	017f      	lsls	r7, r7, #5
      Csd->CopyFlag          = (CSD_Tab[14] & 0x40) >> 6;
 8002fa2:	433b      	orrs	r3, r7
 8002fa4:	2740      	movs	r7, #64	; 0x40
 8002fa6:	1191      	asrs	r1, r2, #6
 8002fa8:	4001      	ands	r1, r0
 8002faa:	0189      	lsls	r1, r1, #6
 8002fac:	43bb      	bics	r3, r7
      Csd->PermWrProtect     = (CSD_Tab[14] & 0x20) >> 5;
 8002fae:	430b      	orrs	r3, r1
 8002fb0:	1157      	asrs	r7, r2, #5
 8002fb2:	01ff      	lsls	r7, r7, #7
 8002fb4:	402b      	ands	r3, r5
      Csd->TempWrProtect     = (CSD_Tab[14] & 0x10) >> 4;
 8002fb6:	7d61      	ldrb	r1, [r4, #21]
      Csd->PermWrProtect     = (CSD_Tab[14] & 0x20) >> 5;
 8002fb8:	433b      	orrs	r3, r7
 8002fba:	7523      	strb	r3, [r4, #20]
      Csd->TempWrProtect     = (CSD_Tab[14] & 0x10) >> 4;
 8002fbc:	4381      	bics	r1, r0
 8002fbe:	1113      	asrs	r3, r2, #4
 8002fc0:	4003      	ands	r3, r0
 8002fc2:	0008      	movs	r0, r1
      Csd->FileFormat        = (CSD_Tab[14] & 0x0C) >> 2;
 8002fc4:	2703      	movs	r7, #3
 8002fc6:	4303      	orrs	r3, r0
 8002fc8:	2006      	movs	r0, #6
 8002fca:	1091      	asrs	r1, r2, #2
 8002fcc:	4039      	ands	r1, r7
 8002fce:	0049      	lsls	r1, r1, #1
 8002fd0:	4383      	bics	r3, r0
      Csd->Reserved4         = (CSD_Tab[14] & 0x03);
 8002fd2:	430b      	orrs	r3, r1
 8002fd4:	403a      	ands	r2, r7
 8002fd6:	2118      	movs	r1, #24
 8002fd8:	40ba      	lsls	r2, r7
 8002fda:	438b      	bics	r3, r1
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	7562      	strb	r2, [r4, #21]
      Csd->crc               = (CSD_Tab[15] & 0xFE) >> 1;
 8002fe0:	7bf2      	ldrb	r2, [r6, #15]
 8002fe2:	7da3      	ldrb	r3, [r4, #22]
 8002fe4:	0851      	lsrs	r1, r2, #1
 8002fe6:	43ab      	bics	r3, r5
      Csd->Reserved5         = (CSD_Tab[15] & 0x01);
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	01d2      	lsls	r2, r2, #7
 8002fec:	401d      	ands	r5, r3
 8002fee:	4315      	orrs	r5, r2
 8002ff0:	75a5      	strb	r5, [r4, #22]
 8002ff2:	e6db      	b.n	8002dac <BSP_SD_GetCardInfo+0x20>
        Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0F) << 2) | ((CSD_Tab[7] & 0xC0) >> 6);
 8002ff4:	213c      	movs	r1, #60	; 0x3c
 8002ff6:	203f      	movs	r0, #63	; 0x3f
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	400b      	ands	r3, r1
 8002ffc:	0991      	lsrs	r1, r2, #6
 8002ffe:	430b      	orrs	r3, r1
 8003000:	7a21      	ldrb	r1, [r4, #8]
        Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3F) << 16) | (CSD_Tab[8] << 8) | CSD_Tab[9];
 8003002:	0412      	lsls	r2, r2, #16
        Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0F) << 2) | ((CSD_Tab[7] & 0xC0) >> 6);
 8003004:	4381      	bics	r1, r0
 8003006:	430b      	orrs	r3, r1
 8003008:	7223      	strb	r3, [r4, #8]
        Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3F) << 16) | (CSD_Tab[8] << 8) | CSD_Tab[9];
 800300a:	892b      	ldrh	r3, [r5, #8]
 800300c:	68a1      	ldr	r1, [r4, #8]
 800300e:	ba5b      	rev16	r3, r3
 8003010:	b29b      	uxth	r3, r3
 8003012:	431a      	orrs	r2, r3
 8003014:	4b3f      	ldr	r3, [pc, #252]	; (8003114 <BSP_SD_GetCardInfo+0x388>)
 8003016:	0292      	lsls	r2, r2, #10
 8003018:	0912      	lsrs	r2, r2, #4
 800301a:	400b      	ands	r3, r1
 800301c:	431a      	orrs	r2, r3
 800301e:	60a2      	str	r2, [r4, #8]
        Csd->version.v2.Reserved2 = ((CSD_Tab[10] & 0x80) >> 8);
 8003020:	0e12      	lsrs	r2, r2, #24
 8003022:	43b2      	bics	r2, r6
 8003024:	72e2      	strb	r2, [r4, #11]
 8003026:	e773      	b.n	8002f10 <BSP_SD_GetCardInfo+0x184>
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 8003028:	f7ff fdda 	bl	8002be0 <SD_WaitData.constprop.0>
 800302c:	1e06      	subs	r6, r0, #0
 800302e:	d000      	beq.n	8003032 <BSP_SD_GetCardInfo+0x2a6>
 8003030:	e6ce      	b.n	8002dd0 <BSP_SD_GetCardInfo+0x44>
 8003032:	0007      	movs	r7, r0
        CID_Tab[counter] = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003034:	20ff      	movs	r0, #255	; 0xff
 8003036:	f000 fc46 	bl	80038c6 <SD_IO_WriteByte>
 800303a:	ad06      	add	r5, sp, #24
 800303c:	5578      	strb	r0, [r7, r5]
      for (counter = 0; counter < 16; counter++)
 800303e:	3701      	adds	r7, #1
 8003040:	2f10      	cmp	r7, #16
 8003042:	d1f7      	bne.n	8003034 <BSP_SD_GetCardInfo+0x2a8>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003044:	20ff      	movs	r0, #255	; 0xff
 8003046:	f000 fc3e 	bl	80038c6 <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 800304a:	20ff      	movs	r0, #255	; 0xff
 800304c:	f000 fc3b 	bl	80038c6 <SD_IO_WriteByte>
      Cid->ManufacturerID = CID_Tab[0];
 8003050:	782b      	ldrb	r3, [r5, #0]
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 8003052:	0021      	movs	r1, r4
      Cid->ManufacturerID = CID_Tab[0];
 8003054:	7623      	strb	r3, [r4, #24]
      Cid->OEM_AppliID = CID_Tab[1] << 8;
 8003056:	786b      	ldrb	r3, [r5, #1]
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 8003058:	3128      	adds	r1, #40	; 0x28
      Cid->OEM_AppliID = CID_Tab[1] << 8;
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	8363      	strh	r3, [r4, #26]
      Cid->OEM_AppliID |= CID_Tab[2];
 800305e:	8b63      	ldrh	r3, [r4, #26]
 8003060:	78aa      	ldrb	r2, [r5, #2]
 8003062:	4313      	orrs	r3, r2
 8003064:	8363      	strh	r3, [r4, #26]
      Cid->ProdName1 = CID_Tab[3] << 24;
 8003066:	78eb      	ldrb	r3, [r5, #3]
 8003068:	061b      	lsls	r3, r3, #24
 800306a:	61e3      	str	r3, [r4, #28]
      Cid->ProdName1 |= CID_Tab[4] << 16;
 800306c:	792b      	ldrb	r3, [r5, #4]
 800306e:	69e2      	ldr	r2, [r4, #28]
 8003070:	041b      	lsls	r3, r3, #16
 8003072:	4313      	orrs	r3, r2
 8003074:	61e3      	str	r3, [r4, #28]
      Cid->ProdName1 |= CID_Tab[5] << 8;
 8003076:	796b      	ldrb	r3, [r5, #5]
 8003078:	69e2      	ldr	r2, [r4, #28]
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	4313      	orrs	r3, r2
 800307e:	61e3      	str	r3, [r4, #28]
      Cid->ProdName1 |= CID_Tab[6];
 8003080:	69e2      	ldr	r2, [r4, #28]
 8003082:	79ab      	ldrb	r3, [r5, #6]
 8003084:	4313      	orrs	r3, r2
 8003086:	61e3      	str	r3, [r4, #28]
      Cid->ProdName2 = CID_Tab[7];
 8003088:	79ea      	ldrb	r2, [r5, #7]
 800308a:	1c63      	adds	r3, r4, #1
 800308c:	77da      	strb	r2, [r3, #31]
      Cid->ProdRev = CID_Tab[8];
 800308e:	7a2a      	ldrb	r2, [r5, #8]
 8003090:	1ca3      	adds	r3, r4, #2
 8003092:	77da      	strb	r2, [r3, #31]
      Cid->ProdSN = CID_Tab[9] << 24;
 8003094:	7a6b      	ldrb	r3, [r5, #9]
 8003096:	061b      	lsls	r3, r3, #24
 8003098:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->ProdSN |= CID_Tab[10] << 16;
 800309a:	7aab      	ldrb	r3, [r5, #10]
 800309c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800309e:	041b      	lsls	r3, r3, #16
 80030a0:	4313      	orrs	r3, r2
 80030a2:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->ProdSN |= CID_Tab[11] << 8;
 80030a4:	7aeb      	ldrb	r3, [r5, #11]
 80030a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80030a8:	021b      	lsls	r3, r3, #8
 80030aa:	4313      	orrs	r3, r2
 80030ac:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->ProdSN |= CID_Tab[12];
 80030ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80030b0:	7b2b      	ldrb	r3, [r5, #12]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 80030b6:	7b6b      	ldrb	r3, [r5, #13]
 80030b8:	780a      	ldrb	r2, [r1, #0]
 80030ba:	0918      	lsrs	r0, r3, #4
 80030bc:	4302      	orrs	r2, r0
 80030be:	700a      	strb	r2, [r1, #0]
      Cid->ManufactDate = (CID_Tab[13] & 0x0F) << 8;
 80030c0:	22f0      	movs	r2, #240	; 0xf0
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	0112      	lsls	r2, r2, #4
 80030c6:	4013      	ands	r3, r2
 80030c8:	8563      	strh	r3, [r4, #42]	; 0x2a
      Cid->ManufactDate |= CID_Tab[14];
 80030ca:	7baa      	ldrb	r2, [r5, #14]
 80030cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80030ce:	4313      	orrs	r3, r2
      Cid->CID_CRC = (CID_Tab[15] & 0xFE) >> 1;
 80030d0:	0022      	movs	r2, r4
      Cid->ManufactDate |= CID_Tab[14];
 80030d2:	8563      	strh	r3, [r4, #42]	; 0x2a
      Cid->CID_CRC = (CID_Tab[15] & 0xFE) >> 1;
 80030d4:	7beb      	ldrb	r3, [r5, #15]
 80030d6:	322c      	adds	r2, #44	; 0x2c
 80030d8:	085b      	lsrs	r3, r3, #1
 80030da:	7013      	strb	r3, [r2, #0]
      Cid->Reserved2 = 1;
 80030dc:	0023      	movs	r3, r4
 80030de:	2201      	movs	r2, #1
 80030e0:	332d      	adds	r3, #45	; 0x2d
 80030e2:	701a      	strb	r2, [r3, #0]
 80030e4:	e675      	b.n	8002dd2 <BSP_SD_GetCardInfo+0x46>
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 80030e6:	8923      	ldrh	r3, [r4, #8]
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 80030e8:	7b22      	ldrb	r2, [r4, #12]
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 80030ea:	049b      	lsls	r3, r3, #18
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 80030ec:	0752      	lsls	r2, r2, #29
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 80030ee:	0d1b      	lsrs	r3, r3, #20
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 80030f0:	0f52      	lsrs	r2, r2, #29
 80030f2:	3202      	adds	r2, #2
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 80030f4:	3301      	adds	r3, #1
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 80030f6:	4093      	lsls	r3, r2
    pCardInfo->LogBlockSize = 512;
 80030f8:	2280      	movs	r2, #128	; 0x80
    pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 80030fa:	2101      	movs	r1, #1
    pCardInfo->LogBlockSize = 512;
 80030fc:	0092      	lsls	r2, r2, #2
 80030fe:	63e2      	str	r2, [r4, #60]	; 0x3c
    pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 8003100:	7962      	ldrb	r2, [r4, #5]
 8003102:	0912      	lsrs	r2, r2, #4
 8003104:	4091      	lsls	r1, r2
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8003106:	4093      	lsls	r3, r2
    pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 8003108:	6361      	str	r1, [r4, #52]	; 0x34
 800310a:	e679      	b.n	8002e00 <BSP_SD_GetCardInfo+0x74>
 800310c:	2000078e 	.word	0x2000078e
 8003110:	ffffc003 	.word	0xffffc003
 8003114:	f000003f 	.word	0xf000003f

08003118 <BSP_SD_ReadBlocks>:
{
 8003118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800311a:	b087      	sub	sp, #28
 800311c:	9203      	str	r2, [sp, #12]
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 800311e:	2300      	movs	r3, #0
 8003120:	2280      	movs	r2, #128	; 0x80
 8003122:	ad04      	add	r5, sp, #16
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	0092      	lsls	r2, r2, #2
 8003128:	33ff      	adds	r3, #255	; 0xff
{
 800312a:	0007      	movs	r7, r0
 800312c:	000c      	movs	r4, r1
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 800312e:	0028      	movs	r0, r5
 8003130:	2110      	movs	r1, #16
 8003132:	f7ff fce7 	bl	8002b04 <SD_SendCmd>
 8003136:	782e      	ldrb	r6, [r5, #0]
  SD_IO_CSState(1);
 8003138:	2001      	movs	r0, #1
 800313a:	f000 fbb3 	bl	80038a4 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 800313e:	20ff      	movs	r0, #255	; 0xff
 8003140:	f000 fbc1 	bl	80038c6 <SD_IO_WriteByte>
  if ( response.r1 != SD_R1_NO_ERROR)
 8003144:	2e00      	cmp	r6, #0
 8003146:	d002      	beq.n	800314e <BSP_SD_ReadBlocks+0x36>
  uint8_t *ptr = NULL;
 8003148:	2500      	movs	r5, #0
  uint8_t retr = BSP_SD_ERROR;
 800314a:	2601      	movs	r6, #1
 800314c:	e014      	b.n	8003178 <BSP_SD_ReadBlocks+0x60>
  ptr = malloc(sizeof(uint8_t)*BlockSize);
 800314e:	2080      	movs	r0, #128	; 0x80
 8003150:	0080      	lsls	r0, r0, #2
 8003152:	f003 fb35 	bl	80067c0 <malloc>
 8003156:	1e05      	subs	r5, r0, #0
  if( ptr == NULL )
 8003158:	d0f6      	beq.n	8003148 <BSP_SD_ReadBlocks+0x30>
  memset(ptr, SD_DUMMY_BYTE, sizeof(uint8_t)*BlockSize);
 800315a:	2280      	movs	r2, #128	; 0x80
 800315c:	21ff      	movs	r1, #255	; 0xff
 800315e:	0092      	lsls	r2, r2, #2
 8003160:	f003 fd4f 	bl	8006c02 <memset>
  addr = (ReadAddr * ((flag_SDHC == 1) ? 1 : BlockSize));
 8003164:	4b24      	ldr	r3, [pc, #144]	; (80031f8 <BSP_SD_ReadBlocks+0xe0>)
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d001      	beq.n	8003170 <BSP_SD_ReadBlocks+0x58>
 800316c:	2380      	movs	r3, #128	; 0x80
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	435c      	muls	r4, r3
  while (NumOfBlocks--)
 8003172:	9b03      	ldr	r3, [sp, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10d      	bne.n	8003194 <BSP_SD_ReadBlocks+0x7c>
  SD_IO_CSState(1);
 8003178:	2001      	movs	r0, #1
 800317a:	f000 fb93 	bl	80038a4 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 800317e:	20ff      	movs	r0, #255	; 0xff
 8003180:	f000 fba1 	bl	80038c6 <SD_IO_WriteByte>
  if(ptr != NULL) free(ptr);
 8003184:	2d00      	cmp	r5, #0
 8003186:	d002      	beq.n	800318e <BSP_SD_ReadBlocks+0x76>
 8003188:	0028      	movs	r0, r5
 800318a:	f003 fb23 	bl	80067d4 <free>
}
 800318e:	0030      	movs	r0, r6
 8003190:	b007      	add	sp, #28
 8003192:	bdf0      	pop	{r4, r5, r6, r7, pc}
    response = SD_SendCmd(SD_CMD_READ_SINGLE_BLOCK, addr, 0xFF, SD_ANSWER_R1_EXPECTED);
 8003194:	2300      	movs	r3, #0
 8003196:	0022      	movs	r2, r4
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	2111      	movs	r1, #17
 800319c:	33ff      	adds	r3, #255	; 0xff
 800319e:	a804      	add	r0, sp, #16
 80031a0:	f7ff fcb0 	bl	8002b04 <SD_SendCmd>
    if ( response.r1 != SD_R1_NO_ERROR)
 80031a4:	ab02      	add	r3, sp, #8
 80031a6:	7a1b      	ldrb	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1ce      	bne.n	800314a <BSP_SD_ReadBlocks+0x32>
    if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 80031ac:	f7ff fd18 	bl	8002be0 <SD_WaitData.constprop.0>
 80031b0:	2800      	cmp	r0, #0
 80031b2:	d1ca      	bne.n	800314a <BSP_SD_ReadBlocks+0x32>
      SD_IO_WriteReadData(ptr, (uint8_t*)pData + offset, BlockSize);
 80031b4:	2280      	movs	r2, #128	; 0x80
 80031b6:	0039      	movs	r1, r7
 80031b8:	0092      	lsls	r2, r2, #2
 80031ba:	0028      	movs	r0, r5
 80031bc:	f000 fb7f 	bl	80038be <SD_IO_WriteReadData>
      addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 80031c0:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <BSP_SD_ReadBlocks+0xe0>)
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d113      	bne.n	80031f0 <BSP_SD_ReadBlocks+0xd8>
 80031c8:	3401      	adds	r4, #1
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80031ca:	20ff      	movs	r0, #255	; 0xff
 80031cc:	f000 fb7b 	bl	80038c6 <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80031d0:	20ff      	movs	r0, #255	; 0xff
 80031d2:	f000 fb78 	bl	80038c6 <SD_IO_WriteByte>
    SD_IO_CSState(1);
 80031d6:	2001      	movs	r0, #1
 80031d8:	f000 fb64 	bl	80038a4 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80031dc:	20ff      	movs	r0, #255	; 0xff
 80031de:	f000 fb72 	bl	80038c6 <SD_IO_WriteByte>
 80031e2:	9b03      	ldr	r3, [sp, #12]
 80031e4:	3b01      	subs	r3, #1
 80031e6:	9303      	str	r3, [sp, #12]
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	18ff      	adds	r7, r7, r3
 80031ee:	e7c0      	b.n	8003172 <BSP_SD_ReadBlocks+0x5a>
      addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 80031f0:	2380      	movs	r3, #128	; 0x80
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	18e4      	adds	r4, r4, r3
 80031f6:	e7e8      	b.n	80031ca <BSP_SD_ReadBlocks+0xb2>
 80031f8:	2000078e 	.word	0x2000078e

080031fc <BSP_SD_WriteBlocks>:
{
 80031fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031fe:	b087      	sub	sp, #28
 8003200:	9203      	str	r2, [sp, #12]
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 8003202:	2300      	movs	r3, #0
 8003204:	2280      	movs	r2, #128	; 0x80
 8003206:	ad04      	add	r5, sp, #16
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	0092      	lsls	r2, r2, #2
 800320c:	33ff      	adds	r3, #255	; 0xff
{
 800320e:	0007      	movs	r7, r0
 8003210:	000c      	movs	r4, r1
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 8003212:	0028      	movs	r0, r5
 8003214:	2110      	movs	r1, #16
 8003216:	f7ff fc75 	bl	8002b04 <SD_SendCmd>
 800321a:	782d      	ldrb	r5, [r5, #0]
  SD_IO_CSState(1);
 800321c:	2001      	movs	r0, #1
 800321e:	f000 fb41 	bl	80038a4 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003222:	20ff      	movs	r0, #255	; 0xff
 8003224:	f000 fb4f 	bl	80038c6 <SD_IO_WriteByte>
  if ( response.r1 != SD_R1_NO_ERROR)
 8003228:	2d00      	cmp	r5, #0
 800322a:	d009      	beq.n	8003240 <BSP_SD_WriteBlocks+0x44>
  uint8_t retr = BSP_SD_ERROR;
 800322c:	2501      	movs	r5, #1
  SD_IO_CSState(1);
 800322e:	2001      	movs	r0, #1
 8003230:	f000 fb38 	bl	80038a4 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003234:	20ff      	movs	r0, #255	; 0xff
 8003236:	f000 fb46 	bl	80038c6 <SD_IO_WriteByte>
}
 800323a:	0028      	movs	r0, r5
 800323c:	b007      	add	sp, #28
 800323e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ptr = malloc(sizeof(uint8_t)*BlockSize);
 8003240:	2080      	movs	r0, #128	; 0x80
 8003242:	0080      	lsls	r0, r0, #2
 8003244:	f003 fabc 	bl	80067c0 <malloc>
 8003248:	1e06      	subs	r6, r0, #0
  if (ptr == NULL)
 800324a:	d0ef      	beq.n	800322c <BSP_SD_WriteBlocks+0x30>
  addr = (WriteAddr * ((flag_SDHC == 1) ? 1 : BlockSize));
 800324c:	4b30      	ldr	r3, [pc, #192]	; (8003310 <BSP_SD_WriteBlocks+0x114>)
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d001      	beq.n	8003258 <BSP_SD_WriteBlocks+0x5c>
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	435c      	muls	r4, r3
 800325a:	9702      	str	r7, [sp, #8]
  while (NumOfBlocks--)
 800325c:	9b03      	ldr	r3, [sp, #12]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d103      	bne.n	800326a <BSP_SD_WriteBlocks+0x6e>
  if(ptr != NULL) free(ptr);
 8003262:	0030      	movs	r0, r6
 8003264:	f003 fab6 	bl	80067d4 <free>
 8003268:	e7e1      	b.n	800322e <BSP_SD_WriteBlocks+0x32>
    response = SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK, addr, 0xFF, SD_ANSWER_R1_EXPECTED);
 800326a:	2300      	movs	r3, #0
 800326c:	af04      	add	r7, sp, #16
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	0022      	movs	r2, r4
 8003272:	33ff      	adds	r3, #255	; 0xff
 8003274:	2118      	movs	r1, #24
 8003276:	0038      	movs	r0, r7
 8003278:	f7ff fc44 	bl	8002b04 <SD_SendCmd>
    if (response.r1 != SD_R1_NO_ERROR)
 800327c:	783b      	ldrb	r3, [r7, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d144      	bne.n	800330c <BSP_SD_WriteBlocks+0x110>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003282:	20ff      	movs	r0, #255	; 0xff
 8003284:	f000 fb1f 	bl	80038c6 <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003288:	20ff      	movs	r0, #255	; 0xff
 800328a:	f000 fb1c 	bl	80038c6 <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_TOKEN_START_DATA_SINGLE_BLOCK_WRITE);
 800328e:	20fe      	movs	r0, #254	; 0xfe
 8003290:	f000 fb19 	bl	80038c6 <SD_IO_WriteByte>
    SD_IO_WriteReadData((uint8_t*)pData + offset, ptr, BlockSize);
 8003294:	2280      	movs	r2, #128	; 0x80
 8003296:	0031      	movs	r1, r6
 8003298:	0092      	lsls	r2, r2, #2
 800329a:	9802      	ldr	r0, [sp, #8]
 800329c:	f000 fb0f 	bl	80038be <SD_IO_WriteReadData>
    addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 80032a0:	4b1b      	ldr	r3, [pc, #108]	; (8003310 <BSP_SD_WriteBlocks+0x114>)
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d12d      	bne.n	8003304 <BSP_SD_WriteBlocks+0x108>
 80032a8:	3401      	adds	r4, #1
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80032aa:	20ff      	movs	r0, #255	; 0xff
 80032ac:	f000 fb0b 	bl	80038c6 <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80032b0:	20ff      	movs	r0, #255	; 0xff
 80032b2:	f000 fb08 	bl	80038c6 <SD_IO_WriteByte>
  dataresponse = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80032b6:	20ff      	movs	r0, #255	; 0xff
 80032b8:	f000 fb05 	bl	80038c6 <SD_IO_WriteByte>
 80032bc:	0007      	movs	r7, r0
  SD_IO_WriteByte(SD_DUMMY_BYTE); /* read the busy response byte*/
 80032be:	20ff      	movs	r0, #255	; 0xff
 80032c0:	f000 fb01 	bl	80038c6 <SD_IO_WriteByte>
  switch (dataresponse & 0x1F)
 80032c4:	231f      	movs	r3, #31
 80032c6:	401f      	ands	r7, r3
 80032c8:	2f05      	cmp	r7, #5
 80032ca:	d11f      	bne.n	800330c <BSP_SD_WriteBlocks+0x110>
    SD_IO_CSState(1);
 80032cc:	2001      	movs	r0, #1
 80032ce:	f000 fae9 	bl	80038a4 <SD_IO_CSState>
    SD_IO_CSState(0);
 80032d2:	2000      	movs	r0, #0
 80032d4:	f000 fae6 	bl	80038a4 <SD_IO_CSState>
    while (SD_IO_WriteByte(SD_DUMMY_BYTE) != 0xFF);
 80032d8:	20ff      	movs	r0, #255	; 0xff
 80032da:	f000 faf4 	bl	80038c6 <SD_IO_WriteByte>
 80032de:	0007      	movs	r7, r0
 80032e0:	28ff      	cmp	r0, #255	; 0xff
 80032e2:	d1f9      	bne.n	80032d8 <BSP_SD_WriteBlocks+0xdc>
    SD_IO_CSState(1);
 80032e4:	2001      	movs	r0, #1
 80032e6:	f000 fadd 	bl	80038a4 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80032ea:	0038      	movs	r0, r7
 80032ec:	f000 faeb 	bl	80038c6 <SD_IO_WriteByte>
 80032f0:	2280      	movs	r2, #128	; 0x80
 80032f2:	0092      	lsls	r2, r2, #2
 80032f4:	4694      	mov	ip, r2
 80032f6:	9b03      	ldr	r3, [sp, #12]
 80032f8:	3b01      	subs	r3, #1
 80032fa:	9303      	str	r3, [sp, #12]
 80032fc:	9b02      	ldr	r3, [sp, #8]
 80032fe:	4463      	add	r3, ip
 8003300:	9302      	str	r3, [sp, #8]
 8003302:	e7ab      	b.n	800325c <BSP_SD_WriteBlocks+0x60>
    addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 8003304:	2380      	movs	r3, #128	; 0x80
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	18e4      	adds	r4, r4, r3
 800330a:	e7ce      	b.n	80032aa <BSP_SD_WriteBlocks+0xae>
  uint8_t retr = BSP_SD_ERROR;
 800330c:	2501      	movs	r5, #1
 800330e:	e7a8      	b.n	8003262 <BSP_SD_WriteBlocks+0x66>
 8003310:	2000078e 	.word	0x2000078e

08003314 <BSP_SD_GetCardState>:
{
 8003314:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  retr = SD_SendCmd(SD_CMD_SEND_STATUS, 0, 0xFF, SD_ANSWER_R2_EXPECTED);
 8003316:	2302      	movs	r3, #2
 8003318:	ac02      	add	r4, sp, #8
 800331a:	2200      	movs	r2, #0
 800331c:	210d      	movs	r1, #13
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	0020      	movs	r0, r4
 8003322:	33fd      	adds	r3, #253	; 0xfd
 8003324:	f7ff fbee 	bl	8002b04 <SD_SendCmd>
  SD_IO_CSState(1);
 8003328:	2001      	movs	r0, #1
 800332a:	f000 fabb 	bl	80038a4 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 800332e:	20ff      	movs	r0, #255	; 0xff
 8003330:	f000 fac9 	bl	80038c6 <SD_IO_WriteByte>
  if(( retr.r1 == SD_R1_NO_ERROR) && ( retr.r2 == SD_R2_NO_ERROR))
 8003334:	7823      	ldrb	r3, [r4, #0]
 8003336:	2001      	movs	r0, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d103      	bne.n	8003344 <BSP_SD_GetCardState+0x30>
 800333c:	7860      	ldrb	r0, [r4, #1]
 800333e:	1e43      	subs	r3, r0, #1
 8003340:	4198      	sbcs	r0, r3
 8003342:	b2c0      	uxtb	r0, r0
}
 8003344:	b004      	add	sp, #16
 8003346:	bd10      	pop	{r4, pc}

08003348 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003348:	2001      	movs	r0, #1
 800334a:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <HAL_MspInit+0x2c>)
{
 800334c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800334e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003350:	4301      	orrs	r1, r0
 8003352:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8003354:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8003358:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800335a:	4002      	ands	r2, r0
 800335c:	9200      	str	r2, [sp, #0]
 800335e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003360:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003362:	430a      	orrs	r2, r1
 8003364:	63da      	str	r2, [r3, #60]	; 0x3c
 8003366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003368:	400b      	ands	r3, r1
 800336a:	9301      	str	r3, [sp, #4]
 800336c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800336e:	b002      	add	sp, #8
 8003370:	4770      	bx	lr
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	40021000 	.word	0x40021000

08003378 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003378:	b510      	push	{r4, lr}
 800337a:	0004      	movs	r4, r0
 800337c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337e:	2214      	movs	r2, #20
 8003380:	2100      	movs	r1, #0
 8003382:	a803      	add	r0, sp, #12
 8003384:	f003 fc3d 	bl	8006c02 <memset>
  if(hadc->Instance==ADC1)
 8003388:	4b0f      	ldr	r3, [pc, #60]	; (80033c8 <HAL_ADC_MspInit+0x50>)
 800338a:	6822      	ldr	r2, [r4, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d119      	bne.n	80033c4 <HAL_ADC_MspInit+0x4c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003390:	2080      	movs	r0, #128	; 0x80
 8003392:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <HAL_ADC_MspInit+0x54>)
 8003394:	0340      	lsls	r0, r0, #13
 8003396:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003398:	4301      	orrs	r1, r0
 800339a:	6419      	str	r1, [r3, #64]	; 0x40
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800339c:	2101      	movs	r1, #1
    __HAL_RCC_ADC_CLK_ENABLE();
 800339e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033a0:	4002      	ands	r2, r0
 80033a2:	9201      	str	r2, [sp, #4]
 80033a4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a8:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033aa:	430a      	orrs	r2, r1
 80033ac:	635a      	str	r2, [r3, #52]	; 0x34
 80033ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b2:	400b      	ands	r3, r1
 80033b4:	9302      	str	r3, [sp, #8]
 80033b6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033b8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ba:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033bc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033be:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c0:	f000 fdc4 	bl	8003f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80033c4:	b008      	add	sp, #32
 80033c6:	bd10      	pop	{r4, pc}
 80033c8:	40012400 	.word	0x40012400
 80033cc:	40021000 	.word	0x40021000

080033d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033d0:	b510      	push	{r4, lr}
 80033d2:	0004      	movs	r4, r0
 80033d4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d6:	2214      	movs	r2, #20
 80033d8:	2100      	movs	r1, #0
 80033da:	a803      	add	r0, sp, #12
 80033dc:	f003 fc11 	bl	8006c02 <memset>
  if(hi2c->Instance==I2C1)
 80033e0:	4b12      	ldr	r3, [pc, #72]	; (800342c <HAL_I2C_MspInit+0x5c>)
 80033e2:	6822      	ldr	r2, [r4, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d11e      	bne.n	8003426 <HAL_I2C_MspInit+0x56>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033e8:	2102      	movs	r1, #2
 80033ea:	4c11      	ldr	r4, [pc, #68]	; (8003430 <HAL_I2C_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ec:	4811      	ldr	r0, [pc, #68]	; (8003434 <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ee:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80033f0:	430a      	orrs	r2, r1
 80033f2:	6362      	str	r2, [r4, #52]	; 0x34
 80033f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033f6:	400b      	ands	r3, r1
 80033f8:	9301      	str	r3, [sp, #4]
 80033fa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80033fc:	2390      	movs	r3, #144	; 0x90
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003402:	2312      	movs	r3, #18
 8003404:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003406:	3b11      	subs	r3, #17
 8003408:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800340a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800340c:	3305      	adds	r3, #5
 800340e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003410:	f000 fd9c 	bl	8003f4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003414:	2180      	movs	r1, #128	; 0x80
 8003416:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003418:	0389      	lsls	r1, r1, #14
 800341a:	430a      	orrs	r2, r1
 800341c:	63e2      	str	r2, [r4, #60]	; 0x3c
 800341e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003420:	400b      	ands	r3, r1
 8003422:	9302      	str	r3, [sp, #8]
 8003424:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003426:	b008      	add	sp, #32
 8003428:	bd10      	pop	{r4, pc}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	40005400 	.word	0x40005400
 8003430:	40021000 	.word	0x40021000
 8003434:	50000400 	.word	0x50000400

08003438 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8003438:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <HAL_RTC_MspInit+0x2c>)
 800343a:	6802      	ldr	r2, [r0, #0]
{
 800343c:	b082      	sub	sp, #8
  if(hrtc->Instance==RTC)
 800343e:	429a      	cmp	r2, r3
 8003440:	d10e      	bne.n	8003460 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003442:	2280      	movs	r2, #128	; 0x80
 8003444:	4b08      	ldr	r3, [pc, #32]	; (8003468 <HAL_RTC_MspInit+0x30>)
 8003446:	0212      	lsls	r2, r2, #8
 8003448:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800344a:	430a      	orrs	r2, r1
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800344c:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_RTC_ENABLE();
 800344e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003450:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003452:	00c9      	lsls	r1, r1, #3
 8003454:	430a      	orrs	r2, r1
 8003456:	63da      	str	r2, [r3, #60]	; 0x3c
 8003458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345a:	400b      	ands	r3, r1
 800345c:	9301      	str	r3, [sp, #4]
 800345e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003460:	b002      	add	sp, #8
 8003462:	4770      	bx	lr
 8003464:	40002800 	.word	0x40002800
 8003468:	40021000 	.word	0x40021000

0800346c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800346c:	b510      	push	{r4, lr}
 800346e:	0004      	movs	r4, r0
 8003470:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003472:	2214      	movs	r2, #20
 8003474:	2100      	movs	r1, #0
 8003476:	a805      	add	r0, sp, #20
 8003478:	f003 fbc3 	bl	8006c02 <memset>
  if(hspi->Instance==SPI1)
 800347c:	6823      	ldr	r3, [r4, #0]
 800347e:	4a29      	ldr	r2, [pc, #164]	; (8003524 <HAL_SPI_MspInit+0xb8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d132      	bne.n	80034ea <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003484:	2080      	movs	r0, #128	; 0x80
 8003486:	4b28      	ldr	r3, [pc, #160]	; (8003528 <HAL_SPI_MspInit+0xbc>)
 8003488:	0140      	lsls	r0, r0, #5
 800348a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PD8     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348c:	2402      	movs	r4, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 800348e:	4301      	orrs	r1, r0
 8003490:	6419      	str	r1, [r3, #64]	; 0x40
 8003492:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003494:	4002      	ands	r2, r0
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003496:	2008      	movs	r0, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003498:	9200      	str	r2, [sp, #0]
 800349a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800349c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800349e:	4301      	orrs	r1, r0
 80034a0:	6359      	str	r1, [r3, #52]	; 0x34
 80034a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034a4:	4002      	ands	r2, r0
 80034a6:	9201      	str	r2, [sp, #4]
 80034a8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034aa:	2201      	movs	r2, #1
 80034ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034ae:	481f      	ldr	r0, [pc, #124]	; (800352c <HAL_SPI_MspInit+0xc0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b0:	4311      	orrs	r1, r2
 80034b2:	6359      	str	r1, [r3, #52]	; 0x34
 80034b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034b6:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b8:	4013      	ands	r3, r2
 80034ba:	9302      	str	r3, [sp, #8]
 80034bc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80034be:	2380      	movs	r3, #128	; 0x80
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c4:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 80034c6:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034c8:	f000 fd40 	bl	8003f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80034cc:	23c0      	movs	r3, #192	; 0xc0
 80034ce:	015b      	lsls	r3, r3, #5
 80034d0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d2:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d6:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034da:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80034dc:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034de:	a905      	add	r1, sp, #20
 80034e0:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034e2:	f000 fd33 	bl	8003f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80034e6:	b00a      	add	sp, #40	; 0x28
 80034e8:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 80034ea:	4a11      	ldr	r2, [pc, #68]	; (8003530 <HAL_SPI_MspInit+0xc4>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d1fa      	bne.n	80034e6 <HAL_SPI_MspInit+0x7a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80034f0:	2080      	movs	r0, #128	; 0x80
 80034f2:	4b0d      	ldr	r3, [pc, #52]	; (8003528 <HAL_SPI_MspInit+0xbc>)
 80034f4:	01c0      	lsls	r0, r0, #7
 80034f6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80034f8:	4301      	orrs	r1, r0
 80034fa:	63d9      	str	r1, [r3, #60]	; 0x3c
 80034fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034fe:	4002      	ands	r2, r0
 8003500:	9203      	str	r2, [sp, #12]
 8003502:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003504:	2202      	movs	r2, #2
 8003506:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003508:	480a      	ldr	r0, [pc, #40]	; (8003534 <HAL_SPI_MspInit+0xc8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800350a:	4311      	orrs	r1, r2
 800350c:	6359      	str	r1, [r3, #52]	; 0x34
 800350e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003510:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003512:	4013      	ands	r3, r2
 8003514:	9304      	str	r3, [sp, #16]
 8003516:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003518:	23e0      	movs	r3, #224	; 0xe0
 800351a:	021b      	lsls	r3, r3, #8
 800351c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351e:	9206      	str	r2, [sp, #24]
 8003520:	e7df      	b.n	80034e2 <HAL_SPI_MspInit+0x76>
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	40013000 	.word	0x40013000
 8003528:	40021000 	.word	0x40021000
 800352c:	50000c00 	.word	0x50000c00
 8003530:	40003800 	.word	0x40003800
 8003534:	50000400 	.word	0x50000400

08003538 <HAL_SPI_MspDeInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
  if(hspi->Instance==SPI1)
 8003538:	6803      	ldr	r3, [r0, #0]
 800353a:	4a10      	ldr	r2, [pc, #64]	; (800357c <HAL_SPI_MspDeInit+0x44>)
{
 800353c:	b510      	push	{r4, lr}
  if(hspi->Instance==SPI1)
 800353e:	4293      	cmp	r3, r2
 8003540:	d110      	bne.n	8003564 <HAL_SPI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003542:	4a0f      	ldr	r2, [pc, #60]	; (8003580 <HAL_SPI_MspDeInit+0x48>)
 8003544:	490f      	ldr	r1, [pc, #60]	; (8003584 <HAL_SPI_MspDeInit+0x4c>)
 8003546:	6c13      	ldr	r3, [r2, #64]	; 0x40
    /**SPI1 GPIO Configuration    
    PD8     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI 
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8);
 8003548:	480f      	ldr	r0, [pc, #60]	; (8003588 <HAL_SPI_MspDeInit+0x50>)
    __HAL_RCC_SPI1_CLK_DISABLE();
 800354a:	400b      	ands	r3, r1
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8);
 800354c:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_DISABLE();
 800354e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8);
 8003550:	0049      	lsls	r1, r1, #1
 8003552:	f000 fda3 	bl	800409c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8003556:	21c0      	movs	r1, #192	; 0xc0
 8003558:	20a0      	movs	r0, #160	; 0xa0
 800355a:	0149      	lsls	r1, r1, #5
 800355c:	05c0      	lsls	r0, r0, #23
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 800355e:	f000 fd9d 	bl	800409c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8003562:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8003564:	4a09      	ldr	r2, [pc, #36]	; (800358c <HAL_SPI_MspDeInit+0x54>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d1fb      	bne.n	8003562 <HAL_SPI_MspDeInit+0x2a>
    __HAL_RCC_SPI2_CLK_DISABLE();
 800356a:	4a05      	ldr	r2, [pc, #20]	; (8003580 <HAL_SPI_MspDeInit+0x48>)
 800356c:	4908      	ldr	r1, [pc, #32]	; (8003590 <HAL_SPI_MspDeInit+0x58>)
 800356e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8003570:	4808      	ldr	r0, [pc, #32]	; (8003594 <HAL_SPI_MspDeInit+0x5c>)
    __HAL_RCC_SPI2_CLK_DISABLE();
 8003572:	400b      	ands	r3, r1
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8003574:	21e0      	movs	r1, #224	; 0xe0
    __HAL_RCC_SPI2_CLK_DISABLE();
 8003576:	63d3      	str	r3, [r2, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8003578:	0209      	lsls	r1, r1, #8
 800357a:	e7f0      	b.n	800355e <HAL_SPI_MspDeInit+0x26>
 800357c:	40013000 	.word	0x40013000
 8003580:	40021000 	.word	0x40021000
 8003584:	ffffefff 	.word	0xffffefff
 8003588:	50000c00 	.word	0x50000c00
 800358c:	40003800 	.word	0x40003800
 8003590:	ffffbfff 	.word	0xffffbfff
 8003594:	50000400 	.word	0x50000400

08003598 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003598:	b510      	push	{r4, lr}
 800359a:	0004      	movs	r4, r0
 800359c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359e:	2214      	movs	r2, #20
 80035a0:	2100      	movs	r1, #0
 80035a2:	a803      	add	r0, sp, #12
 80035a4:	f003 fb2d 	bl	8006c02 <memset>
  if(htim_base->Instance==TIM3)
 80035a8:	6823      	ldr	r3, [r4, #0]
 80035aa:	4a18      	ldr	r2, [pc, #96]	; (800360c <HAL_TIM_Base_MspInit+0x74>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d10a      	bne.n	80035c6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035b0:	2002      	movs	r0, #2
 80035b2:	4a17      	ldr	r2, [pc, #92]	; (8003610 <HAL_TIM_Base_MspInit+0x78>)
 80035b4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80035b6:	4301      	orrs	r1, r0
 80035b8:	63d1      	str	r1, [r2, #60]	; 0x3c
 80035ba:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80035bc:	4003      	ands	r3, r0
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80035c2:	b008      	add	sp, #32
 80035c4:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM14)
 80035c6:	4a13      	ldr	r2, [pc, #76]	; (8003614 <HAL_TIM_Base_MspInit+0x7c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d1fa      	bne.n	80035c2 <HAL_TIM_Base_MspInit+0x2a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80035cc:	2080      	movs	r0, #128	; 0x80
 80035ce:	4b10      	ldr	r3, [pc, #64]	; (8003610 <HAL_TIM_Base_MspInit+0x78>)
 80035d0:	0200      	lsls	r0, r0, #8
 80035d2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80035d4:	4301      	orrs	r1, r0
 80035d6:	6419      	str	r1, [r3, #64]	; 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035d8:	2104      	movs	r1, #4
    __HAL_RCC_TIM14_CLK_ENABLE();
 80035da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035dc:	4002      	ands	r2, r0
 80035de:	9201      	str	r2, [sp, #4]
 80035e0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035e4:	480c      	ldr	r0, [pc, #48]	; (8003618 <HAL_TIM_Base_MspInit+0x80>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035e6:	430a      	orrs	r2, r1
 80035e8:	635a      	str	r2, [r3, #52]	; 0x34
 80035ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035ec:	2201      	movs	r2, #1
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035ee:	400b      	ands	r3, r1
 80035f0:	9302      	str	r3, [sp, #8]
 80035f2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80035f4:	2380      	movs	r3, #128	; 0x80
 80035f6:	015b      	lsls	r3, r3, #5
 80035f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fa:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035fc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003600:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM14;
 8003602:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003604:	f000 fca2 	bl	8003f4c <HAL_GPIO_Init>
}
 8003608:	e7db      	b.n	80035c2 <HAL_TIM_Base_MspInit+0x2a>
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	40000400 	.word	0x40000400
 8003610:	40021000 	.word	0x40021000
 8003614:	40002000 	.word	0x40002000
 8003618:	50000800 	.word	0x50000800

0800361c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800361c:	b510      	push	{r4, lr}
 800361e:	0004      	movs	r4, r0
 8003620:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003622:	2214      	movs	r2, #20
 8003624:	2100      	movs	r1, #0
 8003626:	a801      	add	r0, sp, #4
 8003628:	f003 faeb 	bl	8006c02 <memset>
  if(htim->Instance==TIM3)
 800362c:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <HAL_TIM_MspPostInit+0x44>)
 800362e:	6822      	ldr	r2, [r4, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d112      	bne.n	800365a <HAL_TIM_MspPostInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003634:	2301      	movs	r3, #1
 8003636:	4a0b      	ldr	r2, [pc, #44]	; (8003664 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = PWM_1_Pin|PWM_LCD_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003638:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800363a:	6b51      	ldr	r1, [r2, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800363c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800363e:	4319      	orrs	r1, r3
 8003640:	6351      	str	r1, [r2, #52]	; 0x34
 8003642:	6b52      	ldr	r2, [r2, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003644:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003646:	401a      	ands	r2, r3
 8003648:	9200      	str	r2, [sp, #0]
 800364a:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = PWM_1_Pin|PWM_LCD_Pin;
 800364c:	22c0      	movs	r2, #192	; 0xc0
 800364e:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003650:	3abe      	subs	r2, #190	; 0xbe
 8003652:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003654:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003656:	f000 fc79 	bl	8003f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800365a:	b006      	add	sp, #24
 800365c:	bd10      	pop	{r4, pc}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	40000400 	.word	0x40000400
 8003664:	40021000 	.word	0x40021000

08003668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003668:	b510      	push	{r4, lr}
 800366a:	0004      	movs	r4, r0
 800366c:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800366e:	2214      	movs	r2, #20
 8003670:	2100      	movs	r1, #0
 8003672:	a805      	add	r0, sp, #20
 8003674:	f003 fac5 	bl	8006c02 <memset>
  if(huart->Instance==USART2)
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	4a1f      	ldr	r2, [pc, #124]	; (80036f8 <HAL_UART_MspInit+0x90>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d11d      	bne.n	80036bc <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003680:	2080      	movs	r0, #128	; 0x80
 8003682:	4b1e      	ldr	r3, [pc, #120]	; (80036fc <HAL_UART_MspInit+0x94>)
 8003684:	0280      	lsls	r0, r0, #10
 8003686:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003688:	4301      	orrs	r1, r0
 800368a:	63d9      	str	r1, [r3, #60]	; 0x3c
 800368c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800368e:	4002      	ands	r2, r0
 8003690:	9201      	str	r2, [sp, #4]
 8003692:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003694:	2201      	movs	r2, #1
 8003696:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003698:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800369a:	4311      	orrs	r1, r2
 800369c:	6359      	str	r1, [r3, #52]	; 0x34
 800369e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a0:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a2:	4013      	ands	r3, r2
 80036a4:	9302      	str	r3, [sp, #8]
 80036a6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80036a8:	230c      	movs	r3, #12
 80036aa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ac:	3b0a      	subs	r3, #10
 80036ae:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80036b0:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b2:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b4:	f000 fc4a 	bl	8003f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80036b8:	b00a      	add	sp, #40	; 0x28
 80036ba:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 80036bc:	4a10      	ldr	r2, [pc, #64]	; (8003700 <HAL_UART_MspInit+0x98>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d1fa      	bne.n	80036b8 <HAL_UART_MspInit+0x50>
    __HAL_RCC_USART3_CLK_ENABLE();
 80036c2:	2080      	movs	r0, #128	; 0x80
 80036c4:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <HAL_UART_MspInit+0x94>)
 80036c6:	02c0      	lsls	r0, r0, #11
 80036c8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80036ca:	4301      	orrs	r1, r0
 80036cc:	63d9      	str	r1, [r3, #60]	; 0x3c
 80036ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036d0:	4002      	ands	r2, r0
 80036d2:	9203      	str	r2, [sp, #12]
 80036d4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036d6:	2202      	movs	r2, #2
 80036d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036da:	480a      	ldr	r0, [pc, #40]	; (8003704 <HAL_UART_MspInit+0x9c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036dc:	4311      	orrs	r1, r2
 80036de:	6359      	str	r1, [r3, #52]	; 0x34
 80036e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e2:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036e4:	4013      	ands	r3, r2
 80036e6:	9304      	str	r3, [sp, #16]
 80036e8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80036ea:	23c0      	movs	r3, #192	; 0xc0
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80036f0:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f2:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80036f4:	9309      	str	r3, [sp, #36]	; 0x24
 80036f6:	e7dd      	b.n	80036b4 <HAL_UART_MspInit+0x4c>
 80036f8:	40004400 	.word	0x40004400
 80036fc:	40021000 	.word	0x40021000
 8003700:	40004800 	.word	0x40004800
 8003704:	50000400 	.word	0x50000400

08003708 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003708:	b510      	push	{r4, lr}
 800370a:	0001      	movs	r1, r0
 800370c:	b086      	sub	sp, #24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0); 
 800370e:	2200      	movs	r2, #0
 8003710:	2011      	movs	r0, #17
 8003712:	f000 fbdf 	bl	8003ed4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn); 
 8003716:	2011      	movs	r0, #17
 8003718:	f000 fc0c 	bl	8003f34 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800371c:	2010      	movs	r0, #16
 800371e:	4a14      	ldr	r2, [pc, #80]	; (8003770 <HAL_InitTick+0x68>)
 8003720:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003722:	4301      	orrs	r1, r0
 8003724:	63d1      	str	r1, [r2, #60]	; 0x3c
 8003726:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003728:	4669      	mov	r1, sp
  __HAL_RCC_TIM6_CLK_ENABLE();
 800372a:	4003      	ands	r3, r0
 800372c:	9301      	str	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800372e:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003730:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003732:	f001 f929 	bl	8004988 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003736:	f001 f913 	bl	8004960 <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800373a:	4c0e      	ldr	r4, [pc, #56]	; (8003774 <HAL_InitTick+0x6c>)
 800373c:	4b0e      	ldr	r3, [pc, #56]	; (8003778 <HAL_InitTick+0x70>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800373e:	490f      	ldr	r1, [pc, #60]	; (800377c <HAL_InitTick+0x74>)
  htim6.Instance = TIM6;
 8003740:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8003742:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <HAL_InitTick+0x78>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003744:	0040      	lsls	r0, r0, #1
  htim6.Init.Period = (1000000 / 1000) - 1;
 8003746:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003748:	f7fc fd00 	bl	800014c <__udivsi3>
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 800374c:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800374e:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8003750:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003752:	0020      	movs	r0, r4
  htim6.Init.ClockDivision = 0;
 8003754:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003756:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003758:	f002 f800 	bl	800575c <HAL_TIM_Base_Init>
 800375c:	0003      	movs	r3, r0
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800375e:	2001      	movs	r0, #1
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003760:	2b00      	cmp	r3, #0
 8003762:	d102      	bne.n	800376a <HAL_InitTick+0x62>
    return HAL_TIM_Base_Start_IT(&htim6);
 8003764:	0020      	movs	r0, r4
 8003766:	f001 fee3 	bl	8005530 <HAL_TIM_Base_Start_IT>
}
 800376a:	b006      	add	sp, #24
 800376c:	bd10      	pop	{r4, pc}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	40021000 	.word	0x40021000
 8003774:	20000dd8 	.word	0x20000dd8
 8003778:	40001000 	.word	0x40001000
 800377c:	000f4240 	.word	0x000f4240
 8003780:	000003e7 	.word	0x000003e7

08003784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003784:	b510      	push	{r4, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003786:	f001 f92d 	bl	80049e4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800378a:	bd10      	pop	{r4, pc}

0800378c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800378c:	e7fe      	b.n	800378c <HardFault_Handler>

0800378e <SVC_Handler>:
 800378e:	4770      	bx	lr

08003790 <PendSV_Handler>:
 8003790:	4770      	bx	lr

08003792 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003792:	4770      	bx	lr

08003794 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003794:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003796:	4802      	ldr	r0, [pc, #8]	; (80037a0 <TIM6_IRQHandler+0xc>)
 8003798:	f001 fee4 	bl	8005564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800379c:	bd10      	pop	{r4, pc}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	20000dd8 	.word	0x20000dd8

080037a4 <SPIx_Init>:
/**
  * @brief  Initialize SPI HAL.
  * @retval None
  */
static void SPIx_Init(void)
{
 80037a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(HAL_SPI_GetState(&hnucleo_Spi) == HAL_SPI_STATE_RESET)
 80037a6:	4c2f      	ldr	r4, [pc, #188]	; (8003864 <SPIx_Init+0xc0>)
{
 80037a8:	b089      	sub	sp, #36	; 0x24
  if(HAL_SPI_GetState(&hnucleo_Spi) == HAL_SPI_STATE_RESET)
 80037aa:	0020      	movs	r0, r4
 80037ac:	f001 fd86 	bl	80052bc <HAL_SPI_GetState>
 80037b0:	1e06      	subs	r6, r0, #0
 80037b2:	d155      	bne.n	8003860 <SPIx_Init+0xbc>
  {
    /* SPI Config */
    hnucleo_Spi.Instance = NUCLEO_SPIx;
 80037b4:	4b2c      	ldr	r3, [pc, #176]	; (8003868 <SPIx_Init+0xc4>)
          - SD card SPI interface max baudrate is 25MHz for write/read
          - PCLK1 max frequency is 48 MHz 
       */ 
    hnucleo_Spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
    hnucleo_Spi.Init.Direction = SPI_DIRECTION_2LINES;
    hnucleo_Spi.Init.CLKPhase = SPI_PHASE_2EDGE;
 80037b6:	2701      	movs	r7, #1
    hnucleo_Spi.Instance = NUCLEO_SPIx;
 80037b8:	6023      	str	r3, [r4, #0]
    hnucleo_Spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80037ba:	2308      	movs	r3, #8
 80037bc:	61e3      	str	r3, [r4, #28]
    hnucleo_Spi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80037be:	3b06      	subs	r3, #6
 80037c0:	6123      	str	r3, [r4, #16]
    hnucleo_Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    hnucleo_Spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    hnucleo_Spi.Init.CRCPolynomial = 7;
 80037c2:	3305      	adds	r3, #5
 80037c4:	62e3      	str	r3, [r4, #44]	; 0x2c
    hnucleo_Spi.Init.DataSize = SPI_DATASIZE_8BIT;
 80037c6:	23e0      	movs	r3, #224	; 0xe0
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	60e3      	str	r3, [r4, #12]
    hnucleo_Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
    hnucleo_Spi.Init.NSS = SPI_NSS_SOFT;
 80037cc:	2380      	movs	r3, #128	; 0x80
 80037ce:	009b      	lsls	r3, r3, #2
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80037d0:	0001      	movs	r1, r0
    hnucleo_Spi.Init.Direction = SPI_DIRECTION_2LINES;
 80037d2:	60a0      	str	r0, [r4, #8]
    hnucleo_Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037d4:	62a0      	str	r0, [r4, #40]	; 0x28
    hnucleo_Spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80037d6:	6320      	str	r0, [r4, #48]	; 0x30
    hnucleo_Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037d8:	6220      	str	r0, [r4, #32]
    hnucleo_Spi.Init.NSS = SPI_NSS_SOFT;
 80037da:	61a3      	str	r3, [r4, #24]
    hnucleo_Spi.Init.TIMode = SPI_TIMODE_DISABLE;
 80037dc:	6260      	str	r0, [r4, #36]	; 0x24
    hnucleo_Spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    hnucleo_Spi.Init.Mode = SPI_MODE_MASTER;
 80037de:	3bfc      	subs	r3, #252	; 0xfc
    hnucleo_Spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80037e0:	6360      	str	r0, [r4, #52]	; 0x34
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80037e2:	2214      	movs	r2, #20
 80037e4:	a803      	add	r0, sp, #12
    hnucleo_Spi.Init.CLKPhase = SPI_PHASE_2EDGE;
 80037e6:	6167      	str	r7, [r4, #20]
    hnucleo_Spi.Init.Mode = SPI_MODE_MASTER;
 80037e8:	6063      	str	r3, [r4, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80037ea:	f003 fa0a 	bl	8006c02 <memset>
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 80037ee:	2208      	movs	r2, #8
 80037f0:	4d1e      	ldr	r5, [pc, #120]	; (800386c <SPIx_Init+0xc8>)
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &gpioinitstruct);
 80037f2:	a903      	add	r1, sp, #12
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 80037f4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &gpioinitstruct);
 80037f6:	481e      	ldr	r0, [pc, #120]	; (8003870 <SPIx_Init+0xcc>)
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 80037f8:	4313      	orrs	r3, r2
 80037fa:	636b      	str	r3, [r5, #52]	; 0x34
 80037fc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80037fe:	4013      	ands	r3, r2
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	9b00      	ldr	r3, [sp, #0]
  NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 8003804:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003806:	433b      	orrs	r3, r7
 8003808:	636b      	str	r3, [r5, #52]	; 0x34
 800380a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  gpioinitstruct.Pull  = GPIO_PULLUP;
 800380c:	9705      	str	r7, [sp, #20]
  NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 800380e:	403b      	ands	r3, r7
 8003810:	9301      	str	r3, [sp, #4]
 8003812:	9b01      	ldr	r3, [sp, #4]
  gpioinitstruct.Pin = NUCLEO_SPIx_SCK_PIN;
 8003814:	2380      	movs	r3, #128	; 0x80
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	9303      	str	r3, [sp, #12]
  gpioinitstruct.Mode = GPIO_MODE_AF_PP;
 800381a:	3bfe      	subs	r3, #254	; 0xfe
 800381c:	9304      	str	r3, [sp, #16]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800381e:	19db      	adds	r3, r3, r7
 8003820:	9306      	str	r3, [sp, #24]
  gpioinitstruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 8003822:	2780      	movs	r7, #128	; 0x80
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &gpioinitstruct);
 8003824:	f000 fb92 	bl	8003f4c <HAL_GPIO_Init>
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8003828:	20a0      	movs	r0, #160	; 0xa0
  gpioinitstruct.Pull  = GPIO_PULLDOWN;
 800382a:	2302      	movs	r3, #2
  gpioinitstruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 800382c:	017f      	lsls	r7, r7, #5
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 800382e:	a903      	add	r1, sp, #12
 8003830:	05c0      	lsls	r0, r0, #23
  gpioinitstruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 8003832:	9703      	str	r7, [sp, #12]
  gpioinitstruct.Pull  = GPIO_PULLDOWN;
 8003834:	9305      	str	r3, [sp, #20]
  gpioinitstruct.Alternate = NUCLEO_SPIx_MISO_MOSI_AF;
 8003836:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8003838:	f000 fb88 	bl	8003f4c <HAL_GPIO_Init>
  gpioinitstruct.Pin = NUCLEO_SPIx_MISO_PIN;
 800383c:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 800383e:	20a0      	movs	r0, #160	; 0xa0
  gpioinitstruct.Pin = NUCLEO_SPIx_MISO_PIN;
 8003840:	011b      	lsls	r3, r3, #4
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8003842:	05c0      	lsls	r0, r0, #23
 8003844:	a903      	add	r1, sp, #12
  gpioinitstruct.Pin = NUCLEO_SPIx_MISO_PIN;
 8003846:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8003848:	f000 fb80 	bl	8003f4c <HAL_GPIO_Init>
  NUCLEO_SPIx_CLK_ENABLE();
 800384c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    
    SPIx_MspInit();
    HAL_SPI_Init(&hnucleo_Spi);
 800384e:	0020      	movs	r0, r4
  NUCLEO_SPIx_CLK_ENABLE();
 8003850:	433b      	orrs	r3, r7
 8003852:	642b      	str	r3, [r5, #64]	; 0x40
 8003854:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003856:	401f      	ands	r7, r3
 8003858:	9702      	str	r7, [sp, #8]
 800385a:	9b02      	ldr	r3, [sp, #8]
    HAL_SPI_Init(&hnucleo_Spi);
 800385c:	f001 fab8 	bl	8004dd0 <HAL_SPI_Init>
  }
}
 8003860:	b009      	add	sp, #36	; 0x24
 8003862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003864:	20000790 	.word	0x20000790
 8003868:	40013000 	.word	0x40013000
 800386c:	40021000 	.word	0x40021000
 8003870:	50000c00 	.word	0x50000c00

08003874 <SPIx_WriteReadData>:
  * @param  DataOut: read value
  * @param  DataLength: value data length
  * @retval None
  */
static void SPIx_WriteReadData(const uint8_t *DataIn, uint8_t *DataOut, uint16_t DataLength)
{
 8003874:	b513      	push	{r0, r1, r4, lr}
 8003876:	0013      	movs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_SPI_TransmitReceive(&hnucleo_Spi, (uint8_t*) DataIn, DataOut, DataLength, SpixTimeout);
 8003878:	4a08      	ldr	r2, [pc, #32]	; (800389c <SPIx_WriteReadData+0x28>)
 800387a:	4c09      	ldr	r4, [pc, #36]	; (80038a0 <SPIx_WriteReadData+0x2c>)
 800387c:	6812      	ldr	r2, [r2, #0]
 800387e:	9200      	str	r2, [sp, #0]
 8003880:	000a      	movs	r2, r1
 8003882:	0001      	movs	r1, r0
 8003884:	0020      	movs	r0, r4
 8003886:	f001 fbe7 	bl	8005058 <HAL_SPI_TransmitReceive>

  /* Check the communication status */
  if(status != HAL_OK)
 800388a:	2800      	cmp	r0, #0
 800388c:	d004      	beq.n	8003898 <SPIx_WriteReadData+0x24>
  * @retval None
  */
static void SPIx_Error (void)
{
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&hnucleo_Spi);
 800388e:	0020      	movs	r0, r4
 8003890:	f001 fafc 	bl	8004e8c <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI communication BUS */
  SPIx_Init();
 8003894:	f7ff ff86 	bl	80037a4 <SPIx_Init>
}
 8003898:	bd13      	pop	{r0, r1, r4, pc}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	20000000 	.word	0x20000000
 80038a0:	20000790 	.word	0x20000790

080038a4 <SD_IO_CSState>:
  * @brief  Set the SD_CS pin.
  * @param  val: pin value.
  * @retval None
  */
void SD_IO_CSState(uint8_t val)
{
 80038a4:	b510      	push	{r4, lr}
 80038a6:	0002      	movs	r2, r0
  if(val == 1) 
 80038a8:	2801      	cmp	r0, #1
 80038aa:	d106      	bne.n	80038ba <SD_IO_CSState+0x16>
  {
    SD_CS_HIGH();
  }
  else
  {
    SD_CS_LOW();
 80038ac:	2180      	movs	r1, #128	; 0x80
 80038ae:	20a0      	movs	r0, #160	; 0xa0
 80038b0:	00c9      	lsls	r1, r1, #3
 80038b2:	05c0      	lsls	r0, r0, #23
 80038b4:	f000 fc68 	bl	8004188 <HAL_GPIO_WritePin>
  }
}
 80038b8:	bd10      	pop	{r4, pc}
    SD_CS_LOW();
 80038ba:	2200      	movs	r2, #0
 80038bc:	e7f6      	b.n	80038ac <SD_IO_CSState+0x8>

080038be <SD_IO_WriteReadData>:
  * @param  DataOut: Pointer to data buffer for read data
  * @param  DataLength: number of bytes to write
  * @retval None
  */
void SD_IO_WriteReadData(const uint8_t *DataIn, uint8_t *DataOut, uint16_t DataLength)
{
 80038be:	b510      	push	{r4, lr}
  /* Send the byte */
  SPIx_WriteReadData(DataIn, DataOut, DataLength);
 80038c0:	f7ff ffd8 	bl	8003874 <SPIx_WriteReadData>
}
 80038c4:	bd10      	pop	{r4, pc}

080038c6 <SD_IO_WriteByte>:
  * @brief  Write a byte on the SD.
  * @param  Data: byte to send.
  * @retval Data written
  */
uint8_t SD_IO_WriteByte(uint8_t Data)
{
 80038c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t tmp;

  /* Send the byte */
  SPIx_WriteReadData(&Data,&tmp,1);
 80038c8:	240f      	movs	r4, #15
{
 80038ca:	466b      	mov	r3, sp
  SPIx_WriteReadData(&Data,&tmp,1);
 80038cc:	446c      	add	r4, sp
{
 80038ce:	71d8      	strb	r0, [r3, #7]
 80038d0:	3307      	adds	r3, #7
  SPIx_WriteReadData(&Data,&tmp,1);
 80038d2:	0018      	movs	r0, r3
 80038d4:	2201      	movs	r2, #1
 80038d6:	0021      	movs	r1, r4
 80038d8:	f7ff ffcc 	bl	8003874 <SPIx_WriteReadData>
  return tmp;
 80038dc:	7820      	ldrb	r0, [r4, #0]
  }
 80038de:	b004      	add	sp, #16
 80038e0:	bd10      	pop	{r4, pc}
	...

080038e4 <SD_IO_Init>:
{
 80038e4:	b530      	push	{r4, r5, lr}
  SD_CS_GPIO_CLK_ENABLE();
 80038e6:	2401      	movs	r4, #1
{
 80038e8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80038ea:	2214      	movs	r2, #20
 80038ec:	2100      	movs	r1, #0
 80038ee:	a803      	add	r0, sp, #12
 80038f0:	f003 f987 	bl	8006c02 <memset>
  LCD_CS_GPIO_CLK_ENABLE();
 80038f4:	2102      	movs	r1, #2
  SD_CS_HIGH();
 80038f6:	2580      	movs	r5, #128	; 0x80
 80038f8:	20a0      	movs	r0, #160	; 0xa0
  SD_CS_GPIO_CLK_ENABLE();
 80038fa:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <SD_IO_Init+0x84>)
  SD_CS_HIGH();
 80038fc:	00ed      	lsls	r5, r5, #3
  SD_CS_GPIO_CLK_ENABLE();
 80038fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  SD_CS_HIGH();
 8003900:	05c0      	lsls	r0, r0, #23
  SD_CS_GPIO_CLK_ENABLE();
 8003902:	4322      	orrs	r2, r4
 8003904:	635a      	str	r2, [r3, #52]	; 0x34
 8003906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003908:	4022      	ands	r2, r4
 800390a:	9201      	str	r2, [sp, #4]
 800390c:	9a01      	ldr	r2, [sp, #4]
  LCD_CS_GPIO_CLK_ENABLE();
 800390e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003910:	430a      	orrs	r2, r1
 8003912:	635a      	str	r2, [r3, #52]	; 0x34
 8003914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  SD_CS_HIGH();
 8003916:	0022      	movs	r2, r4
  LCD_CS_GPIO_CLK_ENABLE();
 8003918:	400b      	ands	r3, r1
 800391a:	9302      	str	r3, [sp, #8]
  SD_CS_HIGH();
 800391c:	0029      	movs	r1, r5
  LCD_CS_GPIO_CLK_ENABLE();
 800391e:	9b02      	ldr	r3, [sp, #8]
  SD_CS_HIGH();
 8003920:	f000 fc32 	bl	8004188 <HAL_GPIO_WritePin>
  LCD_CS_HIGH();
 8003924:	0022      	movs	r2, r4
 8003926:	0021      	movs	r1, r4
 8003928:	4810      	ldr	r0, [pc, #64]	; (800396c <SD_IO_Init+0x88>)
 800392a:	f000 fc2d 	bl	8004188 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 800392e:	20a0      	movs	r0, #160	; 0xa0
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003930:	2303      	movs	r3, #3
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 8003932:	a903      	add	r1, sp, #12
 8003934:	05c0      	lsls	r0, r0, #23
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003936:	9306      	str	r3, [sp, #24]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003938:	9404      	str	r4, [sp, #16]
  gpioinitstruct.Pull = GPIO_PULLUP;
 800393a:	9405      	str	r4, [sp, #20]
  gpioinitstruct.Pin = SD_CS_PIN;
 800393c:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 800393e:	f000 fb05 	bl	8003f4c <HAL_GPIO_Init>
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 8003942:	20a0      	movs	r0, #160	; 0xa0
 8003944:	a903      	add	r1, sp, #12
 8003946:	05c0      	lsls	r0, r0, #23
  gpioinitstruct.Pin   = LCD_CS_PIN;
 8003948:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 800394a:	f000 faff 	bl	8003f4c <HAL_GPIO_Init>
  SPIx_Init();
 800394e:	f7ff ff29 	bl	80037a4 <SPIx_Init>
 8003952:	3409      	adds	r4, #9
 8003954:	3c01      	subs	r4, #1
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003956:	20ff      	movs	r0, #255	; 0xff
 8003958:	b2e4      	uxtb	r4, r4
 800395a:	f7ff ffb4 	bl	80038c6 <SD_IO_WriteByte>
  for (counter = 0; counter <= 9; counter++)
 800395e:	2c00      	cmp	r4, #0
 8003960:	d1f8      	bne.n	8003954 <SD_IO_Init+0x70>
}
 8003962:	b009      	add	sp, #36	; 0x24
 8003964:	bd30      	pop	{r4, r5, pc}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	40021000 	.word	0x40021000
 800396c:	50000400 	.word	0x50000400

08003970 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003970:	4b0a      	ldr	r3, [pc, #40]	; (800399c <_sbrk+0x2c>)
{
 8003972:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8003974:	6819      	ldr	r1, [r3, #0]
{
 8003976:	0002      	movs	r2, r0
	if (heap_end == 0)
 8003978:	2900      	cmp	r1, #0
 800397a:	d101      	bne.n	8003980 <_sbrk+0x10>
		heap_end = &end;
 800397c:	4908      	ldr	r1, [pc, #32]	; (80039a0 <_sbrk+0x30>)
 800397e:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8003980:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8003982:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003984:	1882      	adds	r2, r0, r2
 8003986:	428a      	cmp	r2, r1
 8003988:	d906      	bls.n	8003998 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800398a:	f002 feef 	bl	800676c <__errno>
 800398e:	230c      	movs	r3, #12
 8003990:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003992:	2001      	movs	r0, #1
 8003994:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8003996:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8003998:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 800399a:	e7fc      	b.n	8003996 <_sbrk+0x26>
 800399c:	200007f4 	.word	0x200007f4
 80039a0:	20001290 	.word	0x20001290

080039a4 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80039a4:	2280      	movs	r2, #128	; 0x80
 80039a6:	4b02      	ldr	r3, [pc, #8]	; (80039b0 <SystemInit+0xc>)
 80039a8:	0512      	lsls	r2, r2, #20
 80039aa:	609a      	str	r2, [r3, #8]
#endif
}
 80039ac:	4770      	bx	lr
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	e000ed00 	.word	0xe000ed00

080039b4 <HAL_Init>:
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039b4:	2380      	movs	r3, #128	; 0x80
 80039b6:	4a08      	ldr	r2, [pc, #32]	; (80039d8 <HAL_Init+0x24>)
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	6811      	ldr	r1, [r2, #0]
{
 80039bc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039be:	430b      	orrs	r3, r1
 80039c0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039c2:	2000      	movs	r0, #0
 80039c4:	f7ff fea0 	bl	8003708 <HAL_InitTick>
 80039c8:	1e04      	subs	r4, r0, #0
 80039ca:	d103      	bne.n	80039d4 <HAL_Init+0x20>
    status = HAL_ERROR;
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80039cc:	f7ff fcbc 	bl	8003348 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 80039d0:	0020      	movs	r0, r4
 80039d2:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80039d4:	2401      	movs	r4, #1
 80039d6:	e7fb      	b.n	80039d0 <HAL_Init+0x1c>
 80039d8:	40022000 	.word	0x40022000

080039dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80039dc:	4a03      	ldr	r2, [pc, #12]	; (80039ec <HAL_IncTick+0x10>)
 80039de:	4904      	ldr	r1, [pc, #16]	; (80039f0 <HAL_IncTick+0x14>)
 80039e0:	6813      	ldr	r3, [r2, #0]
 80039e2:	6809      	ldr	r1, [r1, #0]
 80039e4:	185b      	adds	r3, r3, r1
 80039e6:	6013      	str	r3, [r2, #0]
}
 80039e8:	4770      	bx	lr
 80039ea:	46c0      	nop			; (mov r8, r8)
 80039ec:	20000e18 	.word	0x20000e18
 80039f0:	20000008 	.word	0x20000008

080039f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80039f4:	4b01      	ldr	r3, [pc, #4]	; (80039fc <HAL_GetTick+0x8>)
 80039f6:	6818      	ldr	r0, [r3, #0]
}
 80039f8:	4770      	bx	lr
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	20000e18 	.word	0x20000e18

08003a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a00:	b570      	push	{r4, r5, r6, lr}
 8003a02:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003a04:	f7ff fff6 	bl	80039f4 <HAL_GetTick>
 8003a08:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a0a:	1c63      	adds	r3, r4, #1
 8003a0c:	d002      	beq.n	8003a14 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a0e:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <HAL_Delay+0x20>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a14:	f7ff ffee 	bl	80039f4 <HAL_GetTick>
 8003a18:	1b40      	subs	r0, r0, r5
 8003a1a:	4284      	cmp	r4, r0
 8003a1c:	d8fa      	bhi.n	8003a14 <HAL_Delay+0x14>
  {
  }
}
 8003a1e:	bd70      	pop	{r4, r5, r6, pc}
 8003a20:	20000008 	.word	0x20000008

08003a24 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a24:	6880      	ldr	r0, [r0, #8]
 8003a26:	0740      	lsls	r0, r0, #29
 8003a28:	0fc0      	lsrs	r0, r0, #31
}
 8003a2a:	4770      	bx	lr

08003a2c <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003a2c:	2300      	movs	r3, #0
{
 8003a2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a30:	b085      	sub	sp, #20
 8003a32:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8003a34:	9303      	str	r3, [sp, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8003a36:	2501      	movs	r5, #1
  if(hadc == NULL)
 8003a38:	4298      	cmp	r0, r3
 8003a3a:	d100      	bne.n	8003a3e <HAL_ADC_Init+0x12>
 8003a3c:	e09a      	b.n	8003b74 <HAL_ADC_Init+0x148>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a3e:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8003a40:	429d      	cmp	r5, r3
 8003a42:	d105      	bne.n	8003a50 <HAL_ADC_Init+0x24>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a44:	f7ff fc98 	bl	8003378 <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a48:	0023      	movs	r3, r4
 8003a4a:	3354      	adds	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8003a4c:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8003a4e:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003a50:	2380      	movs	r3, #128	; 0x80
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a52:	6826      	ldr	r6, [r4, #0]
 8003a54:	055b      	lsls	r3, r3, #21
 8003a56:	68b2      	ldr	r2, [r6, #8]
 8003a58:	421a      	tst	r2, r3
 8003a5a:	d100      	bne.n	8003a5e <HAL_ADC_Init+0x32>
 8003a5c:	e0d0      	b.n	8003c00 <HAL_ADC_Init+0x1d4>
 8003a5e:	68b3      	ldr	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a60:	2500      	movs	r5, #0
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	d400      	bmi.n	8003a68 <HAL_ADC_Init+0x3c>
 8003a66:	e0d8      	b.n	8003c1a <HAL_ADC_Init+0x1ee>
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a68:	0030      	movs	r0, r6
 8003a6a:	f7ff ffdb 	bl	8003a24 <LL_ADC_REG_IsConversionOngoing>
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a6e:	2310      	movs	r3, #16
 8003a70:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8003a72:	401e      	ands	r6, r3
 8003a74:	d000      	beq.n	8003a78 <HAL_ADC_Init+0x4c>
 8003a76:	e0be      	b.n	8003bf6 <HAL_ADC_Init+0x1ca>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	d000      	beq.n	8003a7e <HAL_ADC_Init+0x52>
 8003a7c:	e0bb      	b.n	8003bf6 <HAL_ADC_Init+0x1ca>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a80:	4a7c      	ldr	r2, [pc, #496]	; (8003c74 <HAL_ADC_Init+0x248>)
 8003a82:	401a      	ands	r2, r3
 8003a84:	2302      	movs	r3, #2
 8003a86:	4313      	orrs	r3, r2
 8003a88:	65a3      	str	r3, [r4, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a8a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	07d2      	lsls	r2, r2, #31
 8003a90:	d400      	bmi.n	8003a94 <HAL_ADC_Init+0x68>
 8003a92:	e0cb      	b.n	8003c2c <HAL_ADC_Init+0x200>
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003a94:	6b27      	ldr	r7, [r4, #48]	; 0x30
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a96:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003a98:	1e78      	subs	r0, r7, #1
 8003a9a:	4187      	sbcs	r7, r0
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003a9c:	7e62      	ldrb	r2, [r4, #25]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003a9e:	0338      	lsls	r0, r7, #12
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003aa0:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003aa2:	0389      	lsls	r1, r1, #14
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003aa4:	9001      	str	r0, [sp, #4]
 8003aa6:	68e0      	ldr	r0, [r4, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003aa8:	4311      	orrs	r1, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003aaa:	7ea2      	ldrb	r2, [r4, #26]
 8003aac:	4301      	orrs	r1, r0
                 hadc->Init.DataAlign                                             |
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8003aae:	6920      	ldr	r0, [r4, #16]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003ab0:	4694      	mov	ip, r2
 8003ab2:	0352      	lsls	r2, r2, #13
 8003ab4:	4311      	orrs	r1, r2
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8003ab6:	2800      	cmp	r0, #0
 8003ab8:	da66      	bge.n	8003b88 <HAL_ADC_Init+0x15c>
 8003aba:	0047      	lsls	r7, r0, #1
 8003abc:	087f      	lsrs	r7, r7, #1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003abe:	0022      	movs	r2, r4
 8003ac0:	322c      	adds	r2, #44	; 0x2c
 8003ac2:	7812      	ldrb	r2, [r2, #0]
 8003ac4:	0052      	lsls	r2, r2, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	9901      	ldr	r1, [sp, #4]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	4317      	orrs	r7, r2
 8003ace:	9701      	str	r7, [sp, #4]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ad0:	1c62      	adds	r2, r4, #1
 8003ad2:	7fd2      	ldrb	r2, [r2, #31]
 8003ad4:	2a01      	cmp	r2, #1
 8003ad6:	d107      	bne.n	8003ae8 <HAL_ADC_Init+0xbc>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003ad8:	4661      	mov	r1, ip
 8003ada:	2900      	cmp	r1, #0
 8003adc:	d157      	bne.n	8003b8e <HAL_ADC_Init+0x162>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003ade:	2280      	movs	r2, #128	; 0x80
 8003ae0:	0039      	movs	r1, r7
 8003ae2:	0252      	lsls	r2, r2, #9
 8003ae4:	4311      	orrs	r1, r2
 8003ae6:	9101      	str	r1, [sp, #4]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ae8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003aea:	2a00      	cmp	r2, #0
 8003aec:	d007      	beq.n	8003afe <HAL_ADC_Init+0xd2>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003aee:	21e0      	movs	r1, #224	; 0xe0
 8003af0:	0049      	lsls	r1, r1, #1
 8003af2:	400a      	ands	r2, r1
 8003af4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003af6:	430a      	orrs	r2, r1
 8003af8:	9901      	ldr	r1, [sp, #4]
 8003afa:	4311      	orrs	r1, r2
 8003afc:	9101      	str	r1, [sp, #4]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8003afe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003b00:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003b02:	430a      	orrs	r2, r1
                  hadc->Init.Oversampling.RightBitShift |
 8003b04:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003b06:	430a      	orrs	r2, r1
                  hadc->Init.Oversampling.TriggeredMode |
 8003b08:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003b0a:	430a      	orrs	r2, r1
                  hadc->Init.TriggerFrequencyMode
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 8003b0c:	0021      	movs	r1, r4
 8003b0e:	313c      	adds	r1, #60	; 0x3c
 8003b10:	7809      	ldrb	r1, [r1, #0]
 8003b12:	2901      	cmp	r1, #1
 8003b14:	d100      	bne.n	8003b18 <HAL_ADC_Init+0xec>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8003b16:	430a      	orrs	r2, r1
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003b18:	68d9      	ldr	r1, [r3, #12]
 8003b1a:	4f57      	ldr	r7, [pc, #348]	; (8003c78 <HAL_ADC_Init+0x24c>)
 8003b1c:	4039      	ands	r1, r7
 8003b1e:	9f01      	ldr	r7, [sp, #4]
 8003b20:	4339      	orrs	r1, r7
 8003b22:	60d9      	str	r1, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 8003b24:	6919      	ldr	r1, [r3, #16]
 8003b26:	4f55      	ldr	r7, [pc, #340]	; (8003c7c <HAL_ADC_Init+0x250>)
 8003b28:	4039      	ands	r1, r7
 8003b2a:	430a      	orrs	r2, r1
  MODIFY_REG(ADCx->SMPR,
 8003b2c:	2107      	movs	r1, #7
 8003b2e:	2770      	movs	r7, #112	; 0x70
 8003b30:	611a      	str	r2, [r3, #16]
 8003b32:	695a      	ldr	r2, [r3, #20]
 8003b34:	438a      	bics	r2, r1
 8003b36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	615a      	str	r2, [r3, #20]
 8003b3c:	695a      	ldr	r2, [r3, #20]
 8003b3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003b40:	43ba      	bics	r2, r7
 8003b42:	0109      	lsls	r1, r1, #4
 8003b44:	430a      	orrs	r2, r1
 8003b46:	615a      	str	r2, [r3, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	d12a      	bne.n	8003ba2 <HAL_ADC_Init+0x176>
      if(ADCGroupRegularSequencerRanksCount == 1UL)
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003b4c:	2210      	movs	r2, #16
 8003b4e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003b50:	4252      	negs	r2, r2
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003b52:	430a      	orrs	r2, r1
 8003b54:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003b56:	4a4a      	ldr	r2, [pc, #296]	; (8003c80 <HAL_ADC_Init+0x254>)
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	9a01      	ldr	r2, [sp, #4]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d13d      	bne.n	8003bde <HAL_ADC_Init+0x1b2>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b62:	2300      	movs	r3, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b64:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8003b66:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8003b68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b6a:	4393      	bics	r3, r2
 8003b6c:	001a      	movs	r2, r3
 8003b6e:	2301      	movs	r3, #1
 8003b70:	4313      	orrs	r3, r2
 8003b72:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8003b74:	0028      	movs	r0, r5
 8003b76:	b005      	add	sp, #20
 8003b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index--;
 8003b7a:	9b03      	ldr	r3, [sp, #12]
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	9303      	str	r3, [sp, #12]
    while(wait_loop_index != 0UL)
 8003b80:	9b03      	ldr	r3, [sp, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f9      	bne.n	8003b7a <HAL_ADC_Init+0x14e>
 8003b86:	e76a      	b.n	8003a5e <HAL_ADC_Init+0x32>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8003b88:	2780      	movs	r7, #128	; 0x80
 8003b8a:	03bf      	lsls	r7, r7, #14
 8003b8c:	e797      	b.n	8003abe <HAL_ADC_Init+0x92>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003b90:	468c      	mov	ip, r1
 8003b92:	2120      	movs	r1, #32
 8003b94:	4667      	mov	r7, ip
 8003b96:	4339      	orrs	r1, r7
 8003b98:	65a1      	str	r1, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b9a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	65e2      	str	r2, [r4, #92]	; 0x5c
 8003ba0:	e7a2      	b.n	8003ae8 <HAL_ADC_Init+0xbc>
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ba2:	2280      	movs	r2, #128	; 0x80
 8003ba4:	0392      	lsls	r2, r2, #14
 8003ba6:	4290      	cmp	r0, r2
 8003ba8:	d1d5      	bne.n	8003b56 <HAL_ADC_Init+0x12a>
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 8003baa:	200f      	movs	r0, #15
 8003bac:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003bae:	000f      	movs	r7, r1
 8003bb0:	00b2      	lsls	r2, r6, #2
 8003bb2:	40d7      	lsrs	r7, r2
 8003bb4:	003a      	movs	r2, r7
 8003bb6:	4002      	ands	r2, r0
 8003bb8:	2a0f      	cmp	r2, #15
 8003bba:	d00d      	beq.n	8003bd8 <HAL_ADC_Init+0x1ac>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003bbc:	3601      	adds	r6, #1
 8003bbe:	2e08      	cmp	r6, #8
 8003bc0:	d1f5      	bne.n	8003bae <HAL_ADC_Init+0x182>
        MODIFY_REG(hadc->Instance->CHSELR,
 8003bc2:	4830      	ldr	r0, [pc, #192]	; (8003c84 <HAL_ADC_Init+0x258>)
 8003bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bc6:	69e2      	ldr	r2, [r4, #28]
 8003bc8:	1812      	adds	r2, r2, r0
 8003bca:	201c      	movs	r0, #28
 8003bcc:	0092      	lsls	r2, r2, #2
 8003bce:	4002      	ands	r2, r0
 8003bd0:	382c      	subs	r0, #44	; 0x2c
 8003bd2:	4090      	lsls	r0, r2
 8003bd4:	0002      	movs	r2, r0
 8003bd6:	e7bc      	b.n	8003b52 <HAL_ADC_Init+0x126>
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 8003bd8:	2e01      	cmp	r6, #1
 8003bda:	d0b7      	beq.n	8003b4c <HAL_ADC_Init+0x120>
 8003bdc:	e7f1      	b.n	8003bc2 <HAL_ADC_Init+0x196>
      ADC_STATE_CLR_SET(hadc->State,
 8003bde:	2212      	movs	r2, #18
 8003be0:	6da3      	ldr	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003be2:	2501      	movs	r5, #1
      ADC_STATE_CLR_SET(hadc->State,
 8003be4:	4393      	bics	r3, r2
 8003be6:	001a      	movs	r2, r3
 8003be8:	2310      	movs	r3, #16
 8003bea:	4313      	orrs	r3, r2
 8003bec:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003bf0:	432b      	orrs	r3, r5
 8003bf2:	65e3      	str	r3, [r4, #92]	; 0x5c
 8003bf4:	e7be      	b.n	8003b74 <HAL_ADC_Init+0x148>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bf6:	6da2      	ldr	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8003bf8:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	65a3      	str	r3, [r4, #88]	; 0x58
 8003bfe:	e7b9      	b.n	8003b74 <HAL_ADC_Init+0x148>
  MODIFY_REG(ADCx->CR,
 8003c00:	68b2      	ldr	r2, [r6, #8]
 8003c02:	4921      	ldr	r1, [pc, #132]	; (8003c88 <HAL_ADC_Init+0x25c>)
 8003c04:	400a      	ands	r2, r1
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60b3      	str	r3, [r6, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003c0a:	4b20      	ldr	r3, [pc, #128]	; (8003c8c <HAL_ADC_Init+0x260>)
 8003c0c:	4920      	ldr	r1, [pc, #128]	; (8003c90 <HAL_ADC_Init+0x264>)
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	f7fc fa9c 	bl	800014c <__udivsi3>
 8003c14:	0040      	lsls	r0, r0, #1
 8003c16:	9003      	str	r0, [sp, #12]
    while(wait_loop_index != 0UL)
 8003c18:	e7b2      	b.n	8003b80 <HAL_ADC_Init+0x154>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c1a:	2310      	movs	r3, #16
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c1c:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c1e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003c20:	4313      	orrs	r3, r2
 8003c22:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c24:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003c26:	432b      	orrs	r3, r5
 8003c28:	65e3      	str	r3, [r4, #92]	; 0x5c
 8003c2a:	e71d      	b.n	8003a68 <HAL_ADC_Init+0x3c>
      MODIFY_REG(hadc->Instance->CFGR1,
 8003c2c:	2118      	movs	r1, #24
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	438a      	bics	r2, r1
 8003c32:	68a1      	ldr	r1, [r4, #8]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 8003c38:	6861      	ldr	r1, [r4, #4]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	0f88      	lsrs	r0, r1, #30
 8003c3e:	0092      	lsls	r2, r2, #2
 8003c40:	0780      	lsls	r0, r0, #30
 8003c42:	0892      	lsrs	r2, r2, #2
 8003c44:	4302      	orrs	r2, r0
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003c46:	2080      	movs	r0, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 8003c48:	611a      	str	r2, [r3, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003c4a:	004a      	lsls	r2, r1, #1
 8003c4c:	0852      	lsrs	r2, r2, #1
 8003c4e:	05c0      	lsls	r0, r0, #23
 8003c50:	4282      	cmp	r2, r0
 8003c52:	d100      	bne.n	8003c56 <HAL_ADC_Init+0x22a>
 8003c54:	e71e      	b.n	8003a94 <HAL_ADC_Init+0x68>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003c56:	2280      	movs	r2, #128	; 0x80
 8003c58:	0612      	lsls	r2, r2, #24
 8003c5a:	4291      	cmp	r1, r2
 8003c5c:	d100      	bne.n	8003c60 <HAL_ADC_Init+0x234>
 8003c5e:	e719      	b.n	8003a94 <HAL_ADC_Init+0x68>
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 8003c60:	480c      	ldr	r0, [pc, #48]	; (8003c94 <HAL_ADC_Init+0x268>)
 8003c62:	4f0d      	ldr	r7, [pc, #52]	; (8003c98 <HAL_ADC_Init+0x26c>)
 8003c64:	6802      	ldr	r2, [r0, #0]
 8003c66:	403a      	ands	r2, r7
 8003c68:	27f0      	movs	r7, #240	; 0xf0
 8003c6a:	03bf      	lsls	r7, r7, #14
 8003c6c:	4039      	ands	r1, r7
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	6002      	str	r2, [r0, #0]
 8003c72:	e70f      	b.n	8003a94 <HAL_ADC_Init+0x68>
 8003c74:	fffffefd 	.word	0xfffffefd
 8003c78:	fffe0219 	.word	0xfffe0219
 8003c7c:	dffffc02 	.word	0xdffffc02
 8003c80:	833fffe7 	.word	0x833fffe7
 8003c84:	3fffffff 	.word	0x3fffffff
 8003c88:	6fffffe8 	.word	0x6fffffe8
 8003c8c:	20000004 	.word	0x20000004
 8003c90:	00030d40 	.word	0x00030d40
 8003c94:	40012708 	.word	0x40012708
 8003c98:	ffc3ffff 	.word	0xffc3ffff

08003c9c <HAL_ADC_ConfigChannel>:
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003c9c:	2300      	movs	r3, #0
{
 8003c9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ca0:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t wait_loop_index = 0UL;
 8003ca2:	9307      	str	r3, [sp, #28]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	3354      	adds	r3, #84	; 0x54
 8003ca8:	781a      	ldrb	r2, [r3, #0]
{
 8003caa:	0005      	movs	r5, r0
 8003cac:	000f      	movs	r7, r1
  __HAL_LOCK(hadc);
 8003cae:	2402      	movs	r4, #2
 8003cb0:	2a01      	cmp	r2, #1
 8003cb2:	d100      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x1a>
 8003cb4:	e0c1      	b.n	8003e3a <HAL_ADC_ConfigChannel+0x19e>
 8003cb6:	2601      	movs	r6, #1
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cb8:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hadc);
 8003cba:	701e      	strb	r6, [r3, #0]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cbc:	f7ff feb2 	bl	8003a24 <LL_ADC_REG_IsConversionOngoing>
 8003cc0:	9003      	str	r0, [sp, #12]
 8003cc2:	2800      	cmp	r0, #0
 8003cc4:	d000      	beq.n	8003cc8 <HAL_ADC_ConfigChannel+0x2c>
 8003cc6:	e0ef      	b.n	8003ea8 <HAL_ADC_ConfigChannel+0x20c>
 8003cc8:	2204      	movs	r2, #4
 8003cca:	2180      	movs	r1, #128	; 0x80
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4694      	mov	ip, r2
 8003cd0:	9301      	str	r3, [sp, #4]
 8003cd2:	9801      	ldr	r0, [sp, #4]
 8003cd4:	692b      	ldr	r3, [r5, #16]
 8003cd6:	0609      	lsls	r1, r1, #24
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	42a0      	cmp	r0, r4
 8003cdc:	d100      	bne.n	8003ce0 <HAL_ADC_ConfigChannel+0x44>
 8003cde:	e0b6      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x1b2>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003ce0:	4660      	mov	r0, ip
 8003ce2:	4383      	bics	r3, r0
 8003ce4:	428b      	cmp	r3, r1
 8003ce6:	d113      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x74>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8003ce8:	6829      	ldr	r1, [r5, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003cea:	0353      	lsls	r3, r2, #13
 8003cec:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8003cee:	0b5b      	lsrs	r3, r3, #13
  MODIFY_REG(ADCx->CHSELR,
 8003cf0:	4303      	orrs	r3, r0
 8003cf2:	628b      	str	r3, [r1, #40]	; 0x28
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003cf4:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(ADCx->SMPR,
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	496e      	ldr	r1, [pc, #440]	; (8003eb4 <HAL_ADC_ConfigChannel+0x218>)
 8003cfa:	6944      	ldr	r4, [r0, #20]
 8003cfc:	4019      	ands	r1, r3
 8003cfe:	4061      	eors	r1, r4
 8003d00:	0213      	lsls	r3, r2, #8
 8003d02:	400b      	ands	r3, r1
 8003d04:	4063      	eors	r3, r4
 8003d06:	6143      	str	r3, [r0, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d08:	2a00      	cmp	r2, #0
 8003d0a:	db65      	blt.n	8003dd8 <HAL_ADC_ConfigChannel+0x13c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d0c:	2400      	movs	r4, #0
 8003d0e:	e091      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x198>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003d10:	211f      	movs	r1, #31
 8003d12:	9b01      	ldr	r3, [sp, #4]
 8003d14:	400b      	ands	r3, r1
 8003d16:	9302      	str	r3, [sp, #8]
 8003d18:	230f      	movs	r3, #15
 8003d1a:	9802      	ldr	r0, [sp, #8]
 8003d1c:	4083      	lsls	r3, r0
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	9304      	str	r3, [sp, #16]
 8003d22:	9804      	ldr	r0, [sp, #16]
 8003d24:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8003d26:	4003      	ands	r3, r0
 8003d28:	9305      	str	r3, [sp, #20]
 8003d2a:	0350      	lsls	r0, r2, #13
 8003d2c:	0013      	movs	r3, r2
 8003d2e:	2800      	cmp	r0, #0
 8003d30:	d115      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0xc2>
 8003d32:	0e90      	lsrs	r0, r2, #26
 8003d34:	4008      	ands	r0, r1
 8003d36:	9902      	ldr	r1, [sp, #8]
 8003d38:	4088      	lsls	r0, r1
 8003d3a:	9905      	ldr	r1, [sp, #20]
 8003d3c:	4308      	orrs	r0, r1
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003d3e:	9901      	ldr	r1, [sp, #4]
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003d40:	6628      	str	r0, [r5, #96]	; 0x60
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003d42:	0889      	lsrs	r1, r1, #2
 8003d44:	69e8      	ldr	r0, [r5, #28]
 8003d46:	3101      	adds	r1, #1
 8003d48:	4281      	cmp	r1, r0
 8003d4a:	d8d3      	bhi.n	8003cf4 <HAL_ADC_ConfigChannel+0x58>
  MODIFY_REG(ADCx->CHSELR,
 8003d4c:	9c02      	ldr	r4, [sp, #8]
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003d4e:	6829      	ldr	r1, [r5, #0]
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	0f1b      	lsrs	r3, r3, #28
 8003d54:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8003d56:	40a3      	lsls	r3, r4
 8003d58:	9c04      	ldr	r4, [sp, #16]
 8003d5a:	4020      	ands	r0, r4
 8003d5c:	e7c8      	b.n	8003cf0 <HAL_ADC_ConfigChannel+0x54>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003d5e:	9803      	ldr	r0, [sp, #12]
 8003d60:	4232      	tst	r2, r6
 8003d62:	d1e8      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0x9a>
 8003d64:	0030      	movs	r0, r6
 8003d66:	4222      	tst	r2, r4
 8003d68:	d1e5      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0x9a>
 8003d6a:	4661      	mov	r1, ip
 8003d6c:	0020      	movs	r0, r4
 8003d6e:	420a      	tst	r2, r1
 8003d70:	d1e1      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0x9a>
 8003d72:	2003      	movs	r0, #3
 8003d74:	0711      	lsls	r1, r2, #28
 8003d76:	d4de      	bmi.n	8003d36 <HAL_ADC_ConfigChannel+0x9a>
 8003d78:	4660      	mov	r0, ip
 8003d7a:	06d1      	lsls	r1, r2, #27
 8003d7c:	d4db      	bmi.n	8003d36 <HAL_ADC_ConfigChannel+0x9a>
 8003d7e:	2005      	movs	r0, #5
 8003d80:	0691      	lsls	r1, r2, #26
 8003d82:	d4d8      	bmi.n	8003d36 <HAL_ADC_ConfigChannel+0x9a>
 8003d84:	3001      	adds	r0, #1
 8003d86:	0651      	lsls	r1, r2, #25
 8003d88:	d4d5      	bmi.n	8003d36 <HAL_ADC_ConfigChannel+0x9a>
 8003d8a:	3001      	adds	r0, #1
 8003d8c:	0611      	lsls	r1, r2, #24
 8003d8e:	d4d2      	bmi.n	8003d36 <HAL_ADC_ConfigChannel+0x9a>
 8003d90:	3001      	adds	r0, #1
 8003d92:	05d1      	lsls	r1, r2, #23
 8003d94:	d4cf      	bmi.n	8003d36 <HAL_ADC_ConfigChannel+0x9a>
 8003d96:	3001      	adds	r0, #1
 8003d98:	0591      	lsls	r1, r2, #22
 8003d9a:	d4cc      	bmi.n	8003d36 <HAL_ADC_ConfigChannel+0x9a>
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	0551      	lsls	r1, r2, #21
 8003da0:	d4c9      	bmi.n	8003d36 <HAL_ADC_ConfigChannel+0x9a>
 8003da2:	3001      	adds	r0, #1
 8003da4:	0511      	lsls	r1, r2, #20
 8003da6:	d4c6      	bmi.n	8003d36 <HAL_ADC_ConfigChannel+0x9a>
 8003da8:	3001      	adds	r0, #1
 8003daa:	04d1      	lsls	r1, r2, #19
 8003dac:	d4c3      	bmi.n	8003d36 <HAL_ADC_ConfigChannel+0x9a>
 8003dae:	3001      	adds	r0, #1
 8003db0:	0491      	lsls	r1, r2, #18
 8003db2:	d4c0      	bmi.n	8003d36 <HAL_ADC_ConfigChannel+0x9a>
 8003db4:	3001      	adds	r0, #1
 8003db6:	0451      	lsls	r1, r2, #17
 8003db8:	d4bd      	bmi.n	8003d36 <HAL_ADC_ConfigChannel+0x9a>
 8003dba:	3001      	adds	r0, #1
 8003dbc:	0411      	lsls	r1, r2, #16
 8003dbe:	d4ba      	bmi.n	8003d36 <HAL_ADC_ConfigChannel+0x9a>
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	03d1      	lsls	r1, r2, #15
 8003dc4:	d4b7      	bmi.n	8003d36 <HAL_ADC_ConfigChannel+0x9a>
 8003dc6:	3001      	adds	r0, #1
 8003dc8:	0391      	lsls	r1, r2, #14
 8003dca:	d4b4      	bmi.n	8003d36 <HAL_ADC_ConfigChannel+0x9a>
 8003dcc:	2080      	movs	r0, #128	; 0x80
 8003dce:	02c0      	lsls	r0, r0, #11
 8003dd0:	4010      	ands	r0, r2
 8003dd2:	d0b0      	beq.n	8003d36 <HAL_ADC_ConfigChannel+0x9a>
 8003dd4:	2012      	movs	r0, #18
 8003dd6:	e7ae      	b.n	8003d36 <HAL_ADC_ConfigChannel+0x9a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003dd8:	21e0      	movs	r1, #224	; 0xe0
 8003dda:	4b37      	ldr	r3, [pc, #220]	; (8003eb8 <HAL_ADC_ConfigChannel+0x21c>)
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ddc:	4837      	ldr	r0, [pc, #220]	; (8003ebc <HAL_ADC_ConfigChannel+0x220>)
 8003dde:	681c      	ldr	r4, [r3, #0]
 8003de0:	0449      	lsls	r1, r1, #17
 8003de2:	4021      	ands	r1, r4
 8003de4:	4282      	cmp	r2, r0
 8003de6:	d117      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x17c>
 8003de8:	2080      	movs	r0, #128	; 0x80
 8003dea:	0400      	lsls	r0, r0, #16
 8003dec:	4204      	tst	r4, r0
 8003dee:	d18d      	bne.n	8003d0c <HAL_ADC_ConfigChannel+0x70>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	4c33      	ldr	r4, [pc, #204]	; (8003ec0 <HAL_ADC_ConfigChannel+0x224>)
 8003df4:	4022      	ands	r2, r4
 8003df6:	430a      	orrs	r2, r1
 8003df8:	4302      	orrs	r2, r0
 8003dfa:	601a      	str	r2, [r3, #0]
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003dfc:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <HAL_ADC_ConfigChannel+0x228>)
 8003dfe:	4932      	ldr	r1, [pc, #200]	; (8003ec8 <HAL_ADC_ConfigChannel+0x22c>)
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	f7fc f9a3 	bl	800014c <__udivsi3>
 8003e06:	9007      	str	r0, [sp, #28]
          while(wait_loop_index != 0UL)
 8003e08:	9b07      	ldr	r3, [sp, #28]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d100      	bne.n	8003e10 <HAL_ADC_ConfigChannel+0x174>
 8003e0e:	e77d      	b.n	8003d0c <HAL_ADC_ConfigChannel+0x70>
          {
            wait_loop_index--;
 8003e10:	9b07      	ldr	r3, [sp, #28]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	9307      	str	r3, [sp, #28]
 8003e16:	e7f7      	b.n	8003e08 <HAL_ADC_ConfigChannel+0x16c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e18:	482c      	ldr	r0, [pc, #176]	; (8003ecc <HAL_ADC_ConfigChannel+0x230>)
 8003e1a:	4282      	cmp	r2, r0
 8003e1c:	d110      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x1a4>
 8003e1e:	2080      	movs	r0, #128	; 0x80
 8003e20:	0440      	lsls	r0, r0, #17
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e22:	4004      	ands	r4, r0
 8003e24:	d000      	beq.n	8003e28 <HAL_ADC_ConfigChannel+0x18c>
 8003e26:	e771      	b.n	8003d0c <HAL_ADC_ConfigChannel+0x70>
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	4e25      	ldr	r6, [pc, #148]	; (8003ec0 <HAL_ADC_ConfigChannel+0x224>)
 8003e2c:	4032      	ands	r2, r6
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	4302      	orrs	r2, r0
 8003e32:	601a      	str	r2, [r3, #0]
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e34:	2300      	movs	r3, #0
 8003e36:	3554      	adds	r5, #84	; 0x54
 8003e38:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 8003e3a:	0020      	movs	r0, r4
 8003e3c:	b009      	add	sp, #36	; 0x24
 8003e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e40:	4823      	ldr	r0, [pc, #140]	; (8003ed0 <HAL_ADC_ConfigChannel+0x234>)
 8003e42:	4282      	cmp	r2, r0
 8003e44:	d000      	beq.n	8003e48 <HAL_ADC_ConfigChannel+0x1ac>
 8003e46:	e761      	b.n	8003d0c <HAL_ADC_ConfigChannel+0x70>
 8003e48:	2080      	movs	r0, #128	; 0x80
 8003e4a:	03c0      	lsls	r0, r0, #15
 8003e4c:	e7e9      	b.n	8003e22 <HAL_ADC_ConfigChannel+0x186>
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003e4e:	4660      	mov	r0, ip
 8003e50:	4383      	bics	r3, r0
 8003e52:	428b      	cmp	r3, r1
 8003e54:	d105      	bne.n	8003e62 <HAL_ADC_ConfigChannel+0x1c6>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8003e56:	6828      	ldr	r0, [r5, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003e58:	0351      	lsls	r1, r2, #13
 8003e5a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003e5c:	0b49      	lsrs	r1, r1, #13
 8003e5e:	438b      	bics	r3, r1
 8003e60:	6283      	str	r3, [r0, #40]	; 0x28
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e62:	2a00      	cmp	r2, #0
 8003e64:	db00      	blt.n	8003e68 <HAL_ADC_ConfigChannel+0x1cc>
 8003e66:	e751      	b.n	8003d0c <HAL_ADC_ConfigChannel+0x70>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003e68:	4b13      	ldr	r3, [pc, #76]	; (8003eb8 <HAL_ADC_ConfigChannel+0x21c>)
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e6a:	4914      	ldr	r1, [pc, #80]	; (8003ebc <HAL_ADC_ConfigChannel+0x220>)
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	428a      	cmp	r2, r1
 8003e70:	d108      	bne.n	8003e84 <HAL_ADC_ConfigChannel+0x1e8>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 8003e72:	22a0      	movs	r2, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003e74:	681c      	ldr	r4, [r3, #0]
 8003e76:	0452      	lsls	r2, r2, #17
 8003e78:	4911      	ldr	r1, [pc, #68]	; (8003ec0 <HAL_ADC_ConfigChannel+0x224>)
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8003e7a:	4002      	ands	r2, r0
 8003e7c:	4021      	ands	r1, r4
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	e743      	b.n	8003d0c <HAL_ADC_ConfigChannel+0x70>
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8003e84:	4911      	ldr	r1, [pc, #68]	; (8003ecc <HAL_ADC_ConfigChannel+0x230>)
 8003e86:	428a      	cmp	r2, r1
 8003e88:	d103      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x1f6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8003e8a:	22c0      	movs	r2, #192	; 0xc0
 8003e8c:	681c      	ldr	r4, [r3, #0]
 8003e8e:	0412      	lsls	r2, r2, #16
 8003e90:	e7f2      	b.n	8003e78 <HAL_ADC_ConfigChannel+0x1dc>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e92:	490f      	ldr	r1, [pc, #60]	; (8003ed0 <HAL_ADC_ConfigChannel+0x234>)
 8003e94:	428a      	cmp	r2, r1
 8003e96:	d000      	beq.n	8003e9a <HAL_ADC_ConfigChannel+0x1fe>
 8003e98:	e738      	b.n	8003d0c <HAL_ADC_ConfigChannel+0x70>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 8003e9a:	22c0      	movs	r2, #192	; 0xc0
 8003e9c:	0452      	lsls	r2, r2, #17
 8003e9e:	6819      	ldr	r1, [r3, #0]
 8003ea0:	4002      	ands	r2, r0
 8003ea2:	4807      	ldr	r0, [pc, #28]	; (8003ec0 <HAL_ADC_ConfigChannel+0x224>)
 8003ea4:	4001      	ands	r1, r0
 8003ea6:	e7ea      	b.n	8003e7e <HAL_ADC_ConfigChannel+0x1e2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ea8:	2320      	movs	r3, #32
 8003eaa:	6daa      	ldr	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8003eac:	0034      	movs	r4, r6
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	65ab      	str	r3, [r5, #88]	; 0x58
 8003eb2:	e7bf      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x198>
 8003eb4:	07ffff00 	.word	0x07ffff00
 8003eb8:	40012708 	.word	0x40012708
 8003ebc:	b0001000 	.word	0xb0001000
 8003ec0:	fe3fffff 	.word	0xfe3fffff
 8003ec4:	20000004 	.word	0x20000004
 8003ec8:	00030d40 	.word	0x00030d40
 8003ecc:	b8004000 	.word	0xb8004000
 8003ed0:	b4002000 	.word	0xb4002000

08003ed4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ed4:	b570      	push	{r4, r5, r6, lr}
 8003ed6:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	db12      	blt.n	8003f02 <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003edc:	0883      	lsrs	r3, r0, #2
 8003ede:	4a13      	ldr	r2, [pc, #76]	; (8003f2c <HAL_NVIC_SetPriority+0x58>)
 8003ee0:	2403      	movs	r4, #3
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	189b      	adds	r3, r3, r2
 8003ee6:	22ff      	movs	r2, #255	; 0xff
 8003ee8:	4020      	ands	r0, r4
 8003eea:	40a0      	lsls	r0, r4
 8003eec:	0014      	movs	r4, r2
 8003eee:	25c0      	movs	r5, #192	; 0xc0
 8003ef0:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ef2:	4011      	ands	r1, r2
 8003ef4:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ef6:	00ad      	lsls	r5, r5, #2
 8003ef8:	595e      	ldr	r6, [r3, r5]
 8003efa:	43a6      	bics	r6, r4
 8003efc:	4331      	orrs	r1, r6
 8003efe:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8003f00:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f02:	2403      	movs	r4, #3
 8003f04:	230f      	movs	r3, #15
 8003f06:	b2c0      	uxtb	r0, r0
 8003f08:	4003      	ands	r3, r0
 8003f0a:	4020      	ands	r0, r4
 8003f0c:	40a0      	lsls	r0, r4
 8003f0e:	34fc      	adds	r4, #252	; 0xfc
 8003f10:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f12:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f14:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f16:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f18:	3b08      	subs	r3, #8
 8003f1a:	4a05      	ldr	r2, [pc, #20]	; (8003f30 <HAL_NVIC_SetPriority+0x5c>)
 8003f1c:	089b      	lsrs	r3, r3, #2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	189b      	adds	r3, r3, r2
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	43aa      	bics	r2, r5
 8003f26:	4311      	orrs	r1, r2
 8003f28:	61d9      	str	r1, [r3, #28]
 8003f2a:	e7e9      	b.n	8003f00 <HAL_NVIC_SetPriority+0x2c>
 8003f2c:	e000e100 	.word	0xe000e100
 8003f30:	e000ed00 	.word	0xe000ed00

08003f34 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003f34:	2800      	cmp	r0, #0
 8003f36:	db05      	blt.n	8003f44 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f38:	231f      	movs	r3, #31
 8003f3a:	4018      	ands	r0, r3
 8003f3c:	3b1e      	subs	r3, #30
 8003f3e:	4083      	lsls	r3, r0
 8003f40:	4a01      	ldr	r2, [pc, #4]	; (8003f48 <HAL_NVIC_EnableIRQ+0x14>)
 8003f42:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003f44:	4770      	bx	lr
 8003f46:	46c0      	nop			; (mov r8, r8)
 8003f48:	e000e100 	.word	0xe000e100

08003f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f4e:	680b      	ldr	r3, [r1, #0]
{
 8003f50:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f52:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00u;
 8003f54:	2300      	movs	r3, #0
{
 8003f56:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f58:	9a02      	ldr	r2, [sp, #8]
 8003f5a:	40da      	lsrs	r2, r3
 8003f5c:	d101      	bne.n	8003f62 <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  }
}
 8003f5e:	b005      	add	sp, #20
 8003f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f62:	2201      	movs	r2, #1
 8003f64:	409a      	lsls	r2, r3
 8003f66:	9203      	str	r2, [sp, #12]
 8003f68:	9903      	ldr	r1, [sp, #12]
 8003f6a:	9a02      	ldr	r2, [sp, #8]
 8003f6c:	400a      	ands	r2, r1
 8003f6e:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8003f70:	d100      	bne.n	8003f74 <HAL_GPIO_Init+0x28>
 8003f72:	e085      	b.n	8004080 <HAL_GPIO_Init+0x134>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f74:	9a01      	ldr	r2, [sp, #4]
 8003f76:	2110      	movs	r1, #16
 8003f78:	6852      	ldr	r2, [r2, #4]
 8003f7a:	0016      	movs	r6, r2
 8003f7c:	438e      	bics	r6, r1
 8003f7e:	2e02      	cmp	r6, #2
 8003f80:	d10e      	bne.n	8003fa0 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f82:	2507      	movs	r5, #7
 8003f84:	401d      	ands	r5, r3
 8003f86:	00ad      	lsls	r5, r5, #2
 8003f88:	3901      	subs	r1, #1
 8003f8a:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8003f8c:	08dc      	lsrs	r4, r3, #3
 8003f8e:	00a4      	lsls	r4, r4, #2
 8003f90:	1904      	adds	r4, r0, r4
 8003f92:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f94:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f96:	9901      	ldr	r1, [sp, #4]
 8003f98:	6909      	ldr	r1, [r1, #16]
 8003f9a:	40a9      	lsls	r1, r5
 8003f9c:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8003f9e:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003fa0:	2403      	movs	r4, #3
 8003fa2:	005f      	lsls	r7, r3, #1
 8003fa4:	40bc      	lsls	r4, r7
 8003fa6:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8003fa8:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003faa:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003fac:	4025      	ands	r5, r4
 8003fae:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003fb0:	2503      	movs	r5, #3
 8003fb2:	4015      	ands	r5, r2
 8003fb4:	40bd      	lsls	r5, r7
 8003fb6:	4661      	mov	r1, ip
 8003fb8:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8003fba:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fbc:	2e01      	cmp	r6, #1
 8003fbe:	d80f      	bhi.n	8003fe0 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fc0:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8003fc2:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fc4:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fc6:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fc8:	40bd      	lsls	r5, r7
 8003fca:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8003fcc:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8003fce:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fd0:	9903      	ldr	r1, [sp, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003fd2:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fd4:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	400d      	ands	r5, r1
 8003fda:	409d      	lsls	r5, r3
 8003fdc:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8003fde:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8003fe0:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003fe2:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003fe4:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003fe6:	688d      	ldr	r5, [r1, #8]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fe8:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003fea:	40bd      	lsls	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fec:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003fee:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8003ff0:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ff2:	420a      	tst	r2, r1
 8003ff4:	d044      	beq.n	8004080 <HAL_GPIO_Init+0x134>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003ff6:	2603      	movs	r6, #3
 8003ff8:	240f      	movs	r4, #15
 8003ffa:	4922      	ldr	r1, [pc, #136]	; (8004084 <HAL_GPIO_Init+0x138>)
        temp = EXTI->EXTICR[position >> 2u];
 8003ffc:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003ffe:	401e      	ands	r6, r3
 8004000:	00ad      	lsls	r5, r5, #2
 8004002:	00f6      	lsls	r6, r6, #3
 8004004:	186d      	adds	r5, r5, r1
 8004006:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004008:	21a0      	movs	r1, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 800400a:	6e2f      	ldr	r7, [r5, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800400c:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800400e:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004010:	2400      	movs	r4, #0
 8004012:	4288      	cmp	r0, r1
 8004014:	d00c      	beq.n	8004030 <HAL_GPIO_Init+0xe4>
 8004016:	491c      	ldr	r1, [pc, #112]	; (8004088 <HAL_GPIO_Init+0x13c>)
 8004018:	3401      	adds	r4, #1
 800401a:	4288      	cmp	r0, r1
 800401c:	d008      	beq.n	8004030 <HAL_GPIO_Init+0xe4>
 800401e:	491b      	ldr	r1, [pc, #108]	; (800408c <HAL_GPIO_Init+0x140>)
 8004020:	3401      	adds	r4, #1
 8004022:	4288      	cmp	r0, r1
 8004024:	d004      	beq.n	8004030 <HAL_GPIO_Init+0xe4>
 8004026:	491a      	ldr	r1, [pc, #104]	; (8004090 <HAL_GPIO_Init+0x144>)
 8004028:	3403      	adds	r4, #3
 800402a:	4288      	cmp	r0, r1
 800402c:	d100      	bne.n	8004030 <HAL_GPIO_Init+0xe4>
 800402e:	3c02      	subs	r4, #2
 8004030:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 8004032:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004034:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8004036:	000e      	movs	r6, r1
        EXTI->EXTICR[position >> 2u] = temp;
 8004038:	662c      	str	r4, [r5, #96]	; 0x60
        temp = EXTI->IMR1;
 800403a:	4c16      	ldr	r4, [pc, #88]	; (8004094 <HAL_GPIO_Init+0x148>)
        temp &= ~(iocurrent);
 800403c:	43cd      	mvns	r5, r1
        temp = EXTI->IMR1;
 800403e:	6fe7      	ldr	r7, [r4, #124]	; 0x7c
          temp |= iocurrent;
 8004040:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004042:	03d1      	lsls	r1, r2, #15
 8004044:	d401      	bmi.n	800404a <HAL_GPIO_Init+0xfe>
        temp &= ~(iocurrent);
 8004046:	003e      	movs	r6, r7
 8004048:	402e      	ands	r6, r5
        EXTI->IMR1 = temp;
 800404a:	67e6      	str	r6, [r4, #124]	; 0x7c
        temp = EXTI->EMR1;
 800404c:	4e12      	ldr	r6, [pc, #72]	; (8004098 <HAL_GPIO_Init+0x14c>)
          temp |= iocurrent;
 800404e:	9f00      	ldr	r7, [sp, #0]
        temp = EXTI->EMR1;
 8004050:	6ff4      	ldr	r4, [r6, #124]	; 0x7c
          temp |= iocurrent;
 8004052:	4327      	orrs	r7, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004054:	0391      	lsls	r1, r2, #14
 8004056:	d401      	bmi.n	800405c <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 8004058:	402c      	ands	r4, r5
 800405a:	0027      	movs	r7, r4
        EXTI->EMR1 = temp;
 800405c:	4c09      	ldr	r4, [pc, #36]	; (8004084 <HAL_GPIO_Init+0x138>)
 800405e:	67f7      	str	r7, [r6, #124]	; 0x7c
        temp = EXTI->RTSR1;
 8004060:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 8004062:	9e00      	ldr	r6, [sp, #0]
 8004064:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004066:	02d1      	lsls	r1, r2, #11
 8004068:	d401      	bmi.n	800406e <HAL_GPIO_Init+0x122>
        temp &= ~(iocurrent);
 800406a:	003e      	movs	r6, r7
 800406c:	402e      	ands	r6, r5
        EXTI->RTSR1 = temp;
 800406e:	6026      	str	r6, [r4, #0]
        temp = EXTI->FTSR1;
 8004070:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 8004072:	9f00      	ldr	r7, [sp, #0]
 8004074:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004076:	0292      	lsls	r2, r2, #10
 8004078:	d401      	bmi.n	800407e <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 800407a:	402e      	ands	r6, r5
 800407c:	0037      	movs	r7, r6
        EXTI->FTSR1 = temp;
 800407e:	6067      	str	r7, [r4, #4]
    position++;
 8004080:	3301      	adds	r3, #1
 8004082:	e769      	b.n	8003f58 <HAL_GPIO_Init+0xc>
 8004084:	40021800 	.word	0x40021800
 8004088:	50000400 	.word	0x50000400
 800408c:	50000800 	.word	0x50000800
 8004090:	50000c00 	.word	0x50000c00
 8004094:	40021804 	.word	0x40021804
 8004098:	40021808 	.word	0x40021808

0800409c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800409c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 800409e:	2300      	movs	r3, #0
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80040a0:	2703      	movs	r7, #3
{
 80040a2:	b085      	sub	sp, #20
 80040a4:	9102      	str	r1, [sp, #8]
  while ((GPIO_Pin >> position) != 0x00u)
 80040a6:	9a02      	ldr	r2, [sp, #8]
 80040a8:	40da      	lsrs	r2, r3
 80040aa:	d101      	bne.n	80040b0 <HAL_GPIO_DeInit+0x14>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
    }

    position++;
  }
}
 80040ac:	b005      	add	sp, #20
 80040ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 80040b0:	2201      	movs	r2, #1
 80040b2:	409a      	lsls	r2, r3
 80040b4:	9902      	ldr	r1, [sp, #8]
 80040b6:	9200      	str	r2, [sp, #0]
 80040b8:	4011      	ands	r1, r2
    if (iocurrent != 0x00u)
 80040ba:	d056      	beq.n	800416a <HAL_GPIO_DeInit+0xce>
 80040bc:	4c2c      	ldr	r4, [pc, #176]	; (8004170 <HAL_GPIO_DeInit+0xd4>)
      tmp = EXTI->EXTICR[position >> 2u];
 80040be:	089a      	lsrs	r2, r3, #2
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80040c0:	001d      	movs	r5, r3
 80040c2:	0092      	lsls	r2, r2, #2
 80040c4:	1912      	adds	r2, r2, r4
 80040c6:	240f      	movs	r4, #15
 80040c8:	403d      	ands	r5, r7
 80040ca:	00ed      	lsls	r5, r5, #3
 80040cc:	40ac      	lsls	r4, r5
      tmp = EXTI->EXTICR[position >> 2u];
 80040ce:	6e16      	ldr	r6, [r2, #96]	; 0x60
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80040d0:	9401      	str	r4, [sp, #4]
 80040d2:	4026      	ands	r6, r4
 80040d4:	9603      	str	r6, [sp, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80040d6:	26a0      	movs	r6, #160	; 0xa0
 80040d8:	2400      	movs	r4, #0
 80040da:	05f6      	lsls	r6, r6, #23
 80040dc:	42b0      	cmp	r0, r6
 80040de:	d00f      	beq.n	8004100 <HAL_GPIO_DeInit+0x64>
 80040e0:	4c24      	ldr	r4, [pc, #144]	; (8004174 <HAL_GPIO_DeInit+0xd8>)
 80040e2:	46a4      	mov	ip, r4
 80040e4:	2401      	movs	r4, #1
 80040e6:	4560      	cmp	r0, ip
 80040e8:	d00a      	beq.n	8004100 <HAL_GPIO_DeInit+0x64>
 80040ea:	4c23      	ldr	r4, [pc, #140]	; (8004178 <HAL_GPIO_DeInit+0xdc>)
 80040ec:	46a4      	mov	ip, r4
 80040ee:	2402      	movs	r4, #2
 80040f0:	4560      	cmp	r0, ip
 80040f2:	d005      	beq.n	8004100 <HAL_GPIO_DeInit+0x64>
 80040f4:	4c21      	ldr	r4, [pc, #132]	; (800417c <HAL_GPIO_DeInit+0xe0>)
 80040f6:	46a4      	mov	ip, r4
 80040f8:	003c      	movs	r4, r7
 80040fa:	4560      	cmp	r0, ip
 80040fc:	d000      	beq.n	8004100 <HAL_GPIO_DeInit+0x64>
 80040fe:	2405      	movs	r4, #5
 8004100:	40ac      	lsls	r4, r5
 8004102:	9d03      	ldr	r5, [sp, #12]
 8004104:	42a5      	cmp	r5, r4
 8004106:	d113      	bne.n	8004130 <HAL_GPIO_DeInit+0x94>
        EXTI->IMR1 &= ~(iocurrent);
 8004108:	43c9      	mvns	r1, r1
 800410a:	4e1d      	ldr	r6, [pc, #116]	; (8004180 <HAL_GPIO_DeInit+0xe4>)
 800410c:	4c18      	ldr	r4, [pc, #96]	; (8004170 <HAL_GPIO_DeInit+0xd4>)
 800410e:	6ff5      	ldr	r5, [r6, #124]	; 0x7c
 8004110:	400d      	ands	r5, r1
 8004112:	67f5      	str	r5, [r6, #124]	; 0x7c
        EXTI->EMR1 &= ~(iocurrent);
 8004114:	4e1b      	ldr	r6, [pc, #108]	; (8004184 <HAL_GPIO_DeInit+0xe8>)
 8004116:	6ff5      	ldr	r5, [r6, #124]	; 0x7c
 8004118:	400d      	ands	r5, r1
 800411a:	67f5      	str	r5, [r6, #124]	; 0x7c
        EXTI->RTSR1 &= ~(iocurrent);
 800411c:	6825      	ldr	r5, [r4, #0]
 800411e:	400d      	ands	r5, r1
 8004120:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004122:	6865      	ldr	r5, [r4, #4]
 8004124:	4029      	ands	r1, r5
 8004126:	6061      	str	r1, [r4, #4]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8004128:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800412a:	9c01      	ldr	r4, [sp, #4]
 800412c:	43a1      	bics	r1, r4
 800412e:	6611      	str	r1, [r2, #96]	; 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004130:	003c      	movs	r4, r7
 8004132:	0059      	lsls	r1, r3, #1
 8004134:	408c      	lsls	r4, r1
 8004136:	6802      	ldr	r2, [r0, #0]
 8004138:	0021      	movs	r1, r4
 800413a:	4322      	orrs	r2, r4
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800413c:	2407      	movs	r4, #7
 800413e:	260f      	movs	r6, #15
 8004140:	401c      	ands	r4, r3
 8004142:	00a4      	lsls	r4, r4, #2
 8004144:	40a6      	lsls	r6, r4
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004146:	43c9      	mvns	r1, r1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004148:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800414a:	08da      	lsrs	r2, r3, #3
 800414c:	0092      	lsls	r2, r2, #2
 800414e:	1882      	adds	r2, r0, r2
 8004150:	6a15      	ldr	r5, [r2, #32]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004152:	9c00      	ldr	r4, [sp, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004154:	43b5      	bics	r5, r6
 8004156:	6215      	str	r5, [r2, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004158:	6882      	ldr	r2, [r0, #8]
 800415a:	400a      	ands	r2, r1
 800415c:	6082      	str	r2, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800415e:	6842      	ldr	r2, [r0, #4]
 8004160:	43a2      	bics	r2, r4
 8004162:	6042      	str	r2, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004164:	68c2      	ldr	r2, [r0, #12]
 8004166:	4011      	ands	r1, r2
 8004168:	60c1      	str	r1, [r0, #12]
    position++;
 800416a:	3301      	adds	r3, #1
 800416c:	e79b      	b.n	80040a6 <HAL_GPIO_DeInit+0xa>
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	40021800 	.word	0x40021800
 8004174:	50000400 	.word	0x50000400
 8004178:	50000800 	.word	0x50000800
 800417c:	50000c00 	.word	0x50000c00
 8004180:	40021804 	.word	0x40021804
 8004184:	40021808 	.word	0x40021808

08004188 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004188:	2a00      	cmp	r2, #0
 800418a:	d001      	beq.n	8004190 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800418c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800418e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004190:	6281      	str	r1, [r0, #40]	; 0x28
}
 8004192:	e7fc      	b.n	800418e <HAL_GPIO_WritePin+0x6>

08004194 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8004194:	6943      	ldr	r3, [r0, #20]
 8004196:	4219      	tst	r1, r3
 8004198:	d001      	beq.n	800419e <HAL_GPIO_TogglePin+0xa>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800419a:	6281      	str	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800419c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800419e:	6181      	str	r1, [r0, #24]
}
 80041a0:	e7fc      	b.n	800419c <HAL_GPIO_TogglePin+0x8>
	...

080041a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041a4:	b570      	push	{r4, r5, r6, lr}
 80041a6:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 80041a8:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80041aa:	2c00      	cmp	r4, #0
 80041ac:	d03f      	beq.n	800422e <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041ae:	0025      	movs	r5, r4
 80041b0:	3541      	adds	r5, #65	; 0x41
 80041b2:	782b      	ldrb	r3, [r5, #0]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d105      	bne.n	80041c6 <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041ba:	0022      	movs	r2, r4
 80041bc:	3240      	adds	r2, #64	; 0x40
 80041be:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80041c0:	0020      	movs	r0, r4
 80041c2:	f7ff f905 	bl	80033d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041c6:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041c8:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80041ca:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80041cc:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041ce:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68a6      	ldr	r6, [r4, #8]
 80041d4:	438a      	bics	r2, r1
 80041d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041d8:	6861      	ldr	r1, [r4, #4]
 80041da:	4a1a      	ldr	r2, [pc, #104]	; (8004244 <HAL_I2C_Init+0xa0>)
 80041dc:	400a      	ands	r2, r1
 80041de:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041e0:	6899      	ldr	r1, [r3, #8]
 80041e2:	4a19      	ldr	r2, [pc, #100]	; (8004248 <HAL_I2C_Init+0xa4>)
 80041e4:	4011      	ands	r1, r2
 80041e6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041e8:	2801      	cmp	r0, #1
 80041ea:	d121      	bne.n	8004230 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041ec:	2180      	movs	r1, #128	; 0x80
 80041ee:	0209      	lsls	r1, r1, #8
 80041f0:	4331      	orrs	r1, r6
 80041f2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041f4:	6858      	ldr	r0, [r3, #4]
 80041f6:	4915      	ldr	r1, [pc, #84]	; (800424c <HAL_I2C_Init+0xa8>)
 80041f8:	4301      	orrs	r1, r0
 80041fa:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041fc:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041fe:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004200:	400a      	ands	r2, r1
 8004202:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004204:	6961      	ldr	r1, [r4, #20]
 8004206:	6922      	ldr	r2, [r4, #16]
 8004208:	430a      	orrs	r2, r1
 800420a:	69a1      	ldr	r1, [r4, #24]
 800420c:	0209      	lsls	r1, r1, #8
 800420e:	430a      	orrs	r2, r1
 8004210:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004212:	6a21      	ldr	r1, [r4, #32]
 8004214:	69e2      	ldr	r2, [r4, #28]
 8004216:	430a      	orrs	r2, r1
 8004218:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800421a:	2201      	movs	r2, #1
 800421c:	6819      	ldr	r1, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8004222:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004224:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004226:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004228:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800422a:	3442      	adds	r4, #66	; 0x42
 800422c:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800422e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004230:	2184      	movs	r1, #132	; 0x84
 8004232:	0209      	lsls	r1, r1, #8
 8004234:	4331      	orrs	r1, r6
 8004236:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004238:	2802      	cmp	r0, #2
 800423a:	d1db      	bne.n	80041f4 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800423c:	2180      	movs	r1, #128	; 0x80
 800423e:	0109      	lsls	r1, r1, #4
 8004240:	6059      	str	r1, [r3, #4]
 8004242:	e7d7      	b.n	80041f4 <HAL_I2C_Init+0x50>
 8004244:	f0ffffff 	.word	0xf0ffffff
 8004248:	ffff7fff 	.word	0xffff7fff
 800424c:	02008000 	.word	0x02008000

08004250 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004250:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004252:	0004      	movs	r4, r0
 8004254:	3441      	adds	r4, #65	; 0x41
 8004256:	7822      	ldrb	r2, [r4, #0]
{
 8004258:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800425a:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800425c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800425e:	2a20      	cmp	r2, #32
 8004260:	d118      	bne.n	8004294 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8004262:	001d      	movs	r5, r3
 8004264:	3540      	adds	r5, #64	; 0x40
 8004266:	782e      	ldrb	r6, [r5, #0]
 8004268:	2e01      	cmp	r6, #1
 800426a:	d013      	beq.n	8004294 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 800426c:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800426e:	3022      	adds	r0, #34	; 0x22
 8004270:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8004272:	681e      	ldr	r6, [r3, #0]
 8004274:	3823      	subs	r0, #35	; 0x23
 8004276:	4386      	bics	r6, r0
 8004278:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800427a:	681e      	ldr	r6, [r3, #0]
 800427c:	4f06      	ldr	r7, [pc, #24]	; (8004298 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 800427e:	403e      	ands	r6, r7
 8004280:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8004282:	681e      	ldr	r6, [r3, #0]
 8004284:	4331      	orrs	r1, r6
 8004286:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8004288:	6819      	ldr	r1, [r3, #0]
 800428a:	4308      	orrs	r0, r1
 800428c:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800428e:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004290:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8004292:	7028      	strb	r0, [r5, #0]
  }
}
 8004294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	ffffefff 	.word	0xffffefff

0800429c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800429c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800429e:	0005      	movs	r5, r0
 80042a0:	3541      	adds	r5, #65	; 0x41
 80042a2:	782a      	ldrb	r2, [r5, #0]
{
 80042a4:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a6:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80042a8:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80042aa:	2a20      	cmp	r2, #32
 80042ac:	d117      	bne.n	80042de <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 80042ae:	001c      	movs	r4, r3
 80042b0:	3440      	adds	r4, #64	; 0x40
 80042b2:	7826      	ldrb	r6, [r4, #0]
 80042b4:	2e01      	cmp	r6, #1
 80042b6:	d012      	beq.n	80042de <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 80042b8:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80042ba:	3022      	adds	r0, #34	; 0x22
 80042bc:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 80042be:	681e      	ldr	r6, [r3, #0]
 80042c0:	3823      	subs	r0, #35	; 0x23
 80042c2:	4386      	bics	r6, r0
 80042c4:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80042c6:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80042c8:	4f05      	ldr	r7, [pc, #20]	; (80042e0 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 80042ca:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80042cc:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80042ce:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80042d0:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80042d2:	6819      	ldr	r1, [r3, #0]
 80042d4:	4308      	orrs	r0, r1
 80042d6:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80042d8:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80042da:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80042dc:	7020      	strb	r0, [r4, #0]
  }
}
 80042de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042e0:	fffff0ff 	.word	0xfffff0ff

080042e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042e4:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80042e6:	4c10      	ldr	r4, [pc, #64]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0x44>)
 80042e8:	4910      	ldr	r1, [pc, #64]	; (800432c <HAL_PWREx_ControlVoltageScaling+0x48>)
 80042ea:	6823      	ldr	r3, [r4, #0]
{
 80042ec:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80042ee:	400b      	ands	r3, r1
 80042f0:	4303      	orrs	r3, r0
 80042f2:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042f4:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80042f6:	2000      	movs	r0, #0
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d10c      	bne.n	8004318 <HAL_PWREx_ControlVoltageScaling+0x34>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80042fe:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8004300:	490c      	ldr	r1, [pc, #48]	; (8004334 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8004302:	6818      	ldr	r0, [r3, #0]
 8004304:	2306      	movs	r3, #6
 8004306:	4358      	muls	r0, r3
 8004308:	f7fb ff20 	bl	800014c <__udivsi3>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800430c:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800430e:	1c43      	adds	r3, r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004310:	00d2      	lsls	r2, r2, #3
 8004312:	6960      	ldr	r0, [r4, #20]
 8004314:	4010      	ands	r0, r2
 8004316:	d100      	bne.n	800431a <HAL_PWREx_ControlVoltageScaling+0x36>
}
 8004318:	bd10      	pop	{r4, pc}
      if(wait_loop_index != 0U)
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <HAL_PWREx_ControlVoltageScaling+0x3e>
        wait_loop_index--;
 800431e:	3b01      	subs	r3, #1
 8004320:	e7f7      	b.n	8004312 <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 8004322:	2003      	movs	r0, #3
 8004324:	e7f8      	b.n	8004318 <HAL_PWREx_ControlVoltageScaling+0x34>
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	40007000 	.word	0x40007000
 800432c:	fffff9ff 	.word	0xfffff9ff
 8004330:	20000004 	.word	0x20000004
 8004334:	000f4240 	.word	0x000f4240

08004338 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800433a:	0004      	movs	r4, r0
 800433c:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800433e:	2800      	cmp	r0, #0
 8004340:	d102      	bne.n	8004348 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8004342:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8004344:	b005      	add	sp, #20
 8004346:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004348:	6803      	ldr	r3, [r0, #0]
 800434a:	07db      	lsls	r3, r3, #31
 800434c:	d410      	bmi.n	8004370 <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	079b      	lsls	r3, r3, #30
 8004352:	d45c      	bmi.n	800440e <HAL_RCC_OscConfig+0xd6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	071b      	lsls	r3, r3, #28
 8004358:	d500      	bpl.n	800435c <HAL_RCC_OscConfig+0x24>
 800435a:	e0c2      	b.n	80044e2 <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	075b      	lsls	r3, r3, #29
 8004360:	d500      	bpl.n	8004364 <HAL_RCC_OscConfig+0x2c>
 8004362:	e0f4      	b.n	800454e <HAL_RCC_OscConfig+0x216>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004364:	69e2      	ldr	r2, [r4, #28]
 8004366:	2a00      	cmp	r2, #0
 8004368:	d000      	beq.n	800436c <HAL_RCC_OscConfig+0x34>
 800436a:	e173      	b.n	8004654 <HAL_RCC_OscConfig+0x31c>
  return HAL_OK;
 800436c:	2000      	movs	r0, #0
 800436e:	e7e9      	b.n	8004344 <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004370:	2238      	movs	r2, #56	; 0x38
 8004372:	4dac      	ldr	r5, [pc, #688]	; (8004624 <HAL_RCC_OscConfig+0x2ec>)
 8004374:	68ab      	ldr	r3, [r5, #8]
 8004376:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004378:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800437a:	2b10      	cmp	r3, #16
 800437c:	d109      	bne.n	8004392 <HAL_RCC_OscConfig+0x5a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800437e:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004380:	0793      	lsls	r3, r2, #30
 8004382:	d108      	bne.n	8004396 <HAL_RCC_OscConfig+0x5e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004384:	682b      	ldr	r3, [r5, #0]
 8004386:	039b      	lsls	r3, r3, #14
 8004388:	d5e1      	bpl.n	800434e <HAL_RCC_OscConfig+0x16>
 800438a:	6863      	ldr	r3, [r4, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1de      	bne.n	800434e <HAL_RCC_OscConfig+0x16>
 8004390:	e7d7      	b.n	8004342 <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004392:	2b08      	cmp	r3, #8
 8004394:	d0f6      	beq.n	8004384 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004396:	2280      	movs	r2, #128	; 0x80
 8004398:	6863      	ldr	r3, [r4, #4]
 800439a:	0252      	lsls	r2, r2, #9
 800439c:	4293      	cmp	r3, r2
 800439e:	d111      	bne.n	80043c4 <HAL_RCC_OscConfig+0x8c>
 80043a0:	682a      	ldr	r2, [r5, #0]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80043a6:	f7ff fb25 	bl	80039f4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043aa:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80043ac:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ae:	02b6      	lsls	r6, r6, #10
 80043b0:	682b      	ldr	r3, [r5, #0]
 80043b2:	4233      	tst	r3, r6
 80043b4:	d1cb      	bne.n	800434e <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043b6:	f7ff fb1d 	bl	80039f4 <HAL_GetTick>
 80043ba:	1bc0      	subs	r0, r0, r7
 80043bc:	2864      	cmp	r0, #100	; 0x64
 80043be:	d9f7      	bls.n	80043b0 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80043c0:	2003      	movs	r0, #3
 80043c2:	e7bf      	b.n	8004344 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043c4:	21a0      	movs	r1, #160	; 0xa0
 80043c6:	02c9      	lsls	r1, r1, #11
 80043c8:	428b      	cmp	r3, r1
 80043ca:	d108      	bne.n	80043de <HAL_RCC_OscConfig+0xa6>
 80043cc:	2380      	movs	r3, #128	; 0x80
 80043ce:	6829      	ldr	r1, [r5, #0]
 80043d0:	02db      	lsls	r3, r3, #11
 80043d2:	430b      	orrs	r3, r1
 80043d4:	602b      	str	r3, [r5, #0]
 80043d6:	682b      	ldr	r3, [r5, #0]
 80043d8:	431a      	orrs	r2, r3
 80043da:	602a      	str	r2, [r5, #0]
 80043dc:	e7e3      	b.n	80043a6 <HAL_RCC_OscConfig+0x6e>
 80043de:	682a      	ldr	r2, [r5, #0]
 80043e0:	4991      	ldr	r1, [pc, #580]	; (8004628 <HAL_RCC_OscConfig+0x2f0>)
 80043e2:	400a      	ands	r2, r1
 80043e4:	602a      	str	r2, [r5, #0]
 80043e6:	682a      	ldr	r2, [r5, #0]
 80043e8:	4990      	ldr	r1, [pc, #576]	; (800462c <HAL_RCC_OscConfig+0x2f4>)
 80043ea:	400a      	ands	r2, r1
 80043ec:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1d9      	bne.n	80043a6 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 80043f2:	f7ff faff 	bl	80039f4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043f6:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80043f8:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043fa:	02b6      	lsls	r6, r6, #10
 80043fc:	682b      	ldr	r3, [r5, #0]
 80043fe:	4233      	tst	r3, r6
 8004400:	d0a5      	beq.n	800434e <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004402:	f7ff faf7 	bl	80039f4 <HAL_GetTick>
 8004406:	1bc0      	subs	r0, r0, r7
 8004408:	2864      	cmp	r0, #100	; 0x64
 800440a:	d9f7      	bls.n	80043fc <HAL_RCC_OscConfig+0xc4>
 800440c:	e7d8      	b.n	80043c0 <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800440e:	2338      	movs	r3, #56	; 0x38
 8004410:	4d84      	ldr	r5, [pc, #528]	; (8004624 <HAL_RCC_OscConfig+0x2ec>)
 8004412:	68aa      	ldr	r2, [r5, #8]
 8004414:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004416:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004418:	2b10      	cmp	r3, #16
 800441a:	d129      	bne.n	8004470 <HAL_RCC_OscConfig+0x138>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800441c:	2103      	movs	r1, #3
 800441e:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004420:	2a02      	cmp	r2, #2
 8004422:	d127      	bne.n	8004474 <HAL_RCC_OscConfig+0x13c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004424:	682a      	ldr	r2, [r5, #0]
 8004426:	0552      	lsls	r2, r2, #21
 8004428:	d503      	bpl.n	8004432 <HAL_RCC_OscConfig+0xfa>
 800442a:	68e2      	ldr	r2, [r4, #12]
 800442c:	2a00      	cmp	r2, #0
 800442e:	d100      	bne.n	8004432 <HAL_RCC_OscConfig+0xfa>
 8004430:	e787      	b.n	8004342 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004432:	6869      	ldr	r1, [r5, #4]
 8004434:	6962      	ldr	r2, [r4, #20]
 8004436:	487e      	ldr	r0, [pc, #504]	; (8004630 <HAL_RCC_OscConfig+0x2f8>)
 8004438:	0212      	lsls	r2, r2, #8
 800443a:	4001      	ands	r1, r0
 800443c:	430a      	orrs	r2, r1
 800443e:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10d      	bne.n	8004460 <HAL_RCC_OscConfig+0x128>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004444:	682b      	ldr	r3, [r5, #0]
 8004446:	4a7b      	ldr	r2, [pc, #492]	; (8004634 <HAL_RCC_OscConfig+0x2fc>)
 8004448:	4013      	ands	r3, r2
 800444a:	6922      	ldr	r2, [r4, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004450:	682b      	ldr	r3, [r5, #0]
 8004452:	4a79      	ldr	r2, [pc, #484]	; (8004638 <HAL_RCC_OscConfig+0x300>)
 8004454:	049b      	lsls	r3, r3, #18
 8004456:	0f5b      	lsrs	r3, r3, #29
 8004458:	40da      	lsrs	r2, r3
 800445a:	0013      	movs	r3, r2
 800445c:	4a77      	ldr	r2, [pc, #476]	; (800463c <HAL_RCC_OscConfig+0x304>)
 800445e:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004460:	4b77      	ldr	r3, [pc, #476]	; (8004640 <HAL_RCC_OscConfig+0x308>)
 8004462:	6818      	ldr	r0, [r3, #0]
 8004464:	f7ff f950 	bl	8003708 <HAL_InitTick>
 8004468:	2800      	cmp	r0, #0
 800446a:	d100      	bne.n	800446e <HAL_RCC_OscConfig+0x136>
 800446c:	e772      	b.n	8004354 <HAL_RCC_OscConfig+0x1c>
 800446e:	e768      	b.n	8004342 <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0d7      	beq.n	8004424 <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004474:	68e3      	ldr	r3, [r4, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d020      	beq.n	80044bc <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800447a:	682b      	ldr	r3, [r5, #0]
 800447c:	4a6d      	ldr	r2, [pc, #436]	; (8004634 <HAL_RCC_OscConfig+0x2fc>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800447e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004480:	4013      	ands	r3, r2
 8004482:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004484:	00f6      	lsls	r6, r6, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004486:	4313      	orrs	r3, r2
 8004488:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 800448a:	2380      	movs	r3, #128	; 0x80
 800448c:	682a      	ldr	r2, [r5, #0]
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	4313      	orrs	r3, r2
 8004492:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004494:	f7ff faae 	bl	80039f4 <HAL_GetTick>
 8004498:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800449a:	682b      	ldr	r3, [r5, #0]
 800449c:	4233      	tst	r3, r6
 800449e:	d007      	beq.n	80044b0 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a0:	686a      	ldr	r2, [r5, #4]
 80044a2:	6963      	ldr	r3, [r4, #20]
 80044a4:	4962      	ldr	r1, [pc, #392]	; (8004630 <HAL_RCC_OscConfig+0x2f8>)
 80044a6:	021b      	lsls	r3, r3, #8
 80044a8:	400a      	ands	r2, r1
 80044aa:	4313      	orrs	r3, r2
 80044ac:	606b      	str	r3, [r5, #4]
 80044ae:	e751      	b.n	8004354 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b0:	f7ff faa0 	bl	80039f4 <HAL_GetTick>
 80044b4:	1bc0      	subs	r0, r0, r7
 80044b6:	2802      	cmp	r0, #2
 80044b8:	d9ef      	bls.n	800449a <HAL_RCC_OscConfig+0x162>
 80044ba:	e781      	b.n	80043c0 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 80044bc:	682b      	ldr	r3, [r5, #0]
 80044be:	4a61      	ldr	r2, [pc, #388]	; (8004644 <HAL_RCC_OscConfig+0x30c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044c0:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 80044c2:	4013      	ands	r3, r2
 80044c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80044c6:	f7ff fa95 	bl	80039f4 <HAL_GetTick>
 80044ca:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044cc:	00f6      	lsls	r6, r6, #3
 80044ce:	682b      	ldr	r3, [r5, #0]
 80044d0:	4233      	tst	r3, r6
 80044d2:	d100      	bne.n	80044d6 <HAL_RCC_OscConfig+0x19e>
 80044d4:	e73e      	b.n	8004354 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d6:	f7ff fa8d 	bl	80039f4 <HAL_GetTick>
 80044da:	1bc0      	subs	r0, r0, r7
 80044dc:	2802      	cmp	r0, #2
 80044de:	d9f6      	bls.n	80044ce <HAL_RCC_OscConfig+0x196>
 80044e0:	e76e      	b.n	80043c0 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80044e2:	2138      	movs	r1, #56	; 0x38
 80044e4:	4b4f      	ldr	r3, [pc, #316]	; (8004624 <HAL_RCC_OscConfig+0x2ec>)
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	001d      	movs	r5, r3
 80044ea:	400a      	ands	r2, r1
 80044ec:	2a18      	cmp	r2, #24
 80044ee:	d108      	bne.n	8004502 <HAL_RCC_OscConfig+0x1ca>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80044f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f2:	079b      	lsls	r3, r3, #30
 80044f4:	d400      	bmi.n	80044f8 <HAL_RCC_OscConfig+0x1c0>
 80044f6:	e731      	b.n	800435c <HAL_RCC_OscConfig+0x24>
 80044f8:	69a3      	ldr	r3, [r4, #24]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d000      	beq.n	8004500 <HAL_RCC_OscConfig+0x1c8>
 80044fe:	e72d      	b.n	800435c <HAL_RCC_OscConfig+0x24>
 8004500:	e71f      	b.n	8004342 <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004502:	69a2      	ldr	r2, [r4, #24]
 8004504:	2301      	movs	r3, #1
 8004506:	2a00      	cmp	r2, #0
 8004508:	d010      	beq.n	800452c <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_LSI_ENABLE();
 800450a:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800450c:	2602      	movs	r6, #2
        __HAL_RCC_LSI_ENABLE();
 800450e:	4313      	orrs	r3, r2
 8004510:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004512:	f7ff fa6f 	bl	80039f4 <HAL_GetTick>
 8004516:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004518:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800451a:	4233      	tst	r3, r6
 800451c:	d000      	beq.n	8004520 <HAL_RCC_OscConfig+0x1e8>
 800451e:	e71d      	b.n	800435c <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004520:	f7ff fa68 	bl	80039f4 <HAL_GetTick>
 8004524:	1bc0      	subs	r0, r0, r7
 8004526:	2802      	cmp	r0, #2
 8004528:	d9f6      	bls.n	8004518 <HAL_RCC_OscConfig+0x1e0>
 800452a:	e749      	b.n	80043c0 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_LSI_DISABLE();
 800452c:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800452e:	2602      	movs	r6, #2
        __HAL_RCC_LSI_DISABLE();
 8004530:	439a      	bics	r2, r3
 8004532:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004534:	f7ff fa5e 	bl	80039f4 <HAL_GetTick>
 8004538:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800453a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800453c:	4233      	tst	r3, r6
 800453e:	d100      	bne.n	8004542 <HAL_RCC_OscConfig+0x20a>
 8004540:	e70c      	b.n	800435c <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004542:	f7ff fa57 	bl	80039f4 <HAL_GetTick>
 8004546:	1bc0      	subs	r0, r0, r7
 8004548:	2802      	cmp	r0, #2
 800454a:	d9f6      	bls.n	800453a <HAL_RCC_OscConfig+0x202>
 800454c:	e738      	b.n	80043c0 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800454e:	2138      	movs	r1, #56	; 0x38
 8004550:	4b34      	ldr	r3, [pc, #208]	; (8004624 <HAL_RCC_OscConfig+0x2ec>)
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	001d      	movs	r5, r3
 8004556:	400a      	ands	r2, r1
 8004558:	2a20      	cmp	r2, #32
 800455a:	d108      	bne.n	800456e <HAL_RCC_OscConfig+0x236>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800455c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455e:	079b      	lsls	r3, r3, #30
 8004560:	d400      	bmi.n	8004564 <HAL_RCC_OscConfig+0x22c>
 8004562:	e6ff      	b.n	8004364 <HAL_RCC_OscConfig+0x2c>
 8004564:	68a3      	ldr	r3, [r4, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d000      	beq.n	800456c <HAL_RCC_OscConfig+0x234>
 800456a:	e6fb      	b.n	8004364 <HAL_RCC_OscConfig+0x2c>
 800456c:	e6e9      	b.n	8004342 <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800456e:	2280      	movs	r2, #128	; 0x80
 8004570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004572:	0552      	lsls	r2, r2, #21
 8004574:	4213      	tst	r3, r2
 8004576:	d100      	bne.n	800457a <HAL_RCC_OscConfig+0x242>
 8004578:	e0ed      	b.n	8004756 <HAL_RCC_OscConfig+0x41e>
    FlagStatus       pwrclkchanged = RESET;
 800457a:	2300      	movs	r3, #0
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800457c:	2780      	movs	r7, #128	; 0x80
 800457e:	4e32      	ldr	r6, [pc, #200]	; (8004648 <HAL_RCC_OscConfig+0x310>)
    FlagStatus       pwrclkchanged = RESET;
 8004580:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004582:	6833      	ldr	r3, [r6, #0]
 8004584:	007f      	lsls	r7, r7, #1
 8004586:	423b      	tst	r3, r7
 8004588:	d015      	beq.n	80045b6 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800458a:	68a3      	ldr	r3, [r4, #8]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d122      	bne.n	80045d6 <HAL_RCC_OscConfig+0x29e>
 8004590:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8004592:	4313      	orrs	r3, r2
 8004594:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8004596:	f7ff fa2d 	bl	80039f4 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800459a:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 800459c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800459e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80045a0:	423b      	tst	r3, r7
 80045a2:	d038      	beq.n	8004616 <HAL_RCC_OscConfig+0x2de>
      if (pwrclkchanged == SET)
 80045a4:	9b00      	ldr	r3, [sp, #0]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d000      	beq.n	80045ac <HAL_RCC_OscConfig+0x274>
 80045aa:	e6db      	b.n	8004364 <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 80045ac:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80045ae:	4a27      	ldr	r2, [pc, #156]	; (800464c <HAL_RCC_OscConfig+0x314>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	63eb      	str	r3, [r5, #60]	; 0x3c
 80045b4:	e6d6      	b.n	8004364 <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045b6:	6833      	ldr	r3, [r6, #0]
 80045b8:	433b      	orrs	r3, r7
 80045ba:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80045bc:	f7ff fa1a 	bl	80039f4 <HAL_GetTick>
 80045c0:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045c2:	6833      	ldr	r3, [r6, #0]
 80045c4:	423b      	tst	r3, r7
 80045c6:	d1e0      	bne.n	800458a <HAL_RCC_OscConfig+0x252>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c8:	f7ff fa14 	bl	80039f4 <HAL_GetTick>
 80045cc:	9b01      	ldr	r3, [sp, #4]
 80045ce:	1ac0      	subs	r0, r0, r3
 80045d0:	2802      	cmp	r0, #2
 80045d2:	d9f6      	bls.n	80045c2 <HAL_RCC_OscConfig+0x28a>
 80045d4:	e6f4      	b.n	80043c0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045d6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80045d8:	2b05      	cmp	r3, #5
 80045da:	d105      	bne.n	80045e8 <HAL_RCC_OscConfig+0x2b0>
 80045dc:	3b01      	subs	r3, #1
 80045de:	4313      	orrs	r3, r2
 80045e0:	65eb      	str	r3, [r5, #92]	; 0x5c
 80045e2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80045e4:	2301      	movs	r3, #1
 80045e6:	e7d4      	b.n	8004592 <HAL_RCC_OscConfig+0x25a>
 80045e8:	2101      	movs	r1, #1
 80045ea:	438a      	bics	r2, r1
 80045ec:	65ea      	str	r2, [r5, #92]	; 0x5c
 80045ee:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80045f0:	3103      	adds	r1, #3
 80045f2:	438a      	bics	r2, r1
 80045f4:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1cd      	bne.n	8004596 <HAL_RCC_OscConfig+0x25e>
        tickstart = HAL_GetTick();
 80045fa:	f7ff f9fb 	bl	80039f4 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045fe:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8004600:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004602:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8004604:	423b      	tst	r3, r7
 8004606:	d0cd      	beq.n	80045a4 <HAL_RCC_OscConfig+0x26c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004608:	f7ff f9f4 	bl	80039f4 <HAL_GetTick>
 800460c:	4b10      	ldr	r3, [pc, #64]	; (8004650 <HAL_RCC_OscConfig+0x318>)
 800460e:	1b80      	subs	r0, r0, r6
 8004610:	4298      	cmp	r0, r3
 8004612:	d9f6      	bls.n	8004602 <HAL_RCC_OscConfig+0x2ca>
 8004614:	e6d4      	b.n	80043c0 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004616:	f7ff f9ed 	bl	80039f4 <HAL_GetTick>
 800461a:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <HAL_RCC_OscConfig+0x318>)
 800461c:	1b80      	subs	r0, r0, r6
 800461e:	4298      	cmp	r0, r3
 8004620:	d9bd      	bls.n	800459e <HAL_RCC_OscConfig+0x266>
 8004622:	e6cd      	b.n	80043c0 <HAL_RCC_OscConfig+0x88>
 8004624:	40021000 	.word	0x40021000
 8004628:	fffeffff 	.word	0xfffeffff
 800462c:	fffbffff 	.word	0xfffbffff
 8004630:	ffff80ff 	.word	0xffff80ff
 8004634:	ffffc7ff 	.word	0xffffc7ff
 8004638:	00f42400 	.word	0x00f42400
 800463c:	20000004 	.word	0x20000004
 8004640:	2000000c 	.word	0x2000000c
 8004644:	fffffeff 	.word	0xfffffeff
 8004648:	40007000 	.word	0x40007000
 800464c:	efffffff 	.word	0xefffffff
 8004650:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004654:	2038      	movs	r0, #56	; 0x38
 8004656:	4b44      	ldr	r3, [pc, #272]	; (8004768 <HAL_RCC_OscConfig+0x430>)
 8004658:	6899      	ldr	r1, [r3, #8]
 800465a:	001d      	movs	r5, r3
 800465c:	4001      	ands	r1, r0
 800465e:	2910      	cmp	r1, #16
 8004660:	d052      	beq.n	8004708 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_DISABLE();
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4941      	ldr	r1, [pc, #260]	; (800476c <HAL_RCC_OscConfig+0x434>)
 8004666:	400b      	ands	r3, r1
 8004668:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800466a:	2a02      	cmp	r2, #2
 800466c:	d135      	bne.n	80046da <HAL_RCC_OscConfig+0x3a2>
        tickstart = HAL_GetTick();
 800466e:	f7ff f9c1 	bl	80039f4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004672:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8004674:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004676:	04b6      	lsls	r6, r6, #18
 8004678:	682b      	ldr	r3, [r5, #0]
 800467a:	4233      	tst	r3, r6
 800467c:	d127      	bne.n	80046ce <HAL_RCC_OscConfig+0x396>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800467e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004680:	6a23      	ldr	r3, [r4, #32]
 8004682:	68ea      	ldr	r2, [r5, #12]
 8004684:	430b      	orrs	r3, r1
 8004686:	493a      	ldr	r1, [pc, #232]	; (8004770 <HAL_RCC_OscConfig+0x438>)
 8004688:	400a      	ands	r2, r1
 800468a:	4313      	orrs	r3, r2
 800468c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800468e:	4313      	orrs	r3, r2
 8004690:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004692:	4313      	orrs	r3, r2
 8004694:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004696:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004698:	0212      	lsls	r2, r2, #8
 800469a:	4313      	orrs	r3, r2
 800469c:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800469e:	2380      	movs	r3, #128	; 0x80
 80046a0:	682a      	ldr	r2, [r5, #0]
 80046a2:	045b      	lsls	r3, r3, #17
 80046a4:	4313      	orrs	r3, r2
 80046a6:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80046a8:	2380      	movs	r3, #128	; 0x80
 80046aa:	68ea      	ldr	r2, [r5, #12]
 80046ac:	055b      	lsls	r3, r3, #21
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80046b2:	f7ff f99f 	bl	80039f4 <HAL_GetTick>
 80046b6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046b8:	04a4      	lsls	r4, r4, #18
 80046ba:	682b      	ldr	r3, [r5, #0]
 80046bc:	4223      	tst	r3, r4
 80046be:	d000      	beq.n	80046c2 <HAL_RCC_OscConfig+0x38a>
 80046c0:	e654      	b.n	800436c <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c2:	f7ff f997 	bl	80039f4 <HAL_GetTick>
 80046c6:	1b80      	subs	r0, r0, r6
 80046c8:	2802      	cmp	r0, #2
 80046ca:	d9f6      	bls.n	80046ba <HAL_RCC_OscConfig+0x382>
 80046cc:	e678      	b.n	80043c0 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ce:	f7ff f991 	bl	80039f4 <HAL_GetTick>
 80046d2:	1bc0      	subs	r0, r0, r7
 80046d4:	2802      	cmp	r0, #2
 80046d6:	d9cf      	bls.n	8004678 <HAL_RCC_OscConfig+0x340>
 80046d8:	e672      	b.n	80043c0 <HAL_RCC_OscConfig+0x88>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80046da:	2203      	movs	r2, #3
 80046dc:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046de:	2480      	movs	r4, #128	; 0x80
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80046e0:	4393      	bics	r3, r2
 80046e2:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80046e4:	68eb      	ldr	r3, [r5, #12]
 80046e6:	4a23      	ldr	r2, [pc, #140]	; (8004774 <HAL_RCC_OscConfig+0x43c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e8:	04a4      	lsls	r4, r4, #18
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80046ea:	4013      	ands	r3, r2
 80046ec:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80046ee:	f7ff f981 	bl	80039f4 <HAL_GetTick>
 80046f2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046f4:	682b      	ldr	r3, [r5, #0]
 80046f6:	4223      	tst	r3, r4
 80046f8:	d100      	bne.n	80046fc <HAL_RCC_OscConfig+0x3c4>
 80046fa:	e637      	b.n	800436c <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046fc:	f7ff f97a 	bl	80039f4 <HAL_GetTick>
 8004700:	1b80      	subs	r0, r0, r6
 8004702:	2802      	cmp	r0, #2
 8004704:	d9f6      	bls.n	80046f4 <HAL_RCC_OscConfig+0x3bc>
 8004706:	e65b      	b.n	80043c0 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004708:	2a01      	cmp	r2, #1
 800470a:	d100      	bne.n	800470e <HAL_RCC_OscConfig+0x3d6>
 800470c:	e619      	b.n	8004342 <HAL_RCC_OscConfig+0xa>
        temp_pllckcfg = RCC->PLLCFGR;
 800470e:	68d8      	ldr	r0, [r3, #12]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004710:	2303      	movs	r3, #3
 8004712:	6a22      	ldr	r2, [r4, #32]
 8004714:	4003      	ands	r3, r0
 8004716:	4293      	cmp	r3, r2
 8004718:	d000      	beq.n	800471c <HAL_RCC_OscConfig+0x3e4>
 800471a:	e612      	b.n	8004342 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800471c:	2370      	movs	r3, #112	; 0x70
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471e:	6a62      	ldr	r2, [r4, #36]	; 0x24
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004720:	4003      	ands	r3, r0
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004722:	4293      	cmp	r3, r2
 8004724:	d000      	beq.n	8004728 <HAL_RCC_OscConfig+0x3f0>
 8004726:	e60c      	b.n	8004342 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004728:	22fe      	movs	r2, #254	; 0xfe
 800472a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800472c:	01d2      	lsls	r2, r2, #7
 800472e:	4002      	ands	r2, r0
 8004730:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004732:	429a      	cmp	r2, r3
 8004734:	d000      	beq.n	8004738 <HAL_RCC_OscConfig+0x400>
 8004736:	e604      	b.n	8004342 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004738:	23f8      	movs	r3, #248	; 0xf8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800473a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800473c:	039b      	lsls	r3, r3, #14
 800473e:	4003      	ands	r3, r0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004740:	4293      	cmp	r3, r2
 8004742:	d000      	beq.n	8004746 <HAL_RCC_OscConfig+0x40e>
 8004744:	e5fd      	b.n	8004342 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004746:	6b23      	ldr	r3, [r4, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004748:	0f40      	lsrs	r0, r0, #29
 800474a:	0740      	lsls	r0, r0, #29
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800474c:	1ac0      	subs	r0, r0, r3
 800474e:	1e43      	subs	r3, r0, #1
 8004750:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8004752:	b2c0      	uxtb	r0, r0
 8004754:	e5f6      	b.n	8004344 <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_PWR_CLK_ENABLE();
 8004756:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004758:	4313      	orrs	r3, r2
 800475a:	63eb      	str	r3, [r5, #60]	; 0x3c
 800475c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800475e:	4013      	ands	r3, r2
 8004760:	9303      	str	r3, [sp, #12]
 8004762:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8004764:	2301      	movs	r3, #1
 8004766:	e709      	b.n	800457c <HAL_RCC_OscConfig+0x244>
 8004768:	40021000 	.word	0x40021000
 800476c:	feffffff 	.word	0xfeffffff
 8004770:	1fc1808c 	.word	0x1fc1808c
 8004774:	effeffff 	.word	0xeffeffff

08004778 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004778:	2338      	movs	r3, #56	; 0x38
 800477a:	4a1f      	ldr	r2, [pc, #124]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x80>)
{
 800477c:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800477e:	6891      	ldr	r1, [r2, #8]
 8004780:	0014      	movs	r4, r2
 8004782:	4219      	tst	r1, r3
 8004784:	d108      	bne.n	8004798 <HAL_RCC_GetSysClockFreq+0x20>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004786:	2101      	movs	r1, #1
 8004788:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800478a:	481c      	ldr	r0, [pc, #112]	; (80047fc <HAL_RCC_GetSysClockFreq+0x84>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800478c:	049b      	lsls	r3, r3, #18
 800478e:	0f5b      	lsrs	r3, r3, #29
 8004790:	4099      	lsls	r1, r3
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
        break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
    sysclockfreq = pllvco / pllr;
 8004792:	f7fb fcdb 	bl	800014c <__udivsi3>
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8004796:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004798:	6891      	ldr	r1, [r2, #8]
 800479a:	4019      	ands	r1, r3
 800479c:	2908      	cmp	r1, #8
 800479e:	d025      	beq.n	80047ec <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80047a0:	6891      	ldr	r1, [r2, #8]
 80047a2:	4019      	ands	r1, r3
 80047a4:	2910      	cmp	r1, #16
 80047a6:	d115      	bne.n	80047d4 <HAL_RCC_GetSysClockFreq+0x5c>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80047a8:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047aa:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80047ac:	43db      	mvns	r3, r3
 80047ae:	227f      	movs	r2, #127	; 0x7f
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047b0:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047b2:	0649      	lsls	r1, r1, #25
 80047b4:	0f49      	lsrs	r1, r1, #29
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047b6:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047b8:	3101      	adds	r1, #1
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047ba:	4015      	ands	r5, r2
    switch (pllsource)
 80047bc:	079b      	lsls	r3, r3, #30
 80047be:	d107      	bne.n	80047d0 <HAL_RCC_GetSysClockFreq+0x58>
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047c0:	480f      	ldr	r0, [pc, #60]	; (8004800 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80047c2:	f7fb fcc3 	bl	800014c <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80047c6:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80047c8:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80047ca:	0f49      	lsrs	r1, r1, #29
 80047cc:	3101      	adds	r1, #1
 80047ce:	e7e0      	b.n	8004792 <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80047d0:	480a      	ldr	r0, [pc, #40]	; (80047fc <HAL_RCC_GetSysClockFreq+0x84>)
 80047d2:	e7f6      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80047d4:	6891      	ldr	r1, [r2, #8]
 80047d6:	4019      	ands	r1, r3
 80047d8:	2920      	cmp	r1, #32
 80047da:	d009      	beq.n	80047f0 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80047dc:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 80047de:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80047e0:	4013      	ands	r3, r2
 80047e2:	2b18      	cmp	r3, #24
 80047e4:	d1d7      	bne.n	8004796 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSI_VALUE;
 80047e6:	20fa      	movs	r0, #250	; 0xfa
 80047e8:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 80047ea:	e7d4      	b.n	8004796 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = HSE_VALUE;
 80047ec:	4804      	ldr	r0, [pc, #16]	; (8004800 <HAL_RCC_GetSysClockFreq+0x88>)
 80047ee:	e7d2      	b.n	8004796 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSE_VALUE;
 80047f0:	2080      	movs	r0, #128	; 0x80
 80047f2:	0200      	lsls	r0, r0, #8
 80047f4:	e7cf      	b.n	8004796 <HAL_RCC_GetSysClockFreq+0x1e>
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	40021000 	.word	0x40021000
 80047fc:	00f42400 	.word	0x00f42400
 8004800:	007a1200 	.word	0x007a1200

08004804 <HAL_RCC_ClockConfig>:
{
 8004804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004806:	0005      	movs	r5, r0
 8004808:	000e      	movs	r6, r1
  if (RCC_ClkInitStruct == NULL)
 800480a:	2800      	cmp	r0, #0
 800480c:	d101      	bne.n	8004812 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800480e:	2001      	movs	r0, #1
}
 8004810:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004812:	2707      	movs	r7, #7
 8004814:	4c4a      	ldr	r4, [pc, #296]	; (8004940 <HAL_RCC_ClockConfig+0x13c>)
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	403b      	ands	r3, r7
 800481a:	428b      	cmp	r3, r1
 800481c:	d32a      	bcc.n	8004874 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800481e:	6829      	ldr	r1, [r5, #0]
 8004820:	078b      	lsls	r3, r1, #30
 8004822:	d43b      	bmi.n	800489c <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004824:	07cb      	lsls	r3, r1, #31
 8004826:	d448      	bmi.n	80048ba <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004828:	2707      	movs	r7, #7
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	403b      	ands	r3, r7
 800482e:	429e      	cmp	r6, r3
 8004830:	d20a      	bcs.n	8004848 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	43bb      	bics	r3, r7
 8004836:	4333      	orrs	r3, r6
 8004838:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800483a:	f7ff f8db 	bl	80039f4 <HAL_GetTick>
 800483e:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	403b      	ands	r3, r7
 8004844:	429e      	cmp	r6, r3
 8004846:	d16b      	bne.n	8004920 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004848:	682b      	ldr	r3, [r5, #0]
 800484a:	4c3e      	ldr	r4, [pc, #248]	; (8004944 <HAL_RCC_ClockConfig+0x140>)
 800484c:	075b      	lsls	r3, r3, #29
 800484e:	d46f      	bmi.n	8004930 <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004850:	f7ff ff92 	bl	8004778 <HAL_RCC_GetSysClockFreq>
 8004854:	68a3      	ldr	r3, [r4, #8]
 8004856:	4a3c      	ldr	r2, [pc, #240]	; (8004948 <HAL_RCC_ClockConfig+0x144>)
 8004858:	051b      	lsls	r3, r3, #20
 800485a:	0f1b      	lsrs	r3, r3, #28
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	589b      	ldr	r3, [r3, r2]
 8004860:	221f      	movs	r2, #31
 8004862:	4013      	ands	r3, r2
 8004864:	40d8      	lsrs	r0, r3
 8004866:	4b39      	ldr	r3, [pc, #228]	; (800494c <HAL_RCC_ClockConfig+0x148>)
 8004868:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800486a:	4b39      	ldr	r3, [pc, #228]	; (8004950 <HAL_RCC_ClockConfig+0x14c>)
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	f7fe ff4b 	bl	8003708 <HAL_InitTick>
 8004872:	e7cd      	b.n	8004810 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004874:	6823      	ldr	r3, [r4, #0]
 8004876:	43bb      	bics	r3, r7
 8004878:	430b      	orrs	r3, r1
 800487a:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800487c:	f7ff f8ba 	bl	80039f4 <HAL_GetTick>
 8004880:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	403b      	ands	r3, r7
 8004886:	429e      	cmp	r6, r3
 8004888:	d0c9      	beq.n	800481e <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800488a:	f7ff f8b3 	bl	80039f4 <HAL_GetTick>
 800488e:	9b01      	ldr	r3, [sp, #4]
 8004890:	1ac0      	subs	r0, r0, r3
 8004892:	4b30      	ldr	r3, [pc, #192]	; (8004954 <HAL_RCC_ClockConfig+0x150>)
 8004894:	4298      	cmp	r0, r3
 8004896:	d9f4      	bls.n	8004882 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8004898:	2003      	movs	r0, #3
 800489a:	e7b9      	b.n	8004810 <HAL_RCC_ClockConfig+0xc>
 800489c:	4a29      	ldr	r2, [pc, #164]	; (8004944 <HAL_RCC_ClockConfig+0x140>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800489e:	074b      	lsls	r3, r1, #29
 80048a0:	d504      	bpl.n	80048ac <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80048a2:	23e0      	movs	r3, #224	; 0xe0
 80048a4:	6890      	ldr	r0, [r2, #8]
 80048a6:	01db      	lsls	r3, r3, #7
 80048a8:	4303      	orrs	r3, r0
 80048aa:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ac:	6893      	ldr	r3, [r2, #8]
 80048ae:	482a      	ldr	r0, [pc, #168]	; (8004958 <HAL_RCC_ClockConfig+0x154>)
 80048b0:	4003      	ands	r3, r0
 80048b2:	68a8      	ldr	r0, [r5, #8]
 80048b4:	4303      	orrs	r3, r0
 80048b6:	6093      	str	r3, [r2, #8]
 80048b8:	e7b4      	b.n	8004824 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ba:	686a      	ldr	r2, [r5, #4]
 80048bc:	4f21      	ldr	r7, [pc, #132]	; (8004944 <HAL_RCC_ClockConfig+0x140>)
 80048be:	2a01      	cmp	r2, #1
 80048c0:	d119      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	039b      	lsls	r3, r3, #14
 80048c6:	d5a2      	bpl.n	800480e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048c8:	2107      	movs	r1, #7
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	438b      	bics	r3, r1
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 80048d2:	f7ff f88f 	bl	80039f4 <HAL_GetTick>
 80048d6:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d8:	2338      	movs	r3, #56	; 0x38
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	401a      	ands	r2, r3
 80048de:	686b      	ldr	r3, [r5, #4]
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d0a0      	beq.n	8004828 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048e6:	f7ff f885 	bl	80039f4 <HAL_GetTick>
 80048ea:	9b01      	ldr	r3, [sp, #4]
 80048ec:	1ac0      	subs	r0, r0, r3
 80048ee:	4b19      	ldr	r3, [pc, #100]	; (8004954 <HAL_RCC_ClockConfig+0x150>)
 80048f0:	4298      	cmp	r0, r3
 80048f2:	d9f1      	bls.n	80048d8 <HAL_RCC_ClockConfig+0xd4>
 80048f4:	e7d0      	b.n	8004898 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048f6:	2a02      	cmp	r2, #2
 80048f8:	d103      	bne.n	8004902 <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	019b      	lsls	r3, r3, #6
 80048fe:	d4e3      	bmi.n	80048c8 <HAL_RCC_ClockConfig+0xc4>
 8004900:	e785      	b.n	800480e <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004902:	2a00      	cmp	r2, #0
 8004904:	d103      	bne.n	800490e <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	055b      	lsls	r3, r3, #21
 800490a:	d4dd      	bmi.n	80048c8 <HAL_RCC_ClockConfig+0xc4>
 800490c:	e77f      	b.n	800480e <HAL_RCC_ClockConfig+0xa>
 800490e:	2302      	movs	r3, #2
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004910:	2a03      	cmp	r2, #3
 8004912:	d103      	bne.n	800491c <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004914:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004916:	4219      	tst	r1, r3
 8004918:	d1d6      	bne.n	80048c8 <HAL_RCC_ClockConfig+0xc4>
 800491a:	e778      	b.n	800480e <HAL_RCC_ClockConfig+0xa>
 800491c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800491e:	e7fa      	b.n	8004916 <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004920:	f7ff f868 	bl	80039f4 <HAL_GetTick>
 8004924:	9b01      	ldr	r3, [sp, #4]
 8004926:	1ac0      	subs	r0, r0, r3
 8004928:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <HAL_RCC_ClockConfig+0x150>)
 800492a:	4298      	cmp	r0, r3
 800492c:	d988      	bls.n	8004840 <HAL_RCC_ClockConfig+0x3c>
 800492e:	e7b3      	b.n	8004898 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004930:	68a3      	ldr	r3, [r4, #8]
 8004932:	4a0a      	ldr	r2, [pc, #40]	; (800495c <HAL_RCC_ClockConfig+0x158>)
 8004934:	4013      	ands	r3, r2
 8004936:	68ea      	ldr	r2, [r5, #12]
 8004938:	4313      	orrs	r3, r2
 800493a:	60a3      	str	r3, [r4, #8]
 800493c:	e788      	b.n	8004850 <HAL_RCC_ClockConfig+0x4c>
 800493e:	46c0      	nop			; (mov r8, r8)
 8004940:	40022000 	.word	0x40022000
 8004944:	40021000 	.word	0x40021000
 8004948:	080097f4 	.word	0x080097f4
 800494c:	20000004 	.word	0x20000004
 8004950:	2000000c 	.word	0x2000000c
 8004954:	00001388 	.word	0x00001388
 8004958:	fffff0ff 	.word	0xfffff0ff
 800495c:	ffff8fff 	.word	0xffff8fff

08004960 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004960:	4b06      	ldr	r3, [pc, #24]	; (800497c <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004962:	4a07      	ldr	r2, [pc, #28]	; (8004980 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	045b      	lsls	r3, r3, #17
 8004968:	0f5b      	lsrs	r3, r3, #29
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	589b      	ldr	r3, [r3, r2]
 800496e:	221f      	movs	r2, #31
 8004970:	4013      	ands	r3, r2
 8004972:	4a04      	ldr	r2, [pc, #16]	; (8004984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004974:	6810      	ldr	r0, [r2, #0]
 8004976:	40d8      	lsrs	r0, r3
}
 8004978:	4770      	bx	lr
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	40021000 	.word	0x40021000
 8004980:	08009834 	.word	0x08009834
 8004984:	20000004 	.word	0x20000004

08004988 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004988:	2207      	movs	r2, #7
{
 800498a:	b530      	push	{r4, r5, lr}

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800498c:	25f0      	movs	r5, #240	; 0xf0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800498e:	4b09      	ldr	r3, [pc, #36]	; (80049b4 <HAL_RCC_GetClockConfig+0x2c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004990:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004992:	689c      	ldr	r4, [r3, #8]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004994:	012d      	lsls	r5, r5, #4
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004996:	4014      	ands	r4, r2
 8004998:	6044      	str	r4, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800499a:	689c      	ldr	r4, [r3, #8]
 800499c:	402c      	ands	r4, r5
 800499e:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80049a0:	24e0      	movs	r4, #224	; 0xe0
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	01e4      	lsls	r4, r4, #7
 80049a6:	4023      	ands	r3, r4
 80049a8:	60c3      	str	r3, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049aa:	4b03      	ldr	r3, [pc, #12]	; (80049b8 <HAL_RCC_GetClockConfig+0x30>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4013      	ands	r3, r2
 80049b0:	600b      	str	r3, [r1, #0]
}
 80049b2:	bd30      	pop	{r4, r5, pc}
 80049b4:	40021000 	.word	0x40021000
 80049b8:	40022000 	.word	0x40022000

080049bc <HAL_RCC_EnableCSS>:
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80049bc:	2380      	movs	r3, #128	; 0x80
 80049be:	4a03      	ldr	r2, [pc, #12]	; (80049cc <HAL_RCC_EnableCSS+0x10>)
 80049c0:	031b      	lsls	r3, r3, #12
 80049c2:	6811      	ldr	r1, [r2, #0]
 80049c4:	430b      	orrs	r3, r1
 80049c6:	6013      	str	r3, [r2, #0]
}
 80049c8:	4770      	bx	lr
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	40021000 	.word	0x40021000

080049d0 <HAL_RCC_EnableLSECSS>:
  *         cleared by a backup domain reset.
  * @retval None
  */
void HAL_RCC_EnableLSECSS(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 80049d0:	2320      	movs	r3, #32
 80049d2:	4a02      	ldr	r2, [pc, #8]	; (80049dc <HAL_RCC_EnableLSECSS+0xc>)
 80049d4:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 80049d6:	430b      	orrs	r3, r1
 80049d8:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80049da:	4770      	bx	lr
 80049dc:	40021000 	.word	0x40021000

080049e0 <HAL_RCC_CSSCallback>:
 80049e0:	4770      	bx	lr

080049e2 <HAL_RCC_LSECSSCallback>:
__weak void HAL_RCC_LSECSSCallback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_LSECSSCallback should be implemented in the user file
   */
}
 80049e2:	4770      	bx	lr

080049e4 <HAL_RCC_NMI_IRQHandler>:
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 80049e4:	23c0      	movs	r3, #192	; 0xc0
  uint32_t itflag = RCC->CIFR;
 80049e6:	4a07      	ldr	r2, [pc, #28]	; (8004a04 <HAL_RCC_NMI_IRQHandler+0x20>)
{
 80049e8:	b510      	push	{r4, lr}
  uint32_t itflag = RCC->CIFR;
 80049ea:	69d4      	ldr	r4, [r2, #28]
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4023      	ands	r3, r4
 80049f0:	6213      	str	r3, [r2, #32]
  if ((itflag & RCC_CIFR_CSSF) != 0x00u)
 80049f2:	05e3      	lsls	r3, r4, #23
 80049f4:	d501      	bpl.n	80049fa <HAL_RCC_NMI_IRQHandler+0x16>
    HAL_RCC_CSSCallback();
 80049f6:	f7ff fff3 	bl	80049e0 <HAL_RCC_CSSCallback>
  if ((itflag & RCC_CIFR_LSECSSF) != 0x00u)
 80049fa:	05a3      	lsls	r3, r4, #22
 80049fc:	d501      	bpl.n	8004a02 <HAL_RCC_NMI_IRQHandler+0x1e>
    HAL_RCC_LSECSSCallback();
 80049fe:	f7ff fff0 	bl	80049e2 <HAL_RCC_LSECSSCallback>
}
 8004a02:	bd10      	pop	{r4, pc}
 8004a04:	40021000 	.word	0x40021000

08004a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a0a:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a0c:	682b      	ldr	r3, [r5, #0]
{
 8004a0e:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a10:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a12:	039b      	lsls	r3, r3, #14
 8004a14:	d54f      	bpl.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xae>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a16:	2280      	movs	r2, #128	; 0x80
 8004a18:	4c4b      	ldr	r4, [pc, #300]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004a1a:	0552      	lsls	r2, r2, #21
 8004a1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8004a1e:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a20:	4213      	tst	r3, r2
 8004a22:	d108      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a26:	4313      	orrs	r3, r2
 8004a28:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004a2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	9303      	str	r3, [sp, #12]
 8004a30:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8004a32:	2301      	movs	r3, #1
 8004a34:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a36:	2780      	movs	r7, #128	; 0x80
 8004a38:	4e44      	ldr	r6, [pc, #272]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8004a3a:	007f      	lsls	r7, r7, #1
 8004a3c:	6833      	ldr	r3, [r6, #0]
 8004a3e:	433b      	orrs	r3, r7
 8004a40:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a42:	f7fe ffd7 	bl	80039f4 <HAL_GetTick>
 8004a46:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a48:	6833      	ldr	r3, [r6, #0]
 8004a4a:	423b      	tst	r3, r7
 8004a4c:	d025      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a4e:	23c0      	movs	r3, #192	; 0xc0
 8004a50:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a56:	d00f      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004a58:	69aa      	ldr	r2, [r5, #24]
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00c      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x70>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a5e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004a60:	4b3b      	ldr	r3, [pc, #236]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x148>)
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a62:	6de1      	ldr	r1, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a64:	4013      	ands	r3, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a66:	2280      	movs	r2, #128	; 0x80
 8004a68:	0252      	lsls	r2, r2, #9
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	65e2      	str	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a6e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004a70:	4938      	ldr	r1, [pc, #224]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004a72:	400a      	ands	r2, r1
 8004a74:	65e2      	str	r2, [r4, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a76:	65e3      	str	r3, [r4, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a78:	07db      	lsls	r3, r3, #31
 8004a7a:	d506      	bpl.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7c:	f7fe ffba 	bl	80039f4 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a80:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8004a82:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a84:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004a86:	423b      	tst	r3, r7
 8004a88:	d057      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x132>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a8a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004a8c:	4a30      	ldr	r2, [pc, #192]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x148>)
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a8e:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a90:	4013      	ands	r3, r2
 8004a92:	69aa      	ldr	r2, [r5, #24]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	65e3      	str	r3, [r4, #92]	; 0x5c
 8004a98:	e006      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a9a:	f7fe ffab 	bl	80039f4 <HAL_GetTick>
 8004a9e:	9b01      	ldr	r3, [sp, #4]
 8004aa0:	1ac0      	subs	r0, r0, r3
 8004aa2:	2802      	cmp	r0, #2
 8004aa4:	d9d0      	bls.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 8004aa6:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004aa8:	9b00      	ldr	r3, [sp, #0]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d103      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004ab0:	4a29      	ldr	r2, [pc, #164]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ab6:	682a      	ldr	r2, [r5, #0]
 8004ab8:	07d3      	lsls	r3, r2, #31
 8004aba:	d506      	bpl.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004abc:	2403      	movs	r4, #3
 8004abe:	4922      	ldr	r1, [pc, #136]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004ac0:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8004ac2:	43a3      	bics	r3, r4
 8004ac4:	686c      	ldr	r4, [r5, #4]
 8004ac6:	4323      	orrs	r3, r4
 8004ac8:	654b      	str	r3, [r1, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004aca:	0793      	lsls	r3, r2, #30
 8004acc:	d506      	bpl.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ace:	240c      	movs	r4, #12
 8004ad0:	491d      	ldr	r1, [pc, #116]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004ad2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8004ad4:	43a3      	bics	r3, r4
 8004ad6:	68ac      	ldr	r4, [r5, #8]
 8004ad8:	4323      	orrs	r3, r4
 8004ada:	654b      	str	r3, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004adc:	0653      	lsls	r3, r2, #25
 8004ade:	d506      	bpl.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ae0:	4919      	ldr	r1, [pc, #100]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004ae2:	4c1e      	ldr	r4, [pc, #120]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004ae4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8004ae6:	4023      	ands	r3, r4
 8004ae8:	68ec      	ldr	r4, [r5, #12]
 8004aea:	4323      	orrs	r3, r4
 8004aec:	654b      	str	r3, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004aee:	0453      	lsls	r3, r2, #17
 8004af0:	d50f      	bpl.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004af2:	4915      	ldr	r1, [pc, #84]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004af4:	696c      	ldr	r4, [r5, #20]
 8004af6:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	089b      	lsrs	r3, r3, #2
 8004afc:	4323      	orrs	r3, r4
 8004afe:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004b00:	2380      	movs	r3, #128	; 0x80
 8004b02:	05db      	lsls	r3, r3, #23
 8004b04:	429c      	cmp	r4, r3
 8004b06:	d104      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	68cc      	ldr	r4, [r1, #12]
 8004b0c:	025b      	lsls	r3, r3, #9
 8004b0e:	4323      	orrs	r3, r4
 8004b10:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004b12:	0513      	lsls	r3, r2, #20
 8004b14:	d50f      	bpl.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004b16:	490c      	ldr	r1, [pc, #48]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004b18:	4c11      	ldr	r4, [pc, #68]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004b1a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8004b1c:	692a      	ldr	r2, [r5, #16]
 8004b1e:	4023      	ands	r3, r4
 8004b20:	4313      	orrs	r3, r2
 8004b22:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004b24:	2380      	movs	r3, #128	; 0x80
 8004b26:	01db      	lsls	r3, r3, #7
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d104      	bne.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x12e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004b2c:	2380      	movs	r3, #128	; 0x80
 8004b2e:	68ca      	ldr	r2, [r1, #12]
 8004b30:	025b      	lsls	r3, r3, #9
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60cb      	str	r3, [r1, #12]
    }
  }

  return status;
}
 8004b36:	b005      	add	sp, #20
 8004b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b3a:	f7fe ff5b 	bl	80039f4 <HAL_GetTick>
 8004b3e:	4b09      	ldr	r3, [pc, #36]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004b40:	1b80      	subs	r0, r0, r6
 8004b42:	4298      	cmp	r0, r3
 8004b44:	d99e      	bls.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004b46:	e7ae      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	40007000 	.word	0x40007000
 8004b50:	fffffcff 	.word	0xfffffcff
 8004b54:	fffeffff 	.word	0xfffeffff
 8004b58:	efffffff 	.word	0xefffffff
 8004b5c:	ffffcfff 	.word	0xffffcfff
 8004b60:	ffff3fff 	.word	0xffff3fff
 8004b64:	00001388 	.word	0x00001388

08004b68 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8004b68:	21a0      	movs	r1, #160	; 0xa0
 8004b6a:	6802      	ldr	r2, [r0, #0]
{
 8004b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8004b6e:	68d3      	ldr	r3, [r2, #12]
{
 8004b70:	0004      	movs	r4, r0
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8004b72:	438b      	bics	r3, r1
 8004b74:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004b76:	f7fe ff3d 	bl	80039f4 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004b7a:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8004b7c:	0006      	movs	r6, r0
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004b7e:	2520      	movs	r5, #32
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004b80:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	422b      	tst	r3, r5
 8004b88:	d001      	beq.n	8004b8e <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8004b8a:	2000      	movs	r0, #0
}
 8004b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004b8e:	f7fe ff31 	bl	80039f4 <HAL_GetTick>
 8004b92:	1b80      	subs	r0, r0, r6
 8004b94:	42b8      	cmp	r0, r7
 8004b96:	d9f4      	bls.n	8004b82 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8004b98:	2003      	movs	r0, #3
 8004b9a:	e7f7      	b.n	8004b8c <HAL_RTC_WaitForSynchro+0x24>

08004b9c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004b9e:	2740      	movs	r7, #64	; 0x40
 8004ba0:	6803      	ldr	r3, [r0, #0]
{
 8004ba2:	0005      	movs	r5, r0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004ba4:	68da      	ldr	r2, [r3, #12]
  HAL_StatusTypeDef status = HAL_OK;  
 8004ba6:	2400      	movs	r4, #0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004ba8:	423a      	tst	r2, r7
 8004baa:	d10c      	bne.n	8004bc6 <RTC_EnterInitMode+0x2a>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004bac:	2280      	movs	r2, #128	; 0x80
 8004bae:	68d9      	ldr	r1, [r3, #12]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004bb4:	f7fe ff1e 	bl	80039f4 <HAL_GetTick>
 8004bb8:	0006      	movs	r6, r0
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004bba:	682b      	ldr	r3, [r5, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	423b      	tst	r3, r7
 8004bc0:	d101      	bne.n	8004bc6 <RTC_EnterInitMode+0x2a>
 8004bc2:	2c03      	cmp	r4, #3
 8004bc4:	d101      	bne.n	8004bca <RTC_EnterInitMode+0x2e>
      }
    }
  }

  return status;
}
 8004bc6:	0020      	movs	r0, r4
 8004bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004bca:	f7fe ff13 	bl	80039f4 <HAL_GetTick>
 8004bce:	23fa      	movs	r3, #250	; 0xfa
 8004bd0:	1b80      	subs	r0, r0, r6
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4298      	cmp	r0, r3
 8004bd6:	d9f0      	bls.n	8004bba <RTC_EnterInitMode+0x1e>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004bd8:	002b      	movs	r3, r5
 8004bda:	2403      	movs	r4, #3
 8004bdc:	3329      	adds	r3, #41	; 0x29
 8004bde:	701c      	strb	r4, [r3, #0]
 8004be0:	e7eb      	b.n	8004bba <RTC_EnterInitMode+0x1e>
	...

08004be4 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004be4:	2280      	movs	r2, #128	; 0x80
{
 8004be6:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004be8:	4c0f      	ldr	r4, [pc, #60]	; (8004c28 <RTC_ExitInitMode+0x44>)
{
 8004bea:	0005      	movs	r5, r0
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004bec:	68e3      	ldr	r3, [r4, #12]
 8004bee:	4393      	bics	r3, r2
 8004bf0:	60e3      	str	r3, [r4, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004bf2:	69a3      	ldr	r3, [r4, #24]
 8004bf4:	3a60      	subs	r2, #96	; 0x60
 8004bf6:	4213      	tst	r3, r2
 8004bf8:	d107      	bne.n	8004c0a <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004bfa:	f7ff ffb5 	bl	8004b68 <HAL_RTC_WaitForSynchro>
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	d002      	beq.n	8004c08 <RTC_ExitInitMode+0x24>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c02:	2003      	movs	r0, #3
 8004c04:	3529      	adds	r5, #41	; 0x29
 8004c06:	7028      	strb	r0, [r5, #0]
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 8004c08:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004c0a:	69a3      	ldr	r3, [r4, #24]
 8004c0c:	4393      	bics	r3, r2
 8004c0e:	61a3      	str	r3, [r4, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c10:	f7ff ffaa 	bl	8004b68 <HAL_RTC_WaitForSynchro>
 8004c14:	2800      	cmp	r0, #0
 8004c16:	d002      	beq.n	8004c1e <RTC_ExitInitMode+0x3a>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c18:	2003      	movs	r0, #3
 8004c1a:	3529      	adds	r5, #41	; 0x29
 8004c1c:	7028      	strb	r0, [r5, #0]
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004c1e:	2320      	movs	r3, #32
 8004c20:	69a2      	ldr	r2, [r4, #24]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	61a3      	str	r3, [r4, #24]
 8004c26:	e7ef      	b.n	8004c08 <RTC_ExitInitMode+0x24>
 8004c28:	40002800 	.word	0x40002800

08004c2c <HAL_RTC_Init>:
{
 8004c2c:	b570      	push	{r4, r5, r6, lr}
 8004c2e:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 8004c30:	2001      	movs	r0, #1
  if(hrtc != NULL)
 8004c32:	2c00      	cmp	r4, #0
 8004c34:	d047      	beq.n	8004cc6 <HAL_RTC_Init+0x9a>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004c36:	0025      	movs	r5, r4
 8004c38:	3529      	adds	r5, #41	; 0x29
 8004c3a:	782b      	ldrb	r3, [r5, #0]
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d108      	bne.n	8004c54 <HAL_RTC_Init+0x28>
    hrtc->Lock = HAL_UNLOCKED;
 8004c42:	0022      	movs	r2, r4
 8004c44:	3228      	adds	r2, #40	; 0x28
 8004c46:	7013      	strb	r3, [r2, #0]
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004c48:	2388      	movs	r3, #136	; 0x88
 8004c4a:	021b      	lsls	r3, r3, #8
 8004c4c:	6063      	str	r3, [r4, #4]
    HAL_RTC_MspInit(hrtc);
 8004c4e:	0020      	movs	r0, r4
 8004c50:	f7fe fbf2 	bl	8003438 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004c54:	2302      	movs	r3, #2
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c56:	22ca      	movs	r2, #202	; 0xca
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004c58:	702b      	strb	r3, [r5, #0]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c5a:	6823      	ldr	r3, [r4, #0]
    status = RTC_EnterInitMode(hrtc);
 8004c5c:	0020      	movs	r0, r4
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c5e:	625a      	str	r2, [r3, #36]	; 0x24
 8004c60:	3a77      	subs	r2, #119	; 0x77
 8004c62:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8004c64:	f7ff ff9a 	bl	8004b9c <RTC_EnterInitMode>
    if(status == HAL_OK)
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	d125      	bne.n	8004cb8 <HAL_RTC_Init+0x8c>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004c6c:	6823      	ldr	r3, [r4, #0]
 8004c6e:	4916      	ldr	r1, [pc, #88]	; (8004cc8 <HAL_RTC_Init+0x9c>)
 8004c70:	699a      	ldr	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004c72:	6960      	ldr	r0, [r4, #20]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004c74:	400a      	ands	r2, r1
 8004c76:	619a      	str	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004c78:	68a2      	ldr	r2, [r4, #8]
 8004c7a:	6999      	ldr	r1, [r3, #24]
 8004c7c:	4302      	orrs	r2, r0
 8004c7e:	69e0      	ldr	r0, [r4, #28]
 8004c80:	4302      	orrs	r2, r0
 8004c82:	430a      	orrs	r2, r1
 8004c84:	619a      	str	r2, [r3, #24]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004c86:	6922      	ldr	r2, [r4, #16]
      status = RTC_ExitInitMode(hrtc);
 8004c88:	0020      	movs	r0, r4
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004c8a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004c8c:	68e2      	ldr	r2, [r4, #12]
 8004c8e:	6919      	ldr	r1, [r3, #16]
 8004c90:	0412      	lsls	r2, r2, #16
 8004c92:	430a      	orrs	r2, r1
 8004c94:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8004c96:	f7ff ffa5 	bl	8004be4 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	d10c      	bne.n	8004cb8 <HAL_RTC_Init+0x8c>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004c9e:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004ca0:	6a26      	ldr	r6, [r4, #32]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004ca2:	6993      	ldr	r3, [r2, #24]
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	08db      	lsrs	r3, r3, #3
 8004ca8:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004caa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cac:	6991      	ldr	r1, [r2, #24]
 8004cae:	4333      	orrs	r3, r6
 8004cb0:	69a6      	ldr	r6, [r4, #24]
 8004cb2:	4333      	orrs	r3, r6
 8004cb4:	430b      	orrs	r3, r1
 8004cb6:	6193      	str	r3, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cb8:	22ff      	movs	r2, #255	; 0xff
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_RTC_Init+0x9a>
      hrtc->State = HAL_RTC_STATE_READY;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	702b      	strb	r3, [r5, #0]
}
 8004cc6:	bd70      	pop	{r4, r5, r6, pc}
 8004cc8:	fb8fffbf 	.word	0xfb8fffbf

08004ccc <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ccc:	21e0      	movs	r1, #224	; 0xe0
 8004cce:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004cd0:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	438a      	bics	r2, r1
 8004cd6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cd8:	2282      	movs	r2, #130	; 0x82
 8004cda:	6841      	ldr	r1, [r0, #4]
 8004cdc:	0052      	lsls	r2, r2, #1
 8004cde:	4291      	cmp	r1, r2
 8004ce0:	d10c      	bne.n	8004cfc <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
 8004ce2:	2180      	movs	r1, #128	; 0x80
 8004ce4:	6882      	ldr	r2, [r0, #8]
 8004ce6:	0209      	lsls	r1, r1, #8
 8004ce8:	428a      	cmp	r2, r1
 8004cea:	d003      	beq.n	8004cf4 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cec:	2180      	movs	r1, #128	; 0x80
 8004cee:	00c9      	lsls	r1, r1, #3
 8004cf0:	428a      	cmp	r2, r1
 8004cf2:	d103      	bne.n	8004cfc <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cf4:	2140      	movs	r1, #64	; 0x40
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	438a      	bics	r2, r1
 8004cfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cfc:	2180      	movs	r1, #128	; 0x80
 8004cfe:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004d00:	0189      	lsls	r1, r1, #6
 8004d02:	428a      	cmp	r2, r1
 8004d04:	d106      	bne.n	8004d14 <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
        {
          SPI_RESET_CRC(hspi);
 8004d06:	6819      	ldr	r1, [r3, #0]
 8004d08:	4c07      	ldr	r4, [pc, #28]	; (8004d28 <SPI_WaitFifoStateUntilTimeout.part.1+0x5c>)
 8004d0a:	4021      	ands	r1, r4
 8004d0c:	6019      	str	r1, [r3, #0]
 8004d0e:	6819      	ldr	r1, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d14:	0003      	movs	r3, r0
 8004d16:	2201      	movs	r2, #1
 8004d18:	335d      	adds	r3, #93	; 0x5d
 8004d1a:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	305c      	adds	r0, #92	; 0x5c
 8004d20:	7003      	strb	r3, [r0, #0]
      }
    }
  }

  return HAL_OK;
}
 8004d22:	2003      	movs	r0, #3
 8004d24:	bd10      	pop	{r4, pc}
 8004d26:	46c0      	nop			; (mov r8, r8)
 8004d28:	ffffdfff 	.word	0xffffdfff

08004d2c <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2e:	0004      	movs	r4, r0
 8004d30:	000d      	movs	r5, r1
 8004d32:	0017      	movs	r7, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d34:	2680      	movs	r6, #128	; 0x80
 8004d36:	6823      	ldr	r3, [r4, #0]
 8004d38:	6898      	ldr	r0, [r3, #8]
 8004d3a:	4030      	ands	r0, r6
 8004d3c:	d009      	beq.n	8004d52 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x26>
    if (Timeout != HAL_MAX_DELAY)
 8004d3e:	1c6a      	adds	r2, r5, #1
 8004d40:	d0fa      	beq.n	8004d38 <SPI_WaitFlagStateUntilTimeout.constprop.10+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004d42:	f7fe fe57 	bl	80039f4 <HAL_GetTick>
 8004d46:	1bc0      	subs	r0, r0, r7
 8004d48:	4285      	cmp	r5, r0
 8004d4a:	d8f4      	bhi.n	8004d36 <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
 8004d4c:	0020      	movs	r0, r4
 8004d4e:	f7ff ffbd 	bl	8004ccc <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8004d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004d54 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d56:	27c0      	movs	r7, #192	; 0xc0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004d58:	0005      	movs	r5, r0
 8004d5a:	000c      	movs	r4, r1
 8004d5c:	0016      	movs	r6, r2
 8004d5e:	9301      	str	r3, [sp, #4]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d60:	00ff      	lsls	r7, r7, #3
  while ((hspi->Instance->SR & Fifo) != State)
 8004d62:	682b      	ldr	r3, [r5, #0]
 8004d64:	6898      	ldr	r0, [r3, #8]
 8004d66:	4020      	ands	r0, r4
 8004d68:	d00d      	beq.n	8004d86 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x32>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d6a:	42bc      	cmp	r4, r7
 8004d6c:	d100      	bne.n	8004d70 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x1c>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004d6e:	7b1a      	ldrb	r2, [r3, #12]
    if (Timeout != HAL_MAX_DELAY)
 8004d70:	1c72      	adds	r2, r6, #1
 8004d72:	d0f7      	beq.n	8004d64 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x10>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004d74:	f7fe fe3e 	bl	80039f4 <HAL_GetTick>
 8004d78:	9b01      	ldr	r3, [sp, #4]
 8004d7a:	1ac0      	subs	r0, r0, r3
 8004d7c:	4286      	cmp	r6, r0
 8004d7e:	d8f0      	bhi.n	8004d62 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xe>
 8004d80:	0028      	movs	r0, r5
 8004d82:	f7ff ffa3 	bl	8004ccc <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8004d86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08004d88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d88:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d8a:	0013      	movs	r3, r2
{
 8004d8c:	000d      	movs	r5, r1
 8004d8e:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d90:	000a      	movs	r2, r1
 8004d92:	21c0      	movs	r1, #192	; 0xc0
 8004d94:	0149      	lsls	r1, r1, #5
{
 8004d96:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d98:	f7ff ffdc 	bl	8004d54 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8004d9c:	2800      	cmp	r0, #0
 8004d9e:	d005      	beq.n	8004dac <SPI_EndRxTxTransaction+0x24>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004da0:	2320      	movs	r3, #32
 8004da2:	6e22      	ldr	r2, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8004da4:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004da6:	4313      	orrs	r3, r2
 8004da8:	6623      	str	r3, [r4, #96]	; 0x60
 8004daa:	e00f      	b.n	8004dcc <SPI_EndRxTxTransaction+0x44>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dac:	0032      	movs	r2, r6
 8004dae:	0029      	movs	r1, r5
 8004db0:	0020      	movs	r0, r4
 8004db2:	f7ff ffbb 	bl	8004d2c <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8004db6:	2800      	cmp	r0, #0
 8004db8:	d1f2      	bne.n	8004da0 <SPI_EndRxTxTransaction+0x18>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dba:	21c0      	movs	r1, #192	; 0xc0
 8004dbc:	0033      	movs	r3, r6
 8004dbe:	002a      	movs	r2, r5
 8004dc0:	00c9      	lsls	r1, r1, #3
 8004dc2:	0020      	movs	r0, r4
 8004dc4:	f7ff ffc6 	bl	8004d54 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	d1e9      	bne.n	8004da0 <SPI_EndRxTxTransaction+0x18>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8004dcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08004dd0 <HAL_SPI_Init>:
{
 8004dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd2:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004dd4:	2001      	movs	r0, #1
  if (hspi == NULL)
 8004dd6:	2c00      	cmp	r4, #0
 8004dd8:	d04b      	beq.n	8004e72 <HAL_SPI_Init+0xa2>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dda:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ddc:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dde:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004de0:	355d      	adds	r5, #93	; 0x5d
 8004de2:	782b      	ldrb	r3, [r5, #0]
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d105      	bne.n	8004df6 <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 8004dea:	0022      	movs	r2, r4
 8004dec:	325c      	adds	r2, #92	; 0x5c
 8004dee:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8004df0:	0020      	movs	r0, r4
 8004df2:	f7fe fb3b 	bl	800346c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004df6:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8004df8:	2240      	movs	r2, #64	; 0x40
 8004dfa:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004dfc:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8004dfe:	680b      	ldr	r3, [r1, #0]
 8004e00:	2000      	movs	r0, #0
 8004e02:	4393      	bics	r3, r2
 8004e04:	600b      	str	r3, [r1, #0]
 8004e06:	23e0      	movs	r3, #224	; 0xe0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e08:	68e2      	ldr	r2, [r4, #12]
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d931      	bls.n	8004e74 <HAL_SPI_Init+0xa4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e10:	26f0      	movs	r6, #240	; 0xf0
 8004e12:	0136      	lsls	r6, r6, #4
 8004e14:	42b2      	cmp	r2, r6
 8004e16:	d133      	bne.n	8004e80 <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e18:	0006      	movs	r6, r0
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004e1a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	d103      	bne.n	8004e28 <HAL_SPI_Init+0x58>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d92f      	bls.n	8004e84 <HAL_SPI_Init+0xb4>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004e24:	2302      	movs	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004e26:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004e28:	68a7      	ldr	r7, [r4, #8]
 8004e2a:	6863      	ldr	r3, [r4, #4]
 8004e2c:	69a0      	ldr	r0, [r4, #24]
 8004e2e:	433b      	orrs	r3, r7
 8004e30:	6927      	ldr	r7, [r4, #16]
 8004e32:	433b      	orrs	r3, r7
 8004e34:	6967      	ldr	r7, [r4, #20]
 8004e36:	433b      	orrs	r3, r7
 8004e38:	69e7      	ldr	r7, [r4, #28]
 8004e3a:	433b      	orrs	r3, r7
 8004e3c:	6a27      	ldr	r7, [r4, #32]
 8004e3e:	433b      	orrs	r3, r7
 8004e40:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004e42:	433b      	orrs	r3, r7
 8004e44:	2780      	movs	r7, #128	; 0x80
 8004e46:	00bf      	lsls	r7, r7, #2
 8004e48:	4007      	ands	r7, r0
 8004e4a:	433b      	orrs	r3, r7
 8004e4c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004e4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e50:	0c00      	lsrs	r0, r0, #16
 8004e52:	431a      	orrs	r2, r3
 8004e54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e56:	431a      	orrs	r2, r3
 8004e58:	2304      	movs	r3, #4
 8004e5a:	4018      	ands	r0, r3
 8004e5c:	4310      	orrs	r0, r2
 8004e5e:	4306      	orrs	r6, r0
 8004e60:	604e      	str	r6, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e62:	69cb      	ldr	r3, [r1, #28]
 8004e64:	4a08      	ldr	r2, [pc, #32]	; (8004e88 <HAL_SPI_Init+0xb8>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e66:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e68:	4013      	ands	r3, r2
 8004e6a:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8004e6c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e6e:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e70:	702b      	strb	r3, [r5, #0]
}
 8004e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e74:	2680      	movs	r6, #128	; 0x80
 8004e76:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d0ce      	beq.n	8004e1a <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e7c:	62a0      	str	r0, [r4, #40]	; 0x28
 8004e7e:	e7cc      	b.n	8004e1a <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e80:	0006      	movs	r6, r0
 8004e82:	e7fb      	b.n	8004e7c <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e7ce      	b.n	8004e26 <HAL_SPI_Init+0x56>
 8004e88:	fffff7ff 	.word	0xfffff7ff

08004e8c <HAL_SPI_DeInit>:
{
 8004e8c:	b570      	push	{r4, r5, r6, lr}
 8004e8e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004e90:	2001      	movs	r0, #1
  if (hspi == NULL)
 8004e92:	2c00      	cmp	r4, #0
 8004e94:	d010      	beq.n	8004eb8 <HAL_SPI_DeInit+0x2c>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004e96:	0025      	movs	r5, r4
 8004e98:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8004e9a:	2140      	movs	r1, #64	; 0x40
 8004e9c:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004e9e:	355d      	adds	r5, #93	; 0x5d
 8004ea0:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8004ea2:	6813      	ldr	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8004ea4:	0020      	movs	r0, r4
  __HAL_SPI_DISABLE(hspi);
 8004ea6:	438b      	bics	r3, r1
 8004ea8:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8004eaa:	f7fe fb45 	bl	8003538 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eae:	2000      	movs	r0, #0
  __HAL_UNLOCK(hspi);
 8004eb0:	345c      	adds	r4, #92	; 0x5c
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eb2:	6060      	str	r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_RESET;
 8004eb4:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hspi);
 8004eb6:	7020      	strb	r0, [r4, #0]
}
 8004eb8:	bd70      	pop	{r4, r5, r6, pc}

08004eba <HAL_SPI_Transmit>:
{
 8004eba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ebc:	b087      	sub	sp, #28
 8004ebe:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hspi);
 8004ec0:	0003      	movs	r3, r0
 8004ec2:	335c      	adds	r3, #92	; 0x5c
 8004ec4:	9303      	str	r3, [sp, #12]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
{
 8004ec8:	0004      	movs	r4, r0
 8004eca:	000d      	movs	r5, r1
 8004ecc:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8004ece:	2602      	movs	r6, #2
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d100      	bne.n	8004ed6 <HAL_SPI_Transmit+0x1c>
 8004ed4:	e07c      	b.n	8004fd0 <HAL_SPI_Transmit+0x116>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	9a03      	ldr	r2, [sp, #12]
 8004eda:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8004edc:	f7fe fd8a 	bl	80039f4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004ee0:	0022      	movs	r2, r4
  tickstart = HAL_GetTick();
 8004ee2:	9002      	str	r0, [sp, #8]
  if (hspi->State != HAL_SPI_STATE_READY)
 8004ee4:	325d      	adds	r2, #93	; 0x5d
 8004ee6:	7813      	ldrb	r3, [r2, #0]
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d16a      	bne.n	8004fc4 <HAL_SPI_Transmit+0x10a>
    errorcode = HAL_ERROR;
 8004eee:	001e      	movs	r6, r3
  if ((pData == NULL) || (Size == 0U))
 8004ef0:	2d00      	cmp	r5, #0
 8004ef2:	d067      	beq.n	8004fc4 <HAL_SPI_Transmit+0x10a>
 8004ef4:	2f00      	cmp	r7, #0
 8004ef6:	d065      	beq.n	8004fc4 <HAL_SPI_Transmit+0x10a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ef8:	3302      	adds	r3, #2
 8004efa:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004efc:	2300      	movs	r3, #0
  hspi->RxXferSize  = 0U;
 8004efe:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f00:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f02:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f04:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004f06:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004f08:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 8004f0a:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8004f0c:	8793      	strh	r3, [r2, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004f0e:	87d3      	strh	r3, [r2, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004f10:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004f12:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f14:	2380      	movs	r3, #128	; 0x80
 8004f16:	68a2      	ldr	r2, [r4, #8]
 8004f18:	021b      	lsls	r3, r3, #8
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d105      	bne.n	8004f2a <HAL_SPI_Transmit+0x70>
    SPI_1LINE_TX(hspi);
 8004f1e:	2380      	movs	r3, #128	; 0x80
 8004f20:	6822      	ldr	r2, [r4, #0]
 8004f22:	01db      	lsls	r3, r3, #7
 8004f24:	6811      	ldr	r1, [r2, #0]
 8004f26:	430b      	orrs	r3, r1
 8004f28:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f2a:	2240      	movs	r2, #64	; 0x40
 8004f2c:	6823      	ldr	r3, [r4, #0]
 8004f2e:	6819      	ldr	r1, [r3, #0]
 8004f30:	4211      	tst	r1, r2
 8004f32:	d102      	bne.n	8004f3a <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 8004f34:	6819      	ldr	r1, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f3a:	21e0      	movs	r1, #224	; 0xe0
 8004f3c:	68e0      	ldr	r0, [r4, #12]
 8004f3e:	00c9      	lsls	r1, r1, #3
 8004f40:	6862      	ldr	r2, [r4, #4]
 8004f42:	4288      	cmp	r0, r1
 8004f44:	d947      	bls.n	8004fd6 <HAL_SPI_Transmit+0x11c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f46:	2a00      	cmp	r2, #0
 8004f48:	d001      	beq.n	8004f4e <HAL_SPI_Transmit+0x94>
 8004f4a:	2f01      	cmp	r7, #1
 8004f4c:	d107      	bne.n	8004f5e <HAL_SPI_Transmit+0xa4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f4e:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f50:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f52:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8004f54:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f56:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f5e:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 8004f60:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d116      	bne.n	8004f94 <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f66:	9a02      	ldr	r2, [sp, #8]
 8004f68:	9901      	ldr	r1, [sp, #4]
 8004f6a:	0020      	movs	r0, r4
 8004f6c:	f7ff ff0c 	bl	8004d88 <SPI_EndRxTxTransaction>
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d000      	beq.n	8004f76 <HAL_SPI_Transmit+0xbc>
 8004f74:	e06d      	b.n	8005052 <HAL_SPI_Transmit+0x198>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f76:	68a3      	ldr	r3, [r4, #8]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d106      	bne.n	8004f8a <HAL_SPI_Transmit+0xd0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f7c:	9305      	str	r3, [sp, #20]
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	9205      	str	r2, [sp, #20]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	9305      	str	r3, [sp, #20]
 8004f88:	9b05      	ldr	r3, [sp, #20]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f8a:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8004f8c:	1e73      	subs	r3, r6, #1
 8004f8e:	419e      	sbcs	r6, r3
    errorcode = HAL_BUSY;
 8004f90:	b2f6      	uxtb	r6, r6
 8004f92:	e017      	b.n	8004fc4 <HAL_SPI_Transmit+0x10a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f94:	6822      	ldr	r2, [r4, #0]
 8004f96:	6893      	ldr	r3, [r2, #8]
 8004f98:	422b      	tst	r3, r5
 8004f9a:	d009      	beq.n	8004fb0 <HAL_SPI_Transmit+0xf6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f9e:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fa0:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fa2:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fa4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004fa6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004fae:	e7d7      	b.n	8004f60 <HAL_SPI_Transmit+0xa6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fb0:	f7fe fd20 	bl	80039f4 <HAL_GetTick>
 8004fb4:	9b02      	ldr	r3, [sp, #8]
 8004fb6:	1ac0      	subs	r0, r0, r3
 8004fb8:	9b01      	ldr	r3, [sp, #4]
 8004fba:	4298      	cmp	r0, r3
 8004fbc:	d3d0      	bcc.n	8004f60 <HAL_SPI_Transmit+0xa6>
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	d0ce      	beq.n	8004f60 <HAL_SPI_Transmit+0xa6>
          errorcode = HAL_TIMEOUT;
 8004fc2:	2603      	movs	r6, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	345d      	adds	r4, #93	; 0x5d
 8004fc8:	7023      	strb	r3, [r4, #0]
  __HAL_UNLOCK(hspi);
 8004fca:	2300      	movs	r3, #0
 8004fcc:	9a03      	ldr	r2, [sp, #12]
 8004fce:	7013      	strb	r3, [r2, #0]
}
 8004fd0:	0030      	movs	r0, r6
 8004fd2:	b007      	add	sp, #28
 8004fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fd6:	2a00      	cmp	r2, #0
 8004fd8:	d001      	beq.n	8004fde <HAL_SPI_Transmit+0x124>
 8004fda:	2f01      	cmp	r7, #1
 8004fdc:	d10a      	bne.n	8004ff4 <HAL_SPI_Transmit+0x13a>
      if (hspi->TxXferCount > 1U)
 8004fde:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004fe0:	2a01      	cmp	r2, #1
 8004fe2:	d91c      	bls.n	800501e <HAL_SPI_Transmit+0x164>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fe4:	882a      	ldrh	r2, [r5, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fe6:	3502      	adds	r5, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fe8:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8004fea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fec:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004fee:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ff4:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 8004ff6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0b4      	beq.n	8004f66 <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ffc:	6822      	ldr	r2, [r4, #0]
 8004ffe:	6893      	ldr	r3, [r2, #8]
 8005000:	422b      	tst	r3, r5
 8005002:	d01c      	beq.n	800503e <HAL_SPI_Transmit+0x184>
        if (hspi->TxXferCount > 1U)
 8005004:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8005006:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005008:	2901      	cmp	r1, #1
 800500a:	d910      	bls.n	800502e <HAL_SPI_Transmit+0x174>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800500c:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800500e:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005010:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005012:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005014:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005016:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8005018:	b29b      	uxth	r3, r3
 800501a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800501c:	e7eb      	b.n	8004ff6 <HAL_SPI_Transmit+0x13c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800501e:	782a      	ldrb	r2, [r5, #0]
 8005020:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8005022:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005024:	3301      	adds	r3, #1
 8005026:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005028:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800502a:	3b01      	subs	r3, #1
 800502c:	e7e0      	b.n	8004ff0 <HAL_SPI_Transmit+0x136>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8005032:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005034:	3301      	adds	r3, #1
 8005036:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005038:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800503a:	3b01      	subs	r3, #1
 800503c:	e7ec      	b.n	8005018 <HAL_SPI_Transmit+0x15e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800503e:	f7fe fcd9 	bl	80039f4 <HAL_GetTick>
 8005042:	9b02      	ldr	r3, [sp, #8]
 8005044:	1ac0      	subs	r0, r0, r3
 8005046:	9b01      	ldr	r3, [sp, #4]
 8005048:	4283      	cmp	r3, r0
 800504a:	d8d4      	bhi.n	8004ff6 <HAL_SPI_Transmit+0x13c>
 800504c:	3301      	adds	r3, #1
 800504e:	d0d2      	beq.n	8004ff6 <HAL_SPI_Transmit+0x13c>
 8005050:	e7b7      	b.n	8004fc2 <HAL_SPI_Transmit+0x108>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005052:	2320      	movs	r3, #32
 8005054:	6623      	str	r3, [r4, #96]	; 0x60
 8005056:	e78e      	b.n	8004f76 <HAL_SPI_Transmit+0xbc>

08005058 <HAL_SPI_TransmitReceive>:
{
 8005058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800505a:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 800505c:	0003      	movs	r3, r0
{
 800505e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hspi);
 8005060:	335c      	adds	r3, #92	; 0x5c
 8005062:	781a      	ldrb	r2, [r3, #0]
{
 8005064:	0004      	movs	r4, r0
 8005066:	000f      	movs	r7, r1
  __HAL_LOCK(hspi);
 8005068:	2502      	movs	r5, #2
 800506a:	2a01      	cmp	r2, #1
 800506c:	d100      	bne.n	8005070 <HAL_SPI_TransmitReceive+0x18>
 800506e:	e0ac      	b.n	80051ca <HAL_SPI_TransmitReceive+0x172>
 8005070:	2201      	movs	r2, #1
 8005072:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8005074:	f7fe fcbe 	bl	80039f4 <HAL_GetTick>
  tmp_state           = hspi->State;
 8005078:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 800507a:	9000      	str	r0, [sp, #0]
  tmp_state           = hspi->State;
 800507c:	335d      	adds	r3, #93	; 0x5d
 800507e:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005080:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8005082:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005084:	2b01      	cmp	r3, #1
 8005086:	d00b      	beq.n	80050a0 <HAL_SPI_TransmitReceive+0x48>
 8005088:	2282      	movs	r2, #130	; 0x82
 800508a:	0052      	lsls	r2, r2, #1
 800508c:	4291      	cmp	r1, r2
 800508e:	d000      	beq.n	8005092 <HAL_SPI_TransmitReceive+0x3a>
 8005090:	e094      	b.n	80051bc <HAL_SPI_TransmitReceive+0x164>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005092:	68a2      	ldr	r2, [r4, #8]
 8005094:	2a00      	cmp	r2, #0
 8005096:	d000      	beq.n	800509a <HAL_SPI_TransmitReceive+0x42>
 8005098:	e090      	b.n	80051bc <HAL_SPI_TransmitReceive+0x164>
 800509a:	2b04      	cmp	r3, #4
 800509c:	d000      	beq.n	80050a0 <HAL_SPI_TransmitReceive+0x48>
 800509e:	e08d      	b.n	80051bc <HAL_SPI_TransmitReceive+0x164>
    errorcode = HAL_ERROR;
 80050a0:	2501      	movs	r5, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050a2:	2f00      	cmp	r7, #0
 80050a4:	d100      	bne.n	80050a8 <HAL_SPI_TransmitReceive+0x50>
 80050a6:	e089      	b.n	80051bc <HAL_SPI_TransmitReceive+0x164>
 80050a8:	9b01      	ldr	r3, [sp, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d100      	bne.n	80050b0 <HAL_SPI_TransmitReceive+0x58>
 80050ae:	e085      	b.n	80051bc <HAL_SPI_TransmitReceive+0x164>
 80050b0:	2e00      	cmp	r6, #0
 80050b2:	d100      	bne.n	80050b6 <HAL_SPI_TransmitReceive+0x5e>
 80050b4:	e082      	b.n	80051bc <HAL_SPI_TransmitReceive+0x164>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050b6:	0023      	movs	r3, r4
 80050b8:	335d      	adds	r3, #93	; 0x5d
 80050ba:	781a      	ldrb	r2, [r3, #0]
 80050bc:	2a04      	cmp	r2, #4
 80050be:	d001      	beq.n	80050c4 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050c0:	2205      	movs	r2, #5
 80050c2:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050c4:	9a01      	ldr	r2, [sp, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050c6:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050c8:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80050ca:	0022      	movs	r2, r4
 80050cc:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050ce:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 80050d0:	87d6      	strh	r6, [r2, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80050d2:	1da2      	adds	r2, r4, #6
 80050d4:	87d6      	strh	r6, [r2, #62]	; 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80050d6:	22e0      	movs	r2, #224	; 0xe0
 80050d8:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 80050da:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80050dc:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80050de:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80050e0:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80050e2:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80050e4:	00d2      	lsls	r2, r2, #3
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	4290      	cmp	r0, r2
 80050ea:	d801      	bhi.n	80050f0 <HAL_SPI_TransmitReceive+0x98>
 80050ec:	2e01      	cmp	r6, #1
 80050ee:	d931      	bls.n	8005154 <HAL_SPI_TransmitReceive+0xfc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	4d71      	ldr	r5, [pc, #452]	; (80052b8 <HAL_SPI_TransmitReceive+0x260>)
 80050f4:	402a      	ands	r2, r5
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050f6:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050f8:	2240      	movs	r2, #64	; 0x40
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	681d      	ldr	r5, [r3, #0]
 80050fe:	4215      	tst	r5, r2
 8005100:	d102      	bne.n	8005108 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8005102:	681d      	ldr	r5, [r3, #0]
 8005104:	432a      	orrs	r2, r5
 8005106:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005108:	22e0      	movs	r2, #224	; 0xe0
 800510a:	00d2      	lsls	r2, r2, #3
 800510c:	4290      	cmp	r0, r2
 800510e:	d95e      	bls.n	80051ce <HAL_SPI_TransmitReceive+0x176>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005110:	2900      	cmp	r1, #0
 8005112:	d001      	beq.n	8005118 <HAL_SPI_TransmitReceive+0xc0>
 8005114:	2e01      	cmp	r6, #1
 8005116:	d107      	bne.n	8005128 <HAL_SPI_TransmitReceive+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005118:	883a      	ldrh	r2, [r7, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800511a:	3702      	adds	r7, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800511c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800511e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005120:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8005122:	3b01      	subs	r3, #1
 8005124:	b29b      	uxth	r3, r3
 8005126:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005128:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800512a:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800512c:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800512e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005130:	2b00      	cmp	r3, #0
 8005132:	d114      	bne.n	800515e <HAL_SPI_TransmitReceive+0x106>
 8005134:	0023      	movs	r3, r4
 8005136:	3308      	adds	r3, #8
 8005138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10f      	bne.n	800515e <HAL_SPI_TransmitReceive+0x106>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800513e:	9a00      	ldr	r2, [sp, #0]
 8005140:	9908      	ldr	r1, [sp, #32]
 8005142:	0020      	movs	r0, r4
 8005144:	f7ff fe20 	bl	8004d88 <SPI_EndRxTxTransaction>
 8005148:	1e05      	subs	r5, r0, #0
 800514a:	d037      	beq.n	80051bc <HAL_SPI_TransmitReceive+0x164>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800514c:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 800514e:	2501      	movs	r5, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005150:	6623      	str	r3, [r4, #96]	; 0x60
 8005152:	e033      	b.n	80051bc <HAL_SPI_TransmitReceive+0x164>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005154:	2280      	movs	r2, #128	; 0x80
 8005156:	685d      	ldr	r5, [r3, #4]
 8005158:	0152      	lsls	r2, r2, #5
 800515a:	432a      	orrs	r2, r5
 800515c:	e7cb      	b.n	80050f6 <HAL_SPI_TransmitReceive+0x9e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800515e:	6822      	ldr	r2, [r4, #0]
 8005160:	6893      	ldr	r3, [r2, #8]
 8005162:	423b      	tst	r3, r7
 8005164:	d00e      	beq.n	8005184 <HAL_SPI_TransmitReceive+0x12c>
 8005166:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00b      	beq.n	8005184 <HAL_SPI_TransmitReceive+0x12c>
 800516c:	2d01      	cmp	r5, #1
 800516e:	d109      	bne.n	8005184 <HAL_SPI_TransmitReceive+0x12c>
        txallowed = 0U;
 8005170:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005172:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005174:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005176:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005178:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800517a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800517c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800517e:	3b01      	subs	r3, #1
 8005180:	b29b      	uxth	r3, r3
 8005182:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005184:	6893      	ldr	r3, [r2, #8]
 8005186:	4233      	tst	r3, r6
 8005188:	d00e      	beq.n	80051a8 <HAL_SPI_TransmitReceive+0x150>
 800518a:	0021      	movs	r1, r4
 800518c:	3108      	adds	r1, #8
 800518e:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 8005190:	2b00      	cmp	r3, #0
 8005192:	d009      	beq.n	80051a8 <HAL_SPI_TransmitReceive+0x150>
        txallowed = 1U;
 8005194:	0035      	movs	r5, r6
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005196:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005198:	68d2      	ldr	r2, [r2, #12]
 800519a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800519c:	3302      	adds	r3, #2
 800519e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80051a0:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	87cb      	strh	r3, [r1, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051a8:	f7fe fc24 	bl	80039f4 <HAL_GetTick>
 80051ac:	9b00      	ldr	r3, [sp, #0]
 80051ae:	1ac0      	subs	r0, r0, r3
 80051b0:	9b08      	ldr	r3, [sp, #32]
 80051b2:	4283      	cmp	r3, r0
 80051b4:	d8bb      	bhi.n	800512e <HAL_SPI_TransmitReceive+0xd6>
 80051b6:	3301      	adds	r3, #1
 80051b8:	d0b9      	beq.n	800512e <HAL_SPI_TransmitReceive+0xd6>
        errorcode = HAL_TIMEOUT;
 80051ba:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 80051bc:	0023      	movs	r3, r4
 80051be:	2201      	movs	r2, #1
 80051c0:	335d      	adds	r3, #93	; 0x5d
 80051c2:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80051c4:	2300      	movs	r3, #0
 80051c6:	345c      	adds	r4, #92	; 0x5c
 80051c8:	7023      	strb	r3, [r4, #0]
}
 80051ca:	0028      	movs	r0, r5
 80051cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051ce:	2900      	cmp	r1, #0
 80051d0:	d001      	beq.n	80051d6 <HAL_SPI_TransmitReceive+0x17e>
 80051d2:	2e01      	cmp	r6, #1
 80051d4:	d10a      	bne.n	80051ec <HAL_SPI_TransmitReceive+0x194>
      if (hspi->TxXferCount > 1U)
 80051d6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80051d8:	2a01      	cmp	r2, #1
 80051da:	d951      	bls.n	8005280 <HAL_SPI_TransmitReceive+0x228>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051dc:	883a      	ldrh	r2, [r7, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051de:	3702      	adds	r7, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051e0:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 80051e2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051e4:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80051e6:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80051ec:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051ee:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051f0:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d105      	bne.n	8005204 <HAL_SPI_TransmitReceive+0x1ac>
 80051f8:	0023      	movs	r3, r4
 80051fa:	3308      	adds	r3, #8
 80051fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d100      	bne.n	8005204 <HAL_SPI_TransmitReceive+0x1ac>
 8005202:	e79c      	b.n	800513e <HAL_SPI_TransmitReceive+0xe6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005204:	6822      	ldr	r2, [r4, #0]
 8005206:	6893      	ldr	r3, [r2, #8]
 8005208:	423b      	tst	r3, r7
 800520a:	d011      	beq.n	8005230 <HAL_SPI_TransmitReceive+0x1d8>
 800520c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00e      	beq.n	8005230 <HAL_SPI_TransmitReceive+0x1d8>
 8005212:	2d01      	cmp	r5, #1
 8005214:	d10c      	bne.n	8005230 <HAL_SPI_TransmitReceive+0x1d8>
        if (hspi->TxXferCount > 1U)
 8005216:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8005218:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800521a:	2901      	cmp	r1, #1
 800521c:	d938      	bls.n	8005290 <HAL_SPI_TransmitReceive+0x238>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800521e:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005220:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005222:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005224:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005226:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005228:	3b02      	subs	r3, #2
        txallowed = 0U;
 800522a:	2500      	movs	r5, #0
          hspi->TxXferCount--;
 800522c:	b29b      	uxth	r3, r3
 800522e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005230:	6821      	ldr	r1, [r4, #0]
 8005232:	688b      	ldr	r3, [r1, #8]
 8005234:	4233      	tst	r3, r6
 8005236:	d019      	beq.n	800526c <HAL_SPI_TransmitReceive+0x214>
 8005238:	0023      	movs	r3, r4
 800523a:	3308      	adds	r3, #8
 800523c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800523e:	2a00      	cmp	r2, #0
 8005240:	d014      	beq.n	800526c <HAL_SPI_TransmitReceive+0x214>
        if (hspi->RxXferCount > 1U)
 8005242:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 8005244:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005246:	2801      	cmp	r0, #1
 8005248:	d92a      	bls.n	80052a0 <HAL_SPI_TransmitReceive+0x248>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800524a:	68c8      	ldr	r0, [r1, #12]
        txallowed = 1U;
 800524c:	0035      	movs	r5, r6
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800524e:	8010      	strh	r0, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005250:	3202      	adds	r2, #2
 8005252:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005254:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8005256:	3a02      	subs	r2, #2
 8005258:	b292      	uxth	r2, r2
 800525a:	87da      	strh	r2, [r3, #62]	; 0x3e
          if (hspi->RxXferCount <= 1U)
 800525c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800525e:	2b01      	cmp	r3, #1
 8005260:	d804      	bhi.n	800526c <HAL_SPI_TransmitReceive+0x214>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005262:	2380      	movs	r3, #128	; 0x80
 8005264:	684a      	ldr	r2, [r1, #4]
 8005266:	015b      	lsls	r3, r3, #5
 8005268:	4313      	orrs	r3, r2
 800526a:	604b      	str	r3, [r1, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800526c:	f7fe fbc2 	bl	80039f4 <HAL_GetTick>
 8005270:	9b00      	ldr	r3, [sp, #0]
 8005272:	1ac0      	subs	r0, r0, r3
 8005274:	9b08      	ldr	r3, [sp, #32]
 8005276:	4283      	cmp	r3, r0
 8005278:	d8bb      	bhi.n	80051f2 <HAL_SPI_TransmitReceive+0x19a>
 800527a:	3301      	adds	r3, #1
 800527c:	d0b9      	beq.n	80051f2 <HAL_SPI_TransmitReceive+0x19a>
 800527e:	e79c      	b.n	80051ba <HAL_SPI_TransmitReceive+0x162>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005280:	783a      	ldrb	r2, [r7, #0]
 8005282:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8005284:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005286:	3301      	adds	r3, #1
 8005288:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800528a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800528c:	3b01      	subs	r3, #1
 800528e:	e7ab      	b.n	80051e8 <HAL_SPI_TransmitReceive+0x190>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8005294:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005296:	3301      	adds	r3, #1
 8005298:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800529a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800529c:	3b01      	subs	r3, #1
 800529e:	e7c4      	b.n	800522a <HAL_SPI_TransmitReceive+0x1d2>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80052a0:	7b09      	ldrb	r1, [r1, #12]
        txallowed = 1U;
 80052a2:	0035      	movs	r5, r6
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80052a4:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 80052a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80052a8:	3201      	adds	r2, #1
 80052aa:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80052ac:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80052ae:	3a01      	subs	r2, #1
 80052b0:	b292      	uxth	r2, r2
 80052b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052b4:	e7da      	b.n	800526c <HAL_SPI_TransmitReceive+0x214>
 80052b6:	46c0      	nop			; (mov r8, r8)
 80052b8:	ffffefff 	.word	0xffffefff

080052bc <HAL_SPI_GetState>:
  return hspi->State;
 80052bc:	305d      	adds	r0, #93	; 0x5d
 80052be:	7800      	ldrb	r0, [r0, #0]
 80052c0:	b2c0      	uxtb	r0, r0
}
 80052c2:	4770      	bx	lr

080052c4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052c4:	2201      	movs	r2, #1
 80052c6:	6a03      	ldr	r3, [r0, #32]
{
 80052c8:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ca:	4393      	bics	r3, r2
 80052cc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ce:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052d0:	4a19      	ldr	r2, [pc, #100]	; (8005338 <TIM_OC1_SetConfig+0x74>)
  tmpcr2 =  TIMx->CR2;
 80052d2:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80052d4:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052d6:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052d8:	680a      	ldr	r2, [r1, #0]
 80052da:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052dc:	2202      	movs	r2, #2
 80052de:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052e0:	688a      	ldr	r2, [r1, #8]
 80052e2:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052e4:	4a15      	ldr	r2, [pc, #84]	; (800533c <TIM_OC1_SetConfig+0x78>)
 80052e6:	4290      	cmp	r0, r2
 80052e8:	d008      	beq.n	80052fc <TIM_OC1_SetConfig+0x38>
 80052ea:	4e15      	ldr	r6, [pc, #84]	; (8005340 <TIM_OC1_SetConfig+0x7c>)
 80052ec:	42b0      	cmp	r0, r6
 80052ee:	d005      	beq.n	80052fc <TIM_OC1_SetConfig+0x38>
 80052f0:	4e14      	ldr	r6, [pc, #80]	; (8005344 <TIM_OC1_SetConfig+0x80>)
 80052f2:	42b0      	cmp	r0, r6
 80052f4:	d002      	beq.n	80052fc <TIM_OC1_SetConfig+0x38>
 80052f6:	4e14      	ldr	r6, [pc, #80]	; (8005348 <TIM_OC1_SetConfig+0x84>)
 80052f8:	42b0      	cmp	r0, r6
 80052fa:	d116      	bne.n	800532a <TIM_OC1_SetConfig+0x66>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052fc:	2608      	movs	r6, #8
 80052fe:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005300:	68ce      	ldr	r6, [r1, #12]
 8005302:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005304:	2604      	movs	r6, #4
 8005306:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005308:	4290      	cmp	r0, r2
 800530a:	d008      	beq.n	800531e <TIM_OC1_SetConfig+0x5a>
 800530c:	4a0c      	ldr	r2, [pc, #48]	; (8005340 <TIM_OC1_SetConfig+0x7c>)
 800530e:	4290      	cmp	r0, r2
 8005310:	d005      	beq.n	800531e <TIM_OC1_SetConfig+0x5a>
 8005312:	4a0c      	ldr	r2, [pc, #48]	; (8005344 <TIM_OC1_SetConfig+0x80>)
 8005314:	4290      	cmp	r0, r2
 8005316:	d002      	beq.n	800531e <TIM_OC1_SetConfig+0x5a>
 8005318:	4a0b      	ldr	r2, [pc, #44]	; (8005348 <TIM_OC1_SetConfig+0x84>)
 800531a:	4290      	cmp	r0, r2
 800531c:	d105      	bne.n	800532a <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800531e:	4a0b      	ldr	r2, [pc, #44]	; (800534c <TIM_OC1_SetConfig+0x88>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005320:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005322:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005324:	694c      	ldr	r4, [r1, #20]
 8005326:	4334      	orrs	r4, r6
 8005328:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800532a:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800532c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800532e:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8005330:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005332:	6203      	str	r3, [r0, #32]
}
 8005334:	bd70      	pop	{r4, r5, r6, pc}
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	fffeff8c 	.word	0xfffeff8c
 800533c:	40012c00 	.word	0x40012c00
 8005340:	40014000 	.word	0x40014000
 8005344:	40014400 	.word	0x40014400
 8005348:	40014800 	.word	0x40014800
 800534c:	fffffcff 	.word	0xfffffcff

08005350 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005350:	6a03      	ldr	r3, [r0, #32]
 8005352:	4a18      	ldr	r2, [pc, #96]	; (80053b4 <TIM_OC3_SetConfig+0x64>)
{
 8005354:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005356:	4013      	ands	r3, r2
 8005358:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800535c:	4d16      	ldr	r5, [pc, #88]	; (80053b8 <TIM_OC3_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 800535e:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8005360:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005362:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005364:	680d      	ldr	r5, [r1, #0]
 8005366:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005368:	4d14      	ldr	r5, [pc, #80]	; (80053bc <TIM_OC3_SetConfig+0x6c>)
 800536a:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800536c:	688d      	ldr	r5, [r1, #8]
 800536e:	022d      	lsls	r5, r5, #8
 8005370:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005372:	4d13      	ldr	r5, [pc, #76]	; (80053c0 <TIM_OC3_SetConfig+0x70>)
 8005374:	42a8      	cmp	r0, r5
 8005376:	d10e      	bne.n	8005396 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005378:	4d12      	ldr	r5, [pc, #72]	; (80053c4 <TIM_OC3_SetConfig+0x74>)
 800537a:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800537c:	68cb      	ldr	r3, [r1, #12]
 800537e:	021b      	lsls	r3, r3, #8
 8005380:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005382:	4d11      	ldr	r5, [pc, #68]	; (80053c8 <TIM_OC3_SetConfig+0x78>)
 8005384:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005386:	4d11      	ldr	r5, [pc, #68]	; (80053cc <TIM_OC3_SetConfig+0x7c>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005388:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800538a:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800538c:	698a      	ldr	r2, [r1, #24]
 800538e:	4332      	orrs	r2, r6
 8005390:	0112      	lsls	r2, r2, #4
 8005392:	432a      	orrs	r2, r5
 8005394:	e008      	b.n	80053a8 <TIM_OC3_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005396:	4d0e      	ldr	r5, [pc, #56]	; (80053d0 <TIM_OC3_SetConfig+0x80>)
 8005398:	42a8      	cmp	r0, r5
 800539a:	d0f4      	beq.n	8005386 <TIM_OC3_SetConfig+0x36>
 800539c:	4d0d      	ldr	r5, [pc, #52]	; (80053d4 <TIM_OC3_SetConfig+0x84>)
 800539e:	42a8      	cmp	r0, r5
 80053a0:	d0f1      	beq.n	8005386 <TIM_OC3_SetConfig+0x36>
 80053a2:	4d0d      	ldr	r5, [pc, #52]	; (80053d8 <TIM_OC3_SetConfig+0x88>)
 80053a4:	42a8      	cmp	r0, r5
 80053a6:	d0ee      	beq.n	8005386 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a8:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053aa:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80053ac:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80053ae:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b0:	6203      	str	r3, [r0, #32]
}
 80053b2:	bd70      	pop	{r4, r5, r6, pc}
 80053b4:	fffffeff 	.word	0xfffffeff
 80053b8:	fffeff8c 	.word	0xfffeff8c
 80053bc:	fffffdff 	.word	0xfffffdff
 80053c0:	40012c00 	.word	0x40012c00
 80053c4:	fffff7ff 	.word	0xfffff7ff
 80053c8:	fffffbff 	.word	0xfffffbff
 80053cc:	ffffcfff 	.word	0xffffcfff
 80053d0:	40014000 	.word	0x40014000
 80053d4:	40014400 	.word	0x40014400
 80053d8:	40014800 	.word	0x40014800

080053dc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053dc:	6a03      	ldr	r3, [r0, #32]
 80053de:	4a14      	ldr	r2, [pc, #80]	; (8005430 <TIM_OC4_SetConfig+0x54>)
{
 80053e0:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053e2:	4013      	ands	r3, r2
 80053e4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053e6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053e8:	4c12      	ldr	r4, [pc, #72]	; (8005434 <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 80053ea:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80053ec:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053ee:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053f0:	680c      	ldr	r4, [r1, #0]
 80053f2:	0224      	lsls	r4, r4, #8
 80053f4:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053f6:	4c10      	ldr	r4, [pc, #64]	; (8005438 <TIM_OC4_SetConfig+0x5c>)
 80053f8:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053fa:	688c      	ldr	r4, [r1, #8]
 80053fc:	0324      	lsls	r4, r4, #12
 80053fe:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005400:	4c0e      	ldr	r4, [pc, #56]	; (800543c <TIM_OC4_SetConfig+0x60>)
 8005402:	42a0      	cmp	r0, r4
 8005404:	d008      	beq.n	8005418 <TIM_OC4_SetConfig+0x3c>
 8005406:	4c0e      	ldr	r4, [pc, #56]	; (8005440 <TIM_OC4_SetConfig+0x64>)
 8005408:	42a0      	cmp	r0, r4
 800540a:	d005      	beq.n	8005418 <TIM_OC4_SetConfig+0x3c>
 800540c:	4c0d      	ldr	r4, [pc, #52]	; (8005444 <TIM_OC4_SetConfig+0x68>)
 800540e:	42a0      	cmp	r0, r4
 8005410:	d002      	beq.n	8005418 <TIM_OC4_SetConfig+0x3c>
 8005412:	4c0d      	ldr	r4, [pc, #52]	; (8005448 <TIM_OC4_SetConfig+0x6c>)
 8005414:	42a0      	cmp	r0, r4
 8005416:	d104      	bne.n	8005422 <TIM_OC4_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005418:	4c0c      	ldr	r4, [pc, #48]	; (800544c <TIM_OC4_SetConfig+0x70>)
 800541a:	4023      	ands	r3, r4

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800541c:	694c      	ldr	r4, [r1, #20]
 800541e:	01a4      	lsls	r4, r4, #6
 8005420:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005422:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005424:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005426:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005428:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800542a:	6202      	str	r2, [r0, #32]
}
 800542c:	bd30      	pop	{r4, r5, pc}
 800542e:	46c0      	nop			; (mov r8, r8)
 8005430:	ffffefff 	.word	0xffffefff
 8005434:	feff8cff 	.word	0xfeff8cff
 8005438:	ffffdfff 	.word	0xffffdfff
 800543c:	40012c00 	.word	0x40012c00
 8005440:	40014000 	.word	0x40014000
 8005444:	40014400 	.word	0x40014400
 8005448:	40014800 	.word	0x40014800
 800544c:	ffffbfff 	.word	0xffffbfff

08005450 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005450:	6a03      	ldr	r3, [r0, #32]
 8005452:	4a13      	ldr	r2, [pc, #76]	; (80054a0 <TIM_OC5_SetConfig+0x50>)
{
 8005454:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005456:	4013      	ands	r3, r2
 8005458:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545a:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800545c:	4e11      	ldr	r6, [pc, #68]	; (80054a4 <TIM_OC5_SetConfig+0x54>)
  tmpcr2 =  TIMx->CR2;
 800545e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8005460:	6d45      	ldr	r5, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005462:	4035      	ands	r5, r6
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005464:	680e      	ldr	r6, [r1, #0]
 8005466:	4335      	orrs	r5, r6

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005468:	4e0f      	ldr	r6, [pc, #60]	; (80054a8 <TIM_OC5_SetConfig+0x58>)
 800546a:	4034      	ands	r4, r6
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800546c:	688e      	ldr	r6, [r1, #8]
 800546e:	0436      	lsls	r6, r6, #16
 8005470:	4334      	orrs	r4, r6

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005472:	4e0e      	ldr	r6, [pc, #56]	; (80054ac <TIM_OC5_SetConfig+0x5c>)
 8005474:	42b0      	cmp	r0, r6
 8005476:	d008      	beq.n	800548a <TIM_OC5_SetConfig+0x3a>
 8005478:	4e0d      	ldr	r6, [pc, #52]	; (80054b0 <TIM_OC5_SetConfig+0x60>)
 800547a:	42b0      	cmp	r0, r6
 800547c:	d005      	beq.n	800548a <TIM_OC5_SetConfig+0x3a>
 800547e:	4e0d      	ldr	r6, [pc, #52]	; (80054b4 <TIM_OC5_SetConfig+0x64>)
 8005480:	42b0      	cmp	r0, r6
 8005482:	d002      	beq.n	800548a <TIM_OC5_SetConfig+0x3a>
 8005484:	4e0c      	ldr	r6, [pc, #48]	; (80054b8 <TIM_OC5_SetConfig+0x68>)
 8005486:	42b0      	cmp	r0, r6
 8005488:	d103      	bne.n	8005492 <TIM_OC5_SetConfig+0x42>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800548a:	4013      	ands	r3, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800548c:	694a      	ldr	r2, [r1, #20]
 800548e:	0212      	lsls	r2, r2, #8
 8005490:	4313      	orrs	r3, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005492:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005494:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005496:	6545      	str	r5, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8005498:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800549a:	6204      	str	r4, [r0, #32]
}
 800549c:	bd70      	pop	{r4, r5, r6, pc}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	fffeffff 	.word	0xfffeffff
 80054a4:	fffeff8f 	.word	0xfffeff8f
 80054a8:	fffdffff 	.word	0xfffdffff
 80054ac:	40012c00 	.word	0x40012c00
 80054b0:	40014000 	.word	0x40014000
 80054b4:	40014400 	.word	0x40014400
 80054b8:	40014800 	.word	0x40014800

080054bc <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054bc:	6a03      	ldr	r3, [r0, #32]
 80054be:	4a14      	ldr	r2, [pc, #80]	; (8005510 <TIM_OC6_SetConfig+0x54>)
{
 80054c0:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054c2:	4013      	ands	r3, r2
 80054c4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c6:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80054c8:	4c12      	ldr	r4, [pc, #72]	; (8005514 <TIM_OC6_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 80054ca:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 80054cc:	6d45      	ldr	r5, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80054ce:	4025      	ands	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054d0:	680c      	ldr	r4, [r1, #0]
 80054d2:	0224      	lsls	r4, r4, #8
 80054d4:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054d6:	4c10      	ldr	r4, [pc, #64]	; (8005518 <TIM_OC6_SetConfig+0x5c>)
 80054d8:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054da:	688c      	ldr	r4, [r1, #8]
 80054dc:	0524      	lsls	r4, r4, #20
 80054de:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e0:	4c0e      	ldr	r4, [pc, #56]	; (800551c <TIM_OC6_SetConfig+0x60>)
 80054e2:	42a0      	cmp	r0, r4
 80054e4:	d008      	beq.n	80054f8 <TIM_OC6_SetConfig+0x3c>
 80054e6:	4c0e      	ldr	r4, [pc, #56]	; (8005520 <TIM_OC6_SetConfig+0x64>)
 80054e8:	42a0      	cmp	r0, r4
 80054ea:	d005      	beq.n	80054f8 <TIM_OC6_SetConfig+0x3c>
 80054ec:	4c0d      	ldr	r4, [pc, #52]	; (8005524 <TIM_OC6_SetConfig+0x68>)
 80054ee:	42a0      	cmp	r0, r4
 80054f0:	d002      	beq.n	80054f8 <TIM_OC6_SetConfig+0x3c>
 80054f2:	4c0d      	ldr	r4, [pc, #52]	; (8005528 <TIM_OC6_SetConfig+0x6c>)
 80054f4:	42a0      	cmp	r0, r4
 80054f6:	d104      	bne.n	8005502 <TIM_OC6_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054f8:	4c0c      	ldr	r4, [pc, #48]	; (800552c <TIM_OC6_SetConfig+0x70>)
 80054fa:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054fc:	694c      	ldr	r4, [r1, #20]
 80054fe:	02a4      	lsls	r4, r4, #10
 8005500:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005502:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005504:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005506:	6545      	str	r5, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8005508:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800550a:	6202      	str	r2, [r0, #32]
}
 800550c:	bd30      	pop	{r4, r5, pc}
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	ffefffff 	.word	0xffefffff
 8005514:	feff8fff 	.word	0xfeff8fff
 8005518:	ffdfffff 	.word	0xffdfffff
 800551c:	40012c00 	.word	0x40012c00
 8005520:	40014000 	.word	0x40014000
 8005524:	40014400 	.word	0x40014400
 8005528:	40014800 	.word	0x40014800
 800552c:	fffbffff 	.word	0xfffbffff

08005530 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005530:	2201      	movs	r2, #1
 8005532:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005534:	4807      	ldr	r0, [pc, #28]	; (8005554 <HAL_TIM_Base_Start_IT+0x24>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005536:	68d9      	ldr	r1, [r3, #12]
 8005538:	4311      	orrs	r1, r2
 800553a:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800553c:	6899      	ldr	r1, [r3, #8]
 800553e:	4001      	ands	r1, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005540:	2906      	cmp	r1, #6
 8005542:	d005      	beq.n	8005550 <HAL_TIM_Base_Start_IT+0x20>
 8005544:	3807      	subs	r0, #7
 8005546:	4281      	cmp	r1, r0
 8005548:	d002      	beq.n	8005550 <HAL_TIM_Base_Start_IT+0x20>
    __HAL_TIM_ENABLE(htim);
 800554a:	6819      	ldr	r1, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	601a      	str	r2, [r3, #0]
}
 8005550:	2000      	movs	r0, #0
 8005552:	4770      	bx	lr
 8005554:	00010007 	.word	0x00010007

08005558 <HAL_TIM_PWM_MspInit>:
 8005558:	4770      	bx	lr

0800555a <HAL_TIM_IC_MspInit>:
 800555a:	4770      	bx	lr

0800555c <HAL_TIM_OC_DelayElapsedCallback>:
 800555c:	4770      	bx	lr

0800555e <HAL_TIM_IC_CaptureCallback>:
 800555e:	4770      	bx	lr

08005560 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005560:	4770      	bx	lr

08005562 <HAL_TIM_TriggerCallback>:
 8005562:	4770      	bx	lr

08005564 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005564:	2202      	movs	r2, #2
 8005566:	6803      	ldr	r3, [r0, #0]
{
 8005568:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800556a:	6919      	ldr	r1, [r3, #16]
{
 800556c:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800556e:	4211      	tst	r1, r2
 8005570:	d00e      	beq.n	8005590 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005572:	68d9      	ldr	r1, [r3, #12]
 8005574:	4211      	tst	r1, r2
 8005576:	d00b      	beq.n	8005590 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005578:	3a05      	subs	r2, #5
 800557a:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800557c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800557e:	3204      	adds	r2, #4
 8005580:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005582:	079b      	lsls	r3, r3, #30
 8005584:	d100      	bne.n	8005588 <HAL_TIM_IRQHandler+0x24>
 8005586:	e086      	b.n	8005696 <HAL_TIM_IRQHandler+0x132>
          HAL_TIM_IC_CaptureCallback(htim);
 8005588:	f7ff ffe9 	bl	800555e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800558c:	2300      	movs	r3, #0
 800558e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005590:	2204      	movs	r2, #4
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	6919      	ldr	r1, [r3, #16]
 8005596:	4211      	tst	r1, r2
 8005598:	d011      	beq.n	80055be <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800559a:	68d9      	ldr	r1, [r3, #12]
 800559c:	4211      	tst	r1, r2
 800559e:	d00e      	beq.n	80055be <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055a0:	3a09      	subs	r2, #9
 80055a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055a4:	3207      	adds	r2, #7
 80055a6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055a8:	699a      	ldr	r2, [r3, #24]
 80055aa:	23c0      	movs	r3, #192	; 0xc0
 80055ac:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80055ae:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055b0:	421a      	tst	r2, r3
 80055b2:	d100      	bne.n	80055b6 <HAL_TIM_IRQHandler+0x52>
 80055b4:	e075      	b.n	80056a2 <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_IC_CaptureCallback(htim);
 80055b6:	f7ff ffd2 	bl	800555e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ba:	2300      	movs	r3, #0
 80055bc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055be:	2208      	movs	r2, #8
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	6919      	ldr	r1, [r3, #16]
 80055c4:	4211      	tst	r1, r2
 80055c6:	d00e      	beq.n	80055e6 <HAL_TIM_IRQHandler+0x82>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055c8:	68d9      	ldr	r1, [r3, #12]
 80055ca:	4211      	tst	r1, r2
 80055cc:	d00b      	beq.n	80055e6 <HAL_TIM_IRQHandler+0x82>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055ce:	3a11      	subs	r2, #17
 80055d0:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055d2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055d4:	320d      	adds	r2, #13
 80055d6:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80055d8:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055da:	079b      	lsls	r3, r3, #30
 80055dc:	d067      	beq.n	80056ae <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 80055de:	f7ff ffbe 	bl	800555e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e2:	2300      	movs	r3, #0
 80055e4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055e6:	2210      	movs	r2, #16
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	6919      	ldr	r1, [r3, #16]
 80055ec:	4211      	tst	r1, r2
 80055ee:	d010      	beq.n	8005612 <HAL_TIM_IRQHandler+0xae>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055f0:	68d9      	ldr	r1, [r3, #12]
 80055f2:	4211      	tst	r1, r2
 80055f4:	d00d      	beq.n	8005612 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055f6:	3a21      	subs	r2, #33	; 0x21
 80055f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055fa:	3219      	adds	r2, #25
 80055fc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	23c0      	movs	r3, #192	; 0xc0
 8005602:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8005604:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005606:	421a      	tst	r2, r3
 8005608:	d057      	beq.n	80056ba <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_IC_CaptureCallback(htim);
 800560a:	f7ff ffa8 	bl	800555e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560e:	2300      	movs	r3, #0
 8005610:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005612:	2201      	movs	r2, #1
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	6919      	ldr	r1, [r3, #16]
 8005618:	4211      	tst	r1, r2
 800561a:	d007      	beq.n	800562c <HAL_TIM_IRQHandler+0xc8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800561c:	68d9      	ldr	r1, [r3, #12]
 800561e:	4211      	tst	r1, r2
 8005620:	d004      	beq.n	800562c <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005622:	3a03      	subs	r2, #3
 8005624:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005626:	0020      	movs	r0, r4
 8005628:	f7fd fa40 	bl	8002aac <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800562c:	2280      	movs	r2, #128	; 0x80
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	6919      	ldr	r1, [r3, #16]
 8005632:	4211      	tst	r1, r2
 8005634:	d008      	beq.n	8005648 <HAL_TIM_IRQHandler+0xe4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005636:	68d9      	ldr	r1, [r3, #12]
 8005638:	4211      	tst	r1, r2
 800563a:	d005      	beq.n	8005648 <HAL_TIM_IRQHandler+0xe4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800563c:	3a02      	subs	r2, #2
 800563e:	3aff      	subs	r2, #255	; 0xff
 8005640:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005642:	0020      	movs	r0, r4
 8005644:	f000 fb7b 	bl	8005d3e <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	691a      	ldr	r2, [r3, #16]
 800564c:	05d2      	lsls	r2, r2, #23
 800564e:	d507      	bpl.n	8005660 <HAL_TIM_IRQHandler+0xfc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	0612      	lsls	r2, r2, #24
 8005654:	d504      	bpl.n	8005660 <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005656:	4a1c      	ldr	r2, [pc, #112]	; (80056c8 <HAL_TIM_IRQHandler+0x164>)
      HAL_TIMEx_Break2Callback(htim);
 8005658:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800565a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800565c:	f000 fb70 	bl	8005d40 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005660:	2240      	movs	r2, #64	; 0x40
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	6919      	ldr	r1, [r3, #16]
 8005666:	4211      	tst	r1, r2
 8005668:	d007      	beq.n	800567a <HAL_TIM_IRQHandler+0x116>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800566a:	68d9      	ldr	r1, [r3, #12]
 800566c:	4211      	tst	r1, r2
 800566e:	d004      	beq.n	800567a <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005670:	3a81      	subs	r2, #129	; 0x81
 8005672:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005674:	0020      	movs	r0, r4
 8005676:	f7ff ff74 	bl	8005562 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800567a:	2220      	movs	r2, #32
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	6919      	ldr	r1, [r3, #16]
 8005680:	4211      	tst	r1, r2
 8005682:	d007      	beq.n	8005694 <HAL_TIM_IRQHandler+0x130>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005684:	68d9      	ldr	r1, [r3, #12]
 8005686:	4211      	tst	r1, r2
 8005688:	d004      	beq.n	8005694 <HAL_TIM_IRQHandler+0x130>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800568a:	3a41      	subs	r2, #65	; 0x41
 800568c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800568e:	0020      	movs	r0, r4
 8005690:	f000 fb54 	bl	8005d3c <HAL_TIMEx_CommutCallback>
}
 8005694:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005696:	f7ff ff61 	bl	800555c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800569a:	0020      	movs	r0, r4
 800569c:	f7ff ff60 	bl	8005560 <HAL_TIM_PWM_PulseFinishedCallback>
 80056a0:	e774      	b.n	800558c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a2:	f7ff ff5b 	bl	800555c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a6:	0020      	movs	r0, r4
 80056a8:	f7ff ff5a 	bl	8005560 <HAL_TIM_PWM_PulseFinishedCallback>
 80056ac:	e785      	b.n	80055ba <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ae:	f7ff ff55 	bl	800555c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b2:	0020      	movs	r0, r4
 80056b4:	f7ff ff54 	bl	8005560 <HAL_TIM_PWM_PulseFinishedCallback>
 80056b8:	e793      	b.n	80055e2 <HAL_TIM_IRQHandler+0x7e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ba:	f7ff ff4f 	bl	800555c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056be:	0020      	movs	r0, r4
 80056c0:	f7ff ff4e 	bl	8005560 <HAL_TIM_PWM_PulseFinishedCallback>
 80056c4:	e7a3      	b.n	800560e <HAL_TIM_IRQHandler+0xaa>
 80056c6:	46c0      	nop			; (mov r8, r8)
 80056c8:	fffffeff 	.word	0xfffffeff

080056cc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056cc:	4a1c      	ldr	r2, [pc, #112]	; (8005740 <TIM_Base_SetConfig+0x74>)
{
 80056ce:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80056d0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056d2:	4290      	cmp	r0, r2
 80056d4:	d002      	beq.n	80056dc <TIM_Base_SetConfig+0x10>
 80056d6:	4c1b      	ldr	r4, [pc, #108]	; (8005744 <TIM_Base_SetConfig+0x78>)
 80056d8:	42a0      	cmp	r0, r4
 80056da:	d108      	bne.n	80056ee <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056dc:	2470      	movs	r4, #112	; 0x70
 80056de:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80056e0:	684c      	ldr	r4, [r1, #4]
 80056e2:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056e4:	4290      	cmp	r0, r2
 80056e6:	d00e      	beq.n	8005706 <TIM_Base_SetConfig+0x3a>
 80056e8:	4c16      	ldr	r4, [pc, #88]	; (8005744 <TIM_Base_SetConfig+0x78>)
 80056ea:	42a0      	cmp	r0, r4
 80056ec:	d00b      	beq.n	8005706 <TIM_Base_SetConfig+0x3a>
 80056ee:	4c16      	ldr	r4, [pc, #88]	; (8005748 <TIM_Base_SetConfig+0x7c>)
 80056f0:	42a0      	cmp	r0, r4
 80056f2:	d008      	beq.n	8005706 <TIM_Base_SetConfig+0x3a>
 80056f4:	4c15      	ldr	r4, [pc, #84]	; (800574c <TIM_Base_SetConfig+0x80>)
 80056f6:	42a0      	cmp	r0, r4
 80056f8:	d005      	beq.n	8005706 <TIM_Base_SetConfig+0x3a>
 80056fa:	4c15      	ldr	r4, [pc, #84]	; (8005750 <TIM_Base_SetConfig+0x84>)
 80056fc:	42a0      	cmp	r0, r4
 80056fe:	d002      	beq.n	8005706 <TIM_Base_SetConfig+0x3a>
 8005700:	4c14      	ldr	r4, [pc, #80]	; (8005754 <TIM_Base_SetConfig+0x88>)
 8005702:	42a0      	cmp	r0, r4
 8005704:	d103      	bne.n	800570e <TIM_Base_SetConfig+0x42>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005706:	4c14      	ldr	r4, [pc, #80]	; (8005758 <TIM_Base_SetConfig+0x8c>)
 8005708:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800570a:	68cc      	ldr	r4, [r1, #12]
 800570c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800570e:	2480      	movs	r4, #128	; 0x80
 8005710:	43a3      	bics	r3, r4
 8005712:	694c      	ldr	r4, [r1, #20]
 8005714:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8005716:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005718:	688b      	ldr	r3, [r1, #8]
 800571a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800571c:	680b      	ldr	r3, [r1, #0]
 800571e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005720:	4290      	cmp	r0, r2
 8005722:	d008      	beq.n	8005736 <TIM_Base_SetConfig+0x6a>
 8005724:	4b09      	ldr	r3, [pc, #36]	; (800574c <TIM_Base_SetConfig+0x80>)
 8005726:	4298      	cmp	r0, r3
 8005728:	d005      	beq.n	8005736 <TIM_Base_SetConfig+0x6a>
 800572a:	4b09      	ldr	r3, [pc, #36]	; (8005750 <TIM_Base_SetConfig+0x84>)
 800572c:	4298      	cmp	r0, r3
 800572e:	d002      	beq.n	8005736 <TIM_Base_SetConfig+0x6a>
 8005730:	4b08      	ldr	r3, [pc, #32]	; (8005754 <TIM_Base_SetConfig+0x88>)
 8005732:	4298      	cmp	r0, r3
 8005734:	d101      	bne.n	800573a <TIM_Base_SetConfig+0x6e>
    TIMx->RCR = Structure->RepetitionCounter;
 8005736:	690b      	ldr	r3, [r1, #16]
 8005738:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800573a:	2301      	movs	r3, #1
 800573c:	6143      	str	r3, [r0, #20]
}
 800573e:	bd10      	pop	{r4, pc}
 8005740:	40012c00 	.word	0x40012c00
 8005744:	40000400 	.word	0x40000400
 8005748:	40002000 	.word	0x40002000
 800574c:	40014000 	.word	0x40014000
 8005750:	40014400 	.word	0x40014400
 8005754:	40014800 	.word	0x40014800
 8005758:	fffffcff 	.word	0xfffffcff

0800575c <HAL_TIM_Base_Init>:
{
 800575c:	b570      	push	{r4, r5, r6, lr}
 800575e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005760:	2001      	movs	r0, #1
  if (htim == NULL)
 8005762:	2c00      	cmp	r4, #0
 8005764:	d014      	beq.n	8005790 <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005766:	0025      	movs	r5, r4
 8005768:	353d      	adds	r5, #61	; 0x3d
 800576a:	782b      	ldrb	r3, [r5, #0]
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d105      	bne.n	800577e <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8005772:	0022      	movs	r2, r4
 8005774:	323c      	adds	r2, #60	; 0x3c
 8005776:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8005778:	0020      	movs	r0, r4
 800577a:	f7fd ff0d 	bl	8003598 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800577e:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005780:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005782:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005784:	1d21      	adds	r1, r4, #4
 8005786:	f7ff ffa1 	bl	80056cc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800578a:	2301      	movs	r3, #1
  return HAL_OK;
 800578c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800578e:	702b      	strb	r3, [r5, #0]
}
 8005790:	bd70      	pop	{r4, r5, r6, pc}

08005792 <HAL_TIM_PWM_Init>:
{
 8005792:	b570      	push	{r4, r5, r6, lr}
 8005794:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005796:	2001      	movs	r0, #1
  if (htim == NULL)
 8005798:	2c00      	cmp	r4, #0
 800579a:	d014      	beq.n	80057c6 <HAL_TIM_PWM_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 800579c:	0025      	movs	r5, r4
 800579e:	353d      	adds	r5, #61	; 0x3d
 80057a0:	782b      	ldrb	r3, [r5, #0]
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d105      	bne.n	80057b4 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80057a8:	0022      	movs	r2, r4
 80057aa:	323c      	adds	r2, #60	; 0x3c
 80057ac:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 80057ae:	0020      	movs	r0, r4
 80057b0:	f7ff fed2 	bl	8005558 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80057b4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057b6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80057b8:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ba:	1d21      	adds	r1, r4, #4
 80057bc:	f7ff ff86 	bl	80056cc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80057c0:	2301      	movs	r3, #1
  return HAL_OK;
 80057c2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80057c4:	702b      	strb	r3, [r5, #0]
}
 80057c6:	bd70      	pop	{r4, r5, r6, pc}

080057c8 <HAL_TIM_IC_Init>:
{
 80057c8:	b570      	push	{r4, r5, r6, lr}
 80057ca:	0004      	movs	r4, r0
    return HAL_ERROR;
 80057cc:	2001      	movs	r0, #1
  if (htim == NULL)
 80057ce:	2c00      	cmp	r4, #0
 80057d0:	d014      	beq.n	80057fc <HAL_TIM_IC_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 80057d2:	0025      	movs	r5, r4
 80057d4:	353d      	adds	r5, #61	; 0x3d
 80057d6:	782b      	ldrb	r3, [r5, #0]
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d105      	bne.n	80057ea <HAL_TIM_IC_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80057de:	0022      	movs	r2, r4
 80057e0:	323c      	adds	r2, #60	; 0x3c
 80057e2:	7013      	strb	r3, [r2, #0]
    HAL_TIM_IC_MspInit(htim);
 80057e4:	0020      	movs	r0, r4
 80057e6:	f7ff feb8 	bl	800555a <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80057ea:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ec:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80057ee:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057f0:	1d21      	adds	r1, r4, #4
 80057f2:	f7ff ff6b 	bl	80056cc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80057f6:	2301      	movs	r3, #1
  return HAL_OK;
 80057f8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80057fa:	702b      	strb	r3, [r5, #0]
}
 80057fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08005800 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005800:	2210      	movs	r2, #16
 8005802:	6a03      	ldr	r3, [r0, #32]
{
 8005804:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005806:	4393      	bics	r3, r2
 8005808:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800580a:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800580c:	4d16      	ldr	r5, [pc, #88]	; (8005868 <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 800580e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005810:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005812:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005814:	680d      	ldr	r5, [r1, #0]
 8005816:	022d      	lsls	r5, r5, #8
 8005818:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 800581a:	2520      	movs	r5, #32
 800581c:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800581e:	688d      	ldr	r5, [r1, #8]
 8005820:	012d      	lsls	r5, r5, #4
 8005822:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005824:	4d11      	ldr	r5, [pc, #68]	; (800586c <TIM_OC2_SetConfig+0x6c>)
 8005826:	42a8      	cmp	r0, r5
 8005828:	d10f      	bne.n	800584a <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 800582a:	2580      	movs	r5, #128	; 0x80
 800582c:	43aa      	bics	r2, r5
 800582e:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005830:	68ca      	ldr	r2, [r1, #12]
 8005832:	0112      	lsls	r2, r2, #4
 8005834:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8005836:	2540      	movs	r5, #64	; 0x40
 8005838:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800583a:	4d0d      	ldr	r5, [pc, #52]	; (8005870 <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800583c:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800583e:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005840:	698b      	ldr	r3, [r1, #24]
 8005842:	4333      	orrs	r3, r6
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	432b      	orrs	r3, r5
 8005848:	e008      	b.n	800585c <TIM_OC2_SetConfig+0x5c>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800584a:	4d0a      	ldr	r5, [pc, #40]	; (8005874 <TIM_OC2_SetConfig+0x74>)
 800584c:	42a8      	cmp	r0, r5
 800584e:	d0f4      	beq.n	800583a <TIM_OC2_SetConfig+0x3a>
 8005850:	4d09      	ldr	r5, [pc, #36]	; (8005878 <TIM_OC2_SetConfig+0x78>)
 8005852:	42a8      	cmp	r0, r5
 8005854:	d0f1      	beq.n	800583a <TIM_OC2_SetConfig+0x3a>
 8005856:	4d09      	ldr	r5, [pc, #36]	; (800587c <TIM_OC2_SetConfig+0x7c>)
 8005858:	42a8      	cmp	r0, r5
 800585a:	d0ee      	beq.n	800583a <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 800585c:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800585e:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005860:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005862:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005864:	6202      	str	r2, [r0, #32]
}
 8005866:	bd70      	pop	{r4, r5, r6, pc}
 8005868:	feff8cff 	.word	0xfeff8cff
 800586c:	40012c00 	.word	0x40012c00
 8005870:	fffff3ff 	.word	0xfffff3ff
 8005874:	40014000 	.word	0x40014000
 8005878:	40014400 	.word	0x40014400
 800587c:	40014800 	.word	0x40014800

08005880 <HAL_TIM_PWM_ConfigChannel>:
{
 8005880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8005882:	0007      	movs	r7, r0
 8005884:	2302      	movs	r3, #2
 8005886:	373c      	adds	r7, #60	; 0x3c
{
 8005888:	0016      	movs	r6, r2
  __HAL_LOCK(htim);
 800588a:	783a      	ldrb	r2, [r7, #0]
{
 800588c:	0004      	movs	r4, r0
 800588e:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8005890:	0018      	movs	r0, r3
 8005892:	2a01      	cmp	r2, #1
 8005894:	d011      	beq.n	80058ba <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005896:	2201      	movs	r2, #1
 8005898:	703a      	strb	r2, [r7, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800589a:	0022      	movs	r2, r4
 800589c:	323d      	adds	r2, #61	; 0x3d
 800589e:	9201      	str	r2, [sp, #4]
 80058a0:	7013      	strb	r3, [r2, #0]
  switch (Channel)
 80058a2:	2e08      	cmp	r6, #8
 80058a4:	d043      	beq.n	800592e <HAL_TIM_PWM_ConfigChannel+0xae>
 80058a6:	d809      	bhi.n	80058bc <HAL_TIM_PWM_ConfigChannel+0x3c>
 80058a8:	2e00      	cmp	r6, #0
 80058aa:	d01e      	beq.n	80058ea <HAL_TIM_PWM_ConfigChannel+0x6a>
 80058ac:	2e04      	cmp	r6, #4
 80058ae:	d02d      	beq.n	800590c <HAL_TIM_PWM_ConfigChannel+0x8c>
  htim->State = HAL_TIM_STATE_READY;
 80058b0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80058b2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80058b4:	9a01      	ldr	r2, [sp, #4]
 80058b6:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(htim);
 80058b8:	7038      	strb	r0, [r7, #0]
}
 80058ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  switch (Channel)
 80058bc:	2e10      	cmp	r6, #16
 80058be:	d046      	beq.n	800594e <HAL_TIM_PWM_ConfigChannel+0xce>
 80058c0:	2e14      	cmp	r6, #20
 80058c2:	d055      	beq.n	8005970 <HAL_TIM_PWM_ConfigChannel+0xf0>
 80058c4:	2e0c      	cmp	r6, #12
 80058c6:	d1f3      	bne.n	80058b0 <HAL_TIM_PWM_ConfigChannel+0x30>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058c8:	6820      	ldr	r0, [r4, #0]
 80058ca:	f7ff fd87 	bl	80053dc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ce:	2280      	movs	r2, #128	; 0x80
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	0112      	lsls	r2, r2, #4
 80058d4:	69d9      	ldr	r1, [r3, #28]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058da:	69da      	ldr	r2, [r3, #28]
 80058dc:	492d      	ldr	r1, [pc, #180]	; (8005994 <HAL_TIM_PWM_ConfigChannel+0x114>)
 80058de:	400a      	ands	r2, r1
 80058e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058e2:	692a      	ldr	r2, [r5, #16]
 80058e4:	69d9      	ldr	r1, [r3, #28]
 80058e6:	0212      	lsls	r2, r2, #8
 80058e8:	e02e      	b.n	8005948 <HAL_TIM_PWM_ConfigChannel+0xc8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058ea:	6820      	ldr	r0, [r4, #0]
 80058ec:	f7ff fcea 	bl	80052c4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058f0:	2208      	movs	r2, #8
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	6999      	ldr	r1, [r3, #24]
 80058f6:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058f8:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058fc:	699a      	ldr	r2, [r3, #24]
 80058fe:	438a      	bics	r2, r1
 8005900:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005902:	699a      	ldr	r2, [r3, #24]
 8005904:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005906:	430a      	orrs	r2, r1
 8005908:	619a      	str	r2, [r3, #24]
      break;
 800590a:	e7d1      	b.n	80058b0 <HAL_TIM_PWM_ConfigChannel+0x30>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800590c:	6820      	ldr	r0, [r4, #0]
 800590e:	f7ff ff77 	bl	8005800 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005912:	2280      	movs	r2, #128	; 0x80
 8005914:	6823      	ldr	r3, [r4, #0]
 8005916:	0112      	lsls	r2, r2, #4
 8005918:	6999      	ldr	r1, [r3, #24]
 800591a:	430a      	orrs	r2, r1
 800591c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800591e:	699a      	ldr	r2, [r3, #24]
 8005920:	491c      	ldr	r1, [pc, #112]	; (8005994 <HAL_TIM_PWM_ConfigChannel+0x114>)
 8005922:	400a      	ands	r2, r1
 8005924:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005926:	692a      	ldr	r2, [r5, #16]
 8005928:	6999      	ldr	r1, [r3, #24]
 800592a:	0212      	lsls	r2, r2, #8
 800592c:	e7eb      	b.n	8005906 <HAL_TIM_PWM_ConfigChannel+0x86>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800592e:	6820      	ldr	r0, [r4, #0]
 8005930:	f7ff fd0e 	bl	8005350 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005934:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005936:	6823      	ldr	r3, [r4, #0]
 8005938:	69da      	ldr	r2, [r3, #28]
 800593a:	4316      	orrs	r6, r2
 800593c:	61de      	str	r6, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800593e:	69da      	ldr	r2, [r3, #28]
 8005940:	438a      	bics	r2, r1
 8005942:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005944:	69da      	ldr	r2, [r3, #28]
 8005946:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005948:	430a      	orrs	r2, r1
 800594a:	61da      	str	r2, [r3, #28]
      break;
 800594c:	e7b0      	b.n	80058b0 <HAL_TIM_PWM_ConfigChannel+0x30>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800594e:	6820      	ldr	r0, [r4, #0]
 8005950:	f7ff fd7e 	bl	8005450 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005954:	2208      	movs	r2, #8
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800595a:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800595c:	2104      	movs	r1, #4
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800595e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005960:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005962:	438a      	bics	r2, r1
 8005964:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005966:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005968:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800596a:	430a      	orrs	r2, r1
 800596c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800596e:	e79f      	b.n	80058b0 <HAL_TIM_PWM_ConfigChannel+0x30>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005970:	6820      	ldr	r0, [r4, #0]
 8005972:	f7ff fda3 	bl	80054bc <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005976:	2280      	movs	r2, #128	; 0x80
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	0112      	lsls	r2, r2, #4
 800597c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800597e:	430a      	orrs	r2, r1
 8005980:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005982:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005984:	4903      	ldr	r1, [pc, #12]	; (8005994 <HAL_TIM_PWM_ConfigChannel+0x114>)
 8005986:	400a      	ands	r2, r1
 8005988:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800598a:	692a      	ldr	r2, [r5, #16]
 800598c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800598e:	0212      	lsls	r2, r2, #8
 8005990:	e7eb      	b.n	800596a <HAL_TIM_PWM_ConfigChannel+0xea>
 8005992:	46c0      	nop			; (mov r8, r8)
 8005994:	fffffbff 	.word	0xfffffbff

08005998 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005998:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800599a:	2401      	movs	r4, #1
 800599c:	6a05      	ldr	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800599e:	4f0f      	ldr	r7, [pc, #60]	; (80059dc <TIM_TI1_SetConfig+0x44>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059a0:	43a5      	bics	r5, r4
 80059a2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059a4:	6986      	ldr	r6, [r0, #24]
  tmpccer = TIMx->CCER;
 80059a6:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80059a8:	42b8      	cmp	r0, r7
 80059aa:	d005      	beq.n	80059b8 <TIM_TI1_SetConfig+0x20>
 80059ac:	4f0c      	ldr	r7, [pc, #48]	; (80059e0 <TIM_TI1_SetConfig+0x48>)
 80059ae:	42b8      	cmp	r0, r7
 80059b0:	d002      	beq.n	80059b8 <TIM_TI1_SetConfig+0x20>
 80059b2:	4f0c      	ldr	r7, [pc, #48]	; (80059e4 <TIM_TI1_SetConfig+0x4c>)
 80059b4:	42b8      	cmp	r0, r7
 80059b6:	d10f      	bne.n	80059d8 <TIM_TI1_SetConfig+0x40>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80059b8:	2403      	movs	r4, #3
 80059ba:	43a6      	bics	r6, r4
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059bc:	24f0      	movs	r4, #240	; 0xf0
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80059be:	4332      	orrs	r2, r6
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059c0:	43a2      	bics	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	340f      	adds	r4, #15
 80059c6:	4023      	ands	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059c8:	3cf5      	subs	r4, #245	; 0xf5
 80059ca:	43a5      	bics	r5, r4
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80059cc:	4021      	ands	r1, r4
 80059ce:	4329      	orrs	r1, r5
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80059d0:	431a      	orrs	r2, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059d2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80059d4:	6201      	str	r1, [r0, #32]
}
 80059d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80059d8:	0022      	movs	r2, r4
 80059da:	e7ef      	b.n	80059bc <TIM_TI1_SetConfig+0x24>
 80059dc:	40012c00 	.word	0x40012c00
 80059e0:	40000400 	.word	0x40000400
 80059e4:	40014000 	.word	0x40014000

080059e8 <HAL_TIM_IC_ConfigChannel>:
{
 80059e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059ea:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 80059ec:	0001      	movs	r1, r0
 80059ee:	2302      	movs	r3, #2
 80059f0:	313c      	adds	r1, #60	; 0x3c
 80059f2:	780e      	ldrb	r6, [r1, #0]
{
 80059f4:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80059f6:	0018      	movs	r0, r3
 80059f8:	2e01      	cmp	r6, #1
 80059fa:	d01a      	beq.n	8005a32 <HAL_TIM_IC_ConfigChannel+0x4a>
 80059fc:	3801      	subs	r0, #1
 80059fe:	7008      	strb	r0, [r1, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005a00:	704b      	strb	r3, [r1, #1]
  if (Channel == TIM_CHANNEL_1)
 8005a02:	2a00      	cmp	r2, #0
 8005a04:	d116      	bne.n	8005a34 <HAL_TIM_IC_ConfigChannel+0x4c>
    TIM_TI1_SetConfig(htim->Instance,
 8005a06:	68eb      	ldr	r3, [r5, #12]
 8005a08:	686a      	ldr	r2, [r5, #4]
 8005a0a:	6829      	ldr	r1, [r5, #0]
 8005a0c:	6820      	ldr	r0, [r4, #0]
 8005a0e:	f7ff ffc3 	bl	8005998 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005a12:	210c      	movs	r1, #12
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	699a      	ldr	r2, [r3, #24]
 8005a18:	438a      	bics	r2, r1
 8005a1a:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005a20:	430a      	orrs	r2, r1
 8005a22:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8005a24:	0023      	movs	r3, r4
 8005a26:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8005a28:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005a2a:	333d      	adds	r3, #61	; 0x3d
  __HAL_UNLOCK(htim);
 8005a2c:	343c      	adds	r4, #60	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8005a2e:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(htim);
 8005a30:	7020      	strb	r0, [r4, #0]
}
 8005a32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a34:	6829      	ldr	r1, [r5, #0]
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	9101      	str	r1, [sp, #4]
 8005a3a:	686e      	ldr	r6, [r5, #4]
 8005a3c:	68e8      	ldr	r0, [r5, #12]
  else if (Channel == TIM_CHANNEL_2)
 8005a3e:	2a04      	cmp	r2, #4
 8005a40:	d11e      	bne.n	8005a80 <HAL_TIM_IC_ConfigChannel+0x98>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a42:	2710      	movs	r7, #16
 8005a44:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005a46:	4930      	ldr	r1, [pc, #192]	; (8005b08 <HAL_TIM_IC_ConfigChannel+0x120>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a48:	43ba      	bics	r2, r7
 8005a4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a4c:	699f      	ldr	r7, [r3, #24]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005a4e:	0236      	lsls	r6, r6, #8
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005a50:	400f      	ands	r7, r1
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005a52:	433e      	orrs	r6, r7

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a54:	4f2d      	ldr	r7, [pc, #180]	; (8005b0c <HAL_TIM_IC_ConfigChannel+0x124>)
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005a56:	0700      	lsls	r0, r0, #28
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a58:	403e      	ands	r6, r7
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005a5a:	0c00      	lsrs	r0, r0, #16
 8005a5c:	4330      	orrs	r0, r6

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a5e:	26a0      	movs	r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005a60:	9901      	ldr	r1, [sp, #4]
  tmpccer = TIMx->CCER;
 8005a62:	6a1a      	ldr	r2, [r3, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005a64:	0109      	lsls	r1, r1, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a66:	43b2      	bics	r2, r6
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005a68:	4031      	ands	r1, r6
 8005a6a:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a6c:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a6e:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	4927      	ldr	r1, [pc, #156]	; (8005b10 <HAL_TIM_IC_ConfigChannel+0x128>)
 8005a74:	400a      	ands	r2, r1
 8005a76:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005a78:	68aa      	ldr	r2, [r5, #8]
 8005a7a:	6999      	ldr	r1, [r3, #24]
 8005a7c:	0212      	lsls	r2, r2, #8
 8005a7e:	e7cf      	b.n	8005a20 <HAL_TIM_IC_ConfigChannel+0x38>
 8005a80:	68ad      	ldr	r5, [r5, #8]
  else if (Channel == TIM_CHANNEL_3)
 8005a82:	2a08      	cmp	r2, #8
 8005a84:	d120      	bne.n	8005ac8 <HAL_TIM_IC_ConfigChannel+0xe0>
  TIMx->CCER &= ~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005a86:	2103      	movs	r1, #3
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a88:	6a1a      	ldr	r2, [r3, #32]
 8005a8a:	4f22      	ldr	r7, [pc, #136]	; (8005b14 <HAL_TIM_IC_ConfigChannel+0x12c>)
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005a8c:	0100      	lsls	r0, r0, #4
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a8e:	403a      	ands	r2, r7
 8005a90:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a92:	69df      	ldr	r7, [r3, #28]
  tmpccer = TIMx->CCER;
 8005a94:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005a96:	438f      	bics	r7, r1
  tmpccmr2 |= TIM_ICSelection;
 8005a98:	433e      	orrs	r6, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005a9a:	27f0      	movs	r7, #240	; 0xf0
 8005a9c:	43be      	bics	r6, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005a9e:	370f      	adds	r7, #15
 8005aa0:	4038      	ands	r0, r7
 8005aa2:	4306      	orrs	r6, r0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005aa4:	481c      	ldr	r0, [pc, #112]	; (8005b18 <HAL_TIM_IC_ConfigChannel+0x130>)
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005aa6:	9901      	ldr	r1, [sp, #4]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005aa8:	4002      	ands	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005aaa:	20a0      	movs	r0, #160	; 0xa0
 8005aac:	0209      	lsls	r1, r1, #8
 8005aae:	0100      	lsls	r0, r0, #4
 8005ab0:	4001      	ands	r1, r0
 8005ab2:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ab4:	61de      	str	r6, [r3, #28]
  TIMx->CCER = tmpccer;
 8005ab6:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005ab8:	210c      	movs	r1, #12
 8005aba:	69da      	ldr	r2, [r3, #28]
 8005abc:	438a      	bics	r2, r1
 8005abe:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005ac0:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005ac2:	4315      	orrs	r5, r2
 8005ac4:	61dd      	str	r5, [r3, #28]
 8005ac6:	e7ad      	b.n	8005a24 <HAL_TIM_IC_ConfigChannel+0x3c>
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ac8:	6a1a      	ldr	r2, [r3, #32]
 8005aca:	4f14      	ldr	r7, [pc, #80]	; (8005b1c <HAL_TIM_IC_ConfigChannel+0x134>)
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005acc:	490e      	ldr	r1, [pc, #56]	; (8005b08 <HAL_TIM_IC_ConfigChannel+0x120>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ace:	403a      	ands	r2, r7
 8005ad0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ad2:	69df      	ldr	r7, [r3, #28]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005ad4:	0236      	lsls	r6, r6, #8
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005ad6:	400f      	ands	r7, r1
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005ad8:	433e      	orrs	r6, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005ada:	4f0c      	ldr	r7, [pc, #48]	; (8005b0c <HAL_TIM_IC_ConfigChannel+0x124>)
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005adc:	0700      	lsls	r0, r0, #28
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005ade:	403e      	ands	r6, r7
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005ae0:	0c00      	lsrs	r0, r0, #16
  tmpccer = TIMx->CCER;
 8005ae2:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005ae4:	4330      	orrs	r0, r6

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005ae6:	4e0e      	ldr	r6, [pc, #56]	; (8005b20 <HAL_TIM_IC_ConfigChannel+0x138>)
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005ae8:	9901      	ldr	r1, [sp, #4]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005aea:	4032      	ands	r2, r6
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005aec:	26a0      	movs	r6, #160	; 0xa0
 8005aee:	0309      	lsls	r1, r1, #12
 8005af0:	0236      	lsls	r6, r6, #8
 8005af2:	4031      	ands	r1, r6
 8005af4:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005af6:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005af8:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005afa:	69da      	ldr	r2, [r3, #28]
 8005afc:	4904      	ldr	r1, [pc, #16]	; (8005b10 <HAL_TIM_IC_ConfigChannel+0x128>)
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005afe:	022d      	lsls	r5, r5, #8
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005b00:	400a      	ands	r2, r1
 8005b02:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005b04:	69da      	ldr	r2, [r3, #28]
 8005b06:	e7dc      	b.n	8005ac2 <HAL_TIM_IC_ConfigChannel+0xda>
 8005b08:	fffffcff 	.word	0xfffffcff
 8005b0c:	ffff0fff 	.word	0xffff0fff
 8005b10:	fffff3ff 	.word	0xfffff3ff
 8005b14:	fffffeff 	.word	0xfffffeff
 8005b18:	fffff5ff 	.word	0xfffff5ff
 8005b1c:	ffffefff 	.word	0xffffefff
 8005b20:	ffff5fff 	.word	0xffff5fff

08005b24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b24:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b26:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b28:	4d03      	ldr	r5, [pc, #12]	; (8005b38 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b2e:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b30:	4313      	orrs	r3, r2
 8005b32:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b34:	6083      	str	r3, [r0, #8]
}
 8005b36:	bd30      	pop	{r4, r5, pc}
 8005b38:	ffff00ff 	.word	0xffff00ff

08005b3c <HAL_TIM_ConfigClockSource>:
{
 8005b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8005b3e:	0005      	movs	r5, r0
 8005b40:	2302      	movs	r3, #2
 8005b42:	353c      	adds	r5, #60	; 0x3c
 8005b44:	782a      	ldrb	r2, [r5, #0]
{
 8005b46:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8005b48:	0018      	movs	r0, r3
 8005b4a:	2a01      	cmp	r2, #1
 8005b4c:	d016      	beq.n	8005b7c <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8005b4e:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8005b50:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 8005b52:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005b54:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8005b56:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005b58:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8005b5a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b5c:	4a3f      	ldr	r2, [pc, #252]	; (8005c5c <HAL_TIM_ConfigClockSource+0x120>)
 8005b5e:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8005b60:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8005b62:	680b      	ldr	r3, [r1, #0]
 8005b64:	2b40      	cmp	r3, #64	; 0x40
 8005b66:	d063      	beq.n	8005c30 <HAL_TIM_ConfigClockSource+0xf4>
 8005b68:	d814      	bhi.n	8005b94 <HAL_TIM_ConfigClockSource+0x58>
 8005b6a:	2b10      	cmp	r3, #16
 8005b6c:	d00b      	beq.n	8005b86 <HAL_TIM_ConfigClockSource+0x4a>
 8005b6e:	d806      	bhi.n	8005b7e <HAL_TIM_ConfigClockSource+0x42>
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d008      	beq.n	8005b86 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8005b74:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005b76:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005b78:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8005b7a:	7028      	strb	r0, [r5, #0]
}
 8005b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8005b7e:	2b20      	cmp	r3, #32
 8005b80:	d001      	beq.n	8005b86 <HAL_TIM_ConfigClockSource+0x4a>
 8005b82:	2b30      	cmp	r3, #48	; 0x30
 8005b84:	d1f6      	bne.n	8005b74 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b86:	4a36      	ldr	r2, [pc, #216]	; (8005c60 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = TIMx->SMCR;
 8005b88:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b8a:	4011      	ands	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b8c:	2207      	movs	r2, #7
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	430b      	orrs	r3, r1
 8005b92:	e019      	b.n	8005bc8 <HAL_TIM_ConfigClockSource+0x8c>
  switch (sClockSourceConfig->ClockSource)
 8005b94:	2b60      	cmp	r3, #96	; 0x60
 8005b96:	d034      	beq.n	8005c02 <HAL_TIM_ConfigClockSource+0xc6>
 8005b98:	d818      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x90>
 8005b9a:	2b50      	cmp	r3, #80	; 0x50
 8005b9c:	d1ea      	bne.n	8005b74 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b9e:	684a      	ldr	r2, [r1, #4]
 8005ba0:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8005ba2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ba4:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ba6:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ba8:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005baa:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bac:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bae:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bb0:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bb2:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bb4:	240a      	movs	r4, #10
 8005bb6:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8005bb8:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8005bba:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005bbc:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005bbe:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bc0:	4a27      	ldr	r2, [pc, #156]	; (8005c60 <HAL_TIM_ConfigClockSource+0x124>)
 8005bc2:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bc4:	2357      	movs	r3, #87	; 0x57
 8005bc6:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8005bc8:	6083      	str	r3, [r0, #8]
 8005bca:	e7d3      	b.n	8005b74 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8005bcc:	2b70      	cmp	r3, #112	; 0x70
 8005bce:	d00d      	beq.n	8005bec <HAL_TIM_ConfigClockSource+0xb0>
 8005bd0:	2280      	movs	r2, #128	; 0x80
 8005bd2:	0192      	lsls	r2, r2, #6
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d1cd      	bne.n	8005b74 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8005bd8:	68cb      	ldr	r3, [r1, #12]
 8005bda:	684a      	ldr	r2, [r1, #4]
 8005bdc:	6889      	ldr	r1, [r1, #8]
 8005bde:	f7ff ffa1 	bl	8005b24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005be2:	2380      	movs	r3, #128	; 0x80
 8005be4:	6822      	ldr	r2, [r4, #0]
 8005be6:	01db      	lsls	r3, r3, #7
 8005be8:	6891      	ldr	r1, [r2, #8]
 8005bea:	e007      	b.n	8005bfc <HAL_TIM_ConfigClockSource+0xc0>
      TIM_ETR_SetConfig(htim->Instance,
 8005bec:	68cb      	ldr	r3, [r1, #12]
 8005bee:	684a      	ldr	r2, [r1, #4]
 8005bf0:	6889      	ldr	r1, [r1, #8]
 8005bf2:	f7ff ff97 	bl	8005b24 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bf6:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8005bf8:	6822      	ldr	r2, [r4, #0]
 8005bfa:	6891      	ldr	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bfc:	430b      	orrs	r3, r1
 8005bfe:	6093      	str	r3, [r2, #8]
      break;
 8005c00:	e7b8      	b.n	8005b74 <HAL_TIM_ConfigClockSource+0x38>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c02:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c04:	684b      	ldr	r3, [r1, #4]
 8005c06:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c08:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c0a:	4f16      	ldr	r7, [pc, #88]	; (8005c64 <HAL_TIM_ConfigClockSource+0x128>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c0c:	43a1      	bics	r1, r4
 8005c0e:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c10:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c12:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c14:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c16:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c18:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8005c1a:	6a01      	ldr	r1, [r0, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c1c:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c1e:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c20:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8005c22:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005c24:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005c26:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c28:	4a0d      	ldr	r2, [pc, #52]	; (8005c60 <HAL_TIM_ConfigClockSource+0x124>)
 8005c2a:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c2c:	2367      	movs	r3, #103	; 0x67
 8005c2e:	e7ca      	b.n	8005bc6 <HAL_TIM_ConfigClockSource+0x8a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c30:	684a      	ldr	r2, [r1, #4]
 8005c32:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8005c34:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c36:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c38:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c3a:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c3c:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c3e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c40:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c42:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c44:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c46:	240a      	movs	r4, #10
 8005c48:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8005c4a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8005c4c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005c4e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005c50:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c52:	4a03      	ldr	r2, [pc, #12]	; (8005c60 <HAL_TIM_ConfigClockSource+0x124>)
 8005c54:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c56:	2347      	movs	r3, #71	; 0x47
 8005c58:	e7b5      	b.n	8005bc6 <HAL_TIM_ConfigClockSource+0x8a>
 8005c5a:	46c0      	nop			; (mov r8, r8)
 8005c5c:	ffce0088 	.word	0xffce0088
 8005c60:	ffcfff8f 	.word	0xffcfff8f
 8005c64:	ffff0fff 	.word	0xffff0fff

08005c68 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c68:	231f      	movs	r3, #31
{
 8005c6a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c6c:	2401      	movs	r4, #1
 8005c6e:	4019      	ands	r1, r3
 8005c70:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c72:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8005c74:	6a03      	ldr	r3, [r0, #32]
 8005c76:	43a3      	bics	r3, r4
 8005c78:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c7a:	6a03      	ldr	r3, [r0, #32]
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	6202      	str	r2, [r0, #32]
}
 8005c80:	bd10      	pop	{r4, pc}
	...

08005c84 <HAL_TIM_PWM_Start>:
{
 8005c84:	b510      	push	{r4, lr}
 8005c86:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c88:	2201      	movs	r2, #1
 8005c8a:	6800      	ldr	r0, [r0, #0]
 8005c8c:	f7ff ffec 	bl	8005c68 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	4a10      	ldr	r2, [pc, #64]	; (8005cd4 <HAL_TIM_PWM_Start+0x50>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d016      	beq.n	8005cc6 <HAL_TIM_PWM_Start+0x42>
 8005c98:	4a0f      	ldr	r2, [pc, #60]	; (8005cd8 <HAL_TIM_PWM_Start+0x54>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d013      	beq.n	8005cc6 <HAL_TIM_PWM_Start+0x42>
 8005c9e:	4a0f      	ldr	r2, [pc, #60]	; (8005cdc <HAL_TIM_PWM_Start+0x58>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d010      	beq.n	8005cc6 <HAL_TIM_PWM_Start+0x42>
 8005ca4:	4a0e      	ldr	r2, [pc, #56]	; (8005ce0 <HAL_TIM_PWM_Start+0x5c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00d      	beq.n	8005cc6 <HAL_TIM_PWM_Start+0x42>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	490d      	ldr	r1, [pc, #52]	; (8005ce4 <HAL_TIM_PWM_Start+0x60>)
 8005cae:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb0:	2a06      	cmp	r2, #6
 8005cb2:	d006      	beq.n	8005cc2 <HAL_TIM_PWM_Start+0x3e>
 8005cb4:	3907      	subs	r1, #7
 8005cb6:	428a      	cmp	r2, r1
 8005cb8:	d003      	beq.n	8005cc2 <HAL_TIM_PWM_Start+0x3e>
    __HAL_TIM_ENABLE(htim);
 8005cba:	2201      	movs	r2, #1
 8005cbc:	6819      	ldr	r1, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	601a      	str	r2, [r3, #0]
}
 8005cc2:	2000      	movs	r0, #0
 8005cc4:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8005cc6:	2280      	movs	r2, #128	; 0x80
 8005cc8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005cca:	0212      	lsls	r2, r2, #8
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	645a      	str	r2, [r3, #68]	; 0x44
 8005cd0:	e7eb      	b.n	8005caa <HAL_TIM_PWM_Start+0x26>
 8005cd2:	46c0      	nop			; (mov r8, r8)
 8005cd4:	40012c00 	.word	0x40012c00
 8005cd8:	40014000 	.word	0x40014000
 8005cdc:	40014400 	.word	0x40014400
 8005ce0:	40014800 	.word	0x40014800
 8005ce4:	00010007 	.word	0x00010007

08005ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ce8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cea:	0004      	movs	r4, r0
 8005cec:	2202      	movs	r2, #2
 8005cee:	343c      	adds	r4, #60	; 0x3c
 8005cf0:	7825      	ldrb	r5, [r4, #0]
{
 8005cf2:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8005cf4:	0010      	movs	r0, r2
 8005cf6:	2d01      	cmp	r5, #1
 8005cf8:	d01a      	beq.n	8005d30 <HAL_TIMEx_MasterConfigSynchronization+0x48>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cfa:	001d      	movs	r5, r3
 8005cfc:	353d      	adds	r5, #61	; 0x3d
 8005cfe:	702a      	strb	r2, [r5, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d00:	4e0c      	ldr	r6, [pc, #48]	; (8005d34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
  tmpcr2 = htim->Instance->CR2;
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005d06:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d08:	42b2      	cmp	r2, r6
 8005d0a:	d103      	bne.n	8005d14 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d0c:	4e0a      	ldr	r6, [pc, #40]	; (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8005d0e:	4033      	ands	r3, r6
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d10:	684e      	ldr	r6, [r1, #4]
 8005d12:	4333      	orrs	r3, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d14:	2670      	movs	r6, #112	; 0x70
 8005d16:	43b3      	bics	r3, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d18:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d1a:	6889      	ldr	r1, [r1, #8]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d1c:	4333      	orrs	r3, r6
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005d1e:	2680      	movs	r6, #128	; 0x80
 8005d20:	43b0      	bics	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d22:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d24:	4301      	orrs	r1, r0

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d26:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8005d28:	2000      	movs	r0, #0
  htim->Instance->SMCR = tmpsmcr;
 8005d2a:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005d2c:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8005d2e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8005d30:	bd70      	pop	{r4, r5, r6, pc}
 8005d32:	46c0      	nop			; (mov r8, r8)
 8005d34:	40012c00 	.word	0x40012c00
 8005d38:	ff0fffff 	.word	0xff0fffff

08005d3c <HAL_TIMEx_CommutCallback>:
 8005d3c:	4770      	bx	lr

08005d3e <HAL_TIMEx_BreakCallback>:
 8005d3e:	4770      	bx	lr

08005d40 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d40:	4770      	bx	lr
	...

08005d44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d44:	b570      	push	{r4, r5, r6, lr}
 8005d46:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d48:	6902      	ldr	r2, [r0, #16]
 8005d4a:	6883      	ldr	r3, [r0, #8]
 8005d4c:	69c1      	ldr	r1, [r0, #28]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	6942      	ldr	r2, [r0, #20]
  tmpreg |= (uint32_t)huart->FifoMode;
 8005d52:	6e65      	ldr	r5, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d54:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d56:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d58:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d5a:	6810      	ldr	r0, [r2, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 8005d5c:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d5e:	4d9f      	ldr	r5, [pc, #636]	; (8005fdc <UART_SetConfig+0x298>)
 8005d60:	4028      	ands	r0, r5
 8005d62:	4303      	orrs	r3, r0
 8005d64:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d66:	6853      	ldr	r3, [r2, #4]
 8005d68:	489d      	ldr	r0, [pc, #628]	; (8005fe0 <UART_SetConfig+0x29c>)
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d6a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d6c:	4003      	ands	r3, r0
 8005d6e:	68e0      	ldr	r0, [r4, #12]
 8005d70:	4303      	orrs	r3, r0
 8005d72:	6053      	str	r3, [r2, #4]
    tmpreg |= huart->Init.OneBitSampling;
 8005d74:	69a3      	ldr	r3, [r4, #24]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d76:	6890      	ldr	r0, [r2, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8005d78:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d7a:	4d9a      	ldr	r5, [pc, #616]	; (8005fe4 <UART_SetConfig+0x2a0>)
 8005d7c:	4028      	ands	r0, r5

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d7e:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d80:	4303      	orrs	r3, r0
 8005d82:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d84:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8005d86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d88:	43a8      	bics	r0, r5
 8005d8a:	4318      	orrs	r0, r3
 8005d8c:	62d0      	str	r0, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d8e:	4896      	ldr	r0, [pc, #600]	; (8005fe8 <UART_SetConfig+0x2a4>)
 8005d90:	4282      	cmp	r2, r0
 8005d92:	d113      	bne.n	8005dbc <UART_SetConfig+0x78>
 8005d94:	2003      	movs	r0, #3
 8005d96:	4a95      	ldr	r2, [pc, #596]	; (8005fec <UART_SetConfig+0x2a8>)
 8005d98:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005d9a:	4002      	ands	r2, r0
 8005d9c:	4894      	ldr	r0, [pc, #592]	; (8005ff0 <UART_SetConfig+0x2ac>)
 8005d9e:	5c80      	ldrb	r0, [r0, r2]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005da0:	2280      	movs	r2, #128	; 0x80
 8005da2:	0212      	lsls	r2, r2, #8
 8005da4:	4291      	cmp	r1, r2
 8005da6:	d100      	bne.n	8005daa <UART_SetConfig+0x66>
 8005da8:	e1b7      	b.n	800611a <UART_SetConfig+0x3d6>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8005daa:	2808      	cmp	r0, #8
 8005dac:	d817      	bhi.n	8005dde <UART_SetConfig+0x9a>
 8005dae:	f7fa f9af 	bl	8000110 <__gnu_thumb1_case_uqi>
 8005db2:	1684      	.short	0x1684
 8005db4:	16f216be 	.word	0x16f216be
 8005db8:	1616      	.short	0x1616
 8005dba:	f5          	.byte	0xf5
 8005dbb:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dbc:	488d      	ldr	r0, [pc, #564]	; (8005ff4 <UART_SetConfig+0x2b0>)
 8005dbe:	4282      	cmp	r2, r0
 8005dc0:	d105      	bne.n	8005dce <UART_SetConfig+0x8a>
 8005dc2:	200c      	movs	r0, #12
 8005dc4:	4a89      	ldr	r2, [pc, #548]	; (8005fec <UART_SetConfig+0x2a8>)
 8005dc6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005dc8:	4002      	ands	r2, r0
 8005dca:	488b      	ldr	r0, [pc, #556]	; (8005ff8 <UART_SetConfig+0x2b4>)
 8005dcc:	e7e7      	b.n	8005d9e <UART_SetConfig+0x5a>
 8005dce:	4b8b      	ldr	r3, [pc, #556]	; (8005ffc <UART_SetConfig+0x2b8>)
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d100      	bne.n	8005dd6 <UART_SetConfig+0x92>
 8005dd4:	e150      	b.n	8006078 <UART_SetConfig+0x334>
 8005dd6:	4b8a      	ldr	r3, [pc, #552]	; (8006000 <UART_SetConfig+0x2bc>)
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d100      	bne.n	8005dde <UART_SetConfig+0x9a>
 8005ddc:	e14c      	b.n	8006078 <UART_SetConfig+0x334>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 8005dde:	2001      	movs	r0, #1
 8005de0:	e191      	b.n	8006106 <UART_SetConfig+0x3c2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d02f      	beq.n	8005e46 <UART_SetConfig+0x102>
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d019      	beq.n	8005e1e <UART_SetConfig+0xda>
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d019      	beq.n	8005e22 <UART_SetConfig+0xde>
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	d019      	beq.n	8005e26 <UART_SetConfig+0xe2>
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d019      	beq.n	8005e2a <UART_SetConfig+0xe6>
 8005df6:	2b05      	cmp	r3, #5
 8005df8:	d019      	beq.n	8005e2e <UART_SetConfig+0xea>
 8005dfa:	2b06      	cmp	r3, #6
 8005dfc:	d019      	beq.n	8005e32 <UART_SetConfig+0xee>
 8005dfe:	2b07      	cmp	r3, #7
 8005e00:	d019      	beq.n	8005e36 <UART_SetConfig+0xf2>
 8005e02:	2b08      	cmp	r3, #8
 8005e04:	d019      	beq.n	8005e3a <UART_SetConfig+0xf6>
 8005e06:	2b09      	cmp	r3, #9
 8005e08:	d019      	beq.n	8005e3e <UART_SetConfig+0xfa>
 8005e0a:	2b0a      	cmp	r3, #10
 8005e0c:	d019      	beq.n	8005e42 <UART_SetConfig+0xfe>
 8005e0e:	2b0b      	cmp	r3, #11
 8005e10:	d119      	bne.n	8005e46 <UART_SetConfig+0x102>
 8005e12:	487c      	ldr	r0, [pc, #496]	; (8006004 <UART_SetConfig+0x2c0>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e14:	6863      	ldr	r3, [r4, #4]
 8005e16:	6861      	ldr	r1, [r4, #4]
 8005e18:	085b      	lsrs	r3, r3, #1
 8005e1a:	1818      	adds	r0, r3, r0
 8005e1c:	e160      	b.n	80060e0 <UART_SetConfig+0x39c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e1e:	487a      	ldr	r0, [pc, #488]	; (8006008 <UART_SetConfig+0x2c4>)
 8005e20:	e7f8      	b.n	8005e14 <UART_SetConfig+0xd0>
 8005e22:	487a      	ldr	r0, [pc, #488]	; (800600c <UART_SetConfig+0x2c8>)
 8005e24:	e7f6      	b.n	8005e14 <UART_SetConfig+0xd0>
 8005e26:	487a      	ldr	r0, [pc, #488]	; (8006010 <UART_SetConfig+0x2cc>)
 8005e28:	e7f4      	b.n	8005e14 <UART_SetConfig+0xd0>
 8005e2a:	487a      	ldr	r0, [pc, #488]	; (8006014 <UART_SetConfig+0x2d0>)
 8005e2c:	e7f2      	b.n	8005e14 <UART_SetConfig+0xd0>
 8005e2e:	487a      	ldr	r0, [pc, #488]	; (8006018 <UART_SetConfig+0x2d4>)
 8005e30:	e7f0      	b.n	8005e14 <UART_SetConfig+0xd0>
 8005e32:	487a      	ldr	r0, [pc, #488]	; (800601c <UART_SetConfig+0x2d8>)
 8005e34:	e7ee      	b.n	8005e14 <UART_SetConfig+0xd0>
 8005e36:	487a      	ldr	r0, [pc, #488]	; (8006020 <UART_SetConfig+0x2dc>)
 8005e38:	e7ec      	b.n	8005e14 <UART_SetConfig+0xd0>
 8005e3a:	487a      	ldr	r0, [pc, #488]	; (8006024 <UART_SetConfig+0x2e0>)
 8005e3c:	e7ea      	b.n	8005e14 <UART_SetConfig+0xd0>
 8005e3e:	487a      	ldr	r0, [pc, #488]	; (8006028 <UART_SetConfig+0x2e4>)
 8005e40:	e7e8      	b.n	8005e14 <UART_SetConfig+0xd0>
 8005e42:	487a      	ldr	r0, [pc, #488]	; (800602c <UART_SetConfig+0x2e8>)
 8005e44:	e7e6      	b.n	8005e14 <UART_SetConfig+0xd0>
 8005e46:	487a      	ldr	r0, [pc, #488]	; (8006030 <UART_SetConfig+0x2ec>)
 8005e48:	e7e4      	b.n	8005e14 <UART_SetConfig+0xd0>
        pclk = HAL_RCC_GetSysClockFreq();
 8005e4a:	f7fe fc95 	bl	8004778 <HAL_RCC_GetSysClockFreq>
 8005e4e:	e11a      	b.n	8006086 <UART_SetConfig+0x342>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d018      	beq.n	8005e86 <UART_SetConfig+0x142>
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d019      	beq.n	8005e8c <UART_SetConfig+0x148>
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d01a      	beq.n	8005e92 <UART_SetConfig+0x14e>
 8005e5c:	2b03      	cmp	r3, #3
 8005e5e:	d01b      	beq.n	8005e98 <UART_SetConfig+0x154>
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d01b      	beq.n	8005e9c <UART_SetConfig+0x158>
 8005e64:	2b05      	cmp	r3, #5
 8005e66:	d01c      	beq.n	8005ea2 <UART_SetConfig+0x15e>
 8005e68:	2b06      	cmp	r3, #6
 8005e6a:	d01c      	beq.n	8005ea6 <UART_SetConfig+0x162>
 8005e6c:	2080      	movs	r0, #128	; 0x80
 8005e6e:	2b07      	cmp	r3, #7
 8005e70:	d01b      	beq.n	8005eaa <UART_SetConfig+0x166>
 8005e72:	2b08      	cmp	r3, #8
 8005e74:	d01b      	beq.n	8005eae <UART_SetConfig+0x16a>
 8005e76:	2b09      	cmp	r3, #9
 8005e78:	d01b      	beq.n	8005eb2 <UART_SetConfig+0x16e>
 8005e7a:	2b0a      	cmp	r3, #10
 8005e7c:	d01b      	beq.n	8005eb6 <UART_SetConfig+0x172>
 8005e7e:	2b0b      	cmp	r3, #11
 8005e80:	d102      	bne.n	8005e88 <UART_SetConfig+0x144>
 8005e82:	0040      	lsls	r0, r0, #1
 8005e84:	e7c6      	b.n	8005e14 <UART_SetConfig+0xd0>
 8005e86:	2080      	movs	r0, #128	; 0x80
 8005e88:	0240      	lsls	r0, r0, #9
 8005e8a:	e7c3      	b.n	8005e14 <UART_SetConfig+0xd0>
 8005e8c:	2080      	movs	r0, #128	; 0x80
 8005e8e:	0200      	lsls	r0, r0, #8
 8005e90:	e7c0      	b.n	8005e14 <UART_SetConfig+0xd0>
 8005e92:	2080      	movs	r0, #128	; 0x80
 8005e94:	01c0      	lsls	r0, r0, #7
 8005e96:	e7bd      	b.n	8005e14 <UART_SetConfig+0xd0>
 8005e98:	4866      	ldr	r0, [pc, #408]	; (8006034 <UART_SetConfig+0x2f0>)
 8005e9a:	e7bb      	b.n	8005e14 <UART_SetConfig+0xd0>
 8005e9c:	2080      	movs	r0, #128	; 0x80
 8005e9e:	0180      	lsls	r0, r0, #6
 8005ea0:	e7b8      	b.n	8005e14 <UART_SetConfig+0xd0>
 8005ea2:	4865      	ldr	r0, [pc, #404]	; (8006038 <UART_SetConfig+0x2f4>)
 8005ea4:	e7b6      	b.n	8005e14 <UART_SetConfig+0xd0>
 8005ea6:	4865      	ldr	r0, [pc, #404]	; (800603c <UART_SetConfig+0x2f8>)
 8005ea8:	e7b4      	b.n	8005e14 <UART_SetConfig+0xd0>
 8005eaa:	0140      	lsls	r0, r0, #5
 8005eac:	e7b2      	b.n	8005e14 <UART_SetConfig+0xd0>
 8005eae:	0100      	lsls	r0, r0, #4
 8005eb0:	e7b0      	b.n	8005e14 <UART_SetConfig+0xd0>
 8005eb2:	00c0      	lsls	r0, r0, #3
 8005eb4:	e7ae      	b.n	8005e14 <UART_SetConfig+0xd0>
 8005eb6:	0080      	lsls	r0, r0, #2
 8005eb8:	e7ac      	b.n	8005e14 <UART_SetConfig+0xd0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eba:	f7fe fd51 	bl	8004960 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d021      	beq.n	8005f0a <UART_SetConfig+0x1c6>
 8005ec6:	1849      	adds	r1, r1, r1
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d01e      	beq.n	8005f0a <UART_SetConfig+0x1c6>
 8005ecc:	3102      	adds	r1, #2
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d01b      	beq.n	8005f0a <UART_SetConfig+0x1c6>
 8005ed2:	3102      	adds	r1, #2
 8005ed4:	2b03      	cmp	r3, #3
 8005ed6:	d018      	beq.n	8005f0a <UART_SetConfig+0x1c6>
 8005ed8:	3102      	adds	r1, #2
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	d015      	beq.n	8005f0a <UART_SetConfig+0x1c6>
 8005ede:	3102      	adds	r1, #2
 8005ee0:	2b05      	cmp	r3, #5
 8005ee2:	d012      	beq.n	8005f0a <UART_SetConfig+0x1c6>
 8005ee4:	3102      	adds	r1, #2
 8005ee6:	2b06      	cmp	r3, #6
 8005ee8:	d00f      	beq.n	8005f0a <UART_SetConfig+0x1c6>
 8005eea:	3104      	adds	r1, #4
 8005eec:	2b07      	cmp	r3, #7
 8005eee:	d00c      	beq.n	8005f0a <UART_SetConfig+0x1c6>
 8005ef0:	3110      	adds	r1, #16
 8005ef2:	2b08      	cmp	r3, #8
 8005ef4:	d009      	beq.n	8005f0a <UART_SetConfig+0x1c6>
 8005ef6:	3120      	adds	r1, #32
 8005ef8:	2b09      	cmp	r3, #9
 8005efa:	d006      	beq.n	8005f0a <UART_SetConfig+0x1c6>
 8005efc:	3140      	adds	r1, #64	; 0x40
 8005efe:	2b0a      	cmp	r3, #10
 8005f00:	d003      	beq.n	8005f0a <UART_SetConfig+0x1c6>
 8005f02:	397f      	subs	r1, #127	; 0x7f
 8005f04:	2b0b      	cmp	r3, #11
 8005f06:	d100      	bne.n	8005f0a <UART_SetConfig+0x1c6>
 8005f08:	31ff      	adds	r1, #255	; 0xff
 8005f0a:	6865      	ldr	r5, [r4, #4]
 8005f0c:	f7fa f91e 	bl	800014c <__udivsi3>
 8005f10:	0029      	movs	r1, r5
 8005f12:	086b      	lsrs	r3, r5, #1
 8005f14:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f16:	f7fa f919 	bl	800014c <__udivsi3>
 8005f1a:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f1c:	0003      	movs	r3, r0
 8005f1e:	4a48      	ldr	r2, [pc, #288]	; (8006040 <UART_SetConfig+0x2fc>)
 8005f20:	3b10      	subs	r3, #16
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d900      	bls.n	8005f28 <UART_SetConfig+0x1e4>
 8005f26:	e75a      	b.n	8005dde <UART_SetConfig+0x9a>
      huart->Instance->BRR = usartdiv;
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	60d8      	str	r0, [r3, #12]
 8005f2c:	e0ea      	b.n	8006104 <UART_SetConfig+0x3c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d02f      	beq.n	8005f92 <UART_SetConfig+0x24e>
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d019      	beq.n	8005f6a <UART_SetConfig+0x226>
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d019      	beq.n	8005f6e <UART_SetConfig+0x22a>
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	d019      	beq.n	8005f72 <UART_SetConfig+0x22e>
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d019      	beq.n	8005f76 <UART_SetConfig+0x232>
 8005f42:	2b05      	cmp	r3, #5
 8005f44:	d019      	beq.n	8005f7a <UART_SetConfig+0x236>
 8005f46:	2b06      	cmp	r3, #6
 8005f48:	d019      	beq.n	8005f7e <UART_SetConfig+0x23a>
 8005f4a:	2b07      	cmp	r3, #7
 8005f4c:	d019      	beq.n	8005f82 <UART_SetConfig+0x23e>
 8005f4e:	2b08      	cmp	r3, #8
 8005f50:	d019      	beq.n	8005f86 <UART_SetConfig+0x242>
 8005f52:	2b09      	cmp	r3, #9
 8005f54:	d019      	beq.n	8005f8a <UART_SetConfig+0x246>
 8005f56:	2b0a      	cmp	r3, #10
 8005f58:	d019      	beq.n	8005f8e <UART_SetConfig+0x24a>
 8005f5a:	2b0b      	cmp	r3, #11
 8005f5c:	d119      	bne.n	8005f92 <UART_SetConfig+0x24e>
 8005f5e:	4839      	ldr	r0, [pc, #228]	; (8006044 <UART_SetConfig+0x300>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f60:	6863      	ldr	r3, [r4, #4]
 8005f62:	6861      	ldr	r1, [r4, #4]
 8005f64:	085b      	lsrs	r3, r3, #1
 8005f66:	1818      	adds	r0, r3, r0
 8005f68:	e7d5      	b.n	8005f16 <UART_SetConfig+0x1d2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f6a:	4828      	ldr	r0, [pc, #160]	; (800600c <UART_SetConfig+0x2c8>)
 8005f6c:	e7f8      	b.n	8005f60 <UART_SetConfig+0x21c>
 8005f6e:	4829      	ldr	r0, [pc, #164]	; (8006014 <UART_SetConfig+0x2d0>)
 8005f70:	e7f6      	b.n	8005f60 <UART_SetConfig+0x21c>
 8005f72:	482a      	ldr	r0, [pc, #168]	; (800601c <UART_SetConfig+0x2d8>)
 8005f74:	e7f4      	b.n	8005f60 <UART_SetConfig+0x21c>
 8005f76:	482a      	ldr	r0, [pc, #168]	; (8006020 <UART_SetConfig+0x2dc>)
 8005f78:	e7f2      	b.n	8005f60 <UART_SetConfig+0x21c>
 8005f7a:	4833      	ldr	r0, [pc, #204]	; (8006048 <UART_SetConfig+0x304>)
 8005f7c:	e7f0      	b.n	8005f60 <UART_SetConfig+0x21c>
 8005f7e:	4833      	ldr	r0, [pc, #204]	; (800604c <UART_SetConfig+0x308>)
 8005f80:	e7ee      	b.n	8005f60 <UART_SetConfig+0x21c>
 8005f82:	4828      	ldr	r0, [pc, #160]	; (8006024 <UART_SetConfig+0x2e0>)
 8005f84:	e7ec      	b.n	8005f60 <UART_SetConfig+0x21c>
 8005f86:	4828      	ldr	r0, [pc, #160]	; (8006028 <UART_SetConfig+0x2e4>)
 8005f88:	e7ea      	b.n	8005f60 <UART_SetConfig+0x21c>
 8005f8a:	4828      	ldr	r0, [pc, #160]	; (800602c <UART_SetConfig+0x2e8>)
 8005f8c:	e7e8      	b.n	8005f60 <UART_SetConfig+0x21c>
 8005f8e:	481d      	ldr	r0, [pc, #116]	; (8006004 <UART_SetConfig+0x2c0>)
 8005f90:	e7e6      	b.n	8005f60 <UART_SetConfig+0x21c>
 8005f92:	481d      	ldr	r0, [pc, #116]	; (8006008 <UART_SetConfig+0x2c4>)
 8005f94:	e7e4      	b.n	8005f60 <UART_SetConfig+0x21c>
        pclk = HAL_RCC_GetSysClockFreq();
 8005f96:	f7fe fbef 	bl	8004778 <HAL_RCC_GetSysClockFreq>
 8005f9a:	e790      	b.n	8005ebe <UART_SetConfig+0x17a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d018      	beq.n	8005fd2 <UART_SetConfig+0x28e>
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d018      	beq.n	8005fd6 <UART_SetConfig+0x292>
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d053      	beq.n	8006050 <UART_SetConfig+0x30c>
 8005fa8:	2b03      	cmp	r3, #3
 8005faa:	d054      	beq.n	8006056 <UART_SetConfig+0x312>
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	d054      	beq.n	800605a <UART_SetConfig+0x316>
 8005fb0:	2b05      	cmp	r3, #5
 8005fb2:	d055      	beq.n	8006060 <UART_SetConfig+0x31c>
 8005fb4:	2b06      	cmp	r3, #6
 8005fb6:	d055      	beq.n	8006064 <UART_SetConfig+0x320>
 8005fb8:	2080      	movs	r0, #128	; 0x80
 8005fba:	2b07      	cmp	r3, #7
 8005fbc:	d054      	beq.n	8006068 <UART_SetConfig+0x324>
 8005fbe:	2b08      	cmp	r3, #8
 8005fc0:	d054      	beq.n	800606c <UART_SetConfig+0x328>
 8005fc2:	2b09      	cmp	r3, #9
 8005fc4:	d054      	beq.n	8006070 <UART_SetConfig+0x32c>
 8005fc6:	2b0a      	cmp	r3, #10
 8005fc8:	d054      	beq.n	8006074 <UART_SetConfig+0x330>
 8005fca:	2b0b      	cmp	r3, #11
 8005fcc:	d0c8      	beq.n	8005f60 <UART_SetConfig+0x21c>
 8005fce:	0200      	lsls	r0, r0, #8
 8005fd0:	e7c6      	b.n	8005f60 <UART_SetConfig+0x21c>
 8005fd2:	2080      	movs	r0, #128	; 0x80
 8005fd4:	e7fb      	b.n	8005fce <UART_SetConfig+0x28a>
 8005fd6:	2080      	movs	r0, #128	; 0x80
 8005fd8:	01c0      	lsls	r0, r0, #7
 8005fda:	e7c1      	b.n	8005f60 <UART_SetConfig+0x21c>
 8005fdc:	cfff69f3 	.word	0xcfff69f3
 8005fe0:	ffffcfff 	.word	0xffffcfff
 8005fe4:	11fff4ff 	.word	0x11fff4ff
 8005fe8:	40013800 	.word	0x40013800
 8005fec:	40021000 	.word	0x40021000
 8005ff0:	08009854 	.word	0x08009854
 8005ff4:	40004400 	.word	0x40004400
 8005ff8:	08009858 	.word	0x08009858
 8005ffc:	40004800 	.word	0x40004800
 8006000:	40004c00 	.word	0x40004c00
 8006004:	0001e848 	.word	0x0001e848
 8006008:	00f42400 	.word	0x00f42400
 800600c:	007a1200 	.word	0x007a1200
 8006010:	00516154 	.word	0x00516154
 8006014:	003d0900 	.word	0x003d0900
 8006018:	0030d400 	.word	0x0030d400
 800601c:	0028b0aa 	.word	0x0028b0aa
 8006020:	001e8480 	.word	0x001e8480
 8006024:	000f4240 	.word	0x000f4240
 8006028:	0007a120 	.word	0x0007a120
 800602c:	0003d090 	.word	0x0003d090
 8006030:	01e84800 	.word	0x01e84800
 8006034:	00002aaa 	.word	0x00002aaa
 8006038:	00001998 	.word	0x00001998
 800603c:	00001554 	.word	0x00001554
 8006040:	0000ffef 	.word	0x0000ffef
 8006044:	0000f424 	.word	0x0000f424
 8006048:	00186a00 	.word	0x00186a00
 800604c:	00145855 	.word	0x00145855
 8006050:	2080      	movs	r0, #128	; 0x80
 8006052:	0180      	lsls	r0, r0, #6
 8006054:	e784      	b.n	8005f60 <UART_SetConfig+0x21c>
 8006056:	4838      	ldr	r0, [pc, #224]	; (8006138 <UART_SetConfig+0x3f4>)
 8006058:	e782      	b.n	8005f60 <UART_SetConfig+0x21c>
 800605a:	2080      	movs	r0, #128	; 0x80
 800605c:	0140      	lsls	r0, r0, #5
 800605e:	e77f      	b.n	8005f60 <UART_SetConfig+0x21c>
 8006060:	4836      	ldr	r0, [pc, #216]	; (800613c <UART_SetConfig+0x3f8>)
 8006062:	e77d      	b.n	8005f60 <UART_SetConfig+0x21c>
 8006064:	4836      	ldr	r0, [pc, #216]	; (8006140 <UART_SetConfig+0x3fc>)
 8006066:	e77b      	b.n	8005f60 <UART_SetConfig+0x21c>
 8006068:	0100      	lsls	r0, r0, #4
 800606a:	e779      	b.n	8005f60 <UART_SetConfig+0x21c>
 800606c:	00c0      	lsls	r0, r0, #3
 800606e:	e777      	b.n	8005f60 <UART_SetConfig+0x21c>
 8006070:	0080      	lsls	r0, r0, #2
 8006072:	e775      	b.n	8005f60 <UART_SetConfig+0x21c>
 8006074:	0040      	lsls	r0, r0, #1
 8006076:	e773      	b.n	8005f60 <UART_SetConfig+0x21c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006078:	2380      	movs	r3, #128	; 0x80
 800607a:	021b      	lsls	r3, r3, #8
 800607c:	4299      	cmp	r1, r3
 800607e:	d000      	beq.n	8006082 <UART_SetConfig+0x33e>
 8006080:	e71b      	b.n	8005eba <UART_SetConfig+0x176>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006082:	f7fe fc6d 	bl	8004960 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006088:	2101      	movs	r1, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d021      	beq.n	80060d2 <UART_SetConfig+0x38e>
 800608e:	1849      	adds	r1, r1, r1
 8006090:	2b01      	cmp	r3, #1
 8006092:	d01e      	beq.n	80060d2 <UART_SetConfig+0x38e>
 8006094:	3102      	adds	r1, #2
 8006096:	2b02      	cmp	r3, #2
 8006098:	d01b      	beq.n	80060d2 <UART_SetConfig+0x38e>
 800609a:	3102      	adds	r1, #2
 800609c:	2b03      	cmp	r3, #3
 800609e:	d018      	beq.n	80060d2 <UART_SetConfig+0x38e>
 80060a0:	3102      	adds	r1, #2
 80060a2:	2b04      	cmp	r3, #4
 80060a4:	d015      	beq.n	80060d2 <UART_SetConfig+0x38e>
 80060a6:	3102      	adds	r1, #2
 80060a8:	2b05      	cmp	r3, #5
 80060aa:	d012      	beq.n	80060d2 <UART_SetConfig+0x38e>
 80060ac:	3102      	adds	r1, #2
 80060ae:	2b06      	cmp	r3, #6
 80060b0:	d00f      	beq.n	80060d2 <UART_SetConfig+0x38e>
 80060b2:	3104      	adds	r1, #4
 80060b4:	2b07      	cmp	r3, #7
 80060b6:	d00c      	beq.n	80060d2 <UART_SetConfig+0x38e>
 80060b8:	3110      	adds	r1, #16
 80060ba:	2b08      	cmp	r3, #8
 80060bc:	d009      	beq.n	80060d2 <UART_SetConfig+0x38e>
 80060be:	3120      	adds	r1, #32
 80060c0:	2b09      	cmp	r3, #9
 80060c2:	d006      	beq.n	80060d2 <UART_SetConfig+0x38e>
 80060c4:	3140      	adds	r1, #64	; 0x40
 80060c6:	2b0a      	cmp	r3, #10
 80060c8:	d003      	beq.n	80060d2 <UART_SetConfig+0x38e>
 80060ca:	397f      	subs	r1, #127	; 0x7f
 80060cc:	2b0b      	cmp	r3, #11
 80060ce:	d100      	bne.n	80060d2 <UART_SetConfig+0x38e>
 80060d0:	31ff      	adds	r1, #255	; 0xff
 80060d2:	f7fa f83b 	bl	800014c <__udivsi3>
 80060d6:	6865      	ldr	r5, [r4, #4]
 80060d8:	0040      	lsls	r0, r0, #1
 80060da:	0029      	movs	r1, r5
 80060dc:	086b      	lsrs	r3, r5, #1
 80060de:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060e0:	f7fa f834 	bl	800014c <__udivsi3>
 80060e4:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060e6:	0003      	movs	r3, r0
 80060e8:	4a16      	ldr	r2, [pc, #88]	; (8006144 <UART_SetConfig+0x400>)
 80060ea:	3b10      	subs	r3, #16
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d900      	bls.n	80060f2 <UART_SetConfig+0x3ae>
 80060f0:	e675      	b.n	8005dde <UART_SetConfig+0x9a>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060f2:	230f      	movs	r3, #15
 80060f4:	0002      	movs	r2, r0
 80060f6:	439a      	bics	r2, r3
 80060f8:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060fa:	0700      	lsls	r0, r0, #28
      huart->Instance->BRR = brrtemp;
 80060fc:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060fe:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 8006100:	4318      	orrs	r0, r3
 8006102:	60d0      	str	r0, [r2, #12]
 8006104:	2000      	movs	r0, #0
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006106:	0022      	movs	r2, r4
 8006108:	2301      	movs	r3, #1
 800610a:	326a      	adds	r2, #106	; 0x6a
 800610c:	8013      	strh	r3, [r2, #0]
  huart->NbRxDataToProcess = 1;
 800610e:	3a02      	subs	r2, #2
 8006110:	8013      	strh	r3, [r2, #0]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006112:	2300      	movs	r3, #0
 8006114:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8006116:	6723      	str	r3, [r4, #112]	; 0x70

  return ret;
}
 8006118:	bd70      	pop	{r4, r5, r6, pc}
    switch (clocksource)
 800611a:	2808      	cmp	r0, #8
 800611c:	d900      	bls.n	8006120 <UART_SetConfig+0x3dc>
 800611e:	e65e      	b.n	8005dde <UART_SetConfig+0x9a>
 8006120:	f7fa f800 	bl	8000124 <__gnu_thumb1_case_shi>
 8006124:	fe5dffaf 	.word	0xfe5dffaf
 8006128:	fe5dfe5f 	.word	0xfe5dfe5f
 800612c:	fe5dfe93 	.word	0xfe5dfe93
 8006130:	fe5dfe5d 	.word	0xfe5dfe5d
 8006134:	fe96      	.short	0xfe96
 8006136:	46c0      	nop			; (mov r8, r8)
 8006138:	00001555 	.word	0x00001555
 800613c:	00000ccc 	.word	0x00000ccc
 8006140:	00000aaa 	.word	0x00000aaa
 8006144:	0000ffef 	.word	0x0000ffef

08006148 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006148:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 800614a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800614c:	07da      	lsls	r2, r3, #31
 800614e:	d506      	bpl.n	800615e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006150:	6801      	ldr	r1, [r0, #0]
 8006152:	4c28      	ldr	r4, [pc, #160]	; (80061f4 <UART_AdvFeatureConfig+0xac>)
 8006154:	684a      	ldr	r2, [r1, #4]
 8006156:	4022      	ands	r2, r4
 8006158:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800615a:	4322      	orrs	r2, r4
 800615c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800615e:	079a      	lsls	r2, r3, #30
 8006160:	d506      	bpl.n	8006170 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006162:	6801      	ldr	r1, [r0, #0]
 8006164:	4c24      	ldr	r4, [pc, #144]	; (80061f8 <UART_AdvFeatureConfig+0xb0>)
 8006166:	684a      	ldr	r2, [r1, #4]
 8006168:	4022      	ands	r2, r4
 800616a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800616c:	4322      	orrs	r2, r4
 800616e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006170:	075a      	lsls	r2, r3, #29
 8006172:	d506      	bpl.n	8006182 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006174:	6801      	ldr	r1, [r0, #0]
 8006176:	4c21      	ldr	r4, [pc, #132]	; (80061fc <UART_AdvFeatureConfig+0xb4>)
 8006178:	684a      	ldr	r2, [r1, #4]
 800617a:	4022      	ands	r2, r4
 800617c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800617e:	4322      	orrs	r2, r4
 8006180:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006182:	071a      	lsls	r2, r3, #28
 8006184:	d506      	bpl.n	8006194 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006186:	6801      	ldr	r1, [r0, #0]
 8006188:	4c1d      	ldr	r4, [pc, #116]	; (8006200 <UART_AdvFeatureConfig+0xb8>)
 800618a:	684a      	ldr	r2, [r1, #4]
 800618c:	4022      	ands	r2, r4
 800618e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006190:	4322      	orrs	r2, r4
 8006192:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006194:	06da      	lsls	r2, r3, #27
 8006196:	d506      	bpl.n	80061a6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006198:	6801      	ldr	r1, [r0, #0]
 800619a:	4c1a      	ldr	r4, [pc, #104]	; (8006204 <UART_AdvFeatureConfig+0xbc>)
 800619c:	688a      	ldr	r2, [r1, #8]
 800619e:	4022      	ands	r2, r4
 80061a0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80061a2:	4322      	orrs	r2, r4
 80061a4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061a6:	069a      	lsls	r2, r3, #26
 80061a8:	d506      	bpl.n	80061b8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061aa:	6801      	ldr	r1, [r0, #0]
 80061ac:	4c16      	ldr	r4, [pc, #88]	; (8006208 <UART_AdvFeatureConfig+0xc0>)
 80061ae:	688a      	ldr	r2, [r1, #8]
 80061b0:	4022      	ands	r2, r4
 80061b2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80061b4:	4322      	orrs	r2, r4
 80061b6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061b8:	065a      	lsls	r2, r3, #25
 80061ba:	d510      	bpl.n	80061de <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061bc:	6801      	ldr	r1, [r0, #0]
 80061be:	4d13      	ldr	r5, [pc, #76]	; (800620c <UART_AdvFeatureConfig+0xc4>)
 80061c0:	684a      	ldr	r2, [r1, #4]
 80061c2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80061c4:	402a      	ands	r2, r5
 80061c6:	4322      	orrs	r2, r4
 80061c8:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061ca:	2280      	movs	r2, #128	; 0x80
 80061cc:	0352      	lsls	r2, r2, #13
 80061ce:	4294      	cmp	r4, r2
 80061d0:	d105      	bne.n	80061de <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061d2:	684a      	ldr	r2, [r1, #4]
 80061d4:	4c0e      	ldr	r4, [pc, #56]	; (8006210 <UART_AdvFeatureConfig+0xc8>)
 80061d6:	4022      	ands	r2, r4
 80061d8:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80061da:	4322      	orrs	r2, r4
 80061dc:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061de:	061b      	lsls	r3, r3, #24
 80061e0:	d506      	bpl.n	80061f0 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061e2:	6802      	ldr	r2, [r0, #0]
 80061e4:	490b      	ldr	r1, [pc, #44]	; (8006214 <UART_AdvFeatureConfig+0xcc>)
 80061e6:	6853      	ldr	r3, [r2, #4]
 80061e8:	400b      	ands	r3, r1
 80061ea:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80061ec:	430b      	orrs	r3, r1
 80061ee:	6053      	str	r3, [r2, #4]
  }
}
 80061f0:	bd30      	pop	{r4, r5, pc}
 80061f2:	46c0      	nop			; (mov r8, r8)
 80061f4:	fffdffff 	.word	0xfffdffff
 80061f8:	fffeffff 	.word	0xfffeffff
 80061fc:	fffbffff 	.word	0xfffbffff
 8006200:	ffff7fff 	.word	0xffff7fff
 8006204:	ffffefff 	.word	0xffffefff
 8006208:	ffffdfff 	.word	0xffffdfff
 800620c:	ffefffff 	.word	0xffefffff
 8006210:	ff9fffff 	.word	0xff9fffff
 8006214:	fff7ffff 	.word	0xfff7ffff

08006218 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621a:	0004      	movs	r4, r0
 800621c:	000e      	movs	r6, r1
 800621e:	0015      	movs	r5, r2
 8006220:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006222:	6822      	ldr	r2, [r4, #0]
 8006224:	69d3      	ldr	r3, [r2, #28]
 8006226:	4033      	ands	r3, r6
 8006228:	1b9b      	subs	r3, r3, r6
 800622a:	4259      	negs	r1, r3
 800622c:	414b      	adcs	r3, r1
 800622e:	42ab      	cmp	r3, r5
 8006230:	d001      	beq.n	8006236 <UART_WaitOnFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8006232:	2000      	movs	r0, #0
 8006234:	e01e      	b.n	8006274 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8006236:	9b06      	ldr	r3, [sp, #24]
 8006238:	3301      	adds	r3, #1
 800623a:	d0f3      	beq.n	8006224 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800623c:	f7fd fbda 	bl	80039f4 <HAL_GetTick>
 8006240:	9b06      	ldr	r3, [sp, #24]
 8006242:	1bc0      	subs	r0, r0, r7
 8006244:	4283      	cmp	r3, r0
 8006246:	d301      	bcc.n	800624c <UART_WaitOnFlagUntilTimeout+0x34>
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1ea      	bne.n	8006222 <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800624c:	0022      	movs	r2, r4
 800624e:	ca08      	ldmia	r2!, {r3}
 8006250:	4809      	ldr	r0, [pc, #36]	; (8006278 <UART_WaitOnFlagUntilTimeout+0x60>)
 8006252:	6819      	ldr	r1, [r3, #0]
 8006254:	4001      	ands	r1, r0
 8006256:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006258:	6899      	ldr	r1, [r3, #8]
 800625a:	30a3      	adds	r0, #163	; 0xa3
 800625c:	30ff      	adds	r0, #255	; 0xff
 800625e:	4381      	bics	r1, r0
 8006260:	6099      	str	r1, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006262:	2320      	movs	r3, #32
 8006264:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006266:	0022      	movs	r2, r4
 8006268:	3208      	adds	r2, #8
 800626a:	67d3      	str	r3, [r2, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 800626c:	2300      	movs	r3, #0
 800626e:	347c      	adds	r4, #124	; 0x7c
 8006270:	7023      	strb	r3, [r4, #0]
 8006272:	3002      	adds	r0, #2
}
 8006274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006276:	46c0      	nop			; (mov r8, r8)
 8006278:	fffffe5f 	.word	0xfffffe5f

0800627c <HAL_UART_Transmit>:
{
 800627c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800627e:	1d07      	adds	r7, r0, #4
{
 8006280:	b087      	sub	sp, #28
 8006282:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8006284:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
{
 8006286:	0004      	movs	r4, r0
 8006288:	000d      	movs	r5, r1
 800628a:	0016      	movs	r6, r2
    return HAL_BUSY;
 800628c:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800628e:	2b20      	cmp	r3, #32
 8006290:	d14a      	bne.n	8006328 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 8006292:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8006294:	2900      	cmp	r1, #0
 8006296:	d047      	beq.n	8006328 <HAL_UART_Transmit+0xac>
 8006298:	2a00      	cmp	r2, #0
 800629a:	d045      	beq.n	8006328 <HAL_UART_Transmit+0xac>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800629c:	2380      	movs	r3, #128	; 0x80
 800629e:	68a2      	ldr	r2, [r4, #8]
 80062a0:	015b      	lsls	r3, r3, #5
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d104      	bne.n	80062b0 <HAL_UART_Transmit+0x34>
 80062a6:	6923      	ldr	r3, [r4, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <HAL_UART_Transmit+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 80062ac:	4201      	tst	r1, r0
 80062ae:	d13b      	bne.n	8006328 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80062b0:	0023      	movs	r3, r4
 80062b2:	337c      	adds	r3, #124	; 0x7c
 80062b4:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80062b6:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80062b8:	2a01      	cmp	r2, #1
 80062ba:	d035      	beq.n	8006328 <HAL_UART_Transmit+0xac>
 80062bc:	2201      	movs	r2, #1
 80062be:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c0:	2200      	movs	r2, #0
 80062c2:	60da      	str	r2, [r3, #12]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062c4:	2321      	movs	r3, #33	; 0x21
 80062c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    tickstart = HAL_GetTick();
 80062c8:	f7fd fb94 	bl	80039f4 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80062cc:	0023      	movs	r3, r4
 80062ce:	3354      	adds	r3, #84	; 0x54
 80062d0:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 80062d2:	3302      	adds	r3, #2
 80062d4:	801e      	strh	r6, [r3, #0]
 80062d6:	9303      	str	r3, [sp, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062d8:	2380      	movs	r3, #128	; 0x80
 80062da:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80062dc:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062de:	015b      	lsls	r3, r3, #5
      pdata16bits = NULL;
 80062e0:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d104      	bne.n	80062f0 <HAL_UART_Transmit+0x74>
 80062e6:	6923      	ldr	r3, [r4, #16]
 80062e8:	42b3      	cmp	r3, r6
 80062ea:	d101      	bne.n	80062f0 <HAL_UART_Transmit+0x74>
 80062ec:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80062ee:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 80062f0:	0023      	movs	r3, r4
 80062f2:	3356      	adds	r3, #86	; 0x56
 80062f4:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062f6:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 80062f8:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 80062fe:	2a00      	cmp	r2, #0
 8006300:	d10a      	bne.n	8006318 <HAL_UART_Transmit+0x9c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006302:	2140      	movs	r1, #64	; 0x40
 8006304:	0020      	movs	r0, r4
 8006306:	f7ff ff87 	bl	8006218 <UART_WaitOnFlagUntilTimeout>
 800630a:	2800      	cmp	r0, #0
 800630c:	d10b      	bne.n	8006326 <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_READY;
 800630e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8006310:	347c      	adds	r4, #124	; 0x7c
    huart->gState = HAL_UART_STATE_READY;
 8006312:	67fb      	str	r3, [r7, #124]	; 0x7c
    __HAL_UNLOCK(huart);
 8006314:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8006316:	e007      	b.n	8006328 <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006318:	2200      	movs	r2, #0
 800631a:	2180      	movs	r1, #128	; 0x80
 800631c:	0020      	movs	r0, r4
 800631e:	f7ff ff7b 	bl	8006218 <UART_WaitOnFlagUntilTimeout>
 8006322:	2800      	cmp	r0, #0
 8006324:	d002      	beq.n	800632c <HAL_UART_Transmit+0xb0>
        return HAL_TIMEOUT;
 8006326:	2003      	movs	r0, #3
}
 8006328:	b007      	add	sp, #28
 800632a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800632c:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800632e:	2d00      	cmp	r5, #0
 8006330:	d10b      	bne.n	800634a <HAL_UART_Transmit+0xce>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006332:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8006334:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006336:	05db      	lsls	r3, r3, #23
 8006338:	0ddb      	lsrs	r3, r3, #23
 800633a:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800633c:	9b03      	ldr	r3, [sp, #12]
 800633e:	9a03      	ldr	r2, [sp, #12]
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	3b01      	subs	r3, #1
 8006344:	b29b      	uxth	r3, r3
 8006346:	8013      	strh	r3, [r2, #0]
 8006348:	e7d2      	b.n	80062f0 <HAL_UART_Transmit+0x74>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800634a:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 800634c:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800634e:	6293      	str	r3, [r2, #40]	; 0x28
 8006350:	e7f4      	b.n	800633c <HAL_UART_Transmit+0xc0>
	...

08006354 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006354:	0003      	movs	r3, r0
{
 8006356:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006358:	2600      	movs	r6, #0
{
 800635a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800635c:	3388      	adds	r3, #136	; 0x88
 800635e:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8006360:	f7fd fb48 	bl	80039f4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006364:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8006366:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	071b      	lsls	r3, r3, #28
 800636c:	d417      	bmi.n	800639e <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	075b      	lsls	r3, r3, #29
 8006374:	d50a      	bpl.n	800638c <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006376:	2180      	movs	r1, #128	; 0x80
 8006378:	4b0f      	ldr	r3, [pc, #60]	; (80063b8 <UART_CheckIdleState+0x64>)
 800637a:	2200      	movs	r2, #0
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	03c9      	lsls	r1, r1, #15
 8006380:	002b      	movs	r3, r5
 8006382:	0020      	movs	r0, r4
 8006384:	f7ff ff48 	bl	8006218 <UART_WaitOnFlagUntilTimeout>
 8006388:	2800      	cmp	r0, #0
 800638a:	d113      	bne.n	80063b4 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 800638c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800638e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8006390:	1d22      	adds	r2, r4, #4
 8006392:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8006394:	347c      	adds	r4, #124	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006396:	3204      	adds	r2, #4
 8006398:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800639a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800639c:	e00b      	b.n	80063b6 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800639e:	2180      	movs	r1, #128	; 0x80
 80063a0:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <UART_CheckIdleState+0x64>)
 80063a2:	0032      	movs	r2, r6
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	0389      	lsls	r1, r1, #14
 80063a8:	0003      	movs	r3, r0
 80063aa:	0020      	movs	r0, r4
 80063ac:	f7ff ff34 	bl	8006218 <UART_WaitOnFlagUntilTimeout>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	d0dc      	beq.n	800636e <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80063b4:	2003      	movs	r0, #3
}
 80063b6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80063b8:	01ffffff 	.word	0x01ffffff

080063bc <HAL_UART_Init>:
{
 80063bc:	b570      	push	{r4, r5, r6, lr}
 80063be:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80063c0:	d101      	bne.n	80063c6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80063c2:	2001      	movs	r0, #1
}
 80063c4:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80063c6:	1d05      	adds	r5, r0, #4
 80063c8:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d104      	bne.n	80063d8 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 80063ce:	0002      	movs	r2, r0
 80063d0:	327c      	adds	r2, #124	; 0x7c
 80063d2:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80063d4:	f7fd f948 	bl	8003668 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80063d8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80063da:	2101      	movs	r1, #1
 80063dc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80063de:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80063e0:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063e2:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80063e4:	438b      	bics	r3, r1
 80063e6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063e8:	f7ff fcac 	bl	8005d44 <UART_SetConfig>
 80063ec:	2801      	cmp	r0, #1
 80063ee:	d0e8      	beq.n	80063c2 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <HAL_UART_Init+0x40>
    UART_AdvFeatureConfig(huart);
 80063f6:	0020      	movs	r0, r4
 80063f8:	f7ff fea6 	bl	8006148 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063fc:	6823      	ldr	r3, [r4, #0]
 80063fe:	4908      	ldr	r1, [pc, #32]	; (8006420 <HAL_UART_Init+0x64>)
 8006400:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8006402:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006404:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006406:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006408:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	438a      	bics	r2, r1
 800640e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006410:	2201      	movs	r2, #1
 8006412:	6819      	ldr	r1, [r3, #0]
 8006414:	430a      	orrs	r2, r1
 8006416:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8006418:	f7ff ff9c 	bl	8006354 <UART_CheckIdleState>
 800641c:	e7d2      	b.n	80063c4 <HAL_UART_Init+0x8>
 800641e:	46c0      	nop			; (mov r8, r8)
 8006420:	ffffb7ff 	.word	0xffffb7ff

08006424 <UARTEx_SetNbDataToProcess>:
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006424:	2301      	movs	r3, #1
{
 8006426:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006428:	b087      	sub	sp, #28
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800642a:	aa02      	add	r2, sp, #8
 800642c:	7013      	strb	r3, [r2, #0]
 800642e:	7053      	strb	r3, [r2, #1]
 8006430:	7093      	strb	r3, [r2, #2]
 8006432:	2203      	movs	r2, #3
 8006434:	a902      	add	r1, sp, #8
 8006436:	70ca      	strb	r2, [r1, #3]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006438:	2502      	movs	r5, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800643a:	2200      	movs	r2, #0
 800643c:	2607      	movs	r6, #7
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800643e:	ac04      	add	r4, sp, #16
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006440:	718a      	strb	r2, [r1, #6]
 8006442:	71ca      	strb	r2, [r1, #7]
 8006444:	710e      	strb	r6, [r1, #4]
 8006446:	714b      	strb	r3, [r1, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006448:	70a5      	strb	r5, [r4, #2]
 800644a:	2104      	movs	r1, #4
 800644c:	0007      	movs	r7, r0
 800644e:	0005      	movs	r5, r0
 8006450:	3208      	adds	r2, #8
 8006452:	7022      	strb	r2, [r4, #0]
 8006454:	7122      	strb	r2, [r4, #4]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006456:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006458:	7061      	strb	r1, [r4, #1]
 800645a:	70e1      	strb	r1, [r4, #3]
 800645c:	7163      	strb	r3, [r4, #5]
 800645e:	71a3      	strb	r3, [r4, #6]
 8006460:	71e3      	strb	r3, [r4, #7]
 8006462:	376a      	adds	r7, #106	; 0x6a
 8006464:	3568      	adds	r5, #104	; 0x68
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006466:	2a00      	cmp	r2, #0
 8006468:	d103      	bne.n	8006472 <UARTEx_SetNbDataToProcess+0x4e>
  {
    huart->NbTxDataToProcess = 1U;
 800646a:	803b      	strh	r3, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 800646c:	802b      	strh	r3, [r5, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800646e:	b007      	add	sp, #28
 8006470:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006472:	6803      	ldr	r3, [r0, #0]
 8006474:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006476:	689b      	ldr	r3, [r3, #8]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006478:	9201      	str	r2, [sp, #4]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800647a:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800647c:	aa02      	add	r2, sp, #8
 800647e:	5cd0      	ldrb	r0, [r2, r3]
 8006480:	5ce1      	ldrb	r1, [r4, r3]
 8006482:	00c0      	lsls	r0, r0, #3
 8006484:	f7f9 feec 	bl	8000260 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006488:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800648a:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800648c:	0e5b      	lsrs	r3, r3, #25
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800648e:	401e      	ands	r6, r3
 8006490:	ab02      	add	r3, sp, #8
 8006492:	5d98      	ldrb	r0, [r3, r6]
 8006494:	5da1      	ldrb	r1, [r4, r6]
 8006496:	00c0      	lsls	r0, r0, #3
 8006498:	f7f9 fee2 	bl	8000260 <__divsi3>
 800649c:	8028      	strh	r0, [r5, #0]
}
 800649e:	e7e6      	b.n	800646e <UARTEx_SetNbDataToProcess+0x4a>

080064a0 <HAL_UARTEx_EnableFifoMode>:
{
 80064a0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80064a2:	0004      	movs	r4, r0
 80064a4:	347c      	adds	r4, #124	; 0x7c
 80064a6:	7822      	ldrb	r2, [r4, #0]
 80064a8:	2302      	movs	r3, #2
 80064aa:	2a01      	cmp	r2, #1
 80064ac:	d014      	beq.n	80064d8 <HAL_UARTEx_EnableFifoMode+0x38>
 80064ae:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80064b0:	1d05      	adds	r5, r0, #4
 80064b2:	3322      	adds	r3, #34	; 0x22
  __HAL_LOCK(huart);
 80064b4:	7026      	strb	r6, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80064b6:	67eb      	str	r3, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064b8:	6803      	ldr	r3, [r0, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80064bc:	6819      	ldr	r1, [r3, #0]
 80064be:	43b1      	bics	r1, r6
 80064c0:	6019      	str	r1, [r3, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064c2:	2180      	movs	r1, #128	; 0x80
 80064c4:	0589      	lsls	r1, r1, #22
 80064c6:	430a      	orrs	r2, r1
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80064c8:	6641      	str	r1, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064ca:	601a      	str	r2, [r3, #0]
  UARTEx_SetNbDataToProcess(huart);
 80064cc:	f7ff ffaa 	bl	8006424 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80064d0:	2320      	movs	r3, #32
 80064d2:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 80064d4:	2300      	movs	r3, #0
 80064d6:	7023      	strb	r3, [r4, #0]
}
 80064d8:	0018      	movs	r0, r3
 80064da:	bd70      	pop	{r4, r5, r6, pc}

080064dc <HAL_UARTEx_SetTxFifoThreshold>:
{
 80064dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 80064de:	0005      	movs	r5, r0
 80064e0:	357c      	adds	r5, #124	; 0x7c
 80064e2:	782b      	ldrb	r3, [r5, #0]
{
 80064e4:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 80064e6:	2002      	movs	r0, #2
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d017      	beq.n	800651c <HAL_UARTEx_SetTxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 80064ec:	2324      	movs	r3, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064ee:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(huart);
 80064f0:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80064f2:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 80064f4:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80064f6:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064f8:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80064fa:	6813      	ldr	r3, [r2, #0]
 80064fc:	4383      	bics	r3, r0
 80064fe:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006500:	6893      	ldr	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006502:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006504:	00db      	lsls	r3, r3, #3
 8006506:	08db      	lsrs	r3, r3, #3
 8006508:	4319      	orrs	r1, r3
 800650a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800650c:	f7ff ff8a 	bl	8006424 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006510:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8006512:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006514:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006516:	2320      	movs	r3, #32
 8006518:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800651a:	7028      	strb	r0, [r5, #0]
}
 800651c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006520 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8006522:	0005      	movs	r5, r0
 8006524:	357c      	adds	r5, #124	; 0x7c
 8006526:	782b      	ldrb	r3, [r5, #0]
{
 8006528:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 800652a:	2002      	movs	r0, #2
 800652c:	2b01      	cmp	r3, #1
 800652e:	d017      	beq.n	8006560 <HAL_UARTEx_SetRxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 8006530:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8006532:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8006534:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 8006536:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006538:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800653a:	6823      	ldr	r3, [r4, #0]
 800653c:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	4382      	bics	r2, r0
 8006542:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006544:	689a      	ldr	r2, [r3, #8]
 8006546:	4807      	ldr	r0, [pc, #28]	; (8006564 <HAL_UARTEx_SetRxFifoThreshold+0x44>)
 8006548:	4002      	ands	r2, r0
 800654a:	4311      	orrs	r1, r2
 800654c:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800654e:	0020      	movs	r0, r4
 8006550:	f7ff ff68 	bl	8006424 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006554:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8006556:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006558:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800655a:	2320      	movs	r3, #32
 800655c:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800655e:	7028      	strb	r0, [r5, #0]
}
 8006560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006562:	46c0      	nop			; (mov r8, r8)
 8006564:	f1ffffff 	.word	0xf1ffffff

08006568 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result 
  */
int32_t MX_FATFS_Init(void) 
{
 8006568:	b510      	push	{r4, lr}
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 800656a:	4906      	ldr	r1, [pc, #24]	; (8006584 <MX_FATFS_Init+0x1c>)
 800656c:	4806      	ldr	r0, [pc, #24]	; (8006588 <MX_FATFS_Init+0x20>)
 800656e:	f000 f8a1 	bl	80066b4 <FATFS_LinkDriver>
 8006572:	2800      	cmp	r0, #0
 8006574:	d103      	bne.n	800657e <MX_FATFS_Init+0x16>
  {
    return APP_ERROR;
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8006576:	2201      	movs	r2, #1
 8006578:	4b04      	ldr	r3, [pc, #16]	; (800658c <MX_FATFS_Init+0x24>)
 800657a:	701a      	strb	r2, [r3, #0]
    return APP_OK;
  }
  /* USER CODE END FATFS_Init */
}
 800657c:	bd10      	pop	{r4, pc}
    return APP_ERROR;
 800657e:	2001      	movs	r0, #1
 8006580:	4240      	negs	r0, r0
 8006582:	e7fb      	b.n	800657c <MX_FATFS_Init+0x14>
 8006584:	20000e1c 	.word	0x20000e1c
 8006588:	08009868 	.word	0x08009868
 800658c:	200007f8 	.word	0x200007f8

08006590 <MX_FATFS_Process>:
  /* USER CODE BEGIN FATFS_Process */
  int32_t process_res = APP_OK;  
    
  return process_res;
  /* USER CODE END FATFS_Process */
}  
 8006590:	2000      	movs	r0, #0
 8006592:	4770      	bx	lr

08006594 <SD_CheckStatus.isra.0>:
  SD_ioctl,
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 8006594:	b570      	push	{r4, r5, r6, lr}
{
  Stat = STA_NOINIT;
 8006596:	2501      	movs	r5, #1
 8006598:	4c05      	ldr	r4, [pc, #20]	; (80065b0 <SD_CheckStatus.isra.0+0x1c>)
 800659a:	7025      	strb	r5, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800659c:	f7fc feba 	bl	8003314 <BSP_SD_GetCardState>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	d102      	bne.n	80065aa <SD_CheckStatus.isra.0+0x16>
  {
    Stat &= ~STA_NOINIT;
 80065a4:	7823      	ldrb	r3, [r4, #0]
 80065a6:	43ab      	bics	r3, r5
 80065a8:	7023      	strb	r3, [r4, #0]
  }

  return Stat;
 80065aa:	7820      	ldrb	r0, [r4, #0]
 80065ac:	b2c0      	uxtb	r0, r0
}
 80065ae:	bd70      	pop	{r4, r5, r6, pc}
 80065b0:	20000010 	.word	0x20000010

080065b4 <SD_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
  /* USER CODE BEGIN SDinitialize */
  Stat = STA_NOINIT;
 80065b4:	2301      	movs	r3, #1
{
 80065b6:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80065b8:	4c05      	ldr	r4, [pc, #20]	; (80065d0 <SD_initialize+0x1c>)
 80065ba:	7023      	strb	r3, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80065bc:	f7fc fb24 	bl	8002c08 <BSP_SD_Init>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d102      	bne.n	80065ca <SD_initialize+0x16>
  {
    Stat = SD_CheckStatus(lun);
 80065c4:	f7ff ffe6 	bl	8006594 <SD_CheckStatus.isra.0>
 80065c8:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80065ca:	7820      	ldrb	r0, [r4, #0]
 80065cc:	b2c0      	uxtb	r0, r0
  /* USER CODE END SDinitialize */
}
 80065ce:	bd10      	pop	{r4, pc}
 80065d0:	20000010 	.word	0x20000010

080065d4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80065d4:	b510      	push	{r4, lr}
  return SD_CheckStatus(lun);
 80065d6:	f7ff ffdd 	bl	8006594 <SD_CheckStatus.isra.0>
}
 80065da:	bd10      	pop	{r4, pc}

080065dc <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80065dc:	0008      	movs	r0, r1
 80065de:	b510      	push	{r4, lr}
 80065e0:	0011      	movs	r1, r2
 80065e2:	001a      	movs	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80065e4:	4b05      	ldr	r3, [pc, #20]	; (80065fc <SD_read+0x20>)
 80065e6:	f7fc fd97 	bl	8003118 <BSP_SD_ReadBlocks>
 80065ea:	0003      	movs	r3, r0
  DRESULT res = RES_ERROR;
 80065ec:	2001      	movs	r0, #1
  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d103      	bne.n	80065fa <SD_read+0x1e>
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
  /* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80065f2:	f7fc fe8f 	bl	8003314 <BSP_SD_GetCardState>
 80065f6:	2800      	cmp	r0, #0
 80065f8:	d1fb      	bne.n	80065f2 <SD_read+0x16>
}
 80065fa:	bd10      	pop	{r4, pc}
 80065fc:	05f5e100 	.word	0x05f5e100

08006600 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006600:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006602:	4b11      	ldr	r3, [pc, #68]	; (8006648 <SD_ioctl+0x48>)
{
 8006604:	0014      	movs	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006606:	781a      	ldrb	r2, [r3, #0]
{
 8006608:	b090      	sub	sp, #64	; 0x40
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800660a:	2003      	movs	r0, #3
 800660c:	07d3      	lsls	r3, r2, #31
 800660e:	d413      	bmi.n	8006638 <SD_ioctl+0x38>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
     res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8006610:	3001      	adds	r0, #1
  switch (cmd)
 8006612:	2903      	cmp	r1, #3
 8006614:	d810      	bhi.n	8006638 <SD_ioctl+0x38>
 8006616:	0008      	movs	r0, r1
 8006618:	f7f9 fd7a 	bl	8000110 <__gnu_thumb1_case_uqi>
 800661c:	1008020d 	.word	0x1008020d
    BSP_SD_GetCardInfo(&CardInfo);
 8006620:	4668      	mov	r0, sp
 8006622:	f7fc fbb3 	bl	8002d8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006628:	6023      	str	r3, [r4, #0]
 800662a:	e004      	b.n	8006636 <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 800662c:	4668      	mov	r0, sp
 800662e:	f7fc fbad 	bl	8002d8c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006632:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006634:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8006636:	2000      	movs	r0, #0
  }

  return res;
}
 8006638:	b010      	add	sp, #64	; 0x40
 800663a:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800663c:	4668      	mov	r0, sp
 800663e:	f7fc fba5 	bl	8002d8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006642:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006644:	0a5b      	lsrs	r3, r3, #9
 8006646:	e7ef      	b.n	8006628 <SD_ioctl+0x28>
 8006648:	20000010 	.word	0x20000010

0800664c <SD_write>:
{
 800664c:	0008      	movs	r0, r1
 800664e:	b510      	push	{r4, lr}
 8006650:	0011      	movs	r1, r2
 8006652:	001a      	movs	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8006654:	4b05      	ldr	r3, [pc, #20]	; (800666c <SD_write+0x20>)
 8006656:	f7fc fdd1 	bl	80031fc <BSP_SD_WriteBlocks>
 800665a:	0003      	movs	r3, r0
  DRESULT res = RES_ERROR;
 800665c:	2001      	movs	r0, #1
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800665e:	2b00      	cmp	r3, #0
 8006660:	d103      	bne.n	800666a <SD_write+0x1e>
    while(BSP_SD_GetCardState() != MSD_OK)
 8006662:	f7fc fe57 	bl	8003314 <BSP_SD_GetCardState>
 8006666:	2800      	cmp	r0, #0
 8006668:	d1fb      	bne.n	8006662 <SD_write+0x16>
}
 800666a:	bd10      	pop	{r4, pc}
 800666c:	05f5e100 	.word	0x05f5e100

08006670 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006670:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8006672:	4b0f      	ldr	r3, [pc, #60]	; (80066b0 <FATFS_LinkDriverEx+0x40>)
  uint8_t ret = 1;
 8006674:	2501      	movs	r5, #1
  if(disk.nbr < _VOLUMES)
 8006676:	7a5c      	ldrb	r4, [r3, #9]
 8006678:	b2e4      	uxtb	r4, r4
 800667a:	2c00      	cmp	r4, #0
 800667c:	d115      	bne.n	80066aa <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 800667e:	7a5d      	ldrb	r5, [r3, #9]
 8006680:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8006682:	7a5d      	ldrb	r5, [r3, #9]
 8006684:	00ad      	lsls	r5, r5, #2
 8006686:	195d      	adds	r5, r3, r5
 8006688:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 800668a:	7a58      	ldrb	r0, [r3, #9]
    DiskNum = disk.nbr++;
    path[0] = DiskNum + '0';
    path[1] = ':';
    path[2] = '/';
    path[3] = 0;
 800668c:	0025      	movs	r5, r4
    disk.lun[disk.nbr] = lun;
 800668e:	1818      	adds	r0, r3, r0
 8006690:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8006692:	7a5a      	ldrb	r2, [r3, #9]
 8006694:	b2d2      	uxtb	r2, r2
 8006696:	1c50      	adds	r0, r2, #1
 8006698:	b2c0      	uxtb	r0, r0
 800669a:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 800669c:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800669e:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 80066a0:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80066a2:	3b0b      	subs	r3, #11
    path[0] = DiskNum + '0';
 80066a4:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 80066a6:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 80066a8:	70cc      	strb	r4, [r1, #3]
    ret = 0;
  }

  return ret;
}
 80066aa:	0028      	movs	r0, r5
 80066ac:	bd30      	pop	{r4, r5, pc}
 80066ae:	46c0      	nop			; (mov r8, r8)
 80066b0:	200007fc 	.word	0x200007fc

080066b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80066b4:	b510      	push	{r4, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 80066b6:	2200      	movs	r2, #0
 80066b8:	f7ff ffda 	bl	8006670 <FATFS_LinkDriverEx>
}
 80066bc:	bd10      	pop	{r4, pc}
	...

080066c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80066c0:	480d      	ldr	r0, [pc, #52]	; (80066f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80066c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80066c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80066c6:	e003      	b.n	80066d0 <LoopCopyDataInit>

080066c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80066c8:	4b0c      	ldr	r3, [pc, #48]	; (80066fc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80066ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80066cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80066ce:	3104      	adds	r1, #4

080066d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80066d0:	480b      	ldr	r0, [pc, #44]	; (8006700 <LoopForever+0xa>)
  ldr r3, =_edata
 80066d2:	4b0c      	ldr	r3, [pc, #48]	; (8006704 <LoopForever+0xe>)
  adds r2, r0, r1
 80066d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80066d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80066d8:	d3f6      	bcc.n	80066c8 <CopyDataInit>
  ldr r2, =_sbss
 80066da:	4a0b      	ldr	r2, [pc, #44]	; (8006708 <LoopForever+0x12>)
  b LoopFillZerobss
 80066dc:	e002      	b.n	80066e4 <LoopFillZerobss>

080066de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80066de:	2300      	movs	r3, #0
  str  r3, [r2]
 80066e0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80066e2:	3204      	adds	r2, #4

080066e4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80066e4:	4b09      	ldr	r3, [pc, #36]	; (800670c <LoopForever+0x16>)
  cmp r2, r3
 80066e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80066e8:	d3f9      	bcc.n	80066de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80066ea:	f7fd f95b 	bl	80039a4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80066ee:	f000 f843 	bl	8006778 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80066f2:	f7fb ff97 	bl	8002624 <main>

080066f6 <LoopForever>:

LoopForever:
    b LoopForever
 80066f6:	e7fe      	b.n	80066f6 <LoopForever>
  ldr   r0, =_estack
 80066f8:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 80066fc:	08009af8 	.word	0x08009af8
  ldr r0, =_sdata
 8006700:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006704:	20000684 	.word	0x20000684
  ldr r2, =_sbss
 8006708:	20000684 	.word	0x20000684
  ldr r3, = _ebss
 800670c:	20001290 	.word	0x20001290

08006710 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006710:	e7fe      	b.n	8006710 <ADC1_IRQHandler>

08006712 <_calloc_r>:
 8006712:	b510      	push	{r4, lr}
 8006714:	4351      	muls	r1, r2
 8006716:	f000 f867 	bl	80067e8 <_malloc_r>
 800671a:	1e04      	subs	r4, r0, #0
 800671c:	d01a      	beq.n	8006754 <_calloc_r+0x42>
 800671e:	0003      	movs	r3, r0
 8006720:	3b08      	subs	r3, #8
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	2303      	movs	r3, #3
 8006726:	439a      	bics	r2, r3
 8006728:	3a04      	subs	r2, #4
 800672a:	2a24      	cmp	r2, #36	; 0x24
 800672c:	d819      	bhi.n	8006762 <_calloc_r+0x50>
 800672e:	0003      	movs	r3, r0
 8006730:	2a13      	cmp	r2, #19
 8006732:	d90b      	bls.n	800674c <_calloc_r+0x3a>
 8006734:	2100      	movs	r1, #0
 8006736:	3308      	adds	r3, #8
 8006738:	6001      	str	r1, [r0, #0]
 800673a:	6041      	str	r1, [r0, #4]
 800673c:	2a1b      	cmp	r2, #27
 800673e:	d905      	bls.n	800674c <_calloc_r+0x3a>
 8006740:	6081      	str	r1, [r0, #8]
 8006742:	60c1      	str	r1, [r0, #12]
 8006744:	2a24      	cmp	r2, #36	; 0x24
 8006746:	d007      	beq.n	8006758 <_calloc_r+0x46>
 8006748:	0003      	movs	r3, r0
 800674a:	3310      	adds	r3, #16
 800674c:	2200      	movs	r2, #0
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	605a      	str	r2, [r3, #4]
 8006752:	609a      	str	r2, [r3, #8]
 8006754:	0020      	movs	r0, r4
 8006756:	bd10      	pop	{r4, pc}
 8006758:	0003      	movs	r3, r0
 800675a:	6101      	str	r1, [r0, #16]
 800675c:	3318      	adds	r3, #24
 800675e:	6141      	str	r1, [r0, #20]
 8006760:	e7f4      	b.n	800674c <_calloc_r+0x3a>
 8006762:	2100      	movs	r1, #0
 8006764:	f000 fa4d 	bl	8006c02 <memset>
 8006768:	e7f4      	b.n	8006754 <_calloc_r+0x42>
	...

0800676c <__errno>:
 800676c:	4b01      	ldr	r3, [pc, #4]	; (8006774 <__errno+0x8>)
 800676e:	6818      	ldr	r0, [r3, #0]
 8006770:	4770      	bx	lr
 8006772:	46c0      	nop			; (mov r8, r8)
 8006774:	20000014 	.word	0x20000014

08006778 <__libc_init_array>:
 8006778:	b570      	push	{r4, r5, r6, lr}
 800677a:	2600      	movs	r6, #0
 800677c:	4d0c      	ldr	r5, [pc, #48]	; (80067b0 <__libc_init_array+0x38>)
 800677e:	4c0d      	ldr	r4, [pc, #52]	; (80067b4 <__libc_init_array+0x3c>)
 8006780:	1b64      	subs	r4, r4, r5
 8006782:	10a4      	asrs	r4, r4, #2
 8006784:	42a6      	cmp	r6, r4
 8006786:	d109      	bne.n	800679c <__libc_init_array+0x24>
 8006788:	2600      	movs	r6, #0
 800678a:	f002 ffa1 	bl	80096d0 <_init>
 800678e:	4d0a      	ldr	r5, [pc, #40]	; (80067b8 <__libc_init_array+0x40>)
 8006790:	4c0a      	ldr	r4, [pc, #40]	; (80067bc <__libc_init_array+0x44>)
 8006792:	1b64      	subs	r4, r4, r5
 8006794:	10a4      	asrs	r4, r4, #2
 8006796:	42a6      	cmp	r6, r4
 8006798:	d105      	bne.n	80067a6 <__libc_init_array+0x2e>
 800679a:	bd70      	pop	{r4, r5, r6, pc}
 800679c:	00b3      	lsls	r3, r6, #2
 800679e:	58eb      	ldr	r3, [r5, r3]
 80067a0:	4798      	blx	r3
 80067a2:	3601      	adds	r6, #1
 80067a4:	e7ee      	b.n	8006784 <__libc_init_array+0xc>
 80067a6:	00b3      	lsls	r3, r6, #2
 80067a8:	58eb      	ldr	r3, [r5, r3]
 80067aa:	4798      	blx	r3
 80067ac:	3601      	adds	r6, #1
 80067ae:	e7f2      	b.n	8006796 <__libc_init_array+0x1e>
 80067b0:	08009af0 	.word	0x08009af0
 80067b4:	08009af0 	.word	0x08009af0
 80067b8:	08009af0 	.word	0x08009af0
 80067bc:	08009af4 	.word	0x08009af4

080067c0 <malloc>:
 80067c0:	b510      	push	{r4, lr}
 80067c2:	4b03      	ldr	r3, [pc, #12]	; (80067d0 <malloc+0x10>)
 80067c4:	0001      	movs	r1, r0
 80067c6:	6818      	ldr	r0, [r3, #0]
 80067c8:	f000 f80e 	bl	80067e8 <_malloc_r>
 80067cc:	bd10      	pop	{r4, pc}
 80067ce:	46c0      	nop			; (mov r8, r8)
 80067d0:	20000014 	.word	0x20000014

080067d4 <free>:
 80067d4:	b510      	push	{r4, lr}
 80067d6:	4b03      	ldr	r3, [pc, #12]	; (80067e4 <free+0x10>)
 80067d8:	0001      	movs	r1, r0
 80067da:	6818      	ldr	r0, [r3, #0]
 80067dc:	f002 f99e 	bl	8008b1c <_free_r>
 80067e0:	bd10      	pop	{r4, pc}
 80067e2:	46c0      	nop			; (mov r8, r8)
 80067e4:	20000014 	.word	0x20000014

080067e8 <_malloc_r>:
 80067e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ea:	000d      	movs	r5, r1
 80067ec:	b085      	sub	sp, #20
 80067ee:	350b      	adds	r5, #11
 80067f0:	9001      	str	r0, [sp, #4]
 80067f2:	2d16      	cmp	r5, #22
 80067f4:	d908      	bls.n	8006808 <_malloc_r+0x20>
 80067f6:	2307      	movs	r3, #7
 80067f8:	439d      	bics	r5, r3
 80067fa:	d506      	bpl.n	800680a <_malloc_r+0x22>
 80067fc:	230c      	movs	r3, #12
 80067fe:	9a01      	ldr	r2, [sp, #4]
 8006800:	6013      	str	r3, [r2, #0]
 8006802:	2000      	movs	r0, #0
 8006804:	b005      	add	sp, #20
 8006806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006808:	2510      	movs	r5, #16
 800680a:	428d      	cmp	r5, r1
 800680c:	d3f6      	bcc.n	80067fc <_malloc_r+0x14>
 800680e:	9801      	ldr	r0, [sp, #4]
 8006810:	f000 fa00 	bl	8006c14 <__malloc_lock>
 8006814:	23f8      	movs	r3, #248	; 0xf8
 8006816:	33ff      	adds	r3, #255	; 0xff
 8006818:	48ba      	ldr	r0, [pc, #744]	; (8006b04 <_malloc_r+0x31c>)
 800681a:	429d      	cmp	r5, r3
 800681c:	d81f      	bhi.n	800685e <_malloc_r+0x76>
 800681e:	002a      	movs	r2, r5
 8006820:	3208      	adds	r2, #8
 8006822:	1882      	adds	r2, r0, r2
 8006824:	0011      	movs	r1, r2
 8006826:	6854      	ldr	r4, [r2, #4]
 8006828:	3908      	subs	r1, #8
 800682a:	08eb      	lsrs	r3, r5, #3
 800682c:	428c      	cmp	r4, r1
 800682e:	d103      	bne.n	8006838 <_malloc_r+0x50>
 8006830:	68d4      	ldr	r4, [r2, #12]
 8006832:	3302      	adds	r3, #2
 8006834:	42a2      	cmp	r2, r4
 8006836:	d029      	beq.n	800688c <_malloc_r+0xa4>
 8006838:	2303      	movs	r3, #3
 800683a:	6862      	ldr	r2, [r4, #4]
 800683c:	68a1      	ldr	r1, [r4, #8]
 800683e:	439a      	bics	r2, r3
 8006840:	0013      	movs	r3, r2
 8006842:	68e2      	ldr	r2, [r4, #12]
 8006844:	18e3      	adds	r3, r4, r3
 8006846:	60ca      	str	r2, [r1, #12]
 8006848:	6091      	str	r1, [r2, #8]
 800684a:	2201      	movs	r2, #1
 800684c:	6859      	ldr	r1, [r3, #4]
 800684e:	430a      	orrs	r2, r1
 8006850:	605a      	str	r2, [r3, #4]
 8006852:	9801      	ldr	r0, [sp, #4]
 8006854:	f000 f9e6 	bl	8006c24 <__malloc_unlock>
 8006858:	0020      	movs	r0, r4
 800685a:	3008      	adds	r0, #8
 800685c:	e7d2      	b.n	8006804 <_malloc_r+0x1c>
 800685e:	0a6a      	lsrs	r2, r5, #9
 8006860:	233f      	movs	r3, #63	; 0x3f
 8006862:	2a00      	cmp	r2, #0
 8006864:	d003      	beq.n	800686e <_malloc_r+0x86>
 8006866:	2a04      	cmp	r2, #4
 8006868:	d828      	bhi.n	80068bc <_malloc_r+0xd4>
 800686a:	09ab      	lsrs	r3, r5, #6
 800686c:	3338      	adds	r3, #56	; 0x38
 800686e:	2203      	movs	r2, #3
 8006870:	4694      	mov	ip, r2
 8006872:	00d9      	lsls	r1, r3, #3
 8006874:	1809      	adds	r1, r1, r0
 8006876:	68cc      	ldr	r4, [r1, #12]
 8006878:	428c      	cmp	r4, r1
 800687a:	d006      	beq.n	800688a <_malloc_r+0xa2>
 800687c:	4666      	mov	r6, ip
 800687e:	6862      	ldr	r2, [r4, #4]
 8006880:	43b2      	bics	r2, r6
 8006882:	1b57      	subs	r7, r2, r5
 8006884:	2f0f      	cmp	r7, #15
 8006886:	dd31      	ble.n	80068ec <_malloc_r+0x104>
 8006888:	3b01      	subs	r3, #1
 800688a:	3301      	adds	r3, #1
 800688c:	0001      	movs	r1, r0
 800688e:	6904      	ldr	r4, [r0, #16]
 8006890:	3108      	adds	r1, #8
 8006892:	428c      	cmp	r4, r1
 8006894:	d04e      	beq.n	8006934 <_malloc_r+0x14c>
 8006896:	2203      	movs	r2, #3
 8006898:	6866      	ldr	r6, [r4, #4]
 800689a:	4396      	bics	r6, r2
 800689c:	0032      	movs	r2, r6
 800689e:	1b76      	subs	r6, r6, r5
 80068a0:	2e0f      	cmp	r6, #15
 80068a2:	dd31      	ble.n	8006908 <_malloc_r+0x120>
 80068a4:	2701      	movs	r7, #1
 80068a6:	1963      	adds	r3, r4, r5
 80068a8:	433d      	orrs	r5, r7
 80068aa:	4337      	orrs	r7, r6
 80068ac:	6065      	str	r5, [r4, #4]
 80068ae:	6143      	str	r3, [r0, #20]
 80068b0:	6103      	str	r3, [r0, #16]
 80068b2:	60d9      	str	r1, [r3, #12]
 80068b4:	6099      	str	r1, [r3, #8]
 80068b6:	605f      	str	r7, [r3, #4]
 80068b8:	50a6      	str	r6, [r4, r2]
 80068ba:	e7ca      	b.n	8006852 <_malloc_r+0x6a>
 80068bc:	2a14      	cmp	r2, #20
 80068be:	d802      	bhi.n	80068c6 <_malloc_r+0xde>
 80068c0:	0013      	movs	r3, r2
 80068c2:	335b      	adds	r3, #91	; 0x5b
 80068c4:	e7d3      	b.n	800686e <_malloc_r+0x86>
 80068c6:	2a54      	cmp	r2, #84	; 0x54
 80068c8:	d802      	bhi.n	80068d0 <_malloc_r+0xe8>
 80068ca:	0b2b      	lsrs	r3, r5, #12
 80068cc:	336e      	adds	r3, #110	; 0x6e
 80068ce:	e7ce      	b.n	800686e <_malloc_r+0x86>
 80068d0:	23aa      	movs	r3, #170	; 0xaa
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d802      	bhi.n	80068de <_malloc_r+0xf6>
 80068d8:	0beb      	lsrs	r3, r5, #15
 80068da:	3377      	adds	r3, #119	; 0x77
 80068dc:	e7c7      	b.n	800686e <_malloc_r+0x86>
 80068de:	498a      	ldr	r1, [pc, #552]	; (8006b08 <_malloc_r+0x320>)
 80068e0:	237e      	movs	r3, #126	; 0x7e
 80068e2:	428a      	cmp	r2, r1
 80068e4:	d8c3      	bhi.n	800686e <_malloc_r+0x86>
 80068e6:	0cab      	lsrs	r3, r5, #18
 80068e8:	337c      	adds	r3, #124	; 0x7c
 80068ea:	e7c0      	b.n	800686e <_malloc_r+0x86>
 80068ec:	68e6      	ldr	r6, [r4, #12]
 80068ee:	2f00      	cmp	r7, #0
 80068f0:	db08      	blt.n	8006904 <_malloc_r+0x11c>
 80068f2:	68a3      	ldr	r3, [r4, #8]
 80068f4:	60de      	str	r6, [r3, #12]
 80068f6:	60b3      	str	r3, [r6, #8]
 80068f8:	2301      	movs	r3, #1
 80068fa:	18a2      	adds	r2, r4, r2
 80068fc:	6851      	ldr	r1, [r2, #4]
 80068fe:	430b      	orrs	r3, r1
 8006900:	6053      	str	r3, [r2, #4]
 8006902:	e7a6      	b.n	8006852 <_malloc_r+0x6a>
 8006904:	0034      	movs	r4, r6
 8006906:	e7b7      	b.n	8006878 <_malloc_r+0x90>
 8006908:	6141      	str	r1, [r0, #20]
 800690a:	6101      	str	r1, [r0, #16]
 800690c:	2e00      	cmp	r6, #0
 800690e:	daf3      	bge.n	80068f8 <_malloc_r+0x110>
 8006910:	497e      	ldr	r1, [pc, #504]	; (8006b0c <_malloc_r+0x324>)
 8006912:	428a      	cmp	r2, r1
 8006914:	d842      	bhi.n	800699c <_malloc_r+0x1b4>
 8006916:	08d2      	lsrs	r2, r2, #3
 8006918:	39ff      	subs	r1, #255	; 0xff
 800691a:	1096      	asrs	r6, r2, #2
 800691c:	39ff      	subs	r1, #255	; 0xff
 800691e:	40b1      	lsls	r1, r6
 8006920:	6846      	ldr	r6, [r0, #4]
 8006922:	00d2      	lsls	r2, r2, #3
 8006924:	4331      	orrs	r1, r6
 8006926:	6041      	str	r1, [r0, #4]
 8006928:	1810      	adds	r0, r2, r0
 800692a:	6882      	ldr	r2, [r0, #8]
 800692c:	60e0      	str	r0, [r4, #12]
 800692e:	60a2      	str	r2, [r4, #8]
 8006930:	6084      	str	r4, [r0, #8]
 8006932:	60d4      	str	r4, [r2, #12]
 8006934:	2201      	movs	r2, #1
 8006936:	1099      	asrs	r1, r3, #2
 8006938:	408a      	lsls	r2, r1
 800693a:	4972      	ldr	r1, [pc, #456]	; (8006b04 <_malloc_r+0x31c>)
 800693c:	6848      	ldr	r0, [r1, #4]
 800693e:	4282      	cmp	r2, r0
 8006940:	d900      	bls.n	8006944 <_malloc_r+0x15c>
 8006942:	e097      	b.n	8006a74 <_malloc_r+0x28c>
 8006944:	4210      	tst	r0, r2
 8006946:	d105      	bne.n	8006954 <_malloc_r+0x16c>
 8006948:	2403      	movs	r4, #3
 800694a:	43a3      	bics	r3, r4
 800694c:	0052      	lsls	r2, r2, #1
 800694e:	3304      	adds	r3, #4
 8006950:	4210      	tst	r0, r2
 8006952:	d0fb      	beq.n	800694c <_malloc_r+0x164>
 8006954:	469c      	mov	ip, r3
 8006956:	00d8      	lsls	r0, r3, #3
 8006958:	1808      	adds	r0, r1, r0
 800695a:	9002      	str	r0, [sp, #8]
 800695c:	9c02      	ldr	r4, [sp, #8]
 800695e:	68e4      	ldr	r4, [r4, #12]
 8006960:	9e02      	ldr	r6, [sp, #8]
 8006962:	42b4      	cmp	r4, r6
 8006964:	d158      	bne.n	8006a18 <_malloc_r+0x230>
 8006966:	0034      	movs	r4, r6
 8006968:	3408      	adds	r4, #8
 800696a:	9402      	str	r4, [sp, #8]
 800696c:	2401      	movs	r4, #1
 800696e:	44a4      	add	ip, r4
 8006970:	4664      	mov	r4, ip
 8006972:	2603      	movs	r6, #3
 8006974:	4234      	tst	r4, r6
 8006976:	d1f1      	bne.n	800695c <_malloc_r+0x174>
 8006978:	2403      	movs	r4, #3
 800697a:	4223      	tst	r3, r4
 800697c:	d174      	bne.n	8006a68 <_malloc_r+0x280>
 800697e:	684b      	ldr	r3, [r1, #4]
 8006980:	4393      	bics	r3, r2
 8006982:	604b      	str	r3, [r1, #4]
 8006984:	6848      	ldr	r0, [r1, #4]
 8006986:	0052      	lsls	r2, r2, #1
 8006988:	4282      	cmp	r2, r0
 800698a:	d873      	bhi.n	8006a74 <_malloc_r+0x28c>
 800698c:	2a00      	cmp	r2, #0
 800698e:	d071      	beq.n	8006a74 <_malloc_r+0x28c>
 8006990:	4663      	mov	r3, ip
 8006992:	4210      	tst	r0, r2
 8006994:	d1de      	bne.n	8006954 <_malloc_r+0x16c>
 8006996:	3304      	adds	r3, #4
 8006998:	0052      	lsls	r2, r2, #1
 800699a:	e7fa      	b.n	8006992 <_malloc_r+0x1aa>
 800699c:	0a56      	lsrs	r6, r2, #9
 800699e:	2e04      	cmp	r6, #4
 80069a0:	d816      	bhi.n	80069d0 <_malloc_r+0x1e8>
 80069a2:	0991      	lsrs	r1, r2, #6
 80069a4:	3138      	adds	r1, #56	; 0x38
 80069a6:	00cf      	lsls	r7, r1, #3
 80069a8:	183e      	adds	r6, r7, r0
 80069aa:	2703      	movs	r7, #3
 80069ac:	9602      	str	r6, [sp, #8]
 80069ae:	46bc      	mov	ip, r7
 80069b0:	68b6      	ldr	r6, [r6, #8]
 80069b2:	9f02      	ldr	r7, [sp, #8]
 80069b4:	42b7      	cmp	r7, r6
 80069b6:	d127      	bne.n	8006a08 <_malloc_r+0x220>
 80069b8:	2201      	movs	r2, #1
 80069ba:	1089      	asrs	r1, r1, #2
 80069bc:	408a      	lsls	r2, r1
 80069be:	6841      	ldr	r1, [r0, #4]
 80069c0:	430a      	orrs	r2, r1
 80069c2:	6042      	str	r2, [r0, #4]
 80069c4:	9a02      	ldr	r2, [sp, #8]
 80069c6:	60a6      	str	r6, [r4, #8]
 80069c8:	60e2      	str	r2, [r4, #12]
 80069ca:	6094      	str	r4, [r2, #8]
 80069cc:	60f4      	str	r4, [r6, #12]
 80069ce:	e7b1      	b.n	8006934 <_malloc_r+0x14c>
 80069d0:	2e14      	cmp	r6, #20
 80069d2:	d802      	bhi.n	80069da <_malloc_r+0x1f2>
 80069d4:	0031      	movs	r1, r6
 80069d6:	315b      	adds	r1, #91	; 0x5b
 80069d8:	e7e5      	b.n	80069a6 <_malloc_r+0x1be>
 80069da:	2e54      	cmp	r6, #84	; 0x54
 80069dc:	d802      	bhi.n	80069e4 <_malloc_r+0x1fc>
 80069de:	0b11      	lsrs	r1, r2, #12
 80069e0:	316e      	adds	r1, #110	; 0x6e
 80069e2:	e7e0      	b.n	80069a6 <_malloc_r+0x1be>
 80069e4:	21aa      	movs	r1, #170	; 0xaa
 80069e6:	0049      	lsls	r1, r1, #1
 80069e8:	428e      	cmp	r6, r1
 80069ea:	d802      	bhi.n	80069f2 <_malloc_r+0x20a>
 80069ec:	0bd1      	lsrs	r1, r2, #15
 80069ee:	3177      	adds	r1, #119	; 0x77
 80069f0:	e7d9      	b.n	80069a6 <_malloc_r+0x1be>
 80069f2:	4f45      	ldr	r7, [pc, #276]	; (8006b08 <_malloc_r+0x320>)
 80069f4:	217e      	movs	r1, #126	; 0x7e
 80069f6:	42be      	cmp	r6, r7
 80069f8:	d8d5      	bhi.n	80069a6 <_malloc_r+0x1be>
 80069fa:	0c91      	lsrs	r1, r2, #18
 80069fc:	317c      	adds	r1, #124	; 0x7c
 80069fe:	e7d2      	b.n	80069a6 <_malloc_r+0x1be>
 8006a00:	68b6      	ldr	r6, [r6, #8]
 8006a02:	9902      	ldr	r1, [sp, #8]
 8006a04:	42b1      	cmp	r1, r6
 8006a06:	d004      	beq.n	8006a12 <_malloc_r+0x22a>
 8006a08:	4660      	mov	r0, ip
 8006a0a:	6871      	ldr	r1, [r6, #4]
 8006a0c:	4381      	bics	r1, r0
 8006a0e:	428a      	cmp	r2, r1
 8006a10:	d3f6      	bcc.n	8006a00 <_malloc_r+0x218>
 8006a12:	68f2      	ldr	r2, [r6, #12]
 8006a14:	9202      	str	r2, [sp, #8]
 8006a16:	e7d5      	b.n	80069c4 <_malloc_r+0x1dc>
 8006a18:	2603      	movs	r6, #3
 8006a1a:	6867      	ldr	r7, [r4, #4]
 8006a1c:	43b7      	bics	r7, r6
 8006a1e:	9703      	str	r7, [sp, #12]
 8006a20:	1b7e      	subs	r6, r7, r5
 8006a22:	2e0f      	cmp	r6, #15
 8006a24:	dd11      	ble.n	8006a4a <_malloc_r+0x262>
 8006a26:	2201      	movs	r2, #1
 8006a28:	1963      	adds	r3, r4, r5
 8006a2a:	4315      	orrs	r5, r2
 8006a2c:	6065      	str	r5, [r4, #4]
 8006a2e:	68e0      	ldr	r0, [r4, #12]
 8006a30:	68a5      	ldr	r5, [r4, #8]
 8006a32:	3108      	adds	r1, #8
 8006a34:	60e8      	str	r0, [r5, #12]
 8006a36:	4332      	orrs	r2, r6
 8006a38:	6085      	str	r5, [r0, #8]
 8006a3a:	60cb      	str	r3, [r1, #12]
 8006a3c:	608b      	str	r3, [r1, #8]
 8006a3e:	60d9      	str	r1, [r3, #12]
 8006a40:	6099      	str	r1, [r3, #8]
 8006a42:	605a      	str	r2, [r3, #4]
 8006a44:	003b      	movs	r3, r7
 8006a46:	50e6      	str	r6, [r4, r3]
 8006a48:	e703      	b.n	8006852 <_malloc_r+0x6a>
 8006a4a:	68e7      	ldr	r7, [r4, #12]
 8006a4c:	2e00      	cmp	r6, #0
 8006a4e:	db09      	blt.n	8006a64 <_malloc_r+0x27c>
 8006a50:	2201      	movs	r2, #1
 8006a52:	9b03      	ldr	r3, [sp, #12]
 8006a54:	18e3      	adds	r3, r4, r3
 8006a56:	6859      	ldr	r1, [r3, #4]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	605a      	str	r2, [r3, #4]
 8006a5c:	68a3      	ldr	r3, [r4, #8]
 8006a5e:	60df      	str	r7, [r3, #12]
 8006a60:	60bb      	str	r3, [r7, #8]
 8006a62:	e6f6      	b.n	8006852 <_malloc_r+0x6a>
 8006a64:	003c      	movs	r4, r7
 8006a66:	e77b      	b.n	8006960 <_malloc_r+0x178>
 8006a68:	3808      	subs	r0, #8
 8006a6a:	6884      	ldr	r4, [r0, #8]
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	42a0      	cmp	r0, r4
 8006a70:	d082      	beq.n	8006978 <_malloc_r+0x190>
 8006a72:	e787      	b.n	8006984 <_malloc_r+0x19c>
 8006a74:	2303      	movs	r3, #3
 8006a76:	688f      	ldr	r7, [r1, #8]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	439a      	bics	r2, r3
 8006a7c:	9202      	str	r2, [sp, #8]
 8006a7e:	4295      	cmp	r5, r2
 8006a80:	d803      	bhi.n	8006a8a <_malloc_r+0x2a2>
 8006a82:	1b52      	subs	r2, r2, r5
 8006a84:	2a0f      	cmp	r2, #15
 8006a86:	dd00      	ble.n	8006a8a <_malloc_r+0x2a2>
 8006a88:	e09f      	b.n	8006bca <_malloc_r+0x3e2>
 8006a8a:	9b02      	ldr	r3, [sp, #8]
 8006a8c:	18fb      	adds	r3, r7, r3
 8006a8e:	9303      	str	r3, [sp, #12]
 8006a90:	4b1f      	ldr	r3, [pc, #124]	; (8006b10 <_malloc_r+0x328>)
 8006a92:	681e      	ldr	r6, [r3, #0]
 8006a94:	4b1f      	ldr	r3, [pc, #124]	; (8006b14 <_malloc_r+0x32c>)
 8006a96:	3610      	adds	r6, #16
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	1976      	adds	r6, r6, r5
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	d005      	beq.n	8006aac <_malloc_r+0x2c4>
 8006aa0:	4b1d      	ldr	r3, [pc, #116]	; (8006b18 <_malloc_r+0x330>)
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	199e      	adds	r6, r3, r6
 8006aa6:	4b1c      	ldr	r3, [pc, #112]	; (8006b18 <_malloc_r+0x330>)
 8006aa8:	425b      	negs	r3, r3
 8006aaa:	401e      	ands	r6, r3
 8006aac:	0031      	movs	r1, r6
 8006aae:	9801      	ldr	r0, [sp, #4]
 8006ab0:	f000 f8c0 	bl	8006c34 <_sbrk_r>
 8006ab4:	0004      	movs	r4, r0
 8006ab6:	1c43      	adds	r3, r0, #1
 8006ab8:	d05f      	beq.n	8006b7a <_malloc_r+0x392>
 8006aba:	9b03      	ldr	r3, [sp, #12]
 8006abc:	4283      	cmp	r3, r0
 8006abe:	d902      	bls.n	8006ac6 <_malloc_r+0x2de>
 8006ac0:	4b10      	ldr	r3, [pc, #64]	; (8006b04 <_malloc_r+0x31c>)
 8006ac2:	429f      	cmp	r7, r3
 8006ac4:	d159      	bne.n	8006b7a <_malloc_r+0x392>
 8006ac6:	4b15      	ldr	r3, [pc, #84]	; (8006b1c <_malloc_r+0x334>)
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	18b1      	adds	r1, r6, r2
 8006acc:	6019      	str	r1, [r3, #0]
 8006ace:	4b12      	ldr	r3, [pc, #72]	; (8006b18 <_malloc_r+0x330>)
 8006ad0:	1e5a      	subs	r2, r3, #1
 8006ad2:	9b03      	ldr	r3, [sp, #12]
 8006ad4:	42a3      	cmp	r3, r4
 8006ad6:	d127      	bne.n	8006b28 <_malloc_r+0x340>
 8006ad8:	4213      	tst	r3, r2
 8006ada:	d125      	bne.n	8006b28 <_malloc_r+0x340>
 8006adc:	9a02      	ldr	r2, [sp, #8]
 8006ade:	4b09      	ldr	r3, [pc, #36]	; (8006b04 <_malloc_r+0x31c>)
 8006ae0:	1992      	adds	r2, r2, r6
 8006ae2:	2601      	movs	r6, #1
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	4316      	orrs	r6, r2
 8006ae8:	605e      	str	r6, [r3, #4]
 8006aea:	4b0c      	ldr	r3, [pc, #48]	; (8006b1c <_malloc_r+0x334>)
 8006aec:	4a0c      	ldr	r2, [pc, #48]	; (8006b20 <_malloc_r+0x338>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6811      	ldr	r1, [r2, #0]
 8006af2:	428b      	cmp	r3, r1
 8006af4:	d900      	bls.n	8006af8 <_malloc_r+0x310>
 8006af6:	6013      	str	r3, [r2, #0]
 8006af8:	4a0a      	ldr	r2, [pc, #40]	; (8006b24 <_malloc_r+0x33c>)
 8006afa:	6811      	ldr	r1, [r2, #0]
 8006afc:	428b      	cmp	r3, r1
 8006afe:	d93c      	bls.n	8006b7a <_malloc_r+0x392>
 8006b00:	6013      	str	r3, [r2, #0]
 8006b02:	e03a      	b.n	8006b7a <_malloc_r+0x392>
 8006b04:	20000108 	.word	0x20000108
 8006b08:	00000554 	.word	0x00000554
 8006b0c:	000001ff 	.word	0x000001ff
 8006b10:	20000838 	.word	0x20000838
 8006b14:	20000510 	.word	0x20000510
 8006b18:	00000080 	.word	0x00000080
 8006b1c:	20000808 	.word	0x20000808
 8006b20:	20000830 	.word	0x20000830
 8006b24:	20000834 	.word	0x20000834
 8006b28:	4b2d      	ldr	r3, [pc, #180]	; (8006be0 <_malloc_r+0x3f8>)
 8006b2a:	6818      	ldr	r0, [r3, #0]
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	d132      	bne.n	8006b96 <_malloc_r+0x3ae>
 8006b30:	601c      	str	r4, [r3, #0]
 8006b32:	2007      	movs	r0, #7
 8006b34:	4020      	ands	r0, r4
 8006b36:	d002      	beq.n	8006b3e <_malloc_r+0x356>
 8006b38:	2308      	movs	r3, #8
 8006b3a:	1a18      	subs	r0, r3, r0
 8006b3c:	1824      	adds	r4, r4, r0
 8006b3e:	4b29      	ldr	r3, [pc, #164]	; (8006be4 <_malloc_r+0x3fc>)
 8006b40:	19a6      	adds	r6, r4, r6
 8006b42:	1818      	adds	r0, r3, r0
 8006b44:	4016      	ands	r6, r2
 8006b46:	1b86      	subs	r6, r0, r6
 8006b48:	0031      	movs	r1, r6
 8006b4a:	9801      	ldr	r0, [sp, #4]
 8006b4c:	f000 f872 	bl	8006c34 <_sbrk_r>
 8006b50:	1c43      	adds	r3, r0, #1
 8006b52:	d101      	bne.n	8006b58 <_malloc_r+0x370>
 8006b54:	0020      	movs	r0, r4
 8006b56:	2600      	movs	r6, #0
 8006b58:	4a23      	ldr	r2, [pc, #140]	; (8006be8 <_malloc_r+0x400>)
 8006b5a:	1b00      	subs	r0, r0, r4
 8006b5c:	6813      	ldr	r3, [r2, #0]
 8006b5e:	199b      	adds	r3, r3, r6
 8006b60:	6013      	str	r3, [r2, #0]
 8006b62:	2301      	movs	r3, #1
 8006b64:	4a21      	ldr	r2, [pc, #132]	; (8006bec <_malloc_r+0x404>)
 8006b66:	1986      	adds	r6, r0, r6
 8006b68:	431e      	orrs	r6, r3
 8006b6a:	6094      	str	r4, [r2, #8]
 8006b6c:	6066      	str	r6, [r4, #4]
 8006b6e:	4297      	cmp	r7, r2
 8006b70:	d0bb      	beq.n	8006aea <_malloc_r+0x302>
 8006b72:	9a02      	ldr	r2, [sp, #8]
 8006b74:	2a0f      	cmp	r2, #15
 8006b76:	d814      	bhi.n	8006ba2 <_malloc_r+0x3ba>
 8006b78:	6063      	str	r3, [r4, #4]
 8006b7a:	2203      	movs	r2, #3
 8006b7c:	4b1b      	ldr	r3, [pc, #108]	; (8006bec <_malloc_r+0x404>)
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	4393      	bics	r3, r2
 8006b84:	1b5a      	subs	r2, r3, r5
 8006b86:	429d      	cmp	r5, r3
 8006b88:	d801      	bhi.n	8006b8e <_malloc_r+0x3a6>
 8006b8a:	2a0f      	cmp	r2, #15
 8006b8c:	dc1d      	bgt.n	8006bca <_malloc_r+0x3e2>
 8006b8e:	9801      	ldr	r0, [sp, #4]
 8006b90:	f000 f848 	bl	8006c24 <__malloc_unlock>
 8006b94:	e635      	b.n	8006802 <_malloc_r+0x1a>
 8006b96:	9b03      	ldr	r3, [sp, #12]
 8006b98:	1ae3      	subs	r3, r4, r3
 8006b9a:	185b      	adds	r3, r3, r1
 8006b9c:	4912      	ldr	r1, [pc, #72]	; (8006be8 <_malloc_r+0x400>)
 8006b9e:	600b      	str	r3, [r1, #0]
 8006ba0:	e7c7      	b.n	8006b32 <_malloc_r+0x34a>
 8006ba2:	2207      	movs	r2, #7
 8006ba4:	9e02      	ldr	r6, [sp, #8]
 8006ba6:	3e0c      	subs	r6, #12
 8006ba8:	4396      	bics	r6, r2
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	4013      	ands	r3, r2
 8006bae:	2205      	movs	r2, #5
 8006bb0:	4333      	orrs	r3, r6
 8006bb2:	607b      	str	r3, [r7, #4]
 8006bb4:	19bb      	adds	r3, r7, r6
 8006bb6:	605a      	str	r2, [r3, #4]
 8006bb8:	609a      	str	r2, [r3, #8]
 8006bba:	2e0f      	cmp	r6, #15
 8006bbc:	d995      	bls.n	8006aea <_malloc_r+0x302>
 8006bbe:	0039      	movs	r1, r7
 8006bc0:	9801      	ldr	r0, [sp, #4]
 8006bc2:	3108      	adds	r1, #8
 8006bc4:	f001 ffaa 	bl	8008b1c <_free_r>
 8006bc8:	e78f      	b.n	8006aea <_malloc_r+0x302>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	0018      	movs	r0, r3
 8006bce:	4907      	ldr	r1, [pc, #28]	; (8006bec <_malloc_r+0x404>)
 8006bd0:	4328      	orrs	r0, r5
 8006bd2:	688c      	ldr	r4, [r1, #8]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	1965      	adds	r5, r4, r5
 8006bd8:	6060      	str	r0, [r4, #4]
 8006bda:	608d      	str	r5, [r1, #8]
 8006bdc:	606b      	str	r3, [r5, #4]
 8006bde:	e638      	b.n	8006852 <_malloc_r+0x6a>
 8006be0:	20000510 	.word	0x20000510
 8006be4:	00000080 	.word	0x00000080
 8006be8:	20000808 	.word	0x20000808
 8006bec:	20000108 	.word	0x20000108

08006bf0 <memcpy>:
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	b510      	push	{r4, lr}
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d100      	bne.n	8006bfa <memcpy+0xa>
 8006bf8:	bd10      	pop	{r4, pc}
 8006bfa:	5ccc      	ldrb	r4, [r1, r3]
 8006bfc:	54c4      	strb	r4, [r0, r3]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	e7f8      	b.n	8006bf4 <memcpy+0x4>

08006c02 <memset>:
 8006c02:	0003      	movs	r3, r0
 8006c04:	1882      	adds	r2, r0, r2
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d100      	bne.n	8006c0c <memset+0xa>
 8006c0a:	4770      	bx	lr
 8006c0c:	7019      	strb	r1, [r3, #0]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	e7f9      	b.n	8006c06 <memset+0x4>
	...

08006c14 <__malloc_lock>:
 8006c14:	b510      	push	{r4, lr}
 8006c16:	4802      	ldr	r0, [pc, #8]	; (8006c20 <__malloc_lock+0xc>)
 8006c18:	f002 f840 	bl	8008c9c <__retarget_lock_acquire_recursive>
 8006c1c:	bd10      	pop	{r4, pc}
 8006c1e:	46c0      	nop			; (mov r8, r8)
 8006c20:	20001284 	.word	0x20001284

08006c24 <__malloc_unlock>:
 8006c24:	b510      	push	{r4, lr}
 8006c26:	4802      	ldr	r0, [pc, #8]	; (8006c30 <__malloc_unlock+0xc>)
 8006c28:	f002 f839 	bl	8008c9e <__retarget_lock_release_recursive>
 8006c2c:	bd10      	pop	{r4, pc}
 8006c2e:	46c0      	nop			; (mov r8, r8)
 8006c30:	20001284 	.word	0x20001284

08006c34 <_sbrk_r>:
 8006c34:	2300      	movs	r3, #0
 8006c36:	b570      	push	{r4, r5, r6, lr}
 8006c38:	4c06      	ldr	r4, [pc, #24]	; (8006c54 <_sbrk_r+0x20>)
 8006c3a:	0005      	movs	r5, r0
 8006c3c:	0008      	movs	r0, r1
 8006c3e:	6023      	str	r3, [r4, #0]
 8006c40:	f7fc fe96 	bl	8003970 <_sbrk>
 8006c44:	1c43      	adds	r3, r0, #1
 8006c46:	d103      	bne.n	8006c50 <_sbrk_r+0x1c>
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d000      	beq.n	8006c50 <_sbrk_r+0x1c>
 8006c4e:	602b      	str	r3, [r5, #0]
 8006c50:	bd70      	pop	{r4, r5, r6, pc}
 8006c52:	46c0      	nop			; (mov r8, r8)
 8006c54:	2000128c 	.word	0x2000128c

08006c58 <strcpy>:
 8006c58:	1c03      	adds	r3, r0, #0
 8006c5a:	780a      	ldrb	r2, [r1, #0]
 8006c5c:	3101      	adds	r1, #1
 8006c5e:	701a      	strb	r2, [r3, #0]
 8006c60:	3301      	adds	r3, #1
 8006c62:	2a00      	cmp	r2, #0
 8006c64:	d1f9      	bne.n	8006c5a <strcpy+0x2>
 8006c66:	4770      	bx	lr

08006c68 <_svfprintf_r>:
 8006c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c6a:	b0c5      	sub	sp, #276	; 0x114
 8006c6c:	9109      	str	r1, [sp, #36]	; 0x24
 8006c6e:	0014      	movs	r4, r2
 8006c70:	001d      	movs	r5, r3
 8006c72:	900a      	str	r0, [sp, #40]	; 0x28
 8006c74:	f002 f806 	bl	8008c84 <_localeconv_r>
 8006c78:	6803      	ldr	r3, [r0, #0]
 8006c7a:	0018      	movs	r0, r3
 8006c7c:	9318      	str	r3, [sp, #96]	; 0x60
 8006c7e:	f7f9 fa3f 	bl	8000100 <strlen>
 8006c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c84:	9012      	str	r0, [sp, #72]	; 0x48
 8006c86:	899b      	ldrh	r3, [r3, #12]
 8006c88:	061b      	lsls	r3, r3, #24
 8006c8a:	d518      	bpl.n	8006cbe <_svfprintf_r+0x56>
 8006c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d113      	bne.n	8006cbe <_svfprintf_r+0x56>
 8006c96:	2140      	movs	r1, #64	; 0x40
 8006c98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006c9a:	f7ff fda5 	bl	80067e8 <_malloc_r>
 8006c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca0:	6018      	str	r0, [r3, #0]
 8006ca2:	6118      	str	r0, [r3, #16]
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	d107      	bne.n	8006cb8 <_svfprintf_r+0x50>
 8006ca8:	230c      	movs	r3, #12
 8006caa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cac:	6013      	str	r3, [r2, #0]
 8006cae:	3b0d      	subs	r3, #13
 8006cb0:	9313      	str	r3, [sp, #76]	; 0x4c
 8006cb2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8006cb4:	b045      	add	sp, #276	; 0x114
 8006cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cb8:	2340      	movs	r3, #64	; 0x40
 8006cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cbc:	6153      	str	r3, [r2, #20]
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	af34      	add	r7, sp, #208	; 0xd0
 8006cc2:	9727      	str	r7, [sp, #156]	; 0x9c
 8006cc4:	9329      	str	r3, [sp, #164]	; 0xa4
 8006cc6:	9328      	str	r3, [sp, #160]	; 0xa0
 8006cc8:	9411      	str	r4, [sp, #68]	; 0x44
 8006cca:	930e      	str	r3, [sp, #56]	; 0x38
 8006ccc:	9316      	str	r3, [sp, #88]	; 0x58
 8006cce:	9317      	str	r3, [sp, #92]	; 0x5c
 8006cd0:	931a      	str	r3, [sp, #104]	; 0x68
 8006cd2:	9319      	str	r3, [sp, #100]	; 0x64
 8006cd4:	9313      	str	r3, [sp, #76]	; 0x4c
 8006cd6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8006cd8:	7823      	ldrb	r3, [r4, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <_svfprintf_r+0x7c>
 8006cde:	2b25      	cmp	r3, #37	; 0x25
 8006ce0:	d000      	beq.n	8006ce4 <_svfprintf_r+0x7c>
 8006ce2:	e091      	b.n	8006e08 <_svfprintf_r+0x1a0>
 8006ce4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ce6:	1ae6      	subs	r6, r4, r3
 8006ce8:	d018      	beq.n	8006d1c <_svfprintf_r+0xb4>
 8006cea:	603b      	str	r3, [r7, #0]
 8006cec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006cee:	607e      	str	r6, [r7, #4]
 8006cf0:	199b      	adds	r3, r3, r6
 8006cf2:	9329      	str	r3, [sp, #164]	; 0xa4
 8006cf4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	9328      	str	r3, [sp, #160]	; 0xa0
 8006cfe:	2b07      	cmp	r3, #7
 8006d00:	dd09      	ble.n	8006d16 <_svfprintf_r+0xae>
 8006d02:	aa27      	add	r2, sp, #156	; 0x9c
 8006d04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d06:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006d08:	f002 fab8 	bl	800927c <__ssprint_r>
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	d001      	beq.n	8006d14 <_svfprintf_r+0xac>
 8006d10:	f000 ffa8 	bl	8007c64 <_svfprintf_r+0xffc>
 8006d14:	af34      	add	r7, sp, #208	; 0xd0
 8006d16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d18:	199b      	adds	r3, r3, r6
 8006d1a:	9313      	str	r3, [sp, #76]	; 0x4c
 8006d1c:	7823      	ldrb	r3, [r4, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <_svfprintf_r+0xbe>
 8006d22:	f000 ffbe 	bl	8007ca2 <_svfprintf_r+0x103a>
 8006d26:	221f      	movs	r2, #31
 8006d28:	2300      	movs	r3, #0
 8006d2a:	a918      	add	r1, sp, #96	; 0x60
 8006d2c:	1852      	adds	r2, r2, r1
 8006d2e:	2101      	movs	r1, #1
 8006d30:	7013      	strb	r3, [r2, #0]
 8006d32:	001e      	movs	r6, r3
 8006d34:	001a      	movs	r2, r3
 8006d36:	4249      	negs	r1, r1
 8006d38:	3401      	adds	r4, #1
 8006d3a:	910b      	str	r1, [sp, #44]	; 0x2c
 8006d3c:	9314      	str	r3, [sp, #80]	; 0x50
 8006d3e:	1c61      	adds	r1, r4, #1
 8006d40:	9111      	str	r1, [sp, #68]	; 0x44
 8006d42:	7821      	ldrb	r1, [r4, #0]
 8006d44:	910d      	str	r1, [sp, #52]	; 0x34
 8006d46:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006d48:	3820      	subs	r0, #32
 8006d4a:	2858      	cmp	r0, #88	; 0x58
 8006d4c:	d901      	bls.n	8006d52 <_svfprintf_r+0xea>
 8006d4e:	f000 fca7 	bl	80076a0 <_svfprintf_r+0xa38>
 8006d52:	f7f9 f9f1 	bl	8000138 <__gnu_thumb1_case_uhi>
 8006d56:	00cc      	.short	0x00cc
 8006d58:	04a504a5 	.word	0x04a504a5
 8006d5c:	04a500d1 	.word	0x04a500d1
 8006d60:	04a504a5 	.word	0x04a504a5
 8006d64:	04a504a5 	.word	0x04a504a5
 8006d68:	00d404a5 	.word	0x00d404a5
 8006d6c:	04a5005b 	.word	0x04a5005b
 8006d70:	00de00dc 	.word	0x00de00dc
 8006d74:	010304a5 	.word	0x010304a5
 8006d78:	01050105 	.word	0x01050105
 8006d7c:	01050105 	.word	0x01050105
 8006d80:	01050105 	.word	0x01050105
 8006d84:	01050105 	.word	0x01050105
 8006d88:	04a50105 	.word	0x04a50105
 8006d8c:	04a504a5 	.word	0x04a504a5
 8006d90:	04a504a5 	.word	0x04a504a5
 8006d94:	04a504a5 	.word	0x04a504a5
 8006d98:	04a504a5 	.word	0x04a504a5
 8006d9c:	013504a5 	.word	0x013504a5
 8006da0:	04a5014d 	.word	0x04a5014d
 8006da4:	04a5014d 	.word	0x04a5014d
 8006da8:	04a504a5 	.word	0x04a504a5
 8006dac:	011704a5 	.word	0x011704a5
 8006db0:	04a504a5 	.word	0x04a504a5
 8006db4:	04a503ad 	.word	0x04a503ad
 8006db8:	04a504a5 	.word	0x04a504a5
 8006dbc:	04a504a5 	.word	0x04a504a5
 8006dc0:	04a50407 	.word	0x04a50407
 8006dc4:	00a304a5 	.word	0x00a304a5
 8006dc8:	04a504a5 	.word	0x04a504a5
 8006dcc:	04a504a5 	.word	0x04a504a5
 8006dd0:	04a504a5 	.word	0x04a504a5
 8006dd4:	04a504a5 	.word	0x04a504a5
 8006dd8:	04a504a5 	.word	0x04a504a5
 8006ddc:	005f0126 	.word	0x005f0126
 8006de0:	014d014d 	.word	0x014d014d
 8006de4:	0119014d 	.word	0x0119014d
 8006de8:	04a5005f 	.word	0x04a5005f
 8006dec:	011b04a5 	.word	0x011b04a5
 8006df0:	038e04a5 	.word	0x038e04a5
 8006df4:	03d903af 	.word	0x03d903af
 8006df8:	04a50122 	.word	0x04a50122
 8006dfc:	04a503ea 	.word	0x04a503ea
 8006e00:	04a50409 	.word	0x04a50409
 8006e04:	043004a5 	.word	0x043004a5
 8006e08:	3401      	adds	r4, #1
 8006e0a:	e765      	b.n	8006cd8 <_svfprintf_r+0x70>
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	222b      	movs	r2, #43	; 0x2b
 8006e10:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8006e12:	e794      	b.n	8006d3e <_svfprintf_r+0xd6>
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d003      	beq.n	8006e20 <_svfprintf_r+0x1b8>
 8006e18:	231f      	movs	r3, #31
 8006e1a:	a918      	add	r1, sp, #96	; 0x60
 8006e1c:	185b      	adds	r3, r3, r1
 8006e1e:	701a      	strb	r2, [r3, #0]
 8006e20:	06b3      	lsls	r3, r6, #26
 8006e22:	d400      	bmi.n	8006e26 <_svfprintf_r+0x1be>
 8006e24:	e0d5      	b.n	8006fd2 <_svfprintf_r+0x36a>
 8006e26:	2307      	movs	r3, #7
 8006e28:	3507      	adds	r5, #7
 8006e2a:	439d      	bics	r5, r3
 8006e2c:	002b      	movs	r3, r5
 8006e2e:	3308      	adds	r3, #8
 8006e30:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e32:	682b      	ldr	r3, [r5, #0]
 8006e34:	686c      	ldr	r4, [r5, #4]
 8006e36:	9306      	str	r3, [sp, #24]
 8006e38:	9407      	str	r4, [sp, #28]
 8006e3a:	9a07      	ldr	r2, [sp, #28]
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	2a00      	cmp	r2, #0
 8006e40:	da0c      	bge.n	8006e5c <_svfprintf_r+0x1f4>
 8006e42:	9906      	ldr	r1, [sp, #24]
 8006e44:	9a07      	ldr	r2, [sp, #28]
 8006e46:	2400      	movs	r4, #0
 8006e48:	424b      	negs	r3, r1
 8006e4a:	4194      	sbcs	r4, r2
 8006e4c:	9306      	str	r3, [sp, #24]
 8006e4e:	9407      	str	r4, [sp, #28]
 8006e50:	231f      	movs	r3, #31
 8006e52:	222d      	movs	r2, #45	; 0x2d
 8006e54:	a918      	add	r1, sp, #96	; 0x60
 8006e56:	185b      	adds	r3, r3, r1
 8006e58:	701a      	strb	r2, [r3, #0]
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	9907      	ldr	r1, [sp, #28]
 8006e5e:	9a06      	ldr	r2, [sp, #24]
 8006e60:	430a      	orrs	r2, r1
 8006e62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e64:	3101      	adds	r1, #1
 8006e66:	d101      	bne.n	8006e6c <_svfprintf_r+0x204>
 8006e68:	f000 ff3f 	bl	8007cea <_svfprintf_r+0x1082>
 8006e6c:	2180      	movs	r1, #128	; 0x80
 8006e6e:	0035      	movs	r5, r6
 8006e70:	438d      	bics	r5, r1
 8006e72:	2a00      	cmp	r2, #0
 8006e74:	d001      	beq.n	8006e7a <_svfprintf_r+0x212>
 8006e76:	f000 ff3d 	bl	8007cf4 <_svfprintf_r+0x108c>
 8006e7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e7c:	2a00      	cmp	r2, #0
 8006e7e:	d101      	bne.n	8006e84 <_svfprintf_r+0x21c>
 8006e80:	f000 fc04 	bl	800768c <_svfprintf_r+0xa24>
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d100      	bne.n	8006e8a <_svfprintf_r+0x222>
 8006e88:	e3b7      	b.n	80075fa <_svfprintf_r+0x992>
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d100      	bne.n	8006e90 <_svfprintf_r+0x228>
 8006e8e:	e3df      	b.n	8007650 <_svfprintf_r+0x9e8>
 8006e90:	2300      	movs	r3, #0
 8006e92:	2400      	movs	r4, #0
 8006e94:	9306      	str	r3, [sp, #24]
 8006e96:	9407      	str	r4, [sp, #28]
 8006e98:	f000 ff32 	bl	8007d00 <_svfprintf_r+0x1098>
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d003      	beq.n	8006ea8 <_svfprintf_r+0x240>
 8006ea0:	231f      	movs	r3, #31
 8006ea2:	a918      	add	r1, sp, #96	; 0x60
 8006ea4:	185b      	adds	r3, r3, r1
 8006ea6:	701a      	strb	r2, [r3, #0]
 8006ea8:	4b8c      	ldr	r3, [pc, #560]	; (80070dc <_svfprintf_r+0x474>)
 8006eaa:	931a      	str	r3, [sp, #104]	; 0x68
 8006eac:	2320      	movs	r3, #32
 8006eae:	4033      	ands	r3, r6
 8006eb0:	d100      	bne.n	8006eb4 <_svfprintf_r+0x24c>
 8006eb2:	e388      	b.n	80075c6 <_svfprintf_r+0x95e>
 8006eb4:	2307      	movs	r3, #7
 8006eb6:	3507      	adds	r5, #7
 8006eb8:	439d      	bics	r5, r3
 8006eba:	002b      	movs	r3, r5
 8006ebc:	3308      	adds	r3, #8
 8006ebe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ec0:	682b      	ldr	r3, [r5, #0]
 8006ec2:	686c      	ldr	r4, [r5, #4]
 8006ec4:	9306      	str	r3, [sp, #24]
 8006ec6:	9407      	str	r4, [sp, #28]
 8006ec8:	2302      	movs	r3, #2
 8006eca:	07f2      	lsls	r2, r6, #31
 8006ecc:	d400      	bmi.n	8006ed0 <_svfprintf_r+0x268>
 8006ece:	e2ff      	b.n	80074d0 <_svfprintf_r+0x868>
 8006ed0:	9a06      	ldr	r2, [sp, #24]
 8006ed2:	9907      	ldr	r1, [sp, #28]
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	d100      	bne.n	8006eda <_svfprintf_r+0x272>
 8006ed8:	e2fa      	b.n	80074d0 <_svfprintf_r+0x868>
 8006eda:	2130      	movs	r1, #48	; 0x30
 8006edc:	aa20      	add	r2, sp, #128	; 0x80
 8006ede:	7011      	strb	r1, [r2, #0]
 8006ee0:	2034      	movs	r0, #52	; 0x34
 8006ee2:	4669      	mov	r1, sp
 8006ee4:	1809      	adds	r1, r1, r0
 8006ee6:	7809      	ldrb	r1, [r1, #0]
 8006ee8:	431e      	orrs	r6, r3
 8006eea:	7051      	strb	r1, [r2, #1]
 8006eec:	e2f0      	b.n	80074d0 <_svfprintf_r+0x868>
 8006eee:	2a00      	cmp	r2, #0
 8006ef0:	d18e      	bne.n	8006e10 <_svfprintf_r+0x1a8>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	e78b      	b.n	8006e10 <_svfprintf_r+0x1a8>
 8006ef8:	2101      	movs	r1, #1
 8006efa:	430e      	orrs	r6, r1
 8006efc:	e788      	b.n	8006e10 <_svfprintf_r+0x1a8>
 8006efe:	6829      	ldr	r1, [r5, #0]
 8006f00:	3504      	adds	r5, #4
 8006f02:	9114      	str	r1, [sp, #80]	; 0x50
 8006f04:	2900      	cmp	r1, #0
 8006f06:	db00      	blt.n	8006f0a <_svfprintf_r+0x2a2>
 8006f08:	e782      	b.n	8006e10 <_svfprintf_r+0x1a8>
 8006f0a:	4249      	negs	r1, r1
 8006f0c:	9114      	str	r1, [sp, #80]	; 0x50
 8006f0e:	2104      	movs	r1, #4
 8006f10:	e7f3      	b.n	8006efa <_svfprintf_r+0x292>
 8006f12:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006f14:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006f16:	7800      	ldrb	r0, [r0, #0]
 8006f18:	3101      	adds	r1, #1
 8006f1a:	900d      	str	r0, [sp, #52]	; 0x34
 8006f1c:	282a      	cmp	r0, #42	; 0x2a
 8006f1e:	d009      	beq.n	8006f34 <_svfprintf_r+0x2cc>
 8006f20:	2000      	movs	r0, #0
 8006f22:	900b      	str	r0, [sp, #44]	; 0x2c
 8006f24:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8006f26:	0008      	movs	r0, r1
 8006f28:	3c30      	subs	r4, #48	; 0x30
 8006f2a:	46a4      	mov	ip, r4
 8006f2c:	2c09      	cmp	r4, #9
 8006f2e:	d90c      	bls.n	8006f4a <_svfprintf_r+0x2e2>
 8006f30:	9011      	str	r0, [sp, #68]	; 0x44
 8006f32:	e708      	b.n	8006d46 <_svfprintf_r+0xde>
 8006f34:	682c      	ldr	r4, [r5, #0]
 8006f36:	1d28      	adds	r0, r5, #4
 8006f38:	940b      	str	r4, [sp, #44]	; 0x2c
 8006f3a:	2c00      	cmp	r4, #0
 8006f3c:	da02      	bge.n	8006f44 <_svfprintf_r+0x2dc>
 8006f3e:	2401      	movs	r4, #1
 8006f40:	4264      	negs	r4, r4
 8006f42:	940b      	str	r4, [sp, #44]	; 0x2c
 8006f44:	0005      	movs	r5, r0
 8006f46:	9111      	str	r1, [sp, #68]	; 0x44
 8006f48:	e762      	b.n	8006e10 <_svfprintf_r+0x1a8>
 8006f4a:	240a      	movs	r4, #10
 8006f4c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006f4e:	4360      	muls	r0, r4
 8006f50:	4460      	add	r0, ip
 8006f52:	900b      	str	r0, [sp, #44]	; 0x2c
 8006f54:	7808      	ldrb	r0, [r1, #0]
 8006f56:	3101      	adds	r1, #1
 8006f58:	900d      	str	r0, [sp, #52]	; 0x34
 8006f5a:	e7e3      	b.n	8006f24 <_svfprintf_r+0x2bc>
 8006f5c:	2180      	movs	r1, #128	; 0x80
 8006f5e:	e7cc      	b.n	8006efa <_svfprintf_r+0x292>
 8006f60:	2100      	movs	r1, #0
 8006f62:	9114      	str	r1, [sp, #80]	; 0x50
 8006f64:	200a      	movs	r0, #10
 8006f66:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006f68:	4341      	muls	r1, r0
 8006f6a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006f6c:	3830      	subs	r0, #48	; 0x30
 8006f6e:	1841      	adds	r1, r0, r1
 8006f70:	9114      	str	r1, [sp, #80]	; 0x50
 8006f72:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006f74:	1c48      	adds	r0, r1, #1
 8006f76:	7809      	ldrb	r1, [r1, #0]
 8006f78:	9011      	str	r0, [sp, #68]	; 0x44
 8006f7a:	910d      	str	r1, [sp, #52]	; 0x34
 8006f7c:	3930      	subs	r1, #48	; 0x30
 8006f7e:	2909      	cmp	r1, #9
 8006f80:	d9f0      	bls.n	8006f64 <_svfprintf_r+0x2fc>
 8006f82:	e7d5      	b.n	8006f30 <_svfprintf_r+0x2c8>
 8006f84:	2108      	movs	r1, #8
 8006f86:	e7b8      	b.n	8006efa <_svfprintf_r+0x292>
 8006f88:	2140      	movs	r1, #64	; 0x40
 8006f8a:	e7b6      	b.n	8006efa <_svfprintf_r+0x292>
 8006f8c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006f8e:	7809      	ldrb	r1, [r1, #0]
 8006f90:	296c      	cmp	r1, #108	; 0x6c
 8006f92:	d104      	bne.n	8006f9e <_svfprintf_r+0x336>
 8006f94:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006f96:	3101      	adds	r1, #1
 8006f98:	9111      	str	r1, [sp, #68]	; 0x44
 8006f9a:	2120      	movs	r1, #32
 8006f9c:	e7ad      	b.n	8006efa <_svfprintf_r+0x292>
 8006f9e:	2110      	movs	r1, #16
 8006fa0:	e7ab      	b.n	8006efa <_svfprintf_r+0x292>
 8006fa2:	1d2b      	adds	r3, r5, #4
 8006fa4:	682a      	ldr	r2, [r5, #0]
 8006fa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fa8:	ab2a      	add	r3, sp, #168	; 0xa8
 8006faa:	701a      	strb	r2, [r3, #0]
 8006fac:	221f      	movs	r2, #31
 8006fae:	2400      	movs	r4, #0
 8006fb0:	a918      	add	r1, sp, #96	; 0x60
 8006fb2:	1852      	adds	r2, r2, r1
 8006fb4:	7014      	strb	r4, [r2, #0]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	9410      	str	r4, [sp, #64]	; 0x40
 8006fba:	920b      	str	r2, [sp, #44]	; 0x2c
 8006fbc:	930c      	str	r3, [sp, #48]	; 0x30
 8006fbe:	e134      	b.n	800722a <_svfprintf_r+0x5c2>
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d003      	beq.n	8006fcc <_svfprintf_r+0x364>
 8006fc4:	231f      	movs	r3, #31
 8006fc6:	a918      	add	r1, sp, #96	; 0x60
 8006fc8:	185b      	adds	r3, r3, r1
 8006fca:	701a      	strb	r2, [r3, #0]
 8006fcc:	2310      	movs	r3, #16
 8006fce:	431e      	orrs	r6, r3
 8006fd0:	e726      	b.n	8006e20 <_svfprintf_r+0x1b8>
 8006fd2:	1d2a      	adds	r2, r5, #4
 8006fd4:	06f3      	lsls	r3, r6, #27
 8006fd6:	d505      	bpl.n	8006fe4 <_svfprintf_r+0x37c>
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	920f      	str	r2, [sp, #60]	; 0x3c
 8006fdc:	9306      	str	r3, [sp, #24]
 8006fde:	17db      	asrs	r3, r3, #31
 8006fe0:	9307      	str	r3, [sp, #28]
 8006fe2:	e72a      	b.n	8006e3a <_svfprintf_r+0x1d2>
 8006fe4:	682b      	ldr	r3, [r5, #0]
 8006fe6:	920f      	str	r2, [sp, #60]	; 0x3c
 8006fe8:	0671      	lsls	r1, r6, #25
 8006fea:	d5f7      	bpl.n	8006fdc <_svfprintf_r+0x374>
 8006fec:	b21b      	sxth	r3, r3
 8006fee:	e7f5      	b.n	8006fdc <_svfprintf_r+0x374>
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <_svfprintf_r+0x394>
 8006ff4:	231f      	movs	r3, #31
 8006ff6:	a918      	add	r1, sp, #96	; 0x60
 8006ff8:	185b      	adds	r3, r3, r1
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	2307      	movs	r3, #7
 8006ffe:	3507      	adds	r5, #7
 8007000:	439d      	bics	r5, r3
 8007002:	002b      	movs	r3, r5
 8007004:	2201      	movs	r2, #1
 8007006:	3308      	adds	r3, #8
 8007008:	930f      	str	r3, [sp, #60]	; 0x3c
 800700a:	682b      	ldr	r3, [r5, #0]
 800700c:	4252      	negs	r2, r2
 800700e:	9316      	str	r3, [sp, #88]	; 0x58
 8007010:	686b      	ldr	r3, [r5, #4]
 8007012:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8007014:	9317      	str	r3, [sp, #92]	; 0x5c
 8007016:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007018:	0028      	movs	r0, r5
 800701a:	005c      	lsls	r4, r3, #1
 800701c:	0864      	lsrs	r4, r4, #1
 800701e:	4b30      	ldr	r3, [pc, #192]	; (80070e0 <_svfprintf_r+0x478>)
 8007020:	0021      	movs	r1, r4
 8007022:	f7fb f801 	bl	8002028 <__aeabi_dcmpun>
 8007026:	2800      	cmp	r0, #0
 8007028:	d001      	beq.n	800702e <_svfprintf_r+0x3c6>
 800702a:	f000 fe44 	bl	8007cb6 <_svfprintf_r+0x104e>
 800702e:	2201      	movs	r2, #1
 8007030:	4b2b      	ldr	r3, [pc, #172]	; (80070e0 <_svfprintf_r+0x478>)
 8007032:	4252      	negs	r2, r2
 8007034:	0028      	movs	r0, r5
 8007036:	0021      	movs	r1, r4
 8007038:	f7f9 fa1e 	bl	8000478 <__aeabi_dcmple>
 800703c:	2800      	cmp	r0, #0
 800703e:	d001      	beq.n	8007044 <_svfprintf_r+0x3dc>
 8007040:	f000 fe39 	bl	8007cb6 <_svfprintf_r+0x104e>
 8007044:	2200      	movs	r2, #0
 8007046:	2300      	movs	r3, #0
 8007048:	9816      	ldr	r0, [sp, #88]	; 0x58
 800704a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800704c:	f7f9 fa0a 	bl	8000464 <__aeabi_dcmplt>
 8007050:	2800      	cmp	r0, #0
 8007052:	d004      	beq.n	800705e <_svfprintf_r+0x3f6>
 8007054:	231f      	movs	r3, #31
 8007056:	222d      	movs	r2, #45	; 0x2d
 8007058:	a918      	add	r1, sp, #96	; 0x60
 800705a:	185b      	adds	r3, r3, r1
 800705c:	701a      	strb	r2, [r3, #0]
 800705e:	4b21      	ldr	r3, [pc, #132]	; (80070e4 <_svfprintf_r+0x47c>)
 8007060:	930c      	str	r3, [sp, #48]	; 0x30
 8007062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007064:	2b47      	cmp	r3, #71	; 0x47
 8007066:	dc01      	bgt.n	800706c <_svfprintf_r+0x404>
 8007068:	4b1f      	ldr	r3, [pc, #124]	; (80070e8 <_svfprintf_r+0x480>)
 800706a:	930c      	str	r3, [sp, #48]	; 0x30
 800706c:	2380      	movs	r3, #128	; 0x80
 800706e:	2400      	movs	r4, #0
 8007070:	439e      	bics	r6, r3
 8007072:	3b7d      	subs	r3, #125	; 0x7d
 8007074:	930b      	str	r3, [sp, #44]	; 0x2c
 8007076:	9410      	str	r4, [sp, #64]	; 0x40
 8007078:	e0d7      	b.n	800722a <_svfprintf_r+0x5c2>
 800707a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800707c:	3301      	adds	r3, #1
 800707e:	d024      	beq.n	80070ca <_svfprintf_r+0x462>
 8007080:	2320      	movs	r3, #32
 8007082:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007084:	439a      	bics	r2, r3
 8007086:	2a47      	cmp	r2, #71	; 0x47
 8007088:	d102      	bne.n	8007090 <_svfprintf_r+0x428>
 800708a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800708c:	2b00      	cmp	r3, #0
 800708e:	d01f      	beq.n	80070d0 <_svfprintf_r+0x468>
 8007090:	2380      	movs	r3, #128	; 0x80
 8007092:	005b      	lsls	r3, r3, #1
 8007094:	4333      	orrs	r3, r6
 8007096:	931c      	str	r3, [sp, #112]	; 0x70
 8007098:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800709a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800709c:	9310      	str	r3, [sp, #64]	; 0x40
 800709e:	2c00      	cmp	r4, #0
 80070a0:	da18      	bge.n	80070d4 <_svfprintf_r+0x46c>
 80070a2:	2280      	movs	r2, #128	; 0x80
 80070a4:	0612      	lsls	r2, r2, #24
 80070a6:	0023      	movs	r3, r4
 80070a8:	4694      	mov	ip, r2
 80070aa:	4463      	add	r3, ip
 80070ac:	9315      	str	r3, [sp, #84]	; 0x54
 80070ae:	232d      	movs	r3, #45	; 0x2d
 80070b0:	931b      	str	r3, [sp, #108]	; 0x6c
 80070b2:	2320      	movs	r3, #32
 80070b4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80070b6:	439c      	bics	r4, r3
 80070b8:	2c46      	cmp	r4, #70	; 0x46
 80070ba:	d017      	beq.n	80070ec <_svfprintf_r+0x484>
 80070bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80070be:	2c45      	cmp	r4, #69	; 0x45
 80070c0:	d101      	bne.n	80070c6 <_svfprintf_r+0x45e>
 80070c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070c4:	1c5d      	adds	r5, r3, #1
 80070c6:	2302      	movs	r3, #2
 80070c8:	e012      	b.n	80070f0 <_svfprintf_r+0x488>
 80070ca:	2306      	movs	r3, #6
 80070cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80070ce:	e7df      	b.n	8007090 <_svfprintf_r+0x428>
 80070d0:	2301      	movs	r3, #1
 80070d2:	e7fb      	b.n	80070cc <_svfprintf_r+0x464>
 80070d4:	9415      	str	r4, [sp, #84]	; 0x54
 80070d6:	2300      	movs	r3, #0
 80070d8:	e7ea      	b.n	80070b0 <_svfprintf_r+0x448>
 80070da:	46c0      	nop			; (mov r8, r8)
 80070dc:	0800988c 	.word	0x0800988c
 80070e0:	7fefffff 	.word	0x7fefffff
 80070e4:	08009880 	.word	0x08009880
 80070e8:	0800987c 	.word	0x0800987c
 80070ec:	2303      	movs	r3, #3
 80070ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80070f0:	aa25      	add	r2, sp, #148	; 0x94
 80070f2:	9204      	str	r2, [sp, #16]
 80070f4:	aa22      	add	r2, sp, #136	; 0x88
 80070f6:	9203      	str	r2, [sp, #12]
 80070f8:	aa21      	add	r2, sp, #132	; 0x84
 80070fa:	9202      	str	r2, [sp, #8]
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	9501      	str	r5, [sp, #4]
 8007100:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007102:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007104:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007106:	f000 fecd 	bl	8007ea4 <_dtoa_r>
 800710a:	900c      	str	r0, [sp, #48]	; 0x30
 800710c:	2c47      	cmp	r4, #71	; 0x47
 800710e:	d103      	bne.n	8007118 <_svfprintf_r+0x4b0>
 8007110:	07f3      	lsls	r3, r6, #31
 8007112:	d401      	bmi.n	8007118 <_svfprintf_r+0x4b0>
 8007114:	f000 fde3 	bl	8007cde <_svfprintf_r+0x1076>
 8007118:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800711a:	195b      	adds	r3, r3, r5
 800711c:	930e      	str	r3, [sp, #56]	; 0x38
 800711e:	2c46      	cmp	r4, #70	; 0x46
 8007120:	d113      	bne.n	800714a <_svfprintf_r+0x4e2>
 8007122:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	2b30      	cmp	r3, #48	; 0x30
 8007128:	d10a      	bne.n	8007140 <_svfprintf_r+0x4d8>
 800712a:	2200      	movs	r2, #0
 800712c:	2300      	movs	r3, #0
 800712e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007130:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007132:	f7f9 f991 	bl	8000458 <__aeabi_dcmpeq>
 8007136:	2800      	cmp	r0, #0
 8007138:	d102      	bne.n	8007140 <_svfprintf_r+0x4d8>
 800713a:	2301      	movs	r3, #1
 800713c:	1b5d      	subs	r5, r3, r5
 800713e:	9521      	str	r5, [sp, #132]	; 0x84
 8007140:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007144:	4694      	mov	ip, r2
 8007146:	4463      	add	r3, ip
 8007148:	930e      	str	r3, [sp, #56]	; 0x38
 800714a:	2200      	movs	r2, #0
 800714c:	2300      	movs	r3, #0
 800714e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007150:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007152:	f7f9 f981 	bl	8000458 <__aeabi_dcmpeq>
 8007156:	2230      	movs	r2, #48	; 0x30
 8007158:	2800      	cmp	r0, #0
 800715a:	d100      	bne.n	800715e <_svfprintf_r+0x4f6>
 800715c:	e13d      	b.n	80073da <_svfprintf_r+0x772>
 800715e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007160:	9325      	str	r3, [sp, #148]	; 0x94
 8007162:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007164:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007166:	1a9b      	subs	r3, r3, r2
 8007168:	930e      	str	r3, [sp, #56]	; 0x38
 800716a:	2c47      	cmp	r4, #71	; 0x47
 800716c:	d000      	beq.n	8007170 <_svfprintf_r+0x508>
 800716e:	e139      	b.n	80073e4 <_svfprintf_r+0x77c>
 8007170:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007172:	1cda      	adds	r2, r3, #3
 8007174:	db03      	blt.n	800717e <_svfprintf_r+0x516>
 8007176:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007178:	429a      	cmp	r2, r3
 800717a:	db00      	blt.n	800717e <_svfprintf_r+0x516>
 800717c:	e162      	b.n	8007444 <_svfprintf_r+0x7dc>
 800717e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007180:	3b02      	subs	r3, #2
 8007182:	930d      	str	r3, [sp, #52]	; 0x34
 8007184:	4669      	mov	r1, sp
 8007186:	2034      	movs	r0, #52	; 0x34
 8007188:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800718a:	1809      	adds	r1, r1, r0
 800718c:	7809      	ldrb	r1, [r1, #0]
 800718e:	1e54      	subs	r4, r2, #1
 8007190:	ab23      	add	r3, sp, #140	; 0x8c
 8007192:	9421      	str	r4, [sp, #132]	; 0x84
 8007194:	7019      	strb	r1, [r3, #0]
 8007196:	2c00      	cmp	r4, #0
 8007198:	db00      	blt.n	800719c <_svfprintf_r+0x534>
 800719a:	e13a      	b.n	8007412 <_svfprintf_r+0x7aa>
 800719c:	2401      	movs	r4, #1
 800719e:	1aa4      	subs	r4, r4, r2
 80071a0:	222d      	movs	r2, #45	; 0x2d
 80071a2:	705a      	strb	r2, [r3, #1]
 80071a4:	2c09      	cmp	r4, #9
 80071a6:	dc00      	bgt.n	80071aa <_svfprintf_r+0x542>
 80071a8:	e13c      	b.n	8007424 <_svfprintf_r+0x7bc>
 80071aa:	253b      	movs	r5, #59	; 0x3b
 80071ac:	ab18      	add	r3, sp, #96	; 0x60
 80071ae:	18ed      	adds	r5, r5, r3
 80071b0:	1e6b      	subs	r3, r5, #1
 80071b2:	0020      	movs	r0, r4
 80071b4:	210a      	movs	r1, #10
 80071b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80071b8:	f7f9 f938 	bl	800042c <__aeabi_idivmod>
 80071bc:	1e6b      	subs	r3, r5, #1
 80071be:	3130      	adds	r1, #48	; 0x30
 80071c0:	7019      	strb	r1, [r3, #0]
 80071c2:	0020      	movs	r0, r4
 80071c4:	210a      	movs	r1, #10
 80071c6:	f7f9 f84b 	bl	8000260 <__divsi3>
 80071ca:	0004      	movs	r4, r0
 80071cc:	2809      	cmp	r0, #9
 80071ce:	dd00      	ble.n	80071d2 <_svfprintf_r+0x56a>
 80071d0:	e121      	b.n	8007416 <_svfprintf_r+0x7ae>
 80071d2:	232e      	movs	r3, #46	; 0x2e
 80071d4:	213b      	movs	r1, #59	; 0x3b
 80071d6:	aa18      	add	r2, sp, #96	; 0x60
 80071d8:	3d02      	subs	r5, #2
 80071da:	3430      	adds	r4, #48	; 0x30
 80071dc:	702c      	strb	r4, [r5, #0]
 80071de:	189b      	adds	r3, r3, r2
 80071e0:	1889      	adds	r1, r1, r2
 80071e2:	001a      	movs	r2, r3
 80071e4:	428d      	cmp	r5, r1
 80071e6:	d200      	bcs.n	80071ea <_svfprintf_r+0x582>
 80071e8:	e117      	b.n	800741a <_svfprintf_r+0x7b2>
 80071ea:	ab23      	add	r3, sp, #140	; 0x8c
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	9319      	str	r3, [sp, #100]	; 0x64
 80071f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80071f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071f4:	4694      	mov	ip, r2
 80071f6:	4463      	add	r3, ip
 80071f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80071fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	dc03      	bgt.n	8007208 <_svfprintf_r+0x5a0>
 8007200:	2301      	movs	r3, #1
 8007202:	401e      	ands	r6, r3
 8007204:	9610      	str	r6, [sp, #64]	; 0x40
 8007206:	d006      	beq.n	8007216 <_svfprintf_r+0x5ae>
 8007208:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800720a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800720c:	4694      	mov	ip, r2
 800720e:	4463      	add	r3, ip
 8007210:	930b      	str	r3, [sp, #44]	; 0x2c
 8007212:	2300      	movs	r3, #0
 8007214:	9310      	str	r3, [sp, #64]	; 0x40
 8007216:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007218:	2b00      	cmp	r3, #0
 800721a:	d004      	beq.n	8007226 <_svfprintf_r+0x5be>
 800721c:	231f      	movs	r3, #31
 800721e:	222d      	movs	r2, #45	; 0x2d
 8007220:	a918      	add	r1, sp, #96	; 0x60
 8007222:	185b      	adds	r3, r3, r1
 8007224:	701a      	strb	r2, [r3, #0]
 8007226:	2400      	movs	r4, #0
 8007228:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800722a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800722c:	9415      	str	r4, [sp, #84]	; 0x54
 800722e:	429c      	cmp	r4, r3
 8007230:	da00      	bge.n	8007234 <_svfprintf_r+0x5cc>
 8007232:	9315      	str	r3, [sp, #84]	; 0x54
 8007234:	231f      	movs	r3, #31
 8007236:	aa18      	add	r2, sp, #96	; 0x60
 8007238:	189b      	adds	r3, r3, r2
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	1e5a      	subs	r2, r3, #1
 800723e:	4193      	sbcs	r3, r2
 8007240:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007242:	18d3      	adds	r3, r2, r3
 8007244:	9315      	str	r3, [sp, #84]	; 0x54
 8007246:	2302      	movs	r3, #2
 8007248:	4033      	ands	r3, r6
 800724a:	931b      	str	r3, [sp, #108]	; 0x6c
 800724c:	d002      	beq.n	8007254 <_svfprintf_r+0x5ec>
 800724e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007250:	3302      	adds	r3, #2
 8007252:	9315      	str	r3, [sp, #84]	; 0x54
 8007254:	2384      	movs	r3, #132	; 0x84
 8007256:	4033      	ands	r3, r6
 8007258:	931c      	str	r3, [sp, #112]	; 0x70
 800725a:	d11e      	bne.n	800729a <_svfprintf_r+0x632>
 800725c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800725e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007260:	1a9d      	subs	r5, r3, r2
 8007262:	2d00      	cmp	r5, #0
 8007264:	dd19      	ble.n	800729a <_svfprintf_r+0x632>
 8007266:	4bcc      	ldr	r3, [pc, #816]	; (8007598 <_svfprintf_r+0x930>)
 8007268:	603b      	str	r3, [r7, #0]
 800726a:	2d10      	cmp	r5, #16
 800726c:	dd00      	ble.n	8007270 <_svfprintf_r+0x608>
 800726e:	e230      	b.n	80076d2 <_svfprintf_r+0xa6a>
 8007270:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007272:	607d      	str	r5, [r7, #4]
 8007274:	195d      	adds	r5, r3, r5
 8007276:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007278:	9529      	str	r5, [sp, #164]	; 0xa4
 800727a:	931d      	str	r3, [sp, #116]	; 0x74
 800727c:	3301      	adds	r3, #1
 800727e:	9328      	str	r3, [sp, #160]	; 0xa0
 8007280:	3708      	adds	r7, #8
 8007282:	2b07      	cmp	r3, #7
 8007284:	dd09      	ble.n	800729a <_svfprintf_r+0x632>
 8007286:	aa27      	add	r2, sp, #156	; 0x9c
 8007288:	9909      	ldr	r1, [sp, #36]	; 0x24
 800728a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800728c:	f001 fff6 	bl	800927c <__ssprint_r>
 8007290:	2800      	cmp	r0, #0
 8007292:	d001      	beq.n	8007298 <_svfprintf_r+0x630>
 8007294:	f000 fce6 	bl	8007c64 <_svfprintf_r+0xffc>
 8007298:	af34      	add	r7, sp, #208	; 0xd0
 800729a:	231f      	movs	r3, #31
 800729c:	aa18      	add	r2, sp, #96	; 0x60
 800729e:	189b      	adds	r3, r3, r2
 80072a0:	781a      	ldrb	r2, [r3, #0]
 80072a2:	2a00      	cmp	r2, #0
 80072a4:	d016      	beq.n	80072d4 <_svfprintf_r+0x66c>
 80072a6:	603b      	str	r3, [r7, #0]
 80072a8:	2301      	movs	r3, #1
 80072aa:	607b      	str	r3, [r7, #4]
 80072ac:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80072ae:	3708      	adds	r7, #8
 80072b0:	3301      	adds	r3, #1
 80072b2:	9329      	str	r3, [sp, #164]	; 0xa4
 80072b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80072b6:	931d      	str	r3, [sp, #116]	; 0x74
 80072b8:	3301      	adds	r3, #1
 80072ba:	9328      	str	r3, [sp, #160]	; 0xa0
 80072bc:	2b07      	cmp	r3, #7
 80072be:	dd09      	ble.n	80072d4 <_svfprintf_r+0x66c>
 80072c0:	aa27      	add	r2, sp, #156	; 0x9c
 80072c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80072c6:	f001 ffd9 	bl	800927c <__ssprint_r>
 80072ca:	2800      	cmp	r0, #0
 80072cc:	d001      	beq.n	80072d2 <_svfprintf_r+0x66a>
 80072ce:	f000 fcc9 	bl	8007c64 <_svfprintf_r+0xffc>
 80072d2:	af34      	add	r7, sp, #208	; 0xd0
 80072d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d017      	beq.n	800730a <_svfprintf_r+0x6a2>
 80072da:	ab20      	add	r3, sp, #128	; 0x80
 80072dc:	603b      	str	r3, [r7, #0]
 80072de:	2302      	movs	r3, #2
 80072e0:	607b      	str	r3, [r7, #4]
 80072e2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80072e4:	3708      	adds	r7, #8
 80072e6:	3302      	adds	r3, #2
 80072e8:	9329      	str	r3, [sp, #164]	; 0xa4
 80072ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80072ec:	931b      	str	r3, [sp, #108]	; 0x6c
 80072ee:	3301      	adds	r3, #1
 80072f0:	9328      	str	r3, [sp, #160]	; 0xa0
 80072f2:	2b07      	cmp	r3, #7
 80072f4:	dd09      	ble.n	800730a <_svfprintf_r+0x6a2>
 80072f6:	aa27      	add	r2, sp, #156	; 0x9c
 80072f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80072fc:	f001 ffbe 	bl	800927c <__ssprint_r>
 8007300:	2800      	cmp	r0, #0
 8007302:	d001      	beq.n	8007308 <_svfprintf_r+0x6a0>
 8007304:	f000 fcae 	bl	8007c64 <_svfprintf_r+0xffc>
 8007308:	af34      	add	r7, sp, #208	; 0xd0
 800730a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800730c:	2b80      	cmp	r3, #128	; 0x80
 800730e:	d11e      	bne.n	800734e <_svfprintf_r+0x6e6>
 8007310:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007312:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007314:	1a9d      	subs	r5, r3, r2
 8007316:	2d00      	cmp	r5, #0
 8007318:	dd19      	ble.n	800734e <_svfprintf_r+0x6e6>
 800731a:	4ba0      	ldr	r3, [pc, #640]	; (800759c <_svfprintf_r+0x934>)
 800731c:	603b      	str	r3, [r7, #0]
 800731e:	2d10      	cmp	r5, #16
 8007320:	dd00      	ble.n	8007324 <_svfprintf_r+0x6bc>
 8007322:	e1ed      	b.n	8007700 <_svfprintf_r+0xa98>
 8007324:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007326:	607d      	str	r5, [r7, #4]
 8007328:	195d      	adds	r5, r3, r5
 800732a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800732c:	9529      	str	r5, [sp, #164]	; 0xa4
 800732e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007330:	3301      	adds	r3, #1
 8007332:	9328      	str	r3, [sp, #160]	; 0xa0
 8007334:	3708      	adds	r7, #8
 8007336:	2b07      	cmp	r3, #7
 8007338:	dd09      	ble.n	800734e <_svfprintf_r+0x6e6>
 800733a:	aa27      	add	r2, sp, #156	; 0x9c
 800733c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800733e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007340:	f001 ff9c 	bl	800927c <__ssprint_r>
 8007344:	2800      	cmp	r0, #0
 8007346:	d001      	beq.n	800734c <_svfprintf_r+0x6e4>
 8007348:	f000 fc8c 	bl	8007c64 <_svfprintf_r+0xffc>
 800734c:	af34      	add	r7, sp, #208	; 0xd0
 800734e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007350:	2510      	movs	r5, #16
 8007352:	1ae4      	subs	r4, r4, r3
 8007354:	2c00      	cmp	r4, #0
 8007356:	dd00      	ble.n	800735a <_svfprintf_r+0x6f2>
 8007358:	e1fe      	b.n	8007758 <_svfprintf_r+0xaf0>
 800735a:	05f3      	lsls	r3, r6, #23
 800735c:	d500      	bpl.n	8007360 <_svfprintf_r+0x6f8>
 800735e:	e215      	b.n	800778c <_svfprintf_r+0xb24>
 8007360:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007362:	603b      	str	r3, [r7, #0]
 8007364:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007366:	607b      	str	r3, [r7, #4]
 8007368:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800736a:	3708      	adds	r7, #8
 800736c:	930c      	str	r3, [sp, #48]	; 0x30
 800736e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007370:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007372:	4694      	mov	ip, r2
 8007374:	4463      	add	r3, ip
 8007376:	9329      	str	r3, [sp, #164]	; 0xa4
 8007378:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800737a:	930b      	str	r3, [sp, #44]	; 0x2c
 800737c:	3301      	adds	r3, #1
 800737e:	9328      	str	r3, [sp, #160]	; 0xa0
 8007380:	2b07      	cmp	r3, #7
 8007382:	dd09      	ble.n	8007398 <_svfprintf_r+0x730>
 8007384:	aa27      	add	r2, sp, #156	; 0x9c
 8007386:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007388:	980a      	ldr	r0, [sp, #40]	; 0x28
 800738a:	f001 ff77 	bl	800927c <__ssprint_r>
 800738e:	2800      	cmp	r0, #0
 8007390:	d001      	beq.n	8007396 <_svfprintf_r+0x72e>
 8007392:	f000 fc67 	bl	8007c64 <_svfprintf_r+0xffc>
 8007396:	af34      	add	r7, sp, #208	; 0xd0
 8007398:	0773      	lsls	r3, r6, #29
 800739a:	d501      	bpl.n	80073a0 <_svfprintf_r+0x738>
 800739c:	f000 fc41 	bl	8007c22 <_svfprintf_r+0xfba>
 80073a0:	9914      	ldr	r1, [sp, #80]	; 0x50
 80073a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073a4:	4299      	cmp	r1, r3
 80073a6:	da00      	bge.n	80073aa <_svfprintf_r+0x742>
 80073a8:	0019      	movs	r1, r3
 80073aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073ac:	185b      	adds	r3, r3, r1
 80073ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80073b0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80073b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d008      	beq.n	80073ca <_svfprintf_r+0x762>
 80073b8:	aa27      	add	r2, sp, #156	; 0x9c
 80073ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80073be:	f001 ff5d 	bl	800927c <__ssprint_r>
 80073c2:	2800      	cmp	r0, #0
 80073c4:	d001      	beq.n	80073ca <_svfprintf_r+0x762>
 80073c6:	f000 fc4d 	bl	8007c64 <_svfprintf_r+0xffc>
 80073ca:	2300      	movs	r3, #0
 80073cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80073ce:	9328      	str	r3, [sp, #160]	; 0xa0
 80073d0:	af34      	add	r7, sp, #208	; 0xd0
 80073d2:	e480      	b.n	8006cd6 <_svfprintf_r+0x6e>
 80073d4:	1c59      	adds	r1, r3, #1
 80073d6:	9125      	str	r1, [sp, #148]	; 0x94
 80073d8:	701a      	strb	r2, [r3, #0]
 80073da:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80073dc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80073de:	4299      	cmp	r1, r3
 80073e0:	d8f8      	bhi.n	80073d4 <_svfprintf_r+0x76c>
 80073e2:	e6be      	b.n	8007162 <_svfprintf_r+0x4fa>
 80073e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073e6:	2b65      	cmp	r3, #101	; 0x65
 80073e8:	dc00      	bgt.n	80073ec <_svfprintf_r+0x784>
 80073ea:	e6cb      	b.n	8007184 <_svfprintf_r+0x51c>
 80073ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073ee:	2b66      	cmp	r3, #102	; 0x66
 80073f0:	d128      	bne.n	8007444 <_svfprintf_r+0x7dc>
 80073f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	dd1c      	ble.n	8007432 <_svfprintf_r+0x7ca>
 80073f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073fa:	2a00      	cmp	r2, #0
 80073fc:	d101      	bne.n	8007402 <_svfprintf_r+0x79a>
 80073fe:	07f2      	lsls	r2, r6, #31
 8007400:	d503      	bpl.n	800740a <_svfprintf_r+0x7a2>
 8007402:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007404:	189b      	adds	r3, r3, r2
 8007406:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007408:	189b      	adds	r3, r3, r2
 800740a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800740c:	930b      	str	r3, [sp, #44]	; 0x2c
 800740e:	9210      	str	r2, [sp, #64]	; 0x40
 8007410:	e701      	b.n	8007216 <_svfprintf_r+0x5ae>
 8007412:	222b      	movs	r2, #43	; 0x2b
 8007414:	e6c5      	b.n	80071a2 <_svfprintf_r+0x53a>
 8007416:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007418:	e6ca      	b.n	80071b0 <_svfprintf_r+0x548>
 800741a:	782a      	ldrb	r2, [r5, #0]
 800741c:	3501      	adds	r5, #1
 800741e:	701a      	strb	r2, [r3, #0]
 8007420:	3301      	adds	r3, #1
 8007422:	e6de      	b.n	80071e2 <_svfprintf_r+0x57a>
 8007424:	2230      	movs	r2, #48	; 0x30
 8007426:	ab23      	add	r3, sp, #140	; 0x8c
 8007428:	18a4      	adds	r4, r4, r2
 800742a:	709a      	strb	r2, [r3, #2]
 800742c:	70dc      	strb	r4, [r3, #3]
 800742e:	aa24      	add	r2, sp, #144	; 0x90
 8007430:	e6db      	b.n	80071ea <_svfprintf_r+0x582>
 8007432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007434:	2b00      	cmp	r3, #0
 8007436:	d102      	bne.n	800743e <_svfprintf_r+0x7d6>
 8007438:	3301      	adds	r3, #1
 800743a:	421e      	tst	r6, r3
 800743c:	d0e5      	beq.n	800740a <_svfprintf_r+0x7a2>
 800743e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007440:	3301      	adds	r3, #1
 8007442:	e7e0      	b.n	8007406 <_svfprintf_r+0x79e>
 8007444:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007446:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007448:	429a      	cmp	r2, r3
 800744a:	db06      	blt.n	800745a <_svfprintf_r+0x7f2>
 800744c:	07f3      	lsls	r3, r6, #31
 800744e:	d50e      	bpl.n	800746e <_svfprintf_r+0x806>
 8007450:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007452:	18d3      	adds	r3, r2, r3
 8007454:	2267      	movs	r2, #103	; 0x67
 8007456:	920d      	str	r2, [sp, #52]	; 0x34
 8007458:	e7d7      	b.n	800740a <_svfprintf_r+0x7a2>
 800745a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800745c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800745e:	185b      	adds	r3, r3, r1
 8007460:	2167      	movs	r1, #103	; 0x67
 8007462:	910d      	str	r1, [sp, #52]	; 0x34
 8007464:	2a00      	cmp	r2, #0
 8007466:	dcd0      	bgt.n	800740a <_svfprintf_r+0x7a2>
 8007468:	1a9b      	subs	r3, r3, r2
 800746a:	3301      	adds	r3, #1
 800746c:	e7cd      	b.n	800740a <_svfprintf_r+0x7a2>
 800746e:	0013      	movs	r3, r2
 8007470:	e7f0      	b.n	8007454 <_svfprintf_r+0x7ec>
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <_svfprintf_r+0x816>
 8007476:	231f      	movs	r3, #31
 8007478:	a918      	add	r1, sp, #96	; 0x60
 800747a:	185b      	adds	r3, r3, r1
 800747c:	701a      	strb	r2, [r3, #0]
 800747e:	1d2b      	adds	r3, r5, #4
 8007480:	06b2      	lsls	r2, r6, #26
 8007482:	d506      	bpl.n	8007492 <_svfprintf_r+0x82a>
 8007484:	682a      	ldr	r2, [r5, #0]
 8007486:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007488:	6011      	str	r1, [r2, #0]
 800748a:	17c9      	asrs	r1, r1, #31
 800748c:	6051      	str	r1, [r2, #4]
 800748e:	001d      	movs	r5, r3
 8007490:	e421      	b.n	8006cd6 <_svfprintf_r+0x6e>
 8007492:	06f2      	lsls	r2, r6, #27
 8007494:	d503      	bpl.n	800749e <_svfprintf_r+0x836>
 8007496:	682a      	ldr	r2, [r5, #0]
 8007498:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800749a:	6011      	str	r1, [r2, #0]
 800749c:	e7f7      	b.n	800748e <_svfprintf_r+0x826>
 800749e:	0672      	lsls	r2, r6, #25
 80074a0:	d5f9      	bpl.n	8007496 <_svfprintf_r+0x82e>
 80074a2:	4669      	mov	r1, sp
 80074a4:	204c      	movs	r0, #76	; 0x4c
 80074a6:	1809      	adds	r1, r1, r0
 80074a8:	682a      	ldr	r2, [r5, #0]
 80074aa:	8809      	ldrh	r1, [r1, #0]
 80074ac:	8011      	strh	r1, [r2, #0]
 80074ae:	e7ee      	b.n	800748e <_svfprintf_r+0x826>
 80074b0:	2310      	movs	r3, #16
 80074b2:	431e      	orrs	r6, r3
 80074b4:	2120      	movs	r1, #32
 80074b6:	4031      	ands	r1, r6
 80074b8:	d010      	beq.n	80074dc <_svfprintf_r+0x874>
 80074ba:	2307      	movs	r3, #7
 80074bc:	3507      	adds	r5, #7
 80074be:	439d      	bics	r5, r3
 80074c0:	002b      	movs	r3, r5
 80074c2:	3308      	adds	r3, #8
 80074c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80074c6:	682b      	ldr	r3, [r5, #0]
 80074c8:	686c      	ldr	r4, [r5, #4]
 80074ca:	9306      	str	r3, [sp, #24]
 80074cc:	9407      	str	r4, [sp, #28]
 80074ce:	2300      	movs	r3, #0
 80074d0:	221f      	movs	r2, #31
 80074d2:	2100      	movs	r1, #0
 80074d4:	a818      	add	r0, sp, #96	; 0x60
 80074d6:	1812      	adds	r2, r2, r0
 80074d8:	7011      	strb	r1, [r2, #0]
 80074da:	e4bf      	b.n	8006e5c <_svfprintf_r+0x1f4>
 80074dc:	2210      	movs	r2, #16
 80074de:	1d28      	adds	r0, r5, #4
 80074e0:	4032      	ands	r2, r6
 80074e2:	d004      	beq.n	80074ee <_svfprintf_r+0x886>
 80074e4:	682b      	ldr	r3, [r5, #0]
 80074e6:	900f      	str	r0, [sp, #60]	; 0x3c
 80074e8:	9306      	str	r3, [sp, #24]
 80074ea:	9107      	str	r1, [sp, #28]
 80074ec:	e7ef      	b.n	80074ce <_svfprintf_r+0x866>
 80074ee:	2340      	movs	r3, #64	; 0x40
 80074f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80074f2:	4033      	ands	r3, r6
 80074f4:	d004      	beq.n	8007500 <_svfprintf_r+0x898>
 80074f6:	682b      	ldr	r3, [r5, #0]
 80074f8:	9207      	str	r2, [sp, #28]
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	9306      	str	r3, [sp, #24]
 80074fe:	e7e6      	b.n	80074ce <_svfprintf_r+0x866>
 8007500:	682a      	ldr	r2, [r5, #0]
 8007502:	9307      	str	r3, [sp, #28]
 8007504:	9206      	str	r2, [sp, #24]
 8007506:	e7e3      	b.n	80074d0 <_svfprintf_r+0x868>
 8007508:	1d2b      	adds	r3, r5, #4
 800750a:	930f      	str	r3, [sp, #60]	; 0x3c
 800750c:	682b      	ldr	r3, [r5, #0]
 800750e:	2078      	movs	r0, #120	; 0x78
 8007510:	2130      	movs	r1, #48	; 0x30
 8007512:	9306      	str	r3, [sp, #24]
 8007514:	2300      	movs	r3, #0
 8007516:	aa20      	add	r2, sp, #128	; 0x80
 8007518:	7011      	strb	r1, [r2, #0]
 800751a:	7050      	strb	r0, [r2, #1]
 800751c:	4a20      	ldr	r2, [pc, #128]	; (80075a0 <_svfprintf_r+0x938>)
 800751e:	9307      	str	r3, [sp, #28]
 8007520:	3302      	adds	r3, #2
 8007522:	431e      	orrs	r6, r3
 8007524:	921a      	str	r2, [sp, #104]	; 0x68
 8007526:	900d      	str	r0, [sp, #52]	; 0x34
 8007528:	e7d2      	b.n	80074d0 <_svfprintf_r+0x868>
 800752a:	1d2b      	adds	r3, r5, #4
 800752c:	930f      	str	r3, [sp, #60]	; 0x3c
 800752e:	682b      	ldr	r3, [r5, #0]
 8007530:	2400      	movs	r4, #0
 8007532:	930c      	str	r3, [sp, #48]	; 0x30
 8007534:	231f      	movs	r3, #31
 8007536:	aa18      	add	r2, sp, #96	; 0x60
 8007538:	189b      	adds	r3, r3, r2
 800753a:	701c      	strb	r4, [r3, #0]
 800753c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800753e:	3301      	adds	r3, #1
 8007540:	d00b      	beq.n	800755a <_svfprintf_r+0x8f2>
 8007542:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007544:	0021      	movs	r1, r4
 8007546:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007548:	f001 fbaa 	bl	8008ca0 <memchr>
 800754c:	42a0      	cmp	r0, r4
 800754e:	d100      	bne.n	8007552 <_svfprintf_r+0x8ea>
 8007550:	e0bd      	b.n	80076ce <_svfprintf_r+0xa66>
 8007552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007554:	1ac3      	subs	r3, r0, r3
 8007556:	930b      	str	r3, [sp, #44]	; 0x2c
 8007558:	e58d      	b.n	8007076 <_svfprintf_r+0x40e>
 800755a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800755c:	f7f8 fdd0 	bl	8000100 <strlen>
 8007560:	900b      	str	r0, [sp, #44]	; 0x2c
 8007562:	e588      	b.n	8007076 <_svfprintf_r+0x40e>
 8007564:	2310      	movs	r3, #16
 8007566:	431e      	orrs	r6, r3
 8007568:	2320      	movs	r3, #32
 800756a:	4033      	ands	r3, r6
 800756c:	d00b      	beq.n	8007586 <_svfprintf_r+0x91e>
 800756e:	2307      	movs	r3, #7
 8007570:	3507      	adds	r5, #7
 8007572:	439d      	bics	r5, r3
 8007574:	002b      	movs	r3, r5
 8007576:	3308      	adds	r3, #8
 8007578:	930f      	str	r3, [sp, #60]	; 0x3c
 800757a:	682b      	ldr	r3, [r5, #0]
 800757c:	686c      	ldr	r4, [r5, #4]
 800757e:	9306      	str	r3, [sp, #24]
 8007580:	9407      	str	r4, [sp, #28]
 8007582:	2301      	movs	r3, #1
 8007584:	e7a4      	b.n	80074d0 <_svfprintf_r+0x868>
 8007586:	2210      	movs	r2, #16
 8007588:	1d29      	adds	r1, r5, #4
 800758a:	4032      	ands	r2, r6
 800758c:	d00a      	beq.n	80075a4 <_svfprintf_r+0x93c>
 800758e:	910f      	str	r1, [sp, #60]	; 0x3c
 8007590:	682a      	ldr	r2, [r5, #0]
 8007592:	9307      	str	r3, [sp, #28]
 8007594:	9206      	str	r2, [sp, #24]
 8007596:	e7f4      	b.n	8007582 <_svfprintf_r+0x91a>
 8007598:	080098b0 	.word	0x080098b0
 800759c:	080098c0 	.word	0x080098c0
 80075a0:	0800989d 	.word	0x0800989d
 80075a4:	2340      	movs	r3, #64	; 0x40
 80075a6:	910f      	str	r1, [sp, #60]	; 0x3c
 80075a8:	4033      	ands	r3, r6
 80075aa:	d0f1      	beq.n	8007590 <_svfprintf_r+0x928>
 80075ac:	682b      	ldr	r3, [r5, #0]
 80075ae:	9207      	str	r2, [sp, #28]
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	9306      	str	r3, [sp, #24]
 80075b4:	e7e5      	b.n	8007582 <_svfprintf_r+0x91a>
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d003      	beq.n	80075c2 <_svfprintf_r+0x95a>
 80075ba:	231f      	movs	r3, #31
 80075bc:	a918      	add	r1, sp, #96	; 0x60
 80075be:	185b      	adds	r3, r3, r1
 80075c0:	701a      	strb	r2, [r3, #0]
 80075c2:	4baa      	ldr	r3, [pc, #680]	; (800786c <_svfprintf_r+0xc04>)
 80075c4:	e471      	b.n	8006eaa <_svfprintf_r+0x242>
 80075c6:	2210      	movs	r2, #16
 80075c8:	1d29      	adds	r1, r5, #4
 80075ca:	4032      	ands	r2, r6
 80075cc:	d004      	beq.n	80075d8 <_svfprintf_r+0x970>
 80075ce:	910f      	str	r1, [sp, #60]	; 0x3c
 80075d0:	682a      	ldr	r2, [r5, #0]
 80075d2:	9307      	str	r3, [sp, #28]
 80075d4:	9206      	str	r2, [sp, #24]
 80075d6:	e477      	b.n	8006ec8 <_svfprintf_r+0x260>
 80075d8:	2340      	movs	r3, #64	; 0x40
 80075da:	910f      	str	r1, [sp, #60]	; 0x3c
 80075dc:	4033      	ands	r3, r6
 80075de:	d0f7      	beq.n	80075d0 <_svfprintf_r+0x968>
 80075e0:	682b      	ldr	r3, [r5, #0]
 80075e2:	9207      	str	r2, [sp, #28]
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	9306      	str	r3, [sp, #24]
 80075e8:	e46e      	b.n	8006ec8 <_svfprintf_r+0x260>
 80075ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075ec:	e38a      	b.n	8007d04 <_svfprintf_r+0x109c>
 80075ee:	9b07      	ldr	r3, [sp, #28]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10a      	bne.n	800760a <_svfprintf_r+0x9a2>
 80075f4:	9b06      	ldr	r3, [sp, #24]
 80075f6:	2b09      	cmp	r3, #9
 80075f8:	d807      	bhi.n	800760a <_svfprintf_r+0x9a2>
 80075fa:	9b06      	ldr	r3, [sp, #24]
 80075fc:	aa2c      	add	r2, sp, #176	; 0xb0
 80075fe:	3330      	adds	r3, #48	; 0x30
 8007600:	77d3      	strb	r3, [r2, #31]
 8007602:	236f      	movs	r3, #111	; 0x6f
 8007604:	aa18      	add	r2, sp, #96	; 0x60
 8007606:	189b      	adds	r3, r3, r2
 8007608:	e39a      	b.n	8007d40 <_svfprintf_r+0x10d8>
 800760a:	ab34      	add	r3, sp, #208	; 0xd0
 800760c:	930c      	str	r3, [sp, #48]	; 0x30
 800760e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007610:	9806      	ldr	r0, [sp, #24]
 8007612:	9907      	ldr	r1, [sp, #28]
 8007614:	3b01      	subs	r3, #1
 8007616:	930c      	str	r3, [sp, #48]	; 0x30
 8007618:	220a      	movs	r2, #10
 800761a:	2300      	movs	r3, #0
 800761c:	f7f8 ff4a 	bl	80004b4 <__aeabi_uldivmod>
 8007620:	9806      	ldr	r0, [sp, #24]
 8007622:	9907      	ldr	r1, [sp, #28]
 8007624:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007626:	3230      	adds	r2, #48	; 0x30
 8007628:	701a      	strb	r2, [r3, #0]
 800762a:	220a      	movs	r2, #10
 800762c:	2300      	movs	r3, #0
 800762e:	f7f8 ff41 	bl	80004b4 <__aeabi_uldivmod>
 8007632:	9006      	str	r0, [sp, #24]
 8007634:	9107      	str	r1, [sp, #28]
 8007636:	9b06      	ldr	r3, [sp, #24]
 8007638:	9a07      	ldr	r2, [sp, #28]
 800763a:	4313      	orrs	r3, r2
 800763c:	d1e7      	bne.n	800760e <_svfprintf_r+0x9a6>
 800763e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007640:	ab34      	add	r3, sp, #208	; 0xd0
 8007642:	1a9b      	subs	r3, r3, r2
 8007644:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007646:	930b      	str	r3, [sp, #44]	; 0x2c
 8007648:	2300      	movs	r3, #0
 800764a:	002e      	movs	r6, r5
 800764c:	9310      	str	r3, [sp, #64]	; 0x40
 800764e:	e5ec      	b.n	800722a <_svfprintf_r+0x5c2>
 8007650:	2300      	movs	r3, #0
 8007652:	2400      	movs	r4, #0
 8007654:	9306      	str	r3, [sp, #24]
 8007656:	9407      	str	r4, [sp, #28]
 8007658:	200f      	movs	r0, #15
 800765a:	ab34      	add	r3, sp, #208	; 0xd0
 800765c:	930c      	str	r3, [sp, #48]	; 0x30
 800765e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007660:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007662:	3b01      	subs	r3, #1
 8007664:	930c      	str	r3, [sp, #48]	; 0x30
 8007666:	9b06      	ldr	r3, [sp, #24]
 8007668:	4003      	ands	r3, r0
 800766a:	5cd3      	ldrb	r3, [r2, r3]
 800766c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800766e:	7013      	strb	r3, [r2, #0]
 8007670:	9b07      	ldr	r3, [sp, #28]
 8007672:	0719      	lsls	r1, r3, #28
 8007674:	9b06      	ldr	r3, [sp, #24]
 8007676:	091a      	lsrs	r2, r3, #4
 8007678:	9b07      	ldr	r3, [sp, #28]
 800767a:	4311      	orrs	r1, r2
 800767c:	091b      	lsrs	r3, r3, #4
 800767e:	9307      	str	r3, [sp, #28]
 8007680:	000b      	movs	r3, r1
 8007682:	9a07      	ldr	r2, [sp, #28]
 8007684:	9106      	str	r1, [sp, #24]
 8007686:	4313      	orrs	r3, r2
 8007688:	d1e9      	bne.n	800765e <_svfprintf_r+0x9f6>
 800768a:	e7d8      	b.n	800763e <_svfprintf_r+0x9d6>
 800768c:	aa34      	add	r2, sp, #208	; 0xd0
 800768e:	920c      	str	r2, [sp, #48]	; 0x30
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1d4      	bne.n	800763e <_svfprintf_r+0x9d6>
 8007694:	07f3      	lsls	r3, r6, #31
 8007696:	d5d2      	bpl.n	800763e <_svfprintf_r+0x9d6>
 8007698:	2230      	movs	r2, #48	; 0x30
 800769a:	ab2c      	add	r3, sp, #176	; 0xb0
 800769c:	77da      	strb	r2, [r3, #31]
 800769e:	e7b0      	b.n	8007602 <_svfprintf_r+0x99a>
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d003      	beq.n	80076ac <_svfprintf_r+0xa44>
 80076a4:	231f      	movs	r3, #31
 80076a6:	a918      	add	r1, sp, #96	; 0x60
 80076a8:	185b      	adds	r3, r3, r1
 80076aa:	701a      	strb	r2, [r3, #0]
 80076ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d100      	bne.n	80076b4 <_svfprintf_r+0xa4c>
 80076b2:	e2f6      	b.n	8007ca2 <_svfprintf_r+0x103a>
 80076b4:	2134      	movs	r1, #52	; 0x34
 80076b6:	466a      	mov	r2, sp
 80076b8:	1852      	adds	r2, r2, r1
 80076ba:	7812      	ldrb	r2, [r2, #0]
 80076bc:	ab2a      	add	r3, sp, #168	; 0xa8
 80076be:	701a      	strb	r2, [r3, #0]
 80076c0:	221f      	movs	r2, #31
 80076c2:	2400      	movs	r4, #0
 80076c4:	a918      	add	r1, sp, #96	; 0x60
 80076c6:	1852      	adds	r2, r2, r1
 80076c8:	7014      	strb	r4, [r2, #0]
 80076ca:	950f      	str	r5, [sp, #60]	; 0x3c
 80076cc:	e473      	b.n	8006fb6 <_svfprintf_r+0x34e>
 80076ce:	0004      	movs	r4, r0
 80076d0:	e4d1      	b.n	8007076 <_svfprintf_r+0x40e>
 80076d2:	2310      	movs	r3, #16
 80076d4:	607b      	str	r3, [r7, #4]
 80076d6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80076d8:	3708      	adds	r7, #8
 80076da:	3310      	adds	r3, #16
 80076dc:	9329      	str	r3, [sp, #164]	; 0xa4
 80076de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80076e0:	931d      	str	r3, [sp, #116]	; 0x74
 80076e2:	3301      	adds	r3, #1
 80076e4:	9328      	str	r3, [sp, #160]	; 0xa0
 80076e6:	2b07      	cmp	r3, #7
 80076e8:	dd08      	ble.n	80076fc <_svfprintf_r+0xa94>
 80076ea:	aa27      	add	r2, sp, #156	; 0x9c
 80076ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 80076f0:	f001 fdc4 	bl	800927c <__ssprint_r>
 80076f4:	2800      	cmp	r0, #0
 80076f6:	d000      	beq.n	80076fa <_svfprintf_r+0xa92>
 80076f8:	e2b4      	b.n	8007c64 <_svfprintf_r+0xffc>
 80076fa:	af34      	add	r7, sp, #208	; 0xd0
 80076fc:	3d10      	subs	r5, #16
 80076fe:	e5b2      	b.n	8007266 <_svfprintf_r+0x5fe>
 8007700:	2310      	movs	r3, #16
 8007702:	607b      	str	r3, [r7, #4]
 8007704:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007706:	3708      	adds	r7, #8
 8007708:	3310      	adds	r3, #16
 800770a:	9329      	str	r3, [sp, #164]	; 0xa4
 800770c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800770e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007710:	3301      	adds	r3, #1
 8007712:	9328      	str	r3, [sp, #160]	; 0xa0
 8007714:	2b07      	cmp	r3, #7
 8007716:	dd08      	ble.n	800772a <_svfprintf_r+0xac2>
 8007718:	aa27      	add	r2, sp, #156	; 0x9c
 800771a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800771c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800771e:	f001 fdad 	bl	800927c <__ssprint_r>
 8007722:	2800      	cmp	r0, #0
 8007724:	d000      	beq.n	8007728 <_svfprintf_r+0xac0>
 8007726:	e29d      	b.n	8007c64 <_svfprintf_r+0xffc>
 8007728:	af34      	add	r7, sp, #208	; 0xd0
 800772a:	3d10      	subs	r5, #16
 800772c:	e5f5      	b.n	800731a <_svfprintf_r+0x6b2>
 800772e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007730:	607d      	str	r5, [r7, #4]
 8007732:	3310      	adds	r3, #16
 8007734:	9329      	str	r3, [sp, #164]	; 0xa4
 8007736:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007738:	3708      	adds	r7, #8
 800773a:	931b      	str	r3, [sp, #108]	; 0x6c
 800773c:	3301      	adds	r3, #1
 800773e:	9328      	str	r3, [sp, #160]	; 0xa0
 8007740:	2b07      	cmp	r3, #7
 8007742:	dd08      	ble.n	8007756 <_svfprintf_r+0xaee>
 8007744:	aa27      	add	r2, sp, #156	; 0x9c
 8007746:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007748:	980a      	ldr	r0, [sp, #40]	; 0x28
 800774a:	f001 fd97 	bl	800927c <__ssprint_r>
 800774e:	2800      	cmp	r0, #0
 8007750:	d000      	beq.n	8007754 <_svfprintf_r+0xaec>
 8007752:	e287      	b.n	8007c64 <_svfprintf_r+0xffc>
 8007754:	af34      	add	r7, sp, #208	; 0xd0
 8007756:	3c10      	subs	r4, #16
 8007758:	4b45      	ldr	r3, [pc, #276]	; (8007870 <_svfprintf_r+0xc08>)
 800775a:	603b      	str	r3, [r7, #0]
 800775c:	2c10      	cmp	r4, #16
 800775e:	dce6      	bgt.n	800772e <_svfprintf_r+0xac6>
 8007760:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007762:	607c      	str	r4, [r7, #4]
 8007764:	191c      	adds	r4, r3, r4
 8007766:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007768:	9429      	str	r4, [sp, #164]	; 0xa4
 800776a:	931b      	str	r3, [sp, #108]	; 0x6c
 800776c:	3301      	adds	r3, #1
 800776e:	9328      	str	r3, [sp, #160]	; 0xa0
 8007770:	3708      	adds	r7, #8
 8007772:	2b07      	cmp	r3, #7
 8007774:	dc00      	bgt.n	8007778 <_svfprintf_r+0xb10>
 8007776:	e5f0      	b.n	800735a <_svfprintf_r+0x6f2>
 8007778:	aa27      	add	r2, sp, #156	; 0x9c
 800777a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800777c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800777e:	f001 fd7d 	bl	800927c <__ssprint_r>
 8007782:	2800      	cmp	r0, #0
 8007784:	d000      	beq.n	8007788 <_svfprintf_r+0xb20>
 8007786:	e26d      	b.n	8007c64 <_svfprintf_r+0xffc>
 8007788:	af34      	add	r7, sp, #208	; 0xd0
 800778a:	e5e6      	b.n	800735a <_svfprintf_r+0x6f2>
 800778c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800778e:	2b65      	cmp	r3, #101	; 0x65
 8007790:	dc00      	bgt.n	8007794 <_svfprintf_r+0xb2c>
 8007792:	e1b0      	b.n	8007af6 <_svfprintf_r+0xe8e>
 8007794:	2200      	movs	r2, #0
 8007796:	2300      	movs	r3, #0
 8007798:	9816      	ldr	r0, [sp, #88]	; 0x58
 800779a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800779c:	f7f8 fe5c 	bl	8000458 <__aeabi_dcmpeq>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	d069      	beq.n	8007878 <_svfprintf_r+0xc10>
 80077a4:	4b33      	ldr	r3, [pc, #204]	; (8007874 <_svfprintf_r+0xc0c>)
 80077a6:	603b      	str	r3, [r7, #0]
 80077a8:	2301      	movs	r3, #1
 80077aa:	607b      	str	r3, [r7, #4]
 80077ac:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80077ae:	3708      	adds	r7, #8
 80077b0:	3301      	adds	r3, #1
 80077b2:	9329      	str	r3, [sp, #164]	; 0xa4
 80077b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80077b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80077b8:	3301      	adds	r3, #1
 80077ba:	9328      	str	r3, [sp, #160]	; 0xa0
 80077bc:	2b07      	cmp	r3, #7
 80077be:	dd08      	ble.n	80077d2 <_svfprintf_r+0xb6a>
 80077c0:	aa27      	add	r2, sp, #156	; 0x9c
 80077c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80077c6:	f001 fd59 	bl	800927c <__ssprint_r>
 80077ca:	2800      	cmp	r0, #0
 80077cc:	d000      	beq.n	80077d0 <_svfprintf_r+0xb68>
 80077ce:	e249      	b.n	8007c64 <_svfprintf_r+0xffc>
 80077d0:	af34      	add	r7, sp, #208	; 0xd0
 80077d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077d6:	4293      	cmp	r3, r2
 80077d8:	db02      	blt.n	80077e0 <_svfprintf_r+0xb78>
 80077da:	07f3      	lsls	r3, r6, #31
 80077dc:	d400      	bmi.n	80077e0 <_svfprintf_r+0xb78>
 80077de:	e5db      	b.n	8007398 <_svfprintf_r+0x730>
 80077e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077e2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80077e4:	4694      	mov	ip, r2
 80077e6:	603b      	str	r3, [r7, #0]
 80077e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077ea:	607b      	str	r3, [r7, #4]
 80077ec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80077ee:	3708      	adds	r7, #8
 80077f0:	4463      	add	r3, ip
 80077f2:	9329      	str	r3, [sp, #164]	; 0xa4
 80077f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80077f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80077f8:	3301      	adds	r3, #1
 80077fa:	9328      	str	r3, [sp, #160]	; 0xa0
 80077fc:	2b07      	cmp	r3, #7
 80077fe:	dd08      	ble.n	8007812 <_svfprintf_r+0xbaa>
 8007800:	aa27      	add	r2, sp, #156	; 0x9c
 8007802:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007804:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007806:	f001 fd39 	bl	800927c <__ssprint_r>
 800780a:	2800      	cmp	r0, #0
 800780c:	d000      	beq.n	8007810 <_svfprintf_r+0xba8>
 800780e:	e229      	b.n	8007c64 <_svfprintf_r+0xffc>
 8007810:	af34      	add	r7, sp, #208	; 0xd0
 8007812:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007814:	2510      	movs	r5, #16
 8007816:	1e5c      	subs	r4, r3, #1
 8007818:	2c00      	cmp	r4, #0
 800781a:	dc00      	bgt.n	800781e <_svfprintf_r+0xbb6>
 800781c:	e5bc      	b.n	8007398 <_svfprintf_r+0x730>
 800781e:	4b14      	ldr	r3, [pc, #80]	; (8007870 <_svfprintf_r+0xc08>)
 8007820:	603b      	str	r3, [r7, #0]
 8007822:	2c10      	cmp	r4, #16
 8007824:	dc0b      	bgt.n	800783e <_svfprintf_r+0xbd6>
 8007826:	607c      	str	r4, [r7, #4]
 8007828:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800782a:	191c      	adds	r4, r3, r4
 800782c:	9429      	str	r4, [sp, #164]	; 0xa4
 800782e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007830:	930b      	str	r3, [sp, #44]	; 0x2c
 8007832:	3301      	adds	r3, #1
 8007834:	9328      	str	r3, [sp, #160]	; 0xa0
 8007836:	2b07      	cmp	r3, #7
 8007838:	dc00      	bgt.n	800783c <_svfprintf_r+0xbd4>
 800783a:	e086      	b.n	800794a <_svfprintf_r+0xce2>
 800783c:	e5a2      	b.n	8007384 <_svfprintf_r+0x71c>
 800783e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007840:	607d      	str	r5, [r7, #4]
 8007842:	3310      	adds	r3, #16
 8007844:	9329      	str	r3, [sp, #164]	; 0xa4
 8007846:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007848:	3708      	adds	r7, #8
 800784a:	930b      	str	r3, [sp, #44]	; 0x2c
 800784c:	3301      	adds	r3, #1
 800784e:	9328      	str	r3, [sp, #160]	; 0xa0
 8007850:	2b07      	cmp	r3, #7
 8007852:	dd08      	ble.n	8007866 <_svfprintf_r+0xbfe>
 8007854:	aa27      	add	r2, sp, #156	; 0x9c
 8007856:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007858:	980a      	ldr	r0, [sp, #40]	; 0x28
 800785a:	f001 fd0f 	bl	800927c <__ssprint_r>
 800785e:	2800      	cmp	r0, #0
 8007860:	d000      	beq.n	8007864 <_svfprintf_r+0xbfc>
 8007862:	e1ff      	b.n	8007c64 <_svfprintf_r+0xffc>
 8007864:	af34      	add	r7, sp, #208	; 0xd0
 8007866:	3c10      	subs	r4, #16
 8007868:	e7d9      	b.n	800781e <_svfprintf_r+0xbb6>
 800786a:	46c0      	nop			; (mov r8, r8)
 800786c:	0800989d 	.word	0x0800989d
 8007870:	080098c0 	.word	0x080098c0
 8007874:	080098ae 	.word	0x080098ae
 8007878:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800787a:	2b00      	cmp	r3, #0
 800787c:	dc7e      	bgt.n	800797c <_svfprintf_r+0xd14>
 800787e:	4bcf      	ldr	r3, [pc, #828]	; (8007bbc <_svfprintf_r+0xf54>)
 8007880:	603b      	str	r3, [r7, #0]
 8007882:	2301      	movs	r3, #1
 8007884:	607b      	str	r3, [r7, #4]
 8007886:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007888:	3708      	adds	r7, #8
 800788a:	3301      	adds	r3, #1
 800788c:	9329      	str	r3, [sp, #164]	; 0xa4
 800788e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007890:	930b      	str	r3, [sp, #44]	; 0x2c
 8007892:	3301      	adds	r3, #1
 8007894:	9328      	str	r3, [sp, #160]	; 0xa0
 8007896:	2b07      	cmp	r3, #7
 8007898:	dd08      	ble.n	80078ac <_svfprintf_r+0xc44>
 800789a:	aa27      	add	r2, sp, #156	; 0x9c
 800789c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800789e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80078a0:	f001 fcec 	bl	800927c <__ssprint_r>
 80078a4:	2800      	cmp	r0, #0
 80078a6:	d000      	beq.n	80078aa <_svfprintf_r+0xc42>
 80078a8:	e1dc      	b.n	8007c64 <_svfprintf_r+0xffc>
 80078aa:	af34      	add	r7, sp, #208	; 0xd0
 80078ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d105      	bne.n	80078be <_svfprintf_r+0xc56>
 80078b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d102      	bne.n	80078be <_svfprintf_r+0xc56>
 80078b8:	07f3      	lsls	r3, r6, #31
 80078ba:	d400      	bmi.n	80078be <_svfprintf_r+0xc56>
 80078bc:	e56c      	b.n	8007398 <_svfprintf_r+0x730>
 80078be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80078c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80078c2:	4694      	mov	ip, r2
 80078c4:	603b      	str	r3, [r7, #0]
 80078c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078c8:	607b      	str	r3, [r7, #4]
 80078ca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80078cc:	3708      	adds	r7, #8
 80078ce:	4463      	add	r3, ip
 80078d0:	9329      	str	r3, [sp, #164]	; 0xa4
 80078d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80078d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80078d6:	3301      	adds	r3, #1
 80078d8:	9328      	str	r3, [sp, #160]	; 0xa0
 80078da:	2b07      	cmp	r3, #7
 80078dc:	dd08      	ble.n	80078f0 <_svfprintf_r+0xc88>
 80078de:	aa27      	add	r2, sp, #156	; 0x9c
 80078e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80078e4:	f001 fcca 	bl	800927c <__ssprint_r>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d000      	beq.n	80078ee <_svfprintf_r+0xc86>
 80078ec:	e1ba      	b.n	8007c64 <_svfprintf_r+0xffc>
 80078ee:	af34      	add	r7, sp, #208	; 0xd0
 80078f0:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80078f2:	2c00      	cmp	r4, #0
 80078f4:	da19      	bge.n	800792a <_svfprintf_r+0xcc2>
 80078f6:	2510      	movs	r5, #16
 80078f8:	4264      	negs	r4, r4
 80078fa:	4ab1      	ldr	r2, [pc, #708]	; (8007bc0 <_svfprintf_r+0xf58>)
 80078fc:	603a      	str	r2, [r7, #0]
 80078fe:	2c10      	cmp	r4, #16
 8007900:	dc25      	bgt.n	800794e <_svfprintf_r+0xce6>
 8007902:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007904:	607c      	str	r4, [r7, #4]
 8007906:	191c      	adds	r4, r3, r4
 8007908:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800790a:	9429      	str	r4, [sp, #164]	; 0xa4
 800790c:	1c5a      	adds	r2, r3, #1
 800790e:	3708      	adds	r7, #8
 8007910:	930b      	str	r3, [sp, #44]	; 0x2c
 8007912:	9228      	str	r2, [sp, #160]	; 0xa0
 8007914:	2a07      	cmp	r2, #7
 8007916:	dd08      	ble.n	800792a <_svfprintf_r+0xcc2>
 8007918:	aa27      	add	r2, sp, #156	; 0x9c
 800791a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800791c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800791e:	f001 fcad 	bl	800927c <__ssprint_r>
 8007922:	2800      	cmp	r0, #0
 8007924:	d000      	beq.n	8007928 <_svfprintf_r+0xcc0>
 8007926:	e19d      	b.n	8007c64 <_svfprintf_r+0xffc>
 8007928:	af34      	add	r7, sp, #208	; 0xd0
 800792a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800792c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800792e:	468c      	mov	ip, r1
 8007930:	603b      	str	r3, [r7, #0]
 8007932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007934:	607b      	str	r3, [r7, #4]
 8007936:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007938:	4463      	add	r3, ip
 800793a:	9329      	str	r3, [sp, #164]	; 0xa4
 800793c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800793e:	1c5a      	adds	r2, r3, #1
 8007940:	930b      	str	r3, [sp, #44]	; 0x2c
 8007942:	9228      	str	r2, [sp, #160]	; 0xa0
 8007944:	2a07      	cmp	r2, #7
 8007946:	dd00      	ble.n	800794a <_svfprintf_r+0xce2>
 8007948:	e51c      	b.n	8007384 <_svfprintf_r+0x71c>
 800794a:	3708      	adds	r7, #8
 800794c:	e524      	b.n	8007398 <_svfprintf_r+0x730>
 800794e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007950:	607d      	str	r5, [r7, #4]
 8007952:	001a      	movs	r2, r3
 8007954:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007956:	3210      	adds	r2, #16
 8007958:	9229      	str	r2, [sp, #164]	; 0xa4
 800795a:	1c5a      	adds	r2, r3, #1
 800795c:	930b      	str	r3, [sp, #44]	; 0x2c
 800795e:	9228      	str	r2, [sp, #160]	; 0xa0
 8007960:	3708      	adds	r7, #8
 8007962:	2a07      	cmp	r2, #7
 8007964:	dd08      	ble.n	8007978 <_svfprintf_r+0xd10>
 8007966:	aa27      	add	r2, sp, #156	; 0x9c
 8007968:	9909      	ldr	r1, [sp, #36]	; 0x24
 800796a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800796c:	f001 fc86 	bl	800927c <__ssprint_r>
 8007970:	2800      	cmp	r0, #0
 8007972:	d000      	beq.n	8007976 <_svfprintf_r+0xd0e>
 8007974:	e176      	b.n	8007c64 <_svfprintf_r+0xffc>
 8007976:	af34      	add	r7, sp, #208	; 0xd0
 8007978:	3c10      	subs	r4, #16
 800797a:	e7be      	b.n	80078fa <_svfprintf_r+0xc92>
 800797c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800797e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007980:	4294      	cmp	r4, r2
 8007982:	dd00      	ble.n	8007986 <_svfprintf_r+0xd1e>
 8007984:	0014      	movs	r4, r2
 8007986:	2c00      	cmp	r4, #0
 8007988:	dd15      	ble.n	80079b6 <_svfprintf_r+0xd4e>
 800798a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800798c:	607c      	str	r4, [r7, #4]
 800798e:	603b      	str	r3, [r7, #0]
 8007990:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007992:	3708      	adds	r7, #8
 8007994:	191b      	adds	r3, r3, r4
 8007996:	9329      	str	r3, [sp, #164]	; 0xa4
 8007998:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800799a:	930b      	str	r3, [sp, #44]	; 0x2c
 800799c:	3301      	adds	r3, #1
 800799e:	9328      	str	r3, [sp, #160]	; 0xa0
 80079a0:	2b07      	cmp	r3, #7
 80079a2:	dd08      	ble.n	80079b6 <_svfprintf_r+0xd4e>
 80079a4:	aa27      	add	r2, sp, #156	; 0x9c
 80079a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80079aa:	f001 fc67 	bl	800927c <__ssprint_r>
 80079ae:	2800      	cmp	r0, #0
 80079b0:	d000      	beq.n	80079b4 <_svfprintf_r+0xd4c>
 80079b2:	e157      	b.n	8007c64 <_svfprintf_r+0xffc>
 80079b4:	af34      	add	r7, sp, #208	; 0xd0
 80079b6:	43e3      	mvns	r3, r4
 80079b8:	17db      	asrs	r3, r3, #31
 80079ba:	401c      	ands	r4, r3
 80079bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079be:	2510      	movs	r5, #16
 80079c0:	1b1c      	subs	r4, r3, r4
 80079c2:	2c00      	cmp	r4, #0
 80079c4:	dc7d      	bgt.n	8007ac2 <_svfprintf_r+0xe5a>
 80079c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079ca:	4293      	cmp	r3, r2
 80079cc:	db01      	blt.n	80079d2 <_svfprintf_r+0xd6a>
 80079ce:	07f3      	lsls	r3, r6, #31
 80079d0:	d518      	bpl.n	8007a04 <_svfprintf_r+0xd9c>
 80079d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80079d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80079d6:	4694      	mov	ip, r2
 80079d8:	603b      	str	r3, [r7, #0]
 80079da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079dc:	607b      	str	r3, [r7, #4]
 80079de:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80079e0:	3708      	adds	r7, #8
 80079e2:	4463      	add	r3, ip
 80079e4:	9329      	str	r3, [sp, #164]	; 0xa4
 80079e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80079e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80079ea:	3301      	adds	r3, #1
 80079ec:	9328      	str	r3, [sp, #160]	; 0xa0
 80079ee:	2b07      	cmp	r3, #7
 80079f0:	dd08      	ble.n	8007a04 <_svfprintf_r+0xd9c>
 80079f2:	aa27      	add	r2, sp, #156	; 0x9c
 80079f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80079f8:	f001 fc40 	bl	800927c <__ssprint_r>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	d000      	beq.n	8007a02 <_svfprintf_r+0xd9a>
 8007a00:	e130      	b.n	8007c64 <_svfprintf_r+0xffc>
 8007a02:	af34      	add	r7, sp, #208	; 0xd0
 8007a04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a08:	9921      	ldr	r1, [sp, #132]	; 0x84
 8007a0a:	1a9b      	subs	r3, r3, r2
 8007a0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a0e:	1a54      	subs	r4, r2, r1
 8007a10:	429c      	cmp	r4, r3
 8007a12:	dd00      	ble.n	8007a16 <_svfprintf_r+0xdae>
 8007a14:	001c      	movs	r4, r3
 8007a16:	2c00      	cmp	r4, #0
 8007a18:	dd18      	ble.n	8007a4c <_svfprintf_r+0xde4>
 8007a1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a1e:	4694      	mov	ip, r2
 8007a20:	4463      	add	r3, ip
 8007a22:	603b      	str	r3, [r7, #0]
 8007a24:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007a26:	607c      	str	r4, [r7, #4]
 8007a28:	191b      	adds	r3, r3, r4
 8007a2a:	9329      	str	r3, [sp, #164]	; 0xa4
 8007a2c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007a2e:	3708      	adds	r7, #8
 8007a30:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a32:	3301      	adds	r3, #1
 8007a34:	9328      	str	r3, [sp, #160]	; 0xa0
 8007a36:	2b07      	cmp	r3, #7
 8007a38:	dd08      	ble.n	8007a4c <_svfprintf_r+0xde4>
 8007a3a:	aa27      	add	r2, sp, #156	; 0x9c
 8007a3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007a40:	f001 fc1c 	bl	800927c <__ssprint_r>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	d000      	beq.n	8007a4a <_svfprintf_r+0xde2>
 8007a48:	e10c      	b.n	8007c64 <_svfprintf_r+0xffc>
 8007a4a:	af34      	add	r7, sp, #208	; 0xd0
 8007a4c:	43e3      	mvns	r3, r4
 8007a4e:	17db      	asrs	r3, r3, #31
 8007a50:	401c      	ands	r4, r3
 8007a52:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a56:	2510      	movs	r5, #16
 8007a58:	1a9b      	subs	r3, r3, r2
 8007a5a:	1b1c      	subs	r4, r3, r4
 8007a5c:	2c00      	cmp	r4, #0
 8007a5e:	dc00      	bgt.n	8007a62 <_svfprintf_r+0xdfa>
 8007a60:	e49a      	b.n	8007398 <_svfprintf_r+0x730>
 8007a62:	4b57      	ldr	r3, [pc, #348]	; (8007bc0 <_svfprintf_r+0xf58>)
 8007a64:	603b      	str	r3, [r7, #0]
 8007a66:	2c10      	cmp	r4, #16
 8007a68:	dc00      	bgt.n	8007a6c <_svfprintf_r+0xe04>
 8007a6a:	e6dc      	b.n	8007826 <_svfprintf_r+0xbbe>
 8007a6c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007a6e:	607d      	str	r5, [r7, #4]
 8007a70:	3310      	adds	r3, #16
 8007a72:	9329      	str	r3, [sp, #164]	; 0xa4
 8007a74:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007a76:	3708      	adds	r7, #8
 8007a78:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	9328      	str	r3, [sp, #160]	; 0xa0
 8007a7e:	2b07      	cmp	r3, #7
 8007a80:	dd08      	ble.n	8007a94 <_svfprintf_r+0xe2c>
 8007a82:	aa27      	add	r2, sp, #156	; 0x9c
 8007a84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a86:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007a88:	f001 fbf8 	bl	800927c <__ssprint_r>
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	d000      	beq.n	8007a92 <_svfprintf_r+0xe2a>
 8007a90:	e0e8      	b.n	8007c64 <_svfprintf_r+0xffc>
 8007a92:	af34      	add	r7, sp, #208	; 0xd0
 8007a94:	3c10      	subs	r4, #16
 8007a96:	e7e4      	b.n	8007a62 <_svfprintf_r+0xdfa>
 8007a98:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007a9a:	607d      	str	r5, [r7, #4]
 8007a9c:	3310      	adds	r3, #16
 8007a9e:	9329      	str	r3, [sp, #164]	; 0xa4
 8007aa0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	9328      	str	r3, [sp, #160]	; 0xa0
 8007aaa:	2b07      	cmp	r3, #7
 8007aac:	dd08      	ble.n	8007ac0 <_svfprintf_r+0xe58>
 8007aae:	aa27      	add	r2, sp, #156	; 0x9c
 8007ab0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ab2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007ab4:	f001 fbe2 	bl	800927c <__ssprint_r>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d000      	beq.n	8007abe <_svfprintf_r+0xe56>
 8007abc:	e0d2      	b.n	8007c64 <_svfprintf_r+0xffc>
 8007abe:	af34      	add	r7, sp, #208	; 0xd0
 8007ac0:	3c10      	subs	r4, #16
 8007ac2:	4b3f      	ldr	r3, [pc, #252]	; (8007bc0 <_svfprintf_r+0xf58>)
 8007ac4:	603b      	str	r3, [r7, #0]
 8007ac6:	2c10      	cmp	r4, #16
 8007ac8:	dce6      	bgt.n	8007a98 <_svfprintf_r+0xe30>
 8007aca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007acc:	607c      	str	r4, [r7, #4]
 8007ace:	191c      	adds	r4, r3, r4
 8007ad0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007ad2:	9429      	str	r4, [sp, #164]	; 0xa4
 8007ad4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	9328      	str	r3, [sp, #160]	; 0xa0
 8007ada:	3708      	adds	r7, #8
 8007adc:	2b07      	cmp	r3, #7
 8007ade:	dc00      	bgt.n	8007ae2 <_svfprintf_r+0xe7a>
 8007ae0:	e771      	b.n	80079c6 <_svfprintf_r+0xd5e>
 8007ae2:	aa27      	add	r2, sp, #156	; 0x9c
 8007ae4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ae6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007ae8:	f001 fbc8 	bl	800927c <__ssprint_r>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	d000      	beq.n	8007af2 <_svfprintf_r+0xe8a>
 8007af0:	e0b8      	b.n	8007c64 <_svfprintf_r+0xffc>
 8007af2:	af34      	add	r7, sp, #208	; 0xd0
 8007af4:	e767      	b.n	80079c6 <_svfprintf_r+0xd5e>
 8007af6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	dc03      	bgt.n	8007b04 <_svfprintf_r+0xe9c>
 8007afc:	2301      	movs	r3, #1
 8007afe:	421e      	tst	r6, r3
 8007b00:	d100      	bne.n	8007b04 <_svfprintf_r+0xe9c>
 8007b02:	e087      	b.n	8007c14 <_svfprintf_r+0xfac>
 8007b04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b06:	603b      	str	r3, [r7, #0]
 8007b08:	2301      	movs	r3, #1
 8007b0a:	607b      	str	r3, [r7, #4]
 8007b0c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007b0e:	3708      	adds	r7, #8
 8007b10:	3301      	adds	r3, #1
 8007b12:	9329      	str	r3, [sp, #164]	; 0xa4
 8007b14:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007b16:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b18:	3301      	adds	r3, #1
 8007b1a:	9328      	str	r3, [sp, #160]	; 0xa0
 8007b1c:	2b07      	cmp	r3, #7
 8007b1e:	dd08      	ble.n	8007b32 <_svfprintf_r+0xeca>
 8007b20:	aa27      	add	r2, sp, #156	; 0x9c
 8007b22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b24:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007b26:	f001 fba9 	bl	800927c <__ssprint_r>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	d000      	beq.n	8007b30 <_svfprintf_r+0xec8>
 8007b2e:	e099      	b.n	8007c64 <_svfprintf_r+0xffc>
 8007b30:	af34      	add	r7, sp, #208	; 0xd0
 8007b32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b34:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007b36:	4694      	mov	ip, r2
 8007b38:	603b      	str	r3, [r7, #0]
 8007b3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b3c:	607b      	str	r3, [r7, #4]
 8007b3e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007b40:	3708      	adds	r7, #8
 8007b42:	4463      	add	r3, ip
 8007b44:	9329      	str	r3, [sp, #164]	; 0xa4
 8007b46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007b48:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	9328      	str	r3, [sp, #160]	; 0xa0
 8007b4e:	2b07      	cmp	r3, #7
 8007b50:	dd08      	ble.n	8007b64 <_svfprintf_r+0xefc>
 8007b52:	aa27      	add	r2, sp, #156	; 0x9c
 8007b54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b56:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007b58:	f001 fb90 	bl	800927c <__ssprint_r>
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	d000      	beq.n	8007b62 <_svfprintf_r+0xefa>
 8007b60:	e080      	b.n	8007c64 <_svfprintf_r+0xffc>
 8007b62:	af34      	add	r7, sp, #208	; 0xd0
 8007b64:	2300      	movs	r3, #0
 8007b66:	2200      	movs	r2, #0
 8007b68:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007b6a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8007b6c:	f7f8 fc74 	bl	8000458 <__aeabi_dcmpeq>
 8007b70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b72:	1e5d      	subs	r5, r3, #1
 8007b74:	2800      	cmp	r0, #0
 8007b76:	d125      	bne.n	8007bc4 <_svfprintf_r+0xf5c>
 8007b78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	603b      	str	r3, [r7, #0]
 8007b80:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007b82:	607d      	str	r5, [r7, #4]
 8007b84:	3b01      	subs	r3, #1
 8007b86:	189b      	adds	r3, r3, r2
 8007b88:	9329      	str	r3, [sp, #164]	; 0xa4
 8007b8a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b90:	3301      	adds	r3, #1
 8007b92:	9328      	str	r3, [sp, #160]	; 0xa0
 8007b94:	2b07      	cmp	r3, #7
 8007b96:	dd07      	ble.n	8007ba8 <_svfprintf_r+0xf40>
 8007b98:	aa27      	add	r2, sp, #156	; 0x9c
 8007b9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007b9e:	f001 fb6d 	bl	800927c <__ssprint_r>
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	d15e      	bne.n	8007c64 <_svfprintf_r+0xffc>
 8007ba6:	af34      	add	r7, sp, #208	; 0xd0
 8007ba8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007baa:	ab23      	add	r3, sp, #140	; 0x8c
 8007bac:	4694      	mov	ip, r2
 8007bae:	603b      	str	r3, [r7, #0]
 8007bb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bb2:	607b      	str	r3, [r7, #4]
 8007bb4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007bb6:	4463      	add	r3, ip
 8007bb8:	9329      	str	r3, [sp, #164]	; 0xa4
 8007bba:	e638      	b.n	800782e <_svfprintf_r+0xbc6>
 8007bbc:	080098ae 	.word	0x080098ae
 8007bc0:	080098c0 	.word	0x080098c0
 8007bc4:	2410      	movs	r4, #16
 8007bc6:	2d00      	cmp	r5, #0
 8007bc8:	ddee      	ble.n	8007ba8 <_svfprintf_r+0xf40>
 8007bca:	4b5e      	ldr	r3, [pc, #376]	; (8007d44 <_svfprintf_r+0x10dc>)
 8007bcc:	603b      	str	r3, [r7, #0]
 8007bce:	2d10      	cmp	r5, #16
 8007bd0:	dc0b      	bgt.n	8007bea <_svfprintf_r+0xf82>
 8007bd2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007bd4:	607d      	str	r5, [r7, #4]
 8007bd6:	195d      	adds	r5, r3, r5
 8007bd8:	9529      	str	r5, [sp, #164]	; 0xa4
 8007bda:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007bdc:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bde:	3301      	adds	r3, #1
 8007be0:	9328      	str	r3, [sp, #160]	; 0xa0
 8007be2:	2b07      	cmp	r3, #7
 8007be4:	dcd8      	bgt.n	8007b98 <_svfprintf_r+0xf30>
 8007be6:	3708      	adds	r7, #8
 8007be8:	e7de      	b.n	8007ba8 <_svfprintf_r+0xf40>
 8007bea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007bec:	607c      	str	r4, [r7, #4]
 8007bee:	3310      	adds	r3, #16
 8007bf0:	9329      	str	r3, [sp, #164]	; 0xa4
 8007bf2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	9328      	str	r3, [sp, #160]	; 0xa0
 8007bfc:	2b07      	cmp	r3, #7
 8007bfe:	dd07      	ble.n	8007c10 <_svfprintf_r+0xfa8>
 8007c00:	aa27      	add	r2, sp, #156	; 0x9c
 8007c02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c04:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007c06:	f001 fb39 	bl	800927c <__ssprint_r>
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	d12a      	bne.n	8007c64 <_svfprintf_r+0xffc>
 8007c0e:	af34      	add	r7, sp, #208	; 0xd0
 8007c10:	3d10      	subs	r5, #16
 8007c12:	e7da      	b.n	8007bca <_svfprintf_r+0xf62>
 8007c14:	607b      	str	r3, [r7, #4]
 8007c16:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007c18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	603a      	str	r2, [r7, #0]
 8007c1e:	9329      	str	r3, [sp, #164]	; 0xa4
 8007c20:	e7db      	b.n	8007bda <_svfprintf_r+0xf72>
 8007c22:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c24:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007c26:	2510      	movs	r5, #16
 8007c28:	1a9c      	subs	r4, r3, r2
 8007c2a:	2c00      	cmp	r4, #0
 8007c2c:	dc01      	bgt.n	8007c32 <_svfprintf_r+0xfca>
 8007c2e:	f7ff fbb7 	bl	80073a0 <_svfprintf_r+0x738>
 8007c32:	4b45      	ldr	r3, [pc, #276]	; (8007d48 <_svfprintf_r+0x10e0>)
 8007c34:	603b      	str	r3, [r7, #0]
 8007c36:	2c10      	cmp	r4, #16
 8007c38:	dc1e      	bgt.n	8007c78 <_svfprintf_r+0x1010>
 8007c3a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007c3c:	607c      	str	r4, [r7, #4]
 8007c3e:	191c      	adds	r4, r3, r4
 8007c40:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007c42:	9429      	str	r4, [sp, #164]	; 0xa4
 8007c44:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c46:	3301      	adds	r3, #1
 8007c48:	9328      	str	r3, [sp, #160]	; 0xa0
 8007c4a:	2b07      	cmp	r3, #7
 8007c4c:	dc01      	bgt.n	8007c52 <_svfprintf_r+0xfea>
 8007c4e:	f7ff fba7 	bl	80073a0 <_svfprintf_r+0x738>
 8007c52:	aa27      	add	r2, sp, #156	; 0x9c
 8007c54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c56:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007c58:	f001 fb10 	bl	800927c <__ssprint_r>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	d101      	bne.n	8007c64 <_svfprintf_r+0xffc>
 8007c60:	f7ff fb9e 	bl	80073a0 <_svfprintf_r+0x738>
 8007c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c66:	899b      	ldrh	r3, [r3, #12]
 8007c68:	065b      	lsls	r3, r3, #25
 8007c6a:	d401      	bmi.n	8007c70 <_svfprintf_r+0x1008>
 8007c6c:	f7ff f821 	bl	8006cb2 <_svfprintf_r+0x4a>
 8007c70:	2301      	movs	r3, #1
 8007c72:	425b      	negs	r3, r3
 8007c74:	f7ff f81c 	bl	8006cb0 <_svfprintf_r+0x48>
 8007c78:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007c7a:	607d      	str	r5, [r7, #4]
 8007c7c:	3310      	adds	r3, #16
 8007c7e:	9329      	str	r3, [sp, #164]	; 0xa4
 8007c80:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007c82:	3708      	adds	r7, #8
 8007c84:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c86:	3301      	adds	r3, #1
 8007c88:	9328      	str	r3, [sp, #160]	; 0xa0
 8007c8a:	2b07      	cmp	r3, #7
 8007c8c:	dd07      	ble.n	8007c9e <_svfprintf_r+0x1036>
 8007c8e:	aa27      	add	r2, sp, #156	; 0x9c
 8007c90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c92:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007c94:	f001 faf2 	bl	800927c <__ssprint_r>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	d1e3      	bne.n	8007c64 <_svfprintf_r+0xffc>
 8007c9c:	af34      	add	r7, sp, #208	; 0xd0
 8007c9e:	3c10      	subs	r4, #16
 8007ca0:	e7c7      	b.n	8007c32 <_svfprintf_r+0xfca>
 8007ca2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007ca4:	9306      	str	r3, [sp, #24]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d0dc      	beq.n	8007c64 <_svfprintf_r+0xffc>
 8007caa:	aa27      	add	r2, sp, #156	; 0x9c
 8007cac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cae:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007cb0:	f001 fae4 	bl	800927c <__ssprint_r>
 8007cb4:	e7d6      	b.n	8007c64 <_svfprintf_r+0xffc>
 8007cb6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007cb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cba:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007cbc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8007cbe:	f7fa f9b3 	bl	8002028 <__aeabi_dcmpun>
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	d101      	bne.n	8007cca <_svfprintf_r+0x1062>
 8007cc6:	f7ff f9d8 	bl	800707a <_svfprintf_r+0x412>
 8007cca:	4b20      	ldr	r3, [pc, #128]	; (8007d4c <_svfprintf_r+0x10e4>)
 8007ccc:	930c      	str	r3, [sp, #48]	; 0x30
 8007cce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cd0:	2b47      	cmp	r3, #71	; 0x47
 8007cd2:	dd01      	ble.n	8007cd8 <_svfprintf_r+0x1070>
 8007cd4:	f7ff f9ca 	bl	800706c <_svfprintf_r+0x404>
 8007cd8:	4b1d      	ldr	r3, [pc, #116]	; (8007d50 <_svfprintf_r+0x10e8>)
 8007cda:	f7ff f9c6 	bl	800706a <_svfprintf_r+0x402>
 8007cde:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007ce0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ce2:	1a9b      	subs	r3, r3, r2
 8007ce4:	930e      	str	r3, [sp, #56]	; 0x38
 8007ce6:	f7ff fa43 	bl	8007170 <_svfprintf_r+0x508>
 8007cea:	0035      	movs	r5, r6
 8007cec:	2a00      	cmp	r2, #0
 8007cee:	d101      	bne.n	8007cf4 <_svfprintf_r+0x108c>
 8007cf0:	f7ff f8c8 	bl	8006e84 <_svfprintf_r+0x21c>
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d100      	bne.n	8007cfa <_svfprintf_r+0x1092>
 8007cf8:	e479      	b.n	80075ee <_svfprintf_r+0x986>
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d100      	bne.n	8007d00 <_svfprintf_r+0x1098>
 8007cfe:	e4ab      	b.n	8007658 <_svfprintf_r+0x9f0>
 8007d00:	2607      	movs	r6, #7
 8007d02:	ab34      	add	r3, sp, #208	; 0xd0
 8007d04:	1e5a      	subs	r2, r3, #1
 8007d06:	920c      	str	r2, [sp, #48]	; 0x30
 8007d08:	9a06      	ldr	r2, [sp, #24]
 8007d0a:	1e59      	subs	r1, r3, #1
 8007d0c:	4032      	ands	r2, r6
 8007d0e:	3230      	adds	r2, #48	; 0x30
 8007d10:	700a      	strb	r2, [r1, #0]
 8007d12:	9907      	ldr	r1, [sp, #28]
 8007d14:	074c      	lsls	r4, r1, #29
 8007d16:	9906      	ldr	r1, [sp, #24]
 8007d18:	08c8      	lsrs	r0, r1, #3
 8007d1a:	9907      	ldr	r1, [sp, #28]
 8007d1c:	4304      	orrs	r4, r0
 8007d1e:	08c9      	lsrs	r1, r1, #3
 8007d20:	9107      	str	r1, [sp, #28]
 8007d22:	0021      	movs	r1, r4
 8007d24:	9807      	ldr	r0, [sp, #28]
 8007d26:	9406      	str	r4, [sp, #24]
 8007d28:	4301      	orrs	r1, r0
 8007d2a:	d000      	beq.n	8007d2e <_svfprintf_r+0x10c6>
 8007d2c:	e45d      	b.n	80075ea <_svfprintf_r+0x982>
 8007d2e:	07e9      	lsls	r1, r5, #31
 8007d30:	d400      	bmi.n	8007d34 <_svfprintf_r+0x10cc>
 8007d32:	e484      	b.n	800763e <_svfprintf_r+0x9d6>
 8007d34:	2a30      	cmp	r2, #48	; 0x30
 8007d36:	d100      	bne.n	8007d3a <_svfprintf_r+0x10d2>
 8007d38:	e481      	b.n	800763e <_svfprintf_r+0x9d6>
 8007d3a:	2230      	movs	r2, #48	; 0x30
 8007d3c:	3b02      	subs	r3, #2
 8007d3e:	701a      	strb	r2, [r3, #0]
 8007d40:	930c      	str	r3, [sp, #48]	; 0x30
 8007d42:	e47c      	b.n	800763e <_svfprintf_r+0x9d6>
 8007d44:	080098c0 	.word	0x080098c0
 8007d48:	080098b0 	.word	0x080098b0
 8007d4c:	08009888 	.word	0x08009888
 8007d50:	08009884 	.word	0x08009884

08007d54 <_vsprintf_r>:
 8007d54:	b530      	push	{r4, r5, lr}
 8007d56:	b09b      	sub	sp, #108	; 0x6c
 8007d58:	9100      	str	r1, [sp, #0]
 8007d5a:	9104      	str	r1, [sp, #16]
 8007d5c:	4908      	ldr	r1, [pc, #32]	; (8007d80 <_vsprintf_r+0x2c>)
 8007d5e:	466d      	mov	r5, sp
 8007d60:	9102      	str	r1, [sp, #8]
 8007d62:	9105      	str	r1, [sp, #20]
 8007d64:	2101      	movs	r1, #1
 8007d66:	2482      	movs	r4, #130	; 0x82
 8007d68:	4249      	negs	r1, r1
 8007d6a:	81e9      	strh	r1, [r5, #14]
 8007d6c:	00a4      	lsls	r4, r4, #2
 8007d6e:	4669      	mov	r1, sp
 8007d70:	81ac      	strh	r4, [r5, #12]
 8007d72:	f7fe ff79 	bl	8006c68 <_svfprintf_r>
 8007d76:	2300      	movs	r3, #0
 8007d78:	9a00      	ldr	r2, [sp, #0]
 8007d7a:	7013      	strb	r3, [r2, #0]
 8007d7c:	b01b      	add	sp, #108	; 0x6c
 8007d7e:	bd30      	pop	{r4, r5, pc}
 8007d80:	7fffffff 	.word	0x7fffffff

08007d84 <vsprintf>:
 8007d84:	b510      	push	{r4, lr}
 8007d86:	0013      	movs	r3, r2
 8007d88:	000a      	movs	r2, r1
 8007d8a:	0001      	movs	r1, r0
 8007d8c:	4802      	ldr	r0, [pc, #8]	; (8007d98 <vsprintf+0x14>)
 8007d8e:	6800      	ldr	r0, [r0, #0]
 8007d90:	f7ff ffe0 	bl	8007d54 <_vsprintf_r>
 8007d94:	bd10      	pop	{r4, pc}
 8007d96:	46c0      	nop			; (mov r8, r8)
 8007d98:	20000014 	.word	0x20000014

08007d9c <quorem>:
 8007d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d9e:	6903      	ldr	r3, [r0, #16]
 8007da0:	690c      	ldr	r4, [r1, #16]
 8007da2:	b089      	sub	sp, #36	; 0x24
 8007da4:	0007      	movs	r7, r0
 8007da6:	9105      	str	r1, [sp, #20]
 8007da8:	2600      	movs	r6, #0
 8007daa:	429c      	cmp	r4, r3
 8007dac:	dc6d      	bgt.n	8007e8a <quorem+0xee>
 8007dae:	000b      	movs	r3, r1
 8007db0:	3c01      	subs	r4, #1
 8007db2:	3314      	adds	r3, #20
 8007db4:	00a5      	lsls	r5, r4, #2
 8007db6:	9303      	str	r3, [sp, #12]
 8007db8:	195b      	adds	r3, r3, r5
 8007dba:	9304      	str	r3, [sp, #16]
 8007dbc:	0003      	movs	r3, r0
 8007dbe:	3314      	adds	r3, #20
 8007dc0:	9302      	str	r3, [sp, #8]
 8007dc2:	195d      	adds	r5, r3, r5
 8007dc4:	9b04      	ldr	r3, [sp, #16]
 8007dc6:	6828      	ldr	r0, [r5, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	1c59      	adds	r1, r3, #1
 8007dcc:	9301      	str	r3, [sp, #4]
 8007dce:	f7f8 f9bd 	bl	800014c <__udivsi3>
 8007dd2:	9001      	str	r0, [sp, #4]
 8007dd4:	42b0      	cmp	r0, r6
 8007dd6:	d02d      	beq.n	8007e34 <quorem+0x98>
 8007dd8:	9b03      	ldr	r3, [sp, #12]
 8007dda:	9802      	ldr	r0, [sp, #8]
 8007ddc:	469c      	mov	ip, r3
 8007dde:	9606      	str	r6, [sp, #24]
 8007de0:	4662      	mov	r2, ip
 8007de2:	ca08      	ldmia	r2!, {r3}
 8007de4:	4694      	mov	ip, r2
 8007de6:	9a01      	ldr	r2, [sp, #4]
 8007de8:	b299      	uxth	r1, r3
 8007dea:	4351      	muls	r1, r2
 8007dec:	0c1b      	lsrs	r3, r3, #16
 8007dee:	4353      	muls	r3, r2
 8007df0:	1989      	adds	r1, r1, r6
 8007df2:	0c0a      	lsrs	r2, r1, #16
 8007df4:	189b      	adds	r3, r3, r2
 8007df6:	9307      	str	r3, [sp, #28]
 8007df8:	8802      	ldrh	r2, [r0, #0]
 8007dfa:	0c1e      	lsrs	r6, r3, #16
 8007dfc:	9b06      	ldr	r3, [sp, #24]
 8007dfe:	b289      	uxth	r1, r1
 8007e00:	18d2      	adds	r2, r2, r3
 8007e02:	6803      	ldr	r3, [r0, #0]
 8007e04:	1a52      	subs	r2, r2, r1
 8007e06:	0c19      	lsrs	r1, r3, #16
 8007e08:	466b      	mov	r3, sp
 8007e0a:	8b9b      	ldrh	r3, [r3, #28]
 8007e0c:	1acb      	subs	r3, r1, r3
 8007e0e:	1411      	asrs	r1, r2, #16
 8007e10:	185b      	adds	r3, r3, r1
 8007e12:	1419      	asrs	r1, r3, #16
 8007e14:	b292      	uxth	r2, r2
 8007e16:	041b      	lsls	r3, r3, #16
 8007e18:	431a      	orrs	r2, r3
 8007e1a:	9b04      	ldr	r3, [sp, #16]
 8007e1c:	9106      	str	r1, [sp, #24]
 8007e1e:	c004      	stmia	r0!, {r2}
 8007e20:	4563      	cmp	r3, ip
 8007e22:	d2dd      	bcs.n	8007de0 <quorem+0x44>
 8007e24:	682b      	ldr	r3, [r5, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d104      	bne.n	8007e34 <quorem+0x98>
 8007e2a:	9b02      	ldr	r3, [sp, #8]
 8007e2c:	3d04      	subs	r5, #4
 8007e2e:	42ab      	cmp	r3, r5
 8007e30:	d32e      	bcc.n	8007e90 <quorem+0xf4>
 8007e32:	613c      	str	r4, [r7, #16]
 8007e34:	9905      	ldr	r1, [sp, #20]
 8007e36:	0038      	movs	r0, r7
 8007e38:	f001 f94f 	bl	80090da <__mcmp>
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	db23      	blt.n	8007e88 <quorem+0xec>
 8007e40:	2500      	movs	r5, #0
 8007e42:	9b01      	ldr	r3, [sp, #4]
 8007e44:	9802      	ldr	r0, [sp, #8]
 8007e46:	3301      	adds	r3, #1
 8007e48:	9903      	ldr	r1, [sp, #12]
 8007e4a:	9301      	str	r3, [sp, #4]
 8007e4c:	c908      	ldmia	r1!, {r3}
 8007e4e:	8802      	ldrh	r2, [r0, #0]
 8007e50:	1955      	adds	r5, r2, r5
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	1aaa      	subs	r2, r5, r2
 8007e56:	6805      	ldr	r5, [r0, #0]
 8007e58:	0c1b      	lsrs	r3, r3, #16
 8007e5a:	0c2d      	lsrs	r5, r5, #16
 8007e5c:	1aeb      	subs	r3, r5, r3
 8007e5e:	1415      	asrs	r5, r2, #16
 8007e60:	195b      	adds	r3, r3, r5
 8007e62:	141d      	asrs	r5, r3, #16
 8007e64:	b292      	uxth	r2, r2
 8007e66:	041b      	lsls	r3, r3, #16
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	c008      	stmia	r0!, {r3}
 8007e6c:	9b04      	ldr	r3, [sp, #16]
 8007e6e:	428b      	cmp	r3, r1
 8007e70:	d2ec      	bcs.n	8007e4c <quorem+0xb0>
 8007e72:	9a02      	ldr	r2, [sp, #8]
 8007e74:	00a3      	lsls	r3, r4, #2
 8007e76:	18d3      	adds	r3, r2, r3
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	2a00      	cmp	r2, #0
 8007e7c:	d104      	bne.n	8007e88 <quorem+0xec>
 8007e7e:	9a02      	ldr	r2, [sp, #8]
 8007e80:	3b04      	subs	r3, #4
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d309      	bcc.n	8007e9a <quorem+0xfe>
 8007e86:	613c      	str	r4, [r7, #16]
 8007e88:	9e01      	ldr	r6, [sp, #4]
 8007e8a:	0030      	movs	r0, r6
 8007e8c:	b009      	add	sp, #36	; 0x24
 8007e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1cd      	bne.n	8007e32 <quorem+0x96>
 8007e96:	3c01      	subs	r4, #1
 8007e98:	e7c7      	b.n	8007e2a <quorem+0x8e>
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	2a00      	cmp	r2, #0
 8007e9e:	d1f2      	bne.n	8007e86 <quorem+0xea>
 8007ea0:	3c01      	subs	r4, #1
 8007ea2:	e7ec      	b.n	8007e7e <quorem+0xe2>

08007ea4 <_dtoa_r>:
 8007ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ea6:	0016      	movs	r6, r2
 8007ea8:	001f      	movs	r7, r3
 8007eaa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007eac:	b09d      	sub	sp, #116	; 0x74
 8007eae:	9004      	str	r0, [sp, #16]
 8007eb0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007eb2:	9606      	str	r6, [sp, #24]
 8007eb4:	9707      	str	r7, [sp, #28]
 8007eb6:	2c00      	cmp	r4, #0
 8007eb8:	d108      	bne.n	8007ecc <_dtoa_r+0x28>
 8007eba:	2010      	movs	r0, #16
 8007ebc:	f7fe fc80 	bl	80067c0 <malloc>
 8007ec0:	9b04      	ldr	r3, [sp, #16]
 8007ec2:	6258      	str	r0, [r3, #36]	; 0x24
 8007ec4:	6044      	str	r4, [r0, #4]
 8007ec6:	6084      	str	r4, [r0, #8]
 8007ec8:	6004      	str	r4, [r0, #0]
 8007eca:	60c4      	str	r4, [r0, #12]
 8007ecc:	9b04      	ldr	r3, [sp, #16]
 8007ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed0:	6819      	ldr	r1, [r3, #0]
 8007ed2:	2900      	cmp	r1, #0
 8007ed4:	d00b      	beq.n	8007eee <_dtoa_r+0x4a>
 8007ed6:	685a      	ldr	r2, [r3, #4]
 8007ed8:	2301      	movs	r3, #1
 8007eda:	4093      	lsls	r3, r2
 8007edc:	604a      	str	r2, [r1, #4]
 8007ede:	608b      	str	r3, [r1, #8]
 8007ee0:	9804      	ldr	r0, [sp, #16]
 8007ee2:	f000 ff20 	bl	8008d26 <_Bfree>
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	9b04      	ldr	r3, [sp, #16]
 8007eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	9b07      	ldr	r3, [sp, #28]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	da1f      	bge.n	8007f34 <_dtoa_r+0x90>
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	602b      	str	r3, [r5, #0]
 8007ef8:	007b      	lsls	r3, r7, #1
 8007efa:	085b      	lsrs	r3, r3, #1
 8007efc:	9307      	str	r3, [sp, #28]
 8007efe:	9c07      	ldr	r4, [sp, #28]
 8007f00:	4bb7      	ldr	r3, [pc, #732]	; (80081e0 <_dtoa_r+0x33c>)
 8007f02:	0022      	movs	r2, r4
 8007f04:	9319      	str	r3, [sp, #100]	; 0x64
 8007f06:	401a      	ands	r2, r3
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d116      	bne.n	8007f3a <_dtoa_r+0x96>
 8007f0c:	4bb5      	ldr	r3, [pc, #724]	; (80081e4 <_dtoa_r+0x340>)
 8007f0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007f10:	6013      	str	r3, [r2, #0]
 8007f12:	9b06      	ldr	r3, [sp, #24]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d103      	bne.n	8007f20 <_dtoa_r+0x7c>
 8007f18:	0324      	lsls	r4, r4, #12
 8007f1a:	d101      	bne.n	8007f20 <_dtoa_r+0x7c>
 8007f1c:	f000 fd91 	bl	8008a42 <_dtoa_r+0xb9e>
 8007f20:	4bb1      	ldr	r3, [pc, #708]	; (80081e8 <_dtoa_r+0x344>)
 8007f22:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007f24:	930a      	str	r3, [sp, #40]	; 0x28
 8007f26:	4bb1      	ldr	r3, [pc, #708]	; (80081ec <_dtoa_r+0x348>)
 8007f28:	2a00      	cmp	r2, #0
 8007f2a:	d001      	beq.n	8007f30 <_dtoa_r+0x8c>
 8007f2c:	f000 fd8f 	bl	8008a4e <_dtoa_r+0xbaa>
 8007f30:	f000 fd8f 	bl	8008a52 <_dtoa_r+0xbae>
 8007f34:	2300      	movs	r3, #0
 8007f36:	602b      	str	r3, [r5, #0]
 8007f38:	e7e1      	b.n	8007efe <_dtoa_r+0x5a>
 8007f3a:	9e06      	ldr	r6, [sp, #24]
 8007f3c:	9f07      	ldr	r7, [sp, #28]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	2300      	movs	r3, #0
 8007f42:	0030      	movs	r0, r6
 8007f44:	0039      	movs	r1, r7
 8007f46:	f7f8 fa87 	bl	8000458 <__aeabi_dcmpeq>
 8007f4a:	1e05      	subs	r5, r0, #0
 8007f4c:	d00e      	beq.n	8007f6c <_dtoa_r+0xc8>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007f52:	6013      	str	r3, [r2, #0]
 8007f54:	4ba6      	ldr	r3, [pc, #664]	; (80081f0 <_dtoa_r+0x34c>)
 8007f56:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007f58:	930a      	str	r3, [sp, #40]	; 0x28
 8007f5a:	2a00      	cmp	r2, #0
 8007f5c:	d101      	bne.n	8007f62 <_dtoa_r+0xbe>
 8007f5e:	f000 fd78 	bl	8008a52 <_dtoa_r+0xbae>
 8007f62:	4aa4      	ldr	r2, [pc, #656]	; (80081f4 <_dtoa_r+0x350>)
 8007f64:	9926      	ldr	r1, [sp, #152]	; 0x98
 8007f66:	600a      	str	r2, [r1, #0]
 8007f68:	f000 fd73 	bl	8008a52 <_dtoa_r+0xbae>
 8007f6c:	ab1a      	add	r3, sp, #104	; 0x68
 8007f6e:	9301      	str	r3, [sp, #4]
 8007f70:	ab1b      	add	r3, sp, #108	; 0x6c
 8007f72:	9300      	str	r3, [sp, #0]
 8007f74:	0032      	movs	r2, r6
 8007f76:	003b      	movs	r3, r7
 8007f78:	9804      	ldr	r0, [sp, #16]
 8007f7a:	f001 f92b 	bl	80091d4 <__d2b>
 8007f7e:	0063      	lsls	r3, r4, #1
 8007f80:	9005      	str	r0, [sp, #20]
 8007f82:	0d5b      	lsrs	r3, r3, #21
 8007f84:	d100      	bne.n	8007f88 <_dtoa_r+0xe4>
 8007f86:	e07f      	b.n	8008088 <_dtoa_r+0x1e4>
 8007f88:	033a      	lsls	r2, r7, #12
 8007f8a:	4c9b      	ldr	r4, [pc, #620]	; (80081f8 <_dtoa_r+0x354>)
 8007f8c:	0b12      	lsrs	r2, r2, #12
 8007f8e:	4314      	orrs	r4, r2
 8007f90:	0021      	movs	r1, r4
 8007f92:	4a9a      	ldr	r2, [pc, #616]	; (80081fc <_dtoa_r+0x358>)
 8007f94:	0030      	movs	r0, r6
 8007f96:	9518      	str	r5, [sp, #96]	; 0x60
 8007f98:	189e      	adds	r6, r3, r2
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	4b98      	ldr	r3, [pc, #608]	; (8008200 <_dtoa_r+0x35c>)
 8007f9e:	f7f9 fd2d 	bl	80019fc <__aeabi_dsub>
 8007fa2:	4a98      	ldr	r2, [pc, #608]	; (8008204 <_dtoa_r+0x360>)
 8007fa4:	4b98      	ldr	r3, [pc, #608]	; (8008208 <_dtoa_r+0x364>)
 8007fa6:	f7f9 faa9 	bl	80014fc <__aeabi_dmul>
 8007faa:	4a98      	ldr	r2, [pc, #608]	; (800820c <_dtoa_r+0x368>)
 8007fac:	4b98      	ldr	r3, [pc, #608]	; (8008210 <_dtoa_r+0x36c>)
 8007fae:	f7f8 fb61 	bl	8000674 <__aeabi_dadd>
 8007fb2:	0004      	movs	r4, r0
 8007fb4:	0030      	movs	r0, r6
 8007fb6:	000d      	movs	r5, r1
 8007fb8:	f7fa f88a 	bl	80020d0 <__aeabi_i2d>
 8007fbc:	4a95      	ldr	r2, [pc, #596]	; (8008214 <_dtoa_r+0x370>)
 8007fbe:	4b96      	ldr	r3, [pc, #600]	; (8008218 <_dtoa_r+0x374>)
 8007fc0:	f7f9 fa9c 	bl	80014fc <__aeabi_dmul>
 8007fc4:	0002      	movs	r2, r0
 8007fc6:	000b      	movs	r3, r1
 8007fc8:	0020      	movs	r0, r4
 8007fca:	0029      	movs	r1, r5
 8007fcc:	f7f8 fb52 	bl	8000674 <__aeabi_dadd>
 8007fd0:	0004      	movs	r4, r0
 8007fd2:	000d      	movs	r5, r1
 8007fd4:	f7fa f848 	bl	8002068 <__aeabi_d2iz>
 8007fd8:	2200      	movs	r2, #0
 8007fda:	9003      	str	r0, [sp, #12]
 8007fdc:	2300      	movs	r3, #0
 8007fde:	0020      	movs	r0, r4
 8007fe0:	0029      	movs	r1, r5
 8007fe2:	f7f8 fa3f 	bl	8000464 <__aeabi_dcmplt>
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	d00e      	beq.n	8008008 <_dtoa_r+0x164>
 8007fea:	9803      	ldr	r0, [sp, #12]
 8007fec:	f7fa f870 	bl	80020d0 <__aeabi_i2d>
 8007ff0:	000b      	movs	r3, r1
 8007ff2:	0002      	movs	r2, r0
 8007ff4:	0029      	movs	r1, r5
 8007ff6:	0020      	movs	r0, r4
 8007ff8:	f7f8 fa2e 	bl	8000458 <__aeabi_dcmpeq>
 8007ffc:	0003      	movs	r3, r0
 8007ffe:	4258      	negs	r0, r3
 8008000:	4158      	adcs	r0, r3
 8008002:	9b03      	ldr	r3, [sp, #12]
 8008004:	1a1b      	subs	r3, r3, r0
 8008006:	9303      	str	r3, [sp, #12]
 8008008:	2301      	movs	r3, #1
 800800a:	9316      	str	r3, [sp, #88]	; 0x58
 800800c:	9b03      	ldr	r3, [sp, #12]
 800800e:	2b16      	cmp	r3, #22
 8008010:	d80f      	bhi.n	8008032 <_dtoa_r+0x18e>
 8008012:	4982      	ldr	r1, [pc, #520]	; (800821c <_dtoa_r+0x378>)
 8008014:	00db      	lsls	r3, r3, #3
 8008016:	18c9      	adds	r1, r1, r3
 8008018:	6808      	ldr	r0, [r1, #0]
 800801a:	6849      	ldr	r1, [r1, #4]
 800801c:	9a06      	ldr	r2, [sp, #24]
 800801e:	9b07      	ldr	r3, [sp, #28]
 8008020:	f7f8 fa34 	bl	800048c <__aeabi_dcmpgt>
 8008024:	2800      	cmp	r0, #0
 8008026:	d04b      	beq.n	80080c0 <_dtoa_r+0x21c>
 8008028:	9b03      	ldr	r3, [sp, #12]
 800802a:	3b01      	subs	r3, #1
 800802c:	9303      	str	r3, [sp, #12]
 800802e:	2300      	movs	r3, #0
 8008030:	9316      	str	r3, [sp, #88]	; 0x58
 8008032:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008034:	1b9e      	subs	r6, r3, r6
 8008036:	2300      	movs	r3, #0
 8008038:	930b      	str	r3, [sp, #44]	; 0x2c
 800803a:	0033      	movs	r3, r6
 800803c:	3b01      	subs	r3, #1
 800803e:	930c      	str	r3, [sp, #48]	; 0x30
 8008040:	d504      	bpl.n	800804c <_dtoa_r+0x1a8>
 8008042:	2301      	movs	r3, #1
 8008044:	1b9b      	subs	r3, r3, r6
 8008046:	930b      	str	r3, [sp, #44]	; 0x2c
 8008048:	2300      	movs	r3, #0
 800804a:	930c      	str	r3, [sp, #48]	; 0x30
 800804c:	9b03      	ldr	r3, [sp, #12]
 800804e:	2b00      	cmp	r3, #0
 8008050:	db38      	blt.n	80080c4 <_dtoa_r+0x220>
 8008052:	9a03      	ldr	r2, [sp, #12]
 8008054:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008056:	4694      	mov	ip, r2
 8008058:	4463      	add	r3, ip
 800805a:	930c      	str	r3, [sp, #48]	; 0x30
 800805c:	2300      	movs	r3, #0
 800805e:	920f      	str	r2, [sp, #60]	; 0x3c
 8008060:	9308      	str	r3, [sp, #32]
 8008062:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008064:	2501      	movs	r5, #1
 8008066:	2b09      	cmp	r3, #9
 8008068:	d900      	bls.n	800806c <_dtoa_r+0x1c8>
 800806a:	e091      	b.n	8008190 <_dtoa_r+0x2ec>
 800806c:	2b05      	cmp	r3, #5
 800806e:	dd02      	ble.n	8008076 <_dtoa_r+0x1d2>
 8008070:	2500      	movs	r5, #0
 8008072:	3b04      	subs	r3, #4
 8008074:	9322      	str	r3, [sp, #136]	; 0x88
 8008076:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008078:	1e98      	subs	r0, r3, #2
 800807a:	2803      	cmp	r0, #3
 800807c:	d900      	bls.n	8008080 <_dtoa_r+0x1dc>
 800807e:	e091      	b.n	80081a4 <_dtoa_r+0x300>
 8008080:	f7f8 f846 	bl	8000110 <__gnu_thumb1_case_uqi>
 8008084:	76298482 	.word	0x76298482
 8008088:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800808a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800808c:	189e      	adds	r6, r3, r2
 800808e:	4b64      	ldr	r3, [pc, #400]	; (8008220 <_dtoa_r+0x37c>)
 8008090:	18f2      	adds	r2, r6, r3
 8008092:	2a20      	cmp	r2, #32
 8008094:	dd0f      	ble.n	80080b6 <_dtoa_r+0x212>
 8008096:	4b63      	ldr	r3, [pc, #396]	; (8008224 <_dtoa_r+0x380>)
 8008098:	9806      	ldr	r0, [sp, #24]
 800809a:	18f3      	adds	r3, r6, r3
 800809c:	40d8      	lsrs	r0, r3
 800809e:	2340      	movs	r3, #64	; 0x40
 80080a0:	1a9b      	subs	r3, r3, r2
 80080a2:	409c      	lsls	r4, r3
 80080a4:	4320      	orrs	r0, r4
 80080a6:	f7fa f855 	bl	8002154 <__aeabi_ui2d>
 80080aa:	2301      	movs	r3, #1
 80080ac:	4c5e      	ldr	r4, [pc, #376]	; (8008228 <_dtoa_r+0x384>)
 80080ae:	3e01      	subs	r6, #1
 80080b0:	1909      	adds	r1, r1, r4
 80080b2:	9318      	str	r3, [sp, #96]	; 0x60
 80080b4:	e771      	b.n	8007f9a <_dtoa_r+0xf6>
 80080b6:	2320      	movs	r3, #32
 80080b8:	9806      	ldr	r0, [sp, #24]
 80080ba:	1a9b      	subs	r3, r3, r2
 80080bc:	4098      	lsls	r0, r3
 80080be:	e7f2      	b.n	80080a6 <_dtoa_r+0x202>
 80080c0:	9016      	str	r0, [sp, #88]	; 0x58
 80080c2:	e7b6      	b.n	8008032 <_dtoa_r+0x18e>
 80080c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080c6:	9a03      	ldr	r2, [sp, #12]
 80080c8:	1a9b      	subs	r3, r3, r2
 80080ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80080cc:	4253      	negs	r3, r2
 80080ce:	9308      	str	r3, [sp, #32]
 80080d0:	2300      	movs	r3, #0
 80080d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80080d4:	e7c5      	b.n	8008062 <_dtoa_r+0x1be>
 80080d6:	2301      	movs	r3, #1
 80080d8:	930e      	str	r3, [sp, #56]	; 0x38
 80080da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080dc:	2b00      	cmp	r3, #0
 80080de:	dd65      	ble.n	80081ac <_dtoa_r+0x308>
 80080e0:	001f      	movs	r7, r3
 80080e2:	930d      	str	r3, [sp, #52]	; 0x34
 80080e4:	9a04      	ldr	r2, [sp, #16]
 80080e6:	6a54      	ldr	r4, [r2, #36]	; 0x24
 80080e8:	2200      	movs	r2, #0
 80080ea:	6062      	str	r2, [r4, #4]
 80080ec:	3204      	adds	r2, #4
 80080ee:	0011      	movs	r1, r2
 80080f0:	3114      	adds	r1, #20
 80080f2:	4299      	cmp	r1, r3
 80080f4:	d95f      	bls.n	80081b6 <_dtoa_r+0x312>
 80080f6:	6861      	ldr	r1, [r4, #4]
 80080f8:	9804      	ldr	r0, [sp, #16]
 80080fa:	f000 fddc 	bl	8008cb6 <_Balloc>
 80080fe:	9b04      	ldr	r3, [sp, #16]
 8008100:	6020      	str	r0, [r4, #0]
 8008102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	930a      	str	r3, [sp, #40]	; 0x28
 8008108:	2f0e      	cmp	r7, #14
 800810a:	d900      	bls.n	800810e <_dtoa_r+0x26a>
 800810c:	e105      	b.n	800831a <_dtoa_r+0x476>
 800810e:	2d00      	cmp	r5, #0
 8008110:	d100      	bne.n	8008114 <_dtoa_r+0x270>
 8008112:	e102      	b.n	800831a <_dtoa_r+0x476>
 8008114:	9b06      	ldr	r3, [sp, #24]
 8008116:	9c07      	ldr	r4, [sp, #28]
 8008118:	9314      	str	r3, [sp, #80]	; 0x50
 800811a:	9415      	str	r4, [sp, #84]	; 0x54
 800811c:	9b03      	ldr	r3, [sp, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	dc00      	bgt.n	8008124 <_dtoa_r+0x280>
 8008122:	e085      	b.n	8008230 <_dtoa_r+0x38c>
 8008124:	001a      	movs	r2, r3
 8008126:	210f      	movs	r1, #15
 8008128:	4b3c      	ldr	r3, [pc, #240]	; (800821c <_dtoa_r+0x378>)
 800812a:	400a      	ands	r2, r1
 800812c:	00d2      	lsls	r2, r2, #3
 800812e:	189b      	adds	r3, r3, r2
 8008130:	685c      	ldr	r4, [r3, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	9310      	str	r3, [sp, #64]	; 0x40
 8008136:	9411      	str	r4, [sp, #68]	; 0x44
 8008138:	9b03      	ldr	r3, [sp, #12]
 800813a:	2402      	movs	r4, #2
 800813c:	111d      	asrs	r5, r3, #4
 800813e:	06eb      	lsls	r3, r5, #27
 8008140:	d50a      	bpl.n	8008158 <_dtoa_r+0x2b4>
 8008142:	4b3a      	ldr	r3, [pc, #232]	; (800822c <_dtoa_r+0x388>)
 8008144:	400d      	ands	r5, r1
 8008146:	6a1a      	ldr	r2, [r3, #32]
 8008148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800814c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800814e:	f7f8 fda1 	bl	8000c94 <__aeabi_ddiv>
 8008152:	9006      	str	r0, [sp, #24]
 8008154:	9107      	str	r1, [sp, #28]
 8008156:	3401      	adds	r4, #1
 8008158:	4e34      	ldr	r6, [pc, #208]	; (800822c <_dtoa_r+0x388>)
 800815a:	2d00      	cmp	r5, #0
 800815c:	d130      	bne.n	80081c0 <_dtoa_r+0x31c>
 800815e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008160:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008162:	9806      	ldr	r0, [sp, #24]
 8008164:	9907      	ldr	r1, [sp, #28]
 8008166:	f7f8 fd95 	bl	8000c94 <__aeabi_ddiv>
 800816a:	9006      	str	r0, [sp, #24]
 800816c:	9107      	str	r1, [sp, #28]
 800816e:	e07a      	b.n	8008266 <_dtoa_r+0x3c2>
 8008170:	2301      	movs	r3, #1
 8008172:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008174:	930e      	str	r3, [sp, #56]	; 0x38
 8008176:	4694      	mov	ip, r2
 8008178:	9b03      	ldr	r3, [sp, #12]
 800817a:	4463      	add	r3, ip
 800817c:	1c5f      	adds	r7, r3, #1
 800817e:	930d      	str	r3, [sp, #52]	; 0x34
 8008180:	1e3b      	subs	r3, r7, #0
 8008182:	dcaf      	bgt.n	80080e4 <_dtoa_r+0x240>
 8008184:	2301      	movs	r3, #1
 8008186:	e7ad      	b.n	80080e4 <_dtoa_r+0x240>
 8008188:	2300      	movs	r3, #0
 800818a:	e7a5      	b.n	80080d8 <_dtoa_r+0x234>
 800818c:	2300      	movs	r3, #0
 800818e:	e7f0      	b.n	8008172 <_dtoa_r+0x2ce>
 8008190:	2300      	movs	r3, #0
 8008192:	950e      	str	r5, [sp, #56]	; 0x38
 8008194:	9322      	str	r3, [sp, #136]	; 0x88
 8008196:	3b01      	subs	r3, #1
 8008198:	2200      	movs	r2, #0
 800819a:	930d      	str	r3, [sp, #52]	; 0x34
 800819c:	001f      	movs	r7, r3
 800819e:	3313      	adds	r3, #19
 80081a0:	9223      	str	r2, [sp, #140]	; 0x8c
 80081a2:	e79f      	b.n	80080e4 <_dtoa_r+0x240>
 80081a4:	2301      	movs	r3, #1
 80081a6:	930e      	str	r3, [sp, #56]	; 0x38
 80081a8:	3b02      	subs	r3, #2
 80081aa:	e7f5      	b.n	8008198 <_dtoa_r+0x2f4>
 80081ac:	2301      	movs	r3, #1
 80081ae:	930d      	str	r3, [sp, #52]	; 0x34
 80081b0:	001f      	movs	r7, r3
 80081b2:	001a      	movs	r2, r3
 80081b4:	e7f4      	b.n	80081a0 <_dtoa_r+0x2fc>
 80081b6:	6861      	ldr	r1, [r4, #4]
 80081b8:	0052      	lsls	r2, r2, #1
 80081ba:	3101      	adds	r1, #1
 80081bc:	6061      	str	r1, [r4, #4]
 80081be:	e796      	b.n	80080ee <_dtoa_r+0x24a>
 80081c0:	2301      	movs	r3, #1
 80081c2:	421d      	tst	r5, r3
 80081c4:	d008      	beq.n	80081d8 <_dtoa_r+0x334>
 80081c6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80081c8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80081ca:	18e4      	adds	r4, r4, r3
 80081cc:	6832      	ldr	r2, [r6, #0]
 80081ce:	6873      	ldr	r3, [r6, #4]
 80081d0:	f7f9 f994 	bl	80014fc <__aeabi_dmul>
 80081d4:	9010      	str	r0, [sp, #64]	; 0x40
 80081d6:	9111      	str	r1, [sp, #68]	; 0x44
 80081d8:	106d      	asrs	r5, r5, #1
 80081da:	3608      	adds	r6, #8
 80081dc:	e7bd      	b.n	800815a <_dtoa_r+0x2b6>
 80081de:	46c0      	nop			; (mov r8, r8)
 80081e0:	7ff00000 	.word	0x7ff00000
 80081e4:	0000270f 	.word	0x0000270f
 80081e8:	080098d9 	.word	0x080098d9
 80081ec:	080098dc 	.word	0x080098dc
 80081f0:	080098ae 	.word	0x080098ae
 80081f4:	080098af 	.word	0x080098af
 80081f8:	3ff00000 	.word	0x3ff00000
 80081fc:	fffffc01 	.word	0xfffffc01
 8008200:	3ff80000 	.word	0x3ff80000
 8008204:	636f4361 	.word	0x636f4361
 8008208:	3fd287a7 	.word	0x3fd287a7
 800820c:	8b60c8b3 	.word	0x8b60c8b3
 8008210:	3fc68a28 	.word	0x3fc68a28
 8008214:	509f79fb 	.word	0x509f79fb
 8008218:	3fd34413 	.word	0x3fd34413
 800821c:	08009908 	.word	0x08009908
 8008220:	00000432 	.word	0x00000432
 8008224:	00000412 	.word	0x00000412
 8008228:	fe100000 	.word	0xfe100000
 800822c:	080098e0 	.word	0x080098e0
 8008230:	9b03      	ldr	r3, [sp, #12]
 8008232:	2402      	movs	r4, #2
 8008234:	2b00      	cmp	r3, #0
 8008236:	d016      	beq.n	8008266 <_dtoa_r+0x3c2>
 8008238:	9814      	ldr	r0, [sp, #80]	; 0x50
 800823a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800823c:	425d      	negs	r5, r3
 800823e:	230f      	movs	r3, #15
 8008240:	4aca      	ldr	r2, [pc, #808]	; (800856c <_dtoa_r+0x6c8>)
 8008242:	402b      	ands	r3, r5
 8008244:	00db      	lsls	r3, r3, #3
 8008246:	18d3      	adds	r3, r2, r3
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	f7f9 f956 	bl	80014fc <__aeabi_dmul>
 8008250:	2300      	movs	r3, #0
 8008252:	9006      	str	r0, [sp, #24]
 8008254:	9107      	str	r1, [sp, #28]
 8008256:	4ec6      	ldr	r6, [pc, #792]	; (8008570 <_dtoa_r+0x6cc>)
 8008258:	112d      	asrs	r5, r5, #4
 800825a:	2d00      	cmp	r5, #0
 800825c:	d000      	beq.n	8008260 <_dtoa_r+0x3bc>
 800825e:	e08c      	b.n	800837a <_dtoa_r+0x4d6>
 8008260:	2b00      	cmp	r3, #0
 8008262:	d000      	beq.n	8008266 <_dtoa_r+0x3c2>
 8008264:	e781      	b.n	800816a <_dtoa_r+0x2c6>
 8008266:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008268:	2b00      	cmp	r3, #0
 800826a:	d100      	bne.n	800826e <_dtoa_r+0x3ca>
 800826c:	e091      	b.n	8008392 <_dtoa_r+0x4ee>
 800826e:	9a06      	ldr	r2, [sp, #24]
 8008270:	9b07      	ldr	r3, [sp, #28]
 8008272:	9210      	str	r2, [sp, #64]	; 0x40
 8008274:	9311      	str	r3, [sp, #68]	; 0x44
 8008276:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008278:	9911      	ldr	r1, [sp, #68]	; 0x44
 800827a:	2200      	movs	r2, #0
 800827c:	4bbd      	ldr	r3, [pc, #756]	; (8008574 <_dtoa_r+0x6d0>)
 800827e:	f7f8 f8f1 	bl	8000464 <__aeabi_dcmplt>
 8008282:	2800      	cmp	r0, #0
 8008284:	d100      	bne.n	8008288 <_dtoa_r+0x3e4>
 8008286:	e084      	b.n	8008392 <_dtoa_r+0x4ee>
 8008288:	2f00      	cmp	r7, #0
 800828a:	d100      	bne.n	800828e <_dtoa_r+0x3ea>
 800828c:	e081      	b.n	8008392 <_dtoa_r+0x4ee>
 800828e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008290:	2b00      	cmp	r3, #0
 8008292:	dd3e      	ble.n	8008312 <_dtoa_r+0x46e>
 8008294:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008296:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008298:	9b03      	ldr	r3, [sp, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	1e5e      	subs	r6, r3, #1
 800829e:	4bb6      	ldr	r3, [pc, #728]	; (8008578 <_dtoa_r+0x6d4>)
 80082a0:	f7f9 f92c 	bl	80014fc <__aeabi_dmul>
 80082a4:	9006      	str	r0, [sp, #24]
 80082a6:	9107      	str	r1, [sp, #28]
 80082a8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80082aa:	3401      	adds	r4, #1
 80082ac:	0020      	movs	r0, r4
 80082ae:	f7f9 ff0f 	bl	80020d0 <__aeabi_i2d>
 80082b2:	9a06      	ldr	r2, [sp, #24]
 80082b4:	9b07      	ldr	r3, [sp, #28]
 80082b6:	f7f9 f921 	bl	80014fc <__aeabi_dmul>
 80082ba:	2200      	movs	r2, #0
 80082bc:	4baf      	ldr	r3, [pc, #700]	; (800857c <_dtoa_r+0x6d8>)
 80082be:	f7f8 f9d9 	bl	8000674 <__aeabi_dadd>
 80082c2:	9012      	str	r0, [sp, #72]	; 0x48
 80082c4:	9113      	str	r1, [sp, #76]	; 0x4c
 80082c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80082ca:	4aad      	ldr	r2, [pc, #692]	; (8008580 <_dtoa_r+0x6dc>)
 80082cc:	9310      	str	r3, [sp, #64]	; 0x40
 80082ce:	9411      	str	r4, [sp, #68]	; 0x44
 80082d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082d2:	189c      	adds	r4, r3, r2
 80082d4:	9411      	str	r4, [sp, #68]	; 0x44
 80082d6:	2d00      	cmp	r5, #0
 80082d8:	d15e      	bne.n	8008398 <_dtoa_r+0x4f4>
 80082da:	9806      	ldr	r0, [sp, #24]
 80082dc:	9907      	ldr	r1, [sp, #28]
 80082de:	2200      	movs	r2, #0
 80082e0:	4ba8      	ldr	r3, [pc, #672]	; (8008584 <_dtoa_r+0x6e0>)
 80082e2:	f7f9 fb8b 	bl	80019fc <__aeabi_dsub>
 80082e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082e8:	0023      	movs	r3, r4
 80082ea:	9006      	str	r0, [sp, #24]
 80082ec:	9107      	str	r1, [sp, #28]
 80082ee:	f7f8 f8cd 	bl	800048c <__aeabi_dcmpgt>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	d000      	beq.n	80082f8 <_dtoa_r+0x454>
 80082f6:	e301      	b.n	80088fc <_dtoa_r+0xa58>
 80082f8:	48a3      	ldr	r0, [pc, #652]	; (8008588 <_dtoa_r+0x6e4>)
 80082fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80082fc:	4684      	mov	ip, r0
 80082fe:	4461      	add	r1, ip
 8008300:	000b      	movs	r3, r1
 8008302:	9806      	ldr	r0, [sp, #24]
 8008304:	9907      	ldr	r1, [sp, #28]
 8008306:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008308:	f7f8 f8ac 	bl	8000464 <__aeabi_dcmplt>
 800830c:	2800      	cmp	r0, #0
 800830e:	d000      	beq.n	8008312 <_dtoa_r+0x46e>
 8008310:	e2e8      	b.n	80088e4 <_dtoa_r+0xa40>
 8008312:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008314:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8008316:	9306      	str	r3, [sp, #24]
 8008318:	9407      	str	r4, [sp, #28]
 800831a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800831c:	2b00      	cmp	r3, #0
 800831e:	da00      	bge.n	8008322 <_dtoa_r+0x47e>
 8008320:	e157      	b.n	80085d2 <_dtoa_r+0x72e>
 8008322:	9a03      	ldr	r2, [sp, #12]
 8008324:	2a0e      	cmp	r2, #14
 8008326:	dd00      	ble.n	800832a <_dtoa_r+0x486>
 8008328:	e153      	b.n	80085d2 <_dtoa_r+0x72e>
 800832a:	4b90      	ldr	r3, [pc, #576]	; (800856c <_dtoa_r+0x6c8>)
 800832c:	00d2      	lsls	r2, r2, #3
 800832e:	189b      	adds	r3, r3, r2
 8008330:	685c      	ldr	r4, [r3, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	9308      	str	r3, [sp, #32]
 8008336:	9409      	str	r4, [sp, #36]	; 0x24
 8008338:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800833a:	2b00      	cmp	r3, #0
 800833c:	db00      	blt.n	8008340 <_dtoa_r+0x49c>
 800833e:	e0ce      	b.n	80084de <_dtoa_r+0x63a>
 8008340:	2f00      	cmp	r7, #0
 8008342:	dd00      	ble.n	8008346 <_dtoa_r+0x4a2>
 8008344:	e0cb      	b.n	80084de <_dtoa_r+0x63a>
 8008346:	d000      	beq.n	800834a <_dtoa_r+0x4a6>
 8008348:	e2cf      	b.n	80088ea <_dtoa_r+0xa46>
 800834a:	9808      	ldr	r0, [sp, #32]
 800834c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800834e:	2200      	movs	r2, #0
 8008350:	4b8c      	ldr	r3, [pc, #560]	; (8008584 <_dtoa_r+0x6e0>)
 8008352:	f7f9 f8d3 	bl	80014fc <__aeabi_dmul>
 8008356:	9a06      	ldr	r2, [sp, #24]
 8008358:	9b07      	ldr	r3, [sp, #28]
 800835a:	f7f8 f8a1 	bl	80004a0 <__aeabi_dcmpge>
 800835e:	003e      	movs	r6, r7
 8008360:	9708      	str	r7, [sp, #32]
 8008362:	2800      	cmp	r0, #0
 8008364:	d000      	beq.n	8008368 <_dtoa_r+0x4c4>
 8008366:	e2a4      	b.n	80088b2 <_dtoa_r+0xa0e>
 8008368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800836a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800836c:	1c5d      	adds	r5, r3, #1
 800836e:	2331      	movs	r3, #49	; 0x31
 8008370:	7013      	strb	r3, [r2, #0]
 8008372:	9b03      	ldr	r3, [sp, #12]
 8008374:	3301      	adds	r3, #1
 8008376:	9303      	str	r3, [sp, #12]
 8008378:	e29f      	b.n	80088ba <_dtoa_r+0xa16>
 800837a:	2201      	movs	r2, #1
 800837c:	4215      	tst	r5, r2
 800837e:	d005      	beq.n	800838c <_dtoa_r+0x4e8>
 8008380:	18a4      	adds	r4, r4, r2
 8008382:	6832      	ldr	r2, [r6, #0]
 8008384:	6873      	ldr	r3, [r6, #4]
 8008386:	f7f9 f8b9 	bl	80014fc <__aeabi_dmul>
 800838a:	2301      	movs	r3, #1
 800838c:	106d      	asrs	r5, r5, #1
 800838e:	3608      	adds	r6, #8
 8008390:	e763      	b.n	800825a <_dtoa_r+0x3b6>
 8008392:	9e03      	ldr	r6, [sp, #12]
 8008394:	003d      	movs	r5, r7
 8008396:	e789      	b.n	80082ac <_dtoa_r+0x408>
 8008398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800839a:	1e69      	subs	r1, r5, #1
 800839c:	1952      	adds	r2, r2, r5
 800839e:	9217      	str	r2, [sp, #92]	; 0x5c
 80083a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083a2:	4b72      	ldr	r3, [pc, #456]	; (800856c <_dtoa_r+0x6c8>)
 80083a4:	00c9      	lsls	r1, r1, #3
 80083a6:	2a00      	cmp	r2, #0
 80083a8:	d04a      	beq.n	8008440 <_dtoa_r+0x59c>
 80083aa:	185b      	adds	r3, r3, r1
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	2000      	movs	r0, #0
 80083b2:	4976      	ldr	r1, [pc, #472]	; (800858c <_dtoa_r+0x6e8>)
 80083b4:	f7f8 fc6e 	bl	8000c94 <__aeabi_ddiv>
 80083b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80083ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083bc:	f7f9 fb1e 	bl	80019fc <__aeabi_dsub>
 80083c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083c2:	9010      	str	r0, [sp, #64]	; 0x40
 80083c4:	9111      	str	r1, [sp, #68]	; 0x44
 80083c6:	9312      	str	r3, [sp, #72]	; 0x48
 80083c8:	9806      	ldr	r0, [sp, #24]
 80083ca:	9907      	ldr	r1, [sp, #28]
 80083cc:	f7f9 fe4c 	bl	8002068 <__aeabi_d2iz>
 80083d0:	0004      	movs	r4, r0
 80083d2:	f7f9 fe7d 	bl	80020d0 <__aeabi_i2d>
 80083d6:	0002      	movs	r2, r0
 80083d8:	000b      	movs	r3, r1
 80083da:	9806      	ldr	r0, [sp, #24]
 80083dc:	9907      	ldr	r1, [sp, #28]
 80083de:	f7f9 fb0d 	bl	80019fc <__aeabi_dsub>
 80083e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083e4:	3430      	adds	r4, #48	; 0x30
 80083e6:	1c5d      	adds	r5, r3, #1
 80083e8:	701c      	strb	r4, [r3, #0]
 80083ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80083ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083ee:	9006      	str	r0, [sp, #24]
 80083f0:	9107      	str	r1, [sp, #28]
 80083f2:	f7f8 f837 	bl	8000464 <__aeabi_dcmplt>
 80083f6:	2800      	cmp	r0, #0
 80083f8:	d165      	bne.n	80084c6 <_dtoa_r+0x622>
 80083fa:	9a06      	ldr	r2, [sp, #24]
 80083fc:	9b07      	ldr	r3, [sp, #28]
 80083fe:	2000      	movs	r0, #0
 8008400:	495c      	ldr	r1, [pc, #368]	; (8008574 <_dtoa_r+0x6d0>)
 8008402:	f7f9 fafb 	bl	80019fc <__aeabi_dsub>
 8008406:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008408:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800840a:	f7f8 f82b 	bl	8000464 <__aeabi_dcmplt>
 800840e:	2800      	cmp	r0, #0
 8008410:	d000      	beq.n	8008414 <_dtoa_r+0x570>
 8008412:	e0be      	b.n	8008592 <_dtoa_r+0x6ee>
 8008414:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008416:	429d      	cmp	r5, r3
 8008418:	d100      	bne.n	800841c <_dtoa_r+0x578>
 800841a:	e77a      	b.n	8008312 <_dtoa_r+0x46e>
 800841c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800841e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008420:	2200      	movs	r2, #0
 8008422:	4b55      	ldr	r3, [pc, #340]	; (8008578 <_dtoa_r+0x6d4>)
 8008424:	f7f9 f86a 	bl	80014fc <__aeabi_dmul>
 8008428:	2200      	movs	r2, #0
 800842a:	9010      	str	r0, [sp, #64]	; 0x40
 800842c:	9111      	str	r1, [sp, #68]	; 0x44
 800842e:	9806      	ldr	r0, [sp, #24]
 8008430:	9907      	ldr	r1, [sp, #28]
 8008432:	4b51      	ldr	r3, [pc, #324]	; (8008578 <_dtoa_r+0x6d4>)
 8008434:	f7f9 f862 	bl	80014fc <__aeabi_dmul>
 8008438:	9512      	str	r5, [sp, #72]	; 0x48
 800843a:	9006      	str	r0, [sp, #24]
 800843c:	9107      	str	r1, [sp, #28]
 800843e:	e7c3      	b.n	80083c8 <_dtoa_r+0x524>
 8008440:	1859      	adds	r1, r3, r1
 8008442:	6808      	ldr	r0, [r1, #0]
 8008444:	6849      	ldr	r1, [r1, #4]
 8008446:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008448:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800844a:	f7f9 f857 	bl	80014fc <__aeabi_dmul>
 800844e:	9010      	str	r0, [sp, #64]	; 0x40
 8008450:	9111      	str	r1, [sp, #68]	; 0x44
 8008452:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008454:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8008456:	9806      	ldr	r0, [sp, #24]
 8008458:	9907      	ldr	r1, [sp, #28]
 800845a:	f7f9 fe05 	bl	8002068 <__aeabi_d2iz>
 800845e:	9012      	str	r0, [sp, #72]	; 0x48
 8008460:	f7f9 fe36 	bl	80020d0 <__aeabi_i2d>
 8008464:	0002      	movs	r2, r0
 8008466:	000b      	movs	r3, r1
 8008468:	9806      	ldr	r0, [sp, #24]
 800846a:	9907      	ldr	r1, [sp, #28]
 800846c:	f7f9 fac6 	bl	80019fc <__aeabi_dsub>
 8008470:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008472:	9006      	str	r0, [sp, #24]
 8008474:	9107      	str	r1, [sp, #28]
 8008476:	3330      	adds	r3, #48	; 0x30
 8008478:	7023      	strb	r3, [r4, #0]
 800847a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800847c:	3401      	adds	r4, #1
 800847e:	2200      	movs	r2, #0
 8008480:	42a3      	cmp	r3, r4
 8008482:	d124      	bne.n	80084ce <_dtoa_r+0x62a>
 8008484:	4b41      	ldr	r3, [pc, #260]	; (800858c <_dtoa_r+0x6e8>)
 8008486:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008488:	9911      	ldr	r1, [sp, #68]	; 0x44
 800848a:	f7f8 f8f3 	bl	8000674 <__aeabi_dadd>
 800848e:	0002      	movs	r2, r0
 8008490:	000b      	movs	r3, r1
 8008492:	9806      	ldr	r0, [sp, #24]
 8008494:	9907      	ldr	r1, [sp, #28]
 8008496:	f7f7 fff9 	bl	800048c <__aeabi_dcmpgt>
 800849a:	2800      	cmp	r0, #0
 800849c:	d000      	beq.n	80084a0 <_dtoa_r+0x5fc>
 800849e:	e078      	b.n	8008592 <_dtoa_r+0x6ee>
 80084a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084a4:	2000      	movs	r0, #0
 80084a6:	4939      	ldr	r1, [pc, #228]	; (800858c <_dtoa_r+0x6e8>)
 80084a8:	f7f9 faa8 	bl	80019fc <__aeabi_dsub>
 80084ac:	0002      	movs	r2, r0
 80084ae:	000b      	movs	r3, r1
 80084b0:	9806      	ldr	r0, [sp, #24]
 80084b2:	9907      	ldr	r1, [sp, #28]
 80084b4:	f7f7 ffd6 	bl	8000464 <__aeabi_dcmplt>
 80084b8:	2800      	cmp	r0, #0
 80084ba:	d100      	bne.n	80084be <_dtoa_r+0x61a>
 80084bc:	e729      	b.n	8008312 <_dtoa_r+0x46e>
 80084be:	1e6b      	subs	r3, r5, #1
 80084c0:	781a      	ldrb	r2, [r3, #0]
 80084c2:	2a30      	cmp	r2, #48	; 0x30
 80084c4:	d001      	beq.n	80084ca <_dtoa_r+0x626>
 80084c6:	9603      	str	r6, [sp, #12]
 80084c8:	e03f      	b.n	800854a <_dtoa_r+0x6a6>
 80084ca:	001d      	movs	r5, r3
 80084cc:	e7f7      	b.n	80084be <_dtoa_r+0x61a>
 80084ce:	9806      	ldr	r0, [sp, #24]
 80084d0:	9907      	ldr	r1, [sp, #28]
 80084d2:	4b29      	ldr	r3, [pc, #164]	; (8008578 <_dtoa_r+0x6d4>)
 80084d4:	f7f9 f812 	bl	80014fc <__aeabi_dmul>
 80084d8:	9006      	str	r0, [sp, #24]
 80084da:	9107      	str	r1, [sp, #28]
 80084dc:	e7bb      	b.n	8008456 <_dtoa_r+0x5b2>
 80084de:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80084e0:	9a08      	ldr	r2, [sp, #32]
 80084e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e4:	9806      	ldr	r0, [sp, #24]
 80084e6:	9907      	ldr	r1, [sp, #28]
 80084e8:	f7f8 fbd4 	bl	8000c94 <__aeabi_ddiv>
 80084ec:	f7f9 fdbc 	bl	8002068 <__aeabi_d2iz>
 80084f0:	0004      	movs	r4, r0
 80084f2:	f7f9 fded 	bl	80020d0 <__aeabi_i2d>
 80084f6:	9a08      	ldr	r2, [sp, #32]
 80084f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084fa:	f7f8 ffff 	bl	80014fc <__aeabi_dmul>
 80084fe:	000b      	movs	r3, r1
 8008500:	0002      	movs	r2, r0
 8008502:	9806      	ldr	r0, [sp, #24]
 8008504:	9907      	ldr	r1, [sp, #28]
 8008506:	f7f9 fa79 	bl	80019fc <__aeabi_dsub>
 800850a:	0023      	movs	r3, r4
 800850c:	3330      	adds	r3, #48	; 0x30
 800850e:	7033      	strb	r3, [r6, #0]
 8008510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008512:	1c75      	adds	r5, r6, #1
 8008514:	1aeb      	subs	r3, r5, r3
 8008516:	429f      	cmp	r7, r3
 8008518:	d14c      	bne.n	80085b4 <_dtoa_r+0x710>
 800851a:	0002      	movs	r2, r0
 800851c:	000b      	movs	r3, r1
 800851e:	f7f8 f8a9 	bl	8000674 <__aeabi_dadd>
 8008522:	0006      	movs	r6, r0
 8008524:	000f      	movs	r7, r1
 8008526:	0002      	movs	r2, r0
 8008528:	000b      	movs	r3, r1
 800852a:	9808      	ldr	r0, [sp, #32]
 800852c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800852e:	f7f7 ff99 	bl	8000464 <__aeabi_dcmplt>
 8008532:	2800      	cmp	r0, #0
 8008534:	d12c      	bne.n	8008590 <_dtoa_r+0x6ec>
 8008536:	9808      	ldr	r0, [sp, #32]
 8008538:	9909      	ldr	r1, [sp, #36]	; 0x24
 800853a:	0032      	movs	r2, r6
 800853c:	003b      	movs	r3, r7
 800853e:	f7f7 ff8b 	bl	8000458 <__aeabi_dcmpeq>
 8008542:	2800      	cmp	r0, #0
 8008544:	d001      	beq.n	800854a <_dtoa_r+0x6a6>
 8008546:	07e3      	lsls	r3, r4, #31
 8008548:	d422      	bmi.n	8008590 <_dtoa_r+0x6ec>
 800854a:	9905      	ldr	r1, [sp, #20]
 800854c:	9804      	ldr	r0, [sp, #16]
 800854e:	f000 fbea 	bl	8008d26 <_Bfree>
 8008552:	2300      	movs	r3, #0
 8008554:	702b      	strb	r3, [r5, #0]
 8008556:	9b03      	ldr	r3, [sp, #12]
 8008558:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800855a:	3301      	adds	r3, #1
 800855c:	6013      	str	r3, [r2, #0]
 800855e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008560:	2b00      	cmp	r3, #0
 8008562:	d100      	bne.n	8008566 <_dtoa_r+0x6c2>
 8008564:	e275      	b.n	8008a52 <_dtoa_r+0xbae>
 8008566:	601d      	str	r5, [r3, #0]
 8008568:	e273      	b.n	8008a52 <_dtoa_r+0xbae>
 800856a:	46c0      	nop			; (mov r8, r8)
 800856c:	08009908 	.word	0x08009908
 8008570:	080098e0 	.word	0x080098e0
 8008574:	3ff00000 	.word	0x3ff00000
 8008578:	40240000 	.word	0x40240000
 800857c:	401c0000 	.word	0x401c0000
 8008580:	fcc00000 	.word	0xfcc00000
 8008584:	40140000 	.word	0x40140000
 8008588:	7cc00000 	.word	0x7cc00000
 800858c:	3fe00000 	.word	0x3fe00000
 8008590:	9e03      	ldr	r6, [sp, #12]
 8008592:	1e6b      	subs	r3, r5, #1
 8008594:	781a      	ldrb	r2, [r3, #0]
 8008596:	2a39      	cmp	r2, #57	; 0x39
 8008598:	d106      	bne.n	80085a8 <_dtoa_r+0x704>
 800859a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800859c:	429a      	cmp	r2, r3
 800859e:	d107      	bne.n	80085b0 <_dtoa_r+0x70c>
 80085a0:	2330      	movs	r3, #48	; 0x30
 80085a2:	7013      	strb	r3, [r2, #0]
 80085a4:	0013      	movs	r3, r2
 80085a6:	3601      	adds	r6, #1
 80085a8:	781a      	ldrb	r2, [r3, #0]
 80085aa:	3201      	adds	r2, #1
 80085ac:	701a      	strb	r2, [r3, #0]
 80085ae:	e78a      	b.n	80084c6 <_dtoa_r+0x622>
 80085b0:	001d      	movs	r5, r3
 80085b2:	e7ee      	b.n	8008592 <_dtoa_r+0x6ee>
 80085b4:	2200      	movs	r2, #0
 80085b6:	4bcf      	ldr	r3, [pc, #828]	; (80088f4 <_dtoa_r+0xa50>)
 80085b8:	f7f8 ffa0 	bl	80014fc <__aeabi_dmul>
 80085bc:	2200      	movs	r2, #0
 80085be:	2300      	movs	r3, #0
 80085c0:	9006      	str	r0, [sp, #24]
 80085c2:	9107      	str	r1, [sp, #28]
 80085c4:	002e      	movs	r6, r5
 80085c6:	f7f7 ff47 	bl	8000458 <__aeabi_dcmpeq>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	d100      	bne.n	80085d0 <_dtoa_r+0x72c>
 80085ce:	e787      	b.n	80084e0 <_dtoa_r+0x63c>
 80085d0:	e7bb      	b.n	800854a <_dtoa_r+0x6a6>
 80085d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085d4:	2a00      	cmp	r2, #0
 80085d6:	d100      	bne.n	80085da <_dtoa_r+0x736>
 80085d8:	e087      	b.n	80086ea <_dtoa_r+0x846>
 80085da:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80085dc:	2a01      	cmp	r2, #1
 80085de:	dc6e      	bgt.n	80086be <_dtoa_r+0x81a>
 80085e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80085e2:	2a00      	cmp	r2, #0
 80085e4:	d067      	beq.n	80086b6 <_dtoa_r+0x812>
 80085e6:	4ac4      	ldr	r2, [pc, #784]	; (80088f8 <_dtoa_r+0xa54>)
 80085e8:	189b      	adds	r3, r3, r2
 80085ea:	9d08      	ldr	r5, [sp, #32]
 80085ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80085ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085f0:	2101      	movs	r1, #1
 80085f2:	18d2      	adds	r2, r2, r3
 80085f4:	920b      	str	r2, [sp, #44]	; 0x2c
 80085f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085f8:	9804      	ldr	r0, [sp, #16]
 80085fa:	18d3      	adds	r3, r2, r3
 80085fc:	930c      	str	r3, [sp, #48]	; 0x30
 80085fe:	f000 fc30 	bl	8008e62 <__i2b>
 8008602:	0006      	movs	r6, r0
 8008604:	2c00      	cmp	r4, #0
 8008606:	dd0e      	ble.n	8008626 <_dtoa_r+0x782>
 8008608:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800860a:	2b00      	cmp	r3, #0
 800860c:	dd0b      	ble.n	8008626 <_dtoa_r+0x782>
 800860e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008610:	0023      	movs	r3, r4
 8008612:	4294      	cmp	r4, r2
 8008614:	dd00      	ble.n	8008618 <_dtoa_r+0x774>
 8008616:	0013      	movs	r3, r2
 8008618:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800861a:	1ae4      	subs	r4, r4, r3
 800861c:	1ad2      	subs	r2, r2, r3
 800861e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008620:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	930c      	str	r3, [sp, #48]	; 0x30
 8008626:	9b08      	ldr	r3, [sp, #32]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d01e      	beq.n	800866a <_dtoa_r+0x7c6>
 800862c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800862e:	2b00      	cmp	r3, #0
 8008630:	d05f      	beq.n	80086f2 <_dtoa_r+0x84e>
 8008632:	2d00      	cmp	r5, #0
 8008634:	dd11      	ble.n	800865a <_dtoa_r+0x7b6>
 8008636:	0031      	movs	r1, r6
 8008638:	002a      	movs	r2, r5
 800863a:	9804      	ldr	r0, [sp, #16]
 800863c:	f000 fcaa 	bl	8008f94 <__pow5mult>
 8008640:	9a05      	ldr	r2, [sp, #20]
 8008642:	0001      	movs	r1, r0
 8008644:	0006      	movs	r6, r0
 8008646:	9804      	ldr	r0, [sp, #16]
 8008648:	f000 fc14 	bl	8008e74 <__multiply>
 800864c:	9905      	ldr	r1, [sp, #20]
 800864e:	9010      	str	r0, [sp, #64]	; 0x40
 8008650:	9804      	ldr	r0, [sp, #16]
 8008652:	f000 fb68 	bl	8008d26 <_Bfree>
 8008656:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008658:	9305      	str	r3, [sp, #20]
 800865a:	9b08      	ldr	r3, [sp, #32]
 800865c:	1b5a      	subs	r2, r3, r5
 800865e:	d004      	beq.n	800866a <_dtoa_r+0x7c6>
 8008660:	9905      	ldr	r1, [sp, #20]
 8008662:	9804      	ldr	r0, [sp, #16]
 8008664:	f000 fc96 	bl	8008f94 <__pow5mult>
 8008668:	9005      	str	r0, [sp, #20]
 800866a:	2101      	movs	r1, #1
 800866c:	9804      	ldr	r0, [sp, #16]
 800866e:	f000 fbf8 	bl	8008e62 <__i2b>
 8008672:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008674:	9008      	str	r0, [sp, #32]
 8008676:	2b00      	cmp	r3, #0
 8008678:	dd3d      	ble.n	80086f6 <_dtoa_r+0x852>
 800867a:	001a      	movs	r2, r3
 800867c:	0001      	movs	r1, r0
 800867e:	9804      	ldr	r0, [sp, #16]
 8008680:	f000 fc88 	bl	8008f94 <__pow5mult>
 8008684:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008686:	9008      	str	r0, [sp, #32]
 8008688:	2500      	movs	r5, #0
 800868a:	2b01      	cmp	r3, #1
 800868c:	dc3b      	bgt.n	8008706 <_dtoa_r+0x862>
 800868e:	2500      	movs	r5, #0
 8008690:	9b06      	ldr	r3, [sp, #24]
 8008692:	42ab      	cmp	r3, r5
 8008694:	d133      	bne.n	80086fe <_dtoa_r+0x85a>
 8008696:	9b07      	ldr	r3, [sp, #28]
 8008698:	031b      	lsls	r3, r3, #12
 800869a:	42ab      	cmp	r3, r5
 800869c:	d12f      	bne.n	80086fe <_dtoa_r+0x85a>
 800869e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80086a0:	9a07      	ldr	r2, [sp, #28]
 80086a2:	4213      	tst	r3, r2
 80086a4:	d02b      	beq.n	80086fe <_dtoa_r+0x85a>
 80086a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086a8:	3501      	adds	r5, #1
 80086aa:	3301      	adds	r3, #1
 80086ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80086ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086b0:	3301      	adds	r3, #1
 80086b2:	930c      	str	r3, [sp, #48]	; 0x30
 80086b4:	e023      	b.n	80086fe <_dtoa_r+0x85a>
 80086b6:	2336      	movs	r3, #54	; 0x36
 80086b8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80086ba:	1a9b      	subs	r3, r3, r2
 80086bc:	e795      	b.n	80085ea <_dtoa_r+0x746>
 80086be:	9b08      	ldr	r3, [sp, #32]
 80086c0:	1e7d      	subs	r5, r7, #1
 80086c2:	42ab      	cmp	r3, r5
 80086c4:	db06      	blt.n	80086d4 <_dtoa_r+0x830>
 80086c6:	1b5d      	subs	r5, r3, r5
 80086c8:	2f00      	cmp	r7, #0
 80086ca:	da0b      	bge.n	80086e4 <_dtoa_r+0x840>
 80086cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086ce:	1bdc      	subs	r4, r3, r7
 80086d0:	2300      	movs	r3, #0
 80086d2:	e78c      	b.n	80085ee <_dtoa_r+0x74a>
 80086d4:	9b08      	ldr	r3, [sp, #32]
 80086d6:	9508      	str	r5, [sp, #32]
 80086d8:	1aea      	subs	r2, r5, r3
 80086da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086dc:	2500      	movs	r5, #0
 80086de:	189b      	adds	r3, r3, r2
 80086e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80086e2:	e7f1      	b.n	80086c8 <_dtoa_r+0x824>
 80086e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80086e6:	003b      	movs	r3, r7
 80086e8:	e781      	b.n	80085ee <_dtoa_r+0x74a>
 80086ea:	9d08      	ldr	r5, [sp, #32]
 80086ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80086ee:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80086f0:	e788      	b.n	8008604 <_dtoa_r+0x760>
 80086f2:	9a08      	ldr	r2, [sp, #32]
 80086f4:	e7b4      	b.n	8008660 <_dtoa_r+0x7bc>
 80086f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086f8:	2500      	movs	r5, #0
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	ddc7      	ble.n	800868e <_dtoa_r+0x7ea>
 80086fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008700:	2001      	movs	r0, #1
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00b      	beq.n	800871e <_dtoa_r+0x87a>
 8008706:	9b08      	ldr	r3, [sp, #32]
 8008708:	9a08      	ldr	r2, [sp, #32]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	930f      	str	r3, [sp, #60]	; 0x3c
 800870e:	3303      	adds	r3, #3
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	18d3      	adds	r3, r2, r3
 8008714:	6858      	ldr	r0, [r3, #4]
 8008716:	f000 fb5b 	bl	8008dd0 <__hi0bits>
 800871a:	2320      	movs	r3, #32
 800871c:	1a18      	subs	r0, r3, r0
 800871e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008720:	18c0      	adds	r0, r0, r3
 8008722:	231f      	movs	r3, #31
 8008724:	4018      	ands	r0, r3
 8008726:	d100      	bne.n	800872a <_dtoa_r+0x886>
 8008728:	e0ab      	b.n	8008882 <_dtoa_r+0x9de>
 800872a:	3301      	adds	r3, #1
 800872c:	1a1b      	subs	r3, r3, r0
 800872e:	2b04      	cmp	r3, #4
 8008730:	dc00      	bgt.n	8008734 <_dtoa_r+0x890>
 8008732:	e09b      	b.n	800886c <_dtoa_r+0x9c8>
 8008734:	231c      	movs	r3, #28
 8008736:	1a18      	subs	r0, r3, r0
 8008738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800873a:	1824      	adds	r4, r4, r0
 800873c:	181b      	adds	r3, r3, r0
 800873e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008742:	181b      	adds	r3, r3, r0
 8008744:	930c      	str	r3, [sp, #48]	; 0x30
 8008746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008748:	2b00      	cmp	r3, #0
 800874a:	dd05      	ble.n	8008758 <_dtoa_r+0x8b4>
 800874c:	001a      	movs	r2, r3
 800874e:	9905      	ldr	r1, [sp, #20]
 8008750:	9804      	ldr	r0, [sp, #16]
 8008752:	f000 fc71 	bl	8009038 <__lshift>
 8008756:	9005      	str	r0, [sp, #20]
 8008758:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800875a:	2b00      	cmp	r3, #0
 800875c:	dd05      	ble.n	800876a <_dtoa_r+0x8c6>
 800875e:	001a      	movs	r2, r3
 8008760:	9908      	ldr	r1, [sp, #32]
 8008762:	9804      	ldr	r0, [sp, #16]
 8008764:	f000 fc68 	bl	8009038 <__lshift>
 8008768:	9008      	str	r0, [sp, #32]
 800876a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800876c:	2b00      	cmp	r3, #0
 800876e:	d100      	bne.n	8008772 <_dtoa_r+0x8ce>
 8008770:	e089      	b.n	8008886 <_dtoa_r+0x9e2>
 8008772:	9908      	ldr	r1, [sp, #32]
 8008774:	9805      	ldr	r0, [sp, #20]
 8008776:	f000 fcb0 	bl	80090da <__mcmp>
 800877a:	2800      	cmp	r0, #0
 800877c:	db00      	blt.n	8008780 <_dtoa_r+0x8dc>
 800877e:	e082      	b.n	8008886 <_dtoa_r+0x9e2>
 8008780:	9b03      	ldr	r3, [sp, #12]
 8008782:	220a      	movs	r2, #10
 8008784:	3b01      	subs	r3, #1
 8008786:	9303      	str	r3, [sp, #12]
 8008788:	9905      	ldr	r1, [sp, #20]
 800878a:	2300      	movs	r3, #0
 800878c:	9804      	ldr	r0, [sp, #16]
 800878e:	f000 fae3 	bl	8008d58 <__multadd>
 8008792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008794:	9005      	str	r0, [sp, #20]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d100      	bne.n	800879c <_dtoa_r+0x8f8>
 800879a:	e15d      	b.n	8008a58 <_dtoa_r+0xbb4>
 800879c:	2300      	movs	r3, #0
 800879e:	0031      	movs	r1, r6
 80087a0:	220a      	movs	r2, #10
 80087a2:	9804      	ldr	r0, [sp, #16]
 80087a4:	f000 fad8 	bl	8008d58 <__multadd>
 80087a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087aa:	0006      	movs	r6, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	dc02      	bgt.n	80087b6 <_dtoa_r+0x912>
 80087b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	dc6d      	bgt.n	8008892 <_dtoa_r+0x9ee>
 80087b6:	2c00      	cmp	r4, #0
 80087b8:	dd05      	ble.n	80087c6 <_dtoa_r+0x922>
 80087ba:	0031      	movs	r1, r6
 80087bc:	0022      	movs	r2, r4
 80087be:	9804      	ldr	r0, [sp, #16]
 80087c0:	f000 fc3a 	bl	8009038 <__lshift>
 80087c4:	0006      	movs	r6, r0
 80087c6:	0030      	movs	r0, r6
 80087c8:	2d00      	cmp	r5, #0
 80087ca:	d011      	beq.n	80087f0 <_dtoa_r+0x94c>
 80087cc:	6871      	ldr	r1, [r6, #4]
 80087ce:	9804      	ldr	r0, [sp, #16]
 80087d0:	f000 fa71 	bl	8008cb6 <_Balloc>
 80087d4:	0031      	movs	r1, r6
 80087d6:	0004      	movs	r4, r0
 80087d8:	6933      	ldr	r3, [r6, #16]
 80087da:	310c      	adds	r1, #12
 80087dc:	1c9a      	adds	r2, r3, #2
 80087de:	0092      	lsls	r2, r2, #2
 80087e0:	300c      	adds	r0, #12
 80087e2:	f7fe fa05 	bl	8006bf0 <memcpy>
 80087e6:	2201      	movs	r2, #1
 80087e8:	0021      	movs	r1, r4
 80087ea:	9804      	ldr	r0, [sp, #16]
 80087ec:	f000 fc24 	bl	8009038 <__lshift>
 80087f0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80087f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087f4:	3f01      	subs	r7, #1
 80087f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80087f8:	19db      	adds	r3, r3, r7
 80087fa:	0037      	movs	r7, r6
 80087fc:	0006      	movs	r6, r0
 80087fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008800:	9908      	ldr	r1, [sp, #32]
 8008802:	9805      	ldr	r0, [sp, #20]
 8008804:	f7ff faca 	bl	8007d9c <quorem>
 8008808:	0039      	movs	r1, r7
 800880a:	900d      	str	r0, [sp, #52]	; 0x34
 800880c:	0004      	movs	r4, r0
 800880e:	9805      	ldr	r0, [sp, #20]
 8008810:	f000 fc63 	bl	80090da <__mcmp>
 8008814:	0032      	movs	r2, r6
 8008816:	900e      	str	r0, [sp, #56]	; 0x38
 8008818:	9908      	ldr	r1, [sp, #32]
 800881a:	9804      	ldr	r0, [sp, #16]
 800881c:	f000 fc76 	bl	800910c <__mdiff>
 8008820:	2301      	movs	r3, #1
 8008822:	930c      	str	r3, [sp, #48]	; 0x30
 8008824:	68c3      	ldr	r3, [r0, #12]
 8008826:	3430      	adds	r4, #48	; 0x30
 8008828:	0005      	movs	r5, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d104      	bne.n	8008838 <_dtoa_r+0x994>
 800882e:	0001      	movs	r1, r0
 8008830:	9805      	ldr	r0, [sp, #20]
 8008832:	f000 fc52 	bl	80090da <__mcmp>
 8008836:	900c      	str	r0, [sp, #48]	; 0x30
 8008838:	0029      	movs	r1, r5
 800883a:	9804      	ldr	r0, [sp, #16]
 800883c:	f000 fa73 	bl	8008d26 <_Bfree>
 8008840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008842:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008844:	4313      	orrs	r3, r2
 8008846:	d000      	beq.n	800884a <_dtoa_r+0x9a6>
 8008848:	e089      	b.n	800895e <_dtoa_r+0xaba>
 800884a:	9a06      	ldr	r2, [sp, #24]
 800884c:	3301      	adds	r3, #1
 800884e:	4213      	tst	r3, r2
 8008850:	d000      	beq.n	8008854 <_dtoa_r+0x9b0>
 8008852:	e084      	b.n	800895e <_dtoa_r+0xaba>
 8008854:	2c39      	cmp	r4, #57	; 0x39
 8008856:	d100      	bne.n	800885a <_dtoa_r+0x9b6>
 8008858:	e0a3      	b.n	80089a2 <_dtoa_r+0xafe>
 800885a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800885c:	2b00      	cmp	r3, #0
 800885e:	dd01      	ble.n	8008864 <_dtoa_r+0x9c0>
 8008860:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008862:	3431      	adds	r4, #49	; 0x31
 8008864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008866:	1c5d      	adds	r5, r3, #1
 8008868:	701c      	strb	r4, [r3, #0]
 800886a:	e027      	b.n	80088bc <_dtoa_r+0xa18>
 800886c:	2b04      	cmp	r3, #4
 800886e:	d100      	bne.n	8008872 <_dtoa_r+0x9ce>
 8008870:	e769      	b.n	8008746 <_dtoa_r+0x8a2>
 8008872:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008874:	331c      	adds	r3, #28
 8008876:	18d2      	adds	r2, r2, r3
 8008878:	920b      	str	r2, [sp, #44]	; 0x2c
 800887a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800887c:	18e4      	adds	r4, r4, r3
 800887e:	18d3      	adds	r3, r2, r3
 8008880:	e760      	b.n	8008744 <_dtoa_r+0x8a0>
 8008882:	0003      	movs	r3, r0
 8008884:	e7f5      	b.n	8008872 <_dtoa_r+0x9ce>
 8008886:	2f00      	cmp	r7, #0
 8008888:	dc3c      	bgt.n	8008904 <_dtoa_r+0xa60>
 800888a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800888c:	2b02      	cmp	r3, #2
 800888e:	dd39      	ble.n	8008904 <_dtoa_r+0xa60>
 8008890:	970d      	str	r7, [sp, #52]	; 0x34
 8008892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10c      	bne.n	80088b2 <_dtoa_r+0xa0e>
 8008898:	9908      	ldr	r1, [sp, #32]
 800889a:	2205      	movs	r2, #5
 800889c:	9804      	ldr	r0, [sp, #16]
 800889e:	f000 fa5b 	bl	8008d58 <__multadd>
 80088a2:	9008      	str	r0, [sp, #32]
 80088a4:	0001      	movs	r1, r0
 80088a6:	9805      	ldr	r0, [sp, #20]
 80088a8:	f000 fc17 	bl	80090da <__mcmp>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	dd00      	ble.n	80088b2 <_dtoa_r+0xa0e>
 80088b0:	e55a      	b.n	8008368 <_dtoa_r+0x4c4>
 80088b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80088b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80088b6:	43db      	mvns	r3, r3
 80088b8:	9303      	str	r3, [sp, #12]
 80088ba:	2700      	movs	r7, #0
 80088bc:	9908      	ldr	r1, [sp, #32]
 80088be:	9804      	ldr	r0, [sp, #16]
 80088c0:	f000 fa31 	bl	8008d26 <_Bfree>
 80088c4:	2e00      	cmp	r6, #0
 80088c6:	d100      	bne.n	80088ca <_dtoa_r+0xa26>
 80088c8:	e63f      	b.n	800854a <_dtoa_r+0x6a6>
 80088ca:	2f00      	cmp	r7, #0
 80088cc:	d005      	beq.n	80088da <_dtoa_r+0xa36>
 80088ce:	42b7      	cmp	r7, r6
 80088d0:	d003      	beq.n	80088da <_dtoa_r+0xa36>
 80088d2:	0039      	movs	r1, r7
 80088d4:	9804      	ldr	r0, [sp, #16]
 80088d6:	f000 fa26 	bl	8008d26 <_Bfree>
 80088da:	0031      	movs	r1, r6
 80088dc:	9804      	ldr	r0, [sp, #16]
 80088de:	f000 fa22 	bl	8008d26 <_Bfree>
 80088e2:	e632      	b.n	800854a <_dtoa_r+0x6a6>
 80088e4:	9508      	str	r5, [sp, #32]
 80088e6:	002e      	movs	r6, r5
 80088e8:	e7e3      	b.n	80088b2 <_dtoa_r+0xa0e>
 80088ea:	2300      	movs	r3, #0
 80088ec:	9308      	str	r3, [sp, #32]
 80088ee:	001e      	movs	r6, r3
 80088f0:	e7df      	b.n	80088b2 <_dtoa_r+0xa0e>
 80088f2:	46c0      	nop			; (mov r8, r8)
 80088f4:	40240000 	.word	0x40240000
 80088f8:	00000433 	.word	0x00000433
 80088fc:	9603      	str	r6, [sp, #12]
 80088fe:	9508      	str	r5, [sp, #32]
 8008900:	002e      	movs	r6, r5
 8008902:	e531      	b.n	8008368 <_dtoa_r+0x4c4>
 8008904:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008906:	970d      	str	r7, [sp, #52]	; 0x34
 8008908:	2b00      	cmp	r3, #0
 800890a:	d000      	beq.n	800890e <_dtoa_r+0xa6a>
 800890c:	e753      	b.n	80087b6 <_dtoa_r+0x912>
 800890e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008910:	9908      	ldr	r1, [sp, #32]
 8008912:	9805      	ldr	r0, [sp, #20]
 8008914:	f7ff fa42 	bl	8007d9c <quorem>
 8008918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800891a:	3030      	adds	r0, #48	; 0x30
 800891c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800891e:	7028      	strb	r0, [r5, #0]
 8008920:	3501      	adds	r5, #1
 8008922:	0004      	movs	r4, r0
 8008924:	1aeb      	subs	r3, r5, r3
 8008926:	429a      	cmp	r2, r3
 8008928:	dc78      	bgt.n	8008a1c <_dtoa_r+0xb78>
 800892a:	1e15      	subs	r5, r2, #0
 800892c:	dc00      	bgt.n	8008930 <_dtoa_r+0xa8c>
 800892e:	2501      	movs	r5, #1
 8008930:	2700      	movs	r7, #0
 8008932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008934:	195d      	adds	r5, r3, r5
 8008936:	9905      	ldr	r1, [sp, #20]
 8008938:	2201      	movs	r2, #1
 800893a:	9804      	ldr	r0, [sp, #16]
 800893c:	f000 fb7c 	bl	8009038 <__lshift>
 8008940:	9908      	ldr	r1, [sp, #32]
 8008942:	9005      	str	r0, [sp, #20]
 8008944:	f000 fbc9 	bl	80090da <__mcmp>
 8008948:	2800      	cmp	r0, #0
 800894a:	dc2f      	bgt.n	80089ac <_dtoa_r+0xb08>
 800894c:	d101      	bne.n	8008952 <_dtoa_r+0xaae>
 800894e:	07e3      	lsls	r3, r4, #31
 8008950:	d42c      	bmi.n	80089ac <_dtoa_r+0xb08>
 8008952:	1e6b      	subs	r3, r5, #1
 8008954:	781a      	ldrb	r2, [r3, #0]
 8008956:	2a30      	cmp	r2, #48	; 0x30
 8008958:	d1b0      	bne.n	80088bc <_dtoa_r+0xa18>
 800895a:	001d      	movs	r5, r3
 800895c:	e7f9      	b.n	8008952 <_dtoa_r+0xaae>
 800895e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008960:	2b00      	cmp	r3, #0
 8008962:	db07      	blt.n	8008974 <_dtoa_r+0xad0>
 8008964:	001d      	movs	r5, r3
 8008966:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008968:	431d      	orrs	r5, r3
 800896a:	d126      	bne.n	80089ba <_dtoa_r+0xb16>
 800896c:	2301      	movs	r3, #1
 800896e:	9a06      	ldr	r2, [sp, #24]
 8008970:	4213      	tst	r3, r2
 8008972:	d122      	bne.n	80089ba <_dtoa_r+0xb16>
 8008974:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008976:	2b00      	cmp	r3, #0
 8008978:	dc00      	bgt.n	800897c <_dtoa_r+0xad8>
 800897a:	e773      	b.n	8008864 <_dtoa_r+0x9c0>
 800897c:	9905      	ldr	r1, [sp, #20]
 800897e:	2201      	movs	r2, #1
 8008980:	9804      	ldr	r0, [sp, #16]
 8008982:	f000 fb59 	bl	8009038 <__lshift>
 8008986:	9908      	ldr	r1, [sp, #32]
 8008988:	9005      	str	r0, [sp, #20]
 800898a:	f000 fba6 	bl	80090da <__mcmp>
 800898e:	2800      	cmp	r0, #0
 8008990:	dc04      	bgt.n	800899c <_dtoa_r+0xaf8>
 8008992:	d000      	beq.n	8008996 <_dtoa_r+0xaf2>
 8008994:	e766      	b.n	8008864 <_dtoa_r+0x9c0>
 8008996:	07e3      	lsls	r3, r4, #31
 8008998:	d400      	bmi.n	800899c <_dtoa_r+0xaf8>
 800899a:	e763      	b.n	8008864 <_dtoa_r+0x9c0>
 800899c:	2c39      	cmp	r4, #57	; 0x39
 800899e:	d000      	beq.n	80089a2 <_dtoa_r+0xafe>
 80089a0:	e75e      	b.n	8008860 <_dtoa_r+0x9bc>
 80089a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089a6:	1c5d      	adds	r5, r3, #1
 80089a8:	2339      	movs	r3, #57	; 0x39
 80089aa:	7013      	strb	r3, [r2, #0]
 80089ac:	1e6b      	subs	r3, r5, #1
 80089ae:	781a      	ldrb	r2, [r3, #0]
 80089b0:	2a39      	cmp	r2, #57	; 0x39
 80089b2:	d03b      	beq.n	8008a2c <_dtoa_r+0xb88>
 80089b4:	3201      	adds	r2, #1
 80089b6:	701a      	strb	r2, [r3, #0]
 80089b8:	e780      	b.n	80088bc <_dtoa_r+0xa18>
 80089ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089bc:	3301      	adds	r3, #1
 80089be:	930d      	str	r3, [sp, #52]	; 0x34
 80089c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	dd05      	ble.n	80089d2 <_dtoa_r+0xb2e>
 80089c6:	2c39      	cmp	r4, #57	; 0x39
 80089c8:	d0eb      	beq.n	80089a2 <_dtoa_r+0xafe>
 80089ca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80089cc:	3401      	adds	r4, #1
 80089ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089d0:	e74a      	b.n	8008868 <_dtoa_r+0x9c4>
 80089d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80089d6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80089d8:	701c      	strb	r4, [r3, #0]
 80089da:	4293      	cmp	r3, r2
 80089dc:	d0ab      	beq.n	8008936 <_dtoa_r+0xa92>
 80089de:	2300      	movs	r3, #0
 80089e0:	220a      	movs	r2, #10
 80089e2:	9905      	ldr	r1, [sp, #20]
 80089e4:	9804      	ldr	r0, [sp, #16]
 80089e6:	f000 f9b7 	bl	8008d58 <__multadd>
 80089ea:	2300      	movs	r3, #0
 80089ec:	9005      	str	r0, [sp, #20]
 80089ee:	220a      	movs	r2, #10
 80089f0:	0039      	movs	r1, r7
 80089f2:	9804      	ldr	r0, [sp, #16]
 80089f4:	42b7      	cmp	r7, r6
 80089f6:	d106      	bne.n	8008a06 <_dtoa_r+0xb62>
 80089f8:	f000 f9ae 	bl	8008d58 <__multadd>
 80089fc:	0007      	movs	r7, r0
 80089fe:	0006      	movs	r6, r0
 8008a00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a02:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a04:	e6fc      	b.n	8008800 <_dtoa_r+0x95c>
 8008a06:	f000 f9a7 	bl	8008d58 <__multadd>
 8008a0a:	0031      	movs	r1, r6
 8008a0c:	0007      	movs	r7, r0
 8008a0e:	2300      	movs	r3, #0
 8008a10:	220a      	movs	r2, #10
 8008a12:	9804      	ldr	r0, [sp, #16]
 8008a14:	f000 f9a0 	bl	8008d58 <__multadd>
 8008a18:	0006      	movs	r6, r0
 8008a1a:	e7f1      	b.n	8008a00 <_dtoa_r+0xb5c>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	220a      	movs	r2, #10
 8008a20:	9905      	ldr	r1, [sp, #20]
 8008a22:	9804      	ldr	r0, [sp, #16]
 8008a24:	f000 f998 	bl	8008d58 <__multadd>
 8008a28:	9005      	str	r0, [sp, #20]
 8008a2a:	e771      	b.n	8008910 <_dtoa_r+0xa6c>
 8008a2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d105      	bne.n	8008a3e <_dtoa_r+0xb9a>
 8008a32:	9b03      	ldr	r3, [sp, #12]
 8008a34:	3301      	adds	r3, #1
 8008a36:	9303      	str	r3, [sp, #12]
 8008a38:	2331      	movs	r3, #49	; 0x31
 8008a3a:	7013      	strb	r3, [r2, #0]
 8008a3c:	e73e      	b.n	80088bc <_dtoa_r+0xa18>
 8008a3e:	001d      	movs	r5, r3
 8008a40:	e7b4      	b.n	80089ac <_dtoa_r+0xb08>
 8008a42:	4b0a      	ldr	r3, [pc, #40]	; (8008a6c <_dtoa_r+0xbc8>)
 8008a44:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008a46:	930a      	str	r3, [sp, #40]	; 0x28
 8008a48:	4b09      	ldr	r3, [pc, #36]	; (8008a70 <_dtoa_r+0xbcc>)
 8008a4a:	2a00      	cmp	r2, #0
 8008a4c:	d001      	beq.n	8008a52 <_dtoa_r+0xbae>
 8008a4e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008a50:	6013      	str	r3, [r2, #0]
 8008a52:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008a54:	b01d      	add	sp, #116	; 0x74
 8008a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	dd00      	ble.n	8008a60 <_dtoa_r+0xbbc>
 8008a5e:	e756      	b.n	800890e <_dtoa_r+0xa6a>
 8008a60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	dc00      	bgt.n	8008a68 <_dtoa_r+0xbc4>
 8008a66:	e752      	b.n	800890e <_dtoa_r+0xa6a>
 8008a68:	e713      	b.n	8008892 <_dtoa_r+0x9ee>
 8008a6a:	46c0      	nop			; (mov r8, r8)
 8008a6c:	080098d0 	.word	0x080098d0
 8008a70:	080098d8 	.word	0x080098d8

08008a74 <_malloc_trim_r>:
 8008a74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a76:	4f25      	ldr	r7, [pc, #148]	; (8008b0c <_malloc_trim_r+0x98>)
 8008a78:	000c      	movs	r4, r1
 8008a7a:	0005      	movs	r5, r0
 8008a7c:	f7fe f8ca 	bl	8006c14 <__malloc_lock>
 8008a80:	0038      	movs	r0, r7
 8008a82:	2203      	movs	r2, #3
 8008a84:	4e22      	ldr	r6, [pc, #136]	; (8008b10 <_malloc_trim_r+0x9c>)
 8008a86:	3811      	subs	r0, #17
 8008a88:	68b3      	ldr	r3, [r6, #8]
 8008a8a:	1b00      	subs	r0, r0, r4
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	0039      	movs	r1, r7
 8008a90:	4393      	bics	r3, r2
 8008a92:	18c0      	adds	r0, r0, r3
 8008a94:	9301      	str	r3, [sp, #4]
 8008a96:	f7f7 fb59 	bl	800014c <__udivsi3>
 8008a9a:	1e44      	subs	r4, r0, #1
 8008a9c:	437c      	muls	r4, r7
 8008a9e:	42bc      	cmp	r4, r7
 8008aa0:	da04      	bge.n	8008aac <_malloc_trim_r+0x38>
 8008aa2:	0028      	movs	r0, r5
 8008aa4:	f7fe f8be 	bl	8006c24 <__malloc_unlock>
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008aac:	2100      	movs	r1, #0
 8008aae:	0028      	movs	r0, r5
 8008ab0:	f7fe f8c0 	bl	8006c34 <_sbrk_r>
 8008ab4:	68b3      	ldr	r3, [r6, #8]
 8008ab6:	9a01      	ldr	r2, [sp, #4]
 8008ab8:	189b      	adds	r3, r3, r2
 8008aba:	4298      	cmp	r0, r3
 8008abc:	d1f1      	bne.n	8008aa2 <_malloc_trim_r+0x2e>
 8008abe:	4261      	negs	r1, r4
 8008ac0:	0028      	movs	r0, r5
 8008ac2:	f7fe f8b7 	bl	8006c34 <_sbrk_r>
 8008ac6:	1c43      	adds	r3, r0, #1
 8008ac8:	d110      	bne.n	8008aec <_malloc_trim_r+0x78>
 8008aca:	2100      	movs	r1, #0
 8008acc:	0028      	movs	r0, r5
 8008ace:	f7fe f8b1 	bl	8006c34 <_sbrk_r>
 8008ad2:	68b2      	ldr	r2, [r6, #8]
 8008ad4:	1a81      	subs	r1, r0, r2
 8008ad6:	290f      	cmp	r1, #15
 8008ad8:	dde3      	ble.n	8008aa2 <_malloc_trim_r+0x2e>
 8008ada:	4b0e      	ldr	r3, [pc, #56]	; (8008b14 <_malloc_trim_r+0xa0>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	1ac0      	subs	r0, r0, r3
 8008ae0:	4b0d      	ldr	r3, [pc, #52]	; (8008b18 <_malloc_trim_r+0xa4>)
 8008ae2:	6018      	str	r0, [r3, #0]
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	430b      	orrs	r3, r1
 8008ae8:	6053      	str	r3, [r2, #4]
 8008aea:	e7da      	b.n	8008aa2 <_malloc_trim_r+0x2e>
 8008aec:	68b2      	ldr	r2, [r6, #8]
 8008aee:	2601      	movs	r6, #1
 8008af0:	9b01      	ldr	r3, [sp, #4]
 8008af2:	0028      	movs	r0, r5
 8008af4:	1b1b      	subs	r3, r3, r4
 8008af6:	4333      	orrs	r3, r6
 8008af8:	6053      	str	r3, [r2, #4]
 8008afa:	4b07      	ldr	r3, [pc, #28]	; (8008b18 <_malloc_trim_r+0xa4>)
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	1b14      	subs	r4, r2, r4
 8008b00:	601c      	str	r4, [r3, #0]
 8008b02:	f7fe f88f 	bl	8006c24 <__malloc_unlock>
 8008b06:	0030      	movs	r0, r6
 8008b08:	e7cf      	b.n	8008aaa <_malloc_trim_r+0x36>
 8008b0a:	46c0      	nop			; (mov r8, r8)
 8008b0c:	00000080 	.word	0x00000080
 8008b10:	20000108 	.word	0x20000108
 8008b14:	20000510 	.word	0x20000510
 8008b18:	20000808 	.word	0x20000808

08008b1c <_free_r>:
 8008b1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b1e:	1e0d      	subs	r5, r1, #0
 8008b20:	9001      	str	r0, [sp, #4]
 8008b22:	d02d      	beq.n	8008b80 <_free_r+0x64>
 8008b24:	f7fe f876 	bl	8006c14 <__malloc_lock>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	0029      	movs	r1, r5
 8008b2c:	469c      	mov	ip, r3
 8008b2e:	3908      	subs	r1, #8
 8008b30:	684f      	ldr	r7, [r1, #4]
 8008b32:	4662      	mov	r2, ip
 8008b34:	003b      	movs	r3, r7
 8008b36:	4666      	mov	r6, ip
 8008b38:	4393      	bics	r3, r2
 8008b3a:	18c8      	adds	r0, r1, r3
 8008b3c:	6845      	ldr	r5, [r0, #4]
 8008b3e:	3202      	adds	r2, #2
 8008b40:	4395      	bics	r5, r2
 8008b42:	4a4a      	ldr	r2, [pc, #296]	; (8008c6c <_free_r+0x150>)
 8008b44:	4037      	ands	r7, r6
 8008b46:	6896      	ldr	r6, [r2, #8]
 8008b48:	42b0      	cmp	r0, r6
 8008b4a:	d11a      	bne.n	8008b82 <_free_r+0x66>
 8008b4c:	195b      	adds	r3, r3, r5
 8008b4e:	2f00      	cmp	r7, #0
 8008b50:	d106      	bne.n	8008b60 <_free_r+0x44>
 8008b52:	6808      	ldr	r0, [r1, #0]
 8008b54:	1a09      	subs	r1, r1, r0
 8008b56:	688d      	ldr	r5, [r1, #8]
 8008b58:	181b      	adds	r3, r3, r0
 8008b5a:	68c8      	ldr	r0, [r1, #12]
 8008b5c:	60e8      	str	r0, [r5, #12]
 8008b5e:	6085      	str	r5, [r0, #8]
 8008b60:	2001      	movs	r0, #1
 8008b62:	4318      	orrs	r0, r3
 8008b64:	6048      	str	r0, [r1, #4]
 8008b66:	6091      	str	r1, [r2, #8]
 8008b68:	4a41      	ldr	r2, [pc, #260]	; (8008c70 <_free_r+0x154>)
 8008b6a:	6812      	ldr	r2, [r2, #0]
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d304      	bcc.n	8008b7a <_free_r+0x5e>
 8008b70:	4b40      	ldr	r3, [pc, #256]	; (8008c74 <_free_r+0x158>)
 8008b72:	9801      	ldr	r0, [sp, #4]
 8008b74:	6819      	ldr	r1, [r3, #0]
 8008b76:	f7ff ff7d 	bl	8008a74 <_malloc_trim_r>
 8008b7a:	9801      	ldr	r0, [sp, #4]
 8008b7c:	f7fe f852 	bl	8006c24 <__malloc_unlock>
 8008b80:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008b82:	2600      	movs	r6, #0
 8008b84:	6045      	str	r5, [r0, #4]
 8008b86:	42b7      	cmp	r7, r6
 8008b88:	d109      	bne.n	8008b9e <_free_r+0x82>
 8008b8a:	680f      	ldr	r7, [r1, #0]
 8008b8c:	4c3a      	ldr	r4, [pc, #232]	; (8008c78 <_free_r+0x15c>)
 8008b8e:	1bc9      	subs	r1, r1, r7
 8008b90:	19db      	adds	r3, r3, r7
 8008b92:	688f      	ldr	r7, [r1, #8]
 8008b94:	42a7      	cmp	r7, r4
 8008b96:	d02b      	beq.n	8008bf0 <_free_r+0xd4>
 8008b98:	68cc      	ldr	r4, [r1, #12]
 8008b9a:	60fc      	str	r4, [r7, #12]
 8008b9c:	60a7      	str	r7, [r4, #8]
 8008b9e:	1947      	adds	r7, r0, r5
 8008ba0:	687c      	ldr	r4, [r7, #4]
 8008ba2:	2701      	movs	r7, #1
 8008ba4:	423c      	tst	r4, r7
 8008ba6:	d10b      	bne.n	8008bc0 <_free_r+0xa4>
 8008ba8:	195b      	adds	r3, r3, r5
 8008baa:	6885      	ldr	r5, [r0, #8]
 8008bac:	2e00      	cmp	r6, #0
 8008bae:	d121      	bne.n	8008bf4 <_free_r+0xd8>
 8008bb0:	4c31      	ldr	r4, [pc, #196]	; (8008c78 <_free_r+0x15c>)
 8008bb2:	42a5      	cmp	r5, r4
 8008bb4:	d11e      	bne.n	8008bf4 <_free_r+0xd8>
 8008bb6:	003e      	movs	r6, r7
 8008bb8:	6151      	str	r1, [r2, #20]
 8008bba:	6111      	str	r1, [r2, #16]
 8008bbc:	60cd      	str	r5, [r1, #12]
 8008bbe:	608d      	str	r5, [r1, #8]
 8008bc0:	2001      	movs	r0, #1
 8008bc2:	0005      	movs	r5, r0
 8008bc4:	431d      	orrs	r5, r3
 8008bc6:	604d      	str	r5, [r1, #4]
 8008bc8:	50cb      	str	r3, [r1, r3]
 8008bca:	2e00      	cmp	r6, #0
 8008bcc:	d1d5      	bne.n	8008b7a <_free_r+0x5e>
 8008bce:	4d2b      	ldr	r5, [pc, #172]	; (8008c7c <_free_r+0x160>)
 8008bd0:	42ab      	cmp	r3, r5
 8008bd2:	d813      	bhi.n	8008bfc <_free_r+0xe0>
 8008bd4:	08db      	lsrs	r3, r3, #3
 8008bd6:	109d      	asrs	r5, r3, #2
 8008bd8:	40a8      	lsls	r0, r5
 8008bda:	6854      	ldr	r4, [r2, #4]
 8008bdc:	00db      	lsls	r3, r3, #3
 8008bde:	4320      	orrs	r0, r4
 8008be0:	6050      	str	r0, [r2, #4]
 8008be2:	189a      	adds	r2, r3, r2
 8008be4:	6893      	ldr	r3, [r2, #8]
 8008be6:	60ca      	str	r2, [r1, #12]
 8008be8:	608b      	str	r3, [r1, #8]
 8008bea:	6091      	str	r1, [r2, #8]
 8008bec:	60d9      	str	r1, [r3, #12]
 8008bee:	e7c4      	b.n	8008b7a <_free_r+0x5e>
 8008bf0:	4666      	mov	r6, ip
 8008bf2:	e7d4      	b.n	8008b9e <_free_r+0x82>
 8008bf4:	68c0      	ldr	r0, [r0, #12]
 8008bf6:	60e8      	str	r0, [r5, #12]
 8008bf8:	6085      	str	r5, [r0, #8]
 8008bfa:	e7e1      	b.n	8008bc0 <_free_r+0xa4>
 8008bfc:	0a5d      	lsrs	r5, r3, #9
 8008bfe:	2d04      	cmp	r5, #4
 8008c00:	d812      	bhi.n	8008c28 <_free_r+0x10c>
 8008c02:	0998      	lsrs	r0, r3, #6
 8008c04:	3038      	adds	r0, #56	; 0x38
 8008c06:	00c6      	lsls	r6, r0, #3
 8008c08:	18b6      	adds	r6, r6, r2
 8008c0a:	68b5      	ldr	r5, [r6, #8]
 8008c0c:	2703      	movs	r7, #3
 8008c0e:	42ae      	cmp	r6, r5
 8008c10:	d125      	bne.n	8008c5e <_free_r+0x142>
 8008c12:	2301      	movs	r3, #1
 8008c14:	1080      	asrs	r0, r0, #2
 8008c16:	4083      	lsls	r3, r0
 8008c18:	6850      	ldr	r0, [r2, #4]
 8008c1a:	4303      	orrs	r3, r0
 8008c1c:	6053      	str	r3, [r2, #4]
 8008c1e:	60ce      	str	r6, [r1, #12]
 8008c20:	608d      	str	r5, [r1, #8]
 8008c22:	60b1      	str	r1, [r6, #8]
 8008c24:	60e9      	str	r1, [r5, #12]
 8008c26:	e7a8      	b.n	8008b7a <_free_r+0x5e>
 8008c28:	2d14      	cmp	r5, #20
 8008c2a:	d802      	bhi.n	8008c32 <_free_r+0x116>
 8008c2c:	0028      	movs	r0, r5
 8008c2e:	305b      	adds	r0, #91	; 0x5b
 8008c30:	e7e9      	b.n	8008c06 <_free_r+0xea>
 8008c32:	2d54      	cmp	r5, #84	; 0x54
 8008c34:	d802      	bhi.n	8008c3c <_free_r+0x120>
 8008c36:	0b18      	lsrs	r0, r3, #12
 8008c38:	306e      	adds	r0, #110	; 0x6e
 8008c3a:	e7e4      	b.n	8008c06 <_free_r+0xea>
 8008c3c:	20aa      	movs	r0, #170	; 0xaa
 8008c3e:	0040      	lsls	r0, r0, #1
 8008c40:	4285      	cmp	r5, r0
 8008c42:	d802      	bhi.n	8008c4a <_free_r+0x12e>
 8008c44:	0bd8      	lsrs	r0, r3, #15
 8008c46:	3077      	adds	r0, #119	; 0x77
 8008c48:	e7dd      	b.n	8008c06 <_free_r+0xea>
 8008c4a:	4e0d      	ldr	r6, [pc, #52]	; (8008c80 <_free_r+0x164>)
 8008c4c:	207e      	movs	r0, #126	; 0x7e
 8008c4e:	42b5      	cmp	r5, r6
 8008c50:	d8d9      	bhi.n	8008c06 <_free_r+0xea>
 8008c52:	0c98      	lsrs	r0, r3, #18
 8008c54:	307c      	adds	r0, #124	; 0x7c
 8008c56:	e7d6      	b.n	8008c06 <_free_r+0xea>
 8008c58:	68ad      	ldr	r5, [r5, #8]
 8008c5a:	42ae      	cmp	r6, r5
 8008c5c:	d003      	beq.n	8008c66 <_free_r+0x14a>
 8008c5e:	686a      	ldr	r2, [r5, #4]
 8008c60:	43ba      	bics	r2, r7
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d3f8      	bcc.n	8008c58 <_free_r+0x13c>
 8008c66:	68ee      	ldr	r6, [r5, #12]
 8008c68:	e7d9      	b.n	8008c1e <_free_r+0x102>
 8008c6a:	46c0      	nop			; (mov r8, r8)
 8008c6c:	20000108 	.word	0x20000108
 8008c70:	20000514 	.word	0x20000514
 8008c74:	20000838 	.word	0x20000838
 8008c78:	20000110 	.word	0x20000110
 8008c7c:	000001ff 	.word	0x000001ff
 8008c80:	00000554 	.word	0x00000554

08008c84 <_localeconv_r>:
 8008c84:	4b03      	ldr	r3, [pc, #12]	; (8008c94 <_localeconv_r+0x10>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6a18      	ldr	r0, [r3, #32]
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	d100      	bne.n	8008c90 <_localeconv_r+0xc>
 8008c8e:	4802      	ldr	r0, [pc, #8]	; (8008c98 <_localeconv_r+0x14>)
 8008c90:	30f0      	adds	r0, #240	; 0xf0
 8008c92:	4770      	bx	lr
 8008c94:	20000014 	.word	0x20000014
 8008c98:	20000518 	.word	0x20000518

08008c9c <__retarget_lock_acquire_recursive>:
 8008c9c:	4770      	bx	lr

08008c9e <__retarget_lock_release_recursive>:
 8008c9e:	4770      	bx	lr

08008ca0 <memchr>:
 8008ca0:	b2c9      	uxtb	r1, r1
 8008ca2:	1882      	adds	r2, r0, r2
 8008ca4:	4290      	cmp	r0, r2
 8008ca6:	d101      	bne.n	8008cac <memchr+0xc>
 8008ca8:	2000      	movs	r0, #0
 8008caa:	4770      	bx	lr
 8008cac:	7803      	ldrb	r3, [r0, #0]
 8008cae:	428b      	cmp	r3, r1
 8008cb0:	d0fb      	beq.n	8008caa <memchr+0xa>
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	e7f6      	b.n	8008ca4 <memchr+0x4>

08008cb6 <_Balloc>:
 8008cb6:	b570      	push	{r4, r5, r6, lr}
 8008cb8:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008cba:	0004      	movs	r4, r0
 8008cbc:	000d      	movs	r5, r1
 8008cbe:	2e00      	cmp	r6, #0
 8008cc0:	d107      	bne.n	8008cd2 <_Balloc+0x1c>
 8008cc2:	2010      	movs	r0, #16
 8008cc4:	f7fd fd7c 	bl	80067c0 <malloc>
 8008cc8:	6260      	str	r0, [r4, #36]	; 0x24
 8008cca:	6046      	str	r6, [r0, #4]
 8008ccc:	6086      	str	r6, [r0, #8]
 8008cce:	6006      	str	r6, [r0, #0]
 8008cd0:	60c6      	str	r6, [r0, #12]
 8008cd2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008cd4:	68f3      	ldr	r3, [r6, #12]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d013      	beq.n	8008d02 <_Balloc+0x4c>
 8008cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cdc:	00aa      	lsls	r2, r5, #2
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	189b      	adds	r3, r3, r2
 8008ce2:	6818      	ldr	r0, [r3, #0]
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d118      	bne.n	8008d1a <_Balloc+0x64>
 8008ce8:	2101      	movs	r1, #1
 8008cea:	000e      	movs	r6, r1
 8008cec:	40ae      	lsls	r6, r5
 8008cee:	1d72      	adds	r2, r6, #5
 8008cf0:	0092      	lsls	r2, r2, #2
 8008cf2:	0020      	movs	r0, r4
 8008cf4:	f7fd fd0d 	bl	8006712 <_calloc_r>
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	d00c      	beq.n	8008d16 <_Balloc+0x60>
 8008cfc:	6045      	str	r5, [r0, #4]
 8008cfe:	6086      	str	r6, [r0, #8]
 8008d00:	e00d      	b.n	8008d1e <_Balloc+0x68>
 8008d02:	2221      	movs	r2, #33	; 0x21
 8008d04:	2104      	movs	r1, #4
 8008d06:	0020      	movs	r0, r4
 8008d08:	f7fd fd03 	bl	8006712 <_calloc_r>
 8008d0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d0e:	60f0      	str	r0, [r6, #12]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1e1      	bne.n	8008cda <_Balloc+0x24>
 8008d16:	2000      	movs	r0, #0
 8008d18:	bd70      	pop	{r4, r5, r6, pc}
 8008d1a:	6802      	ldr	r2, [r0, #0]
 8008d1c:	601a      	str	r2, [r3, #0]
 8008d1e:	2300      	movs	r3, #0
 8008d20:	6103      	str	r3, [r0, #16]
 8008d22:	60c3      	str	r3, [r0, #12]
 8008d24:	e7f8      	b.n	8008d18 <_Balloc+0x62>

08008d26 <_Bfree>:
 8008d26:	b570      	push	{r4, r5, r6, lr}
 8008d28:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008d2a:	0006      	movs	r6, r0
 8008d2c:	000d      	movs	r5, r1
 8008d2e:	2c00      	cmp	r4, #0
 8008d30:	d107      	bne.n	8008d42 <_Bfree+0x1c>
 8008d32:	2010      	movs	r0, #16
 8008d34:	f7fd fd44 	bl	80067c0 <malloc>
 8008d38:	6270      	str	r0, [r6, #36]	; 0x24
 8008d3a:	6044      	str	r4, [r0, #4]
 8008d3c:	6084      	str	r4, [r0, #8]
 8008d3e:	6004      	str	r4, [r0, #0]
 8008d40:	60c4      	str	r4, [r0, #12]
 8008d42:	2d00      	cmp	r5, #0
 8008d44:	d007      	beq.n	8008d56 <_Bfree+0x30>
 8008d46:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008d48:	686a      	ldr	r2, [r5, #4]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	0092      	lsls	r2, r2, #2
 8008d4e:	189b      	adds	r3, r3, r2
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	602a      	str	r2, [r5, #0]
 8008d54:	601d      	str	r5, [r3, #0]
 8008d56:	bd70      	pop	{r4, r5, r6, pc}

08008d58 <__multadd>:
 8008d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d5a:	001e      	movs	r6, r3
 8008d5c:	2314      	movs	r3, #20
 8008d5e:	469c      	mov	ip, r3
 8008d60:	0007      	movs	r7, r0
 8008d62:	000c      	movs	r4, r1
 8008d64:	2000      	movs	r0, #0
 8008d66:	690d      	ldr	r5, [r1, #16]
 8008d68:	448c      	add	ip, r1
 8008d6a:	4663      	mov	r3, ip
 8008d6c:	8819      	ldrh	r1, [r3, #0]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4351      	muls	r1, r2
 8008d72:	0c1b      	lsrs	r3, r3, #16
 8008d74:	4353      	muls	r3, r2
 8008d76:	1989      	adds	r1, r1, r6
 8008d78:	0c0e      	lsrs	r6, r1, #16
 8008d7a:	199b      	adds	r3, r3, r6
 8008d7c:	b289      	uxth	r1, r1
 8008d7e:	0c1e      	lsrs	r6, r3, #16
 8008d80:	041b      	lsls	r3, r3, #16
 8008d82:	185b      	adds	r3, r3, r1
 8008d84:	4661      	mov	r1, ip
 8008d86:	3001      	adds	r0, #1
 8008d88:	c108      	stmia	r1!, {r3}
 8008d8a:	468c      	mov	ip, r1
 8008d8c:	4285      	cmp	r5, r0
 8008d8e:	dcec      	bgt.n	8008d6a <__multadd+0x12>
 8008d90:	2e00      	cmp	r6, #0
 8008d92:	d01b      	beq.n	8008dcc <__multadd+0x74>
 8008d94:	68a3      	ldr	r3, [r4, #8]
 8008d96:	429d      	cmp	r5, r3
 8008d98:	db12      	blt.n	8008dc0 <__multadd+0x68>
 8008d9a:	6863      	ldr	r3, [r4, #4]
 8008d9c:	0038      	movs	r0, r7
 8008d9e:	1c59      	adds	r1, r3, #1
 8008da0:	f7ff ff89 	bl	8008cb6 <_Balloc>
 8008da4:	0021      	movs	r1, r4
 8008da6:	6923      	ldr	r3, [r4, #16]
 8008da8:	9001      	str	r0, [sp, #4]
 8008daa:	1c9a      	adds	r2, r3, #2
 8008dac:	0092      	lsls	r2, r2, #2
 8008dae:	310c      	adds	r1, #12
 8008db0:	300c      	adds	r0, #12
 8008db2:	f7fd ff1d 	bl	8006bf0 <memcpy>
 8008db6:	0021      	movs	r1, r4
 8008db8:	0038      	movs	r0, r7
 8008dba:	f7ff ffb4 	bl	8008d26 <_Bfree>
 8008dbe:	9c01      	ldr	r4, [sp, #4]
 8008dc0:	1d2b      	adds	r3, r5, #4
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	18e3      	adds	r3, r4, r3
 8008dc6:	3501      	adds	r5, #1
 8008dc8:	605e      	str	r6, [r3, #4]
 8008dca:	6125      	str	r5, [r4, #16]
 8008dcc:	0020      	movs	r0, r4
 8008dce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08008dd0 <__hi0bits>:
 8008dd0:	0003      	movs	r3, r0
 8008dd2:	0c02      	lsrs	r2, r0, #16
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	4282      	cmp	r2, r0
 8008dd8:	d101      	bne.n	8008dde <__hi0bits+0xe>
 8008dda:	041b      	lsls	r3, r3, #16
 8008ddc:	3010      	adds	r0, #16
 8008dde:	0e1a      	lsrs	r2, r3, #24
 8008de0:	d101      	bne.n	8008de6 <__hi0bits+0x16>
 8008de2:	3008      	adds	r0, #8
 8008de4:	021b      	lsls	r3, r3, #8
 8008de6:	0f1a      	lsrs	r2, r3, #28
 8008de8:	d101      	bne.n	8008dee <__hi0bits+0x1e>
 8008dea:	3004      	adds	r0, #4
 8008dec:	011b      	lsls	r3, r3, #4
 8008dee:	0f9a      	lsrs	r2, r3, #30
 8008df0:	d101      	bne.n	8008df6 <__hi0bits+0x26>
 8008df2:	3002      	adds	r0, #2
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	db03      	blt.n	8008e02 <__hi0bits+0x32>
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	005b      	lsls	r3, r3, #1
 8008dfe:	d400      	bmi.n	8008e02 <__hi0bits+0x32>
 8008e00:	2020      	movs	r0, #32
 8008e02:	4770      	bx	lr

08008e04 <__lo0bits>:
 8008e04:	2207      	movs	r2, #7
 8008e06:	6803      	ldr	r3, [r0, #0]
 8008e08:	b510      	push	{r4, lr}
 8008e0a:	0001      	movs	r1, r0
 8008e0c:	401a      	ands	r2, r3
 8008e0e:	d00d      	beq.n	8008e2c <__lo0bits+0x28>
 8008e10:	2401      	movs	r4, #1
 8008e12:	2000      	movs	r0, #0
 8008e14:	4223      	tst	r3, r4
 8008e16:	d105      	bne.n	8008e24 <__lo0bits+0x20>
 8008e18:	3002      	adds	r0, #2
 8008e1a:	4203      	tst	r3, r0
 8008e1c:	d003      	beq.n	8008e26 <__lo0bits+0x22>
 8008e1e:	40e3      	lsrs	r3, r4
 8008e20:	0020      	movs	r0, r4
 8008e22:	600b      	str	r3, [r1, #0]
 8008e24:	bd10      	pop	{r4, pc}
 8008e26:	089b      	lsrs	r3, r3, #2
 8008e28:	600b      	str	r3, [r1, #0]
 8008e2a:	e7fb      	b.n	8008e24 <__lo0bits+0x20>
 8008e2c:	b29c      	uxth	r4, r3
 8008e2e:	0010      	movs	r0, r2
 8008e30:	2c00      	cmp	r4, #0
 8008e32:	d101      	bne.n	8008e38 <__lo0bits+0x34>
 8008e34:	2010      	movs	r0, #16
 8008e36:	0c1b      	lsrs	r3, r3, #16
 8008e38:	b2da      	uxtb	r2, r3
 8008e3a:	2a00      	cmp	r2, #0
 8008e3c:	d101      	bne.n	8008e42 <__lo0bits+0x3e>
 8008e3e:	3008      	adds	r0, #8
 8008e40:	0a1b      	lsrs	r3, r3, #8
 8008e42:	071a      	lsls	r2, r3, #28
 8008e44:	d101      	bne.n	8008e4a <__lo0bits+0x46>
 8008e46:	3004      	adds	r0, #4
 8008e48:	091b      	lsrs	r3, r3, #4
 8008e4a:	079a      	lsls	r2, r3, #30
 8008e4c:	d101      	bne.n	8008e52 <__lo0bits+0x4e>
 8008e4e:	3002      	adds	r0, #2
 8008e50:	089b      	lsrs	r3, r3, #2
 8008e52:	07da      	lsls	r2, r3, #31
 8008e54:	d4e8      	bmi.n	8008e28 <__lo0bits+0x24>
 8008e56:	085b      	lsrs	r3, r3, #1
 8008e58:	d001      	beq.n	8008e5e <__lo0bits+0x5a>
 8008e5a:	3001      	adds	r0, #1
 8008e5c:	e7e4      	b.n	8008e28 <__lo0bits+0x24>
 8008e5e:	2020      	movs	r0, #32
 8008e60:	e7e0      	b.n	8008e24 <__lo0bits+0x20>

08008e62 <__i2b>:
 8008e62:	b510      	push	{r4, lr}
 8008e64:	000c      	movs	r4, r1
 8008e66:	2101      	movs	r1, #1
 8008e68:	f7ff ff25 	bl	8008cb6 <_Balloc>
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	6144      	str	r4, [r0, #20]
 8008e70:	6103      	str	r3, [r0, #16]
 8008e72:	bd10      	pop	{r4, pc}

08008e74 <__multiply>:
 8008e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e76:	690b      	ldr	r3, [r1, #16]
 8008e78:	0015      	movs	r5, r2
 8008e7a:	6912      	ldr	r2, [r2, #16]
 8008e7c:	b089      	sub	sp, #36	; 0x24
 8008e7e:	000c      	movs	r4, r1
 8008e80:	4293      	cmp	r3, r2
 8008e82:	da01      	bge.n	8008e88 <__multiply+0x14>
 8008e84:	002c      	movs	r4, r5
 8008e86:	000d      	movs	r5, r1
 8008e88:	6927      	ldr	r7, [r4, #16]
 8008e8a:	692e      	ldr	r6, [r5, #16]
 8008e8c:	68a2      	ldr	r2, [r4, #8]
 8008e8e:	19bb      	adds	r3, r7, r6
 8008e90:	6861      	ldr	r1, [r4, #4]
 8008e92:	9301      	str	r3, [sp, #4]
 8008e94:	4293      	cmp	r3, r2
 8008e96:	dd00      	ble.n	8008e9a <__multiply+0x26>
 8008e98:	3101      	adds	r1, #1
 8008e9a:	f7ff ff0c 	bl	8008cb6 <_Balloc>
 8008e9e:	0003      	movs	r3, r0
 8008ea0:	3314      	adds	r3, #20
 8008ea2:	9300      	str	r3, [sp, #0]
 8008ea4:	9a00      	ldr	r2, [sp, #0]
 8008ea6:	19bb      	adds	r3, r7, r6
 8008ea8:	4694      	mov	ip, r2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	449c      	add	ip, r3
 8008eae:	0013      	movs	r3, r2
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	9004      	str	r0, [sp, #16]
 8008eb4:	4563      	cmp	r3, ip
 8008eb6:	d31c      	bcc.n	8008ef2 <__multiply+0x7e>
 8008eb8:	002a      	movs	r2, r5
 8008eba:	3414      	adds	r4, #20
 8008ebc:	00bf      	lsls	r7, r7, #2
 8008ebe:	19e3      	adds	r3, r4, r7
 8008ec0:	3214      	adds	r2, #20
 8008ec2:	00b6      	lsls	r6, r6, #2
 8008ec4:	9305      	str	r3, [sp, #20]
 8008ec6:	1993      	adds	r3, r2, r6
 8008ec8:	9402      	str	r4, [sp, #8]
 8008eca:	9306      	str	r3, [sp, #24]
 8008ecc:	9b06      	ldr	r3, [sp, #24]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d311      	bcc.n	8008ef6 <__multiply+0x82>
 8008ed2:	9b01      	ldr	r3, [sp, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	dd06      	ble.n	8008ee6 <__multiply+0x72>
 8008ed8:	2304      	movs	r3, #4
 8008eda:	425b      	negs	r3, r3
 8008edc:	449c      	add	ip, r3
 8008ede:	4663      	mov	r3, ip
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d051      	beq.n	8008f8a <__multiply+0x116>
 8008ee6:	9b04      	ldr	r3, [sp, #16]
 8008ee8:	9a01      	ldr	r2, [sp, #4]
 8008eea:	0018      	movs	r0, r3
 8008eec:	611a      	str	r2, [r3, #16]
 8008eee:	b009      	add	sp, #36	; 0x24
 8008ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ef2:	c304      	stmia	r3!, {r2}
 8008ef4:	e7de      	b.n	8008eb4 <__multiply+0x40>
 8008ef6:	8814      	ldrh	r4, [r2, #0]
 8008ef8:	2c00      	cmp	r4, #0
 8008efa:	d01e      	beq.n	8008f3a <__multiply+0xc6>
 8008efc:	2600      	movs	r6, #0
 8008efe:	9d00      	ldr	r5, [sp, #0]
 8008f00:	9f02      	ldr	r7, [sp, #8]
 8008f02:	cf01      	ldmia	r7!, {r0}
 8008f04:	9507      	str	r5, [sp, #28]
 8008f06:	cd08      	ldmia	r5!, {r3}
 8008f08:	9303      	str	r3, [sp, #12]
 8008f0a:	b283      	uxth	r3, r0
 8008f0c:	4363      	muls	r3, r4
 8008f0e:	0019      	movs	r1, r3
 8008f10:	466b      	mov	r3, sp
 8008f12:	0c00      	lsrs	r0, r0, #16
 8008f14:	899b      	ldrh	r3, [r3, #12]
 8008f16:	4360      	muls	r0, r4
 8008f18:	18cb      	adds	r3, r1, r3
 8008f1a:	9903      	ldr	r1, [sp, #12]
 8008f1c:	199b      	adds	r3, r3, r6
 8008f1e:	0c09      	lsrs	r1, r1, #16
 8008f20:	1841      	adds	r1, r0, r1
 8008f22:	0c18      	lsrs	r0, r3, #16
 8008f24:	1809      	adds	r1, r1, r0
 8008f26:	0c0e      	lsrs	r6, r1, #16
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	0409      	lsls	r1, r1, #16
 8008f2c:	430b      	orrs	r3, r1
 8008f2e:	9907      	ldr	r1, [sp, #28]
 8008f30:	600b      	str	r3, [r1, #0]
 8008f32:	9b05      	ldr	r3, [sp, #20]
 8008f34:	42bb      	cmp	r3, r7
 8008f36:	d8e4      	bhi.n	8008f02 <__multiply+0x8e>
 8008f38:	602e      	str	r6, [r5, #0]
 8008f3a:	6813      	ldr	r3, [r2, #0]
 8008f3c:	0c1b      	lsrs	r3, r3, #16
 8008f3e:	9303      	str	r3, [sp, #12]
 8008f40:	d01e      	beq.n	8008f80 <__multiply+0x10c>
 8008f42:	2600      	movs	r6, #0
 8008f44:	9b00      	ldr	r3, [sp, #0]
 8008f46:	9c02      	ldr	r4, [sp, #8]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	9800      	ldr	r0, [sp, #0]
 8008f4c:	0007      	movs	r7, r0
 8008f4e:	8821      	ldrh	r1, [r4, #0]
 8008f50:	9d03      	ldr	r5, [sp, #12]
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	4369      	muls	r1, r5
 8008f56:	c820      	ldmia	r0!, {r5}
 8008f58:	0c2d      	lsrs	r5, r5, #16
 8008f5a:	1949      	adds	r1, r1, r5
 8008f5c:	198e      	adds	r6, r1, r6
 8008f5e:	0431      	lsls	r1, r6, #16
 8008f60:	430b      	orrs	r3, r1
 8008f62:	603b      	str	r3, [r7, #0]
 8008f64:	cc08      	ldmia	r4!, {r3}
 8008f66:	9903      	ldr	r1, [sp, #12]
 8008f68:	0c1b      	lsrs	r3, r3, #16
 8008f6a:	434b      	muls	r3, r1
 8008f6c:	6879      	ldr	r1, [r7, #4]
 8008f6e:	0c36      	lsrs	r6, r6, #16
 8008f70:	b289      	uxth	r1, r1
 8008f72:	185b      	adds	r3, r3, r1
 8008f74:	9905      	ldr	r1, [sp, #20]
 8008f76:	199b      	adds	r3, r3, r6
 8008f78:	0c1e      	lsrs	r6, r3, #16
 8008f7a:	42a1      	cmp	r1, r4
 8008f7c:	d8e6      	bhi.n	8008f4c <__multiply+0xd8>
 8008f7e:	6003      	str	r3, [r0, #0]
 8008f80:	9b00      	ldr	r3, [sp, #0]
 8008f82:	3204      	adds	r2, #4
 8008f84:	3304      	adds	r3, #4
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	e7a0      	b.n	8008ecc <__multiply+0x58>
 8008f8a:	9b01      	ldr	r3, [sp, #4]
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	9301      	str	r3, [sp, #4]
 8008f90:	e79f      	b.n	8008ed2 <__multiply+0x5e>
	...

08008f94 <__pow5mult>:
 8008f94:	2303      	movs	r3, #3
 8008f96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f98:	4013      	ands	r3, r2
 8008f9a:	0005      	movs	r5, r0
 8008f9c:	000e      	movs	r6, r1
 8008f9e:	0014      	movs	r4, r2
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d008      	beq.n	8008fb6 <__pow5mult+0x22>
 8008fa4:	4922      	ldr	r1, [pc, #136]	; (8009030 <__pow5mult+0x9c>)
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	009a      	lsls	r2, r3, #2
 8008faa:	5852      	ldr	r2, [r2, r1]
 8008fac:	2300      	movs	r3, #0
 8008fae:	0031      	movs	r1, r6
 8008fb0:	f7ff fed2 	bl	8008d58 <__multadd>
 8008fb4:	0006      	movs	r6, r0
 8008fb6:	10a3      	asrs	r3, r4, #2
 8008fb8:	9301      	str	r3, [sp, #4]
 8008fba:	d036      	beq.n	800902a <__pow5mult+0x96>
 8008fbc:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8008fbe:	2c00      	cmp	r4, #0
 8008fc0:	d107      	bne.n	8008fd2 <__pow5mult+0x3e>
 8008fc2:	2010      	movs	r0, #16
 8008fc4:	f7fd fbfc 	bl	80067c0 <malloc>
 8008fc8:	6268      	str	r0, [r5, #36]	; 0x24
 8008fca:	6044      	str	r4, [r0, #4]
 8008fcc:	6084      	str	r4, [r0, #8]
 8008fce:	6004      	str	r4, [r0, #0]
 8008fd0:	60c4      	str	r4, [r0, #12]
 8008fd2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8008fd4:	68bc      	ldr	r4, [r7, #8]
 8008fd6:	2c00      	cmp	r4, #0
 8008fd8:	d107      	bne.n	8008fea <__pow5mult+0x56>
 8008fda:	4916      	ldr	r1, [pc, #88]	; (8009034 <__pow5mult+0xa0>)
 8008fdc:	0028      	movs	r0, r5
 8008fde:	f7ff ff40 	bl	8008e62 <__i2b>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	0004      	movs	r4, r0
 8008fe6:	60b8      	str	r0, [r7, #8]
 8008fe8:	6003      	str	r3, [r0, #0]
 8008fea:	2201      	movs	r2, #1
 8008fec:	9b01      	ldr	r3, [sp, #4]
 8008fee:	4213      	tst	r3, r2
 8008ff0:	d00a      	beq.n	8009008 <__pow5mult+0x74>
 8008ff2:	0031      	movs	r1, r6
 8008ff4:	0022      	movs	r2, r4
 8008ff6:	0028      	movs	r0, r5
 8008ff8:	f7ff ff3c 	bl	8008e74 <__multiply>
 8008ffc:	0007      	movs	r7, r0
 8008ffe:	0031      	movs	r1, r6
 8009000:	0028      	movs	r0, r5
 8009002:	f7ff fe90 	bl	8008d26 <_Bfree>
 8009006:	003e      	movs	r6, r7
 8009008:	9b01      	ldr	r3, [sp, #4]
 800900a:	105b      	asrs	r3, r3, #1
 800900c:	9301      	str	r3, [sp, #4]
 800900e:	d00c      	beq.n	800902a <__pow5mult+0x96>
 8009010:	6820      	ldr	r0, [r4, #0]
 8009012:	2800      	cmp	r0, #0
 8009014:	d107      	bne.n	8009026 <__pow5mult+0x92>
 8009016:	0022      	movs	r2, r4
 8009018:	0021      	movs	r1, r4
 800901a:	0028      	movs	r0, r5
 800901c:	f7ff ff2a 	bl	8008e74 <__multiply>
 8009020:	2300      	movs	r3, #0
 8009022:	6020      	str	r0, [r4, #0]
 8009024:	6003      	str	r3, [r0, #0]
 8009026:	0004      	movs	r4, r0
 8009028:	e7df      	b.n	8008fea <__pow5mult+0x56>
 800902a:	0030      	movs	r0, r6
 800902c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800902e:	46c0      	nop			; (mov r8, r8)
 8009030:	080099d0 	.word	0x080099d0
 8009034:	00000271 	.word	0x00000271

08009038 <__lshift>:
 8009038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800903a:	000d      	movs	r5, r1
 800903c:	0017      	movs	r7, r2
 800903e:	692b      	ldr	r3, [r5, #16]
 8009040:	1154      	asrs	r4, r2, #5
 8009042:	b085      	sub	sp, #20
 8009044:	18e3      	adds	r3, r4, r3
 8009046:	9302      	str	r3, [sp, #8]
 8009048:	3301      	adds	r3, #1
 800904a:	9301      	str	r3, [sp, #4]
 800904c:	6849      	ldr	r1, [r1, #4]
 800904e:	68ab      	ldr	r3, [r5, #8]
 8009050:	9003      	str	r0, [sp, #12]
 8009052:	9a01      	ldr	r2, [sp, #4]
 8009054:	4293      	cmp	r3, r2
 8009056:	db34      	blt.n	80090c2 <__lshift+0x8a>
 8009058:	9803      	ldr	r0, [sp, #12]
 800905a:	f7ff fe2c 	bl	8008cb6 <_Balloc>
 800905e:	2300      	movs	r3, #0
 8009060:	0002      	movs	r2, r0
 8009062:	0006      	movs	r6, r0
 8009064:	0019      	movs	r1, r3
 8009066:	3214      	adds	r2, #20
 8009068:	42a3      	cmp	r3, r4
 800906a:	db2d      	blt.n	80090c8 <__lshift+0x90>
 800906c:	43e3      	mvns	r3, r4
 800906e:	17db      	asrs	r3, r3, #31
 8009070:	401c      	ands	r4, r3
 8009072:	002b      	movs	r3, r5
 8009074:	211f      	movs	r1, #31
 8009076:	00a4      	lsls	r4, r4, #2
 8009078:	1914      	adds	r4, r2, r4
 800907a:	692a      	ldr	r2, [r5, #16]
 800907c:	3314      	adds	r3, #20
 800907e:	0092      	lsls	r2, r2, #2
 8009080:	189a      	adds	r2, r3, r2
 8009082:	400f      	ands	r7, r1
 8009084:	d024      	beq.n	80090d0 <__lshift+0x98>
 8009086:	3101      	adds	r1, #1
 8009088:	1bc9      	subs	r1, r1, r7
 800908a:	468c      	mov	ip, r1
 800908c:	2100      	movs	r1, #0
 800908e:	6818      	ldr	r0, [r3, #0]
 8009090:	40b8      	lsls	r0, r7
 8009092:	4301      	orrs	r1, r0
 8009094:	4660      	mov	r0, ip
 8009096:	6021      	str	r1, [r4, #0]
 8009098:	cb02      	ldmia	r3!, {r1}
 800909a:	3404      	adds	r4, #4
 800909c:	40c1      	lsrs	r1, r0
 800909e:	429a      	cmp	r2, r3
 80090a0:	d8f5      	bhi.n	800908e <__lshift+0x56>
 80090a2:	6021      	str	r1, [r4, #0]
 80090a4:	2900      	cmp	r1, #0
 80090a6:	d002      	beq.n	80090ae <__lshift+0x76>
 80090a8:	9b02      	ldr	r3, [sp, #8]
 80090aa:	3302      	adds	r3, #2
 80090ac:	9301      	str	r3, [sp, #4]
 80090ae:	9b01      	ldr	r3, [sp, #4]
 80090b0:	9803      	ldr	r0, [sp, #12]
 80090b2:	3b01      	subs	r3, #1
 80090b4:	6133      	str	r3, [r6, #16]
 80090b6:	0029      	movs	r1, r5
 80090b8:	f7ff fe35 	bl	8008d26 <_Bfree>
 80090bc:	0030      	movs	r0, r6
 80090be:	b005      	add	sp, #20
 80090c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090c2:	3101      	adds	r1, #1
 80090c4:	005b      	lsls	r3, r3, #1
 80090c6:	e7c4      	b.n	8009052 <__lshift+0x1a>
 80090c8:	0098      	lsls	r0, r3, #2
 80090ca:	5011      	str	r1, [r2, r0]
 80090cc:	3301      	adds	r3, #1
 80090ce:	e7cb      	b.n	8009068 <__lshift+0x30>
 80090d0:	cb02      	ldmia	r3!, {r1}
 80090d2:	c402      	stmia	r4!, {r1}
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d8fb      	bhi.n	80090d0 <__lshift+0x98>
 80090d8:	e7e9      	b.n	80090ae <__lshift+0x76>

080090da <__mcmp>:
 80090da:	690a      	ldr	r2, [r1, #16]
 80090dc:	6903      	ldr	r3, [r0, #16]
 80090de:	b530      	push	{r4, r5, lr}
 80090e0:	1a9b      	subs	r3, r3, r2
 80090e2:	d10e      	bne.n	8009102 <__mcmp+0x28>
 80090e4:	0092      	lsls	r2, r2, #2
 80090e6:	3014      	adds	r0, #20
 80090e8:	3114      	adds	r1, #20
 80090ea:	1884      	adds	r4, r0, r2
 80090ec:	1889      	adds	r1, r1, r2
 80090ee:	3c04      	subs	r4, #4
 80090f0:	3904      	subs	r1, #4
 80090f2:	6822      	ldr	r2, [r4, #0]
 80090f4:	680d      	ldr	r5, [r1, #0]
 80090f6:	42aa      	cmp	r2, r5
 80090f8:	d005      	beq.n	8009106 <__mcmp+0x2c>
 80090fa:	42aa      	cmp	r2, r5
 80090fc:	4192      	sbcs	r2, r2
 80090fe:	2301      	movs	r3, #1
 8009100:	4313      	orrs	r3, r2
 8009102:	0018      	movs	r0, r3
 8009104:	bd30      	pop	{r4, r5, pc}
 8009106:	42a0      	cmp	r0, r4
 8009108:	d3f1      	bcc.n	80090ee <__mcmp+0x14>
 800910a:	e7fa      	b.n	8009102 <__mcmp+0x28>

0800910c <__mdiff>:
 800910c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800910e:	000d      	movs	r5, r1
 8009110:	b085      	sub	sp, #20
 8009112:	0007      	movs	r7, r0
 8009114:	0011      	movs	r1, r2
 8009116:	0028      	movs	r0, r5
 8009118:	0014      	movs	r4, r2
 800911a:	f7ff ffde 	bl	80090da <__mcmp>
 800911e:	1e06      	subs	r6, r0, #0
 8009120:	d108      	bne.n	8009134 <__mdiff+0x28>
 8009122:	0001      	movs	r1, r0
 8009124:	0038      	movs	r0, r7
 8009126:	f7ff fdc6 	bl	8008cb6 <_Balloc>
 800912a:	2301      	movs	r3, #1
 800912c:	6146      	str	r6, [r0, #20]
 800912e:	6103      	str	r3, [r0, #16]
 8009130:	b005      	add	sp, #20
 8009132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009134:	2301      	movs	r3, #1
 8009136:	9301      	str	r3, [sp, #4]
 8009138:	2800      	cmp	r0, #0
 800913a:	db04      	blt.n	8009146 <__mdiff+0x3a>
 800913c:	0023      	movs	r3, r4
 800913e:	002c      	movs	r4, r5
 8009140:	001d      	movs	r5, r3
 8009142:	2300      	movs	r3, #0
 8009144:	9301      	str	r3, [sp, #4]
 8009146:	6861      	ldr	r1, [r4, #4]
 8009148:	0038      	movs	r0, r7
 800914a:	f7ff fdb4 	bl	8008cb6 <_Balloc>
 800914e:	002f      	movs	r7, r5
 8009150:	2200      	movs	r2, #0
 8009152:	9b01      	ldr	r3, [sp, #4]
 8009154:	6926      	ldr	r6, [r4, #16]
 8009156:	60c3      	str	r3, [r0, #12]
 8009158:	3414      	adds	r4, #20
 800915a:	00b3      	lsls	r3, r6, #2
 800915c:	18e3      	adds	r3, r4, r3
 800915e:	9302      	str	r3, [sp, #8]
 8009160:	692b      	ldr	r3, [r5, #16]
 8009162:	3714      	adds	r7, #20
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	18fb      	adds	r3, r7, r3
 8009168:	9303      	str	r3, [sp, #12]
 800916a:	0003      	movs	r3, r0
 800916c:	4694      	mov	ip, r2
 800916e:	3314      	adds	r3, #20
 8009170:	cc20      	ldmia	r4!, {r5}
 8009172:	cf04      	ldmia	r7!, {r2}
 8009174:	9201      	str	r2, [sp, #4]
 8009176:	b2aa      	uxth	r2, r5
 8009178:	4494      	add	ip, r2
 800917a:	466a      	mov	r2, sp
 800917c:	4661      	mov	r1, ip
 800917e:	8892      	ldrh	r2, [r2, #4]
 8009180:	0c2d      	lsrs	r5, r5, #16
 8009182:	1a8a      	subs	r2, r1, r2
 8009184:	9901      	ldr	r1, [sp, #4]
 8009186:	0c09      	lsrs	r1, r1, #16
 8009188:	1a69      	subs	r1, r5, r1
 800918a:	1415      	asrs	r5, r2, #16
 800918c:	1949      	adds	r1, r1, r5
 800918e:	140d      	asrs	r5, r1, #16
 8009190:	b292      	uxth	r2, r2
 8009192:	0409      	lsls	r1, r1, #16
 8009194:	430a      	orrs	r2, r1
 8009196:	601a      	str	r2, [r3, #0]
 8009198:	9a03      	ldr	r2, [sp, #12]
 800919a:	46ac      	mov	ip, r5
 800919c:	3304      	adds	r3, #4
 800919e:	42ba      	cmp	r2, r7
 80091a0:	d8e6      	bhi.n	8009170 <__mdiff+0x64>
 80091a2:	9902      	ldr	r1, [sp, #8]
 80091a4:	001a      	movs	r2, r3
 80091a6:	428c      	cmp	r4, r1
 80091a8:	d305      	bcc.n	80091b6 <__mdiff+0xaa>
 80091aa:	3a04      	subs	r2, #4
 80091ac:	6813      	ldr	r3, [r2, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00e      	beq.n	80091d0 <__mdiff+0xc4>
 80091b2:	6106      	str	r6, [r0, #16]
 80091b4:	e7bc      	b.n	8009130 <__mdiff+0x24>
 80091b6:	cc04      	ldmia	r4!, {r2}
 80091b8:	b291      	uxth	r1, r2
 80091ba:	4461      	add	r1, ip
 80091bc:	140d      	asrs	r5, r1, #16
 80091be:	0c12      	lsrs	r2, r2, #16
 80091c0:	1952      	adds	r2, r2, r5
 80091c2:	1415      	asrs	r5, r2, #16
 80091c4:	b289      	uxth	r1, r1
 80091c6:	0412      	lsls	r2, r2, #16
 80091c8:	430a      	orrs	r2, r1
 80091ca:	46ac      	mov	ip, r5
 80091cc:	c304      	stmia	r3!, {r2}
 80091ce:	e7e8      	b.n	80091a2 <__mdiff+0x96>
 80091d0:	3e01      	subs	r6, #1
 80091d2:	e7ea      	b.n	80091aa <__mdiff+0x9e>

080091d4 <__d2b>:
 80091d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091d6:	001d      	movs	r5, r3
 80091d8:	2101      	movs	r1, #1
 80091da:	9f08      	ldr	r7, [sp, #32]
 80091dc:	0014      	movs	r4, r2
 80091de:	f7ff fd6a 	bl	8008cb6 <_Balloc>
 80091e2:	032b      	lsls	r3, r5, #12
 80091e4:	006d      	lsls	r5, r5, #1
 80091e6:	0006      	movs	r6, r0
 80091e8:	0b1b      	lsrs	r3, r3, #12
 80091ea:	0d6d      	lsrs	r5, r5, #21
 80091ec:	d124      	bne.n	8009238 <__d2b+0x64>
 80091ee:	9301      	str	r3, [sp, #4]
 80091f0:	2c00      	cmp	r4, #0
 80091f2:	d027      	beq.n	8009244 <__d2b+0x70>
 80091f4:	4668      	mov	r0, sp
 80091f6:	9400      	str	r4, [sp, #0]
 80091f8:	f7ff fe04 	bl	8008e04 <__lo0bits>
 80091fc:	9c00      	ldr	r4, [sp, #0]
 80091fe:	2800      	cmp	r0, #0
 8009200:	d01e      	beq.n	8009240 <__d2b+0x6c>
 8009202:	9b01      	ldr	r3, [sp, #4]
 8009204:	2120      	movs	r1, #32
 8009206:	001a      	movs	r2, r3
 8009208:	1a09      	subs	r1, r1, r0
 800920a:	408a      	lsls	r2, r1
 800920c:	40c3      	lsrs	r3, r0
 800920e:	4322      	orrs	r2, r4
 8009210:	6172      	str	r2, [r6, #20]
 8009212:	9301      	str	r3, [sp, #4]
 8009214:	9c01      	ldr	r4, [sp, #4]
 8009216:	61b4      	str	r4, [r6, #24]
 8009218:	1e63      	subs	r3, r4, #1
 800921a:	419c      	sbcs	r4, r3
 800921c:	3401      	adds	r4, #1
 800921e:	6134      	str	r4, [r6, #16]
 8009220:	2d00      	cmp	r5, #0
 8009222:	d018      	beq.n	8009256 <__d2b+0x82>
 8009224:	4b12      	ldr	r3, [pc, #72]	; (8009270 <__d2b+0x9c>)
 8009226:	18ed      	adds	r5, r5, r3
 8009228:	2335      	movs	r3, #53	; 0x35
 800922a:	182d      	adds	r5, r5, r0
 800922c:	603d      	str	r5, [r7, #0]
 800922e:	1a18      	subs	r0, r3, r0
 8009230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009232:	6018      	str	r0, [r3, #0]
 8009234:	0030      	movs	r0, r6
 8009236:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009238:	2280      	movs	r2, #128	; 0x80
 800923a:	0352      	lsls	r2, r2, #13
 800923c:	4313      	orrs	r3, r2
 800923e:	e7d6      	b.n	80091ee <__d2b+0x1a>
 8009240:	6174      	str	r4, [r6, #20]
 8009242:	e7e7      	b.n	8009214 <__d2b+0x40>
 8009244:	a801      	add	r0, sp, #4
 8009246:	f7ff fddd 	bl	8008e04 <__lo0bits>
 800924a:	2401      	movs	r4, #1
 800924c:	9b01      	ldr	r3, [sp, #4]
 800924e:	6134      	str	r4, [r6, #16]
 8009250:	6173      	str	r3, [r6, #20]
 8009252:	3020      	adds	r0, #32
 8009254:	e7e4      	b.n	8009220 <__d2b+0x4c>
 8009256:	4b07      	ldr	r3, [pc, #28]	; (8009274 <__d2b+0xa0>)
 8009258:	18c0      	adds	r0, r0, r3
 800925a:	4b07      	ldr	r3, [pc, #28]	; (8009278 <__d2b+0xa4>)
 800925c:	6038      	str	r0, [r7, #0]
 800925e:	18e3      	adds	r3, r4, r3
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	18f3      	adds	r3, r6, r3
 8009264:	6958      	ldr	r0, [r3, #20]
 8009266:	f7ff fdb3 	bl	8008dd0 <__hi0bits>
 800926a:	0164      	lsls	r4, r4, #5
 800926c:	1a20      	subs	r0, r4, r0
 800926e:	e7df      	b.n	8009230 <__d2b+0x5c>
 8009270:	fffffbcd 	.word	0xfffffbcd
 8009274:	fffffbce 	.word	0xfffffbce
 8009278:	3fffffff 	.word	0x3fffffff

0800927c <__ssprint_r>:
 800927c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800927e:	6893      	ldr	r3, [r2, #8]
 8009280:	b087      	sub	sp, #28
 8009282:	9002      	str	r0, [sp, #8]
 8009284:	000c      	movs	r4, r1
 8009286:	0016      	movs	r6, r2
 8009288:	2b00      	cmp	r3, #0
 800928a:	d063      	beq.n	8009354 <__ssprint_r+0xd8>
 800928c:	6813      	ldr	r3, [r2, #0]
 800928e:	9303      	str	r3, [sp, #12]
 8009290:	2300      	movs	r3, #0
 8009292:	001f      	movs	r7, r3
 8009294:	9305      	str	r3, [sp, #20]
 8009296:	2f00      	cmp	r7, #0
 8009298:	d02e      	beq.n	80092f8 <__ssprint_r+0x7c>
 800929a:	68a5      	ldr	r5, [r4, #8]
 800929c:	42af      	cmp	r7, r5
 800929e:	d349      	bcc.n	8009334 <__ssprint_r+0xb8>
 80092a0:	2390      	movs	r3, #144	; 0x90
 80092a2:	89a2      	ldrh	r2, [r4, #12]
 80092a4:	00db      	lsls	r3, r3, #3
 80092a6:	421a      	tst	r2, r3
 80092a8:	d042      	beq.n	8009330 <__ssprint_r+0xb4>
 80092aa:	2003      	movs	r0, #3
 80092ac:	6921      	ldr	r1, [r4, #16]
 80092ae:	6823      	ldr	r3, [r4, #0]
 80092b0:	1a5b      	subs	r3, r3, r1
 80092b2:	9304      	str	r3, [sp, #16]
 80092b4:	6963      	ldr	r3, [r4, #20]
 80092b6:	4343      	muls	r3, r0
 80092b8:	0fd8      	lsrs	r0, r3, #31
 80092ba:	18c3      	adds	r3, r0, r3
 80092bc:	105b      	asrs	r3, r3, #1
 80092be:	9301      	str	r3, [sp, #4]
 80092c0:	9b04      	ldr	r3, [sp, #16]
 80092c2:	9801      	ldr	r0, [sp, #4]
 80092c4:	3301      	adds	r3, #1
 80092c6:	19db      	adds	r3, r3, r7
 80092c8:	4283      	cmp	r3, r0
 80092ca:	d900      	bls.n	80092ce <__ssprint_r+0x52>
 80092cc:	9301      	str	r3, [sp, #4]
 80092ce:	0553      	lsls	r3, r2, #21
 80092d0:	d544      	bpl.n	800935c <__ssprint_r+0xe0>
 80092d2:	9901      	ldr	r1, [sp, #4]
 80092d4:	9802      	ldr	r0, [sp, #8]
 80092d6:	f7fd fa87 	bl	80067e8 <_malloc_r>
 80092da:	1e05      	subs	r5, r0, #0
 80092dc:	d114      	bne.n	8009308 <__ssprint_r+0x8c>
 80092de:	230c      	movs	r3, #12
 80092e0:	9a02      	ldr	r2, [sp, #8]
 80092e2:	2001      	movs	r0, #1
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	2340      	movs	r3, #64	; 0x40
 80092e8:	89a2      	ldrh	r2, [r4, #12]
 80092ea:	4240      	negs	r0, r0
 80092ec:	4313      	orrs	r3, r2
 80092ee:	81a3      	strh	r3, [r4, #12]
 80092f0:	2300      	movs	r3, #0
 80092f2:	60b3      	str	r3, [r6, #8]
 80092f4:	6073      	str	r3, [r6, #4]
 80092f6:	e02f      	b.n	8009358 <__ssprint_r+0xdc>
 80092f8:	9b03      	ldr	r3, [sp, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	9305      	str	r3, [sp, #20]
 80092fe:	9b03      	ldr	r3, [sp, #12]
 8009300:	685f      	ldr	r7, [r3, #4]
 8009302:	3308      	adds	r3, #8
 8009304:	9303      	str	r3, [sp, #12]
 8009306:	e7c6      	b.n	8009296 <__ssprint_r+0x1a>
 8009308:	9a04      	ldr	r2, [sp, #16]
 800930a:	6921      	ldr	r1, [r4, #16]
 800930c:	f7fd fc70 	bl	8006bf0 <memcpy>
 8009310:	89a3      	ldrh	r3, [r4, #12]
 8009312:	4a18      	ldr	r2, [pc, #96]	; (8009374 <__ssprint_r+0xf8>)
 8009314:	401a      	ands	r2, r3
 8009316:	2380      	movs	r3, #128	; 0x80
 8009318:	4313      	orrs	r3, r2
 800931a:	81a3      	strh	r3, [r4, #12]
 800931c:	9b04      	ldr	r3, [sp, #16]
 800931e:	6125      	str	r5, [r4, #16]
 8009320:	18ed      	adds	r5, r5, r3
 8009322:	6025      	str	r5, [r4, #0]
 8009324:	003d      	movs	r5, r7
 8009326:	9b01      	ldr	r3, [sp, #4]
 8009328:	9a04      	ldr	r2, [sp, #16]
 800932a:	6163      	str	r3, [r4, #20]
 800932c:	1a9b      	subs	r3, r3, r2
 800932e:	60a3      	str	r3, [r4, #8]
 8009330:	42af      	cmp	r7, r5
 8009332:	d200      	bcs.n	8009336 <__ssprint_r+0xba>
 8009334:	003d      	movs	r5, r7
 8009336:	002a      	movs	r2, r5
 8009338:	9905      	ldr	r1, [sp, #20]
 800933a:	6820      	ldr	r0, [r4, #0]
 800933c:	f000 f82e 	bl	800939c <memmove>
 8009340:	68a3      	ldr	r3, [r4, #8]
 8009342:	1b5b      	subs	r3, r3, r5
 8009344:	60a3      	str	r3, [r4, #8]
 8009346:	6823      	ldr	r3, [r4, #0]
 8009348:	195d      	adds	r5, r3, r5
 800934a:	68b3      	ldr	r3, [r6, #8]
 800934c:	6025      	str	r5, [r4, #0]
 800934e:	1bdb      	subs	r3, r3, r7
 8009350:	60b3      	str	r3, [r6, #8]
 8009352:	d1d1      	bne.n	80092f8 <__ssprint_r+0x7c>
 8009354:	2000      	movs	r0, #0
 8009356:	6070      	str	r0, [r6, #4]
 8009358:	b007      	add	sp, #28
 800935a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800935c:	9a01      	ldr	r2, [sp, #4]
 800935e:	9802      	ldr	r0, [sp, #8]
 8009360:	f000 f82e 	bl	80093c0 <_realloc_r>
 8009364:	1e05      	subs	r5, r0, #0
 8009366:	d1d9      	bne.n	800931c <__ssprint_r+0xa0>
 8009368:	6921      	ldr	r1, [r4, #16]
 800936a:	9802      	ldr	r0, [sp, #8]
 800936c:	f7ff fbd6 	bl	8008b1c <_free_r>
 8009370:	e7b5      	b.n	80092de <__ssprint_r+0x62>
 8009372:	46c0      	nop			; (mov r8, r8)
 8009374:	fffffb7f 	.word	0xfffffb7f

08009378 <__ascii_mbtowc>:
 8009378:	b082      	sub	sp, #8
 800937a:	2900      	cmp	r1, #0
 800937c:	d100      	bne.n	8009380 <__ascii_mbtowc+0x8>
 800937e:	a901      	add	r1, sp, #4
 8009380:	1e10      	subs	r0, r2, #0
 8009382:	d006      	beq.n	8009392 <__ascii_mbtowc+0x1a>
 8009384:	2b00      	cmp	r3, #0
 8009386:	d006      	beq.n	8009396 <__ascii_mbtowc+0x1e>
 8009388:	7813      	ldrb	r3, [r2, #0]
 800938a:	600b      	str	r3, [r1, #0]
 800938c:	7810      	ldrb	r0, [r2, #0]
 800938e:	1e43      	subs	r3, r0, #1
 8009390:	4198      	sbcs	r0, r3
 8009392:	b002      	add	sp, #8
 8009394:	4770      	bx	lr
 8009396:	2002      	movs	r0, #2
 8009398:	4240      	negs	r0, r0
 800939a:	e7fa      	b.n	8009392 <__ascii_mbtowc+0x1a>

0800939c <memmove>:
 800939c:	b510      	push	{r4, lr}
 800939e:	4288      	cmp	r0, r1
 80093a0:	d902      	bls.n	80093a8 <memmove+0xc>
 80093a2:	188b      	adds	r3, r1, r2
 80093a4:	4298      	cmp	r0, r3
 80093a6:	d308      	bcc.n	80093ba <memmove+0x1e>
 80093a8:	2300      	movs	r3, #0
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d007      	beq.n	80093be <memmove+0x22>
 80093ae:	5ccc      	ldrb	r4, [r1, r3]
 80093b0:	54c4      	strb	r4, [r0, r3]
 80093b2:	3301      	adds	r3, #1
 80093b4:	e7f9      	b.n	80093aa <memmove+0xe>
 80093b6:	5c8b      	ldrb	r3, [r1, r2]
 80093b8:	5483      	strb	r3, [r0, r2]
 80093ba:	3a01      	subs	r2, #1
 80093bc:	d2fb      	bcs.n	80093b6 <memmove+0x1a>
 80093be:	bd10      	pop	{r4, pc}

080093c0 <_realloc_r>:
 80093c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093c2:	b087      	sub	sp, #28
 80093c4:	9002      	str	r0, [sp, #8]
 80093c6:	1e0c      	subs	r4, r1, #0
 80093c8:	9204      	str	r2, [sp, #16]
 80093ca:	d106      	bne.n	80093da <_realloc_r+0x1a>
 80093cc:	0011      	movs	r1, r2
 80093ce:	f7fd fa0b 	bl	80067e8 <_malloc_r>
 80093d2:	0006      	movs	r6, r0
 80093d4:	0030      	movs	r0, r6
 80093d6:	b007      	add	sp, #28
 80093d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093da:	0027      	movs	r7, r4
 80093dc:	9802      	ldr	r0, [sp, #8]
 80093de:	3f08      	subs	r7, #8
 80093e0:	f7fd fc18 	bl	8006c14 <__malloc_lock>
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	2303      	movs	r3, #3
 80093e8:	0002      	movs	r2, r0
 80093ea:	9e04      	ldr	r6, [sp, #16]
 80093ec:	439a      	bics	r2, r3
 80093ee:	360b      	adds	r6, #11
 80093f0:	9203      	str	r2, [sp, #12]
 80093f2:	2e16      	cmp	r6, #22
 80093f4:	d908      	bls.n	8009408 <_realloc_r+0x48>
 80093f6:	3304      	adds	r3, #4
 80093f8:	439e      	bics	r6, r3
 80093fa:	9601      	str	r6, [sp, #4]
 80093fc:	d506      	bpl.n	800940c <_realloc_r+0x4c>
 80093fe:	230c      	movs	r3, #12
 8009400:	9a02      	ldr	r2, [sp, #8]
 8009402:	2600      	movs	r6, #0
 8009404:	6013      	str	r3, [r2, #0]
 8009406:	e7e5      	b.n	80093d4 <_realloc_r+0x14>
 8009408:	2310      	movs	r3, #16
 800940a:	9301      	str	r3, [sp, #4]
 800940c:	9b01      	ldr	r3, [sp, #4]
 800940e:	9a04      	ldr	r2, [sp, #16]
 8009410:	4293      	cmp	r3, r2
 8009412:	d3f4      	bcc.n	80093fe <_realloc_r+0x3e>
 8009414:	9b01      	ldr	r3, [sp, #4]
 8009416:	9a03      	ldr	r2, [sp, #12]
 8009418:	4293      	cmp	r3, r2
 800941a:	dc00      	bgt.n	800941e <_realloc_r+0x5e>
 800941c:	e141      	b.n	80096a2 <_realloc_r+0x2e2>
 800941e:	18bb      	adds	r3, r7, r2
 8009420:	4aa4      	ldr	r2, [pc, #656]	; (80096b4 <_realloc_r+0x2f4>)
 8009422:	6891      	ldr	r1, [r2, #8]
 8009424:	468c      	mov	ip, r1
 8009426:	428b      	cmp	r3, r1
 8009428:	d006      	beq.n	8009438 <_realloc_r+0x78>
 800942a:	2501      	movs	r5, #1
 800942c:	6859      	ldr	r1, [r3, #4]
 800942e:	43a9      	bics	r1, r5
 8009430:	1859      	adds	r1, r3, r1
 8009432:	6849      	ldr	r1, [r1, #4]
 8009434:	4229      	tst	r1, r5
 8009436:	d142      	bne.n	80094be <_realloc_r+0xfe>
 8009438:	2103      	movs	r1, #3
 800943a:	685d      	ldr	r5, [r3, #4]
 800943c:	438d      	bics	r5, r1
 800943e:	0029      	movs	r1, r5
 8009440:	9d03      	ldr	r5, [sp, #12]
 8009442:	186e      	adds	r6, r5, r1
 8009444:	4563      	cmp	r3, ip
 8009446:	d116      	bne.n	8009476 <_realloc_r+0xb6>
 8009448:	9d01      	ldr	r5, [sp, #4]
 800944a:	3510      	adds	r5, #16
 800944c:	42ae      	cmp	r6, r5
 800944e:	db38      	blt.n	80094c2 <_realloc_r+0x102>
 8009450:	9b01      	ldr	r3, [sp, #4]
 8009452:	9802      	ldr	r0, [sp, #8]
 8009454:	18ff      	adds	r7, r7, r3
 8009456:	6097      	str	r7, [r2, #8]
 8009458:	2201      	movs	r2, #1
 800945a:	1af6      	subs	r6, r6, r3
 800945c:	0023      	movs	r3, r4
 800945e:	4316      	orrs	r6, r2
 8009460:	607e      	str	r6, [r7, #4]
 8009462:	3b08      	subs	r3, #8
 8009464:	685e      	ldr	r6, [r3, #4]
 8009466:	4016      	ands	r6, r2
 8009468:	9a01      	ldr	r2, [sp, #4]
 800946a:	4316      	orrs	r6, r2
 800946c:	605e      	str	r6, [r3, #4]
 800946e:	f7fd fbd9 	bl	8006c24 <__malloc_unlock>
 8009472:	0026      	movs	r6, r4
 8009474:	e7ae      	b.n	80093d4 <_realloc_r+0x14>
 8009476:	9a01      	ldr	r2, [sp, #4]
 8009478:	42b2      	cmp	r2, r6
 800947a:	dc22      	bgt.n	80094c2 <_realloc_r+0x102>
 800947c:	68da      	ldr	r2, [r3, #12]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	60da      	str	r2, [r3, #12]
 8009482:	6093      	str	r3, [r2, #8]
 8009484:	9b01      	ldr	r3, [sp, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	1af4      	subs	r4, r6, r3
 800948a:	19b8      	adds	r0, r7, r6
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2c0f      	cmp	r4, #15
 8009490:	d800      	bhi.n	8009494 <_realloc_r+0xd4>
 8009492:	e108      	b.n	80096a6 <_realloc_r+0x2e6>
 8009494:	9901      	ldr	r1, [sp, #4]
 8009496:	9d01      	ldr	r5, [sp, #4]
 8009498:	4013      	ands	r3, r2
 800949a:	1879      	adds	r1, r7, r1
 800949c:	432b      	orrs	r3, r5
 800949e:	4314      	orrs	r4, r2
 80094a0:	607b      	str	r3, [r7, #4]
 80094a2:	604c      	str	r4, [r1, #4]
 80094a4:	6843      	ldr	r3, [r0, #4]
 80094a6:	3108      	adds	r1, #8
 80094a8:	431a      	orrs	r2, r3
 80094aa:	6042      	str	r2, [r0, #4]
 80094ac:	9802      	ldr	r0, [sp, #8]
 80094ae:	f7ff fb35 	bl	8008b1c <_free_r>
 80094b2:	003e      	movs	r6, r7
 80094b4:	9802      	ldr	r0, [sp, #8]
 80094b6:	f7fd fbb5 	bl	8006c24 <__malloc_unlock>
 80094ba:	3608      	adds	r6, #8
 80094bc:	e78a      	b.n	80093d4 <_realloc_r+0x14>
 80094be:	2100      	movs	r1, #0
 80094c0:	000b      	movs	r3, r1
 80094c2:	07c2      	lsls	r2, r0, #31
 80094c4:	d500      	bpl.n	80094c8 <_realloc_r+0x108>
 80094c6:	e088      	b.n	80095da <_realloc_r+0x21a>
 80094c8:	0022      	movs	r2, r4
 80094ca:	3a08      	subs	r2, #8
 80094cc:	6815      	ldr	r5, [r2, #0]
 80094ce:	2203      	movs	r2, #3
 80094d0:	1b7d      	subs	r5, r7, r5
 80094d2:	6868      	ldr	r0, [r5, #4]
 80094d4:	4390      	bics	r0, r2
 80094d6:	0002      	movs	r2, r0
 80094d8:	9803      	ldr	r0, [sp, #12]
 80094da:	1882      	adds	r2, r0, r2
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d078      	beq.n	80095d2 <_realloc_r+0x212>
 80094e0:	4563      	cmp	r3, ip
 80094e2:	d150      	bne.n	8009586 <_realloc_r+0x1c6>
 80094e4:	1853      	adds	r3, r2, r1
 80094e6:	9305      	str	r3, [sp, #20]
 80094e8:	9b01      	ldr	r3, [sp, #4]
 80094ea:	9905      	ldr	r1, [sp, #20]
 80094ec:	3310      	adds	r3, #16
 80094ee:	4299      	cmp	r1, r3
 80094f0:	db6f      	blt.n	80095d2 <_realloc_r+0x212>
 80094f2:	68aa      	ldr	r2, [r5, #8]
 80094f4:	68eb      	ldr	r3, [r5, #12]
 80094f6:	002e      	movs	r6, r5
 80094f8:	60d3      	str	r3, [r2, #12]
 80094fa:	609a      	str	r2, [r3, #8]
 80094fc:	0002      	movs	r2, r0
 80094fe:	3a04      	subs	r2, #4
 8009500:	3608      	adds	r6, #8
 8009502:	2a24      	cmp	r2, #36	; 0x24
 8009504:	d83a      	bhi.n	800957c <_realloc_r+0x1bc>
 8009506:	2a13      	cmp	r2, #19
 8009508:	d935      	bls.n	8009576 <_realloc_r+0x1b6>
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	60ab      	str	r3, [r5, #8]
 800950e:	6863      	ldr	r3, [r4, #4]
 8009510:	60eb      	str	r3, [r5, #12]
 8009512:	2a1b      	cmp	r2, #27
 8009514:	d81b      	bhi.n	800954e <_realloc_r+0x18e>
 8009516:	002b      	movs	r3, r5
 8009518:	0022      	movs	r2, r4
 800951a:	3310      	adds	r3, #16
 800951c:	3208      	adds	r2, #8
 800951e:	6811      	ldr	r1, [r2, #0]
 8009520:	6019      	str	r1, [r3, #0]
 8009522:	6851      	ldr	r1, [r2, #4]
 8009524:	6059      	str	r1, [r3, #4]
 8009526:	6892      	ldr	r2, [r2, #8]
 8009528:	609a      	str	r2, [r3, #8]
 800952a:	9b01      	ldr	r3, [sp, #4]
 800952c:	9901      	ldr	r1, [sp, #4]
 800952e:	18ea      	adds	r2, r5, r3
 8009530:	4b60      	ldr	r3, [pc, #384]	; (80096b4 <_realloc_r+0x2f4>)
 8009532:	609a      	str	r2, [r3, #8]
 8009534:	9b05      	ldr	r3, [sp, #20]
 8009536:	1a5f      	subs	r7, r3, r1
 8009538:	2301      	movs	r3, #1
 800953a:	431f      	orrs	r7, r3
 800953c:	6057      	str	r7, [r2, #4]
 800953e:	686a      	ldr	r2, [r5, #4]
 8009540:	4013      	ands	r3, r2
 8009542:	430b      	orrs	r3, r1
 8009544:	606b      	str	r3, [r5, #4]
 8009546:	9802      	ldr	r0, [sp, #8]
 8009548:	f7fd fb6c 	bl	8006c24 <__malloc_unlock>
 800954c:	e742      	b.n	80093d4 <_realloc_r+0x14>
 800954e:	68a3      	ldr	r3, [r4, #8]
 8009550:	612b      	str	r3, [r5, #16]
 8009552:	68e3      	ldr	r3, [r4, #12]
 8009554:	616b      	str	r3, [r5, #20]
 8009556:	2a24      	cmp	r2, #36	; 0x24
 8009558:	d004      	beq.n	8009564 <_realloc_r+0x1a4>
 800955a:	002b      	movs	r3, r5
 800955c:	0022      	movs	r2, r4
 800955e:	3318      	adds	r3, #24
 8009560:	3210      	adds	r2, #16
 8009562:	e7dc      	b.n	800951e <_realloc_r+0x15e>
 8009564:	6923      	ldr	r3, [r4, #16]
 8009566:	0022      	movs	r2, r4
 8009568:	61ab      	str	r3, [r5, #24]
 800956a:	002b      	movs	r3, r5
 800956c:	6961      	ldr	r1, [r4, #20]
 800956e:	3320      	adds	r3, #32
 8009570:	3218      	adds	r2, #24
 8009572:	61e9      	str	r1, [r5, #28]
 8009574:	e7d3      	b.n	800951e <_realloc_r+0x15e>
 8009576:	0033      	movs	r3, r6
 8009578:	0022      	movs	r2, r4
 800957a:	e7d0      	b.n	800951e <_realloc_r+0x15e>
 800957c:	0021      	movs	r1, r4
 800957e:	0030      	movs	r0, r6
 8009580:	f7ff ff0c 	bl	800939c <memmove>
 8009584:	e7d1      	b.n	800952a <_realloc_r+0x16a>
 8009586:	1856      	adds	r6, r2, r1
 8009588:	9901      	ldr	r1, [sp, #4]
 800958a:	42b1      	cmp	r1, r6
 800958c:	dc21      	bgt.n	80095d2 <_realloc_r+0x212>
 800958e:	68da      	ldr	r2, [r3, #12]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	60da      	str	r2, [r3, #12]
 8009594:	6093      	str	r3, [r2, #8]
 8009596:	0028      	movs	r0, r5
 8009598:	68aa      	ldr	r2, [r5, #8]
 800959a:	68eb      	ldr	r3, [r5, #12]
 800959c:	3008      	adds	r0, #8
 800959e:	60d3      	str	r3, [r2, #12]
 80095a0:	609a      	str	r2, [r3, #8]
 80095a2:	9a03      	ldr	r2, [sp, #12]
 80095a4:	3a04      	subs	r2, #4
 80095a6:	2a24      	cmp	r2, #36	; 0x24
 80095a8:	d841      	bhi.n	800962e <_realloc_r+0x26e>
 80095aa:	0023      	movs	r3, r4
 80095ac:	2a13      	cmp	r2, #19
 80095ae:	d908      	bls.n	80095c2 <_realloc_r+0x202>
 80095b0:	6823      	ldr	r3, [r4, #0]
 80095b2:	60ab      	str	r3, [r5, #8]
 80095b4:	6863      	ldr	r3, [r4, #4]
 80095b6:	60eb      	str	r3, [r5, #12]
 80095b8:	2a1b      	cmp	r2, #27
 80095ba:	d824      	bhi.n	8009606 <_realloc_r+0x246>
 80095bc:	0023      	movs	r3, r4
 80095be:	3008      	adds	r0, #8
 80095c0:	3308      	adds	r3, #8
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	6002      	str	r2, [r0, #0]
 80095c6:	685a      	ldr	r2, [r3, #4]
 80095c8:	6042      	str	r2, [r0, #4]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	6083      	str	r3, [r0, #8]
 80095ce:	002f      	movs	r7, r5
 80095d0:	e758      	b.n	8009484 <_realloc_r+0xc4>
 80095d2:	9b01      	ldr	r3, [sp, #4]
 80095d4:	0016      	movs	r6, r2
 80095d6:	4293      	cmp	r3, r2
 80095d8:	dddd      	ble.n	8009596 <_realloc_r+0x1d6>
 80095da:	9904      	ldr	r1, [sp, #16]
 80095dc:	9802      	ldr	r0, [sp, #8]
 80095de:	f7fd f903 	bl	80067e8 <_malloc_r>
 80095e2:	1e06      	subs	r6, r0, #0
 80095e4:	d0af      	beq.n	8009546 <_realloc_r+0x186>
 80095e6:	0023      	movs	r3, r4
 80095e8:	2101      	movs	r1, #1
 80095ea:	0002      	movs	r2, r0
 80095ec:	3b08      	subs	r3, #8
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	3a08      	subs	r2, #8
 80095f2:	438b      	bics	r3, r1
 80095f4:	18fb      	adds	r3, r7, r3
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d11d      	bne.n	8009636 <_realloc_r+0x276>
 80095fa:	2303      	movs	r3, #3
 80095fc:	6856      	ldr	r6, [r2, #4]
 80095fe:	439e      	bics	r6, r3
 8009600:	9b03      	ldr	r3, [sp, #12]
 8009602:	18f6      	adds	r6, r6, r3
 8009604:	e73e      	b.n	8009484 <_realloc_r+0xc4>
 8009606:	68a3      	ldr	r3, [r4, #8]
 8009608:	612b      	str	r3, [r5, #16]
 800960a:	68e3      	ldr	r3, [r4, #12]
 800960c:	616b      	str	r3, [r5, #20]
 800960e:	2a24      	cmp	r2, #36	; 0x24
 8009610:	d004      	beq.n	800961c <_realloc_r+0x25c>
 8009612:	0028      	movs	r0, r5
 8009614:	0023      	movs	r3, r4
 8009616:	3018      	adds	r0, #24
 8009618:	3310      	adds	r3, #16
 800961a:	e7d2      	b.n	80095c2 <_realloc_r+0x202>
 800961c:	6923      	ldr	r3, [r4, #16]
 800961e:	0028      	movs	r0, r5
 8009620:	61ab      	str	r3, [r5, #24]
 8009622:	0023      	movs	r3, r4
 8009624:	6962      	ldr	r2, [r4, #20]
 8009626:	3020      	adds	r0, #32
 8009628:	3318      	adds	r3, #24
 800962a:	61ea      	str	r2, [r5, #28]
 800962c:	e7c9      	b.n	80095c2 <_realloc_r+0x202>
 800962e:	0021      	movs	r1, r4
 8009630:	f7ff feb4 	bl	800939c <memmove>
 8009634:	e7cb      	b.n	80095ce <_realloc_r+0x20e>
 8009636:	9a03      	ldr	r2, [sp, #12]
 8009638:	3a04      	subs	r2, #4
 800963a:	2a24      	cmp	r2, #36	; 0x24
 800963c:	d82d      	bhi.n	800969a <_realloc_r+0x2da>
 800963e:	2a13      	cmp	r2, #19
 8009640:	d928      	bls.n	8009694 <_realloc_r+0x2d4>
 8009642:	6823      	ldr	r3, [r4, #0]
 8009644:	6003      	str	r3, [r0, #0]
 8009646:	6863      	ldr	r3, [r4, #4]
 8009648:	6043      	str	r3, [r0, #4]
 800964a:	2a1b      	cmp	r2, #27
 800964c:	d80e      	bhi.n	800966c <_realloc_r+0x2ac>
 800964e:	0003      	movs	r3, r0
 8009650:	0022      	movs	r2, r4
 8009652:	3308      	adds	r3, #8
 8009654:	3208      	adds	r2, #8
 8009656:	6811      	ldr	r1, [r2, #0]
 8009658:	6019      	str	r1, [r3, #0]
 800965a:	6851      	ldr	r1, [r2, #4]
 800965c:	6059      	str	r1, [r3, #4]
 800965e:	6892      	ldr	r2, [r2, #8]
 8009660:	609a      	str	r2, [r3, #8]
 8009662:	0021      	movs	r1, r4
 8009664:	9802      	ldr	r0, [sp, #8]
 8009666:	f7ff fa59 	bl	8008b1c <_free_r>
 800966a:	e76c      	b.n	8009546 <_realloc_r+0x186>
 800966c:	68a3      	ldr	r3, [r4, #8]
 800966e:	6083      	str	r3, [r0, #8]
 8009670:	68e3      	ldr	r3, [r4, #12]
 8009672:	60c3      	str	r3, [r0, #12]
 8009674:	2a24      	cmp	r2, #36	; 0x24
 8009676:	d004      	beq.n	8009682 <_realloc_r+0x2c2>
 8009678:	0003      	movs	r3, r0
 800967a:	0022      	movs	r2, r4
 800967c:	3310      	adds	r3, #16
 800967e:	3210      	adds	r2, #16
 8009680:	e7e9      	b.n	8009656 <_realloc_r+0x296>
 8009682:	6923      	ldr	r3, [r4, #16]
 8009684:	0022      	movs	r2, r4
 8009686:	6103      	str	r3, [r0, #16]
 8009688:	0003      	movs	r3, r0
 800968a:	6961      	ldr	r1, [r4, #20]
 800968c:	3318      	adds	r3, #24
 800968e:	3218      	adds	r2, #24
 8009690:	6141      	str	r1, [r0, #20]
 8009692:	e7e0      	b.n	8009656 <_realloc_r+0x296>
 8009694:	0003      	movs	r3, r0
 8009696:	0022      	movs	r2, r4
 8009698:	e7dd      	b.n	8009656 <_realloc_r+0x296>
 800969a:	0021      	movs	r1, r4
 800969c:	f7ff fe7e 	bl	800939c <memmove>
 80096a0:	e7df      	b.n	8009662 <_realloc_r+0x2a2>
 80096a2:	9e03      	ldr	r6, [sp, #12]
 80096a4:	e6ee      	b.n	8009484 <_realloc_r+0xc4>
 80096a6:	4013      	ands	r3, r2
 80096a8:	431e      	orrs	r6, r3
 80096aa:	607e      	str	r6, [r7, #4]
 80096ac:	6843      	ldr	r3, [r0, #4]
 80096ae:	431a      	orrs	r2, r3
 80096b0:	6042      	str	r2, [r0, #4]
 80096b2:	e6fe      	b.n	80094b2 <_realloc_r+0xf2>
 80096b4:	20000108 	.word	0x20000108

080096b8 <__ascii_wctomb>:
 80096b8:	1e0b      	subs	r3, r1, #0
 80096ba:	d004      	beq.n	80096c6 <__ascii_wctomb+0xe>
 80096bc:	2aff      	cmp	r2, #255	; 0xff
 80096be:	d904      	bls.n	80096ca <__ascii_wctomb+0x12>
 80096c0:	238a      	movs	r3, #138	; 0x8a
 80096c2:	6003      	str	r3, [r0, #0]
 80096c4:	3b8b      	subs	r3, #139	; 0x8b
 80096c6:	0018      	movs	r0, r3
 80096c8:	4770      	bx	lr
 80096ca:	700a      	strb	r2, [r1, #0]
 80096cc:	2301      	movs	r3, #1
 80096ce:	e7fa      	b.n	80096c6 <__ascii_wctomb+0xe>

080096d0 <_init>:
 80096d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d2:	46c0      	nop			; (mov r8, r8)
 80096d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096d6:	bc08      	pop	{r3}
 80096d8:	469e      	mov	lr, r3
 80096da:	4770      	bx	lr

080096dc <_fini>:
 80096dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096de:	46c0      	nop			; (mov r8, r8)
 80096e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096e2:	bc08      	pop	{r3}
 80096e4:	469e      	mov	lr, r3
 80096e6:	4770      	bx	lr
