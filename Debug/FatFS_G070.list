
FatFS_G070.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd50  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fb0  0800de08  0800de08  0001de08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08010db8  08010db8  00020db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08010dbc  08010dbc  00020dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000554  20000000  08010dc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004e9c  20000554  08011314  00030554  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200053f0  08011314  000353f0  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00030554  2**0
                  CONTENTS, READONLY
  9 .debug_info   00066630  00000000  00000000  0003057c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000bb2e  00000000  00000000  00096bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002931e  00000000  00000000  000a26da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002580  00000000  00000000  000cb9f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000042a0  00000000  00000000  000cdf78  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00018e08  00000000  00000000  000d2218  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000c955  00000000  00000000  000eb020  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000f7975  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007090  00000000  00000000  000f79f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000554 	.word	0x20000554
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800ddf0 	.word	0x0800ddf0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000558 	.word	0x20000558
 80000fc:	0800ddf0 	.word	0x0800ddf0

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_uqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5c09      	ldrb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			; (mov r8, r8)

08000138 <__gnu_thumb1_case_shi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5e09      	ldrsh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__gnu_thumb1_case_uhi>:
 800014c:	b403      	push	{r0, r1}
 800014e:	4671      	mov	r1, lr
 8000150:	0849      	lsrs	r1, r1, #1
 8000152:	0040      	lsls	r0, r0, #1
 8000154:	0049      	lsls	r1, r1, #1
 8000156:	5a09      	ldrh	r1, [r1, r0]
 8000158:	0049      	lsls	r1, r1, #1
 800015a:	448e      	add	lr, r1
 800015c:	bc03      	pop	{r0, r1}
 800015e:	4770      	bx	lr

08000160 <__udivsi3>:
 8000160:	2200      	movs	r2, #0
 8000162:	0843      	lsrs	r3, r0, #1
 8000164:	428b      	cmp	r3, r1
 8000166:	d374      	bcc.n	8000252 <__udivsi3+0xf2>
 8000168:	0903      	lsrs	r3, r0, #4
 800016a:	428b      	cmp	r3, r1
 800016c:	d35f      	bcc.n	800022e <__udivsi3+0xce>
 800016e:	0a03      	lsrs	r3, r0, #8
 8000170:	428b      	cmp	r3, r1
 8000172:	d344      	bcc.n	80001fe <__udivsi3+0x9e>
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d328      	bcc.n	80001cc <__udivsi3+0x6c>
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d30d      	bcc.n	800019c <__udivsi3+0x3c>
 8000180:	22ff      	movs	r2, #255	; 0xff
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	ba12      	rev	r2, r2
 8000186:	0c03      	lsrs	r3, r0, #16
 8000188:	428b      	cmp	r3, r1
 800018a:	d302      	bcc.n	8000192 <__udivsi3+0x32>
 800018c:	1212      	asrs	r2, r2, #8
 800018e:	0209      	lsls	r1, r1, #8
 8000190:	d065      	beq.n	800025e <__udivsi3+0xfe>
 8000192:	0b03      	lsrs	r3, r0, #12
 8000194:	428b      	cmp	r3, r1
 8000196:	d319      	bcc.n	80001cc <__udivsi3+0x6c>
 8000198:	e000      	b.n	800019c <__udivsi3+0x3c>
 800019a:	0a09      	lsrs	r1, r1, #8
 800019c:	0bc3      	lsrs	r3, r0, #15
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x46>
 80001a2:	03cb      	lsls	r3, r1, #15
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b83      	lsrs	r3, r0, #14
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x52>
 80001ae:	038b      	lsls	r3, r1, #14
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b43      	lsrs	r3, r0, #13
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x5e>
 80001ba:	034b      	lsls	r3, r1, #13
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0b03      	lsrs	r3, r0, #12
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x6a>
 80001c6:	030b      	lsls	r3, r1, #12
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0ac3      	lsrs	r3, r0, #11
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x76>
 80001d2:	02cb      	lsls	r3, r1, #11
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a83      	lsrs	r3, r0, #10
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x82>
 80001de:	028b      	lsls	r3, r1, #10
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a43      	lsrs	r3, r0, #9
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x8e>
 80001ea:	024b      	lsls	r3, r1, #9
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	0a03      	lsrs	r3, r0, #8
 80001f2:	428b      	cmp	r3, r1
 80001f4:	d301      	bcc.n	80001fa <__udivsi3+0x9a>
 80001f6:	020b      	lsls	r3, r1, #8
 80001f8:	1ac0      	subs	r0, r0, r3
 80001fa:	4152      	adcs	r2, r2
 80001fc:	d2cd      	bcs.n	800019a <__udivsi3+0x3a>
 80001fe:	09c3      	lsrs	r3, r0, #7
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xa8>
 8000204:	01cb      	lsls	r3, r1, #7
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0983      	lsrs	r3, r0, #6
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xb4>
 8000210:	018b      	lsls	r3, r1, #6
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0943      	lsrs	r3, r0, #5
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xc0>
 800021c:	014b      	lsls	r3, r1, #5
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xcc>
 8000228:	010b      	lsls	r3, r1, #4
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	08c3      	lsrs	r3, r0, #3
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xd8>
 8000234:	00cb      	lsls	r3, r1, #3
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0883      	lsrs	r3, r0, #2
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xe4>
 8000240:	008b      	lsls	r3, r1, #2
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	0843      	lsrs	r3, r0, #1
 8000248:	428b      	cmp	r3, r1
 800024a:	d301      	bcc.n	8000250 <__udivsi3+0xf0>
 800024c:	004b      	lsls	r3, r1, #1
 800024e:	1ac0      	subs	r0, r0, r3
 8000250:	4152      	adcs	r2, r2
 8000252:	1a41      	subs	r1, r0, r1
 8000254:	d200      	bcs.n	8000258 <__udivsi3+0xf8>
 8000256:	4601      	mov	r1, r0
 8000258:	4152      	adcs	r2, r2
 800025a:	4610      	mov	r0, r2
 800025c:	4770      	bx	lr
 800025e:	e7ff      	b.n	8000260 <__udivsi3+0x100>
 8000260:	b501      	push	{r0, lr}
 8000262:	2000      	movs	r0, #0
 8000264:	f000 f8f0 	bl	8000448 <__aeabi_idiv0>
 8000268:	bd02      	pop	{r1, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_uidivmod>:
 800026c:	2900      	cmp	r1, #0
 800026e:	d0f7      	beq.n	8000260 <__udivsi3+0x100>
 8000270:	e776      	b.n	8000160 <__udivsi3>
 8000272:	4770      	bx	lr

08000274 <__divsi3>:
 8000274:	4603      	mov	r3, r0
 8000276:	430b      	orrs	r3, r1
 8000278:	d47f      	bmi.n	800037a <__divsi3+0x106>
 800027a:	2200      	movs	r2, #0
 800027c:	0843      	lsrs	r3, r0, #1
 800027e:	428b      	cmp	r3, r1
 8000280:	d374      	bcc.n	800036c <__divsi3+0xf8>
 8000282:	0903      	lsrs	r3, r0, #4
 8000284:	428b      	cmp	r3, r1
 8000286:	d35f      	bcc.n	8000348 <__divsi3+0xd4>
 8000288:	0a03      	lsrs	r3, r0, #8
 800028a:	428b      	cmp	r3, r1
 800028c:	d344      	bcc.n	8000318 <__divsi3+0xa4>
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d328      	bcc.n	80002e6 <__divsi3+0x72>
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d30d      	bcc.n	80002b6 <__divsi3+0x42>
 800029a:	22ff      	movs	r2, #255	; 0xff
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	ba12      	rev	r2, r2
 80002a0:	0c03      	lsrs	r3, r0, #16
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d302      	bcc.n	80002ac <__divsi3+0x38>
 80002a6:	1212      	asrs	r2, r2, #8
 80002a8:	0209      	lsls	r1, r1, #8
 80002aa:	d065      	beq.n	8000378 <__divsi3+0x104>
 80002ac:	0b03      	lsrs	r3, r0, #12
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d319      	bcc.n	80002e6 <__divsi3+0x72>
 80002b2:	e000      	b.n	80002b6 <__divsi3+0x42>
 80002b4:	0a09      	lsrs	r1, r1, #8
 80002b6:	0bc3      	lsrs	r3, r0, #15
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x4c>
 80002bc:	03cb      	lsls	r3, r1, #15
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b83      	lsrs	r3, r0, #14
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x58>
 80002c8:	038b      	lsls	r3, r1, #14
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b43      	lsrs	r3, r0, #13
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x64>
 80002d4:	034b      	lsls	r3, r1, #13
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0b03      	lsrs	r3, r0, #12
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x70>
 80002e0:	030b      	lsls	r3, r1, #12
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0ac3      	lsrs	r3, r0, #11
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x7c>
 80002ec:	02cb      	lsls	r3, r1, #11
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a83      	lsrs	r3, r0, #10
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x88>
 80002f8:	028b      	lsls	r3, r1, #10
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a43      	lsrs	r3, r0, #9
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0x94>
 8000304:	024b      	lsls	r3, r1, #9
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	0a03      	lsrs	r3, r0, #8
 800030c:	428b      	cmp	r3, r1
 800030e:	d301      	bcc.n	8000314 <__divsi3+0xa0>
 8000310:	020b      	lsls	r3, r1, #8
 8000312:	1ac0      	subs	r0, r0, r3
 8000314:	4152      	adcs	r2, r2
 8000316:	d2cd      	bcs.n	80002b4 <__divsi3+0x40>
 8000318:	09c3      	lsrs	r3, r0, #7
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xae>
 800031e:	01cb      	lsls	r3, r1, #7
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0983      	lsrs	r3, r0, #6
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xba>
 800032a:	018b      	lsls	r3, r1, #6
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0943      	lsrs	r3, r0, #5
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xc6>
 8000336:	014b      	lsls	r3, r1, #5
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0903      	lsrs	r3, r0, #4
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xd2>
 8000342:	010b      	lsls	r3, r1, #4
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	08c3      	lsrs	r3, r0, #3
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xde>
 800034e:	00cb      	lsls	r3, r1, #3
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0883      	lsrs	r3, r0, #2
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xea>
 800035a:	008b      	lsls	r3, r1, #2
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	0843      	lsrs	r3, r0, #1
 8000362:	428b      	cmp	r3, r1
 8000364:	d301      	bcc.n	800036a <__divsi3+0xf6>
 8000366:	004b      	lsls	r3, r1, #1
 8000368:	1ac0      	subs	r0, r0, r3
 800036a:	4152      	adcs	r2, r2
 800036c:	1a41      	subs	r1, r0, r1
 800036e:	d200      	bcs.n	8000372 <__divsi3+0xfe>
 8000370:	4601      	mov	r1, r0
 8000372:	4152      	adcs	r2, r2
 8000374:	4610      	mov	r0, r2
 8000376:	4770      	bx	lr
 8000378:	e05d      	b.n	8000436 <__divsi3+0x1c2>
 800037a:	0fca      	lsrs	r2, r1, #31
 800037c:	d000      	beq.n	8000380 <__divsi3+0x10c>
 800037e:	4249      	negs	r1, r1
 8000380:	1003      	asrs	r3, r0, #32
 8000382:	d300      	bcc.n	8000386 <__divsi3+0x112>
 8000384:	4240      	negs	r0, r0
 8000386:	4053      	eors	r3, r2
 8000388:	2200      	movs	r2, #0
 800038a:	469c      	mov	ip, r3
 800038c:	0903      	lsrs	r3, r0, #4
 800038e:	428b      	cmp	r3, r1
 8000390:	d32d      	bcc.n	80003ee <__divsi3+0x17a>
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d312      	bcc.n	80003be <__divsi3+0x14a>
 8000398:	22fc      	movs	r2, #252	; 0xfc
 800039a:	0189      	lsls	r1, r1, #6
 800039c:	ba12      	rev	r2, r2
 800039e:	0a03      	lsrs	r3, r0, #8
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d30c      	bcc.n	80003be <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	1192      	asrs	r2, r2, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d308      	bcc.n	80003be <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	1192      	asrs	r2, r2, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d304      	bcc.n	80003be <__divsi3+0x14a>
 80003b4:	0189      	lsls	r1, r1, #6
 80003b6:	d03a      	beq.n	800042e <__divsi3+0x1ba>
 80003b8:	1192      	asrs	r2, r2, #6
 80003ba:	e000      	b.n	80003be <__divsi3+0x14a>
 80003bc:	0989      	lsrs	r1, r1, #6
 80003be:	09c3      	lsrs	r3, r0, #7
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x154>
 80003c4:	01cb      	lsls	r3, r1, #7
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0983      	lsrs	r3, r0, #6
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x160>
 80003d0:	018b      	lsls	r3, r1, #6
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0943      	lsrs	r3, r0, #5
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x16c>
 80003dc:	014b      	lsls	r3, r1, #5
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	0903      	lsrs	r3, r0, #4
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x178>
 80003e8:	010b      	lsls	r3, r1, #4
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	08c3      	lsrs	r3, r0, #3
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x184>
 80003f4:	00cb      	lsls	r3, r1, #3
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	0883      	lsrs	r3, r0, #2
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x190>
 8000400:	008b      	lsls	r3, r1, #2
 8000402:	1ac0      	subs	r0, r0, r3
 8000404:	4152      	adcs	r2, r2
 8000406:	d2d9      	bcs.n	80003bc <__divsi3+0x148>
 8000408:	0843      	lsrs	r3, r0, #1
 800040a:	428b      	cmp	r3, r1
 800040c:	d301      	bcc.n	8000412 <__divsi3+0x19e>
 800040e:	004b      	lsls	r3, r1, #1
 8000410:	1ac0      	subs	r0, r0, r3
 8000412:	4152      	adcs	r2, r2
 8000414:	1a41      	subs	r1, r0, r1
 8000416:	d200      	bcs.n	800041a <__divsi3+0x1a6>
 8000418:	4601      	mov	r1, r0
 800041a:	4663      	mov	r3, ip
 800041c:	4152      	adcs	r2, r2
 800041e:	105b      	asrs	r3, r3, #1
 8000420:	4610      	mov	r0, r2
 8000422:	d301      	bcc.n	8000428 <__divsi3+0x1b4>
 8000424:	4240      	negs	r0, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d500      	bpl.n	800042c <__divsi3+0x1b8>
 800042a:	4249      	negs	r1, r1
 800042c:	4770      	bx	lr
 800042e:	4663      	mov	r3, ip
 8000430:	105b      	asrs	r3, r3, #1
 8000432:	d300      	bcc.n	8000436 <__divsi3+0x1c2>
 8000434:	4240      	negs	r0, r0
 8000436:	b501      	push	{r0, lr}
 8000438:	2000      	movs	r0, #0
 800043a:	f000 f805 	bl	8000448 <__aeabi_idiv0>
 800043e:	bd02      	pop	{r1, pc}

08000440 <__aeabi_idivmod>:
 8000440:	2900      	cmp	r1, #0
 8000442:	d0f8      	beq.n	8000436 <__divsi3+0x1c2>
 8000444:	e716      	b.n	8000274 <__divsi3>
 8000446:	4770      	bx	lr

08000448 <__aeabi_idiv0>:
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <ST7735_write>:
uint16_t scr_height;
//uint8_t buf_tft[3300] = {0};
static lv_disp_drv_t * disp_p;

void ST7735_write(uint8_t data)
{
 800044c:	b507      	push	{r0, r1, r2, lr}
 800044e:	466b      	mov	r3, sp
 8000450:	1dd9      	adds	r1, r3, #7
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 8000452:	2301      	movs	r3, #1
{
 8000454:	7008      	strb	r0, [r1, #0]
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 8000456:	425b      	negs	r3, r3
 8000458:	2201      	movs	r2, #1
 800045a:	4802      	ldr	r0, [pc, #8]	; (8000464 <ST7735_write+0x18>)
 800045c:	f003 f8f1 	bl	8003642 <HAL_SPI_Transmit>
}
 8000460:	bd07      	pop	{r0, r1, r2, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	2000480c 	.word	0x2000480c

08000468 <ST7735_cmd>:
	tmp[0] = color >> 8;
	tmp[1] = color;
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&tmp[0], 2, HAL_MAX_DELAY);
}

void ST7735_cmd(uint8_t cmd) {
 8000468:	b510      	push	{r4, lr}
 800046a:	0004      	movs	r4, r0
	A0_L();
 800046c:	2200      	movs	r2, #0
 800046e:	2110      	movs	r1, #16
 8000470:	4803      	ldr	r0, [pc, #12]	; (8000480 <ST7735_cmd+0x18>)
 8000472:	f002 fa4d 	bl	8002910 <HAL_GPIO_WritePin>
	ST7735_write(cmd);
 8000476:	0020      	movs	r0, r4
 8000478:	f7ff ffe8 	bl	800044c <ST7735_write>
}
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	50000c00 	.word	0x50000c00

08000484 <ST7735_data>:

void ST7735_data(uint8_t data) {
 8000484:	b510      	push	{r4, lr}
 8000486:	0004      	movs	r4, r0
	A0_H();
 8000488:	2201      	movs	r2, #1
 800048a:	2110      	movs	r1, #16
 800048c:	4803      	ldr	r0, [pc, #12]	; (800049c <ST7735_data+0x18>)
 800048e:	f002 fa3f 	bl	8002910 <HAL_GPIO_WritePin>
	ST7735_write(data);
 8000492:	0020      	movs	r0, r4
 8000494:	f7ff ffda 	bl	800044c <ST7735_write>
}
 8000498:	bd10      	pop	{r4, pc}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	50000c00 	.word	0x50000c00

080004a0 <ST7735_Orientation>:
	CS_H();

	ST7735_Orientation(scr_CCW);
}

void ST7735_Orientation(ScrOrientation_TypeDef orientation) {
 80004a0:	b510      	push	{r4, lr}
	CS_L();
 80004a2:	2200      	movs	r2, #0
 80004a4:	2102      	movs	r1, #2
void ST7735_Orientation(ScrOrientation_TypeDef orientation) {
 80004a6:	0004      	movs	r4, r0
	CS_L();
 80004a8:	4813      	ldr	r0, [pc, #76]	; (80004f8 <ST7735_Orientation+0x58>)
 80004aa:	f002 fa31 	bl	8002910 <HAL_GPIO_WritePin>
	ST7735_cmd(0x36); // Memory data access control:
 80004ae:	2036      	movs	r0, #54	; 0x36
 80004b0:	f7ff ffda 	bl	8000468 <ST7735_cmd>
 80004b4:	4a11      	ldr	r2, [pc, #68]	; (80004fc <ST7735_Orientation+0x5c>)
 80004b6:	20a0      	movs	r0, #160	; 0xa0
 80004b8:	4b11      	ldr	r3, [pc, #68]	; (8000500 <ST7735_Orientation+0x60>)
	switch(orientation) {
 80004ba:	2c02      	cmp	r4, #2
 80004bc:	d00e      	beq.n	80004dc <ST7735_Orientation+0x3c>
 80004be:	2180      	movs	r1, #128	; 0x80
 80004c0:	2c03      	cmp	r4, #3
 80004c2:	d010      	beq.n	80004e6 <ST7735_Orientation+0x46>
 80004c4:	2c01      	cmp	r4, #1
 80004c6:	d112      	bne.n	80004ee <ST7735_Orientation+0x4e>
	case scr_CW:
		scr_width  = TFT_H;
 80004c8:	8010      	strh	r0, [r2, #0]
		scr_height = TFT_W;
 80004ca:	8019      	strh	r1, [r3, #0]
		ST7735_data(0xc0); // X-Mirror,Y-Mirror: Bottom to top; Right to left; RGB
		break;
	default:
		scr_width  = TFT_W;
		scr_height = TFT_H;
		ST7735_data(0x00); // Normal: Top to Bottom; Left to Right; RGB
 80004cc:	f7ff ffda 	bl	8000484 <ST7735_data>
		break;
	}
	CS_H();
 80004d0:	2201      	movs	r2, #1
 80004d2:	2102      	movs	r1, #2
 80004d4:	4808      	ldr	r0, [pc, #32]	; (80004f8 <ST7735_Orientation+0x58>)
 80004d6:	f002 fa1b 	bl	8002910 <HAL_GPIO_WritePin>
}
 80004da:	bd10      	pop	{r4, pc}
		scr_width  = TFT_H;
 80004dc:	8010      	strh	r0, [r2, #0]
		scr_height = TFT_W;
 80004de:	2280      	movs	r2, #128	; 0x80
		ST7735_data(0x60); // X-Y Exchange,X-Mirror
 80004e0:	2060      	movs	r0, #96	; 0x60
		scr_height = TFT_W;
 80004e2:	801a      	strh	r2, [r3, #0]
 80004e4:	e7f2      	b.n	80004cc <ST7735_Orientation+0x2c>
		scr_height = TFT_H;
 80004e6:	8018      	strh	r0, [r3, #0]
		scr_width  = TFT_W;
 80004e8:	8011      	strh	r1, [r2, #0]
		ST7735_data(0xc0); // X-Mirror,Y-Mirror: Bottom to top; Right to left; RGB
 80004ea:	20c0      	movs	r0, #192	; 0xc0
 80004ec:	e7ee      	b.n	80004cc <ST7735_Orientation+0x2c>
		scr_height = TFT_H;
 80004ee:	8018      	strh	r0, [r3, #0]
		scr_width  = TFT_W;
 80004f0:	8011      	strh	r1, [r2, #0]
		ST7735_data(0x00); // Normal: Top to Bottom; Left to Right; RGB
 80004f2:	2000      	movs	r0, #0
 80004f4:	e7ea      	b.n	80004cc <ST7735_Orientation+0x2c>
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	50000c00 	.word	0x50000c00
 80004fc:	200045ac 	.word	0x200045ac
 8000500:	200045ae 	.word	0x200045ae

08000504 <ST7735_Init>:
void ST7735_Init(void) {
 8000504:	b510      	push	{r4, lr}
	CS_H();
 8000506:	4c44      	ldr	r4, [pc, #272]	; (8000618 <ST7735_Init+0x114>)
 8000508:	2201      	movs	r2, #1
 800050a:	0020      	movs	r0, r4
 800050c:	2102      	movs	r1, #2
 800050e:	f002 f9ff 	bl	8002910 <HAL_GPIO_WritePin>
	RST_H();
 8000512:	2201      	movs	r2, #1
 8000514:	0020      	movs	r0, r4
 8000516:	0011      	movs	r1, r2
 8000518:	f002 f9fa 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800051c:	2005      	movs	r0, #5
 800051e:	f001 fe2d 	bl	800217c <HAL_Delay>
	RST_L();
 8000522:	2200      	movs	r2, #0
 8000524:	2101      	movs	r1, #1
 8000526:	0020      	movs	r0, r4
 8000528:	f002 f9f2 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800052c:	2005      	movs	r0, #5
 800052e:	f001 fe25 	bl	800217c <HAL_Delay>
	RST_H();
 8000532:	2201      	movs	r2, #1
 8000534:	0020      	movs	r0, r4
 8000536:	0011      	movs	r1, r2
 8000538:	f002 f9ea 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800053c:	2005      	movs	r0, #5
 800053e:	f001 fe1d 	bl	800217c <HAL_Delay>
	CS_L();
 8000542:	2200      	movs	r2, #0
 8000544:	2102      	movs	r1, #2
 8000546:	0020      	movs	r0, r4
 8000548:	f002 f9e2 	bl	8002910 <HAL_GPIO_WritePin>
	ST7735_cmd(0x11); 	// Sleep out & booster on
 800054c:	2011      	movs	r0, #17
 800054e:	f7ff ff8b 	bl	8000468 <ST7735_cmd>
	HAL_Delay(25); 		// Datasheet says what display wakes about 120ms (may be much faster actually)
 8000552:	2019      	movs	r0, #25
 8000554:	f001 fe12 	bl	800217c <HAL_Delay>
	ST7735_cmd(0xb1);   // In normal mode (full colors):
 8000558:	20b1      	movs	r0, #177	; 0xb1
 800055a:	f7ff ff85 	bl	8000468 <ST7735_cmd>
	A0_H();
 800055e:	2201      	movs	r2, #1
 8000560:	2110      	movs	r1, #16
 8000562:	0020      	movs	r0, r4
 8000564:	f002 f9d4 	bl	8002910 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNA set 1-line period: RTNA2, RTNA0
 8000568:	2005      	movs	r0, #5
 800056a:	f7ff ff6f 	bl	800044c <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPA5,FPA4,FPA3,FPA2
 800056e:	203c      	movs	r0, #60	; 0x3c
 8000570:	f7ff ff6c 	bl	800044c <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPA5,BPA4,BPA3,BPA2
 8000574:	203c      	movs	r0, #60	; 0x3c
 8000576:	f7ff ff69 	bl	800044c <ST7735_write>
	ST7735_cmd(0xb2);   // In idle mode (8-colors):
 800057a:	20b2      	movs	r0, #178	; 0xb2
 800057c:	f7ff ff74 	bl	8000468 <ST7735_cmd>
	A0_H();
 8000580:	2201      	movs	r2, #1
 8000582:	2110      	movs	r1, #16
 8000584:	0020      	movs	r0, r4
 8000586:	f002 f9c3 	bl	8002910 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNB set 1-line period: RTNAB, RTNB0
 800058a:	2005      	movs	r0, #5
 800058c:	f7ff ff5e 	bl	800044c <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPB5,FPB4,FPB3,FPB2
 8000590:	203c      	movs	r0, #60	; 0x3c
 8000592:	f7ff ff5b 	bl	800044c <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPB5,BPB4,BPB3,BPB2
 8000596:	203c      	movs	r0, #60	; 0x3c
 8000598:	f7ff ff58 	bl	800044c <ST7735_write>
	ST7735_cmd(0xb3);   // In partial mode + full colors:
 800059c:	20b3      	movs	r0, #179	; 0xb3
 800059e:	f7ff ff63 	bl	8000468 <ST7735_cmd>
	A0_H();
 80005a2:	2201      	movs	r2, #1
 80005a4:	2110      	movs	r1, #16
 80005a6:	0020      	movs	r0, r4
 80005a8:	f002 f9b2 	bl	8002910 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNC set 1-line period: RTNC2, RTNC0
 80005ac:	2005      	movs	r0, #5
 80005ae:	f7ff ff4d 	bl	800044c <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPC5,FPC4,FPC3,FPC2
 80005b2:	203c      	movs	r0, #60	; 0x3c
 80005b4:	f7ff ff4a 	bl	800044c <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPC5,BPC4,BPC3,BPC2
 80005b8:	203c      	movs	r0, #60	; 0x3c
 80005ba:	f7ff ff47 	bl	800044c <ST7735_write>
	ST7735_write(0x05); //   RTND set 1-line period: RTND2, RTND0
 80005be:	2005      	movs	r0, #5
 80005c0:	f7ff ff44 	bl	800044c <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPD5,FPD4,FPD3,FPD2
 80005c4:	203c      	movs	r0, #60	; 0x3c
 80005c6:	f7ff ff41 	bl	800044c <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPD5,BPD4,BPD3,BPD2
 80005ca:	203c      	movs	r0, #60	; 0x3c
 80005cc:	f7ff ff3e 	bl	800044c <ST7735_write>
	ST7735_cmd(0xB4);   // Display dot inversion control:
 80005d0:	20b4      	movs	r0, #180	; 0xb4
 80005d2:	f7ff ff49 	bl	8000468 <ST7735_cmd>
	ST7735_data(0x03);  //   NLB,NLC
 80005d6:	2003      	movs	r0, #3
 80005d8:	f7ff ff54 	bl	8000484 <ST7735_data>
	ST7735_cmd(0x3a);   // Interface pixel format
 80005dc:	203a      	movs	r0, #58	; 0x3a
 80005de:	f7ff ff43 	bl	8000468 <ST7735_cmd>
	ST7735_data(0x05);  // 16-bit/pixel RGB 5-6-5 (65k colors)
 80005e2:	2005      	movs	r0, #5
 80005e4:	f7ff ff4e 	bl	8000484 <ST7735_data>
	ST7735_cmd(0x20);   // Display inversion off
 80005e8:	2020      	movs	r0, #32
 80005ea:	f7ff ff3d 	bl	8000468 <ST7735_cmd>
	ST7735_cmd(0x13);   // Partial mode off
 80005ee:	2013      	movs	r0, #19
 80005f0:	f7ff ff3a 	bl	8000468 <ST7735_cmd>
	ST7735_cmd(0x26);   // Gamma curve set:
 80005f4:	2026      	movs	r0, #38	; 0x26
 80005f6:	f7ff ff37 	bl	8000468 <ST7735_cmd>
	ST7735_data(0x01);  //   Gamma curve 1 (G2.2) or (G1.0)
 80005fa:	2001      	movs	r0, #1
 80005fc:	f7ff ff42 	bl	8000484 <ST7735_data>
	ST7735_cmd(0x29);   // Display on
 8000600:	2029      	movs	r0, #41	; 0x29
 8000602:	f7ff ff31 	bl	8000468 <ST7735_cmd>
	CS_H();
 8000606:	2201      	movs	r2, #1
 8000608:	2102      	movs	r1, #2
 800060a:	0020      	movs	r0, r4
 800060c:	f002 f980 	bl	8002910 <HAL_GPIO_WritePin>
	ST7735_Orientation(scr_CCW);
 8000610:	2002      	movs	r0, #2
 8000612:	f7ff ff45 	bl	80004a0 <ST7735_Orientation>
}
 8000616:	bd10      	pop	{r4, pc}
 8000618:	50000c00 	.word	0x50000c00

0800061c <ST7735_AddrSet>:

void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 800061c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800061e:	0006      	movs	r6, r0
 8000620:	0015      	movs	r5, r2
 8000622:	000c      	movs	r4, r1
	ST7735_cmd(0x2a); // Column address set
	A0_H();
 8000624:	4f17      	ldr	r7, [pc, #92]	; (8000684 <ST7735_AddrSet+0x68>)
	ST7735_cmd(0x2a); // Column address set
 8000626:	202a      	movs	r0, #42	; 0x2a
void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 8000628:	9301      	str	r3, [sp, #4]
	ST7735_cmd(0x2a); // Column address set
 800062a:	f7ff ff1d 	bl	8000468 <ST7735_cmd>
	A0_H();
 800062e:	2201      	movs	r2, #1
 8000630:	2110      	movs	r1, #16
 8000632:	0038      	movs	r0, r7
 8000634:	f002 f96c 	bl	8002910 <HAL_GPIO_WritePin>
	ST7735_write(XS >> 8);
 8000638:	0a30      	lsrs	r0, r6, #8
 800063a:	f7ff ff07 	bl	800044c <ST7735_write>
	ST7735_write(XS);
 800063e:	b2f0      	uxtb	r0, r6
 8000640:	f7ff ff04 	bl	800044c <ST7735_write>
	ST7735_write(XE >> 8);
 8000644:	0a28      	lsrs	r0, r5, #8
 8000646:	f7ff ff01 	bl	800044c <ST7735_write>
	ST7735_write(XE);
 800064a:	b2e8      	uxtb	r0, r5
 800064c:	f7ff fefe 	bl	800044c <ST7735_write>

	ST7735_cmd(0x2b); // Row address set
 8000650:	202b      	movs	r0, #43	; 0x2b
 8000652:	f7ff ff09 	bl	8000468 <ST7735_cmd>
	A0_H();
 8000656:	2201      	movs	r2, #1
 8000658:	2110      	movs	r1, #16
 800065a:	0038      	movs	r0, r7
 800065c:	f002 f958 	bl	8002910 <HAL_GPIO_WritePin>
	ST7735_write(YS >> 8);
 8000660:	0a20      	lsrs	r0, r4, #8
 8000662:	f7ff fef3 	bl	800044c <ST7735_write>
	ST7735_write(YS);
 8000666:	b2e0      	uxtb	r0, r4
 8000668:	f7ff fef0 	bl	800044c <ST7735_write>
	ST7735_write(YE >> 8);
 800066c:	9b01      	ldr	r3, [sp, #4]
 800066e:	0a18      	lsrs	r0, r3, #8
 8000670:	f7ff feec 	bl	800044c <ST7735_write>
	ST7735_write(YE);
 8000674:	466b      	mov	r3, sp
 8000676:	7918      	ldrb	r0, [r3, #4]
 8000678:	f7ff fee8 	bl	800044c <ST7735_write>

	ST7735_cmd(0x2c); // Memory write
 800067c:	202c      	movs	r0, #44	; 0x2c
 800067e:	f7ff fef3 	bl	8000468 <ST7735_cmd>
}
 8000682:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8000684:	50000c00 	.word	0x50000c00

08000688 <ST7735_Clear>:

void ST7735_Clear(uint16_t color) {
 8000688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t i;
	uint8_t  CH,CL;

	CH = color >> 8;
 800068a:	0a03      	lsrs	r3, r0, #8
	CL = (uint8_t)color;

	CS_L();
 800068c:	2200      	movs	r2, #0
 800068e:	2102      	movs	r1, #2
	CL = (uint8_t)color;
 8000690:	b2c5      	uxtb	r5, r0
	CS_L();
 8000692:	4815      	ldr	r0, [pc, #84]	; (80006e8 <ST7735_Clear+0x60>)
	CH = color >> 8;
 8000694:	9301      	str	r3, [sp, #4]
	CS_L();
 8000696:	f002 f93b 	bl	8002910 <HAL_GPIO_WritePin>
	ST7735_AddrSet(0, 0, scr_width - 1, scr_height - 1);
 800069a:	2100      	movs	r1, #0
 800069c:	4e13      	ldr	r6, [pc, #76]	; (80006ec <ST7735_Clear+0x64>)
 800069e:	4f14      	ldr	r7, [pc, #80]	; (80006f0 <ST7735_Clear+0x68>)
 80006a0:	8833      	ldrh	r3, [r6, #0]
 80006a2:	883a      	ldrh	r2, [r7, #0]
 80006a4:	3b01      	subs	r3, #1
 80006a6:	3a01      	subs	r2, #1
 80006a8:	0008      	movs	r0, r1
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	b292      	uxth	r2, r2
 80006ae:	f7ff ffb5 	bl	800061c <ST7735_AddrSet>
	A0_H();
 80006b2:	2201      	movs	r2, #1
 80006b4:	2110      	movs	r1, #16
 80006b6:	480c      	ldr	r0, [pc, #48]	; (80006e8 <ST7735_Clear+0x60>)
 80006b8:	f002 f92a 	bl	8002910 <HAL_GPIO_WritePin>
	for (i = 0; i < scr_width * scr_height; i++) {
 80006bc:	2400      	movs	r4, #0
 80006be:	883a      	ldrh	r2, [r7, #0]
 80006c0:	8833      	ldrh	r3, [r6, #0]
 80006c2:	4353      	muls	r3, r2
 80006c4:	429c      	cmp	r4, r3
 80006c6:	db05      	blt.n	80006d4 <ST7735_Clear+0x4c>
		ST7735_write(CH);
		ST7735_write(CL);
	}
	CS_H();
 80006c8:	2201      	movs	r2, #1
 80006ca:	2102      	movs	r1, #2
 80006cc:	4806      	ldr	r0, [pc, #24]	; (80006e8 <ST7735_Clear+0x60>)
 80006ce:	f002 f91f 	bl	8002910 <HAL_GPIO_WritePin>
}
 80006d2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		ST7735_write(CH);
 80006d4:	9801      	ldr	r0, [sp, #4]
 80006d6:	f7ff feb9 	bl	800044c <ST7735_write>
	for (i = 0; i < scr_width * scr_height; i++) {
 80006da:	3401      	adds	r4, #1
		ST7735_write(CL);
 80006dc:	0028      	movs	r0, r5
 80006de:	f7ff feb5 	bl	800044c <ST7735_write>
	for (i = 0; i < scr_width * scr_height; i++) {
 80006e2:	b2a4      	uxth	r4, r4
 80006e4:	e7eb      	b.n	80006be <ST7735_Clear+0x36>
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	50000c00 	.word	0x50000c00
 80006ec:	200045ae 	.word	0x200045ae
 80006f0:	200045ac 	.word	0x200045ac

080006f4 <ST7735_Flush_2>:
	lv_disp_flush_ready(disp_drv);                  /* Tell you are ready with the flushing*/
#endif
}

void ST7735_Flush_2(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
 80006f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f6:	000c      	movs	r4, r1
 80006f8:	0016      	movs	r6, r2
	uint16_t size;
	uint16_t teste = 0;
	uint8_t tmp[2];

    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 80006fa:	2204      	movs	r2, #4
 80006fc:	5e8b      	ldrsh	r3, [r1, r2]
 80006fe:	2100      	movs	r1, #0
 8000700:	5e62      	ldrsh	r2, [r4, r1]
{
 8000702:	0005      	movs	r5, r0
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8000704:	1a9b      	subs	r3, r3, r2
 8000706:	2106      	movs	r1, #6
 8000708:	5e62      	ldrsh	r2, [r4, r1]
 800070a:	2002      	movs	r0, #2
 800070c:	5e21      	ldrsh	r1, [r4, r0]
 800070e:	3301      	adds	r3, #1
 8000710:	1a52      	subs	r2, r2, r1
 8000712:	3201      	adds	r2, #1
 8000714:	4353      	muls	r3, r2
{
 8000716:	b085      	sub	sp, #20
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8000718:	b29b      	uxth	r3, r3

	CS_L();
 800071a:	2200      	movs	r2, #0
 800071c:	2102      	movs	r1, #2
 800071e:	4829      	ldr	r0, [pc, #164]	; (80007c4 <ST7735_Flush_2+0xd0>)
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8000720:	9301      	str	r3, [sp, #4]
	CS_L();
 8000722:	f002 f8f5 	bl	8002910 <HAL_GPIO_WritePin>
    ST7735_cmd(0x2a); // Column address set
 8000726:	202a      	movs	r0, #42	; 0x2a
 8000728:	f7ff fe9e 	bl	8000468 <ST7735_cmd>
	A0_H();
 800072c:	2201      	movs	r2, #1
 800072e:	2110      	movs	r1, #16
 8000730:	4824      	ldr	r0, [pc, #144]	; (80007c4 <ST7735_Flush_2+0xd0>)
 8000732:	f002 f8ed 	bl	8002910 <HAL_GPIO_WritePin>
	ST7735_write(area->x1 >> 8);
 8000736:	7860      	ldrb	r0, [r4, #1]
 8000738:	f7ff fe88 	bl	800044c <ST7735_write>
	ST7735_write(area->x1);
 800073c:	7820      	ldrb	r0, [r4, #0]
 800073e:	f7ff fe85 	bl	800044c <ST7735_write>
	ST7735_write(area->x2 >> 8);
 8000742:	7960      	ldrb	r0, [r4, #5]
 8000744:	f7ff fe82 	bl	800044c <ST7735_write>
	ST7735_write(area->x2);
 8000748:	7920      	ldrb	r0, [r4, #4]
 800074a:	f7ff fe7f 	bl	800044c <ST7735_write>

	ST7735_cmd(0x2b); // Row address set
 800074e:	202b      	movs	r0, #43	; 0x2b
 8000750:	f7ff fe8a 	bl	8000468 <ST7735_cmd>
	A0_H();
 8000754:	2201      	movs	r2, #1
 8000756:	2110      	movs	r1, #16
 8000758:	481a      	ldr	r0, [pc, #104]	; (80007c4 <ST7735_Flush_2+0xd0>)
 800075a:	f002 f8d9 	bl	8002910 <HAL_GPIO_WritePin>
	ST7735_write(area->y1 >> 8);
 800075e:	78e0      	ldrb	r0, [r4, #3]
 8000760:	f7ff fe74 	bl	800044c <ST7735_write>
	ST7735_write(area->y1);
 8000764:	78a0      	ldrb	r0, [r4, #2]
 8000766:	f7ff fe71 	bl	800044c <ST7735_write>
	ST7735_write(area->y2 >> 8);
 800076a:	79e0      	ldrb	r0, [r4, #7]
 800076c:	f7ff fe6e 	bl	800044c <ST7735_write>
	ST7735_write(area->y2);
 8000770:	79a0      	ldrb	r0, [r4, #6]
 8000772:	f7ff fe6b 	bl	800044c <ST7735_write>

	ST7735_cmd(0x2c); // Memory write
 8000776:	202c      	movs	r0, #44	; 0x2c
 8000778:	f7ff fe76 	bl	8000468 <ST7735_cmd>
	A0_H();
	//
	for(uint16_t x = 0; x <= size-1; x++) {
		tmp[0] = color_p->full >> 8;
		tmp[1] = color_p->full;
		HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&tmp[0], 2, HAL_MAX_DELAY);
 800077c:	2701      	movs	r7, #1
	A0_H();
 800077e:	2201      	movs	r2, #1
 8000780:	2110      	movs	r1, #16
 8000782:	4810      	ldr	r0, [pc, #64]	; (80007c4 <ST7735_Flush_2+0xd0>)
 8000784:	f002 f8c4 	bl	8002910 <HAL_GPIO_WritePin>
	for(uint16_t x = 0; x <= size-1; x++) {
 8000788:	2400      	movs	r4, #0
		HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&tmp[0], 2, HAL_MAX_DELAY);
 800078a:	427f      	negs	r7, r7
	for(uint16_t x = 0; x <= size-1; x++) {
 800078c:	9a01      	ldr	r2, [sp, #4]
 800078e:	b2a3      	uxth	r3, r4
 8000790:	429a      	cmp	r2, r3
 8000792:	dc09      	bgt.n	80007a8 <ST7735_Flush_2+0xb4>
		color_p++;
		teste++;
	}
	CS_H();
 8000794:	2201      	movs	r2, #1
 8000796:	2102      	movs	r1, #2
 8000798:	480a      	ldr	r0, [pc, #40]	; (80007c4 <ST7735_Flush_2+0xd0>)
 800079a:	f002 f8b9 	bl	8002910 <HAL_GPIO_WritePin>

//	sprintf(buffer, "ST7735-Flush2 X1: %d X2: %d Y1: %d Y2: %d Size: %d Teste: %d", area->x1, area->x2, area->y1, area->y2, size, teste);
//    LV_LOG_ERROR(buffer);

	lv_disp_flush_ready(disp_drv);                  /* Tell you are ready with the flushing*/
 800079e:	0028      	movs	r0, r5
 80007a0:	f00b fd10 	bl	800c1c4 <lv_disp_flush_ready>
}
 80007a4:	b005      	add	sp, #20
 80007a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[0] = color_p->full >> 8;
 80007a8:	0063      	lsls	r3, r4, #1
 80007aa:	5af3      	ldrh	r3, [r6, r3]
 80007ac:	a903      	add	r1, sp, #12
 80007ae:	0a1a      	lsrs	r2, r3, #8
 80007b0:	700a      	strb	r2, [r1, #0]
		tmp[1] = color_p->full;
 80007b2:	704b      	strb	r3, [r1, #1]
		HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&tmp[0], 2, HAL_MAX_DELAY);
 80007b4:	2202      	movs	r2, #2
 80007b6:	003b      	movs	r3, r7
 80007b8:	4803      	ldr	r0, [pc, #12]	; (80007c8 <ST7735_Flush_2+0xd4>)
 80007ba:	f002 ff42 	bl	8003642 <HAL_SPI_Transmit>
 80007be:	3401      	adds	r4, #1
 80007c0:	e7e4      	b.n	800078c <ST7735_Flush_2+0x98>
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	50000c00 	.word	0x50000c00
 80007c8:	2000480c 	.word	0x2000480c

080007cc <ST7735_Flush_3>:
 80007cc:	b510      	push	{r4, lr}
 80007ce:	f7ff ff91 	bl	80006f4 <ST7735_Flush_2>
 80007d2:	bd10      	pop	{r4, pc}

080007d4 <ClearLog>:

/** Clear the duration parameter and the click count parameter of the button.
 */
void ClearLog(uint8_t key, uint8_t index)
{
	if(index < 8)
 80007d4:	2907      	cmp	r1, #7
 80007d6:	d807      	bhi.n	80007e8 <ClearLog+0x14>
	{
		bt[key]->click[index] = bt[key]->duration[index] = 0;
 80007d8:	2360      	movs	r3, #96	; 0x60
 80007da:	4343      	muls	r3, r0
 80007dc:	4803      	ldr	r0, [pc, #12]	; (80007ec <ClearLog+0x18>)
 80007de:	18c0      	adds	r0, r0, r3
 80007e0:	2300      	movs	r3, #0
 80007e2:	1841      	adds	r1, r0, r1
 80007e4:	728b      	strb	r3, [r1, #10]
 80007e6:	708b      	strb	r3, [r1, #2]
	}
}
 80007e8:	4770      	bx	lr
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	200045c8 	.word	0x200045c8

080007f0 <KeyboardInit>:
{
 80007f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007f2:	0006      	movs	r6, r0
	for(x = 0; x < 6; x++) {
 80007f4:	2500      	movs	r5, #0
 80007f6:	4c0a      	ldr	r4, [pc, #40]	; (8000820 <KeyboardInit+0x30>)
		bt[x]->old_state = bt[x]->new_state = 0;
 80007f8:	2700      	movs	r7, #0
		bt[x]->mask = mask;
 80007fa:	74a6      	strb	r6, [r4, #18]
		bt[x]->old_state = bt[x]->new_state = 0;
 80007fc:	7067      	strb	r7, [r4, #1]
 80007fe:	7027      	strb	r7, [r4, #0]
		bt[x]->mode = 0;
 8000800:	74e7      	strb	r7, [r4, #19]
		bt[x]->flag = 0;
 8000802:	6167      	str	r7, [r4, #20]
			ClearLog(x, i);
 8000804:	b2f9      	uxtb	r1, r7
 8000806:	0028      	movs	r0, r5
		for(i = 0; i < 8; i++) {
 8000808:	3701      	adds	r7, #1
			ClearLog(x, i);
 800080a:	f7ff ffe3 	bl	80007d4 <ClearLog>
		for(i = 0; i < 8; i++) {
 800080e:	2f08      	cmp	r7, #8
 8000810:	d1f8      	bne.n	8000804 <KeyboardInit+0x14>
	for(x = 0; x < 6; x++) {
 8000812:	3501      	adds	r5, #1
 8000814:	b2ed      	uxtb	r5, r5
 8000816:	3460      	adds	r4, #96	; 0x60
 8000818:	2d06      	cmp	r5, #6
 800081a:	d1ed      	bne.n	80007f8 <KeyboardInit+0x8>
}
 800081c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	200045c8 	.word	0x200045c8

08000824 <KeyboardSetMode>:

void KeyboardSetMode(uint8_t key, uint8_t mode, bool flag)
{
 8000824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	// clear data
	bt[key]->old_state = bt[key]->new_state = 0;
 8000826:	2360      	movs	r3, #96	; 0x60
 8000828:	2400      	movs	r4, #0
 800082a:	4343      	muls	r3, r0
 800082c:	4d0a      	ldr	r5, [pc, #40]	; (8000858 <KeyboardSetMode+0x34>)
{
 800082e:	000e      	movs	r6, r1
	bt[key]->old_state = bt[key]->new_state = 0;
 8000830:	555c      	strb	r4, [r3, r5]
 8000832:	18e9      	adds	r1, r5, r3
	// this looks weird but correct
	bt[key]->flag = !flag;
 8000834:	2301      	movs	r3, #1
{
 8000836:	0007      	movs	r7, r0
	bt[key]->flag = !flag;
 8000838:	405a      	eors	r2, r3
	bt[key]->old_state = bt[key]->new_state = 0;
 800083a:	704c      	strb	r4, [r1, #1]
	bt[key]->flag = !flag;
 800083c:	614a      	str	r2, [r1, #20]

	// clear log
	for(i = 0; i < 8; i++)
	{
		ClearLog(key, i);
 800083e:	b2e1      	uxtb	r1, r4
 8000840:	0038      	movs	r0, r7
	for(i = 0; i < 8; i++)
 8000842:	3401      	adds	r4, #1
		ClearLog(key, i);
 8000844:	f7ff ffc6 	bl	80007d4 <ClearLog>
	for(i = 0; i < 8; i++)
 8000848:	2c08      	cmp	r4, #8
 800084a:	d1f8      	bne.n	800083e <KeyboardSetMode+0x1a>
	}

	// change mode
	bt[key]->mode = mode;
 800084c:	2360      	movs	r3, #96	; 0x60
 800084e:	435f      	muls	r7, r3
 8000850:	19ed      	adds	r5, r5, r7
 8000852:	74ee      	strb	r6, [r5, #19]
}
 8000854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	200045c8 	.word	0x200045c8

0800085c <PushButton_Read>:
	bt[key]->old_state = bt[key]->new_state;
}


uint8_t PushButton_Read(uint8_t key)
{
 800085c:	b510      	push	{r4, lr}
	uint8_t ret = 0x00;
 800085e:	2300      	movs	r3, #0

	switch(key) {
 8000860:	2804      	cmp	r0, #4
 8000862:	d80b      	bhi.n	800087c <PushButton_Read+0x20>
 8000864:	f7ff fc5e 	bl	8000124 <__gnu_thumb1_case_uqi>
 8000868:	100e0c03 	.word	0x100e0c03
 800086c:	12          	.byte	0x12
 800086d:	00          	.byte	0x00
		case 0:			// Down
			ret = !(HAL_GPIO_ReadPin(KEY_DN_GPIO_Port, KEY_DN_Pin));
 800086e:	2101      	movs	r1, #1
			break;
		case 2:			// Enter
			ret = !(HAL_GPIO_ReadPin(KEY_ENTER_GPIO_Port, KEY_ENTER_Pin));
			break;
		case 3:			// Esc
			ret = !(HAL_GPIO_ReadPin(KEY_ESC_GPIO_Port, KEY_ESC_Pin));
 8000870:	4808      	ldr	r0, [pc, #32]	; (8000894 <PushButton_Read+0x38>)
			break;
		case 4:			// SW Rotary Encoder
			ret = !(HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin));
 8000872:	f002 f847 	bl	8002904 <HAL_GPIO_ReadPin>
 8000876:	4243      	negs	r3, r0
 8000878:	4143      	adcs	r3, r0
 800087a:	b2db      	uxtb	r3, r3
			break;
		default:
			break;
	}
	return ret;
}
 800087c:	0018      	movs	r0, r3
 800087e:	bd10      	pop	{r4, pc}
			ret = !(HAL_GPIO_ReadPin(KEY_UP_GPIO_Port, KEY_UP_Pin));
 8000880:	2102      	movs	r1, #2
 8000882:	e7f5      	b.n	8000870 <PushButton_Read+0x14>
			ret = !(HAL_GPIO_ReadPin(KEY_ENTER_GPIO_Port, KEY_ENTER_Pin));
 8000884:	2104      	movs	r1, #4
 8000886:	e7f3      	b.n	8000870 <PushButton_Read+0x14>
			ret = !(HAL_GPIO_ReadPin(KEY_ESC_GPIO_Port, KEY_ESC_Pin));
 8000888:	2108      	movs	r1, #8
 800088a:	e7f1      	b.n	8000870 <PushButton_Read+0x14>
			ret = !(HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin));
 800088c:	2120      	movs	r1, #32
 800088e:	4802      	ldr	r0, [pc, #8]	; (8000898 <PushButton_Read+0x3c>)
 8000890:	e7ef      	b.n	8000872 <PushButton_Read+0x16>
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	50000400 	.word	0x50000400
 8000898:	50000c00 	.word	0x50000c00

0800089c <Evt_EnQueue>:
 * \return false if the queue is full
 */
bool Evt_EnQueue(uint8_t *event)
{
	unsigned i;
	uint8_t next = ADVANCE_QPTR(evt_queue.head);
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <Evt_EnQueue+0x34>)
 800089e:	2107      	movs	r1, #7
 80008a0:	001a      	movs	r2, r3
{
 80008a2:	b530      	push	{r4, r5, lr}
	uint8_t next = ADVANCE_QPTR(evt_queue.head);
 80008a4:	3280      	adds	r2, #128	; 0x80
 80008a6:	7812      	ldrb	r2, [r2, #0]
 80008a8:	1c54      	adds	r4, r2, #1
 80008aa:	400c      	ands	r4, r1

	// queue is full
	if(next == evt_queue.tail)
 80008ac:	0019      	movs	r1, r3
 80008ae:	3181      	adds	r1, #129	; 0x81
 80008b0:	780d      	ldrb	r5, [r1, #0]
	{
		// event will be lost
		//logI("I - Evt_EnQueue Full\n\r");
		return false;
 80008b2:	2100      	movs	r1, #0
	if(next == evt_queue.tail)
 80008b4:	42a5      	cmp	r5, r4
 80008b6:	d009      	beq.n	80008cc <Evt_EnQueue+0x30>
 80008b8:	0112      	lsls	r2, r2, #4
 80008ba:	189a      	adds	r2, r3, r2
	}

	// copy event bytes into the buffer
	for(i = 0; i < EVT_QWIDTH; i++)
	{
		evt_queue.buff[evt_queue.head][i] = event[i];
 80008bc:	5c45      	ldrb	r5, [r0, r1]
 80008be:	5455      	strb	r5, [r2, r1]
	for(i = 0; i < EVT_QWIDTH; i++)
 80008c0:	3101      	adds	r1, #1
 80008c2:	2910      	cmp	r1, #16
 80008c4:	d1fa      	bne.n	80008bc <Evt_EnQueue+0x20>
	}
	// move to the next positition
	evt_queue.head = next;
 80008c6:	3380      	adds	r3, #128	; 0x80
 80008c8:	701c      	strb	r4, [r3, #0]

	//logI("I - Evt_EnQueue OK\n\r");
	return true;
 80008ca:	390f      	subs	r1, #15
}
 80008cc:	0008      	movs	r0, r1
 80008ce:	bd30      	pop	{r4, r5, pc}
 80008d0:	20000570 	.word	0x20000570

080008d4 <KeyboardRead>:
{
 80008d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d6:	b085      	sub	sp, #20
 80008d8:	0004      	movs	r4, r0
	bt[key]->new_state = PushButton_Read(key);
 80008da:	f7ff ffbf 	bl	800085c <PushButton_Read>
 80008de:	2260      	movs	r2, #96	; 0x60
 80008e0:	4362      	muls	r2, r4
 80008e2:	4e3e      	ldr	r6, [pc, #248]	; (80009dc <KeyboardRead+0x108>)
 80008e4:	18b3      	adds	r3, r6, r2
 80008e6:	7058      	strb	r0, [r3, #1]
	diff_state = bt[key]->old_state ^ bt[key]->new_state;
 80008e8:	5d95      	ldrb	r5, [r2, r6]
	if(((bt[key]->mode >> i) & 0x01)  == PUSHBTN_MODE_UDOWN) {
 80008ea:	2201      	movs	r2, #1
 80008ec:	7cd9      	ldrb	r1, [r3, #19]
 80008ee:	4211      	tst	r1, r2
 80008f0:	d01d      	beq.n	800092e <KeyboardRead+0x5a>
		if(((bt[key]->new_state >> i) & 0x01) == 0x01) {
 80008f2:	0001      	movs	r1, r0
 80008f4:	4011      	ands	r1, r2
 80008f6:	d00f      	beq.n	8000918 <KeyboardRead+0x44>
			event[0] = EVT_PBTN_INPUT;
 80008f8:	2310      	movs	r3, #16
 80008fa:	466a      	mov	r2, sp
 80008fc:	7013      	strb	r3, [r2, #0]
			event[2] = PBTN_DOWN;
 80008fe:	2305      	movs	r3, #5
			event[1] = (uint8_t)key;
 8000900:	7054      	strb	r4, [r2, #1]
				Evt_EnQueue(event);
 8000902:	4668      	mov	r0, sp
				event[2] = PBTN_ENDN;
 8000904:	7093      	strb	r3, [r2, #2]
				Evt_EnQueue(event);
 8000906:	f7ff ffc9 	bl	800089c <Evt_EnQueue>
	bt[key]->old_state = bt[key]->new_state;
 800090a:	2360      	movs	r3, #96	; 0x60
 800090c:	435c      	muls	r4, r3
 800090e:	1933      	adds	r3, r6, r4
 8000910:	785b      	ldrb	r3, [r3, #1]
 8000912:	5533      	strb	r3, [r6, r4]
}
 8000914:	b005      	add	sp, #20
 8000916:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(((bt[key]->old_state >> i) & 0x01) == 0x01) {
 8000918:	4215      	tst	r5, r2
 800091a:	d0f6      	beq.n	800090a <KeyboardRead+0x36>
				KeyboardSetMode(key, PUSHBTN_MODE_CLICK, true);
 800091c:	0020      	movs	r0, r4
 800091e:	f7ff ff81 	bl	8000824 <KeyboardSetMode>
				event[0] = EVT_PBTN_INPUT;
 8000922:	2310      	movs	r3, #16
 8000924:	466a      	mov	r2, sp
 8000926:	7013      	strb	r3, [r2, #0]
				event[1] = (uint8_t)key;
 8000928:	7054      	strb	r4, [r2, #1]
				event[2] = PBTN_ENDN;
 800092a:	2306      	movs	r3, #6
 800092c:	e7e9      	b.n	8000902 <KeyboardRead+0x2e>
	diff_state = bt[key]->old_state ^ bt[key]->new_state;
 800092e:	4045      	eors	r5, r0
		if((diff_state >> i) & 0x01) {
 8000930:	4215      	tst	r5, r2
 8000932:	d01e      	beq.n	8000972 <KeyboardRead+0x9e>
			bt[key]->duration[i] = 1;
 8000934:	729a      	strb	r2, [r3, #10]
			if(((bt[key]->new_state >> i) & 0x01) == 0x00) {
 8000936:	4002      	ands	r2, r0
 8000938:	d108      	bne.n	800094c <KeyboardRead+0x78>
				if(bt[key]->flag) {
 800093a:	6959      	ldr	r1, [r3, #20]
 800093c:	2900      	cmp	r1, #0
 800093e:	d002      	beq.n	8000946 <KeyboardRead+0x72>
					bt[key]->flag = false;
 8000940:	615a      	str	r2, [r3, #20]
				bt[key]->duration[i]++;
 8000942:	729a      	strb	r2, [r3, #10]
 8000944:	e002      	b.n	800094c <KeyboardRead+0x78>
					bt[key]->click[i]++;
 8000946:	789a      	ldrb	r2, [r3, #2]
 8000948:	3201      	adds	r2, #1
 800094a:	709a      	strb	r2, [r3, #2]
		if(bt[key]->click[i] >= 3) {
 800094c:	2560      	movs	r5, #96	; 0x60
 800094e:	4365      	muls	r5, r4
 8000950:	1975      	adds	r5, r6, r5
 8000952:	78aa      	ldrb	r2, [r5, #2]
 8000954:	2a02      	cmp	r2, #2
 8000956:	d913      	bls.n	8000980 <KeyboardRead+0xac>
			event[0] = EVT_PBTN_INPUT;
 8000958:	466a      	mov	r2, sp
 800095a:	2310      	movs	r3, #16
 800095c:	7013      	strb	r3, [r2, #0]
			event[2] = PBTN_TCLK;
 800095e:	2304      	movs	r3, #4
			Evt_EnQueue(event);
 8000960:	4668      	mov	r0, sp
			event[2] = PBTN_TCLK;
 8000962:	7093      	strb	r3, [r2, #2]
			event[1] = (uint8_t)key;
 8000964:	7054      	strb	r4, [r2, #1]
			Evt_EnQueue(event);
 8000966:	f7ff ff99 	bl	800089c <Evt_EnQueue>
			bt[key]->click[i] = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	70ab      	strb	r3, [r5, #2]
			bt[key]->duration[i] = 0;
 800096e:	72ab      	strb	r3, [r5, #10]
 8000970:	e7cb      	b.n	800090a <KeyboardRead+0x36>
			if((bt[key]->duration[i] > 0) && (bt[key]->duration[i] < PUSHBTN_TO_MAX)) {
 8000972:	7a9a      	ldrb	r2, [r3, #10]
 8000974:	1e51      	subs	r1, r2, #1
 8000976:	b2c9      	uxtb	r1, r1
 8000978:	29fd      	cmp	r1, #253	; 0xfd
 800097a:	d8e7      	bhi.n	800094c <KeyboardRead+0x78>
				bt[key]->duration[i]++;
 800097c:	3201      	adds	r2, #1
 800097e:	e7e0      	b.n	8000942 <KeyboardRead+0x6e>
		else if((bt[key]->duration[i] > PUSHBTN_TO_SHORT) &&	(((bt[key]->new_state >> i) & 0x01) == 0x00)) {
 8000980:	7aab      	ldrb	r3, [r5, #10]
 8000982:	2b03      	cmp	r3, #3
 8000984:	d9c1      	bls.n	800090a <KeyboardRead+0x36>
 8000986:	2701      	movs	r7, #1
 8000988:	4238      	tst	r0, r7
 800098a:	d116      	bne.n	80009ba <KeyboardRead+0xe6>
 800098c:	2310      	movs	r3, #16
			if(bt[key]->click[i] == 2) {
 800098e:	2a02      	cmp	r2, #2
 8000990:	d10e      	bne.n	80009b0 <KeyboardRead+0xdc>
				event[0] = EVT_PBTN_INPUT;
 8000992:	466a      	mov	r2, sp
 8000994:	7013      	strb	r3, [r2, #0]
				event[2] = PBTN_DCLK;
 8000996:	2303      	movs	r3, #3
				event[1] = (uint8_t)key;
 8000998:	7054      	strb	r4, [r2, #1]
				event[2] = PBTN_DCLK;
 800099a:	7093      	strb	r3, [r2, #2]
				Evt_EnQueue(event);
 800099c:	4668      	mov	r0, sp
 800099e:	f7ff ff7d 	bl	800089c <Evt_EnQueue>
			bt[key]->click[i] = 0;
 80009a2:	2360      	movs	r3, #96	; 0x60
 80009a4:	2200      	movs	r2, #0
 80009a6:	4363      	muls	r3, r4
 80009a8:	18f3      	adds	r3, r6, r3
 80009aa:	709a      	strb	r2, [r3, #2]
			bt[key]->duration[i] = 0;
 80009ac:	729a      	strb	r2, [r3, #10]
 80009ae:	e7ac      	b.n	800090a <KeyboardRead+0x36>
				event[0] = EVT_PBTN_INPUT;
 80009b0:	466a      	mov	r2, sp
 80009b2:	7013      	strb	r3, [r2, #0]
				event[1] = (uint8_t)key;
 80009b4:	7054      	strb	r4, [r2, #1]
				event[2] = PBTN_SCLK;
 80009b6:	7097      	strb	r7, [r2, #2]
 80009b8:	e7f0      	b.n	800099c <KeyboardRead+0xc8>
		else if((bt[key]->duration[i] > PUSHBTN_TO_LONG) && (((bt[key]->new_state >> i) & 0x01) == 0x01)) {
 80009ba:	2b0a      	cmp	r3, #10
 80009bc:	d9a5      	bls.n	800090a <KeyboardRead+0x36>
			event[0] = EVT_PBTN_INPUT;
 80009be:	466a      	mov	r2, sp
 80009c0:	2310      	movs	r3, #16
 80009c2:	7013      	strb	r3, [r2, #0]
			event[2] = PBTN_LCLK;
 80009c4:	2302      	movs	r3, #2
			Evt_EnQueue(event);
 80009c6:	4668      	mov	r0, sp
			event[2] = PBTN_LCLK;
 80009c8:	7093      	strb	r3, [r2, #2]
			event[1] = (uint8_t)key;
 80009ca:	7054      	strb	r4, [r2, #1]
			Evt_EnQueue(event);
 80009cc:	f7ff ff66 	bl	800089c <Evt_EnQueue>
			bt[key]->click[i] = 0;
 80009d0:	2300      	movs	r3, #0
			bt[key]->flag = true;
 80009d2:	616f      	str	r7, [r5, #20]
			bt[key]->click[i] = 0;
 80009d4:	70ab      	strb	r3, [r5, #2]
			bt[key]->duration[i] = 0;
 80009d6:	72ab      	strb	r3, [r5, #10]
 80009d8:	e797      	b.n	800090a <KeyboardRead+0x36>
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	200045c8 	.word	0x200045c8

080009e0 <Key_Read>:
{
 80009e0:	b510      	push	{r4, lr}
	for(x = 0; x < 6; x++) {
 80009e2:	2400      	movs	r4, #0
		KeyboardRead(x);
 80009e4:	0020      	movs	r0, r4
	for(x = 0; x < 6; x++) {
 80009e6:	3401      	adds	r4, #1
 80009e8:	b2e4      	uxtb	r4, r4
		KeyboardRead(x);
 80009ea:	f7ff ff73 	bl	80008d4 <KeyboardRead>
	for(x = 0; x < 6; x++) {
 80009ee:	2c06      	cmp	r4, #6
 80009f0:	d1f8      	bne.n	80009e4 <Key_Read+0x4>
}
 80009f2:	bd10      	pop	{r4, pc}

080009f4 <Evt_DeQueue>:
 *
 * \param  event data in an array of uint8_t
 * \return false if the queue is empty
 */
bool Evt_DeQueue(uint8_t *event)
{
 80009f4:	b530      	push	{r4, r5, lr}

	// disable all timers
	//UsrTimer_Enable(false);

	// queue is not empty
	if(evt_queue.tail != evt_queue.head)
 80009f6:	4c0d      	ldr	r4, [pc, #52]	; (8000a2c <Evt_DeQueue+0x38>)
 80009f8:	0023      	movs	r3, r4
 80009fa:	0022      	movs	r2, r4
 80009fc:	3381      	adds	r3, #129	; 0x81
 80009fe:	3280      	adds	r2, #128	; 0x80
 8000a00:	7811      	ldrb	r1, [r2, #0]
 8000a02:	781d      	ldrb	r5, [r3, #0]
	bool flag = false;
 8000a04:	2200      	movs	r2, #0
	if(evt_queue.tail != evt_queue.head)
 8000a06:	428d      	cmp	r5, r1
 8000a08:	d00d      	beq.n	8000a26 <Evt_DeQueue+0x32>
	{
		// copy event bytes into the buffer
		for(i = 0; i < EVT_QWIDTH; i++)
		{
			event[i] = evt_queue.buff[evt_queue.tail][i];
 8000a0a:	7819      	ldrb	r1, [r3, #0]
 8000a0c:	0109      	lsls	r1, r1, #4
 8000a0e:	1861      	adds	r1, r4, r1
 8000a10:	5c89      	ldrb	r1, [r1, r2]
 8000a12:	5481      	strb	r1, [r0, r2]
 8000a14:	3201      	adds	r2, #1
		for(i = 0; i < EVT_QWIDTH; i++)
 8000a16:	2a10      	cmp	r2, #16
 8000a18:	d1f7      	bne.n	8000a0a <Evt_DeQueue+0x16>
		}
		// move to the next position
		evt_queue.tail = ADVANCE_QPTR(evt_queue.tail);
 8000a1a:	2107      	movs	r1, #7
 8000a1c:	781a      	ldrb	r2, [r3, #0]
 8000a1e:	3201      	adds	r2, #1
 8000a20:	400a      	ands	r2, r1
 8000a22:	701a      	strb	r2, [r3, #0]
		// set flag
		flag = true;
 8000a24:	2201      	movs	r2, #1
	// enable all timers
	//UsrTimer_Enable(true);

	// return with the flag
	return flag;
}
 8000a26:	0010      	movs	r0, r2
 8000a28:	bd30      	pop	{r4, r5, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	20000570 	.word	0x20000570

08000a30 <Evt_InitQueue>:
 * the data in the queue.
 */
void Evt_InitQueue(void)
{
	// clear queue by resetting the pointers
	evt_queue.head = evt_queue.tail = 0;
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <Evt_InitQueue+0x10>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	0019      	movs	r1, r3
 8000a36:	3380      	adds	r3, #128	; 0x80
 8000a38:	3181      	adds	r1, #129	; 0x81
 8000a3a:	700a      	strb	r2, [r1, #0]
 8000a3c:	701a      	strb	r2, [r3, #0]
}
 8000a3e:	4770      	bx	lr
 8000a40:	20000570 	.word	0x20000570

08000a44 <KeyboardEvent>:
	KeyboardEvent();
}

// Eventos Teclado
void KeyboardEvent(void)
{
 8000a44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t event[EVT_QWIDTH];
	//const char* teclas[] = {"KEY-DOWN", "KEY-UP", "KEY-ENTER", "KEY-ESC", "KEY-ROTARY", "KEY-USER"};

	// check event queue
	if(Evt_DeQueue(event)) {
 8000a46:	4668      	mov	r0, sp
 8000a48:	f7ff ffd4 	bl	80009f4 <Evt_DeQueue>
					//logI("\r\n --> Switch to click mode.");
				}
				break;
		}
	}
}
 8000a4c:	b005      	add	sp, #20
 8000a4e:	bd00      	pop	{pc}

08000a50 <ButtonEvent>:
{
 8000a50:	b510      	push	{r4, lr}
	KeyboardEvent();
 8000a52:	f7ff fff7 	bl	8000a44 <KeyboardEvent>
}
 8000a56:	bd10      	pop	{r4, pc}

08000a58 <fs_size>:
 * @param size pointer to a variable to store the size
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
static lv_fs_res_t fs_size (lv_fs_drv_t * drv, void * file_p, uint32_t * size_p)
{
	(*size_p) = f_size(((file_t *)file_p));
 8000a58:	68cb      	ldr	r3, [r1, #12]
    return LV_FS_RES_OK;
}
 8000a5a:	2000      	movs	r0, #0
	(*size_p) = f_size(((file_t *)file_p));
 8000a5c:	6013      	str	r3, [r2, #0]
}
 8000a5e:	4770      	bx	lr

08000a60 <fs_tell>:
 * @return LV_FS_RES_OK: no error, the file is read
 *         any error from lv_fs_res_t enum
 */
static lv_fs_res_t fs_tell (lv_fs_drv_t * drv, void * file_p, uint32_t * pos_p)
{
	*pos_p = f_tell(((file_t *)file_p));
 8000a60:	698b      	ldr	r3, [r1, #24]
    return LV_FS_RES_OK;
}
 8000a62:	2000      	movs	r0, #0
	*pos_p = f_tell(((file_t *)file_p));
 8000a64:	6013      	str	r3, [r2, #0]
}
 8000a66:	4770      	bx	lr

08000a68 <fs_remove>:
    lv_fs_res_t res = LV_FS_RES_NOT_IMP;

    /* Add your code here*/

    return res;
}
 8000a68:	2009      	movs	r0, #9
 8000a6a:	4770      	bx	lr

08000a6c <fs_free>:
    lv_fs_res_t res = LV_FS_RES_NOT_IMP;

    /* Add your code here*/

    return res;
}
 8000a6c:	2009      	movs	r0, #9
 8000a6e:	4770      	bx	lr

08000a70 <fs_dir_read>:
 */
static lv_fs_res_t fs_dir_read (lv_fs_drv_t * drv, void * dir_p, char *fn)
{
	FRESULT res;
	FILINFO fno;
	fn[0] = '\0';
 8000a70:	2300      	movs	r3, #0
{
 8000a72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a74:	000d      	movs	r5, r1
 8000a76:	0014      	movs	r4, r2

    do {
    	res = f_readdir(dir_p, &fno);
    	if(res != FR_OK) return LV_FS_RES_UNKNOWN;

		if(fno.fattrib & AM_DIR) {
 8000a78:	2610      	movs	r6, #16
			fn[0] = '/';
 8000a7a:	272f      	movs	r7, #47	; 0x2f
{
 8000a7c:	b087      	sub	sp, #28
	fn[0] = '\0';
 8000a7e:	7013      	strb	r3, [r2, #0]
    	res = f_readdir(dir_p, &fno);
 8000a80:	4669      	mov	r1, sp
 8000a82:	0028      	movs	r0, r5
 8000a84:	f005 fd39 	bl	80064fa <f_readdir>
    	if(res != FR_OK) return LV_FS_RES_UNKNOWN;
 8000a88:	2800      	cmp	r0, #0
 8000a8a:	d11e      	bne.n	8000aca <fs_dir_read+0x5a>
		if(fno.fattrib & AM_DIR) {
 8000a8c:	466b      	mov	r3, sp
 8000a8e:	7a1b      	ldrb	r3, [r3, #8]
 8000a90:	4233      	tst	r3, r6
 8000a92:	d015      	beq.n	8000ac0 <fs_dir_read+0x50>
			strcpy(&fn[1], fno.fname);
 8000a94:	2309      	movs	r3, #9
 8000a96:	446b      	add	r3, sp
 8000a98:	0019      	movs	r1, r3
			fn[0] = '/';
 8000a9a:	7027      	strb	r7, [r4, #0]
			strcpy(&fn[1], fno.fname);
 8000a9c:	1c60      	adds	r0, r4, #1
		}
		else strcpy(fn, fno.fname);
 8000a9e:	f00d f895 	bl	800dbcc <strcpy>

    } while(strcmp(fn, "/.") == 0 || strcmp(fn, "/..") == 0);
 8000aa2:	490b      	ldr	r1, [pc, #44]	; (8000ad0 <fs_dir_read+0x60>)
 8000aa4:	0020      	movs	r0, r4
 8000aa6:	f7ff fb2b 	bl	8000100 <strcmp>
 8000aaa:	2800      	cmp	r0, #0
 8000aac:	d0e8      	beq.n	8000a80 <fs_dir_read+0x10>
 8000aae:	4909      	ldr	r1, [pc, #36]	; (8000ad4 <fs_dir_read+0x64>)
 8000ab0:	0020      	movs	r0, r4
 8000ab2:	f7ff fb25 	bl	8000100 <strcmp>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	d0e2      	beq.n	8000a80 <fs_dir_read+0x10>

    return LV_FS_RES_OK;
 8000aba:	2000      	movs	r0, #0
}
 8000abc:	b007      	add	sp, #28
 8000abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else strcpy(fn, fno.fname);
 8000ac0:	2309      	movs	r3, #9
 8000ac2:	446b      	add	r3, sp
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	0020      	movs	r0, r4
 8000ac8:	e7e9      	b.n	8000a9e <fs_dir_read+0x2e>
    	if(res != FR_OK) return LV_FS_RES_UNKNOWN;
 8000aca:	200c      	movs	r0, #12
 8000acc:	e7f6      	b.n	8000abc <fs_dir_read+0x4c>
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	0800de2e 	.word	0x0800de2e
 8000ad4:	0800de31 	.word	0x0800de31

08000ad8 <fs_dir_open>:
{
 8000ad8:	0008      	movs	r0, r1
 8000ada:	b510      	push	{r4, lr}
    FRESULT res = f_opendir(dir_p, path);
 8000adc:	0011      	movs	r1, r2
 8000ade:	f005 fcb3 	bl	8006448 <f_opendir>
    if(res == FR_OK) return LV_FS_RES_OK;
 8000ae2:	1e03      	subs	r3, r0, #0
 8000ae4:	d000      	beq.n	8000ae8 <fs_dir_open+0x10>
    else return LV_FS_RES_UNKNOWN;
 8000ae6:	230c      	movs	r3, #12
}
 8000ae8:	0018      	movs	r0, r3
 8000aea:	bd10      	pop	{r4, pc}

08000aec <fs_dir_close>:
 * @param drv pointer to a driver where this function belongs
 * @param dir_p pointer to an initialized 'fs_read_dir_t' variable
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
static lv_fs_res_t fs_dir_close (lv_fs_drv_t * drv, void * dir_p)
{
 8000aec:	b510      	push	{r4, lr}
	f_closedir(dir_p);
 8000aee:	0008      	movs	r0, r1
 8000af0:	f005 fcef 	bl	80064d2 <f_closedir>
    return LV_FS_RES_OK;
}
 8000af4:	2000      	movs	r0, #0
 8000af6:	bd10      	pop	{r4, pc}

08000af8 <fs_trunc>:
{
 8000af8:	b510      	push	{r4, lr}
 8000afa:	000c      	movs	r4, r1
    f_sync(file_p);           /*If not syncronized fclose can write the truncated part*/
 8000afc:	0008      	movs	r0, r1
 8000afe:	f005 fb2a 	bl	8006156 <f_sync>
    f_truncate(file_p);
 8000b02:	0020      	movs	r0, r4
 8000b04:	f005 fd1c 	bl	8006540 <f_truncate>
}
 8000b08:	2000      	movs	r0, #0
 8000b0a:	bd10      	pop	{r4, pc}

08000b0c <fs_rename>:
{
 8000b0c:	0008      	movs	r0, r1
 8000b0e:	b510      	push	{r4, lr}
    FRESULT res = f_rename(oldname, newname);
 8000b10:	0011      	movs	r1, r2
 8000b12:	f005 fd67 	bl	80065e4 <f_rename>
    if(res == FR_OK) return LV_FS_RES_OK;
 8000b16:	1e03      	subs	r3, r0, #0
 8000b18:	d000      	beq.n	8000b1c <fs_rename+0x10>
    else return LV_FS_RES_UNKNOWN;
 8000b1a:	230c      	movs	r3, #12
}
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	bd10      	pop	{r4, pc}

08000b20 <fs_seek>:
{
 8000b20:	b510      	push	{r4, lr}
 8000b22:	0008      	movs	r0, r1
    f_lseek(file_p, pos);
 8000b24:	0011      	movs	r1, r2
 8000b26:	f005 fb70 	bl	800620a <f_lseek>
}
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	bd10      	pop	{r4, pc}

08000b2e <fs_write>:
{
 8000b2e:	b510      	push	{r4, lr}
 8000b30:	0008      	movs	r0, r1
 8000b32:	0011      	movs	r1, r2
 8000b34:	001a      	movs	r2, r3
	FRESULT res = f_write(file_p, buf, btw, (UINT*)bw);
 8000b36:	9b02      	ldr	r3, [sp, #8]
 8000b38:	f005 fa3c 	bl	8005fb4 <f_write>
    if(res == FR_OK) return LV_FS_RES_OK;
 8000b3c:	1e03      	subs	r3, r0, #0
 8000b3e:	d000      	beq.n	8000b42 <fs_write+0x14>
    else return LV_FS_RES_UNKNOWN;
 8000b40:	230c      	movs	r3, #12
}
 8000b42:	0018      	movs	r0, r3
 8000b44:	bd10      	pop	{r4, pc}

08000b46 <fs_read>:
{
 8000b46:	b510      	push	{r4, lr}
 8000b48:	0008      	movs	r0, r1
 8000b4a:	0011      	movs	r1, r2
 8000b4c:	001a      	movs	r2, r3
    FRESULT res = f_read(file_p, buf, btr, (UINT*)br);
 8000b4e:	9b02      	ldr	r3, [sp, #8]
 8000b50:	f005 f97a 	bl	8005e48 <f_read>
    if(res == FR_OK) return LV_FS_RES_OK;
 8000b54:	1e03      	subs	r3, r0, #0
 8000b56:	d000      	beq.n	8000b5a <fs_read+0x14>
    else return LV_FS_RES_UNKNOWN;
 8000b58:	230c      	movs	r3, #12
}
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	bd10      	pop	{r4, pc}

08000b5e <fs_close>:
{
 8000b5e:	b510      	push	{r4, lr}
    f_close(file_p);
 8000b60:	0008      	movs	r0, r1
 8000b62:	f005 fb3f 	bl	80061e4 <f_close>
}
 8000b66:	2000      	movs	r0, #0
 8000b68:	bd10      	pop	{r4, pc}

08000b6a <fs_open>:
{
 8000b6a:	b570      	push	{r4, r5, r6, lr}
 8000b6c:	000d      	movs	r5, r1
 8000b6e:	0011      	movs	r1, r2
    if(mode == LV_FS_MODE_WR) flags = FA_WRITE | FA_OPEN_ALWAYS;
 8000b70:	2212      	movs	r2, #18
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d006      	beq.n	8000b84 <fs_open+0x1a>
    else if(mode == LV_FS_MODE_RD) flags = FA_READ;
 8000b76:	3a11      	subs	r2, #17
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d003      	beq.n	8000b84 <fs_open+0x1a>
    uint8_t flags = 0;
 8000b7c:	2200      	movs	r2, #0
    else if(mode == (LV_FS_MODE_WR | LV_FS_MODE_RD)) flags = FA_READ | FA_WRITE | FA_OPEN_ALWAYS;
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d100      	bne.n	8000b84 <fs_open+0x1a>
 8000b82:	3213      	adds	r2, #19
    FRESULT res = f_open(file_p, path, flags);
 8000b84:	0028      	movs	r0, r5
 8000b86:	f005 f85b 	bl	8005c40 <f_open>
 8000b8a:	0004      	movs	r4, r0
    	return LV_FS_RES_UNKNOWN;
 8000b8c:	200c      	movs	r0, #12
    if(res == FR_OK) {
 8000b8e:	2c00      	cmp	r4, #0
 8000b90:	d104      	bne.n	8000b9c <fs_open+0x32>
    	f_lseek(file_p, 0);
 8000b92:	0021      	movs	r1, r4
 8000b94:	0028      	movs	r0, r5
 8000b96:	f005 fb38 	bl	800620a <f_lseek>
    	return LV_FS_RES_OK;
 8000b9a:	0020      	movs	r0, r4
}
 8000b9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000ba0 <lv_fs_if_fatfs_init>:
{
 8000ba0:	b510      	push	{r4, lr}
 8000ba2:	b092      	sub	sp, #72	; 0x48
	lv_fs_drv_init(&fs_drv);
 8000ba4:	ac01      	add	r4, sp, #4
 8000ba6:	0020      	movs	r0, r4
 8000ba8:	f00b fd27 	bl	800c5fa <lv_fs_drv_init>
    fs_drv.file_size = sizeof(file_t);
 8000bac:	238c      	movs	r3, #140	; 0x8c
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	8063      	strh	r3, [r4, #2]
    fs_drv.letter = 'F';
 8000bb2:	3beb      	subs	r3, #235	; 0xeb
 8000bb4:	3bff      	subs	r3, #255	; 0xff
 8000bb6:	7023      	strb	r3, [r4, #0]
    fs_drv.open_cb = fs_open;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <lv_fs_if_fatfs_init+0x60>)
    lv_fs_drv_register(&fs_drv);
 8000bba:	0020      	movs	r0, r4
    fs_drv.open_cb = fs_open;
 8000bbc:	60e3      	str	r3, [r4, #12]
    fs_drv.close_cb = fs_close;
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <lv_fs_if_fatfs_init+0x64>)
 8000bc0:	6123      	str	r3, [r4, #16]
    fs_drv.read_cb = fs_read;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <lv_fs_if_fatfs_init+0x68>)
 8000bc4:	61a3      	str	r3, [r4, #24]
    fs_drv.write_cb = fs_write;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <lv_fs_if_fatfs_init+0x6c>)
 8000bc8:	61e3      	str	r3, [r4, #28]
    fs_drv.seek_cb = fs_seek;
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <lv_fs_if_fatfs_init+0x70>)
 8000bcc:	6223      	str	r3, [r4, #32]
    fs_drv.tell_cb = fs_tell;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <lv_fs_if_fatfs_init+0x74>)
 8000bd0:	6263      	str	r3, [r4, #36]	; 0x24
    fs_drv.free_space_cb = fs_free;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <lv_fs_if_fatfs_init+0x78>)
 8000bd4:	6363      	str	r3, [r4, #52]	; 0x34
    fs_drv.size_cb = fs_size;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <lv_fs_if_fatfs_init+0x7c>)
 8000bd8:	62e3      	str	r3, [r4, #44]	; 0x2c
    fs_drv.remove_cb = fs_remove;
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <lv_fs_if_fatfs_init+0x80>)
 8000bdc:	6163      	str	r3, [r4, #20]
    fs_drv.rename_cb = fs_rename;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <lv_fs_if_fatfs_init+0x84>)
 8000be0:	6323      	str	r3, [r4, #48]	; 0x30
    fs_drv.trunc_cb = fs_trunc;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <lv_fs_if_fatfs_init+0x88>)
 8000be4:	62a3      	str	r3, [r4, #40]	; 0x28
    fs_drv.rddir_size = sizeof(dir_t);
 8000be6:	2330      	movs	r3, #48	; 0x30
 8000be8:	80a3      	strh	r3, [r4, #4]
    fs_drv.dir_close_cb = fs_dir_close;
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <lv_fs_if_fatfs_init+0x8c>)
 8000bec:	6423      	str	r3, [r4, #64]	; 0x40
    fs_drv.dir_open_cb = fs_dir_open;
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <lv_fs_if_fatfs_init+0x90>)
 8000bf0:	63a3      	str	r3, [r4, #56]	; 0x38
    fs_drv.dir_read_cb = fs_dir_read;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <lv_fs_if_fatfs_init+0x94>)
 8000bf4:	63e3      	str	r3, [r4, #60]	; 0x3c
    lv_fs_drv_register(&fs_drv);
 8000bf6:	f00b fd07 	bl	800c608 <lv_fs_drv_register>
}
 8000bfa:	b012      	add	sp, #72	; 0x48
 8000bfc:	bd10      	pop	{r4, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	08000b6b 	.word	0x08000b6b
 8000c04:	08000b5f 	.word	0x08000b5f
 8000c08:	08000b47 	.word	0x08000b47
 8000c0c:	08000b2f 	.word	0x08000b2f
 8000c10:	08000b21 	.word	0x08000b21
 8000c14:	08000a61 	.word	0x08000a61
 8000c18:	08000a6d 	.word	0x08000a6d
 8000c1c:	08000a59 	.word	0x08000a59
 8000c20:	08000a69 	.word	0x08000a69
 8000c24:	08000b0d 	.word	0x08000b0d
 8000c28:	08000af9 	.word	0x08000af9
 8000c2c:	08000aed 	.word	0x08000aed
 8000c30:	08000ad9 	.word	0x08000ad9
 8000c34:	08000a71 	.word	0x08000a71

08000c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c38:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c3a:	2610      	movs	r6, #16
{
 8000c3c:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3e:	2234      	movs	r2, #52	; 0x34
 8000c40:	2100      	movs	r1, #0
 8000c42:	a80b      	add	r0, sp, #44	; 0x2c
 8000c44:	f00c ff97 	bl	800db76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c48:	0032      	movs	r2, r6
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4668      	mov	r0, sp
 8000c4e:	f00c ff92 	bl	800db76 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c52:	221c      	movs	r2, #28
 8000c54:	2100      	movs	r1, #0
 8000c56:	a804      	add	r0, sp, #16
 8000c58:	f00c ff8d 	bl	800db76 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c5c:	2080      	movs	r0, #128	; 0x80
 8000c5e:	0080      	lsls	r0, r0, #2
 8000c60:	f001 ff04 	bl	8002a6c <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c64:	2118      	movs	r1, #24
 8000c66:	4a1b      	ldr	r2, [pc, #108]	; (8000cd4 <SystemClock_Config+0x9c>)
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c68:	2502      	movs	r5, #2
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c6a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c6c:	2400      	movs	r4, #0
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c6e:	438b      	bics	r3, r1
 8000c70:	65d3      	str	r3, [r2, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000c72:	2305      	movs	r3, #5
 8000c74:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c76:	23a0      	movs	r3, #160	; 0xa0
 8000c78:	02db      	lsls	r3, r3, #11
 8000c7a:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c80:	195b      	adds	r3, r3, r5
 8000c82:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 16;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c84:	2380      	movs	r3, #128	; 0x80
 8000c86:	029b      	lsls	r3, r3, #10
 8000c88:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c8a:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8c:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c8e:	059b      	lsls	r3, r3, #22
 8000c90:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c92:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c94:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000c96:	9615      	str	r6, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c98:	f001 ff12 	bl	8002ac0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c9c:	2307      	movs	r3, #7
 8000c9e:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ca0:	2380      	movs	r3, #128	; 0x80

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ca2:	0029      	movs	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ca4:	01db      	lsls	r3, r3, #7
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ca6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ca8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000caa:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cac:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cae:	f002 f96d 	bl	8002f8c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <SystemClock_Config+0xa0>)
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb4:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8000cb6:	9304      	str	r3, [sp, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cbe:	9406      	str	r4, [sp, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cc0:	9407      	str	r4, [sp, #28]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000cc2:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc4:	f002 fa64 	bl	8003190 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 8000cc8:	f002 fa3c 	bl	8003144 <HAL_RCC_EnableCSS>
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableLSECSS();
 8000ccc:	f002 fa44 	bl	8003158 <HAL_RCC_EnableLSECSS>
}
 8000cd0:	b018      	add	sp, #96	; 0x60
 8000cd2:	bd70      	pop	{r4, r5, r6, pc}
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	00024042 	.word	0x00024042

08000cdc <main>:
{
 8000cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cde:	b097      	sub	sp, #92	; 0x5c
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	ad0c      	add	r5, sp, #48	; 0x30
  HAL_Init();
 8000ce2:	f001 fa25 	bl	8002130 <HAL_Init>
  SystemClock_Config();
 8000ce6:	f7ff ffa7 	bl	8000c38 <SystemClock_Config>
  BSP_SD_Init();
 8000cea:	f000 fb49 	bl	8001380 <BSP_SD_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	2214      	movs	r2, #20
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	0028      	movs	r0, r5
 8000cf4:	f00c ff3f 	bl	800db76 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf8:	2104      	movs	r1, #4
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cfa:	2620      	movs	r6, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfc:	4bfd      	ldr	r3, [pc, #1012]	; (80010f4 <main+0x418>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 8000cfe:	48fe      	ldr	r0, [pc, #1016]	; (80010f8 <main+0x41c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FLASH_CS_Pin|LCD_RST_Pin|LCD_CS_Pin|LCD_WR_Pin 
 8000d02:	4ffe      	ldr	r7, [pc, #1016]	; (80010fc <main+0x420>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d04:	430a      	orrs	r2, r1
 8000d06:	635a      	str	r2, [r3, #52]	; 0x34
 8000d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : SW_USER_Pin */
  GPIO_InitStruct.Pin = SW_USER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0c:	400a      	ands	r2, r1
 8000d0e:	9200      	str	r2, [sp, #0]
 8000d10:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	3903      	subs	r1, #3
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d16:	4332      	orrs	r2, r6
 8000d18:	635a      	str	r2, [r3, #52]	; 0x34
 8000d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d1c:	4032      	ands	r2, r6
 8000d1e:	9201      	str	r2, [sp, #4]
 8000d20:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d24:	430a      	orrs	r2, r1
 8000d26:	635a      	str	r2, [r3, #52]	; 0x34
 8000d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d2a:	400a      	ands	r2, r1
 8000d2c:	9202      	str	r2, [sp, #8]
 8000d2e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d32:	3101      	adds	r1, #1
 8000d34:	430a      	orrs	r2, r1
 8000d36:	635a      	str	r2, [r3, #52]	; 0x34
 8000d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d3a:	400a      	ands	r2, r1
 8000d3c:	9203      	str	r2, [sp, #12]
 8000d3e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d42:	3106      	adds	r1, #6
 8000d44:	430a      	orrs	r2, r1
 8000d46:	635a      	str	r2, [r3, #52]	; 0x34
 8000d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOC, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 8000d4a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4c:	400b      	ands	r3, r1
 8000d4e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 8000d50:	31f7      	adds	r1, #247	; 0xf7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d52:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 8000d54:	f001 fddc 	bl	8002910 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d58:	20a0      	movs	r0, #160	; 0xa0
 8000d5a:	0031      	movs	r1, r6
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	05c0      	lsls	r0, r0, #23
 8000d60:	f001 fdd6 	bl	8002910 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, FLASH_CS_Pin|LCD_RST_Pin|LCD_CS_Pin|LCD_WR_Pin 
 8000d64:	0039      	movs	r1, r7
 8000d66:	2201      	movs	r2, #1
 8000d68:	48e5      	ldr	r0, [pc, #916]	; (8001100 <main+0x424>)
 8000d6a:	f001 fdd1 	bl	8002910 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000d6e:	2180      	movs	r1, #128	; 0x80
 8000d70:	20a0      	movs	r0, #160	; 0xa0
 8000d72:	2201      	movs	r2, #1
 8000d74:	00c9      	lsls	r1, r1, #3
 8000d76:	05c0      	lsls	r0, r0, #23
 8000d78:	f001 fdca 	bl	8002910 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SW_USER_Pin;
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	019b      	lsls	r3, r3, #6
 8000d80:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d82:	2301      	movs	r3, #1
  HAL_GPIO_Init(SW_USER_GPIO_Port, &GPIO_InitStruct);
 8000d84:	0029      	movs	r1, r5
 8000d86:	48dc      	ldr	r0, [pc, #880]	; (80010f8 <main+0x41c>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d88:	606c      	str	r4, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8a:	60ab      	str	r3, [r5, #8]
  HAL_GPIO_Init(SW_USER_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f001 fc9c 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D0_Pin LCD_D1_Pin LCD_D2_Pin LCD_D3_Pin 
                           LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 8000d90:	23ff      	movs	r3, #255	; 0xff
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d92:	0029      	movs	r1, r5
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 8000d94:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d96:	48d8      	ldr	r0, [pc, #864]	; (80010f8 <main+0x41c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d98:	3bfe      	subs	r3, #254	; 0xfe
 8000d9a:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da0:	f001 fc92 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = LED_Pin|SD_CS_Pin;
 8000da4:	2384      	movs	r3, #132	; 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = LED_Pin|SD_CS_Pin;
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	0029      	movs	r1, r5
 8000db0:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f001 fc86 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_DN_Pin KEY_UP_Pin KEY_ENTER_Pin KEY_ESC_Pin */
  GPIO_InitStruct.Pin = KEY_DN_Pin|KEY_UP_Pin|KEY_ENTER_Pin|KEY_ESC_Pin;
 8000dbc:	230f      	movs	r3, #15
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbe:	0029      	movs	r1, r5
  GPIO_InitStruct.Pin = KEY_DN_Pin|KEY_UP_Pin|KEY_ENTER_Pin|KEY_ESC_Pin;
 8000dc0:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc2:	48d0      	ldr	r0, [pc, #832]	; (8001104 <main+0x428>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc4:	3b0e      	subs	r3, #14
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc6:	606c      	str	r4, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc8:	60ab      	str	r3, [r5, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	f001 fc7d 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	015b      	lsls	r3, r3, #5
 8000dd2:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dd4:	4bcc      	ldr	r3, [pc, #816]	; (8001108 <main+0x42c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd6:	0029      	movs	r1, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dd8:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dda:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ddc:	48c9      	ldr	r0, [pc, #804]	; (8001104 <main+0x428>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dde:	60ab      	str	r3, [r5, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de0:	f001 fc72 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_B_Pin ENC_A_Pin */
  GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 8000de4:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 8000de8:	009b      	lsls	r3, r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dea:	0029      	movs	r1, r5
 8000dec:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dee:	606c      	str	r4, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 8000df2:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df4:	f001 fc68 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_CS_Pin LCD_RST_Pin LCD_CS_Pin LCD_WR_Pin 
                           LCD_RD_Pin LCD_DC_Pin TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|LCD_RST_Pin|LCD_CS_Pin|LCD_WR_Pin 
                          |LCD_RD_Pin|LCD_DC_Pin|TOUCH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df8:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dfa:	0029      	movs	r1, r5
 8000dfc:	48c0      	ldr	r0, [pc, #768]	; (8001100 <main+0x424>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfe:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	60ec      	str	r4, [r5, #12]
  GPIO_InitStruct.Pin = FLASH_CS_Pin|LCD_RST_Pin|LCD_CS_Pin|LCD_WR_Pin 
 8000e04:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e06:	f001 fc5f 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e0a:	2301      	movs	r3, #1
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	0029      	movs	r1, r5
 8000e0e:	48bc      	ldr	r0, [pc, #752]	; (8001100 <main+0x424>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e10:	606c      	str	r4, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e12:	60ab      	str	r3, [r5, #8]
  GPIO_InitStruct.Pin = SW_Pin;
 8000e14:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f001 fc57 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_C_Pin ENC_D_Pin */
  GPIO_InitStruct.Pin = ENC_C_Pin|ENC_D_Pin;
 8000e1a:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	0029      	movs	r1, r5
 8000e1e:	48b9      	ldr	r0, [pc, #740]	; (8001104 <main+0x428>)
  GPIO_InitStruct.Pin = ENC_C_Pin|ENC_D_Pin;
 8000e20:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e22:	606c      	str	r4, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	60ac      	str	r4, [r5, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e26:	f001 fc4f 	bl	80026c8 <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	0021      	movs	r1, r4
 8000e2e:	0028      	movs	r0, r5
 8000e30:	f00c fea1 	bl	800db76 <memset>
  hadc1.Instance = ADC1;
 8000e34:	4eb5      	ldr	r6, [pc, #724]	; (800110c <main+0x430>)
 8000e36:	4bb6      	ldr	r3, [pc, #728]	; (8001110 <main+0x434>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e38:	2780      	movs	r7, #128	; 0x80
  hadc1.Instance = ADC1;
 8000e3a:	6033      	str	r3, [r6, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e3c:	2380      	movs	r3, #128	; 0x80
 8000e3e:	039b      	lsls	r3, r3, #14
 8000e40:	6133      	str	r3, [r6, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e42:	2304      	movs	r3, #4
 8000e44:	6173      	str	r3, [r6, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e46:	3b03      	subs	r3, #3
 8000e48:	76b3      	strb	r3, [r6, #26]
  hadc1.Init.NbrOfConversion = 2;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	61f3      	str	r3, [r6, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e4e:	1c73      	adds	r3, r6, #1
 8000e50:	77dc      	strb	r4, [r3, #31]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e52:	0033      	movs	r3, r6
 8000e54:	332c      	adds	r3, #44	; 0x2c
 8000e56:	701c      	strb	r4, [r3, #0]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000e58:	2307      	movs	r3, #7
 8000e5a:	6373      	str	r3, [r6, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	63b3      	str	r3, [r6, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000e60:	0033      	movs	r3, r6
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e62:	05ff      	lsls	r7, r7, #23
  hadc1.Init.OversamplingMode = DISABLE;
 8000e64:	333c      	adds	r3, #60	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e66:	0030      	movs	r0, r6
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e68:	6077      	str	r7, [r6, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e6a:	60b4      	str	r4, [r6, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6c:	60f4      	str	r4, [r6, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e6e:	7634      	strb	r4, [r6, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000e70:	7674      	strb	r4, [r6, #25]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e72:	6274      	str	r4, [r6, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e74:	62b4      	str	r4, [r6, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e76:	6334      	str	r4, [r6, #48]	; 0x30
  hadc1.Init.OversamplingMode = DISABLE;
 8000e78:	701c      	strb	r4, [r3, #0]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000e7a:	64f4      	str	r4, [r6, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e7c:	f001 f994 	bl	80021a8 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_0;
 8000e80:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e82:	0029      	movs	r1, r5
 8000e84:	0030      	movs	r0, r6
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e86:	606c      	str	r4, [r5, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000e88:	60ac      	str	r4, [r5, #8]
  sConfig.Channel = ADC_CHANNEL_0;
 8000e8a:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e8c:	f001 fac4 	bl	8002418 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 8000e90:	4ba0      	ldr	r3, [pc, #640]	; (8001114 <main+0x438>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e92:	0029      	movs	r1, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8000e94:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e96:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e98:	0030      	movs	r0, r6
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e9a:	606b      	str	r3, [r5, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e9c:	f001 fabc 	bl	8002418 <HAL_ADC_ConfigChannel>
  hi2c1.Instance = I2C1;
 8000ea0:	4e9d      	ldr	r6, [pc, #628]	; (8001118 <main+0x43c>)
 8000ea2:	4b9e      	ldr	r3, [pc, #632]	; (800111c <main+0x440>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ea4:	0030      	movs	r0, r6
  hi2c1.Instance = I2C1;
 8000ea6:	6033      	str	r3, [r6, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8000ea8:	4b9d      	ldr	r3, [pc, #628]	; (8001120 <main+0x444>)
  hi2c1.Init.OwnAddress1 = 0;
 8000eaa:	60b4      	str	r4, [r6, #8]
  hi2c1.Init.Timing = 0x00300F38;
 8000eac:	6073      	str	r3, [r6, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eae:	2301      	movs	r3, #1
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eb0:	6134      	str	r4, [r6, #16]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eb2:	60f3      	str	r3, [r6, #12]
  hi2c1.Init.OwnAddress2 = 0;
 8000eb4:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000eb6:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eb8:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eba:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ebc:	f001 fd36 	bl	800292c <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ec0:	0021      	movs	r1, r4
 8000ec2:	0030      	movs	r0, r6
 8000ec4:	f001 fd88 	bl	80029d8 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ec8:	0021      	movs	r1, r4
 8000eca:	0030      	movs	r0, r6
 8000ecc:	f001 fdaa 	bl	8002a24 <HAL_I2CEx_ConfigDigitalFilter>
  hrtc.Instance = RTC;
 8000ed0:	4894      	ldr	r0, [pc, #592]	; (8001124 <main+0x448>)
 8000ed2:	4b95      	ldr	r3, [pc, #596]	; (8001128 <main+0x44c>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ed4:	6084      	str	r4, [r0, #8]
  hrtc.Instance = RTC;
 8000ed6:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = 127;
 8000ed8:	237f      	movs	r3, #127	; 0x7f
 8000eda:	60c3      	str	r3, [r0, #12]
  hrtc.Init.SynchPrediv = 255;
 8000edc:	3380      	adds	r3, #128	; 0x80
 8000ede:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ee0:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ee2:	6184      	str	r4, [r0, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ee4:	61c4      	str	r4, [r0, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ee6:	6207      	str	r7, [r0, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000ee8:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000eea:	f002 fa63 	bl	80033b4 <HAL_RTC_Init>
  hspi1.Instance = SPI1;
 8000eee:	488f      	ldr	r0, [pc, #572]	; (800112c <main+0x450>)
 8000ef0:	4b8f      	ldr	r3, [pc, #572]	; (8001130 <main+0x454>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ef2:	27e0      	movs	r7, #224	; 0xe0
  hspi1.Instance = SPI1;
 8000ef4:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ef6:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ef8:	2680      	movs	r6, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	6043      	str	r3, [r0, #4]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000efe:	3bfc      	subs	r3, #252	; 0xfc
 8000f00:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8000f02:	3b01      	subs	r3, #1
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f04:	00ff      	lsls	r7, r7, #3
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f06:	00b6      	lsls	r6, r6, #2
  hspi1.Init.CRCPolynomial = 7;
 8000f08:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f0a:	3301      	adds	r3, #1
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f0c:	6084      	str	r4, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f0e:	60c7      	str	r7, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f10:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f12:	6144      	str	r4, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f14:	6186      	str	r6, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f16:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f18:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f1a:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f1c:	6304      	str	r4, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f1e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f20:	f002 fb1a 	bl	8003558 <HAL_SPI_Init>
  hspi2.Instance = SPI2;
 8000f24:	4883      	ldr	r0, [pc, #524]	; (8001134 <main+0x458>)
 8000f26:	4b84      	ldr	r3, [pc, #528]	; (8001138 <main+0x45c>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f28:	6084      	str	r4, [r0, #8]
  hspi2.Instance = SPI2;
 8000f2a:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f2c:	2382      	movs	r3, #130	; 0x82
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	6043      	str	r3, [r0, #4]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f32:	3bfc      	subs	r3, #252	; 0xfc
 8000f34:	61c3      	str	r3, [r0, #28]
  hspi2.Init.CRCPolynomial = 7;
 8000f36:	3b01      	subs	r3, #1
 8000f38:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	6343      	str	r3, [r0, #52]	; 0x34
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f3e:	60c7      	str	r7, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f40:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f42:	6144      	str	r4, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f44:	6186      	str	r6, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f46:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f48:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f4a:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f4c:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f4e:	f002 fb03 	bl	8003558 <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f52:	0021      	movs	r1, r4
 8000f54:	2210      	movs	r2, #16
 8000f56:	a808      	add	r0, sp, #32
 8000f58:	f00c fe0d 	bl	800db76 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5c:	0021      	movs	r1, r4
 8000f5e:	220c      	movs	r2, #12
 8000f60:	a805      	add	r0, sp, #20
 8000f62:	f00c fe08 	bl	800db76 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f66:	221c      	movs	r2, #28
 8000f68:	0021      	movs	r1, r4
 8000f6a:	0028      	movs	r0, r5
 8000f6c:	f00c fe03 	bl	800db76 <memset>
  htim3.Instance = TIM3;
 8000f70:	4f72      	ldr	r7, [pc, #456]	; (800113c <main+0x460>)
 8000f72:	4b73      	ldr	r3, [pc, #460]	; (8001140 <main+0x464>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f74:	0038      	movs	r0, r7
  htim3.Instance = TIM3;
 8000f76:	603b      	str	r3, [r7, #0]
  htim3.Init.Prescaler = 1;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	607b      	str	r3, [r7, #4]
  htim3.Init.Period = 4095;
 8000f7c:	4b71      	ldr	r3, [pc, #452]	; (8001144 <main+0x468>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7e:	60bc      	str	r4, [r7, #8]
  htim3.Init.Period = 4095;
 8000f80:	60fb      	str	r3, [r7, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f82:	613c      	str	r4, [r7, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f84:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f86:	f002 ffad 	bl	8003ee4 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8a:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f8c:	a908      	add	r1, sp, #32
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8e:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f90:	0038      	movs	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f92:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f94:	f003 f996 	bl	80042c4 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f98:	0038      	movs	r0, r7
 8000f9a:	f002 ffbe 	bl	8003f1a <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f9e:	a905      	add	r1, sp, #20
 8000fa0:	0038      	movs	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa2:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa4:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fa6:	f003 fa63 	bl	8004470 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000faa:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fac:	0022      	movs	r2, r4
 8000fae:	0029      	movs	r1, r5
 8000fb0:	0038      	movs	r0, r7
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fb2:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000fb4:	606c      	str	r4, [r5, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fb6:	60ac      	str	r4, [r5, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb8:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fba:	f003 f825 	bl	8004008 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fbe:	0029      	movs	r1, r5
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	0038      	movs	r0, r7
 8000fc4:	f003 f820 	bl	8004008 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8000fc8:	0038      	movs	r0, r7
 8000fca:	f000 fee3 	bl	8001d94 <HAL_TIM_MspPostInit>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fce:	0021      	movs	r1, r4
 8000fd0:	2210      	movs	r2, #16
 8000fd2:	0028      	movs	r0, r5
 8000fd4:	f00c fdcf 	bl	800db76 <memset>
  htim14.Instance = TIM14;
 8000fd8:	4e5b      	ldr	r6, [pc, #364]	; (8001148 <main+0x46c>)
 8000fda:	4b5c      	ldr	r3, [pc, #368]	; (800114c <main+0x470>)
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000fdc:	0030      	movs	r0, r6
  htim14.Instance = TIM14;
 8000fde:	6033      	str	r3, [r6, #0]
  htim14.Init.Prescaler = 0;
 8000fe0:	6074      	str	r4, [r6, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe2:	60b4      	str	r4, [r6, #8]
  htim14.Init.Period = 0;
 8000fe4:	60f4      	str	r4, [r6, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe6:	6134      	str	r4, [r6, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe8:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000fea:	f002 ff7b 	bl	8003ee4 <HAL_TIM_Base_Init>
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 8000fee:	0030      	movs	r0, r6
 8000ff0:	f002 ffae 	bl	8003f50 <HAL_TIM_IC_Init>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ff4:	2301      	movs	r3, #1
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ff6:	0022      	movs	r2, r4
 8000ff8:	0029      	movs	r1, r5
 8000ffa:	0030      	movs	r0, r6
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ffc:	606b      	str	r3, [r5, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ffe:	60ac      	str	r4, [r5, #8]
  sConfigIC.ICFilter = 0;
 8001000:	60ec      	str	r4, [r5, #12]
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001002:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001004:	f003 f8b4 	bl	8004170 <HAL_TIM_IC_ConfigChannel>
  huart2.Instance = USART2;
 8001008:	4e51      	ldr	r6, [pc, #324]	; (8001150 <main+0x474>)
 800100a:	4b52      	ldr	r3, [pc, #328]	; (8001154 <main+0x478>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800100c:	0030      	movs	r0, r6
  huart2.Instance = USART2;
 800100e:	6033      	str	r3, [r6, #0]
  huart2.Init.BaudRate = 115200;
 8001010:	23e1      	movs	r3, #225	; 0xe1
 8001012:	025b      	lsls	r3, r3, #9
 8001014:	6073      	str	r3, [r6, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001016:	230c      	movs	r3, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001018:	60b4      	str	r4, [r6, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800101a:	6173      	str	r3, [r6, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800101c:	60f4      	str	r4, [r6, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800101e:	6134      	str	r4, [r6, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001020:	61b4      	str	r4, [r6, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001022:	61f4      	str	r4, [r6, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001024:	6234      	str	r4, [r6, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001026:	6274      	str	r4, [r6, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001028:	62b4      	str	r4, [r6, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800102a:	f003 fd8b 	bl	8004b44 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800102e:	0021      	movs	r1, r4
 8001030:	0030      	movs	r0, r6
 8001032:	f003 fe17 	bl	8004c64 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001036:	0021      	movs	r1, r4
 8001038:	0030      	movs	r0, r6
 800103a:	f003 fe35 	bl	8004ca8 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 800103e:	0030      	movs	r0, r6
 8001040:	f003 fdf2 	bl	8004c28 <HAL_UARTEx_EnableFifoMode>
  huart3.Instance = USART3;
 8001044:	4844      	ldr	r0, [pc, #272]	; (8001158 <main+0x47c>)
 8001046:	4b45      	ldr	r3, [pc, #276]	; (800115c <main+0x480>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001048:	6084      	str	r4, [r0, #8]
  huart3.Instance = USART3;
 800104a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 800104c:	23e1      	movs	r3, #225	; 0xe1
 800104e:	025b      	lsls	r3, r3, #9
 8001050:	6043      	str	r3, [r0, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001052:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001054:	60c4      	str	r4, [r0, #12]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001056:	6143      	str	r3, [r0, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001058:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800105c:	61c4      	str	r4, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800105e:	6204      	str	r4, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001060:	6244      	str	r4, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001062:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001064:	f003 fd6e 	bl	8004b44 <HAL_UART_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8001068:	f003 fe42 	bl	8004cf0 <MX_FATFS_Init>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800106c:	0021      	movs	r1, r4
 800106e:	0038      	movs	r0, r7
 8001070:	f003 f9cc 	bl	800440c <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001074:	2104      	movs	r1, #4
 8001076:	0038      	movs	r0, r7
 8001078:	f003 f9c8 	bl	800440c <HAL_TIM_PWM_Start>
   __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 4095);			// PWM_CH1 = 4095 100% brilho
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	4a31      	ldr	r2, [pc, #196]	; (8001144 <main+0x468>)
 8001080:	635a      	str	r2, [r3, #52]	; 0x34
   __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 4095);		    // PWM_CH2 = 4095
 8001082:	639a      	str	r2, [r3, #56]	; 0x38
  ST7735_Init();
 8001084:	f7ff fa3e 	bl	8000504 <ST7735_Init>
  ST7735_Clear(0x0000);
 8001088:	0020      	movs	r0, r4
 800108a:	f7ff fafd 	bl	8000688 <ST7735_Clear>
  tft_backlight(100);
 800108e:	2064      	movs	r0, #100	; 0x64
 8001090:	f000 f8d8 	bl	8001244 <tft_backlight>
  Evt_InitQueue();
 8001094:	f7ff fccc 	bl	8000a30 <Evt_InitQueue>
  KeyboardInit(0x01);
 8001098:	2001      	movs	r0, #1
 800109a:	f7ff fba9 	bl	80007f0 <KeyboardInit>
    lv_disp_buf_init(&disp_buf, buf, NULL, LV_HOR_RES_MAX * 10);    //Initialize the display buffer
 800109e:	23c8      	movs	r3, #200	; 0xc8
 80010a0:	4f2f      	ldr	r7, [pc, #188]	; (8001160 <main+0x484>)
 80010a2:	0022      	movs	r2, r4
 80010a4:	492f      	ldr	r1, [pc, #188]	; (8001164 <main+0x488>)
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	0038      	movs	r0, r7
 80010aa:	f00a ffe7 	bl	800c07c <lv_disp_buf_init>
    lv_init();
 80010ae:	f005 fccd 	bl	8006a4c <lv_init>
    lv_disp_drv_init(&disp_drv);          //Basic initialization
 80010b2:	0028      	movs	r0, r5
 80010b4:	f00a ffc6 	bl	800c044 <lv_disp_drv_init>
    disp_drv.hor_res = 160;               //Set the horizontal resolution
 80010b8:	23a0      	movs	r3, #160	; 0xa0
 80010ba:	802b      	strh	r3, [r5, #0]
    disp_drv.ver_res = 128;               //Set the vertical resolution
 80010bc:	3b20      	subs	r3, #32
 80010be:	806b      	strh	r3, [r5, #2]
    disp_drv.flush_cb = ST7735_Flush_3;	//Set your driver function
 80010c0:	4b29      	ldr	r3, [pc, #164]	; (8001168 <main+0x48c>)
    lv_disp_drv_register(&disp_drv);      //Finally register the driver
 80010c2:	0028      	movs	r0, r5
    disp_drv.flush_cb = ST7735_Flush_3;	//Set your driver function
 80010c4:	60eb      	str	r3, [r5, #12]
    disp_drv.buffer = &disp_buf;          //Assign the buffer to teh display
 80010c6:	606f      	str	r7, [r5, #4]
    lv_disp_drv_register(&disp_drv);      //Finally register the driver
 80010c8:	f00a ffe6 	bl	800c098 <lv_disp_drv_register>
    ProcessStatus = MX_FATFS_Process();
 80010cc:	f003 fe24 	bl	8004d18 <MX_FATFS_Process>
 80010d0:	4b26      	ldr	r3, [pc, #152]	; (800116c <main+0x490>)
 80010d2:	6018      	str	r0, [r3, #0]
  lv_fs_if_fatfs_init();
 80010d4:	f7ff fd64 	bl	8000ba0 <lv_fs_if_fatfs_init>
  sprintf(buffer, "STM32G070 FatFs - INIC OK\n\r");
 80010d8:	4d25      	ldr	r5, [pc, #148]	; (8001170 <main+0x494>)
 80010da:	4926      	ldr	r1, [pc, #152]	; (8001174 <main+0x498>)
 80010dc:	0028      	movs	r0, r5
 80010de:	f00c fd75 	bl	800dbcc <strcpy>
  HAL_UART_Transmit(&huart2, (uint8_t *)&buffer, strlen(buffer), 0xFFFF);
 80010e2:	0028      	movs	r0, r5
 80010e4:	f7ff f816 	bl	8000114 <strlen>
 80010e8:	4b23      	ldr	r3, [pc, #140]	; (8001178 <main+0x49c>)
 80010ea:	b282      	uxth	r2, r0
 80010ec:	0029      	movs	r1, r5
 80010ee:	0030      	movs	r0, r6
 80010f0:	e044      	b.n	800117c <main+0x4a0>
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	40021000 	.word	0x40021000
 80010f8:	50000800 	.word	0x50000800
 80010fc:	0000025f 	.word	0x0000025f
 8001100:	50000c00 	.word	0x50000c00
 8001104:	50000400 	.word	0x50000400
 8001108:	10110000 	.word	0x10110000
 800110c:	200049f0 	.word	0x200049f0
 8001110:	40012400 	.word	0x40012400
 8001114:	04000002 	.word	0x04000002
 8001118:	200048fc 	.word	0x200048fc
 800111c:	40005400 	.word	0x40005400
 8001120:	00300f38 	.word	0x00300f38
 8001124:	20004a58 	.word	0x20004a58
 8001128:	40002800 	.word	0x40002800
 800112c:	20004a90 	.word	0x20004a90
 8001130:	40013000 	.word	0x40013000
 8001134:	2000480c 	.word	0x2000480c
 8001138:	40003800 	.word	0x40003800
 800113c:	200049b0 	.word	0x200049b0
 8001140:	40000400 	.word	0x40000400
 8001144:	00000fff 	.word	0x00000fff
 8001148:	20004b80 	.word	0x20004b80
 800114c:	40002000 	.word	0x40002000
 8001150:	20004af4 	.word	0x20004af4
 8001154:	40004400 	.word	0x40004400
 8001158:	20004870 	.word	0x20004870
 800115c:	40004800 	.word	0x40004800
 8001160:	200012e0 	.word	0x200012e0
 8001164:	200005fc 	.word	0x200005fc
 8001168:	080007cd 	.word	0x080007cd
 800116c:	200005f4 	.word	0x200005f4
 8001170:	2000127c 	.word	0x2000127c
 8001174:	0800de35 	.word	0x0800de35
 8001178:	0000ffff 	.word	0x0000ffff
 800117c:	f003 fc42 	bl	8004a04 <HAL_UART_Transmit>
  Tela_Principal = lv_obj_create(NULL, NULL);
 8001180:	0021      	movs	r1, r4
 8001182:	0020      	movs	r0, r4
 8001184:	f005 ffc8 	bl	8007118 <lv_obj_create>
  lv_style_copy(&style_fundo, &lv_style_plain_color);
 8001188:	4d1a      	ldr	r5, [pc, #104]	; (80011f4 <main+0x518>)
  Tela_Principal = lv_obj_create(NULL, NULL);
 800118a:	4e1b      	ldr	r6, [pc, #108]	; (80011f8 <main+0x51c>)
  lv_style_copy(&style_fundo, &lv_style_plain_color);
 800118c:	491b      	ldr	r1, [pc, #108]	; (80011fc <main+0x520>)
  Tela_Principal = lv_obj_create(NULL, NULL);
 800118e:	6030      	str	r0, [r6, #0]
  lv_style_copy(&style_fundo, &lv_style_plain_color);
 8001190:	0028      	movs	r0, r5
 8001192:	f006 fde1 	bl	8007d58 <lv_style_copy>
  style_fundo.body.main_color = LV_COLOR_BLACK;
 8001196:	231f      	movs	r3, #31
 8001198:	78aa      	ldrb	r2, [r5, #2]
 800119a:	4919      	ldr	r1, [pc, #100]	; (8001200 <main+0x524>)
 800119c:	439a      	bics	r2, r3
 800119e:	70aa      	strb	r2, [r5, #2]
 80011a0:	886a      	ldrh	r2, [r5, #2]
 80011a2:	400a      	ands	r2, r1
 80011a4:	806a      	strh	r2, [r5, #2]
  style_fundo.body.grad_color = LV_COLOR_BLACK;
 80011a6:	792a      	ldrb	r2, [r5, #4]
  style_fundo.body.main_color = LV_COLOR_BLACK;
 80011a8:	70ec      	strb	r4, [r5, #3]
  style_fundo.body.grad_color = LV_COLOR_BLACK;
 80011aa:	439a      	bics	r2, r3
 80011ac:	712a      	strb	r2, [r5, #4]
 80011ae:	88ab      	ldrh	r3, [r5, #4]
 80011b0:	400b      	ands	r3, r1
 80011b2:	80ab      	strh	r3, [r5, #4]
 80011b4:	716c      	strb	r4, [r5, #5]
  lv_obj_set_style(Tela_Principal, &style_fundo); 					// Configura o estilo criado
 80011b6:	0029      	movs	r1, r5
 80011b8:	6830      	ldr	r0, [r6, #0]
 80011ba:	f006 f984 	bl	80074c6 <lv_obj_set_style>
  img_fundo = lv_img_create(Tela_Principal, NULL);
 80011be:	0021      	movs	r1, r4
 80011c0:	6830      	ldr	r0, [r6, #0]
 80011c2:	f00c f9b7 	bl	800d534 <lv_img_create>
 80011c6:	4c0f      	ldr	r4, [pc, #60]	; (8001204 <main+0x528>)
  lv_img_set_src(img_fundo, "F:tela_0.bin");
 80011c8:	490f      	ldr	r1, [pc, #60]	; (8001208 <main+0x52c>)
  img_fundo = lv_img_create(Tela_Principal, NULL);
 80011ca:	6020      	str	r0, [r4, #0]
  lv_img_set_src(img_fundo, "F:tela_0.bin");
 80011cc:	f00c f916 	bl	800d3fc <lv_img_set_src>
  lv_obj_set_protect(img_fundo, LV_PROTECT_POS);
 80011d0:	6820      	ldr	r0, [r4, #0]
 80011d2:	2104      	movs	r1, #4
 80011d4:	f005 fc6f 	bl	8006ab6 <lv_obj_set_protect>
	    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80011d8:	24a0      	movs	r4, #160	; 0xa0
    return lv_disp_get_layer_sys(lv_disp_get_default());
}

static inline void lv_scr_load(lv_obj_t * scr)
{
    lv_disp_load_scr(scr);
 80011da:	6830      	ldr	r0, [r6, #0]
 80011dc:	f005 fad1 	bl	8006782 <lv_disp_load_scr>
 80011e0:	05e4      	lsls	r4, r4, #23
		  ButtonEvent();
 80011e2:	f7ff fc35 	bl	8000a50 <ButtonEvent>
	    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80011e6:	2120      	movs	r1, #32
 80011e8:	0020      	movs	r0, r4
 80011ea:	f001 fb97 	bl	800291c <HAL_GPIO_TogglePin>
	  	  lv_task_handler();
 80011ee:	f00b fd67 	bl	800ccc0 <lv_task_handler>
 80011f2:	e7f6      	b.n	80011e2 <main+0x506>
 80011f4:	20001300 	.word	0x20001300
 80011f8:	200005f8 	.word	0x200005f8
 80011fc:	20005338 	.word	0x20005338
 8001200:	fffff81f 	.word	0xfffff81f
 8001204:	200012fc 	.word	0x200012fc
 8001208:	0800de51 	.word	0x0800de51

0800120c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800120c:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800120e:	6803      	ldr	r3, [r0, #0]
 8001210:	4c0a      	ldr	r4, [pc, #40]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x30>)
{
 8001212:	0005      	movs	r5, r0
  if (htim->Instance == TIM6) {
 8001214:	42a3      	cmp	r3, r4
 8001216:	d101      	bne.n	800121c <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 8001218:	f000 ff9e 	bl	8002158 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
//  if (htim->Instance == TIM6) {
//	  lv_tick_inc(1);
// }
  if (htim->Instance == TIM6) {
 800121c:	682b      	ldr	r3, [r5, #0]
 800121e:	42a3      	cmp	r3, r4
 8001220:	d105      	bne.n	800122e <HAL_TIM_PeriodElapsedCallback+0x22>
   	  timer_key++;
 8001222:	4a07      	ldr	r2, [pc, #28]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001224:	6813      	ldr	r3, [r2, #0]
 8001226:	3301      	adds	r3, #1
   	  if(timer_key >= 40) {
 8001228:	2b27      	cmp	r3, #39	; 0x27
 800122a:	d801      	bhi.n	8001230 <HAL_TIM_PeriodElapsedCallback+0x24>
   	  timer_key++;
 800122c:	6013      	str	r3, [r2, #0]
   		  timer_key = 0;
   		  Key_Read();
   	  }
  }
  /* USER CODE END Callback 1 */
}
 800122e:	bd70      	pop	{r4, r5, r6, pc}
   		  timer_key = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	6013      	str	r3, [r2, #0]
   		  Key_Read();
 8001234:	f7ff fbd4 	bl	80009e0 <Key_Read>
}
 8001238:	e7f9      	b.n	800122e <HAL_TIM_PeriodElapsedCallback+0x22>
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	40001000 	.word	0x40001000
 8001240:	2000133c 	.word	0x2000133c

08001244 <tft_backlight>:
	}
}

void tft_backlight(uint16_t value)
{
	if(value >= 0 && value <= 100) {
 8001244:	2864      	cmp	r0, #100	; 0x64
 8001246:	d808      	bhi.n	800125a <tft_backlight+0x16>
		tft_pwm = value * 40;
 8001248:	2328      	movs	r3, #40	; 0x28
 800124a:	4358      	muls	r0, r3
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <tft_backlight+0x18>)
 800124e:	b280      	uxth	r0, r0
 8001250:	8018      	strh	r0, [r3, #0]
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, tft_pwm);		// PWM_CH1 = TFT
 8001252:	4b03      	ldr	r3, [pc, #12]	; (8001260 <tft_backlight+0x1c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6358      	str	r0, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, tft_pwm);		// PWM_CH2 = TFT
 8001258:	6398      	str	r0, [r3, #56]	; 0x38
	}
}
 800125a:	4770      	bx	lr
 800125c:	20004a54 	.word	0x20004a54
 8001260:	200049b0 	.word	0x200049b0

08001264 <SD_ReadData>:
  * @brief  Waits a data until a value different from SD_DUMMY_BITE
  * @param  None
  * @retval the value read
  */
uint8_t SD_ReadData(void)
{
 8001264:	b510      	push	{r4, lr}
 8001266:	2408      	movs	r4, #8
  uint8_t timeout = 0x08;
  uint8_t readvalue;

  /* Check if response is got or a timeout is happen */
  do {
    readvalue = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001268:	20ff      	movs	r0, #255	; 0xff
 800126a:	f000 feea 	bl	8002042 <SD_IO_WriteByte>
    timeout--;

  }while ((readvalue == SD_DUMMY_BYTE) && timeout);
 800126e:	28ff      	cmp	r0, #255	; 0xff
 8001270:	d103      	bne.n	800127a <SD_ReadData+0x16>
 8001272:	3c01      	subs	r4, #1
 8001274:	b2e4      	uxtb	r4, r4
 8001276:	2c00      	cmp	r4, #0
 8001278:	d1f6      	bne.n	8001268 <SD_ReadData+0x4>

  /* Right response got */
  return readvalue;
}
 800127a:	bd10      	pop	{r4, pc}

0800127c <SD_SendCmd>:
{
 800127c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127e:	b087      	sub	sp, #28
 8001280:	0004      	movs	r4, r0
 8001282:	a80c      	add	r0, sp, #48	; 0x30
 8001284:	7805      	ldrb	r5, [r0, #0]
  frame[0] = (Cmd | 0x40);         /* Construct byte 1 */
 8001286:	2040      	movs	r0, #64	; 0x40
 8001288:	4301      	orrs	r1, r0
 800128a:	a802      	add	r0, sp, #8
 800128c:	7001      	strb	r1, [r0, #0]
  frame[1] = (uint8_t)(Arg >> 24); /* Construct byte 2 */
 800128e:	0e11      	lsrs	r1, r2, #24
 8001290:	7041      	strb	r1, [r0, #1]
  frame[2] = (uint8_t)(Arg >> 16); /* Construct byte 3 */
 8001292:	0c11      	lsrs	r1, r2, #16
 8001294:	7081      	strb	r1, [r0, #2]
  frame[4] = (uint8_t)(Arg);       /* Construct byte 5 */
 8001296:	7102      	strb	r2, [r0, #4]
  frame[3] = (uint8_t)(Arg >> 8);  /* Construct byte 4 */
 8001298:	0a11      	lsrs	r1, r2, #8
  frame[5] = (Crc | 0x01);         /* Construct byte 6 */
 800129a:	2201      	movs	r2, #1
 800129c:	4313      	orrs	r3, r2
  frame[3] = (uint8_t)(Arg >> 8);  /* Construct byte 4 */
 800129e:	70c1      	strb	r1, [r0, #3]
  frame[5] = (Crc | 0x01);         /* Construct byte 6 */
 80012a0:	7143      	strb	r3, [r0, #5]
  SD_IO_CSState(0);
 80012a2:	2000      	movs	r0, #0
 80012a4:	f000 febc 	bl	8002020 <SD_IO_CSState>
  SD_IO_WriteReadData(frame, frameout, SD_CMD_LENGTH); /* Send the Cmd bytes */
 80012a8:	2206      	movs	r2, #6
 80012aa:	a904      	add	r1, sp, #16
 80012ac:	a802      	add	r0, sp, #8
 80012ae:	f000 fec4 	bl	800203a <SD_IO_WriteReadData>
  switch(Answer)
 80012b2:	2d05      	cmp	r5, #5
 80012b4:	d84a      	bhi.n	800134c <SD_SendCmd+0xd0>
 80012b6:	0028      	movs	r0, r5
 80012b8:	f7fe ff34 	bl	8000124 <__gnu_thumb1_case_uqi>
 80012bc:	352c1403 	.word	0x352c1403
 80012c0:	3548      	.short	0x3548
    retr.r1 = SD_ReadData();
 80012c2:	f7ff ffcf 	bl	8001264 <SD_ReadData>
 80012c6:	0007      	movs	r7, r0
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 80012c8:	20ff      	movs	r0, #255	; 0xff
 80012ca:	0005      	movs	r5, r0
 80012cc:	0006      	movs	r6, r0
 80012ce:	9001      	str	r0, [sp, #4]
  return retr;
 80012d0:	466b      	mov	r3, sp
 80012d2:	7120      	strb	r0, [r4, #4]
}
 80012d4:	0020      	movs	r0, r4
  return retr;
 80012d6:	791b      	ldrb	r3, [r3, #4]
 80012d8:	7027      	strb	r7, [r4, #0]
 80012da:	7066      	strb	r6, [r4, #1]
 80012dc:	70a5      	strb	r5, [r4, #2]
 80012de:	70e3      	strb	r3, [r4, #3]
}
 80012e0:	b007      	add	sp, #28
 80012e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    retr.r1 = SD_ReadData();
 80012e4:	f7ff ffbe 	bl	8001264 <SD_ReadData>
 80012e8:	0007      	movs	r7, r0
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80012ea:	20ff      	movs	r0, #255	; 0xff
 80012ec:	f000 fea9 	bl	8002042 <SD_IO_WriteByte>
 80012f0:	0006      	movs	r6, r0
    SD_IO_CSState(1);
 80012f2:	2001      	movs	r0, #1
 80012f4:	f000 fe94 	bl	8002020 <SD_IO_CSState>
    HAL_Delay(1);
 80012f8:	2001      	movs	r0, #1
 80012fa:	f000 ff3f 	bl	800217c <HAL_Delay>
    SD_IO_CSState(0);
 80012fe:	2000      	movs	r0, #0
 8001300:	f000 fe8e 	bl	8002020 <SD_IO_CSState>
    while (SD_IO_WriteByte(SD_DUMMY_BYTE) != 0xFF);
 8001304:	20ff      	movs	r0, #255	; 0xff
 8001306:	f000 fe9c 	bl	8002042 <SD_IO_WriteByte>
 800130a:	28ff      	cmp	r0, #255	; 0xff
 800130c:	d1fa      	bne.n	8001304 <SD_SendCmd+0x88>
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 800130e:	9001      	str	r0, [sp, #4]
 8001310:	0005      	movs	r5, r0
    break;
 8001312:	e7dd      	b.n	80012d0 <SD_SendCmd+0x54>
    retr.r1 = SD_ReadData();
 8001314:	f7ff ffa6 	bl	8001264 <SD_ReadData>
 8001318:	0007      	movs	r7, r0
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 800131a:	20ff      	movs	r0, #255	; 0xff
 800131c:	f000 fe91 	bl	8002042 <SD_IO_WriteByte>
 8001320:	0006      	movs	r6, r0
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 8001322:	20ff      	movs	r0, #255	; 0xff
 8001324:	e7f3      	b.n	800130e <SD_SendCmd+0x92>
    retr.r1 = SD_ReadData();
 8001326:	f7ff ff9d 	bl	8001264 <SD_ReadData>
 800132a:	0007      	movs	r7, r0
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 800132c:	20ff      	movs	r0, #255	; 0xff
 800132e:	f000 fe88 	bl	8002042 <SD_IO_WriteByte>
 8001332:	0006      	movs	r6, r0
    retr.r3 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001334:	20ff      	movs	r0, #255	; 0xff
 8001336:	f000 fe84 	bl	8002042 <SD_IO_WriteByte>
 800133a:	0005      	movs	r5, r0
    retr.r4 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 800133c:	20ff      	movs	r0, #255	; 0xff
 800133e:	f000 fe80 	bl	8002042 <SD_IO_WriteByte>
 8001342:	9001      	str	r0, [sp, #4]
    retr.r5 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001344:	20ff      	movs	r0, #255	; 0xff
 8001346:	f000 fe7c 	bl	8002042 <SD_IO_WriteByte>
    break;
 800134a:	e7c1      	b.n	80012d0 <SD_SendCmd+0x54>
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 800134c:	20ff      	movs	r0, #255	; 0xff
 800134e:	9001      	str	r0, [sp, #4]
 8001350:	0005      	movs	r5, r0
 8001352:	0006      	movs	r6, r0
 8001354:	0007      	movs	r7, r0
 8001356:	e7bb      	b.n	80012d0 <SD_SendCmd+0x54>

08001358 <SD_WaitData.constprop.0>:
/**
  * @brief  Waits a data from the SD card
  * @param  data : Expected data from the SD card
  * @retval BSP_SD_OK or BSP_SD_TIMEOUT
  */
uint8_t SD_WaitData(uint8_t data)
 8001358:	b510      	push	{r4, lr}
{
  uint16_t timeout = 0xFFFF;
 800135a:	4c08      	ldr	r4, [pc, #32]	; (800137c <SD_WaitData.constprop.0+0x24>)
  uint8_t readvalue;

  /* Check if response is got or a timeout is happen */

  do {
    readvalue = SD_IO_WriteByte(SD_DUMMY_BYTE);
 800135c:	20ff      	movs	r0, #255	; 0xff
 800135e:	f000 fe70 	bl	8002042 <SD_IO_WriteByte>
    timeout--;
 8001362:	3c01      	subs	r4, #1
 8001364:	b2a4      	uxth	r4, r4
  }while ((readvalue != data) && timeout);
 8001366:	28fe      	cmp	r0, #254	; 0xfe
 8001368:	d003      	beq.n	8001372 <SD_WaitData.constprop.0+0x1a>
 800136a:	2c00      	cmp	r4, #0
 800136c:	d1f6      	bne.n	800135c <SD_WaitData.constprop.0+0x4>

  if (timeout == 0)
  {
    /* After time out */
    return BSP_SD_TIMEOUT;
 800136e:	2002      	movs	r0, #2
  }

  /* Right response got */
  return BSP_SD_OK;
}
 8001370:	bd10      	pop	{r4, pc}
  return BSP_SD_OK;
 8001372:	4260      	negs	r0, r4
 8001374:	4160      	adcs	r0, r4
 8001376:	0040      	lsls	r0, r0, #1
 8001378:	e7fa      	b.n	8001370 <SD_WaitData.constprop.0+0x18>
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	0000ffff 	.word	0x0000ffff

08001380 <BSP_SD_Init>:
{
 8001380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001382:	b089      	sub	sp, #36	; 0x24
  SD_IO_Init();
 8001384:	f000 fe6c 	bl	8002060 <SD_IO_Init>
  SdStatus = SD_PRESENT;
 8001388:	2201      	movs	r2, #1
  __IO uint8_t counter = 0;
 800138a:	250f      	movs	r5, #15
  SdStatus = SD_PRESENT;
 800138c:	4b5b      	ldr	r3, [pc, #364]	; (80014fc <BSP_SD_Init+0x17c>)
 800138e:	701a      	strb	r2, [r3, #0]
  __IO uint8_t counter = 0;
 8001390:	ab02      	add	r3, sp, #8
 8001392:	18ed      	adds	r5, r5, r3
 8001394:	2300      	movs	r3, #0
 8001396:	702b      	strb	r3, [r5, #0]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8001398:	2100      	movs	r1, #0
    counter++;
 800139a:	782b      	ldrb	r3, [r5, #0]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 800139c:	ac06      	add	r4, sp, #24
    counter++;
 800139e:	3301      	adds	r3, #1
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	702b      	strb	r3, [r5, #0]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 80013a4:	000a      	movs	r2, r1
 80013a6:	2395      	movs	r3, #149	; 0x95
 80013a8:	9100      	str	r1, [sp, #0]
 80013aa:	0020      	movs	r0, r4
 80013ac:	f7ff ff66 	bl	800127c <SD_SendCmd>
    SD_IO_CSState(1);
 80013b0:	2001      	movs	r0, #1
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 80013b2:	7827      	ldrb	r7, [r4, #0]
    SD_IO_CSState(1);
 80013b4:	f000 fe34 	bl	8002020 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80013b8:	20ff      	movs	r0, #255	; 0xff
 80013ba:	f000 fe42 	bl	8002042 <SD_IO_WriteByte>
    if(counter >= SD_MAX_TRY)
 80013be:	782b      	ldrb	r3, [r5, #0]
 80013c0:	2b63      	cmp	r3, #99	; 0x63
 80013c2:	d903      	bls.n	80013cc <BSP_SD_Init+0x4c>
      return BSP_SD_ERROR;
 80013c4:	2501      	movs	r5, #1
}
 80013c6:	0028      	movs	r0, r5
 80013c8:	b009      	add	sp, #36	; 0x24
 80013ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while(response.r1 != SD_R1_IN_IDLE_STATE);
 80013cc:	2f01      	cmp	r7, #1
 80013ce:	d1e3      	bne.n	8001398 <BSP_SD_Init+0x18>
  response = SD_SendCmd(SD_CMD_SEND_IF_COND, 0x1AA, 0x87, SD_ANSWER_R7_EXPECTED);
 80013d0:	2305      	movs	r3, #5
 80013d2:	22d5      	movs	r2, #213	; 0xd5
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	0052      	lsls	r2, r2, #1
 80013d8:	3382      	adds	r3, #130	; 0x82
 80013da:	2108      	movs	r1, #8
 80013dc:	0020      	movs	r0, r4
 80013de:	f7ff ff4d 	bl	800127c <SD_SendCmd>
 80013e2:	7825      	ldrb	r5, [r4, #0]
  SD_IO_CSState(1);
 80013e4:	0038      	movs	r0, r7
 80013e6:	f000 fe1b 	bl	8002020 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 80013ea:	20ff      	movs	r0, #255	; 0xff
 80013ec:	f000 fe29 	bl	8002042 <SD_IO_WriteByte>
  if((response.r1  & SD_R1_ILLEGAL_COMMAND) == SD_R1_ILLEGAL_COMMAND)
 80013f0:	076b      	lsls	r3, r5, #29
 80013f2:	d523      	bpl.n	800143c <BSP_SD_Init+0xbc>
      response = SD_SendCmd(SD_CMD_APP_CMD, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 80013f4:	26ff      	movs	r6, #255	; 0xff
 80013f6:	2500      	movs	r5, #0
 80013f8:	0033      	movs	r3, r6
 80013fa:	002a      	movs	r2, r5
 80013fc:	2137      	movs	r1, #55	; 0x37
 80013fe:	0020      	movs	r0, r4
 8001400:	9500      	str	r5, [sp, #0]
 8001402:	f7ff ff3b 	bl	800127c <SD_SendCmd>
      SD_IO_CSState(1);
 8001406:	0038      	movs	r0, r7
 8001408:	f000 fe0a 	bl	8002020 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 800140c:	0030      	movs	r0, r6
 800140e:	f000 fe18 	bl	8002042 <SD_IO_WriteByte>
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8001412:	002a      	movs	r2, r5
 8001414:	2129      	movs	r1, #41	; 0x29
 8001416:	0033      	movs	r3, r6
 8001418:	0020      	movs	r0, r4
 800141a:	9500      	str	r5, [sp, #0]
 800141c:	f7ff ff2e 	bl	800127c <SD_SendCmd>
 8001420:	7823      	ldrb	r3, [r4, #0]
      SD_IO_CSState(1);
 8001422:	0038      	movs	r0, r7
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8001424:	9303      	str	r3, [sp, #12]
      SD_IO_CSState(1);
 8001426:	f000 fdfb 	bl	8002020 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 800142a:	0030      	movs	r0, r6
 800142c:	f000 fe09 	bl	8002042 <SD_IO_WriteByte>
    while(response.r1 == SD_R1_IN_IDLE_STATE);
 8001430:	9b03      	ldr	r3, [sp, #12]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d0df      	beq.n	80013f6 <BSP_SD_Init+0x76>
    flag_SDHC = 0;
 8001436:	4b32      	ldr	r3, [pc, #200]	; (8001500 <BSP_SD_Init+0x180>)
 8001438:	801d      	strh	r5, [r3, #0]
 800143a:	e7c4      	b.n	80013c6 <BSP_SD_Init+0x46>
  else if(response.r1 == SD_R1_IN_IDLE_STATE)
 800143c:	2d01      	cmp	r5, #1
 800143e:	d1c1      	bne.n	80013c4 <BSP_SD_Init+0x44>
      response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8001440:	27ff      	movs	r7, #255	; 0xff
 8001442:	2600      	movs	r6, #0
 8001444:	003b      	movs	r3, r7
 8001446:	0032      	movs	r2, r6
 8001448:	2137      	movs	r1, #55	; 0x37
 800144a:	9600      	str	r6, [sp, #0]
 800144c:	0020      	movs	r0, r4
 800144e:	f7ff ff15 	bl	800127c <SD_SendCmd>
      SD_IO_CSState(1);
 8001452:	0028      	movs	r0, r5
 8001454:	f000 fde4 	bl	8002020 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001458:	0038      	movs	r0, r7
 800145a:	f000 fdf2 	bl	8002042 <SD_IO_WriteByte>
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x40000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 800145e:	2280      	movs	r2, #128	; 0x80
 8001460:	9600      	str	r6, [sp, #0]
 8001462:	003b      	movs	r3, r7
 8001464:	05d2      	lsls	r2, r2, #23
 8001466:	2129      	movs	r1, #41	; 0x29
 8001468:	0020      	movs	r0, r4
 800146a:	f7ff ff07 	bl	800127c <SD_SendCmd>
 800146e:	7826      	ldrb	r6, [r4, #0]
      SD_IO_CSState(1);
 8001470:	0028      	movs	r0, r5
 8001472:	f000 fdd5 	bl	8002020 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001476:	0038      	movs	r0, r7
 8001478:	f000 fde3 	bl	8002042 <SD_IO_WriteByte>
    while(response.r1 == SD_R1_IN_IDLE_STATE);
 800147c:	2e01      	cmp	r6, #1
 800147e:	d0e0      	beq.n	8001442 <BSP_SD_Init+0xc2>
        response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8001480:	25ff      	movs	r5, #255	; 0xff
    if((response.r1 & SD_R1_ILLEGAL_COMMAND) == SD_R1_ILLEGAL_COMMAND)
 8001482:	0773      	lsls	r3, r6, #29
 8001484:	d417      	bmi.n	80014b6 <BSP_SD_Init+0x136>
    response = SD_SendCmd(SD_CMD_READ_OCR, 0x00000000, 0xFF, SD_ANSWER_R3_EXPECTED);
 8001486:	2303      	movs	r3, #3
 8001488:	2200      	movs	r2, #0
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	213a      	movs	r1, #58	; 0x3a
 800148e:	33fc      	adds	r3, #252	; 0xfc
 8001490:	0020      	movs	r0, r4
 8001492:	f7ff fef3 	bl	800127c <SD_SendCmd>
 8001496:	7825      	ldrb	r5, [r4, #0]
    SD_IO_CSState(1);
 8001498:	2001      	movs	r0, #1
 800149a:	f000 fdc1 	bl	8002020 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 800149e:	20ff      	movs	r0, #255	; 0xff
 80014a0:	f000 fdcf 	bl	8002042 <SD_IO_WriteByte>
    if(response.r1 != SD_R1_NO_ERROR)
 80014a4:	2d00      	cmp	r5, #0
 80014a6:	d000      	beq.n	80014aa <BSP_SD_Init+0x12a>
 80014a8:	e78c      	b.n	80013c4 <BSP_SD_Init+0x44>
    flag_SDHC = (response.r2 & 0x40) >> 6;
 80014aa:	7863      	ldrb	r3, [r4, #1]
 80014ac:	4a14      	ldr	r2, [pc, #80]	; (8001500 <BSP_SD_Init+0x180>)
 80014ae:	065b      	lsls	r3, r3, #25
 80014b0:	0fdb      	lsrs	r3, r3, #31
 80014b2:	8013      	strh	r3, [r2, #0]
 80014b4:	e787      	b.n	80013c6 <BSP_SD_Init+0x46>
        response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 80014b6:	2600      	movs	r6, #0
 80014b8:	002b      	movs	r3, r5
 80014ba:	0032      	movs	r2, r6
 80014bc:	2137      	movs	r1, #55	; 0x37
 80014be:	0020      	movs	r0, r4
 80014c0:	9600      	str	r6, [sp, #0]
 80014c2:	f7ff fedb 	bl	800127c <SD_SendCmd>
 80014c6:	7827      	ldrb	r7, [r4, #0]
        SD_IO_CSState(1);
 80014c8:	2001      	movs	r0, #1
 80014ca:	f000 fda9 	bl	8002020 <SD_IO_CSState>
        SD_IO_WriteByte(SD_DUMMY_BYTE);
 80014ce:	0028      	movs	r0, r5
 80014d0:	f000 fdb7 	bl	8002042 <SD_IO_WriteByte>
        if(response.r1 != SD_R1_IN_IDLE_STATE)
 80014d4:	2f01      	cmp	r7, #1
 80014d6:	d000      	beq.n	80014da <BSP_SD_Init+0x15a>
 80014d8:	e774      	b.n	80013c4 <BSP_SD_Init+0x44>
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 80014da:	0032      	movs	r2, r6
 80014dc:	9600      	str	r6, [sp, #0]
 80014de:	002b      	movs	r3, r5
 80014e0:	2129      	movs	r1, #41	; 0x29
 80014e2:	0020      	movs	r0, r4
 80014e4:	f7ff feca 	bl	800127c <SD_SendCmd>
 80014e8:	7826      	ldrb	r6, [r4, #0]
        SD_IO_CSState(1);
 80014ea:	0038      	movs	r0, r7
 80014ec:	f000 fd98 	bl	8002020 <SD_IO_CSState>
        SD_IO_WriteByte(SD_DUMMY_BYTE);
 80014f0:	0028      	movs	r0, r5
 80014f2:	f000 fda6 	bl	8002042 <SD_IO_WriteByte>
      while(response.r1 == SD_R1_IN_IDLE_STATE);
 80014f6:	2e01      	cmp	r6, #1
 80014f8:	d0dd      	beq.n	80014b6 <BSP_SD_Init+0x136>
 80014fa:	e7c4      	b.n	8001486 <BSP_SD_Init+0x106>
 80014fc:	20001340 	.word	0x20001340
 8001500:	20001342 	.word	0x20001342

08001504 <BSP_SD_GetCardInfo>:
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8001504:	2200      	movs	r2, #0
{
 8001506:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001508:	b08b      	sub	sp, #44	; 0x2c
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 800150a:	ad04      	add	r5, sp, #16
 800150c:	23ff      	movs	r3, #255	; 0xff
{
 800150e:	0004      	movs	r4, r0
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8001510:	9200      	str	r2, [sp, #0]
 8001512:	2109      	movs	r1, #9
 8001514:	0028      	movs	r0, r5
 8001516:	f7ff feb1 	bl	800127c <SD_SendCmd>
  if(response.r1 == SD_R1_NO_ERROR)
 800151a:	782b      	ldrb	r3, [r5, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d030      	beq.n	8001582 <BSP_SD_GetCardInfo+0x7e>
  uint8_t retr = BSP_SD_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	9303      	str	r3, [sp, #12]
  SD_IO_CSState(1);
 8001524:	2001      	movs	r0, #1
 8001526:	f000 fd7b 	bl	8002020 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 800152a:	20ff      	movs	r0, #255	; 0xff
 800152c:	f000 fd89 	bl	8002042 <SD_IO_WriteByte>
  response = SD_SendCmd(SD_CMD_SEND_CID, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8001530:	2200      	movs	r2, #0
 8001532:	ad04      	add	r5, sp, #16
 8001534:	23ff      	movs	r3, #255	; 0xff
 8001536:	9200      	str	r2, [sp, #0]
 8001538:	210a      	movs	r1, #10
 800153a:	0028      	movs	r0, r5
 800153c:	f7ff fe9e 	bl	800127c <SD_SendCmd>
  if(response.r1 == SD_R1_NO_ERROR)
 8001540:	782b      	ldrb	r3, [r5, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d100      	bne.n	8001548 <BSP_SD_GetCardInfo+0x44>
 8001546:	e12b      	b.n	80017a0 <BSP_SD_GetCardInfo+0x29c>
  uint8_t retr = BSP_SD_ERROR;
 8001548:	2601      	movs	r6, #1
  SD_IO_CSState(1);
 800154a:	2001      	movs	r0, #1
 800154c:	f000 fd68 	bl	8002020 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001550:	20ff      	movs	r0, #255	; 0xff
 8001552:	f000 fd76 	bl	8002042 <SD_IO_WriteByte>
  status|= SD_GetCIDRegister(&(pCardInfo->Cid));
 8001556:	9b03      	ldr	r3, [sp, #12]
 8001558:	431e      	orrs	r6, r3
  if(flag_SDHC == 1 )
 800155a:	4bca      	ldr	r3, [pc, #808]	; (8001884 <BSP_SD_GetCardInfo+0x380>)
  status|= SD_GetCIDRegister(&(pCardInfo->Cid));
 800155c:	b2f0      	uxtb	r0, r6
  if(flag_SDHC == 1 )
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d000      	beq.n	8001566 <BSP_SD_GetCardInfo+0x62>
 8001564:	e17b      	b.n	800185e <BSP_SD_GetCardInfo+0x35a>
    pCardInfo->LogBlockSize = 512;
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	63e3      	str	r3, [r4, #60]	; 0x3c
    pCardInfo->CardBlockSize = 512;
 800156c:	6363      	str	r3, [r4, #52]	; 0x34
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v2.DeviceSize + 1) * 1024 * pCardInfo->LogBlockSize;
 800156e:	68a3      	ldr	r3, [r4, #8]
 8001570:	011b      	lsls	r3, r3, #4
 8001572:	0a9b      	lsrs	r3, r3, #10
 8001574:	3301      	adds	r3, #1
 8001576:	04db      	lsls	r3, r3, #19
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8001578:	6323      	str	r3, [r4, #48]	; 0x30
    pCardInfo->LogBlockNbr = (pCardInfo->CardCapacity) / (pCardInfo->LogBlockSize);
 800157a:	0a5b      	lsrs	r3, r3, #9
 800157c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800157e:	b00b      	add	sp, #44	; 0x2c
 8001580:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 8001582:	f7ff fee9 	bl	8001358 <SD_WaitData.constprop.0>
 8001586:	9003      	str	r0, [sp, #12]
 8001588:	2800      	cmp	r0, #0
 800158a:	d1c9      	bne.n	8001520 <BSP_SD_GetCardInfo+0x1c>
 800158c:	0006      	movs	r6, r0
        CSD_Tab[counter] = SD_IO_WriteByte(SD_DUMMY_BYTE);
 800158e:	20ff      	movs	r0, #255	; 0xff
 8001590:	f000 fd57 	bl	8002042 <SD_IO_WriteByte>
 8001594:	ad06      	add	r5, sp, #24
 8001596:	5570      	strb	r0, [r6, r5]
 8001598:	3601      	adds	r6, #1
      for (counter = 0; counter < 16; counter++)
 800159a:	2e10      	cmp	r6, #16
 800159c:	d1f7      	bne.n	800158e <BSP_SD_GetCardInfo+0x8a>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 800159e:	20ff      	movs	r0, #255	; 0xff
 80015a0:	f000 fd4f 	bl	8002042 <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80015a4:	20ff      	movs	r0, #255	; 0xff
 80015a6:	f000 fd4c 	bl	8002042 <SD_IO_WriteByte>
      Csd->PartBlockRead   = (CSD_Tab[6] & 0x80) >> 7;
 80015aa:	2001      	movs	r0, #1
      Csd->CSDStruct = (CSD_Tab[0] & 0xC0) >> 6;
 80015ac:	782b      	ldrb	r3, [r5, #0]
      Csd->Reserved1 =  CSD_Tab[0] & 0x3F;
 80015ae:	009a      	lsls	r2, r3, #2
 80015b0:	099b      	lsrs	r3, r3, #6
 80015b2:	4313      	orrs	r3, r2
 80015b4:	7023      	strb	r3, [r4, #0]
      Csd->TAAC = CSD_Tab[1];
 80015b6:	786b      	ldrb	r3, [r5, #1]
 80015b8:	7063      	strb	r3, [r4, #1]
      Csd->NSAC = CSD_Tab[2];
 80015ba:	78ab      	ldrb	r3, [r5, #2]
 80015bc:	70a3      	strb	r3, [r4, #2]
      Csd->MaxBusClkFrec = CSD_Tab[3];
 80015be:	78eb      	ldrb	r3, [r5, #3]
 80015c0:	70e3      	strb	r3, [r4, #3]
      Csd->CardComdClasses = (CSD_Tab[4] << 4) | ((CSD_Tab[5] & 0xF0) >> 4);
 80015c2:	796a      	ldrb	r2, [r5, #5]
 80015c4:	792b      	ldrb	r3, [r5, #4]
 80015c6:	0911      	lsrs	r1, r2, #4
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	4319      	orrs	r1, r3
 80015cc:	88a3      	ldrh	r3, [r4, #4]
      Csd->RdBlockLen = CSD_Tab[5] & 0x0F;
 80015ce:	0112      	lsls	r2, r2, #4
      Csd->CardComdClasses = (CSD_Tab[4] << 4) | ((CSD_Tab[5] & 0xF0) >> 4);
 80015d0:	0b1b      	lsrs	r3, r3, #12
 80015d2:	031b      	lsls	r3, r3, #12
 80015d4:	430b      	orrs	r3, r1
 80015d6:	80a3      	strh	r3, [r4, #4]
      Csd->RdBlockLen = CSD_Tab[5] & 0x0F;
 80015d8:	051b      	lsls	r3, r3, #20
 80015da:	0f1b      	lsrs	r3, r3, #28
 80015dc:	4313      	orrs	r3, r2
 80015de:	7163      	strb	r3, [r4, #5]
      Csd->PartBlockRead   = (CSD_Tab[6] & 0x80) >> 7;
 80015e0:	79ab      	ldrb	r3, [r5, #6]
 80015e2:	79a1      	ldrb	r1, [r4, #6]
 80015e4:	09da      	lsrs	r2, r3, #7
 80015e6:	4381      	bics	r1, r0
      Csd->WrBlockMisalign = (CSD_Tab[6] & 0x40) >> 6;
 80015e8:	119f      	asrs	r7, r3, #6
 80015ea:	4007      	ands	r7, r0
 80015ec:	430a      	orrs	r2, r1
 80015ee:	2102      	movs	r1, #2
 80015f0:	4087      	lsls	r7, r0
 80015f2:	438a      	bics	r2, r1
      Csd->RdBlockMisalign = (CSD_Tab[6] & 0x20) >> 5;
 80015f4:	433a      	orrs	r2, r7
 80015f6:	2704      	movs	r7, #4
 80015f8:	1159      	asrs	r1, r3, #5
 80015fa:	4001      	ands	r1, r0
 80015fc:	0089      	lsls	r1, r1, #2
 80015fe:	43ba      	bics	r2, r7
      Csd->DSRImpl         = (CSD_Tab[6] & 0x10) >> 4;
 8001600:	430a      	orrs	r2, r1
 8001602:	2108      	movs	r1, #8
 8001604:	111f      	asrs	r7, r3, #4
 8001606:	4038      	ands	r0, r7
 8001608:	438a      	bics	r2, r1
 800160a:	00c0      	lsls	r0, r0, #3
 800160c:	4302      	orrs	r2, r0
 800160e:	71a2      	strb	r2, [r4, #6]
      if(flag_SDHC == 0)
 8001610:	4a9c      	ldr	r2, [pc, #624]	; (8001884 <BSP_SD_GetCardInfo+0x380>)
 8001612:	8811      	ldrh	r1, [r2, #0]
 8001614:	79ea      	ldrb	r2, [r5, #7]
 8001616:	2900      	cmp	r1, #0
 8001618:	d000      	beq.n	800161c <BSP_SD_GetCardInfo+0x118>
 800161a:	e0a7      	b.n	800176c <BSP_SD_GetCardInfo+0x268>
        Csd->version.v1.Reserved1 = ((CSD_Tab[6] & 0x0C) >> 2);
 800161c:	1098      	asrs	r0, r3, #2
 800161e:	3103      	adds	r1, #3
 8001620:	4008      	ands	r0, r1
 8001622:	7a21      	ldrb	r1, [r4, #8]
 8001624:	3e0d      	subs	r6, #13
 8001626:	43b1      	bics	r1, r6
 8001628:	4301      	orrs	r1, r0
 800162a:	7221      	strb	r1, [r4, #8]
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 800162c:	7a29      	ldrb	r1, [r5, #8]
                                    |  (CSD_Tab[7] << 2)
 800162e:	0090      	lsls	r0, r2, #2
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 8001630:	098a      	lsrs	r2, r1, #6
 8001632:	4302      	orrs	r2, r0
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10)
 8001634:	029b      	lsls	r3, r3, #10
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 8001636:	4313      	orrs	r3, r2
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10)
 8001638:	4893      	ldr	r0, [pc, #588]	; (8001888 <BSP_SD_GetCardInfo+0x384>)
 800163a:	8922      	ldrh	r2, [r4, #8]
 800163c:	051b      	lsls	r3, r3, #20
 800163e:	4002      	ands	r2, r0
 8001640:	0c9b      	lsrs	r3, r3, #18
 8001642:	4313      	orrs	r3, r2
        Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
 8001644:	2207      	movs	r2, #7
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10)
 8001646:	8123      	strh	r3, [r4, #8]
        Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
 8001648:	7aa3      	ldrb	r3, [r4, #10]
 800164a:	10c8      	asrs	r0, r1, #3
 800164c:	4010      	ands	r0, r2
 800164e:	4393      	bics	r3, r2
        Csd->version.v1.MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07);
 8001650:	4303      	orrs	r3, r0
 8001652:	4011      	ands	r1, r2
 8001654:	2038      	movs	r0, #56	; 0x38
 8001656:	40b1      	lsls	r1, r6
 8001658:	4383      	bics	r3, r0
 800165a:	430b      	orrs	r3, r1
 800165c:	72a3      	strb	r3, [r4, #10]
        Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0) >> 5;
 800165e:	7a6b      	ldrb	r3, [r5, #9]
 8001660:	7ae1      	ldrb	r1, [r4, #11]
 8001662:	095f      	lsrs	r7, r3, #5
        Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 8001664:	109e      	asrs	r6, r3, #2
        Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0) >> 5;
 8001666:	4391      	bics	r1, r2
        Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 8001668:	4016      	ands	r6, r2
 800166a:	4339      	orrs	r1, r7
 800166c:	00f6      	lsls	r6, r6, #3
 800166e:	4381      	bics	r1, r0
 8001670:	4331      	orrs	r1, r6
 8001672:	72e1      	strb	r1, [r4, #11]
        Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03) << 1)
 8001674:	2106      	movs	r1, #6
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	400b      	ands	r3, r1
                                       |((CSD_Tab[10] & 0x80) >> 7);
 800167a:	7aa9      	ldrb	r1, [r5, #10]
 800167c:	40d1      	lsrs	r1, r2
 800167e:	430b      	orrs	r3, r1
        Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03) << 1)
 8001680:	7b21      	ldrb	r1, [r4, #12]
 8001682:	4391      	bics	r1, r2
 8001684:	430b      	orrs	r3, r1
 8001686:	7323      	strb	r3, [r4, #12]
      Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40) >> 6;
 8001688:	2001      	movs	r0, #1
 800168a:	ae06      	add	r6, sp, #24
 800168c:	7ab3      	ldrb	r3, [r6, #10]
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 800168e:	277e      	movs	r7, #126	; 0x7e
      Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40) >> 6;
 8001690:	119d      	asrs	r5, r3, #6
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8001692:	4083      	lsls	r3, r0
      Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40) >> 6;
 8001694:	7c22      	ldrb	r2, [r4, #16]
 8001696:	4005      	ands	r5, r0
 8001698:	4382      	bics	r2, r0
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 800169a:	432a      	orrs	r2, r5
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 800169c:	257f      	movs	r5, #127	; 0x7f
                              |((CSD_Tab[11] & 0x80) >> 7);
 800169e:	7af1      	ldrb	r1, [r6, #11]
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 80016a0:	403b      	ands	r3, r7
                              |((CSD_Tab[11] & 0x80) >> 7);
 80016a2:	09cf      	lsrs	r7, r1, #7
 80016a4:	433b      	orrs	r3, r7
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 80016a6:	4083      	lsls	r3, r0
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 80016a8:	4029      	ands	r1, r5
 80016aa:	000f      	movs	r7, r1
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 80016ac:	4002      	ands	r2, r0
 80016ae:	4313      	orrs	r3, r2
 80016b0:	7423      	strb	r3, [r4, #16]
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 80016b2:	7c63      	ldrb	r3, [r4, #17]
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 80016b4:	7b31      	ldrb	r1, [r6, #12]
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 80016b6:	43ab      	bics	r3, r5
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 80016b8:	09ca      	lsrs	r2, r1, #7
 80016ba:	433b      	orrs	r3, r7
 80016bc:	01d2      	lsls	r2, r2, #7
 80016be:	402b      	ands	r3, r5
 80016c0:	4313      	orrs	r3, r2
      Csd->Reserved2         = (CSD_Tab[12] & 0x60) >> 5;
 80016c2:	2203      	movs	r2, #3
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 80016c4:	7463      	strb	r3, [r4, #17]
      Csd->Reserved2         = (CSD_Tab[12] & 0x60) >> 5;
 80016c6:	114b      	asrs	r3, r1, #5
 80016c8:	4013      	ands	r3, r2
 80016ca:	469c      	mov	ip, r3
      Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1C) >> 2;
 80016cc:	4667      	mov	r7, ip
      Csd->Reserved2         = (CSD_Tab[12] & 0x60) >> 5;
 80016ce:	7ca3      	ldrb	r3, [r4, #18]
 80016d0:	4393      	bics	r3, r2
      Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1C) >> 2;
 80016d2:	433b      	orrs	r3, r7
 80016d4:	271c      	movs	r7, #28
 80016d6:	3219      	adds	r2, #25
 80016d8:	43bb      	bics	r3, r7
 80016da:	400a      	ands	r2, r1
 80016dc:	431a      	orrs	r2, r3
 80016de:	74a2      	strb	r2, [r4, #18]
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 80016e0:	220c      	movs	r2, #12
                              |((CSD_Tab[13] & 0xC0) >> 6);
 80016e2:	7b73      	ldrb	r3, [r6, #13]
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 80016e4:	0089      	lsls	r1, r1, #2
 80016e6:	4011      	ands	r1, r2
                              |((CSD_Tab[13] & 0xC0) >> 6);
 80016e8:	099a      	lsrs	r2, r3, #6
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 80016ea:	4311      	orrs	r1, r2
 80016ec:	468c      	mov	ip, r1
 80016ee:	220f      	movs	r2, #15
      Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20) >> 5;
 80016f0:	4667      	mov	r7, ip
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 80016f2:	7ce1      	ldrb	r1, [r4, #19]
 80016f4:	4391      	bics	r1, r2
      Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20) >> 5;
 80016f6:	4339      	orrs	r1, r7
 80016f8:	2710      	movs	r7, #16
 80016fa:	115a      	asrs	r2, r3, #5
 80016fc:	4002      	ands	r2, r0
 80016fe:	43b9      	bics	r1, r7
 8001700:	0112      	lsls	r2, r2, #4
 8001702:	430a      	orrs	r2, r1
 8001704:	74e2      	strb	r2, [r4, #19]
      Csd->Reserved3         = (CSD_Tab[13] & 0x1F);
 8001706:	221f      	movs	r2, #31
 8001708:	7d21      	ldrb	r1, [r4, #20]
 800170a:	4013      	ands	r3, r2
 800170c:	4391      	bics	r1, r2
      Csd->FileFormatGrouop  = (CSD_Tab[14] & 0x80) >> 7;
 800170e:	430b      	orrs	r3, r1
 8001710:	2120      	movs	r1, #32
 8001712:	7bb2      	ldrb	r2, [r6, #14]
 8001714:	438b      	bics	r3, r1
 8001716:	09d7      	lsrs	r7, r2, #7
 8001718:	017f      	lsls	r7, r7, #5
      Csd->CopyFlag          = (CSD_Tab[14] & 0x40) >> 6;
 800171a:	433b      	orrs	r3, r7
 800171c:	2740      	movs	r7, #64	; 0x40
 800171e:	1191      	asrs	r1, r2, #6
 8001720:	4001      	ands	r1, r0
 8001722:	0189      	lsls	r1, r1, #6
 8001724:	43bb      	bics	r3, r7
      Csd->PermWrProtect     = (CSD_Tab[14] & 0x20) >> 5;
 8001726:	430b      	orrs	r3, r1
 8001728:	1157      	asrs	r7, r2, #5
 800172a:	01ff      	lsls	r7, r7, #7
 800172c:	402b      	ands	r3, r5
      Csd->TempWrProtect     = (CSD_Tab[14] & 0x10) >> 4;
 800172e:	7d61      	ldrb	r1, [r4, #21]
      Csd->PermWrProtect     = (CSD_Tab[14] & 0x20) >> 5;
 8001730:	433b      	orrs	r3, r7
 8001732:	7523      	strb	r3, [r4, #20]
      Csd->TempWrProtect     = (CSD_Tab[14] & 0x10) >> 4;
 8001734:	4381      	bics	r1, r0
 8001736:	1113      	asrs	r3, r2, #4
 8001738:	4003      	ands	r3, r0
 800173a:	0008      	movs	r0, r1
      Csd->FileFormat        = (CSD_Tab[14] & 0x0C) >> 2;
 800173c:	2703      	movs	r7, #3
 800173e:	4303      	orrs	r3, r0
 8001740:	2006      	movs	r0, #6
 8001742:	1091      	asrs	r1, r2, #2
 8001744:	4039      	ands	r1, r7
 8001746:	0049      	lsls	r1, r1, #1
 8001748:	4383      	bics	r3, r0
      Csd->Reserved4         = (CSD_Tab[14] & 0x03);
 800174a:	430b      	orrs	r3, r1
 800174c:	403a      	ands	r2, r7
 800174e:	2118      	movs	r1, #24
 8001750:	40ba      	lsls	r2, r7
 8001752:	438b      	bics	r3, r1
 8001754:	431a      	orrs	r2, r3
 8001756:	7562      	strb	r2, [r4, #21]
      Csd->crc               = (CSD_Tab[15] & 0xFE) >> 1;
 8001758:	7bf2      	ldrb	r2, [r6, #15]
 800175a:	7da3      	ldrb	r3, [r4, #22]
 800175c:	0851      	lsrs	r1, r2, #1
 800175e:	43ab      	bics	r3, r5
      Csd->Reserved5         = (CSD_Tab[15] & 0x01);
 8001760:	430b      	orrs	r3, r1
 8001762:	01d2      	lsls	r2, r2, #7
 8001764:	401d      	ands	r5, r3
 8001766:	4315      	orrs	r5, r2
 8001768:	75a5      	strb	r5, [r4, #22]
 800176a:	e6db      	b.n	8001524 <BSP_SD_GetCardInfo+0x20>
        Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0F) << 2) | ((CSD_Tab[7] & 0xC0) >> 6);
 800176c:	213c      	movs	r1, #60	; 0x3c
 800176e:	203f      	movs	r0, #63	; 0x3f
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	400b      	ands	r3, r1
 8001774:	0991      	lsrs	r1, r2, #6
 8001776:	430b      	orrs	r3, r1
 8001778:	7a21      	ldrb	r1, [r4, #8]
        Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3F) << 16) | (CSD_Tab[8] << 8) | CSD_Tab[9];
 800177a:	0412      	lsls	r2, r2, #16
        Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0F) << 2) | ((CSD_Tab[7] & 0xC0) >> 6);
 800177c:	4381      	bics	r1, r0
 800177e:	430b      	orrs	r3, r1
 8001780:	7223      	strb	r3, [r4, #8]
        Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3F) << 16) | (CSD_Tab[8] << 8) | CSD_Tab[9];
 8001782:	892b      	ldrh	r3, [r5, #8]
 8001784:	68a1      	ldr	r1, [r4, #8]
 8001786:	ba5b      	rev16	r3, r3
 8001788:	b29b      	uxth	r3, r3
 800178a:	431a      	orrs	r2, r3
 800178c:	4b3f      	ldr	r3, [pc, #252]	; (800188c <BSP_SD_GetCardInfo+0x388>)
 800178e:	0292      	lsls	r2, r2, #10
 8001790:	0912      	lsrs	r2, r2, #4
 8001792:	400b      	ands	r3, r1
 8001794:	431a      	orrs	r2, r3
 8001796:	60a2      	str	r2, [r4, #8]
        Csd->version.v2.Reserved2 = ((CSD_Tab[10] & 0x80) >> 8);
 8001798:	0e12      	lsrs	r2, r2, #24
 800179a:	43b2      	bics	r2, r6
 800179c:	72e2      	strb	r2, [r4, #11]
 800179e:	e773      	b.n	8001688 <BSP_SD_GetCardInfo+0x184>
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 80017a0:	f7ff fdda 	bl	8001358 <SD_WaitData.constprop.0>
 80017a4:	1e06      	subs	r6, r0, #0
 80017a6:	d000      	beq.n	80017aa <BSP_SD_GetCardInfo+0x2a6>
 80017a8:	e6ce      	b.n	8001548 <BSP_SD_GetCardInfo+0x44>
 80017aa:	0007      	movs	r7, r0
        CID_Tab[counter] = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80017ac:	20ff      	movs	r0, #255	; 0xff
 80017ae:	f000 fc48 	bl	8002042 <SD_IO_WriteByte>
 80017b2:	ad06      	add	r5, sp, #24
 80017b4:	5578      	strb	r0, [r7, r5]
      for (counter = 0; counter < 16; counter++)
 80017b6:	3701      	adds	r7, #1
 80017b8:	2f10      	cmp	r7, #16
 80017ba:	d1f7      	bne.n	80017ac <BSP_SD_GetCardInfo+0x2a8>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80017bc:	20ff      	movs	r0, #255	; 0xff
 80017be:	f000 fc40 	bl	8002042 <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80017c2:	20ff      	movs	r0, #255	; 0xff
 80017c4:	f000 fc3d 	bl	8002042 <SD_IO_WriteByte>
      Cid->ManufacturerID = CID_Tab[0];
 80017c8:	782b      	ldrb	r3, [r5, #0]
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 80017ca:	0021      	movs	r1, r4
      Cid->ManufacturerID = CID_Tab[0];
 80017cc:	7623      	strb	r3, [r4, #24]
      Cid->OEM_AppliID = CID_Tab[1] << 8;
 80017ce:	786b      	ldrb	r3, [r5, #1]
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 80017d0:	3128      	adds	r1, #40	; 0x28
      Cid->OEM_AppliID = CID_Tab[1] << 8;
 80017d2:	021b      	lsls	r3, r3, #8
 80017d4:	8363      	strh	r3, [r4, #26]
      Cid->OEM_AppliID |= CID_Tab[2];
 80017d6:	8b63      	ldrh	r3, [r4, #26]
 80017d8:	78aa      	ldrb	r2, [r5, #2]
 80017da:	4313      	orrs	r3, r2
 80017dc:	8363      	strh	r3, [r4, #26]
      Cid->ProdName1 = CID_Tab[3] << 24;
 80017de:	78eb      	ldrb	r3, [r5, #3]
 80017e0:	061b      	lsls	r3, r3, #24
 80017e2:	61e3      	str	r3, [r4, #28]
      Cid->ProdName1 |= CID_Tab[4] << 16;
 80017e4:	792b      	ldrb	r3, [r5, #4]
 80017e6:	69e2      	ldr	r2, [r4, #28]
 80017e8:	041b      	lsls	r3, r3, #16
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61e3      	str	r3, [r4, #28]
      Cid->ProdName1 |= CID_Tab[5] << 8;
 80017ee:	796b      	ldrb	r3, [r5, #5]
 80017f0:	69e2      	ldr	r2, [r4, #28]
 80017f2:	021b      	lsls	r3, r3, #8
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61e3      	str	r3, [r4, #28]
      Cid->ProdName1 |= CID_Tab[6];
 80017f8:	69e2      	ldr	r2, [r4, #28]
 80017fa:	79ab      	ldrb	r3, [r5, #6]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61e3      	str	r3, [r4, #28]
      Cid->ProdName2 = CID_Tab[7];
 8001800:	79ea      	ldrb	r2, [r5, #7]
 8001802:	1c63      	adds	r3, r4, #1
 8001804:	77da      	strb	r2, [r3, #31]
      Cid->ProdRev = CID_Tab[8];
 8001806:	7a2a      	ldrb	r2, [r5, #8]
 8001808:	1ca3      	adds	r3, r4, #2
 800180a:	77da      	strb	r2, [r3, #31]
      Cid->ProdSN = CID_Tab[9] << 24;
 800180c:	7a6b      	ldrb	r3, [r5, #9]
 800180e:	061b      	lsls	r3, r3, #24
 8001810:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->ProdSN |= CID_Tab[10] << 16;
 8001812:	7aab      	ldrb	r3, [r5, #10]
 8001814:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001816:	041b      	lsls	r3, r3, #16
 8001818:	4313      	orrs	r3, r2
 800181a:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->ProdSN |= CID_Tab[11] << 8;
 800181c:	7aeb      	ldrb	r3, [r5, #11]
 800181e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	4313      	orrs	r3, r2
 8001824:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->ProdSN |= CID_Tab[12];
 8001826:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001828:	7b2b      	ldrb	r3, [r5, #12]
 800182a:	4313      	orrs	r3, r2
 800182c:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 800182e:	7b6b      	ldrb	r3, [r5, #13]
 8001830:	780a      	ldrb	r2, [r1, #0]
 8001832:	0918      	lsrs	r0, r3, #4
 8001834:	4302      	orrs	r2, r0
 8001836:	700a      	strb	r2, [r1, #0]
      Cid->ManufactDate = (CID_Tab[13] & 0x0F) << 8;
 8001838:	22f0      	movs	r2, #240	; 0xf0
 800183a:	021b      	lsls	r3, r3, #8
 800183c:	0112      	lsls	r2, r2, #4
 800183e:	4013      	ands	r3, r2
 8001840:	8563      	strh	r3, [r4, #42]	; 0x2a
      Cid->ManufactDate |= CID_Tab[14];
 8001842:	7baa      	ldrb	r2, [r5, #14]
 8001844:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001846:	4313      	orrs	r3, r2
      Cid->CID_CRC = (CID_Tab[15] & 0xFE) >> 1;
 8001848:	0022      	movs	r2, r4
      Cid->ManufactDate |= CID_Tab[14];
 800184a:	8563      	strh	r3, [r4, #42]	; 0x2a
      Cid->CID_CRC = (CID_Tab[15] & 0xFE) >> 1;
 800184c:	7beb      	ldrb	r3, [r5, #15]
 800184e:	322c      	adds	r2, #44	; 0x2c
 8001850:	085b      	lsrs	r3, r3, #1
 8001852:	7013      	strb	r3, [r2, #0]
      Cid->Reserved2 = 1;
 8001854:	0023      	movs	r3, r4
 8001856:	2201      	movs	r2, #1
 8001858:	332d      	adds	r3, #45	; 0x2d
 800185a:	701a      	strb	r2, [r3, #0]
 800185c:	e675      	b.n	800154a <BSP_SD_GetCardInfo+0x46>
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 800185e:	8923      	ldrh	r3, [r4, #8]
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 8001860:	7b22      	ldrb	r2, [r4, #12]
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 8001862:	049b      	lsls	r3, r3, #18
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 8001864:	0752      	lsls	r2, r2, #29
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 8001866:	0d1b      	lsrs	r3, r3, #20
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 8001868:	0f52      	lsrs	r2, r2, #29
 800186a:	3202      	adds	r2, #2
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 800186c:	3301      	adds	r3, #1
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 800186e:	4093      	lsls	r3, r2
    pCardInfo->LogBlockSize = 512;
 8001870:	2280      	movs	r2, #128	; 0x80
    pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 8001872:	2101      	movs	r1, #1
    pCardInfo->LogBlockSize = 512;
 8001874:	0092      	lsls	r2, r2, #2
 8001876:	63e2      	str	r2, [r4, #60]	; 0x3c
    pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 8001878:	7962      	ldrb	r2, [r4, #5]
 800187a:	0912      	lsrs	r2, r2, #4
 800187c:	4091      	lsls	r1, r2
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 800187e:	4093      	lsls	r3, r2
    pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 8001880:	6361      	str	r1, [r4, #52]	; 0x34
 8001882:	e679      	b.n	8001578 <BSP_SD_GetCardInfo+0x74>
 8001884:	20001342 	.word	0x20001342
 8001888:	ffffc003 	.word	0xffffc003
 800188c:	f000003f 	.word	0xf000003f

08001890 <BSP_SD_ReadBlocks>:
{
 8001890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001892:	b087      	sub	sp, #28
 8001894:	9203      	str	r2, [sp, #12]
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 8001896:	2300      	movs	r3, #0
 8001898:	2280      	movs	r2, #128	; 0x80
 800189a:	ad04      	add	r5, sp, #16
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	0092      	lsls	r2, r2, #2
 80018a0:	33ff      	adds	r3, #255	; 0xff
{
 80018a2:	0007      	movs	r7, r0
 80018a4:	000c      	movs	r4, r1
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 80018a6:	0028      	movs	r0, r5
 80018a8:	2110      	movs	r1, #16
 80018aa:	f7ff fce7 	bl	800127c <SD_SendCmd>
 80018ae:	782e      	ldrb	r6, [r5, #0]
  SD_IO_CSState(1);
 80018b0:	2001      	movs	r0, #1
 80018b2:	f000 fbb5 	bl	8002020 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 80018b6:	20ff      	movs	r0, #255	; 0xff
 80018b8:	f000 fbc3 	bl	8002042 <SD_IO_WriteByte>
  if ( response.r1 != SD_R1_NO_ERROR)
 80018bc:	2e00      	cmp	r6, #0
 80018be:	d002      	beq.n	80018c6 <BSP_SD_ReadBlocks+0x36>
  uint8_t *ptr = NULL;
 80018c0:	2500      	movs	r5, #0
  uint8_t retr = BSP_SD_ERROR;
 80018c2:	2601      	movs	r6, #1
 80018c4:	e014      	b.n	80018f0 <BSP_SD_ReadBlocks+0x60>
  ptr = malloc(sizeof(uint8_t)*BlockSize);
 80018c6:	2080      	movs	r0, #128	; 0x80
 80018c8:	0080      	lsls	r0, r0, #2
 80018ca:	f00b ff33 	bl	800d734 <malloc>
 80018ce:	1e05      	subs	r5, r0, #0
  if( ptr == NULL )
 80018d0:	d0f6      	beq.n	80018c0 <BSP_SD_ReadBlocks+0x30>
  memset(ptr, SD_DUMMY_BYTE, sizeof(uint8_t)*BlockSize);
 80018d2:	2280      	movs	r2, #128	; 0x80
 80018d4:	21ff      	movs	r1, #255	; 0xff
 80018d6:	0092      	lsls	r2, r2, #2
 80018d8:	f00c f94d 	bl	800db76 <memset>
  addr = (ReadAddr * ((flag_SDHC == 1) ? 1 : BlockSize));
 80018dc:	4b24      	ldr	r3, [pc, #144]	; (8001970 <BSP_SD_ReadBlocks+0xe0>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d001      	beq.n	80018e8 <BSP_SD_ReadBlocks+0x58>
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	435c      	muls	r4, r3
  while (NumOfBlocks--)
 80018ea:	9b03      	ldr	r3, [sp, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10d      	bne.n	800190c <BSP_SD_ReadBlocks+0x7c>
  SD_IO_CSState(1);
 80018f0:	2001      	movs	r0, #1
 80018f2:	f000 fb95 	bl	8002020 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 80018f6:	20ff      	movs	r0, #255	; 0xff
 80018f8:	f000 fba3 	bl	8002042 <SD_IO_WriteByte>
  if(ptr != NULL) free(ptr);
 80018fc:	2d00      	cmp	r5, #0
 80018fe:	d002      	beq.n	8001906 <BSP_SD_ReadBlocks+0x76>
 8001900:	0028      	movs	r0, r5
 8001902:	f00b ff21 	bl	800d748 <free>
}
 8001906:	0030      	movs	r0, r6
 8001908:	b007      	add	sp, #28
 800190a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    response = SD_SendCmd(SD_CMD_READ_SINGLE_BLOCK, addr, 0xFF, SD_ANSWER_R1_EXPECTED);
 800190c:	2300      	movs	r3, #0
 800190e:	0022      	movs	r2, r4
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2111      	movs	r1, #17
 8001914:	33ff      	adds	r3, #255	; 0xff
 8001916:	a804      	add	r0, sp, #16
 8001918:	f7ff fcb0 	bl	800127c <SD_SendCmd>
    if ( response.r1 != SD_R1_NO_ERROR)
 800191c:	ab02      	add	r3, sp, #8
 800191e:	7a1b      	ldrb	r3, [r3, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1ce      	bne.n	80018c2 <BSP_SD_ReadBlocks+0x32>
    if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 8001924:	f7ff fd18 	bl	8001358 <SD_WaitData.constprop.0>
 8001928:	2800      	cmp	r0, #0
 800192a:	d1ca      	bne.n	80018c2 <BSP_SD_ReadBlocks+0x32>
      SD_IO_WriteReadData(ptr, (uint8_t*)pData + offset, BlockSize);
 800192c:	2280      	movs	r2, #128	; 0x80
 800192e:	0039      	movs	r1, r7
 8001930:	0092      	lsls	r2, r2, #2
 8001932:	0028      	movs	r0, r5
 8001934:	f000 fb81 	bl	800203a <SD_IO_WriteReadData>
      addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 8001938:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <BSP_SD_ReadBlocks+0xe0>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d113      	bne.n	8001968 <BSP_SD_ReadBlocks+0xd8>
 8001940:	3401      	adds	r4, #1
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001942:	20ff      	movs	r0, #255	; 0xff
 8001944:	f000 fb7d 	bl	8002042 <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001948:	20ff      	movs	r0, #255	; 0xff
 800194a:	f000 fb7a 	bl	8002042 <SD_IO_WriteByte>
    SD_IO_CSState(1);
 800194e:	2001      	movs	r0, #1
 8001950:	f000 fb66 	bl	8002020 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001954:	20ff      	movs	r0, #255	; 0xff
 8001956:	f000 fb74 	bl	8002042 <SD_IO_WriteByte>
 800195a:	9b03      	ldr	r3, [sp, #12]
 800195c:	3b01      	subs	r3, #1
 800195e:	9303      	str	r3, [sp, #12]
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	18ff      	adds	r7, r7, r3
 8001966:	e7c0      	b.n	80018ea <BSP_SD_ReadBlocks+0x5a>
      addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	18e4      	adds	r4, r4, r3
 800196e:	e7e8      	b.n	8001942 <BSP_SD_ReadBlocks+0xb2>
 8001970:	20001342 	.word	0x20001342

08001974 <BSP_SD_WriteBlocks>:
{
 8001974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001976:	b087      	sub	sp, #28
 8001978:	9203      	str	r2, [sp, #12]
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 800197a:	2300      	movs	r3, #0
 800197c:	2280      	movs	r2, #128	; 0x80
 800197e:	ad04      	add	r5, sp, #16
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	0092      	lsls	r2, r2, #2
 8001984:	33ff      	adds	r3, #255	; 0xff
{
 8001986:	0007      	movs	r7, r0
 8001988:	000c      	movs	r4, r1
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 800198a:	0028      	movs	r0, r5
 800198c:	2110      	movs	r1, #16
 800198e:	f7ff fc75 	bl	800127c <SD_SendCmd>
 8001992:	782d      	ldrb	r5, [r5, #0]
  SD_IO_CSState(1);
 8001994:	2001      	movs	r0, #1
 8001996:	f000 fb43 	bl	8002020 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 800199a:	20ff      	movs	r0, #255	; 0xff
 800199c:	f000 fb51 	bl	8002042 <SD_IO_WriteByte>
  if ( response.r1 != SD_R1_NO_ERROR)
 80019a0:	2d00      	cmp	r5, #0
 80019a2:	d009      	beq.n	80019b8 <BSP_SD_WriteBlocks+0x44>
  uint8_t retr = BSP_SD_ERROR;
 80019a4:	2501      	movs	r5, #1
  SD_IO_CSState(1);
 80019a6:	2001      	movs	r0, #1
 80019a8:	f000 fb3a 	bl	8002020 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 80019ac:	20ff      	movs	r0, #255	; 0xff
 80019ae:	f000 fb48 	bl	8002042 <SD_IO_WriteByte>
}
 80019b2:	0028      	movs	r0, r5
 80019b4:	b007      	add	sp, #28
 80019b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ptr = malloc(sizeof(uint8_t)*BlockSize);
 80019b8:	2080      	movs	r0, #128	; 0x80
 80019ba:	0080      	lsls	r0, r0, #2
 80019bc:	f00b feba 	bl	800d734 <malloc>
 80019c0:	1e06      	subs	r6, r0, #0
  if (ptr == NULL)
 80019c2:	d0ef      	beq.n	80019a4 <BSP_SD_WriteBlocks+0x30>
  addr = (WriteAddr * ((flag_SDHC == 1) ? 1 : BlockSize));
 80019c4:	4b30      	ldr	r3, [pc, #192]	; (8001a88 <BSP_SD_WriteBlocks+0x114>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d001      	beq.n	80019d0 <BSP_SD_WriteBlocks+0x5c>
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	435c      	muls	r4, r3
 80019d2:	9702      	str	r7, [sp, #8]
  while (NumOfBlocks--)
 80019d4:	9b03      	ldr	r3, [sp, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d103      	bne.n	80019e2 <BSP_SD_WriteBlocks+0x6e>
  if(ptr != NULL) free(ptr);
 80019da:	0030      	movs	r0, r6
 80019dc:	f00b feb4 	bl	800d748 <free>
 80019e0:	e7e1      	b.n	80019a6 <BSP_SD_WriteBlocks+0x32>
    response = SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK, addr, 0xFF, SD_ANSWER_R1_EXPECTED);
 80019e2:	2300      	movs	r3, #0
 80019e4:	af04      	add	r7, sp, #16
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	0022      	movs	r2, r4
 80019ea:	33ff      	adds	r3, #255	; 0xff
 80019ec:	2118      	movs	r1, #24
 80019ee:	0038      	movs	r0, r7
 80019f0:	f7ff fc44 	bl	800127c <SD_SendCmd>
    if (response.r1 != SD_R1_NO_ERROR)
 80019f4:	783b      	ldrb	r3, [r7, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d144      	bne.n	8001a84 <BSP_SD_WriteBlocks+0x110>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80019fa:	20ff      	movs	r0, #255	; 0xff
 80019fc:	f000 fb21 	bl	8002042 <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001a00:	20ff      	movs	r0, #255	; 0xff
 8001a02:	f000 fb1e 	bl	8002042 <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_TOKEN_START_DATA_SINGLE_BLOCK_WRITE);
 8001a06:	20fe      	movs	r0, #254	; 0xfe
 8001a08:	f000 fb1b 	bl	8002042 <SD_IO_WriteByte>
    SD_IO_WriteReadData((uint8_t*)pData + offset, ptr, BlockSize);
 8001a0c:	2280      	movs	r2, #128	; 0x80
 8001a0e:	0031      	movs	r1, r6
 8001a10:	0092      	lsls	r2, r2, #2
 8001a12:	9802      	ldr	r0, [sp, #8]
 8001a14:	f000 fb11 	bl	800203a <SD_IO_WriteReadData>
    addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <BSP_SD_WriteBlocks+0x114>)
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d12d      	bne.n	8001a7c <BSP_SD_WriteBlocks+0x108>
 8001a20:	3401      	adds	r4, #1
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001a22:	20ff      	movs	r0, #255	; 0xff
 8001a24:	f000 fb0d 	bl	8002042 <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001a28:	20ff      	movs	r0, #255	; 0xff
 8001a2a:	f000 fb0a 	bl	8002042 <SD_IO_WriteByte>
  dataresponse = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001a2e:	20ff      	movs	r0, #255	; 0xff
 8001a30:	f000 fb07 	bl	8002042 <SD_IO_WriteByte>
 8001a34:	0007      	movs	r7, r0
  SD_IO_WriteByte(SD_DUMMY_BYTE); /* read the busy response byte*/
 8001a36:	20ff      	movs	r0, #255	; 0xff
 8001a38:	f000 fb03 	bl	8002042 <SD_IO_WriteByte>
  switch (dataresponse & 0x1F)
 8001a3c:	231f      	movs	r3, #31
 8001a3e:	401f      	ands	r7, r3
 8001a40:	2f05      	cmp	r7, #5
 8001a42:	d11f      	bne.n	8001a84 <BSP_SD_WriteBlocks+0x110>
    SD_IO_CSState(1);
 8001a44:	2001      	movs	r0, #1
 8001a46:	f000 faeb 	bl	8002020 <SD_IO_CSState>
    SD_IO_CSState(0);
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f000 fae8 	bl	8002020 <SD_IO_CSState>
    while (SD_IO_WriteByte(SD_DUMMY_BYTE) != 0xFF);
 8001a50:	20ff      	movs	r0, #255	; 0xff
 8001a52:	f000 faf6 	bl	8002042 <SD_IO_WriteByte>
 8001a56:	0007      	movs	r7, r0
 8001a58:	28ff      	cmp	r0, #255	; 0xff
 8001a5a:	d1f9      	bne.n	8001a50 <BSP_SD_WriteBlocks+0xdc>
    SD_IO_CSState(1);
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	f000 fadf 	bl	8002020 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001a62:	0038      	movs	r0, r7
 8001a64:	f000 faed 	bl	8002042 <SD_IO_WriteByte>
 8001a68:	2280      	movs	r2, #128	; 0x80
 8001a6a:	0092      	lsls	r2, r2, #2
 8001a6c:	4694      	mov	ip, r2
 8001a6e:	9b03      	ldr	r3, [sp, #12]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	9303      	str	r3, [sp, #12]
 8001a74:	9b02      	ldr	r3, [sp, #8]
 8001a76:	4463      	add	r3, ip
 8001a78:	9302      	str	r3, [sp, #8]
 8001a7a:	e7ab      	b.n	80019d4 <BSP_SD_WriteBlocks+0x60>
    addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	18e4      	adds	r4, r4, r3
 8001a82:	e7ce      	b.n	8001a22 <BSP_SD_WriteBlocks+0xae>
  uint8_t retr = BSP_SD_ERROR;
 8001a84:	2501      	movs	r5, #1
 8001a86:	e7a8      	b.n	80019da <BSP_SD_WriteBlocks+0x66>
 8001a88:	20001342 	.word	0x20001342

08001a8c <BSP_SD_GetCardState>:
{
 8001a8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  retr = SD_SendCmd(SD_CMD_SEND_STATUS, 0, 0xFF, SD_ANSWER_R2_EXPECTED);
 8001a8e:	2302      	movs	r3, #2
 8001a90:	ac02      	add	r4, sp, #8
 8001a92:	2200      	movs	r2, #0
 8001a94:	210d      	movs	r1, #13
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	0020      	movs	r0, r4
 8001a9a:	33fd      	adds	r3, #253	; 0xfd
 8001a9c:	f7ff fbee 	bl	800127c <SD_SendCmd>
  SD_IO_CSState(1);
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	f000 fabd 	bl	8002020 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8001aa6:	20ff      	movs	r0, #255	; 0xff
 8001aa8:	f000 facb 	bl	8002042 <SD_IO_WriteByte>
  if(( retr.r1 == SD_R1_NO_ERROR) && ( retr.r2 == SD_R2_NO_ERROR))
 8001aac:	7823      	ldrb	r3, [r4, #0]
 8001aae:	2001      	movs	r0, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d103      	bne.n	8001abc <BSP_SD_GetCardState+0x30>
 8001ab4:	7860      	ldrb	r0, [r4, #1]
 8001ab6:	1e43      	subs	r3, r0, #1
 8001ab8:	4198      	sbcs	r0, r3
 8001aba:	b2c0      	uxtb	r0, r0
}
 8001abc:	b004      	add	sp, #16
 8001abe:	bd10      	pop	{r4, pc}

08001ac0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <HAL_MspInit+0x2c>)
{
 8001ac4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001ac8:	4301      	orrs	r1, r0
 8001aca:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8001acc:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ace:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad0:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad2:	4002      	ands	r2, r0
 8001ad4:	9200      	str	r2, [sp, #0]
 8001ad6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ada:	430a      	orrs	r2, r1
 8001adc:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae0:	400b      	ands	r3, r1
 8001ae2:	9301      	str	r3, [sp, #4]
 8001ae4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae6:	b002      	add	sp, #8
 8001ae8:	4770      	bx	lr
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	40021000 	.word	0x40021000

08001af0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001af0:	b510      	push	{r4, lr}
 8001af2:	0004      	movs	r4, r0
 8001af4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af6:	2214      	movs	r2, #20
 8001af8:	2100      	movs	r1, #0
 8001afa:	a803      	add	r0, sp, #12
 8001afc:	f00c f83b 	bl	800db76 <memset>
  if(hadc->Instance==ADC1)
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <HAL_ADC_MspInit+0x50>)
 8001b02:	6822      	ldr	r2, [r4, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d119      	bne.n	8001b3c <HAL_ADC_MspInit+0x4c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b08:	2080      	movs	r0, #128	; 0x80
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <HAL_ADC_MspInit+0x54>)
 8001b0c:	0340      	lsls	r0, r0, #13
 8001b0e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001b10:	4301      	orrs	r1, r0
 8001b12:	6419      	str	r1, [r3, #64]	; 0x40
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b14:	2101      	movs	r1, #1
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b18:	4002      	ands	r2, r0
 8001b1a:	9201      	str	r2, [sp, #4]
 8001b1c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b20:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b22:	430a      	orrs	r2, r1
 8001b24:	635a      	str	r2, [r3, #52]	; 0x34
 8001b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2a:	400b      	ands	r3, r1
 8001b2c:	9302      	str	r3, [sp, #8]
 8001b2e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b30:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b34:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b36:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b38:	f000 fdc6 	bl	80026c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b3c:	b008      	add	sp, #32
 8001b3e:	bd10      	pop	{r4, pc}
 8001b40:	40012400 	.word	0x40012400
 8001b44:	40021000 	.word	0x40021000

08001b48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b48:	b510      	push	{r4, lr}
 8001b4a:	0004      	movs	r4, r0
 8001b4c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4e:	2214      	movs	r2, #20
 8001b50:	2100      	movs	r1, #0
 8001b52:	a803      	add	r0, sp, #12
 8001b54:	f00c f80f 	bl	800db76 <memset>
  if(hi2c->Instance==I2C1)
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_I2C_MspInit+0x5c>)
 8001b5a:	6822      	ldr	r2, [r4, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d11e      	bne.n	8001b9e <HAL_I2C_MspInit+0x56>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b60:	2102      	movs	r1, #2
 8001b62:	4c11      	ldr	r4, [pc, #68]	; (8001ba8 <HAL_I2C_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b64:	4811      	ldr	r0, [pc, #68]	; (8001bac <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b66:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	6362      	str	r2, [r4, #52]	; 0x34
 8001b6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001b6e:	400b      	ands	r3, r1
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001b74:	2390      	movs	r3, #144	; 0x90
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b7a:	2312      	movs	r3, #18
 8001b7c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b7e:	3b11      	subs	r3, #17
 8001b80:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b82:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001b84:	3305      	adds	r3, #5
 8001b86:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b88:	f000 fd9e 	bl	80026c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b8c:	2180      	movs	r1, #128	; 0x80
 8001b8e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001b90:	0389      	lsls	r1, r1, #14
 8001b92:	430a      	orrs	r2, r1
 8001b94:	63e2      	str	r2, [r4, #60]	; 0x3c
 8001b96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b98:	400b      	ands	r3, r1
 8001b9a:	9302      	str	r3, [sp, #8]
 8001b9c:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b9e:	b008      	add	sp, #32
 8001ba0:	bd10      	pop	{r4, pc}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	40005400 	.word	0x40005400
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	50000400 	.word	0x50000400

08001bb0 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8001bb0:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <HAL_RTC_MspInit+0x2c>)
 8001bb2:	6802      	ldr	r2, [r0, #0]
{
 8001bb4:	b082      	sub	sp, #8
  if(hrtc->Instance==RTC)
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d10e      	bne.n	8001bd8 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bba:	2280      	movs	r2, #128	; 0x80
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <HAL_RTC_MspInit+0x30>)
 8001bbe:	0212      	lsls	r2, r2, #8
 8001bc0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001bc2:	430a      	orrs	r2, r1
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001bc4:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_RTC_ENABLE();
 8001bc6:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001bc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bca:	00c9      	lsls	r1, r1, #3
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd2:	400b      	ands	r3, r1
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001bd8:	b002      	add	sp, #8
 8001bda:	4770      	bx	lr
 8001bdc:	40002800 	.word	0x40002800
 8001be0:	40021000 	.word	0x40021000

08001be4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001be4:	b510      	push	{r4, lr}
 8001be6:	0004      	movs	r4, r0
 8001be8:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bea:	2214      	movs	r2, #20
 8001bec:	2100      	movs	r1, #0
 8001bee:	a805      	add	r0, sp, #20
 8001bf0:	f00b ffc1 	bl	800db76 <memset>
  if(hspi->Instance==SPI1)
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	4a29      	ldr	r2, [pc, #164]	; (8001c9c <HAL_SPI_MspInit+0xb8>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d132      	bne.n	8001c62 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bfc:	2080      	movs	r0, #128	; 0x80
 8001bfe:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <HAL_SPI_MspInit+0xbc>)
 8001c00:	0140      	lsls	r0, r0, #5
 8001c02:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PD8     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2402      	movs	r4, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c06:	4301      	orrs	r1, r0
 8001c08:	6419      	str	r1, [r3, #64]	; 0x40
 8001c0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c0c:	4002      	ands	r2, r0
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c0e:	2008      	movs	r0, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c10:	9200      	str	r2, [sp, #0]
 8001c12:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c16:	4301      	orrs	r1, r0
 8001c18:	6359      	str	r1, [r3, #52]	; 0x34
 8001c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c1c:	4002      	ands	r2, r0
 8001c1e:	9201      	str	r2, [sp, #4]
 8001c20:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	2201      	movs	r2, #1
 8001c24:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c26:	481f      	ldr	r0, [pc, #124]	; (8001ca4 <HAL_SPI_MspInit+0xc0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c28:	4311      	orrs	r1, r2
 8001c2a:	6359      	str	r1, [r3, #52]	; 0x34
 8001c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c2e:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c30:	4013      	ands	r3, r2
 8001c32:	9302      	str	r3, [sp, #8]
 8001c34:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c36:	2380      	movs	r3, #128	; 0x80
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8001c3e:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c40:	f000 fd42 	bl	80026c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c44:	23c0      	movs	r3, #192	; 0xc0
 8001c46:	015b      	lsls	r3, r3, #5
 8001c48:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4a:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c52:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001c54:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c56:	a905      	add	r1, sp, #20
 8001c58:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5a:	f000 fd35 	bl	80026c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c5e:	b00a      	add	sp, #40	; 0x28
 8001c60:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8001c62:	4a11      	ldr	r2, [pc, #68]	; (8001ca8 <HAL_SPI_MspInit+0xc4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d1fa      	bne.n	8001c5e <HAL_SPI_MspInit+0x7a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c68:	2080      	movs	r0, #128	; 0x80
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <HAL_SPI_MspInit+0xbc>)
 8001c6c:	01c0      	lsls	r0, r0, #7
 8001c6e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001c70:	4301      	orrs	r1, r0
 8001c72:	63d9      	str	r1, [r3, #60]	; 0x3c
 8001c74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c76:	4002      	ands	r2, r0
 8001c78:	9203      	str	r2, [sp, #12]
 8001c7a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c80:	480a      	ldr	r0, [pc, #40]	; (8001cac <HAL_SPI_MspInit+0xc8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c82:	4311      	orrs	r1, r2
 8001c84:	6359      	str	r1, [r3, #52]	; 0x34
 8001c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c88:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	9304      	str	r3, [sp, #16]
 8001c8e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001c90:	23e0      	movs	r3, #224	; 0xe0
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	9206      	str	r2, [sp, #24]
 8001c98:	e7df      	b.n	8001c5a <HAL_SPI_MspInit+0x76>
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	40013000 	.word	0x40013000
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	50000c00 	.word	0x50000c00
 8001ca8:	40003800 	.word	0x40003800
 8001cac:	50000400 	.word	0x50000400

08001cb0 <HAL_SPI_MspDeInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
  if(hspi->Instance==SPI1)
 8001cb0:	6803      	ldr	r3, [r0, #0]
 8001cb2:	4a10      	ldr	r2, [pc, #64]	; (8001cf4 <HAL_SPI_MspDeInit+0x44>)
{
 8001cb4:	b510      	push	{r4, lr}
  if(hspi->Instance==SPI1)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d110      	bne.n	8001cdc <HAL_SPI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001cba:	4a0f      	ldr	r2, [pc, #60]	; (8001cf8 <HAL_SPI_MspDeInit+0x48>)
 8001cbc:	490f      	ldr	r1, [pc, #60]	; (8001cfc <HAL_SPI_MspDeInit+0x4c>)
 8001cbe:	6c13      	ldr	r3, [r2, #64]	; 0x40
    /**SPI1 GPIO Configuration    
    PD8     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI 
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8);
 8001cc0:	480f      	ldr	r0, [pc, #60]	; (8001d00 <HAL_SPI_MspDeInit+0x50>)
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001cc2:	400b      	ands	r3, r1
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8);
 8001cc4:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001cc6:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8);
 8001cc8:	0049      	lsls	r1, r1, #1
 8001cca:	f000 fda5 	bl	8002818 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8001cce:	21c0      	movs	r1, #192	; 0xc0
 8001cd0:	20a0      	movs	r0, #160	; 0xa0
 8001cd2:	0149      	lsls	r1, r1, #5
 8001cd4:	05c0      	lsls	r0, r0, #23
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8001cd6:	f000 fd9f 	bl	8002818 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8001cda:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8001cdc:	4a09      	ldr	r2, [pc, #36]	; (8001d04 <HAL_SPI_MspDeInit+0x54>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d1fb      	bne.n	8001cda <HAL_SPI_MspDeInit+0x2a>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8001ce2:	4a05      	ldr	r2, [pc, #20]	; (8001cf8 <HAL_SPI_MspDeInit+0x48>)
 8001ce4:	4908      	ldr	r1, [pc, #32]	; (8001d08 <HAL_SPI_MspDeInit+0x58>)
 8001ce6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8001ce8:	4808      	ldr	r0, [pc, #32]	; (8001d0c <HAL_SPI_MspDeInit+0x5c>)
    __HAL_RCC_SPI2_CLK_DISABLE();
 8001cea:	400b      	ands	r3, r1
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8001cec:	21e0      	movs	r1, #224	; 0xe0
    __HAL_RCC_SPI2_CLK_DISABLE();
 8001cee:	63d3      	str	r3, [r2, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8001cf0:	0209      	lsls	r1, r1, #8
 8001cf2:	e7f0      	b.n	8001cd6 <HAL_SPI_MspDeInit+0x26>
 8001cf4:	40013000 	.word	0x40013000
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	ffffefff 	.word	0xffffefff
 8001d00:	50000c00 	.word	0x50000c00
 8001d04:	40003800 	.word	0x40003800
 8001d08:	ffffbfff 	.word	0xffffbfff
 8001d0c:	50000400 	.word	0x50000400

08001d10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d10:	b510      	push	{r4, lr}
 8001d12:	0004      	movs	r4, r0
 8001d14:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d16:	2214      	movs	r2, #20
 8001d18:	2100      	movs	r1, #0
 8001d1a:	a803      	add	r0, sp, #12
 8001d1c:	f00b ff2b 	bl	800db76 <memset>
  if(htim_base->Instance==TIM3)
 8001d20:	6823      	ldr	r3, [r4, #0]
 8001d22:	4a18      	ldr	r2, [pc, #96]	; (8001d84 <HAL_TIM_Base_MspInit+0x74>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d10a      	bne.n	8001d3e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d28:	2002      	movs	r0, #2
 8001d2a:	4a17      	ldr	r2, [pc, #92]	; (8001d88 <HAL_TIM_Base_MspInit+0x78>)
 8001d2c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d2e:	4301      	orrs	r1, r0
 8001d30:	63d1      	str	r1, [r2, #60]	; 0x3c
 8001d32:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8001d34:	4003      	ands	r3, r0
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001d3a:	b008      	add	sp, #32
 8001d3c:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM14)
 8001d3e:	4a13      	ldr	r2, [pc, #76]	; (8001d8c <HAL_TIM_Base_MspInit+0x7c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d1fa      	bne.n	8001d3a <HAL_TIM_Base_MspInit+0x2a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001d44:	2080      	movs	r0, #128	; 0x80
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <HAL_TIM_Base_MspInit+0x78>)
 8001d48:	0200      	lsls	r0, r0, #8
 8001d4a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001d4c:	4301      	orrs	r1, r0
 8001d4e:	6419      	str	r1, [r3, #64]	; 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d50:	2104      	movs	r1, #4
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001d52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d54:	4002      	ands	r2, r0
 8001d56:	9201      	str	r2, [sp, #4]
 8001d58:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5c:	480c      	ldr	r0, [pc, #48]	; (8001d90 <HAL_TIM_Base_MspInit+0x80>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	635a      	str	r2, [r3, #52]	; 0x34
 8001d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d64:	2201      	movs	r2, #1
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d66:	400b      	ands	r3, r1
 8001d68:	9302      	str	r3, [sp, #8]
 8001d6a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	015b      	lsls	r3, r3, #5
 8001d70:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d74:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d78:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM14;
 8001d7a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7c:	f000 fca4 	bl	80026c8 <HAL_GPIO_Init>
}
 8001d80:	e7db      	b.n	8001d3a <HAL_TIM_Base_MspInit+0x2a>
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	40000400 	.word	0x40000400
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40002000 	.word	0x40002000
 8001d90:	50000800 	.word	0x50000800

08001d94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d94:	b510      	push	{r4, lr}
 8001d96:	0004      	movs	r4, r0
 8001d98:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9a:	2214      	movs	r2, #20
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	a801      	add	r0, sp, #4
 8001da0:	f00b fee9 	bl	800db76 <memset>
  if(htim->Instance==TIM3)
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <HAL_TIM_MspPostInit+0x44>)
 8001da6:	6822      	ldr	r2, [r4, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d112      	bne.n	8001dd2 <HAL_TIM_MspPostInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dac:	2301      	movs	r3, #1
 8001dae:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = PWM_1_Pin|PWM_LCD_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db0:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db2:	6b51      	ldr	r1, [r2, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db4:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	4319      	orrs	r1, r3
 8001db8:	6351      	str	r1, [r2, #52]	; 0x34
 8001dba:	6b52      	ldr	r2, [r2, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbc:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	9200      	str	r2, [sp, #0]
 8001dc2:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = PWM_1_Pin|PWM_LCD_Pin;
 8001dc4:	22c0      	movs	r2, #192	; 0xc0
 8001dc6:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	3abe      	subs	r2, #190	; 0xbe
 8001dca:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001dcc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dce:	f000 fc7b 	bl	80026c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001dd2:	b006      	add	sp, #24
 8001dd4:	bd10      	pop	{r4, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	40000400 	.word	0x40000400
 8001ddc:	40021000 	.word	0x40021000

08001de0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001de0:	b510      	push	{r4, lr}
 8001de2:	0004      	movs	r4, r0
 8001de4:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de6:	2214      	movs	r2, #20
 8001de8:	2100      	movs	r1, #0
 8001dea:	a805      	add	r0, sp, #20
 8001dec:	f00b fec3 	bl	800db76 <memset>
  if(huart->Instance==USART2)
 8001df0:	6823      	ldr	r3, [r4, #0]
 8001df2:	4a1f      	ldr	r2, [pc, #124]	; (8001e70 <HAL_UART_MspInit+0x90>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d11d      	bne.n	8001e34 <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001df8:	2080      	movs	r0, #128	; 0x80
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <HAL_UART_MspInit+0x94>)
 8001dfc:	0280      	lsls	r0, r0, #10
 8001dfe:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001e00:	4301      	orrs	r1, r0
 8001e02:	63d9      	str	r1, [r3, #60]	; 0x3c
 8001e04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e06:	4002      	ands	r2, r0
 8001e08:	9201      	str	r2, [sp, #4]
 8001e0a:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e10:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e12:	4311      	orrs	r1, r2
 8001e14:	6359      	str	r1, [r3, #52]	; 0x34
 8001e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e18:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	9302      	str	r3, [sp, #8]
 8001e1e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e20:	230c      	movs	r3, #12
 8001e22:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	3b0a      	subs	r3, #10
 8001e26:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001e28:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2c:	f000 fc4c 	bl	80026c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e30:	b00a      	add	sp, #40	; 0x28
 8001e32:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 8001e34:	4a10      	ldr	r2, [pc, #64]	; (8001e78 <HAL_UART_MspInit+0x98>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d1fa      	bne.n	8001e30 <HAL_UART_MspInit+0x50>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e3a:	2080      	movs	r0, #128	; 0x80
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <HAL_UART_MspInit+0x94>)
 8001e3e:	02c0      	lsls	r0, r0, #11
 8001e40:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001e42:	4301      	orrs	r1, r0
 8001e44:	63d9      	str	r1, [r3, #60]	; 0x3c
 8001e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e48:	4002      	ands	r2, r0
 8001e4a:	9203      	str	r2, [sp, #12]
 8001e4c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4e:	2202      	movs	r2, #2
 8001e50:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e52:	480a      	ldr	r0, [pc, #40]	; (8001e7c <HAL_UART_MspInit+0x9c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e54:	4311      	orrs	r1, r2
 8001e56:	6359      	str	r1, [r3, #52]	; 0x34
 8001e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5a:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	9304      	str	r3, [sp, #16]
 8001e60:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e62:	23c0      	movs	r3, #192	; 0xc0
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8001e68:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8001e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8001e6e:	e7dd      	b.n	8001e2c <HAL_UART_MspInit+0x4c>
 8001e70:	40004400 	.word	0x40004400
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40004800 	.word	0x40004800
 8001e7c:	50000400 	.word	0x50000400

08001e80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e80:	b510      	push	{r4, lr}
 8001e82:	0001      	movs	r1, r0
 8001e84:	b086      	sub	sp, #24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0); 
 8001e86:	2200      	movs	r2, #0
 8001e88:	2011      	movs	r0, #17
 8001e8a:	f000 fbe1 	bl	8002650 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn); 
 8001e8e:	2011      	movs	r0, #17
 8001e90:	f000 fc0e 	bl	80026b0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e94:	2010      	movs	r0, #16
 8001e96:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <HAL_InitTick+0x68>)
 8001e98:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001e9a:	4301      	orrs	r1, r0
 8001e9c:	63d1      	str	r1, [r2, #60]	; 0x3c
 8001e9e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ea0:	4669      	mov	r1, sp
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ea2:	4003      	ands	r3, r0
 8001ea4:	9301      	str	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ea6:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ea8:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001eaa:	f001 f931 	bl	8003110 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001eae:	f001 f91b 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001eb2:	4c0e      	ldr	r4, [pc, #56]	; (8001eec <HAL_InitTick+0x6c>)
 8001eb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <HAL_InitTick+0x70>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001eb6:	490f      	ldr	r1, [pc, #60]	; (8001ef4 <HAL_InitTick+0x74>)
  htim6.Instance = TIM6;
 8001eb8:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001eba:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <HAL_InitTick+0x78>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001ebc:	0040      	lsls	r0, r0, #1
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001ebe:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001ec0:	f7fe f94e 	bl	8000160 <__udivsi3>
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 8001ec4:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001ec6:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ec8:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001eca:	0020      	movs	r0, r4
  htim6.Init.ClockDivision = 0;
 8001ecc:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ece:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001ed0:	f002 f808 	bl	8003ee4 <HAL_TIM_Base_Init>
 8001ed4:	0003      	movs	r3, r0
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001ed6:	2001      	movs	r0, #1
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d102      	bne.n	8001ee2 <HAL_InitTick+0x62>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001edc:	0020      	movs	r0, r4
 8001ede:	f001 feeb 	bl	8003cb8 <HAL_TIM_Base_Start_IT>
}
 8001ee2:	b006      	add	sp, #24
 8001ee4:	bd10      	pop	{r4, pc}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	20004bc0 	.word	0x20004bc0
 8001ef0:	40001000 	.word	0x40001000
 8001ef4:	000f4240 	.word	0x000f4240
 8001ef8:	000003e7 	.word	0x000003e7

08001efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001efc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001efe:	f001 f935 	bl	800316c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f02:	bd10      	pop	{r4, pc}

08001f04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f04:	e7fe      	b.n	8001f04 <HardFault_Handler>

08001f06 <SVC_Handler>:
 8001f06:	4770      	bx	lr

08001f08 <PendSV_Handler>:
 8001f08:	4770      	bx	lr

08001f0a <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f0a:	4770      	bx	lr

08001f0c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001f0c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f0e:	4802      	ldr	r0, [pc, #8]	; (8001f18 <TIM6_IRQHandler+0xc>)
 8001f10:	f001 feec 	bl	8003cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001f14:	bd10      	pop	{r4, pc}
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	20004bc0 	.word	0x20004bc0

08001f1c <SPIx_Init>:
/**
  * @brief  Initialize SPI HAL.
  * @retval None
  */
static void SPIx_Init(void)
{
 8001f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(HAL_SPI_GetState(&hnucleo_Spi) == HAL_SPI_STATE_RESET)
 8001f1e:	4c30      	ldr	r4, [pc, #192]	; (8001fe0 <SPIx_Init+0xc4>)
{
 8001f20:	b089      	sub	sp, #36	; 0x24
  if(HAL_SPI_GetState(&hnucleo_Spi) == HAL_SPI_STATE_RESET)
 8001f22:	0020      	movs	r0, r4
 8001f24:	f001 fd8e 	bl	8003a44 <HAL_SPI_GetState>
 8001f28:	1e06      	subs	r6, r0, #0
 8001f2a:	d156      	bne.n	8001fda <SPIx_Init+0xbe>
  {
    /* SPI Config */
    hnucleo_Spi.Instance = NUCLEO_SPIx;
 8001f2c:	4b2d      	ldr	r3, [pc, #180]	; (8001fe4 <SPIx_Init+0xc8>)
          - SD card SPI interface max baudrate is 25MHz for write/read
          - PCLK1 max frequency is 48 MHz 
       */ 
    hnucleo_Spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
    hnucleo_Spi.Init.Direction = SPI_DIRECTION_2LINES;
    hnucleo_Spi.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001f2e:	2701      	movs	r7, #1
    hnucleo_Spi.Instance = NUCLEO_SPIx;
 8001f30:	6023      	str	r3, [r4, #0]
    hnucleo_Spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f32:	2308      	movs	r3, #8
 8001f34:	61e3      	str	r3, [r4, #28]
    hnucleo_Spi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001f36:	3b06      	subs	r3, #6
 8001f38:	6123      	str	r3, [r4, #16]
    hnucleo_Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    hnucleo_Spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    hnucleo_Spi.Init.CRCPolynomial = 7;
 8001f3a:	3305      	adds	r3, #5
 8001f3c:	62e3      	str	r3, [r4, #44]	; 0x2c
    hnucleo_Spi.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f3e:	23e0      	movs	r3, #224	; 0xe0
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	60e3      	str	r3, [r4, #12]
    hnucleo_Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
    hnucleo_Spi.Init.NSS = SPI_NSS_SOFT;
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	009b      	lsls	r3, r3, #2
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001f48:	0001      	movs	r1, r0
    hnucleo_Spi.Init.Direction = SPI_DIRECTION_2LINES;
 8001f4a:	60a0      	str	r0, [r4, #8]
    hnucleo_Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f4c:	62a0      	str	r0, [r4, #40]	; 0x28
    hnucleo_Spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f4e:	6320      	str	r0, [r4, #48]	; 0x30
    hnucleo_Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f50:	6220      	str	r0, [r4, #32]
    hnucleo_Spi.Init.NSS = SPI_NSS_SOFT;
 8001f52:	61a3      	str	r3, [r4, #24]
    hnucleo_Spi.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f54:	6260      	str	r0, [r4, #36]	; 0x24
    hnucleo_Spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    hnucleo_Spi.Init.Mode = SPI_MODE_MASTER;
 8001f56:	3bfc      	subs	r3, #252	; 0xfc
    hnucleo_Spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001f58:	6360      	str	r0, [r4, #52]	; 0x34
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001f5a:	2214      	movs	r2, #20
 8001f5c:	a803      	add	r0, sp, #12
    hnucleo_Spi.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001f5e:	6167      	str	r7, [r4, #20]
    hnucleo_Spi.Init.Mode = SPI_MODE_MASTER;
 8001f60:	6063      	str	r3, [r4, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001f62:	f00b fe08 	bl	800db76 <memset>
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 8001f66:	2208      	movs	r2, #8
 8001f68:	4d1f      	ldr	r5, [pc, #124]	; (8001fe8 <SPIx_Init+0xcc>)
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &gpioinitstruct);
 8001f6a:	a903      	add	r1, sp, #12
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 8001f6c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &gpioinitstruct);
 8001f6e:	481f      	ldr	r0, [pc, #124]	; (8001fec <SPIx_Init+0xd0>)
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 8001f70:	4313      	orrs	r3, r2
 8001f72:	636b      	str	r3, [r5, #52]	; 0x34
 8001f74:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001f76:	4013      	ands	r3, r2
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	9b00      	ldr	r3, [sp, #0]
  NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 8001f7c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001f7e:	433b      	orrs	r3, r7
 8001f80:	636b      	str	r3, [r5, #52]	; 0x34
 8001f82:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  gpioinitstruct.Pull  = GPIO_PULLUP;
 8001f84:	9705      	str	r7, [sp, #20]
  NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 8001f86:	403b      	ands	r3, r7
 8001f88:	9301      	str	r3, [sp, #4]
 8001f8a:	9b01      	ldr	r3, [sp, #4]
  gpioinitstruct.Pin = NUCLEO_SPIx_SCK_PIN;
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	9303      	str	r3, [sp, #12]
  gpioinitstruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	3bfe      	subs	r3, #254	; 0xfe
 8001f94:	9304      	str	r3, [sp, #16]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f96:	19db      	adds	r3, r3, r7
 8001f98:	9306      	str	r3, [sp, #24]
  gpioinitstruct.Alternate = NUCLEO_SPIx_SCK_AF;
 8001f9a:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &gpioinitstruct);
 8001f9c:	f000 fb94 	bl	80026c8 <HAL_GPIO_Init>
  gpioinitstruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 8001fa0:	2780      	movs	r7, #128	; 0x80
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8001fa2:	20a0      	movs	r0, #160	; 0xa0
  gpioinitstruct.Pull  = GPIO_PULLDOWN;
 8001fa4:	2302      	movs	r3, #2
  gpioinitstruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 8001fa6:	017f      	lsls	r7, r7, #5
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8001fa8:	a903      	add	r1, sp, #12
 8001faa:	05c0      	lsls	r0, r0, #23
  gpioinitstruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 8001fac:	9703      	str	r7, [sp, #12]
  gpioinitstruct.Pull  = GPIO_PULLDOWN;
 8001fae:	9305      	str	r3, [sp, #20]
  gpioinitstruct.Alternate = NUCLEO_SPIx_MISO_MOSI_AF;
 8001fb0:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8001fb2:	f000 fb89 	bl	80026c8 <HAL_GPIO_Init>
  gpioinitstruct.Pin = NUCLEO_SPIx_MISO_PIN;
 8001fb6:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8001fb8:	20a0      	movs	r0, #160	; 0xa0
  gpioinitstruct.Pin = NUCLEO_SPIx_MISO_PIN;
 8001fba:	011b      	lsls	r3, r3, #4
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8001fbc:	05c0      	lsls	r0, r0, #23
 8001fbe:	a903      	add	r1, sp, #12
  gpioinitstruct.Pin = NUCLEO_SPIx_MISO_PIN;
 8001fc0:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8001fc2:	f000 fb81 	bl	80026c8 <HAL_GPIO_Init>
  NUCLEO_SPIx_CLK_ENABLE();
 8001fc6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    
    SPIx_MspInit();
    HAL_SPI_Init(&hnucleo_Spi);
 8001fc8:	0020      	movs	r0, r4
  NUCLEO_SPIx_CLK_ENABLE();
 8001fca:	433b      	orrs	r3, r7
 8001fcc:	642b      	str	r3, [r5, #64]	; 0x40
 8001fce:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001fd0:	401f      	ands	r7, r3
 8001fd2:	9702      	str	r7, [sp, #8]
 8001fd4:	9b02      	ldr	r3, [sp, #8]
    HAL_SPI_Init(&hnucleo_Spi);
 8001fd6:	f001 fabf 	bl	8003558 <HAL_SPI_Init>
  }
}
 8001fda:	b009      	add	sp, #36	; 0x24
 8001fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	20001344 	.word	0x20001344
 8001fe4:	40013000 	.word	0x40013000
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	50000c00 	.word	0x50000c00

08001ff0 <SPIx_WriteReadData>:
  * @param  DataOut: read value
  * @param  DataLength: value data length
  * @retval None
  */
static void SPIx_WriteReadData(const uint8_t *DataIn, uint8_t *DataOut, uint16_t DataLength)
{
 8001ff0:	b513      	push	{r0, r1, r4, lr}
 8001ff2:	0013      	movs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_SPI_TransmitReceive(&hnucleo_Spi, (uint8_t*) DataIn, DataOut, DataLength, SpixTimeout);
 8001ff4:	4a08      	ldr	r2, [pc, #32]	; (8002018 <SPIx_WriteReadData+0x28>)
 8001ff6:	4c09      	ldr	r4, [pc, #36]	; (800201c <SPIx_WriteReadData+0x2c>)
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	9200      	str	r2, [sp, #0]
 8001ffc:	000a      	movs	r2, r1
 8001ffe:	0001      	movs	r1, r0
 8002000:	0020      	movs	r0, r4
 8002002:	f001 fbed 	bl	80037e0 <HAL_SPI_TransmitReceive>

  /* Check the communication status */
  if(status != HAL_OK)
 8002006:	2800      	cmp	r0, #0
 8002008:	d004      	beq.n	8002014 <SPIx_WriteReadData+0x24>
  * @retval None
  */
static void SPIx_Error (void)
{
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&hnucleo_Spi);
 800200a:	0020      	movs	r0, r4
 800200c:	f001 fb02 	bl	8003614 <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI communication BUS */
  SPIx_Init();
 8002010:	f7ff ff84 	bl	8001f1c <SPIx_Init>
}
 8002014:	bd13      	pop	{r0, r1, r4, pc}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	20000000 	.word	0x20000000
 800201c:	20001344 	.word	0x20001344

08002020 <SD_IO_CSState>:
  * @brief  Set the SD_CS pin.
  * @param  val: pin value.
  * @retval None
  */
void SD_IO_CSState(uint8_t val)
{
 8002020:	b510      	push	{r4, lr}
 8002022:	0002      	movs	r2, r0
  if(val == 1) 
 8002024:	2801      	cmp	r0, #1
 8002026:	d106      	bne.n	8002036 <SD_IO_CSState+0x16>
  {
    SD_CS_HIGH();
  }
  else
  {
    SD_CS_LOW();
 8002028:	2180      	movs	r1, #128	; 0x80
 800202a:	20a0      	movs	r0, #160	; 0xa0
 800202c:	00c9      	lsls	r1, r1, #3
 800202e:	05c0      	lsls	r0, r0, #23
 8002030:	f000 fc6e 	bl	8002910 <HAL_GPIO_WritePin>
  }
}
 8002034:	bd10      	pop	{r4, pc}
    SD_CS_LOW();
 8002036:	2200      	movs	r2, #0
 8002038:	e7f6      	b.n	8002028 <SD_IO_CSState+0x8>

0800203a <SD_IO_WriteReadData>:
  * @param  DataOut: Pointer to data buffer for read data
  * @param  DataLength: number of bytes to write
  * @retval None
  */
void SD_IO_WriteReadData(const uint8_t *DataIn, uint8_t *DataOut, uint16_t DataLength)
{
 800203a:	b510      	push	{r4, lr}
  /* Send the byte */
  SPIx_WriteReadData(DataIn, DataOut, DataLength);
 800203c:	f7ff ffd8 	bl	8001ff0 <SPIx_WriteReadData>
}
 8002040:	bd10      	pop	{r4, pc}

08002042 <SD_IO_WriteByte>:
  * @brief  Write a byte on the SD.
  * @param  Data: byte to send.
  * @retval Data written
  */
uint8_t SD_IO_WriteByte(uint8_t Data)
{
 8002042:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t tmp;

  /* Send the byte */
  SPIx_WriteReadData(&Data,&tmp,1);
 8002044:	240f      	movs	r4, #15
{
 8002046:	466b      	mov	r3, sp
  SPIx_WriteReadData(&Data,&tmp,1);
 8002048:	446c      	add	r4, sp
{
 800204a:	71d8      	strb	r0, [r3, #7]
 800204c:	3307      	adds	r3, #7
  SPIx_WriteReadData(&Data,&tmp,1);
 800204e:	0018      	movs	r0, r3
 8002050:	2201      	movs	r2, #1
 8002052:	0021      	movs	r1, r4
 8002054:	f7ff ffcc 	bl	8001ff0 <SPIx_WriteReadData>
  return tmp;
 8002058:	7820      	ldrb	r0, [r4, #0]
  }
 800205a:	b004      	add	sp, #16
 800205c:	bd10      	pop	{r4, pc}
	...

08002060 <SD_IO_Init>:
{
 8002060:	b530      	push	{r4, r5, lr}
  SD_CS_GPIO_CLK_ENABLE();
 8002062:	2401      	movs	r4, #1
{
 8002064:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8002066:	2214      	movs	r2, #20
 8002068:	2100      	movs	r1, #0
 800206a:	a803      	add	r0, sp, #12
 800206c:	f00b fd83 	bl	800db76 <memset>
  LCD_CS_GPIO_CLK_ENABLE();
 8002070:	2102      	movs	r1, #2
  SD_CS_HIGH();
 8002072:	2580      	movs	r5, #128	; 0x80
 8002074:	20a0      	movs	r0, #160	; 0xa0
  SD_CS_GPIO_CLK_ENABLE();
 8002076:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <SD_IO_Init+0x84>)
  SD_CS_HIGH();
 8002078:	00ed      	lsls	r5, r5, #3
  SD_CS_GPIO_CLK_ENABLE();
 800207a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  SD_CS_HIGH();
 800207c:	05c0      	lsls	r0, r0, #23
  SD_CS_GPIO_CLK_ENABLE();
 800207e:	4322      	orrs	r2, r4
 8002080:	635a      	str	r2, [r3, #52]	; 0x34
 8002082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002084:	4022      	ands	r2, r4
 8002086:	9201      	str	r2, [sp, #4]
 8002088:	9a01      	ldr	r2, [sp, #4]
  LCD_CS_GPIO_CLK_ENABLE();
 800208a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800208c:	430a      	orrs	r2, r1
 800208e:	635a      	str	r2, [r3, #52]	; 0x34
 8002090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  SD_CS_HIGH();
 8002092:	0022      	movs	r2, r4
  LCD_CS_GPIO_CLK_ENABLE();
 8002094:	400b      	ands	r3, r1
 8002096:	9302      	str	r3, [sp, #8]
  SD_CS_HIGH();
 8002098:	0029      	movs	r1, r5
  LCD_CS_GPIO_CLK_ENABLE();
 800209a:	9b02      	ldr	r3, [sp, #8]
  SD_CS_HIGH();
 800209c:	f000 fc38 	bl	8002910 <HAL_GPIO_WritePin>
  LCD_CS_HIGH();
 80020a0:	0022      	movs	r2, r4
 80020a2:	0021      	movs	r1, r4
 80020a4:	4810      	ldr	r0, [pc, #64]	; (80020e8 <SD_IO_Init+0x88>)
 80020a6:	f000 fc33 	bl	8002910 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 80020aa:	20a0      	movs	r0, #160	; 0xa0
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ac:	2303      	movs	r3, #3
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 80020ae:	a903      	add	r1, sp, #12
 80020b0:	05c0      	lsls	r0, r0, #23
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b2:	9306      	str	r3, [sp, #24]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b4:	9404      	str	r4, [sp, #16]
  gpioinitstruct.Pull = GPIO_PULLUP;
 80020b6:	9405      	str	r4, [sp, #20]
  gpioinitstruct.Pin = SD_CS_PIN;
 80020b8:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 80020ba:	f000 fb05 	bl	80026c8 <HAL_GPIO_Init>
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 80020be:	20a0      	movs	r0, #160	; 0xa0
 80020c0:	a903      	add	r1, sp, #12
 80020c2:	05c0      	lsls	r0, r0, #23
  gpioinitstruct.Pin   = LCD_CS_PIN;
 80020c4:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 80020c6:	f000 faff 	bl	80026c8 <HAL_GPIO_Init>
  SPIx_Init();
 80020ca:	f7ff ff27 	bl	8001f1c <SPIx_Init>
 80020ce:	3409      	adds	r4, #9
 80020d0:	3c01      	subs	r4, #1
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80020d2:	20ff      	movs	r0, #255	; 0xff
 80020d4:	b2e4      	uxtb	r4, r4
 80020d6:	f7ff ffb4 	bl	8002042 <SD_IO_WriteByte>
  for (counter = 0; counter <= 9; counter++)
 80020da:	2c00      	cmp	r4, #0
 80020dc:	d1f8      	bne.n	80020d0 <SD_IO_Init+0x70>
}
 80020de:	b009      	add	sp, #36	; 0x24
 80020e0:	bd30      	pop	{r4, r5, pc}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	40021000 	.word	0x40021000
 80020e8:	50000400 	.word	0x50000400

080020ec <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80020ec:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <_sbrk+0x2c>)
{
 80020ee:	b510      	push	{r4, lr}
	if (heap_end == 0)
 80020f0:	6819      	ldr	r1, [r3, #0]
{
 80020f2:	0002      	movs	r2, r0
	if (heap_end == 0)
 80020f4:	2900      	cmp	r1, #0
 80020f6:	d101      	bne.n	80020fc <_sbrk+0x10>
		heap_end = &end;
 80020f8:	4908      	ldr	r1, [pc, #32]	; (800211c <_sbrk+0x30>)
 80020fa:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80020fc:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80020fe:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002100:	1882      	adds	r2, r0, r2
 8002102:	428a      	cmp	r2, r1
 8002104:	d906      	bls.n	8002114 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002106:	f00b faeb 	bl	800d6e0 <__errno>
 800210a:	230c      	movs	r3, #12
 800210c:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800210e:	2001      	movs	r0, #1
 8002110:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8002112:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8002114:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8002116:	e7fc      	b.n	8002112 <_sbrk+0x26>
 8002118:	200013a8 	.word	0x200013a8
 800211c:	200053f0 	.word	0x200053f0

08002120 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002120:	2280      	movs	r2, #128	; 0x80
 8002122:	4b02      	ldr	r3, [pc, #8]	; (800212c <SystemInit+0xc>)
 8002124:	0512      	lsls	r2, r2, #20
 8002126:	609a      	str	r2, [r3, #8]
#endif
}
 8002128:	4770      	bx	lr
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <HAL_Init>:
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	4a08      	ldr	r2, [pc, #32]	; (8002154 <HAL_Init+0x24>)
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	6811      	ldr	r1, [r2, #0]
{
 8002138:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800213a:	430b      	orrs	r3, r1
 800213c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800213e:	2000      	movs	r0, #0
 8002140:	f7ff fe9e 	bl	8001e80 <HAL_InitTick>
 8002144:	1e04      	subs	r4, r0, #0
 8002146:	d103      	bne.n	8002150 <HAL_Init+0x20>
    status = HAL_ERROR;
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002148:	f7ff fcba 	bl	8001ac0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 800214c:	0020      	movs	r0, r4
 800214e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002150:	2401      	movs	r4, #1
 8002152:	e7fb      	b.n	800214c <HAL_Init+0x1c>
 8002154:	40022000 	.word	0x40022000

08002158 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002158:	4a03      	ldr	r2, [pc, #12]	; (8002168 <HAL_IncTick+0x10>)
 800215a:	4904      	ldr	r1, [pc, #16]	; (800216c <HAL_IncTick+0x14>)
 800215c:	6813      	ldr	r3, [r2, #0]
 800215e:	6809      	ldr	r1, [r1, #0]
 8002160:	185b      	adds	r3, r3, r1
 8002162:	6013      	str	r3, [r2, #0]
}
 8002164:	4770      	bx	lr
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	20004c00 	.word	0x20004c00
 800216c:	20000008 	.word	0x20000008

08002170 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002170:	4b01      	ldr	r3, [pc, #4]	; (8002178 <HAL_GetTick+0x8>)
 8002172:	6818      	ldr	r0, [r3, #0]
}
 8002174:	4770      	bx	lr
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	20004c00 	.word	0x20004c00

0800217c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800217c:	b570      	push	{r4, r5, r6, lr}
 800217e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002180:	f7ff fff6 	bl	8002170 <HAL_GetTick>
 8002184:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002186:	1c63      	adds	r3, r4, #1
 8002188:	d002      	beq.n	8002190 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <HAL_Delay+0x20>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002190:	f7ff ffee 	bl	8002170 <HAL_GetTick>
 8002194:	1b40      	subs	r0, r0, r5
 8002196:	4284      	cmp	r4, r0
 8002198:	d8fa      	bhi.n	8002190 <HAL_Delay+0x14>
  {
  }
}
 800219a:	bd70      	pop	{r4, r5, r6, pc}
 800219c:	20000008 	.word	0x20000008

080021a0 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021a0:	6880      	ldr	r0, [r0, #8]
 80021a2:	0740      	lsls	r0, r0, #29
 80021a4:	0fc0      	lsrs	r0, r0, #31
}
 80021a6:	4770      	bx	lr

080021a8 <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021a8:	2300      	movs	r3, #0
{
 80021aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ac:	b085      	sub	sp, #20
 80021ae:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 80021b0:	9303      	str	r3, [sp, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80021b2:	2501      	movs	r5, #1
  if(hadc == NULL)
 80021b4:	4298      	cmp	r0, r3
 80021b6:	d100      	bne.n	80021ba <HAL_ADC_Init+0x12>
 80021b8:	e09a      	b.n	80022f0 <HAL_ADC_Init+0x148>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021ba:	6d85      	ldr	r5, [r0, #88]	; 0x58
 80021bc:	429d      	cmp	r5, r3
 80021be:	d105      	bne.n	80021cc <HAL_ADC_Init+0x24>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021c0:	f7ff fc96 	bl	8001af0 <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021c4:	0023      	movs	r3, r4
 80021c6:	3354      	adds	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 80021c8:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80021ca:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021cc:	2380      	movs	r3, #128	; 0x80
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021ce:	6826      	ldr	r6, [r4, #0]
 80021d0:	055b      	lsls	r3, r3, #21
 80021d2:	68b2      	ldr	r2, [r6, #8]
 80021d4:	421a      	tst	r2, r3
 80021d6:	d100      	bne.n	80021da <HAL_ADC_Init+0x32>
 80021d8:	e0d0      	b.n	800237c <HAL_ADC_Init+0x1d4>
 80021da:	68b3      	ldr	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021dc:	2500      	movs	r5, #0
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	d400      	bmi.n	80021e4 <HAL_ADC_Init+0x3c>
 80021e2:	e0d8      	b.n	8002396 <HAL_ADC_Init+0x1ee>
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021e4:	0030      	movs	r0, r6
 80021e6:	f7ff ffdb 	bl	80021a0 <LL_ADC_REG_IsConversionOngoing>
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021ea:	2310      	movs	r3, #16
 80021ec:	6da6      	ldr	r6, [r4, #88]	; 0x58
 80021ee:	401e      	ands	r6, r3
 80021f0:	d000      	beq.n	80021f4 <HAL_ADC_Init+0x4c>
 80021f2:	e0be      	b.n	8002372 <HAL_ADC_Init+0x1ca>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021f4:	2800      	cmp	r0, #0
 80021f6:	d000      	beq.n	80021fa <HAL_ADC_Init+0x52>
 80021f8:	e0bb      	b.n	8002372 <HAL_ADC_Init+0x1ca>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80021fc:	4a7c      	ldr	r2, [pc, #496]	; (80023f0 <HAL_ADC_Init+0x248>)
 80021fe:	401a      	ands	r2, r3
 8002200:	2302      	movs	r3, #2
 8002202:	4313      	orrs	r3, r2
 8002204:	65a3      	str	r3, [r4, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002206:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	07d2      	lsls	r2, r2, #31
 800220c:	d400      	bmi.n	8002210 <HAL_ADC_Init+0x68>
 800220e:	e0cb      	b.n	80023a8 <HAL_ADC_Init+0x200>
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002210:	6b27      	ldr	r7, [r4, #48]	; 0x30
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002212:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002214:	1e78      	subs	r0, r7, #1
 8002216:	4187      	sbcs	r7, r0
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002218:	7e62      	ldrb	r2, [r4, #25]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800221a:	0338      	lsls	r0, r7, #12
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800221c:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800221e:	0389      	lsls	r1, r1, #14
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002220:	9001      	str	r0, [sp, #4]
 8002222:	68e0      	ldr	r0, [r4, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002224:	4311      	orrs	r1, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002226:	7ea2      	ldrb	r2, [r4, #26]
 8002228:	4301      	orrs	r1, r0
                 hadc->Init.DataAlign                                             |
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 800222a:	6920      	ldr	r0, [r4, #16]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800222c:	4694      	mov	ip, r2
 800222e:	0352      	lsls	r2, r2, #13
 8002230:	4311      	orrs	r1, r2
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8002232:	2800      	cmp	r0, #0
 8002234:	da66      	bge.n	8002304 <HAL_ADC_Init+0x15c>
 8002236:	0047      	lsls	r7, r0, #1
 8002238:	087f      	lsrs	r7, r7, #1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800223a:	0022      	movs	r2, r4
 800223c:	322c      	adds	r2, #44	; 0x2c
 800223e:	7812      	ldrb	r2, [r2, #0]
 8002240:	0052      	lsls	r2, r2, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8002242:	430a      	orrs	r2, r1
 8002244:	9901      	ldr	r1, [sp, #4]
 8002246:	430a      	orrs	r2, r1
 8002248:	4317      	orrs	r7, r2
 800224a:	9701      	str	r7, [sp, #4]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800224c:	1c62      	adds	r2, r4, #1
 800224e:	7fd2      	ldrb	r2, [r2, #31]
 8002250:	2a01      	cmp	r2, #1
 8002252:	d107      	bne.n	8002264 <HAL_ADC_Init+0xbc>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002254:	4661      	mov	r1, ip
 8002256:	2900      	cmp	r1, #0
 8002258:	d157      	bne.n	800230a <HAL_ADC_Init+0x162>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800225a:	2280      	movs	r2, #128	; 0x80
 800225c:	0039      	movs	r1, r7
 800225e:	0252      	lsls	r2, r2, #9
 8002260:	4311      	orrs	r1, r2
 8002262:	9101      	str	r1, [sp, #4]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002264:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002266:	2a00      	cmp	r2, #0
 8002268:	d007      	beq.n	800227a <HAL_ADC_Init+0xd2>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800226a:	21e0      	movs	r1, #224	; 0xe0
 800226c:	0049      	lsls	r1, r1, #1
 800226e:	400a      	ands	r2, r1
 8002270:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002272:	430a      	orrs	r2, r1
 8002274:	9901      	ldr	r1, [sp, #4]
 8002276:	4311      	orrs	r1, r2
 8002278:	9101      	str	r1, [sp, #4]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 800227a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800227c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800227e:	430a      	orrs	r2, r1
                  hadc->Init.Oversampling.RightBitShift |
 8002280:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002282:	430a      	orrs	r2, r1
                  hadc->Init.Oversampling.TriggeredMode |
 8002284:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002286:	430a      	orrs	r2, r1
                  hadc->Init.TriggerFrequencyMode
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 8002288:	0021      	movs	r1, r4
 800228a:	313c      	adds	r1, #60	; 0x3c
 800228c:	7809      	ldrb	r1, [r1, #0]
 800228e:	2901      	cmp	r1, #1
 8002290:	d100      	bne.n	8002294 <HAL_ADC_Init+0xec>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8002292:	430a      	orrs	r2, r1
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002294:	68d9      	ldr	r1, [r3, #12]
 8002296:	4f57      	ldr	r7, [pc, #348]	; (80023f4 <HAL_ADC_Init+0x24c>)
 8002298:	4039      	ands	r1, r7
 800229a:	9f01      	ldr	r7, [sp, #4]
 800229c:	4339      	orrs	r1, r7
 800229e:	60d9      	str	r1, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 80022a0:	6919      	ldr	r1, [r3, #16]
 80022a2:	4f55      	ldr	r7, [pc, #340]	; (80023f8 <HAL_ADC_Init+0x250>)
 80022a4:	4039      	ands	r1, r7
 80022a6:	430a      	orrs	r2, r1
  MODIFY_REG(ADCx->SMPR,
 80022a8:	2107      	movs	r1, #7
 80022aa:	2770      	movs	r7, #112	; 0x70
 80022ac:	611a      	str	r2, [r3, #16]
 80022ae:	695a      	ldr	r2, [r3, #20]
 80022b0:	438a      	bics	r2, r1
 80022b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022b4:	430a      	orrs	r2, r1
 80022b6:	615a      	str	r2, [r3, #20]
 80022b8:	695a      	ldr	r2, [r3, #20]
 80022ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80022bc:	43ba      	bics	r2, r7
 80022be:	0109      	lsls	r1, r1, #4
 80022c0:	430a      	orrs	r2, r1
 80022c2:	615a      	str	r2, [r3, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80022c4:	2800      	cmp	r0, #0
 80022c6:	d12a      	bne.n	800231e <HAL_ADC_Init+0x176>
      if(ADCGroupRegularSequencerRanksCount == 1UL)
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80022c8:	2210      	movs	r2, #16
 80022ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80022cc:	4252      	negs	r2, r2
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80022ce:	430a      	orrs	r2, r1
 80022d0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80022d2:	4a4a      	ldr	r2, [pc, #296]	; (80023fc <HAL_ADC_Init+0x254>)
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	4013      	ands	r3, r2
 80022d8:	9a01      	ldr	r2, [sp, #4]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d13d      	bne.n	800235a <HAL_ADC_Init+0x1b2>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022de:	2300      	movs	r3, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022e0:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80022e2:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80022e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80022e6:	4393      	bics	r3, r2
 80022e8:	001a      	movs	r2, r3
 80022ea:	2301      	movs	r3, #1
 80022ec:	4313      	orrs	r3, r2
 80022ee:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80022f0:	0028      	movs	r0, r5
 80022f2:	b005      	add	sp, #20
 80022f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index--;
 80022f6:	9b03      	ldr	r3, [sp, #12]
 80022f8:	3b01      	subs	r3, #1
 80022fa:	9303      	str	r3, [sp, #12]
    while(wait_loop_index != 0UL)
 80022fc:	9b03      	ldr	r3, [sp, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f9      	bne.n	80022f6 <HAL_ADC_Init+0x14e>
 8002302:	e76a      	b.n	80021da <HAL_ADC_Init+0x32>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8002304:	2780      	movs	r7, #128	; 0x80
 8002306:	03bf      	lsls	r7, r7, #14
 8002308:	e797      	b.n	800223a <HAL_ADC_Init+0x92>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800230a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800230c:	468c      	mov	ip, r1
 800230e:	2120      	movs	r1, #32
 8002310:	4667      	mov	r7, ip
 8002312:	4339      	orrs	r1, r7
 8002314:	65a1      	str	r1, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002316:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002318:	430a      	orrs	r2, r1
 800231a:	65e2      	str	r2, [r4, #92]	; 0x5c
 800231c:	e7a2      	b.n	8002264 <HAL_ADC_Init+0xbc>
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800231e:	2280      	movs	r2, #128	; 0x80
 8002320:	0392      	lsls	r2, r2, #14
 8002322:	4290      	cmp	r0, r2
 8002324:	d1d5      	bne.n	80022d2 <HAL_ADC_Init+0x12a>
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 8002326:	200f      	movs	r0, #15
 8002328:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800232a:	000f      	movs	r7, r1
 800232c:	00b2      	lsls	r2, r6, #2
 800232e:	40d7      	lsrs	r7, r2
 8002330:	003a      	movs	r2, r7
 8002332:	4002      	ands	r2, r0
 8002334:	2a0f      	cmp	r2, #15
 8002336:	d00d      	beq.n	8002354 <HAL_ADC_Init+0x1ac>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002338:	3601      	adds	r6, #1
 800233a:	2e08      	cmp	r6, #8
 800233c:	d1f5      	bne.n	800232a <HAL_ADC_Init+0x182>
        MODIFY_REG(hadc->Instance->CHSELR,
 800233e:	4830      	ldr	r0, [pc, #192]	; (8002400 <HAL_ADC_Init+0x258>)
 8002340:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002342:	69e2      	ldr	r2, [r4, #28]
 8002344:	1812      	adds	r2, r2, r0
 8002346:	201c      	movs	r0, #28
 8002348:	0092      	lsls	r2, r2, #2
 800234a:	4002      	ands	r2, r0
 800234c:	382c      	subs	r0, #44	; 0x2c
 800234e:	4090      	lsls	r0, r2
 8002350:	0002      	movs	r2, r0
 8002352:	e7bc      	b.n	80022ce <HAL_ADC_Init+0x126>
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 8002354:	2e01      	cmp	r6, #1
 8002356:	d0b7      	beq.n	80022c8 <HAL_ADC_Init+0x120>
 8002358:	e7f1      	b.n	800233e <HAL_ADC_Init+0x196>
      ADC_STATE_CLR_SET(hadc->State,
 800235a:	2212      	movs	r2, #18
 800235c:	6da3      	ldr	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235e:	2501      	movs	r5, #1
      ADC_STATE_CLR_SET(hadc->State,
 8002360:	4393      	bics	r3, r2
 8002362:	001a      	movs	r2, r3
 8002364:	2310      	movs	r3, #16
 8002366:	4313      	orrs	r3, r2
 8002368:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800236c:	432b      	orrs	r3, r5
 800236e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002370:	e7be      	b.n	80022f0 <HAL_ADC_Init+0x148>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002372:	6da2      	ldr	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8002374:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002376:	4313      	orrs	r3, r2
 8002378:	65a3      	str	r3, [r4, #88]	; 0x58
 800237a:	e7b9      	b.n	80022f0 <HAL_ADC_Init+0x148>
  MODIFY_REG(ADCx->CR,
 800237c:	68b2      	ldr	r2, [r6, #8]
 800237e:	4921      	ldr	r1, [pc, #132]	; (8002404 <HAL_ADC_Init+0x25c>)
 8002380:	400a      	ands	r2, r1
 8002382:	4313      	orrs	r3, r2
 8002384:	60b3      	str	r3, [r6, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002386:	4b20      	ldr	r3, [pc, #128]	; (8002408 <HAL_ADC_Init+0x260>)
 8002388:	4920      	ldr	r1, [pc, #128]	; (800240c <HAL_ADC_Init+0x264>)
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	f7fd fee8 	bl	8000160 <__udivsi3>
 8002390:	0040      	lsls	r0, r0, #1
 8002392:	9003      	str	r0, [sp, #12]
    while(wait_loop_index != 0UL)
 8002394:	e7b2      	b.n	80022fc <HAL_ADC_Init+0x154>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002396:	2310      	movs	r3, #16
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002398:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800239a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800239c:	4313      	orrs	r3, r2
 800239e:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80023a2:	432b      	orrs	r3, r5
 80023a4:	65e3      	str	r3, [r4, #92]	; 0x5c
 80023a6:	e71d      	b.n	80021e4 <HAL_ADC_Init+0x3c>
      MODIFY_REG(hadc->Instance->CFGR1,
 80023a8:	2118      	movs	r1, #24
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	438a      	bics	r2, r1
 80023ae:	68a1      	ldr	r1, [r4, #8]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 80023b4:	6861      	ldr	r1, [r4, #4]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	0f88      	lsrs	r0, r1, #30
 80023ba:	0092      	lsls	r2, r2, #2
 80023bc:	0780      	lsls	r0, r0, #30
 80023be:	0892      	lsrs	r2, r2, #2
 80023c0:	4302      	orrs	r2, r0
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80023c2:	2080      	movs	r0, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 80023c4:	611a      	str	r2, [r3, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80023c6:	004a      	lsls	r2, r1, #1
 80023c8:	0852      	lsrs	r2, r2, #1
 80023ca:	05c0      	lsls	r0, r0, #23
 80023cc:	4282      	cmp	r2, r0
 80023ce:	d100      	bne.n	80023d2 <HAL_ADC_Init+0x22a>
 80023d0:	e71e      	b.n	8002210 <HAL_ADC_Init+0x68>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80023d2:	2280      	movs	r2, #128	; 0x80
 80023d4:	0612      	lsls	r2, r2, #24
 80023d6:	4291      	cmp	r1, r2
 80023d8:	d100      	bne.n	80023dc <HAL_ADC_Init+0x234>
 80023da:	e719      	b.n	8002210 <HAL_ADC_Init+0x68>
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 80023dc:	480c      	ldr	r0, [pc, #48]	; (8002410 <HAL_ADC_Init+0x268>)
 80023de:	4f0d      	ldr	r7, [pc, #52]	; (8002414 <HAL_ADC_Init+0x26c>)
 80023e0:	6802      	ldr	r2, [r0, #0]
 80023e2:	403a      	ands	r2, r7
 80023e4:	27f0      	movs	r7, #240	; 0xf0
 80023e6:	03bf      	lsls	r7, r7, #14
 80023e8:	4039      	ands	r1, r7
 80023ea:	430a      	orrs	r2, r1
 80023ec:	6002      	str	r2, [r0, #0]
 80023ee:	e70f      	b.n	8002210 <HAL_ADC_Init+0x68>
 80023f0:	fffffefd 	.word	0xfffffefd
 80023f4:	fffe0219 	.word	0xfffe0219
 80023f8:	dffffc02 	.word	0xdffffc02
 80023fc:	833fffe7 	.word	0x833fffe7
 8002400:	3fffffff 	.word	0x3fffffff
 8002404:	6fffffe8 	.word	0x6fffffe8
 8002408:	20000004 	.word	0x20000004
 800240c:	00030d40 	.word	0x00030d40
 8002410:	40012708 	.word	0x40012708
 8002414:	ffc3ffff 	.word	0xffc3ffff

08002418 <HAL_ADC_ConfigChannel>:
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002418:	2300      	movs	r3, #0
{
 800241a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800241c:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t wait_loop_index = 0UL;
 800241e:	9307      	str	r3, [sp, #28]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002420:	0003      	movs	r3, r0
 8002422:	3354      	adds	r3, #84	; 0x54
 8002424:	781a      	ldrb	r2, [r3, #0]
{
 8002426:	0005      	movs	r5, r0
 8002428:	000f      	movs	r7, r1
  __HAL_LOCK(hadc);
 800242a:	2402      	movs	r4, #2
 800242c:	2a01      	cmp	r2, #1
 800242e:	d100      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x1a>
 8002430:	e0c1      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x19e>
 8002432:	2601      	movs	r6, #1
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002434:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hadc);
 8002436:	701e      	strb	r6, [r3, #0]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002438:	f7ff feb2 	bl	80021a0 <LL_ADC_REG_IsConversionOngoing>
 800243c:	9003      	str	r0, [sp, #12]
 800243e:	2800      	cmp	r0, #0
 8002440:	d000      	beq.n	8002444 <HAL_ADC_ConfigChannel+0x2c>
 8002442:	e0ef      	b.n	8002624 <HAL_ADC_ConfigChannel+0x20c>
 8002444:	2204      	movs	r2, #4
 8002446:	2180      	movs	r1, #128	; 0x80
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4694      	mov	ip, r2
 800244c:	9301      	str	r3, [sp, #4]
 800244e:	9801      	ldr	r0, [sp, #4]
 8002450:	692b      	ldr	r3, [r5, #16]
 8002452:	0609      	lsls	r1, r1, #24
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	42a0      	cmp	r0, r4
 8002458:	d100      	bne.n	800245c <HAL_ADC_ConfigChannel+0x44>
 800245a:	e0b6      	b.n	80025ca <HAL_ADC_ConfigChannel+0x1b2>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800245c:	4660      	mov	r0, ip
 800245e:	4383      	bics	r3, r0
 8002460:	428b      	cmp	r3, r1
 8002462:	d113      	bne.n	800248c <HAL_ADC_ConfigChannel+0x74>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8002464:	6829      	ldr	r1, [r5, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002466:	0353      	lsls	r3, r2, #13
 8002468:	6a88      	ldr	r0, [r1, #40]	; 0x28
 800246a:	0b5b      	lsrs	r3, r3, #13
  MODIFY_REG(ADCx->CHSELR,
 800246c:	4303      	orrs	r3, r0
 800246e:	628b      	str	r3, [r1, #40]	; 0x28
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002470:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(ADCx->SMPR,
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	496e      	ldr	r1, [pc, #440]	; (8002630 <HAL_ADC_ConfigChannel+0x218>)
 8002476:	6944      	ldr	r4, [r0, #20]
 8002478:	4019      	ands	r1, r3
 800247a:	4061      	eors	r1, r4
 800247c:	0213      	lsls	r3, r2, #8
 800247e:	400b      	ands	r3, r1
 8002480:	4063      	eors	r3, r4
 8002482:	6143      	str	r3, [r0, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002484:	2a00      	cmp	r2, #0
 8002486:	db65      	blt.n	8002554 <HAL_ADC_ConfigChannel+0x13c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002488:	2400      	movs	r4, #0
 800248a:	e091      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x198>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800248c:	211f      	movs	r1, #31
 800248e:	9b01      	ldr	r3, [sp, #4]
 8002490:	400b      	ands	r3, r1
 8002492:	9302      	str	r3, [sp, #8]
 8002494:	230f      	movs	r3, #15
 8002496:	9802      	ldr	r0, [sp, #8]
 8002498:	4083      	lsls	r3, r0
 800249a:	43db      	mvns	r3, r3
 800249c:	9304      	str	r3, [sp, #16]
 800249e:	9804      	ldr	r0, [sp, #16]
 80024a0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80024a2:	4003      	ands	r3, r0
 80024a4:	9305      	str	r3, [sp, #20]
 80024a6:	0350      	lsls	r0, r2, #13
 80024a8:	0013      	movs	r3, r2
 80024aa:	2800      	cmp	r0, #0
 80024ac:	d115      	bne.n	80024da <HAL_ADC_ConfigChannel+0xc2>
 80024ae:	0e90      	lsrs	r0, r2, #26
 80024b0:	4008      	ands	r0, r1
 80024b2:	9902      	ldr	r1, [sp, #8]
 80024b4:	4088      	lsls	r0, r1
 80024b6:	9905      	ldr	r1, [sp, #20]
 80024b8:	4308      	orrs	r0, r1
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80024ba:	9901      	ldr	r1, [sp, #4]
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80024bc:	6628      	str	r0, [r5, #96]	; 0x60
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80024be:	0889      	lsrs	r1, r1, #2
 80024c0:	69e8      	ldr	r0, [r5, #28]
 80024c2:	3101      	adds	r1, #1
 80024c4:	4281      	cmp	r1, r0
 80024c6:	d8d3      	bhi.n	8002470 <HAL_ADC_ConfigChannel+0x58>
  MODIFY_REG(ADCx->CHSELR,
 80024c8:	9c02      	ldr	r4, [sp, #8]
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024ca:	6829      	ldr	r1, [r5, #0]
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	0f1b      	lsrs	r3, r3, #28
 80024d0:	6a88      	ldr	r0, [r1, #40]	; 0x28
 80024d2:	40a3      	lsls	r3, r4
 80024d4:	9c04      	ldr	r4, [sp, #16]
 80024d6:	4020      	ands	r0, r4
 80024d8:	e7c8      	b.n	800246c <HAL_ADC_ConfigChannel+0x54>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80024da:	9803      	ldr	r0, [sp, #12]
 80024dc:	4232      	tst	r2, r6
 80024de:	d1e8      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x9a>
 80024e0:	0030      	movs	r0, r6
 80024e2:	4222      	tst	r2, r4
 80024e4:	d1e5      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x9a>
 80024e6:	4661      	mov	r1, ip
 80024e8:	0020      	movs	r0, r4
 80024ea:	420a      	tst	r2, r1
 80024ec:	d1e1      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x9a>
 80024ee:	2003      	movs	r0, #3
 80024f0:	0711      	lsls	r1, r2, #28
 80024f2:	d4de      	bmi.n	80024b2 <HAL_ADC_ConfigChannel+0x9a>
 80024f4:	4660      	mov	r0, ip
 80024f6:	06d1      	lsls	r1, r2, #27
 80024f8:	d4db      	bmi.n	80024b2 <HAL_ADC_ConfigChannel+0x9a>
 80024fa:	2005      	movs	r0, #5
 80024fc:	0691      	lsls	r1, r2, #26
 80024fe:	d4d8      	bmi.n	80024b2 <HAL_ADC_ConfigChannel+0x9a>
 8002500:	3001      	adds	r0, #1
 8002502:	0651      	lsls	r1, r2, #25
 8002504:	d4d5      	bmi.n	80024b2 <HAL_ADC_ConfigChannel+0x9a>
 8002506:	3001      	adds	r0, #1
 8002508:	0611      	lsls	r1, r2, #24
 800250a:	d4d2      	bmi.n	80024b2 <HAL_ADC_ConfigChannel+0x9a>
 800250c:	3001      	adds	r0, #1
 800250e:	05d1      	lsls	r1, r2, #23
 8002510:	d4cf      	bmi.n	80024b2 <HAL_ADC_ConfigChannel+0x9a>
 8002512:	3001      	adds	r0, #1
 8002514:	0591      	lsls	r1, r2, #22
 8002516:	d4cc      	bmi.n	80024b2 <HAL_ADC_ConfigChannel+0x9a>
 8002518:	3001      	adds	r0, #1
 800251a:	0551      	lsls	r1, r2, #21
 800251c:	d4c9      	bmi.n	80024b2 <HAL_ADC_ConfigChannel+0x9a>
 800251e:	3001      	adds	r0, #1
 8002520:	0511      	lsls	r1, r2, #20
 8002522:	d4c6      	bmi.n	80024b2 <HAL_ADC_ConfigChannel+0x9a>
 8002524:	3001      	adds	r0, #1
 8002526:	04d1      	lsls	r1, r2, #19
 8002528:	d4c3      	bmi.n	80024b2 <HAL_ADC_ConfigChannel+0x9a>
 800252a:	3001      	adds	r0, #1
 800252c:	0491      	lsls	r1, r2, #18
 800252e:	d4c0      	bmi.n	80024b2 <HAL_ADC_ConfigChannel+0x9a>
 8002530:	3001      	adds	r0, #1
 8002532:	0451      	lsls	r1, r2, #17
 8002534:	d4bd      	bmi.n	80024b2 <HAL_ADC_ConfigChannel+0x9a>
 8002536:	3001      	adds	r0, #1
 8002538:	0411      	lsls	r1, r2, #16
 800253a:	d4ba      	bmi.n	80024b2 <HAL_ADC_ConfigChannel+0x9a>
 800253c:	3001      	adds	r0, #1
 800253e:	03d1      	lsls	r1, r2, #15
 8002540:	d4b7      	bmi.n	80024b2 <HAL_ADC_ConfigChannel+0x9a>
 8002542:	3001      	adds	r0, #1
 8002544:	0391      	lsls	r1, r2, #14
 8002546:	d4b4      	bmi.n	80024b2 <HAL_ADC_ConfigChannel+0x9a>
 8002548:	2080      	movs	r0, #128	; 0x80
 800254a:	02c0      	lsls	r0, r0, #11
 800254c:	4010      	ands	r0, r2
 800254e:	d0b0      	beq.n	80024b2 <HAL_ADC_ConfigChannel+0x9a>
 8002550:	2012      	movs	r0, #18
 8002552:	e7ae      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x9a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002554:	21e0      	movs	r1, #224	; 0xe0
 8002556:	4b37      	ldr	r3, [pc, #220]	; (8002634 <HAL_ADC_ConfigChannel+0x21c>)
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002558:	4837      	ldr	r0, [pc, #220]	; (8002638 <HAL_ADC_ConfigChannel+0x220>)
 800255a:	681c      	ldr	r4, [r3, #0]
 800255c:	0449      	lsls	r1, r1, #17
 800255e:	4021      	ands	r1, r4
 8002560:	4282      	cmp	r2, r0
 8002562:	d117      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x17c>
 8002564:	2080      	movs	r0, #128	; 0x80
 8002566:	0400      	lsls	r0, r0, #16
 8002568:	4204      	tst	r4, r0
 800256a:	d18d      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x70>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	4c33      	ldr	r4, [pc, #204]	; (800263c <HAL_ADC_ConfigChannel+0x224>)
 8002570:	4022      	ands	r2, r4
 8002572:	430a      	orrs	r2, r1
 8002574:	4302      	orrs	r2, r0
 8002576:	601a      	str	r2, [r3, #0]
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002578:	4b31      	ldr	r3, [pc, #196]	; (8002640 <HAL_ADC_ConfigChannel+0x228>)
 800257a:	4932      	ldr	r1, [pc, #200]	; (8002644 <HAL_ADC_ConfigChannel+0x22c>)
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	f7fd fdef 	bl	8000160 <__udivsi3>
 8002582:	9007      	str	r0, [sp, #28]
          while(wait_loop_index != 0UL)
 8002584:	9b07      	ldr	r3, [sp, #28]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d100      	bne.n	800258c <HAL_ADC_ConfigChannel+0x174>
 800258a:	e77d      	b.n	8002488 <HAL_ADC_ConfigChannel+0x70>
          {
            wait_loop_index--;
 800258c:	9b07      	ldr	r3, [sp, #28]
 800258e:	3b01      	subs	r3, #1
 8002590:	9307      	str	r3, [sp, #28]
 8002592:	e7f7      	b.n	8002584 <HAL_ADC_ConfigChannel+0x16c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002594:	482c      	ldr	r0, [pc, #176]	; (8002648 <HAL_ADC_ConfigChannel+0x230>)
 8002596:	4282      	cmp	r2, r0
 8002598:	d110      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x1a4>
 800259a:	2080      	movs	r0, #128	; 0x80
 800259c:	0440      	lsls	r0, r0, #17
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800259e:	4004      	ands	r4, r0
 80025a0:	d000      	beq.n	80025a4 <HAL_ADC_ConfigChannel+0x18c>
 80025a2:	e771      	b.n	8002488 <HAL_ADC_ConfigChannel+0x70>
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	4e25      	ldr	r6, [pc, #148]	; (800263c <HAL_ADC_ConfigChannel+0x224>)
 80025a8:	4032      	ands	r2, r6
 80025aa:	430a      	orrs	r2, r1
 80025ac:	4302      	orrs	r2, r0
 80025ae:	601a      	str	r2, [r3, #0]
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025b0:	2300      	movs	r3, #0
 80025b2:	3554      	adds	r5, #84	; 0x54
 80025b4:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 80025b6:	0020      	movs	r0, r4
 80025b8:	b009      	add	sp, #36	; 0x24
 80025ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025bc:	4823      	ldr	r0, [pc, #140]	; (800264c <HAL_ADC_ConfigChannel+0x234>)
 80025be:	4282      	cmp	r2, r0
 80025c0:	d000      	beq.n	80025c4 <HAL_ADC_ConfigChannel+0x1ac>
 80025c2:	e761      	b.n	8002488 <HAL_ADC_ConfigChannel+0x70>
 80025c4:	2080      	movs	r0, #128	; 0x80
 80025c6:	03c0      	lsls	r0, r0, #15
 80025c8:	e7e9      	b.n	800259e <HAL_ADC_ConfigChannel+0x186>
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80025ca:	4660      	mov	r0, ip
 80025cc:	4383      	bics	r3, r0
 80025ce:	428b      	cmp	r3, r1
 80025d0:	d105      	bne.n	80025de <HAL_ADC_ConfigChannel+0x1c6>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80025d2:	6828      	ldr	r0, [r5, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80025d4:	0351      	lsls	r1, r2, #13
 80025d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80025d8:	0b49      	lsrs	r1, r1, #13
 80025da:	438b      	bics	r3, r1
 80025dc:	6283      	str	r3, [r0, #40]	; 0x28
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025de:	2a00      	cmp	r2, #0
 80025e0:	db00      	blt.n	80025e4 <HAL_ADC_ConfigChannel+0x1cc>
 80025e2:	e751      	b.n	8002488 <HAL_ADC_ConfigChannel+0x70>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025e4:	4b13      	ldr	r3, [pc, #76]	; (8002634 <HAL_ADC_ConfigChannel+0x21c>)
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025e6:	4914      	ldr	r1, [pc, #80]	; (8002638 <HAL_ADC_ConfigChannel+0x220>)
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	428a      	cmp	r2, r1
 80025ec:	d108      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x1e8>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 80025ee:	22a0      	movs	r2, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80025f0:	681c      	ldr	r4, [r3, #0]
 80025f2:	0452      	lsls	r2, r2, #17
 80025f4:	4911      	ldr	r1, [pc, #68]	; (800263c <HAL_ADC_ConfigChannel+0x224>)
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 80025f6:	4002      	ands	r2, r0
 80025f8:	4021      	ands	r1, r4
 80025fa:	430a      	orrs	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	e743      	b.n	8002488 <HAL_ADC_ConfigChannel+0x70>
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8002600:	4911      	ldr	r1, [pc, #68]	; (8002648 <HAL_ADC_ConfigChannel+0x230>)
 8002602:	428a      	cmp	r2, r1
 8002604:	d103      	bne.n	800260e <HAL_ADC_ConfigChannel+0x1f6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8002606:	22c0      	movs	r2, #192	; 0xc0
 8002608:	681c      	ldr	r4, [r3, #0]
 800260a:	0412      	lsls	r2, r2, #16
 800260c:	e7f2      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x1dc>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800260e:	490f      	ldr	r1, [pc, #60]	; (800264c <HAL_ADC_ConfigChannel+0x234>)
 8002610:	428a      	cmp	r2, r1
 8002612:	d000      	beq.n	8002616 <HAL_ADC_ConfigChannel+0x1fe>
 8002614:	e738      	b.n	8002488 <HAL_ADC_ConfigChannel+0x70>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 8002616:	22c0      	movs	r2, #192	; 0xc0
 8002618:	0452      	lsls	r2, r2, #17
 800261a:	6819      	ldr	r1, [r3, #0]
 800261c:	4002      	ands	r2, r0
 800261e:	4807      	ldr	r0, [pc, #28]	; (800263c <HAL_ADC_ConfigChannel+0x224>)
 8002620:	4001      	ands	r1, r0
 8002622:	e7ea      	b.n	80025fa <HAL_ADC_ConfigChannel+0x1e2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002624:	2320      	movs	r3, #32
 8002626:	6daa      	ldr	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8002628:	0034      	movs	r4, r6
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800262a:	4313      	orrs	r3, r2
 800262c:	65ab      	str	r3, [r5, #88]	; 0x58
 800262e:	e7bf      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x198>
 8002630:	07ffff00 	.word	0x07ffff00
 8002634:	40012708 	.word	0x40012708
 8002638:	b0001000 	.word	0xb0001000
 800263c:	fe3fffff 	.word	0xfe3fffff
 8002640:	20000004 	.word	0x20000004
 8002644:	00030d40 	.word	0x00030d40
 8002648:	b8004000 	.word	0xb8004000
 800264c:	b4002000 	.word	0xb4002000

08002650 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002650:	b570      	push	{r4, r5, r6, lr}
 8002652:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002654:	2800      	cmp	r0, #0
 8002656:	db12      	blt.n	800267e <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002658:	0883      	lsrs	r3, r0, #2
 800265a:	4a13      	ldr	r2, [pc, #76]	; (80026a8 <HAL_NVIC_SetPriority+0x58>)
 800265c:	2403      	movs	r4, #3
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	189b      	adds	r3, r3, r2
 8002662:	22ff      	movs	r2, #255	; 0xff
 8002664:	4020      	ands	r0, r4
 8002666:	40a0      	lsls	r0, r4
 8002668:	0014      	movs	r4, r2
 800266a:	25c0      	movs	r5, #192	; 0xc0
 800266c:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800266e:	4011      	ands	r1, r2
 8002670:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002672:	00ad      	lsls	r5, r5, #2
 8002674:	595e      	ldr	r6, [r3, r5]
 8002676:	43a6      	bics	r6, r4
 8002678:	4331      	orrs	r1, r6
 800267a:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800267c:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800267e:	2403      	movs	r4, #3
 8002680:	230f      	movs	r3, #15
 8002682:	b2c0      	uxtb	r0, r0
 8002684:	4003      	ands	r3, r0
 8002686:	4020      	ands	r0, r4
 8002688:	40a0      	lsls	r0, r4
 800268a:	34fc      	adds	r4, #252	; 0xfc
 800268c:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800268e:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002690:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002692:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002694:	3b08      	subs	r3, #8
 8002696:	4a05      	ldr	r2, [pc, #20]	; (80026ac <HAL_NVIC_SetPriority+0x5c>)
 8002698:	089b      	lsrs	r3, r3, #2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	189b      	adds	r3, r3, r2
 800269e:	69da      	ldr	r2, [r3, #28]
 80026a0:	43aa      	bics	r2, r5
 80026a2:	4311      	orrs	r1, r2
 80026a4:	61d9      	str	r1, [r3, #28]
 80026a6:	e7e9      	b.n	800267c <HAL_NVIC_SetPriority+0x2c>
 80026a8:	e000e100 	.word	0xe000e100
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80026b0:	2800      	cmp	r0, #0
 80026b2:	db05      	blt.n	80026c0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b4:	231f      	movs	r3, #31
 80026b6:	4018      	ands	r0, r3
 80026b8:	3b1e      	subs	r3, #30
 80026ba:	4083      	lsls	r3, r0
 80026bc:	4a01      	ldr	r2, [pc, #4]	; (80026c4 <HAL_NVIC_EnableIRQ+0x14>)
 80026be:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80026c0:	4770      	bx	lr
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	e000e100 	.word	0xe000e100

080026c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ca:	680b      	ldr	r3, [r1, #0]
{
 80026cc:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ce:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00u;
 80026d0:	2300      	movs	r3, #0
{
 80026d2:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026d4:	9a02      	ldr	r2, [sp, #8]
 80026d6:	40da      	lsrs	r2, r3
 80026d8:	d101      	bne.n	80026de <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  }
}
 80026da:	b005      	add	sp, #20
 80026dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026de:	2201      	movs	r2, #1
 80026e0:	409a      	lsls	r2, r3
 80026e2:	9203      	str	r2, [sp, #12]
 80026e4:	9903      	ldr	r1, [sp, #12]
 80026e6:	9a02      	ldr	r2, [sp, #8]
 80026e8:	400a      	ands	r2, r1
 80026ea:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 80026ec:	d100      	bne.n	80026f0 <HAL_GPIO_Init+0x28>
 80026ee:	e085      	b.n	80027fc <HAL_GPIO_Init+0x134>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026f0:	9a01      	ldr	r2, [sp, #4]
 80026f2:	2110      	movs	r1, #16
 80026f4:	6852      	ldr	r2, [r2, #4]
 80026f6:	0016      	movs	r6, r2
 80026f8:	438e      	bics	r6, r1
 80026fa:	2e02      	cmp	r6, #2
 80026fc:	d10e      	bne.n	800271c <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026fe:	2507      	movs	r5, #7
 8002700:	401d      	ands	r5, r3
 8002702:	00ad      	lsls	r5, r5, #2
 8002704:	3901      	subs	r1, #1
 8002706:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8002708:	08dc      	lsrs	r4, r3, #3
 800270a:	00a4      	lsls	r4, r4, #2
 800270c:	1904      	adds	r4, r0, r4
 800270e:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002710:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002712:	9901      	ldr	r1, [sp, #4]
 8002714:	6909      	ldr	r1, [r1, #16]
 8002716:	40a9      	lsls	r1, r5
 8002718:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 800271a:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800271c:	2403      	movs	r4, #3
 800271e:	005f      	lsls	r7, r3, #1
 8002720:	40bc      	lsls	r4, r7
 8002722:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8002724:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002726:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002728:	4025      	ands	r5, r4
 800272a:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800272c:	2503      	movs	r5, #3
 800272e:	4015      	ands	r5, r2
 8002730:	40bd      	lsls	r5, r7
 8002732:	4661      	mov	r1, ip
 8002734:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8002736:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002738:	2e01      	cmp	r6, #1
 800273a:	d80f      	bhi.n	800275c <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 800273c:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 800273e:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002740:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002742:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002744:	40bd      	lsls	r5, r7
 8002746:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8002748:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 800274a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800274c:	9903      	ldr	r1, [sp, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800274e:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002750:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002752:	2101      	movs	r1, #1
 8002754:	400d      	ands	r5, r1
 8002756:	409d      	lsls	r5, r3
 8002758:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800275a:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 800275c:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800275e:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002760:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002762:	688d      	ldr	r5, [r1, #8]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002764:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002766:	40bd      	lsls	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002768:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800276a:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 800276c:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800276e:	420a      	tst	r2, r1
 8002770:	d044      	beq.n	80027fc <HAL_GPIO_Init+0x134>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002772:	2603      	movs	r6, #3
 8002774:	240f      	movs	r4, #15
 8002776:	4922      	ldr	r1, [pc, #136]	; (8002800 <HAL_GPIO_Init+0x138>)
        temp = EXTI->EXTICR[position >> 2u];
 8002778:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800277a:	401e      	ands	r6, r3
 800277c:	00ad      	lsls	r5, r5, #2
 800277e:	00f6      	lsls	r6, r6, #3
 8002780:	186d      	adds	r5, r5, r1
 8002782:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002784:	21a0      	movs	r1, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 8002786:	6e2f      	ldr	r7, [r5, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002788:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800278a:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800278c:	2400      	movs	r4, #0
 800278e:	4288      	cmp	r0, r1
 8002790:	d00c      	beq.n	80027ac <HAL_GPIO_Init+0xe4>
 8002792:	491c      	ldr	r1, [pc, #112]	; (8002804 <HAL_GPIO_Init+0x13c>)
 8002794:	3401      	adds	r4, #1
 8002796:	4288      	cmp	r0, r1
 8002798:	d008      	beq.n	80027ac <HAL_GPIO_Init+0xe4>
 800279a:	491b      	ldr	r1, [pc, #108]	; (8002808 <HAL_GPIO_Init+0x140>)
 800279c:	3401      	adds	r4, #1
 800279e:	4288      	cmp	r0, r1
 80027a0:	d004      	beq.n	80027ac <HAL_GPIO_Init+0xe4>
 80027a2:	491a      	ldr	r1, [pc, #104]	; (800280c <HAL_GPIO_Init+0x144>)
 80027a4:	3403      	adds	r4, #3
 80027a6:	4288      	cmp	r0, r1
 80027a8:	d100      	bne.n	80027ac <HAL_GPIO_Init+0xe4>
 80027aa:	3c02      	subs	r4, #2
 80027ac:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 80027ae:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80027b0:	433c      	orrs	r4, r7
          temp |= iocurrent;
 80027b2:	000e      	movs	r6, r1
        EXTI->EXTICR[position >> 2u] = temp;
 80027b4:	662c      	str	r4, [r5, #96]	; 0x60
        temp = EXTI->IMR1;
 80027b6:	4c16      	ldr	r4, [pc, #88]	; (8002810 <HAL_GPIO_Init+0x148>)
        temp &= ~(iocurrent);
 80027b8:	43cd      	mvns	r5, r1
        temp = EXTI->IMR1;
 80027ba:	6fe7      	ldr	r7, [r4, #124]	; 0x7c
          temp |= iocurrent;
 80027bc:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027be:	03d1      	lsls	r1, r2, #15
 80027c0:	d401      	bmi.n	80027c6 <HAL_GPIO_Init+0xfe>
        temp &= ~(iocurrent);
 80027c2:	003e      	movs	r6, r7
 80027c4:	402e      	ands	r6, r5
        EXTI->IMR1 = temp;
 80027c6:	67e6      	str	r6, [r4, #124]	; 0x7c
        temp = EXTI->EMR1;
 80027c8:	4e12      	ldr	r6, [pc, #72]	; (8002814 <HAL_GPIO_Init+0x14c>)
          temp |= iocurrent;
 80027ca:	9f00      	ldr	r7, [sp, #0]
        temp = EXTI->EMR1;
 80027cc:	6ff4      	ldr	r4, [r6, #124]	; 0x7c
          temp |= iocurrent;
 80027ce:	4327      	orrs	r7, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027d0:	0391      	lsls	r1, r2, #14
 80027d2:	d401      	bmi.n	80027d8 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 80027d4:	402c      	ands	r4, r5
 80027d6:	0027      	movs	r7, r4
        EXTI->EMR1 = temp;
 80027d8:	4c09      	ldr	r4, [pc, #36]	; (8002800 <HAL_GPIO_Init+0x138>)
 80027da:	67f7      	str	r7, [r6, #124]	; 0x7c
        temp = EXTI->RTSR1;
 80027dc:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 80027de:	9e00      	ldr	r6, [sp, #0]
 80027e0:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027e2:	02d1      	lsls	r1, r2, #11
 80027e4:	d401      	bmi.n	80027ea <HAL_GPIO_Init+0x122>
        temp &= ~(iocurrent);
 80027e6:	003e      	movs	r6, r7
 80027e8:	402e      	ands	r6, r5
        EXTI->RTSR1 = temp;
 80027ea:	6026      	str	r6, [r4, #0]
        temp = EXTI->FTSR1;
 80027ec:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 80027ee:	9f00      	ldr	r7, [sp, #0]
 80027f0:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027f2:	0292      	lsls	r2, r2, #10
 80027f4:	d401      	bmi.n	80027fa <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 80027f6:	402e      	ands	r6, r5
 80027f8:	0037      	movs	r7, r6
        EXTI->FTSR1 = temp;
 80027fa:	6067      	str	r7, [r4, #4]
    position++;
 80027fc:	3301      	adds	r3, #1
 80027fe:	e769      	b.n	80026d4 <HAL_GPIO_Init+0xc>
 8002800:	40021800 	.word	0x40021800
 8002804:	50000400 	.word	0x50000400
 8002808:	50000800 	.word	0x50000800
 800280c:	50000c00 	.word	0x50000c00
 8002810:	40021804 	.word	0x40021804
 8002814:	40021808 	.word	0x40021808

08002818 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002818:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 800281a:	2300      	movs	r3, #0
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800281c:	2703      	movs	r7, #3
{
 800281e:	b085      	sub	sp, #20
 8002820:	9102      	str	r1, [sp, #8]
  while ((GPIO_Pin >> position) != 0x00u)
 8002822:	9a02      	ldr	r2, [sp, #8]
 8002824:	40da      	lsrs	r2, r3
 8002826:	d101      	bne.n	800282c <HAL_GPIO_DeInit+0x14>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
    }

    position++;
  }
}
 8002828:	b005      	add	sp, #20
 800282a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 800282c:	2201      	movs	r2, #1
 800282e:	409a      	lsls	r2, r3
 8002830:	9902      	ldr	r1, [sp, #8]
 8002832:	9200      	str	r2, [sp, #0]
 8002834:	4011      	ands	r1, r2
    if (iocurrent != 0x00u)
 8002836:	d056      	beq.n	80028e6 <HAL_GPIO_DeInit+0xce>
 8002838:	4c2c      	ldr	r4, [pc, #176]	; (80028ec <HAL_GPIO_DeInit+0xd4>)
      tmp = EXTI->EXTICR[position >> 2u];
 800283a:	089a      	lsrs	r2, r3, #2
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800283c:	001d      	movs	r5, r3
 800283e:	0092      	lsls	r2, r2, #2
 8002840:	1912      	adds	r2, r2, r4
 8002842:	240f      	movs	r4, #15
 8002844:	403d      	ands	r5, r7
 8002846:	00ed      	lsls	r5, r5, #3
 8002848:	40ac      	lsls	r4, r5
      tmp = EXTI->EXTICR[position >> 2u];
 800284a:	6e16      	ldr	r6, [r2, #96]	; 0x60
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800284c:	9401      	str	r4, [sp, #4]
 800284e:	4026      	ands	r6, r4
 8002850:	9603      	str	r6, [sp, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8002852:	26a0      	movs	r6, #160	; 0xa0
 8002854:	2400      	movs	r4, #0
 8002856:	05f6      	lsls	r6, r6, #23
 8002858:	42b0      	cmp	r0, r6
 800285a:	d00f      	beq.n	800287c <HAL_GPIO_DeInit+0x64>
 800285c:	4c24      	ldr	r4, [pc, #144]	; (80028f0 <HAL_GPIO_DeInit+0xd8>)
 800285e:	46a4      	mov	ip, r4
 8002860:	2401      	movs	r4, #1
 8002862:	4560      	cmp	r0, ip
 8002864:	d00a      	beq.n	800287c <HAL_GPIO_DeInit+0x64>
 8002866:	4c23      	ldr	r4, [pc, #140]	; (80028f4 <HAL_GPIO_DeInit+0xdc>)
 8002868:	46a4      	mov	ip, r4
 800286a:	2402      	movs	r4, #2
 800286c:	4560      	cmp	r0, ip
 800286e:	d005      	beq.n	800287c <HAL_GPIO_DeInit+0x64>
 8002870:	4c21      	ldr	r4, [pc, #132]	; (80028f8 <HAL_GPIO_DeInit+0xe0>)
 8002872:	46a4      	mov	ip, r4
 8002874:	003c      	movs	r4, r7
 8002876:	4560      	cmp	r0, ip
 8002878:	d000      	beq.n	800287c <HAL_GPIO_DeInit+0x64>
 800287a:	2405      	movs	r4, #5
 800287c:	40ac      	lsls	r4, r5
 800287e:	9d03      	ldr	r5, [sp, #12]
 8002880:	42a5      	cmp	r5, r4
 8002882:	d113      	bne.n	80028ac <HAL_GPIO_DeInit+0x94>
        EXTI->IMR1 &= ~(iocurrent);
 8002884:	43c9      	mvns	r1, r1
 8002886:	4e1d      	ldr	r6, [pc, #116]	; (80028fc <HAL_GPIO_DeInit+0xe4>)
 8002888:	4c18      	ldr	r4, [pc, #96]	; (80028ec <HAL_GPIO_DeInit+0xd4>)
 800288a:	6ff5      	ldr	r5, [r6, #124]	; 0x7c
 800288c:	400d      	ands	r5, r1
 800288e:	67f5      	str	r5, [r6, #124]	; 0x7c
        EXTI->EMR1 &= ~(iocurrent);
 8002890:	4e1b      	ldr	r6, [pc, #108]	; (8002900 <HAL_GPIO_DeInit+0xe8>)
 8002892:	6ff5      	ldr	r5, [r6, #124]	; 0x7c
 8002894:	400d      	ands	r5, r1
 8002896:	67f5      	str	r5, [r6, #124]	; 0x7c
        EXTI->RTSR1 &= ~(iocurrent);
 8002898:	6825      	ldr	r5, [r4, #0]
 800289a:	400d      	ands	r5, r1
 800289c:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800289e:	6865      	ldr	r5, [r4, #4]
 80028a0:	4029      	ands	r1, r5
 80028a2:	6061      	str	r1, [r4, #4]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 80028a4:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80028a6:	9c01      	ldr	r4, [sp, #4]
 80028a8:	43a1      	bics	r1, r4
 80028aa:	6611      	str	r1, [r2, #96]	; 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80028ac:	003c      	movs	r4, r7
 80028ae:	0059      	lsls	r1, r3, #1
 80028b0:	408c      	lsls	r4, r1
 80028b2:	6802      	ldr	r2, [r0, #0]
 80028b4:	0021      	movs	r1, r4
 80028b6:	4322      	orrs	r2, r4
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80028b8:	2407      	movs	r4, #7
 80028ba:	260f      	movs	r6, #15
 80028bc:	401c      	ands	r4, r3
 80028be:	00a4      	lsls	r4, r4, #2
 80028c0:	40a6      	lsls	r6, r4
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028c2:	43c9      	mvns	r1, r1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80028c4:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80028c6:	08da      	lsrs	r2, r3, #3
 80028c8:	0092      	lsls	r2, r2, #2
 80028ca:	1882      	adds	r2, r0, r2
 80028cc:	6a15      	ldr	r5, [r2, #32]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80028ce:	9c00      	ldr	r4, [sp, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80028d0:	43b5      	bics	r5, r6
 80028d2:	6215      	str	r5, [r2, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028d4:	6882      	ldr	r2, [r0, #8]
 80028d6:	400a      	ands	r2, r1
 80028d8:	6082      	str	r2, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80028da:	6842      	ldr	r2, [r0, #4]
 80028dc:	43a2      	bics	r2, r4
 80028de:	6042      	str	r2, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80028e0:	68c2      	ldr	r2, [r0, #12]
 80028e2:	4011      	ands	r1, r2
 80028e4:	60c1      	str	r1, [r0, #12]
    position++;
 80028e6:	3301      	adds	r3, #1
 80028e8:	e79b      	b.n	8002822 <HAL_GPIO_DeInit+0xa>
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	40021800 	.word	0x40021800
 80028f0:	50000400 	.word	0x50000400
 80028f4:	50000800 	.word	0x50000800
 80028f8:	50000c00 	.word	0x50000c00
 80028fc:	40021804 	.word	0x40021804
 8002900:	40021808 	.word	0x40021808

08002904 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002904:	6900      	ldr	r0, [r0, #16]
 8002906:	4008      	ands	r0, r1
 8002908:	1e41      	subs	r1, r0, #1
 800290a:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800290c:	b2c0      	uxtb	r0, r0
}
 800290e:	4770      	bx	lr

08002910 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002910:	2a00      	cmp	r2, #0
 8002912:	d001      	beq.n	8002918 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002914:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002916:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002918:	6281      	str	r1, [r0, #40]	; 0x28
}
 800291a:	e7fc      	b.n	8002916 <HAL_GPIO_WritePin+0x6>

0800291c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800291c:	6943      	ldr	r3, [r0, #20]
 800291e:	4219      	tst	r1, r3
 8002920:	d001      	beq.n	8002926 <HAL_GPIO_TogglePin+0xa>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002922:	6281      	str	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002924:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002926:	6181      	str	r1, [r0, #24]
}
 8002928:	e7fc      	b.n	8002924 <HAL_GPIO_TogglePin+0x8>
	...

0800292c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800292c:	b570      	push	{r4, r5, r6, lr}
 800292e:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 8002930:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8002932:	2c00      	cmp	r4, #0
 8002934:	d03f      	beq.n	80029b6 <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002936:	0025      	movs	r5, r4
 8002938:	3541      	adds	r5, #65	; 0x41
 800293a:	782b      	ldrb	r3, [r5, #0]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d105      	bne.n	800294e <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002942:	0022      	movs	r2, r4
 8002944:	3240      	adds	r2, #64	; 0x40
 8002946:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002948:	0020      	movs	r0, r4
 800294a:	f7ff f8fd 	bl	8001b48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800294e:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002950:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002952:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8002954:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002956:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68a6      	ldr	r6, [r4, #8]
 800295c:	438a      	bics	r2, r1
 800295e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002960:	6861      	ldr	r1, [r4, #4]
 8002962:	4a1a      	ldr	r2, [pc, #104]	; (80029cc <HAL_I2C_Init+0xa0>)
 8002964:	400a      	ands	r2, r1
 8002966:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002968:	6899      	ldr	r1, [r3, #8]
 800296a:	4a19      	ldr	r2, [pc, #100]	; (80029d0 <HAL_I2C_Init+0xa4>)
 800296c:	4011      	ands	r1, r2
 800296e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002970:	2801      	cmp	r0, #1
 8002972:	d121      	bne.n	80029b8 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002974:	2180      	movs	r1, #128	; 0x80
 8002976:	0209      	lsls	r1, r1, #8
 8002978:	4331      	orrs	r1, r6
 800297a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800297c:	6858      	ldr	r0, [r3, #4]
 800297e:	4915      	ldr	r1, [pc, #84]	; (80029d4 <HAL_I2C_Init+0xa8>)
 8002980:	4301      	orrs	r1, r0
 8002982:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002984:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002986:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002988:	400a      	ands	r2, r1
 800298a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800298c:	6961      	ldr	r1, [r4, #20]
 800298e:	6922      	ldr	r2, [r4, #16]
 8002990:	430a      	orrs	r2, r1
 8002992:	69a1      	ldr	r1, [r4, #24]
 8002994:	0209      	lsls	r1, r1, #8
 8002996:	430a      	orrs	r2, r1
 8002998:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800299a:	6a21      	ldr	r1, [r4, #32]
 800299c:	69e2      	ldr	r2, [r4, #28]
 800299e:	430a      	orrs	r2, r1
 80029a0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80029a2:	2201      	movs	r2, #1
 80029a4:	6819      	ldr	r1, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80029aa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ac:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029ae:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80029b0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b2:	3442      	adds	r4, #66	; 0x42
 80029b4:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80029b6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029b8:	2184      	movs	r1, #132	; 0x84
 80029ba:	0209      	lsls	r1, r1, #8
 80029bc:	4331      	orrs	r1, r6
 80029be:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029c0:	2802      	cmp	r0, #2
 80029c2:	d1db      	bne.n	800297c <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80029c4:	2180      	movs	r1, #128	; 0x80
 80029c6:	0109      	lsls	r1, r1, #4
 80029c8:	6059      	str	r1, [r3, #4]
 80029ca:	e7d7      	b.n	800297c <HAL_I2C_Init+0x50>
 80029cc:	f0ffffff 	.word	0xf0ffffff
 80029d0:	ffff7fff 	.word	0xffff7fff
 80029d4:	02008000 	.word	0x02008000

080029d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029da:	0004      	movs	r4, r0
 80029dc:	3441      	adds	r4, #65	; 0x41
 80029de:	7822      	ldrb	r2, [r4, #0]
{
 80029e0:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e2:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80029e4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e6:	2a20      	cmp	r2, #32
 80029e8:	d118      	bne.n	8002a1c <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 80029ea:	001d      	movs	r5, r3
 80029ec:	3540      	adds	r5, #64	; 0x40
 80029ee:	782e      	ldrb	r6, [r5, #0]
 80029f0:	2e01      	cmp	r6, #1
 80029f2:	d013      	beq.n	8002a1c <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 80029f4:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80029f6:	3022      	adds	r0, #34	; 0x22
 80029f8:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 80029fa:	681e      	ldr	r6, [r3, #0]
 80029fc:	3823      	subs	r0, #35	; 0x23
 80029fe:	4386      	bics	r6, r0
 8002a00:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a02:	681e      	ldr	r6, [r3, #0]
 8002a04:	4f06      	ldr	r7, [pc, #24]	; (8002a20 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8002a06:	403e      	ands	r6, r7
 8002a08:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a0a:	681e      	ldr	r6, [r3, #0]
 8002a0c:	4331      	orrs	r1, r6
 8002a0e:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002a10:	6819      	ldr	r1, [r3, #0]
 8002a12:	4308      	orrs	r0, r1
 8002a14:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002a16:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002a18:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8002a1a:	7028      	strb	r0, [r5, #0]
  }
}
 8002a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	ffffefff 	.word	0xffffefff

08002a24 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a24:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a26:	0005      	movs	r5, r0
 8002a28:	3541      	adds	r5, #65	; 0x41
 8002a2a:	782a      	ldrb	r2, [r5, #0]
{
 8002a2c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a2e:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002a30:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a32:	2a20      	cmp	r2, #32
 8002a34:	d117      	bne.n	8002a66 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8002a36:	001c      	movs	r4, r3
 8002a38:	3440      	adds	r4, #64	; 0x40
 8002a3a:	7826      	ldrb	r6, [r4, #0]
 8002a3c:	2e01      	cmp	r6, #1
 8002a3e:	d012      	beq.n	8002a66 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8002a40:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a42:	3022      	adds	r0, #34	; 0x22
 8002a44:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002a46:	681e      	ldr	r6, [r3, #0]
 8002a48:	3823      	subs	r0, #35	; 0x23
 8002a4a:	4386      	bics	r6, r0
 8002a4c:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8002a4e:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002a50:	4f05      	ldr	r7, [pc, #20]	; (8002a68 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8002a52:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8002a54:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8002a56:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8002a58:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002a5a:	6819      	ldr	r1, [r3, #0]
 8002a5c:	4308      	orrs	r0, r1
 8002a5e:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002a60:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002a62:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8002a64:	7020      	strb	r0, [r4, #0]
  }
}
 8002a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a68:	fffff0ff 	.word	0xfffff0ff

08002a6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a6c:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002a6e:	4c10      	ldr	r4, [pc, #64]	; (8002ab0 <HAL_PWREx_ControlVoltageScaling+0x44>)
 8002a70:	4910      	ldr	r1, [pc, #64]	; (8002ab4 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8002a72:	6823      	ldr	r3, [r4, #0]
{
 8002a74:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002a76:	400b      	ands	r3, r1
 8002a78:	4303      	orrs	r3, r0
 8002a7a:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a7c:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002a7e:	2000      	movs	r0, #0
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d10c      	bne.n	8002aa0 <HAL_PWREx_ControlVoltageScaling+0x34>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002a86:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8002a88:	490c      	ldr	r1, [pc, #48]	; (8002abc <HAL_PWREx_ControlVoltageScaling+0x50>)
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	2306      	movs	r3, #6
 8002a8e:	4358      	muls	r0, r3
 8002a90:	f7fd fb66 	bl	8000160 <__udivsi3>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a94:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002a96:	1c43      	adds	r3, r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a98:	00d2      	lsls	r2, r2, #3
 8002a9a:	6960      	ldr	r0, [r4, #20]
 8002a9c:	4010      	ands	r0, r2
 8002a9e:	d100      	bne.n	8002aa2 <HAL_PWREx_ControlVoltageScaling+0x36>
}
 8002aa0:	bd10      	pop	{r4, pc}
      if(wait_loop_index != 0U)
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_PWREx_ControlVoltageScaling+0x3e>
        wait_loop_index--;
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	e7f7      	b.n	8002a9a <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 8002aaa:	2003      	movs	r0, #3
 8002aac:	e7f8      	b.n	8002aa0 <HAL_PWREx_ControlVoltageScaling+0x34>
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	40007000 	.word	0x40007000
 8002ab4:	fffff9ff 	.word	0xfffff9ff
 8002ab8:	20000004 	.word	0x20000004
 8002abc:	000f4240 	.word	0x000f4240

08002ac0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ac2:	0004      	movs	r4, r0
 8002ac4:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	d102      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002aca:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8002acc:	b005      	add	sp, #20
 8002ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ad0:	6803      	ldr	r3, [r0, #0]
 8002ad2:	07db      	lsls	r3, r3, #31
 8002ad4:	d410      	bmi.n	8002af8 <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	079b      	lsls	r3, r3, #30
 8002ada:	d45c      	bmi.n	8002b96 <HAL_RCC_OscConfig+0xd6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002adc:	6823      	ldr	r3, [r4, #0]
 8002ade:	071b      	lsls	r3, r3, #28
 8002ae0:	d500      	bpl.n	8002ae4 <HAL_RCC_OscConfig+0x24>
 8002ae2:	e0c2      	b.n	8002c6a <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae4:	6823      	ldr	r3, [r4, #0]
 8002ae6:	075b      	lsls	r3, r3, #29
 8002ae8:	d500      	bpl.n	8002aec <HAL_RCC_OscConfig+0x2c>
 8002aea:	e0f4      	b.n	8002cd6 <HAL_RCC_OscConfig+0x216>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002aec:	69e2      	ldr	r2, [r4, #28]
 8002aee:	2a00      	cmp	r2, #0
 8002af0:	d000      	beq.n	8002af4 <HAL_RCC_OscConfig+0x34>
 8002af2:	e173      	b.n	8002ddc <HAL_RCC_OscConfig+0x31c>
  return HAL_OK;
 8002af4:	2000      	movs	r0, #0
 8002af6:	e7e9      	b.n	8002acc <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002af8:	2238      	movs	r2, #56	; 0x38
 8002afa:	4dac      	ldr	r5, [pc, #688]	; (8002dac <HAL_RCC_OscConfig+0x2ec>)
 8002afc:	68ab      	ldr	r3, [r5, #8]
 8002afe:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b00:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b02:	2b10      	cmp	r3, #16
 8002b04:	d109      	bne.n	8002b1a <HAL_RCC_OscConfig+0x5a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b06:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b08:	0793      	lsls	r3, r2, #30
 8002b0a:	d108      	bne.n	8002b1e <HAL_RCC_OscConfig+0x5e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0c:	682b      	ldr	r3, [r5, #0]
 8002b0e:	039b      	lsls	r3, r3, #14
 8002b10:	d5e1      	bpl.n	8002ad6 <HAL_RCC_OscConfig+0x16>
 8002b12:	6863      	ldr	r3, [r4, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1de      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x16>
 8002b18:	e7d7      	b.n	8002aca <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d0f6      	beq.n	8002b0c <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b1e:	2280      	movs	r2, #128	; 0x80
 8002b20:	6863      	ldr	r3, [r4, #4]
 8002b22:	0252      	lsls	r2, r2, #9
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d111      	bne.n	8002b4c <HAL_RCC_OscConfig+0x8c>
 8002b28:	682a      	ldr	r2, [r5, #0]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002b2e:	f7ff fb1f 	bl	8002170 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b32:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8002b34:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b36:	02b6      	lsls	r6, r6, #10
 8002b38:	682b      	ldr	r3, [r5, #0]
 8002b3a:	4233      	tst	r3, r6
 8002b3c:	d1cb      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b3e:	f7ff fb17 	bl	8002170 <HAL_GetTick>
 8002b42:	1bc0      	subs	r0, r0, r7
 8002b44:	2864      	cmp	r0, #100	; 0x64
 8002b46:	d9f7      	bls.n	8002b38 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8002b48:	2003      	movs	r0, #3
 8002b4a:	e7bf      	b.n	8002acc <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b4c:	21a0      	movs	r1, #160	; 0xa0
 8002b4e:	02c9      	lsls	r1, r1, #11
 8002b50:	428b      	cmp	r3, r1
 8002b52:	d108      	bne.n	8002b66 <HAL_RCC_OscConfig+0xa6>
 8002b54:	2380      	movs	r3, #128	; 0x80
 8002b56:	6829      	ldr	r1, [r5, #0]
 8002b58:	02db      	lsls	r3, r3, #11
 8002b5a:	430b      	orrs	r3, r1
 8002b5c:	602b      	str	r3, [r5, #0]
 8002b5e:	682b      	ldr	r3, [r5, #0]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	602a      	str	r2, [r5, #0]
 8002b64:	e7e3      	b.n	8002b2e <HAL_RCC_OscConfig+0x6e>
 8002b66:	682a      	ldr	r2, [r5, #0]
 8002b68:	4991      	ldr	r1, [pc, #580]	; (8002db0 <HAL_RCC_OscConfig+0x2f0>)
 8002b6a:	400a      	ands	r2, r1
 8002b6c:	602a      	str	r2, [r5, #0]
 8002b6e:	682a      	ldr	r2, [r5, #0]
 8002b70:	4990      	ldr	r1, [pc, #576]	; (8002db4 <HAL_RCC_OscConfig+0x2f4>)
 8002b72:	400a      	ands	r2, r1
 8002b74:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1d9      	bne.n	8002b2e <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8002b7a:	f7ff faf9 	bl	8002170 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b7e:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8002b80:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b82:	02b6      	lsls	r6, r6, #10
 8002b84:	682b      	ldr	r3, [r5, #0]
 8002b86:	4233      	tst	r3, r6
 8002b88:	d0a5      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b8a:	f7ff faf1 	bl	8002170 <HAL_GetTick>
 8002b8e:	1bc0      	subs	r0, r0, r7
 8002b90:	2864      	cmp	r0, #100	; 0x64
 8002b92:	d9f7      	bls.n	8002b84 <HAL_RCC_OscConfig+0xc4>
 8002b94:	e7d8      	b.n	8002b48 <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b96:	2338      	movs	r3, #56	; 0x38
 8002b98:	4d84      	ldr	r5, [pc, #528]	; (8002dac <HAL_RCC_OscConfig+0x2ec>)
 8002b9a:	68aa      	ldr	r2, [r5, #8]
 8002b9c:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b9e:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002ba0:	2b10      	cmp	r3, #16
 8002ba2:	d129      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x138>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ba4:	2103      	movs	r1, #3
 8002ba6:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002ba8:	2a02      	cmp	r2, #2
 8002baa:	d127      	bne.n	8002bfc <HAL_RCC_OscConfig+0x13c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bac:	682a      	ldr	r2, [r5, #0]
 8002bae:	0552      	lsls	r2, r2, #21
 8002bb0:	d503      	bpl.n	8002bba <HAL_RCC_OscConfig+0xfa>
 8002bb2:	68e2      	ldr	r2, [r4, #12]
 8002bb4:	2a00      	cmp	r2, #0
 8002bb6:	d100      	bne.n	8002bba <HAL_RCC_OscConfig+0xfa>
 8002bb8:	e787      	b.n	8002aca <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bba:	6869      	ldr	r1, [r5, #4]
 8002bbc:	6962      	ldr	r2, [r4, #20]
 8002bbe:	487e      	ldr	r0, [pc, #504]	; (8002db8 <HAL_RCC_OscConfig+0x2f8>)
 8002bc0:	0212      	lsls	r2, r2, #8
 8002bc2:	4001      	ands	r1, r0
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10d      	bne.n	8002be8 <HAL_RCC_OscConfig+0x128>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002bcc:	682b      	ldr	r3, [r5, #0]
 8002bce:	4a7b      	ldr	r2, [pc, #492]	; (8002dbc <HAL_RCC_OscConfig+0x2fc>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	6922      	ldr	r2, [r4, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002bd8:	682b      	ldr	r3, [r5, #0]
 8002bda:	4a79      	ldr	r2, [pc, #484]	; (8002dc0 <HAL_RCC_OscConfig+0x300>)
 8002bdc:	049b      	lsls	r3, r3, #18
 8002bde:	0f5b      	lsrs	r3, r3, #29
 8002be0:	40da      	lsrs	r2, r3
 8002be2:	0013      	movs	r3, r2
 8002be4:	4a77      	ldr	r2, [pc, #476]	; (8002dc4 <HAL_RCC_OscConfig+0x304>)
 8002be6:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002be8:	4b77      	ldr	r3, [pc, #476]	; (8002dc8 <HAL_RCC_OscConfig+0x308>)
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	f7ff f948 	bl	8001e80 <HAL_InitTick>
 8002bf0:	2800      	cmp	r0, #0
 8002bf2:	d100      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x136>
 8002bf4:	e772      	b.n	8002adc <HAL_RCC_OscConfig+0x1c>
 8002bf6:	e768      	b.n	8002aca <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0d7      	beq.n	8002bac <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bfc:	68e3      	ldr	r3, [r4, #12]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d020      	beq.n	8002c44 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002c02:	682b      	ldr	r3, [r5, #0]
 8002c04:	4a6d      	ldr	r2, [pc, #436]	; (8002dbc <HAL_RCC_OscConfig+0x2fc>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c06:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002c08:	4013      	ands	r3, r2
 8002c0a:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c0c:	00f6      	lsls	r6, r6, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8002c12:	2380      	movs	r3, #128	; 0x80
 8002c14:	682a      	ldr	r2, [r5, #0]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002c1c:	f7ff faa8 	bl	8002170 <HAL_GetTick>
 8002c20:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c22:	682b      	ldr	r3, [r5, #0]
 8002c24:	4233      	tst	r3, r6
 8002c26:	d007      	beq.n	8002c38 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c28:	686a      	ldr	r2, [r5, #4]
 8002c2a:	6963      	ldr	r3, [r4, #20]
 8002c2c:	4962      	ldr	r1, [pc, #392]	; (8002db8 <HAL_RCC_OscConfig+0x2f8>)
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	400a      	ands	r2, r1
 8002c32:	4313      	orrs	r3, r2
 8002c34:	606b      	str	r3, [r5, #4]
 8002c36:	e751      	b.n	8002adc <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c38:	f7ff fa9a 	bl	8002170 <HAL_GetTick>
 8002c3c:	1bc0      	subs	r0, r0, r7
 8002c3e:	2802      	cmp	r0, #2
 8002c40:	d9ef      	bls.n	8002c22 <HAL_RCC_OscConfig+0x162>
 8002c42:	e781      	b.n	8002b48 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8002c44:	682b      	ldr	r3, [r5, #0]
 8002c46:	4a61      	ldr	r2, [pc, #388]	; (8002dcc <HAL_RCC_OscConfig+0x30c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c48:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002c4e:	f7ff fa8f 	bl	8002170 <HAL_GetTick>
 8002c52:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c54:	00f6      	lsls	r6, r6, #3
 8002c56:	682b      	ldr	r3, [r5, #0]
 8002c58:	4233      	tst	r3, r6
 8002c5a:	d100      	bne.n	8002c5e <HAL_RCC_OscConfig+0x19e>
 8002c5c:	e73e      	b.n	8002adc <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c5e:	f7ff fa87 	bl	8002170 <HAL_GetTick>
 8002c62:	1bc0      	subs	r0, r0, r7
 8002c64:	2802      	cmp	r0, #2
 8002c66:	d9f6      	bls.n	8002c56 <HAL_RCC_OscConfig+0x196>
 8002c68:	e76e      	b.n	8002b48 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002c6a:	2138      	movs	r1, #56	; 0x38
 8002c6c:	4b4f      	ldr	r3, [pc, #316]	; (8002dac <HAL_RCC_OscConfig+0x2ec>)
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	001d      	movs	r5, r3
 8002c72:	400a      	ands	r2, r1
 8002c74:	2a18      	cmp	r2, #24
 8002c76:	d108      	bne.n	8002c8a <HAL_RCC_OscConfig+0x1ca>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c7a:	079b      	lsls	r3, r3, #30
 8002c7c:	d400      	bmi.n	8002c80 <HAL_RCC_OscConfig+0x1c0>
 8002c7e:	e731      	b.n	8002ae4 <HAL_RCC_OscConfig+0x24>
 8002c80:	69a3      	ldr	r3, [r4, #24]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d000      	beq.n	8002c88 <HAL_RCC_OscConfig+0x1c8>
 8002c86:	e72d      	b.n	8002ae4 <HAL_RCC_OscConfig+0x24>
 8002c88:	e71f      	b.n	8002aca <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c8a:	69a2      	ldr	r2, [r4, #24]
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	2a00      	cmp	r2, #0
 8002c90:	d010      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_LSI_ENABLE();
 8002c92:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c94:	2602      	movs	r6, #2
        __HAL_RCC_LSI_ENABLE();
 8002c96:	4313      	orrs	r3, r2
 8002c98:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002c9a:	f7ff fa69 	bl	8002170 <HAL_GetTick>
 8002c9e:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ca0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8002ca2:	4233      	tst	r3, r6
 8002ca4:	d000      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x1e8>
 8002ca6:	e71d      	b.n	8002ae4 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca8:	f7ff fa62 	bl	8002170 <HAL_GetTick>
 8002cac:	1bc0      	subs	r0, r0, r7
 8002cae:	2802      	cmp	r0, #2
 8002cb0:	d9f6      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x1e0>
 8002cb2:	e749      	b.n	8002b48 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_LSI_DISABLE();
 8002cb4:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cb6:	2602      	movs	r6, #2
        __HAL_RCC_LSI_DISABLE();
 8002cb8:	439a      	bics	r2, r3
 8002cba:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002cbc:	f7ff fa58 	bl	8002170 <HAL_GetTick>
 8002cc0:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cc2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8002cc4:	4233      	tst	r3, r6
 8002cc6:	d100      	bne.n	8002cca <HAL_RCC_OscConfig+0x20a>
 8002cc8:	e70c      	b.n	8002ae4 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cca:	f7ff fa51 	bl	8002170 <HAL_GetTick>
 8002cce:	1bc0      	subs	r0, r0, r7
 8002cd0:	2802      	cmp	r0, #2
 8002cd2:	d9f6      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x202>
 8002cd4:	e738      	b.n	8002b48 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002cd6:	2138      	movs	r1, #56	; 0x38
 8002cd8:	4b34      	ldr	r3, [pc, #208]	; (8002dac <HAL_RCC_OscConfig+0x2ec>)
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	001d      	movs	r5, r3
 8002cde:	400a      	ands	r2, r1
 8002ce0:	2a20      	cmp	r2, #32
 8002ce2:	d108      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x236>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce6:	079b      	lsls	r3, r3, #30
 8002ce8:	d400      	bmi.n	8002cec <HAL_RCC_OscConfig+0x22c>
 8002cea:	e6ff      	b.n	8002aec <HAL_RCC_OscConfig+0x2c>
 8002cec:	68a3      	ldr	r3, [r4, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d000      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x234>
 8002cf2:	e6fb      	b.n	8002aec <HAL_RCC_OscConfig+0x2c>
 8002cf4:	e6e9      	b.n	8002aca <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cf6:	2280      	movs	r2, #128	; 0x80
 8002cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfa:	0552      	lsls	r2, r2, #21
 8002cfc:	4213      	tst	r3, r2
 8002cfe:	d100      	bne.n	8002d02 <HAL_RCC_OscConfig+0x242>
 8002d00:	e0ed      	b.n	8002ede <HAL_RCC_OscConfig+0x41e>
    FlagStatus       pwrclkchanged = RESET;
 8002d02:	2300      	movs	r3, #0
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d04:	2780      	movs	r7, #128	; 0x80
 8002d06:	4e32      	ldr	r6, [pc, #200]	; (8002dd0 <HAL_RCC_OscConfig+0x310>)
    FlagStatus       pwrclkchanged = RESET;
 8002d08:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d0a:	6833      	ldr	r3, [r6, #0]
 8002d0c:	007f      	lsls	r7, r7, #1
 8002d0e:	423b      	tst	r3, r7
 8002d10:	d015      	beq.n	8002d3e <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d12:	68a3      	ldr	r3, [r4, #8]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d122      	bne.n	8002d5e <HAL_RCC_OscConfig+0x29e>
 8002d18:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8002d1e:	f7ff fa27 	bl	8002170 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d22:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8002d24:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d26:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8002d28:	423b      	tst	r3, r7
 8002d2a:	d038      	beq.n	8002d9e <HAL_RCC_OscConfig+0x2de>
      if (pwrclkchanged == SET)
 8002d2c:	9b00      	ldr	r3, [sp, #0]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d000      	beq.n	8002d34 <HAL_RCC_OscConfig+0x274>
 8002d32:	e6db      	b.n	8002aec <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 8002d34:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002d36:	4a27      	ldr	r2, [pc, #156]	; (8002dd4 <HAL_RCC_OscConfig+0x314>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	63eb      	str	r3, [r5, #60]	; 0x3c
 8002d3c:	e6d6      	b.n	8002aec <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d3e:	6833      	ldr	r3, [r6, #0]
 8002d40:	433b      	orrs	r3, r7
 8002d42:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002d44:	f7ff fa14 	bl	8002170 <HAL_GetTick>
 8002d48:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d4a:	6833      	ldr	r3, [r6, #0]
 8002d4c:	423b      	tst	r3, r7
 8002d4e:	d1e0      	bne.n	8002d12 <HAL_RCC_OscConfig+0x252>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d50:	f7ff fa0e 	bl	8002170 <HAL_GetTick>
 8002d54:	9b01      	ldr	r3, [sp, #4]
 8002d56:	1ac0      	subs	r0, r0, r3
 8002d58:	2802      	cmp	r0, #2
 8002d5a:	d9f6      	bls.n	8002d4a <HAL_RCC_OscConfig+0x28a>
 8002d5c:	e6f4      	b.n	8002b48 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d5e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002d60:	2b05      	cmp	r3, #5
 8002d62:	d105      	bne.n	8002d70 <HAL_RCC_OscConfig+0x2b0>
 8002d64:	3b01      	subs	r3, #1
 8002d66:	4313      	orrs	r3, r2
 8002d68:	65eb      	str	r3, [r5, #92]	; 0x5c
 8002d6a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e7d4      	b.n	8002d1a <HAL_RCC_OscConfig+0x25a>
 8002d70:	2101      	movs	r1, #1
 8002d72:	438a      	bics	r2, r1
 8002d74:	65ea      	str	r2, [r5, #92]	; 0x5c
 8002d76:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002d78:	3103      	adds	r1, #3
 8002d7a:	438a      	bics	r2, r1
 8002d7c:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1cd      	bne.n	8002d1e <HAL_RCC_OscConfig+0x25e>
        tickstart = HAL_GetTick();
 8002d82:	f7ff f9f5 	bl	8002170 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d86:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8002d88:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d8a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8002d8c:	423b      	tst	r3, r7
 8002d8e:	d0cd      	beq.n	8002d2c <HAL_RCC_OscConfig+0x26c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d90:	f7ff f9ee 	bl	8002170 <HAL_GetTick>
 8002d94:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <HAL_RCC_OscConfig+0x318>)
 8002d96:	1b80      	subs	r0, r0, r6
 8002d98:	4298      	cmp	r0, r3
 8002d9a:	d9f6      	bls.n	8002d8a <HAL_RCC_OscConfig+0x2ca>
 8002d9c:	e6d4      	b.n	8002b48 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9e:	f7ff f9e7 	bl	8002170 <HAL_GetTick>
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <HAL_RCC_OscConfig+0x318>)
 8002da4:	1b80      	subs	r0, r0, r6
 8002da6:	4298      	cmp	r0, r3
 8002da8:	d9bd      	bls.n	8002d26 <HAL_RCC_OscConfig+0x266>
 8002daa:	e6cd      	b.n	8002b48 <HAL_RCC_OscConfig+0x88>
 8002dac:	40021000 	.word	0x40021000
 8002db0:	fffeffff 	.word	0xfffeffff
 8002db4:	fffbffff 	.word	0xfffbffff
 8002db8:	ffff80ff 	.word	0xffff80ff
 8002dbc:	ffffc7ff 	.word	0xffffc7ff
 8002dc0:	00f42400 	.word	0x00f42400
 8002dc4:	20000004 	.word	0x20000004
 8002dc8:	2000000c 	.word	0x2000000c
 8002dcc:	fffffeff 	.word	0xfffffeff
 8002dd0:	40007000 	.word	0x40007000
 8002dd4:	efffffff 	.word	0xefffffff
 8002dd8:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ddc:	2038      	movs	r0, #56	; 0x38
 8002dde:	4b44      	ldr	r3, [pc, #272]	; (8002ef0 <HAL_RCC_OscConfig+0x430>)
 8002de0:	6899      	ldr	r1, [r3, #8]
 8002de2:	001d      	movs	r5, r3
 8002de4:	4001      	ands	r1, r0
 8002de6:	2910      	cmp	r1, #16
 8002de8:	d052      	beq.n	8002e90 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_DISABLE();
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4941      	ldr	r1, [pc, #260]	; (8002ef4 <HAL_RCC_OscConfig+0x434>)
 8002dee:	400b      	ands	r3, r1
 8002df0:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002df2:	2a02      	cmp	r2, #2
 8002df4:	d135      	bne.n	8002e62 <HAL_RCC_OscConfig+0x3a2>
        tickstart = HAL_GetTick();
 8002df6:	f7ff f9bb 	bl	8002170 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dfa:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8002dfc:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dfe:	04b6      	lsls	r6, r6, #18
 8002e00:	682b      	ldr	r3, [r5, #0]
 8002e02:	4233      	tst	r3, r6
 8002e04:	d127      	bne.n	8002e56 <HAL_RCC_OscConfig+0x396>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e06:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002e08:	6a23      	ldr	r3, [r4, #32]
 8002e0a:	68ea      	ldr	r2, [r5, #12]
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	493a      	ldr	r1, [pc, #232]	; (8002ef8 <HAL_RCC_OscConfig+0x438>)
 8002e10:	400a      	ands	r2, r1
 8002e12:	4313      	orrs	r3, r2
 8002e14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e16:	4313      	orrs	r3, r2
 8002e18:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1e:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e20:	0212      	lsls	r2, r2, #8
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8002e26:	2380      	movs	r3, #128	; 0x80
 8002e28:	682a      	ldr	r2, [r5, #0]
 8002e2a:	045b      	lsls	r3, r3, #17
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002e30:	2380      	movs	r3, #128	; 0x80
 8002e32:	68ea      	ldr	r2, [r5, #12]
 8002e34:	055b      	lsls	r3, r3, #21
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8002e3a:	f7ff f999 	bl	8002170 <HAL_GetTick>
 8002e3e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e40:	04a4      	lsls	r4, r4, #18
 8002e42:	682b      	ldr	r3, [r5, #0]
 8002e44:	4223      	tst	r3, r4
 8002e46:	d000      	beq.n	8002e4a <HAL_RCC_OscConfig+0x38a>
 8002e48:	e654      	b.n	8002af4 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4a:	f7ff f991 	bl	8002170 <HAL_GetTick>
 8002e4e:	1b80      	subs	r0, r0, r6
 8002e50:	2802      	cmp	r0, #2
 8002e52:	d9f6      	bls.n	8002e42 <HAL_RCC_OscConfig+0x382>
 8002e54:	e678      	b.n	8002b48 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e56:	f7ff f98b 	bl	8002170 <HAL_GetTick>
 8002e5a:	1bc0      	subs	r0, r0, r7
 8002e5c:	2802      	cmp	r0, #2
 8002e5e:	d9cf      	bls.n	8002e00 <HAL_RCC_OscConfig+0x340>
 8002e60:	e672      	b.n	8002b48 <HAL_RCC_OscConfig+0x88>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002e62:	2203      	movs	r2, #3
 8002e64:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e66:	2480      	movs	r4, #128	; 0x80
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002e68:	4393      	bics	r3, r2
 8002e6a:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002e6c:	68eb      	ldr	r3, [r5, #12]
 8002e6e:	4a23      	ldr	r2, [pc, #140]	; (8002efc <HAL_RCC_OscConfig+0x43c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e70:	04a4      	lsls	r4, r4, #18
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002e72:	4013      	ands	r3, r2
 8002e74:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8002e76:	f7ff f97b 	bl	8002170 <HAL_GetTick>
 8002e7a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e7c:	682b      	ldr	r3, [r5, #0]
 8002e7e:	4223      	tst	r3, r4
 8002e80:	d100      	bne.n	8002e84 <HAL_RCC_OscConfig+0x3c4>
 8002e82:	e637      	b.n	8002af4 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e84:	f7ff f974 	bl	8002170 <HAL_GetTick>
 8002e88:	1b80      	subs	r0, r0, r6
 8002e8a:	2802      	cmp	r0, #2
 8002e8c:	d9f6      	bls.n	8002e7c <HAL_RCC_OscConfig+0x3bc>
 8002e8e:	e65b      	b.n	8002b48 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e90:	2a01      	cmp	r2, #1
 8002e92:	d100      	bne.n	8002e96 <HAL_RCC_OscConfig+0x3d6>
 8002e94:	e619      	b.n	8002aca <HAL_RCC_OscConfig+0xa>
        temp_pllckcfg = RCC->PLLCFGR;
 8002e96:	68d8      	ldr	r0, [r3, #12]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e98:	2303      	movs	r3, #3
 8002e9a:	6a22      	ldr	r2, [r4, #32]
 8002e9c:	4003      	ands	r3, r0
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d000      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x3e4>
 8002ea2:	e612      	b.n	8002aca <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ea4:	2370      	movs	r3, #112	; 0x70
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea6:	6a62      	ldr	r2, [r4, #36]	; 0x24
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ea8:	4003      	ands	r3, r0
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d000      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x3f0>
 8002eae:	e60c      	b.n	8002aca <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eb0:	22fe      	movs	r2, #254	; 0xfe
 8002eb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002eb4:	01d2      	lsls	r2, r2, #7
 8002eb6:	4002      	ands	r2, r0
 8002eb8:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d000      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x400>
 8002ebe:	e604      	b.n	8002aca <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ec0:	23f8      	movs	r3, #248	; 0xf8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ec2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ec4:	039b      	lsls	r3, r3, #14
 8002ec6:	4003      	ands	r3, r0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d000      	beq.n	8002ece <HAL_RCC_OscConfig+0x40e>
 8002ecc:	e5fd      	b.n	8002aca <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ece:	6b23      	ldr	r3, [r4, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002ed0:	0f40      	lsrs	r0, r0, #29
 8002ed2:	0740      	lsls	r0, r0, #29
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ed4:	1ac0      	subs	r0, r0, r3
 8002ed6:	1e43      	subs	r3, r0, #1
 8002ed8:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8002eda:	b2c0      	uxtb	r0, r0
 8002edc:	e5f6      	b.n	8002acc <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_PWR_CLK_ENABLE();
 8002ede:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	63eb      	str	r3, [r5, #60]	; 0x3c
 8002ee4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	9303      	str	r3, [sp, #12]
 8002eea:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e709      	b.n	8002d04 <HAL_RCC_OscConfig+0x244>
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	feffffff 	.word	0xfeffffff
 8002ef8:	1fc1808c 	.word	0x1fc1808c
 8002efc:	effeffff 	.word	0xeffeffff

08002f00 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f00:	2338      	movs	r3, #56	; 0x38
 8002f02:	4a1f      	ldr	r2, [pc, #124]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x80>)
{
 8002f04:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f06:	6891      	ldr	r1, [r2, #8]
 8002f08:	0014      	movs	r4, r2
 8002f0a:	4219      	tst	r1, r3
 8002f0c:	d108      	bne.n	8002f20 <HAL_RCC_GetSysClockFreq+0x20>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002f0e:	2101      	movs	r1, #1
 8002f10:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002f12:	481c      	ldr	r0, [pc, #112]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x84>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002f14:	049b      	lsls	r3, r3, #18
 8002f16:	0f5b      	lsrs	r3, r3, #29
 8002f18:	4099      	lsls	r1, r3
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
        break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
    sysclockfreq = pllvco / pllr;
 8002f1a:	f7fd f921 	bl	8000160 <__udivsi3>
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8002f1e:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f20:	6891      	ldr	r1, [r2, #8]
 8002f22:	4019      	ands	r1, r3
 8002f24:	2908      	cmp	r1, #8
 8002f26:	d025      	beq.n	8002f74 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002f28:	6891      	ldr	r1, [r2, #8]
 8002f2a:	4019      	ands	r1, r3
 8002f2c:	2910      	cmp	r1, #16
 8002f2e:	d115      	bne.n	8002f5c <HAL_RCC_GetSysClockFreq+0x5c>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f30:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f32:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f34:	43db      	mvns	r3, r3
 8002f36:	227f      	movs	r2, #127	; 0x7f
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f38:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f3a:	0649      	lsls	r1, r1, #25
 8002f3c:	0f49      	lsrs	r1, r1, #29
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f3e:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f40:	3101      	adds	r1, #1
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f42:	4015      	ands	r5, r2
    switch (pllsource)
 8002f44:	079b      	lsls	r3, r3, #30
 8002f46:	d107      	bne.n	8002f58 <HAL_RCC_GetSysClockFreq+0x58>
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f48:	480f      	ldr	r0, [pc, #60]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f4a:	f7fd f909 	bl	8000160 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002f4e:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f50:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002f52:	0f49      	lsrs	r1, r1, #29
 8002f54:	3101      	adds	r1, #1
 8002f56:	e7e0      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f58:	480a      	ldr	r0, [pc, #40]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x84>)
 8002f5a:	e7f6      	b.n	8002f4a <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002f5c:	6891      	ldr	r1, [r2, #8]
 8002f5e:	4019      	ands	r1, r3
 8002f60:	2920      	cmp	r1, #32
 8002f62:	d009      	beq.n	8002f78 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002f64:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 8002f66:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b18      	cmp	r3, #24
 8002f6c:	d1d7      	bne.n	8002f1e <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSI_VALUE;
 8002f6e:	20fa      	movs	r0, #250	; 0xfa
 8002f70:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 8002f72:	e7d4      	b.n	8002f1e <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = HSE_VALUE;
 8002f74:	4804      	ldr	r0, [pc, #16]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x88>)
 8002f76:	e7d2      	b.n	8002f1e <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSE_VALUE;
 8002f78:	2080      	movs	r0, #128	; 0x80
 8002f7a:	0200      	lsls	r0, r0, #8
 8002f7c:	e7cf      	b.n	8002f1e <HAL_RCC_GetSysClockFreq+0x1e>
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	40021000 	.word	0x40021000
 8002f84:	00f42400 	.word	0x00f42400
 8002f88:	007a1200 	.word	0x007a1200

08002f8c <HAL_RCC_ClockConfig>:
{
 8002f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f8e:	0005      	movs	r5, r0
 8002f90:	000e      	movs	r6, r1
  if (RCC_ClkInitStruct == NULL)
 8002f92:	2800      	cmp	r0, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8002f96:	2001      	movs	r0, #1
}
 8002f98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f9a:	2707      	movs	r7, #7
 8002f9c:	4c4a      	ldr	r4, [pc, #296]	; (80030c8 <HAL_RCC_ClockConfig+0x13c>)
 8002f9e:	6823      	ldr	r3, [r4, #0]
 8002fa0:	403b      	ands	r3, r7
 8002fa2:	428b      	cmp	r3, r1
 8002fa4:	d32a      	bcc.n	8002ffc <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa6:	6829      	ldr	r1, [r5, #0]
 8002fa8:	078b      	lsls	r3, r1, #30
 8002faa:	d43b      	bmi.n	8003024 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fac:	07cb      	lsls	r3, r1, #31
 8002fae:	d448      	bmi.n	8003042 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb0:	2707      	movs	r7, #7
 8002fb2:	6823      	ldr	r3, [r4, #0]
 8002fb4:	403b      	ands	r3, r7
 8002fb6:	429e      	cmp	r6, r3
 8002fb8:	d20a      	bcs.n	8002fd0 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fba:	6823      	ldr	r3, [r4, #0]
 8002fbc:	43bb      	bics	r3, r7
 8002fbe:	4333      	orrs	r3, r6
 8002fc0:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002fc2:	f7ff f8d5 	bl	8002170 <HAL_GetTick>
 8002fc6:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	403b      	ands	r3, r7
 8002fcc:	429e      	cmp	r6, r3
 8002fce:	d16b      	bne.n	80030a8 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd0:	682b      	ldr	r3, [r5, #0]
 8002fd2:	4c3e      	ldr	r4, [pc, #248]	; (80030cc <HAL_RCC_ClockConfig+0x140>)
 8002fd4:	075b      	lsls	r3, r3, #29
 8002fd6:	d46f      	bmi.n	80030b8 <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002fd8:	f7ff ff92 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8002fdc:	68a3      	ldr	r3, [r4, #8]
 8002fde:	4a3c      	ldr	r2, [pc, #240]	; (80030d0 <HAL_RCC_ClockConfig+0x144>)
 8002fe0:	051b      	lsls	r3, r3, #20
 8002fe2:	0f1b      	lsrs	r3, r3, #28
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	589b      	ldr	r3, [r3, r2]
 8002fe8:	221f      	movs	r2, #31
 8002fea:	4013      	ands	r3, r2
 8002fec:	40d8      	lsrs	r0, r3
 8002fee:	4b39      	ldr	r3, [pc, #228]	; (80030d4 <HAL_RCC_ClockConfig+0x148>)
 8002ff0:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8002ff2:	4b39      	ldr	r3, [pc, #228]	; (80030d8 <HAL_RCC_ClockConfig+0x14c>)
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	f7fe ff43 	bl	8001e80 <HAL_InitTick>
 8002ffa:	e7cd      	b.n	8002f98 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	43bb      	bics	r3, r7
 8003000:	430b      	orrs	r3, r1
 8003002:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003004:	f7ff f8b4 	bl	8002170 <HAL_GetTick>
 8003008:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800300a:	6823      	ldr	r3, [r4, #0]
 800300c:	403b      	ands	r3, r7
 800300e:	429e      	cmp	r6, r3
 8003010:	d0c9      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003012:	f7ff f8ad 	bl	8002170 <HAL_GetTick>
 8003016:	9b01      	ldr	r3, [sp, #4]
 8003018:	1ac0      	subs	r0, r0, r3
 800301a:	4b30      	ldr	r3, [pc, #192]	; (80030dc <HAL_RCC_ClockConfig+0x150>)
 800301c:	4298      	cmp	r0, r3
 800301e:	d9f4      	bls.n	800300a <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8003020:	2003      	movs	r0, #3
 8003022:	e7b9      	b.n	8002f98 <HAL_RCC_ClockConfig+0xc>
 8003024:	4a29      	ldr	r2, [pc, #164]	; (80030cc <HAL_RCC_ClockConfig+0x140>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003026:	074b      	lsls	r3, r1, #29
 8003028:	d504      	bpl.n	8003034 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800302a:	23e0      	movs	r3, #224	; 0xe0
 800302c:	6890      	ldr	r0, [r2, #8]
 800302e:	01db      	lsls	r3, r3, #7
 8003030:	4303      	orrs	r3, r0
 8003032:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003034:	6893      	ldr	r3, [r2, #8]
 8003036:	482a      	ldr	r0, [pc, #168]	; (80030e0 <HAL_RCC_ClockConfig+0x154>)
 8003038:	4003      	ands	r3, r0
 800303a:	68a8      	ldr	r0, [r5, #8]
 800303c:	4303      	orrs	r3, r0
 800303e:	6093      	str	r3, [r2, #8]
 8003040:	e7b4      	b.n	8002fac <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003042:	686a      	ldr	r2, [r5, #4]
 8003044:	4f21      	ldr	r7, [pc, #132]	; (80030cc <HAL_RCC_ClockConfig+0x140>)
 8003046:	2a01      	cmp	r2, #1
 8003048:	d119      	bne.n	800307e <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	039b      	lsls	r3, r3, #14
 800304e:	d5a2      	bpl.n	8002f96 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003050:	2107      	movs	r1, #7
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	438b      	bics	r3, r1
 8003056:	4313      	orrs	r3, r2
 8003058:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 800305a:	f7ff f889 	bl	8002170 <HAL_GetTick>
 800305e:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003060:	2338      	movs	r3, #56	; 0x38
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	401a      	ands	r2, r3
 8003066:	686b      	ldr	r3, [r5, #4]
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	429a      	cmp	r2, r3
 800306c:	d0a0      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306e:	f7ff f87f 	bl	8002170 <HAL_GetTick>
 8003072:	9b01      	ldr	r3, [sp, #4]
 8003074:	1ac0      	subs	r0, r0, r3
 8003076:	4b19      	ldr	r3, [pc, #100]	; (80030dc <HAL_RCC_ClockConfig+0x150>)
 8003078:	4298      	cmp	r0, r3
 800307a:	d9f1      	bls.n	8003060 <HAL_RCC_ClockConfig+0xd4>
 800307c:	e7d0      	b.n	8003020 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800307e:	2a02      	cmp	r2, #2
 8003080:	d103      	bne.n	800308a <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	019b      	lsls	r3, r3, #6
 8003086:	d4e3      	bmi.n	8003050 <HAL_RCC_ClockConfig+0xc4>
 8003088:	e785      	b.n	8002f96 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800308a:	2a00      	cmp	r2, #0
 800308c:	d103      	bne.n	8003096 <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	055b      	lsls	r3, r3, #21
 8003092:	d4dd      	bmi.n	8003050 <HAL_RCC_ClockConfig+0xc4>
 8003094:	e77f      	b.n	8002f96 <HAL_RCC_ClockConfig+0xa>
 8003096:	2302      	movs	r3, #2
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003098:	2a03      	cmp	r2, #3
 800309a:	d103      	bne.n	80030a4 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800309c:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800309e:	4219      	tst	r1, r3
 80030a0:	d1d6      	bne.n	8003050 <HAL_RCC_ClockConfig+0xc4>
 80030a2:	e778      	b.n	8002f96 <HAL_RCC_ClockConfig+0xa>
 80030a4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80030a6:	e7fa      	b.n	800309e <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a8:	f7ff f862 	bl	8002170 <HAL_GetTick>
 80030ac:	9b01      	ldr	r3, [sp, #4]
 80030ae:	1ac0      	subs	r0, r0, r3
 80030b0:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <HAL_RCC_ClockConfig+0x150>)
 80030b2:	4298      	cmp	r0, r3
 80030b4:	d988      	bls.n	8002fc8 <HAL_RCC_ClockConfig+0x3c>
 80030b6:	e7b3      	b.n	8003020 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80030b8:	68a3      	ldr	r3, [r4, #8]
 80030ba:	4a0a      	ldr	r2, [pc, #40]	; (80030e4 <HAL_RCC_ClockConfig+0x158>)
 80030bc:	4013      	ands	r3, r2
 80030be:	68ea      	ldr	r2, [r5, #12]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	60a3      	str	r3, [r4, #8]
 80030c4:	e788      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x4c>
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	40022000 	.word	0x40022000
 80030cc:	40021000 	.word	0x40021000
 80030d0:	0800de60 	.word	0x0800de60
 80030d4:	20000004 	.word	0x20000004
 80030d8:	2000000c 	.word	0x2000000c
 80030dc:	00001388 	.word	0x00001388
 80030e0:	fffff0ff 	.word	0xfffff0ff
 80030e4:	ffff8fff 	.word	0xffff8fff

080030e8 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80030e8:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80030ea:	4a07      	ldr	r2, [pc, #28]	; (8003108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	045b      	lsls	r3, r3, #17
 80030f0:	0f5b      	lsrs	r3, r3, #29
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	589b      	ldr	r3, [r3, r2]
 80030f6:	221f      	movs	r2, #31
 80030f8:	4013      	ands	r3, r2
 80030fa:	4a04      	ldr	r2, [pc, #16]	; (800310c <HAL_RCC_GetPCLK1Freq+0x24>)
 80030fc:	6810      	ldr	r0, [r2, #0]
 80030fe:	40d8      	lsrs	r0, r3
}
 8003100:	4770      	bx	lr
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	40021000 	.word	0x40021000
 8003108:	0800dea0 	.word	0x0800dea0
 800310c:	20000004 	.word	0x20000004

08003110 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003110:	2207      	movs	r2, #7
{
 8003112:	b530      	push	{r4, r5, lr}

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003114:	25f0      	movs	r5, #240	; 0xf0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003116:	4b09      	ldr	r3, [pc, #36]	; (800313c <HAL_RCC_GetClockConfig+0x2c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003118:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800311a:	689c      	ldr	r4, [r3, #8]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800311c:	012d      	lsls	r5, r5, #4
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800311e:	4014      	ands	r4, r2
 8003120:	6044      	str	r4, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003122:	689c      	ldr	r4, [r3, #8]
 8003124:	402c      	ands	r4, r5
 8003126:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8003128:	24e0      	movs	r4, #224	; 0xe0
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	01e4      	lsls	r4, r4, #7
 800312e:	4023      	ands	r3, r4
 8003130:	60c3      	str	r3, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003132:	4b03      	ldr	r3, [pc, #12]	; (8003140 <HAL_RCC_GetClockConfig+0x30>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4013      	ands	r3, r2
 8003138:	600b      	str	r3, [r1, #0]
}
 800313a:	bd30      	pop	{r4, r5, pc}
 800313c:	40021000 	.word	0x40021000
 8003140:	40022000 	.word	0x40022000

08003144 <HAL_RCC_EnableCSS>:
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	4a03      	ldr	r2, [pc, #12]	; (8003154 <HAL_RCC_EnableCSS+0x10>)
 8003148:	031b      	lsls	r3, r3, #12
 800314a:	6811      	ldr	r1, [r2, #0]
 800314c:	430b      	orrs	r3, r1
 800314e:	6013      	str	r3, [r2, #0]
}
 8003150:	4770      	bx	lr
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	40021000 	.word	0x40021000

08003158 <HAL_RCC_EnableLSECSS>:
  *         cleared by a backup domain reset.
  * @retval None
  */
void HAL_RCC_EnableLSECSS(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8003158:	2320      	movs	r3, #32
 800315a:	4a02      	ldr	r2, [pc, #8]	; (8003164 <HAL_RCC_EnableLSECSS+0xc>)
 800315c:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 800315e:	430b      	orrs	r3, r1
 8003160:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8003162:	4770      	bx	lr
 8003164:	40021000 	.word	0x40021000

08003168 <HAL_RCC_CSSCallback>:
 8003168:	4770      	bx	lr

0800316a <HAL_RCC_LSECSSCallback>:
__weak void HAL_RCC_LSECSSCallback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_LSECSSCallback should be implemented in the user file
   */
}
 800316a:	4770      	bx	lr

0800316c <HAL_RCC_NMI_IRQHandler>:
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 800316c:	23c0      	movs	r3, #192	; 0xc0
  uint32_t itflag = RCC->CIFR;
 800316e:	4a07      	ldr	r2, [pc, #28]	; (800318c <HAL_RCC_NMI_IRQHandler+0x20>)
{
 8003170:	b510      	push	{r4, lr}
  uint32_t itflag = RCC->CIFR;
 8003172:	69d4      	ldr	r4, [r2, #28]
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4023      	ands	r3, r4
 8003178:	6213      	str	r3, [r2, #32]
  if ((itflag & RCC_CIFR_CSSF) != 0x00u)
 800317a:	05e3      	lsls	r3, r4, #23
 800317c:	d501      	bpl.n	8003182 <HAL_RCC_NMI_IRQHandler+0x16>
    HAL_RCC_CSSCallback();
 800317e:	f7ff fff3 	bl	8003168 <HAL_RCC_CSSCallback>
  if ((itflag & RCC_CIFR_LSECSSF) != 0x00u)
 8003182:	05a3      	lsls	r3, r4, #22
 8003184:	d501      	bpl.n	800318a <HAL_RCC_NMI_IRQHandler+0x1e>
    HAL_RCC_LSECSSCallback();
 8003186:	f7ff fff0 	bl	800316a <HAL_RCC_LSECSSCallback>
}
 800318a:	bd10      	pop	{r4, pc}
 800318c:	40021000 	.word	0x40021000

08003190 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003192:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003194:	682b      	ldr	r3, [r5, #0]
{
 8003196:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003198:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800319a:	039b      	lsls	r3, r3, #14
 800319c:	d54f      	bpl.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xae>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800319e:	2280      	movs	r2, #128	; 0x80
 80031a0:	4c4b      	ldr	r4, [pc, #300]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80031a2:	0552      	lsls	r2, r2, #21
 80031a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80031a6:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a8:	4213      	tst	r3, r2
 80031aa:	d108      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80031ae:	4313      	orrs	r3, r2
 80031b0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80031b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80031b4:	4013      	ands	r3, r2
 80031b6:	9303      	str	r3, [sp, #12]
 80031b8:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80031ba:	2301      	movs	r3, #1
 80031bc:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031be:	2780      	movs	r7, #128	; 0x80
 80031c0:	4e44      	ldr	r6, [pc, #272]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80031c2:	007f      	lsls	r7, r7, #1
 80031c4:	6833      	ldr	r3, [r6, #0]
 80031c6:	433b      	orrs	r3, r7
 80031c8:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031ca:	f7fe ffd1 	bl	8002170 <HAL_GetTick>
 80031ce:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031d0:	6833      	ldr	r3, [r6, #0]
 80031d2:	423b      	tst	r3, r7
 80031d4:	d025      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031d6:	23c0      	movs	r3, #192	; 0xc0
 80031d8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031de:	d00f      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80031e0:	69aa      	ldr	r2, [r5, #24]
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00c      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x70>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031e6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80031e8:	4b3b      	ldr	r3, [pc, #236]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031ea:	6de1      	ldr	r1, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031ec:	4013      	ands	r3, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 80031ee:	2280      	movs	r2, #128	; 0x80
 80031f0:	0252      	lsls	r2, r2, #9
 80031f2:	430a      	orrs	r2, r1
 80031f4:	65e2      	str	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031f6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80031f8:	4938      	ldr	r1, [pc, #224]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80031fa:	400a      	ands	r2, r1
 80031fc:	65e2      	str	r2, [r4, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031fe:	65e3      	str	r3, [r4, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003200:	07db      	lsls	r3, r3, #31
 8003202:	d506      	bpl.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7fe ffb4 	bl	8002170 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003208:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 800320a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800320c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800320e:	423b      	tst	r3, r7
 8003210:	d057      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x132>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003212:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003214:	4a30      	ldr	r2, [pc, #192]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003216:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003218:	4013      	ands	r3, r2
 800321a:	69aa      	ldr	r2, [r5, #24]
 800321c:	4313      	orrs	r3, r2
 800321e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8003220:	e006      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003222:	f7fe ffa5 	bl	8002170 <HAL_GetTick>
 8003226:	9b01      	ldr	r3, [sp, #4]
 8003228:	1ac0      	subs	r0, r0, r3
 800322a:	2802      	cmp	r0, #2
 800322c:	d9d0      	bls.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 800322e:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003230:	9b00      	ldr	r3, [sp, #0]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d103      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003236:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003238:	4a29      	ldr	r2, [pc, #164]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800323a:	4013      	ands	r3, r2
 800323c:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800323e:	682a      	ldr	r2, [r5, #0]
 8003240:	07d3      	lsls	r3, r2, #31
 8003242:	d506      	bpl.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003244:	2403      	movs	r4, #3
 8003246:	4922      	ldr	r1, [pc, #136]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003248:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800324a:	43a3      	bics	r3, r4
 800324c:	686c      	ldr	r4, [r5, #4]
 800324e:	4323      	orrs	r3, r4
 8003250:	654b      	str	r3, [r1, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003252:	0793      	lsls	r3, r2, #30
 8003254:	d506      	bpl.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003256:	240c      	movs	r4, #12
 8003258:	491d      	ldr	r1, [pc, #116]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800325a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800325c:	43a3      	bics	r3, r4
 800325e:	68ac      	ldr	r4, [r5, #8]
 8003260:	4323      	orrs	r3, r4
 8003262:	654b      	str	r3, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003264:	0653      	lsls	r3, r2, #25
 8003266:	d506      	bpl.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003268:	4919      	ldr	r1, [pc, #100]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800326a:	4c1e      	ldr	r4, [pc, #120]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800326c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800326e:	4023      	ands	r3, r4
 8003270:	68ec      	ldr	r4, [r5, #12]
 8003272:	4323      	orrs	r3, r4
 8003274:	654b      	str	r3, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003276:	0453      	lsls	r3, r2, #17
 8003278:	d50f      	bpl.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800327a:	4915      	ldr	r1, [pc, #84]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800327c:	696c      	ldr	r4, [r5, #20]
 800327e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	089b      	lsrs	r3, r3, #2
 8003284:	4323      	orrs	r3, r4
 8003286:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	05db      	lsls	r3, r3, #23
 800328c:	429c      	cmp	r4, r3
 800328e:	d104      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x10a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003290:	2380      	movs	r3, #128	; 0x80
 8003292:	68cc      	ldr	r4, [r1, #12]
 8003294:	025b      	lsls	r3, r3, #9
 8003296:	4323      	orrs	r3, r4
 8003298:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800329a:	0513      	lsls	r3, r2, #20
 800329c:	d50f      	bpl.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800329e:	490c      	ldr	r1, [pc, #48]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80032a0:	4c11      	ldr	r4, [pc, #68]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80032a2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80032a4:	692a      	ldr	r2, [r5, #16]
 80032a6:	4023      	ands	r3, r4
 80032a8:	4313      	orrs	r3, r2
 80032aa:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80032ac:	2380      	movs	r3, #128	; 0x80
 80032ae:	01db      	lsls	r3, r3, #7
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d104      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x12e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80032b4:	2380      	movs	r3, #128	; 0x80
 80032b6:	68ca      	ldr	r2, [r1, #12]
 80032b8:	025b      	lsls	r3, r3, #9
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60cb      	str	r3, [r1, #12]
    }
  }

  return status;
}
 80032be:	b005      	add	sp, #20
 80032c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c2:	f7fe ff55 	bl	8002170 <HAL_GetTick>
 80032c6:	4b09      	ldr	r3, [pc, #36]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80032c8:	1b80      	subs	r0, r0, r6
 80032ca:	4298      	cmp	r0, r3
 80032cc:	d99e      	bls.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80032ce:	e7ae      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40007000 	.word	0x40007000
 80032d8:	fffffcff 	.word	0xfffffcff
 80032dc:	fffeffff 	.word	0xfffeffff
 80032e0:	efffffff 	.word	0xefffffff
 80032e4:	ffffcfff 	.word	0xffffcfff
 80032e8:	ffff3fff 	.word	0xffff3fff
 80032ec:	00001388 	.word	0x00001388

080032f0 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80032f0:	21a0      	movs	r1, #160	; 0xa0
 80032f2:	6802      	ldr	r2, [r0, #0]
{
 80032f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80032f6:	68d3      	ldr	r3, [r2, #12]
{
 80032f8:	0004      	movs	r4, r0
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80032fa:	438b      	bics	r3, r1
 80032fc:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80032fe:	f7fe ff37 	bl	8002170 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003302:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8003304:	0006      	movs	r6, r0
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003306:	2520      	movs	r5, #32
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003308:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	422b      	tst	r3, r5
 8003310:	d001      	beq.n	8003316 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8003312:	2000      	movs	r0, #0
}
 8003314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003316:	f7fe ff2b 	bl	8002170 <HAL_GetTick>
 800331a:	1b80      	subs	r0, r0, r6
 800331c:	42b8      	cmp	r0, r7
 800331e:	d9f4      	bls.n	800330a <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8003320:	2003      	movs	r0, #3
 8003322:	e7f7      	b.n	8003314 <HAL_RTC_WaitForSynchro+0x24>

08003324 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8003326:	2740      	movs	r7, #64	; 0x40
 8003328:	6803      	ldr	r3, [r0, #0]
{
 800332a:	0005      	movs	r5, r0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800332c:	68da      	ldr	r2, [r3, #12]
  HAL_StatusTypeDef status = HAL_OK;  
 800332e:	2400      	movs	r4, #0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8003330:	423a      	tst	r2, r7
 8003332:	d10c      	bne.n	800334e <RTC_EnterInitMode+0x2a>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8003334:	2280      	movs	r2, #128	; 0x80
 8003336:	68d9      	ldr	r1, [r3, #12]
 8003338:	430a      	orrs	r2, r1
 800333a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800333c:	f7fe ff18 	bl	8002170 <HAL_GetTick>
 8003340:	0006      	movs	r6, r0
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003342:	682b      	ldr	r3, [r5, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	423b      	tst	r3, r7
 8003348:	d101      	bne.n	800334e <RTC_EnterInitMode+0x2a>
 800334a:	2c03      	cmp	r4, #3
 800334c:	d101      	bne.n	8003352 <RTC_EnterInitMode+0x2e>
      }
    }
  }

  return status;
}
 800334e:	0020      	movs	r0, r4
 8003350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003352:	f7fe ff0d 	bl	8002170 <HAL_GetTick>
 8003356:	23fa      	movs	r3, #250	; 0xfa
 8003358:	1b80      	subs	r0, r0, r6
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4298      	cmp	r0, r3
 800335e:	d9f0      	bls.n	8003342 <RTC_EnterInitMode+0x1e>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003360:	002b      	movs	r3, r5
 8003362:	2403      	movs	r4, #3
 8003364:	3329      	adds	r3, #41	; 0x29
 8003366:	701c      	strb	r4, [r3, #0]
 8003368:	e7eb      	b.n	8003342 <RTC_EnterInitMode+0x1e>
	...

0800336c <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800336c:	2280      	movs	r2, #128	; 0x80
{
 800336e:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003370:	4c0f      	ldr	r4, [pc, #60]	; (80033b0 <RTC_ExitInitMode+0x44>)
{
 8003372:	0005      	movs	r5, r0
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003374:	68e3      	ldr	r3, [r4, #12]
 8003376:	4393      	bics	r3, r2
 8003378:	60e3      	str	r3, [r4, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800337a:	69a3      	ldr	r3, [r4, #24]
 800337c:	3a60      	subs	r2, #96	; 0x60
 800337e:	4213      	tst	r3, r2
 8003380:	d107      	bne.n	8003392 <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003382:	f7ff ffb5 	bl	80032f0 <HAL_RTC_WaitForSynchro>
 8003386:	2800      	cmp	r0, #0
 8003388:	d002      	beq.n	8003390 <RTC_ExitInitMode+0x24>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800338a:	2003      	movs	r0, #3
 800338c:	3529      	adds	r5, #41	; 0x29
 800338e:	7028      	strb	r0, [r5, #0]
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 8003390:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003392:	69a3      	ldr	r3, [r4, #24]
 8003394:	4393      	bics	r3, r2
 8003396:	61a3      	str	r3, [r4, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003398:	f7ff ffaa 	bl	80032f0 <HAL_RTC_WaitForSynchro>
 800339c:	2800      	cmp	r0, #0
 800339e:	d002      	beq.n	80033a6 <RTC_ExitInitMode+0x3a>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033a0:	2003      	movs	r0, #3
 80033a2:	3529      	adds	r5, #41	; 0x29
 80033a4:	7028      	strb	r0, [r5, #0]
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80033a6:	2320      	movs	r3, #32
 80033a8:	69a2      	ldr	r2, [r4, #24]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61a3      	str	r3, [r4, #24]
 80033ae:	e7ef      	b.n	8003390 <RTC_ExitInitMode+0x24>
 80033b0:	40002800 	.word	0x40002800

080033b4 <HAL_RTC_Init>:
{
 80033b4:	b570      	push	{r4, r5, r6, lr}
 80033b6:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 80033b8:	2001      	movs	r0, #1
  if(hrtc != NULL)
 80033ba:	2c00      	cmp	r4, #0
 80033bc:	d047      	beq.n	800344e <HAL_RTC_Init+0x9a>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80033be:	0025      	movs	r5, r4
 80033c0:	3529      	adds	r5, #41	; 0x29
 80033c2:	782b      	ldrb	r3, [r5, #0]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d108      	bne.n	80033dc <HAL_RTC_Init+0x28>
    hrtc->Lock = HAL_UNLOCKED;
 80033ca:	0022      	movs	r2, r4
 80033cc:	3228      	adds	r2, #40	; 0x28
 80033ce:	7013      	strb	r3, [r2, #0]
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80033d0:	2388      	movs	r3, #136	; 0x88
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	6063      	str	r3, [r4, #4]
    HAL_RTC_MspInit(hrtc);
 80033d6:	0020      	movs	r0, r4
 80033d8:	f7fe fbea 	bl	8001bb0 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 80033dc:	2302      	movs	r3, #2
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033de:	22ca      	movs	r2, #202	; 0xca
    hrtc->State = HAL_RTC_STATE_BUSY;
 80033e0:	702b      	strb	r3, [r5, #0]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033e2:	6823      	ldr	r3, [r4, #0]
    status = RTC_EnterInitMode(hrtc);
 80033e4:	0020      	movs	r0, r4
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033e6:	625a      	str	r2, [r3, #36]	; 0x24
 80033e8:	3a77      	subs	r2, #119	; 0x77
 80033ea:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 80033ec:	f7ff ff9a 	bl	8003324 <RTC_EnterInitMode>
    if(status == HAL_OK)
 80033f0:	2800      	cmp	r0, #0
 80033f2:	d125      	bne.n	8003440 <HAL_RTC_Init+0x8c>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	4916      	ldr	r1, [pc, #88]	; (8003450 <HAL_RTC_Init+0x9c>)
 80033f8:	699a      	ldr	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80033fa:	6960      	ldr	r0, [r4, #20]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80033fc:	400a      	ands	r2, r1
 80033fe:	619a      	str	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003400:	68a2      	ldr	r2, [r4, #8]
 8003402:	6999      	ldr	r1, [r3, #24]
 8003404:	4302      	orrs	r2, r0
 8003406:	69e0      	ldr	r0, [r4, #28]
 8003408:	4302      	orrs	r2, r0
 800340a:	430a      	orrs	r2, r1
 800340c:	619a      	str	r2, [r3, #24]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800340e:	6922      	ldr	r2, [r4, #16]
      status = RTC_ExitInitMode(hrtc);
 8003410:	0020      	movs	r0, r4
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003412:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003414:	68e2      	ldr	r2, [r4, #12]
 8003416:	6919      	ldr	r1, [r3, #16]
 8003418:	0412      	lsls	r2, r2, #16
 800341a:	430a      	orrs	r2, r1
 800341c:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 800341e:	f7ff ffa5 	bl	800336c <RTC_ExitInitMode>
      if (status == HAL_OK)
 8003422:	2800      	cmp	r0, #0
 8003424:	d10c      	bne.n	8003440 <HAL_RTC_Init+0x8c>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8003426:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003428:	6a26      	ldr	r6, [r4, #32]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800342a:	6993      	ldr	r3, [r2, #24]
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	08db      	lsrs	r3, r3, #3
 8003430:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003434:	6991      	ldr	r1, [r2, #24]
 8003436:	4333      	orrs	r3, r6
 8003438:	69a6      	ldr	r6, [r4, #24]
 800343a:	4333      	orrs	r3, r6
 800343c:	430b      	orrs	r3, r1
 800343e:	6193      	str	r3, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003440:	22ff      	movs	r2, #255	; 0xff
 8003442:	6823      	ldr	r3, [r4, #0]
 8003444:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8003446:	2800      	cmp	r0, #0
 8003448:	d101      	bne.n	800344e <HAL_RTC_Init+0x9a>
      hrtc->State = HAL_RTC_STATE_READY;
 800344a:	2301      	movs	r3, #1
 800344c:	702b      	strb	r3, [r5, #0]
}
 800344e:	bd70      	pop	{r4, r5, r6, pc}
 8003450:	fb8fffbf 	.word	0xfb8fffbf

08003454 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003454:	21e0      	movs	r1, #224	; 0xe0
 8003456:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003458:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	438a      	bics	r2, r1
 800345e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003460:	2282      	movs	r2, #130	; 0x82
 8003462:	6841      	ldr	r1, [r0, #4]
 8003464:	0052      	lsls	r2, r2, #1
 8003466:	4291      	cmp	r1, r2
 8003468:	d10c      	bne.n	8003484 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
 800346a:	2180      	movs	r1, #128	; 0x80
 800346c:	6882      	ldr	r2, [r0, #8]
 800346e:	0209      	lsls	r1, r1, #8
 8003470:	428a      	cmp	r2, r1
 8003472:	d003      	beq.n	800347c <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003474:	2180      	movs	r1, #128	; 0x80
 8003476:	00c9      	lsls	r1, r1, #3
 8003478:	428a      	cmp	r2, r1
 800347a:	d103      	bne.n	8003484 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800347c:	2140      	movs	r1, #64	; 0x40
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	438a      	bics	r2, r1
 8003482:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003484:	2180      	movs	r1, #128	; 0x80
 8003486:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003488:	0189      	lsls	r1, r1, #6
 800348a:	428a      	cmp	r2, r1
 800348c:	d106      	bne.n	800349c <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
        {
          SPI_RESET_CRC(hspi);
 800348e:	6819      	ldr	r1, [r3, #0]
 8003490:	4c07      	ldr	r4, [pc, #28]	; (80034b0 <SPI_WaitFifoStateUntilTimeout.part.1+0x5c>)
 8003492:	4021      	ands	r1, r4
 8003494:	6019      	str	r1, [r3, #0]
 8003496:	6819      	ldr	r1, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800349c:	0003      	movs	r3, r0
 800349e:	2201      	movs	r2, #1
 80034a0:	335d      	adds	r3, #93	; 0x5d
 80034a2:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034a4:	2300      	movs	r3, #0
 80034a6:	305c      	adds	r0, #92	; 0x5c
 80034a8:	7003      	strb	r3, [r0, #0]
      }
    }
  }

  return HAL_OK;
}
 80034aa:	2003      	movs	r0, #3
 80034ac:	bd10      	pop	{r4, pc}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	ffffdfff 	.word	0xffffdfff

080034b4 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80034b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b6:	0004      	movs	r4, r0
 80034b8:	000d      	movs	r5, r1
 80034ba:	0017      	movs	r7, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034bc:	2680      	movs	r6, #128	; 0x80
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	6898      	ldr	r0, [r3, #8]
 80034c2:	4030      	ands	r0, r6
 80034c4:	d009      	beq.n	80034da <SPI_WaitFlagStateUntilTimeout.constprop.10+0x26>
    if (Timeout != HAL_MAX_DELAY)
 80034c6:	1c6a      	adds	r2, r5, #1
 80034c8:	d0fa      	beq.n	80034c0 <SPI_WaitFlagStateUntilTimeout.constprop.10+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80034ca:	f7fe fe51 	bl	8002170 <HAL_GetTick>
 80034ce:	1bc0      	subs	r0, r0, r7
 80034d0:	4285      	cmp	r5, r0
 80034d2:	d8f4      	bhi.n	80034be <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
 80034d4:	0020      	movs	r0, r4
 80034d6:	f7ff ffbd 	bl	8003454 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 80034da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080034dc <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80034dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80034de:	27c0      	movs	r7, #192	; 0xc0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80034e0:	0005      	movs	r5, r0
 80034e2:	000c      	movs	r4, r1
 80034e4:	0016      	movs	r6, r2
 80034e6:	9301      	str	r3, [sp, #4]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80034e8:	00ff      	lsls	r7, r7, #3
  while ((hspi->Instance->SR & Fifo) != State)
 80034ea:	682b      	ldr	r3, [r5, #0]
 80034ec:	6898      	ldr	r0, [r3, #8]
 80034ee:	4020      	ands	r0, r4
 80034f0:	d00d      	beq.n	800350e <SPI_WaitFifoStateUntilTimeout.constprop.11+0x32>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80034f2:	42bc      	cmp	r4, r7
 80034f4:	d100      	bne.n	80034f8 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x1c>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80034f6:	7b1a      	ldrb	r2, [r3, #12]
    if (Timeout != HAL_MAX_DELAY)
 80034f8:	1c72      	adds	r2, r6, #1
 80034fa:	d0f7      	beq.n	80034ec <SPI_WaitFifoStateUntilTimeout.constprop.11+0x10>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80034fc:	f7fe fe38 	bl	8002170 <HAL_GetTick>
 8003500:	9b01      	ldr	r3, [sp, #4]
 8003502:	1ac0      	subs	r0, r0, r3
 8003504:	4286      	cmp	r6, r0
 8003506:	d8f0      	bhi.n	80034ea <SPI_WaitFifoStateUntilTimeout.constprop.11+0xe>
 8003508:	0028      	movs	r0, r5
 800350a:	f7ff ffa3 	bl	8003454 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 800350e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08003510 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003512:	0013      	movs	r3, r2
{
 8003514:	000d      	movs	r5, r1
 8003516:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003518:	000a      	movs	r2, r1
 800351a:	21c0      	movs	r1, #192	; 0xc0
 800351c:	0149      	lsls	r1, r1, #5
{
 800351e:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003520:	f7ff ffdc 	bl	80034dc <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8003524:	2800      	cmp	r0, #0
 8003526:	d005      	beq.n	8003534 <SPI_EndRxTxTransaction+0x24>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003528:	2320      	movs	r3, #32
 800352a:	6e22      	ldr	r2, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800352c:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800352e:	4313      	orrs	r3, r2
 8003530:	6623      	str	r3, [r4, #96]	; 0x60
 8003532:	e00f      	b.n	8003554 <SPI_EndRxTxTransaction+0x44>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003534:	0032      	movs	r2, r6
 8003536:	0029      	movs	r1, r5
 8003538:	0020      	movs	r0, r4
 800353a:	f7ff ffbb 	bl	80034b4 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 800353e:	2800      	cmp	r0, #0
 8003540:	d1f2      	bne.n	8003528 <SPI_EndRxTxTransaction+0x18>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003542:	21c0      	movs	r1, #192	; 0xc0
 8003544:	0033      	movs	r3, r6
 8003546:	002a      	movs	r2, r5
 8003548:	00c9      	lsls	r1, r1, #3
 800354a:	0020      	movs	r0, r4
 800354c:	f7ff ffc6 	bl	80034dc <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8003550:	2800      	cmp	r0, #0
 8003552:	d1e9      	bne.n	8003528 <SPI_EndRxTxTransaction+0x18>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8003554:	bd70      	pop	{r4, r5, r6, pc}
	...

08003558 <HAL_SPI_Init>:
{
 8003558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800355c:	2001      	movs	r0, #1
  if (hspi == NULL)
 800355e:	2c00      	cmp	r4, #0
 8003560:	d04b      	beq.n	80035fa <HAL_SPI_Init+0xa2>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003562:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003564:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003566:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003568:	355d      	adds	r5, #93	; 0x5d
 800356a:	782b      	ldrb	r3, [r5, #0]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d105      	bne.n	800357e <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 8003572:	0022      	movs	r2, r4
 8003574:	325c      	adds	r2, #92	; 0x5c
 8003576:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8003578:	0020      	movs	r0, r4
 800357a:	f7fe fb33 	bl	8001be4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800357e:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8003580:	2240      	movs	r2, #64	; 0x40
 8003582:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003584:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8003586:	680b      	ldr	r3, [r1, #0]
 8003588:	2000      	movs	r0, #0
 800358a:	4393      	bics	r3, r2
 800358c:	600b      	str	r3, [r1, #0]
 800358e:	23e0      	movs	r3, #224	; 0xe0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003590:	68e2      	ldr	r2, [r4, #12]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	429a      	cmp	r2, r3
 8003596:	d931      	bls.n	80035fc <HAL_SPI_Init+0xa4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003598:	26f0      	movs	r6, #240	; 0xf0
 800359a:	0136      	lsls	r6, r6, #4
 800359c:	42b2      	cmp	r2, r6
 800359e:	d133      	bne.n	8003608 <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80035a0:	0006      	movs	r6, r0
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80035a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80035a4:	2800      	cmp	r0, #0
 80035a6:	d103      	bne.n	80035b0 <HAL_SPI_Init+0x58>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d92f      	bls.n	800360c <HAL_SPI_Init+0xb4>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80035ac:	2302      	movs	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80035ae:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80035b0:	68a7      	ldr	r7, [r4, #8]
 80035b2:	6863      	ldr	r3, [r4, #4]
 80035b4:	69a0      	ldr	r0, [r4, #24]
 80035b6:	433b      	orrs	r3, r7
 80035b8:	6927      	ldr	r7, [r4, #16]
 80035ba:	433b      	orrs	r3, r7
 80035bc:	6967      	ldr	r7, [r4, #20]
 80035be:	433b      	orrs	r3, r7
 80035c0:	69e7      	ldr	r7, [r4, #28]
 80035c2:	433b      	orrs	r3, r7
 80035c4:	6a27      	ldr	r7, [r4, #32]
 80035c6:	433b      	orrs	r3, r7
 80035c8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80035ca:	433b      	orrs	r3, r7
 80035cc:	2780      	movs	r7, #128	; 0x80
 80035ce:	00bf      	lsls	r7, r7, #2
 80035d0:	4007      	ands	r7, r0
 80035d2:	433b      	orrs	r3, r7
 80035d4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80035d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035d8:	0c00      	lsrs	r0, r0, #16
 80035da:	431a      	orrs	r2, r3
 80035dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035de:	431a      	orrs	r2, r3
 80035e0:	2304      	movs	r3, #4
 80035e2:	4018      	ands	r0, r3
 80035e4:	4310      	orrs	r0, r2
 80035e6:	4306      	orrs	r6, r0
 80035e8:	604e      	str	r6, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035ea:	69cb      	ldr	r3, [r1, #28]
 80035ec:	4a08      	ldr	r2, [pc, #32]	; (8003610 <HAL_SPI_Init+0xb8>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035ee:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035f0:	4013      	ands	r3, r2
 80035f2:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80035f4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035f6:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035f8:	702b      	strb	r3, [r5, #0]
}
 80035fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80035fc:	2680      	movs	r6, #128	; 0x80
 80035fe:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003600:	429a      	cmp	r2, r3
 8003602:	d0ce      	beq.n	80035a2 <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003604:	62a0      	str	r0, [r4, #40]	; 0x28
 8003606:	e7cc      	b.n	80035a2 <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003608:	0006      	movs	r6, r0
 800360a:	e7fb      	b.n	8003604 <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800360c:	2301      	movs	r3, #1
 800360e:	e7ce      	b.n	80035ae <HAL_SPI_Init+0x56>
 8003610:	fffff7ff 	.word	0xfffff7ff

08003614 <HAL_SPI_DeInit>:
{
 8003614:	b570      	push	{r4, r5, r6, lr}
 8003616:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003618:	2001      	movs	r0, #1
  if (hspi == NULL)
 800361a:	2c00      	cmp	r4, #0
 800361c:	d010      	beq.n	8003640 <HAL_SPI_DeInit+0x2c>
  hspi->State = HAL_SPI_STATE_BUSY;
 800361e:	0025      	movs	r5, r4
 8003620:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8003622:	2140      	movs	r1, #64	; 0x40
 8003624:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003626:	355d      	adds	r5, #93	; 0x5d
 8003628:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800362a:	6813      	ldr	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800362c:	0020      	movs	r0, r4
  __HAL_SPI_DISABLE(hspi);
 800362e:	438b      	bics	r3, r1
 8003630:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8003632:	f7fe fb3d 	bl	8001cb0 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003636:	2000      	movs	r0, #0
  __HAL_UNLOCK(hspi);
 8003638:	345c      	adds	r4, #92	; 0x5c
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800363a:	6060      	str	r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_RESET;
 800363c:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hspi);
 800363e:	7020      	strb	r0, [r4, #0]
}
 8003640:	bd70      	pop	{r4, r5, r6, pc}

08003642 <HAL_SPI_Transmit>:
{
 8003642:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003644:	b087      	sub	sp, #28
 8003646:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hspi);
 8003648:	0003      	movs	r3, r0
 800364a:	335c      	adds	r3, #92	; 0x5c
 800364c:	9303      	str	r3, [sp, #12]
 800364e:	781b      	ldrb	r3, [r3, #0]
{
 8003650:	0004      	movs	r4, r0
 8003652:	000d      	movs	r5, r1
 8003654:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8003656:	2602      	movs	r6, #2
 8003658:	2b01      	cmp	r3, #1
 800365a:	d100      	bne.n	800365e <HAL_SPI_Transmit+0x1c>
 800365c:	e07c      	b.n	8003758 <HAL_SPI_Transmit+0x116>
 800365e:	2301      	movs	r3, #1
 8003660:	9a03      	ldr	r2, [sp, #12]
 8003662:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8003664:	f7fe fd84 	bl	8002170 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003668:	0022      	movs	r2, r4
  tickstart = HAL_GetTick();
 800366a:	9002      	str	r0, [sp, #8]
  if (hspi->State != HAL_SPI_STATE_READY)
 800366c:	325d      	adds	r2, #93	; 0x5d
 800366e:	7813      	ldrb	r3, [r2, #0]
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	d16a      	bne.n	800374c <HAL_SPI_Transmit+0x10a>
    errorcode = HAL_ERROR;
 8003676:	001e      	movs	r6, r3
  if ((pData == NULL) || (Size == 0U))
 8003678:	2d00      	cmp	r5, #0
 800367a:	d067      	beq.n	800374c <HAL_SPI_Transmit+0x10a>
 800367c:	2f00      	cmp	r7, #0
 800367e:	d065      	beq.n	800374c <HAL_SPI_Transmit+0x10a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003680:	3302      	adds	r3, #2
 8003682:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003684:	2300      	movs	r3, #0
  hspi->RxXferSize  = 0U;
 8003686:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003688:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800368a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800368c:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800368e:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003690:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 8003692:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8003694:	8793      	strh	r3, [r2, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003696:	87d3      	strh	r3, [r2, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003698:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 800369a:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800369c:	2380      	movs	r3, #128	; 0x80
 800369e:	68a2      	ldr	r2, [r4, #8]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d105      	bne.n	80036b2 <HAL_SPI_Transmit+0x70>
    SPI_1LINE_TX(hspi);
 80036a6:	2380      	movs	r3, #128	; 0x80
 80036a8:	6822      	ldr	r2, [r4, #0]
 80036aa:	01db      	lsls	r3, r3, #7
 80036ac:	6811      	ldr	r1, [r2, #0]
 80036ae:	430b      	orrs	r3, r1
 80036b0:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036b2:	2240      	movs	r2, #64	; 0x40
 80036b4:	6823      	ldr	r3, [r4, #0]
 80036b6:	6819      	ldr	r1, [r3, #0]
 80036b8:	4211      	tst	r1, r2
 80036ba:	d102      	bne.n	80036c2 <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 80036bc:	6819      	ldr	r1, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036c2:	21e0      	movs	r1, #224	; 0xe0
 80036c4:	68e0      	ldr	r0, [r4, #12]
 80036c6:	00c9      	lsls	r1, r1, #3
 80036c8:	6862      	ldr	r2, [r4, #4]
 80036ca:	4288      	cmp	r0, r1
 80036cc:	d947      	bls.n	800375e <HAL_SPI_Transmit+0x11c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036ce:	2a00      	cmp	r2, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_SPI_Transmit+0x94>
 80036d2:	2f01      	cmp	r7, #1
 80036d4:	d107      	bne.n	80036e6 <HAL_SPI_Transmit+0xa4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036d6:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036d8:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036da:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80036dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036de:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036e6:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 80036e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d116      	bne.n	800371c <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036ee:	9a02      	ldr	r2, [sp, #8]
 80036f0:	9901      	ldr	r1, [sp, #4]
 80036f2:	0020      	movs	r0, r4
 80036f4:	f7ff ff0c 	bl	8003510 <SPI_EndRxTxTransaction>
 80036f8:	2800      	cmp	r0, #0
 80036fa:	d000      	beq.n	80036fe <HAL_SPI_Transmit+0xbc>
 80036fc:	e06d      	b.n	80037da <HAL_SPI_Transmit+0x198>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036fe:	68a3      	ldr	r3, [r4, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d106      	bne.n	8003712 <HAL_SPI_Transmit+0xd0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003704:	9305      	str	r3, [sp, #20]
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	9205      	str	r2, [sp, #20]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	9305      	str	r3, [sp, #20]
 8003710:	9b05      	ldr	r3, [sp, #20]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003712:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8003714:	1e73      	subs	r3, r6, #1
 8003716:	419e      	sbcs	r6, r3
    errorcode = HAL_BUSY;
 8003718:	b2f6      	uxtb	r6, r6
 800371a:	e017      	b.n	800374c <HAL_SPI_Transmit+0x10a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800371c:	6822      	ldr	r2, [r4, #0]
 800371e:	6893      	ldr	r3, [r2, #8]
 8003720:	422b      	tst	r3, r5
 8003722:	d009      	beq.n	8003738 <HAL_SPI_Transmit+0xf6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003724:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003726:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003728:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800372a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800372c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800372e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003730:	3b01      	subs	r3, #1
 8003732:	b29b      	uxth	r3, r3
 8003734:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003736:	e7d7      	b.n	80036e8 <HAL_SPI_Transmit+0xa6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003738:	f7fe fd1a 	bl	8002170 <HAL_GetTick>
 800373c:	9b02      	ldr	r3, [sp, #8]
 800373e:	1ac0      	subs	r0, r0, r3
 8003740:	9b01      	ldr	r3, [sp, #4]
 8003742:	4298      	cmp	r0, r3
 8003744:	d3d0      	bcc.n	80036e8 <HAL_SPI_Transmit+0xa6>
 8003746:	3301      	adds	r3, #1
 8003748:	d0ce      	beq.n	80036e8 <HAL_SPI_Transmit+0xa6>
          errorcode = HAL_TIMEOUT;
 800374a:	2603      	movs	r6, #3
  hspi->State = HAL_SPI_STATE_READY;
 800374c:	2301      	movs	r3, #1
 800374e:	345d      	adds	r4, #93	; 0x5d
 8003750:	7023      	strb	r3, [r4, #0]
  __HAL_UNLOCK(hspi);
 8003752:	2300      	movs	r3, #0
 8003754:	9a03      	ldr	r2, [sp, #12]
 8003756:	7013      	strb	r3, [r2, #0]
}
 8003758:	0030      	movs	r0, r6
 800375a:	b007      	add	sp, #28
 800375c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800375e:	2a00      	cmp	r2, #0
 8003760:	d001      	beq.n	8003766 <HAL_SPI_Transmit+0x124>
 8003762:	2f01      	cmp	r7, #1
 8003764:	d10a      	bne.n	800377c <HAL_SPI_Transmit+0x13a>
      if (hspi->TxXferCount > 1U)
 8003766:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003768:	2a01      	cmp	r2, #1
 800376a:	d91c      	bls.n	80037a6 <HAL_SPI_Transmit+0x164>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800376c:	882a      	ldrh	r2, [r5, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800376e:	3502      	adds	r5, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003770:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8003772:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003774:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003776:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8003778:	b29b      	uxth	r3, r3
 800377a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800377c:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 800377e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0b4      	beq.n	80036ee <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003784:	6822      	ldr	r2, [r4, #0]
 8003786:	6893      	ldr	r3, [r2, #8]
 8003788:	422b      	tst	r3, r5
 800378a:	d01c      	beq.n	80037c6 <HAL_SPI_Transmit+0x184>
        if (hspi->TxXferCount > 1U)
 800378c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800378e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003790:	2901      	cmp	r1, #1
 8003792:	d910      	bls.n	80037b6 <HAL_SPI_Transmit+0x174>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003794:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003796:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003798:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800379a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800379c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800379e:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80037a4:	e7eb      	b.n	800377e <HAL_SPI_Transmit+0x13c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037a6:	782a      	ldrb	r2, [r5, #0]
 80037a8:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 80037aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80037ac:	3301      	adds	r3, #1
 80037ae:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80037b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80037b2:	3b01      	subs	r3, #1
 80037b4:	e7e0      	b.n	8003778 <HAL_SPI_Transmit+0x136>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80037ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80037bc:	3301      	adds	r3, #1
 80037be:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80037c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80037c2:	3b01      	subs	r3, #1
 80037c4:	e7ec      	b.n	80037a0 <HAL_SPI_Transmit+0x15e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037c6:	f7fe fcd3 	bl	8002170 <HAL_GetTick>
 80037ca:	9b02      	ldr	r3, [sp, #8]
 80037cc:	1ac0      	subs	r0, r0, r3
 80037ce:	9b01      	ldr	r3, [sp, #4]
 80037d0:	4283      	cmp	r3, r0
 80037d2:	d8d4      	bhi.n	800377e <HAL_SPI_Transmit+0x13c>
 80037d4:	3301      	adds	r3, #1
 80037d6:	d0d2      	beq.n	800377e <HAL_SPI_Transmit+0x13c>
 80037d8:	e7b7      	b.n	800374a <HAL_SPI_Transmit+0x108>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037da:	2320      	movs	r3, #32
 80037dc:	6623      	str	r3, [r4, #96]	; 0x60
 80037de:	e78e      	b.n	80036fe <HAL_SPI_Transmit+0xbc>

080037e0 <HAL_SPI_TransmitReceive>:
{
 80037e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037e2:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 80037e4:	0003      	movs	r3, r0
{
 80037e6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hspi);
 80037e8:	335c      	adds	r3, #92	; 0x5c
 80037ea:	781a      	ldrb	r2, [r3, #0]
{
 80037ec:	0004      	movs	r4, r0
 80037ee:	000f      	movs	r7, r1
  __HAL_LOCK(hspi);
 80037f0:	2502      	movs	r5, #2
 80037f2:	2a01      	cmp	r2, #1
 80037f4:	d100      	bne.n	80037f8 <HAL_SPI_TransmitReceive+0x18>
 80037f6:	e0ac      	b.n	8003952 <HAL_SPI_TransmitReceive+0x172>
 80037f8:	2201      	movs	r2, #1
 80037fa:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80037fc:	f7fe fcb8 	bl	8002170 <HAL_GetTick>
  tmp_state           = hspi->State;
 8003800:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8003802:	9000      	str	r0, [sp, #0]
  tmp_state           = hspi->State;
 8003804:	335d      	adds	r3, #93	; 0x5d
 8003806:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003808:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 800380a:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800380c:	2b01      	cmp	r3, #1
 800380e:	d00b      	beq.n	8003828 <HAL_SPI_TransmitReceive+0x48>
 8003810:	2282      	movs	r2, #130	; 0x82
 8003812:	0052      	lsls	r2, r2, #1
 8003814:	4291      	cmp	r1, r2
 8003816:	d000      	beq.n	800381a <HAL_SPI_TransmitReceive+0x3a>
 8003818:	e094      	b.n	8003944 <HAL_SPI_TransmitReceive+0x164>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800381a:	68a2      	ldr	r2, [r4, #8]
 800381c:	2a00      	cmp	r2, #0
 800381e:	d000      	beq.n	8003822 <HAL_SPI_TransmitReceive+0x42>
 8003820:	e090      	b.n	8003944 <HAL_SPI_TransmitReceive+0x164>
 8003822:	2b04      	cmp	r3, #4
 8003824:	d000      	beq.n	8003828 <HAL_SPI_TransmitReceive+0x48>
 8003826:	e08d      	b.n	8003944 <HAL_SPI_TransmitReceive+0x164>
    errorcode = HAL_ERROR;
 8003828:	2501      	movs	r5, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800382a:	2f00      	cmp	r7, #0
 800382c:	d100      	bne.n	8003830 <HAL_SPI_TransmitReceive+0x50>
 800382e:	e089      	b.n	8003944 <HAL_SPI_TransmitReceive+0x164>
 8003830:	9b01      	ldr	r3, [sp, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d100      	bne.n	8003838 <HAL_SPI_TransmitReceive+0x58>
 8003836:	e085      	b.n	8003944 <HAL_SPI_TransmitReceive+0x164>
 8003838:	2e00      	cmp	r6, #0
 800383a:	d100      	bne.n	800383e <HAL_SPI_TransmitReceive+0x5e>
 800383c:	e082      	b.n	8003944 <HAL_SPI_TransmitReceive+0x164>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800383e:	0023      	movs	r3, r4
 8003840:	335d      	adds	r3, #93	; 0x5d
 8003842:	781a      	ldrb	r2, [r3, #0]
 8003844:	2a04      	cmp	r2, #4
 8003846:	d001      	beq.n	800384c <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003848:	2205      	movs	r2, #5
 800384a:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800384c:	9a01      	ldr	r2, [sp, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800384e:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003850:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003852:	0022      	movs	r2, r4
 8003854:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003856:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8003858:	87d6      	strh	r6, [r2, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800385a:	1da2      	adds	r2, r4, #6
 800385c:	87d6      	strh	r6, [r2, #62]	; 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800385e:	22e0      	movs	r2, #224	; 0xe0
 8003860:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 8003862:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003864:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003866:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003868:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800386a:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800386c:	00d2      	lsls	r2, r2, #3
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	4290      	cmp	r0, r2
 8003872:	d801      	bhi.n	8003878 <HAL_SPI_TransmitReceive+0x98>
 8003874:	2e01      	cmp	r6, #1
 8003876:	d931      	bls.n	80038dc <HAL_SPI_TransmitReceive+0xfc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	4d71      	ldr	r5, [pc, #452]	; (8003a40 <HAL_SPI_TransmitReceive+0x260>)
 800387c:	402a      	ands	r2, r5
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800387e:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003880:	2240      	movs	r2, #64	; 0x40
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	681d      	ldr	r5, [r3, #0]
 8003886:	4215      	tst	r5, r2
 8003888:	d102      	bne.n	8003890 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 800388a:	681d      	ldr	r5, [r3, #0]
 800388c:	432a      	orrs	r2, r5
 800388e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003890:	22e0      	movs	r2, #224	; 0xe0
 8003892:	00d2      	lsls	r2, r2, #3
 8003894:	4290      	cmp	r0, r2
 8003896:	d95e      	bls.n	8003956 <HAL_SPI_TransmitReceive+0x176>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003898:	2900      	cmp	r1, #0
 800389a:	d001      	beq.n	80038a0 <HAL_SPI_TransmitReceive+0xc0>
 800389c:	2e01      	cmp	r6, #1
 800389e:	d107      	bne.n	80038b0 <HAL_SPI_TransmitReceive+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038a0:	883a      	ldrh	r2, [r7, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038a2:	3702      	adds	r7, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038a4:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80038a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038a8:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80038b0:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038b2:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038b4:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038b6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d114      	bne.n	80038e6 <HAL_SPI_TransmitReceive+0x106>
 80038bc:	0023      	movs	r3, r4
 80038be:	3308      	adds	r3, #8
 80038c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10f      	bne.n	80038e6 <HAL_SPI_TransmitReceive+0x106>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038c6:	9a00      	ldr	r2, [sp, #0]
 80038c8:	9908      	ldr	r1, [sp, #32]
 80038ca:	0020      	movs	r0, r4
 80038cc:	f7ff fe20 	bl	8003510 <SPI_EndRxTxTransaction>
 80038d0:	1e05      	subs	r5, r0, #0
 80038d2:	d037      	beq.n	8003944 <HAL_SPI_TransmitReceive+0x164>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038d4:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 80038d6:	2501      	movs	r5, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038d8:	6623      	str	r3, [r4, #96]	; 0x60
 80038da:	e033      	b.n	8003944 <HAL_SPI_TransmitReceive+0x164>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038dc:	2280      	movs	r2, #128	; 0x80
 80038de:	685d      	ldr	r5, [r3, #4]
 80038e0:	0152      	lsls	r2, r2, #5
 80038e2:	432a      	orrs	r2, r5
 80038e4:	e7cb      	b.n	800387e <HAL_SPI_TransmitReceive+0x9e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038e6:	6822      	ldr	r2, [r4, #0]
 80038e8:	6893      	ldr	r3, [r2, #8]
 80038ea:	423b      	tst	r3, r7
 80038ec:	d00e      	beq.n	800390c <HAL_SPI_TransmitReceive+0x12c>
 80038ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00b      	beq.n	800390c <HAL_SPI_TransmitReceive+0x12c>
 80038f4:	2d01      	cmp	r5, #1
 80038f6:	d109      	bne.n	800390c <HAL_SPI_TransmitReceive+0x12c>
        txallowed = 0U;
 80038f8:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038fc:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038fe:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003900:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003902:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003904:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003906:	3b01      	subs	r3, #1
 8003908:	b29b      	uxth	r3, r3
 800390a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800390c:	6893      	ldr	r3, [r2, #8]
 800390e:	4233      	tst	r3, r6
 8003910:	d00e      	beq.n	8003930 <HAL_SPI_TransmitReceive+0x150>
 8003912:	0021      	movs	r1, r4
 8003914:	3108      	adds	r1, #8
 8003916:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 8003918:	2b00      	cmp	r3, #0
 800391a:	d009      	beq.n	8003930 <HAL_SPI_TransmitReceive+0x150>
        txallowed = 1U;
 800391c:	0035      	movs	r5, r6
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800391e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003920:	68d2      	ldr	r2, [r2, #12]
 8003922:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003924:	3302      	adds	r3, #2
 8003926:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003928:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 800392a:	3b01      	subs	r3, #1
 800392c:	b29b      	uxth	r3, r3
 800392e:	87cb      	strh	r3, [r1, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003930:	f7fe fc1e 	bl	8002170 <HAL_GetTick>
 8003934:	9b00      	ldr	r3, [sp, #0]
 8003936:	1ac0      	subs	r0, r0, r3
 8003938:	9b08      	ldr	r3, [sp, #32]
 800393a:	4283      	cmp	r3, r0
 800393c:	d8bb      	bhi.n	80038b6 <HAL_SPI_TransmitReceive+0xd6>
 800393e:	3301      	adds	r3, #1
 8003940:	d0b9      	beq.n	80038b6 <HAL_SPI_TransmitReceive+0xd6>
        errorcode = HAL_TIMEOUT;
 8003942:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8003944:	0023      	movs	r3, r4
 8003946:	2201      	movs	r2, #1
 8003948:	335d      	adds	r3, #93	; 0x5d
 800394a:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800394c:	2300      	movs	r3, #0
 800394e:	345c      	adds	r4, #92	; 0x5c
 8003950:	7023      	strb	r3, [r4, #0]
}
 8003952:	0028      	movs	r0, r5
 8003954:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003956:	2900      	cmp	r1, #0
 8003958:	d001      	beq.n	800395e <HAL_SPI_TransmitReceive+0x17e>
 800395a:	2e01      	cmp	r6, #1
 800395c:	d10a      	bne.n	8003974 <HAL_SPI_TransmitReceive+0x194>
      if (hspi->TxXferCount > 1U)
 800395e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003960:	2a01      	cmp	r2, #1
 8003962:	d951      	bls.n	8003a08 <HAL_SPI_TransmitReceive+0x228>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003964:	883a      	ldrh	r2, [r7, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003966:	3702      	adds	r7, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003968:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800396a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800396c:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800396e:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8003970:	b29b      	uxth	r3, r3
 8003972:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003974:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003976:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003978:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800397a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800397c:	2b00      	cmp	r3, #0
 800397e:	d105      	bne.n	800398c <HAL_SPI_TransmitReceive+0x1ac>
 8003980:	0023      	movs	r3, r4
 8003982:	3308      	adds	r3, #8
 8003984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003986:	2b00      	cmp	r3, #0
 8003988:	d100      	bne.n	800398c <HAL_SPI_TransmitReceive+0x1ac>
 800398a:	e79c      	b.n	80038c6 <HAL_SPI_TransmitReceive+0xe6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800398c:	6822      	ldr	r2, [r4, #0]
 800398e:	6893      	ldr	r3, [r2, #8]
 8003990:	423b      	tst	r3, r7
 8003992:	d011      	beq.n	80039b8 <HAL_SPI_TransmitReceive+0x1d8>
 8003994:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00e      	beq.n	80039b8 <HAL_SPI_TransmitReceive+0x1d8>
 800399a:	2d01      	cmp	r5, #1
 800399c:	d10c      	bne.n	80039b8 <HAL_SPI_TransmitReceive+0x1d8>
        if (hspi->TxXferCount > 1U)
 800399e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80039a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039a2:	2901      	cmp	r1, #1
 80039a4:	d938      	bls.n	8003a18 <HAL_SPI_TransmitReceive+0x238>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039a6:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80039a8:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039aa:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ac:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80039ae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80039b0:	3b02      	subs	r3, #2
        txallowed = 0U;
 80039b2:	2500      	movs	r5, #0
          hspi->TxXferCount--;
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039b8:	6821      	ldr	r1, [r4, #0]
 80039ba:	688b      	ldr	r3, [r1, #8]
 80039bc:	4233      	tst	r3, r6
 80039be:	d019      	beq.n	80039f4 <HAL_SPI_TransmitReceive+0x214>
 80039c0:	0023      	movs	r3, r4
 80039c2:	3308      	adds	r3, #8
 80039c4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80039c6:	2a00      	cmp	r2, #0
 80039c8:	d014      	beq.n	80039f4 <HAL_SPI_TransmitReceive+0x214>
        if (hspi->RxXferCount > 1U)
 80039ca:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 80039cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80039ce:	2801      	cmp	r0, #1
 80039d0:	d92a      	bls.n	8003a28 <HAL_SPI_TransmitReceive+0x248>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039d2:	68c8      	ldr	r0, [r1, #12]
        txallowed = 1U;
 80039d4:	0035      	movs	r5, r6
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039d6:	8010      	strh	r0, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80039d8:	3202      	adds	r2, #2
 80039da:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80039dc:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80039de:	3a02      	subs	r2, #2
 80039e0:	b292      	uxth	r2, r2
 80039e2:	87da      	strh	r2, [r3, #62]	; 0x3e
          if (hspi->RxXferCount <= 1U)
 80039e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d804      	bhi.n	80039f4 <HAL_SPI_TransmitReceive+0x214>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039ea:	2380      	movs	r3, #128	; 0x80
 80039ec:	684a      	ldr	r2, [r1, #4]
 80039ee:	015b      	lsls	r3, r3, #5
 80039f0:	4313      	orrs	r3, r2
 80039f2:	604b      	str	r3, [r1, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039f4:	f7fe fbbc 	bl	8002170 <HAL_GetTick>
 80039f8:	9b00      	ldr	r3, [sp, #0]
 80039fa:	1ac0      	subs	r0, r0, r3
 80039fc:	9b08      	ldr	r3, [sp, #32]
 80039fe:	4283      	cmp	r3, r0
 8003a00:	d8bb      	bhi.n	800397a <HAL_SPI_TransmitReceive+0x19a>
 8003a02:	3301      	adds	r3, #1
 8003a04:	d0b9      	beq.n	800397a <HAL_SPI_TransmitReceive+0x19a>
 8003a06:	e79c      	b.n	8003942 <HAL_SPI_TransmitReceive+0x162>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a08:	783a      	ldrb	r2, [r7, #0]
 8003a0a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003a0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a0e:	3301      	adds	r3, #1
 8003a10:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003a12:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a14:	3b01      	subs	r3, #1
 8003a16:	e7ab      	b.n	8003970 <HAL_SPI_TransmitReceive+0x190>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8003a1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a1e:	3301      	adds	r3, #1
 8003a20:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003a22:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a24:	3b01      	subs	r3, #1
 8003a26:	e7c4      	b.n	80039b2 <HAL_SPI_TransmitReceive+0x1d2>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a28:	7b09      	ldrb	r1, [r1, #12]
        txallowed = 1U;
 8003a2a:	0035      	movs	r5, r6
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a2c:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 8003a2e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a30:	3201      	adds	r2, #1
 8003a32:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8003a34:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003a36:	3a01      	subs	r2, #1
 8003a38:	b292      	uxth	r2, r2
 8003a3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a3c:	e7da      	b.n	80039f4 <HAL_SPI_TransmitReceive+0x214>
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	ffffefff 	.word	0xffffefff

08003a44 <HAL_SPI_GetState>:
  return hspi->State;
 8003a44:	305d      	adds	r0, #93	; 0x5d
 8003a46:	7800      	ldrb	r0, [r0, #0]
 8003a48:	b2c0      	uxtb	r0, r0
}
 8003a4a:	4770      	bx	lr

08003a4c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	6a03      	ldr	r3, [r0, #32]
{
 8003a50:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a52:	4393      	bics	r3, r2
 8003a54:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a56:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a58:	4a19      	ldr	r2, [pc, #100]	; (8003ac0 <TIM_OC1_SetConfig+0x74>)
  tmpcr2 =  TIMx->CR2;
 8003a5a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003a5c:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a5e:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a60:	680a      	ldr	r2, [r1, #0]
 8003a62:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a64:	2202      	movs	r2, #2
 8003a66:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a68:	688a      	ldr	r2, [r1, #8]
 8003a6a:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a6c:	4a15      	ldr	r2, [pc, #84]	; (8003ac4 <TIM_OC1_SetConfig+0x78>)
 8003a6e:	4290      	cmp	r0, r2
 8003a70:	d008      	beq.n	8003a84 <TIM_OC1_SetConfig+0x38>
 8003a72:	4e15      	ldr	r6, [pc, #84]	; (8003ac8 <TIM_OC1_SetConfig+0x7c>)
 8003a74:	42b0      	cmp	r0, r6
 8003a76:	d005      	beq.n	8003a84 <TIM_OC1_SetConfig+0x38>
 8003a78:	4e14      	ldr	r6, [pc, #80]	; (8003acc <TIM_OC1_SetConfig+0x80>)
 8003a7a:	42b0      	cmp	r0, r6
 8003a7c:	d002      	beq.n	8003a84 <TIM_OC1_SetConfig+0x38>
 8003a7e:	4e14      	ldr	r6, [pc, #80]	; (8003ad0 <TIM_OC1_SetConfig+0x84>)
 8003a80:	42b0      	cmp	r0, r6
 8003a82:	d116      	bne.n	8003ab2 <TIM_OC1_SetConfig+0x66>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a84:	2608      	movs	r6, #8
 8003a86:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a88:	68ce      	ldr	r6, [r1, #12]
 8003a8a:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a8c:	2604      	movs	r6, #4
 8003a8e:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a90:	4290      	cmp	r0, r2
 8003a92:	d008      	beq.n	8003aa6 <TIM_OC1_SetConfig+0x5a>
 8003a94:	4a0c      	ldr	r2, [pc, #48]	; (8003ac8 <TIM_OC1_SetConfig+0x7c>)
 8003a96:	4290      	cmp	r0, r2
 8003a98:	d005      	beq.n	8003aa6 <TIM_OC1_SetConfig+0x5a>
 8003a9a:	4a0c      	ldr	r2, [pc, #48]	; (8003acc <TIM_OC1_SetConfig+0x80>)
 8003a9c:	4290      	cmp	r0, r2
 8003a9e:	d002      	beq.n	8003aa6 <TIM_OC1_SetConfig+0x5a>
 8003aa0:	4a0b      	ldr	r2, [pc, #44]	; (8003ad0 <TIM_OC1_SetConfig+0x84>)
 8003aa2:	4290      	cmp	r0, r2
 8003aa4:	d105      	bne.n	8003ab2 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003aa6:	4a0b      	ldr	r2, [pc, #44]	; (8003ad4 <TIM_OC1_SetConfig+0x88>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003aa8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003aaa:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003aac:	694c      	ldr	r4, [r1, #20]
 8003aae:	4334      	orrs	r4, r6
 8003ab0:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ab2:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003ab4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003ab6:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003ab8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aba:	6203      	str	r3, [r0, #32]
}
 8003abc:	bd70      	pop	{r4, r5, r6, pc}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	fffeff8c 	.word	0xfffeff8c
 8003ac4:	40012c00 	.word	0x40012c00
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40014400 	.word	0x40014400
 8003ad0:	40014800 	.word	0x40014800
 8003ad4:	fffffcff 	.word	0xfffffcff

08003ad8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ad8:	6a03      	ldr	r3, [r0, #32]
 8003ada:	4a18      	ldr	r2, [pc, #96]	; (8003b3c <TIM_OC3_SetConfig+0x64>)
{
 8003adc:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ade:	4013      	ands	r3, r2
 8003ae0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ae2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ae4:	4d16      	ldr	r5, [pc, #88]	; (8003b40 <TIM_OC3_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 8003ae6:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003ae8:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003aea:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aec:	680d      	ldr	r5, [r1, #0]
 8003aee:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003af0:	4d14      	ldr	r5, [pc, #80]	; (8003b44 <TIM_OC3_SetConfig+0x6c>)
 8003af2:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003af4:	688d      	ldr	r5, [r1, #8]
 8003af6:	022d      	lsls	r5, r5, #8
 8003af8:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003afa:	4d13      	ldr	r5, [pc, #76]	; (8003b48 <TIM_OC3_SetConfig+0x70>)
 8003afc:	42a8      	cmp	r0, r5
 8003afe:	d10e      	bne.n	8003b1e <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b00:	4d12      	ldr	r5, [pc, #72]	; (8003b4c <TIM_OC3_SetConfig+0x74>)
 8003b02:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b04:	68cb      	ldr	r3, [r1, #12]
 8003b06:	021b      	lsls	r3, r3, #8
 8003b08:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b0a:	4d11      	ldr	r5, [pc, #68]	; (8003b50 <TIM_OC3_SetConfig+0x78>)
 8003b0c:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b0e:	4d11      	ldr	r5, [pc, #68]	; (8003b54 <TIM_OC3_SetConfig+0x7c>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b10:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b12:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b14:	698a      	ldr	r2, [r1, #24]
 8003b16:	4332      	orrs	r2, r6
 8003b18:	0112      	lsls	r2, r2, #4
 8003b1a:	432a      	orrs	r2, r5
 8003b1c:	e008      	b.n	8003b30 <TIM_OC3_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b1e:	4d0e      	ldr	r5, [pc, #56]	; (8003b58 <TIM_OC3_SetConfig+0x80>)
 8003b20:	42a8      	cmp	r0, r5
 8003b22:	d0f4      	beq.n	8003b0e <TIM_OC3_SetConfig+0x36>
 8003b24:	4d0d      	ldr	r5, [pc, #52]	; (8003b5c <TIM_OC3_SetConfig+0x84>)
 8003b26:	42a8      	cmp	r0, r5
 8003b28:	d0f1      	beq.n	8003b0e <TIM_OC3_SetConfig+0x36>
 8003b2a:	4d0d      	ldr	r5, [pc, #52]	; (8003b60 <TIM_OC3_SetConfig+0x88>)
 8003b2c:	42a8      	cmp	r0, r5
 8003b2e:	d0ee      	beq.n	8003b0e <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b30:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b32:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003b34:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003b36:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b38:	6203      	str	r3, [r0, #32]
}
 8003b3a:	bd70      	pop	{r4, r5, r6, pc}
 8003b3c:	fffffeff 	.word	0xfffffeff
 8003b40:	fffeff8c 	.word	0xfffeff8c
 8003b44:	fffffdff 	.word	0xfffffdff
 8003b48:	40012c00 	.word	0x40012c00
 8003b4c:	fffff7ff 	.word	0xfffff7ff
 8003b50:	fffffbff 	.word	0xfffffbff
 8003b54:	ffffcfff 	.word	0xffffcfff
 8003b58:	40014000 	.word	0x40014000
 8003b5c:	40014400 	.word	0x40014400
 8003b60:	40014800 	.word	0x40014800

08003b64 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b64:	6a03      	ldr	r3, [r0, #32]
 8003b66:	4a14      	ldr	r2, [pc, #80]	; (8003bb8 <TIM_OC4_SetConfig+0x54>)
{
 8003b68:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b70:	4c12      	ldr	r4, [pc, #72]	; (8003bbc <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 8003b72:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003b74:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b76:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b78:	680c      	ldr	r4, [r1, #0]
 8003b7a:	0224      	lsls	r4, r4, #8
 8003b7c:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b7e:	4c10      	ldr	r4, [pc, #64]	; (8003bc0 <TIM_OC4_SetConfig+0x5c>)
 8003b80:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b82:	688c      	ldr	r4, [r1, #8]
 8003b84:	0324      	lsls	r4, r4, #12
 8003b86:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b88:	4c0e      	ldr	r4, [pc, #56]	; (8003bc4 <TIM_OC4_SetConfig+0x60>)
 8003b8a:	42a0      	cmp	r0, r4
 8003b8c:	d008      	beq.n	8003ba0 <TIM_OC4_SetConfig+0x3c>
 8003b8e:	4c0e      	ldr	r4, [pc, #56]	; (8003bc8 <TIM_OC4_SetConfig+0x64>)
 8003b90:	42a0      	cmp	r0, r4
 8003b92:	d005      	beq.n	8003ba0 <TIM_OC4_SetConfig+0x3c>
 8003b94:	4c0d      	ldr	r4, [pc, #52]	; (8003bcc <TIM_OC4_SetConfig+0x68>)
 8003b96:	42a0      	cmp	r0, r4
 8003b98:	d002      	beq.n	8003ba0 <TIM_OC4_SetConfig+0x3c>
 8003b9a:	4c0d      	ldr	r4, [pc, #52]	; (8003bd0 <TIM_OC4_SetConfig+0x6c>)
 8003b9c:	42a0      	cmp	r0, r4
 8003b9e:	d104      	bne.n	8003baa <TIM_OC4_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ba0:	4c0c      	ldr	r4, [pc, #48]	; (8003bd4 <TIM_OC4_SetConfig+0x70>)
 8003ba2:	4023      	ands	r3, r4

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ba4:	694c      	ldr	r4, [r1, #20]
 8003ba6:	01a4      	lsls	r4, r4, #6
 8003ba8:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003baa:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bac:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003bae:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003bb0:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb2:	6202      	str	r2, [r0, #32]
}
 8003bb4:	bd30      	pop	{r4, r5, pc}
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	ffffefff 	.word	0xffffefff
 8003bbc:	feff8cff 	.word	0xfeff8cff
 8003bc0:	ffffdfff 	.word	0xffffdfff
 8003bc4:	40012c00 	.word	0x40012c00
 8003bc8:	40014000 	.word	0x40014000
 8003bcc:	40014400 	.word	0x40014400
 8003bd0:	40014800 	.word	0x40014800
 8003bd4:	ffffbfff 	.word	0xffffbfff

08003bd8 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003bd8:	6a03      	ldr	r3, [r0, #32]
 8003bda:	4a13      	ldr	r2, [pc, #76]	; (8003c28 <TIM_OC5_SetConfig+0x50>)
{
 8003bdc:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003bde:	4013      	ands	r3, r2
 8003be0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003be2:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003be4:	4e11      	ldr	r6, [pc, #68]	; (8003c2c <TIM_OC5_SetConfig+0x54>)
  tmpcr2 =  TIMx->CR2;
 8003be6:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8003be8:	6d45      	ldr	r5, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003bea:	4035      	ands	r5, r6
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bec:	680e      	ldr	r6, [r1, #0]
 8003bee:	4335      	orrs	r5, r6

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003bf0:	4e0f      	ldr	r6, [pc, #60]	; (8003c30 <TIM_OC5_SetConfig+0x58>)
 8003bf2:	4034      	ands	r4, r6
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003bf4:	688e      	ldr	r6, [r1, #8]
 8003bf6:	0436      	lsls	r6, r6, #16
 8003bf8:	4334      	orrs	r4, r6

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bfa:	4e0e      	ldr	r6, [pc, #56]	; (8003c34 <TIM_OC5_SetConfig+0x5c>)
 8003bfc:	42b0      	cmp	r0, r6
 8003bfe:	d008      	beq.n	8003c12 <TIM_OC5_SetConfig+0x3a>
 8003c00:	4e0d      	ldr	r6, [pc, #52]	; (8003c38 <TIM_OC5_SetConfig+0x60>)
 8003c02:	42b0      	cmp	r0, r6
 8003c04:	d005      	beq.n	8003c12 <TIM_OC5_SetConfig+0x3a>
 8003c06:	4e0d      	ldr	r6, [pc, #52]	; (8003c3c <TIM_OC5_SetConfig+0x64>)
 8003c08:	42b0      	cmp	r0, r6
 8003c0a:	d002      	beq.n	8003c12 <TIM_OC5_SetConfig+0x3a>
 8003c0c:	4e0c      	ldr	r6, [pc, #48]	; (8003c40 <TIM_OC5_SetConfig+0x68>)
 8003c0e:	42b0      	cmp	r0, r6
 8003c10:	d103      	bne.n	8003c1a <TIM_OC5_SetConfig+0x42>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c12:	4013      	ands	r3, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c14:	694a      	ldr	r2, [r1, #20]
 8003c16:	0212      	lsls	r2, r2, #8
 8003c18:	4313      	orrs	r3, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c1a:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c1c:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 8003c1e:	6545      	str	r5, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8003c20:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c22:	6204      	str	r4, [r0, #32]
}
 8003c24:	bd70      	pop	{r4, r5, r6, pc}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	fffeffff 	.word	0xfffeffff
 8003c2c:	fffeff8f 	.word	0xfffeff8f
 8003c30:	fffdffff 	.word	0xfffdffff
 8003c34:	40012c00 	.word	0x40012c00
 8003c38:	40014000 	.word	0x40014000
 8003c3c:	40014400 	.word	0x40014400
 8003c40:	40014800 	.word	0x40014800

08003c44 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c44:	6a03      	ldr	r3, [r0, #32]
 8003c46:	4a14      	ldr	r2, [pc, #80]	; (8003c98 <TIM_OC6_SetConfig+0x54>)
{
 8003c48:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4e:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c50:	4c12      	ldr	r4, [pc, #72]	; (8003c9c <TIM_OC6_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 8003c52:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8003c54:	6d45      	ldr	r5, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c56:	4025      	ands	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c58:	680c      	ldr	r4, [r1, #0]
 8003c5a:	0224      	lsls	r4, r4, #8
 8003c5c:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003c5e:	4c10      	ldr	r4, [pc, #64]	; (8003ca0 <TIM_OC6_SetConfig+0x5c>)
 8003c60:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c62:	688c      	ldr	r4, [r1, #8]
 8003c64:	0524      	lsls	r4, r4, #20
 8003c66:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c68:	4c0e      	ldr	r4, [pc, #56]	; (8003ca4 <TIM_OC6_SetConfig+0x60>)
 8003c6a:	42a0      	cmp	r0, r4
 8003c6c:	d008      	beq.n	8003c80 <TIM_OC6_SetConfig+0x3c>
 8003c6e:	4c0e      	ldr	r4, [pc, #56]	; (8003ca8 <TIM_OC6_SetConfig+0x64>)
 8003c70:	42a0      	cmp	r0, r4
 8003c72:	d005      	beq.n	8003c80 <TIM_OC6_SetConfig+0x3c>
 8003c74:	4c0d      	ldr	r4, [pc, #52]	; (8003cac <TIM_OC6_SetConfig+0x68>)
 8003c76:	42a0      	cmp	r0, r4
 8003c78:	d002      	beq.n	8003c80 <TIM_OC6_SetConfig+0x3c>
 8003c7a:	4c0d      	ldr	r4, [pc, #52]	; (8003cb0 <TIM_OC6_SetConfig+0x6c>)
 8003c7c:	42a0      	cmp	r0, r4
 8003c7e:	d104      	bne.n	8003c8a <TIM_OC6_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c80:	4c0c      	ldr	r4, [pc, #48]	; (8003cb4 <TIM_OC6_SetConfig+0x70>)
 8003c82:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c84:	694c      	ldr	r4, [r1, #20]
 8003c86:	02a4      	lsls	r4, r4, #10
 8003c88:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c8a:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c8c:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 8003c8e:	6545      	str	r5, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8003c90:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c92:	6202      	str	r2, [r0, #32]
}
 8003c94:	bd30      	pop	{r4, r5, pc}
 8003c96:	46c0      	nop			; (mov r8, r8)
 8003c98:	ffefffff 	.word	0xffefffff
 8003c9c:	feff8fff 	.word	0xfeff8fff
 8003ca0:	ffdfffff 	.word	0xffdfffff
 8003ca4:	40012c00 	.word	0x40012c00
 8003ca8:	40014000 	.word	0x40014000
 8003cac:	40014400 	.word	0x40014400
 8003cb0:	40014800 	.word	0x40014800
 8003cb4:	fffbffff 	.word	0xfffbffff

08003cb8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cb8:	2201      	movs	r2, #1
 8003cba:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cbc:	4807      	ldr	r0, [pc, #28]	; (8003cdc <HAL_TIM_Base_Start_IT+0x24>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cbe:	68d9      	ldr	r1, [r3, #12]
 8003cc0:	4311      	orrs	r1, r2
 8003cc2:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cc4:	6899      	ldr	r1, [r3, #8]
 8003cc6:	4001      	ands	r1, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc8:	2906      	cmp	r1, #6
 8003cca:	d005      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x20>
 8003ccc:	3807      	subs	r0, #7
 8003cce:	4281      	cmp	r1, r0
 8003cd0:	d002      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x20>
    __HAL_TIM_ENABLE(htim);
 8003cd2:	6819      	ldr	r1, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	601a      	str	r2, [r3, #0]
}
 8003cd8:	2000      	movs	r0, #0
 8003cda:	4770      	bx	lr
 8003cdc:	00010007 	.word	0x00010007

08003ce0 <HAL_TIM_PWM_MspInit>:
 8003ce0:	4770      	bx	lr

08003ce2 <HAL_TIM_IC_MspInit>:
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_TIM_OC_DelayElapsedCallback>:
 8003ce4:	4770      	bx	lr

08003ce6 <HAL_TIM_IC_CaptureCallback>:
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003ce8:	4770      	bx	lr

08003cea <HAL_TIM_TriggerCallback>:
 8003cea:	4770      	bx	lr

08003cec <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cec:	2202      	movs	r2, #2
 8003cee:	6803      	ldr	r3, [r0, #0]
{
 8003cf0:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cf2:	6919      	ldr	r1, [r3, #16]
{
 8003cf4:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cf6:	4211      	tst	r1, r2
 8003cf8:	d00e      	beq.n	8003d18 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cfa:	68d9      	ldr	r1, [r3, #12]
 8003cfc:	4211      	tst	r1, r2
 8003cfe:	d00b      	beq.n	8003d18 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d00:	3a05      	subs	r2, #5
 8003d02:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d04:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d06:	3204      	adds	r2, #4
 8003d08:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d0a:	079b      	lsls	r3, r3, #30
 8003d0c:	d100      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x24>
 8003d0e:	e086      	b.n	8003e1e <HAL_TIM_IRQHandler+0x132>
          HAL_TIM_IC_CaptureCallback(htim);
 8003d10:	f7ff ffe9 	bl	8003ce6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d14:	2300      	movs	r3, #0
 8003d16:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d18:	2204      	movs	r2, #4
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	6919      	ldr	r1, [r3, #16]
 8003d1e:	4211      	tst	r1, r2
 8003d20:	d011      	beq.n	8003d46 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d22:	68d9      	ldr	r1, [r3, #12]
 8003d24:	4211      	tst	r1, r2
 8003d26:	d00e      	beq.n	8003d46 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d28:	3a09      	subs	r2, #9
 8003d2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d2c:	3207      	adds	r2, #7
 8003d2e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d30:	699a      	ldr	r2, [r3, #24]
 8003d32:	23c0      	movs	r3, #192	; 0xc0
 8003d34:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8003d36:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d38:	421a      	tst	r2, r3
 8003d3a:	d100      	bne.n	8003d3e <HAL_TIM_IRQHandler+0x52>
 8003d3c:	e075      	b.n	8003e2a <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003d3e:	f7ff ffd2 	bl	8003ce6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d42:	2300      	movs	r3, #0
 8003d44:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d46:	2208      	movs	r2, #8
 8003d48:	6823      	ldr	r3, [r4, #0]
 8003d4a:	6919      	ldr	r1, [r3, #16]
 8003d4c:	4211      	tst	r1, r2
 8003d4e:	d00e      	beq.n	8003d6e <HAL_TIM_IRQHandler+0x82>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d50:	68d9      	ldr	r1, [r3, #12]
 8003d52:	4211      	tst	r1, r2
 8003d54:	d00b      	beq.n	8003d6e <HAL_TIM_IRQHandler+0x82>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d56:	3a11      	subs	r2, #17
 8003d58:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d5a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d5c:	320d      	adds	r2, #13
 8003d5e:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003d60:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d62:	079b      	lsls	r3, r3, #30
 8003d64:	d067      	beq.n	8003e36 <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003d66:	f7ff ffbe 	bl	8003ce6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d6e:	2210      	movs	r2, #16
 8003d70:	6823      	ldr	r3, [r4, #0]
 8003d72:	6919      	ldr	r1, [r3, #16]
 8003d74:	4211      	tst	r1, r2
 8003d76:	d010      	beq.n	8003d9a <HAL_TIM_IRQHandler+0xae>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d78:	68d9      	ldr	r1, [r3, #12]
 8003d7a:	4211      	tst	r1, r2
 8003d7c:	d00d      	beq.n	8003d9a <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d7e:	3a21      	subs	r2, #33	; 0x21
 8003d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d82:	3219      	adds	r2, #25
 8003d84:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d86:	69da      	ldr	r2, [r3, #28]
 8003d88:	23c0      	movs	r3, #192	; 0xc0
 8003d8a:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8003d8c:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d8e:	421a      	tst	r2, r3
 8003d90:	d057      	beq.n	8003e42 <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_IC_CaptureCallback(htim);
 8003d92:	f7ff ffa8 	bl	8003ce6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d96:	2300      	movs	r3, #0
 8003d98:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	6823      	ldr	r3, [r4, #0]
 8003d9e:	6919      	ldr	r1, [r3, #16]
 8003da0:	4211      	tst	r1, r2
 8003da2:	d007      	beq.n	8003db4 <HAL_TIM_IRQHandler+0xc8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003da4:	68d9      	ldr	r1, [r3, #12]
 8003da6:	4211      	tst	r1, r2
 8003da8:	d004      	beq.n	8003db4 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003daa:	3a03      	subs	r2, #3
 8003dac:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dae:	0020      	movs	r0, r4
 8003db0:	f7fd fa2c 	bl	800120c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003db4:	2280      	movs	r2, #128	; 0x80
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	6919      	ldr	r1, [r3, #16]
 8003dba:	4211      	tst	r1, r2
 8003dbc:	d008      	beq.n	8003dd0 <HAL_TIM_IRQHandler+0xe4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dbe:	68d9      	ldr	r1, [r3, #12]
 8003dc0:	4211      	tst	r1, r2
 8003dc2:	d005      	beq.n	8003dd0 <HAL_TIM_IRQHandler+0xe4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dc4:	3a02      	subs	r2, #2
 8003dc6:	3aff      	subs	r2, #255	; 0xff
 8003dc8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003dca:	0020      	movs	r0, r4
 8003dcc:	f000 fb7b 	bl	80044c6 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	05d2      	lsls	r2, r2, #23
 8003dd6:	d507      	bpl.n	8003de8 <HAL_TIM_IRQHandler+0xfc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	0612      	lsls	r2, r2, #24
 8003ddc:	d504      	bpl.n	8003de8 <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003dde:	4a1c      	ldr	r2, [pc, #112]	; (8003e50 <HAL_TIM_IRQHandler+0x164>)
      HAL_TIMEx_Break2Callback(htim);
 8003de0:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003de2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003de4:	f000 fb70 	bl	80044c8 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003de8:	2240      	movs	r2, #64	; 0x40
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	6919      	ldr	r1, [r3, #16]
 8003dee:	4211      	tst	r1, r2
 8003df0:	d007      	beq.n	8003e02 <HAL_TIM_IRQHandler+0x116>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003df2:	68d9      	ldr	r1, [r3, #12]
 8003df4:	4211      	tst	r1, r2
 8003df6:	d004      	beq.n	8003e02 <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003df8:	3a81      	subs	r2, #129	; 0x81
 8003dfa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003dfc:	0020      	movs	r0, r4
 8003dfe:	f7ff ff74 	bl	8003cea <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e02:	2220      	movs	r2, #32
 8003e04:	6823      	ldr	r3, [r4, #0]
 8003e06:	6919      	ldr	r1, [r3, #16]
 8003e08:	4211      	tst	r1, r2
 8003e0a:	d007      	beq.n	8003e1c <HAL_TIM_IRQHandler+0x130>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e0c:	68d9      	ldr	r1, [r3, #12]
 8003e0e:	4211      	tst	r1, r2
 8003e10:	d004      	beq.n	8003e1c <HAL_TIM_IRQHandler+0x130>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e12:	3a41      	subs	r2, #65	; 0x41
 8003e14:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003e16:	0020      	movs	r0, r4
 8003e18:	f000 fb54 	bl	80044c4 <HAL_TIMEx_CommutCallback>
}
 8003e1c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1e:	f7ff ff61 	bl	8003ce4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e22:	0020      	movs	r0, r4
 8003e24:	f7ff ff60 	bl	8003ce8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e28:	e774      	b.n	8003d14 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2a:	f7ff ff5b 	bl	8003ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e2e:	0020      	movs	r0, r4
 8003e30:	f7ff ff5a 	bl	8003ce8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e34:	e785      	b.n	8003d42 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e36:	f7ff ff55 	bl	8003ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e3a:	0020      	movs	r0, r4
 8003e3c:	f7ff ff54 	bl	8003ce8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e40:	e793      	b.n	8003d6a <HAL_TIM_IRQHandler+0x7e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e42:	f7ff ff4f 	bl	8003ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e46:	0020      	movs	r0, r4
 8003e48:	f7ff ff4e 	bl	8003ce8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e4c:	e7a3      	b.n	8003d96 <HAL_TIM_IRQHandler+0xaa>
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	fffffeff 	.word	0xfffffeff

08003e54 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e54:	4a1c      	ldr	r2, [pc, #112]	; (8003ec8 <TIM_Base_SetConfig+0x74>)
{
 8003e56:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8003e58:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e5a:	4290      	cmp	r0, r2
 8003e5c:	d002      	beq.n	8003e64 <TIM_Base_SetConfig+0x10>
 8003e5e:	4c1b      	ldr	r4, [pc, #108]	; (8003ecc <TIM_Base_SetConfig+0x78>)
 8003e60:	42a0      	cmp	r0, r4
 8003e62:	d108      	bne.n	8003e76 <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e64:	2470      	movs	r4, #112	; 0x70
 8003e66:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8003e68:	684c      	ldr	r4, [r1, #4]
 8003e6a:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e6c:	4290      	cmp	r0, r2
 8003e6e:	d00e      	beq.n	8003e8e <TIM_Base_SetConfig+0x3a>
 8003e70:	4c16      	ldr	r4, [pc, #88]	; (8003ecc <TIM_Base_SetConfig+0x78>)
 8003e72:	42a0      	cmp	r0, r4
 8003e74:	d00b      	beq.n	8003e8e <TIM_Base_SetConfig+0x3a>
 8003e76:	4c16      	ldr	r4, [pc, #88]	; (8003ed0 <TIM_Base_SetConfig+0x7c>)
 8003e78:	42a0      	cmp	r0, r4
 8003e7a:	d008      	beq.n	8003e8e <TIM_Base_SetConfig+0x3a>
 8003e7c:	4c15      	ldr	r4, [pc, #84]	; (8003ed4 <TIM_Base_SetConfig+0x80>)
 8003e7e:	42a0      	cmp	r0, r4
 8003e80:	d005      	beq.n	8003e8e <TIM_Base_SetConfig+0x3a>
 8003e82:	4c15      	ldr	r4, [pc, #84]	; (8003ed8 <TIM_Base_SetConfig+0x84>)
 8003e84:	42a0      	cmp	r0, r4
 8003e86:	d002      	beq.n	8003e8e <TIM_Base_SetConfig+0x3a>
 8003e88:	4c14      	ldr	r4, [pc, #80]	; (8003edc <TIM_Base_SetConfig+0x88>)
 8003e8a:	42a0      	cmp	r0, r4
 8003e8c:	d103      	bne.n	8003e96 <TIM_Base_SetConfig+0x42>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e8e:	4c14      	ldr	r4, [pc, #80]	; (8003ee0 <TIM_Base_SetConfig+0x8c>)
 8003e90:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e92:	68cc      	ldr	r4, [r1, #12]
 8003e94:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e96:	2480      	movs	r4, #128	; 0x80
 8003e98:	43a3      	bics	r3, r4
 8003e9a:	694c      	ldr	r4, [r1, #20]
 8003e9c:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8003e9e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ea0:	688b      	ldr	r3, [r1, #8]
 8003ea2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003ea4:	680b      	ldr	r3, [r1, #0]
 8003ea6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ea8:	4290      	cmp	r0, r2
 8003eaa:	d008      	beq.n	8003ebe <TIM_Base_SetConfig+0x6a>
 8003eac:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <TIM_Base_SetConfig+0x80>)
 8003eae:	4298      	cmp	r0, r3
 8003eb0:	d005      	beq.n	8003ebe <TIM_Base_SetConfig+0x6a>
 8003eb2:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <TIM_Base_SetConfig+0x84>)
 8003eb4:	4298      	cmp	r0, r3
 8003eb6:	d002      	beq.n	8003ebe <TIM_Base_SetConfig+0x6a>
 8003eb8:	4b08      	ldr	r3, [pc, #32]	; (8003edc <TIM_Base_SetConfig+0x88>)
 8003eba:	4298      	cmp	r0, r3
 8003ebc:	d101      	bne.n	8003ec2 <TIM_Base_SetConfig+0x6e>
    TIMx->RCR = Structure->RepetitionCounter;
 8003ebe:	690b      	ldr	r3, [r1, #16]
 8003ec0:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	6143      	str	r3, [r0, #20]
}
 8003ec6:	bd10      	pop	{r4, pc}
 8003ec8:	40012c00 	.word	0x40012c00
 8003ecc:	40000400 	.word	0x40000400
 8003ed0:	40002000 	.word	0x40002000
 8003ed4:	40014000 	.word	0x40014000
 8003ed8:	40014400 	.word	0x40014400
 8003edc:	40014800 	.word	0x40014800
 8003ee0:	fffffcff 	.word	0xfffffcff

08003ee4 <HAL_TIM_Base_Init>:
{
 8003ee4:	b570      	push	{r4, r5, r6, lr}
 8003ee6:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003ee8:	2001      	movs	r0, #1
  if (htim == NULL)
 8003eea:	2c00      	cmp	r4, #0
 8003eec:	d014      	beq.n	8003f18 <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003eee:	0025      	movs	r5, r4
 8003ef0:	353d      	adds	r5, #61	; 0x3d
 8003ef2:	782b      	ldrb	r3, [r5, #0]
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d105      	bne.n	8003f06 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8003efa:	0022      	movs	r2, r4
 8003efc:	323c      	adds	r2, #60	; 0x3c
 8003efe:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8003f00:	0020      	movs	r0, r4
 8003f02:	f7fd ff05 	bl	8001d10 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003f06:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f08:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003f0a:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f0c:	1d21      	adds	r1, r4, #4
 8003f0e:	f7ff ffa1 	bl	8003e54 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003f12:	2301      	movs	r3, #1
  return HAL_OK;
 8003f14:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003f16:	702b      	strb	r3, [r5, #0]
}
 8003f18:	bd70      	pop	{r4, r5, r6, pc}

08003f1a <HAL_TIM_PWM_Init>:
{
 8003f1a:	b570      	push	{r4, r5, r6, lr}
 8003f1c:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003f1e:	2001      	movs	r0, #1
  if (htim == NULL)
 8003f20:	2c00      	cmp	r4, #0
 8003f22:	d014      	beq.n	8003f4e <HAL_TIM_PWM_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003f24:	0025      	movs	r5, r4
 8003f26:	353d      	adds	r5, #61	; 0x3d
 8003f28:	782b      	ldrb	r3, [r5, #0]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d105      	bne.n	8003f3c <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8003f30:	0022      	movs	r2, r4
 8003f32:	323c      	adds	r2, #60	; 0x3c
 8003f34:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 8003f36:	0020      	movs	r0, r4
 8003f38:	f7ff fed2 	bl	8003ce0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003f3c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f3e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003f40:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f42:	1d21      	adds	r1, r4, #4
 8003f44:	f7ff ff86 	bl	8003e54 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003f48:	2301      	movs	r3, #1
  return HAL_OK;
 8003f4a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003f4c:	702b      	strb	r3, [r5, #0]
}
 8003f4e:	bd70      	pop	{r4, r5, r6, pc}

08003f50 <HAL_TIM_IC_Init>:
{
 8003f50:	b570      	push	{r4, r5, r6, lr}
 8003f52:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003f54:	2001      	movs	r0, #1
  if (htim == NULL)
 8003f56:	2c00      	cmp	r4, #0
 8003f58:	d014      	beq.n	8003f84 <HAL_TIM_IC_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003f5a:	0025      	movs	r5, r4
 8003f5c:	353d      	adds	r5, #61	; 0x3d
 8003f5e:	782b      	ldrb	r3, [r5, #0]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d105      	bne.n	8003f72 <HAL_TIM_IC_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8003f66:	0022      	movs	r2, r4
 8003f68:	323c      	adds	r2, #60	; 0x3c
 8003f6a:	7013      	strb	r3, [r2, #0]
    HAL_TIM_IC_MspInit(htim);
 8003f6c:	0020      	movs	r0, r4
 8003f6e:	f7ff feb8 	bl	8003ce2 <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003f72:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f74:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003f76:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f78:	1d21      	adds	r1, r4, #4
 8003f7a:	f7ff ff6b 	bl	8003e54 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003f7e:	2301      	movs	r3, #1
  return HAL_OK;
 8003f80:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003f82:	702b      	strb	r3, [r5, #0]
}
 8003f84:	bd70      	pop	{r4, r5, r6, pc}
	...

08003f88 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f88:	2210      	movs	r2, #16
 8003f8a:	6a03      	ldr	r3, [r0, #32]
{
 8003f8c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f8e:	4393      	bics	r3, r2
 8003f90:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003f92:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f94:	4d16      	ldr	r5, [pc, #88]	; (8003ff0 <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 8003f96:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003f98:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f9a:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f9c:	680d      	ldr	r5, [r1, #0]
 8003f9e:	022d      	lsls	r5, r5, #8
 8003fa0:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 8003fa2:	2520      	movs	r5, #32
 8003fa4:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fa6:	688d      	ldr	r5, [r1, #8]
 8003fa8:	012d      	lsls	r5, r5, #4
 8003faa:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fac:	4d11      	ldr	r5, [pc, #68]	; (8003ff4 <TIM_OC2_SetConfig+0x6c>)
 8003fae:	42a8      	cmp	r0, r5
 8003fb0:	d10f      	bne.n	8003fd2 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fb2:	2580      	movs	r5, #128	; 0x80
 8003fb4:	43aa      	bics	r2, r5
 8003fb6:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fb8:	68ca      	ldr	r2, [r1, #12]
 8003fba:	0112      	lsls	r2, r2, #4
 8003fbc:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fbe:	2540      	movs	r5, #64	; 0x40
 8003fc0:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fc2:	4d0d      	ldr	r5, [pc, #52]	; (8003ff8 <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fc4:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fc6:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fc8:	698b      	ldr	r3, [r1, #24]
 8003fca:	4333      	orrs	r3, r6
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	432b      	orrs	r3, r5
 8003fd0:	e008      	b.n	8003fe4 <TIM_OC2_SetConfig+0x5c>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd2:	4d0a      	ldr	r5, [pc, #40]	; (8003ffc <TIM_OC2_SetConfig+0x74>)
 8003fd4:	42a8      	cmp	r0, r5
 8003fd6:	d0f4      	beq.n	8003fc2 <TIM_OC2_SetConfig+0x3a>
 8003fd8:	4d09      	ldr	r5, [pc, #36]	; (8004000 <TIM_OC2_SetConfig+0x78>)
 8003fda:	42a8      	cmp	r0, r5
 8003fdc:	d0f1      	beq.n	8003fc2 <TIM_OC2_SetConfig+0x3a>
 8003fde:	4d09      	ldr	r5, [pc, #36]	; (8004004 <TIM_OC2_SetConfig+0x7c>)
 8003fe0:	42a8      	cmp	r0, r5
 8003fe2:	d0ee      	beq.n	8003fc2 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8003fe4:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8003fe6:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003fe8:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003fea:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003fec:	6202      	str	r2, [r0, #32]
}
 8003fee:	bd70      	pop	{r4, r5, r6, pc}
 8003ff0:	feff8cff 	.word	0xfeff8cff
 8003ff4:	40012c00 	.word	0x40012c00
 8003ff8:	fffff3ff 	.word	0xfffff3ff
 8003ffc:	40014000 	.word	0x40014000
 8004000:	40014400 	.word	0x40014400
 8004004:	40014800 	.word	0x40014800

08004008 <HAL_TIM_PWM_ConfigChannel>:
{
 8004008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800400a:	0007      	movs	r7, r0
 800400c:	2302      	movs	r3, #2
 800400e:	373c      	adds	r7, #60	; 0x3c
{
 8004010:	0016      	movs	r6, r2
  __HAL_LOCK(htim);
 8004012:	783a      	ldrb	r2, [r7, #0]
{
 8004014:	0004      	movs	r4, r0
 8004016:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8004018:	0018      	movs	r0, r3
 800401a:	2a01      	cmp	r2, #1
 800401c:	d011      	beq.n	8004042 <HAL_TIM_PWM_ConfigChannel+0x3a>
 800401e:	2201      	movs	r2, #1
 8004020:	703a      	strb	r2, [r7, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004022:	0022      	movs	r2, r4
 8004024:	323d      	adds	r2, #61	; 0x3d
 8004026:	9201      	str	r2, [sp, #4]
 8004028:	7013      	strb	r3, [r2, #0]
  switch (Channel)
 800402a:	2e08      	cmp	r6, #8
 800402c:	d043      	beq.n	80040b6 <HAL_TIM_PWM_ConfigChannel+0xae>
 800402e:	d809      	bhi.n	8004044 <HAL_TIM_PWM_ConfigChannel+0x3c>
 8004030:	2e00      	cmp	r6, #0
 8004032:	d01e      	beq.n	8004072 <HAL_TIM_PWM_ConfigChannel+0x6a>
 8004034:	2e04      	cmp	r6, #4
 8004036:	d02d      	beq.n	8004094 <HAL_TIM_PWM_ConfigChannel+0x8c>
  htim->State = HAL_TIM_STATE_READY;
 8004038:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800403a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800403c:	9a01      	ldr	r2, [sp, #4]
 800403e:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(htim);
 8004040:	7038      	strb	r0, [r7, #0]
}
 8004042:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8004044:	2e10      	cmp	r6, #16
 8004046:	d046      	beq.n	80040d6 <HAL_TIM_PWM_ConfigChannel+0xce>
 8004048:	2e14      	cmp	r6, #20
 800404a:	d055      	beq.n	80040f8 <HAL_TIM_PWM_ConfigChannel+0xf0>
 800404c:	2e0c      	cmp	r6, #12
 800404e:	d1f3      	bne.n	8004038 <HAL_TIM_PWM_ConfigChannel+0x30>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004050:	6820      	ldr	r0, [r4, #0]
 8004052:	f7ff fd87 	bl	8003b64 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004056:	2280      	movs	r2, #128	; 0x80
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	0112      	lsls	r2, r2, #4
 800405c:	69d9      	ldr	r1, [r3, #28]
 800405e:	430a      	orrs	r2, r1
 8004060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004062:	69da      	ldr	r2, [r3, #28]
 8004064:	492d      	ldr	r1, [pc, #180]	; (800411c <HAL_TIM_PWM_ConfigChannel+0x114>)
 8004066:	400a      	ands	r2, r1
 8004068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800406a:	692a      	ldr	r2, [r5, #16]
 800406c:	69d9      	ldr	r1, [r3, #28]
 800406e:	0212      	lsls	r2, r2, #8
 8004070:	e02e      	b.n	80040d0 <HAL_TIM_PWM_ConfigChannel+0xc8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004072:	6820      	ldr	r0, [r4, #0]
 8004074:	f7ff fcea 	bl	8003a4c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004078:	2208      	movs	r2, #8
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	6999      	ldr	r1, [r3, #24]
 800407e:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004080:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	438a      	bics	r2, r1
 8004088:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800408a:	699a      	ldr	r2, [r3, #24]
 800408c:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800408e:	430a      	orrs	r2, r1
 8004090:	619a      	str	r2, [r3, #24]
      break;
 8004092:	e7d1      	b.n	8004038 <HAL_TIM_PWM_ConfigChannel+0x30>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004094:	6820      	ldr	r0, [r4, #0]
 8004096:	f7ff ff77 	bl	8003f88 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800409a:	2280      	movs	r2, #128	; 0x80
 800409c:	6823      	ldr	r3, [r4, #0]
 800409e:	0112      	lsls	r2, r2, #4
 80040a0:	6999      	ldr	r1, [r3, #24]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040a6:	699a      	ldr	r2, [r3, #24]
 80040a8:	491c      	ldr	r1, [pc, #112]	; (800411c <HAL_TIM_PWM_ConfigChannel+0x114>)
 80040aa:	400a      	ands	r2, r1
 80040ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040ae:	692a      	ldr	r2, [r5, #16]
 80040b0:	6999      	ldr	r1, [r3, #24]
 80040b2:	0212      	lsls	r2, r2, #8
 80040b4:	e7eb      	b.n	800408e <HAL_TIM_PWM_ConfigChannel+0x86>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040b6:	6820      	ldr	r0, [r4, #0]
 80040b8:	f7ff fd0e 	bl	8003ad8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040bc:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	69da      	ldr	r2, [r3, #28]
 80040c2:	4316      	orrs	r6, r2
 80040c4:	61de      	str	r6, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040c6:	69da      	ldr	r2, [r3, #28]
 80040c8:	438a      	bics	r2, r1
 80040ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040cc:	69da      	ldr	r2, [r3, #28]
 80040ce:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040d0:	430a      	orrs	r2, r1
 80040d2:	61da      	str	r2, [r3, #28]
      break;
 80040d4:	e7b0      	b.n	8004038 <HAL_TIM_PWM_ConfigChannel+0x30>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040d6:	6820      	ldr	r0, [r4, #0]
 80040d8:	f7ff fd7e 	bl	8003bd8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040dc:	2208      	movs	r2, #8
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040e2:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040e4:	2104      	movs	r1, #4
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040ea:	438a      	bics	r2, r1
 80040ec:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040f0:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80040f2:	430a      	orrs	r2, r1
 80040f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040f6:	e79f      	b.n	8004038 <HAL_TIM_PWM_ConfigChannel+0x30>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040f8:	6820      	ldr	r0, [r4, #0]
 80040fa:	f7ff fda3 	bl	8003c44 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040fe:	2280      	movs	r2, #128	; 0x80
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	0112      	lsls	r2, r2, #4
 8004104:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004106:	430a      	orrs	r2, r1
 8004108:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800410a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800410c:	4903      	ldr	r1, [pc, #12]	; (800411c <HAL_TIM_PWM_ConfigChannel+0x114>)
 800410e:	400a      	ands	r2, r1
 8004110:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004112:	692a      	ldr	r2, [r5, #16]
 8004114:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004116:	0212      	lsls	r2, r2, #8
 8004118:	e7eb      	b.n	80040f2 <HAL_TIM_PWM_ConfigChannel+0xea>
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	fffffbff 	.word	0xfffffbff

08004120 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004120:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004122:	2401      	movs	r4, #1
 8004124:	6a05      	ldr	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004126:	4f0f      	ldr	r7, [pc, #60]	; (8004164 <TIM_TI1_SetConfig+0x44>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004128:	43a5      	bics	r5, r4
 800412a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800412c:	6986      	ldr	r6, [r0, #24]
  tmpccer = TIMx->CCER;
 800412e:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004130:	42b8      	cmp	r0, r7
 8004132:	d005      	beq.n	8004140 <TIM_TI1_SetConfig+0x20>
 8004134:	4f0c      	ldr	r7, [pc, #48]	; (8004168 <TIM_TI1_SetConfig+0x48>)
 8004136:	42b8      	cmp	r0, r7
 8004138:	d002      	beq.n	8004140 <TIM_TI1_SetConfig+0x20>
 800413a:	4f0c      	ldr	r7, [pc, #48]	; (800416c <TIM_TI1_SetConfig+0x4c>)
 800413c:	42b8      	cmp	r0, r7
 800413e:	d10f      	bne.n	8004160 <TIM_TI1_SetConfig+0x40>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004140:	2403      	movs	r4, #3
 8004142:	43a6      	bics	r6, r4
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004144:	24f0      	movs	r4, #240	; 0xf0
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004146:	4332      	orrs	r2, r6
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004148:	43a2      	bics	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	340f      	adds	r4, #15
 800414e:	4023      	ands	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004150:	3cf5      	subs	r4, #245	; 0xf5
 8004152:	43a5      	bics	r5, r4
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004154:	4021      	ands	r1, r4
 8004156:	4329      	orrs	r1, r5
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004158:	431a      	orrs	r2, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800415a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800415c:	6201      	str	r1, [r0, #32]
}
 800415e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004160:	0022      	movs	r2, r4
 8004162:	e7ef      	b.n	8004144 <TIM_TI1_SetConfig+0x24>
 8004164:	40012c00 	.word	0x40012c00
 8004168:	40000400 	.word	0x40000400
 800416c:	40014000 	.word	0x40014000

08004170 <HAL_TIM_IC_ConfigChannel>:
{
 8004170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004172:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8004174:	0001      	movs	r1, r0
 8004176:	2302      	movs	r3, #2
 8004178:	313c      	adds	r1, #60	; 0x3c
 800417a:	780e      	ldrb	r6, [r1, #0]
{
 800417c:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 800417e:	0018      	movs	r0, r3
 8004180:	2e01      	cmp	r6, #1
 8004182:	d01a      	beq.n	80041ba <HAL_TIM_IC_ConfigChannel+0x4a>
 8004184:	3801      	subs	r0, #1
 8004186:	7008      	strb	r0, [r1, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004188:	704b      	strb	r3, [r1, #1]
  if (Channel == TIM_CHANNEL_1)
 800418a:	2a00      	cmp	r2, #0
 800418c:	d116      	bne.n	80041bc <HAL_TIM_IC_ConfigChannel+0x4c>
    TIM_TI1_SetConfig(htim->Instance,
 800418e:	68eb      	ldr	r3, [r5, #12]
 8004190:	686a      	ldr	r2, [r5, #4]
 8004192:	6829      	ldr	r1, [r5, #0]
 8004194:	6820      	ldr	r0, [r4, #0]
 8004196:	f7ff ffc3 	bl	8004120 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800419a:	210c      	movs	r1, #12
 800419c:	6823      	ldr	r3, [r4, #0]
 800419e:	699a      	ldr	r2, [r3, #24]
 80041a0:	438a      	bics	r2, r1
 80041a2:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80041a4:	699a      	ldr	r2, [r3, #24]
 80041a6:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80041a8:	430a      	orrs	r2, r1
 80041aa:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80041ac:	0023      	movs	r3, r4
 80041ae:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 80041b0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80041b2:	333d      	adds	r3, #61	; 0x3d
  __HAL_UNLOCK(htim);
 80041b4:	343c      	adds	r4, #60	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80041b6:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(htim);
 80041b8:	7020      	strb	r0, [r4, #0]
}
 80041ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80041bc:	6829      	ldr	r1, [r5, #0]
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	9101      	str	r1, [sp, #4]
 80041c2:	686e      	ldr	r6, [r5, #4]
 80041c4:	68e8      	ldr	r0, [r5, #12]
  else if (Channel == TIM_CHANNEL_2)
 80041c6:	2a04      	cmp	r2, #4
 80041c8:	d11e      	bne.n	8004208 <HAL_TIM_IC_ConfigChannel+0x98>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ca:	2710      	movs	r7, #16
 80041cc:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80041ce:	4930      	ldr	r1, [pc, #192]	; (8004290 <HAL_TIM_IC_ConfigChannel+0x120>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041d0:	43ba      	bics	r2, r7
 80041d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041d4:	699f      	ldr	r7, [r3, #24]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80041d6:	0236      	lsls	r6, r6, #8
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80041d8:	400f      	ands	r7, r1
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80041da:	433e      	orrs	r6, r7

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041dc:	4f2d      	ldr	r7, [pc, #180]	; (8004294 <HAL_TIM_IC_ConfigChannel+0x124>)
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80041de:	0700      	lsls	r0, r0, #28
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041e0:	403e      	ands	r6, r7
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80041e2:	0c00      	lsrs	r0, r0, #16
 80041e4:	4330      	orrs	r0, r6

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041e6:	26a0      	movs	r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80041e8:	9901      	ldr	r1, [sp, #4]
  tmpccer = TIMx->CCER;
 80041ea:	6a1a      	ldr	r2, [r3, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80041ec:	0109      	lsls	r1, r1, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041ee:	43b2      	bics	r2, r6
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80041f0:	4031      	ands	r1, r6
 80041f2:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041f4:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 80041f6:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	4927      	ldr	r1, [pc, #156]	; (8004298 <HAL_TIM_IC_ConfigChannel+0x128>)
 80041fc:	400a      	ands	r2, r1
 80041fe:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004200:	68aa      	ldr	r2, [r5, #8]
 8004202:	6999      	ldr	r1, [r3, #24]
 8004204:	0212      	lsls	r2, r2, #8
 8004206:	e7cf      	b.n	80041a8 <HAL_TIM_IC_ConfigChannel+0x38>
 8004208:	68ad      	ldr	r5, [r5, #8]
  else if (Channel == TIM_CHANNEL_3)
 800420a:	2a08      	cmp	r2, #8
 800420c:	d120      	bne.n	8004250 <HAL_TIM_IC_ConfigChannel+0xe0>
  TIMx->CCER &= ~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800420e:	2103      	movs	r1, #3
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004210:	6a1a      	ldr	r2, [r3, #32]
 8004212:	4f22      	ldr	r7, [pc, #136]	; (800429c <HAL_TIM_IC_ConfigChannel+0x12c>)
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004214:	0100      	lsls	r0, r0, #4
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004216:	403a      	ands	r2, r7
 8004218:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800421a:	69df      	ldr	r7, [r3, #28]
  tmpccer = TIMx->CCER;
 800421c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800421e:	438f      	bics	r7, r1
  tmpccmr2 |= TIM_ICSelection;
 8004220:	433e      	orrs	r6, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004222:	27f0      	movs	r7, #240	; 0xf0
 8004224:	43be      	bics	r6, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004226:	370f      	adds	r7, #15
 8004228:	4038      	ands	r0, r7
 800422a:	4306      	orrs	r6, r0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800422c:	481c      	ldr	r0, [pc, #112]	; (80042a0 <HAL_TIM_IC_ConfigChannel+0x130>)
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800422e:	9901      	ldr	r1, [sp, #4]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004230:	4002      	ands	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004232:	20a0      	movs	r0, #160	; 0xa0
 8004234:	0209      	lsls	r1, r1, #8
 8004236:	0100      	lsls	r0, r0, #4
 8004238:	4001      	ands	r1, r0
 800423a:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800423c:	61de      	str	r6, [r3, #28]
  TIMx->CCER = tmpccer;
 800423e:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004240:	210c      	movs	r1, #12
 8004242:	69da      	ldr	r2, [r3, #28]
 8004244:	438a      	bics	r2, r1
 8004246:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004248:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800424a:	4315      	orrs	r5, r2
 800424c:	61dd      	str	r5, [r3, #28]
 800424e:	e7ad      	b.n	80041ac <HAL_TIM_IC_ConfigChannel+0x3c>
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004250:	6a1a      	ldr	r2, [r3, #32]
 8004252:	4f14      	ldr	r7, [pc, #80]	; (80042a4 <HAL_TIM_IC_ConfigChannel+0x134>)
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004254:	490e      	ldr	r1, [pc, #56]	; (8004290 <HAL_TIM_IC_ConfigChannel+0x120>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004256:	403a      	ands	r2, r7
 8004258:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800425a:	69df      	ldr	r7, [r3, #28]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800425c:	0236      	lsls	r6, r6, #8
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800425e:	400f      	ands	r7, r1
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004260:	433e      	orrs	r6, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004262:	4f0c      	ldr	r7, [pc, #48]	; (8004294 <HAL_TIM_IC_ConfigChannel+0x124>)
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004264:	0700      	lsls	r0, r0, #28
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004266:	403e      	ands	r6, r7
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004268:	0c00      	lsrs	r0, r0, #16
  tmpccer = TIMx->CCER;
 800426a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800426c:	4330      	orrs	r0, r6

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800426e:	4e0e      	ldr	r6, [pc, #56]	; (80042a8 <HAL_TIM_IC_ConfigChannel+0x138>)
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004270:	9901      	ldr	r1, [sp, #4]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004272:	4032      	ands	r2, r6
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004274:	26a0      	movs	r6, #160	; 0xa0
 8004276:	0309      	lsls	r1, r1, #12
 8004278:	0236      	lsls	r6, r6, #8
 800427a:	4031      	ands	r1, r6
 800427c:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800427e:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004280:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004282:	69da      	ldr	r2, [r3, #28]
 8004284:	4904      	ldr	r1, [pc, #16]	; (8004298 <HAL_TIM_IC_ConfigChannel+0x128>)
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004286:	022d      	lsls	r5, r5, #8
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004288:	400a      	ands	r2, r1
 800428a:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800428c:	69da      	ldr	r2, [r3, #28]
 800428e:	e7dc      	b.n	800424a <HAL_TIM_IC_ConfigChannel+0xda>
 8004290:	fffffcff 	.word	0xfffffcff
 8004294:	ffff0fff 	.word	0xffff0fff
 8004298:	fffff3ff 	.word	0xfffff3ff
 800429c:	fffffeff 	.word	0xfffffeff
 80042a0:	fffff5ff 	.word	0xfffff5ff
 80042a4:	ffffefff 	.word	0xffffefff
 80042a8:	ffff5fff 	.word	0xffff5fff

080042ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042ac:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042ae:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b0:	4d03      	ldr	r5, [pc, #12]	; (80042c0 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042b2:	430a      	orrs	r2, r1
 80042b4:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b6:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042b8:	4313      	orrs	r3, r2
 80042ba:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042bc:	6083      	str	r3, [r0, #8]
}
 80042be:	bd30      	pop	{r4, r5, pc}
 80042c0:	ffff00ff 	.word	0xffff00ff

080042c4 <HAL_TIM_ConfigClockSource>:
{
 80042c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80042c6:	0005      	movs	r5, r0
 80042c8:	2302      	movs	r3, #2
 80042ca:	353c      	adds	r5, #60	; 0x3c
 80042cc:	782a      	ldrb	r2, [r5, #0]
{
 80042ce:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80042d0:	0018      	movs	r0, r3
 80042d2:	2a01      	cmp	r2, #1
 80042d4:	d016      	beq.n	8004304 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 80042d6:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 80042d8:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 80042da:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80042dc:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 80042de:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80042e0:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 80042e2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042e4:	4a3f      	ldr	r2, [pc, #252]	; (80043e4 <HAL_TIM_ConfigClockSource+0x120>)
 80042e6:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80042e8:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80042ea:	680b      	ldr	r3, [r1, #0]
 80042ec:	2b40      	cmp	r3, #64	; 0x40
 80042ee:	d063      	beq.n	80043b8 <HAL_TIM_ConfigClockSource+0xf4>
 80042f0:	d814      	bhi.n	800431c <HAL_TIM_ConfigClockSource+0x58>
 80042f2:	2b10      	cmp	r3, #16
 80042f4:	d00b      	beq.n	800430e <HAL_TIM_ConfigClockSource+0x4a>
 80042f6:	d806      	bhi.n	8004306 <HAL_TIM_ConfigClockSource+0x42>
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d008      	beq.n	800430e <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 80042fc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80042fe:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004300:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8004302:	7028      	strb	r0, [r5, #0]
}
 8004304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8004306:	2b20      	cmp	r3, #32
 8004308:	d001      	beq.n	800430e <HAL_TIM_ConfigClockSource+0x4a>
 800430a:	2b30      	cmp	r3, #48	; 0x30
 800430c:	d1f6      	bne.n	80042fc <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr &= ~TIM_SMCR_TS;
 800430e:	4a36      	ldr	r2, [pc, #216]	; (80043e8 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = TIMx->SMCR;
 8004310:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004312:	4011      	ands	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004314:	2207      	movs	r2, #7
 8004316:	4313      	orrs	r3, r2
 8004318:	430b      	orrs	r3, r1
 800431a:	e019      	b.n	8004350 <HAL_TIM_ConfigClockSource+0x8c>
  switch (sClockSourceConfig->ClockSource)
 800431c:	2b60      	cmp	r3, #96	; 0x60
 800431e:	d034      	beq.n	800438a <HAL_TIM_ConfigClockSource+0xc6>
 8004320:	d818      	bhi.n	8004354 <HAL_TIM_ConfigClockSource+0x90>
 8004322:	2b50      	cmp	r3, #80	; 0x50
 8004324:	d1ea      	bne.n	80042fc <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004326:	684a      	ldr	r2, [r1, #4]
 8004328:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 800432a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800432c:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800432e:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004330:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004332:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004334:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004336:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004338:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800433a:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800433c:	240a      	movs	r4, #10
 800433e:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8004340:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8004342:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004344:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004346:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004348:	4a27      	ldr	r2, [pc, #156]	; (80043e8 <HAL_TIM_ConfigClockSource+0x124>)
 800434a:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800434c:	2357      	movs	r3, #87	; 0x57
 800434e:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8004350:	6083      	str	r3, [r0, #8]
 8004352:	e7d3      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8004354:	2b70      	cmp	r3, #112	; 0x70
 8004356:	d00d      	beq.n	8004374 <HAL_TIM_ConfigClockSource+0xb0>
 8004358:	2280      	movs	r2, #128	; 0x80
 800435a:	0192      	lsls	r2, r2, #6
 800435c:	4293      	cmp	r3, r2
 800435e:	d1cd      	bne.n	80042fc <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8004360:	68cb      	ldr	r3, [r1, #12]
 8004362:	684a      	ldr	r2, [r1, #4]
 8004364:	6889      	ldr	r1, [r1, #8]
 8004366:	f7ff ffa1 	bl	80042ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800436a:	2380      	movs	r3, #128	; 0x80
 800436c:	6822      	ldr	r2, [r4, #0]
 800436e:	01db      	lsls	r3, r3, #7
 8004370:	6891      	ldr	r1, [r2, #8]
 8004372:	e007      	b.n	8004384 <HAL_TIM_ConfigClockSource+0xc0>
      TIM_ETR_SetConfig(htim->Instance,
 8004374:	68cb      	ldr	r3, [r1, #12]
 8004376:	684a      	ldr	r2, [r1, #4]
 8004378:	6889      	ldr	r1, [r1, #8]
 800437a:	f7ff ff97 	bl	80042ac <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800437e:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8004380:	6822      	ldr	r2, [r4, #0]
 8004382:	6891      	ldr	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004384:	430b      	orrs	r3, r1
 8004386:	6093      	str	r3, [r2, #8]
      break;
 8004388:	e7b8      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x38>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800438a:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800438c:	684b      	ldr	r3, [r1, #4]
 800438e:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004390:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004392:	4f16      	ldr	r7, [pc, #88]	; (80043ec <HAL_TIM_ConfigClockSource+0x128>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004394:	43a1      	bics	r1, r4
 8004396:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004398:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800439a:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800439c:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800439e:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043a0:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 80043a2:	6a01      	ldr	r1, [r0, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043a4:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043a6:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 80043a8:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 80043aa:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80043ac:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80043ae:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80043b0:	4a0d      	ldr	r2, [pc, #52]	; (80043e8 <HAL_TIM_ConfigClockSource+0x124>)
 80043b2:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043b4:	2367      	movs	r3, #103	; 0x67
 80043b6:	e7ca      	b.n	800434e <HAL_TIM_ConfigClockSource+0x8a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b8:	684a      	ldr	r2, [r1, #4]
 80043ba:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80043bc:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043be:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043c0:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043c2:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043c4:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043c6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043c8:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043ca:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043cc:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ce:	240a      	movs	r4, #10
 80043d0:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80043d2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80043d4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80043d6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80043d8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80043da:	4a03      	ldr	r2, [pc, #12]	; (80043e8 <HAL_TIM_ConfigClockSource+0x124>)
 80043dc:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043de:	2347      	movs	r3, #71	; 0x47
 80043e0:	e7b5      	b.n	800434e <HAL_TIM_ConfigClockSource+0x8a>
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	ffce0088 	.word	0xffce0088
 80043e8:	ffcfff8f 	.word	0xffcfff8f
 80043ec:	ffff0fff 	.word	0xffff0fff

080043f0 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043f0:	231f      	movs	r3, #31
{
 80043f2:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043f4:	2401      	movs	r4, #1
 80043f6:	4019      	ands	r1, r3
 80043f8:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043fa:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 80043fc:	6a03      	ldr	r3, [r0, #32]
 80043fe:	43a3      	bics	r3, r4
 8004400:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004402:	6a03      	ldr	r3, [r0, #32]
 8004404:	431a      	orrs	r2, r3
 8004406:	6202      	str	r2, [r0, #32]
}
 8004408:	bd10      	pop	{r4, pc}
	...

0800440c <HAL_TIM_PWM_Start>:
{
 800440c:	b510      	push	{r4, lr}
 800440e:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004410:	2201      	movs	r2, #1
 8004412:	6800      	ldr	r0, [r0, #0]
 8004414:	f7ff ffec 	bl	80043f0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	4a10      	ldr	r2, [pc, #64]	; (800445c <HAL_TIM_PWM_Start+0x50>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d016      	beq.n	800444e <HAL_TIM_PWM_Start+0x42>
 8004420:	4a0f      	ldr	r2, [pc, #60]	; (8004460 <HAL_TIM_PWM_Start+0x54>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d013      	beq.n	800444e <HAL_TIM_PWM_Start+0x42>
 8004426:	4a0f      	ldr	r2, [pc, #60]	; (8004464 <HAL_TIM_PWM_Start+0x58>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d010      	beq.n	800444e <HAL_TIM_PWM_Start+0x42>
 800442c:	4a0e      	ldr	r2, [pc, #56]	; (8004468 <HAL_TIM_PWM_Start+0x5c>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00d      	beq.n	800444e <HAL_TIM_PWM_Start+0x42>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	490d      	ldr	r1, [pc, #52]	; (800446c <HAL_TIM_PWM_Start+0x60>)
 8004436:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004438:	2a06      	cmp	r2, #6
 800443a:	d006      	beq.n	800444a <HAL_TIM_PWM_Start+0x3e>
 800443c:	3907      	subs	r1, #7
 800443e:	428a      	cmp	r2, r1
 8004440:	d003      	beq.n	800444a <HAL_TIM_PWM_Start+0x3e>
    __HAL_TIM_ENABLE(htim);
 8004442:	2201      	movs	r2, #1
 8004444:	6819      	ldr	r1, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	601a      	str	r2, [r3, #0]
}
 800444a:	2000      	movs	r0, #0
 800444c:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 800444e:	2280      	movs	r2, #128	; 0x80
 8004450:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004452:	0212      	lsls	r2, r2, #8
 8004454:	430a      	orrs	r2, r1
 8004456:	645a      	str	r2, [r3, #68]	; 0x44
 8004458:	e7eb      	b.n	8004432 <HAL_TIM_PWM_Start+0x26>
 800445a:	46c0      	nop			; (mov r8, r8)
 800445c:	40012c00 	.word	0x40012c00
 8004460:	40014000 	.word	0x40014000
 8004464:	40014400 	.word	0x40014400
 8004468:	40014800 	.word	0x40014800
 800446c:	00010007 	.word	0x00010007

08004470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004470:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004472:	0004      	movs	r4, r0
 8004474:	2202      	movs	r2, #2
 8004476:	343c      	adds	r4, #60	; 0x3c
 8004478:	7825      	ldrb	r5, [r4, #0]
{
 800447a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 800447c:	0010      	movs	r0, r2
 800447e:	2d01      	cmp	r5, #1
 8004480:	d01a      	beq.n	80044b8 <HAL_TIMEx_MasterConfigSynchronization+0x48>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004482:	001d      	movs	r5, r3
 8004484:	353d      	adds	r5, #61	; 0x3d
 8004486:	702a      	strb	r2, [r5, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004488:	4e0c      	ldr	r6, [pc, #48]	; (80044bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
  tmpcr2 = htim->Instance->CR2;
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800448e:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004490:	42b2      	cmp	r2, r6
 8004492:	d103      	bne.n	800449c <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004494:	4e0a      	ldr	r6, [pc, #40]	; (80044c0 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8004496:	4033      	ands	r3, r6
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004498:	684e      	ldr	r6, [r1, #4]
 800449a:	4333      	orrs	r3, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800449c:	2670      	movs	r6, #112	; 0x70
 800449e:	43b3      	bics	r3, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044a0:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044a2:	6889      	ldr	r1, [r1, #8]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044a4:	4333      	orrs	r3, r6
  tmpsmcr &= ~TIM_SMCR_MSM;
 80044a6:	2680      	movs	r6, #128	; 0x80
 80044a8:	43b0      	bics	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044aa:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ac:	4301      	orrs	r1, r0

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044ae:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80044b0:	2000      	movs	r0, #0
  htim->Instance->SMCR = tmpsmcr;
 80044b2:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80044b4:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80044b6:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80044b8:	bd70      	pop	{r4, r5, r6, pc}
 80044ba:	46c0      	nop			; (mov r8, r8)
 80044bc:	40012c00 	.word	0x40012c00
 80044c0:	ff0fffff 	.word	0xff0fffff

080044c4 <HAL_TIMEx_CommutCallback>:
 80044c4:	4770      	bx	lr

080044c6 <HAL_TIMEx_BreakCallback>:
 80044c6:	4770      	bx	lr

080044c8 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044c8:	4770      	bx	lr
	...

080044cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044cc:	b570      	push	{r4, r5, r6, lr}
 80044ce:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044d0:	6902      	ldr	r2, [r0, #16]
 80044d2:	6883      	ldr	r3, [r0, #8]
 80044d4:	69c1      	ldr	r1, [r0, #28]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	6942      	ldr	r2, [r0, #20]
  tmpreg |= (uint32_t)huart->FifoMode;
 80044da:	6e65      	ldr	r5, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044dc:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044de:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044e0:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044e2:	6810      	ldr	r0, [r2, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 80044e4:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044e6:	4d9f      	ldr	r5, [pc, #636]	; (8004764 <UART_SetConfig+0x298>)
 80044e8:	4028      	ands	r0, r5
 80044ea:	4303      	orrs	r3, r0
 80044ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ee:	6853      	ldr	r3, [r2, #4]
 80044f0:	489d      	ldr	r0, [pc, #628]	; (8004768 <UART_SetConfig+0x29c>)
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044f2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044f4:	4003      	ands	r3, r0
 80044f6:	68e0      	ldr	r0, [r4, #12]
 80044f8:	4303      	orrs	r3, r0
 80044fa:	6053      	str	r3, [r2, #4]
    tmpreg |= huart->Init.OneBitSampling;
 80044fc:	69a3      	ldr	r3, [r4, #24]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044fe:	6890      	ldr	r0, [r2, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8004500:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004502:	4d9a      	ldr	r5, [pc, #616]	; (800476c <UART_SetConfig+0x2a0>)
 8004504:	4028      	ands	r0, r5

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004506:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004508:	4303      	orrs	r3, r0
 800450a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800450c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800450e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004510:	43a8      	bics	r0, r5
 8004512:	4318      	orrs	r0, r3
 8004514:	62d0      	str	r0, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004516:	4896      	ldr	r0, [pc, #600]	; (8004770 <UART_SetConfig+0x2a4>)
 8004518:	4282      	cmp	r2, r0
 800451a:	d113      	bne.n	8004544 <UART_SetConfig+0x78>
 800451c:	2003      	movs	r0, #3
 800451e:	4a95      	ldr	r2, [pc, #596]	; (8004774 <UART_SetConfig+0x2a8>)
 8004520:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004522:	4002      	ands	r2, r0
 8004524:	4894      	ldr	r0, [pc, #592]	; (8004778 <UART_SetConfig+0x2ac>)
 8004526:	5c80      	ldrb	r0, [r0, r2]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004528:	2280      	movs	r2, #128	; 0x80
 800452a:	0212      	lsls	r2, r2, #8
 800452c:	4291      	cmp	r1, r2
 800452e:	d100      	bne.n	8004532 <UART_SetConfig+0x66>
 8004530:	e1b7      	b.n	80048a2 <UART_SetConfig+0x3d6>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8004532:	2808      	cmp	r0, #8
 8004534:	d817      	bhi.n	8004566 <UART_SetConfig+0x9a>
 8004536:	f7fb fdf5 	bl	8000124 <__gnu_thumb1_case_uqi>
 800453a:	1684      	.short	0x1684
 800453c:	16f216be 	.word	0x16f216be
 8004540:	1616      	.short	0x1616
 8004542:	f5          	.byte	0xf5
 8004543:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004544:	488d      	ldr	r0, [pc, #564]	; (800477c <UART_SetConfig+0x2b0>)
 8004546:	4282      	cmp	r2, r0
 8004548:	d105      	bne.n	8004556 <UART_SetConfig+0x8a>
 800454a:	200c      	movs	r0, #12
 800454c:	4a89      	ldr	r2, [pc, #548]	; (8004774 <UART_SetConfig+0x2a8>)
 800454e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004550:	4002      	ands	r2, r0
 8004552:	488b      	ldr	r0, [pc, #556]	; (8004780 <UART_SetConfig+0x2b4>)
 8004554:	e7e7      	b.n	8004526 <UART_SetConfig+0x5a>
 8004556:	4b8b      	ldr	r3, [pc, #556]	; (8004784 <UART_SetConfig+0x2b8>)
 8004558:	429a      	cmp	r2, r3
 800455a:	d100      	bne.n	800455e <UART_SetConfig+0x92>
 800455c:	e150      	b.n	8004800 <UART_SetConfig+0x334>
 800455e:	4b8a      	ldr	r3, [pc, #552]	; (8004788 <UART_SetConfig+0x2bc>)
 8004560:	429a      	cmp	r2, r3
 8004562:	d100      	bne.n	8004566 <UART_SetConfig+0x9a>
 8004564:	e14c      	b.n	8004800 <UART_SetConfig+0x334>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 8004566:	2001      	movs	r0, #1
 8004568:	e191      	b.n	800488e <UART_SetConfig+0x3c2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800456a:	2b00      	cmp	r3, #0
 800456c:	d02f      	beq.n	80045ce <UART_SetConfig+0x102>
 800456e:	2b01      	cmp	r3, #1
 8004570:	d019      	beq.n	80045a6 <UART_SetConfig+0xda>
 8004572:	2b02      	cmp	r3, #2
 8004574:	d019      	beq.n	80045aa <UART_SetConfig+0xde>
 8004576:	2b03      	cmp	r3, #3
 8004578:	d019      	beq.n	80045ae <UART_SetConfig+0xe2>
 800457a:	2b04      	cmp	r3, #4
 800457c:	d019      	beq.n	80045b2 <UART_SetConfig+0xe6>
 800457e:	2b05      	cmp	r3, #5
 8004580:	d019      	beq.n	80045b6 <UART_SetConfig+0xea>
 8004582:	2b06      	cmp	r3, #6
 8004584:	d019      	beq.n	80045ba <UART_SetConfig+0xee>
 8004586:	2b07      	cmp	r3, #7
 8004588:	d019      	beq.n	80045be <UART_SetConfig+0xf2>
 800458a:	2b08      	cmp	r3, #8
 800458c:	d019      	beq.n	80045c2 <UART_SetConfig+0xf6>
 800458e:	2b09      	cmp	r3, #9
 8004590:	d019      	beq.n	80045c6 <UART_SetConfig+0xfa>
 8004592:	2b0a      	cmp	r3, #10
 8004594:	d019      	beq.n	80045ca <UART_SetConfig+0xfe>
 8004596:	2b0b      	cmp	r3, #11
 8004598:	d119      	bne.n	80045ce <UART_SetConfig+0x102>
 800459a:	487c      	ldr	r0, [pc, #496]	; (800478c <UART_SetConfig+0x2c0>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800459c:	6863      	ldr	r3, [r4, #4]
 800459e:	6861      	ldr	r1, [r4, #4]
 80045a0:	085b      	lsrs	r3, r3, #1
 80045a2:	1818      	adds	r0, r3, r0
 80045a4:	e160      	b.n	8004868 <UART_SetConfig+0x39c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045a6:	487a      	ldr	r0, [pc, #488]	; (8004790 <UART_SetConfig+0x2c4>)
 80045a8:	e7f8      	b.n	800459c <UART_SetConfig+0xd0>
 80045aa:	487a      	ldr	r0, [pc, #488]	; (8004794 <UART_SetConfig+0x2c8>)
 80045ac:	e7f6      	b.n	800459c <UART_SetConfig+0xd0>
 80045ae:	487a      	ldr	r0, [pc, #488]	; (8004798 <UART_SetConfig+0x2cc>)
 80045b0:	e7f4      	b.n	800459c <UART_SetConfig+0xd0>
 80045b2:	487a      	ldr	r0, [pc, #488]	; (800479c <UART_SetConfig+0x2d0>)
 80045b4:	e7f2      	b.n	800459c <UART_SetConfig+0xd0>
 80045b6:	487a      	ldr	r0, [pc, #488]	; (80047a0 <UART_SetConfig+0x2d4>)
 80045b8:	e7f0      	b.n	800459c <UART_SetConfig+0xd0>
 80045ba:	487a      	ldr	r0, [pc, #488]	; (80047a4 <UART_SetConfig+0x2d8>)
 80045bc:	e7ee      	b.n	800459c <UART_SetConfig+0xd0>
 80045be:	487a      	ldr	r0, [pc, #488]	; (80047a8 <UART_SetConfig+0x2dc>)
 80045c0:	e7ec      	b.n	800459c <UART_SetConfig+0xd0>
 80045c2:	487a      	ldr	r0, [pc, #488]	; (80047ac <UART_SetConfig+0x2e0>)
 80045c4:	e7ea      	b.n	800459c <UART_SetConfig+0xd0>
 80045c6:	487a      	ldr	r0, [pc, #488]	; (80047b0 <UART_SetConfig+0x2e4>)
 80045c8:	e7e8      	b.n	800459c <UART_SetConfig+0xd0>
 80045ca:	487a      	ldr	r0, [pc, #488]	; (80047b4 <UART_SetConfig+0x2e8>)
 80045cc:	e7e6      	b.n	800459c <UART_SetConfig+0xd0>
 80045ce:	487a      	ldr	r0, [pc, #488]	; (80047b8 <UART_SetConfig+0x2ec>)
 80045d0:	e7e4      	b.n	800459c <UART_SetConfig+0xd0>
        pclk = HAL_RCC_GetSysClockFreq();
 80045d2:	f7fe fc95 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 80045d6:	e11a      	b.n	800480e <UART_SetConfig+0x342>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d018      	beq.n	800460e <UART_SetConfig+0x142>
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d019      	beq.n	8004614 <UART_SetConfig+0x148>
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d01a      	beq.n	800461a <UART_SetConfig+0x14e>
 80045e4:	2b03      	cmp	r3, #3
 80045e6:	d01b      	beq.n	8004620 <UART_SetConfig+0x154>
 80045e8:	2b04      	cmp	r3, #4
 80045ea:	d01b      	beq.n	8004624 <UART_SetConfig+0x158>
 80045ec:	2b05      	cmp	r3, #5
 80045ee:	d01c      	beq.n	800462a <UART_SetConfig+0x15e>
 80045f0:	2b06      	cmp	r3, #6
 80045f2:	d01c      	beq.n	800462e <UART_SetConfig+0x162>
 80045f4:	2080      	movs	r0, #128	; 0x80
 80045f6:	2b07      	cmp	r3, #7
 80045f8:	d01b      	beq.n	8004632 <UART_SetConfig+0x166>
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d01b      	beq.n	8004636 <UART_SetConfig+0x16a>
 80045fe:	2b09      	cmp	r3, #9
 8004600:	d01b      	beq.n	800463a <UART_SetConfig+0x16e>
 8004602:	2b0a      	cmp	r3, #10
 8004604:	d01b      	beq.n	800463e <UART_SetConfig+0x172>
 8004606:	2b0b      	cmp	r3, #11
 8004608:	d102      	bne.n	8004610 <UART_SetConfig+0x144>
 800460a:	0040      	lsls	r0, r0, #1
 800460c:	e7c6      	b.n	800459c <UART_SetConfig+0xd0>
 800460e:	2080      	movs	r0, #128	; 0x80
 8004610:	0240      	lsls	r0, r0, #9
 8004612:	e7c3      	b.n	800459c <UART_SetConfig+0xd0>
 8004614:	2080      	movs	r0, #128	; 0x80
 8004616:	0200      	lsls	r0, r0, #8
 8004618:	e7c0      	b.n	800459c <UART_SetConfig+0xd0>
 800461a:	2080      	movs	r0, #128	; 0x80
 800461c:	01c0      	lsls	r0, r0, #7
 800461e:	e7bd      	b.n	800459c <UART_SetConfig+0xd0>
 8004620:	4866      	ldr	r0, [pc, #408]	; (80047bc <UART_SetConfig+0x2f0>)
 8004622:	e7bb      	b.n	800459c <UART_SetConfig+0xd0>
 8004624:	2080      	movs	r0, #128	; 0x80
 8004626:	0180      	lsls	r0, r0, #6
 8004628:	e7b8      	b.n	800459c <UART_SetConfig+0xd0>
 800462a:	4865      	ldr	r0, [pc, #404]	; (80047c0 <UART_SetConfig+0x2f4>)
 800462c:	e7b6      	b.n	800459c <UART_SetConfig+0xd0>
 800462e:	4865      	ldr	r0, [pc, #404]	; (80047c4 <UART_SetConfig+0x2f8>)
 8004630:	e7b4      	b.n	800459c <UART_SetConfig+0xd0>
 8004632:	0140      	lsls	r0, r0, #5
 8004634:	e7b2      	b.n	800459c <UART_SetConfig+0xd0>
 8004636:	0100      	lsls	r0, r0, #4
 8004638:	e7b0      	b.n	800459c <UART_SetConfig+0xd0>
 800463a:	00c0      	lsls	r0, r0, #3
 800463c:	e7ae      	b.n	800459c <UART_SetConfig+0xd0>
 800463e:	0080      	lsls	r0, r0, #2
 8004640:	e7ac      	b.n	800459c <UART_SetConfig+0xd0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004642:	f7fe fd51 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004648:	2101      	movs	r1, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d021      	beq.n	8004692 <UART_SetConfig+0x1c6>
 800464e:	1849      	adds	r1, r1, r1
 8004650:	2b01      	cmp	r3, #1
 8004652:	d01e      	beq.n	8004692 <UART_SetConfig+0x1c6>
 8004654:	3102      	adds	r1, #2
 8004656:	2b02      	cmp	r3, #2
 8004658:	d01b      	beq.n	8004692 <UART_SetConfig+0x1c6>
 800465a:	3102      	adds	r1, #2
 800465c:	2b03      	cmp	r3, #3
 800465e:	d018      	beq.n	8004692 <UART_SetConfig+0x1c6>
 8004660:	3102      	adds	r1, #2
 8004662:	2b04      	cmp	r3, #4
 8004664:	d015      	beq.n	8004692 <UART_SetConfig+0x1c6>
 8004666:	3102      	adds	r1, #2
 8004668:	2b05      	cmp	r3, #5
 800466a:	d012      	beq.n	8004692 <UART_SetConfig+0x1c6>
 800466c:	3102      	adds	r1, #2
 800466e:	2b06      	cmp	r3, #6
 8004670:	d00f      	beq.n	8004692 <UART_SetConfig+0x1c6>
 8004672:	3104      	adds	r1, #4
 8004674:	2b07      	cmp	r3, #7
 8004676:	d00c      	beq.n	8004692 <UART_SetConfig+0x1c6>
 8004678:	3110      	adds	r1, #16
 800467a:	2b08      	cmp	r3, #8
 800467c:	d009      	beq.n	8004692 <UART_SetConfig+0x1c6>
 800467e:	3120      	adds	r1, #32
 8004680:	2b09      	cmp	r3, #9
 8004682:	d006      	beq.n	8004692 <UART_SetConfig+0x1c6>
 8004684:	3140      	adds	r1, #64	; 0x40
 8004686:	2b0a      	cmp	r3, #10
 8004688:	d003      	beq.n	8004692 <UART_SetConfig+0x1c6>
 800468a:	397f      	subs	r1, #127	; 0x7f
 800468c:	2b0b      	cmp	r3, #11
 800468e:	d100      	bne.n	8004692 <UART_SetConfig+0x1c6>
 8004690:	31ff      	adds	r1, #255	; 0xff
 8004692:	6865      	ldr	r5, [r4, #4]
 8004694:	f7fb fd64 	bl	8000160 <__udivsi3>
 8004698:	0029      	movs	r1, r5
 800469a:	086b      	lsrs	r3, r5, #1
 800469c:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800469e:	f7fb fd5f 	bl	8000160 <__udivsi3>
 80046a2:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046a4:	0003      	movs	r3, r0
 80046a6:	4a48      	ldr	r2, [pc, #288]	; (80047c8 <UART_SetConfig+0x2fc>)
 80046a8:	3b10      	subs	r3, #16
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d900      	bls.n	80046b0 <UART_SetConfig+0x1e4>
 80046ae:	e75a      	b.n	8004566 <UART_SetConfig+0x9a>
      huart->Instance->BRR = usartdiv;
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	60d8      	str	r0, [r3, #12]
 80046b4:	e0ea      	b.n	800488c <UART_SetConfig+0x3c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d02f      	beq.n	800471a <UART_SetConfig+0x24e>
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d019      	beq.n	80046f2 <UART_SetConfig+0x226>
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d019      	beq.n	80046f6 <UART_SetConfig+0x22a>
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d019      	beq.n	80046fa <UART_SetConfig+0x22e>
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d019      	beq.n	80046fe <UART_SetConfig+0x232>
 80046ca:	2b05      	cmp	r3, #5
 80046cc:	d019      	beq.n	8004702 <UART_SetConfig+0x236>
 80046ce:	2b06      	cmp	r3, #6
 80046d0:	d019      	beq.n	8004706 <UART_SetConfig+0x23a>
 80046d2:	2b07      	cmp	r3, #7
 80046d4:	d019      	beq.n	800470a <UART_SetConfig+0x23e>
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d019      	beq.n	800470e <UART_SetConfig+0x242>
 80046da:	2b09      	cmp	r3, #9
 80046dc:	d019      	beq.n	8004712 <UART_SetConfig+0x246>
 80046de:	2b0a      	cmp	r3, #10
 80046e0:	d019      	beq.n	8004716 <UART_SetConfig+0x24a>
 80046e2:	2b0b      	cmp	r3, #11
 80046e4:	d119      	bne.n	800471a <UART_SetConfig+0x24e>
 80046e6:	4839      	ldr	r0, [pc, #228]	; (80047cc <UART_SetConfig+0x300>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046e8:	6863      	ldr	r3, [r4, #4]
 80046ea:	6861      	ldr	r1, [r4, #4]
 80046ec:	085b      	lsrs	r3, r3, #1
 80046ee:	1818      	adds	r0, r3, r0
 80046f0:	e7d5      	b.n	800469e <UART_SetConfig+0x1d2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046f2:	4828      	ldr	r0, [pc, #160]	; (8004794 <UART_SetConfig+0x2c8>)
 80046f4:	e7f8      	b.n	80046e8 <UART_SetConfig+0x21c>
 80046f6:	4829      	ldr	r0, [pc, #164]	; (800479c <UART_SetConfig+0x2d0>)
 80046f8:	e7f6      	b.n	80046e8 <UART_SetConfig+0x21c>
 80046fa:	482a      	ldr	r0, [pc, #168]	; (80047a4 <UART_SetConfig+0x2d8>)
 80046fc:	e7f4      	b.n	80046e8 <UART_SetConfig+0x21c>
 80046fe:	482a      	ldr	r0, [pc, #168]	; (80047a8 <UART_SetConfig+0x2dc>)
 8004700:	e7f2      	b.n	80046e8 <UART_SetConfig+0x21c>
 8004702:	4833      	ldr	r0, [pc, #204]	; (80047d0 <UART_SetConfig+0x304>)
 8004704:	e7f0      	b.n	80046e8 <UART_SetConfig+0x21c>
 8004706:	4833      	ldr	r0, [pc, #204]	; (80047d4 <UART_SetConfig+0x308>)
 8004708:	e7ee      	b.n	80046e8 <UART_SetConfig+0x21c>
 800470a:	4828      	ldr	r0, [pc, #160]	; (80047ac <UART_SetConfig+0x2e0>)
 800470c:	e7ec      	b.n	80046e8 <UART_SetConfig+0x21c>
 800470e:	4828      	ldr	r0, [pc, #160]	; (80047b0 <UART_SetConfig+0x2e4>)
 8004710:	e7ea      	b.n	80046e8 <UART_SetConfig+0x21c>
 8004712:	4828      	ldr	r0, [pc, #160]	; (80047b4 <UART_SetConfig+0x2e8>)
 8004714:	e7e8      	b.n	80046e8 <UART_SetConfig+0x21c>
 8004716:	481d      	ldr	r0, [pc, #116]	; (800478c <UART_SetConfig+0x2c0>)
 8004718:	e7e6      	b.n	80046e8 <UART_SetConfig+0x21c>
 800471a:	481d      	ldr	r0, [pc, #116]	; (8004790 <UART_SetConfig+0x2c4>)
 800471c:	e7e4      	b.n	80046e8 <UART_SetConfig+0x21c>
        pclk = HAL_RCC_GetSysClockFreq();
 800471e:	f7fe fbef 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8004722:	e790      	b.n	8004646 <UART_SetConfig+0x17a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004724:	2b00      	cmp	r3, #0
 8004726:	d018      	beq.n	800475a <UART_SetConfig+0x28e>
 8004728:	2b01      	cmp	r3, #1
 800472a:	d018      	beq.n	800475e <UART_SetConfig+0x292>
 800472c:	2b02      	cmp	r3, #2
 800472e:	d053      	beq.n	80047d8 <UART_SetConfig+0x30c>
 8004730:	2b03      	cmp	r3, #3
 8004732:	d054      	beq.n	80047de <UART_SetConfig+0x312>
 8004734:	2b04      	cmp	r3, #4
 8004736:	d054      	beq.n	80047e2 <UART_SetConfig+0x316>
 8004738:	2b05      	cmp	r3, #5
 800473a:	d055      	beq.n	80047e8 <UART_SetConfig+0x31c>
 800473c:	2b06      	cmp	r3, #6
 800473e:	d055      	beq.n	80047ec <UART_SetConfig+0x320>
 8004740:	2080      	movs	r0, #128	; 0x80
 8004742:	2b07      	cmp	r3, #7
 8004744:	d054      	beq.n	80047f0 <UART_SetConfig+0x324>
 8004746:	2b08      	cmp	r3, #8
 8004748:	d054      	beq.n	80047f4 <UART_SetConfig+0x328>
 800474a:	2b09      	cmp	r3, #9
 800474c:	d054      	beq.n	80047f8 <UART_SetConfig+0x32c>
 800474e:	2b0a      	cmp	r3, #10
 8004750:	d054      	beq.n	80047fc <UART_SetConfig+0x330>
 8004752:	2b0b      	cmp	r3, #11
 8004754:	d0c8      	beq.n	80046e8 <UART_SetConfig+0x21c>
 8004756:	0200      	lsls	r0, r0, #8
 8004758:	e7c6      	b.n	80046e8 <UART_SetConfig+0x21c>
 800475a:	2080      	movs	r0, #128	; 0x80
 800475c:	e7fb      	b.n	8004756 <UART_SetConfig+0x28a>
 800475e:	2080      	movs	r0, #128	; 0x80
 8004760:	01c0      	lsls	r0, r0, #7
 8004762:	e7c1      	b.n	80046e8 <UART_SetConfig+0x21c>
 8004764:	cfff69f3 	.word	0xcfff69f3
 8004768:	ffffcfff 	.word	0xffffcfff
 800476c:	11fff4ff 	.word	0x11fff4ff
 8004770:	40013800 	.word	0x40013800
 8004774:	40021000 	.word	0x40021000
 8004778:	0800dec0 	.word	0x0800dec0
 800477c:	40004400 	.word	0x40004400
 8004780:	0800dec4 	.word	0x0800dec4
 8004784:	40004800 	.word	0x40004800
 8004788:	40004c00 	.word	0x40004c00
 800478c:	0001e848 	.word	0x0001e848
 8004790:	00f42400 	.word	0x00f42400
 8004794:	007a1200 	.word	0x007a1200
 8004798:	00516154 	.word	0x00516154
 800479c:	003d0900 	.word	0x003d0900
 80047a0:	0030d400 	.word	0x0030d400
 80047a4:	0028b0aa 	.word	0x0028b0aa
 80047a8:	001e8480 	.word	0x001e8480
 80047ac:	000f4240 	.word	0x000f4240
 80047b0:	0007a120 	.word	0x0007a120
 80047b4:	0003d090 	.word	0x0003d090
 80047b8:	01e84800 	.word	0x01e84800
 80047bc:	00002aaa 	.word	0x00002aaa
 80047c0:	00001998 	.word	0x00001998
 80047c4:	00001554 	.word	0x00001554
 80047c8:	0000ffef 	.word	0x0000ffef
 80047cc:	0000f424 	.word	0x0000f424
 80047d0:	00186a00 	.word	0x00186a00
 80047d4:	00145855 	.word	0x00145855
 80047d8:	2080      	movs	r0, #128	; 0x80
 80047da:	0180      	lsls	r0, r0, #6
 80047dc:	e784      	b.n	80046e8 <UART_SetConfig+0x21c>
 80047de:	4838      	ldr	r0, [pc, #224]	; (80048c0 <UART_SetConfig+0x3f4>)
 80047e0:	e782      	b.n	80046e8 <UART_SetConfig+0x21c>
 80047e2:	2080      	movs	r0, #128	; 0x80
 80047e4:	0140      	lsls	r0, r0, #5
 80047e6:	e77f      	b.n	80046e8 <UART_SetConfig+0x21c>
 80047e8:	4836      	ldr	r0, [pc, #216]	; (80048c4 <UART_SetConfig+0x3f8>)
 80047ea:	e77d      	b.n	80046e8 <UART_SetConfig+0x21c>
 80047ec:	4836      	ldr	r0, [pc, #216]	; (80048c8 <UART_SetConfig+0x3fc>)
 80047ee:	e77b      	b.n	80046e8 <UART_SetConfig+0x21c>
 80047f0:	0100      	lsls	r0, r0, #4
 80047f2:	e779      	b.n	80046e8 <UART_SetConfig+0x21c>
 80047f4:	00c0      	lsls	r0, r0, #3
 80047f6:	e777      	b.n	80046e8 <UART_SetConfig+0x21c>
 80047f8:	0080      	lsls	r0, r0, #2
 80047fa:	e775      	b.n	80046e8 <UART_SetConfig+0x21c>
 80047fc:	0040      	lsls	r0, r0, #1
 80047fe:	e773      	b.n	80046e8 <UART_SetConfig+0x21c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004800:	2380      	movs	r3, #128	; 0x80
 8004802:	021b      	lsls	r3, r3, #8
 8004804:	4299      	cmp	r1, r3
 8004806:	d000      	beq.n	800480a <UART_SetConfig+0x33e>
 8004808:	e71b      	b.n	8004642 <UART_SetConfig+0x176>
        pclk = HAL_RCC_GetPCLK1Freq();
 800480a:	f7fe fc6d 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800480e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004810:	2101      	movs	r1, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d021      	beq.n	800485a <UART_SetConfig+0x38e>
 8004816:	1849      	adds	r1, r1, r1
 8004818:	2b01      	cmp	r3, #1
 800481a:	d01e      	beq.n	800485a <UART_SetConfig+0x38e>
 800481c:	3102      	adds	r1, #2
 800481e:	2b02      	cmp	r3, #2
 8004820:	d01b      	beq.n	800485a <UART_SetConfig+0x38e>
 8004822:	3102      	adds	r1, #2
 8004824:	2b03      	cmp	r3, #3
 8004826:	d018      	beq.n	800485a <UART_SetConfig+0x38e>
 8004828:	3102      	adds	r1, #2
 800482a:	2b04      	cmp	r3, #4
 800482c:	d015      	beq.n	800485a <UART_SetConfig+0x38e>
 800482e:	3102      	adds	r1, #2
 8004830:	2b05      	cmp	r3, #5
 8004832:	d012      	beq.n	800485a <UART_SetConfig+0x38e>
 8004834:	3102      	adds	r1, #2
 8004836:	2b06      	cmp	r3, #6
 8004838:	d00f      	beq.n	800485a <UART_SetConfig+0x38e>
 800483a:	3104      	adds	r1, #4
 800483c:	2b07      	cmp	r3, #7
 800483e:	d00c      	beq.n	800485a <UART_SetConfig+0x38e>
 8004840:	3110      	adds	r1, #16
 8004842:	2b08      	cmp	r3, #8
 8004844:	d009      	beq.n	800485a <UART_SetConfig+0x38e>
 8004846:	3120      	adds	r1, #32
 8004848:	2b09      	cmp	r3, #9
 800484a:	d006      	beq.n	800485a <UART_SetConfig+0x38e>
 800484c:	3140      	adds	r1, #64	; 0x40
 800484e:	2b0a      	cmp	r3, #10
 8004850:	d003      	beq.n	800485a <UART_SetConfig+0x38e>
 8004852:	397f      	subs	r1, #127	; 0x7f
 8004854:	2b0b      	cmp	r3, #11
 8004856:	d100      	bne.n	800485a <UART_SetConfig+0x38e>
 8004858:	31ff      	adds	r1, #255	; 0xff
 800485a:	f7fb fc81 	bl	8000160 <__udivsi3>
 800485e:	6865      	ldr	r5, [r4, #4]
 8004860:	0040      	lsls	r0, r0, #1
 8004862:	0029      	movs	r1, r5
 8004864:	086b      	lsrs	r3, r5, #1
 8004866:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004868:	f7fb fc7a 	bl	8000160 <__udivsi3>
 800486c:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800486e:	0003      	movs	r3, r0
 8004870:	4a16      	ldr	r2, [pc, #88]	; (80048cc <UART_SetConfig+0x400>)
 8004872:	3b10      	subs	r3, #16
 8004874:	4293      	cmp	r3, r2
 8004876:	d900      	bls.n	800487a <UART_SetConfig+0x3ae>
 8004878:	e675      	b.n	8004566 <UART_SetConfig+0x9a>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800487a:	230f      	movs	r3, #15
 800487c:	0002      	movs	r2, r0
 800487e:	439a      	bics	r2, r3
 8004880:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004882:	0700      	lsls	r0, r0, #28
      huart->Instance->BRR = brrtemp;
 8004884:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004886:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 8004888:	4318      	orrs	r0, r3
 800488a:	60d0      	str	r0, [r2, #12]
 800488c:	2000      	movs	r0, #0
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800488e:	0022      	movs	r2, r4
 8004890:	2301      	movs	r3, #1
 8004892:	326a      	adds	r2, #106	; 0x6a
 8004894:	8013      	strh	r3, [r2, #0]
  huart->NbRxDataToProcess = 1;
 8004896:	3a02      	subs	r2, #2
 8004898:	8013      	strh	r3, [r2, #0]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800489a:	2300      	movs	r3, #0
 800489c:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 800489e:	6723      	str	r3, [r4, #112]	; 0x70

  return ret;
}
 80048a0:	bd70      	pop	{r4, r5, r6, pc}
    switch (clocksource)
 80048a2:	2808      	cmp	r0, #8
 80048a4:	d900      	bls.n	80048a8 <UART_SetConfig+0x3dc>
 80048a6:	e65e      	b.n	8004566 <UART_SetConfig+0x9a>
 80048a8:	f7fb fc46 	bl	8000138 <__gnu_thumb1_case_shi>
 80048ac:	fe5dffaf 	.word	0xfe5dffaf
 80048b0:	fe5dfe5f 	.word	0xfe5dfe5f
 80048b4:	fe5dfe93 	.word	0xfe5dfe93
 80048b8:	fe5dfe5d 	.word	0xfe5dfe5d
 80048bc:	fe96      	.short	0xfe96
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	00001555 	.word	0x00001555
 80048c4:	00000ccc 	.word	0x00000ccc
 80048c8:	00000aaa 	.word	0x00000aaa
 80048cc:	0000ffef 	.word	0x0000ffef

080048d0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 80048d2:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048d4:	07da      	lsls	r2, r3, #31
 80048d6:	d506      	bpl.n	80048e6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048d8:	6801      	ldr	r1, [r0, #0]
 80048da:	4c28      	ldr	r4, [pc, #160]	; (800497c <UART_AdvFeatureConfig+0xac>)
 80048dc:	684a      	ldr	r2, [r1, #4]
 80048de:	4022      	ands	r2, r4
 80048e0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80048e2:	4322      	orrs	r2, r4
 80048e4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048e6:	079a      	lsls	r2, r3, #30
 80048e8:	d506      	bpl.n	80048f8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048ea:	6801      	ldr	r1, [r0, #0]
 80048ec:	4c24      	ldr	r4, [pc, #144]	; (8004980 <UART_AdvFeatureConfig+0xb0>)
 80048ee:	684a      	ldr	r2, [r1, #4]
 80048f0:	4022      	ands	r2, r4
 80048f2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80048f4:	4322      	orrs	r2, r4
 80048f6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048f8:	075a      	lsls	r2, r3, #29
 80048fa:	d506      	bpl.n	800490a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048fc:	6801      	ldr	r1, [r0, #0]
 80048fe:	4c21      	ldr	r4, [pc, #132]	; (8004984 <UART_AdvFeatureConfig+0xb4>)
 8004900:	684a      	ldr	r2, [r1, #4]
 8004902:	4022      	ands	r2, r4
 8004904:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004906:	4322      	orrs	r2, r4
 8004908:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800490a:	071a      	lsls	r2, r3, #28
 800490c:	d506      	bpl.n	800491c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800490e:	6801      	ldr	r1, [r0, #0]
 8004910:	4c1d      	ldr	r4, [pc, #116]	; (8004988 <UART_AdvFeatureConfig+0xb8>)
 8004912:	684a      	ldr	r2, [r1, #4]
 8004914:	4022      	ands	r2, r4
 8004916:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004918:	4322      	orrs	r2, r4
 800491a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800491c:	06da      	lsls	r2, r3, #27
 800491e:	d506      	bpl.n	800492e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004920:	6801      	ldr	r1, [r0, #0]
 8004922:	4c1a      	ldr	r4, [pc, #104]	; (800498c <UART_AdvFeatureConfig+0xbc>)
 8004924:	688a      	ldr	r2, [r1, #8]
 8004926:	4022      	ands	r2, r4
 8004928:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800492a:	4322      	orrs	r2, r4
 800492c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800492e:	069a      	lsls	r2, r3, #26
 8004930:	d506      	bpl.n	8004940 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004932:	6801      	ldr	r1, [r0, #0]
 8004934:	4c16      	ldr	r4, [pc, #88]	; (8004990 <UART_AdvFeatureConfig+0xc0>)
 8004936:	688a      	ldr	r2, [r1, #8]
 8004938:	4022      	ands	r2, r4
 800493a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800493c:	4322      	orrs	r2, r4
 800493e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004940:	065a      	lsls	r2, r3, #25
 8004942:	d510      	bpl.n	8004966 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004944:	6801      	ldr	r1, [r0, #0]
 8004946:	4d13      	ldr	r5, [pc, #76]	; (8004994 <UART_AdvFeatureConfig+0xc4>)
 8004948:	684a      	ldr	r2, [r1, #4]
 800494a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800494c:	402a      	ands	r2, r5
 800494e:	4322      	orrs	r2, r4
 8004950:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004952:	2280      	movs	r2, #128	; 0x80
 8004954:	0352      	lsls	r2, r2, #13
 8004956:	4294      	cmp	r4, r2
 8004958:	d105      	bne.n	8004966 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800495a:	684a      	ldr	r2, [r1, #4]
 800495c:	4c0e      	ldr	r4, [pc, #56]	; (8004998 <UART_AdvFeatureConfig+0xc8>)
 800495e:	4022      	ands	r2, r4
 8004960:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8004962:	4322      	orrs	r2, r4
 8004964:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004966:	061b      	lsls	r3, r3, #24
 8004968:	d506      	bpl.n	8004978 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800496a:	6802      	ldr	r2, [r0, #0]
 800496c:	490b      	ldr	r1, [pc, #44]	; (800499c <UART_AdvFeatureConfig+0xcc>)
 800496e:	6853      	ldr	r3, [r2, #4]
 8004970:	400b      	ands	r3, r1
 8004972:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004974:	430b      	orrs	r3, r1
 8004976:	6053      	str	r3, [r2, #4]
  }
}
 8004978:	bd30      	pop	{r4, r5, pc}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	fffdffff 	.word	0xfffdffff
 8004980:	fffeffff 	.word	0xfffeffff
 8004984:	fffbffff 	.word	0xfffbffff
 8004988:	ffff7fff 	.word	0xffff7fff
 800498c:	ffffefff 	.word	0xffffefff
 8004990:	ffffdfff 	.word	0xffffdfff
 8004994:	ffefffff 	.word	0xffefffff
 8004998:	ff9fffff 	.word	0xff9fffff
 800499c:	fff7ffff 	.word	0xfff7ffff

080049a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a2:	0004      	movs	r4, r0
 80049a4:	000e      	movs	r6, r1
 80049a6:	0015      	movs	r5, r2
 80049a8:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049aa:	6822      	ldr	r2, [r4, #0]
 80049ac:	69d3      	ldr	r3, [r2, #28]
 80049ae:	4033      	ands	r3, r6
 80049b0:	1b9b      	subs	r3, r3, r6
 80049b2:	4259      	negs	r1, r3
 80049b4:	414b      	adcs	r3, r1
 80049b6:	42ab      	cmp	r3, r5
 80049b8:	d001      	beq.n	80049be <UART_WaitOnFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80049ba:	2000      	movs	r0, #0
 80049bc:	e01e      	b.n	80049fc <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80049be:	9b06      	ldr	r3, [sp, #24]
 80049c0:	3301      	adds	r3, #1
 80049c2:	d0f3      	beq.n	80049ac <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c4:	f7fd fbd4 	bl	8002170 <HAL_GetTick>
 80049c8:	9b06      	ldr	r3, [sp, #24]
 80049ca:	1bc0      	subs	r0, r0, r7
 80049cc:	4283      	cmp	r3, r0
 80049ce:	d301      	bcc.n	80049d4 <UART_WaitOnFlagUntilTimeout+0x34>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1ea      	bne.n	80049aa <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80049d4:	0022      	movs	r2, r4
 80049d6:	ca08      	ldmia	r2!, {r3}
 80049d8:	4809      	ldr	r0, [pc, #36]	; (8004a00 <UART_WaitOnFlagUntilTimeout+0x60>)
 80049da:	6819      	ldr	r1, [r3, #0]
 80049dc:	4001      	ands	r1, r0
 80049de:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e0:	6899      	ldr	r1, [r3, #8]
 80049e2:	30a3      	adds	r0, #163	; 0xa3
 80049e4:	30ff      	adds	r0, #255	; 0xff
 80049e6:	4381      	bics	r1, r0
 80049e8:	6099      	str	r1, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80049ea:	2320      	movs	r3, #32
 80049ec:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80049ee:	0022      	movs	r2, r4
 80049f0:	3208      	adds	r2, #8
 80049f2:	67d3      	str	r3, [r2, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 80049f4:	2300      	movs	r3, #0
 80049f6:	347c      	adds	r4, #124	; 0x7c
 80049f8:	7023      	strb	r3, [r4, #0]
 80049fa:	3002      	adds	r0, #2
}
 80049fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049fe:	46c0      	nop			; (mov r8, r8)
 8004a00:	fffffe5f 	.word	0xfffffe5f

08004a04 <HAL_UART_Transmit>:
{
 8004a04:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8004a06:	1d07      	adds	r7, r0, #4
{
 8004a08:	b087      	sub	sp, #28
 8004a0a:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8004a0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
{
 8004a0e:	0004      	movs	r4, r0
 8004a10:	000d      	movs	r5, r1
 8004a12:	0016      	movs	r6, r2
    return HAL_BUSY;
 8004a14:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8004a16:	2b20      	cmp	r3, #32
 8004a18:	d14a      	bne.n	8004ab0 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 8004a1a:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8004a1c:	2900      	cmp	r1, #0
 8004a1e:	d047      	beq.n	8004ab0 <HAL_UART_Transmit+0xac>
 8004a20:	2a00      	cmp	r2, #0
 8004a22:	d045      	beq.n	8004ab0 <HAL_UART_Transmit+0xac>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a24:	2380      	movs	r3, #128	; 0x80
 8004a26:	68a2      	ldr	r2, [r4, #8]
 8004a28:	015b      	lsls	r3, r3, #5
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d104      	bne.n	8004a38 <HAL_UART_Transmit+0x34>
 8004a2e:	6923      	ldr	r3, [r4, #16]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_UART_Transmit+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a34:	4201      	tst	r1, r0
 8004a36:	d13b      	bne.n	8004ab0 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8004a38:	0023      	movs	r3, r4
 8004a3a:	337c      	adds	r3, #124	; 0x7c
 8004a3c:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8004a3e:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8004a40:	2a01      	cmp	r2, #1
 8004a42:	d035      	beq.n	8004ab0 <HAL_UART_Transmit+0xac>
 8004a44:	2201      	movs	r2, #1
 8004a46:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a48:	2200      	movs	r2, #0
 8004a4a:	60da      	str	r2, [r3, #12]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a4c:	2321      	movs	r3, #33	; 0x21
 8004a4e:	67fb      	str	r3, [r7, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8004a50:	f7fd fb8e 	bl	8002170 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8004a54:	0023      	movs	r3, r4
 8004a56:	3354      	adds	r3, #84	; 0x54
 8004a58:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8004a5a:	3302      	adds	r3, #2
 8004a5c:	801e      	strh	r6, [r3, #0]
 8004a5e:	9303      	str	r3, [sp, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a60:	2380      	movs	r3, #128	; 0x80
 8004a62:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8004a64:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a66:	015b      	lsls	r3, r3, #5
      pdata16bits = NULL;
 8004a68:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d104      	bne.n	8004a78 <HAL_UART_Transmit+0x74>
 8004a6e:	6923      	ldr	r3, [r4, #16]
 8004a70:	42b3      	cmp	r3, r6
 8004a72:	d101      	bne.n	8004a78 <HAL_UART_Transmit+0x74>
 8004a74:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8004a76:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8004a78:	0023      	movs	r3, r4
 8004a7a:	3356      	adds	r3, #86	; 0x56
 8004a7c:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a7e:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 8004a80:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 8004a86:	2a00      	cmp	r2, #0
 8004a88:	d10a      	bne.n	8004aa0 <HAL_UART_Transmit+0x9c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a8a:	2140      	movs	r1, #64	; 0x40
 8004a8c:	0020      	movs	r0, r4
 8004a8e:	f7ff ff87 	bl	80049a0 <UART_WaitOnFlagUntilTimeout>
 8004a92:	2800      	cmp	r0, #0
 8004a94:	d10b      	bne.n	8004aae <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_READY;
 8004a96:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8004a98:	347c      	adds	r4, #124	; 0x7c
    huart->gState = HAL_UART_STATE_READY;
 8004a9a:	67fb      	str	r3, [r7, #124]	; 0x7c
    __HAL_UNLOCK(huart);
 8004a9c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8004a9e:	e007      	b.n	8004ab0 <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	2180      	movs	r1, #128	; 0x80
 8004aa4:	0020      	movs	r0, r4
 8004aa6:	f7ff ff7b 	bl	80049a0 <UART_WaitOnFlagUntilTimeout>
 8004aaa:	2800      	cmp	r0, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_UART_Transmit+0xb0>
        return HAL_TIMEOUT;
 8004aae:	2003      	movs	r0, #3
}
 8004ab0:	b007      	add	sp, #28
 8004ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ab4:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8004ab6:	2d00      	cmp	r5, #0
 8004ab8:	d10b      	bne.n	8004ad2 <HAL_UART_Transmit+0xce>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aba:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8004abc:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004abe:	05db      	lsls	r3, r3, #23
 8004ac0:	0ddb      	lsrs	r3, r3, #23
 8004ac2:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8004ac4:	9b03      	ldr	r3, [sp, #12]
 8004ac6:	9a03      	ldr	r2, [sp, #12]
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	8013      	strh	r3, [r2, #0]
 8004ad0:	e7d2      	b.n	8004a78 <HAL_UART_Transmit+0x74>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ad2:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8004ad4:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ad6:	6293      	str	r3, [r2, #40]	; 0x28
 8004ad8:	e7f4      	b.n	8004ac4 <HAL_UART_Transmit+0xc0>
	...

08004adc <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004adc:	0003      	movs	r3, r0
{
 8004ade:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae0:	2600      	movs	r6, #0
{
 8004ae2:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae4:	3388      	adds	r3, #136	; 0x88
 8004ae6:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8004ae8:	f7fd fb42 	bl	8002170 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aec:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004aee:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	071b      	lsls	r3, r3, #28
 8004af4:	d417      	bmi.n	8004b26 <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	075b      	lsls	r3, r3, #29
 8004afc:	d50a      	bpl.n	8004b14 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004afe:	2180      	movs	r1, #128	; 0x80
 8004b00:	4b0f      	ldr	r3, [pc, #60]	; (8004b40 <UART_CheckIdleState+0x64>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	03c9      	lsls	r1, r1, #15
 8004b08:	002b      	movs	r3, r5
 8004b0a:	0020      	movs	r0, r4
 8004b0c:	f7ff ff48 	bl	80049a0 <UART_WaitOnFlagUntilTimeout>
 8004b10:	2800      	cmp	r0, #0
 8004b12:	d113      	bne.n	8004b3c <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8004b14:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004b16:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004b18:	1d22      	adds	r2, r4, #4
 8004b1a:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8004b1c:	347c      	adds	r4, #124	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b1e:	3204      	adds	r2, #4
 8004b20:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8004b22:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8004b24:	e00b      	b.n	8004b3e <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b26:	2180      	movs	r1, #128	; 0x80
 8004b28:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <UART_CheckIdleState+0x64>)
 8004b2a:	0032      	movs	r2, r6
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	0389      	lsls	r1, r1, #14
 8004b30:	0003      	movs	r3, r0
 8004b32:	0020      	movs	r0, r4
 8004b34:	f7ff ff34 	bl	80049a0 <UART_WaitOnFlagUntilTimeout>
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	d0dc      	beq.n	8004af6 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8004b3c:	2003      	movs	r0, #3
}
 8004b3e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8004b40:	01ffffff 	.word	0x01ffffff

08004b44 <HAL_UART_Init>:
{
 8004b44:	b570      	push	{r4, r5, r6, lr}
 8004b46:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004b48:	d101      	bne.n	8004b4e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8004b4a:	2001      	movs	r0, #1
}
 8004b4c:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8004b4e:	1d05      	adds	r5, r0, #4
 8004b50:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d104      	bne.n	8004b60 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8004b56:	0002      	movs	r2, r0
 8004b58:	327c      	adds	r2, #124	; 0x7c
 8004b5a:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8004b5c:	f7fd f940 	bl	8001de0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004b60:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004b62:	2101      	movs	r1, #1
 8004b64:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004b66:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8004b68:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b6a:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8004b6c:	438b      	bics	r3, r1
 8004b6e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b70:	f7ff fcac 	bl	80044cc <UART_SetConfig>
 8004b74:	2801      	cmp	r0, #1
 8004b76:	d0e8      	beq.n	8004b4a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <HAL_UART_Init+0x40>
    UART_AdvFeatureConfig(huart);
 8004b7e:	0020      	movs	r0, r4
 8004b80:	f7ff fea6 	bl	80048d0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	4908      	ldr	r1, [pc, #32]	; (8004ba8 <HAL_UART_Init+0x64>)
 8004b88:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8004b8a:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b8c:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b8e:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b90:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	438a      	bics	r2, r1
 8004b96:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004b98:	2201      	movs	r2, #1
 8004b9a:	6819      	ldr	r1, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004ba0:	f7ff ff9c 	bl	8004adc <UART_CheckIdleState>
 8004ba4:	e7d2      	b.n	8004b4c <HAL_UART_Init+0x8>
 8004ba6:	46c0      	nop			; (mov r8, r8)
 8004ba8:	ffffb7ff 	.word	0xffffb7ff

08004bac <UARTEx_SetNbDataToProcess>:
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004bac:	2301      	movs	r3, #1
{
 8004bae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bb0:	b087      	sub	sp, #28
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004bb2:	aa02      	add	r2, sp, #8
 8004bb4:	7013      	strb	r3, [r2, #0]
 8004bb6:	7053      	strb	r3, [r2, #1]
 8004bb8:	7093      	strb	r3, [r2, #2]
 8004bba:	2203      	movs	r2, #3
 8004bbc:	a902      	add	r1, sp, #8
 8004bbe:	70ca      	strb	r2, [r1, #3]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004bc0:	2502      	movs	r5, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	2607      	movs	r6, #7
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004bc6:	ac04      	add	r4, sp, #16
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004bc8:	718a      	strb	r2, [r1, #6]
 8004bca:	71ca      	strb	r2, [r1, #7]
 8004bcc:	710e      	strb	r6, [r1, #4]
 8004bce:	714b      	strb	r3, [r1, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004bd0:	70a5      	strb	r5, [r4, #2]
 8004bd2:	2104      	movs	r1, #4
 8004bd4:	0007      	movs	r7, r0
 8004bd6:	0005      	movs	r5, r0
 8004bd8:	3208      	adds	r2, #8
 8004bda:	7022      	strb	r2, [r4, #0]
 8004bdc:	7122      	strb	r2, [r4, #4]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004bde:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004be0:	7061      	strb	r1, [r4, #1]
 8004be2:	70e1      	strb	r1, [r4, #3]
 8004be4:	7163      	strb	r3, [r4, #5]
 8004be6:	71a3      	strb	r3, [r4, #6]
 8004be8:	71e3      	strb	r3, [r4, #7]
 8004bea:	376a      	adds	r7, #106	; 0x6a
 8004bec:	3568      	adds	r5, #104	; 0x68
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004bee:	2a00      	cmp	r2, #0
 8004bf0:	d103      	bne.n	8004bfa <UARTEx_SetNbDataToProcess+0x4e>
  {
    huart->NbTxDataToProcess = 1U;
 8004bf2:	803b      	strh	r3, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 8004bf4:	802b      	strh	r3, [r5, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004bf6:	b007      	add	sp, #28
 8004bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004bfa:	6803      	ldr	r3, [r0, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004bfe:	689b      	ldr	r3, [r3, #8]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c00:	9201      	str	r2, [sp, #4]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c02:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004c04:	aa02      	add	r2, sp, #8
 8004c06:	5cd0      	ldrb	r0, [r2, r3]
 8004c08:	5ce1      	ldrb	r1, [r4, r3]
 8004c0a:	00c0      	lsls	r0, r0, #3
 8004c0c:	f7fb fb32 	bl	8000274 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c10:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004c12:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c14:	0e5b      	lsrs	r3, r3, #25
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004c16:	401e      	ands	r6, r3
 8004c18:	ab02      	add	r3, sp, #8
 8004c1a:	5d98      	ldrb	r0, [r3, r6]
 8004c1c:	5da1      	ldrb	r1, [r4, r6]
 8004c1e:	00c0      	lsls	r0, r0, #3
 8004c20:	f7fb fb28 	bl	8000274 <__divsi3>
 8004c24:	8028      	strh	r0, [r5, #0]
}
 8004c26:	e7e6      	b.n	8004bf6 <UARTEx_SetNbDataToProcess+0x4a>

08004c28 <HAL_UARTEx_EnableFifoMode>:
{
 8004c28:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8004c2a:	0004      	movs	r4, r0
 8004c2c:	347c      	adds	r4, #124	; 0x7c
 8004c2e:	7822      	ldrb	r2, [r4, #0]
 8004c30:	2302      	movs	r3, #2
 8004c32:	2a01      	cmp	r2, #1
 8004c34:	d014      	beq.n	8004c60 <HAL_UARTEx_EnableFifoMode+0x38>
 8004c36:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8004c38:	1d05      	adds	r5, r0, #4
 8004c3a:	3322      	adds	r3, #34	; 0x22
  __HAL_LOCK(huart);
 8004c3c:	7026      	strb	r6, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004c3e:	67eb      	str	r3, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c40:	6803      	ldr	r3, [r0, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004c44:	6819      	ldr	r1, [r3, #0]
 8004c46:	43b1      	bics	r1, r6
 8004c48:	6019      	str	r1, [r3, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c4a:	2180      	movs	r1, #128	; 0x80
 8004c4c:	0589      	lsls	r1, r1, #22
 8004c4e:	430a      	orrs	r2, r1
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8004c50:	6641      	str	r1, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c52:	601a      	str	r2, [r3, #0]
  UARTEx_SetNbDataToProcess(huart);
 8004c54:	f7ff ffaa 	bl	8004bac <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8004c58:	2320      	movs	r3, #32
 8004c5a:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	7023      	strb	r3, [r4, #0]
}
 8004c60:	0018      	movs	r0, r3
 8004c62:	bd70      	pop	{r4, r5, r6, pc}

08004c64 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8004c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8004c66:	0005      	movs	r5, r0
 8004c68:	357c      	adds	r5, #124	; 0x7c
 8004c6a:	782b      	ldrb	r3, [r5, #0]
{
 8004c6c:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 8004c6e:	2002      	movs	r0, #2
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d017      	beq.n	8004ca4 <HAL_UARTEx_SetTxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 8004c74:	2324      	movs	r3, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c76:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(huart);
 8004c78:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8004c7a:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 8004c7c:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004c7e:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c80:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8004c82:	6813      	ldr	r3, [r2, #0]
 8004c84:	4383      	bics	r3, r0
 8004c86:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c88:	6893      	ldr	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004c8a:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	08db      	lsrs	r3, r3, #3
 8004c90:	4319      	orrs	r1, r3
 8004c92:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004c94:	f7ff ff8a 	bl	8004bac <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c98:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8004c9a:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c9c:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004c9e:	2320      	movs	r3, #32
 8004ca0:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8004ca2:	7028      	strb	r0, [r5, #0]
}
 8004ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ca8 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8004ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8004caa:	0005      	movs	r5, r0
 8004cac:	357c      	adds	r5, #124	; 0x7c
 8004cae:	782b      	ldrb	r3, [r5, #0]
{
 8004cb0:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 8004cb2:	2002      	movs	r0, #2
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d017      	beq.n	8004ce8 <HAL_UARTEx_SetRxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 8004cb8:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8004cba:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8004cbc:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 8004cbe:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004cc0:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	4382      	bics	r2, r0
 8004cca:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	4807      	ldr	r0, [pc, #28]	; (8004cec <HAL_UARTEx_SetRxFifoThreshold+0x44>)
 8004cd0:	4002      	ands	r2, r0
 8004cd2:	4311      	orrs	r1, r2
 8004cd4:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004cd6:	0020      	movs	r0, r4
 8004cd8:	f7ff ff68 	bl	8004bac <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cdc:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8004cde:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ce0:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004ce2:	2320      	movs	r3, #32
 8004ce4:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8004ce6:	7028      	strb	r0, [r5, #0]
}
 8004ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cea:	46c0      	nop			; (mov r8, r8)
 8004cec:	f1ffffff 	.word	0xf1ffffff

08004cf0 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result 
  */
int32_t MX_FATFS_Init(void) 
{
 8004cf0:	b510      	push	{r4, lr}
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 8004cf2:	4906      	ldr	r1, [pc, #24]	; (8004d0c <MX_FATFS_Init+0x1c>)
 8004cf4:	4806      	ldr	r0, [pc, #24]	; (8004d10 <MX_FATFS_Init+0x20>)
 8004cf6:	f001 fd35 	bl	8006764 <FATFS_LinkDriver>
 8004cfa:	2800      	cmp	r0, #0
 8004cfc:	d103      	bne.n	8004d06 <MX_FATFS_Init+0x16>
  {
    return APP_ERROR;
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8004cfe:	2201      	movs	r2, #1
 8004d00:	4b04      	ldr	r3, [pc, #16]	; (8004d14 <MX_FATFS_Init+0x24>)
 8004d02:	701a      	strb	r2, [r3, #0]
    return APP_OK;
  }
  /* USER CODE END FATFS_Init */
}
 8004d04:	bd10      	pop	{r4, pc}
    return APP_ERROR;
 8004d06:	2001      	movs	r0, #1
 8004d08:	4240      	negs	r0, r0
 8004d0a:	e7fb      	b.n	8004d04 <MX_FATFS_Init+0x14>
 8004d0c:	20004c04 	.word	0x20004c04
 8004d10:	0800ded4 	.word	0x0800ded4
 8004d14:	200013ac 	.word	0x200013ac

08004d18 <MX_FATFS_Process>:
  /* USER CODE BEGIN FATFS_Process */
  int32_t process_res = APP_OK;  
    
  return process_res;
  /* USER CODE END FATFS_Process */
}  
 8004d18:	2000      	movs	r0, #0
 8004d1a:	4770      	bx	lr

08004d1c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8004d1c:	2000      	movs	r0, #0
 8004d1e:	4770      	bx	lr

08004d20 <SD_CheckStatus.isra.0>:
  SD_ioctl,
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 8004d20:	b570      	push	{r4, r5, r6, lr}
{
  Stat = STA_NOINIT;
 8004d22:	2501      	movs	r5, #1
 8004d24:	4c05      	ldr	r4, [pc, #20]	; (8004d3c <SD_CheckStatus.isra.0+0x1c>)
 8004d26:	7025      	strb	r5, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004d28:	f7fc feb0 	bl	8001a8c <BSP_SD_GetCardState>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d102      	bne.n	8004d36 <SD_CheckStatus.isra.0+0x16>
  {
    Stat &= ~STA_NOINIT;
 8004d30:	7823      	ldrb	r3, [r4, #0]
 8004d32:	43ab      	bics	r3, r5
 8004d34:	7023      	strb	r3, [r4, #0]
  }

  return Stat;
 8004d36:	7820      	ldrb	r0, [r4, #0]
 8004d38:	b2c0      	uxtb	r0, r0
}
 8004d3a:	bd70      	pop	{r4, r5, r6, pc}
 8004d3c:	20000010 	.word	0x20000010

08004d40 <SD_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
  /* USER CODE BEGIN SDinitialize */
  Stat = STA_NOINIT;
 8004d40:	2301      	movs	r3, #1
{
 8004d42:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8004d44:	4c05      	ldr	r4, [pc, #20]	; (8004d5c <SD_initialize+0x1c>)
 8004d46:	7023      	strb	r3, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004d48:	f7fc fb1a 	bl	8001380 <BSP_SD_Init>
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	d102      	bne.n	8004d56 <SD_initialize+0x16>
  {
    Stat = SD_CheckStatus(lun);
 8004d50:	f7ff ffe6 	bl	8004d20 <SD_CheckStatus.isra.0>
 8004d54:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8004d56:	7820      	ldrb	r0, [r4, #0]
 8004d58:	b2c0      	uxtb	r0, r0
  /* USER CODE END SDinitialize */
}
 8004d5a:	bd10      	pop	{r4, pc}
 8004d5c:	20000010 	.word	0x20000010

08004d60 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004d60:	b510      	push	{r4, lr}
  return SD_CheckStatus(lun);
 8004d62:	f7ff ffdd 	bl	8004d20 <SD_CheckStatus.isra.0>
}
 8004d66:	bd10      	pop	{r4, pc}

08004d68 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004d68:	0008      	movs	r0, r1
 8004d6a:	b510      	push	{r4, lr}
 8004d6c:	0011      	movs	r1, r2
 8004d6e:	001a      	movs	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004d70:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <SD_read+0x20>)
 8004d72:	f7fc fd8d 	bl	8001890 <BSP_SD_ReadBlocks>
 8004d76:	0003      	movs	r3, r0
  DRESULT res = RES_ERROR;
 8004d78:	2001      	movs	r0, #1
  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d103      	bne.n	8004d86 <SD_read+0x1e>
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
  /* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8004d7e:	f7fc fe85 	bl	8001a8c <BSP_SD_GetCardState>
 8004d82:	2800      	cmp	r0, #0
 8004d84:	d1fb      	bne.n	8004d7e <SD_read+0x16>
}
 8004d86:	bd10      	pop	{r4, pc}
 8004d88:	05f5e100 	.word	0x05f5e100

08004d8c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004d8c:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004d8e:	4b11      	ldr	r3, [pc, #68]	; (8004dd4 <SD_ioctl+0x48>)
{
 8004d90:	0014      	movs	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004d92:	781a      	ldrb	r2, [r3, #0]
{
 8004d94:	b090      	sub	sp, #64	; 0x40
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004d96:	2003      	movs	r0, #3
 8004d98:	07d3      	lsls	r3, r2, #31
 8004d9a:	d413      	bmi.n	8004dc4 <SD_ioctl+0x38>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
     res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8004d9c:	3001      	adds	r0, #1
  switch (cmd)
 8004d9e:	2903      	cmp	r1, #3
 8004da0:	d810      	bhi.n	8004dc4 <SD_ioctl+0x38>
 8004da2:	0008      	movs	r0, r1
 8004da4:	f7fb f9be 	bl	8000124 <__gnu_thumb1_case_uqi>
 8004da8:	1008020d 	.word	0x1008020d
    BSP_SD_GetCardInfo(&CardInfo);
 8004dac:	4668      	mov	r0, sp
 8004dae:	f7fc fba9 	bl	8001504 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004db2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004db4:	6023      	str	r3, [r4, #0]
 8004db6:	e004      	b.n	8004dc2 <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8004db8:	4668      	mov	r0, sp
 8004dba:	f7fc fba3 	bl	8001504 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004dbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004dc0:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8004dc2:	2000      	movs	r0, #0
  }

  return res;
}
 8004dc4:	b010      	add	sp, #64	; 0x40
 8004dc6:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8004dc8:	4668      	mov	r0, sp
 8004dca:	f7fc fb9b 	bl	8001504 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004dce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004dd0:	0a5b      	lsrs	r3, r3, #9
 8004dd2:	e7ef      	b.n	8004db4 <SD_ioctl+0x28>
 8004dd4:	20000010 	.word	0x20000010

08004dd8 <SD_write>:
{
 8004dd8:	0008      	movs	r0, r1
 8004dda:	b510      	push	{r4, lr}
 8004ddc:	0011      	movs	r1, r2
 8004dde:	001a      	movs	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8004de0:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <SD_write+0x20>)
 8004de2:	f7fc fdc7 	bl	8001974 <BSP_SD_WriteBlocks>
 8004de6:	0003      	movs	r3, r0
  DRESULT res = RES_ERROR;
 8004de8:	2001      	movs	r0, #1
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d103      	bne.n	8004df6 <SD_write+0x1e>
    while(BSP_SD_GetCardState() != MSD_OK)
 8004dee:	f7fc fe4d 	bl	8001a8c <BSP_SD_GetCardState>
 8004df2:	2800      	cmp	r0, #0
 8004df4:	d1fb      	bne.n	8004dee <SD_write+0x16>
}
 8004df6:	bd10      	pop	{r4, pc}
 8004df8:	05f5e100 	.word	0x05f5e100

08004dfc <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004dfc:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <disk_status+0x18>)
{
 8004dfe:	b510      	push	{r4, lr}
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004e00:	181a      	adds	r2, r3, r0
 8004e02:	0080      	lsls	r0, r0, #2
 8004e04:	181b      	adds	r3, r3, r0
 8004e06:	7a11      	ldrb	r1, [r2, #8]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	0008      	movs	r0, r1
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	4798      	blx	r3
  return stat;
}
 8004e10:	bd10      	pop	{r4, pc}
 8004e12:	46c0      	nop			; (mov r8, r8)
 8004e14:	200013d8 	.word	0x200013d8

08004e18 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8004e18:	4b08      	ldr	r3, [pc, #32]	; (8004e3c <disk_initialize+0x24>)
{
 8004e1a:	0002      	movs	r2, r0
  if(disk.is_initialized[pdrv] == 0)
 8004e1c:	5c19      	ldrb	r1, [r3, r0]
  DSTATUS stat = RES_OK;
 8004e1e:	2000      	movs	r0, #0
{
 8004e20:	b510      	push	{r4, lr}
  if(disk.is_initialized[pdrv] == 0)
 8004e22:	4281      	cmp	r1, r0
 8004e24:	d108      	bne.n	8004e38 <disk_initialize+0x20>
  {
    disk.is_initialized[pdrv] = 1;
 8004e26:	2101      	movs	r1, #1
 8004e28:	5499      	strb	r1, [r3, r2]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004e2a:	1899      	adds	r1, r3, r2
 8004e2c:	0092      	lsls	r2, r2, #2
 8004e2e:	189b      	adds	r3, r3, r2
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	7a08      	ldrb	r0, [r1, #8]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4798      	blx	r3
  }
  return stat;
}
 8004e38:	bd10      	pop	{r4, pc}
 8004e3a:	46c0      	nop			; (mov r8, r8)
 8004e3c:	200013d8 	.word	0x200013d8

08004e40 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004e40:	b570      	push	{r4, r5, r6, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004e42:	4c05      	ldr	r4, [pc, #20]	; (8004e58 <disk_read+0x18>)
 8004e44:	1825      	adds	r5, r4, r0
 8004e46:	0080      	lsls	r0, r0, #2
 8004e48:	1824      	adds	r4, r4, r0
 8004e4a:	7a2e      	ldrb	r6, [r5, #8]
 8004e4c:	6860      	ldr	r0, [r4, #4]
 8004e4e:	6884      	ldr	r4, [r0, #8]
 8004e50:	0030      	movs	r0, r6
 8004e52:	47a0      	blx	r4
  return res;
}
 8004e54:	bd70      	pop	{r4, r5, r6, pc}
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	200013d8 	.word	0x200013d8

08004e5c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004e5c:	b570      	push	{r4, r5, r6, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004e5e:	4c05      	ldr	r4, [pc, #20]	; (8004e74 <disk_write+0x18>)
 8004e60:	1825      	adds	r5, r4, r0
 8004e62:	0080      	lsls	r0, r0, #2
 8004e64:	1824      	adds	r4, r4, r0
 8004e66:	7a2e      	ldrb	r6, [r5, #8]
 8004e68:	6860      	ldr	r0, [r4, #4]
 8004e6a:	68c4      	ldr	r4, [r0, #12]
 8004e6c:	0030      	movs	r0, r6
 8004e6e:	47a0      	blx	r4
  return res;
}
 8004e70:	bd70      	pop	{r4, r5, r6, pc}
 8004e72:	46c0      	nop			; (mov r8, r8)
 8004e74:	200013d8 	.word	0x200013d8

08004e78 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004e78:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <disk_ioctl+0x18>)
{
 8004e7a:	b570      	push	{r4, r5, r6, lr}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004e7c:	181c      	adds	r4, r3, r0
 8004e7e:	0080      	lsls	r0, r0, #2
 8004e80:	181b      	adds	r3, r3, r0
 8004e82:	7a25      	ldrb	r5, [r4, #8]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	0028      	movs	r0, r5
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	4798      	blx	r3
  return res;
}
 8004e8c:	bd70      	pop	{r4, r5, r6, pc}
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	200013d8 	.word	0x200013d8

08004e94 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8004e94:	78c3      	ldrb	r3, [r0, #3]
 8004e96:	7882      	ldrb	r2, [r0, #2]
 8004e98:	021b      	lsls	r3, r3, #8
 8004e9a:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
 8004e9c:	7842      	ldrb	r2, [r0, #1]
 8004e9e:	021b      	lsls	r3, r3, #8
 8004ea0:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
 8004ea2:	7800      	ldrb	r0, [r0, #0]
 8004ea4:	021b      	lsls	r3, r3, #8
 8004ea6:	4318      	orrs	r0, r3
	return rv;
}
 8004ea8:	4770      	bx	lr

08004eaa <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8004eaa:	0a0b      	lsrs	r3, r1, #8
 8004eac:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004eae:	7043      	strb	r3, [r0, #1]
 8004eb0:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8004eb2:	0e09      	lsrs	r1, r1, #24
 8004eb4:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8004eb6:	70c1      	strb	r1, [r0, #3]
}
 8004eb8:	4770      	bx	lr

08004eba <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004eba:	1882      	adds	r2, r0, r2
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8004ebc:	7001      	strb	r1, [r0, #0]
 8004ebe:	3001      	adds	r0, #1
	} while (--cnt);
 8004ec0:	4290      	cmp	r0, r2
 8004ec2:	d1fb      	bne.n	8004ebc <mem_set+0x2>
}
 8004ec4:	4770      	bx	lr
	...

08004ec8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004eca:	2400      	movs	r4, #0
 8004ecc:	4a14      	ldr	r2, [pc, #80]	; (8004f20 <chk_lock+0x58>)
 8004ece:	0023      	movs	r3, r4
 8004ed0:	4694      	mov	ip, r2
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8004ed2:	2701      	movs	r7, #1
		if (Files[i].fs) {	/* Existing entry */
 8004ed4:	6815      	ldr	r5, [r2, #0]
 8004ed6:	2d00      	cmp	r5, #0
 8004ed8:	d016      	beq.n	8004f08 <chk_lock+0x40>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004eda:	6806      	ldr	r6, [r0, #0]
 8004edc:	42b5      	cmp	r5, r6
 8004ede:	d114      	bne.n	8004f0a <chk_lock+0x42>
 8004ee0:	6855      	ldr	r5, [r2, #4]
 8004ee2:	6886      	ldr	r6, [r0, #8]
 8004ee4:	42b5      	cmp	r5, r6
 8004ee6:	d110      	bne.n	8004f0a <chk_lock+0x42>
				Files[i].clu == dp->obj.sclust &&
 8004ee8:	6895      	ldr	r5, [r2, #8]
 8004eea:	6946      	ldr	r6, [r0, #20]
 8004eec:	42b5      	cmp	r5, r6
 8004eee:	d10c      	bne.n	8004f0a <chk_lock+0x42>
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004ef0:	2010      	movs	r0, #16
 8004ef2:	2900      	cmp	r1, #0
 8004ef4:	d113      	bne.n	8004f1e <chk_lock+0x56>
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	4463      	add	r3, ip
 8004efa:	8998      	ldrh	r0, [r3, #12]
 8004efc:	3801      	subs	r0, #1
 8004efe:	38ff      	subs	r0, #255	; 0xff
 8004f00:	4242      	negs	r2, r0
 8004f02:	4142      	adcs	r2, r0
 8004f04:	0110      	lsls	r0, r2, #4
 8004f06:	e00a      	b.n	8004f1e <chk_lock+0x56>
			be = 1;
 8004f08:	003c      	movs	r4, r7
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	3210      	adds	r2, #16
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d1e0      	bne.n	8004ed4 <chk_lock+0xc>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004f12:	2000      	movs	r0, #0
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004f14:	4284      	cmp	r4, r0
 8004f16:	d102      	bne.n	8004f1e <chk_lock+0x56>
 8004f18:	2902      	cmp	r1, #2
 8004f1a:	d000      	beq.n	8004f1e <chk_lock+0x56>
 8004f1c:	2012      	movs	r0, #18
}
 8004f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f20:	200013b4 	.word	0x200013b4

08004f24 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004f24:	b570      	push	{r4, r5, r6, lr}
 8004f26:	4c1f      	ldr	r4, [pc, #124]	; (8004fa4 <inc_lock+0x80>)
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004f28:	2300      	movs	r3, #0
 8004f2a:	0022      	movs	r2, r4
		if (Files[i].fs == dp->obj.fs &&
 8004f2c:	6805      	ldr	r5, [r0, #0]
 8004f2e:	6826      	ldr	r6, [r4, #0]
 8004f30:	42ae      	cmp	r6, r5
 8004f32:	d109      	bne.n	8004f48 <inc_lock+0x24>
 8004f34:	6866      	ldr	r6, [r4, #4]
 8004f36:	46b4      	mov	ip, r6
 8004f38:	6886      	ldr	r6, [r0, #8]
 8004f3a:	45b4      	cmp	ip, r6
 8004f3c:	d104      	bne.n	8004f48 <inc_lock+0x24>
			Files[i].clu == dp->obj.sclust &&
 8004f3e:	68a6      	ldr	r6, [r4, #8]
 8004f40:	46b4      	mov	ip, r6
 8004f42:	6946      	ldr	r6, [r0, #20]
 8004f44:	45b4      	cmp	ip, r6
 8004f46:	d021      	beq.n	8004f8c <inc_lock+0x68>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004f48:	3301      	adds	r3, #1
 8004f4a:	3410      	adds	r4, #16
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d1ee      	bne.n	8004f2e <inc_lock+0xa>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004f50:	6813      	ldr	r3, [r2, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d004      	beq.n	8004f60 <inc_lock+0x3c>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004f56:	2400      	movs	r4, #0
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004f58:	6913      	ldr	r3, [r2, #16]
 8004f5a:	42a3      	cmp	r3, r4
 8004f5c:	d114      	bne.n	8004f88 <inc_lock+0x64>
 8004f5e:	2301      	movs	r3, #1
		Files[i].fs = dp->obj.fs;
 8004f60:	011c      	lsls	r4, r3, #4
 8004f62:	5115      	str	r5, [r2, r4]
		Files[i].clu = dp->obj.sclust;
 8004f64:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 8004f66:	6940      	ldr	r0, [r0, #20]
		Files[i].clu = dp->obj.sclust;
 8004f68:	1914      	adds	r4, r2, r4
		Files[i].ofs = dp->dptr;
 8004f6a:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 8004f6c:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 8004f6e:	6065      	str	r5, [r4, #4]
		Files[i].ctr = 0;
 8004f70:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004f72:	4281      	cmp	r1, r0
 8004f74:	d112      	bne.n	8004f9c <inc_lock+0x78>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004f76:	0119      	lsls	r1, r3, #4
 8004f78:	1851      	adds	r1, r2, r1
 8004f7a:	8989      	ldrh	r1, [r1, #12]
 8004f7c:	3101      	adds	r1, #1
 8004f7e:	b289      	uxth	r1, r1
 8004f80:	0118      	lsls	r0, r3, #4
 8004f82:	1812      	adds	r2, r2, r0
 8004f84:	8191      	strh	r1, [r2, #12]

	return i + 1;
 8004f86:	1c5c      	adds	r4, r3, #1
}
 8004f88:	0020      	movs	r0, r4
 8004f8a:	bd70      	pop	{r4, r5, r6, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004f8c:	2900      	cmp	r1, #0
 8004f8e:	d0f2      	beq.n	8004f76 <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004f90:	2400      	movs	r4, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004f92:	0119      	lsls	r1, r3, #4
 8004f94:	1851      	adds	r1, r2, r1
 8004f96:	8989      	ldrh	r1, [r1, #12]
 8004f98:	42a1      	cmp	r1, r4
 8004f9a:	d1f5      	bne.n	8004f88 <inc_lock+0x64>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004f9c:	2180      	movs	r1, #128	; 0x80
 8004f9e:	0049      	lsls	r1, r1, #1
 8004fa0:	e7ee      	b.n	8004f80 <inc_lock+0x5c>
 8004fa2:	46c0      	nop			; (mov r8, r8)
 8004fa4:	200013b4 	.word	0x200013b4

08004fa8 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004fa8:	1e43      	subs	r3, r0, #1
{
 8004faa:	b510      	push	{r4, lr}
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004fac:	2002      	movs	r0, #2
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d80e      	bhi.n	8004fd0 <dec_lock+0x28>
		n = Files[i].ctr;
 8004fb2:	4c08      	ldr	r4, [pc, #32]	; (8004fd4 <dec_lock+0x2c>)
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	18e2      	adds	r2, r4, r3
 8004fb8:	8991      	ldrh	r1, [r2, #12]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004fba:	4a07      	ldr	r2, [pc, #28]	; (8004fd8 <dec_lock+0x30>)
 8004fbc:	400a      	ands	r2, r1
 8004fbe:	d001      	beq.n	8004fc4 <dec_lock+0x1c>
 8004fc0:	3901      	subs	r1, #1
 8004fc2:	b28a      	uxth	r2, r1
		res = FR_OK;
 8004fc4:	2000      	movs	r0, #0
		Files[i].ctr = n;
 8004fc6:	18e1      	adds	r1, r4, r3
 8004fc8:	818a      	strh	r2, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004fca:	4282      	cmp	r2, r0
 8004fcc:	d100      	bne.n	8004fd0 <dec_lock+0x28>
 8004fce:	50e0      	str	r0, [r4, r3]
	}
	return res;
}
 8004fd0:	bd10      	pop	{r4, pc}
 8004fd2:	46c0      	nop			; (mov r8, r8)
 8004fd4:	200013b4 	.word	0x200013b4
 8004fd8:	fffffeff 	.word	0xfffffeff

08004fdc <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004fdc:	6942      	ldr	r2, [r0, #20]
	clst -= 2;
 8004fde:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004fe0:	3a02      	subs	r2, #2
{
 8004fe2:	0003      	movs	r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	4291      	cmp	r1, r2
 8004fe8:	d203      	bcs.n	8004ff2 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
 8004fea:	8958      	ldrh	r0, [r3, #10]
 8004fec:	4341      	muls	r1, r0
 8004fee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004ff0:	1808      	adds	r0, r1, r0
}
 8004ff2:	4770      	bx	lr

08004ff4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004ff4:	0003      	movs	r3, r0
 8004ff6:	b510      	push	{r4, lr}
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004ff8:	681b      	ldr	r3, [r3, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004ffa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004ffc:	0a48      	lsrs	r0, r1, #9
 8004ffe:	8959      	ldrh	r1, [r3, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005000:	1d14      	adds	r4, r2, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005002:	f7fb f8ad 	bl	8000160 <__udivsi3>
 8005006:	0002      	movs	r2, r0
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005008:	6820      	ldr	r0, [r4, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800500a:	2800      	cmp	r0, #0
 800500c:	d006      	beq.n	800501c <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800500e:	4282      	cmp	r2, r0
 8005010:	d302      	bcc.n	8005018 <clmt_clust+0x24>
		cl -= ncl; tbl++;		/* Next fragment */
 8005012:	1a12      	subs	r2, r2, r0
 8005014:	3408      	adds	r4, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005016:	e7f7      	b.n	8005008 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8005018:	6860      	ldr	r0, [r4, #4]
 800501a:	1810      	adds	r0, r2, r0
}
 800501c:	bd10      	pop	{r4, pc}

0800501e <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800501e:	6802      	ldr	r2, [r0, #0]
 8005020:	1e13      	subs	r3, r2, #0
 8005022:	d103      	bne.n	800502c <get_ldnumber+0xe>
	int vol = -1;
 8005024:	2001      	movs	r0, #1
 8005026:	4240      	negs	r0, r0
 8005028:	e00e      	b.n	8005048 <get_ldnumber+0x2a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800502a:	3301      	adds	r3, #1
 800502c:	7819      	ldrb	r1, [r3, #0]
 800502e:	2920      	cmp	r1, #32
 8005030:	d909      	bls.n	8005046 <get_ldnumber+0x28>
 8005032:	293a      	cmp	r1, #58	; 0x3a
 8005034:	d1f9      	bne.n	800502a <get_ldnumber+0xc>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8005036:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005038:	428b      	cmp	r3, r1
 800503a:	d1f3      	bne.n	8005024 <get_ldnumber+0x6>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800503c:	7812      	ldrb	r2, [r2, #0]
 800503e:	2a30      	cmp	r2, #48	; 0x30
 8005040:	d1f0      	bne.n	8005024 <get_ldnumber+0x6>
					vol = (int)i;
					*path = ++tt;
 8005042:	3301      	adds	r3, #1
 8005044:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005046:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8005048:	4770      	bx	lr

0800504a <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800504a:	b570      	push	{r4, r5, r6, lr}
 800504c:	0005      	movs	r5, r0
 800504e:	000c      	movs	r4, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005050:	2800      	cmp	r0, #0
 8005052:	d103      	bne.n	800505c <validate+0x12>
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
 8005054:	2009      	movs	r0, #9
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005056:	2300      	movs	r3, #0
 8005058:	6023      	str	r3, [r4, #0]
	return res;
}
 800505a:	bd70      	pop	{r4, r5, r6, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800505c:	6803      	ldr	r3, [r0, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0f8      	beq.n	8005054 <validate+0xa>
 8005062:	781a      	ldrb	r2, [r3, #0]
 8005064:	2a00      	cmp	r2, #0
 8005066:	d0f5      	beq.n	8005054 <validate+0xa>
 8005068:	8881      	ldrh	r1, [r0, #4]
 800506a:	88da      	ldrh	r2, [r3, #6]
 800506c:	4291      	cmp	r1, r2
 800506e:	d1f1      	bne.n	8005054 <validate+0xa>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005070:	7858      	ldrb	r0, [r3, #1]
 8005072:	f7ff fec3 	bl	8004dfc <disk_status>
 8005076:	2301      	movs	r3, #1
 8005078:	4018      	ands	r0, r3
 800507a:	d1eb      	bne.n	8005054 <validate+0xa>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800507c:	682b      	ldr	r3, [r5, #0]
 800507e:	e7eb      	b.n	8005058 <validate+0xe>

08005080 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005080:	2300      	movs	r3, #0
 8005082:	b510      	push	{r4, lr}
			*d++ = *s++;
 8005084:	5ccc      	ldrb	r4, [r1, r3]
 8005086:	54c4      	strb	r4, [r0, r3]
 8005088:	3301      	adds	r3, #1
		} while (--cnt);
 800508a:	429a      	cmp	r2, r3
 800508c:	d1fa      	bne.n	8005084 <mem_cpy.part.0+0x4>
}
 800508e:	bd10      	pop	{r4, pc}

08005090 <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 8005090:	7eca      	ldrb	r2, [r1, #27]
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
 8005092:	b510      	push	{r4, lr}
 8005094:	0004      	movs	r4, r0
	rv = rv << 8 | ptr[0];
 8005096:	7e88      	ldrb	r0, [r1, #26]
 8005098:	0212      	lsls	r2, r2, #8
	cl = ld_word(dir + DIR_FstClusLO);
 800509a:	4310      	orrs	r0, r2
	if (fs->fs_type == FS_FAT32) {
 800509c:	2c03      	cmp	r4, #3
 800509e:	d105      	bne.n	80050ac <ld_clust.isra.1+0x1c>
	rv = rv << 8 | ptr[0];
 80050a0:	7d4a      	ldrb	r2, [r1, #21]
 80050a2:	7d0b      	ldrb	r3, [r1, #20]
 80050a4:	0212      	lsls	r2, r2, #8
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80050a6:	4313      	orrs	r3, r2
 80050a8:	041b      	lsls	r3, r3, #16
 80050aa:	4318      	orrs	r0, r3
}
 80050ac:	bd10      	pop	{r4, pc}

080050ae <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 80050ae:	0a13      	lsrs	r3, r2, #8
 80050b0:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 80050b2:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 80050b4:	7803      	ldrb	r3, [r0, #0]
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d103      	bne.n	80050c2 <st_clust.isra.2+0x14>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80050ba:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80050bc:	750a      	strb	r2, [r1, #20]
 80050be:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 80050c0:	754a      	strb	r2, [r1, #21]
}
 80050c2:	4770      	bx	lr

080050c4 <get_fileinfo.part.3>:
void get_fileinfo (		/* No return code */
 80050c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		c = (TCHAR)dp->dir[i++];
 80050c6:	2300      	movs	r3, #0
 80050c8:	6a05      	ldr	r5, [r0, #32]
void get_fileinfo (		/* No return code */
 80050ca:	000c      	movs	r4, r1
		c = (TCHAR)dp->dir[i++];
 80050cc:	001a      	movs	r2, r3
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80050ce:	202e      	movs	r0, #46	; 0x2e
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80050d0:	26e5      	movs	r6, #229	; 0xe5
		c = (TCHAR)dp->dir[i++];
 80050d2:	1c51      	adds	r1, r2, #1
 80050d4:	5caa      	ldrb	r2, [r5, r2]
		if (c == ' ') continue;				/* Skip padding spaces */
 80050d6:	2a20      	cmp	r2, #32
 80050d8:	d00a      	beq.n	80050f0 <get_fileinfo.part.3+0x2c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80050da:	2a05      	cmp	r2, #5
 80050dc:	d100      	bne.n	80050e0 <get_fileinfo.part.3+0x1c>
 80050de:	0032      	movs	r2, r6
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80050e0:	2909      	cmp	r1, #9
 80050e2:	d102      	bne.n	80050ea <get_fileinfo.part.3+0x26>
 80050e4:	18e7      	adds	r7, r4, r3
 80050e6:	7278      	strb	r0, [r7, #9]
 80050e8:	3301      	adds	r3, #1
		fno->fname[j++] = c;
 80050ea:	18e7      	adds	r7, r4, r3
 80050ec:	727a      	strb	r2, [r7, #9]
 80050ee:	3301      	adds	r3, #1
 80050f0:	000a      	movs	r2, r1
	while (i < 11) {		/* Copy name body and extension */
 80050f2:	290b      	cmp	r1, #11
 80050f4:	d1ed      	bne.n	80050d2 <get_fileinfo.part.3+0xe>
	fno->fname[j] = 0;
 80050f6:	2200      	movs	r2, #0
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80050f8:	0028      	movs	r0, r5
	fno->fname[j] = 0;
 80050fa:	18e3      	adds	r3, r4, r3
 80050fc:	725a      	strb	r2, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80050fe:	7aeb      	ldrb	r3, [r5, #11]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8005100:	301c      	adds	r0, #28
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8005102:	7223      	strb	r3, [r4, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8005104:	f7ff fec6 	bl	8004e94 <ld_dword>
 8005108:	6020      	str	r0, [r4, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800510a:	0028      	movs	r0, r5
 800510c:	3016      	adds	r0, #22
 800510e:	f7ff fec1 	bl	8004e94 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8005112:	80e0      	strh	r0, [r4, #6]
 8005114:	0c00      	lsrs	r0, r0, #16
 8005116:	80a0      	strh	r0, [r4, #4]
}
 8005118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800511a <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800511a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800511c:	0007      	movs	r7, r0
		wsect = fs->winsect;	/* Current sector number */
 800511e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005120:	3730      	adds	r7, #48	; 0x30
 8005122:	2301      	movs	r3, #1
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8005124:	0004      	movs	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005126:	002a      	movs	r2, r5
 8005128:	7840      	ldrb	r0, [r0, #1]
 800512a:	0039      	movs	r1, r7
 800512c:	f7ff fe96 	bl	8004e5c <disk_write>
			res = FR_DISK_ERR;
 8005130:	2301      	movs	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005132:	2800      	cmp	r0, #0
 8005134:	d106      	bne.n	8005144 <sync_window.part.4+0x2a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005136:	6a23      	ldr	r3, [r4, #32]
 8005138:	69a2      	ldr	r2, [r4, #24]
			fs->wflag = 0;
 800513a:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800513c:	1aeb      	subs	r3, r5, r3
 800513e:	4293      	cmp	r3, r2
 8005140:	d302      	bcc.n	8005148 <sync_window.part.4+0x2e>
	FRESULT res = FR_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	0018      	movs	r0, r3
 8005146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005148:	78a6      	ldrb	r6, [r4, #2]
 800514a:	2e01      	cmp	r6, #1
 800514c:	d9f9      	bls.n	8005142 <sync_window.part.4+0x28>
					wsect += fs->fsize;
 800514e:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005150:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8005152:	18ed      	adds	r5, r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8005154:	002a      	movs	r2, r5
 8005156:	2301      	movs	r3, #1
 8005158:	0039      	movs	r1, r7
 800515a:	f7ff fe7f 	bl	8004e5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800515e:	3e01      	subs	r6, #1
 8005160:	e7f3      	b.n	800514a <sync_window.part.4+0x30>

08005162 <sync_window>:
	FRESULT res = FR_OK;
 8005162:	2300      	movs	r3, #0
{
 8005164:	b510      	push	{r4, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005166:	78c2      	ldrb	r2, [r0, #3]
 8005168:	429a      	cmp	r2, r3
 800516a:	d002      	beq.n	8005172 <sync_window+0x10>
 800516c:	f7ff ffd5 	bl	800511a <sync_window.part.4>
 8005170:	0003      	movs	r3, r0
}
 8005172:	0018      	movs	r0, r3
 8005174:	bd10      	pop	{r4, pc}
	...

08005178 <sync_fs>:
{
 8005178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517a:	0004      	movs	r4, r0
	res = sync_window(fs);
 800517c:	f7ff fff1 	bl	8005162 <sync_window>
 8005180:	1e06      	subs	r6, r0, #0
	if (res == FR_OK) {
 8005182:	d145      	bne.n	8005210 <sync_fs+0x98>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005184:	7823      	ldrb	r3, [r4, #0]
 8005186:	2b03      	cmp	r3, #3
 8005188:	d13a      	bne.n	8005200 <sync_fs+0x88>
 800518a:	7927      	ldrb	r7, [r4, #4]
 800518c:	2f01      	cmp	r7, #1
 800518e:	d137      	bne.n	8005200 <sync_fs+0x88>
			mem_set(fs->win, 0, SS(fs));
 8005190:	0025      	movs	r5, r4
 8005192:	2280      	movs	r2, #128	; 0x80
 8005194:	3530      	adds	r5, #48	; 0x30
 8005196:	0001      	movs	r1, r0
 8005198:	0092      	lsls	r2, r2, #2
 800519a:	0028      	movs	r0, r5
 800519c:	f7ff fe8d 	bl	8004eba <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 80051a0:	2255      	movs	r2, #85	; 0x55
 80051a2:	4b1c      	ldr	r3, [pc, #112]	; (8005214 <sync_fs+0x9c>)
	*ptr++ = (BYTE)val;
 80051a4:	2141      	movs	r1, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 80051a6:	54e2      	strb	r2, [r4, r3]
	*ptr++ = (BYTE)val;
 80051a8:	4b1b      	ldr	r3, [pc, #108]	; (8005218 <sync_fs+0xa0>)
 80051aa:	1892      	adds	r2, r2, r2
 80051ac:	54e2      	strb	r2, [r4, r3]
	*ptr++ = (BYTE)val; val >>= 8;
 80051ae:	0022      	movs	r2, r4
	*ptr++ = (BYTE)val; val >>= 8;
 80051b0:	3bde      	subs	r3, #222	; 0xde
 80051b2:	3bff      	subs	r3, #255	; 0xff
	*ptr++ = (BYTE)val; val >>= 8;
 80051b4:	3231      	adds	r2, #49	; 0x31
	*ptr++ = (BYTE)val; val >>= 8;
 80051b6:	702b      	strb	r3, [r5, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80051b8:	7013      	strb	r3, [r2, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80051ba:	0023      	movs	r3, r4
 80051bc:	2261      	movs	r2, #97	; 0x61
 80051be:	3332      	adds	r3, #50	; 0x32
	*ptr++ = (BYTE)val; val >>= 8;
 80051c0:	2085      	movs	r0, #133	; 0x85
	*ptr++ = (BYTE)val; val >>= 8;
 80051c2:	701a      	strb	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 80051c4:	7059      	strb	r1, [r3, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 80051c6:	2372      	movs	r3, #114	; 0x72
 80051c8:	0080      	lsls	r0, r0, #2
 80051ca:	5423      	strb	r3, [r4, r0]
	*ptr++ = (BYTE)val; val >>= 8;
 80051cc:	4813      	ldr	r0, [pc, #76]	; (800521c <sync_fs+0xa4>)
 80051ce:	5423      	strb	r3, [r4, r0]
	*ptr++ = (BYTE)val; val >>= 8;
 80051d0:	4b13      	ldr	r3, [pc, #76]	; (8005220 <sync_fs+0xa8>)
 80051d2:	54e1      	strb	r1, [r4, r3]
	*ptr++ = (BYTE)val;
 80051d4:	4b13      	ldr	r3, [pc, #76]	; (8005224 <sync_fs+0xac>)
 80051d6:	54e2      	strb	r2, [r4, r3]
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80051d8:	3301      	adds	r3, #1
 80051da:	18e0      	adds	r0, r4, r3
 80051dc:	6921      	ldr	r1, [r4, #16]
 80051de:	f7ff fe64 	bl	8004eaa <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80051e2:	2387      	movs	r3, #135	; 0x87
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	18e0      	adds	r0, r4, r3
 80051e8:	68e1      	ldr	r1, [r4, #12]
 80051ea:	f7ff fe5e 	bl	8004eaa <st_dword>
			fs->winsect = fs->volbase + 1;
 80051ee:	69e3      	ldr	r3, [r4, #28]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80051f0:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80051f6:	003b      	movs	r3, r7
 80051f8:	0029      	movs	r1, r5
 80051fa:	f7ff fe2f 	bl	8004e5c <disk_write>
			fs->fsi_flag = 0;
 80051fe:	7126      	strb	r6, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005200:	2200      	movs	r2, #0
 8005202:	7860      	ldrb	r0, [r4, #1]
 8005204:	0011      	movs	r1, r2
 8005206:	f7ff fe37 	bl	8004e78 <disk_ioctl>
 800520a:	1e43      	subs	r3, r0, #1
 800520c:	4198      	sbcs	r0, r3
 800520e:	b2c0      	uxtb	r0, r0
}
 8005210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	0000022e 	.word	0x0000022e
 8005218:	0000022f 	.word	0x0000022f
 800521c:	00000215 	.word	0x00000215
 8005220:	00000216 	.word	0x00000216
 8005224:	00000217 	.word	0x00000217

08005228 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005228:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 800522a:	b570      	push	{r4, r5, r6, lr}
 800522c:	0004      	movs	r4, r0
 800522e:	000e      	movs	r6, r1
	FRESULT res = FR_OK;
 8005230:	2500      	movs	r5, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005232:	428b      	cmp	r3, r1
 8005234:	d010      	beq.n	8005258 <move_window+0x30>
		res = sync_window(fs);		/* Write-back changes */
 8005236:	f7ff ff94 	bl	8005162 <sync_window>
 800523a:	1e05      	subs	r5, r0, #0
		if (res == FR_OK) {			/* Fill sector window with new data */
 800523c:	d10c      	bne.n	8005258 <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800523e:	0021      	movs	r1, r4
 8005240:	7860      	ldrb	r0, [r4, #1]
 8005242:	2301      	movs	r3, #1
 8005244:	0032      	movs	r2, r6
 8005246:	3130      	adds	r1, #48	; 0x30
 8005248:	f7ff fdfa 	bl	8004e40 <disk_read>
 800524c:	2800      	cmp	r0, #0
 800524e:	d002      	beq.n	8005256 <move_window+0x2e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005250:	2601      	movs	r6, #1
				res = FR_DISK_ERR;
 8005252:	3501      	adds	r5, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005254:	4276      	negs	r6, r6
			fs->winsect = sector;
 8005256:	62e6      	str	r6, [r4, #44]	; 0x2c
}
 8005258:	0028      	movs	r0, r5
 800525a:	bd70      	pop	{r4, r5, r6, pc}

0800525c <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800525c:	2300      	movs	r3, #0
{
 800525e:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005260:	70c3      	strb	r3, [r0, #3]
 8005262:	3b01      	subs	r3, #1
 8005264:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 8005266:	0004      	movs	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005268:	f7ff ffde 	bl	8005228 <move_window>
 800526c:	2304      	movs	r3, #4
 800526e:	2800      	cmp	r0, #0
 8005270:	d129      	bne.n	80052c6 <check_fs+0x6a>
	rv = ptr[1];
 8005272:	4b16      	ldr	r3, [pc, #88]	; (80052cc <check_fs+0x70>)
	rv = rv << 8 | ptr[0];
 8005274:	4a16      	ldr	r2, [pc, #88]	; (80052d0 <check_fs+0x74>)
 8005276:	5ce3      	ldrb	r3, [r4, r3]
 8005278:	5ca2      	ldrb	r2, [r4, r2]
 800527a:	021b      	lsls	r3, r3, #8
 800527c:	431a      	orrs	r2, r3
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800527e:	4915      	ldr	r1, [pc, #84]	; (80052d4 <check_fs+0x78>)
 8005280:	b212      	sxth	r2, r2
 8005282:	2303      	movs	r3, #3
 8005284:	428a      	cmp	r2, r1
 8005286:	d11e      	bne.n	80052c6 <check_fs+0x6a>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005288:	0023      	movs	r3, r4
 800528a:	3330      	adds	r3, #48	; 0x30
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2be9      	cmp	r3, #233	; 0xe9
 8005290:	d006      	beq.n	80052a0 <check_fs+0x44>
 8005292:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005294:	4a10      	ldr	r2, [pc, #64]	; (80052d8 <check_fs+0x7c>)
 8005296:	4911      	ldr	r1, [pc, #68]	; (80052dc <check_fs+0x80>)
 8005298:	401a      	ands	r2, r3
	return 2;
 800529a:	2302      	movs	r3, #2
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800529c:	428a      	cmp	r2, r1
 800529e:	d112      	bne.n	80052c6 <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80052a0:	0020      	movs	r0, r4
 80052a2:	3066      	adds	r0, #102	; 0x66
 80052a4:	f7ff fdf6 	bl	8004e94 <ld_dword>
 80052a8:	4a0d      	ldr	r2, [pc, #52]	; (80052e0 <check_fs+0x84>)
 80052aa:	0200      	lsls	r0, r0, #8
 80052ac:	0a00      	lsrs	r0, r0, #8
 80052ae:	2300      	movs	r3, #0
 80052b0:	4290      	cmp	r0, r2
 80052b2:	d008      	beq.n	80052c6 <check_fs+0x6a>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80052b4:	0020      	movs	r0, r4
 80052b6:	3082      	adds	r0, #130	; 0x82
 80052b8:	f7ff fdec 	bl	8004e94 <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80052bc:	4b09      	ldr	r3, [pc, #36]	; (80052e4 <check_fs+0x88>)
 80052be:	18c3      	adds	r3, r0, r3
 80052c0:	1e58      	subs	r0, r3, #1
 80052c2:	4183      	sbcs	r3, r0
 80052c4:	005b      	lsls	r3, r3, #1
}
 80052c6:	0018      	movs	r0, r3
 80052c8:	bd10      	pop	{r4, pc}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	0000022f 	.word	0x0000022f
 80052d0:	0000022e 	.word	0x0000022e
 80052d4:	ffffaa55 	.word	0xffffaa55
 80052d8:	00ff00ff 	.word	0x00ff00ff
 80052dc:	009000eb 	.word	0x009000eb
 80052e0:	00544146 	.word	0x00544146
 80052e4:	ccabbeba 	.word	0xccabbeba

080052e8 <find_volume>:
	*rfs = 0;
 80052e8:	2300      	movs	r3, #0
{
 80052ea:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 80052ec:	600b      	str	r3, [r1, #0]
{
 80052ee:	b08b      	sub	sp, #44	; 0x2c
 80052f0:	000d      	movs	r5, r1
 80052f2:	0017      	movs	r7, r2
	vol = get_ldnumber(path);
 80052f4:	f7ff fe93 	bl	800501e <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80052f8:	230b      	movs	r3, #11
	vol = get_ldnumber(path);
 80052fa:	1e06      	subs	r6, r0, #0
	if (vol < 0) return FR_INVALID_DRIVE;
 80052fc:	db16      	blt.n	800532c <find_volume+0x44>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80052fe:	4ba8      	ldr	r3, [pc, #672]	; (80055a0 <find_volume+0x2b8>)
 8005300:	0082      	lsls	r2, r0, #2
 8005302:	58d4      	ldr	r4, [r2, r3]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005304:	230c      	movs	r3, #12
 8005306:	2c00      	cmp	r4, #0
 8005308:	d010      	beq.n	800532c <find_volume+0x44>
	*rfs = fs;							/* Return pointer to the file system object */
 800530a:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800530c:	2501      	movs	r5, #1
	if (fs->fs_type) {					/* If the volume has been mounted */
 800530e:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005310:	43af      	bics	r7, r5
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00d      	beq.n	8005332 <find_volume+0x4a>
		stat = disk_status(fs->drv);
 8005316:	7860      	ldrb	r0, [r4, #1]
 8005318:	f7ff fd70 	bl	8004dfc <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800531c:	4005      	ands	r5, r0
 800531e:	d108      	bne.n	8005332 <find_volume+0x4a>
			return FR_OK;				/* The file system object is valid */
 8005320:	002b      	movs	r3, r5
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005322:	2f00      	cmp	r7, #0
 8005324:	d002      	beq.n	800532c <find_volume+0x44>
 8005326:	0742      	lsls	r2, r0, #29
 8005328:	d500      	bpl.n	800532c <find_volume+0x44>
				return FR_WRITE_PROTECTED;
 800532a:	230a      	movs	r3, #10
}
 800532c:	0018      	movs	r0, r3
 800532e:	b00b      	add	sp, #44	; 0x2c
 8005330:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8005332:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005334:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8005336:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005338:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800533a:	f7ff fd6d 	bl	8004e18 <disk_initialize>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800533e:	2303      	movs	r3, #3
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005340:	07c2      	lsls	r2, r0, #31
 8005342:	d4f3      	bmi.n	800532c <find_volume+0x44>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005344:	2f00      	cmp	r7, #0
 8005346:	d001      	beq.n	800534c <find_volume+0x64>
 8005348:	0743      	lsls	r3, r0, #29
 800534a:	d4ee      	bmi.n	800532a <find_volume+0x42>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800534c:	2100      	movs	r1, #0
 800534e:	0020      	movs	r0, r4
 8005350:	f7ff ff84 	bl	800525c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005354:	2802      	cmp	r0, #2
 8005356:	d125      	bne.n	80053a4 <find_volume+0xbc>
 8005358:	0026      	movs	r6, r4
 800535a:	2500      	movs	r5, #0
 800535c:	36f7      	adds	r6, #247	; 0xf7
 800535e:	36ff      	adds	r6, #255	; 0xff
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005360:	2000      	movs	r0, #0
 8005362:	1f33      	subs	r3, r6, #4
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	4283      	cmp	r3, r0
 8005368:	d002      	beq.n	8005370 <find_volume+0x88>
 800536a:	0030      	movs	r0, r6
 800536c:	f7ff fd92 	bl	8004e94 <ld_dword>
 8005370:	ab06      	add	r3, sp, #24
 8005372:	50e8      	str	r0, [r5, r3]
 8005374:	3504      	adds	r5, #4
 8005376:	3610      	adds	r6, #16
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005378:	2d10      	cmp	r5, #16
 800537a:	d1f1      	bne.n	8005360 <find_volume+0x78>
 800537c:	2500      	movs	r5, #0
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800537e:	2603      	movs	r6, #3
			bsect = br[i];
 8005380:	ab06      	add	r3, sp, #24
 8005382:	595f      	ldr	r7, [r3, r5]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005384:	0030      	movs	r0, r6
 8005386:	2f00      	cmp	r7, #0
 8005388:	d005      	beq.n	8005396 <find_volume+0xae>
 800538a:	0039      	movs	r1, r7
 800538c:	0020      	movs	r0, r4
 800538e:	f7ff ff65 	bl	800525c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005392:	2801      	cmp	r0, #1
 8005394:	d90e      	bls.n	80053b4 <find_volume+0xcc>
 8005396:	3504      	adds	r5, #4
 8005398:	2d10      	cmp	r5, #16
 800539a:	d1f1      	bne.n	8005380 <find_volume+0x98>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800539c:	2301      	movs	r3, #1
 800539e:	2804      	cmp	r0, #4
 80053a0:	d105      	bne.n	80053ae <find_volume+0xc6>
 80053a2:	e7c3      	b.n	800532c <find_volume+0x44>
 80053a4:	2301      	movs	r3, #1
 80053a6:	2804      	cmp	r0, #4
 80053a8:	d0c0      	beq.n	800532c <find_volume+0x44>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80053aa:	4298      	cmp	r0, r3
 80053ac:	d901      	bls.n	80053b2 <find_volume+0xca>
 80053ae:	230d      	movs	r3, #13
 80053b0:	e7bc      	b.n	800532c <find_volume+0x44>
	bsect = 0;
 80053b2:	2700      	movs	r7, #0
	rv = ptr[1];
 80053b4:	0023      	movs	r3, r4
 80053b6:	333c      	adds	r3, #60	; 0x3c
	rv = rv << 8 | ptr[0];
 80053b8:	781a      	ldrb	r2, [r3, #0]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	0212      	lsls	r2, r2, #8
 80053c0:	4313      	orrs	r3, r2
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80053c2:	2280      	movs	r2, #128	; 0x80
 80053c4:	b21b      	sxth	r3, r3
 80053c6:	0092      	lsls	r2, r2, #2
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d1f0      	bne.n	80053ae <find_volume+0xc6>
	rv = ptr[1];
 80053cc:	0023      	movs	r3, r4
 80053ce:	3347      	adds	r3, #71	; 0x47
	rv = rv << 8 | ptr[0];
 80053d0:	781a      	ldrb	r2, [r3, #0]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	0212      	lsls	r2, r2, #8
 80053d8:	4313      	orrs	r3, r2
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80053da:	d100      	bne.n	80053de <find_volume+0xf6>
 80053dc:	e0c8      	b.n	8005570 <find_volume+0x288>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80053de:	9302      	str	r3, [sp, #8]
		fs->fsize = fasize;
 80053e0:	9b02      	ldr	r3, [sp, #8]
 80053e2:	61a3      	str	r3, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80053e4:	0023      	movs	r3, r4
 80053e6:	3340      	adds	r3, #64	; 0x40
 80053e8:	781e      	ldrb	r6, [r3, #0]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80053ea:	1e73      	subs	r3, r6, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80053ec:	70a6      	strb	r6, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d8dd      	bhi.n	80053ae <find_volume+0xc6>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80053f2:	0023      	movs	r3, r4
 80053f4:	333d      	adds	r3, #61	; 0x3d
 80053f6:	781d      	ldrb	r5, [r3, #0]
 80053f8:	b2ab      	uxth	r3, r5
 80053fa:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0d6      	beq.n	80053ae <find_volume+0xc6>
 8005400:	1e6b      	subs	r3, r5, #1
 8005402:	421d      	tst	r5, r3
 8005404:	d1d3      	bne.n	80053ae <find_volume+0xc6>
	rv = ptr[1];
 8005406:	0023      	movs	r3, r4
	rv = rv << 8 | ptr[0];
 8005408:	0022      	movs	r2, r4
	rv = ptr[1];
 800540a:	3342      	adds	r3, #66	; 0x42
	rv = rv << 8 | ptr[0];
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	3241      	adds	r2, #65	; 0x41
 8005410:	7812      	ldrb	r2, [r2, #0]
 8005412:	021b      	lsls	r3, r3, #8
 8005414:	431a      	orrs	r2, r3
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005416:	466b      	mov	r3, sp
	rv = rv << 8 | ptr[0];
 8005418:	9201      	str	r2, [sp, #4]
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800541a:	889b      	ldrh	r3, [r3, #4]
 800541c:	8123      	strh	r3, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800541e:	0013      	movs	r3, r2
 8005420:	071b      	lsls	r3, r3, #28
 8005422:	d1c4      	bne.n	80053ae <find_volume+0xc6>
	rv = ptr[1];
 8005424:	0023      	movs	r3, r4
 8005426:	3344      	adds	r3, #68	; 0x44
	rv = rv << 8 | ptr[0];
 8005428:	7818      	ldrb	r0, [r3, #0]
 800542a:	3b01      	subs	r3, #1
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	0200      	lsls	r0, r0, #8
 8005430:	4318      	orrs	r0, r3
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005432:	d103      	bne.n	800543c <find_volume+0x154>
 8005434:	0020      	movs	r0, r4
 8005436:	3050      	adds	r0, #80	; 0x50
 8005438:	f7ff fd2c 	bl	8004e94 <ld_dword>
	rv = ptr[1];
 800543c:	0023      	movs	r3, r4
	rv = rv << 8 | ptr[0];
 800543e:	0022      	movs	r2, r4
	rv = ptr[1];
 8005440:	333f      	adds	r3, #63	; 0x3f
	rv = rv << 8 | ptr[0];
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	323e      	adds	r2, #62	; 0x3e
 8005446:	7812      	ldrb	r2, [r2, #0]
 8005448:	021b      	lsls	r3, r3, #8
 800544a:	431a      	orrs	r2, r3
 800544c:	9204      	str	r2, [sp, #16]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800544e:	d0ae      	beq.n	80053ae <find_volume+0xc6>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005450:	9b02      	ldr	r3, [sp, #8]
 8005452:	4373      	muls	r3, r6
 8005454:	9305      	str	r3, [sp, #20]
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005456:	9b01      	ldr	r3, [sp, #4]
 8005458:	091b      	lsrs	r3, r3, #4
 800545a:	189b      	adds	r3, r3, r2
 800545c:	9a05      	ldr	r2, [sp, #20]
 800545e:	189b      	adds	r3, r3, r2
 8005460:	9303      	str	r3, [sp, #12]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005462:	4298      	cmp	r0, r3
 8005464:	d3a3      	bcc.n	80053ae <find_volume+0xc6>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005466:	1ac0      	subs	r0, r0, r3
 8005468:	0029      	movs	r1, r5
 800546a:	f7fa fe79 	bl	8000160 <__udivsi3>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800546e:	2800      	cmp	r0, #0
 8005470:	d09d      	beq.n	80053ae <find_volume+0xc6>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005472:	4b4c      	ldr	r3, [pc, #304]	; (80055a4 <find_volume+0x2bc>)
		fmt = FS_FAT32;
 8005474:	2603      	movs	r6, #3
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005476:	4298      	cmp	r0, r3
 8005478:	d804      	bhi.n	8005484 <find_volume+0x19c>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800547a:	4e4b      	ldr	r6, [pc, #300]	; (80055a8 <find_volume+0x2c0>)
 800547c:	4286      	cmp	r6, r0
 800547e:	41b6      	sbcs	r6, r6
 8005480:	4276      	negs	r6, r6
 8005482:	3601      	adds	r6, #1
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005484:	9b04      	ldr	r3, [sp, #16]
		fs->database = bsect + sysect;					/* Data start sector */
 8005486:	9a03      	ldr	r2, [sp, #12]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005488:	1c85      	adds	r5, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800548a:	18fb      	adds	r3, r7, r3
		fs->database = bsect + sysect;					/* Data start sector */
 800548c:	18ba      	adds	r2, r7, r2
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800548e:	6165      	str	r5, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005490:	61e7      	str	r7, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005492:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005494:	62a2      	str	r2, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8005496:	2e03      	cmp	r6, #3
 8005498:	d170      	bne.n	800557c <find_volume+0x294>
	rv = ptr[1];
 800549a:	0023      	movs	r3, r4
 800549c:	335b      	adds	r3, #91	; 0x5b
	rv = rv << 8 | ptr[0];
 800549e:	781a      	ldrb	r2, [r3, #0]
 80054a0:	3b01      	subs	r3, #1
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	0212      	lsls	r2, r2, #8
 80054a6:	4313      	orrs	r3, r2
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80054a8:	d000      	beq.n	80054ac <find_volume+0x1c4>
 80054aa:	e780      	b.n	80053ae <find_volume+0xc6>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80054ac:	9b01      	ldr	r3, [sp, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d000      	beq.n	80054b4 <find_volume+0x1cc>
 80054b2:	e77c      	b.n	80053ae <find_volume+0xc6>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80054b4:	0020      	movs	r0, r4
 80054b6:	305c      	adds	r0, #92	; 0x5c
 80054b8:	f7ff fcec 	bl	8004e94 <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80054bc:	00ad      	lsls	r5, r5, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80054be:	6260      	str	r0, [r4, #36]	; 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80054c0:	4b3a      	ldr	r3, [pc, #232]	; (80055ac <find_volume+0x2c4>)
 80054c2:	18ed      	adds	r5, r5, r3
 80054c4:	9b02      	ldr	r3, [sp, #8]
 80054c6:	0a6d      	lsrs	r5, r5, #9
 80054c8:	42ab      	cmp	r3, r5
 80054ca:	d200      	bcs.n	80054ce <find_volume+0x1e6>
 80054cc:	e76f      	b.n	80053ae <find_volume+0xc6>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80054ce:	2301      	movs	r3, #1
 80054d0:	425b      	negs	r3, r3
 80054d2:	6123      	str	r3, [r4, #16]
 80054d4:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
 80054d6:	3381      	adds	r3, #129	; 0x81
 80054d8:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80054da:	2e03      	cmp	r6, #3
 80054dc:	d134      	bne.n	8005548 <find_volume+0x260>
	rv = ptr[1];
 80054de:	0023      	movs	r3, r4
 80054e0:	3361      	adds	r3, #97	; 0x61
	rv = rv << 8 | ptr[0];
 80054e2:	781a      	ldrb	r2, [r3, #0]
 80054e4:	3b01      	subs	r3, #1
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	0212      	lsls	r2, r2, #8
 80054ea:	4313      	orrs	r3, r2
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d12b      	bne.n	8005548 <find_volume+0x260>
			&& move_window(fs, bsect + 1) == FR_OK)
 80054f0:	1c79      	adds	r1, r7, #1
 80054f2:	0020      	movs	r0, r4
 80054f4:	f7ff fe98 	bl	8005228 <move_window>
 80054f8:	2800      	cmp	r0, #0
 80054fa:	d125      	bne.n	8005548 <find_volume+0x260>
	rv = ptr[1];
 80054fc:	4b2c      	ldr	r3, [pc, #176]	; (80055b0 <find_volume+0x2c8>)
			fs->fsi_flag = 0;
 80054fe:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8005500:	5ce2      	ldrb	r2, [r4, r3]
 8005502:	4b2c      	ldr	r3, [pc, #176]	; (80055b4 <find_volume+0x2cc>)
 8005504:	0212      	lsls	r2, r2, #8
 8005506:	5ce3      	ldrb	r3, [r4, r3]
 8005508:	4313      	orrs	r3, r2
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800550a:	4a2b      	ldr	r2, [pc, #172]	; (80055b8 <find_volume+0x2d0>)
 800550c:	b21b      	sxth	r3, r3
 800550e:	4293      	cmp	r3, r2
 8005510:	d11a      	bne.n	8005548 <find_volume+0x260>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005512:	0020      	movs	r0, r4
 8005514:	3030      	adds	r0, #48	; 0x30
 8005516:	f7ff fcbd 	bl	8004e94 <ld_dword>
 800551a:	4b28      	ldr	r3, [pc, #160]	; (80055bc <find_volume+0x2d4>)
 800551c:	4298      	cmp	r0, r3
 800551e:	d113      	bne.n	8005548 <find_volume+0x260>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005520:	2385      	movs	r3, #133	; 0x85
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	18e0      	adds	r0, r4, r3
 8005526:	f7ff fcb5 	bl	8004e94 <ld_dword>
 800552a:	4b25      	ldr	r3, [pc, #148]	; (80055c0 <find_volume+0x2d8>)
 800552c:	4298      	cmp	r0, r3
 800552e:	d10b      	bne.n	8005548 <find_volume+0x260>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005530:	2386      	movs	r3, #134	; 0x86
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	18e0      	adds	r0, r4, r3
 8005536:	f7ff fcad 	bl	8004e94 <ld_dword>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800553a:	2387      	movs	r3, #135	; 0x87
 800553c:	009b      	lsls	r3, r3, #2
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800553e:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005540:	18e0      	adds	r0, r4, r3
 8005542:	f7ff fca7 	bl	8004e94 <ld_dword>
 8005546:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;		/* File system mount ID */
 8005548:	4a1e      	ldr	r2, [pc, #120]	; (80055c4 <find_volume+0x2dc>)
	fs->fs_type = fmt;		/* FAT sub-type */
 800554a:	7026      	strb	r6, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800554c:	8813      	ldrh	r3, [r2, #0]
 800554e:	3301      	adds	r3, #1
 8005550:	b29b      	uxth	r3, r3
 8005552:	8013      	strh	r3, [r2, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005554:	4a1c      	ldr	r2, [pc, #112]	; (80055c8 <find_volume+0x2e0>)
	fs->id = ++Fsid;		/* File system mount ID */
 8005556:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005558:	6813      	ldr	r3, [r2, #0]
 800555a:	429c      	cmp	r4, r3
 800555c:	d101      	bne.n	8005562 <find_volume+0x27a>
 800555e:	2300      	movs	r3, #0
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	6911      	ldr	r1, [r2, #16]
 8005564:	2300      	movs	r3, #0
 8005566:	428c      	cmp	r4, r1
 8005568:	d000      	beq.n	800556c <find_volume+0x284>
 800556a:	e6df      	b.n	800532c <find_volume+0x44>
 800556c:	6113      	str	r3, [r2, #16]
 800556e:	e6dd      	b.n	800532c <find_volume+0x44>
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005570:	0020      	movs	r0, r4
 8005572:	3054      	adds	r0, #84	; 0x54
 8005574:	f7ff fc8e 	bl	8004e94 <ld_dword>
 8005578:	9002      	str	r0, [sp, #8]
 800557a:	e731      	b.n	80053e0 <find_volume+0xf8>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800557c:	9a01      	ldr	r2, [sp, #4]
 800557e:	2a00      	cmp	r2, #0
 8005580:	d100      	bne.n	8005584 <find_volume+0x29c>
 8005582:	e714      	b.n	80053ae <find_volume+0xc6>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005584:	9a05      	ldr	r2, [sp, #20]
 8005586:	18d3      	adds	r3, r2, r3
 8005588:	6263      	str	r3, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800558a:	2e02      	cmp	r6, #2
 800558c:	d101      	bne.n	8005592 <find_volume+0x2aa>
 800558e:	006d      	lsls	r5, r5, #1
 8005590:	e796      	b.n	80054c0 <find_volume+0x1d8>
 8005592:	2003      	movs	r0, #3
 8005594:	2301      	movs	r3, #1
 8005596:	4368      	muls	r0, r5
 8005598:	401d      	ands	r5, r3
 800559a:	0840      	lsrs	r0, r0, #1
 800559c:	1945      	adds	r5, r0, r5
 800559e:	e78f      	b.n	80054c0 <find_volume+0x1d8>
 80055a0:	200013b0 	.word	0x200013b0
 80055a4:	0000fff5 	.word	0x0000fff5
 80055a8:	00000ff5 	.word	0x00000ff5
 80055ac:	000001ff 	.word	0x000001ff
 80055b0:	0000022f 	.word	0x0000022f
 80055b4:	0000022e 	.word	0x0000022e
 80055b8:	ffffaa55 	.word	0xffffaa55
 80055bc:	41615252 	.word	0x41615252
 80055c0:	61417272 	.word	0x61417272
 80055c4:	200013d4 	.word	0x200013d4
 80055c8:	200013b4 	.word	0x200013b4

080055cc <put_fat>:
{
 80055cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ce:	0006      	movs	r6, r0
 80055d0:	b085      	sub	sp, #20
 80055d2:	000c      	movs	r4, r1
 80055d4:	0015      	movs	r5, r2
	FRESULT res = FR_INT_ERR;
 80055d6:	2702      	movs	r7, #2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80055d8:	2901      	cmp	r1, #1
 80055da:	d945      	bls.n	8005668 <put_fat+0x9c>
 80055dc:	6943      	ldr	r3, [r0, #20]
 80055de:	4299      	cmp	r1, r3
 80055e0:	d242      	bcs.n	8005668 <put_fat+0x9c>
		switch (fs->fs_type) {
 80055e2:	7803      	ldrb	r3, [r0, #0]
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	42bb      	cmp	r3, r7
 80055e8:	d048      	beq.n	800567c <put_fat+0xb0>
 80055ea:	2b03      	cmp	r3, #3
 80055ec:	d058      	beq.n	80056a0 <put_fat+0xd4>
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d13a      	bne.n	8005668 <put_fat+0x9c>
			bc = (UINT)clst; bc += bc / 2;
 80055f2:	084b      	lsrs	r3, r1, #1
 80055f4:	185b      	adds	r3, r3, r1
 80055f6:	9301      	str	r3, [sp, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80055f8:	0a59      	lsrs	r1, r3, #9
 80055fa:	6a03      	ldr	r3, [r0, #32]
 80055fc:	18c9      	adds	r1, r1, r3
 80055fe:	f7ff fe13 	bl	8005228 <move_window>
 8005602:	1e07      	subs	r7, r0, #0
			if (res != FR_OK) break;
 8005604:	d130      	bne.n	8005668 <put_fat+0x9c>
			p = fs->win + bc++ % SS(fs);
 8005606:	0033      	movs	r3, r6
 8005608:	3330      	adds	r3, #48	; 0x30
 800560a:	9302      	str	r3, [sp, #8]
 800560c:	9b01      	ldr	r3, [sp, #4]
 800560e:	9a02      	ldr	r2, [sp, #8]
 8005610:	3301      	adds	r3, #1
 8005612:	9303      	str	r3, [sp, #12]
 8005614:	9b01      	ldr	r3, [sp, #4]
 8005616:	05db      	lsls	r3, r3, #23
 8005618:	0ddb      	lsrs	r3, r3, #23
 800561a:	18d3      	adds	r3, r2, r3
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800561c:	9a00      	ldr	r2, [sp, #0]
 800561e:	4014      	ands	r4, r2
 8005620:	b2ea      	uxtb	r2, r5
 8005622:	2c00      	cmp	r4, #0
 8005624:	d008      	beq.n	8005638 <put_fat+0x6c>
 8005626:	210f      	movs	r1, #15
 8005628:	20ff      	movs	r0, #255	; 0xff
 800562a:	781a      	ldrb	r2, [r3, #0]
 800562c:	0100      	lsls	r0, r0, #4
 800562e:	400a      	ands	r2, r1
 8005630:	0129      	lsls	r1, r5, #4
 8005632:	4001      	ands	r1, r0
 8005634:	430a      	orrs	r2, r1
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800563a:	2301      	movs	r3, #1
 800563c:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800563e:	9b03      	ldr	r3, [sp, #12]
 8005640:	0030      	movs	r0, r6
 8005642:	0a59      	lsrs	r1, r3, #9
 8005644:	6a33      	ldr	r3, [r6, #32]
 8005646:	18c9      	adds	r1, r1, r3
 8005648:	f7ff fdee 	bl	8005228 <move_window>
 800564c:	1e07      	subs	r7, r0, #0
			if (res != FR_OK) break;
 800564e:	d10b      	bne.n	8005668 <put_fat+0x9c>
			p = fs->win + bc % SS(fs);
 8005650:	9b03      	ldr	r3, [sp, #12]
 8005652:	05da      	lsls	r2, r3, #23
 8005654:	9b02      	ldr	r3, [sp, #8]
 8005656:	0dd2      	lsrs	r2, r2, #23
 8005658:	189a      	adds	r2, r3, r2
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800565a:	2c00      	cmp	r4, #0
 800565c:	d007      	beq.n	800566e <put_fat+0xa2>
 800565e:	092d      	lsrs	r5, r5, #4
 8005660:	b2ed      	uxtb	r5, r5
 8005662:	7015      	strb	r5, [r2, #0]
			fs->wflag = 1;
 8005664:	2301      	movs	r3, #1
 8005666:	70f3      	strb	r3, [r6, #3]
}
 8005668:	0038      	movs	r0, r7
 800566a:	b005      	add	sp, #20
 800566c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800566e:	210f      	movs	r1, #15
 8005670:	7813      	ldrb	r3, [r2, #0]
 8005672:	0a2d      	lsrs	r5, r5, #8
 8005674:	438b      	bics	r3, r1
 8005676:	400d      	ands	r5, r1
 8005678:	431d      	orrs	r5, r3
 800567a:	e7f2      	b.n	8005662 <put_fat+0x96>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800567c:	6a03      	ldr	r3, [r0, #32]
 800567e:	0a09      	lsrs	r1, r1, #8
 8005680:	18c9      	adds	r1, r1, r3
 8005682:	f7ff fdd1 	bl	8005228 <move_window>
 8005686:	1e07      	subs	r7, r0, #0
			if (res != FR_OK) break;
 8005688:	d1ee      	bne.n	8005668 <put_fat+0x9c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800568a:	22ff      	movs	r2, #255	; 0xff
 800568c:	0033      	movs	r3, r6
 800568e:	0064      	lsls	r4, r4, #1
 8005690:	0052      	lsls	r2, r2, #1
 8005692:	3330      	adds	r3, #48	; 0x30
 8005694:	4014      	ands	r4, r2
 8005696:	191c      	adds	r4, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8005698:	7025      	strb	r5, [r4, #0]
 800569a:	0a2d      	lsrs	r5, r5, #8
	*ptr++ = (BYTE)val;
 800569c:	7065      	strb	r5, [r4, #1]
 800569e:	e7e1      	b.n	8005664 <put_fat+0x98>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80056a0:	6a03      	ldr	r3, [r0, #32]
 80056a2:	09c9      	lsrs	r1, r1, #7
 80056a4:	18c9      	adds	r1, r1, r3
 80056a6:	f7ff fdbf 	bl	8005228 <move_window>
 80056aa:	1e07      	subs	r7, r0, #0
			if (res != FR_OK) break;
 80056ac:	d1dc      	bne.n	8005668 <put_fat+0x9c>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80056ae:	22fe      	movs	r2, #254	; 0xfe
 80056b0:	0033      	movs	r3, r6
 80056b2:	0052      	lsls	r2, r2, #1
 80056b4:	00a4      	lsls	r4, r4, #2
 80056b6:	3330      	adds	r3, #48	; 0x30
 80056b8:	4014      	ands	r4, r2
 80056ba:	191c      	adds	r4, r3, r4
 80056bc:	0020      	movs	r0, r4
 80056be:	f7ff fbe9 	bl	8004e94 <ld_dword>
 80056c2:	0129      	lsls	r1, r5, #4
 80056c4:	0f00      	lsrs	r0, r0, #28
 80056c6:	0700      	lsls	r0, r0, #28
 80056c8:	0909      	lsrs	r1, r1, #4
 80056ca:	4301      	orrs	r1, r0
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80056cc:	0020      	movs	r0, r4
 80056ce:	f7ff fbec 	bl	8004eaa <st_dword>
 80056d2:	e7c7      	b.n	8005664 <put_fat+0x98>

080056d4 <get_fat.isra.8>:
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 80056d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		val = 1;	/* Internal error */
 80056d6:	2601      	movs	r6, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 80056d8:	0004      	movs	r4, r0
 80056da:	000d      	movs	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80056dc:	42b1      	cmp	r1, r6
 80056de:	d914      	bls.n	800570a <get_fat.isra.8+0x36>
 80056e0:	6943      	ldr	r3, [r0, #20]
 80056e2:	4299      	cmp	r1, r3
 80056e4:	d211      	bcs.n	800570a <get_fat.isra.8+0x36>
		switch (fs->fs_type) {
 80056e6:	7803      	ldrb	r3, [r0, #0]
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d02e      	beq.n	800574a <get_fat.isra.8+0x76>
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d03e      	beq.n	800576e <get_fat.isra.8+0x9a>
 80056f0:	42b3      	cmp	r3, r6
 80056f2:	d10a      	bne.n	800570a <get_fat.isra.8+0x36>
			bc = (UINT)clst; bc += bc / 2;
 80056f4:	084f      	lsrs	r7, r1, #1
 80056f6:	187f      	adds	r7, r7, r1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80056f8:	6a03      	ldr	r3, [r0, #32]
 80056fa:	0a79      	lsrs	r1, r7, #9
 80056fc:	18c9      	adds	r1, r1, r3
 80056fe:	f7ff fd93 	bl	8005228 <move_window>
 8005702:	2800      	cmp	r0, #0
 8005704:	d003      	beq.n	800570e <get_fat.isra.8+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005706:	2601      	movs	r6, #1
 8005708:	4276      	negs	r6, r6
}
 800570a:	0030      	movs	r0, r6
 800570c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800570e:	1c7b      	adds	r3, r7, #1
 8005710:	05ff      	lsls	r7, r7, #23
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005712:	0a59      	lsrs	r1, r3, #9
			wc = fs->win[bc++ % SS(fs)];
 8005714:	9301      	str	r3, [sp, #4]
 8005716:	0dff      	lsrs	r7, r7, #23
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005718:	6a23      	ldr	r3, [r4, #32]
			wc = fs->win[bc++ % SS(fs)];
 800571a:	19e7      	adds	r7, r4, r7
 800571c:	3730      	adds	r7, #48	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800571e:	18c9      	adds	r1, r1, r3
 8005720:	0020      	movs	r0, r4
			wc = fs->win[bc++ % SS(fs)];
 8005722:	783f      	ldrb	r7, [r7, #0]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005724:	f7ff fd80 	bl	8005228 <move_window>
 8005728:	2800      	cmp	r0, #0
 800572a:	d1ec      	bne.n	8005706 <get_fat.isra.8+0x32>
			wc |= fs->win[bc % SS(fs)] << 8;
 800572c:	9b01      	ldr	r3, [sp, #4]
 800572e:	05d8      	lsls	r0, r3, #23
 8005730:	0dc0      	lsrs	r0, r0, #23
 8005732:	1824      	adds	r4, r4, r0
 8005734:	3430      	adds	r4, #48	; 0x30
 8005736:	7820      	ldrb	r0, [r4, #0]
 8005738:	0200      	lsls	r0, r0, #8
 800573a:	4307      	orrs	r7, r0
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800573c:	4235      	tst	r5, r6
 800573e:	d001      	beq.n	8005744 <get_fat.isra.8+0x70>
 8005740:	093e      	lsrs	r6, r7, #4
 8005742:	e7e2      	b.n	800570a <get_fat.isra.8+0x36>
 8005744:	053f      	lsls	r7, r7, #20
 8005746:	0d3e      	lsrs	r6, r7, #20
 8005748:	e7df      	b.n	800570a <get_fat.isra.8+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800574a:	6a03      	ldr	r3, [r0, #32]
 800574c:	0a09      	lsrs	r1, r1, #8
 800574e:	18c9      	adds	r1, r1, r3
 8005750:	f7ff fd6a 	bl	8005228 <move_window>
 8005754:	2800      	cmp	r0, #0
 8005756:	d1d6      	bne.n	8005706 <get_fat.isra.8+0x32>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005758:	30ff      	adds	r0, #255	; 0xff
 800575a:	30ff      	adds	r0, #255	; 0xff
 800575c:	006d      	lsls	r5, r5, #1
 800575e:	4005      	ands	r5, r0
 8005760:	3430      	adds	r4, #48	; 0x30
 8005762:	1964      	adds	r4, r4, r5
	rv = rv << 8 | ptr[0];
 8005764:	7866      	ldrb	r6, [r4, #1]
 8005766:	7820      	ldrb	r0, [r4, #0]
 8005768:	0236      	lsls	r6, r6, #8
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800576a:	4306      	orrs	r6, r0
 800576c:	e7cd      	b.n	800570a <get_fat.isra.8+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800576e:	6a03      	ldr	r3, [r0, #32]
 8005770:	09c9      	lsrs	r1, r1, #7
 8005772:	18c9      	adds	r1, r1, r3
 8005774:	f7ff fd58 	bl	8005228 <move_window>
 8005778:	2800      	cmp	r0, #0
 800577a:	d1c4      	bne.n	8005706 <get_fat.isra.8+0x32>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800577c:	0020      	movs	r0, r4
 800577e:	24fe      	movs	r4, #254	; 0xfe
 8005780:	00ad      	lsls	r5, r5, #2
 8005782:	0064      	lsls	r4, r4, #1
 8005784:	3030      	adds	r0, #48	; 0x30
 8005786:	4025      	ands	r5, r4
 8005788:	1940      	adds	r0, r0, r5
 800578a:	f7ff fb83 	bl	8004e94 <ld_dword>
 800578e:	0106      	lsls	r6, r0, #4
 8005790:	0936      	lsrs	r6, r6, #4
 8005792:	e7ba      	b.n	800570a <get_fat.isra.8+0x36>

08005794 <create_chain>:
{
 8005794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005796:	1e0f      	subs	r7, r1, #0
 8005798:	9001      	str	r0, [sp, #4]
	FATFS *fs = obj->fs;
 800579a:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800579c:	d107      	bne.n	80057ae <create_chain+0x1a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800579e:	68ee      	ldr	r6, [r5, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80057a0:	2e00      	cmp	r6, #0
 80057a2:	d002      	beq.n	80057aa <create_chain+0x16>
 80057a4:	696b      	ldr	r3, [r5, #20]
 80057a6:	429e      	cmp	r6, r3
 80057a8:	d311      	bcc.n	80057ce <create_chain+0x3a>
 80057aa:	2601      	movs	r6, #1
 80057ac:	e00f      	b.n	80057ce <create_chain+0x3a>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80057ae:	0028      	movs	r0, r5
 80057b0:	f7ff ff90 	bl	80056d4 <get_fat.isra.8>
 80057b4:	0004      	movs	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 80057b6:	2801      	cmp	r0, #1
 80057b8:	d93f      	bls.n	800583a <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80057ba:	1c43      	adds	r3, r0, #1
 80057bc:	d103      	bne.n	80057c6 <create_chain+0x32>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80057be:	2401      	movs	r4, #1
 80057c0:	4264      	negs	r4, r4
}
 80057c2:	0020      	movs	r0, r4
 80057c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80057c6:	696b      	ldr	r3, [r5, #20]
 80057c8:	003e      	movs	r6, r7
 80057ca:	4298      	cmp	r0, r3
 80057cc:	d3f9      	bcc.n	80057c2 <create_chain+0x2e>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80057ce:	0034      	movs	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80057d0:	696b      	ldr	r3, [r5, #20]
			ncl++;							/* Next cluster */
 80057d2:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80057d4:	429c      	cmp	r4, r3
 80057d6:	d304      	bcc.n	80057e2 <create_chain+0x4e>
				if (ncl > scl) return 0;	/* No free cluster */
 80057d8:	2e01      	cmp	r6, #1
 80057da:	d801      	bhi.n	80057e0 <create_chain+0x4c>
 80057dc:	2400      	movs	r4, #0
 80057de:	e7f0      	b.n	80057c2 <create_chain+0x2e>
				ncl = 2;
 80057e0:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80057e2:	9b01      	ldr	r3, [sp, #4]
 80057e4:	0021      	movs	r1, r4
 80057e6:	6818      	ldr	r0, [r3, #0]
 80057e8:	f7ff ff74 	bl	80056d4 <get_fat.isra.8>
			if (cs == 0) break;				/* Found a free cluster */
 80057ec:	2800      	cmp	r0, #0
 80057ee:	d006      	beq.n	80057fe <create_chain+0x6a>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80057f0:	2801      	cmp	r0, #1
 80057f2:	d022      	beq.n	800583a <create_chain+0xa6>
 80057f4:	1c43      	adds	r3, r0, #1
 80057f6:	d0e2      	beq.n	80057be <create_chain+0x2a>
			if (ncl == scl) return 0;		/* No free cluster */
 80057f8:	42b4      	cmp	r4, r6
 80057fa:	d1e9      	bne.n	80057d0 <create_chain+0x3c>
 80057fc:	e7ee      	b.n	80057dc <create_chain+0x48>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80057fe:	2201      	movs	r2, #1
 8005800:	0021      	movs	r1, r4
 8005802:	4252      	negs	r2, r2
 8005804:	0028      	movs	r0, r5
 8005806:	f7ff fee1 	bl	80055cc <put_fat>
		if (res == FR_OK && clst != 0) {
 800580a:	2800      	cmp	r0, #0
 800580c:	d113      	bne.n	8005836 <create_chain+0xa2>
 800580e:	2f00      	cmp	r7, #0
 8005810:	d10a      	bne.n	8005828 <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005812:	696a      	ldr	r2, [r5, #20]
 8005814:	692b      	ldr	r3, [r5, #16]
 8005816:	3a02      	subs	r2, #2
		fs->last_clst = ncl;
 8005818:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800581a:	4293      	cmp	r3, r2
 800581c:	d90f      	bls.n	800583e <create_chain+0xaa>
		fs->fsi_flag |= 1;
 800581e:	2301      	movs	r3, #1
 8005820:	792a      	ldrb	r2, [r5, #4]
 8005822:	4313      	orrs	r3, r2
 8005824:	712b      	strb	r3, [r5, #4]
 8005826:	e7cc      	b.n	80057c2 <create_chain+0x2e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005828:	0022      	movs	r2, r4
 800582a:	0039      	movs	r1, r7
 800582c:	0028      	movs	r0, r5
 800582e:	f7ff fecd 	bl	80055cc <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005832:	2800      	cmp	r0, #0
 8005834:	d0ed      	beq.n	8005812 <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005836:	2801      	cmp	r0, #1
 8005838:	d0c1      	beq.n	80057be <create_chain+0x2a>
 800583a:	2401      	movs	r4, #1
 800583c:	e7c1      	b.n	80057c2 <create_chain+0x2e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800583e:	3b01      	subs	r3, #1
 8005840:	612b      	str	r3, [r5, #16]
 8005842:	e7ec      	b.n	800581e <create_chain+0x8a>

08005844 <remove_chain>:
{
 8005844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005846:	000d      	movs	r5, r1
 8005848:	0007      	movs	r7, r0
 800584a:	0011      	movs	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800584c:	2d01      	cmp	r5, #1
 800584e:	d801      	bhi.n	8005854 <remove_chain+0x10>
 8005850:	2002      	movs	r0, #2
}
 8005852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS *fs = obj->fs;
 8005854:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005856:	6963      	ldr	r3, [r4, #20]
 8005858:	429d      	cmp	r5, r3
 800585a:	d2f9      	bcs.n	8005850 <remove_chain+0xc>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800585c:	2a00      	cmp	r2, #0
 800585e:	d006      	beq.n	800586e <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005860:	2201      	movs	r2, #1
 8005862:	0020      	movs	r0, r4
 8005864:	4252      	negs	r2, r2
 8005866:	f7ff feb1 	bl	80055cc <put_fat>
		if (res != FR_OK) return res;
 800586a:	2800      	cmp	r0, #0
 800586c:	d1f1      	bne.n	8005852 <remove_chain+0xe>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800586e:	0029      	movs	r1, r5
 8005870:	6838      	ldr	r0, [r7, #0]
 8005872:	f7ff ff2f 	bl	80056d4 <get_fat.isra.8>
 8005876:	1e06      	subs	r6, r0, #0
		if (nxt == 0) break;				/* Empty cluster? */
 8005878:	d101      	bne.n	800587e <remove_chain+0x3a>
	return FR_OK;
 800587a:	2000      	movs	r0, #0
 800587c:	e7e9      	b.n	8005852 <remove_chain+0xe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800587e:	2801      	cmp	r0, #1
 8005880:	d0e6      	beq.n	8005850 <remove_chain+0xc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005882:	1c43      	adds	r3, r0, #1
 8005884:	d015      	beq.n	80058b2 <remove_chain+0x6e>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005886:	2200      	movs	r2, #0
 8005888:	0029      	movs	r1, r5
 800588a:	0020      	movs	r0, r4
 800588c:	f7ff fe9e 	bl	80055cc <put_fat>
			if (res != FR_OK) return res;
 8005890:	2800      	cmp	r0, #0
 8005892:	d1de      	bne.n	8005852 <remove_chain+0xe>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005894:	6962      	ldr	r2, [r4, #20]
 8005896:	6923      	ldr	r3, [r4, #16]
 8005898:	1e91      	subs	r1, r2, #2
 800589a:	428b      	cmp	r3, r1
 800589c:	d205      	bcs.n	80058aa <remove_chain+0x66>
			fs->fsi_flag |= 1;
 800589e:	2101      	movs	r1, #1
			fs->free_clst++;
 80058a0:	3301      	adds	r3, #1
 80058a2:	6123      	str	r3, [r4, #16]
			fs->fsi_flag |= 1;
 80058a4:	7923      	ldrb	r3, [r4, #4]
 80058a6:	430b      	orrs	r3, r1
 80058a8:	7123      	strb	r3, [r4, #4]
 80058aa:	0035      	movs	r5, r6
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80058ac:	4296      	cmp	r6, r2
 80058ae:	d3de      	bcc.n	800586e <remove_chain+0x2a>
 80058b0:	e7e3      	b.n	800587a <remove_chain+0x36>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80058b2:	2001      	movs	r0, #1
 80058b4:	e7cd      	b.n	8005852 <remove_chain+0xe>

080058b6 <dir_sdi.constprop.11>:
	dp->dptr = ofs;				/* Set current offset */
 80058b6:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80058b8:	b570      	push	{r4, r5, r6, lr}
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80058ba:	6885      	ldr	r5, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80058bc:	0006      	movs	r6, r0
	FATFS *fs = dp->obj.fs;
 80058be:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 80058c0:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80058c2:	429d      	cmp	r5, r3
 80058c4:	d114      	bne.n	80058f0 <dir_sdi.constprop.11+0x3a>
 80058c6:	7823      	ldrb	r3, [r4, #0]
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d902      	bls.n	80058d2 <dir_sdi.constprop.11+0x1c>
		clst = fs->dirbase;
 80058cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10f      	bne.n	80058f2 <dir_sdi.constprop.11+0x3c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80058d2:	8923      	ldrh	r3, [r4, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <dir_sdi.constprop.11+0x26>
 80058d8:	2002      	movs	r0, #2
}
 80058da:	bd70      	pop	{r4, r5, r6, pc}
		dp->sect = fs->dirbase;
 80058dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058de:	61f3      	str	r3, [r6, #28]
	if (!dp->sect) return FR_INT_ERR;
 80058e0:	69f3      	ldr	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 80058e2:	61b5      	str	r5, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0f7      	beq.n	80058d8 <dir_sdi.constprop.11+0x22>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80058e8:	3430      	adds	r4, #48	; 0x30
 80058ea:	6234      	str	r4, [r6, #32]
	return FR_OK;
 80058ec:	2000      	movs	r0, #0
 80058ee:	e7f4      	b.n	80058da <dir_sdi.constprop.11+0x24>
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80058f0:	002b      	movs	r3, r5
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80058f2:	8962      	ldrh	r2, [r4, #10]
 80058f4:	001d      	movs	r5, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 80058f6:	2a00      	cmp	r2, #0
 80058f8:	d10c      	bne.n	8005914 <dir_sdi.constprop.11+0x5e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80058fa:	0029      	movs	r1, r5
 80058fc:	6830      	ldr	r0, [r6, #0]
 80058fe:	f7ff fee9 	bl	80056d4 <get_fat.isra.8>
 8005902:	0005      	movs	r5, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005904:	1c43      	adds	r3, r0, #1
 8005906:	d00b      	beq.n	8005920 <dir_sdi.constprop.11+0x6a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005908:	2801      	cmp	r0, #1
 800590a:	d9e5      	bls.n	80058d8 <dir_sdi.constprop.11+0x22>
 800590c:	6963      	ldr	r3, [r4, #20]
 800590e:	4298      	cmp	r0, r3
 8005910:	d3f3      	bcc.n	80058fa <dir_sdi.constprop.11+0x44>
 8005912:	e7e1      	b.n	80058d8 <dir_sdi.constprop.11+0x22>
		dp->sect = clust2sect(fs, clst);
 8005914:	0019      	movs	r1, r3
 8005916:	0020      	movs	r0, r4
 8005918:	f7ff fb60 	bl	8004fdc <clust2sect>
 800591c:	61f0      	str	r0, [r6, #28]
 800591e:	e7df      	b.n	80058e0 <dir_sdi.constprop.11+0x2a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005920:	2001      	movs	r0, #1
 8005922:	e7da      	b.n	80058da <dir_sdi.constprop.11+0x24>

08005924 <dir_next>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005924:	69c3      	ldr	r3, [r0, #28]
{
 8005926:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005928:	0005      	movs	r5, r0
 800592a:	000f      	movs	r7, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800592c:	2004      	movs	r0, #4
 800592e:	2b00      	cmp	r3, #0
 8005930:	d018      	beq.n	8005964 <dir_next+0x40>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005932:	696a      	ldr	r2, [r5, #20]
 8005934:	3220      	adds	r2, #32
 8005936:	9200      	str	r2, [sp, #0]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005938:	9900      	ldr	r1, [sp, #0]
 800593a:	4a35      	ldr	r2, [pc, #212]	; (8005a10 <dir_next+0xec>)
 800593c:	4291      	cmp	r1, r2
 800593e:	d811      	bhi.n	8005964 <dir_next+0x40>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005940:	05ca      	lsls	r2, r1, #23
 8005942:	0dd2      	lsrs	r2, r2, #23
	FATFS *fs = dp->obj.fs;
 8005944:	682c      	ldr	r4, [r5, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005946:	9201      	str	r2, [sp, #4]
 8005948:	d14d      	bne.n	80059e6 <dir_next+0xc2>
		if (!dp->clust) {		/* Static table */
 800594a:	69a9      	ldr	r1, [r5, #24]
		dp->sect++;				/* Next sector */
 800594c:	3301      	adds	r3, #1
 800594e:	61eb      	str	r3, [r5, #28]
		if (!dp->clust) {		/* Static table */
 8005950:	2900      	cmp	r1, #0
 8005952:	d108      	bne.n	8005966 <dir_next+0x42>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005954:	9b00      	ldr	r3, [sp, #0]
 8005956:	8922      	ldrh	r2, [r4, #8]
 8005958:	095b      	lsrs	r3, r3, #5
 800595a:	4293      	cmp	r3, r2
 800595c:	d343      	bcc.n	80059e6 <dir_next+0xc2>
				dp->sect = 0; return FR_NO_FILE;
 800595e:	2300      	movs	r3, #0
 8005960:	2004      	movs	r0, #4
 8005962:	61eb      	str	r3, [r5, #28]
}
 8005964:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005966:	8963      	ldrh	r3, [r4, #10]
 8005968:	9a00      	ldr	r2, [sp, #0]
 800596a:	3b01      	subs	r3, #1
 800596c:	0a52      	lsrs	r2, r2, #9
 800596e:	421a      	tst	r2, r3
 8005970:	d139      	bne.n	80059e6 <dir_next+0xc2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005972:	0020      	movs	r0, r4
 8005974:	f7ff feae 	bl	80056d4 <get_fat.isra.8>
 8005978:	0006      	movs	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800597a:	2801      	cmp	r0, #1
 800597c:	d801      	bhi.n	8005982 <dir_next+0x5e>
 800597e:	2002      	movs	r0, #2
 8005980:	e7f0      	b.n	8005964 <dir_next+0x40>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005982:	1c43      	adds	r3, r0, #1
 8005984:	d101      	bne.n	800598a <dir_next+0x66>
 8005986:	2001      	movs	r0, #1
 8005988:	e7ec      	b.n	8005964 <dir_next+0x40>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800598a:	6963      	ldr	r3, [r4, #20]
 800598c:	4298      	cmp	r0, r3
 800598e:	d324      	bcc.n	80059da <dir_next+0xb6>
					if (!stretch) {								/* If no stretch, report EOT */
 8005990:	2f00      	cmp	r7, #0
 8005992:	d0e4      	beq.n	800595e <dir_next+0x3a>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005994:	69a9      	ldr	r1, [r5, #24]
 8005996:	0028      	movs	r0, r5
 8005998:	f7ff fefc 	bl	8005794 <create_chain>
 800599c:	0006      	movs	r6, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800599e:	2007      	movs	r0, #7
 80059a0:	2e00      	cmp	r6, #0
 80059a2:	d0df      	beq.n	8005964 <dir_next+0x40>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80059a4:	2e01      	cmp	r6, #1
 80059a6:	d0ea      	beq.n	800597e <dir_next+0x5a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80059a8:	1c73      	adds	r3, r6, #1
 80059aa:	d0ec      	beq.n	8005986 <dir_next+0x62>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80059ac:	0020      	movs	r0, r4
 80059ae:	f7ff fbd8 	bl	8005162 <sync_window>
 80059b2:	1e07      	subs	r7, r0, #0
 80059b4:	d1e7      	bne.n	8005986 <dir_next+0x62>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80059b6:	0001      	movs	r1, r0
 80059b8:	2280      	movs	r2, #128	; 0x80
 80059ba:	0020      	movs	r0, r4
 80059bc:	0092      	lsls	r2, r2, #2
 80059be:	3030      	adds	r0, #48	; 0x30
 80059c0:	f7ff fa7b 	bl	8004eba <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80059c4:	0031      	movs	r1, r6
 80059c6:	0020      	movs	r0, r4
 80059c8:	f7ff fb08 	bl	8004fdc <clust2sect>
 80059cc:	62e0      	str	r0, [r4, #44]	; 0x2c
 80059ce:	8963      	ldrh	r3, [r4, #10]
 80059d0:	429f      	cmp	r7, r3
 80059d2:	d310      	bcc.n	80059f6 <dir_next+0xd2>
					fs->winsect -= n;							/* Restore window offset */
 80059d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80059d6:	1bdf      	subs	r7, r3, r7
 80059d8:	62e7      	str	r7, [r4, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 80059da:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 80059dc:	0031      	movs	r1, r6
 80059de:	0020      	movs	r0, r4
 80059e0:	f7ff fafc 	bl	8004fdc <clust2sect>
 80059e4:	61e8      	str	r0, [r5, #28]
	dp->dptr = ofs;						/* Current entry */
 80059e6:	9b00      	ldr	r3, [sp, #0]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80059e8:	3430      	adds	r4, #48	; 0x30
	dp->dptr = ofs;						/* Current entry */
 80059ea:	616b      	str	r3, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80059ec:	9b01      	ldr	r3, [sp, #4]
	return FR_OK;
 80059ee:	2000      	movs	r0, #0
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80059f0:	18e4      	adds	r4, r4, r3
 80059f2:	622c      	str	r4, [r5, #32]
	return FR_OK;
 80059f4:	e7b6      	b.n	8005964 <dir_next+0x40>
						fs->wflag = 1;
 80059f6:	2301      	movs	r3, #1
 80059f8:	0020      	movs	r0, r4
 80059fa:	70e3      	strb	r3, [r4, #3]
 80059fc:	f7ff fb8d 	bl	800511a <sync_window.part.4>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005a00:	2800      	cmp	r0, #0
 8005a02:	d1c0      	bne.n	8005986 <dir_next+0x62>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005a04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005a06:	3701      	adds	r7, #1
 8005a08:	3301      	adds	r3, #1
 8005a0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a0c:	e7df      	b.n	80059ce <dir_next+0xaa>
 8005a0e:	46c0      	nop			; (mov r8, r8)
 8005a10:	001fffff 	.word	0x001fffff

08005a14 <follow_path>:
{
 8005a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a16:	0004      	movs	r4, r0
 8005a18:	000d      	movs	r5, r1
	FATFS *fs = obj->fs;
 8005a1a:	6803      	ldr	r3, [r0, #0]
 8005a1c:	9301      	str	r3, [sp, #4]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005a1e:	782b      	ldrb	r3, [r5, #0]
 8005a20:	2b2f      	cmp	r3, #47	; 0x2f
 8005a22:	d00e      	beq.n	8005a42 <follow_path+0x2e>
 8005a24:	2b5c      	cmp	r3, #92	; 0x5c
 8005a26:	d00c      	beq.n	8005a42 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8005a28:	2300      	movs	r3, #0
 8005a2a:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005a2c:	782b      	ldrb	r3, [r5, #0]
 8005a2e:	2b1f      	cmp	r3, #31
 8005a30:	d83f      	bhi.n	8005ab2 <follow_path+0x9e>
		dp->fn[NSFLAG] = NS_NONAME;
 8005a32:	0023      	movs	r3, r4
 8005a34:	2280      	movs	r2, #128	; 0x80
 8005a36:	332f      	adds	r3, #47	; 0x2f
 8005a38:	701a      	strb	r2, [r3, #0]
		res = dir_sdi(dp, 0);
 8005a3a:	0020      	movs	r0, r4
 8005a3c:	f7ff ff3b 	bl	80058b6 <dir_sdi.constprop.11>
}
 8005a40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005a42:	3501      	adds	r5, #1
 8005a44:	e7eb      	b.n	8005a1e <follow_path+0xa>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005a46:	3101      	adds	r1, #1
 8005a48:	e048      	b.n	8005adc <follow_path+0xc8>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8005a4c:	d100      	bne.n	8005a50 <follow_path+0x3c>
 8005a4e:	e082      	b.n	8005b56 <follow_path+0x142>
 8005a50:	4290      	cmp	r0, r2
 8005a52:	d90d      	bls.n	8005a70 <follow_path+0x5c>
		if (c >= 0x80) {				/* Extended character? */
 8005a54:	b25e      	sxtb	r6, r3
 8005a56:	2e00      	cmp	r6, #0
 8005a58:	da02      	bge.n	8005a60 <follow_path+0x4c>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005a5a:	4666      	mov	r6, ip
 8005a5c:	3b80      	subs	r3, #128	; 0x80
 8005a5e:	5cf3      	ldrb	r3, [r6, r3]
	si = i = 0; ni = 8;
 8005a60:	2600      	movs	r6, #0
	while (*str && *str != chr) str++;
 8005a62:	4f45      	ldr	r7, [pc, #276]	; (8005b78 <follow_path+0x164>)
 8005a64:	5dbf      	ldrb	r7, [r7, r6]
 8005a66:	2f00      	cmp	r7, #0
 8005a68:	d07a      	beq.n	8005b60 <follow_path+0x14c>
 8005a6a:	3601      	adds	r6, #1
 8005a6c:	42bb      	cmp	r3, r7
 8005a6e:	d1f8      	bne.n	8005a62 <follow_path+0x4e>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005a70:	2006      	movs	r0, #6
	return res;
 8005a72:	e7e5      	b.n	8005a40 <follow_path+0x2c>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005a74:	2a00      	cmp	r2, #0
 8005a76:	d169      	bne.n	8005b4c <follow_path+0x138>
			ns = dp->fn[NSFLAG];
 8005a78:	0023      	movs	r3, r4
 8005a7a:	332f      	adds	r3, #47	; 0x2f
 8005a7c:	781b      	ldrb	r3, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	d007      	beq.n	8005a92 <follow_path+0x7e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005a82:	2804      	cmp	r0, #4
 8005a84:	d1dc      	bne.n	8005a40 <follow_path+0x2c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005a86:	4203      	tst	r3, r0
 8005a88:	d1da      	bne.n	8005a40 <follow_path+0x2c>
 8005a8a:	2005      	movs	r0, #5
 8005a8c:	e7d8      	b.n	8005a40 <follow_path+0x2c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005a8e:	2004      	movs	r0, #4
 8005a90:	e7f2      	b.n	8005a78 <follow_path+0x64>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005a92:	075b      	lsls	r3, r3, #29
 8005a94:	d4d4      	bmi.n	8005a40 <follow_path+0x2c>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005a96:	79a3      	ldrb	r3, [r4, #6]
 8005a98:	06db      	lsls	r3, r3, #27
 8005a9a:	d5f6      	bpl.n	8005a8a <follow_path+0x76>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005a9c:	6963      	ldr	r3, [r4, #20]
 8005a9e:	9901      	ldr	r1, [sp, #4]
 8005aa0:	05db      	lsls	r3, r3, #23
 8005aa2:	0ddb      	lsrs	r3, r3, #23
 8005aa4:	3130      	adds	r1, #48	; 0x30
 8005aa6:	18c9      	adds	r1, r1, r3
 8005aa8:	9b01      	ldr	r3, [sp, #4]
 8005aaa:	7818      	ldrb	r0, [r3, #0]
 8005aac:	f7ff faf0 	bl	8005090 <ld_clust.isra.1>
 8005ab0:	60a0      	str	r0, [r4, #8]
	p = *path; sfn = dp->fn;
 8005ab2:	0023      	movs	r3, r4
 8005ab4:	3324      	adds	r3, #36	; 0x24
	mem_set(sfn, ' ', 11);
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	220b      	movs	r2, #11
 8005aba:	2120      	movs	r1, #32
	p = *path; sfn = dp->fn;
 8005abc:	9300      	str	r3, [sp, #0]
	mem_set(sfn, ' ', 11);
 8005abe:	f7ff f9fc 	bl	8004eba <mem_set>
	si = i = 0; ni = 8;
 8005ac2:	2200      	movs	r2, #0
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005ac4:	492d      	ldr	r1, [pc, #180]	; (8005b7c <follow_path+0x168>)
	si = i = 0; ni = 8;
 8005ac6:	0013      	movs	r3, r2
 8005ac8:	2008      	movs	r0, #8
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005aca:	468c      	mov	ip, r1
		c = (BYTE)p[si++];
 8005acc:	1c59      	adds	r1, r3, #1
 8005ace:	5ceb      	ldrb	r3, [r5, r3]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005ad0:	2b20      	cmp	r3, #32
 8005ad2:	d908      	bls.n	8005ae6 <follow_path+0xd2>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005ad4:	2b2f      	cmp	r3, #47	; 0x2f
 8005ad6:	d001      	beq.n	8005adc <follow_path+0xc8>
 8005ad8:	2b5c      	cmp	r3, #92	; 0x5c
 8005ada:	d1b6      	bne.n	8005a4a <follow_path+0x36>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005adc:	5c68      	ldrb	r0, [r5, r1]
 8005ade:	282f      	cmp	r0, #47	; 0x2f
 8005ae0:	d0b1      	beq.n	8005a46 <follow_path+0x32>
 8005ae2:	285c      	cmp	r0, #92	; 0x5c
 8005ae4:	d0af      	beq.n	8005a46 <follow_path+0x32>
	*path = p + si;						/* Return pointer to the next segment */
 8005ae6:	186d      	adds	r5, r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005ae8:	2a00      	cmp	r2, #0
 8005aea:	d0c1      	beq.n	8005a70 <follow_path+0x5c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005aec:	1d62      	adds	r2, r4, #5
 8005aee:	7fd1      	ldrb	r1, [r2, #31]
 8005af0:	29e5      	cmp	r1, #229	; 0xe5
 8005af2:	d101      	bne.n	8005af8 <follow_path+0xe4>
 8005af4:	39e0      	subs	r1, #224	; 0xe0
 8005af6:	77d1      	strb	r1, [r2, #31]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005af8:	2200      	movs	r2, #0
 8005afa:	2120      	movs	r1, #32
 8005afc:	4299      	cmp	r1, r3
 8005afe:	4152      	adcs	r2, r2
 8005b00:	0023      	movs	r3, r4
 8005b02:	0092      	lsls	r2, r2, #2
 8005b04:	332f      	adds	r3, #47	; 0x2f
 8005b06:	701a      	strb	r2, [r3, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005b08:	0020      	movs	r0, r4
	FATFS *fs = dp->obj.fs;
 8005b0a:	6826      	ldr	r6, [r4, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005b0c:	f7ff fed3 	bl	80058b6 <dir_sdi.constprop.11>
	if (res != FR_OK) return res;
 8005b10:	2800      	cmp	r0, #0
 8005b12:	d1b1      	bne.n	8005a78 <follow_path+0x64>
		res = move_window(fs, dp->sect);
 8005b14:	69e1      	ldr	r1, [r4, #28]
 8005b16:	0030      	movs	r0, r6
 8005b18:	f7ff fb86 	bl	8005228 <move_window>
		if (res != FR_OK) break;
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	d1ab      	bne.n	8005a78 <follow_path+0x64>
		c = dp->dir[DIR_Name];
 8005b20:	6a21      	ldr	r1, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005b22:	780b      	ldrb	r3, [r1, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0b2      	beq.n	8005a8e <follow_path+0x7a>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005b28:	223f      	movs	r2, #63	; 0x3f
 8005b2a:	7acb      	ldrb	r3, [r1, #11]
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	71a3      	strb	r3, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005b30:	7acb      	ldrb	r3, [r1, #11]
 8005b32:	3a37      	subs	r2, #55	; 0x37
 8005b34:	4213      	tst	r3, r2
 8005b36:	d109      	bne.n	8005b4c <follow_path+0x138>
 8005b38:	0003      	movs	r3, r0
		r = *d++ - *s++;
 8005b3a:	9f00      	ldr	r7, [sp, #0]
 8005b3c:	5cca      	ldrb	r2, [r1, r3]
 8005b3e:	5cff      	ldrb	r7, [r7, r3]
 8005b40:	1bd2      	subs	r2, r2, r7
	} while (--cnt && r == 0);
 8005b42:	2b0a      	cmp	r3, #10
 8005b44:	d096      	beq.n	8005a74 <follow_path+0x60>
 8005b46:	3301      	adds	r3, #1
 8005b48:	2a00      	cmp	r2, #0
 8005b4a:	d0f6      	beq.n	8005b3a <follow_path+0x126>
		res = dir_next(dp, 0);	/* Next entry */
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	0020      	movs	r0, r4
 8005b50:	f7ff fee8 	bl	8005924 <dir_next>
 8005b54:	e7dc      	b.n	8005b10 <follow_path+0xfc>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005b56:	280b      	cmp	r0, #11
 8005b58:	d08a      	beq.n	8005a70 <follow_path+0x5c>
			i = 8; ni = 11;				/* Goto extension */
 8005b5a:	2208      	movs	r2, #8
 8005b5c:	200b      	movs	r0, #11
 8005b5e:	e008      	b.n	8005b72 <follow_path+0x15e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005b60:	001e      	movs	r6, r3
 8005b62:	3e61      	subs	r6, #97	; 0x61
 8005b64:	2e19      	cmp	r6, #25
 8005b66:	d801      	bhi.n	8005b6c <follow_path+0x158>
 8005b68:	3b20      	subs	r3, #32
 8005b6a:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 8005b6c:	9e00      	ldr	r6, [sp, #0]
 8005b6e:	54b3      	strb	r3, [r6, r2]
 8005b70:	3201      	adds	r2, #1
		c = (BYTE)p[si++];
 8005b72:	000b      	movs	r3, r1
 8005b74:	e7aa      	b.n	8005acc <follow_path+0xb8>
 8005b76:	46c0      	nop			; (mov r8, r8)
 8005b78:	0800df68 	.word	0x0800df68
 8005b7c:	0800dee8 	.word	0x0800dee8

08005b80 <dir_read.constprop.9>:
FRESULT dir_read (
 8005b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b82:	0004      	movs	r4, r0
	FATFS *fs = dp->obj.fs;
 8005b84:	6805      	ldr	r5, [r0, #0]
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005b86:	263f      	movs	r6, #63	; 0x3f
	FRESULT res = FR_NO_FILE;
 8005b88:	2004      	movs	r0, #4
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8005b8a:	2720      	movs	r7, #32
	while (dp->sect) {
 8005b8c:	69e1      	ldr	r1, [r4, #28]
 8005b8e:	2900      	cmp	r1, #0
 8005b90:	d102      	bne.n	8005b98 <dir_read.constprop.9+0x18>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005b92:	2800      	cmp	r0, #0
 8005b94:	d015      	beq.n	8005bc2 <dir_read.constprop.9+0x42>
 8005b96:	e01c      	b.n	8005bd2 <dir_read.constprop.9+0x52>
		res = move_window(fs, dp->sect);
 8005b98:	0028      	movs	r0, r5
 8005b9a:	f7ff fb45 	bl	8005228 <move_window>
		if (res != FR_OK) break;
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d117      	bne.n	8005bd2 <dir_read.constprop.9+0x52>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8005ba2:	6a23      	ldr	r3, [r4, #32]
 8005ba4:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) {
 8005ba6:	2a00      	cmp	r2, #0
 8005ba8:	d016      	beq.n	8005bd8 <dir_read.constprop.9+0x58>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005baa:	7adb      	ldrb	r3, [r3, #11]
 8005bac:	4033      	ands	r3, r6
 8005bae:	71a3      	strb	r3, [r4, #6]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8005bb0:	2ae5      	cmp	r2, #229	; 0xe5
 8005bb2:	d008      	beq.n	8005bc6 <dir_read.constprop.9+0x46>
 8005bb4:	2a2e      	cmp	r2, #46	; 0x2e
 8005bb6:	d006      	beq.n	8005bc6 <dir_read.constprop.9+0x46>
 8005bb8:	2b0f      	cmp	r3, #15
 8005bba:	d004      	beq.n	8005bc6 <dir_read.constprop.9+0x46>
 8005bbc:	43bb      	bics	r3, r7
 8005bbe:	2b08      	cmp	r3, #8
 8005bc0:	d001      	beq.n	8005bc6 <dir_read.constprop.9+0x46>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8005bc2:	2000      	movs	r0, #0
}
 8005bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		res = dir_next(dp, 0);		/* Next entry */
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	0020      	movs	r0, r4
 8005bca:	f7ff feab 	bl	8005924 <dir_next>
		if (res != FR_OK) break;
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	d0dc      	beq.n	8005b8c <dir_read.constprop.9+0xc>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61e3      	str	r3, [r4, #28]
 8005bd6:	e7f5      	b.n	8005bc4 <dir_read.constprop.9+0x44>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8005bd8:	2004      	movs	r0, #4
 8005bda:	e7fa      	b.n	8005bd2 <dir_read.constprop.9+0x52>

08005bdc <dir_register>:
{
 8005bdc:	b570      	push	{r4, r5, r6, lr}
 8005bde:	0005      	movs	r5, r0
	FATFS *fs = dp->obj.fs;
 8005be0:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 8005be2:	f7ff fe68 	bl	80058b6 <dir_sdi.constprop.11>
 8005be6:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
 8005be8:	d125      	bne.n	8005c36 <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 8005bea:	69e9      	ldr	r1, [r5, #28]
 8005bec:	0030      	movs	r0, r6
 8005bee:	f7ff fb1b 	bl	8005228 <move_window>
 8005bf2:	1e04      	subs	r4, r0, #0
			if (res != FR_OK) break;
 8005bf4:	d11f      	bne.n	8005c36 <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005bf6:	6a2b      	ldr	r3, [r5, #32]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2be5      	cmp	r3, #229	; 0xe5
 8005bfc:	d114      	bne.n	8005c28 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 8005bfe:	69e9      	ldr	r1, [r5, #28]
 8005c00:	0030      	movs	r0, r6
 8005c02:	f7ff fb11 	bl	8005228 <move_window>
 8005c06:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {
 8005c08:	d10c      	bne.n	8005c24 <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005c0a:	0001      	movs	r1, r0
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	6a28      	ldr	r0, [r5, #32]
 8005c10:	f7ff f953 	bl	8004eba <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005c14:	0029      	movs	r1, r5
 8005c16:	220b      	movs	r2, #11
 8005c18:	3124      	adds	r1, #36	; 0x24
 8005c1a:	6a28      	ldr	r0, [r5, #32]
 8005c1c:	f7ff fa30 	bl	8005080 <mem_cpy.part.0>
			fs->wflag = 1;
 8005c20:	2301      	movs	r3, #1
 8005c22:	70f3      	strb	r3, [r6, #3]
}
 8005c24:	0020      	movs	r0, r4
 8005c26:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d0e8      	beq.n	8005bfe <dir_register+0x22>
			res = dir_next(dp, 1);
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	0028      	movs	r0, r5
 8005c30:	f7ff fe78 	bl	8005924 <dir_next>
 8005c34:	e7d7      	b.n	8005be6 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005c36:	2c04      	cmp	r4, #4
 8005c38:	d1f4      	bne.n	8005c24 <dir_register+0x48>
 8005c3a:	3403      	adds	r4, #3
	return res;
 8005c3c:	e7f2      	b.n	8005c24 <dir_register+0x48>
	...

08005c40 <f_open>:
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005c40:	2309      	movs	r3, #9
{
 8005c42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c44:	b093      	sub	sp, #76	; 0x4c
 8005c46:	0004      	movs	r4, r0
 8005c48:	9103      	str	r1, [sp, #12]
 8005c4a:	0017      	movs	r7, r2
	if (!fp) return FR_INVALID_OBJECT;
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	d100      	bne.n	8005c54 <f_open+0x14>
 8005c52:	e0c0      	b.n	8005dd6 <f_open+0x196>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005c54:	263f      	movs	r6, #63	; 0x3f
 8005c56:	4016      	ands	r6, r2
	res = find_volume(&path, &fs, mode);
 8005c58:	0032      	movs	r2, r6
 8005c5a:	a905      	add	r1, sp, #20
 8005c5c:	a803      	add	r0, sp, #12
 8005c5e:	f7ff fb43 	bl	80052e8 <find_volume>
 8005c62:	9000      	str	r0, [sp, #0]
	if (res == FR_OK) {
 8005c64:	2800      	cmp	r0, #0
 8005c66:	d12c      	bne.n	8005cc2 <f_open+0x82>
		dj.obj.fs = fs;
 8005c68:	ad06      	add	r5, sp, #24
 8005c6a:	9b05      	ldr	r3, [sp, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005c6c:	9903      	ldr	r1, [sp, #12]
 8005c6e:	0028      	movs	r0, r5
		dj.obj.fs = fs;
 8005c70:	9306      	str	r3, [sp, #24]
		res = follow_path(&dj, path);	/* Follow the file path */
 8005c72:	f7ff fecf 	bl	8005a14 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005c76:	2800      	cmp	r0, #0
 8005c78:	d10e      	bne.n	8005c98 <f_open+0x58>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005c7a:	233f      	movs	r3, #63	; 0x3f
 8005c7c:	aa02      	add	r2, sp, #8
 8005c7e:	189b      	adds	r3, r3, r2
 8005c80:	781b      	ldrb	r3, [r3, #0]
				res = FR_INVALID_NAME;
 8005c82:	3006      	adds	r0, #6
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005c84:	2b7f      	cmp	r3, #127	; 0x7f
 8005c86:	d807      	bhi.n	8005c98 <f_open+0x58>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005c88:	2301      	movs	r3, #1
 8005c8a:	0031      	movs	r1, r6
 8005c8c:	4399      	bics	r1, r3
 8005c8e:	1e4b      	subs	r3, r1, #1
 8005c90:	4199      	sbcs	r1, r3
 8005c92:	0028      	movs	r0, r5
 8005c94:	f7ff f918 	bl	8004ec8 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005c98:	231c      	movs	r3, #28
 8005c9a:	421f      	tst	r7, r3
 8005c9c:	d06d      	beq.n	8005d7a <f_open+0x13a>
			if (res != FR_OK) {					/* No file, create new */
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d013      	beq.n	8005cca <f_open+0x8a>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005ca2:	2804      	cmp	r0, #4
 8005ca4:	d109      	bne.n	8005cba <f_open+0x7a>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005ca6:	4b67      	ldr	r3, [pc, #412]	; (8005e44 <f_open+0x204>)
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	2a00      	cmp	r2, #0
 8005cac:	d100      	bne.n	8005cb0 <f_open+0x70>
 8005cae:	e0c5      	b.n	8005e3c <f_open+0x1fc>
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d100      	bne.n	8005cb8 <f_open+0x78>
 8005cb6:	e0c1      	b.n	8005e3c <f_open+0x1fc>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005cb8:	300e      	adds	r0, #14
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005cba:	2308      	movs	r3, #8
 8005cbc:	431e      	orrs	r6, r3
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d00a      	beq.n	8005cd8 <f_open+0x98>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	9000      	str	r0, [sp, #0]
 8005cc6:	6023      	str	r3, [r4, #0]
 8005cc8:	e085      	b.n	8005dd6 <f_open+0x196>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005cca:	2311      	movs	r3, #17
 8005ccc:	79aa      	ldrb	r2, [r5, #6]
 8005cce:	421a      	tst	r2, r3
 8005cd0:	d15c      	bne.n	8005d8c <f_open+0x14c>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005cd2:	077b      	lsls	r3, r7, #29
 8005cd4:	d500      	bpl.n	8005cd8 <f_open+0x98>
 8005cd6:	e0ab      	b.n	8005e30 <f_open+0x1f0>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005cd8:	0733      	lsls	r3, r6, #28
 8005cda:	d538      	bpl.n	8005d4e <f_open+0x10e>
				dw = GET_FATTIME();
 8005cdc:	f7ff f81e 	bl	8004d1c <get_fattime>
 8005ce0:	0007      	movs	r7, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005ce2:	6a28      	ldr	r0, [r5, #32]
 8005ce4:	0039      	movs	r1, r7
 8005ce6:	300e      	adds	r0, #14
 8005ce8:	f7ff f8df 	bl	8004eaa <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005cec:	6a28      	ldr	r0, [r5, #32]
 8005cee:	0039      	movs	r1, r7
 8005cf0:	3016      	adds	r0, #22
 8005cf2:	f7ff f8da 	bl	8004eaa <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005cf6:	2320      	movs	r3, #32
 8005cf8:	6a2a      	ldr	r2, [r5, #32]
 8005cfa:	72d3      	strb	r3, [r2, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005cfc:	6a2f      	ldr	r7, [r5, #32]
 8005cfe:	9b05      	ldr	r3, [sp, #20]
 8005d00:	0039      	movs	r1, r7
 8005d02:	7818      	ldrb	r0, [r3, #0]
 8005d04:	9302      	str	r3, [sp, #8]
 8005d06:	f7ff f9c3 	bl	8005090 <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005d0a:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005d0c:	9001      	str	r0, [sp, #4]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005d0e:	0039      	movs	r1, r7
 8005d10:	9802      	ldr	r0, [sp, #8]
 8005d12:	f7ff f9cc 	bl	80050ae <st_clust.isra.2>
	*ptr++ = (BYTE)val; val >>= 8;
 8005d16:	2200      	movs	r2, #0
					fs->wflag = 1;
 8005d18:	2101      	movs	r1, #1
					st_dword(dj.dir + DIR_FileSize, 0);
 8005d1a:	6a2b      	ldr	r3, [r5, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d1c:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d1e:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d20:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8005d22:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8005d24:	9b05      	ldr	r3, [sp, #20]
 8005d26:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8005d28:	9901      	ldr	r1, [sp, #4]
 8005d2a:	4291      	cmp	r1, r2
 8005d2c:	d00f      	beq.n	8005d4e <f_open+0x10e>
						res = remove_chain(&dj.obj, cl, 0);
 8005d2e:	0028      	movs	r0, r5
						dw = fs->winsect;
 8005d30:	6adf      	ldr	r7, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 8005d32:	f7ff fd87 	bl	8005844 <remove_chain>
						if (res == FR_OK) {
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d1c3      	bne.n	8005cc2 <f_open+0x82>
							res = move_window(fs, dw);
 8005d3a:	0039      	movs	r1, r7
 8005d3c:	9805      	ldr	r0, [sp, #20]
 8005d3e:	f7ff fa73 	bl	8005228 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005d42:	9b01      	ldr	r3, [sp, #4]
 8005d44:	9a05      	ldr	r2, [sp, #20]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	60d3      	str	r3, [r2, #12]
		if (res == FR_OK) {
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	d1b9      	bne.n	8005cc2 <f_open+0x82>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005d4e:	0733      	lsls	r3, r6, #28
 8005d50:	d501      	bpl.n	8005d56 <f_open+0x116>
				mode |= FA_MODIFIED;
 8005d52:	2340      	movs	r3, #64	; 0x40
 8005d54:	431e      	orrs	r6, r3
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005d56:	9b05      	ldr	r3, [sp, #20]
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005d58:	0031      	movs	r1, r6
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005d5c:	0028      	movs	r0, r5
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005d5e:	6263      	str	r3, [r4, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005d60:	6a2b      	ldr	r3, [r5, #32]
 8005d62:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005d64:	2301      	movs	r3, #1
 8005d66:	4399      	bics	r1, r3
 8005d68:	1e4b      	subs	r3, r1, #1
 8005d6a:	4199      	sbcs	r1, r3
 8005d6c:	f7ff f8da 	bl	8004f24 <inc_lock>
 8005d70:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005d72:	2800      	cmp	r0, #0
 8005d74:	d132      	bne.n	8005ddc <f_open+0x19c>
 8005d76:	2002      	movs	r0, #2
 8005d78:	e7a3      	b.n	8005cc2 <f_open+0x82>
			if (res == FR_OK) {					/* Following succeeded */
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	d1a1      	bne.n	8005cc2 <f_open+0x82>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005d7e:	79ab      	ldrb	r3, [r5, #6]
 8005d80:	06da      	lsls	r2, r3, #27
 8005d82:	d457      	bmi.n	8005e34 <f_open+0x1f4>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005d84:	07ba      	lsls	r2, r7, #30
 8005d86:	d5e2      	bpl.n	8005d4e <f_open+0x10e>
 8005d88:	07db      	lsls	r3, r3, #31
 8005d8a:	d5e0      	bpl.n	8005d4e <f_open+0x10e>
					res = FR_DENIED;
 8005d8c:	2007      	movs	r0, #7
 8005d8e:	e798      	b.n	8005cc2 <f_open+0x82>
					clst = get_fat(&fp->obj, clst);
 8005d90:	6820      	ldr	r0, [r4, #0]
 8005d92:	f7ff fc9f 	bl	80056d4 <get_fat.isra.8>
 8005d96:	0001      	movs	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8005d98:	2002      	movs	r0, #2
 8005d9a:	2901      	cmp	r1, #1
 8005d9c:	d903      	bls.n	8005da6 <f_open+0x166>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005d9e:	1c48      	adds	r0, r1, #1
 8005da0:	4242      	negs	r2, r0
 8005da2:	4142      	adcs	r2, r0
					if (clst <= 1) res = FR_INT_ERR;
 8005da4:	b2d0      	uxtb	r0, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005da6:	1bf6      	subs	r6, r6, r7
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d03d      	beq.n	8005e28 <f_open+0x1e8>
				fp->clust = clst;
 8005dac:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005dae:	2800      	cmp	r0, #0
 8005db0:	d187      	bne.n	8005cc2 <f_open+0x82>
 8005db2:	05f3      	lsls	r3, r6, #23
 8005db4:	d00f      	beq.n	8005dd6 <f_open+0x196>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005db6:	9f05      	ldr	r7, [sp, #20]
 8005db8:	0038      	movs	r0, r7
 8005dba:	f7ff f90f 	bl	8004fdc <clust2sect>
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	d0d9      	beq.n	8005d76 <f_open+0x136>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005dc2:	0a76      	lsrs	r6, r6, #9
 8005dc4:	1832      	adds	r2, r6, r0
 8005dc6:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005dc8:	7878      	ldrb	r0, [r7, #1]
 8005dca:	2301      	movs	r3, #1
 8005dcc:	0029      	movs	r1, r5
 8005dce:	f7ff f837 	bl	8004e40 <disk_read>
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	d130      	bne.n	8005e38 <f_open+0x1f8>

	LEAVE_FF(fs, res);
}
 8005dd6:	9800      	ldr	r0, [sp, #0]
 8005dd8:	b013      	add	sp, #76	; 0x4c
 8005dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005ddc:	9f05      	ldr	r7, [sp, #20]
 8005dde:	6a2d      	ldr	r5, [r5, #32]
 8005de0:	7838      	ldrb	r0, [r7, #0]
 8005de2:	0029      	movs	r1, r5
 8005de4:	f7ff f954 	bl	8005090 <ld_clust.isra.1>
 8005de8:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005dea:	0028      	movs	r0, r5
 8005dec:	301c      	adds	r0, #28
 8005dee:	f7ff f851 	bl	8004e94 <ld_dword>
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005df2:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005df4:	0025      	movs	r5, r4
 8005df6:	2280      	movs	r2, #128	; 0x80
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005df8:	60e0      	str	r0, [r4, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005dfa:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005dfc:	6027      	str	r7, [r4, #0]
			fp->obj.id = fs->id;
 8005dfe:	88fb      	ldrh	r3, [r7, #6]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005e00:	3530      	adds	r5, #48	; 0x30
			fp->obj.id = fs->id;
 8005e02:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 8005e04:	7526      	strb	r6, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 8005e06:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005e08:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005e0a:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005e0c:	0092      	lsls	r2, r2, #2
 8005e0e:	0028      	movs	r0, r5
 8005e10:	f7ff f853 	bl	8004eba <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005e14:	06b3      	lsls	r3, r6, #26
 8005e16:	d5de      	bpl.n	8005dd6 <f_open+0x196>
 8005e18:	68e6      	ldr	r6, [r4, #12]
 8005e1a:	2e00      	cmp	r6, #0
 8005e1c:	d0db      	beq.n	8005dd6 <f_open+0x196>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005e1e:	9b05      	ldr	r3, [sp, #20]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005e20:	61a6      	str	r6, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005e22:	895f      	ldrh	r7, [r3, #10]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005e24:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005e26:	027f      	lsls	r7, r7, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005e28:	42b7      	cmp	r7, r6
 8005e2a:	d3b1      	bcc.n	8005d90 <f_open+0x150>
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	e7bd      	b.n	8005dac <f_open+0x16c>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005e30:	2008      	movs	r0, #8
 8005e32:	e746      	b.n	8005cc2 <f_open+0x82>
					res = FR_NO_FILE;
 8005e34:	2004      	movs	r0, #4
 8005e36:	e744      	b.n	8005cc2 <f_open+0x82>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005e38:	2001      	movs	r0, #1
 8005e3a:	e742      	b.n	8005cc2 <f_open+0x82>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005e3c:	0028      	movs	r0, r5
 8005e3e:	f7ff fecd 	bl	8005bdc <dir_register>
 8005e42:	e73a      	b.n	8005cba <f_open+0x7a>
 8005e44:	200013b4 	.word	0x200013b4

08005e48 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e4a:	b089      	sub	sp, #36	; 0x24
 8005e4c:	9305      	str	r3, [sp, #20]
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8005e4e:	2300      	movs	r3, #0
{
 8005e50:	0015      	movs	r5, r2
	*br = 0;	/* Clear read byte counter */
 8005e52:	9a05      	ldr	r2, [sp, #20]
{
 8005e54:	000e      	movs	r6, r1
	*br = 0;	/* Clear read byte counter */
 8005e56:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005e58:	a907      	add	r1, sp, #28
{
 8005e5a:	0004      	movs	r4, r0
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005e5c:	f7ff f8f5 	bl	800504a <validate>
 8005e60:	9001      	str	r0, [sp, #4]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005e62:	2800      	cmp	r0, #0
 8005e64:	d110      	bne.n	8005e88 <f_read+0x40>
 8005e66:	7d63      	ldrb	r3, [r4, #21]
 8005e68:	9301      	str	r3, [sp, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10c      	bne.n	8005e88 <f_read+0x40>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005e6e:	7d23      	ldrb	r3, [r4, #20]
 8005e70:	07db      	lsls	r3, r3, #31
 8005e72:	d400      	bmi.n	8005e76 <f_read+0x2e>
 8005e74:	e09c      	b.n	8005fb0 <f_read+0x168>
	remain = fp->obj.objsize - fp->fptr;
 8005e76:	68e3      	ldr	r3, [r4, #12]
 8005e78:	69a2      	ldr	r2, [r4, #24]
 8005e7a:	1a9f      	subs	r7, r3, r2
 8005e7c:	42af      	cmp	r7, r5
 8005e7e:	d900      	bls.n	8005e82 <f_read+0x3a>
 8005e80:	002f      	movs	r7, r5
 8005e82:	9602      	str	r6, [sp, #8]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 8005e84:	2f00      	cmp	r7, #0
 8005e86:	d102      	bne.n	8005e8e <f_read+0x46>
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8005e88:	9801      	ldr	r0, [sp, #4]
 8005e8a:	b009      	add	sp, #36	; 0x24
 8005e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005e8e:	69a1      	ldr	r1, [r4, #24]
 8005e90:	05cb      	lsls	r3, r1, #23
 8005e92:	d17b      	bne.n	8005f8c <f_read+0x144>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005e94:	9b07      	ldr	r3, [sp, #28]
 8005e96:	895e      	ldrh	r6, [r3, #10]
 8005e98:	0a4b      	lsrs	r3, r1, #9
 8005e9a:	3e01      	subs	r6, #1
 8005e9c:	4033      	ands	r3, r6
 8005e9e:	9303      	str	r3, [sp, #12]
			if (csect == 0) {					/* On the cluster boundary? */
 8005ea0:	d119      	bne.n	8005ed6 <f_read+0x8e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005ea2:	2900      	cmp	r1, #0
 8005ea4:	d106      	bne.n	8005eb4 <f_read+0x6c>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005ea6:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005ea8:	2801      	cmp	r0, #1
 8005eaa:	d80f      	bhi.n	8005ecc <f_read+0x84>
 8005eac:	2302      	movs	r3, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005eae:	7563      	strb	r3, [r4, #21]
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005eb0:	9301      	str	r3, [sp, #4]
 8005eb2:	e7e9      	b.n	8005e88 <f_read+0x40>
					if (fp->cltbl) {
 8005eb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <f_read+0x7a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005eba:	0020      	movs	r0, r4
 8005ebc:	f7ff f89a 	bl	8004ff4 <clmt_clust>
 8005ec0:	e7f2      	b.n	8005ea8 <f_read+0x60>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005ec2:	69e1      	ldr	r1, [r4, #28]
 8005ec4:	6820      	ldr	r0, [r4, #0]
 8005ec6:	f7ff fc05 	bl	80056d4 <get_fat.isra.8>
 8005eca:	e7ed      	b.n	8005ea8 <f_read+0x60>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005ecc:	1c43      	adds	r3, r0, #1
 8005ece:	d101      	bne.n	8005ed4 <f_read+0x8c>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e7ec      	b.n	8005eae <f_read+0x66>
				fp->clust = clst;				/* Update current cluster */
 8005ed4:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005ed6:	9b07      	ldr	r3, [sp, #28]
 8005ed8:	69e1      	ldr	r1, [r4, #28]
 8005eda:	0018      	movs	r0, r3
 8005edc:	9304      	str	r3, [sp, #16]
 8005ede:	f7ff f87d 	bl	8004fdc <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d0e2      	beq.n	8005eac <f_read+0x64>
			sect += csect;
 8005ee6:	9b03      	ldr	r3, [sp, #12]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005ee8:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 8005eea:	181e      	adds	r6, r3, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005eec:	2d00      	cmp	r5, #0
 8005eee:	d02f      	beq.n	8005f50 <f_read+0x108>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005ef0:	9b04      	ldr	r3, [sp, #16]
 8005ef2:	9a03      	ldr	r2, [sp, #12]
 8005ef4:	895b      	ldrh	r3, [r3, #10]
 8005ef6:	1952      	adds	r2, r2, r5
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d901      	bls.n	8005f00 <f_read+0xb8>
					cc = fs->csize - csect;
 8005efc:	9a03      	ldr	r2, [sp, #12]
 8005efe:	1a9d      	subs	r5, r3, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005f00:	9b04      	ldr	r3, [sp, #16]
 8005f02:	0032      	movs	r2, r6
 8005f04:	7858      	ldrb	r0, [r3, #1]
 8005f06:	9902      	ldr	r1, [sp, #8]
 8005f08:	002b      	movs	r3, r5
 8005f0a:	f7fe ff99 	bl	8004e40 <disk_read>
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	d1de      	bne.n	8005ed0 <f_read+0x88>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005f12:	7d23      	ldrb	r3, [r4, #20]
 8005f14:	2b7f      	cmp	r3, #127	; 0x7f
 8005f16:	d90c      	bls.n	8005f32 <f_read+0xea>
 8005f18:	6a23      	ldr	r3, [r4, #32]
 8005f1a:	1b98      	subs	r0, r3, r6
 8005f1c:	4285      	cmp	r5, r0
 8005f1e:	d908      	bls.n	8005f32 <f_read+0xea>
 8005f20:	2280      	movs	r2, #128	; 0x80
 8005f22:	0021      	movs	r1, r4
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005f24:	9b02      	ldr	r3, [sp, #8]
 8005f26:	0240      	lsls	r0, r0, #9
 8005f28:	1818      	adds	r0, r3, r0
 8005f2a:	0092      	lsls	r2, r2, #2
 8005f2c:	3130      	adds	r1, #48	; 0x30
 8005f2e:	f7ff f8a7 	bl	8005080 <mem_cpy.part.0>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005f32:	026d      	lsls	r5, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005f34:	9b02      	ldr	r3, [sp, #8]
 8005f36:	9a05      	ldr	r2, [sp, #20]
 8005f38:	195b      	adds	r3, r3, r5
 8005f3a:	9302      	str	r3, [sp, #8]
 8005f3c:	69a3      	ldr	r3, [r4, #24]
 8005f3e:	1b7f      	subs	r7, r7, r5
 8005f40:	195b      	adds	r3, r3, r5
 8005f42:	61a3      	str	r3, [r4, #24]
 8005f44:	9b05      	ldr	r3, [sp, #20]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	9303      	str	r3, [sp, #12]
 8005f4a:	195b      	adds	r3, r3, r5
 8005f4c:	6013      	str	r3, [r2, #0]
 8005f4e:	e799      	b.n	8005e84 <f_read+0x3c>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005f50:	6a22      	ldr	r2, [r4, #32]
 8005f52:	4296      	cmp	r6, r2
 8005f54:	d019      	beq.n	8005f8a <f_read+0x142>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005f56:	7d23      	ldrb	r3, [r4, #20]
 8005f58:	2b7f      	cmp	r3, #127	; 0x7f
 8005f5a:	d90c      	bls.n	8005f76 <f_read+0x12e>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005f5c:	0021      	movs	r1, r4
 8005f5e:	9b04      	ldr	r3, [sp, #16]
 8005f60:	3130      	adds	r1, #48	; 0x30
 8005f62:	7858      	ldrb	r0, [r3, #1]
 8005f64:	2301      	movs	r3, #1
 8005f66:	f7fe ff79 	bl	8004e5c <disk_write>
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	d1b0      	bne.n	8005ed0 <f_read+0x88>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005f6e:	227f      	movs	r2, #127	; 0x7f
 8005f70:	7d23      	ldrb	r3, [r4, #20]
 8005f72:	4013      	ands	r3, r2
 8005f74:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005f76:	0021      	movs	r1, r4
 8005f78:	9b07      	ldr	r3, [sp, #28]
 8005f7a:	0032      	movs	r2, r6
 8005f7c:	7858      	ldrb	r0, [r3, #1]
 8005f7e:	3130      	adds	r1, #48	; 0x30
 8005f80:	2301      	movs	r3, #1
 8005f82:	f7fe ff5d 	bl	8004e40 <disk_read>
 8005f86:	2800      	cmp	r0, #0
 8005f88:	d1a2      	bne.n	8005ed0 <f_read+0x88>
			fp->sect = sect;
 8005f8a:	6226      	str	r6, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005f8c:	69a3      	ldr	r3, [r4, #24]
 8005f8e:	003d      	movs	r5, r7
 8005f90:	05d9      	lsls	r1, r3, #23
 8005f92:	2380      	movs	r3, #128	; 0x80
 8005f94:	0dc9      	lsrs	r1, r1, #23
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	1a5b      	subs	r3, r3, r1
 8005f9a:	429f      	cmp	r7, r3
 8005f9c:	d900      	bls.n	8005fa0 <f_read+0x158>
 8005f9e:	001d      	movs	r5, r3
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005fa0:	0023      	movs	r3, r4
 8005fa2:	3330      	adds	r3, #48	; 0x30
 8005fa4:	1859      	adds	r1, r3, r1
 8005fa6:	002a      	movs	r2, r5
 8005fa8:	9802      	ldr	r0, [sp, #8]
 8005faa:	f7ff f869 	bl	8005080 <mem_cpy.part.0>
 8005fae:	e7c1      	b.n	8005f34 <f_read+0xec>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005fb0:	2307      	movs	r3, #7
 8005fb2:	e77d      	b.n	8005eb0 <f_read+0x68>

08005fb4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fb6:	b089      	sub	sp, #36	; 0x24
 8005fb8:	9305      	str	r3, [sp, #20]
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8005fba:	2300      	movs	r3, #0
{
 8005fbc:	0017      	movs	r7, r2
	*bw = 0;	/* Clear write byte counter */
 8005fbe:	9a05      	ldr	r2, [sp, #20]
{
 8005fc0:	000d      	movs	r5, r1
	*bw = 0;	/* Clear write byte counter */
 8005fc2:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005fc4:	a907      	add	r1, sp, #28
{
 8005fc6:	0004      	movs	r4, r0
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005fc8:	f7ff f83f 	bl	800504a <validate>
 8005fcc:	9001      	str	r0, [sp, #4]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	d131      	bne.n	8006036 <f_write+0x82>
 8005fd2:	7d63      	ldrb	r3, [r4, #21]
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d12d      	bne.n	8006036 <f_write+0x82>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005fda:	7d23      	ldrb	r3, [r4, #20]
 8005fdc:	079b      	lsls	r3, r3, #30
 8005fde:	d400      	bmi.n	8005fe2 <f_write+0x2e>
 8005fe0:	e0b7      	b.n	8006152 <f_write+0x19e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005fe2:	69a3      	ldr	r3, [r4, #24]
 8005fe4:	19da      	adds	r2, r3, r7
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d900      	bls.n	8005fec <f_write+0x38>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005fea:	43df      	mvns	r7, r3
{
 8005fec:	9502      	str	r5, [sp, #8]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005fee:	2f00      	cmp	r7, #0
 8005ff0:	d01d      	beq.n	800602e <f_write+0x7a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005ff2:	69a1      	ldr	r1, [r4, #24]
 8005ff4:	05cb      	lsls	r3, r1, #23
 8005ff6:	d000      	beq.n	8005ffa <f_write+0x46>
 8005ff8:	e094      	b.n	8006124 <f_write+0x170>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005ffa:	9b07      	ldr	r3, [sp, #28]
 8005ffc:	0a4a      	lsrs	r2, r1, #9
 8005ffe:	895b      	ldrh	r3, [r3, #10]
 8006000:	3b01      	subs	r3, #1
 8006002:	401a      	ands	r2, r3
 8006004:	9203      	str	r2, [sp, #12]
			if (csect == 0) {				/* On the cluster boundary? */
 8006006:	d127      	bne.n	8006058 <f_write+0xa4>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006008:	2900      	cmp	r1, #0
 800600a:	d108      	bne.n	800601e <f_write+0x6a>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800600c:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800600e:	1e01      	subs	r1, r0, #0
					if (clst == 0) {		/* If no cluster is allocated, */
 8006010:	d015      	beq.n	800603e <f_write+0x8a>
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006012:	2801      	cmp	r0, #1
 8006014:	d117      	bne.n	8006046 <f_write+0x92>
 8006016:	2302      	movs	r3, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006018:	7563      	strb	r3, [r4, #21]
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800601a:	9301      	str	r3, [sp, #4]
 800601c:	e00b      	b.n	8006036 <f_write+0x82>
					if (fp->cltbl) {
 800601e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00b      	beq.n	800603c <f_write+0x88>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006024:	0020      	movs	r0, r4
 8006026:	f7fe ffe5 	bl	8004ff4 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800602a:	2800      	cmp	r0, #0
 800602c:	d1f1      	bne.n	8006012 <f_write+0x5e>
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800602e:	2340      	movs	r3, #64	; 0x40
 8006030:	7d22      	ldrb	r2, [r4, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 8006036:	9801      	ldr	r0, [sp, #4]
 8006038:	b009      	add	sp, #36	; 0x24
 800603a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800603c:	69e1      	ldr	r1, [r4, #28]
 800603e:	0020      	movs	r0, r4
 8006040:	f7ff fba8 	bl	8005794 <create_chain>
 8006044:	e7f1      	b.n	800602a <f_write+0x76>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006046:	1c43      	adds	r3, r0, #1
 8006048:	d101      	bne.n	800604e <f_write+0x9a>
 800604a:	2301      	movs	r3, #1
 800604c:	e7e4      	b.n	8006018 <f_write+0x64>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800604e:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8006050:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006052:	2b00      	cmp	r3, #0
 8006054:	d100      	bne.n	8006058 <f_write+0xa4>
 8006056:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006058:	7d23      	ldrb	r3, [r4, #20]
 800605a:	2b7f      	cmp	r3, #127	; 0x7f
 800605c:	d90d      	bls.n	800607a <f_write+0xc6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800605e:	0021      	movs	r1, r4
 8006060:	9b07      	ldr	r3, [sp, #28]
 8006062:	6a22      	ldr	r2, [r4, #32]
 8006064:	7858      	ldrb	r0, [r3, #1]
 8006066:	3130      	adds	r1, #48	; 0x30
 8006068:	2301      	movs	r3, #1
 800606a:	f7fe fef7 	bl	8004e5c <disk_write>
 800606e:	2800      	cmp	r0, #0
 8006070:	d1eb      	bne.n	800604a <f_write+0x96>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006072:	227f      	movs	r2, #127	; 0x7f
 8006074:	7d23      	ldrb	r3, [r4, #20]
 8006076:	4013      	ands	r3, r2
 8006078:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800607a:	9b07      	ldr	r3, [sp, #28]
 800607c:	69e1      	ldr	r1, [r4, #28]
 800607e:	0018      	movs	r0, r3
 8006080:	9304      	str	r3, [sp, #16]
 8006082:	f7fe ffab 	bl	8004fdc <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006086:	2800      	cmp	r0, #0
 8006088:	d0c5      	beq.n	8006016 <f_write+0x62>
			sect += csect;
 800608a:	9b03      	ldr	r3, [sp, #12]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800608c:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 800608e:	181e      	adds	r6, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006090:	2d00      	cmp	r5, #0
 8006092:	d035      	beq.n	8006100 <f_write+0x14c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006094:	9b04      	ldr	r3, [sp, #16]
 8006096:	9a03      	ldr	r2, [sp, #12]
 8006098:	895b      	ldrh	r3, [r3, #10]
 800609a:	1952      	adds	r2, r2, r5
 800609c:	429a      	cmp	r2, r3
 800609e:	d901      	bls.n	80060a4 <f_write+0xf0>
					cc = fs->csize - csect;
 80060a0:	9a03      	ldr	r2, [sp, #12]
 80060a2:	1a9d      	subs	r5, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80060a4:	9b04      	ldr	r3, [sp, #16]
 80060a6:	0032      	movs	r2, r6
 80060a8:	7858      	ldrb	r0, [r3, #1]
 80060aa:	9902      	ldr	r1, [sp, #8]
 80060ac:	002b      	movs	r3, r5
 80060ae:	f7fe fed5 	bl	8004e5c <disk_write>
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d1c9      	bne.n	800604a <f_write+0x96>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80060b6:	6a23      	ldr	r3, [r4, #32]
 80060b8:	1b9e      	subs	r6, r3, r6
 80060ba:	42b5      	cmp	r5, r6
 80060bc:	d90c      	bls.n	80060d8 <f_write+0x124>
 80060be:	2280      	movs	r2, #128	; 0x80
 80060c0:	0020      	movs	r0, r4
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80060c2:	9b02      	ldr	r3, [sp, #8]
 80060c4:	0276      	lsls	r6, r6, #9
 80060c6:	1999      	adds	r1, r3, r6
 80060c8:	0092      	lsls	r2, r2, #2
 80060ca:	3030      	adds	r0, #48	; 0x30
 80060cc:	f7fe ffd8 	bl	8005080 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 80060d0:	227f      	movs	r2, #127	; 0x7f
 80060d2:	7d23      	ldrb	r3, [r4, #20]
 80060d4:	4013      	ands	r3, r2
 80060d6:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80060d8:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80060da:	9b02      	ldr	r3, [sp, #8]
 80060dc:	68e2      	ldr	r2, [r4, #12]
 80060de:	195b      	adds	r3, r3, r5
 80060e0:	9302      	str	r3, [sp, #8]
 80060e2:	69a3      	ldr	r3, [r4, #24]
 80060e4:	18eb      	adds	r3, r5, r3
 80060e6:	61a3      	str	r3, [r4, #24]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d200      	bcs.n	80060ee <f_write+0x13a>
 80060ec:	001a      	movs	r2, r3
 80060ee:	9b05      	ldr	r3, [sp, #20]
 80060f0:	60e2      	str	r2, [r4, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	9a05      	ldr	r2, [sp, #20]
 80060f6:	9303      	str	r3, [sp, #12]
 80060f8:	195b      	adds	r3, r3, r5
 80060fa:	6013      	str	r3, [r2, #0]
 80060fc:	1b7f      	subs	r7, r7, r5
 80060fe:	e776      	b.n	8005fee <f_write+0x3a>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006100:	6a23      	ldr	r3, [r4, #32]
 8006102:	429e      	cmp	r6, r3
 8006104:	d00d      	beq.n	8006122 <f_write+0x16e>
 8006106:	69a3      	ldr	r3, [r4, #24]
 8006108:	68e2      	ldr	r2, [r4, #12]
 800610a:	4293      	cmp	r3, r2
 800610c:	d209      	bcs.n	8006122 <f_write+0x16e>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800610e:	0021      	movs	r1, r4
 8006110:	9b04      	ldr	r3, [sp, #16]
 8006112:	0032      	movs	r2, r6
 8006114:	7858      	ldrb	r0, [r3, #1]
 8006116:	3130      	adds	r1, #48	; 0x30
 8006118:	2301      	movs	r3, #1
 800611a:	f7fe fe91 	bl	8004e40 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800611e:	2800      	cmp	r0, #0
 8006120:	d193      	bne.n	800604a <f_write+0x96>
			fp->sect = sect;
 8006122:	6226      	str	r6, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006124:	69a3      	ldr	r3, [r4, #24]
 8006126:	003d      	movs	r5, r7
 8006128:	05d8      	lsls	r0, r3, #23
 800612a:	2380      	movs	r3, #128	; 0x80
 800612c:	0dc0      	lsrs	r0, r0, #23
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	1a1b      	subs	r3, r3, r0
 8006132:	429f      	cmp	r7, r3
 8006134:	d900      	bls.n	8006138 <f_write+0x184>
 8006136:	001d      	movs	r5, r3
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006138:	0023      	movs	r3, r4
 800613a:	3330      	adds	r3, #48	; 0x30
 800613c:	1818      	adds	r0, r3, r0
 800613e:	002a      	movs	r2, r5
 8006140:	9902      	ldr	r1, [sp, #8]
 8006142:	f7fe ff9d 	bl	8005080 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8006146:	2280      	movs	r2, #128	; 0x80
 8006148:	7d23      	ldrb	r3, [r4, #20]
 800614a:	4252      	negs	r2, r2
 800614c:	4313      	orrs	r3, r2
 800614e:	7523      	strb	r3, [r4, #20]
 8006150:	e7c3      	b.n	80060da <f_write+0x126>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006152:	2307      	movs	r3, #7
 8006154:	e761      	b.n	800601a <f_write+0x66>

08006156 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006156:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006158:	a901      	add	r1, sp, #4
{
 800615a:	0004      	movs	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800615c:	f7fe ff75 	bl	800504a <validate>
 8006160:	1e05      	subs	r5, r0, #0
	if (res == FR_OK) {
 8006162:	d13d      	bne.n	80061e0 <f_sync+0x8a>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006164:	7d23      	ldrb	r3, [r4, #20]
 8006166:	065a      	lsls	r2, r3, #25
 8006168:	d53a      	bpl.n	80061e0 <f_sync+0x8a>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800616a:	b25b      	sxtb	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	da0e      	bge.n	800618e <f_sync+0x38>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006170:	0021      	movs	r1, r4
 8006172:	9b01      	ldr	r3, [sp, #4]
 8006174:	6a22      	ldr	r2, [r4, #32]
 8006176:	7858      	ldrb	r0, [r3, #1]
 8006178:	3130      	adds	r1, #48	; 0x30
 800617a:	2301      	movs	r3, #1
 800617c:	f7fe fe6e 	bl	8004e5c <disk_write>
 8006180:	3501      	adds	r5, #1
 8006182:	2800      	cmp	r0, #0
 8006184:	d12c      	bne.n	80061e0 <f_sync+0x8a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006186:	227f      	movs	r2, #127	; 0x7f
 8006188:	7d23      	ldrb	r3, [r4, #20]
 800618a:	4013      	ands	r3, r2
 800618c:	7523      	strb	r3, [r4, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800618e:	f7fe fdc5 	bl	8004d1c <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006192:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 8006194:	0007      	movs	r7, r0
				res = move_window(fs, fp->dir_sect);
 8006196:	9801      	ldr	r0, [sp, #4]
 8006198:	f7ff f846 	bl	8005228 <move_window>
 800619c:	1e05      	subs	r5, r0, #0
				if (res == FR_OK) {
 800619e:	d11f      	bne.n	80061e0 <f_sync+0x8a>
					dir = fp->dir_ptr;
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80061a0:	2320      	movs	r3, #32
					dir = fp->dir_ptr;
 80061a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80061a4:	7af2      	ldrb	r2, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80061a6:	0031      	movs	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80061a8:	4313      	orrs	r3, r2
 80061aa:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80061ac:	68a2      	ldr	r2, [r4, #8]
 80061ae:	6820      	ldr	r0, [r4, #0]
 80061b0:	f7fe ff7d 	bl	80050ae <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80061b4:	0030      	movs	r0, r6
 80061b6:	68e1      	ldr	r1, [r4, #12]
 80061b8:	301c      	adds	r0, #28
 80061ba:	f7fe fe76 	bl	8004eaa <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80061be:	0030      	movs	r0, r6
 80061c0:	0039      	movs	r1, r7
 80061c2:	3016      	adds	r0, #22
 80061c4:	f7fe fe71 	bl	8004eaa <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 80061c8:	2301      	movs	r3, #1
 80061ca:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80061cc:	74b5      	strb	r5, [r6, #18]
	*ptr++ = (BYTE)val;
 80061ce:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 80061d0:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80061d2:	f7fe ffd1 	bl	8005178 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80061d6:	2240      	movs	r2, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 80061d8:	0005      	movs	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 80061da:	7d23      	ldrb	r3, [r4, #20]
 80061dc:	4393      	bics	r3, r2
 80061de:	7523      	strb	r3, [r4, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 80061e0:	0028      	movs	r0, r5
 80061e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080061e4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80061e4:	b513      	push	{r0, r1, r4, lr}
 80061e6:	0004      	movs	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80061e8:	f7ff ffb5 	bl	8006156 <f_sync>
	if (res == FR_OK)
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d10b      	bne.n	8006208 <f_close+0x24>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80061f0:	a901      	add	r1, sp, #4
 80061f2:	0020      	movs	r0, r4
 80061f4:	f7fe ff29 	bl	800504a <validate>
		if (res == FR_OK) {
 80061f8:	2800      	cmp	r0, #0
 80061fa:	d105      	bne.n	8006208 <f_close+0x24>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80061fc:	6920      	ldr	r0, [r4, #16]
 80061fe:	f7fe fed3 	bl	8004fa8 <dec_lock>
			if (res == FR_OK)
 8006202:	2800      	cmp	r0, #0
 8006204:	d100      	bne.n	8006208 <f_close+0x24>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006206:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8006208:	bd16      	pop	{r1, r2, r4, pc}

0800620a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800620a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800620c:	b087      	sub	sp, #28
 800620e:	000d      	movs	r5, r1
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8006210:	a905      	add	r1, sp, #20
{
 8006212:	0004      	movs	r4, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8006214:	f7fe ff19 	bl	800504a <validate>
 8006218:	9000      	str	r0, [sp, #0]
	if (res == FR_OK) res = (FRESULT)fp->err;
 800621a:	2800      	cmp	r0, #0
 800621c:	d123      	bne.n	8006266 <f_lseek+0x5c>
 800621e:	7d63      	ldrb	r3, [r4, #21]
 8006220:	9300      	str	r3, [sp, #0]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8006222:	2b00      	cmp	r3, #0
 8006224:	d11f      	bne.n	8006266 <f_lseek+0x5c>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8006226:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006228:	2b00      	cmp	r3, #0
 800622a:	d100      	bne.n	800622e <f_lseek+0x24>
 800622c:	e075      	b.n	800631a <f_lseek+0x110>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800622e:	1c6a      	adds	r2, r5, #1
 8006230:	d13a      	bne.n	80062a8 <f_lseek+0x9e>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006232:	1d1e      	adds	r6, r3, #4
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3503      	adds	r5, #3
 8006238:	9303      	str	r3, [sp, #12]
			cl = fp->obj.sclust;		/* Origin of the chain */
 800623a:	68a3      	ldr	r3, [r4, #8]
 800623c:	9301      	str	r3, [sp, #4]
			if (cl) {
 800623e:	2b00      	cmp	r3, #0
 8006240:	d102      	bne.n	8006248 <f_lseek+0x3e>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006242:	2502      	movs	r5, #2
 8006244:	e027      	b.n	8006296 <f_lseek+0x8c>
 8006246:	9001      	str	r0, [sp, #4]
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006248:	2300      	movs	r3, #0
 800624a:	9f01      	ldr	r7, [sp, #4]
 800624c:	9302      	str	r3, [sp, #8]
					do {
						pcl = cl; ncl++;
 800624e:	9b02      	ldr	r3, [sp, #8]
						cl = get_fat(&fp->obj, cl);
 8006250:	0039      	movs	r1, r7
						pcl = cl; ncl++;
 8006252:	3301      	adds	r3, #1
						cl = get_fat(&fp->obj, cl);
 8006254:	6820      	ldr	r0, [r4, #0]
						pcl = cl; ncl++;
 8006256:	9302      	str	r3, [sp, #8]
						cl = get_fat(&fp->obj, cl);
 8006258:	f7ff fa3c 	bl	80056d4 <get_fat.isra.8>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800625c:	2801      	cmp	r0, #1
 800625e:	d805      	bhi.n	800626c <f_lseek+0x62>
 8006260:	2302      	movs	r3, #2
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006262:	7563      	strb	r3, [r4, #21]
 8006264:	9300      	str	r3, [sp, #0]
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 8006266:	9800      	ldr	r0, [sp, #0]
 8006268:	b007      	add	sp, #28
 800626a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800626c:	1c43      	adds	r3, r0, #1
 800626e:	d101      	bne.n	8006274 <f_lseek+0x6a>
 8006270:	2301      	movs	r3, #1
 8006272:	e7f6      	b.n	8006262 <f_lseek+0x58>
					} while (cl == pcl + 1);
 8006274:	1c7b      	adds	r3, r7, #1
 8006276:	0007      	movs	r7, r0
 8006278:	4298      	cmp	r0, r3
 800627a:	d0e8      	beq.n	800624e <f_lseek+0x44>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800627c:	9b03      	ldr	r3, [sp, #12]
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800627e:	3502      	adds	r5, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006280:	42ab      	cmp	r3, r5
 8006282:	d304      	bcc.n	800628e <f_lseek+0x84>
						*tbl++ = ncl; *tbl++ = tcl;
 8006284:	9b02      	ldr	r3, [sp, #8]
 8006286:	6033      	str	r3, [r6, #0]
 8006288:	9b01      	ldr	r3, [sp, #4]
 800628a:	6073      	str	r3, [r6, #4]
 800628c:	3608      	adds	r6, #8
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800628e:	9b05      	ldr	r3, [sp, #20]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	4298      	cmp	r0, r3
 8006294:	d3d7      	bcc.n	8006246 <f_lseek+0x3c>
			*fp->cltbl = ulen;	/* Number of items used */
 8006296:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006298:	601d      	str	r5, [r3, #0]
			if (ulen <= tlen) {
 800629a:	9b03      	ldr	r3, [sp, #12]
 800629c:	429d      	cmp	r5, r3
 800629e:	d900      	bls.n	80062a2 <f_lseek+0x98>
 80062a0:	e0d0      	b.n	8006444 <f_lseek+0x23a>
				*tbl = 0;		/* Terminate table */
 80062a2:	2300      	movs	r3, #0
 80062a4:	6033      	str	r3, [r6, #0]
 80062a6:	e7de      	b.n	8006266 <f_lseek+0x5c>
 80062a8:	68e6      	ldr	r6, [r4, #12]
 80062aa:	42ae      	cmp	r6, r5
 80062ac:	d900      	bls.n	80062b0 <f_lseek+0xa6>
 80062ae:	002e      	movs	r6, r5
			fp->fptr = ofs;				/* Set file pointer */
 80062b0:	61a6      	str	r6, [r4, #24]
			if (ofs) {
 80062b2:	2e00      	cmp	r6, #0
 80062b4:	d0d7      	beq.n	8006266 <f_lseek+0x5c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80062b6:	1e75      	subs	r5, r6, #1
 80062b8:	0029      	movs	r1, r5
 80062ba:	0020      	movs	r0, r4
 80062bc:	f7fe fe9a 	bl	8004ff4 <clmt_clust>
				dsc = clust2sect(fs, fp->clust);
 80062c0:	9f05      	ldr	r7, [sp, #20]
				fp->clust = clmt_clust(fp, ofs - 1);
 80062c2:	0001      	movs	r1, r0
 80062c4:	61e0      	str	r0, [r4, #28]
				dsc = clust2sect(fs, fp->clust);
 80062c6:	0038      	movs	r0, r7
 80062c8:	f7fe fe88 	bl	8004fdc <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d0c7      	beq.n	8006260 <f_lseek+0x56>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80062d0:	05f6      	lsls	r6, r6, #23
 80062d2:	d0c8      	beq.n	8006266 <f_lseek+0x5c>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80062d4:	897b      	ldrh	r3, [r7, #10]
 80062d6:	0a6d      	lsrs	r5, r5, #9
 80062d8:	3b01      	subs	r3, #1
 80062da:	401d      	ands	r5, r3
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80062dc:	6a22      	ldr	r2, [r4, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80062de:	182d      	adds	r5, r5, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80062e0:	4295      	cmp	r5, r2
 80062e2:	d0c0      	beq.n	8006266 <f_lseek+0x5c>
 80062e4:	0026      	movs	r6, r4
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80062e6:	7d23      	ldrb	r3, [r4, #20]
 80062e8:	3630      	adds	r6, #48	; 0x30
 80062ea:	2b7f      	cmp	r3, #127	; 0x7f
 80062ec:	d90a      	bls.n	8006304 <f_lseek+0xfa>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80062ee:	7878      	ldrb	r0, [r7, #1]
 80062f0:	2301      	movs	r3, #1
 80062f2:	0031      	movs	r1, r6
 80062f4:	f7fe fdb2 	bl	8004e5c <disk_write>
 80062f8:	2800      	cmp	r0, #0
 80062fa:	d1b9      	bne.n	8006270 <f_lseek+0x66>
						fp->flag &= (BYTE)~FA_DIRTY;
 80062fc:	227f      	movs	r2, #127	; 0x7f
 80062fe:	7d23      	ldrb	r3, [r4, #20]
 8006300:	4013      	ands	r3, r2
 8006302:	7523      	strb	r3, [r4, #20]
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8006304:	9b05      	ldr	r3, [sp, #20]
 8006306:	002a      	movs	r2, r5
 8006308:	7858      	ldrb	r0, [r3, #1]
 800630a:	0031      	movs	r1, r6
 800630c:	2301      	movs	r3, #1
 800630e:	f7fe fd97 	bl	8004e40 <disk_read>
 8006312:	2800      	cmp	r0, #0
 8006314:	d1ac      	bne.n	8006270 <f_lseek+0x66>
					fp->sect = dsc;
 8006316:	6225      	str	r5, [r4, #32]
 8006318:	e7a5      	b.n	8006266 <f_lseek+0x5c>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800631a:	68e3      	ldr	r3, [r4, #12]
 800631c:	429d      	cmp	r5, r3
 800631e:	d903      	bls.n	8006328 <f_lseek+0x11e>
 8006320:	7d22      	ldrb	r2, [r4, #20]
 8006322:	0792      	lsls	r2, r2, #30
 8006324:	d400      	bmi.n	8006328 <f_lseek+0x11e>
 8006326:	001d      	movs	r5, r3
		fp->fptr = nsect = 0;
 8006328:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 800632a:	69a7      	ldr	r7, [r4, #24]
		fp->fptr = nsect = 0;
 800632c:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 800632e:	4295      	cmp	r5, r2
 8006330:	d101      	bne.n	8006336 <f_lseek+0x12c>
		fp->fptr = nsect = 0;
 8006332:	002e      	movs	r6, r5
 8006334:	e023      	b.n	800637e <f_lseek+0x174>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8006336:	9b05      	ldr	r3, [sp, #20]
 8006338:	895e      	ldrh	r6, [r3, #10]
 800633a:	0276      	lsls	r6, r6, #9
			if (ifptr > 0 &&
 800633c:	2f00      	cmp	r7, #0
 800633e:	d043      	beq.n	80063c8 <f_lseek+0x1be>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006340:	0031      	movs	r1, r6
 8006342:	1e68      	subs	r0, r5, #1
 8006344:	f7f9 ff0c 	bl	8000160 <__udivsi3>
 8006348:	3f01      	subs	r7, #1
 800634a:	9001      	str	r0, [sp, #4]
 800634c:	0031      	movs	r1, r6
 800634e:	0038      	movs	r0, r7
 8006350:	f7f9 ff06 	bl	8000160 <__udivsi3>
			if (ifptr > 0 &&
 8006354:	9b01      	ldr	r3, [sp, #4]
 8006356:	4283      	cmp	r3, r0
 8006358:	d336      	bcc.n	80063c8 <f_lseek+0x1be>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800635a:	4273      	negs	r3, r6
 800635c:	403b      	ands	r3, r7
				clst = fp->clust;
 800635e:	69e1      	ldr	r1, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8006360:	61a3      	str	r3, [r4, #24]
				ofs -= fp->fptr;
 8006362:	1aed      	subs	r5, r5, r3
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006364:	2702      	movs	r7, #2
			if (clst != 0) {
 8006366:	2900      	cmp	r1, #0
 8006368:	d15c      	bne.n	8006424 <f_lseek+0x21a>
		fp->fptr = nsect = 0;
 800636a:	2600      	movs	r6, #0
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800636c:	69a5      	ldr	r5, [r4, #24]
 800636e:	68e3      	ldr	r3, [r4, #12]
 8006370:	429d      	cmp	r5, r3
 8006372:	d904      	bls.n	800637e <f_lseek+0x174>
			fp->flag |= FA_MODIFIED;
 8006374:	2340      	movs	r3, #64	; 0x40
 8006376:	7d22      	ldrb	r2, [r4, #20]
			fp->obj.objsize = fp->fptr;
 8006378:	60e5      	str	r5, [r4, #12]
			fp->flag |= FA_MODIFIED;
 800637a:	4313      	orrs	r3, r2
 800637c:	7523      	strb	r3, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800637e:	05ed      	lsls	r5, r5, #23
 8006380:	d100      	bne.n	8006384 <f_lseek+0x17a>
 8006382:	e770      	b.n	8006266 <f_lseek+0x5c>
 8006384:	6a22      	ldr	r2, [r4, #32]
 8006386:	42b2      	cmp	r2, r6
 8006388:	d100      	bne.n	800638c <f_lseek+0x182>
 800638a:	e76c      	b.n	8006266 <f_lseek+0x5c>
 800638c:	0025      	movs	r5, r4
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800638e:	7d23      	ldrb	r3, [r4, #20]
 8006390:	3530      	adds	r5, #48	; 0x30
 8006392:	2b7f      	cmp	r3, #127	; 0x7f
 8006394:	d90c      	bls.n	80063b0 <f_lseek+0x1a6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006396:	9b05      	ldr	r3, [sp, #20]
 8006398:	0029      	movs	r1, r5
 800639a:	7858      	ldrb	r0, [r3, #1]
 800639c:	2301      	movs	r3, #1
 800639e:	f7fe fd5d 	bl	8004e5c <disk_write>
 80063a2:	2800      	cmp	r0, #0
 80063a4:	d000      	beq.n	80063a8 <f_lseek+0x19e>
 80063a6:	e763      	b.n	8006270 <f_lseek+0x66>
				fp->flag &= (BYTE)~FA_DIRTY;
 80063a8:	227f      	movs	r2, #127	; 0x7f
 80063aa:	7d23      	ldrb	r3, [r4, #20]
 80063ac:	4013      	ands	r3, r2
 80063ae:	7523      	strb	r3, [r4, #20]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80063b0:	9b05      	ldr	r3, [sp, #20]
 80063b2:	0032      	movs	r2, r6
 80063b4:	7858      	ldrb	r0, [r3, #1]
 80063b6:	0029      	movs	r1, r5
 80063b8:	2301      	movs	r3, #1
 80063ba:	f7fe fd41 	bl	8004e40 <disk_read>
 80063be:	2800      	cmp	r0, #0
 80063c0:	d000      	beq.n	80063c4 <f_lseek+0x1ba>
 80063c2:	e755      	b.n	8006270 <f_lseek+0x66>
			fp->sect = nsect;
 80063c4:	6226      	str	r6, [r4, #32]
 80063c6:	e74e      	b.n	8006266 <f_lseek+0x5c>
				clst = fp->obj.sclust;					/* start from the first cluster */
 80063c8:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80063ca:	2900      	cmp	r1, #0
 80063cc:	d10a      	bne.n	80063e4 <f_lseek+0x1da>
					clst = create_chain(&fp->obj, 0);
 80063ce:	0020      	movs	r0, r4
 80063d0:	f7ff f9e0 	bl	8005794 <create_chain>
 80063d4:	0001      	movs	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80063d6:	2801      	cmp	r0, #1
 80063d8:	d100      	bne.n	80063dc <f_lseek+0x1d2>
 80063da:	e741      	b.n	8006260 <f_lseek+0x56>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80063dc:	1c43      	adds	r3, r0, #1
 80063de:	d100      	bne.n	80063e2 <f_lseek+0x1d8>
 80063e0:	e746      	b.n	8006270 <f_lseek+0x66>
					fp->obj.sclust = clst;
 80063e2:	60a0      	str	r0, [r4, #8]
				fp->clust = clst;
 80063e4:	61e1      	str	r1, [r4, #28]
 80063e6:	e7bd      	b.n	8006364 <f_lseek+0x15a>
					ofs -= bcs; fp->fptr += bcs;
 80063e8:	69a3      	ldr	r3, [r4, #24]
 80063ea:	1bad      	subs	r5, r5, r6
 80063ec:	199b      	adds	r3, r3, r6
 80063ee:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80063f0:	7d23      	ldrb	r3, [r4, #20]
 80063f2:	423b      	tst	r3, r7
 80063f4:	d006      	beq.n	8006404 <f_lseek+0x1fa>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80063f6:	0020      	movs	r0, r4
 80063f8:	f7ff f9cc 	bl	8005794 <create_chain>
 80063fc:	1e01      	subs	r1, r0, #0
						if (clst == 0) {				/* Clip file size in case of disk full */
 80063fe:	d105      	bne.n	800640c <f_lseek+0x202>
							ofs = 0; break;
 8006400:	0005      	movs	r5, r0
 8006402:	e011      	b.n	8006428 <f_lseek+0x21e>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8006404:	6820      	ldr	r0, [r4, #0]
 8006406:	f7ff f965 	bl	80056d4 <get_fat.isra.8>
 800640a:	0001      	movs	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800640c:	1c4b      	adds	r3, r1, #1
 800640e:	d100      	bne.n	8006412 <f_lseek+0x208>
 8006410:	e72e      	b.n	8006270 <f_lseek+0x66>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8006412:	2901      	cmp	r1, #1
 8006414:	d800      	bhi.n	8006418 <f_lseek+0x20e>
 8006416:	e723      	b.n	8006260 <f_lseek+0x56>
 8006418:	9b05      	ldr	r3, [sp, #20]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	4299      	cmp	r1, r3
 800641e:	d300      	bcc.n	8006422 <f_lseek+0x218>
 8006420:	e71e      	b.n	8006260 <f_lseek+0x56>
					fp->clust = clst;
 8006422:	61e1      	str	r1, [r4, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8006424:	42b5      	cmp	r5, r6
 8006426:	d8df      	bhi.n	80063e8 <f_lseek+0x1de>
				fp->fptr += ofs;
 8006428:	69a3      	ldr	r3, [r4, #24]
 800642a:	195b      	adds	r3, r3, r5
 800642c:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 800642e:	05eb      	lsls	r3, r5, #23
 8006430:	d09b      	beq.n	800636a <f_lseek+0x160>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8006432:	9805      	ldr	r0, [sp, #20]
 8006434:	f7fe fdd2 	bl	8004fdc <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8006438:	2800      	cmp	r0, #0
 800643a:	d100      	bne.n	800643e <f_lseek+0x234>
 800643c:	e710      	b.n	8006260 <f_lseek+0x56>
					nsect += (DWORD)(ofs / SS(fs));
 800643e:	0a6d      	lsrs	r5, r5, #9
 8006440:	182e      	adds	r6, r5, r0
 8006442:	e793      	b.n	800636c <f_lseek+0x162>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006444:	2311      	movs	r3, #17
 8006446:	e70d      	b.n	8006264 <f_lseek+0x5a>

08006448 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8006448:	b530      	push	{r4, r5, lr}
 800644a:	b085      	sub	sp, #20
 800644c:	0004      	movs	r4, r0
 800644e:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8006450:	2509      	movs	r5, #9
 8006452:	2800      	cmp	r0, #0
 8006454:	d034      	beq.n	80064c0 <f_opendir+0x78>

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 8006456:	2200      	movs	r2, #0
 8006458:	a903      	add	r1, sp, #12
 800645a:	a801      	add	r0, sp, #4
 800645c:	f7fe ff44 	bl	80052e8 <find_volume>
 8006460:	1e05      	subs	r5, r0, #0
	if (res == FR_OK) {
 8006462:	d120      	bne.n	80064a6 <f_opendir+0x5e>
		obj->fs = fs;
 8006464:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8006466:	9901      	ldr	r1, [sp, #4]
		obj->fs = fs;
 8006468:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800646a:	0020      	movs	r0, r4
 800646c:	f7ff fad2 	bl	8005a14 <follow_path>
 8006470:	1e05      	subs	r5, r0, #0
		if (res == FR_OK) {						/* Follow completed */
 8006472:	d115      	bne.n	80064a0 <f_opendir+0x58>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8006474:	0023      	movs	r3, r4
 8006476:	332f      	adds	r3, #47	; 0x2f
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2b7f      	cmp	r3, #127	; 0x7f
 800647c:	d808      	bhi.n	8006490 <f_opendir+0x48>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800647e:	79a3      	ldrb	r3, [r4, #6]
 8006480:	06db      	lsls	r3, r3, #27
 8006482:	d522      	bpl.n	80064ca <f_opendir+0x82>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8006484:	9b03      	ldr	r3, [sp, #12]
 8006486:	6a21      	ldr	r1, [r4, #32]
 8006488:	7818      	ldrb	r0, [r3, #0]
 800648a:	f7fe fe01 	bl	8005090 <ld_clust.isra.1>
 800648e:	60a0      	str	r0, [r4, #8]
				} else {						/* This object is a file */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				obj->id = fs->id;
 8006490:	9b03      	ldr	r3, [sp, #12]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8006492:	0020      	movs	r0, r4
				obj->id = fs->id;
 8006494:	88db      	ldrh	r3, [r3, #6]
 8006496:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8006498:	f7ff fa0d 	bl	80058b6 <dir_sdi.constprop.11>
 800649c:	1e05      	subs	r5, r0, #0
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800649e:	d005      	beq.n	80064ac <f_opendir+0x64>
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80064a0:	2d04      	cmp	r5, #4
 80064a2:	d100      	bne.n	80064a6 <f_opendir+0x5e>
 80064a4:	3501      	adds	r5, #1
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80064a6:	2300      	movs	r3, #0
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	e009      	b.n	80064c0 <f_opendir+0x78>
					if (obj->sclust) {
 80064ac:	68a3      	ldr	r3, [r4, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d009      	beq.n	80064c6 <f_opendir+0x7e>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80064b2:	0029      	movs	r1, r5
 80064b4:	0020      	movs	r0, r4
 80064b6:	f7fe fd35 	bl	8004f24 <inc_lock>
 80064ba:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80064bc:	2800      	cmp	r0, #0
 80064be:	d006      	beq.n	80064ce <f_opendir+0x86>

	LEAVE_FF(fs, res);
}
 80064c0:	0028      	movs	r0, r5
 80064c2:	b005      	add	sp, #20
 80064c4:	bd30      	pop	{r4, r5, pc}
						obj->lockid = 0;	/* Root directory need not to be locked */
 80064c6:	6125      	str	r5, [r4, #16]
 80064c8:	e7fa      	b.n	80064c0 <f_opendir+0x78>
					res = FR_NO_PATH;
 80064ca:	2505      	movs	r5, #5
 80064cc:	e7eb      	b.n	80064a6 <f_opendir+0x5e>
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80064ce:	2512      	movs	r5, #18
 80064d0:	e7e9      	b.n	80064a6 <f_opendir+0x5e>

080064d2 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80064d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80064d4:	a901      	add	r1, sp, #4
{
 80064d6:	0005      	movs	r5, r0
	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80064d8:	f7fe fdb7 	bl	800504a <validate>
 80064dc:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
 80064de:	d104      	bne.n	80064ea <f_closedir+0x18>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80064e0:	6928      	ldr	r0, [r5, #16]
 80064e2:	2800      	cmp	r0, #0
 80064e4:	d103      	bne.n	80064ee <f_closedir+0x1c>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80064e6:	2300      	movs	r3, #0
 80064e8:	602b      	str	r3, [r5, #0]
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 80064ea:	0020      	movs	r0, r4
 80064ec:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			res = dec_lock(dp->obj.lockid);
 80064ee:	f7fe fd5b 	bl	8004fa8 <dec_lock>
		if (res == FR_OK)
 80064f2:	2800      	cmp	r0, #0
 80064f4:	d0f7      	beq.n	80064e6 <f_closedir+0x14>
 80064f6:	0004      	movs	r4, r0
 80064f8:	e7f7      	b.n	80064ea <f_closedir+0x18>

080064fa <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80064fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064fc:	000d      	movs	r5, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80064fe:	a901      	add	r1, sp, #4
{
 8006500:	0004      	movs	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8006502:	f7fe fda2 	bl	800504a <validate>
	if (res == FR_OK) {
 8006506:	2800      	cmp	r0, #0
 8006508:	d104      	bne.n	8006514 <f_readdir+0x1a>
		if (!fno) {
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800650a:	0020      	movs	r0, r4
		if (!fno) {
 800650c:	2d00      	cmp	r5, #0
 800650e:	d102      	bne.n	8006516 <f_readdir+0x1c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8006510:	f7ff f9d1 	bl	80058b6 <dir_sdi.constprop.11>
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 8006514:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			res = dir_read(dp, 0);			/* Read an item */
 8006516:	f7ff fb33 	bl	8005b80 <dir_read.constprop.9>
			if (res == FR_OK) {				/* A valid entry is found */
 800651a:	23fb      	movs	r3, #251	; 0xfb
 800651c:	4003      	ands	r3, r0
 800651e:	d1f9      	bne.n	8006514 <f_readdir+0x1a>
	fno->fname[0] = 0;		/* Invaidate file info */
 8006520:	726b      	strb	r3, [r5, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006522:	69e3      	ldr	r3, [r4, #28]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d003      	beq.n	8006530 <f_readdir+0x36>
 8006528:	0029      	movs	r1, r5
 800652a:	0020      	movs	r0, r4
 800652c:	f7fe fdca 	bl	80050c4 <get_fileinfo.part.3>
				res = dir_next(dp, 0);		/* Increment index for next */
 8006530:	2100      	movs	r1, #0
 8006532:	0020      	movs	r0, r4
 8006534:	f7ff f9f6 	bl	8005924 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8006538:	2804      	cmp	r0, #4
 800653a:	d1eb      	bne.n	8006514 <f_readdir+0x1a>
 800653c:	2000      	movs	r0, #0
 800653e:	e7e9      	b.n	8006514 <f_readdir+0x1a>

08006540 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
 8006540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	FRESULT res;
	FATFS *fs;
	DWORD ncl;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006542:	a901      	add	r1, sp, #4
{
 8006544:	0004      	movs	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006546:	f7fe fd80 	bl	800504a <validate>
 800654a:	1e05      	subs	r5, r0, #0
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 800654c:	d145      	bne.n	80065da <f_truncate+0x9a>
 800654e:	7d65      	ldrb	r5, [r4, #21]
 8006550:	2d00      	cmp	r5, #0
 8006552:	d142      	bne.n	80065da <f_truncate+0x9a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006554:	2702      	movs	r7, #2
 8006556:	7d23      	ldrb	r3, [r4, #20]
 8006558:	423b      	tst	r3, r7
 800655a:	d03d      	beq.n	80065d8 <f_truncate+0x98>

	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
 800655c:	69a3      	ldr	r3, [r4, #24]
 800655e:	68e2      	ldr	r2, [r4, #12]
 8006560:	4293      	cmp	r3, r2
 8006562:	d23a      	bcs.n	80065da <f_truncate+0x9a>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 8006564:	2b00      	cmp	r3, #0
 8006566:	d121      	bne.n	80065ac <f_truncate+0x6c>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8006568:	002a      	movs	r2, r5
 800656a:	68a1      	ldr	r1, [r4, #8]
 800656c:	0020      	movs	r0, r4
 800656e:	f7ff f969 	bl	8005844 <remove_chain>
 8006572:	0006      	movs	r6, r0
			fp->obj.sclust = 0;
 8006574:	60a5      	str	r5, [r4, #8]
			if (ncl == 1) res = FR_INT_ERR;
			if (res == FR_OK && ncl < fs->n_fatent) {
				res = remove_chain(&fp->obj, ncl, fp->clust);
			}
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
 8006576:	69a3      	ldr	r3, [r4, #24]
		fp->flag |= FA_MODIFIED;
 8006578:	7d22      	ldrb	r2, [r4, #20]
		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
 800657a:	60e3      	str	r3, [r4, #12]
		fp->flag |= FA_MODIFIED;
 800657c:	2340      	movs	r3, #64	; 0x40
 800657e:	4313      	orrs	r3, r2
 8006580:	7523      	strb	r3, [r4, #20]
#if !_FS_TINY
		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
 8006582:	2e00      	cmp	r6, #0
 8006584:	d12c      	bne.n	80065e0 <f_truncate+0xa0>
 8006586:	b25b      	sxtb	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	da26      	bge.n	80065da <f_truncate+0x9a>
			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 800658c:	0021      	movs	r1, r4
 800658e:	9b01      	ldr	r3, [sp, #4]
 8006590:	6a22      	ldr	r2, [r4, #32]
 8006592:	7858      	ldrb	r0, [r3, #1]
 8006594:	3130      	adds	r1, #48	; 0x30
 8006596:	2301      	movs	r3, #1
 8006598:	f7fe fc60 	bl	8004e5c <disk_write>
 800659c:	2800      	cmp	r0, #0
 800659e:	d11e      	bne.n	80065de <f_truncate+0x9e>
				res = FR_DISK_ERR;
			} else {
				fp->flag &= (BYTE)~FA_DIRTY;
 80065a0:	227f      	movs	r2, #127	; 0x7f
 80065a2:	7d23      	ldrb	r3, [r4, #20]
 80065a4:	4013      	ands	r3, r2
 80065a6:	7523      	strb	r3, [r4, #20]
			}
		}
#endif
		if (res != FR_OK) ABORT(fs, res);
 80065a8:	0035      	movs	r5, r6
 80065aa:	e016      	b.n	80065da <f_truncate+0x9a>
			ncl = get_fat(&fp->obj, fp->clust);
 80065ac:	69e1      	ldr	r1, [r4, #28]
 80065ae:	6820      	ldr	r0, [r4, #0]
 80065b0:	f7ff f890 	bl	80056d4 <get_fat.isra.8>
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80065b4:	2601      	movs	r6, #1
			ncl = get_fat(&fp->obj, fp->clust);
 80065b6:	0001      	movs	r1, r0
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80065b8:	1c43      	adds	r3, r0, #1
 80065ba:	d0dc      	beq.n	8006576 <f_truncate+0x36>
			if (ncl == 1) res = FR_INT_ERR;
 80065bc:	003e      	movs	r6, r7
 80065be:	2801      	cmp	r0, #1
 80065c0:	d0d9      	beq.n	8006576 <f_truncate+0x36>
			if (res == FR_OK && ncl < fs->n_fatent) {
 80065c2:	9b01      	ldr	r3, [sp, #4]
 80065c4:	002e      	movs	r6, r5
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	4298      	cmp	r0, r3
 80065ca:	d2d4      	bcs.n	8006576 <f_truncate+0x36>
				res = remove_chain(&fp->obj, ncl, fp->clust);
 80065cc:	69e2      	ldr	r2, [r4, #28]
 80065ce:	0020      	movs	r0, r4
 80065d0:	f7ff f938 	bl	8005844 <remove_chain>
 80065d4:	0006      	movs	r6, r0
 80065d6:	e7ce      	b.n	8006576 <f_truncate+0x36>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80065d8:	2507      	movs	r5, #7
	}

	LEAVE_FF(fs, res);
}
 80065da:	0028      	movs	r0, r5
 80065dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
 80065de:	2601      	movs	r6, #1
		if (res != FR_OK) ABORT(fs, res);
 80065e0:	7566      	strb	r6, [r4, #21]
 80065e2:	e7e1      	b.n	80065a8 <f_truncate+0x68>

080065e4 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 80065e4:	b570      	push	{r4, r5, r6, lr}
 80065e6:	b0a4      	sub	sp, #144	; 0x90
 80065e8:	9003      	str	r0, [sp, #12]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 80065ea:	a802      	add	r0, sp, #8
{
 80065ec:	9102      	str	r1, [sp, #8]
	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 80065ee:	f7fe fd16 	bl	800501e <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 80065f2:	2202      	movs	r2, #2
 80065f4:	a905      	add	r1, sp, #20
 80065f6:	a803      	add	r0, sp, #12
 80065f8:	f7fe fe76 	bl	80052e8 <find_volume>
	if (res == FR_OK) {
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d000      	beq.n	8006602 <f_rename+0x1e>
 8006600:	e08b      	b.n	800671a <f_rename+0x136>
		djo.obj.fs = fs;
 8006602:	9b05      	ldr	r3, [sp, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 8006604:	9903      	ldr	r1, [sp, #12]
 8006606:	a80c      	add	r0, sp, #48	; 0x30
		djo.obj.fs = fs;
 8006608:	930c      	str	r3, [sp, #48]	; 0x30
		res = follow_path(&djo, path_old);		/* Check old object */
 800660a:	f7ff fa03 	bl	8005a14 <follow_path>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800660e:	2800      	cmp	r0, #0
 8006610:	d000      	beq.n	8006614 <f_rename+0x30>
 8006612:	e082      	b.n	800671a <f_rename+0x136>
 8006614:	2357      	movs	r3, #87	; 0x57
 8006616:	aa02      	add	r2, sp, #8
 8006618:	189b      	adds	r3, r3, r2
 800661a:	225f      	movs	r2, #95	; 0x5f
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	3006      	adds	r0, #6
 8006620:	4393      	bics	r3, r2
 8006622:	d17a      	bne.n	800671a <f_rename+0x136>
#if _FS_LOCK != 0
		if (res == FR_OK) {
			res = chk_lock(&djo, 2);
 8006624:	2102      	movs	r1, #2
 8006626:	a80c      	add	r0, sp, #48	; 0x30
 8006628:	f7fe fc4e 	bl	8004ec8 <chk_lock>
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 800662c:	2800      	cmp	r0, #0
 800662e:	d174      	bne.n	800671a <f_rename+0x136>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 8006630:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006632:	ac06      	add	r4, sp, #24
 8006634:	0019      	movs	r1, r3
 8006636:	2215      	movs	r2, #21
 8006638:	310b      	adds	r1, #11
 800663a:	0020      	movs	r0, r4
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	f7fe fd1f 	bl	8005080 <mem_cpy.part.0>
 8006642:	a90c      	add	r1, sp, #48	; 0x30
 8006644:	a818      	add	r0, sp, #96	; 0x60
 8006646:	2230      	movs	r2, #48	; 0x30
 8006648:	f7fe fd1a 	bl	8005080 <mem_cpy.part.0>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800664c:	9902      	ldr	r1, [sp, #8]
 800664e:	a818      	add	r0, sp, #96	; 0x60
 8006650:	f7ff f9e0 	bl	8005a14 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 8006654:	2800      	cmp	r0, #0
 8006656:	d15e      	bne.n	8006716 <f_rename+0x132>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 8006658:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800665a:	3008      	adds	r0, #8
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006660:	9301      	str	r3, [sp, #4]
 8006662:	9a01      	ldr	r2, [sp, #4]
 8006664:	9b00      	ldr	r3, [sp, #0]
 8006666:	4293      	cmp	r3, r2
 8006668:	d157      	bne.n	800671a <f_rename+0x136>
 800666a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006670:	9301      	str	r3, [sp, #4]
 8006672:	9a01      	ldr	r2, [sp, #4]
 8006674:	9b00      	ldr	r3, [sp, #0]
 8006676:	4293      	cmp	r3, r2
 8006678:	d14f      	bne.n	800671a <f_rename+0x136>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
					res = dir_register(&djn);			/* Register the new entry */
 800667a:	a818      	add	r0, sp, #96	; 0x60
 800667c:	f7ff faae 	bl	8005bdc <dir_register>
					if (res == FR_OK) {
 8006680:	2800      	cmp	r0, #0
 8006682:	d14a      	bne.n	800671a <f_rename+0x136>
						dir = djn.dir;					/* Copy information about object except name */
 8006684:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006686:	2112      	movs	r1, #18
						mem_cpy(dir + 13, buf + 2, 19);
 8006688:	0028      	movs	r0, r5
 800668a:	ab02      	add	r3, sp, #8
 800668c:	2213      	movs	r2, #19
 800668e:	18c9      	adds	r1, r1, r3
 8006690:	300d      	adds	r0, #13
 8006692:	f7fe fcf5 	bl	8005080 <mem_cpy.part.0>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 8006696:	2320      	movs	r3, #32
						fs->wflag = 1;
 8006698:	2601      	movs	r6, #1
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800669a:	7822      	ldrb	r2, [r4, #0]
						fs->wflag = 1;
 800669c:	9c05      	ldr	r4, [sp, #20]
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800669e:	4313      	orrs	r3, r2
 80066a0:	72eb      	strb	r3, [r5, #11]
						fs->wflag = 1;
 80066a2:	70e6      	strb	r6, [r4, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 80066a4:	7aeb      	ldrb	r3, [r5, #11]
 80066a6:	06db      	lsls	r3, r3, #27
 80066a8:	d525      	bpl.n	80066f6 <f_rename+0x112>
 80066aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80066b0:	9301      	str	r3, [sp, #4]
 80066b2:	9a01      	ldr	r2, [sp, #4]
 80066b4:	9b00      	ldr	r3, [sp, #0]
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d01d      	beq.n	80066f6 <f_rename+0x112>
							dw = clust2sect(fs, ld_clust(fs, dir));
 80066ba:	0029      	movs	r1, r5
 80066bc:	7820      	ldrb	r0, [r4, #0]
 80066be:	f7fe fce7 	bl	8005090 <ld_clust.isra.1>
 80066c2:	0001      	movs	r1, r0
 80066c4:	0020      	movs	r0, r4
 80066c6:	f7fe fc89 	bl	8004fdc <clust2sect>
 80066ca:	0001      	movs	r1, r0
							if (!dw) {
								res = FR_INT_ERR;
 80066cc:	2002      	movs	r0, #2
							if (!dw) {
 80066ce:	2900      	cmp	r1, #0
 80066d0:	d023      	beq.n	800671a <f_rename+0x136>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 80066d2:	0020      	movs	r0, r4
 80066d4:	f7fe fda8 	bl	8005228 <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
 80066d8:	2800      	cmp	r0, #0
 80066da:	d11e      	bne.n	800671a <f_rename+0x136>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 80066dc:	9805      	ldr	r0, [sp, #20]
								if (res == FR_OK && dir[1] == '.') {
 80066de:	0003      	movs	r3, r0
 80066e0:	3351      	adds	r3, #81	; 0x51
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	2b2e      	cmp	r3, #46	; 0x2e
 80066e6:	d106      	bne.n	80066f6 <f_rename+0x112>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 80066e8:	0001      	movs	r1, r0
									st_clust(fs, dir, djn.obj.sclust);
 80066ea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 80066ec:	3150      	adds	r1, #80	; 0x50
									st_clust(fs, dir, djn.obj.sclust);
 80066ee:	f7fe fcde 	bl	80050ae <st_clust.isra.2>
									fs->wflag = 1;
 80066f2:	9b05      	ldr	r3, [sp, #20]
 80066f4:	70de      	strb	r6, [r3, #3]
	FATFS *fs = dp->obj.fs;
 80066f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	res = move_window(fs, dp->sect);
 80066f8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80066fa:	0020      	movs	r0, r4
 80066fc:	f7fe fd94 	bl	8005228 <move_window>
	if (res == FR_OK) {
 8006700:	2800      	cmp	r0, #0
 8006702:	d10a      	bne.n	800671a <f_rename+0x136>
		dp->dir[DIR_Name] = DDEM;
 8006704:	22e5      	movs	r2, #229	; 0xe5
 8006706:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006708:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800670a:	2301      	movs	r3, #1
 800670c:	70e3      	strb	r3, [r4, #3]
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
				if (res == FR_OK) {
					res = sync_fs(fs);
 800670e:	9805      	ldr	r0, [sp, #20]
 8006710:	f7fe fd32 	bl	8005178 <sync_fs>
 8006714:	e001      	b.n	800671a <f_rename+0x136>
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 8006716:	2804      	cmp	r0, #4
 8006718:	d0af      	beq.n	800667a <f_rename+0x96>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 800671a:	b024      	add	sp, #144	; 0x90
 800671c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006720 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006720:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8006722:	4b0f      	ldr	r3, [pc, #60]	; (8006760 <FATFS_LinkDriverEx+0x40>)
  uint8_t ret = 1;
 8006724:	2501      	movs	r5, #1
  if(disk.nbr < _VOLUMES)
 8006726:	7a5c      	ldrb	r4, [r3, #9]
 8006728:	b2e4      	uxtb	r4, r4
 800672a:	2c00      	cmp	r4, #0
 800672c:	d115      	bne.n	800675a <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 800672e:	7a5d      	ldrb	r5, [r3, #9]
 8006730:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8006732:	7a5d      	ldrb	r5, [r3, #9]
 8006734:	00ad      	lsls	r5, r5, #2
 8006736:	195d      	adds	r5, r3, r5
 8006738:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 800673a:	7a58      	ldrb	r0, [r3, #9]
    DiskNum = disk.nbr++;
    path[0] = DiskNum + '0';
    path[1] = ':';
    path[2] = '/';
    path[3] = 0;
 800673c:	0025      	movs	r5, r4
    disk.lun[disk.nbr] = lun;
 800673e:	1818      	adds	r0, r3, r0
 8006740:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8006742:	7a5a      	ldrb	r2, [r3, #9]
 8006744:	b2d2      	uxtb	r2, r2
 8006746:	1c50      	adds	r0, r2, #1
 8006748:	b2c0      	uxtb	r0, r0
 800674a:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 800674c:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800674e:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8006750:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8006752:	3b0b      	subs	r3, #11
    path[0] = DiskNum + '0';
 8006754:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8006756:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8006758:	70cc      	strb	r4, [r1, #3]
    ret = 0;
  }

  return ret;
}
 800675a:	0028      	movs	r0, r5
 800675c:	bd30      	pop	{r4, r5, pc}
 800675e:	46c0      	nop			; (mov r8, r8)
 8006760:	200013d8 	.word	0x200013d8

08006764 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006764:	b510      	push	{r4, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8006766:	2200      	movs	r2, #0
 8006768:	f7ff ffda 	bl	8006720 <FATFS_LinkDriverEx>
}
 800676c:	bd10      	pop	{r4, pc}

0800676e <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 800676e:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 8006770:	2800      	cmp	r0, #0
 8006772:	d103      	bne.n	800677c <lv_disp_get_scr_act+0xe>
 8006774:	f005 fcee 	bl	800c154 <lv_disp_get_default>
    if(!disp) {
        LV_LOG_WARN("lv_scr_act: no display registered to get its top layer");
        return NULL;
 8006778:	1e03      	subs	r3, r0, #0
    if(!disp) {
 800677a:	d000      	beq.n	800677e <lv_disp_get_scr_act+0x10>
    }

    return disp->act_scr;
 800677c:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 800677e:	0018      	movs	r0, r3
 8006780:	bd10      	pop	{r4, pc}

08006782 <lv_disp_load_scr>:
/**
 * Make a screen active
 * @param scr pointer to a screen
 */
void lv_disp_load_scr(lv_obj_t * scr)
{
 8006782:	b510      	push	{r4, lr}
 8006784:	0004      	movs	r4, r0
    lv_disp_t * d = lv_obj_get_disp(scr);
 8006786:	f000 f9fb 	bl	8006b80 <lv_obj_get_disp>

    d->act_scr = scr;
 800678a:	6384      	str	r4, [r0, #56]	; 0x38

    lv_obj_invalidate(scr);
 800678c:	0020      	movs	r0, r4
 800678e:	f000 fa1f 	bl	8006bd0 <lv_obj_invalidate>
}
 8006792:	bd10      	pop	{r4, pc}

08006794 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 8006794:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 8006796:	2800      	cmp	r0, #0
 8006798:	d103      	bne.n	80067a2 <lv_disp_get_layer_top+0xe>
 800679a:	f005 fcdb 	bl	800c154 <lv_disp_get_default>
    if(!disp) {
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
 800679e:	1e03      	subs	r3, r0, #0
    if(!disp) {
 80067a0:	d000      	beq.n	80067a4 <lv_disp_get_layer_top+0x10>
    }

    return disp->top_layer;
 80067a2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
}
 80067a4:	0018      	movs	r0, r3
 80067a6:	bd10      	pop	{r4, pc}

080067a8 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 80067a8:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 80067aa:	2800      	cmp	r0, #0
 80067ac:	d103      	bne.n	80067b6 <lv_disp_get_layer_sys+0xe>
 80067ae:	f005 fcd1 	bl	800c154 <lv_disp_get_default>
    if(!disp) {
        LV_LOG_WARN("lv_layer_sys: no display registered to get its top layer");
        return NULL;
 80067b2:	1e03      	subs	r3, r0, #0
    if(!disp) {
 80067b4:	d000      	beq.n	80067b8 <lv_disp_get_layer_sys+0x10>
    }

    return disp->sys_layer;
 80067b6:	6c03      	ldr	r3, [r0, #64]	; 0x40
}
 80067b8:	0018      	movs	r0, r3
 80067ba:	bd10      	pop	{r4, pc}

080067bc <obj_to_foreground>:

    if(group->focus_cb) group->focus_cb(group);
}

static void obj_to_foreground(lv_obj_t * obj)
{
 80067bc:	b570      	push	{r4, r5, r6, lr}
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
 80067be:	2400      	movs	r4, #0
    while(i != NULL) {
        if(i->top != 0) last_top = i;
 80067c0:	2520      	movs	r5, #32
    while(i != NULL) {
 80067c2:	2800      	cmp	r0, #0
 80067c4:	d105      	bne.n	80067d2 <obj_to_foreground+0x16>
        i = lv_obj_get_parent(i);
    }

    if(last_top != NULL) {
 80067c6:	2c00      	cmp	r4, #0
 80067c8:	d002      	beq.n	80067d0 <obj_to_foreground+0x14>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
 80067ca:	0020      	movs	r0, r4
 80067cc:	f000 fa4f 	bl	8006c6e <lv_obj_move_foreground>
    }
}
 80067d0:	bd70      	pop	{r4, r5, r6, pc}
        if(i->top != 0) last_top = i;
 80067d2:	0003      	movs	r3, r0
 80067d4:	3330      	adds	r3, #48	; 0x30
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	422b      	tst	r3, r5
 80067da:	d000      	beq.n	80067de <obj_to_foreground+0x22>
 80067dc:	0004      	movs	r4, r0
        i = lv_obj_get_parent(i);
 80067de:	f000 fe46 	bl	800746e <lv_obj_get_parent>
 80067e2:	e7ee      	b.n	80067c2 <obj_to_foreground+0x6>

080067e4 <focus_next_core.part.0>:
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 80067e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067e6:	0005      	movs	r5, r0
    bool can_begin           = true;
 80067e8:	2701      	movs	r7, #1
    lv_obj_t ** obj_sentinel = NULL;
 80067ea:	2600      	movs	r6, #0
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 80067ec:	b085      	sub	sp, #20
    lv_obj_t ** obj_next     = group->obj_focus;
 80067ee:	68c4      	ldr	r4, [r0, #12]
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 80067f0:	9102      	str	r1, [sp, #8]
 80067f2:	9203      	str	r2, [sp, #12]
        if(obj_next == NULL) {
 80067f4:	2c00      	cmp	r4, #0
 80067f6:	d14e      	bne.n	8006896 <focus_next_core.part.0+0xb2>
            if(group->wrap || obj_sentinel == NULL) {
 80067f8:	002b      	movs	r3, r5
 80067fa:	2210      	movs	r2, #16
 80067fc:	3358      	adds	r3, #88	; 0x58
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	4213      	tst	r3, r2
 8006802:	d103      	bne.n	800680c <focus_next_core.part.0+0x28>
 8006804:	2e00      	cmp	r6, #0
 8006806:	d053      	beq.n	80068b0 <focus_next_core.part.0+0xcc>
}
 8006808:	b005      	add	sp, #20
 800680a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if(!can_begin) return;
 800680c:	2f00      	cmp	r7, #0
 800680e:	d0fb      	beq.n	8006808 <focus_next_core.part.0+0x24>
                obj_next  = begin(&group->obj_ll);
 8006810:	0028      	movs	r0, r5
 8006812:	9b02      	ldr	r3, [sp, #8]
 8006814:	4798      	blx	r3
        if(obj_sentinel == NULL) {
 8006816:	2700      	movs	r7, #0
                obj_next  = begin(&group->obj_ll);
 8006818:	0004      	movs	r4, r0
        if(obj_sentinel == NULL) {
 800681a:	42be      	cmp	r6, r7
 800681c:	d145      	bne.n	80068aa <focus_next_core.part.0+0xc6>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 800681e:	2c00      	cmp	r4, #0
 8006820:	d0f2      	beq.n	8006808 <focus_next_core.part.0+0x24>
 8006822:	0026      	movs	r6, r4
 8006824:	2700      	movs	r7, #0
        if(!lv_obj_get_hidden(*obj_next)) break;
 8006826:	6820      	ldr	r0, [r4, #0]
 8006828:	f000 fec6 	bl	80075b8 <lv_obj_get_hidden>
 800682c:	9001      	str	r0, [sp, #4]
 800682e:	2800      	cmp	r0, #0
 8006830:	d1e0      	bne.n	80067f4 <focus_next_core.part.0+0x10>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 8006832:	68eb      	ldr	r3, [r5, #12]
 8006834:	42a3      	cmp	r3, r4
 8006836:	d0e7      	beq.n	8006808 <focus_next_core.part.0+0x24>
    if(group->obj_focus) {
 8006838:	2b00      	cmp	r3, #0
 800683a:	d010      	beq.n	800685e <focus_next_core.part.0+0x7a>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 800683c:	6818      	ldr	r0, [r3, #0]
 800683e:	9a01      	ldr	r2, [sp, #4]
 8006840:	69c3      	ldr	r3, [r0, #28]
 8006842:	2110      	movs	r1, #16
 8006844:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 8006846:	68eb      	ldr	r3, [r5, #12]
 8006848:	9a01      	ldr	r2, [sp, #4]
 800684a:	210d      	movs	r1, #13
 800684c:	6818      	ldr	r0, [r3, #0]
 800684e:	f000 f97f 	bl	8006b50 <lv_event_send>
        if(res != LV_RES_OK) return;
 8006852:	2801      	cmp	r0, #1
 8006854:	d1d8      	bne.n	8006808 <focus_next_core.part.0+0x24>
        lv_obj_invalidate(*group->obj_focus);
 8006856:	68eb      	ldr	r3, [r5, #12]
 8006858:	6818      	ldr	r0, [r3, #0]
 800685a:	f000 f9b9 	bl	8006bd0 <lv_obj_invalidate>
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 800685e:	6820      	ldr	r0, [r4, #0]
 8006860:	2200      	movs	r2, #0
 8006862:	69c3      	ldr	r3, [r0, #28]
 8006864:	210f      	movs	r1, #15
    group->obj_focus = obj_next;
 8006866:	60ec      	str	r4, [r5, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8006868:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 800686a:	68eb      	ldr	r3, [r5, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	210c      	movs	r1, #12
 8006870:	6818      	ldr	r0, [r3, #0]
 8006872:	f000 f96d 	bl	8006b50 <lv_event_send>
    if(res != LV_RES_OK) return;
 8006876:	2801      	cmp	r0, #1
 8006878:	d1c6      	bne.n	8006808 <focus_next_core.part.0+0x24>
    obj_to_foreground(*group->obj_focus);
 800687a:	68eb      	ldr	r3, [r5, #12]
 800687c:	6818      	ldr	r0, [r3, #0]
 800687e:	f7ff ff9d 	bl	80067bc <obj_to_foreground>
    lv_obj_invalidate(*group->obj_focus);
 8006882:	68eb      	ldr	r3, [r5, #12]
 8006884:	6818      	ldr	r0, [r3, #0]
 8006886:	f000 f9a3 	bl	8006bd0 <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 800688a:	69ab      	ldr	r3, [r5, #24]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d0bb      	beq.n	8006808 <focus_next_core.part.0+0x24>
 8006890:	0028      	movs	r0, r5
 8006892:	4798      	blx	r3
 8006894:	e7b8      	b.n	8006808 <focus_next_core.part.0+0x24>
        if(obj_sentinel == NULL) {
 8006896:	2e00      	cmp	r6, #0
 8006898:	d100      	bne.n	800689c <focus_next_core.part.0+0xb8>
 800689a:	0026      	movs	r6, r4
            obj_next = move(&group->obj_ll, obj_next);
 800689c:	0021      	movs	r1, r4
 800689e:	0028      	movs	r0, r5
 80068a0:	9b03      	ldr	r3, [sp, #12]
 80068a2:	4798      	blx	r3
 80068a4:	0004      	movs	r4, r0
            if(obj_next == obj_sentinel) return;
 80068a6:	42b0      	cmp	r0, r6
 80068a8:	d0ae      	beq.n	8006808 <focus_next_core.part.0+0x24>
        if(obj_next == NULL) continue;
 80068aa:	2c00      	cmp	r4, #0
 80068ac:	d1bb      	bne.n	8006826 <focus_next_core.part.0+0x42>
 80068ae:	e7a3      	b.n	80067f8 <focus_next_core.part.0+0x14>
                if(!can_begin) return;
 80068b0:	2f00      	cmp	r7, #0
 80068b2:	d0a9      	beq.n	8006808 <focus_next_core.part.0+0x24>
                obj_next  = begin(&group->obj_ll);
 80068b4:	0028      	movs	r0, r5
 80068b6:	9b02      	ldr	r3, [sp, #8]
 80068b8:	4798      	blx	r3
 80068ba:	0004      	movs	r4, r0
 80068bc:	e7af      	b.n	800681e <focus_next_core.part.0+0x3a>
	...

080068c0 <lv_group_init>:
{
 80068c0:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 80068c2:	215c      	movs	r1, #92	; 0x5c
 80068c4:	4801      	ldr	r0, [pc, #4]	; (80068cc <lv_group_init+0xc>)
 80068c6:	f005 ff40 	bl	800c74a <lv_ll_init>
}
 80068ca:	bd10      	pop	{r4, pc}
 80068cc:	200053c8 	.word	0x200053c8

080068d0 <lv_group_focus_next>:
    if(group->frozen) return;
 80068d0:	0003      	movs	r3, r0
 80068d2:	3358      	adds	r3, #88	; 0x58
 80068d4:	781b      	ldrb	r3, [r3, #0]
{
 80068d6:	b510      	push	{r4, lr}
    if(group->frozen) return;
 80068d8:	07db      	lsls	r3, r3, #31
 80068da:	d403      	bmi.n	80068e4 <lv_group_focus_next+0x14>
 80068dc:	4a02      	ldr	r2, [pc, #8]	; (80068e8 <lv_group_focus_next+0x18>)
 80068de:	4903      	ldr	r1, [pc, #12]	; (80068ec <lv_group_focus_next+0x1c>)
 80068e0:	f7ff ff80 	bl	80067e4 <focus_next_core.part.0>
}
 80068e4:	bd10      	pop	{r4, pc}
 80068e6:	46c0      	nop			; (mov r8, r8)
 80068e8:	0800c7ef 	.word	0x0800c7ef
 80068ec:	0800c7df 	.word	0x0800c7df

080068f0 <lv_group_focus_prev>:
    if(group->frozen) return;
 80068f0:	0003      	movs	r3, r0
 80068f2:	3358      	adds	r3, #88	; 0x58
 80068f4:	781b      	ldrb	r3, [r3, #0]
{
 80068f6:	b510      	push	{r4, lr}
    if(group->frozen) return;
 80068f8:	07db      	lsls	r3, r3, #31
 80068fa:	d403      	bmi.n	8006904 <lv_group_focus_prev+0x14>
 80068fc:	4a02      	ldr	r2, [pc, #8]	; (8006908 <lv_group_focus_prev+0x18>)
 80068fe:	4903      	ldr	r1, [pc, #12]	; (800690c <lv_group_focus_prev+0x1c>)
 8006900:	f7ff ff70 	bl	80067e4 <focus_next_core.part.0>
}
 8006904:	bd10      	pop	{r4, pc}
 8006906:	46c0      	nop			; (mov r8, r8)
 8006908:	0800c80b 	.word	0x0800c80b
 800690c:	0800c7e7 	.word	0x0800c7e7

08006910 <lv_group_refocus>:
{
 8006910:	b570      	push	{r4, r5, r6, lr}
    uint8_t temp_wrap = g->wrap;
 8006912:	0004      	movs	r4, r0
    g->wrap           = 1;
 8006914:	2310      	movs	r3, #16
    uint8_t temp_wrap = g->wrap;
 8006916:	3458      	adds	r4, #88	; 0x58
 8006918:	7822      	ldrb	r2, [r4, #0]
 800691a:	06d5      	lsls	r5, r2, #27
    g->wrap           = 1;
 800691c:	4313      	orrs	r3, r2
    uint8_t temp_wrap = g->wrap;
 800691e:	0fed      	lsrs	r5, r5, #31
    g->wrap           = 1;
 8006920:	7023      	strb	r3, [r4, #0]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8006922:	071b      	lsls	r3, r3, #28
 8006924:	d408      	bmi.n	8006938 <lv_group_refocus+0x28>
        lv_group_focus_next(g);
 8006926:	f7ff ffd3 	bl	80068d0 <lv_group_focus_next>
    g->wrap = temp_wrap;
 800692a:	2210      	movs	r2, #16
 800692c:	7823      	ldrb	r3, [r4, #0]
 800692e:	012d      	lsls	r5, r5, #4
 8006930:	4393      	bics	r3, r2
 8006932:	432b      	orrs	r3, r5
 8006934:	7023      	strb	r3, [r4, #0]
}
 8006936:	bd70      	pop	{r4, r5, r6, pc}
        lv_group_focus_prev(g);
 8006938:	f7ff ffda 	bl	80068f0 <lv_group_focus_prev>
 800693c:	e7f5      	b.n	800692a <lv_group_refocus+0x1a>

0800693e <lv_group_add_obj>:
{
 800693e:	b570      	push	{r4, r5, r6, lr}
 8006940:	0004      	movs	r4, r0
 8006942:	000d      	movs	r5, r1
    if(group == NULL) return;
 8006944:	2800      	cmp	r0, #0
 8006946:	d026      	beq.n	8006996 <lv_group_add_obj+0x58>
    LV_LL_READ(group->obj_ll, obj_i)
 8006948:	f005 ff49 	bl	800c7de <lv_ll_get_head>
 800694c:	2800      	cmp	r0, #0
 800694e:	d111      	bne.n	8006974 <lv_group_add_obj+0x36>
    if(obj->group_p) {
 8006950:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006952:	2b00      	cmp	r3, #0
 8006954:	d007      	beq.n	8006966 <lv_group_add_obj+0x28>
        if(lv_obj_is_focused(obj)) {
 8006956:	0028      	movs	r0, r5
 8006958:	f000 fe9c 	bl	8007694 <lv_obj_is_focused>
 800695c:	2800      	cmp	r0, #0
 800695e:	d002      	beq.n	8006966 <lv_group_add_obj+0x28>
            lv_group_refocus(obj->group_p);
 8006960:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8006962:	f7ff ffd5 	bl	8006910 <lv_group_refocus>
    obj->group_p     = group;
 8006966:	62ec      	str	r4, [r5, #44]	; 0x2c
    lv_obj_t ** next = lv_ll_ins_tail(&group->obj_ll);
 8006968:	0020      	movs	r0, r4
 800696a:	f005 ff18 	bl	800c79e <lv_ll_ins_tail>
 800696e:	1e06      	subs	r6, r0, #0
    lv_mem_assert(next);
 8006970:	d108      	bne.n	8006984 <lv_group_add_obj+0x46>
 8006972:	e7fe      	b.n	8006972 <lv_group_add_obj+0x34>
        if((*obj_i) == obj) {
 8006974:	6803      	ldr	r3, [r0, #0]
 8006976:	42ab      	cmp	r3, r5
 8006978:	d00d      	beq.n	8006996 <lv_group_add_obj+0x58>
    LV_LL_READ(group->obj_ll, obj_i)
 800697a:	0001      	movs	r1, r0
 800697c:	0020      	movs	r0, r4
 800697e:	f005 ff36 	bl	800c7ee <lv_ll_get_next>
 8006982:	e7e3      	b.n	800694c <lv_group_add_obj+0xe>
    *next = obj;
 8006984:	6005      	str	r5, [r0, #0]
    if(lv_ll_get_head(&group->obj_ll) == next) {
 8006986:	0020      	movs	r0, r4
 8006988:	f005 ff29 	bl	800c7de <lv_ll_get_head>
 800698c:	4286      	cmp	r6, r0
 800698e:	d102      	bne.n	8006996 <lv_group_add_obj+0x58>
        lv_group_refocus(group);
 8006990:	0020      	movs	r0, r4
 8006992:	f7ff ffbd 	bl	8006910 <lv_group_refocus>
}
 8006996:	bd70      	pop	{r4, r5, r6, pc}

08006998 <lv_group_mod_style>:
{
 8006998:	b570      	push	{r4, r5, r6, lr}
    lv_style_copy(&group->style_tmp, style);
 800699a:	0005      	movs	r5, r0
{
 800699c:	0004      	movs	r4, r0
    lv_style_copy(&group->style_tmp, style);
 800699e:	351c      	adds	r5, #28
 80069a0:	0028      	movs	r0, r5
 80069a2:	f001 f9d9 	bl	8007d58 <lv_style_copy>
    if(group->editing) {
 80069a6:	0023      	movs	r3, r4
 80069a8:	3358      	adds	r3, #88	; 0x58
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	079b      	lsls	r3, r3, #30
 80069ae:	d507      	bpl.n	80069c0 <lv_group_mod_style+0x28>
        if(group->style_mod_edit_cb) group->style_mod_edit_cb(group, &group->style_tmp);
 80069b0:	6963      	ldr	r3, [r4, #20]
        if(group->style_mod_cb) group->style_mod_cb(group, &group->style_tmp);
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <lv_group_mod_style+0x24>
 80069b6:	0029      	movs	r1, r5
 80069b8:	0020      	movs	r0, r4
 80069ba:	4798      	blx	r3
}
 80069bc:	0028      	movs	r0, r5
 80069be:	bd70      	pop	{r4, r5, r6, pc}
        if(group->style_mod_cb) group->style_mod_cb(group, &group->style_tmp);
 80069c0:	6923      	ldr	r3, [r4, #16]
 80069c2:	e7f6      	b.n	80069b2 <lv_group_mod_style+0x1a>

080069c4 <lv_group_get_focused>:
    if(!group) return NULL;
 80069c4:	1e03      	subs	r3, r0, #0
 80069c6:	d003      	beq.n	80069d0 <lv_group_get_focused+0xc>
    if(group->obj_focus == NULL) return NULL;
 80069c8:	68c2      	ldr	r2, [r0, #12]
    if(!group) return NULL;
 80069ca:	1e13      	subs	r3, r2, #0
    if(group->obj_focus == NULL) return NULL;
 80069cc:	d000      	beq.n	80069d0 <lv_group_get_focused+0xc>
    return *group->obj_focus;
 80069ce:	6813      	ldr	r3, [r2, #0]
}
 80069d0:	0018      	movs	r0, r3
 80069d2:	4770      	bx	lr

080069d4 <lv_indev_reset.part.1>:
}
/**
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 */
void lv_indev_reset(lv_indev_t * indev)
 80069d4:	b510      	push	{r4, lr}
{
    if(indev)
        indev->proc.reset_query = 1;
    else {
        lv_indev_t * i = lv_indev_get_next(NULL);
 80069d6:	2000      	movs	r0, #0
 80069d8:	f005 fc18 	bl	800c20c <lv_indev_get_next>
        while(i) {
            i->proc.reset_query = 1;
 80069dc:	2402      	movs	r4, #2
        while(i) {
 80069de:	2800      	cmp	r0, #0
 80069e0:	d100      	bne.n	80069e4 <lv_indev_reset.part.1+0x10>

            i = lv_indev_get_next(i);
        }
    }
}
 80069e2:	bd10      	pop	{r4, pc}
            i->proc.reset_query = 1;
 80069e4:	0002      	movs	r2, r0
 80069e6:	324c      	adds	r2, #76	; 0x4c
 80069e8:	7813      	ldrb	r3, [r2, #0]
 80069ea:	4323      	orrs	r3, r4
 80069ec:	7013      	strb	r3, [r2, #0]
            i = lv_indev_get_next(i);
 80069ee:	f005 fc0d 	bl	800c20c <lv_indev_get_next>
 80069f2:	e7f4      	b.n	80069de <lv_indev_reset.part.1+0xa>

080069f4 <lv_indev_init>:
{
 80069f4:	b510      	push	{r4, lr}
 80069f6:	f7ff ffed 	bl	80069d4 <lv_indev_reset.part.1>
}
 80069fa:	bd10      	pop	{r4, pc}

080069fc <lv_indev_get_act>:
    return indev_act;
 80069fc:	4b01      	ldr	r3, [pc, #4]	; (8006a04 <lv_indev_get_act+0x8>)
 80069fe:	6818      	ldr	r0, [r3, #0]
}
 8006a00:	4770      	bx	lr
 8006a02:	46c0      	nop			; (mov r8, r8)
 8006a04:	200013e4 	.word	0x200013e4

08006a08 <refresh_children_position>:
 * @param obj pointer to an object which children will be repositioned
 * @param x_diff x coordinate shift
 * @param y_diff y coordinate shift
 */
static void refresh_children_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)
{
 8006a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_obj_t * i;
    LV_LL_READ(obj->child_ll, i)
 8006a0a:	1d05      	adds	r5, r0, #4
 8006a0c:	0028      	movs	r0, r5
{
 8006a0e:	000e      	movs	r6, r1
 8006a10:	0017      	movs	r7, r2
    LV_LL_READ(obj->child_ll, i)
 8006a12:	f005 fee4 	bl	800c7de <lv_ll_get_head>
 8006a16:	1e04      	subs	r4, r0, #0
 8006a18:	d100      	bne.n	8006a1c <refresh_children_position+0x14>
        i->coords.x2 += x_diff;
        i->coords.y2 += y_diff;

        refresh_children_position(i, x_diff, y_diff);
    }
}
 8006a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        i->coords.x1 += x_diff;
 8006a1c:	8a23      	ldrh	r3, [r4, #16]
 8006a1e:	b2b2      	uxth	r2, r6
        i->coords.y1 += y_diff;
 8006a20:	8a61      	ldrh	r1, [r4, #18]
        i->coords.x1 += x_diff;
 8006a22:	18d3      	adds	r3, r2, r3
 8006a24:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
 8006a26:	b2bb      	uxth	r3, r7
 8006a28:	1859      	adds	r1, r3, r1
 8006a2a:	8261      	strh	r1, [r4, #18]
        i->coords.x2 += x_diff;
 8006a2c:	8aa1      	ldrh	r1, [r4, #20]
        refresh_children_position(i, x_diff, y_diff);
 8006a2e:	0020      	movs	r0, r4
        i->coords.x2 += x_diff;
 8006a30:	1852      	adds	r2, r2, r1
 8006a32:	82a2      	strh	r2, [r4, #20]
        i->coords.y2 += y_diff;
 8006a34:	8ae2      	ldrh	r2, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
 8006a36:	0031      	movs	r1, r6
        i->coords.y2 += y_diff;
 8006a38:	189b      	adds	r3, r3, r2
 8006a3a:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
 8006a3c:	003a      	movs	r2, r7
 8006a3e:	f7ff ffe3 	bl	8006a08 <refresh_children_position>
    LV_LL_READ(obj->child_ll, i)
 8006a42:	0021      	movs	r1, r4
 8006a44:	0028      	movs	r0, r5
 8006a46:	f005 fed2 	bl	800c7ee <lv_ll_get_next>
 8006a4a:	e7e4      	b.n	8006a16 <refresh_children_position+0xe>

08006a4c <lv_init>:
{
 8006a4c:	b510      	push	{r4, lr}
    if(lv_initialized) {
 8006a4e:	4c12      	ldr	r4, [pc, #72]	; (8006a98 <lv_init+0x4c>)
 8006a50:	7823      	ldrb	r3, [r4, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d11f      	bne.n	8006a96 <lv_init+0x4a>
    lv_mem_init();
 8006a56:	f006 f809 	bl	800ca6c <lv_mem_init>
    lv_task_core_init();
 8006a5a:	f006 f8a7 	bl	800cbac <lv_task_core_init>
    lv_fs_init();
 8006a5e:	f005 fd81 	bl	800c564 <lv_fs_init>
    lv_anim_core_init();
 8006a62:	f005 fc7d 	bl	800c360 <lv_anim_core_init>
    lv_group_init();
 8006a66:	f7ff ff2b 	bl	80068c0 <lv_group_init>
    lv_style_init();
 8006a6a:	f001 f97b 	bl	8007d64 <lv_style_init>
    lv_refr_init();
 8006a6e:	f000 ff43 	bl	80078f8 <lv_refr_init>
    lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8006a72:	21b6      	movs	r1, #182	; 0xb6
 8006a74:	4809      	ldr	r0, [pc, #36]	; (8006a9c <lv_init+0x50>)
 8006a76:	0049      	lsls	r1, r1, #1
 8006a78:	f005 fe67 	bl	800c74a <lv_ll_init>
    lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8006a7c:	215c      	movs	r1, #92	; 0x5c
 8006a7e:	4808      	ldr	r0, [pc, #32]	; (8006aa0 <lv_init+0x54>)
 8006a80:	f005 fe63 	bl	800c74a <lv_ll_init>
    lv_indev_init();
 8006a84:	f7ff ffb6 	bl	80069f4 <lv_indev_init>
    lv_img_decoder_init();
 8006a88:	f005 f99a 	bl	800bdc0 <lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 8006a8c:	2001      	movs	r0, #1
 8006a8e:	f004 fe47 	bl	800b720 <lv_img_cache_set_size>
    lv_initialized = true;
 8006a92:	2301      	movs	r3, #1
 8006a94:	7023      	strb	r3, [r4, #0]
}
 8006a96:	bd10      	pop	{r4, pc}
 8006a98:	200013f0 	.word	0x200013f0
 8006a9c:	20005390 	.word	0x20005390
 8006aa0:	20005380 	.word	0x20005380

08006aa4 <lv_obj_set_click>:
    obj->click = (en == true ? 1 : 0);
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	000b      	movs	r3, r1
 8006aa8:	3030      	adds	r0, #48	; 0x30
 8006aaa:	7801      	ldrb	r1, [r0, #0]
 8006aac:	4013      	ands	r3, r2
 8006aae:	4391      	bics	r1, r2
 8006ab0:	4319      	orrs	r1, r3
 8006ab2:	7001      	strb	r1, [r0, #0]
}
 8006ab4:	4770      	bx	lr

08006ab6 <lv_obj_set_protect>:
    obj->protect |= prot;
 8006ab6:	3032      	adds	r0, #50	; 0x32
 8006ab8:	7803      	ldrb	r3, [r0, #0]
 8006aba:	4319      	orrs	r1, r3
 8006abc:	7001      	strb	r1, [r0, #0]
}
 8006abe:	4770      	bx	lr

08006ac0 <lv_event_send_func>:
{
 8006ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ac2:	b089      	sub	sp, #36	; 0x24
 8006ac4:	9302      	str	r3, [sp, #8]
    event_temp_data.deleted = false;
 8006ac6:	2300      	movs	r3, #0
    if(event_temp_data_head) {
 8006ac8:	4e1f      	ldr	r6, [pc, #124]	; (8006b48 <lv_event_send_func+0x88>)
    event_temp_data.obj     = obj;
 8006aca:	ad05      	add	r5, sp, #20
    event_temp_data.deleted = false;
 8006acc:	712b      	strb	r3, [r5, #4]
    event_temp_data.prev    = NULL;
 8006ace:	60ab      	str	r3, [r5, #8]
    if(event_temp_data_head) {
 8006ad0:	6833      	ldr	r3, [r6, #0]
{
 8006ad2:	9001      	str	r0, [sp, #4]
 8006ad4:	000c      	movs	r4, r1
 8006ad6:	9200      	str	r2, [sp, #0]
    event_temp_data.obj     = obj;
 8006ad8:	9105      	str	r1, [sp, #20]
    if(event_temp_data_head) {
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d000      	beq.n	8006ae0 <lv_event_send_func+0x20>
        event_temp_data.prev = event_temp_data_head;
 8006ade:	60ab      	str	r3, [r5, #8]
    const void * event_act_data_save = event_act_data;
 8006ae0:	4f1a      	ldr	r7, [pc, #104]	; (8006b4c <lv_event_send_func+0x8c>)
    event_temp_data_head = &event_temp_data;
 8006ae2:	6035      	str	r5, [r6, #0]
    const void * event_act_data_save = event_act_data;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	9303      	str	r3, [sp, #12]
    event_act_data                   = data;
 8006ae8:	9b02      	ldr	r3, [sp, #8]
 8006aea:	603b      	str	r3, [r7, #0]
    lv_indev_t * indev_act = lv_indev_get_act();
 8006aec:	f7ff ff86 	bl	80069fc <lv_indev_get_act>
    if(indev_act) {
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d004      	beq.n	8006afe <lv_event_send_func+0x3e>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
 8006af4:	6883      	ldr	r3, [r0, #8]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <lv_event_send_func+0x3e>
 8006afa:	9900      	ldr	r1, [sp, #0]
 8006afc:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
 8006afe:	9b01      	ldr	r3, [sp, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d002      	beq.n	8006b0a <lv_event_send_func+0x4a>
 8006b04:	9900      	ldr	r1, [sp, #0]
 8006b06:	0020      	movs	r0, r4
 8006b08:	4798      	blx	r3
        return LV_RES_INV;
 8006b0a:	2000      	movs	r0, #0
    event_act_data = event_act_data_save;
 8006b0c:	9b03      	ldr	r3, [sp, #12]
 8006b0e:	603b      	str	r3, [r7, #0]
    event_temp_data_head = event_temp_data_head->prev;
 8006b10:	6833      	ldr	r3, [r6, #0]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	6033      	str	r3, [r6, #0]
    if(event_temp_data.deleted) {
 8006b16:	792b      	ldrb	r3, [r5, #4]
 8006b18:	4283      	cmp	r3, r0
 8006b1a:	d113      	bne.n	8006b44 <lv_event_send_func+0x84>
    return LV_RES_OK;
 8006b1c:	3001      	adds	r0, #1
    if(obj) {
 8006b1e:	2c00      	cmp	r4, #0
 8006b20:	d010      	beq.n	8006b44 <lv_event_send_func+0x84>
        if(obj->parent_event && obj->par) {
 8006b22:	0023      	movs	r3, r4
 8006b24:	3330      	adds	r3, #48	; 0x30
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	2b7f      	cmp	r3, #127	; 0x7f
 8006b2a:	d90b      	bls.n	8006b44 <lv_event_send_func+0x84>
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d008      	beq.n	8006b44 <lv_event_send_func+0x84>
            lv_res_t res = lv_event_send(obj->par, event, data);
 8006b32:	9a02      	ldr	r2, [sp, #8]
 8006b34:	0018      	movs	r0, r3
 8006b36:	9900      	ldr	r1, [sp, #0]
 8006b38:	f000 f80a 	bl	8006b50 <lv_event_send>
            if(res != LV_RES_OK) {
 8006b3c:	3801      	subs	r0, #1
 8006b3e:	4242      	negs	r2, r0
 8006b40:	4142      	adcs	r2, r0
        return LV_RES_INV;
 8006b42:	b2d0      	uxtb	r0, r2
}
 8006b44:	b009      	add	sp, #36	; 0x24
 8006b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b48:	200013ec 	.word	0x200013ec
 8006b4c:	200013e8 	.word	0x200013e8

08006b50 <lv_event_send>:
{
 8006b50:	b510      	push	{r4, lr}
 8006b52:	0013      	movs	r3, r2
 8006b54:	0004      	movs	r4, r0
    if(obj == NULL) return LV_RES_OK;
 8006b56:	2001      	movs	r0, #1
 8006b58:	2c00      	cmp	r4, #0
 8006b5a:	d004      	beq.n	8006b66 <lv_event_send+0x16>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 8006b5c:	000a      	movs	r2, r1
 8006b5e:	69a0      	ldr	r0, [r4, #24]
 8006b60:	0021      	movs	r1, r4
 8006b62:	f7ff ffad 	bl	8006ac0 <lv_event_send_func>
}
 8006b66:	bd10      	pop	{r4, pc}

08006b68 <lv_obj_set_signal_cb>:
    obj->signal_cb = signal_cb;
 8006b68:	61c1      	str	r1, [r0, #28]
}
 8006b6a:	4770      	bx	lr

08006b6c <lv_obj_set_design_cb>:
    obj->design_cb = design_cb;
 8006b6c:	6201      	str	r1, [r0, #32]
}
 8006b6e:	4770      	bx	lr

08006b70 <lv_obj_allocate_ext_attr>:
{
 8006b70:	b510      	push	{r4, lr}
 8006b72:	0004      	movs	r4, r0
    obj->ext_attr = lv_mem_realloc(obj->ext_attr, ext_size);
 8006b74:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006b76:	f005 ffeb 	bl	800cb50 <lv_mem_realloc>
 8006b7a:	6260      	str	r0, [r4, #36]	; 0x24
}
 8006b7c:	bd10      	pop	{r4, pc}
	...

08006b80 <lv_obj_get_disp>:
{
 8006b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(obj->par == NULL)
 8006b82:	6803      	ldr	r3, [r0, #0]
{
 8006b84:	0005      	movs	r5, r0
    if(obj->par == NULL)
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d108      	bne.n	8006b9c <lv_obj_get_disp+0x1c>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 8006b8a:	4e10      	ldr	r6, [pc, #64]	; (8006bcc <lv_obj_get_disp+0x4c>)
 8006b8c:	0030      	movs	r0, r6
 8006b8e:	f005 fe26 	bl	800c7de <lv_ll_get_head>
 8006b92:	1e04      	subs	r4, r0, #0
 8006b94:	d106      	bne.n	8006ba4 <lv_obj_get_disp+0x24>
}
 8006b96:	0020      	movs	r0, r4
 8006b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while(par != NULL);
 8006b9a:	001d      	movs	r5, r3
    return obj->par;
 8006b9c:	682b      	ldr	r3, [r5, #0]
    } while(par != NULL);
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1fb      	bne.n	8006b9a <lv_obj_get_disp+0x1a>
 8006ba2:	e7f2      	b.n	8006b8a <lv_obj_get_disp+0xa>
        LV_LL_READ(d->scr_ll, s)
 8006ba4:	0027      	movs	r7, r4
 8006ba6:	372c      	adds	r7, #44	; 0x2c
 8006ba8:	0038      	movs	r0, r7
 8006baa:	f005 fe18 	bl	800c7de <lv_ll_get_head>
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	d104      	bne.n	8006bbc <lv_obj_get_disp+0x3c>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 8006bb2:	0021      	movs	r1, r4
 8006bb4:	0030      	movs	r0, r6
 8006bb6:	f005 fe1a 	bl	800c7ee <lv_ll_get_next>
 8006bba:	e7ea      	b.n	8006b92 <lv_obj_get_disp+0x12>
            if(s == scr) return d;
 8006bbc:	4285      	cmp	r5, r0
 8006bbe:	d0ea      	beq.n	8006b96 <lv_obj_get_disp+0x16>
        LV_LL_READ(d->scr_ll, s)
 8006bc0:	0001      	movs	r1, r0
 8006bc2:	0038      	movs	r0, r7
 8006bc4:	f005 fe13 	bl	800c7ee <lv_ll_get_next>
 8006bc8:	e7f1      	b.n	8006bae <lv_obj_get_disp+0x2e>
 8006bca:	46c0      	nop			; (mov r8, r8)
 8006bcc:	20005390 	.word	0x20005390

08006bd0 <lv_obj_invalidate>:
    return obj->hidden == 0 ? false : true;
 8006bd0:	0003      	movs	r3, r0
 8006bd2:	3330      	adds	r3, #48	; 0x30
 8006bd4:	781b      	ldrb	r3, [r3, #0]
{
 8006bd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bd8:	0006      	movs	r6, r0
 8006bda:	0004      	movs	r4, r0
    if(lv_obj_get_hidden(obj)) return;
 8006bdc:	06db      	lsls	r3, r3, #27
 8006bde:	d501      	bpl.n	8006be4 <lv_obj_invalidate+0x14>
}
 8006be0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    } while(par != NULL);
 8006be2:	001c      	movs	r4, r3
    return obj->par;
 8006be4:	6823      	ldr	r3, [r4, #0]
    } while(par != NULL);
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1fb      	bne.n	8006be2 <lv_obj_invalidate+0x12>
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 8006bea:	0020      	movs	r0, r4
 8006bec:	f7ff ffc8 	bl	8006b80 <lv_obj_get_disp>
 8006bf0:	0005      	movs	r5, r0
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 8006bf2:	f7ff fdbc 	bl	800676e <lv_disp_get_scr_act>
 8006bf6:	4284      	cmp	r4, r0
 8006bf8:	d11f      	bne.n	8006c3a <lv_obj_invalidate+0x6a>
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 8006bfa:	0031      	movs	r1, r6
 8006bfc:	2208      	movs	r2, #8
 8006bfe:	3110      	adds	r1, #16
 8006c00:	4668      	mov	r0, sp
        lv_coord_t ext_size = obj->ext_draw_pad;
 8006c02:	2334      	movs	r3, #52	; 0x34
 8006c04:	5ef7      	ldrsh	r7, [r6, r3]
    return obj->par;
 8006c06:	6834      	ldr	r4, [r6, #0]
 8006c08:	f006 ffac 	bl	800db64 <memcpy>
        area_trunc.x1 -= ext_size;
 8006c0c:	466a      	mov	r2, sp
 8006c0e:	4669      	mov	r1, sp
    return obj->hidden == 0 ? false : true;
 8006c10:	2610      	movs	r6, #16
        area_trunc.x1 -= ext_size;
 8006c12:	8812      	ldrh	r2, [r2, #0]
 8006c14:	b2bb      	uxth	r3, r7
 8006c16:	1ad2      	subs	r2, r2, r3
 8006c18:	800a      	strh	r2, [r1, #0]
        area_trunc.y1 -= ext_size;
 8006c1a:	884a      	ldrh	r2, [r1, #2]
 8006c1c:	1ad2      	subs	r2, r2, r3
 8006c1e:	804a      	strh	r2, [r1, #2]
        area_trunc.x2 += ext_size;
 8006c20:	888a      	ldrh	r2, [r1, #4]
 8006c22:	189a      	adds	r2, r3, r2
 8006c24:	808a      	strh	r2, [r1, #4]
        area_trunc.y2 += ext_size;
 8006c26:	88ca      	ldrh	r2, [r1, #6]
 8006c28:	189b      	adds	r3, r3, r2
 8006c2a:	80cb      	strh	r3, [r1, #6]
        while(par != NULL) {
 8006c2c:	2c00      	cmp	r4, #0
 8006c2e:	d10f      	bne.n	8006c50 <lv_obj_invalidate+0x80>
        if(union_ok) lv_inv_area(disp, &area_trunc);
 8006c30:	4669      	mov	r1, sp
 8006c32:	0028      	movs	r0, r5
 8006c34:	f000 fe61 	bl	80078fa <lv_inv_area>
 8006c38:	e7d2      	b.n	8006be0 <lv_obj_invalidate+0x10>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 8006c3a:	0028      	movs	r0, r5
 8006c3c:	f7ff fdaa 	bl	8006794 <lv_disp_get_layer_top>
 8006c40:	4284      	cmp	r4, r0
 8006c42:	d0da      	beq.n	8006bfa <lv_obj_invalidate+0x2a>
       obj_scr == lv_disp_get_layer_sys(disp)) {
 8006c44:	0028      	movs	r0, r5
 8006c46:	f7ff fdaf 	bl	80067a8 <lv_disp_get_layer_sys>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 8006c4a:	4284      	cmp	r4, r0
 8006c4c:	d1c8      	bne.n	8006be0 <lv_obj_invalidate+0x10>
 8006c4e:	e7d4      	b.n	8006bfa <lv_obj_invalidate+0x2a>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 8006c50:	0022      	movs	r2, r4
 8006c52:	4669      	mov	r1, sp
 8006c54:	3210      	adds	r2, #16
 8006c56:	4668      	mov	r0, sp
 8006c58:	f005 fbb4 	bl	800c3c4 <lv_area_intersect>
            if(union_ok == false) break;       /*If no common parts with parent break;*/
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	d0bf      	beq.n	8006be0 <lv_obj_invalidate+0x10>
    return obj->hidden == 0 ? false : true;
 8006c60:	0023      	movs	r3, r4
 8006c62:	3330      	adds	r3, #48	; 0x30
 8006c64:	781b      	ldrb	r3, [r3, #0]
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
 8006c66:	4233      	tst	r3, r6
 8006c68:	d1ba      	bne.n	8006be0 <lv_obj_invalidate+0x10>
    return obj->par;
 8006c6a:	6824      	ldr	r4, [r4, #0]
 8006c6c:	e7de      	b.n	8006c2c <lv_obj_invalidate+0x5c>

08006c6e <lv_obj_move_foreground>:
{
 8006c6e:	b570      	push	{r4, r5, r6, lr}
    return obj->par;
 8006c70:	6804      	ldr	r4, [r0, #0]
{
 8006c72:	0005      	movs	r5, r0
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 8006c74:	1d26      	adds	r6, r4, #4
 8006c76:	0030      	movs	r0, r6
 8006c78:	f005 fdb1 	bl	800c7de <lv_ll_get_head>
 8006c7c:	4285      	cmp	r5, r0
 8006c7e:	d010      	beq.n	8006ca2 <lv_obj_move_foreground+0x34>
    lv_obj_invalidate(parent);
 8006c80:	0020      	movs	r0, r4
 8006c82:	f7ff ffa5 	bl	8006bd0 <lv_obj_invalidate>
    lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
 8006c86:	2301      	movs	r3, #1
 8006c88:	002a      	movs	r2, r5
 8006c8a:	0031      	movs	r1, r6
 8006c8c:	0030      	movs	r0, r6
 8006c8e:	f005 fe33 	bl	800c8f8 <lv_ll_chg_list>
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 8006c92:	002a      	movs	r2, r5
 8006c94:	2101      	movs	r1, #1
 8006c96:	0020      	movs	r0, r4
 8006c98:	69e3      	ldr	r3, [r4, #28]
 8006c9a:	4798      	blx	r3
    lv_obj_invalidate(parent);
 8006c9c:	0020      	movs	r0, r4
 8006c9e:	f7ff ff97 	bl	8006bd0 <lv_obj_invalidate>
}
 8006ca2:	bd70      	pop	{r4, r5, r6, pc}

08006ca4 <lv_obj_set_pos>:
{
 8006ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_obj_t * par = obj->par;
 8006ca6:	6807      	ldr	r7, [r0, #0]
    diff.x = x - obj->coords.x1;
 8006ca8:	8a06      	ldrh	r6, [r0, #16]
 8006caa:	8a3b      	ldrh	r3, [r7, #16]
{
 8006cac:	b085      	sub	sp, #20
    diff.x = x - obj->coords.x1;
 8006cae:	1b9e      	subs	r6, r3, r6
 8006cb0:	1876      	adds	r6, r6, r1
 8006cb2:	b2b6      	uxth	r6, r6
 8006cb4:	b233      	sxth	r3, r6
 8006cb6:	9300      	str	r3, [sp, #0]
    diff.y = y - obj->coords.y1;
 8006cb8:	8a7b      	ldrh	r3, [r7, #18]
 8006cba:	8a45      	ldrh	r5, [r0, #18]
{
 8006cbc:	0004      	movs	r4, r0
    diff.y = y - obj->coords.y1;
 8006cbe:	1b5d      	subs	r5, r3, r5
 8006cc0:	18ad      	adds	r5, r5, r2
 8006cc2:	b2ad      	uxth	r5, r5
 8006cc4:	b22b      	sxth	r3, r5
 8006cc6:	9301      	str	r3, [sp, #4]
    if(diff.x == 0 && diff.y == 0) return;
 8006cc8:	9b00      	ldr	r3, [sp, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d102      	bne.n	8006cd4 <lv_obj_set_pos+0x30>
 8006cce:	9b01      	ldr	r3, [sp, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d026      	beq.n	8006d22 <lv_obj_set_pos+0x7e>
    lv_obj_invalidate(obj);
 8006cd4:	0020      	movs	r0, r4
 8006cd6:	f7ff ff7b 	bl	8006bd0 <lv_obj_invalidate>
 8006cda:	0021      	movs	r1, r4
 8006cdc:	2208      	movs	r2, #8
 8006cde:	3110      	adds	r1, #16
 8006ce0:	a802      	add	r0, sp, #8
 8006ce2:	f006 ff3f 	bl	800db64 <memcpy>
    obj->coords.x1 += diff.x;
 8006ce6:	8a23      	ldrh	r3, [r4, #16]
    obj->coords.x2 += diff.x;
 8006ce8:	8aa1      	ldrh	r1, [r4, #20]
    obj->coords.x1 += diff.x;
 8006cea:	18f3      	adds	r3, r6, r3
    obj->coords.y2 += diff.y;
 8006cec:	8ae2      	ldrh	r2, [r4, #22]
    obj->coords.x1 += diff.x;
 8006cee:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
 8006cf0:	8a63      	ldrh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
 8006cf2:	1876      	adds	r6, r6, r1
    obj->coords.y1 += diff.y;
 8006cf4:	18eb      	adds	r3, r5, r3
    obj->coords.y2 += diff.y;
 8006cf6:	18ad      	adds	r5, r5, r2
    obj->coords.y1 += diff.y;
 8006cf8:	8263      	strh	r3, [r4, #18]
    refresh_children_position(obj, diff.x, diff.y);
 8006cfa:	9a01      	ldr	r2, [sp, #4]
 8006cfc:	9900      	ldr	r1, [sp, #0]
 8006cfe:	0020      	movs	r0, r4
    obj->coords.x2 += diff.x;
 8006d00:	82a6      	strh	r6, [r4, #20]
    obj->coords.y2 += diff.y;
 8006d02:	82e5      	strh	r5, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
 8006d04:	f7ff fe80 	bl	8006a08 <refresh_children_position>
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 8006d08:	aa02      	add	r2, sp, #8
 8006d0a:	2102      	movs	r1, #2
 8006d0c:	69e3      	ldr	r3, [r4, #28]
 8006d0e:	0020      	movs	r0, r4
 8006d10:	4798      	blx	r3
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	0022      	movs	r2, r4
 8006d16:	2101      	movs	r1, #1
 8006d18:	0038      	movs	r0, r7
 8006d1a:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8006d1c:	0020      	movs	r0, r4
 8006d1e:	f7ff ff57 	bl	8006bd0 <lv_obj_invalidate>
}
 8006d22:	b005      	add	sp, #20
 8006d24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d26 <lv_obj_align>:
{
 8006d26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d28:	0005      	movs	r5, r0
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	9302      	str	r3, [sp, #8]
 8006d2e:	ab0a      	add	r3, sp, #40	; 0x28
 8006d30:	0016      	movs	r6, r2
 8006d32:	2200      	movs	r2, #0
 8006d34:	5e9b      	ldrsh	r3, [r3, r2]
    return obj->par;
 8006d36:	6800      	ldr	r0, [r0, #0]
{
 8006d38:	9303      	str	r3, [sp, #12]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8006d3a:	8a47      	ldrh	r7, [r0, #18]
{
 8006d3c:	000c      	movs	r4, r1
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8006d3e:	8a2a      	ldrh	r2, [r5, #16]
 8006d40:	8a01      	ldrh	r1, [r0, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8006d42:	8a6b      	ldrh	r3, [r5, #18]
 8006d44:	9701      	str	r7, [sp, #4]
    if(base == NULL) {
 8006d46:	2c00      	cmp	r4, #0
 8006d48:	d100      	bne.n	8006d4c <lv_obj_align+0x26>
 8006d4a:	0004      	movs	r4, r0
    switch(align) {
 8006d4c:	2e14      	cmp	r6, #20
 8006d4e:	d817      	bhi.n	8006d80 <lv_obj_align+0x5a>
 8006d50:	0030      	movs	r0, r6
 8006d52:	f7f9 f9fb 	bl	800014c <__gnu_thumb1_case_uhi>
 8006d56:	001b      	.short	0x001b
 8006d58:	003d011e 	.word	0x003d011e
 8006d5c:	00570050 	.word	0x00570050
 8006d60:	0074005e 	.word	0x0074005e
 8006d64:	00ae007b 	.word	0x00ae007b
 8006d68:	00ca00c6 	.word	0x00ca00c6
 8006d6c:	00e600df 	.word	0x00e600df
 8006d70:	00ff00e9 	.word	0x00ff00e9
 8006d74:	010a0106 	.word	0x010a0106
 8006d78:	0112010e 	.word	0x0112010e
 8006d7c:	011b0118 	.word	0x011b0118
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8006d80:	1a52      	subs	r2, r2, r1
 8006d82:	b217      	sxth	r7, r2
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8006d84:	9a01      	ldr	r2, [sp, #4]
 8006d86:	1a9a      	subs	r2, r3, r2
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8006d88:	b212      	sxth	r2, r2
            break;
 8006d8a:	e071      	b.n	8006e70 <lv_obj_align+0x14a>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 8006d8c:	8aa0      	ldrh	r0, [r4, #20]
 8006d8e:	8a27      	ldrh	r7, [r4, #16]
 8006d90:	3001      	adds	r0, #1
 8006d92:	1bc0      	subs	r0, r0, r7
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8006d94:	b200      	sxth	r0, r0
 8006d96:	0fc7      	lsrs	r7, r0, #31
 8006d98:	1838      	adds	r0, r7, r0
 8006d9a:	8aaf      	ldrh	r7, [r5, #20]
 8006d9c:	1040      	asrs	r0, r0, #1
 8006d9e:	3701      	adds	r7, #1
 8006da0:	1aba      	subs	r2, r7, r2
 8006da2:	b212      	sxth	r2, r2
 8006da4:	0fd7      	lsrs	r7, r2, #31
 8006da6:	18ba      	adds	r2, r7, r2
 8006da8:	1052      	asrs	r2, r2, #1
 8006daa:	1a82      	subs	r2, r0, r2
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8006dac:	8ae0      	ldrh	r0, [r4, #22]
            new_x = -lv_obj_get_width(obj);
 8006dae:	b217      	sxth	r7, r2
 8006db0:	8a62      	ldrh	r2, [r4, #18]
 8006db2:	3001      	adds	r0, #1
 8006db4:	1a80      	subs	r0, r0, r2
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8006db6:	b200      	sxth	r0, r0
 8006db8:	0fc2      	lsrs	r2, r0, #31
 8006dba:	1810      	adds	r0, r2, r0
 8006dbc:	8aea      	ldrh	r2, [r5, #22]
 8006dbe:	1040      	asrs	r0, r0, #1
 8006dc0:	3201      	adds	r2, #1
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	b21b      	sxth	r3, r3
 8006dc6:	0fda      	lsrs	r2, r3, #31
 8006dc8:	18d2      	adds	r2, r2, r3
 8006dca:	1052      	asrs	r2, r2, #1
 8006dcc:	1a82      	subs	r2, r0, r2
 8006dce:	e7db      	b.n	8006d88 <lv_obj_align+0x62>
    return area_p->x2 - area_p->x1 + 1;
 8006dd0:	8aa3      	ldrh	r3, [r4, #20]
 8006dd2:	8a20      	ldrh	r0, [r4, #16]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	1a1b      	subs	r3, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8006dd8:	b21b      	sxth	r3, r3
 8006dda:	0fd8      	lsrs	r0, r3, #31
 8006ddc:	18c3      	adds	r3, r0, r3
 8006dde:	8aa8      	ldrh	r0, [r5, #20]
 8006de0:	105b      	asrs	r3, r3, #1
 8006de2:	3001      	adds	r0, #1
 8006de4:	1a82      	subs	r2, r0, r2
 8006de6:	b212      	sxth	r2, r2
 8006de8:	0fd0      	lsrs	r0, r2, #31
 8006dea:	1882      	adds	r2, r0, r2
 8006dec:	1052      	asrs	r2, r2, #1
 8006dee:	1a9a      	subs	r2, r3, r2
            new_x = -lv_obj_get_width(obj);
 8006df0:	b217      	sxth	r7, r2
            new_y = 0;
 8006df2:	2200      	movs	r2, #0
            break;
 8006df4:	e03c      	b.n	8006e70 <lv_obj_align+0x14a>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8006df6:	8aab      	ldrh	r3, [r5, #20]
 8006df8:	1a9b      	subs	r3, r3, r2
 8006dfa:	8aa2      	ldrh	r2, [r4, #20]
 8006dfc:	1ad2      	subs	r2, r2, r3
 8006dfe:	8a23      	ldrh	r3, [r4, #16]
 8006e00:	1ad2      	subs	r2, r2, r3
 8006e02:	e7f5      	b.n	8006df0 <lv_obj_align+0xca>
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8006e04:	8aea      	ldrh	r2, [r5, #22]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	8ae2      	ldrh	r2, [r4, #22]
 8006e0a:	1ad2      	subs	r2, r2, r3
    return area_p->y2 - area_p->y1 + 1;
 8006e0c:	8a60      	ldrh	r0, [r4, #18]
 8006e0e:	1a12      	subs	r2, r2, r0
 8006e10:	e02c      	b.n	8006e6c <lv_obj_align+0x146>
    return area_p->x2 - area_p->x1 + 1;
 8006e12:	8aa0      	ldrh	r0, [r4, #20]
 8006e14:	8a27      	ldrh	r7, [r4, #16]
 8006e16:	3001      	adds	r0, #1
 8006e18:	1bc0      	subs	r0, r0, r7
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8006e1a:	b200      	sxth	r0, r0
 8006e1c:	0fc7      	lsrs	r7, r0, #31
 8006e1e:	1838      	adds	r0, r7, r0
 8006e20:	8aaf      	ldrh	r7, [r5, #20]
 8006e22:	1040      	asrs	r0, r0, #1
 8006e24:	3701      	adds	r7, #1
 8006e26:	1aba      	subs	r2, r7, r2
 8006e28:	b212      	sxth	r2, r2
 8006e2a:	0fd7      	lsrs	r7, r2, #31
 8006e2c:	18ba      	adds	r2, r7, r2
 8006e2e:	1052      	asrs	r2, r2, #1
 8006e30:	1a82      	subs	r2, r0, r2
 8006e32:	b217      	sxth	r7, r2
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8006e34:	8aea      	ldrh	r2, [r5, #22]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	8ae2      	ldrh	r2, [r4, #22]
 8006e3a:	1ad2      	subs	r2, r2, r3
 8006e3c:	e087      	b.n	8006f4e <lv_obj_align+0x228>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8006e3e:	8aa8      	ldrh	r0, [r5, #20]
 8006e40:	1a80      	subs	r0, r0, r2
 8006e42:	8aa2      	ldrh	r2, [r4, #20]
 8006e44:	1a12      	subs	r2, r2, r0
 8006e46:	8a20      	ldrh	r0, [r4, #16]
 8006e48:	1a12      	subs	r2, r2, r0
 8006e4a:	e7f2      	b.n	8006e32 <lv_obj_align+0x10c>
    return area_p->y2 - area_p->y1 + 1;
 8006e4c:	8ae0      	ldrh	r0, [r4, #22]
 8006e4e:	8a62      	ldrh	r2, [r4, #18]
 8006e50:	3001      	adds	r0, #1
 8006e52:	1a80      	subs	r0, r0, r2
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8006e54:	b200      	sxth	r0, r0
 8006e56:	0fc2      	lsrs	r2, r0, #31
 8006e58:	1810      	adds	r0, r2, r0
 8006e5a:	8aea      	ldrh	r2, [r5, #22]
 8006e5c:	1040      	asrs	r0, r0, #1
 8006e5e:	3201      	adds	r2, #1
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	b21b      	sxth	r3, r3
 8006e64:	0fda      	lsrs	r2, r3, #31
 8006e66:	18d3      	adds	r3, r2, r3
 8006e68:	105b      	asrs	r3, r3, #1
 8006e6a:	1ac2      	subs	r2, r0, r3
            new_x = 0;
 8006e6c:	2700      	movs	r7, #0
 8006e6e:	b212      	sxth	r2, r2
    new_x -= par_abs_x;
 8006e70:	9b02      	ldr	r3, [sp, #8]
    new_y -= par_abs_y;
 8006e72:	9801      	ldr	r0, [sp, #4]
    new_x -= par_abs_x;
 8006e74:	1a59      	subs	r1, r3, r1
 8006e76:	8a23      	ldrh	r3, [r4, #16]
 8006e78:	1859      	adds	r1, r3, r1
    new_y -= par_abs_y;
 8006e7a:	9b03      	ldr	r3, [sp, #12]
    new_x -= par_abs_x;
 8006e7c:	19c9      	adds	r1, r1, r7
    new_y -= par_abs_y;
 8006e7e:	8a67      	ldrh	r7, [r4, #18]
 8006e80:	1a18      	subs	r0, r3, r0
 8006e82:	183f      	adds	r7, r7, r0
 8006e84:	18ba      	adds	r2, r7, r2
    lv_obj_set_pos(obj, new_x, new_y);
 8006e86:	0028      	movs	r0, r5
 8006e88:	b212      	sxth	r2, r2
 8006e8a:	b209      	sxth	r1, r1
 8006e8c:	f7ff ff0a 	bl	8006ca4 <lv_obj_set_pos>
    obj->realign.align       = align;
 8006e90:	002b      	movs	r3, r5
 8006e92:	3340      	adds	r3, #64	; 0x40
 8006e94:	701e      	strb	r6, [r3, #0]
    obj->realign.xofs        = x_mod;
 8006e96:	466b      	mov	r3, sp
 8006e98:	891b      	ldrh	r3, [r3, #8]
    obj->realign.origo_align = 0;
 8006e9a:	2202      	movs	r2, #2
    obj->realign.xofs        = x_mod;
 8006e9c:	87ab      	strh	r3, [r5, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 8006e9e:	466b      	mov	r3, sp
 8006ea0:	899b      	ldrh	r3, [r3, #12]
    obj->realign.base        = base;
 8006ea2:	63ac      	str	r4, [r5, #56]	; 0x38
    obj->realign.yofs        = y_mod;
 8006ea4:	87eb      	strh	r3, [r5, #62]	; 0x3e
    obj->realign.origo_align = 0;
 8006ea6:	3541      	adds	r5, #65	; 0x41
 8006ea8:	782b      	ldrb	r3, [r5, #0]
 8006eaa:	4393      	bics	r3, r2
 8006eac:	702b      	strb	r3, [r5, #0]
}
 8006eae:	b005      	add	sp, #20
 8006eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8006eb2:	8aa8      	ldrh	r0, [r5, #20]
 8006eb4:	1a80      	subs	r0, r0, r2
 8006eb6:	8aa2      	ldrh	r2, [r4, #20]
 8006eb8:	1a12      	subs	r2, r2, r0
    return area_p->x2 - area_p->x1 + 1;
 8006eba:	8a20      	ldrh	r0, [r4, #16]
 8006ebc:	1a12      	subs	r2, r2, r0
 8006ebe:	b217      	sxth	r7, r2
    return area_p->y2 - area_p->y1 + 1;
 8006ec0:	8ae2      	ldrh	r2, [r4, #22]
 8006ec2:	8a60      	ldrh	r0, [r4, #18]
 8006ec4:	3201      	adds	r2, #1
 8006ec6:	1a12      	subs	r2, r2, r0
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8006ec8:	b212      	sxth	r2, r2
 8006eca:	0fd0      	lsrs	r0, r2, #31
 8006ecc:	1882      	adds	r2, r0, r2
 8006ece:	8ae8      	ldrh	r0, [r5, #22]
 8006ed0:	1052      	asrs	r2, r2, #1
 8006ed2:	3001      	adds	r0, #1
 8006ed4:	1ac3      	subs	r3, r0, r3
 8006ed6:	b21b      	sxth	r3, r3
 8006ed8:	0fd8      	lsrs	r0, r3, #31
 8006eda:	18c3      	adds	r3, r0, r3
 8006edc:	105b      	asrs	r3, r3, #1
 8006ede:	1ad2      	subs	r2, r2, r3
 8006ee0:	e752      	b.n	8006d88 <lv_obj_align+0x62>
 8006ee2:	8aea      	ldrh	r2, [r5, #22]
 8006ee4:	1ad2      	subs	r2, r2, r3
            new_y = -lv_obj_get_height(obj);
 8006ee6:	43d2      	mvns	r2, r2
 8006ee8:	e7c0      	b.n	8006e6c <lv_obj_align+0x146>
    return area_p->x2 - area_p->x1 + 1;
 8006eea:	8aa0      	ldrh	r0, [r4, #20]
 8006eec:	8a27      	ldrh	r7, [r4, #16]
 8006eee:	3001      	adds	r0, #1
 8006ef0:	1bc0      	subs	r0, r0, r7
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8006ef2:	b200      	sxth	r0, r0
 8006ef4:	0fc7      	lsrs	r7, r0, #31
 8006ef6:	1838      	adds	r0, r7, r0
 8006ef8:	8aaf      	ldrh	r7, [r5, #20]
 8006efa:	1040      	asrs	r0, r0, #1
 8006efc:	3701      	adds	r7, #1
 8006efe:	1aba      	subs	r2, r7, r2
 8006f00:	b212      	sxth	r2, r2
 8006f02:	0fd7      	lsrs	r7, r2, #31
 8006f04:	18ba      	adds	r2, r7, r2
 8006f06:	1052      	asrs	r2, r2, #1
 8006f08:	1a82      	subs	r2, r0, r2
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8006f0a:	b217      	sxth	r7, r2
    return area_p->y2 - area_p->y1 + 1;
 8006f0c:	8aea      	ldrh	r2, [r5, #22]
 8006f0e:	1ad2      	subs	r2, r2, r3
            new_y = -lv_obj_get_height(obj);
 8006f10:	43d2      	mvns	r2, r2
 8006f12:	e739      	b.n	8006d88 <lv_obj_align+0x62>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8006f14:	8aa8      	ldrh	r0, [r5, #20]
 8006f16:	1a80      	subs	r0, r0, r2
 8006f18:	8aa2      	ldrh	r2, [r4, #20]
 8006f1a:	1a12      	subs	r2, r2, r0
 8006f1c:	8a20      	ldrh	r0, [r4, #16]
 8006f1e:	1a12      	subs	r2, r2, r0
 8006f20:	e7f3      	b.n	8006f0a <lv_obj_align+0x1e4>
 8006f22:	8ae2      	ldrh	r2, [r4, #22]
 8006f24:	3201      	adds	r2, #1
 8006f26:	e771      	b.n	8006e0c <lv_obj_align+0xe6>
    return area_p->x2 - area_p->x1 + 1;
 8006f28:	8aa3      	ldrh	r3, [r4, #20]
 8006f2a:	8a20      	ldrh	r0, [r4, #16]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	1a1b      	subs	r3, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8006f30:	b21b      	sxth	r3, r3
 8006f32:	0fd8      	lsrs	r0, r3, #31
 8006f34:	18c3      	adds	r3, r0, r3
 8006f36:	8aa8      	ldrh	r0, [r5, #20]
 8006f38:	105b      	asrs	r3, r3, #1
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	1a82      	subs	r2, r0, r2
 8006f3e:	b212      	sxth	r2, r2
 8006f40:	0fd0      	lsrs	r0, r2, #31
 8006f42:	1882      	adds	r2, r0, r2
 8006f44:	1052      	asrs	r2, r2, #1
 8006f46:	1a9a      	subs	r2, r3, r2
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8006f48:	b217      	sxth	r7, r2
    return area_p->y2 - area_p->y1 + 1;
 8006f4a:	8ae2      	ldrh	r2, [r4, #22]
 8006f4c:	3201      	adds	r2, #1
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8006f4e:	8a60      	ldrh	r0, [r4, #18]
 8006f50:	1a12      	subs	r2, r2, r0
 8006f52:	e719      	b.n	8006d88 <lv_obj_align+0x62>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8006f54:	8aab      	ldrh	r3, [r5, #20]
 8006f56:	1a9b      	subs	r3, r3, r2
 8006f58:	8aa2      	ldrh	r2, [r4, #20]
 8006f5a:	1ad2      	subs	r2, r2, r3
 8006f5c:	8a23      	ldrh	r3, [r4, #16]
 8006f5e:	1ad2      	subs	r2, r2, r3
 8006f60:	e7f2      	b.n	8006f48 <lv_obj_align+0x222>
    return area_p->x2 - area_p->x1 + 1;
 8006f62:	8aab      	ldrh	r3, [r5, #20]
 8006f64:	1a9a      	subs	r2, r3, r2
            new_x = -lv_obj_get_width(obj);
 8006f66:	43d2      	mvns	r2, r2
 8006f68:	e742      	b.n	8006df0 <lv_obj_align+0xca>
 8006f6a:	8aa8      	ldrh	r0, [r5, #20]
 8006f6c:	1a82      	subs	r2, r0, r2
            new_x = -lv_obj_get_width(obj);
 8006f6e:	43d2      	mvns	r2, r2
 8006f70:	e71c      	b.n	8006dac <lv_obj_align+0x86>
 8006f72:	8aa8      	ldrh	r0, [r5, #20]
 8006f74:	1a82      	subs	r2, r0, r2
            new_x = -lv_obj_get_width(obj);
 8006f76:	43d2      	mvns	r2, r2
 8006f78:	e75b      	b.n	8006e32 <lv_obj_align+0x10c>
 8006f7a:	8aa3      	ldrh	r3, [r4, #20]
 8006f7c:	8a22      	ldrh	r2, [r4, #16]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	1a9b      	subs	r3, r3, r2
 8006f82:	b21f      	sxth	r7, r3
 8006f84:	e735      	b.n	8006df2 <lv_obj_align+0xcc>
 8006f86:	8aa2      	ldrh	r2, [r4, #20]
 8006f88:	3201      	adds	r2, #1
 8006f8a:	e796      	b.n	8006eba <lv_obj_align+0x194>
 8006f8c:	8aa2      	ldrh	r2, [r4, #20]
 8006f8e:	3201      	adds	r2, #1
 8006f90:	e759      	b.n	8006e46 <lv_obj_align+0x120>
            new_y = 0;
 8006f92:	2200      	movs	r2, #0
            new_x = 0;
 8006f94:	0017      	movs	r7, r2
 8006f96:	e76b      	b.n	8006e70 <lv_obj_align+0x14a>

08006f98 <lv_obj_align_origo>:
{
 8006f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f9a:	0005      	movs	r5, r0
 8006f9c:	b087      	sub	sp, #28
 8006f9e:	9304      	str	r3, [sp, #16]
 8006fa0:	ab0c      	add	r3, sp, #48	; 0x30
 8006fa2:	0016      	movs	r6, r2
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	5e9b      	ldrsh	r3, [r3, r2]
    return obj->par;
 8006fa8:	6807      	ldr	r7, [r0, #0]
{
 8006faa:	9305      	str	r3, [sp, #20]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8006fac:	8a3b      	ldrh	r3, [r7, #16]
 8006fae:	8a00      	ldrh	r0, [r0, #16]
 8006fb0:	9301      	str	r3, [sp, #4]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8006fb2:	8a6b      	ldrh	r3, [r5, #18]
{
 8006fb4:	000c      	movs	r4, r1
 8006fb6:	8aa9      	ldrh	r1, [r5, #20]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8006fb8:	9303      	str	r3, [sp, #12]
 8006fba:	3101      	adds	r1, #1
 8006fbc:	8a7b      	ldrh	r3, [r7, #18]
 8006fbe:	1a09      	subs	r1, r1, r0
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 8006fc0:	b209      	sxth	r1, r1
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8006fc2:	9302      	str	r3, [sp, #8]
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 8006fc4:	0fcb      	lsrs	r3, r1, #31
 8006fc6:	1859      	adds	r1, r3, r1
    return area_p->y2 - area_p->y1 + 1;
 8006fc8:	8aeb      	ldrh	r3, [r5, #22]
 8006fca:	9a03      	ldr	r2, [sp, #12]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	1a9b      	subs	r3, r3, r2
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 8006fd0:	b21b      	sxth	r3, r3
 8006fd2:	0fda      	lsrs	r2, r3, #31
 8006fd4:	4694      	mov	ip, r2
 8006fd6:	4463      	add	r3, ip
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 8006fd8:	1049      	asrs	r1, r1, #1
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 8006fda:	105b      	asrs	r3, r3, #1
    if(base == NULL) {
 8006fdc:	2c00      	cmp	r4, #0
 8006fde:	d100      	bne.n	8006fe2 <lv_obj_align_origo+0x4a>
 8006fe0:	003c      	movs	r4, r7
    switch(align) {
 8006fe2:	2e14      	cmp	r6, #20
 8006fe4:	d80d      	bhi.n	8007002 <lv_obj_align_origo+0x6a>
 8006fe6:	0030      	movs	r0, r6
 8006fe8:	f7f9 f89c 	bl	8000124 <__gnu_thumb1_case_uqi>
 8006fec:	6a256412 	.word	0x6a256412
 8006ff0:	66785368 	.word	0x66785368
 8006ff4:	6a256471 	.word	0x6a256471
 8006ff8:	64785368 	.word	0x64785368
 8006ffc:	716a6866 	.word	0x716a6866
 8007000:	78          	.byte	0x78
 8007001:	00          	.byte	0x00
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8007002:	9b01      	ldr	r3, [sp, #4]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8007004:	9a03      	ldr	r2, [sp, #12]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8007006:	1ac1      	subs	r1, r0, r3
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8007008:	9b02      	ldr	r3, [sp, #8]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800700a:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	e01d      	b.n	800704c <lv_obj_align_origo+0xb4>
    return area_p->x2 - area_p->x1 + 1;
 8007010:	8aa2      	ldrh	r2, [r4, #20]
 8007012:	8a20      	ldrh	r0, [r4, #16]
 8007014:	3201      	adds	r2, #1
 8007016:	1a12      	subs	r2, r2, r0
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8007018:	b212      	sxth	r2, r2
 800701a:	0fd0      	lsrs	r0, r2, #31
 800701c:	1882      	adds	r2, r0, r2
 800701e:	1052      	asrs	r2, r2, #1
 8007020:	1a51      	subs	r1, r2, r1
    return area_p->y2 - area_p->y1 + 1;
 8007022:	8ae0      	ldrh	r0, [r4, #22]
 8007024:	8a62      	ldrh	r2, [r4, #18]
 8007026:	3001      	adds	r0, #1
 8007028:	1a80      	subs	r0, r0, r2
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800702a:	b200      	sxth	r0, r0
 800702c:	0fc2      	lsrs	r2, r0, #31
 800702e:	1812      	adds	r2, r2, r0
            new_x = lv_obj_get_width(base) - obj_w_half;
 8007030:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8007032:	1052      	asrs	r2, r2, #1
 8007034:	e7ea      	b.n	800700c <lv_obj_align_origo+0x74>
    return area_p->x2 - area_p->x1 + 1;
 8007036:	8aa2      	ldrh	r2, [r4, #20]
 8007038:	8a20      	ldrh	r0, [r4, #16]
 800703a:	3201      	adds	r2, #1
 800703c:	1a12      	subs	r2, r2, r0
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800703e:	b212      	sxth	r2, r2
 8007040:	0fd0      	lsrs	r0, r2, #31
 8007042:	1882      	adds	r2, r0, r2
 8007044:	1052      	asrs	r2, r2, #1
 8007046:	1a51      	subs	r1, r2, r1
            new_x = lv_obj_get_width(base) - obj_w_half;
 8007048:	b209      	sxth	r1, r1
            new_y = -obj_h_half;
 800704a:	425b      	negs	r3, r3
    new_x -= par_abs_x;
 800704c:	9a04      	ldr	r2, [sp, #16]
 800704e:	9801      	ldr	r0, [sp, #4]
            new_y = lv_obj_get_height(base) - obj_h_half;
 8007050:	b21b      	sxth	r3, r3
    new_x -= par_abs_x;
 8007052:	1a10      	subs	r0, r2, r0
 8007054:	8a22      	ldrh	r2, [r4, #16]
 8007056:	1810      	adds	r0, r2, r0
 8007058:	1841      	adds	r1, r0, r1
    new_y -= par_abs_y;
 800705a:	9a05      	ldr	r2, [sp, #20]
 800705c:	9802      	ldr	r0, [sp, #8]
    lv_obj_set_pos(obj, new_x, new_y);
 800705e:	b209      	sxth	r1, r1
    new_y -= par_abs_y;
 8007060:	1a10      	subs	r0, r2, r0
 8007062:	8a62      	ldrh	r2, [r4, #18]
 8007064:	1812      	adds	r2, r2, r0
 8007066:	18d2      	adds	r2, r2, r3
    lv_obj_set_pos(obj, new_x, new_y);
 8007068:	0028      	movs	r0, r5
 800706a:	b212      	sxth	r2, r2
 800706c:	f7ff fe1a 	bl	8006ca4 <lv_obj_set_pos>
    obj->realign.align       = align;
 8007070:	002b      	movs	r3, r5
 8007072:	3340      	adds	r3, #64	; 0x40
 8007074:	701e      	strb	r6, [r3, #0]
    obj->realign.xofs        = x_mod;
 8007076:	466b      	mov	r3, sp
 8007078:	8a1b      	ldrh	r3, [r3, #16]
    obj->realign.base        = base;
 800707a:	63ac      	str	r4, [r5, #56]	; 0x38
    obj->realign.xofs        = x_mod;
 800707c:	87ab      	strh	r3, [r5, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 800707e:	466b      	mov	r3, sp
 8007080:	8a9b      	ldrh	r3, [r3, #20]
 8007082:	87eb      	strh	r3, [r5, #62]	; 0x3e
    obj->realign.origo_align = 1;
 8007084:	2302      	movs	r3, #2
 8007086:	3541      	adds	r5, #65	; 0x41
 8007088:	782a      	ldrb	r2, [r5, #0]
 800708a:	4313      	orrs	r3, r2
 800708c:	702b      	strb	r3, [r5, #0]
}
 800708e:	b007      	add	sp, #28
 8007090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007092:	8aa2      	ldrh	r2, [r4, #20]
 8007094:	8a20      	ldrh	r0, [r4, #16]
 8007096:	3201      	adds	r2, #1
 8007098:	1a12      	subs	r2, r2, r0
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800709a:	b212      	sxth	r2, r2
 800709c:	0fd0      	lsrs	r0, r2, #31
 800709e:	1882      	adds	r2, r0, r2
 80070a0:	1052      	asrs	r2, r2, #1
 80070a2:	1a51      	subs	r1, r2, r1
            new_y = lv_obj_get_height(base) - obj_h_half;
 80070a4:	2201      	movs	r2, #1
            new_x = -obj_w_half;
 80070a6:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) - obj_h_half;
 80070a8:	1ad2      	subs	r2, r2, r3
 80070aa:	8ae3      	ldrh	r3, [r4, #22]
 80070ac:	189b      	adds	r3, r3, r2
 80070ae:	8a62      	ldrh	r2, [r4, #18]
 80070b0:	1a9b      	subs	r3, r3, r2
 80070b2:	e7cb      	b.n	800704c <lv_obj_align_origo+0xb4>
            new_x = -obj_w_half;
 80070b4:	4249      	negs	r1, r1
 80070b6:	e7c7      	b.n	8007048 <lv_obj_align_origo+0xb0>
            new_x = -obj_w_half;
 80070b8:	4249      	negs	r1, r1
 80070ba:	e7b2      	b.n	8007022 <lv_obj_align_origo+0x8a>
            new_x = -obj_w_half;
 80070bc:	4249      	negs	r1, r1
 80070be:	e7f1      	b.n	80070a4 <lv_obj_align_origo+0x10c>
            new_x = lv_obj_get_width(base) - obj_w_half;
 80070c0:	2001      	movs	r0, #1
 80070c2:	1a40      	subs	r0, r0, r1
 80070c4:	8aa1      	ldrh	r1, [r4, #20]
 80070c6:	1809      	adds	r1, r1, r0
 80070c8:	8a20      	ldrh	r0, [r4, #16]
 80070ca:	1a09      	subs	r1, r1, r0
 80070cc:	e7bc      	b.n	8007048 <lv_obj_align_origo+0xb0>
            new_x = lv_obj_get_width(base) - obj_w_half;
 80070ce:	2001      	movs	r0, #1
 80070d0:	1a40      	subs	r0, r0, r1
 80070d2:	8aa1      	ldrh	r1, [r4, #20]
 80070d4:	1809      	adds	r1, r1, r0
 80070d6:	8a20      	ldrh	r0, [r4, #16]
 80070d8:	1a09      	subs	r1, r1, r0
 80070da:	e7a2      	b.n	8007022 <lv_obj_align_origo+0x8a>
            new_x = lv_obj_get_width(base) - obj_w_half;
 80070dc:	2201      	movs	r2, #1
 80070de:	8aa0      	ldrh	r0, [r4, #20]
 80070e0:	1a51      	subs	r1, r2, r1
 80070e2:	1841      	adds	r1, r0, r1
 80070e4:	8a20      	ldrh	r0, [r4, #16]
 80070e6:	1a09      	subs	r1, r1, r0
 80070e8:	b209      	sxth	r1, r1
 80070ea:	e7dd      	b.n	80070a8 <lv_obj_align_origo+0x110>

080070ec <lv_obj_realign>:
    if(obj->realign.origo_align)
 80070ec:	0003      	movs	r3, r0
 80070ee:	3341      	adds	r3, #65	; 0x41
{
 80070f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if(obj->realign.origo_align)
 80070f2:	781c      	ldrb	r4, [r3, #0]
 80070f4:	223c      	movs	r2, #60	; 0x3c
 80070f6:	5e83      	ldrsh	r3, [r0, r2]
 80070f8:	0002      	movs	r2, r0
 80070fa:	253e      	movs	r5, #62	; 0x3e
 80070fc:	5f41      	ldrsh	r1, [r0, r5]
 80070fe:	3240      	adds	r2, #64	; 0x40
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8007100:	7812      	ldrb	r2, [r2, #0]
 8007102:	9100      	str	r1, [sp, #0]
 8007104:	6b81      	ldr	r1, [r0, #56]	; 0x38
    if(obj->realign.origo_align)
 8007106:	07a4      	lsls	r4, r4, #30
 8007108:	d502      	bpl.n	8007110 <lv_obj_realign+0x24>
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800710a:	f7ff ff45 	bl	8006f98 <lv_obj_align_origo>
}
 800710e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8007110:	f7ff fe09 	bl	8006d26 <lv_obj_align>
}
 8007114:	e7fb      	b.n	800710e <lv_obj_realign+0x22>
	...

08007118 <lv_obj_create>:
{
 8007118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711a:	0005      	movs	r5, r0
 800711c:	000e      	movs	r6, r1
    if(parent == NULL) {
 800711e:	2800      	cmp	r0, #0
 8007120:	d000      	beq.n	8007124 <lv_obj_create+0xc>
 8007122:	e0ee      	b.n	8007302 <lv_obj_create+0x1ea>
        lv_disp_t * disp = lv_disp_get_default();
 8007124:	f005 f816 	bl	800c154 <lv_disp_get_default>
        if(!disp) {
 8007128:	2800      	cmp	r0, #0
 800712a:	d100      	bne.n	800712e <lv_obj_create+0x16>
 800712c:	e131      	b.n	8007392 <lv_obj_create+0x27a>
        new_obj = lv_ll_ins_head(&disp->scr_ll);
 800712e:	302c      	adds	r0, #44	; 0x2c
 8007130:	f005 fb15 	bl	800c75e <lv_ll_ins_head>
 8007134:	1e04      	subs	r4, r0, #0
        lv_mem_assert(new_obj);
 8007136:	d100      	bne.n	800713a <lv_obj_create+0x22>
 8007138:	e7fe      	b.n	8007138 <lv_obj_create+0x20>
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 800713a:	2144      	movs	r1, #68	; 0x44
        new_obj->par = NULL; /*Screens has no a parent*/
 800713c:	c020      	stmia	r0!, {r5}
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 800713e:	f005 fb04 	bl	800c74a <lv_ll_init>
        new_obj->coords.x1    = 0;
 8007142:	8225      	strh	r5, [r4, #16]
        new_obj->coords.y1    = 0;
 8007144:	8265      	strh	r5, [r4, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 8007146:	0028      	movs	r0, r5
 8007148:	f005 f80a 	bl	800c160 <lv_disp_get_hor_res>
 800714c:	3801      	subs	r0, #1
 800714e:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 8007150:	0028      	movs	r0, r5
 8007152:	f005 f817 	bl	800c184 <lv_disp_get_ver_res>
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8007156:	0023      	movs	r3, r4
        new_obj->realign.auto_realign = 0;
 8007158:	0022      	movs	r2, r4
 800715a:	2101      	movs	r1, #1
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 800715c:	3801      	subs	r0, #1
        new_obj->realign.align        = LV_ALIGN_CENTER;
 800715e:	3340      	adds	r3, #64	; 0x40
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 8007160:	82e0      	strh	r0, [r4, #22]
        new_obj->ext_draw_pad = 0;
 8007162:	86a5      	strh	r5, [r4, #52]	; 0x34
        new_obj->realign.auto_realign = 0;
 8007164:	3241      	adds	r2, #65	; 0x41
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8007166:	701d      	strb	r5, [r3, #0]
        new_obj->realign.xofs         = 0;
 8007168:	87a5      	strh	r5, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 800716a:	87e5      	strh	r5, [r4, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 800716c:	63a5      	str	r5, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 800716e:	7813      	ldrb	r3, [r2, #0]
 8007170:	438b      	bics	r3, r1
 8007172:	7013      	strb	r3, [r2, #0]
        lv_theme_t * th = lv_theme_get_current();
 8007174:	f006 fa84 	bl	800d680 <lv_theme_get_current>
            new_obj->style_p = &lv_style_scr;
 8007178:	4b87      	ldr	r3, [pc, #540]	; (8007398 <lv_obj_create+0x280>)
        if(th) {
 800717a:	2800      	cmp	r0, #0
 800717c:	d000      	beq.n	8007180 <lv_obj_create+0x68>
            new_obj->style_p = th->style.scr;
 800717e:	6803      	ldr	r3, [r0, #0]
            new_obj->style_p = &lv_style_scr;
 8007180:	62a3      	str	r3, [r4, #40]	; 0x28
    obj->signal_cb = signal_cb;
 8007182:	4b86      	ldr	r3, [pc, #536]	; (800739c <lv_obj_create+0x284>)
        new_obj->event_cb = NULL;
 8007184:	2200      	movs	r2, #0
    obj->signal_cb = signal_cb;
 8007186:	61e3      	str	r3, [r4, #28]
    obj->design_cb = design_cb;
 8007188:	4b85      	ldr	r3, [pc, #532]	; (80073a0 <lv_obj_create+0x288>)
        new_obj->opa_scale    = LV_OPA_COVER;
 800718a:	21ff      	movs	r1, #255	; 0xff
    obj->design_cb = design_cb;
 800718c:	6223      	str	r3, [r4, #32]
        new_obj->protect      = LV_PROTECT_NONE;
 800718e:	0023      	movs	r3, r4
        new_obj->reserved     = 0;
 8007190:	2003      	movs	r0, #3
        new_obj->protect      = LV_PROTECT_NONE;
 8007192:	3332      	adds	r3, #50	; 0x32
        new_obj->event_cb = NULL;
 8007194:	61a2      	str	r2, [r4, #24]
        new_obj->group_p = NULL;
 8007196:	62e2      	str	r2, [r4, #44]	; 0x2c
        new_obj->parent_event = 0;
 8007198:	3b02      	subs	r3, #2
        new_obj->protect      = LV_PROTECT_NONE;
 800719a:	709a      	strb	r2, [r3, #2]
        new_obj->opa_scale    = LV_OPA_COVER;
 800719c:	70d9      	strb	r1, [r3, #3]
        new_obj->reserved     = 0;
 800719e:	7859      	ldrb	r1, [r3, #1]
        new_obj->parent_event = 0;
 80071a0:	701a      	strb	r2, [r3, #0]
        new_obj->reserved     = 0;
 80071a2:	4001      	ands	r1, r0
 80071a4:	7059      	strb	r1, [r3, #1]
        new_obj->ext_attr = NULL;
 80071a6:	6262      	str	r2, [r4, #36]	; 0x24
    if(copy != NULL) {
 80071a8:	2e00      	cmp	r6, #0
 80071aa:	d100      	bne.n	80071ae <lv_obj_create+0x96>
 80071ac:	e0ed      	b.n	800738a <lv_obj_create+0x272>
    memcpy(dest, src, sizeof(lv_area_t));
 80071ae:	0031      	movs	r1, r6
 80071b0:	0020      	movs	r0, r4
 80071b2:	2208      	movs	r2, #8
 80071b4:	3110      	adds	r1, #16
 80071b6:	3010      	adds	r0, #16
 80071b8:	f006 fcd4 	bl	800db64 <memcpy>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 80071bc:	2234      	movs	r2, #52	; 0x34
 80071be:	5eb3      	ldrsh	r3, [r6, r2]
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 80071c0:	0021      	movs	r1, r4
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 80071c2:	86a3      	strh	r3, [r4, #52]	; 0x34
        new_obj->realign.align        = copy->realign.align;
 80071c4:	0033      	movs	r3, r6
 80071c6:	3340      	adds	r3, #64	; 0x40
 80071c8:	781a      	ldrb	r2, [r3, #0]
 80071ca:	0023      	movs	r3, r4
 80071cc:	3340      	adds	r3, #64	; 0x40
 80071ce:	701a      	strb	r2, [r3, #0]
        new_obj->realign.xofs         = copy->realign.xofs;
 80071d0:	223c      	movs	r2, #60	; 0x3c
 80071d2:	5eb3      	ldrsh	r3, [r6, r2]
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 80071d4:	3141      	adds	r1, #65	; 0x41
        new_obj->realign.xofs         = copy->realign.xofs;
 80071d6:	87a3      	strh	r3, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = copy->realign.yofs;
 80071d8:	223e      	movs	r2, #62	; 0x3e
 80071da:	5eb3      	ldrsh	r3, [r6, r2]
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 80071dc:	2201      	movs	r2, #1
        new_obj->realign.yofs         = copy->realign.yofs;
 80071de:	87e3      	strh	r3, [r4, #62]	; 0x3e
        new_obj->realign.base         = copy->realign.base;
 80071e0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80071e2:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 80071e4:	0033      	movs	r3, r6
 80071e6:	3341      	adds	r3, #65	; 0x41
 80071e8:	7818      	ldrb	r0, [r3, #0]
 80071ea:	2301      	movs	r3, #1
 80071ec:	4018      	ands	r0, r3
 80071ee:	780b      	ldrb	r3, [r1, #0]
 80071f0:	4393      	bics	r3, r2
 80071f2:	4303      	orrs	r3, r0
 80071f4:	700b      	strb	r3, [r1, #0]
        new_obj->click        = copy->click;
 80071f6:	0031      	movs	r1, r6
        new_obj->event_cb = copy->event_cb;
 80071f8:	69b3      	ldr	r3, [r6, #24]
        new_obj->click        = copy->click;
 80071fa:	3130      	adds	r1, #48	; 0x30
        new_obj->event_cb = copy->event_cb;
 80071fc:	61a3      	str	r3, [r4, #24]
        new_obj->click        = copy->click;
 80071fe:	0023      	movs	r3, r4
 8007200:	7808      	ldrb	r0, [r1, #0]
 8007202:	3330      	adds	r3, #48	; 0x30
 8007204:	07c0      	lsls	r0, r0, #31
 8007206:	0fc7      	lsrs	r7, r0, #31
 8007208:	7818      	ldrb	r0, [r3, #0]
 800720a:	4390      	bics	r0, r2
 800720c:	4338      	orrs	r0, r7
 800720e:	7018      	strb	r0, [r3, #0]
        new_obj->drag         = copy->drag;
 8007210:	7808      	ldrb	r0, [r1, #0]
 8007212:	781f      	ldrb	r7, [r3, #0]
 8007214:	40d0      	lsrs	r0, r2
 8007216:	4010      	ands	r0, r2
 8007218:	4090      	lsls	r0, r2
 800721a:	1892      	adds	r2, r2, r2
 800721c:	4397      	bics	r7, r2
 800721e:	4338      	orrs	r0, r7
 8007220:	7018      	strb	r0, [r3, #0]
        new_obj->drag_dir     = copy->drag_dir;
 8007222:	0030      	movs	r0, r6
 8007224:	3031      	adds	r0, #49	; 0x31
 8007226:	7807      	ldrb	r7, [r0, #0]
 8007228:	7858      	ldrb	r0, [r3, #1]
 800722a:	3201      	adds	r2, #1
 800722c:	4390      	bics	r0, r2
 800722e:	4017      	ands	r7, r2
 8007230:	4307      	orrs	r7, r0
 8007232:	705f      	strb	r7, [r3, #1]
        new_obj->drag_throw   = copy->drag_throw;
 8007234:	7808      	ldrb	r0, [r1, #0]
 8007236:	781f      	ldrb	r7, [r3, #0]
 8007238:	3a02      	subs	r2, #2
 800723a:	0880      	lsrs	r0, r0, #2
 800723c:	4010      	ands	r0, r2
 800723e:	3203      	adds	r2, #3
 8007240:	4397      	bics	r7, r2
 8007242:	0080      	lsls	r0, r0, #2
 8007244:	4338      	orrs	r0, r7
 8007246:	7018      	strb	r0, [r3, #0]
        new_obj->drag_parent  = copy->drag_parent;
 8007248:	7808      	ldrb	r0, [r1, #0]
 800724a:	781f      	ldrb	r7, [r3, #0]
 800724c:	3a03      	subs	r2, #3
 800724e:	08c0      	lsrs	r0, r0, #3
 8007250:	4010      	ands	r0, r2
 8007252:	3207      	adds	r2, #7
 8007254:	4397      	bics	r7, r2
 8007256:	00c0      	lsls	r0, r0, #3
 8007258:	4338      	orrs	r0, r7
 800725a:	7018      	strb	r0, [r3, #0]
        new_obj->hidden       = copy->hidden;
 800725c:	7808      	ldrb	r0, [r1, #0]
 800725e:	781f      	ldrb	r7, [r3, #0]
 8007260:	3a07      	subs	r2, #7
 8007262:	0900      	lsrs	r0, r0, #4
 8007264:	4010      	ands	r0, r2
 8007266:	320f      	adds	r2, #15
 8007268:	4397      	bics	r7, r2
 800726a:	0100      	lsls	r0, r0, #4
 800726c:	4338      	orrs	r0, r7
 800726e:	7018      	strb	r0, [r3, #0]
        new_obj->top          = copy->top;
 8007270:	7808      	ldrb	r0, [r1, #0]
 8007272:	781f      	ldrb	r7, [r3, #0]
 8007274:	3a0f      	subs	r2, #15
 8007276:	0940      	lsrs	r0, r0, #5
 8007278:	4010      	ands	r0, r2
 800727a:	321f      	adds	r2, #31
 800727c:	4397      	bics	r7, r2
 800727e:	0140      	lsls	r0, r0, #5
 8007280:	4338      	orrs	r0, r7
 8007282:	7018      	strb	r0, [r3, #0]
        new_obj->parent_event = copy->parent_event;
 8007284:	7808      	ldrb	r0, [r1, #0]
 8007286:	325f      	adds	r2, #95	; 0x5f
 8007288:	09c0      	lsrs	r0, r0, #7
 800728a:	01c7      	lsls	r7, r0, #7
 800728c:	7818      	ldrb	r0, [r3, #0]
 800728e:	4010      	ands	r0, r2
 8007290:	4338      	orrs	r0, r7
 8007292:	7018      	strb	r0, [r3, #0]
        new_obj->opa_scale_en = copy->opa_scale_en;
 8007294:	7809      	ldrb	r1, [r1, #0]
 8007296:	3a7e      	subs	r2, #126	; 0x7e
 8007298:	0989      	lsrs	r1, r1, #6
 800729a:	400a      	ands	r2, r1
 800729c:	b2c1      	uxtb	r1, r0
 800729e:	2040      	movs	r0, #64	; 0x40
 80072a0:	0192      	lsls	r2, r2, #6
 80072a2:	4381      	bics	r1, r0
 80072a4:	430a      	orrs	r2, r1
 80072a6:	701a      	strb	r2, [r3, #0]
        new_obj->protect      = copy->protect;
 80072a8:	0033      	movs	r3, r6
 80072aa:	3332      	adds	r3, #50	; 0x32
 80072ac:	781a      	ldrb	r2, [r3, #0]
 80072ae:	0023      	movs	r3, r4
 80072b0:	3332      	adds	r3, #50	; 0x32
 80072b2:	701a      	strb	r2, [r3, #0]
        new_obj->opa_scale    = copy->opa_scale;
 80072b4:	0033      	movs	r3, r6
 80072b6:	3333      	adds	r3, #51	; 0x33
 80072b8:	781a      	ldrb	r2, [r3, #0]
 80072ba:	0023      	movs	r3, r4
 80072bc:	3333      	adds	r3, #51	; 0x33
 80072be:	701a      	strb	r2, [r3, #0]
        new_obj->style_p = copy->style_p;
 80072c0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
        if(copy->group_p != NULL) {
 80072c2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
        new_obj->style_p = copy->style_p;
 80072c4:	62a3      	str	r3, [r4, #40]	; 0x28
        if(copy->group_p != NULL) {
 80072c6:	2800      	cmp	r0, #0
 80072c8:	d002      	beq.n	80072d0 <lv_obj_create+0x1b8>
            lv_group_add_obj(copy->group_p, new_obj);
 80072ca:	0021      	movs	r1, r4
 80072cc:	f7ff fb37 	bl	800693e <lv_group_add_obj>
    return obj->par;
 80072d0:	6833      	ldr	r3, [r6, #0]
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d054      	beq.n	8007380 <lv_obj_create+0x268>
 80072d6:	2d00      	cmp	r5, #0
 80072d8:	d052      	beq.n	8007380 <lv_obj_create+0x268>
    rel_y             = obj->coords.y1 - parent->coords.y1;
 80072da:	8a59      	ldrh	r1, [r3, #18]
 80072dc:	8a72      	ldrh	r2, [r6, #18]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 80072de:	8a1b      	ldrh	r3, [r3, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 80072e0:	1a52      	subs	r2, r2, r1
    rel_x             = obj->coords.x1 - parent->coords.x1;
 80072e2:	8a31      	ldrh	r1, [r6, #16]
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 80072e4:	b212      	sxth	r2, r2
    rel_x             = obj->coords.x1 - parent->coords.x1;
 80072e6:	1ac9      	subs	r1, r1, r3
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 80072e8:	b209      	sxth	r1, r1
 80072ea:	0020      	movs	r0, r4
 80072ec:	f7ff fcda 	bl	8006ca4 <lv_obj_set_pos>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 80072f0:	69eb      	ldr	r3, [r5, #28]
 80072f2:	0022      	movs	r2, r4
 80072f4:	2101      	movs	r1, #1
 80072f6:	0028      	movs	r0, r5
 80072f8:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
 80072fa:	0020      	movs	r0, r4
 80072fc:	f7ff fc68 	bl	8006bd0 <lv_obj_invalidate>
 8007300:	e045      	b.n	800738e <lv_obj_create+0x276>
        new_obj = lv_ll_ins_head(&parent->child_ll);
 8007302:	3004      	adds	r0, #4
 8007304:	f005 fa2b 	bl	800c75e <lv_ll_ins_head>
 8007308:	1e04      	subs	r4, r0, #0
        lv_mem_assert(new_obj);
 800730a:	d100      	bne.n	800730e <lv_obj_create+0x1f6>
 800730c:	e7fe      	b.n	800730c <lv_obj_create+0x1f4>
        new_obj->par = parent; /*Set the parent*/
 800730e:	c020      	stmia	r0!, {r5}
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8007310:	2144      	movs	r1, #68	; 0x44
 8007312:	f005 fa1a 	bl	800c74a <lv_ll_init>
        new_obj->coords.x1    = parent->coords.x1;
 8007316:	2210      	movs	r2, #16
 8007318:	5eab      	ldrsh	r3, [r5, r2]
        new_obj->realign.auto_realign = 0;
 800731a:	2101      	movs	r1, #1
        new_obj->coords.x1    = parent->coords.x1;
 800731c:	8223      	strh	r3, [r4, #16]
        new_obj->coords.y1    = parent->coords.y1;
 800731e:	2212      	movs	r2, #18
 8007320:	5eab      	ldrsh	r3, [r5, r2]
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8007322:	0022      	movs	r2, r4
        new_obj->coords.y1    = parent->coords.y1;
 8007324:	8263      	strh	r3, [r4, #18]
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 8007326:	8a2b      	ldrh	r3, [r5, #16]
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8007328:	3240      	adds	r2, #64	; 0x40
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 800732a:	3319      	adds	r3, #25
 800732c:	82a3      	strh	r3, [r4, #20]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 800732e:	8a6b      	ldrh	r3, [r5, #18]
 8007330:	3310      	adds	r3, #16
 8007332:	82e3      	strh	r3, [r4, #22]
        new_obj->ext_draw_pad = 0;
 8007334:	2300      	movs	r3, #0
 8007336:	86a3      	strh	r3, [r4, #52]	; 0x34
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8007338:	7013      	strb	r3, [r2, #0]
        new_obj->realign.xofs         = 0;
 800733a:	87a3      	strh	r3, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 800733c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 800733e:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 8007340:	7853      	ldrb	r3, [r2, #1]
 8007342:	438b      	bics	r3, r1
 8007344:	7053      	strb	r3, [r2, #1]
        lv_theme_t * th = lv_theme_get_current();
 8007346:	f006 f99b 	bl	800d680 <lv_theme_get_current>
            new_obj->style_p = &lv_style_plain_color;
 800734a:	4b16      	ldr	r3, [pc, #88]	; (80073a4 <lv_obj_create+0x28c>)
        if(th) {
 800734c:	2800      	cmp	r0, #0
 800734e:	d000      	beq.n	8007352 <lv_obj_create+0x23a>
            new_obj->style_p = th->style.panel;
 8007350:	6883      	ldr	r3, [r0, #8]
            new_obj->style_p = &lv_style_plain_color;
 8007352:	62a3      	str	r3, [r4, #40]	; 0x28
    obj->signal_cb = signal_cb;
 8007354:	4b11      	ldr	r3, [pc, #68]	; (800739c <lv_obj_create+0x284>)
        new_obj->click        = 1;
 8007356:	0022      	movs	r2, r4
    obj->signal_cb = signal_cb;
 8007358:	61e3      	str	r3, [r4, #28]
    obj->design_cb = design_cb;
 800735a:	4b11      	ldr	r3, [pc, #68]	; (80073a0 <lv_obj_create+0x288>)
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 800735c:	2103      	movs	r1, #3
    obj->design_cb = design_cb;
 800735e:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
 8007360:	2300      	movs	r3, #0
        new_obj->click        = 1;
 8007362:	3230      	adds	r2, #48	; 0x30
        new_obj->event_cb = NULL;
 8007364:	61a3      	str	r3, [r4, #24]
        new_obj->group_p = NULL;
 8007366:	62e3      	str	r3, [r4, #44]	; 0x2c
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 8007368:	7850      	ldrb	r0, [r2, #1]
 800736a:	4301      	orrs	r1, r0
 800736c:	7051      	strb	r1, [r2, #1]
        new_obj->protect      = LV_PROTECT_NONE;
 800736e:	0021      	movs	r1, r4
        new_obj->opa_scale    = LV_OPA_COVER;
 8007370:	20ff      	movs	r0, #255	; 0xff
        new_obj->protect      = LV_PROTECT_NONE;
 8007372:	3132      	adds	r1, #50	; 0x32
 8007374:	700b      	strb	r3, [r1, #0]
        new_obj->opa_scale    = LV_OPA_COVER;
 8007376:	7048      	strb	r0, [r1, #1]
        new_obj->parent_event = 0;
 8007378:	2101      	movs	r1, #1
 800737a:	7011      	strb	r1, [r2, #0]
        new_obj->ext_attr = NULL;
 800737c:	6263      	str	r3, [r4, #36]	; 0x24
 800737e:	e713      	b.n	80071a8 <lv_obj_create+0x90>
            lv_obj_set_pos(new_obj, 0, 0);
 8007380:	2200      	movs	r2, #0
 8007382:	0020      	movs	r0, r4
 8007384:	0011      	movs	r1, r2
 8007386:	f7ff fc8d 	bl	8006ca4 <lv_obj_set_pos>
    if(parent != NULL) {
 800738a:	2d00      	cmp	r5, #0
 800738c:	d1b0      	bne.n	80072f0 <lv_obj_create+0x1d8>
}
 800738e:	0020      	movs	r0, r4
 8007390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NULL;
 8007392:	0004      	movs	r4, r0
 8007394:	e7fb      	b.n	800738e <lv_obj_create+0x276>
 8007396:	46c0      	nop			; (mov r8, r8)
 8007398:	200052c0 	.word	0x200052c0
 800739c:	08007569 	.word	0x08007569
 80073a0:	080075e1 	.word	0x080075e1
 80073a4:	20005338 	.word	0x20005338

080073a8 <lv_obj_set_size>:
    return area_p->x2 - area_p->x1 + 1;
 80073a8:	8a83      	ldrh	r3, [r0, #20]
{
 80073aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80073ac:	0015      	movs	r5, r2
 80073ae:	8a02      	ldrh	r2, [r0, #16]
 80073b0:	3301      	adds	r3, #1
 80073b2:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 80073b4:	b21b      	sxth	r3, r3
{
 80073b6:	0004      	movs	r4, r0
 80073b8:	000e      	movs	r6, r1
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 80073ba:	4299      	cmp	r1, r3
 80073bc:	d106      	bne.n	80073cc <lv_obj_set_size+0x24>
    return area_p->y2 - area_p->y1 + 1;
 80073be:	8ac3      	ldrh	r3, [r0, #22]
 80073c0:	8a42      	ldrh	r2, [r0, #18]
 80073c2:	3301      	adds	r3, #1
 80073c4:	1a9b      	subs	r3, r3, r2
 80073c6:	b21b      	sxth	r3, r3
 80073c8:	429d      	cmp	r5, r3
 80073ca:	d02d      	beq.n	8007428 <lv_obj_set_size+0x80>
    lv_obj_invalidate(obj);
 80073cc:	0020      	movs	r0, r4
 80073ce:	f7ff fbff 	bl	8006bd0 <lv_obj_invalidate>
    memcpy(dest, src, sizeof(lv_area_t));
 80073d2:	0021      	movs	r1, r4
 80073d4:	2208      	movs	r2, #8
 80073d6:	3110      	adds	r1, #16
 80073d8:	4668      	mov	r0, sp
 80073da:	f006 fbc3 	bl	800db64 <memcpy>
    obj->coords.x2 = obj->coords.x1 + w - 1;
 80073de:	8a23      	ldrh	r3, [r4, #16]
 80073e0:	3e01      	subs	r6, #1
 80073e2:	199e      	adds	r6, r3, r6
    obj->coords.y2 = obj->coords.y1 + h - 1;
 80073e4:	8a63      	ldrh	r3, [r4, #18]
 80073e6:	3d01      	subs	r5, #1
 80073e8:	195d      	adds	r5, r3, r5
    obj->coords.x2 = obj->coords.x1 + w - 1;
 80073ea:	82a6      	strh	r6, [r4, #20]
    obj->coords.y2 = obj->coords.y1 + h - 1;
 80073ec:	82e5      	strh	r5, [r4, #22]
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 80073ee:	466a      	mov	r2, sp
 80073f0:	2102      	movs	r1, #2
 80073f2:	0020      	movs	r0, r4
 80073f4:	69e3      	ldr	r3, [r4, #28]
 80073f6:	4798      	blx	r3
    return obj->par;
 80073f8:	6820      	ldr	r0, [r4, #0]
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 80073fa:	2800      	cmp	r0, #0
 80073fc:	d003      	beq.n	8007406 <lv_obj_set_size+0x5e>
 80073fe:	69c3      	ldr	r3, [r0, #28]
 8007400:	0022      	movs	r2, r4
 8007402:	2101      	movs	r1, #1
 8007404:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
 8007406:	1d26      	adds	r6, r4, #4
 8007408:	0030      	movs	r0, r6
 800740a:	f005 f9e8 	bl	800c7de <lv_ll_get_head>
 800740e:	1e05      	subs	r5, r0, #0
 8007410:	d10b      	bne.n	800742a <lv_obj_set_size+0x82>
    lv_obj_invalidate(obj);
 8007412:	0020      	movs	r0, r4
 8007414:	f7ff fbdc 	bl	8006bd0 <lv_obj_invalidate>
    if(obj->realign.auto_realign) lv_obj_realign(obj);
 8007418:	0023      	movs	r3, r4
 800741a:	3341      	adds	r3, #65	; 0x41
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	07db      	lsls	r3, r3, #31
 8007420:	d502      	bpl.n	8007428 <lv_obj_set_size+0x80>
 8007422:	0020      	movs	r0, r4
 8007424:	f7ff fe62 	bl	80070ec <lv_obj_realign>
}
 8007428:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 800742a:	2200      	movs	r2, #0
 800742c:	2103      	movs	r1, #3
 800742e:	0028      	movs	r0, r5
 8007430:	69eb      	ldr	r3, [r5, #28]
 8007432:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
 8007434:	0029      	movs	r1, r5
 8007436:	0030      	movs	r0, r6
 8007438:	f005 f9d9 	bl	800c7ee <lv_ll_get_next>
 800743c:	e7e7      	b.n	800740e <lv_obj_set_size+0x66>

0800743e <lv_obj_refresh_style>:
{
 800743e:	b510      	push	{r4, lr}
 8007440:	0004      	movs	r4, r0
    lv_obj_invalidate(obj);
 8007442:	f7ff fbc5 	bl	8006bd0 <lv_obj_invalidate>
    obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 8007446:	2200      	movs	r2, #0
 8007448:	2104      	movs	r1, #4
 800744a:	69e3      	ldr	r3, [r4, #28]
 800744c:	0020      	movs	r0, r4
 800744e:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8007450:	0020      	movs	r0, r4
 8007452:	f7ff fbbd 	bl	8006bd0 <lv_obj_invalidate>
}
 8007456:	bd10      	pop	{r4, pc}

08007458 <lv_obj_refresh_ext_draw_pad>:
    obj->ext_draw_pad = 0;
 8007458:	2200      	movs	r2, #0
{
 800745a:	b510      	push	{r4, lr}
 800745c:	0004      	movs	r4, r0
    obj->ext_draw_pad = 0;
 800745e:	8682      	strh	r2, [r0, #52]	; 0x34
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 8007460:	2105      	movs	r1, #5
 8007462:	69c3      	ldr	r3, [r0, #28]
 8007464:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8007466:	0020      	movs	r0, r4
 8007468:	f7ff fbb2 	bl	8006bd0 <lv_obj_invalidate>
}
 800746c:	bd10      	pop	{r4, pc}

0800746e <lv_obj_get_parent>:
    return obj->par;
 800746e:	6800      	ldr	r0, [r0, #0]
}
 8007470:	4770      	bx	lr

08007472 <lv_obj_get_child>:
{
 8007472:	b510      	push	{r4, lr}
 8007474:	3004      	adds	r0, #4
    if(child == NULL) {
 8007476:	2900      	cmp	r1, #0
 8007478:	d102      	bne.n	8007480 <lv_obj_get_child+0xe>
        result = lv_ll_get_head(&obj->child_ll);
 800747a:	f005 f9b0 	bl	800c7de <lv_ll_get_head>
}
 800747e:	bd10      	pop	{r4, pc}
        result = lv_ll_get_next(&obj->child_ll, child);
 8007480:	f005 f9b5 	bl	800c7ee <lv_ll_get_next>
    return result;
 8007484:	e7fb      	b.n	800747e <lv_obj_get_child+0xc>

08007486 <refresh_children_style>:
 * Recursively refresh the style of the children. Go deeper until a not NULL style is found
 * because the NULL styles are inherited from the parent
 * @param obj pointer to an object
 */
static void refresh_children_style(lv_obj_t * obj)
{
 8007486:	b570      	push	{r4, r5, r6, lr}
 8007488:	0005      	movs	r5, r0
        result = lv_ll_get_head(&obj->child_ll);
 800748a:	3004      	adds	r0, #4
 800748c:	f005 f9a7 	bl	800c7de <lv_ll_get_head>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
    while(child != NULL) {
        if(child->style_p == NULL) {
            refresh_children_style(child); /*Check children too*/
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
        } else if(child->style_p->glass) {
 8007490:	2601      	movs	r6, #1
        result = lv_ll_get_head(&obj->child_ll);
 8007492:	0004      	movs	r4, r0
    while(child != NULL) {
 8007494:	2c00      	cmp	r4, #0
 8007496:	d100      	bne.n	800749a <refresh_children_style+0x14>
            /*Children with 'glass' parent might be effected if their style == NULL*/
            refresh_children_style(child);
        }
        child = lv_obj_get_child(obj, child);
    }
}
 8007498:	bd70      	pop	{r4, r5, r6, pc}
        if(child->style_p == NULL) {
 800749a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10b      	bne.n	80074b8 <refresh_children_style+0x32>
            refresh_children_style(child); /*Check children too*/
 80074a0:	0020      	movs	r0, r4
 80074a2:	f7ff fff0 	bl	8007486 <refresh_children_style>
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
 80074a6:	0020      	movs	r0, r4
 80074a8:	f7ff ffc9 	bl	800743e <lv_obj_refresh_style>
        child = lv_obj_get_child(obj, child);
 80074ac:	0021      	movs	r1, r4
 80074ae:	0028      	movs	r0, r5
 80074b0:	f7ff ffdf 	bl	8007472 <lv_obj_get_child>
 80074b4:	0004      	movs	r4, r0
 80074b6:	e7ed      	b.n	8007494 <refresh_children_style+0xe>
        } else if(child->style_p->glass) {
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	4233      	tst	r3, r6
 80074bc:	d0f6      	beq.n	80074ac <refresh_children_style+0x26>
            refresh_children_style(child);
 80074be:	0020      	movs	r0, r4
 80074c0:	f7ff ffe1 	bl	8007486 <refresh_children_style>
 80074c4:	e7f2      	b.n	80074ac <refresh_children_style+0x26>

080074c6 <lv_obj_set_style>:
{
 80074c6:	b510      	push	{r4, lr}
 80074c8:	0004      	movs	r4, r0
    obj->style_p = style;
 80074ca:	6281      	str	r1, [r0, #40]	; 0x28
    refresh_children_style(obj);
 80074cc:	f7ff ffdb 	bl	8007486 <refresh_children_style>
    lv_obj_refresh_style(obj);
 80074d0:	0020      	movs	r0, r4
 80074d2:	f7ff ffb4 	bl	800743e <lv_obj_refresh_style>
}
 80074d6:	bd10      	pop	{r4, pc}

080074d8 <lv_obj_get_coords>:
{
 80074d8:	000b      	movs	r3, r1
 80074da:	0001      	movs	r1, r0
 80074dc:	b510      	push	{r4, lr}
 80074de:	3110      	adds	r1, #16
 80074e0:	2208      	movs	r2, #8
 80074e2:	0018      	movs	r0, r3
 80074e4:	f006 fb3e 	bl	800db64 <memcpy>
}
 80074e8:	bd10      	pop	{r4, pc}

080074ea <lv_obj_get_width>:
    return area_p->x2 - area_p->x1 + 1;
 80074ea:	8a83      	ldrh	r3, [r0, #20]
 80074ec:	8a00      	ldrh	r0, [r0, #16]
 80074ee:	3301      	adds	r3, #1
 80074f0:	1a18      	subs	r0, r3, r0
    return lv_area_get_width(&obj->coords);
 80074f2:	b200      	sxth	r0, r0
}
 80074f4:	4770      	bx	lr

080074f6 <lv_obj_get_height>:
    return area_p->y2 - area_p->y1 + 1;
 80074f6:	8ac3      	ldrh	r3, [r0, #22]
 80074f8:	8a40      	ldrh	r0, [r0, #18]
 80074fa:	3301      	adds	r3, #1
 80074fc:	1a18      	subs	r0, r3, r0
    return lv_area_get_height(&obj->coords);
 80074fe:	b200      	sxth	r0, r0
}
 8007500:	4770      	bx	lr
	...

08007504 <lv_obj_get_style>:
{
 8007504:	b570      	push	{r4, r5, r6, lr}
    const lv_style_t * style_act = obj->style_p;
 8007506:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 8007508:	0006      	movs	r6, r0
    if(style_act == NULL) {
 800750a:	2c00      	cmp	r4, #0
 800750c:	d114      	bne.n	8007538 <lv_obj_get_style+0x34>
                if(par->style_p->glass == 0) {
 800750e:	2201      	movs	r2, #1
        lv_obj_t * par = obj->par;
 8007510:	6805      	ldr	r5, [r0, #0]
        while(par) {
 8007512:	2d00      	cmp	r5, #0
 8007514:	d010      	beq.n	8007538 <lv_obj_get_style+0x34>
            if(par->style_p) {
 8007516:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007518:	2b00      	cmp	r3, #0
 800751a:	d020      	beq.n	800755e <lv_obj_get_style+0x5a>
                if(par->style_p->glass == 0) {
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	4213      	tst	r3, r2
 8007520:	d11d      	bne.n	800755e <lv_obj_get_style+0x5a>
    return obj->group_p;
 8007522:	6aec      	ldr	r4, [r5, #44]	; 0x2c
                    if(lv_group_get_focused(g) == par) {
 8007524:	0020      	movs	r0, r4
 8007526:	f7ff fa4d 	bl	80069c4 <lv_group_get_focused>
 800752a:	4285      	cmp	r5, r0
 800752c:	d115      	bne.n	800755a <lv_obj_get_style+0x56>
                        style_act = lv_group_mod_style(g, par->style_p);
 800752e:	0020      	movs	r0, r4
 8007530:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8007532:	f7ff fa31 	bl	8006998 <lv_group_mod_style>
 8007536:	0004      	movs	r4, r0
    if(obj->group_p) {
 8007538:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800753a:	2800      	cmp	r0, #0
 800753c:	d008      	beq.n	8007550 <lv_obj_get_style+0x4c>
        if(lv_group_get_focused(obj->group_p) == obj) {
 800753e:	f7ff fa41 	bl	80069c4 <lv_group_get_focused>
 8007542:	4286      	cmp	r6, r0
 8007544:	d104      	bne.n	8007550 <lv_obj_get_style+0x4c>
            style_act = lv_group_mod_style(obj->group_p, style_act);
 8007546:	0021      	movs	r1, r4
 8007548:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800754a:	f7ff fa25 	bl	8006998 <lv_group_mod_style>
 800754e:	0004      	movs	r4, r0
    if(style_act == NULL) style_act = &lv_style_plain;
 8007550:	2c00      	cmp	r4, #0
 8007552:	d100      	bne.n	8007556 <lv_obj_get_style+0x52>
 8007554:	4c03      	ldr	r4, [pc, #12]	; (8007564 <lv_obj_get_style+0x60>)
}
 8007556:	0020      	movs	r0, r4
 8007558:	bd70      	pop	{r4, r5, r6, pc}
                        style_act = par->style_p;
 800755a:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800755c:	e7ec      	b.n	8007538 <lv_obj_get_style+0x34>
            par = par->par;
 800755e:	682d      	ldr	r5, [r5, #0]
 8007560:	e7d7      	b.n	8007512 <lv_obj_get_style+0xe>
 8007562:	46c0      	nop			; (mov r8, r8)
 8007564:	20005248 	.word	0x20005248

08007568 <lv_obj_signal>:
{
 8007568:	b570      	push	{r4, r5, r6, lr}
 800756a:	000d      	movs	r5, r1
 800756c:	0004      	movs	r4, r0
 800756e:	0016      	movs	r6, r2
    const lv_style_t * style = lv_obj_get_style(obj);
 8007570:	f7ff ffc8 	bl	8007504 <lv_obj_get_style>
    if(sign == LV_SIGNAL_CHILD_CHG) {
 8007574:	2d01      	cmp	r5, #1
 8007576:	d104      	bne.n	8007582 <lv_obj_signal+0x1a>
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 8007578:	0028      	movs	r0, r5
    return (obj->protect & prot) == 0 ? false : true;
 800757a:	3432      	adds	r4, #50	; 0x32
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 800757c:	7823      	ldrb	r3, [r4, #0]
 800757e:	4398      	bics	r0, r3
}
 8007580:	bd70      	pop	{r4, r5, r6, pc}
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8007582:	2d05      	cmp	r5, #5
 8007584:	d108      	bne.n	8007598 <lv_obj_signal+0x30>
        if(style->body.shadow.width > obj->ext_draw_pad) obj->ext_draw_pad = style->body.shadow.width;
 8007586:	2212      	movs	r2, #18
 8007588:	5e83      	ldrsh	r3, [r0, r2]
 800758a:	2134      	movs	r1, #52	; 0x34
 800758c:	5e62      	ldrsh	r2, [r4, r1]
    lv_res_t res = LV_RES_OK;
 800758e:	2001      	movs	r0, #1
        if(style->body.shadow.width > obj->ext_draw_pad) obj->ext_draw_pad = style->body.shadow.width;
 8007590:	429a      	cmp	r2, r3
 8007592:	daf5      	bge.n	8007580 <lv_obj_signal+0x18>
 8007594:	86a3      	strh	r3, [r4, #52]	; 0x34
 8007596:	e7f3      	b.n	8007580 <lv_obj_signal+0x18>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 8007598:	2d04      	cmp	r5, #4
 800759a:	d104      	bne.n	80075a6 <lv_obj_signal+0x3e>
        lv_obj_refresh_ext_draw_pad(obj);
 800759c:	0020      	movs	r0, r4
 800759e:	f7ff ff5b 	bl	8007458 <lv_obj_refresh_ext_draw_pad>
    lv_res_t res = LV_RES_OK;
 80075a2:	2001      	movs	r0, #1
 80075a4:	e7ec      	b.n	8007580 <lv_obj_signal+0x18>
 80075a6:	2001      	movs	r0, #1
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 80075a8:	2d06      	cmp	r5, #6
 80075aa:	d1e9      	bne.n	8007580 <lv_obj_signal+0x18>
        buf->type[0]        = "lv_obj";
 80075ac:	4b01      	ldr	r3, [pc, #4]	; (80075b4 <lv_obj_signal+0x4c>)
 80075ae:	6033      	str	r3, [r6, #0]
 80075b0:	e7e6      	b.n	8007580 <lv_obj_signal+0x18>
 80075b2:	46c0      	nop			; (mov r8, r8)
 80075b4:	0800df77 	.word	0x0800df77

080075b8 <lv_obj_get_hidden>:
    return obj->hidden == 0 ? false : true;
 80075b8:	3030      	adds	r0, #48	; 0x30
 80075ba:	7800      	ldrb	r0, [r0, #0]
 80075bc:	06c0      	lsls	r0, r0, #27
 80075be:	0fc0      	lsrs	r0, r0, #31
}
 80075c0:	4770      	bx	lr

080075c2 <lv_obj_get_opa_scale>:
        if(parent->opa_scale_en) return parent->opa_scale;
 80075c2:	2340      	movs	r3, #64	; 0x40
    while(parent) {
 80075c4:	2800      	cmp	r0, #0
 80075c6:	d101      	bne.n	80075cc <lv_obj_get_opa_scale+0xa>
    return LV_OPA_COVER;
 80075c8:	30ff      	adds	r0, #255	; 0xff
 80075ca:	e006      	b.n	80075da <lv_obj_get_opa_scale+0x18>
        if(parent->opa_scale_en) return parent->opa_scale;
 80075cc:	0002      	movs	r2, r0
 80075ce:	3230      	adds	r2, #48	; 0x30
 80075d0:	7812      	ldrb	r2, [r2, #0]
 80075d2:	421a      	tst	r2, r3
 80075d4:	d002      	beq.n	80075dc <lv_obj_get_opa_scale+0x1a>
 80075d6:	3033      	adds	r0, #51	; 0x33
 80075d8:	7800      	ldrb	r0, [r0, #0]
}
 80075da:	4770      	bx	lr
    return obj->par;
 80075dc:	6800      	ldr	r0, [r0, #0]
 80075de:	e7f1      	b.n	80075c4 <lv_obj_get_opa_scale+0x2>

080075e0 <lv_obj_design>:
{
 80075e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075e2:	0004      	movs	r4, r0
 80075e4:	000e      	movs	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 80075e6:	2a02      	cmp	r2, #2
 80075e8:	d13c      	bne.n	8007664 <lv_obj_design+0x84>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 80075ea:	0005      	movs	r5, r0
 80075ec:	3510      	adds	r5, #16
 80075ee:	0029      	movs	r1, r5
 80075f0:	0030      	movs	r0, r6
 80075f2:	f004 ff61 	bl	800c4b8 <lv_area_is_in>
 80075f6:	2800      	cmp	r0, #0
 80075f8:	d031      	beq.n	800765e <lv_obj_design+0x7e>
        const lv_style_t * style = lv_obj_get_style(obj);
 80075fa:	0020      	movs	r0, r4
 80075fc:	f7ff ff82 	bl	8007504 <lv_obj_get_style>
        if(style->body.opa < LV_OPA_MAX) return false;
 8007600:	7a03      	ldrb	r3, [r0, #8]
 8007602:	2bfa      	cmp	r3, #250	; 0xfa
 8007604:	d92b      	bls.n	800765e <lv_obj_design+0x7e>
        lv_coord_t r = style->body.radius;
 8007606:	2306      	movs	r3, #6
 8007608:	5ec4      	ldrsh	r4, [r0, r3]
        if(r == LV_RADIUS_CIRCLE) return false;
 800760a:	4b1f      	ldr	r3, [pc, #124]	; (8007688 <lv_obj_design+0xa8>)
 800760c:	429c      	cmp	r4, r3
 800760e:	d026      	beq.n	800765e <lv_obj_design+0x7e>
    memcpy(dest, src, sizeof(lv_area_t));
 8007610:	2208      	movs	r2, #8
 8007612:	0029      	movs	r1, r5
 8007614:	4668      	mov	r0, sp
 8007616:	f006 faa5 	bl	800db64 <memcpy>
        area_tmp.x1 += r;
 800761a:	466b      	mov	r3, sp
 800761c:	466a      	mov	r2, sp
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	b2a4      	uxth	r4, r4
 8007622:	18e3      	adds	r3, r4, r3
 8007624:	8013      	strh	r3, [r2, #0]
        area_tmp.x2 -= r;
 8007626:	8893      	ldrh	r3, [r2, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8007628:	4669      	mov	r1, sp
        area_tmp.x2 -= r;
 800762a:	1b1b      	subs	r3, r3, r4
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800762c:	0030      	movs	r0, r6
        area_tmp.x2 -= r;
 800762e:	8093      	strh	r3, [r2, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8007630:	f004 ff42 	bl	800c4b8 <lv_area_is_in>
 8007634:	2800      	cmp	r0, #0
 8007636:	d012      	beq.n	800765e <lv_obj_design+0x7e>
 8007638:	0029      	movs	r1, r5
 800763a:	2208      	movs	r2, #8
 800763c:	4668      	mov	r0, sp
 800763e:	f006 fa91 	bl	800db64 <memcpy>
        area_tmp.y1 += r;
 8007642:	466b      	mov	r3, sp
 8007644:	466a      	mov	r2, sp
 8007646:	885b      	ldrh	r3, [r3, #2]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8007648:	4669      	mov	r1, sp
        area_tmp.y1 += r;
 800764a:	18e3      	adds	r3, r4, r3
 800764c:	8053      	strh	r3, [r2, #2]
        area_tmp.y2 -= r;
 800764e:	88d3      	ldrh	r3, [r2, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8007650:	0030      	movs	r0, r6
        area_tmp.y2 -= r;
 8007652:	1b1c      	subs	r4, r3, r4
 8007654:	80d4      	strh	r4, [r2, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8007656:	f004 ff2f 	bl	800c4b8 <lv_area_is_in>
 800765a:	1e05      	subs	r5, r0, #0
 800765c:	d100      	bne.n	8007660 <lv_obj_design+0x80>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 800765e:	2500      	movs	r5, #0
}
 8007660:	0028      	movs	r0, r5
 8007662:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    return true;
 8007664:	2501      	movs	r5, #1
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8007666:	2a00      	cmp	r2, #0
 8007668:	d1fa      	bne.n	8007660 <lv_obj_design+0x80>
        const lv_style_t * style = lv_obj_get_style(obj);
 800766a:	f7ff ff4b 	bl	8007504 <lv_obj_get_style>
 800766e:	0007      	movs	r7, r0
        lv_draw_rect(&obj->coords, mask_p, style, lv_obj_get_opa_scale(obj));
 8007670:	0020      	movs	r0, r4
 8007672:	f7ff ffa6 	bl	80075c2 <lv_obj_get_opa_scale>
 8007676:	0003      	movs	r3, r0
 8007678:	0020      	movs	r0, r4
 800767a:	003a      	movs	r2, r7
 800767c:	3010      	adds	r0, #16
 800767e:	0031      	movs	r1, r6
 8007680:	f002 f88e 	bl	80097a0 <lv_draw_rect>
 8007684:	e7ec      	b.n	8007660 <lv_obj_design+0x80>
 8007686:	46c0      	nop			; (mov r8, r8)
 8007688:	00007c18 	.word	0x00007c18

0800768c <lv_obj_get_signal_cb>:
    return obj->signal_cb;
 800768c:	69c0      	ldr	r0, [r0, #28]
}
 800768e:	4770      	bx	lr

08007690 <lv_obj_get_ext_attr>:
    return obj->ext_attr;
 8007690:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8007692:	4770      	bx	lr

08007694 <lv_obj_is_focused>:
    if(obj->group_p) {
 8007694:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 8007696:	b510      	push	{r4, lr}
 8007698:	0004      	movs	r4, r0
    return false;
 800769a:	1e18      	subs	r0, r3, #0
    if(obj->group_p) {
 800769c:	d005      	beq.n	80076aa <lv_obj_is_focused+0x16>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 800769e:	f7ff f991 	bl	80069c4 <lv_group_get_focused>
 80076a2:	1a20      	subs	r0, r4, r0
 80076a4:	4244      	negs	r4, r0
 80076a6:	4160      	adcs	r0, r4
 80076a8:	b2c0      	uxtb	r0, r0
}
 80076aa:	bd10      	pop	{r4, pc}

080076ac <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
 80076ac:	b570      	push	{r4, r5, r6, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80076ae:	4d13      	ldr	r5, [pc, #76]	; (80076fc <lv_refr_vdb_flush+0x50>)
 80076b0:	6828      	ldr	r0, [r5, #0]
 80076b2:	f004 fd8d 	bl	800c1d0 <lv_disp_get_buf>
 80076b6:	0004      	movs	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
 80076b8:	6828      	ldr	r0, [r5, #0]
 80076ba:	f004 fd8b 	bl	800c1d4 <lv_disp_is_double_buf>
 80076be:	2800      	cmp	r0, #0
 80076c0:	d002      	beq.n	80076c8 <lv_refr_vdb_flush+0x1c>
        while(vdb->flushing)
 80076c2:	69a3      	ldr	r3, [r4, #24]
 80076c4:	07db      	lsls	r3, r3, #31
 80076c6:	d4fc      	bmi.n	80076c2 <lv_refr_vdb_flush+0x16>
            ;
    }

    vdb->flushing = 1;
 80076c8:	2301      	movs	r3, #1
 80076ca:	7e22      	ldrb	r2, [r4, #24]
    return disp_refr;
 80076cc:	6828      	ldr	r0, [r5, #0]
    vdb->flushing = 1;
 80076ce:	4313      	orrs	r3, r2
 80076d0:	7623      	strb	r3, [r4, #24]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
 80076d2:	68c3      	ldr	r3, [r0, #12]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d003      	beq.n	80076e0 <lv_refr_vdb_flush+0x34>
 80076d8:	0021      	movs	r1, r4
 80076da:	68a2      	ldr	r2, [r4, #8]
 80076dc:	3110      	adds	r1, #16
 80076de:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d006      	beq.n	80076f4 <lv_refr_vdb_flush+0x48>
 80076e6:	6862      	ldr	r2, [r4, #4]
 80076e8:	2a00      	cmp	r2, #0
 80076ea:	d003      	beq.n	80076f4 <lv_refr_vdb_flush+0x48>
        if(vdb->buf_act == vdb->buf1)
 80076ec:	68a1      	ldr	r1, [r4, #8]
 80076ee:	428b      	cmp	r3, r1
 80076f0:	d101      	bne.n	80076f6 <lv_refr_vdb_flush+0x4a>
            vdb->buf_act = vdb->buf2;
 80076f2:	60a2      	str	r2, [r4, #8]
        else
            vdb->buf_act = vdb->buf1;
    }
}
 80076f4:	bd70      	pop	{r4, r5, r6, pc}
            vdb->buf_act = vdb->buf1;
 80076f6:	60a3      	str	r3, [r4, #8]
}
 80076f8:	e7fc      	b.n	80076f4 <lv_refr_vdb_flush+0x48>
 80076fa:	46c0      	nop			; (mov r8, r8)
 80076fc:	200013f4 	.word	0x200013f4

08007700 <lv_refr_get_top_obj>:
{
 8007700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007702:	000c      	movs	r4, r1
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8007704:	3110      	adds	r1, #16
{
 8007706:	0006      	movs	r6, r0
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8007708:	f004 fed6 	bl	800c4b8 <lv_area_is_in>
 800770c:	2800      	cmp	r0, #0
 800770e:	d101      	bne.n	8007714 <lv_refr_get_top_obj+0x14>
    lv_obj_t * found_p = NULL;
 8007710:	2000      	movs	r0, #0
}
 8007712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8007714:	0023      	movs	r3, r4
 8007716:	3330      	adds	r3, #48	; 0x30
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	06db      	lsls	r3, r3, #27
 800771c:	d4f8      	bmi.n	8007710 <lv_refr_get_top_obj+0x10>
        LV_LL_READ(obj->child_ll, i)
 800771e:	1d27      	adds	r7, r4, #4
 8007720:	0038      	movs	r0, r7
 8007722:	f005 f85c 	bl	800c7de <lv_ll_get_head>
 8007726:	1e05      	subs	r5, r0, #0
 8007728:	d113      	bne.n	8007752 <lv_refr_get_top_obj+0x52>
            const lv_style_t * style = lv_obj_get_style(obj);
 800772a:	0020      	movs	r0, r4
 800772c:	f7ff feea 	bl	8007504 <lv_obj_get_style>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 8007730:	7a03      	ldrb	r3, [r0, #8]
 8007732:	2bff      	cmp	r3, #255	; 0xff
 8007734:	d1ec      	bne.n	8007710 <lv_refr_get_top_obj+0x10>
 8007736:	2202      	movs	r2, #2
 8007738:	0031      	movs	r1, r6
 800773a:	0020      	movs	r0, r4
 800773c:	6a23      	ldr	r3, [r4, #32]
 800773e:	4798      	blx	r3
 8007740:	2800      	cmp	r0, #0
 8007742:	d0e5      	beq.n	8007710 <lv_refr_get_top_obj+0x10>
               lv_obj_get_opa_scale(obj) == LV_OPA_COVER) {
 8007744:	0020      	movs	r0, r4
 8007746:	f7ff ff3c 	bl	80075c2 <lv_obj_get_opa_scale>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 800774a:	28ff      	cmp	r0, #255	; 0xff
 800774c:	d1e0      	bne.n	8007710 <lv_refr_get_top_obj+0x10>
 800774e:	0020      	movs	r0, r4
    return found_p;
 8007750:	e7df      	b.n	8007712 <lv_refr_get_top_obj+0x12>
            found_p = lv_refr_get_top_obj(area_p, i);
 8007752:	0029      	movs	r1, r5
 8007754:	0030      	movs	r0, r6
 8007756:	f7ff ffd3 	bl	8007700 <lv_refr_get_top_obj>
            if(found_p != NULL) {
 800775a:	2800      	cmp	r0, #0
 800775c:	d1d9      	bne.n	8007712 <lv_refr_get_top_obj+0x12>
        LV_LL_READ(obj->child_ll, i)
 800775e:	0029      	movs	r1, r5
 8007760:	0038      	movs	r0, r7
 8007762:	f005 f844 	bl	800c7ee <lv_ll_get_next>
 8007766:	e7de      	b.n	8007726 <lv_refr_get_top_obj+0x26>

08007768 <lv_refr_obj>:
    if(obj->hidden != 0) return;
 8007768:	0003      	movs	r3, r0
 800776a:	3330      	adds	r3, #48	; 0x30
 800776c:	781a      	ldrb	r2, [r3, #0]
 800776e:	2310      	movs	r3, #16
{
 8007770:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(obj->hidden != 0) return;
 8007772:	401a      	ands	r2, r3
{
 8007774:	b08d      	sub	sp, #52	; 0x34
 8007776:	0005      	movs	r5, r0
 8007778:	000f      	movs	r7, r1
    if(obj->hidden != 0) return;
 800777a:	9201      	str	r2, [sp, #4]
 800777c:	2a00      	cmp	r2, #0
 800777e:	d134      	bne.n	80077ea <lv_refr_obj+0x82>
    lv_obj_get_coords(obj, &obj_area);
 8007780:	ac06      	add	r4, sp, #24
    lv_coord_t ext_size = obj->ext_draw_pad;
 8007782:	2334      	movs	r3, #52	; 0x34
 8007784:	5ec6      	ldrsh	r6, [r0, r3]
    lv_obj_get_coords(obj, &obj_area);
 8007786:	0021      	movs	r1, r4
 8007788:	f7ff fea6 	bl	80074d8 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 800778c:	8823      	ldrh	r3, [r4, #0]
 800778e:	b2b6      	uxth	r6, r6
 8007790:	1b9b      	subs	r3, r3, r6
 8007792:	8023      	strh	r3, [r4, #0]
    obj_area.y1 -= ext_size;
 8007794:	8863      	ldrh	r3, [r4, #2]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8007796:	0022      	movs	r2, r4
    obj_area.y1 -= ext_size;
 8007798:	1b9b      	subs	r3, r3, r6
 800779a:	8063      	strh	r3, [r4, #2]
    obj_area.x2 += ext_size;
 800779c:	88a3      	ldrh	r3, [r4, #4]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 800779e:	0039      	movs	r1, r7
    obj_area.x2 += ext_size;
 80077a0:	18f3      	adds	r3, r6, r3
 80077a2:	80a3      	strh	r3, [r4, #4]
    obj_area.y2 += ext_size;
 80077a4:	88e3      	ldrh	r3, [r4, #6]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80077a6:	a804      	add	r0, sp, #16
    obj_area.y2 += ext_size;
 80077a8:	18f6      	adds	r6, r6, r3
 80077aa:	80e6      	strh	r6, [r4, #6]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80077ac:	f004 fe0a 	bl	800c3c4 <lv_area_intersect>
    if(union_ok != false) {
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d01a      	beq.n	80077ea <lv_refr_obj+0x82>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 80077b4:	9a01      	ldr	r2, [sp, #4]
 80077b6:	a904      	add	r1, sp, #16
 80077b8:	6a2b      	ldr	r3, [r5, #32]
 80077ba:	0028      	movs	r0, r5
 80077bc:	4798      	blx	r3
        lv_obj_get_coords(obj, &obj_area);
 80077be:	0021      	movs	r1, r4
 80077c0:	0028      	movs	r0, r5
 80077c2:	f7ff fe89 	bl	80074d8 <lv_obj_get_coords>
        union_ok = lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 80077c6:	0022      	movs	r2, r4
 80077c8:	0039      	movs	r1, r7
 80077ca:	a802      	add	r0, sp, #8
 80077cc:	f004 fdfa 	bl	800c3c4 <lv_area_intersect>
        if(union_ok != false) {
 80077d0:	2800      	cmp	r0, #0
 80077d2:	d005      	beq.n	80077e0 <lv_refr_obj+0x78>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 80077d4:	1d2f      	adds	r7, r5, #4
 80077d6:	0038      	movs	r0, r7
 80077d8:	f005 f805 	bl	800c7e6 <lv_ll_get_tail>
 80077dc:	1e06      	subs	r6, r0, #0
 80077de:	d106      	bne.n	80077ee <lv_refr_obj+0x86>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 80077e0:	6a2b      	ldr	r3, [r5, #32]
 80077e2:	2201      	movs	r2, #1
 80077e4:	a904      	add	r1, sp, #16
 80077e6:	0028      	movs	r0, r5
 80077e8:	4798      	blx	r3
}
 80077ea:	b00d      	add	sp, #52	; 0x34
 80077ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_get_coords(child_p, &child_area);
 80077ee:	ac0a      	add	r4, sp, #40	; 0x28
 80077f0:	0021      	movs	r1, r4
 80077f2:	0030      	movs	r0, r6
 80077f4:	f7ff fe70 	bl	80074d8 <lv_obj_get_coords>
                child_area.x1 -= ext_size;
 80077f8:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
 80077fa:	8822      	ldrh	r2, [r4, #0]
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 80077fc:	a902      	add	r1, sp, #8
                child_area.x1 -= ext_size;
 80077fe:	1ad2      	subs	r2, r2, r3
 8007800:	8022      	strh	r2, [r4, #0]
                child_area.y1 -= ext_size;
 8007802:	8862      	ldrh	r2, [r4, #2]
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007804:	a808      	add	r0, sp, #32
                child_area.y1 -= ext_size;
 8007806:	1ad2      	subs	r2, r2, r3
 8007808:	8062      	strh	r2, [r4, #2]
                child_area.x2 += ext_size;
 800780a:	88a2      	ldrh	r2, [r4, #4]
 800780c:	189a      	adds	r2, r3, r2
 800780e:	80a2      	strh	r2, [r4, #4]
                child_area.y2 += ext_size;
 8007810:	88e2      	ldrh	r2, [r4, #6]
 8007812:	189b      	adds	r3, r3, r2
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007814:	0022      	movs	r2, r4
                child_area.y2 += ext_size;
 8007816:	80e3      	strh	r3, [r4, #6]
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007818:	f004 fdd4 	bl	800c3c4 <lv_area_intersect>
                if(union_ok) {
 800781c:	2800      	cmp	r0, #0
 800781e:	d003      	beq.n	8007828 <lv_refr_obj+0xc0>
                    lv_refr_obj(child_p, &mask_child);
 8007820:	a908      	add	r1, sp, #32
 8007822:	0030      	movs	r0, r6
 8007824:	f7ff ffa0 	bl	8007768 <lv_refr_obj>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 8007828:	0031      	movs	r1, r6
 800782a:	0038      	movs	r0, r7
 800782c:	f004 ffed 	bl	800c80a <lv_ll_get_prev>
 8007830:	e7d4      	b.n	80077dc <lv_refr_obj+0x74>
	...

08007834 <lv_refr_obj_and_children>:
{
 8007834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007836:	0005      	movs	r5, r0
 8007838:	000e      	movs	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 800783a:	2800      	cmp	r0, #0
 800783c:	d104      	bne.n	8007848 <lv_refr_obj_and_children+0x14>
 800783e:	4b12      	ldr	r3, [pc, #72]	; (8007888 <lv_refr_obj_and_children+0x54>)
 8007840:	6818      	ldr	r0, [r3, #0]
 8007842:	f7fe ff94 	bl	800676e <lv_disp_get_scr_act>
 8007846:	0005      	movs	r5, r0
    lv_refr_obj(top_p, mask_p);
 8007848:	0028      	movs	r0, r5
 800784a:	0031      	movs	r1, r6
 800784c:	f7ff ff8c 	bl	8007768 <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
 8007850:	0028      	movs	r0, r5
 8007852:	f7ff fe0c 	bl	800746e <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
 8007856:	1e04      	subs	r4, r0, #0
    while(par != NULL) {
 8007858:	d100      	bne.n	800785c <lv_refr_obj_and_children+0x28>
}
 800785a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * i = lv_ll_get_prev(&(par->child_ll), border_p);
 800785c:	1d27      	adds	r7, r4, #4
            i = lv_ll_get_prev(&(par->child_ll), i);
 800785e:	0029      	movs	r1, r5
 8007860:	0038      	movs	r0, r7
 8007862:	f004 ffd2 	bl	800c80a <lv_ll_get_prev>
 8007866:	1e05      	subs	r5, r0, #0
        while(i != NULL) {
 8007868:	d109      	bne.n	800787e <lv_refr_obj_and_children+0x4a>
        par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
 800786a:	2201      	movs	r2, #1
 800786c:	0031      	movs	r1, r6
 800786e:	6a23      	ldr	r3, [r4, #32]
 8007870:	0020      	movs	r0, r4
 8007872:	4798      	blx	r3
        par = lv_obj_get_parent(par);
 8007874:	0020      	movs	r0, r4
 8007876:	f7ff fdfa 	bl	800746e <lv_obj_get_parent>
 800787a:	0025      	movs	r5, r4
 800787c:	e7eb      	b.n	8007856 <lv_refr_obj_and_children+0x22>
            lv_refr_obj(i, mask_p);
 800787e:	0031      	movs	r1, r6
 8007880:	0028      	movs	r0, r5
 8007882:	f7ff ff71 	bl	8007768 <lv_refr_obj>
 8007886:	e7ea      	b.n	800785e <lv_refr_obj_and_children+0x2a>
 8007888:	200013f4 	.word	0x200013f4

0800788c <lv_refr_area_part>:
{
 800788c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800788e:	4c19      	ldr	r4, [pc, #100]	; (80078f4 <lv_refr_area_part+0x68>)
{
 8007890:	0006      	movs	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007892:	6820      	ldr	r0, [r4, #0]
 8007894:	f004 fc9c 	bl	800c1d0 <lv_disp_get_buf>
 8007898:	0005      	movs	r5, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
 800789a:	6820      	ldr	r0, [r4, #0]
 800789c:	f004 fc9a 	bl	800c1d4 <lv_disp_is_double_buf>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d102      	bne.n	80078aa <lv_refr_area_part+0x1e>
        while(vdb->flushing)
 80078a4:	69ab      	ldr	r3, [r5, #24]
 80078a6:	07db      	lsls	r3, r3, #31
 80078a8:	d4fc      	bmi.n	80078a4 <lv_refr_area_part+0x18>
    lv_area_intersect(&start_mask, area_p, &vdb->area);
 80078aa:	002a      	movs	r2, r5
 80078ac:	0031      	movs	r1, r6
 80078ae:	3210      	adds	r2, #16
 80078b0:	4668      	mov	r0, sp
 80078b2:	f004 fd87 	bl	800c3c4 <lv_area_intersect>
    top_p = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 80078b6:	6820      	ldr	r0, [r4, #0]
 80078b8:	f7fe ff59 	bl	800676e <lv_disp_get_scr_act>
 80078bc:	0001      	movs	r1, r0
 80078be:	4668      	mov	r0, sp
 80078c0:	f7ff ff1e 	bl	8007700 <lv_refr_get_top_obj>
    lv_refr_obj_and_children(top_p, &start_mask);
 80078c4:	4669      	mov	r1, sp
 80078c6:	f7ff ffb5 	bl	8007834 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 80078ca:	6820      	ldr	r0, [r4, #0]
 80078cc:	f7fe ff62 	bl	8006794 <lv_disp_get_layer_top>
 80078d0:	4669      	mov	r1, sp
 80078d2:	f7ff ffaf 	bl	8007834 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 80078d6:	6820      	ldr	r0, [r4, #0]
 80078d8:	f7fe ff66 	bl	80067a8 <lv_disp_get_layer_sys>
 80078dc:	4669      	mov	r1, sp
 80078de:	f7ff ffa9 	bl	8007834 <lv_refr_obj_and_children>
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
 80078e2:	6820      	ldr	r0, [r4, #0]
 80078e4:	f004 fc7f 	bl	800c1e6 <lv_disp_is_true_double_buf>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d101      	bne.n	80078f0 <lv_refr_area_part+0x64>
        lv_refr_vdb_flush();
 80078ec:	f7ff fede 	bl	80076ac <lv_refr_vdb_flush>
}
 80078f0:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 80078f2:	46c0      	nop			; (mov r8, r8)
 80078f4:	200013f4 	.word	0x200013f4

080078f8 <lv_refr_init>:
}
 80078f8:	4770      	bx	lr

080078fa <lv_inv_area>:
{
 80078fa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80078fc:	0004      	movs	r4, r0
 80078fe:	000d      	movs	r5, r1
    if(!disp) disp = lv_disp_get_default();
 8007900:	2800      	cmp	r0, #0
 8007902:	d103      	bne.n	800790c <lv_inv_area+0x12>
 8007904:	f004 fc26 	bl	800c154 <lv_disp_get_default>
 8007908:	1e04      	subs	r4, r0, #0
    if(!disp) return;
 800790a:	d007      	beq.n	800791c <lv_inv_area+0x22>
    if(area_p == NULL) {
 800790c:	2d00      	cmp	r5, #0
 800790e:	d106      	bne.n	800791e <lv_inv_area+0x24>
        disp->inv_p = 0;
 8007910:	22b2      	movs	r2, #178	; 0xb2
 8007912:	0052      	lsls	r2, r2, #1
 8007914:	5aa3      	ldrh	r3, [r4, r2]
 8007916:	0a9b      	lsrs	r3, r3, #10
 8007918:	029b      	lsls	r3, r3, #10
 800791a:	52a3      	strh	r3, [r4, r2]
}
 800791c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    scr_area.x1 = 0;
 800791e:	466a      	mov	r2, sp
 8007920:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8007922:	0020      	movs	r0, r4
    scr_area.x1 = 0;
 8007924:	8013      	strh	r3, [r2, #0]
    scr_area.y1 = 0;
 8007926:	8053      	strh	r3, [r2, #2]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8007928:	f004 fc1a 	bl	800c160 <lv_disp_get_hor_res>
 800792c:	466b      	mov	r3, sp
 800792e:	3801      	subs	r0, #1
 8007930:	8098      	strh	r0, [r3, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 8007932:	0020      	movs	r0, r4
 8007934:	f004 fc26 	bl	800c184 <lv_disp_get_ver_res>
 8007938:	466b      	mov	r3, sp
 800793a:	3801      	subs	r0, #1
 800793c:	80d8      	strh	r0, [r3, #6]
    suc = lv_area_intersect(&com_area, area_p, &scr_area);
 800793e:	466a      	mov	r2, sp
 8007940:	0029      	movs	r1, r5
 8007942:	a802      	add	r0, sp, #8
 8007944:	f004 fd3e 	bl	800c3c4 <lv_area_intersect>
    if(suc != false) {
 8007948:	2800      	cmp	r0, #0
 800794a:	d0e7      	beq.n	800791c <lv_inv_area+0x22>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
 800794c:	6923      	ldr	r3, [r4, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d002      	beq.n	8007958 <lv_inv_area+0x5e>
 8007952:	a902      	add	r1, sp, #8
 8007954:	0020      	movs	r0, r4
 8007956:	4798      	blx	r3
        for(i = 0; i < disp->inv_p; i++) {
 8007958:	26b2      	movs	r6, #178	; 0xb2
{
 800795a:	2500      	movs	r5, #0
        for(i = 0; i < disp->inv_p; i++) {
 800795c:	0076      	lsls	r6, r6, #1
 800795e:	5ba0      	ldrh	r0, [r4, r6]
 8007960:	1c03      	adds	r3, r0, #0
 8007962:	0580      	lsls	r0, r0, #22
 8007964:	0d80      	lsrs	r0, r0, #22
 8007966:	4285      	cmp	r5, r0
 8007968:	db15      	blt.n	8007996 <lv_inv_area+0x9c>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
 800796a:	281f      	cmp	r0, #31
 800796c:	dc1e      	bgt.n	80079ac <lv_inv_area+0xb2>
 800796e:	2208      	movs	r2, #8
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 8007970:	00c0      	lsls	r0, r0, #3
 8007972:	3044      	adds	r0, #68	; 0x44
 8007974:	1820      	adds	r0, r4, r0
 8007976:	a902      	add	r1, sp, #8
 8007978:	f006 f8f4 	bl	800db64 <memcpy>
        disp->inv_p++;
 800797c:	21b2      	movs	r1, #178	; 0xb2
 800797e:	2080      	movs	r0, #128	; 0x80
 8007980:	0049      	lsls	r1, r1, #1
 8007982:	5a63      	ldrh	r3, [r4, r1]
 8007984:	03c0      	lsls	r0, r0, #15
 8007986:	059a      	lsls	r2, r3, #22
 8007988:	1812      	adds	r2, r2, r0
 800798a:	0a9b      	lsrs	r3, r3, #10
 800798c:	0d92      	lsrs	r2, r2, #22
 800798e:	029b      	lsls	r3, r3, #10
 8007990:	4313      	orrs	r3, r2
 8007992:	5263      	strh	r3, [r4, r1]
 8007994:	e7c2      	b.n	800791c <lv_inv_area+0x22>
            if(lv_area_is_in(&com_area, &disp->inv_areas[i]) != false) return;
 8007996:	00e9      	lsls	r1, r5, #3
 8007998:	3144      	adds	r1, #68	; 0x44
 800799a:	1861      	adds	r1, r4, r1
 800799c:	a802      	add	r0, sp, #8
 800799e:	f004 fd8b 	bl	800c4b8 <lv_area_is_in>
 80079a2:	2800      	cmp	r0, #0
 80079a4:	d1ba      	bne.n	800791c <lv_inv_area+0x22>
        for(i = 0; i < disp->inv_p; i++) {
 80079a6:	3501      	adds	r5, #1
 80079a8:	b2ad      	uxth	r5, r5
 80079aa:	e7d8      	b.n	800795e <lv_inv_area+0x64>
 80079ac:	0020      	movs	r0, r4
            disp->inv_p = 0;
 80079ae:	0a9b      	lsrs	r3, r3, #10
 80079b0:	029b      	lsls	r3, r3, #10
 80079b2:	53a3      	strh	r3, [r4, r6]
 80079b4:	2208      	movs	r2, #8
 80079b6:	4669      	mov	r1, sp
 80079b8:	3044      	adds	r0, #68	; 0x44
 80079ba:	e7dd      	b.n	8007978 <lv_inv_area+0x7e>

080079bc <lv_refr_get_disp_refreshing>:
    return disp_refr;
 80079bc:	4b01      	ldr	r3, [pc, #4]	; (80079c4 <lv_refr_get_disp_refreshing+0x8>)
 80079be:	6818      	ldr	r0, [r3, #0]
}
 80079c0:	4770      	bx	lr
 80079c2:	46c0      	nop			; (mov r8, r8)
 80079c4:	200013f4 	.word	0x200013f4

080079c8 <lv_disp_refr_task>:
{
 80079c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079ca:	0004      	movs	r4, r0
 80079cc:	b08b      	sub	sp, #44	; 0x2c
    uint32_t start = lv_tick_get();
 80079ce:	f004 fc2b 	bl	800c228 <lv_tick_get>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 80079d2:	2700      	movs	r7, #0
    disp_refr = task->user_data;
 80079d4:	68e2      	ldr	r2, [r4, #12]
 80079d6:	4bc2      	ldr	r3, [pc, #776]	; (8007ce0 <lv_disp_refr_task+0x318>)
    uint32_t start = lv_tick_get();
 80079d8:	9006      	str	r0, [sp, #24]
    disp_refr = task->user_data;
 80079da:	601a      	str	r2, [r3, #0]
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 80079dc:	22b2      	movs	r2, #178	; 0xb2
 80079de:	4bc0      	ldr	r3, [pc, #768]	; (8007ce0 <lv_disp_refr_task+0x318>)
 80079e0:	0052      	lsls	r2, r2, #1
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	5a9a      	ldrh	r2, [r3, r2]
 80079e6:	0592      	lsls	r2, r2, #22
 80079e8:	0d92      	lsrs	r2, r2, #22
 80079ea:	4297      	cmp	r7, r2
 80079ec:	d334      	bcc.n	8007a58 <lv_disp_refr_task+0x90>
    px_num = 0;
 80079ee:	2300      	movs	r3, #0
 80079f0:	4abc      	ldr	r2, [pc, #752]	; (8007ce4 <lv_disp_refr_task+0x31c>)
 80079f2:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 80079f4:	9302      	str	r3, [sp, #8]
 80079f6:	23b2      	movs	r3, #178	; 0xb2
 80079f8:	4db9      	ldr	r5, [pc, #740]	; (8007ce0 <lv_disp_refr_task+0x318>)
 80079fa:	005b      	lsls	r3, r3, #1
 80079fc:	682c      	ldr	r4, [r5, #0]
 80079fe:	9902      	ldr	r1, [sp, #8]
 8007a00:	5ae3      	ldrh	r3, [r4, r3]
 8007a02:	059b      	lsls	r3, r3, #22
 8007a04:	0d9a      	lsrs	r2, r3, #22
 8007a06:	4291      	cmp	r1, r2
 8007a08:	d200      	bcs.n	8007a0c <lv_disp_refr_task+0x44>
 8007a0a:	e072      	b.n	8007af2 <lv_disp_refr_task+0x12a>
    if(disp_refr->inv_p != 0) {
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d01f      	beq.n	8007a50 <lv_disp_refr_task+0x88>
        if(lv_disp_is_true_double_buf(disp_refr)) {
 8007a10:	0020      	movs	r0, r4
 8007a12:	f004 fbe8 	bl	800c1e6 <lv_disp_is_true_double_buf>
 8007a16:	2800      	cmp	r0, #0
 8007a18:	d000      	beq.n	8007a1c <lv_disp_refr_task+0x54>
 8007a1a:	e133      	b.n	8007c84 <lv_disp_refr_task+0x2bc>
        memset(disp_refr->inv_areas, 0, sizeof(disp_refr->inv_areas));
 8007a1c:	4bb0      	ldr	r3, [pc, #704]	; (8007ce0 <lv_disp_refr_task+0x318>)
 8007a1e:	2280      	movs	r2, #128	; 0x80
 8007a20:	681c      	ldr	r4, [r3, #0]
 8007a22:	0052      	lsls	r2, r2, #1
 8007a24:	0020      	movs	r0, r4
 8007a26:	2100      	movs	r1, #0
 8007a28:	3044      	adds	r0, #68	; 0x44
 8007a2a:	f006 f8a4 	bl	800db76 <memset>
        memset(disp_refr->inv_area_joined, 0, sizeof(disp_refr->inv_area_joined));
 8007a2e:	0020      	movs	r0, r4
 8007a30:	3045      	adds	r0, #69	; 0x45
 8007a32:	2220      	movs	r2, #32
 8007a34:	30ff      	adds	r0, #255	; 0xff
 8007a36:	2100      	movs	r1, #0
 8007a38:	f006 f89d 	bl	800db76 <memset>
        disp_refr->inv_p = 0;
 8007a3c:	22b2      	movs	r2, #178	; 0xb2
 8007a3e:	0052      	lsls	r2, r2, #1
 8007a40:	5aa3      	ldrh	r3, [r4, r2]
 8007a42:	0a9b      	lsrs	r3, r3, #10
 8007a44:	029b      	lsls	r3, r3, #10
 8007a46:	52a3      	strh	r3, [r4, r2]
        if(disp_refr->driver.monitor_cb) {
 8007a48:	69a5      	ldr	r5, [r4, #24]
 8007a4a:	2d00      	cmp	r5, #0
 8007a4c:	d000      	beq.n	8007a50 <lv_disp_refr_task+0x88>
 8007a4e:	e178      	b.n	8007d42 <lv_disp_refr_task+0x37a>
    lv_draw_free_buf();
 8007a50:	f000 fda2 	bl	8008598 <lv_draw_free_buf>
}
 8007a54:	b00b      	add	sp, #44	; 0x2c
 8007a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 8007a58:	19db      	adds	r3, r3, r7
 8007a5a:	3345      	adds	r3, #69	; 0x45
 8007a5c:	33ff      	adds	r3, #255	; 0xff
 8007a5e:	781c      	ldrb	r4, [r3, #0]
 8007a60:	2c00      	cmp	r4, #0
 8007a62:	d10a      	bne.n	8007a7a <lv_disp_refr_task+0xb2>
 8007a64:	00fe      	lsls	r6, r7, #3
 8007a66:	3644      	adds	r6, #68	; 0x44
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8007a68:	23b2      	movs	r3, #178	; 0xb2
 8007a6a:	4d9d      	ldr	r5, [pc, #628]	; (8007ce0 <lv_disp_refr_task+0x318>)
 8007a6c:	005b      	lsls	r3, r3, #1
 8007a6e:	6828      	ldr	r0, [r5, #0]
 8007a70:	5ac3      	ldrh	r3, [r0, r3]
 8007a72:	059b      	lsls	r3, r3, #22
 8007a74:	0d9b      	lsrs	r3, r3, #22
 8007a76:	429c      	cmp	r4, r3
 8007a78:	d301      	bcc.n	8007a7e <lv_disp_refr_task+0xb6>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8007a7a:	3701      	adds	r7, #1
 8007a7c:	e7ae      	b.n	80079dc <lv_disp_refr_task+0x14>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 8007a7e:	1903      	adds	r3, r0, r4
 8007a80:	3345      	adds	r3, #69	; 0x45
 8007a82:	33ff      	adds	r3, #255	; 0xff
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d131      	bne.n	8007aee <lv_disp_refr_task+0x126>
 8007a8a:	42a7      	cmp	r7, r4
 8007a8c:	d02f      	beq.n	8007aee <lv_disp_refr_task+0x126>
 8007a8e:	00e3      	lsls	r3, r4, #3
 8007a90:	3344      	adds	r3, #68	; 0x44
            if(lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 8007a92:	18c1      	adds	r1, r0, r3
 8007a94:	1980      	adds	r0, r0, r6
 8007a96:	9301      	str	r3, [sp, #4]
 8007a98:	f004 fcef 	bl	800c47a <lv_area_is_on>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	d026      	beq.n	8007aee <lv_disp_refr_task+0x126>
            lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 8007aa0:	9b01      	ldr	r3, [sp, #4]
 8007aa2:	6829      	ldr	r1, [r5, #0]
 8007aa4:	a808      	add	r0, sp, #32
 8007aa6:	18ca      	adds	r2, r1, r3
 8007aa8:	1989      	adds	r1, r1, r6
 8007aaa:	f004 fcc0 	bl	800c42e <lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8007aae:	a808      	add	r0, sp, #32
 8007ab0:	f004 fc7a 	bl	800c3a8 <lv_area_get_size>
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	9002      	str	r0, [sp, #8]
 8007ab8:	1998      	adds	r0, r3, r6
 8007aba:	f004 fc75 	bl	800c3a8 <lv_area_get_size>
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 8007abe:	682a      	ldr	r2, [r5, #0]
 8007ac0:	9b01      	ldr	r3, [sp, #4]
 8007ac2:	4694      	mov	ip, r2
 8007ac4:	4463      	add	r3, ip
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8007ac6:	9003      	str	r0, [sp, #12]
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 8007ac8:	0018      	movs	r0, r3
 8007aca:	f004 fc6d 	bl	800c3a8 <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8007ace:	9b03      	ldr	r3, [sp, #12]
 8007ad0:	9a02      	ldr	r2, [sp, #8]
 8007ad2:	181b      	adds	r3, r3, r0
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d20a      	bcs.n	8007aee <lv_disp_refr_task+0x126>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 8007ad8:	682d      	ldr	r5, [r5, #0]
 8007ada:	2208      	movs	r2, #8
 8007adc:	19a8      	adds	r0, r5, r6
 8007ade:	a908      	add	r1, sp, #32
 8007ae0:	f006 f840 	bl	800db64 <memcpy>
                disp_refr->inv_area_joined[join_from] = 1;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	192d      	adds	r5, r5, r4
 8007ae8:	3545      	adds	r5, #69	; 0x45
 8007aea:	35ff      	adds	r5, #255	; 0xff
 8007aec:	702b      	strb	r3, [r5, #0]
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8007aee:	3401      	adds	r4, #1
 8007af0:	e7ba      	b.n	8007a68 <lv_disp_refr_task+0xa0>
        if(disp_refr->inv_area_joined[i] == 0) {
 8007af2:	9b02      	ldr	r3, [sp, #8]
 8007af4:	18e3      	adds	r3, r4, r3
 8007af6:	3345      	adds	r3, #69	; 0x45
 8007af8:	33ff      	adds	r3, #255	; 0xff
 8007afa:	781e      	ldrb	r6, [r3, #0]
 8007afc:	2e00      	cmp	r6, #0
 8007afe:	d175      	bne.n	8007bec <lv_disp_refr_task+0x224>
 8007b00:	9b02      	ldr	r3, [sp, #8]
    if(lv_disp_is_true_double_buf(disp_refr)) {
 8007b02:	0020      	movs	r0, r4
 8007b04:	00db      	lsls	r3, r3, #3
 8007b06:	9304      	str	r3, [sp, #16]
 8007b08:	3344      	adds	r3, #68	; 0x44
 8007b0a:	9305      	str	r3, [sp, #20]
            lv_refr_area(&disp_refr->inv_areas[i]);
 8007b0c:	18e3      	adds	r3, r4, r3
 8007b0e:	9301      	str	r3, [sp, #4]
    if(lv_disp_is_true_double_buf(disp_refr)) {
 8007b10:	f004 fb69 	bl	800c1e6 <lv_disp_is_true_double_buf>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d013      	beq.n	8007b40 <lv_disp_refr_task+0x178>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007b18:	6828      	ldr	r0, [r5, #0]
 8007b1a:	f004 fb59 	bl	800c1d0 <lv_disp_get_buf>
 8007b1e:	0004      	movs	r4, r0
        vdb->area.x1        = 0;
 8007b20:	8206      	strh	r6, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 8007b22:	6828      	ldr	r0, [r5, #0]
 8007b24:	f004 fb1c 	bl	800c160 <lv_disp_get_hor_res>
 8007b28:	3801      	subs	r0, #1
 8007b2a:	82a0      	strh	r0, [r4, #20]
        vdb->area.y1        = 0;
 8007b2c:	8266      	strh	r6, [r4, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 8007b2e:	6828      	ldr	r0, [r5, #0]
 8007b30:	f004 fb28 	bl	800c184 <lv_disp_get_ver_res>
 8007b34:	3801      	subs	r0, #1
 8007b36:	82e0      	strh	r0, [r4, #22]
            lv_refr_area_part(area_p);
 8007b38:	9801      	ldr	r0, [sp, #4]
 8007b3a:	f7ff fea7 	bl	800788c <lv_refr_area_part>
 8007b3e:	e048      	b.n	8007bd2 <lv_disp_refr_task+0x20a>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007b40:	6828      	ldr	r0, [r5, #0]
 8007b42:	f004 fb45 	bl	800c1d0 <lv_disp_get_buf>
    return area_p->x2 - area_p->x1 + 1;
 8007b46:	9b01      	ldr	r3, [sp, #4]
 8007b48:	9a01      	ldr	r2, [sp, #4]
 8007b4a:	889b      	ldrh	r3, [r3, #4]
 8007b4c:	8812      	ldrh	r2, [r2, #0]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	1a9b      	subs	r3, r3, r2
 8007b52:	b21b      	sxth	r3, r3
 8007b54:	9307      	str	r3, [sp, #28]
 8007b56:	9b01      	ldr	r3, [sp, #4]
 8007b58:	0006      	movs	r6, r0
 8007b5a:	2206      	movs	r2, #6
 8007b5c:	5e9b      	ldrsh	r3, [r3, r2]
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 8007b5e:	6828      	ldr	r0, [r5, #0]
 8007b60:	9303      	str	r3, [sp, #12]
    return area_p->y2 - area_p->y1 + 1;
 8007b62:	1c5f      	adds	r7, r3, #1
 8007b64:	9b01      	ldr	r3, [sp, #4]
 8007b66:	885b      	ldrh	r3, [r3, #2]
 8007b68:	1aff      	subs	r7, r7, r3
 8007b6a:	f004 fb0b 	bl	800c184 <lv_disp_get_ver_res>
        lv_coord_t y2 =
 8007b6e:	9b03      	ldr	r3, [sp, #12]
 8007b70:	b23f      	sxth	r7, r7
 8007b72:	4283      	cmp	r3, r0
 8007b74:	db3d      	blt.n	8007bf2 <lv_disp_refr_task+0x22a>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 8007b76:	6828      	ldr	r0, [r5, #0]
 8007b78:	f004 fb04 	bl	800c184 <lv_disp_get_ver_res>
 8007b7c:	3801      	subs	r0, #1
 8007b7e:	b203      	sxth	r3, r0
        int32_t max_row = (uint32_t)vdb->size / w;
 8007b80:	9907      	ldr	r1, [sp, #28]
 8007b82:	68f0      	ldr	r0, [r6, #12]
        lv_coord_t y2 =
 8007b84:	9303      	str	r3, [sp, #12]
        int32_t max_row = (uint32_t)vdb->size / w;
 8007b86:	f7f8 faeb 	bl	8000160 <__udivsi3>
 8007b8a:	4287      	cmp	r7, r0
 8007b8c:	dd00      	ble.n	8007b90 <lv_disp_refr_task+0x1c8>
 8007b8e:	0007      	movs	r7, r0
        if(disp_refr->driver.rounder_cb) {
 8007b90:	4b53      	ldr	r3, [pc, #332]	; (8007ce0 <lv_disp_refr_task+0x318>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d035      	beq.n	8007c06 <lv_disp_refr_task+0x23e>
            tmp.x1 = 0;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	aa08      	add	r2, sp, #32
            lv_coord_t y_tmp = max_row - 1;
 8007b9e:	1e7d      	subs	r5, r7, #1
            tmp.x1 = 0;
 8007ba0:	8013      	strh	r3, [r2, #0]
            tmp.x2 = 0;
 8007ba2:	8093      	strh	r3, [r2, #4]
            tmp.y1 = 0;
 8007ba4:	8053      	strh	r3, [r2, #2]
            lv_coord_t y_tmp = max_row - 1;
 8007ba6:	b22d      	sxth	r5, r5
                tmp.y2 = y_tmp;
 8007ba8:	ab08      	add	r3, sp, #32
 8007baa:	80dd      	strh	r5, [r3, #6]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 8007bac:	4b4c      	ldr	r3, [pc, #304]	; (8007ce0 <lv_disp_refr_task+0x318>)
 8007bae:	a908      	add	r1, sp, #32
 8007bb0:	6818      	ldr	r0, [r3, #0]
 8007bb2:	6903      	ldr	r3, [r0, #16]
 8007bb4:	4798      	blx	r3
 8007bb6:	ab08      	add	r3, sp, #32
 8007bb8:	2206      	movs	r2, #6
 8007bba:	5e9a      	ldrsh	r2, [r3, r2]
 8007bbc:	ab08      	add	r3, sp, #32
 8007bbe:	885b      	ldrh	r3, [r3, #2]
 8007bc0:	3201      	adds	r2, #1
 8007bc2:	1ad3      	subs	r3, r2, r3
                if(lv_area_get_height(&tmp) <= max_row) break;
 8007bc4:	b21b      	sxth	r3, r3
 8007bc6:	42bb      	cmp	r3, r7
 8007bc8:	dd1a      	ble.n	8007c00 <lv_disp_refr_task+0x238>
 8007bca:	3d01      	subs	r5, #1
 8007bcc:	b22d      	sxth	r5, r5
            } while(y_tmp != 0);
 8007bce:	2d00      	cmp	r5, #0
 8007bd0:	d1ea      	bne.n	8007ba8 <lv_disp_refr_task+0x1e0>
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 8007bd2:	4b43      	ldr	r3, [pc, #268]	; (8007ce0 <lv_disp_refr_task+0x318>)
 8007bd4:	6818      	ldr	r0, [r3, #0]
 8007bd6:	6983      	ldr	r3, [r0, #24]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d007      	beq.n	8007bec <lv_disp_refr_task+0x224>
 8007bdc:	9b05      	ldr	r3, [sp, #20]
 8007bde:	18c0      	adds	r0, r0, r3
 8007be0:	f004 fbe2 	bl	800c3a8 <lv_area_get_size>
 8007be4:	4b3f      	ldr	r3, [pc, #252]	; (8007ce4 <lv_disp_refr_task+0x31c>)
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	1810      	adds	r0, r2, r0
 8007bea:	6018      	str	r0, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8007bec:	9b02      	ldr	r3, [sp, #8]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	e700      	b.n	80079f4 <lv_disp_refr_task+0x2c>
        lv_coord_t y2 =
 8007bf2:	9b02      	ldr	r3, [sp, #8]
 8007bf4:	3308      	adds	r3, #8
 8007bf6:	00db      	lsls	r3, r3, #3
 8007bf8:	18e3      	adds	r3, r4, r3
 8007bfa:	220a      	movs	r2, #10
 8007bfc:	5e9b      	ldrsh	r3, [r3, r2]
 8007bfe:	e7bf      	b.n	8007b80 <lv_disp_refr_task+0x1b8>
            if(y_tmp == 0) {
 8007c00:	2d00      	cmp	r5, #0
 8007c02:	d0e6      	beq.n	8007bd2 <lv_disp_refr_task+0x20a>
                max_row = tmp.y2 + 1;
 8007c04:	0017      	movs	r7, r2
 8007c06:	9b04      	ldr	r3, [sp, #16]
 8007c08:	18e4      	adds	r4, r4, r3
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8007c0a:	0023      	movs	r3, r4
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	253e      	movs	r5, #62	; 0x3e
 8007c10:	5f5d      	ldrsh	r5, [r3, r5]
        lv_coord_t row_last = 0;
 8007c12:	2300      	movs	r3, #0
 8007c14:	9304      	str	r3, [sp, #16]
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8007c16:	19eb      	adds	r3, r5, r7
 8007c18:	9a03      	ldr	r2, [sp, #12]
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	dd10      	ble.n	8007c42 <lv_disp_refr_task+0x27a>
        if(y2 != row_last) {
 8007c20:	0013      	movs	r3, r2
 8007c22:	9a04      	ldr	r2, [sp, #16]
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d0d4      	beq.n	8007bd2 <lv_disp_refr_task+0x20a>
            vdb->area.x1 = area_p->x1;
 8007c28:	1da3      	adds	r3, r4, #6
 8007c2a:	223e      	movs	r2, #62	; 0x3e
 8007c2c:	5e9b      	ldrsh	r3, [r3, r2]
            vdb->area.x2 = area_p->x2;
 8007c2e:	3448      	adds	r4, #72	; 0x48
            vdb->area.x1 = area_p->x1;
 8007c30:	8233      	strh	r3, [r6, #16]
            vdb->area.x2 = area_p->x2;
 8007c32:	2200      	movs	r2, #0
 8007c34:	5ea3      	ldrsh	r3, [r4, r2]
            vdb->area.y1 = row;
 8007c36:	8275      	strh	r5, [r6, #18]
            vdb->area.x2 = area_p->x2;
 8007c38:	82b3      	strh	r3, [r6, #20]
            vdb->area.y2 = y2;
 8007c3a:	466b      	mov	r3, sp
 8007c3c:	899b      	ldrh	r3, [r3, #12]
 8007c3e:	82f3      	strh	r3, [r6, #22]
 8007c40:	e77a      	b.n	8007b38 <lv_disp_refr_task+0x170>
            vdb->area.x1 = area_p->x1;
 8007c42:	1da3      	adds	r3, r4, #6
 8007c44:	223e      	movs	r2, #62	; 0x3e
 8007c46:	5e9b      	ldrsh	r3, [r3, r2]
 8007c48:	8233      	strh	r3, [r6, #16]
            vdb->area.x2 = area_p->x2;
 8007c4a:	0023      	movs	r3, r4
 8007c4c:	3348      	adds	r3, #72	; 0x48
 8007c4e:	2200      	movs	r2, #0
 8007c50:	5e9b      	ldrsh	r3, [r3, r2]
            vdb->area.y1 = row;
 8007c52:	8275      	strh	r5, [r6, #18]
            vdb->area.x2 = area_p->x2;
 8007c54:	82b3      	strh	r3, [r6, #20]
            vdb->area.y2 = row + max_row - 1;
 8007c56:	b2bb      	uxth	r3, r7
 8007c58:	9304      	str	r3, [sp, #16]
 8007c5a:	b2ad      	uxth	r5, r5
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	18eb      	adds	r3, r5, r3
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
 8007c60:	9a03      	ldr	r2, [sp, #12]
 8007c62:	b21b      	sxth	r3, r3
 8007c64:	429a      	cmp	r2, r3
 8007c66:	db0a      	blt.n	8007c7e <lv_disp_refr_task+0x2b6>
 8007c68:	82f3      	strh	r3, [r6, #22]
            row_last = vdb->area.y2;
 8007c6a:	2216      	movs	r2, #22
 8007c6c:	5eb3      	ldrsh	r3, [r6, r2]
            lv_refr_area_part(area_p);
 8007c6e:	9801      	ldr	r0, [sp, #4]
            row_last = vdb->area.y2;
 8007c70:	9304      	str	r3, [sp, #16]
            lv_refr_area_part(area_p);
 8007c72:	f7ff fe0b 	bl	800788c <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8007c76:	b2bb      	uxth	r3, r7
 8007c78:	195d      	adds	r5, r3, r5
 8007c7a:	b22d      	sxth	r5, r5
 8007c7c:	e7cb      	b.n	8007c16 <lv_disp_refr_task+0x24e>
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
 8007c7e:	466b      	mov	r3, sp
 8007c80:	899b      	ldrh	r3, [r3, #12]
 8007c82:	e7f1      	b.n	8007c68 <lv_disp_refr_task+0x2a0>
            lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007c84:	6828      	ldr	r0, [r5, #0]
 8007c86:	f004 faa3 	bl	800c1d0 <lv_disp_get_buf>
 8007c8a:	0004      	movs	r4, r0
            lv_refr_vdb_flush();
 8007c8c:	f7ff fd0e 	bl	80076ac <lv_refr_vdb_flush>
            while(vdb->flushing)
 8007c90:	69a3      	ldr	r3, [r4, #24]
 8007c92:	07db      	lsls	r3, r3, #31
 8007c94:	d4fc      	bmi.n	8007c90 <lv_disp_refr_task+0x2c8>
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 8007c96:	68a3      	ldr	r3, [r4, #8]
 8007c98:	9303      	str	r3, [sp, #12]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	9301      	str	r3, [sp, #4]
 8007c9e:	9a01      	ldr	r2, [sp, #4]
 8007ca0:	9b03      	ldr	r3, [sp, #12]
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d101      	bne.n	8007caa <lv_disp_refr_task+0x2e2>
 8007ca6:	6863      	ldr	r3, [r4, #4]
 8007ca8:	9301      	str	r3, [sp, #4]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 8007caa:	6828      	ldr	r0, [r5, #0]
 8007cac:	f004 fa58 	bl	800c160 <lv_disp_get_hor_res>
            for(a = 0; a < disp_refr->inv_p; a++) {
 8007cb0:	2500      	movs	r5, #0
                        start_offs += hres * sizeof(lv_color_t);
 8007cb2:	0043      	lsls	r3, r0, #1
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 8007cb4:	9005      	str	r0, [sp, #20]
                        start_offs += hres * sizeof(lv_color_t);
 8007cb6:	9304      	str	r3, [sp, #16]
            for(a = 0; a < disp_refr->inv_p; a++) {
 8007cb8:	4b09      	ldr	r3, [pc, #36]	; (8007ce0 <lv_disp_refr_task+0x318>)
 8007cba:	6819      	ldr	r1, [r3, #0]
 8007cbc:	23b2      	movs	r3, #178	; 0xb2
 8007cbe:	005b      	lsls	r3, r3, #1
 8007cc0:	5acb      	ldrh	r3, [r1, r3]
 8007cc2:	059b      	lsls	r3, r3, #22
 8007cc4:	0d9b      	lsrs	r3, r3, #22
 8007cc6:	429d      	cmp	r5, r3
 8007cc8:	db00      	blt.n	8007ccc <lv_disp_refr_task+0x304>
 8007cca:	e6a7      	b.n	8007a1c <lv_disp_refr_task+0x54>
                if(disp_refr->inv_area_joined[a] == 0) {
 8007ccc:	194b      	adds	r3, r1, r5
 8007cce:	3345      	adds	r3, #69	; 0x45
 8007cd0:	33ff      	adds	r3, #255	; 0xff
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d007      	beq.n	8007ce8 <lv_disp_refr_task+0x320>
            for(a = 0; a < disp_refr->inv_p; a++) {
 8007cd8:	3501      	adds	r5, #1
 8007cda:	b2ad      	uxth	r5, r5
 8007cdc:	e7ec      	b.n	8007cb8 <lv_disp_refr_task+0x2f0>
 8007cde:	46c0      	nop			; (mov r8, r8)
 8007ce0:	200013f4 	.word	0x200013f4
 8007ce4:	200013f8 	.word	0x200013f8
 8007ce8:	00eb      	lsls	r3, r5, #3
 8007cea:	18cb      	adds	r3, r1, r3
 8007cec:	9302      	str	r3, [sp, #8]
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 8007cee:	3308      	adds	r3, #8
 8007cf0:	263e      	movs	r6, #62	; 0x3e
 8007cf2:	5f9e      	ldrsh	r6, [r3, r6]
 8007cf4:	9b02      	ldr	r3, [sp, #8]
 8007cf6:	9c05      	ldr	r4, [sp, #20]
 8007cf8:	3306      	adds	r3, #6
 8007cfa:	223e      	movs	r2, #62	; 0x3e
 8007cfc:	5e9b      	ldrsh	r3, [r3, r2]
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 8007cfe:	002a      	movs	r2, r5
 8007d00:	3208      	adds	r2, #8
    return area_p->x2 - area_p->x1 + 1;
 8007d02:	00d2      	lsls	r2, r2, #3
 8007d04:	188a      	adds	r2, r1, r2
 8007d06:	2101      	movs	r1, #1
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 8007d08:	4374      	muls	r4, r6
 8007d0a:	1ac9      	subs	r1, r1, r3
 8007d0c:	18e4      	adds	r4, r4, r3
 8007d0e:	8913      	ldrh	r3, [r2, #8]
                    uint32_t start_offs =
 8007d10:	0064      	lsls	r4, r4, #1
 8007d12:	185b      	adds	r3, r3, r1
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 8007d14:	b21b      	sxth	r3, r3
 8007d16:	005b      	lsls	r3, r3, #1
 8007d18:	9307      	str	r3, [sp, #28]
 8007d1a:	9b03      	ldr	r3, [sp, #12]
 8007d1c:	191f      	adds	r7, r3, r4
 8007d1e:	9b01      	ldr	r3, [sp, #4]
 8007d20:	18e4      	adds	r4, r4, r3
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 8007d22:	9b02      	ldr	r3, [sp, #8]
 8007d24:	334a      	adds	r3, #74	; 0x4a
 8007d26:	2200      	movs	r2, #0
 8007d28:	5e9b      	ldrsh	r3, [r3, r2]
 8007d2a:	42b3      	cmp	r3, r6
 8007d2c:	dbd4      	blt.n	8007cd8 <lv_disp_refr_task+0x310>
                        memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
 8007d2e:	0038      	movs	r0, r7
 8007d30:	9a07      	ldr	r2, [sp, #28]
 8007d32:	0021      	movs	r1, r4
 8007d34:	f005 ff16 	bl	800db64 <memcpy>
 8007d38:	9b04      	ldr	r3, [sp, #16]
 8007d3a:	3601      	adds	r6, #1
 8007d3c:	b236      	sxth	r6, r6
 8007d3e:	18ff      	adds	r7, r7, r3
 8007d40:	e7ee      	b.n	8007d20 <lv_disp_refr_task+0x358>
            disp_refr->driver.monitor_cb(&disp_refr->driver, lv_tick_elaps(start), px_num);
 8007d42:	9806      	ldr	r0, [sp, #24]
 8007d44:	f004 fa7e 	bl	800c244 <lv_tick_elaps>
 8007d48:	4b02      	ldr	r3, [pc, #8]	; (8007d54 <lv_disp_refr_task+0x38c>)
 8007d4a:	0001      	movs	r1, r0
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	0020      	movs	r0, r4
 8007d50:	47a8      	blx	r5
 8007d52:	e67d      	b.n	8007a50 <lv_disp_refr_task+0x88>
 8007d54:	200013f8 	.word	0x200013f8

08007d58 <lv_style_copy>:
 * Copy a style to an other
 * @param dest pointer to the destination style
 * @param src pointer to the source style
 */
void lv_style_copy(lv_style_t * dest, const lv_style_t * src)
{
 8007d58:	b510      	push	{r4, lr}
    memcpy(dest, src, sizeof(lv_style_t));
 8007d5a:	223c      	movs	r2, #60	; 0x3c
 8007d5c:	f005 ff02 	bl	800db64 <memcpy>
}
 8007d60:	bd10      	pop	{r4, pc}
	...

08007d64 <lv_style_init>:
{
 8007d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    lv_style_scr.glass               = 0;
 8007d66:	2201      	movs	r2, #1
 8007d68:	49f0      	ldr	r1, [pc, #960]	; (800812c <lv_style_init+0x3c8>)
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8007d6a:	241f      	movs	r4, #31
    lv_style_scr.glass               = 0;
 8007d6c:	780b      	ldrb	r3, [r1, #0]
    lv_style_scr.body.radius         = 0;
 8007d6e:	2700      	movs	r7, #0
    lv_style_scr.glass               = 0;
 8007d70:	4393      	bics	r3, r2
 8007d72:	700b      	strb	r3, [r1, #0]
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 8007d74:	4bee      	ldr	r3, [pc, #952]	; (8008130 <lv_style_init+0x3cc>)
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8007d76:	48ef      	ldr	r0, [pc, #956]	; (8008134 <lv_style_init+0x3d0>)
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 8007d78:	881b      	ldrh	r3, [r3, #0]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8007d7a:	2506      	movs	r5, #6
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	466b      	mov	r3, sp
 8007d80:	881b      	ldrh	r3, [r3, #0]
    lv_style_scr.body.opa            = LV_OPA_COVER;
 8007d82:	32fe      	adds	r2, #254	; 0xfe
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 8007d84:	804b      	strh	r3, [r1, #2]
    lv_style_scr.body.grad_color     = LV_COLOR_WHITE;
 8007d86:	466b      	mov	r3, sp
 8007d88:	881b      	ldrh	r3, [r3, #0]
    lv_style_scr.body.opa            = LV_OPA_COVER;
 8007d8a:	720a      	strb	r2, [r1, #8]
    lv_style_scr.body.grad_color     = LV_COLOR_WHITE;
 8007d8c:	808b      	strh	r3, [r1, #4]
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	83cb      	strh	r3, [r1, #30]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8007d92:	7a8b      	ldrb	r3, [r1, #10]
    lv_style_scr.body.radius         = 0;
 8007d94:	80cf      	strh	r7, [r1, #6]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8007d96:	43a3      	bics	r3, r4
 8007d98:	728b      	strb	r3, [r1, #10]
 8007d9a:	894b      	ldrh	r3, [r1, #10]
    lv_style_scr.body.padding.left   = 0;
 8007d9c:	834f      	strh	r7, [r1, #26]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8007d9e:	4003      	ands	r3, r0
 8007da0:	814b      	strh	r3, [r1, #10]
 8007da2:	003b      	movs	r3, r7
    lv_style_scr.body.border.part  = LV_BORDER_FULL;
 8007da4:	330f      	adds	r3, #15
 8007da6:	738b      	strb	r3, [r1, #14]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 8007da8:	4be1      	ldr	r3, [pc, #900]	; (8008130 <lv_style_init+0x3cc>)
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8007daa:	72cf      	strb	r7, [r1, #11]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 8007dac:	885b      	ldrh	r3, [r3, #2]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8007dae:	1c48      	adds	r0, r1, #1
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 8007db0:	9301      	str	r3, [sp, #4]
 8007db2:	466b      	mov	r3, sp
 8007db4:	889b      	ldrh	r3, [r3, #4]
    lv_style_scr.body.padding.right  = 0;
 8007db6:	838f      	strh	r7, [r1, #28]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 8007db8:	820b      	strh	r3, [r1, #16]
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	750b      	strb	r3, [r1, #20]
    lv_style_scr.text.opa          = LV_OPA_COVER;
 8007dbe:	000b      	movs	r3, r1
 8007dc0:	332c      	adds	r3, #44	; 0x2c
    lv_style_scr.body.padding.top    = 0;
 8007dc2:	82cf      	strh	r7, [r1, #22]
    lv_style_scr.body.padding.bottom = 0;
 8007dc4:	830f      	strh	r7, [r1, #24]
    lv_style_scr.body.border.opa   = LV_OPA_COVER;
 8007dc6:	73ca      	strb	r2, [r1, #15]
    lv_style_scr.body.border.width = 0;
 8007dc8:	818f      	strh	r7, [r1, #12]
    lv_style_scr.body.shadow.width = 0;
 8007dca:	824f      	strh	r7, [r1, #18]
    lv_style_scr.text.opa          = LV_OPA_COVER;
 8007dcc:	701a      	strb	r2, [r3, #0]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8007dce:	7fc3      	ldrb	r3, [r0, #31]
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
 8007dd0:	261e      	movs	r6, #30
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8007dd2:	43a3      	bics	r3, r4
 8007dd4:	432b      	orrs	r3, r5
 8007dd6:	77c3      	strb	r3, [r0, #31]
 8007dd8:	8c0d      	ldrh	r5, [r1, #32]
 8007dda:	4bd6      	ldr	r3, [pc, #856]	; (8008134 <lv_style_init+0x3d0>)
 8007ddc:	1c88      	adds	r0, r1, #2
 8007dde:	401d      	ands	r5, r3
 8007de0:	23c0      	movs	r3, #192	; 0xc0
 8007de2:	005b      	lsls	r3, r3, #1
 8007de4:	432b      	orrs	r3, r5
 8007de6:	2507      	movs	r5, #7
 8007de8:	840b      	strh	r3, [r1, #32]
 8007dea:	0a1b      	lsrs	r3, r3, #8
 8007dec:	402b      	ands	r3, r5
 8007dee:	3529      	adds	r5, #41	; 0x29
 8007df0:	432b      	orrs	r3, r5
 8007df2:	77c3      	strb	r3, [r0, #31]
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 8007df4:	1cc8      	adds	r0, r1, #3
 8007df6:	7fc3      	ldrb	r3, [r0, #31]
 8007df8:	3d15      	subs	r5, #21
 8007dfa:	43a3      	bics	r3, r4
 8007dfc:	432b      	orrs	r3, r5
 8007dfe:	77c3      	strb	r3, [r0, #31]
 8007e00:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 8007e02:	48cc      	ldr	r0, [pc, #816]	; (8008134 <lv_style_init+0x3d0>)
 8007e04:	3d14      	subs	r5, #20
 8007e06:	4003      	ands	r3, r0
 8007e08:	2094      	movs	r0, #148	; 0x94
 8007e0a:	00c0      	lsls	r0, r0, #3
 8007e0c:	4303      	orrs	r3, r0
 8007e0e:	844b      	strh	r3, [r1, #34]	; 0x22
 8007e10:	0a1b      	lsrs	r3, r3, #8
 8007e12:	402b      	ands	r3, r5
 8007e14:	3549      	adds	r5, #73	; 0x49
 8007e16:	1d08      	adds	r0, r1, #4
 8007e18:	432b      	orrs	r3, r5
 8007e1a:	77c3      	strb	r3, [r0, #31]
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
 8007e1c:	4bc6      	ldr	r3, [pc, #792]	; (8008138 <lv_style_init+0x3d4>)
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 8007e1e:	0008      	movs	r0, r1
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
 8007e20:	624b      	str	r3, [r1, #36]	; 0x24
    lv_style_scr.text.line_space   = 2;
 8007e22:	2302      	movs	r3, #2
 8007e24:	854b      	strh	r3, [r1, #42]	; 0x2a
    lv_style_scr.image.opa     = LV_OPA_COVER;
 8007e26:	000b      	movs	r3, r1
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 8007e28:	3030      	adds	r0, #48	; 0x30
    lv_style_scr.image.opa     = LV_OPA_COVER;
 8007e2a:	3333      	adds	r3, #51	; 0x33
 8007e2c:	701a      	strb	r2, [r3, #0]
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 8007e2e:	7803      	ldrb	r3, [r0, #0]
 8007e30:	3d4c      	subs	r5, #76	; 0x4c
 8007e32:	43a3      	bics	r3, r4
 8007e34:	432b      	orrs	r3, r5
 8007e36:	7003      	strb	r3, [r0, #0]
 8007e38:	8e0b      	ldrh	r3, [r1, #48]	; 0x30
 8007e3a:	4dbe      	ldr	r5, [pc, #760]	; (8008134 <lv_style_init+0x3d0>)
    lv_style_scr.text.letter_space = 0;
 8007e3c:	850f      	strh	r7, [r1, #40]	; 0x28
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 8007e3e:	402b      	ands	r3, r5
 8007e40:	2580      	movs	r5, #128	; 0x80
 8007e42:	006d      	lsls	r5, r5, #1
 8007e44:	432b      	orrs	r3, r5
 8007e46:	860b      	strh	r3, [r1, #48]	; 0x30
 8007e48:	3df9      	subs	r5, #249	; 0xf9
 8007e4a:	0a1b      	lsrs	r3, r3, #8
 8007e4c:	402b      	ands	r3, r5
 8007e4e:	3519      	adds	r5, #25
 8007e50:	432b      	orrs	r3, r5
 8007e52:	7043      	strb	r3, [r0, #1]
    lv_style_scr.image.intense = LV_OPA_TRANSP;
 8007e54:	000b      	movs	r3, r1
 8007e56:	3332      	adds	r3, #50	; 0x32
 8007e58:	701f      	strb	r7, [r3, #0]
    lv_style_scr.line.opa     = LV_OPA_COVER;
 8007e5a:	000b      	movs	r3, r1
 8007e5c:	3338      	adds	r3, #56	; 0x38
 8007e5e:	701a      	strb	r2, [r3, #0]
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
 8007e60:	000a      	movs	r2, r1
 8007e62:	2004      	movs	r0, #4
 8007e64:	3234      	adds	r2, #52	; 0x34
 8007e66:	7813      	ldrb	r3, [r2, #0]
 8007e68:	43a3      	bics	r3, r4
 8007e6a:	4303      	orrs	r3, r0
 8007e6c:	7013      	strb	r3, [r2, #0]
 8007e6e:	8e8b      	ldrh	r3, [r1, #52]	; 0x34
 8007e70:	48b0      	ldr	r0, [pc, #704]	; (8008134 <lv_style_init+0x3d0>)
 8007e72:	4003      	ands	r3, r0
 8007e74:	2080      	movs	r0, #128	; 0x80
 8007e76:	0040      	lsls	r0, r0, #1
 8007e78:	4303      	orrs	r3, r0
 8007e7a:	868b      	strh	r3, [r1, #52]	; 0x34
 8007e7c:	38f9      	subs	r0, #249	; 0xf9
 8007e7e:	0a1b      	lsrs	r3, r3, #8
 8007e80:	4003      	ands	r3, r0
 8007e82:	432b      	orrs	r3, r5
 8007e84:	7053      	strb	r3, [r2, #1]
    lv_style_scr.line.rounded = 0;
 8007e86:	000a      	movs	r2, r1
    lv_style_scr.line.width   = 2;
 8007e88:	2302      	movs	r3, #2
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
 8007e8a:	0028      	movs	r0, r5
    lv_style_scr.line.rounded = 0;
 8007e8c:	3239      	adds	r2, #57	; 0x39
    lv_style_scr.line.width   = 2;
 8007e8e:	86cb      	strh	r3, [r1, #54]	; 0x36
    lv_style_scr.line.rounded = 0;
 8007e90:	7813      	ldrb	r3, [r2, #0]
 8007e92:	381f      	subs	r0, #31
 8007e94:	4383      	bics	r3, r0
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 8007e96:	48a9      	ldr	r0, [pc, #676]	; (800813c <lv_style_init+0x3d8>)
    lv_style_scr.line.rounded = 0;
 8007e98:	7013      	strb	r3, [r2, #0]
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 8007e9a:	f7ff ff5d 	bl	8007d58 <lv_style_copy>
    lv_style_plain.body.padding.left   = LV_DPI / 20;
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	4ba6      	ldr	r3, [pc, #664]	; (800813c <lv_style_init+0x3d8>)
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 8007ea2:	4da7      	ldr	r5, [pc, #668]	; (8008140 <lv_style_init+0x3dc>)
    lv_style_plain.body.padding.left   = LV_DPI / 20;
 8007ea4:	835a      	strh	r2, [r3, #26]
    lv_style_plain.body.padding.right  = LV_DPI / 20;
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	839a      	strh	r2, [r3, #28]
    lv_style_plain.body.padding.top    = LV_DPI / 20;
 8007eaa:	2201      	movs	r2, #1
 8007eac:	82da      	strh	r2, [r3, #22]
    lv_style_plain.body.padding.bottom = LV_DPI / 20;
 8007eae:	2201      	movs	r2, #1
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 8007eb0:	0019      	movs	r1, r3
 8007eb2:	0028      	movs	r0, r5
    lv_style_plain.body.padding.bottom = LV_DPI / 20;
 8007eb4:	831a      	strh	r2, [r3, #24]
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 8007eb6:	f7ff ff4f 	bl	8007d58 <lv_style_copy>
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 8007eba:	221e      	movs	r2, #30
 8007ebc:	1c68      	adds	r0, r5, #1
 8007ebe:	7fc3      	ldrb	r3, [r0, #31]
 8007ec0:	2107      	movs	r1, #7
 8007ec2:	43a3      	bics	r3, r4
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	77c3      	strb	r3, [r0, #31]
 8007ec8:	8c2b      	ldrh	r3, [r5, #32]
 8007eca:	4a9a      	ldr	r2, [pc, #616]	; (8008134 <lv_style_init+0x3d0>)
 8007ecc:	1ca8      	adds	r0, r5, #2
 8007ece:	4013      	ands	r3, r2
 8007ed0:	22f0      	movs	r2, #240	; 0xf0
 8007ed2:	00d2      	lsls	r2, r2, #3
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	842b      	strh	r3, [r5, #32]
 8007ed8:	0a1b      	lsrs	r3, r3, #8
 8007eda:	400b      	ands	r3, r1
 8007edc:	3917      	subs	r1, #23
 8007ede:	430b      	orrs	r3, r1
 8007ee0:	77c3      	strb	r3, [r0, #31]
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
 8007ee2:	0028      	movs	r0, r5
 8007ee4:	3030      	adds	r0, #48	; 0x30
 8007ee6:	7803      	ldrb	r3, [r0, #0]
 8007ee8:	43a3      	bics	r3, r4
 8007eea:	4333      	orrs	r3, r6
 8007eec:	7003      	strb	r3, [r0, #0]
 8007eee:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8007ef0:	4e90      	ldr	r6, [pc, #576]	; (8008134 <lv_style_init+0x3d0>)
 8007ef2:	4033      	ands	r3, r6
 8007ef4:	2607      	movs	r6, #7
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	862b      	strh	r3, [r5, #48]	; 0x30
 8007efa:	0a1b      	lsrs	r3, r3, #8
 8007efc:	4033      	ands	r3, r6
 8007efe:	430b      	orrs	r3, r1
 8007f00:	7043      	strb	r3, [r0, #1]
    lv_style_plain_color.line.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 8007f02:	002b      	movs	r3, r5
 8007f04:	3334      	adds	r3, #52	; 0x34
 8007f06:	7818      	ldrb	r0, [r3, #0]
 8007f08:	3617      	adds	r6, #23
 8007f0a:	43a0      	bics	r0, r4
 8007f0c:	4330      	orrs	r0, r6
 8007f0e:	7018      	strb	r0, [r3, #0]
 8007f10:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8007f12:	4e88      	ldr	r6, [pc, #544]	; (8008134 <lv_style_init+0x3d0>)
 8007f14:	4030      	ands	r0, r6
 8007f16:	4302      	orrs	r2, r0
 8007f18:	2007      	movs	r0, #7
 8007f1a:	86aa      	strh	r2, [r5, #52]	; 0x34
 8007f1c:	0a12      	lsrs	r2, r2, #8
 8007f1e:	4002      	ands	r2, r0
 8007f20:	430a      	orrs	r2, r1
 8007f22:	705a      	strb	r2, [r3, #1]
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 8007f24:	221b      	movs	r2, #27
 8007f26:	78ab      	ldrb	r3, [r5, #2]
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 8007f28:	4984      	ldr	r1, [pc, #528]	; (800813c <lv_style_init+0x3d8>)
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 8007f2a:	43a3      	bics	r3, r4
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	2294      	movs	r2, #148	; 0x94
 8007f30:	70ab      	strb	r3, [r5, #2]
 8007f32:	886b      	ldrh	r3, [r5, #2]
 8007f34:	00d2      	lsls	r2, r2, #3
 8007f36:	4033      	ands	r3, r6
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	0002      	movs	r2, r0
 8007f3c:	806b      	strh	r3, [r5, #2]
 8007f3e:	0a1b      	lsrs	r3, r3, #8
 8007f40:	3249      	adds	r2, #73	; 0x49
 8007f42:	4003      	ands	r3, r0
 8007f44:	4313      	orrs	r3, r2
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 8007f46:	4e7f      	ldr	r6, [pc, #508]	; (8008144 <lv_style_init+0x3e0>)
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 8007f48:	70eb      	strb	r3, [r5, #3]
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 8007f4a:	886b      	ldrh	r3, [r5, #2]
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 8007f4c:	0030      	movs	r0, r6
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 8007f4e:	80ab      	strh	r3, [r5, #4]
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 8007f50:	f7ff ff02 	bl	8007d58 <lv_style_copy>
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 8007f54:	2104      	movs	r1, #4
 8007f56:	1c72      	adds	r2, r6, #1
 8007f58:	7fd3      	ldrb	r3, [r2, #31]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8007f5a:	4d7b      	ldr	r5, [pc, #492]	; (8008148 <lv_style_init+0x3e4>)
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 8007f5c:	43a3      	bics	r3, r4
 8007f5e:	430b      	orrs	r3, r1
 8007f60:	77d3      	strb	r3, [r2, #31]
 8007f62:	8c33      	ldrh	r3, [r6, #32]
 8007f64:	4973      	ldr	r1, [pc, #460]	; (8008134 <lv_style_init+0x3d0>)
 8007f66:	1cb2      	adds	r2, r6, #2
 8007f68:	400b      	ands	r3, r1
 8007f6a:	2180      	movs	r1, #128	; 0x80
 8007f6c:	0049      	lsls	r1, r1, #1
 8007f6e:	430b      	orrs	r3, r1
 8007f70:	8433      	strh	r3, [r6, #32]
 8007f72:	39f9      	subs	r1, #249	; 0xf9
 8007f74:	0a1b      	lsrs	r3, r3, #8
 8007f76:	400b      	ands	r3, r1
 8007f78:	3119      	adds	r1, #25
 8007f7a:	430b      	orrs	r3, r1
 8007f7c:	77d3      	strb	r3, [r2, #31]
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 8007f7e:	0032      	movs	r2, r6
 8007f80:	3230      	adds	r2, #48	; 0x30
 8007f82:	7813      	ldrb	r3, [r2, #0]
 8007f84:	391c      	subs	r1, #28
 8007f86:	43a3      	bics	r3, r4
 8007f88:	430b      	orrs	r3, r1
 8007f8a:	7013      	strb	r3, [r2, #0]
 8007f8c:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 8007f8e:	4969      	ldr	r1, [pc, #420]	; (8008134 <lv_style_init+0x3d0>)
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8007f90:	0028      	movs	r0, r5
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 8007f92:	400b      	ands	r3, r1
 8007f94:	2180      	movs	r1, #128	; 0x80
 8007f96:	0049      	lsls	r1, r1, #1
 8007f98:	430b      	orrs	r3, r1
 8007f9a:	8633      	strh	r3, [r6, #48]	; 0x30
 8007f9c:	39f9      	subs	r1, #249	; 0xf9
 8007f9e:	0a1b      	lsrs	r3, r3, #8
 8007fa0:	400b      	ands	r3, r1
 8007fa2:	3119      	adds	r1, #25
 8007fa4:	430b      	orrs	r3, r1
 8007fa6:	7053      	strb	r3, [r2, #1]
    lv_style_pretty.line.color        = lv_color_make(0x20, 0x20, 0x20);
 8007fa8:	0032      	movs	r2, r6
 8007faa:	3234      	adds	r2, #52	; 0x34
 8007fac:	7813      	ldrb	r3, [r2, #0]
 8007fae:	391c      	subs	r1, #28
 8007fb0:	43a3      	bics	r3, r4
 8007fb2:	430b      	orrs	r3, r1
 8007fb4:	7013      	strb	r3, [r2, #0]
 8007fb6:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
 8007fb8:	495e      	ldr	r1, [pc, #376]	; (8008134 <lv_style_init+0x3d0>)
 8007fba:	400b      	ands	r3, r1
 8007fbc:	2180      	movs	r1, #128	; 0x80
 8007fbe:	0049      	lsls	r1, r1, #1
 8007fc0:	430b      	orrs	r3, r1
 8007fc2:	86b3      	strh	r3, [r6, #52]	; 0x34
 8007fc4:	39f9      	subs	r1, #249	; 0xf9
 8007fc6:	0a1b      	lsrs	r3, r3, #8
 8007fc8:	400b      	ands	r3, r1
 8007fca:	3119      	adds	r1, #25
 8007fcc:	430b      	orrs	r3, r1
 8007fce:	7053      	strb	r3, [r2, #1]
    lv_style_pretty.body.main_color   = LV_COLOR_WHITE;
 8007fd0:	466b      	mov	r3, sp
 8007fd2:	881b      	ldrh	r3, [r3, #0]
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
 8007fd4:	2208      	movs	r2, #8
    lv_style_pretty.body.main_color   = LV_COLOR_WHITE;
 8007fd6:	8073      	strh	r3, [r6, #2]
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
 8007fd8:	4b55      	ldr	r3, [pc, #340]	; (8008130 <lv_style_init+0x3cc>)
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8007fda:	0031      	movs	r1, r6
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
 8007fdc:	889b      	ldrh	r3, [r3, #4]
 8007fde:	80b3      	strh	r3, [r6, #4]
    lv_style_pretty.body.radius       = LV_DPI / 15;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	80f3      	strh	r3, [r6, #6]
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
 8007fe4:	7ab3      	ldrb	r3, [r6, #10]
 8007fe6:	43a3      	bics	r3, r4
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	72b3      	strb	r3, [r6, #10]
 8007fec:	8972      	ldrh	r2, [r6, #10]
 8007fee:	4b51      	ldr	r3, [pc, #324]	; (8008134 <lv_style_init+0x3d0>)
 8007ff0:	401a      	ands	r2, r3
 8007ff2:	2380      	movs	r3, #128	; 0x80
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	2207      	movs	r2, #7
 8007ffa:	8173      	strh	r3, [r6, #10]
 8007ffc:	0a1b      	lsrs	r3, r3, #8
 8007ffe:	4013      	ands	r3, r2
 8008000:	3239      	adds	r2, #57	; 0x39
 8008002:	4313      	orrs	r3, r2
 8008004:	72f3      	strb	r3, [r6, #11]
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 8008006:	2301      	movs	r3, #1
 8008008:	81b3      	strh	r3, [r6, #12]
    lv_style_pretty.body.border.opa   = LV_OPA_30;
 800800a:	234c      	movs	r3, #76	; 0x4c
 800800c:	73f3      	strb	r3, [r6, #15]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 800800e:	f7ff fea3 	bl	8007d58 <lv_style_copy>
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
 8008012:	201c      	movs	r0, #28
 8008014:	1c69      	adds	r1, r5, #1
 8008016:	7fcb      	ldrb	r3, [r1, #31]
 8008018:	4a46      	ldr	r2, [pc, #280]	; (8008134 <lv_style_init+0x3d0>)
 800801a:	43a3      	bics	r3, r4
 800801c:	4303      	orrs	r3, r0
 800801e:	77cb      	strb	r3, [r1, #31]
 8008020:	8c2b      	ldrh	r3, [r5, #32]
 8008022:	2607      	movs	r6, #7
 8008024:	4013      	ands	r3, r2
 8008026:	22e0      	movs	r2, #224	; 0xe0
 8008028:	00d2      	lsls	r2, r2, #3
 800802a:	4313      	orrs	r3, r2
 800802c:	842b      	strh	r3, [r5, #32]
 800802e:	0a1b      	lsrs	r3, r3, #8
 8008030:	4033      	ands	r3, r6
 8008032:	3e27      	subs	r6, #39	; 0x27
 8008034:	1ca9      	adds	r1, r5, #2
 8008036:	4333      	orrs	r3, r6
 8008038:	77cb      	strb	r3, [r1, #31]
    lv_style_pretty_color.image.color       = lv_color_make(0xe0, 0xe0, 0xe0);
 800803a:	002b      	movs	r3, r5
 800803c:	3330      	adds	r3, #48	; 0x30
 800803e:	7819      	ldrb	r1, [r3, #0]
 8008040:	43a1      	bics	r1, r4
 8008042:	4308      	orrs	r0, r1
 8008044:	7018      	strb	r0, [r3, #0]
 8008046:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 8008048:	483a      	ldr	r0, [pc, #232]	; (8008134 <lv_style_init+0x3d0>)
 800804a:	4001      	ands	r1, r0
 800804c:	430a      	orrs	r2, r1
 800804e:	2107      	movs	r1, #7
 8008050:	862a      	strh	r2, [r5, #48]	; 0x30
 8008052:	0a12      	lsrs	r2, r2, #8
 8008054:	400a      	ands	r2, r1
 8008056:	4332      	orrs	r2, r6
 8008058:	705a      	strb	r2, [r3, #1]
    lv_style_pretty_color.line.color        = lv_color_make(0xc0, 0xc0, 0xc0);
 800805a:	002a      	movs	r2, r5
 800805c:	3234      	adds	r2, #52	; 0x34
 800805e:	7813      	ldrb	r3, [r2, #0]
 8008060:	3111      	adds	r1, #17
 8008062:	43a3      	bics	r3, r4
 8008064:	430b      	orrs	r3, r1
 8008066:	7013      	strb	r3, [r2, #0]
 8008068:	23c0      	movs	r3, #192	; 0xc0
 800806a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 800806c:	00db      	lsls	r3, r3, #3
 800806e:	4001      	ands	r1, r0
 8008070:	430b      	orrs	r3, r1
 8008072:	2107      	movs	r1, #7
 8008074:	86ab      	strh	r3, [r5, #52]	; 0x34
 8008076:	0a1b      	lsrs	r3, r3, #8
 8008078:	400b      	ands	r3, r1
 800807a:	3947      	subs	r1, #71	; 0x47
 800807c:	430b      	orrs	r3, r1
 800807e:	7053      	strb	r3, [r2, #1]
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
 8008080:	2218      	movs	r2, #24
 8008082:	78ab      	ldrb	r3, [r5, #2]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 8008084:	4e31      	ldr	r6, [pc, #196]	; (800814c <lv_style_init+0x3e8>)
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
 8008086:	43a3      	bics	r3, r4
 8008088:	4313      	orrs	r3, r2
 800808a:	70ab      	strb	r3, [r5, #2]
 800808c:	2398      	movs	r3, #152	; 0x98
 800808e:	886a      	ldrh	r2, [r5, #2]
 8008090:	00db      	lsls	r3, r3, #3
 8008092:	4002      	ands	r2, r0
 8008094:	4313      	orrs	r3, r2
 8008096:	2207      	movs	r2, #7
 8008098:	806b      	strh	r3, [r5, #2]
 800809a:	0a1b      	lsrs	r3, r3, #8
 800809c:	4013      	ands	r3, r2
 800809e:	3261      	adds	r2, #97	; 0x61
 80080a0:	4313      	orrs	r3, r2
 80080a2:	70eb      	strb	r3, [r5, #3]
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 80080a4:	2311      	movs	r3, #17
 80080a6:	792a      	ldrb	r2, [r5, #4]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 80080a8:	4924      	ldr	r1, [pc, #144]	; (800813c <lv_style_init+0x3d8>)
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 80080aa:	43a2      	bics	r2, r4
 80080ac:	4313      	orrs	r3, r2
 80080ae:	712b      	strb	r3, [r5, #4]
 80080b0:	23b0      	movs	r3, #176	; 0xb0
 80080b2:	88aa      	ldrh	r2, [r5, #4]
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4002      	ands	r2, r0
 80080b8:	4313      	orrs	r3, r2
 80080ba:	2207      	movs	r2, #7
 80080bc:	80ab      	strh	r3, [r5, #4]
 80080be:	0a1b      	lsrs	r3, r3, #8
 80080c0:	4013      	ands	r3, r2
 80080c2:	3221      	adds	r2, #33	; 0x21
 80080c4:	4313      	orrs	r3, r2
 80080c6:	716b      	strb	r3, [r5, #5]
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 80080c8:	7aab      	ldrb	r3, [r5, #10]
 80080ca:	3a20      	subs	r2, #32
 80080cc:	43a3      	bics	r3, r4
 80080ce:	4313      	orrs	r3, r2
 80080d0:	72ab      	strb	r3, [r5, #10]
 80080d2:	23b0      	movs	r3, #176	; 0xb0
 80080d4:	896a      	ldrh	r2, [r5, #10]
 80080d6:	005b      	lsls	r3, r3, #1
 80080d8:	4002      	ands	r2, r0
 80080da:	4313      	orrs	r3, r2
 80080dc:	2207      	movs	r2, #7
 80080de:	816b      	strh	r3, [r5, #10]
 80080e0:	0a1b      	lsrs	r3, r3, #8
 80080e2:	4013      	ands	r3, r2
 80080e4:	3209      	adds	r2, #9
 80080e6:	4313      	orrs	r3, r2
 80080e8:	72eb      	strb	r3, [r5, #11]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 80080ea:	0030      	movs	r0, r6
 80080ec:	f7ff fe34 	bl	8007d58 <lv_style_copy>
    lv_style_transp.glass             = 1;
 80080f0:	2201      	movs	r2, #1
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 80080f2:	4d17      	ldr	r5, [pc, #92]	; (8008150 <lv_style_init+0x3ec>)
    lv_style_transp.glass             = 1;
 80080f4:	7833      	ldrb	r3, [r6, #0]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 80080f6:	0031      	movs	r1, r6
    lv_style_transp.glass             = 1;
 80080f8:	4313      	orrs	r3, r2
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 80080fa:	0028      	movs	r0, r5
    lv_style_transp.glass             = 1;
 80080fc:	7033      	strb	r3, [r6, #0]
    lv_style_transp.body.border.width = 0;
 80080fe:	81b7      	strh	r7, [r6, #12]
    lv_style_transp.body.opa          = LV_OPA_TRANSP;
 8008100:	7237      	strb	r7, [r6, #8]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 8008102:	f7ff fe29 	bl	8007d58 <lv_style_copy>
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 8008106:	4e13      	ldr	r6, [pc, #76]	; (8008154 <lv_style_init+0x3f0>)
 8008108:	0029      	movs	r1, r5
 800810a:	0030      	movs	r0, r6
    lv_style_transp_fit.body.padding.left   = 0;
 800810c:	836f      	strh	r7, [r5, #26]
    lv_style_transp_fit.body.padding.right  = 0;
 800810e:	83af      	strh	r7, [r5, #28]
    lv_style_transp_fit.body.padding.top    = 0;
 8008110:	82ef      	strh	r7, [r5, #22]
    lv_style_transp_fit.body.padding.bottom = 0;
 8008112:	832f      	strh	r7, [r5, #24]
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 8008114:	f7ff fe20 	bl	8007d58 <lv_style_copy>
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 8008118:	4d0f      	ldr	r5, [pc, #60]	; (8008158 <lv_style_init+0x3f4>)
 800811a:	4908      	ldr	r1, [pc, #32]	; (800813c <lv_style_init+0x3d8>)
 800811c:	0028      	movs	r0, r5
    lv_style_transp_tight.body.padding.inner = 0;
 800811e:	83f7      	strh	r7, [r6, #30]
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 8008120:	f7ff fe1a 	bl	8007d58 <lv_style_copy>
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 8008124:	231a      	movs	r3, #26
 8008126:	78aa      	ldrb	r2, [r5, #2]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 8008128:	2008      	movs	r0, #8
 800812a:	e017      	b.n	800815c <lv_style_init+0x3f8>
 800812c:	200052c0 	.word	0x200052c0
 8008130:	0800de08 	.word	0x0800de08
 8008134:	fffff81f 	.word	0xfffff81f
 8008138:	20000030 	.word	0x20000030
 800813c:	20005248 	.word	0x20005248
 8008140:	20005338 	.word	0x20005338
 8008144:	20005158 	.word	0x20005158
 8008148:	20005068 	.word	0x20005068
 800814c:	200050a4 	.word	0x200050a4
 8008150:	2000520c 	.word	0x2000520c
 8008154:	20005194 	.word	0x20005194
 8008158:	200050e0 	.word	0x200050e0
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 800815c:	43a2      	bics	r2, r4
 800815e:	4313      	orrs	r3, r2
 8008160:	70ab      	strb	r3, [r5, #2]
 8008162:	886a      	ldrh	r2, [r5, #2]
 8008164:	4bf1      	ldr	r3, [pc, #964]	; (800852c <lv_style_init+0x7c8>)
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 8008166:	1c69      	adds	r1, r5, #1
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 8008168:	401a      	ands	r2, r3
 800816a:	23a0      	movs	r3, #160	; 0xa0
 800816c:	00db      	lsls	r3, r3, #3
 800816e:	4313      	orrs	r3, r2
 8008170:	2207      	movs	r2, #7
 8008172:	806b      	strh	r3, [r5, #2]
 8008174:	0a1b      	lsrs	r3, r3, #8
 8008176:	4013      	ands	r3, r2
 8008178:	3269      	adds	r2, #105	; 0x69
 800817a:	4313      	orrs	r3, r2
 800817c:	70eb      	strb	r3, [r5, #3]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 800817e:	230b      	movs	r3, #11
 8008180:	792a      	ldrb	r2, [r5, #4]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 8008182:	4240      	negs	r0, r0
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 8008184:	43a2      	bics	r2, r4
 8008186:	4313      	orrs	r3, r2
 8008188:	712b      	strb	r3, [r5, #4]
 800818a:	88aa      	ldrh	r2, [r5, #4]
 800818c:	4be7      	ldr	r3, [pc, #924]	; (800852c <lv_style_init+0x7c8>)
    lv_style_btn_rel.body.shadow.width   = 0;
 800818e:	826f      	strh	r7, [r5, #18]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 8008190:	401a      	ands	r2, r3
 8008192:	23e0      	movs	r3, #224	; 0xe0
 8008194:	005b      	lsls	r3, r3, #1
 8008196:	4313      	orrs	r3, r2
 8008198:	2207      	movs	r2, #7
 800819a:	80ab      	strh	r3, [r5, #4]
 800819c:	0a1b      	lsrs	r3, r3, #8
 800819e:	4013      	ands	r3, r2
 80081a0:	3211      	adds	r2, #17
 80081a2:	4313      	orrs	r3, r2
 80081a4:	716b      	strb	r3, [r5, #5]
    lv_style_btn_rel.body.radius         = LV_DPI / 15;
 80081a6:	2301      	movs	r3, #1
 80081a8:	80eb      	strh	r3, [r5, #6]
    lv_style_btn_rel.body.padding.left   = LV_DPI / 4;
 80081aa:	2306      	movs	r3, #6
 80081ac:	836b      	strh	r3, [r5, #26]
    lv_style_btn_rel.body.padding.right  = LV_DPI / 4;
 80081ae:	2306      	movs	r3, #6
 80081b0:	83ab      	strh	r3, [r5, #28]
    lv_style_btn_rel.body.padding.top    = LV_DPI / 6;
 80081b2:	2304      	movs	r3, #4
 80081b4:	82eb      	strh	r3, [r5, #22]
    lv_style_btn_rel.body.padding.bottom = LV_DPI / 6;
 80081b6:	2304      	movs	r3, #4
 80081b8:	832b      	strh	r3, [r5, #24]
    lv_style_btn_rel.body.padding.inner  = LV_DPI / 10;
 80081ba:	2302      	movs	r3, #2
 80081bc:	83eb      	strh	r3, [r5, #30]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 80081be:	2305      	movs	r3, #5
 80081c0:	7aaa      	ldrb	r2, [r5, #10]
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 80081c2:	27c0      	movs	r7, #192	; 0xc0
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 80081c4:	43a2      	bics	r2, r4
 80081c6:	4313      	orrs	r3, r2
 80081c8:	72ab      	strb	r3, [r5, #10]
 80081ca:	896a      	ldrh	r2, [r5, #10]
 80081cc:	4bd7      	ldr	r3, [pc, #860]	; (800852c <lv_style_init+0x7c8>)
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 80081ce:	00bf      	lsls	r7, r7, #2
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 80081d0:	401a      	ands	r2, r3
 80081d2:	23c0      	movs	r3, #192	; 0xc0
 80081d4:	4313      	orrs	r3, r2
 80081d6:	816b      	strh	r3, [r5, #10]
 80081d8:	2308      	movs	r3, #8
 80081da:	72eb      	strb	r3, [r5, #11]
    lv_style_btn_rel.body.border.width   = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 80081dc:	2301      	movs	r3, #1
 80081de:	81ab      	strh	r3, [r5, #12]
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
 80081e0:	23b2      	movs	r3, #178	; 0xb2
 80081e2:	73eb      	strb	r3, [r5, #15]
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 80081e4:	466b      	mov	r3, sp
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 80081e6:	22fc      	movs	r2, #252	; 0xfc
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 80081e8:	889b      	ldrh	r3, [r3, #4]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 80081ea:	00d2      	lsls	r2, r2, #3
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 80081ec:	822b      	strh	r3, [r5, #16]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 80081ee:	7fcb      	ldrb	r3, [r1, #31]
 80081f0:	4323      	orrs	r3, r4
 80081f2:	77cb      	strb	r3, [r1, #31]
 80081f4:	8c2b      	ldrh	r3, [r5, #32]
 80081f6:	1ca9      	adds	r1, r5, #2
 80081f8:	4313      	orrs	r3, r2
 80081fa:	842b      	strh	r3, [r5, #32]
 80081fc:	0a1b      	lsrs	r3, r3, #8
 80081fe:	4303      	orrs	r3, r0
 8008200:	77cb      	strb	r3, [r1, #31]
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);
 8008202:	002b      	movs	r3, r5
 8008204:	3330      	adds	r3, #48	; 0x30
 8008206:	7819      	ldrb	r1, [r3, #0]
 8008208:	4321      	orrs	r1, r4
 800820a:	7019      	strb	r1, [r3, #0]
 800820c:	8e29      	ldrh	r1, [r5, #48]	; 0x30
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 800820e:	4ec8      	ldr	r6, [pc, #800]	; (8008530 <lv_style_init+0x7cc>)
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);
 8008210:	430a      	orrs	r2, r1
 8008212:	862a      	strh	r2, [r5, #48]	; 0x30
 8008214:	0a12      	lsrs	r2, r2, #8
 8008216:	4302      	orrs	r2, r0
 8008218:	705a      	strb	r2, [r3, #1]
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 800821a:	0029      	movs	r1, r5
 800821c:	0030      	movs	r0, r6
 800821e:	f7ff fd9b 	bl	8007d58 <lv_style_copy>
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 8008222:	2212      	movs	r2, #18
 8008224:	78b3      	ldrb	r3, [r6, #2]
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8008226:	2118      	movs	r1, #24
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 8008228:	43a3      	bics	r3, r4
 800822a:	4313      	orrs	r3, r2
 800822c:	70b3      	strb	r3, [r6, #2]
 800822e:	8873      	ldrh	r3, [r6, #2]
 8008230:	4abe      	ldr	r2, [pc, #760]	; (800852c <lv_style_init+0x7c8>)
 8008232:	4013      	ands	r3, r2
 8008234:	2207      	movs	r2, #7
 8008236:	433b      	orrs	r3, r7
 8008238:	8073      	strh	r3, [r6, #2]
 800823a:	0a1b      	lsrs	r3, r3, #8
 800823c:	4013      	ands	r3, r2
 800823e:	3229      	adds	r2, #41	; 0x29
 8008240:	4313      	orrs	r3, r2
 8008242:	70f3      	strb	r3, [r6, #3]
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
 8008244:	7933      	ldrb	r3, [r6, #4]
 8008246:	3a29      	subs	r2, #41	; 0x29
 8008248:	43a3      	bics	r3, r4
 800824a:	4313      	orrs	r3, r2
 800824c:	7133      	strb	r3, [r6, #4]
 800824e:	88b2      	ldrh	r2, [r6, #4]
 8008250:	4bb6      	ldr	r3, [pc, #728]	; (800852c <lv_style_init+0x7c8>)
 8008252:	401a      	ands	r2, r3
 8008254:	2390      	movs	r3, #144	; 0x90
 8008256:	005b      	lsls	r3, r3, #1
 8008258:	4313      	orrs	r3, r2
 800825a:	2207      	movs	r2, #7
 800825c:	80b3      	strh	r3, [r6, #4]
 800825e:	0a1b      	lsrs	r3, r3, #8
 8008260:	4013      	ands	r3, r2
 8008262:	3209      	adds	r2, #9
 8008264:	4313      	orrs	r3, r2
 8008266:	7173      	strb	r3, [r6, #5]
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8008268:	1c72      	adds	r2, r6, #1
 800826a:	7fd3      	ldrb	r3, [r2, #31]
 800826c:	43a3      	bics	r3, r4
 800826e:	430b      	orrs	r3, r1
 8008270:	77d3      	strb	r3, [r2, #31]
 8008272:	8c33      	ldrh	r3, [r6, #32]
 8008274:	49ad      	ldr	r1, [pc, #692]	; (800852c <lv_style_init+0x7c8>)
 8008276:	1cb2      	adds	r2, r6, #2
 8008278:	400b      	ands	r3, r1
 800827a:	21b4      	movs	r1, #180	; 0xb4
 800827c:	00c9      	lsls	r1, r1, #3
 800827e:	430b      	orrs	r3, r1
 8008280:	2107      	movs	r1, #7
 8008282:	8433      	strh	r3, [r6, #32]
 8008284:	0a1b      	lsrs	r3, r3, #8
 8008286:	400b      	ands	r3, r1
 8008288:	3967      	subs	r1, #103	; 0x67
 800828a:	430b      	orrs	r3, r1
 800828c:	77d3      	strb	r3, [r2, #31]
    lv_style_btn_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 800828e:	0032      	movs	r2, r6
 8008290:	3230      	adds	r2, #48	; 0x30
 8008292:	7813      	ldrb	r3, [r2, #0]
 8008294:	3178      	adds	r1, #120	; 0x78
 8008296:	43a3      	bics	r3, r4
 8008298:	430b      	orrs	r3, r1
 800829a:	7013      	strb	r3, [r2, #0]
 800829c:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 800829e:	49a3      	ldr	r1, [pc, #652]	; (800852c <lv_style_init+0x7c8>)
 80082a0:	400b      	ands	r3, r1
 80082a2:	21b4      	movs	r1, #180	; 0xb4
 80082a4:	00c9      	lsls	r1, r1, #3
 80082a6:	430b      	orrs	r3, r1
 80082a8:	2107      	movs	r1, #7
 80082aa:	8633      	strh	r3, [r6, #48]	; 0x30
 80082ac:	0a1b      	lsrs	r3, r3, #8
 80082ae:	400b      	ands	r3, r1
 80082b0:	3967      	subs	r1, #103	; 0x67
 80082b2:	430b      	orrs	r3, r1
 80082b4:	7053      	strb	r3, [r2, #1]
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 80082b6:	0032      	movs	r2, r6
 80082b8:	3234      	adds	r2, #52	; 0x34
 80082ba:	7813      	ldrb	r3, [r2, #0]
 80082bc:	3178      	adds	r1, #120	; 0x78
 80082be:	43a3      	bics	r3, r4
 80082c0:	430b      	orrs	r3, r1
 80082c2:	7013      	strb	r3, [r2, #0]
 80082c4:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
 80082c6:	4999      	ldr	r1, [pc, #612]	; (800852c <lv_style_init+0x7c8>)
 80082c8:	400b      	ands	r3, r1
 80082ca:	21b4      	movs	r1, #180	; 0xb4
 80082cc:	00c9      	lsls	r1, r1, #3
 80082ce:	430b      	orrs	r3, r1
 80082d0:	2107      	movs	r1, #7
 80082d2:	86b3      	strh	r3, [r6, #52]	; 0x34
 80082d4:	0a1b      	lsrs	r3, r3, #8
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
 80082d6:	4e97      	ldr	r6, [pc, #604]	; (8008534 <lv_style_init+0x7d0>)
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 80082d8:	400b      	ands	r3, r1
 80082da:	3967      	subs	r1, #103	; 0x67
 80082dc:	430b      	orrs	r3, r1
 80082de:	7053      	strb	r3, [r2, #1]
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
 80082e0:	0029      	movs	r1, r5
 80082e2:	0030      	movs	r0, r6
 80082e4:	f7ff fd38 	bl	8007d58 <lv_style_copy>
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 80082e8:	2204      	movs	r2, #4
 80082ea:	78b3      	ldrb	r3, [r6, #2]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 80082ec:	1c70      	adds	r0, r6, #1
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 80082ee:	43a3      	bics	r3, r4
 80082f0:	4313      	orrs	r3, r2
 80082f2:	70b3      	strb	r3, [r6, #2]
 80082f4:	8872      	ldrh	r2, [r6, #2]
 80082f6:	4b8d      	ldr	r3, [pc, #564]	; (800852c <lv_style_init+0x7c8>)
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 80082f8:	2107      	movs	r1, #7
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 80082fa:	401a      	ands	r2, r3
 80082fc:	2380      	movs	r3, #128	; 0x80
 80082fe:	4313      	orrs	r3, r2
 8008300:	8073      	strh	r3, [r6, #2]
 8008302:	2308      	movs	r3, #8
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 8008304:	2212      	movs	r2, #18
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 8008306:	70f3      	strb	r3, [r6, #3]
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 8008308:	7933      	ldrb	r3, [r6, #4]
 800830a:	43a3      	bics	r3, r4
 800830c:	4313      	orrs	r3, r2
 800830e:	7133      	strb	r3, [r6, #4]
 8008310:	88b3      	ldrh	r3, [r6, #4]
 8008312:	4a86      	ldr	r2, [pc, #536]	; (800852c <lv_style_init+0x7c8>)
 8008314:	4013      	ands	r3, r2
 8008316:	431f      	orrs	r7, r3
 8008318:	2307      	movs	r3, #7
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 800831a:	2201      	movs	r2, #1
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 800831c:	80b7      	strh	r7, [r6, #4]
 800831e:	0a3f      	lsrs	r7, r7, #8
 8008320:	401f      	ands	r7, r3
 8008322:	3329      	adds	r3, #41	; 0x29
 8008324:	431f      	orrs	r7, r3
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 8008326:	7ab3      	ldrb	r3, [r6, #10]
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 8008328:	7177      	strb	r7, [r6, #5]
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 800832a:	43a3      	bics	r3, r4
 800832c:	4313      	orrs	r3, r2
 800832e:	72b3      	strb	r3, [r6, #10]
 8008330:	8973      	ldrh	r3, [r6, #10]
 8008332:	4a7e      	ldr	r2, [pc, #504]	; (800852c <lv_style_init+0x7c8>)
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
 8008334:	271e      	movs	r7, #30
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 8008336:	4013      	ands	r3, r2
 8008338:	2220      	movs	r2, #32
 800833a:	4313      	orrs	r3, r2
 800833c:	8173      	strh	r3, [r6, #10]
 800833e:	2300      	movs	r3, #0
 8008340:	72f3      	strb	r3, [r6, #11]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8008342:	7fc3      	ldrb	r3, [r0, #31]
 8008344:	3a02      	subs	r2, #2
 8008346:	43a3      	bics	r3, r4
 8008348:	4313      	orrs	r3, r2
 800834a:	77c3      	strb	r3, [r0, #31]
 800834c:	8c33      	ldrh	r3, [r6, #32]
 800834e:	4a77      	ldr	r2, [pc, #476]	; (800852c <lv_style_init+0x7c8>)
 8008350:	1cb0      	adds	r0, r6, #2
 8008352:	4013      	ands	r3, r2
 8008354:	22dc      	movs	r2, #220	; 0xdc
 8008356:	00d2      	lsls	r2, r2, #3
 8008358:	4313      	orrs	r3, r2
 800835a:	8433      	strh	r3, [r6, #32]
 800835c:	0a1b      	lsrs	r3, r3, #8
 800835e:	400b      	ands	r3, r1
 8008360:	393f      	subs	r1, #63	; 0x3f
 8008362:	430b      	orrs	r3, r1
 8008364:	77c3      	strb	r3, [r0, #31]
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
 8008366:	0030      	movs	r0, r6
 8008368:	3030      	adds	r0, #48	; 0x30
 800836a:	7803      	ldrb	r3, [r0, #0]
 800836c:	43a3      	bics	r3, r4
 800836e:	433b      	orrs	r3, r7
 8008370:	7003      	strb	r3, [r0, #0]
 8008372:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 8008374:	4f6d      	ldr	r7, [pc, #436]	; (800852c <lv_style_init+0x7c8>)
 8008376:	403b      	ands	r3, r7
 8008378:	2707      	movs	r7, #7
 800837a:	4313      	orrs	r3, r2
 800837c:	8633      	strh	r3, [r6, #48]	; 0x30
 800837e:	0a1b      	lsrs	r3, r3, #8
 8008380:	403b      	ands	r3, r7
 8008382:	430b      	orrs	r3, r1
 8008384:	7043      	strb	r3, [r0, #1]
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8008386:	0033      	movs	r3, r6
 8008388:	3334      	adds	r3, #52	; 0x34
 800838a:	7818      	ldrb	r0, [r3, #0]
 800838c:	3717      	adds	r7, #23
 800838e:	43a0      	bics	r0, r4
 8008390:	4338      	orrs	r0, r7
 8008392:	7018      	strb	r0, [r3, #0]
 8008394:	8eb0      	ldrh	r0, [r6, #52]	; 0x34
 8008396:	4f65      	ldr	r7, [pc, #404]	; (800852c <lv_style_init+0x7c8>)
 8008398:	4038      	ands	r0, r7
 800839a:	4302      	orrs	r2, r0
 800839c:	2007      	movs	r0, #7
 800839e:	86b2      	strh	r2, [r6, #52]	; 0x34
 80083a0:	0a12      	lsrs	r2, r2, #8
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 80083a2:	4f65      	ldr	r7, [pc, #404]	; (8008538 <lv_style_init+0x7d4>)
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 80083a4:	4002      	ands	r2, r0
 80083a6:	430a      	orrs	r2, r1
 80083a8:	705a      	strb	r2, [r3, #1]
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 80083aa:	0031      	movs	r1, r6
 80083ac:	0038      	movs	r0, r7
 80083ae:	f7ff fcd3 	bl	8007d58 <lv_style_copy>
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 80083b2:	2204      	movs	r2, #4
 80083b4:	78bb      	ldrb	r3, [r7, #2]
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 80083b6:	260e      	movs	r6, #14
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 80083b8:	43a3      	bics	r3, r4
 80083ba:	4313      	orrs	r3, r2
 80083bc:	70bb      	strb	r3, [r7, #2]
 80083be:	887a      	ldrh	r2, [r7, #2]
 80083c0:	4b5a      	ldr	r3, [pc, #360]	; (800852c <lv_style_init+0x7c8>)
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 80083c2:	2118      	movs	r1, #24
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 80083c4:	401a      	ands	r2, r3
 80083c6:	23a0      	movs	r3, #160	; 0xa0
 80083c8:	4313      	orrs	r3, r2
 80083ca:	807b      	strh	r3, [r7, #2]
 80083cc:	2300      	movs	r3, #0
 80083ce:	70fb      	strb	r3, [r7, #3]
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 80083d0:	793b      	ldrb	r3, [r7, #4]
 80083d2:	43a3      	bics	r3, r4
 80083d4:	4333      	orrs	r3, r6
 80083d6:	713b      	strb	r3, [r7, #4]
 80083d8:	88ba      	ldrh	r2, [r7, #4]
 80083da:	4b54      	ldr	r3, [pc, #336]	; (800852c <lv_style_init+0x7c8>)
 80083dc:	401a      	ands	r2, r3
 80083de:	2398      	movs	r3, #152	; 0x98
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4313      	orrs	r3, r2
 80083e4:	2207      	movs	r2, #7
 80083e6:	80bb      	strh	r3, [r7, #4]
 80083e8:	0a1b      	lsrs	r3, r3, #8
 80083ea:	4013      	ands	r3, r2
 80083ec:	3221      	adds	r2, #33	; 0x21
 80083ee:	4313      	orrs	r3, r2
 80083f0:	717b      	strb	r3, [r7, #5]
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 80083f2:	1c7a      	adds	r2, r7, #1
 80083f4:	7fd3      	ldrb	r3, [r2, #31]
 80083f6:	43a3      	bics	r3, r4
 80083f8:	430b      	orrs	r3, r1
 80083fa:	77d3      	strb	r3, [r2, #31]
 80083fc:	8c3b      	ldrh	r3, [r7, #32]
 80083fe:	494b      	ldr	r1, [pc, #300]	; (800852c <lv_style_init+0x7c8>)
 8008400:	1cba      	adds	r2, r7, #2
 8008402:	400b      	ands	r3, r1
 8008404:	21b4      	movs	r1, #180	; 0xb4
 8008406:	00c9      	lsls	r1, r1, #3
 8008408:	430b      	orrs	r3, r1
 800840a:	2107      	movs	r1, #7
 800840c:	843b      	strh	r3, [r7, #32]
 800840e:	0a1b      	lsrs	r3, r3, #8
 8008410:	400b      	ands	r3, r1
 8008412:	3967      	subs	r1, #103	; 0x67
 8008414:	430b      	orrs	r3, r1
 8008416:	77d3      	strb	r3, [r2, #31]
    lv_style_btn_tgl_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 8008418:	003a      	movs	r2, r7
 800841a:	3230      	adds	r2, #48	; 0x30
 800841c:	7813      	ldrb	r3, [r2, #0]
 800841e:	3178      	adds	r1, #120	; 0x78
 8008420:	43a3      	bics	r3, r4
 8008422:	430b      	orrs	r3, r1
 8008424:	7013      	strb	r3, [r2, #0]
 8008426:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008428:	4940      	ldr	r1, [pc, #256]	; (800852c <lv_style_init+0x7c8>)
 800842a:	400b      	ands	r3, r1
 800842c:	21b4      	movs	r1, #180	; 0xb4
 800842e:	00c9      	lsls	r1, r1, #3
 8008430:	430b      	orrs	r3, r1
 8008432:	2107      	movs	r1, #7
 8008434:	863b      	strh	r3, [r7, #48]	; 0x30
 8008436:	0a1b      	lsrs	r3, r3, #8
 8008438:	400b      	ands	r3, r1
 800843a:	3967      	subs	r1, #103	; 0x67
 800843c:	430b      	orrs	r3, r1
 800843e:	7053      	strb	r3, [r2, #1]
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8008440:	003a      	movs	r2, r7
 8008442:	3234      	adds	r2, #52	; 0x34
 8008444:	7813      	ldrb	r3, [r2, #0]
 8008446:	3178      	adds	r1, #120	; 0x78
 8008448:	43a3      	bics	r3, r4
 800844a:	430b      	orrs	r3, r1
 800844c:	7013      	strb	r3, [r2, #0]
 800844e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008450:	4936      	ldr	r1, [pc, #216]	; (800852c <lv_style_init+0x7c8>)
 8008452:	400b      	ands	r3, r1
 8008454:	21b4      	movs	r1, #180	; 0xb4
 8008456:	00c9      	lsls	r1, r1, #3
 8008458:	430b      	orrs	r3, r1
 800845a:	2107      	movs	r1, #7
 800845c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800845e:	0a1b      	lsrs	r3, r3, #8
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 8008460:	4f36      	ldr	r7, [pc, #216]	; (800853c <lv_style_init+0x7d8>)
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8008462:	400b      	ands	r3, r1
 8008464:	3967      	subs	r1, #103	; 0x67
 8008466:	430b      	orrs	r3, r1
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 8008468:	0038      	movs	r0, r7
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800846a:	7053      	strb	r3, [r2, #1]
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 800846c:	0029      	movs	r1, r5
 800846e:	f7ff fc73 	bl	8007d58 <lv_style_copy>
    lv_style_btn_ina.body.main_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 8008472:	221b      	movs	r2, #27
 8008474:	78bb      	ldrb	r3, [r7, #2]
 8008476:	2107      	movs	r1, #7
 8008478:	43a3      	bics	r3, r4
 800847a:	4313      	orrs	r3, r2
 800847c:	70bb      	strb	r3, [r7, #2]
 800847e:	887b      	ldrh	r3, [r7, #2]
 8008480:	4a2a      	ldr	r2, [pc, #168]	; (800852c <lv_style_init+0x7c8>)
    lv_style_btn_ina.body.grad_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 8008482:	201b      	movs	r0, #27
    lv_style_btn_ina.body.main_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 8008484:	4013      	ands	r3, r2
 8008486:	22d8      	movs	r2, #216	; 0xd8
 8008488:	00d2      	lsls	r2, r2, #3
 800848a:	4313      	orrs	r3, r2
 800848c:	807b      	strh	r3, [r7, #2]
 800848e:	0a1b      	lsrs	r3, r3, #8
 8008490:	400b      	ands	r3, r1
 8008492:	392f      	subs	r1, #47	; 0x2f
 8008494:	430b      	orrs	r3, r1
 8008496:	70fb      	strb	r3, [r7, #3]
    lv_style_btn_ina.body.grad_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 8008498:	793b      	ldrb	r3, [r7, #4]
 800849a:	43a3      	bics	r3, r4
 800849c:	4303      	orrs	r3, r0
 800849e:	713b      	strb	r3, [r7, #4]
 80084a0:	88bb      	ldrh	r3, [r7, #4]
 80084a2:	4822      	ldr	r0, [pc, #136]	; (800852c <lv_style_init+0x7c8>)
 80084a4:	4003      	ands	r3, r0
 80084a6:	431a      	orrs	r2, r3
 80084a8:	2307      	movs	r3, #7
 80084aa:	80ba      	strh	r2, [r7, #4]
 80084ac:	0a12      	lsrs	r2, r2, #8
 80084ae:	401a      	ands	r2, r3
 80084b0:	430a      	orrs	r2, r1
 80084b2:	717a      	strb	r2, [r7, #5]
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
 80084b4:	2212      	movs	r2, #18
 80084b6:	7abb      	ldrb	r3, [r7, #10]
    lv_style_btn_ina.text.color        = lv_color_make(0x70, 0x70, 0x70);
 80084b8:	1c79      	adds	r1, r7, #1
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
 80084ba:	43a3      	bics	r3, r4
 80084bc:	4313      	orrs	r3, r2
 80084be:	72bb      	strb	r3, [r7, #10]
 80084c0:	2390      	movs	r3, #144	; 0x90
 80084c2:	897a      	ldrh	r2, [r7, #10]
 80084c4:	00db      	lsls	r3, r3, #3
 80084c6:	4002      	ands	r2, r0
 80084c8:	4313      	orrs	r3, r2
 80084ca:	2207      	movs	r2, #7
 80084cc:	817b      	strh	r3, [r7, #10]
 80084ce:	0a1b      	lsrs	r3, r3, #8
 80084d0:	4013      	ands	r3, r2
 80084d2:	3a77      	subs	r2, #119	; 0x77
 80084d4:	4313      	orrs	r3, r2
 80084d6:	72fb      	strb	r3, [r7, #11]
    lv_style_btn_ina.text.color        = lv_color_make(0x70, 0x70, 0x70);
 80084d8:	7fcb      	ldrb	r3, [r1, #31]
 80084da:	22e0      	movs	r2, #224	; 0xe0
 80084dc:	43a3      	bics	r3, r4
 80084de:	4333      	orrs	r3, r6
 80084e0:	77cb      	strb	r3, [r1, #31]
 80084e2:	8c3b      	ldrh	r3, [r7, #32]
 80084e4:	0092      	lsls	r2, r2, #2
 80084e6:	4003      	ands	r3, r0
 80084e8:	2007      	movs	r0, #7
 80084ea:	4313      	orrs	r3, r2
 80084ec:	843b      	strh	r3, [r7, #32]
 80084ee:	0a1b      	lsrs	r3, r3, #8
 80084f0:	4003      	ands	r3, r0
 80084f2:	3069      	adds	r0, #105	; 0x69
 80084f4:	1cb9      	adds	r1, r7, #2
 80084f6:	4303      	orrs	r3, r0
 80084f8:	77cb      	strb	r3, [r1, #31]
    lv_style_btn_ina.image.color       = lv_color_make(0x70, 0x70, 0x70);
 80084fa:	0039      	movs	r1, r7
 80084fc:	3130      	adds	r1, #48	; 0x30
 80084fe:	780b      	ldrb	r3, [r1, #0]
 8008500:	480a      	ldr	r0, [pc, #40]	; (800852c <lv_style_init+0x7c8>)
 8008502:	43a3      	bics	r3, r4
 8008504:	4333      	orrs	r3, r6
 8008506:	700b      	strb	r3, [r1, #0]
 8008508:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800850a:	4003      	ands	r3, r0
 800850c:	2007      	movs	r0, #7
 800850e:	4313      	orrs	r3, r2
 8008510:	863b      	strh	r3, [r7, #48]	; 0x30
 8008512:	0a1b      	lsrs	r3, r3, #8
 8008514:	4003      	ands	r3, r0
 8008516:	3069      	adds	r0, #105	; 0x69
 8008518:	4303      	orrs	r3, r0
 800851a:	704b      	strb	r3, [r1, #1]
    lv_style_btn_ina.line.color        = lv_color_make(0x70, 0x70, 0x70);
 800851c:	003b      	movs	r3, r7
 800851e:	3334      	adds	r3, #52	; 0x34
 8008520:	7819      	ldrb	r1, [r3, #0]
 8008522:	4802      	ldr	r0, [pc, #8]	; (800852c <lv_style_init+0x7c8>)
 8008524:	43a1      	bics	r1, r4
 8008526:	430e      	orrs	r6, r1
 8008528:	e00a      	b.n	8008540 <lv_style_init+0x7dc>
 800852a:	46c0      	nop			; (mov r8, r8)
 800852c:	fffff81f 	.word	0xfffff81f
 8008530:	2000511c 	.word	0x2000511c
 8008534:	20005284 	.word	0x20005284
 8008538:	200052fc 	.word	0x200052fc
 800853c:	200051d0 	.word	0x200051d0
 8008540:	701e      	strb	r6, [r3, #0]
 8008542:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8008544:	4001      	ands	r1, r0
 8008546:	430a      	orrs	r2, r1
 8008548:	2107      	movs	r1, #7
 800854a:	86ba      	strh	r2, [r7, #52]	; 0x34
 800854c:	0a12      	lsrs	r2, r2, #8
 800854e:	400a      	ands	r2, r1
 8008550:	3169      	adds	r1, #105	; 0x69
 8008552:	430a      	orrs	r2, r1
 8008554:	705a      	strb	r2, [r3, #1]
}
 8008556:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08008558 <lv_draw_get_buf>:
 * Be careful to not use the buffer while other processes are using it.
 * @param size the required size
 */
void * lv_draw_get_buf(uint32_t size)
{
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 8008558:	4b0d      	ldr	r3, [pc, #52]	; (8008590 <lv_draw_get_buf+0x38>)
{
 800855a:	b510      	push	{r4, lr}
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 800855c:	681a      	ldr	r2, [r3, #0]
{
 800855e:	0001      	movs	r1, r0
 8008560:	4c0c      	ldr	r4, [pc, #48]	; (8008594 <lv_draw_get_buf+0x3c>)
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 8008562:	4282      	cmp	r2, r0
 8008564:	d301      	bcc.n	800856a <lv_draw_get_buf+0x12>
 8008566:	6820      	ldr	r0, [r4, #0]
    }

    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
    lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
    return LV_GC_ROOT(_lv_draw_buf);
}
 8008568:	bd10      	pop	{r4, pc}
    draw_buf_size = size;
 800856a:	6018      	str	r0, [r3, #0]
    if(LV_GC_ROOT(_lv_draw_buf) == NULL) {
 800856c:	6820      	ldr	r0, [r4, #0]
 800856e:	2800      	cmp	r0, #0
 8008570:	d106      	bne.n	8008580 <lv_draw_get_buf+0x28>
        LV_GC_ROOT(_lv_draw_buf) = lv_mem_alloc(size);
 8008572:	0008      	movs	r0, r1
 8008574:	f004 fa8e 	bl	800ca94 <lv_mem_alloc>
 8008578:	6020      	str	r0, [r4, #0]
        lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 800857a:	2800      	cmp	r0, #0
 800857c:	d1f4      	bne.n	8008568 <lv_draw_get_buf+0x10>
 800857e:	e7fe      	b.n	800857e <lv_draw_get_buf+0x26>
    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
 8008580:	f004 fae6 	bl	800cb50 <lv_mem_realloc>
    lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 8008584:	2800      	cmp	r0, #0
 8008586:	d001      	beq.n	800858c <lv_draw_get_buf+0x34>
    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
 8008588:	6020      	str	r0, [r4, #0]
 800858a:	e7ed      	b.n	8008568 <lv_draw_get_buf+0x10>
 800858c:	e7fe      	b.n	800858c <lv_draw_get_buf+0x34>
 800858e:	46c0      	nop			; (mov r8, r8)
 8008590:	200013fc 	.word	0x200013fc
 8008594:	2000538c 	.word	0x2000538c

08008598 <lv_draw_free_buf>:

/**
 * Free the draw buffer
 */
void lv_draw_free_buf(void)
{
 8008598:	b510      	push	{r4, lr}
    if(LV_GC_ROOT(_lv_draw_buf)) {
 800859a:	4c05      	ldr	r4, [pc, #20]	; (80085b0 <lv_draw_free_buf+0x18>)
 800859c:	6820      	ldr	r0, [r4, #0]
 800859e:	2800      	cmp	r0, #0
 80085a0:	d005      	beq.n	80085ae <lv_draw_free_buf+0x16>
        lv_mem_free(LV_GC_ROOT(_lv_draw_buf));
 80085a2:	f004 faab 	bl	800cafc <lv_mem_free>
        LV_GC_ROOT(_lv_draw_buf) = NULL;
 80085a6:	2300      	movs	r3, #0
        draw_buf_size = 0;
 80085a8:	4a02      	ldr	r2, [pc, #8]	; (80085b4 <lv_draw_free_buf+0x1c>)
        LV_GC_ROOT(_lv_draw_buf) = NULL;
 80085aa:	6023      	str	r3, [r4, #0]
        draw_buf_size = 0;
 80085ac:	6013      	str	r3, [r2, #0]
    }
}
 80085ae:	bd10      	pop	{r4, pc}
 80085b0:	2000538c 	.word	0x2000538c
 80085b4:	200013fc 	.word	0x200013fc

080085b8 <lv_draw_aa_get_opa>:
 * @param px_id position of  of a pixel which opacity should be get [0..seg-1]
 * @param base_opa the base opacity
 * @return the opacity of the given pixel
 */
lv_opa_t lv_draw_aa_get_opa(lv_coord_t seg, lv_coord_t px_id, lv_opa_t base_opa)
{
 80085b8:	0003      	movs	r3, r0
    static const lv_opa_t seg8[8] = {16, 48, 80, 112, 143, 175, 207, 239};

    static const lv_opa_t * seg_map[] = {seg1, seg2, seg3, seg4, seg5, seg6, seg7, seg8};

    if(seg == 0)
        return LV_OPA_TRANSP;
 80085ba:	2000      	movs	r0, #0
{
 80085bc:	b510      	push	{r4, lr}
    if(seg == 0)
 80085be:	4283      	cmp	r3, r0
 80085c0:	d008      	beq.n	80085d4 <lv_draw_aa_get_opa+0x1c>
    else if(seg < 8)
 80085c2:	2b07      	cmp	r3, #7
 80085c4:	dc07      	bgt.n	80085d6 <lv_draw_aa_get_opa+0x1e>
        return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 80085c6:	4808      	ldr	r0, [pc, #32]	; (80085e8 <lv_draw_aa_get_opa+0x30>)
 80085c8:	3b01      	subs	r3, #1
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	581b      	ldr	r3, [r3, r0]
 80085ce:	5c58      	ldrb	r0, [r3, r1]
 80085d0:	4350      	muls	r0, r2
 80085d2:	0a00      	lsrs	r0, r0, #8
    else {
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
    }
}
 80085d4:	bd10      	pop	{r4, pc}
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 80085d6:	0049      	lsls	r1, r1, #1
 80085d8:	3101      	adds	r1, #1
 80085da:	434a      	muls	r2, r1
 80085dc:	0059      	lsls	r1, r3, #1
 80085de:	0010      	movs	r0, r2
 80085e0:	f7f7 fe48 	bl	8000274 <__divsi3>
 80085e4:	b2c0      	uxtb	r0, r0
 80085e6:	e7f5      	b.n	80085d4 <lv_draw_aa_get_opa+0x1c>
 80085e8:	0800dfa4 	.word	0x0800dfa4

080085ec <lv_color_mix>:
static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 80085ec:	23ff      	movs	r3, #255	; 0xff
{
 80085ee:	b5f0      	push	{r4, r5, r6, r7, lr}
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 80085f0:	261f      	movs	r6, #31
 80085f2:	b297      	uxth	r7, r2
 80085f4:	0404      	lsls	r4, r0, #16
 80085f6:	1a9a      	subs	r2, r3, r2
 80085f8:	040b      	lsls	r3, r1, #16
 80085fa:	b292      	uxth	r2, r2
 80085fc:	0ee4      	lsrs	r4, r4, #27
 80085fe:	0edb      	lsrs	r3, r3, #27
 8008600:	437c      	muls	r4, r7
 8008602:	4353      	muls	r3, r2
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
    ret.ch.green_h = g_out >> 3;
    ret.ch.green_l = g_out & 0x7;
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8008604:	0545      	lsls	r5, r0, #21
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8008606:	18e4      	adds	r4, r4, r3
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8008608:	054b      	lsls	r3, r1, #21
 800860a:	0ead      	lsrs	r5, r5, #26
 800860c:	0e9b      	lsrs	r3, r3, #26
 800860e:	437d      	muls	r5, r7
 8008610:	4353      	muls	r3, r2
 8008612:	18ed      	adds	r5, r5, r3
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8008614:	06c3      	lsls	r3, r0, #27
 8008616:	06c8      	lsls	r0, r1, #27
 8008618:	0edb      	lsrs	r3, r3, #27
 800861a:	0ec0      	lsrs	r0, r0, #27
 800861c:	437b      	muls	r3, r7
 800861e:	4350      	muls	r0, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8008620:	04ad      	lsls	r5, r5, #18
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8008622:	1818      	adds	r0, r3, r0
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8008624:	0a24      	lsrs	r4, r4, #8
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8008626:	0a00      	lsrs	r0, r0, #8
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8008628:	0ead      	lsrs	r5, r5, #26
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800862a:	4034      	ands	r4, r6
    return ret;
 800862c:	016d      	lsls	r5, r5, #5
 800862e:	4030      	ands	r0, r6
 8008630:	4328      	orrs	r0, r5
 8008632:	02e4      	lsls	r4, r4, #11
 8008634:	4320      	orrs	r0, r4
}
 8008636:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008638 <sw_color_fill>:
 * @param color fill color
 * @param opa opacity (0, LV_OPA_TRANSP: transparent ... 255, LV_OPA_COVER, fully cover)
 */
static void sw_color_fill(lv_color_t * mem, lv_coord_t mem_width, const lv_area_t * fill_area, lv_color_t color,
                          lv_opa_t opa)
{
 8008638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800863a:	b08b      	sub	sp, #44	; 0x2c
 800863c:	0016      	movs	r6, r2
 800863e:	466a      	mov	r2, sp
 8008640:	8393      	strh	r3, [r2, #28]
 8008642:	ab10      	add	r3, sp, #64	; 0x40
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	9009      	str	r0, [sp, #36]	; 0x24
 8008648:	9308      	str	r3, [sp, #32]
 800864a:	9106      	str	r1, [sp, #24]
    /*Set all row in vdb to the given color*/
    lv_coord_t row;
    lv_coord_t col;

    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 800864c:	f7ff f9b6 	bl	80079bc <lv_refr_get_disp_refreshing>
    if(disp->driver.set_px_cb) {
 8008650:	6943      	ldr	r3, [r0, #20]
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 8008652:	0007      	movs	r7, r0
    if(disp->driver.set_px_cb) {
 8008654:	2b00      	cmp	r3, #0
 8008656:	d024      	beq.n	80086a2 <sw_color_fill+0x6a>
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8008658:	2300      	movs	r3, #0
 800865a:	5ef2      	ldrsh	r2, [r6, r3]
 800865c:	9205      	str	r2, [sp, #20]
 800865e:	2204      	movs	r2, #4
 8008660:	5eb3      	ldrsh	r3, [r6, r2]
 8008662:	9a05      	ldr	r2, [sp, #20]
 8008664:	4293      	cmp	r3, r2
 8008666:	da01      	bge.n	800866c <sw_color_fill+0x34>
                }
                mem += mem_width;
            }
        }
    }
}
 8008668:	b00b      	add	sp, #44	; 0x2c
 800866a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 800866c:	2302      	movs	r3, #2
 800866e:	5ef5      	ldrsh	r5, [r6, r3]
 8008670:	2206      	movs	r2, #6
 8008672:	5eb3      	ldrsh	r3, [r6, r2]
 8008674:	42ab      	cmp	r3, r5
 8008676:	da04      	bge.n	8008682 <sw_color_fill+0x4a>
 8008678:	9c05      	ldr	r4, [sp, #20]
 800867a:	3401      	adds	r4, #1
 800867c:	b223      	sxth	r3, r4
 800867e:	9305      	str	r3, [sp, #20]
 8008680:	e7ed      	b.n	800865e <sw_color_fill+0x26>
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
 8008682:	466a      	mov	r2, sp
 8008684:	9b08      	ldr	r3, [sp, #32]
 8008686:	0038      	movs	r0, r7
 8008688:	9302      	str	r3, [sp, #8]
 800868a:	8b92      	ldrh	r2, [r2, #28]
 800868c:	ab01      	add	r3, sp, #4
 800868e:	801a      	strh	r2, [r3, #0]
 8008690:	9500      	str	r5, [sp, #0]
 8008692:	9b05      	ldr	r3, [sp, #20]
 8008694:	9a06      	ldr	r2, [sp, #24]
 8008696:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008698:	697c      	ldr	r4, [r7, #20]
 800869a:	3501      	adds	r5, #1
 800869c:	47a0      	blx	r4
 800869e:	b22d      	sxth	r5, r5
 80086a0:	e7e6      	b.n	8008670 <sw_color_fill+0x38>
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
 80086a2:	2302      	movs	r3, #2
 80086a4:	5ef4      	ldrsh	r4, [r6, r3]
 80086a6:	9f06      	ldr	r7, [sp, #24]
 80086a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086aa:	4367      	muls	r7, r4
 80086ac:	007f      	lsls	r7, r7, #1
 80086ae:	19df      	adds	r7, r3, r7
        if(opa == LV_OPA_COVER) {
 80086b0:	9b08      	ldr	r3, [sp, #32]
 80086b2:	2bff      	cmp	r3, #255	; 0xff
 80086b4:	d127      	bne.n	8008706 <sw_color_fill+0xce>
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 80086b6:	2300      	movs	r3, #0
 80086b8:	5ef2      	ldrsh	r2, [r6, r3]
 80086ba:	0013      	movs	r3, r2
 80086bc:	2104      	movs	r1, #4
 80086be:	5e75      	ldrsh	r5, [r6, r1]
 80086c0:	42ab      	cmp	r3, r5
 80086c2:	dd19      	ble.n	80086f8 <sw_color_fill+0xc0>
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 80086c4:	1aad      	subs	r5, r5, r2
            lv_color_t * mem_first = &mem[fill_area->x1];
 80086c6:	0053      	lsls	r3, r2, #1
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 80086c8:	3501      	adds	r5, #1
            lv_color_t * mem_first = &mem[fill_area->x1];
 80086ca:	18fb      	adds	r3, r7, r3
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 80086cc:	006d      	lsls	r5, r5, #1
            lv_color_t * mem_first = &mem[fill_area->x1];
 80086ce:	9305      	str	r3, [sp, #20]
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 80086d0:	b22b      	sxth	r3, r5
 80086d2:	9307      	str	r3, [sp, #28]
            mem += mem_width;
 80086d4:	9b06      	ldr	r3, [sp, #24]
 80086d6:	005d      	lsls	r5, r3, #1
 80086d8:	3401      	adds	r4, #1
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 80086da:	2206      	movs	r2, #6
 80086dc:	5eb3      	ldrsh	r3, [r6, r2]
 80086de:	b224      	sxth	r4, r4
                mem += mem_width;
 80086e0:	197f      	adds	r7, r7, r5
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 80086e2:	42a3      	cmp	r3, r4
 80086e4:	dbc0      	blt.n	8008668 <sw_color_fill+0x30>
                memcpy(&mem[fill_area->x1], mem_first, copy_size);
 80086e6:	2300      	movs	r3, #0
 80086e8:	5ef0      	ldrsh	r0, [r6, r3]
 80086ea:	9a07      	ldr	r2, [sp, #28]
 80086ec:	0040      	lsls	r0, r0, #1
 80086ee:	1838      	adds	r0, r7, r0
 80086f0:	9905      	ldr	r1, [sp, #20]
 80086f2:	f005 fa37 	bl	800db64 <memcpy>
 80086f6:	e7ef      	b.n	80086d8 <sw_color_fill+0xa0>
                mem[col] = color;
 80086f8:	4668      	mov	r0, sp
 80086fa:	8b80      	ldrh	r0, [r0, #28]
 80086fc:	0059      	lsls	r1, r3, #1
 80086fe:	3301      	adds	r3, #1
 8008700:	53c8      	strh	r0, [r1, r7]
 8008702:	b21b      	sxth	r3, r3
 8008704:	e7da      	b.n	80086bc <sw_color_fill+0x84>
            lv_color_t bg_tmp  = LV_COLOR_BLACK;
 8008706:	466b      	mov	r3, sp
 8008708:	2100      	movs	r1, #0
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
 800870a:	9a08      	ldr	r2, [sp, #32]
 800870c:	8b98      	ldrh	r0, [r3, #28]
            lv_color_t bg_tmp  = LV_COLOR_BLACK;
 800870e:	8499      	strh	r1, [r3, #36]	; 0x24
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
 8008710:	f7ff ff6c 	bl	80085ec <lv_color_mix>
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 8008714:	2202      	movs	r2, #2
 8008716:	5eb3      	ldrsh	r3, [r6, r2]
 8008718:	9305      	str	r3, [sp, #20]
                mem += mem_width;
 800871a:	9b06      	ldr	r3, [sp, #24]
 800871c:	005b      	lsls	r3, r3, #1
 800871e:	9306      	str	r3, [sp, #24]
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 8008720:	2206      	movs	r2, #6
 8008722:	5eb3      	ldrsh	r3, [r6, r2]
 8008724:	9a05      	ldr	r2, [sp, #20]
 8008726:	4293      	cmp	r3, r2
 8008728:	db9e      	blt.n	8008668 <sw_color_fill+0x30>
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800872a:	2300      	movs	r3, #0
 800872c:	5ef4      	ldrsh	r4, [r6, r3]
 800872e:	2204      	movs	r2, #4
 8008730:	5eb3      	ldrsh	r3, [r6, r2]
 8008732:	42a3      	cmp	r3, r4
 8008734:	da06      	bge.n	8008744 <sw_color_fill+0x10c>
                mem += mem_width;
 8008736:	9b06      	ldr	r3, [sp, #24]
 8008738:	18ff      	adds	r7, r7, r3
 800873a:	9b05      	ldr	r3, [sp, #20]
 800873c:	3301      	adds	r3, #1
 800873e:	b21b      	sxth	r3, r3
 8008740:	9305      	str	r3, [sp, #20]
 8008742:	e7ed      	b.n	8008720 <sw_color_fill+0xe8>
                        if(mem[col].full != bg_tmp.full) {
 8008744:	466b      	mov	r3, sp
 8008746:	0065      	lsls	r5, r4, #1
 8008748:	197d      	adds	r5, r7, r5
 800874a:	8829      	ldrh	r1, [r5, #0]
 800874c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800874e:	4299      	cmp	r1, r3
 8008750:	d005      	beq.n	800875e <sw_color_fill+0x126>
                            bg_tmp  = mem[col];
 8008752:	466b      	mov	r3, sp
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
 8008754:	9a08      	ldr	r2, [sp, #32]
 8008756:	8b98      	ldrh	r0, [r3, #28]
                            bg_tmp  = mem[col];
 8008758:	8499      	strh	r1, [r3, #36]	; 0x24
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
 800875a:	f7ff ff47 	bl	80085ec <lv_color_mix>
 800875e:	3401      	adds	r4, #1
                        mem[col] = opa_tmp;
 8008760:	8028      	strh	r0, [r5, #0]
 8008762:	b224      	sxth	r4, r4
 8008764:	e7e3      	b.n	800872e <sw_color_fill+0xf6>

08008766 <lv_draw_px>:
{
 8008766:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008768:	b087      	sub	sp, #28
 800876a:	1c1e      	adds	r6, r3, #0
 800876c:	ab0c      	add	r3, sp, #48	; 0x30
 800876e:	781d      	ldrb	r5, [r3, #0]
 8008770:	0004      	movs	r4, r0
 8008772:	9105      	str	r1, [sp, #20]
    if(opa < LV_OPA_MIN) return;
 8008774:	2d0f      	cmp	r5, #15
 8008776:	d92d      	bls.n	80087d4 <lv_draw_px+0x6e>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8008778:	2dfb      	cmp	r5, #251	; 0xfb
 800877a:	d900      	bls.n	800877e <lv_draw_px+0x18>
 800877c:	25ff      	movs	r5, #255	; 0xff
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
 800877e:	2100      	movs	r1, #0
 8008780:	5e53      	ldrsh	r3, [r2, r1]
 8008782:	42a3      	cmp	r3, r4
 8008784:	dc26      	bgt.n	80087d4 <lv_draw_px+0x6e>
 8008786:	2104      	movs	r1, #4
 8008788:	5e53      	ldrsh	r3, [r2, r1]
 800878a:	42a3      	cmp	r3, r4
 800878c:	db22      	blt.n	80087d4 <lv_draw_px+0x6e>
 800878e:	2102      	movs	r1, #2
 8008790:	5e53      	ldrsh	r3, [r2, r1]
 8008792:	9905      	ldr	r1, [sp, #20]
 8008794:	428b      	cmp	r3, r1
 8008796:	dc1d      	bgt.n	80087d4 <lv_draw_px+0x6e>
 8008798:	2306      	movs	r3, #6
 800879a:	5ed3      	ldrsh	r3, [r2, r3]
 800879c:	428b      	cmp	r3, r1
 800879e:	db19      	blt.n	80087d4 <lv_draw_px+0x6e>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 80087a0:	f7ff f90c 	bl	80079bc <lv_refr_get_disp_refreshing>
 80087a4:	0007      	movs	r7, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80087a6:	f003 fd13 	bl	800c1d0 <lv_disp_get_buf>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 80087aa:	8a82      	ldrh	r2, [r0, #20]
 80087ac:	8a03      	ldrh	r3, [r0, #16]
 80087ae:	3201      	adds	r2, #1
 80087b0:	1ad2      	subs	r2, r2, r3
    y -= vdb->area.y1;
 80087b2:	8a41      	ldrh	r1, [r0, #18]
    x -= vdb->area.x1;
 80087b4:	1ae3      	subs	r3, r4, r3
    y -= vdb->area.y1;
 80087b6:	9c05      	ldr	r4, [sp, #20]
 80087b8:	b212      	sxth	r2, r2
 80087ba:	1a61      	subs	r1, r4, r1
    if(disp->driver.set_px_cb) {
 80087bc:	697c      	ldr	r4, [r7, #20]
    x -= vdb->area.x1;
 80087be:	b21b      	sxth	r3, r3
    y -= vdb->area.y1;
 80087c0:	b209      	sxth	r1, r1
    if(disp->driver.set_px_cb) {
 80087c2:	2c00      	cmp	r4, #0
 80087c4:	d008      	beq.n	80087d8 <lv_draw_px+0x72>
        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, x, y, color, opa);
 80087c6:	9502      	str	r5, [sp, #8]
 80087c8:	ad01      	add	r5, sp, #4
 80087ca:	802e      	strh	r6, [r5, #0]
 80087cc:	9100      	str	r1, [sp, #0]
 80087ce:	6881      	ldr	r1, [r0, #8]
 80087d0:	0038      	movs	r0, r7
 80087d2:	47a0      	blx	r4
}
 80087d4:	b007      	add	sp, #28
 80087d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vdb_px_p += y * vdb_width + x;
 80087d8:	4351      	muls	r1, r2
        lv_color_t * vdb_px_p = vdb->buf_act;
 80087da:	6884      	ldr	r4, [r0, #8]
        vdb_px_p += y * vdb_width + x;
 80087dc:	18c9      	adds	r1, r1, r3
 80087de:	0049      	lsls	r1, r1, #1
 80087e0:	1864      	adds	r4, r4, r1
            if(opa == LV_OPA_COVER) {
 80087e2:	2dff      	cmp	r5, #255	; 0xff
 80087e4:	d101      	bne.n	80087ea <lv_draw_px+0x84>
                *vdb_px_p = color;
 80087e6:	8026      	strh	r6, [r4, #0]
 80087e8:	e7f4      	b.n	80087d4 <lv_draw_px+0x6e>
                *vdb_px_p = lv_color_mix(color, *vdb_px_p, opa);
 80087ea:	002a      	movs	r2, r5
 80087ec:	8821      	ldrh	r1, [r4, #0]
 80087ee:	1c30      	adds	r0, r6, #0
 80087f0:	f7ff fefc 	bl	80085ec <lv_color_mix>
 80087f4:	8020      	strh	r0, [r4, #0]
 80087f6:	e7ed      	b.n	80087d4 <lv_draw_px+0x6e>

080087f8 <lv_draw_fill>:
{
 80087f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087fa:	b08d      	sub	sp, #52	; 0x34
 80087fc:	466c      	mov	r4, sp
 80087fe:	001f      	movs	r7, r3
 8008800:	8222      	strh	r2, [r4, #16]
    if(opa < LV_OPA_MIN) return;
 8008802:	2b0f      	cmp	r3, #15
 8008804:	d957      	bls.n	80088b6 <lv_draw_fill+0xbe>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8008806:	2bfb      	cmp	r3, #251	; 0xfb
 8008808:	d900      	bls.n	800880c <lv_draw_fill+0x14>
 800880a:	27ff      	movs	r7, #255	; 0xff
 800880c:	466b      	mov	r3, sp
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 800880e:	ad08      	add	r5, sp, #32
 8008810:	8a1b      	ldrh	r3, [r3, #16]
 8008812:	000a      	movs	r2, r1
 8008814:	0001      	movs	r1, r0
 8008816:	0028      	movs	r0, r5
 8008818:	9305      	str	r3, [sp, #20]
 800881a:	f003 fdd3 	bl	800c3c4 <lv_area_intersect>
    if(union_ok == false) {
 800881e:	2800      	cmp	r0, #0
 8008820:	d049      	beq.n	80088b6 <lv_draw_fill+0xbe>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 8008822:	f7ff f8cb 	bl	80079bc <lv_refr_get_disp_refreshing>
 8008826:	0006      	movs	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8008828:	f003 fcd2 	bl	800c1d0 <lv_disp_get_buf>
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 800882c:	4669      	mov	r1, sp
 800882e:	8a02      	ldrh	r2, [r0, #16]
 8008830:	882c      	ldrh	r4, [r5, #0]
 8008832:	4694      	mov	ip, r2
 8008834:	1aa4      	subs	r4, r4, r2
 8008836:	b2a2      	uxth	r2, r4
 8008838:	9203      	str	r2, [sp, #12]
 800883a:	8989      	ldrh	r1, [r1, #12]
 800883c:	aa0a      	add	r2, sp, #40	; 0x28
 800883e:	8011      	strh	r1, [r2, #0]
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 8008840:	8869      	ldrh	r1, [r5, #2]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8008842:	0003      	movs	r3, r0
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 8008844:	8a40      	ldrh	r0, [r0, #18]
 8008846:	1a09      	subs	r1, r1, r0
 8008848:	b289      	uxth	r1, r1
 800884a:	9106      	str	r1, [sp, #24]
 800884c:	4669      	mov	r1, sp
 800884e:	2418      	movs	r4, #24
 8008850:	5f09      	ldrsh	r1, [r1, r4]
 8008852:	9102      	str	r1, [sp, #8]
 8008854:	4669      	mov	r1, sp
 8008856:	8909      	ldrh	r1, [r1, #8]
 8008858:	8051      	strh	r1, [r2, #2]
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 800885a:	4661      	mov	r1, ip
 800885c:	88ac      	ldrh	r4, [r5, #4]
 800885e:	1a64      	subs	r4, r4, r1
 8008860:	b2a4      	uxth	r4, r4
 8008862:	8094      	strh	r4, [r2, #4]
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 8008864:	88e9      	ldrh	r1, [r5, #6]
 8008866:	8a9d      	ldrh	r5, [r3, #20]
 8008868:	1a09      	subs	r1, r1, r0
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 800886a:	6898      	ldr	r0, [r3, #8]
 800886c:	4663      	mov	r3, ip
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 800886e:	b289      	uxth	r1, r1
 8008870:	9107      	str	r1, [sp, #28]
 8008872:	4669      	mov	r1, sp
 8008874:	3501      	adds	r5, #1
 8008876:	1aed      	subs	r5, r5, r3
 8008878:	9b03      	ldr	r3, [sp, #12]
 800887a:	3401      	adds	r4, #1
 800887c:	8b89      	ldrh	r1, [r1, #28]
 800887e:	1ae4      	subs	r4, r4, r3
 8008880:	b224      	sxth	r4, r4
 8008882:	80d1      	strh	r1, [r2, #6]
 8008884:	b229      	sxth	r1, r5
    if(w < VFILL_HW_ACC_SIZE_LIMIT) {
 8008886:	2c31      	cmp	r4, #49	; 0x31
 8008888:	dc03      	bgt.n	8008892 <lv_draw_fill+0x9a>
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 800888a:	466b      	mov	r3, sp
 800888c:	9700      	str	r7, [sp, #0]
 800888e:	8a1b      	ldrh	r3, [r3, #16]
 8008890:	e055      	b.n	800893e <lv_draw_fill+0x146>
    vdb_buf_tmp += vdb_width * vdb_rel_a.y1;
 8008892:	9b02      	ldr	r3, [sp, #8]
 8008894:	005b      	lsls	r3, r3, #1
 8008896:	434b      	muls	r3, r1
 8008898:	18c3      	adds	r3, r0, r3
 800889a:	9303      	str	r3, [sp, #12]
    else if(opa == LV_OPA_COVER) {
 800889c:	2fff      	cmp	r7, #255	; 0xff
 800889e:	d151      	bne.n	8008944 <lv_draw_fill+0x14c>
        if(disp->driver.gpu_fill_cb) {
 80088a0:	6a37      	ldr	r7, [r6, #32]
 80088a2:	2f00      	cmp	r7, #0
 80088a4:	d009      	beq.n	80088ba <lv_draw_fill+0xc2>
            disp->driver.gpu_fill_cb(&disp->driver, vdb->buf_act, vdb_width, &vdb_rel_a, color);
 80088a6:	466b      	mov	r3, sp
 80088a8:	8a1c      	ldrh	r4, [r3, #16]
 80088aa:	801c      	strh	r4, [r3, #0]
 80088ac:	0013      	movs	r3, r2
 80088ae:	000a      	movs	r2, r1
 80088b0:	0001      	movs	r1, r0
 80088b2:	0030      	movs	r0, r6
 80088b4:	47b8      	blx	r7
}
 80088b6:	b00d      	add	sp, #52	; 0x34
 80088b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 80088ba:	9b07      	ldr	r3, [sp, #28]
 80088bc:	9a06      	ldr	r2, [sp, #24]
 80088be:	3301      	adds	r3, #1
 80088c0:	1a9b      	subs	r3, r3, r2
        else if(lv_area_get_height(&vdb_rel_a) > VFILL_HW_ACC_SIZE_LIMIT && disp->driver.gpu_blend_cb) {
 80088c2:	b21b      	sxth	r3, r3
 80088c4:	2b32      	cmp	r3, #50	; 0x32
 80088c6:	dd35      	ble.n	8008934 <lv_draw_fill+0x13c>
 80088c8:	69f3      	ldr	r3, [r6, #28]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d032      	beq.n	8008934 <lv_draw_fill+0x13c>
            if(color_array_tmp[0].full != color.full || last_width != w) {
 80088ce:	4b38      	ldr	r3, [pc, #224]	; (80089b0 <lv_draw_fill+0x1b8>)
 80088d0:	9a05      	ldr	r2, [sp, #20]
 80088d2:	881b      	ldrh	r3, [r3, #0]
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d104      	bne.n	80088e2 <lv_draw_fill+0xea>
 80088d8:	4b36      	ldr	r3, [pc, #216]	; (80089b4 <lv_draw_fill+0x1bc>)
 80088da:	2200      	movs	r2, #0
 80088dc:	5e9b      	ldrsh	r3, [r3, r2]
 80088de:	42a3      	cmp	r3, r4
 80088e0:	d004      	beq.n	80088ec <lv_draw_fill+0xf4>
                    color_array_tmp[i].full = color.full;
 80088e2:	4b33      	ldr	r3, [pc, #204]	; (80089b0 <lv_draw_fill+0x1b8>)
                for(i = 0; i < w; i++) {
 80088e4:	42a7      	cmp	r7, r4
 80088e6:	db1e      	blt.n	8008926 <lv_draw_fill+0x12e>
                last_width = w;
 80088e8:	4b32      	ldr	r3, [pc, #200]	; (80089b4 <lv_draw_fill+0x1bc>)
 80088ea:	801c      	strh	r4, [r3, #0]
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 80088ec:	27ff      	movs	r7, #255	; 0xff
                vdb_buf_tmp += vdb_width;
 80088ee:	004b      	lsls	r3, r1, #1
 80088f0:	9304      	str	r3, [sp, #16]
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 80088f2:	ab0a      	add	r3, sp, #40	; 0x28
 80088f4:	2106      	movs	r1, #6
 80088f6:	5e5a      	ldrsh	r2, [r3, r1]
 80088f8:	9902      	ldr	r1, [sp, #8]
 80088fa:	428a      	cmp	r2, r1
 80088fc:	dbdb      	blt.n	80088b6 <lv_draw_fill+0xbe>
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 80088fe:	2100      	movs	r1, #0
 8008900:	5e59      	ldrsh	r1, [r3, r1]
 8008902:	9b03      	ldr	r3, [sp, #12]
 8008904:	9700      	str	r7, [sp, #0]
 8008906:	0049      	lsls	r1, r1, #1
 8008908:	1859      	adds	r1, r3, r1
 800890a:	4a29      	ldr	r2, [pc, #164]	; (80089b0 <lv_draw_fill+0x1b8>)
 800890c:	0023      	movs	r3, r4
 800890e:	0030      	movs	r0, r6
 8008910:	69f5      	ldr	r5, [r6, #28]
 8008912:	47a8      	blx	r5
                vdb_buf_tmp += vdb_width;
 8008914:	9a03      	ldr	r2, [sp, #12]
 8008916:	9b04      	ldr	r3, [sp, #16]
 8008918:	18d3      	adds	r3, r2, r3
 800891a:	9303      	str	r3, [sp, #12]
 800891c:	9b02      	ldr	r3, [sp, #8]
 800891e:	3301      	adds	r3, #1
 8008920:	b21b      	sxth	r3, r3
 8008922:	9302      	str	r3, [sp, #8]
 8008924:	e7e5      	b.n	80088f2 <lv_draw_fill+0xfa>
                    color_array_tmp[i].full = color.full;
 8008926:	4668      	mov	r0, sp
 8008928:	8a80      	ldrh	r0, [r0, #20]
 800892a:	007a      	lsls	r2, r7, #1
                for(i = 0; i < w; i++) {
 800892c:	3701      	adds	r7, #1
                    color_array_tmp[i].full = color.full;
 800892e:	52d0      	strh	r0, [r2, r3]
                for(i = 0; i < w; i++) {
 8008930:	b2bf      	uxth	r7, r7
 8008932:	e7d7      	b.n	80088e4 <lv_draw_fill+0xec>
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 8008934:	23ff      	movs	r3, #255	; 0xff
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	466b      	mov	r3, sp
 800893a:	8a1b      	ldrh	r3, [r3, #16]
 800893c:	aa0a      	add	r2, sp, #40	; 0x28
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 800893e:	f7ff fe7b 	bl	8008638 <sw_color_fill>
 8008942:	e7b8      	b.n	80088b6 <lv_draw_fill+0xbe>
        if(disp->driver.gpu_blend_cb) {
 8008944:	69f3      	ldr	r3, [r6, #28]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d09f      	beq.n	800888a <lv_draw_fill+0x92>
            if(color_array_tmp[0].full != color.full || last_width != w) {
 800894a:	4b19      	ldr	r3, [pc, #100]	; (80089b0 <lv_draw_fill+0x1b8>)
 800894c:	9805      	ldr	r0, [sp, #20]
 800894e:	881a      	ldrh	r2, [r3, #0]
 8008950:	2300      	movs	r3, #0
 8008952:	4282      	cmp	r2, r0
 8008954:	d104      	bne.n	8008960 <lv_draw_fill+0x168>
 8008956:	4a17      	ldr	r2, [pc, #92]	; (80089b4 <lv_draw_fill+0x1bc>)
 8008958:	2000      	movs	r0, #0
 800895a:	5e12      	ldrsh	r2, [r2, r0]
 800895c:	42a2      	cmp	r2, r4
 800895e:	d004      	beq.n	800896a <lv_draw_fill+0x172>
                    color_array_tmp[i].full = color.full;
 8008960:	4a13      	ldr	r2, [pc, #76]	; (80089b0 <lv_draw_fill+0x1b8>)
                for(i = 0; i < w; i++) {
 8008962:	42a3      	cmp	r3, r4
 8008964:	db1d      	blt.n	80089a2 <lv_draw_fill+0x1aa>
                last_width = w;
 8008966:	4b13      	ldr	r3, [pc, #76]	; (80089b4 <lv_draw_fill+0x1bc>)
 8008968:	801c      	strh	r4, [r3, #0]
                vdb_buf_tmp += vdb_width;
 800896a:	004b      	lsls	r3, r1, #1
 800896c:	9304      	str	r3, [sp, #16]
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 800896e:	ab0a      	add	r3, sp, #40	; 0x28
 8008970:	2106      	movs	r1, #6
 8008972:	5e5a      	ldrsh	r2, [r3, r1]
 8008974:	9902      	ldr	r1, [sp, #8]
 8008976:	428a      	cmp	r2, r1
 8008978:	db9d      	blt.n	80088b6 <lv_draw_fill+0xbe>
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 800897a:	2100      	movs	r1, #0
 800897c:	5e59      	ldrsh	r1, [r3, r1]
 800897e:	9b03      	ldr	r3, [sp, #12]
 8008980:	9700      	str	r7, [sp, #0]
 8008982:	0049      	lsls	r1, r1, #1
 8008984:	1859      	adds	r1, r3, r1
 8008986:	4a0a      	ldr	r2, [pc, #40]	; (80089b0 <lv_draw_fill+0x1b8>)
 8008988:	0023      	movs	r3, r4
 800898a:	0030      	movs	r0, r6
 800898c:	69f5      	ldr	r5, [r6, #28]
 800898e:	47a8      	blx	r5
                vdb_buf_tmp += vdb_width;
 8008990:	9a03      	ldr	r2, [sp, #12]
 8008992:	9b04      	ldr	r3, [sp, #16]
 8008994:	18d3      	adds	r3, r2, r3
 8008996:	9303      	str	r3, [sp, #12]
 8008998:	9b02      	ldr	r3, [sp, #8]
 800899a:	3301      	adds	r3, #1
 800899c:	b21b      	sxth	r3, r3
 800899e:	9302      	str	r3, [sp, #8]
 80089a0:	e7e5      	b.n	800896e <lv_draw_fill+0x176>
                    color_array_tmp[i].full = color.full;
 80089a2:	466d      	mov	r5, sp
 80089a4:	8aad      	ldrh	r5, [r5, #20]
 80089a6:	0058      	lsls	r0, r3, #1
                for(i = 0; i < w; i++) {
 80089a8:	3301      	adds	r3, #1
                    color_array_tmp[i].full = color.full;
 80089aa:	5285      	strh	r5, [r0, r2]
                for(i = 0; i < w; i++) {
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	e7d8      	b.n	8008962 <lv_draw_fill+0x16a>
 80089b0:	20001400 	.word	0x20001400
 80089b4:	20000012 	.word	0x20000012

080089b8 <lv_draw_letter>:
{
 80089b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ba:	b09f      	sub	sp, #124	; 0x7c
 80089bc:	9105      	str	r1, [sp, #20]
 80089be:	0015      	movs	r5, r2
 80089c0:	2146      	movs	r1, #70	; 0x46
 80089c2:	466a      	mov	r2, sp
 80089c4:	001e      	movs	r6, r3
 80089c6:	ab24      	add	r3, sp, #144	; 0x90
 80089c8:	881b      	ldrh	r3, [r3, #0]
 80089ca:	1852      	adds	r2, r2, r1
 80089cc:	8013      	strh	r3, [r2, #0]
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 80089ce:	24ff      	movs	r4, #255	; 0xff
 80089d0:	2200      	movs	r2, #0
{
 80089d2:	ab25      	add	r3, sp, #148	; 0x94
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	0007      	movs	r7, r0
 80089d8:	9306      	str	r3, [sp, #24]
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 80089da:	ab16      	add	r3, sp, #88	; 0x58
 80089dc:	701a      	strb	r2, [r3, #0]
 80089de:	705c      	strb	r4, [r3, #1]
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 80089e0:	ab17      	add	r3, sp, #92	; 0x5c
 80089e2:	701a      	strb	r2, [r3, #0]
 80089e4:	3255      	adds	r2, #85	; 0x55
 80089e6:	705a      	strb	r2, [r3, #1]
 80089e8:	3255      	adds	r2, #85	; 0x55
 80089ea:	709a      	strb	r2, [r3, #2]
 80089ec:	70dc      	strb	r4, [r3, #3]
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 80089ee:	3a9a      	subs	r2, #154	; 0x9a
 80089f0:	49c5      	ldr	r1, [pc, #788]	; (8008d08 <lv_draw_letter+0x350>)
 80089f2:	a81a      	add	r0, sp, #104	; 0x68
 80089f4:	f005 f8b6 	bl	800db64 <memcpy>
    if(opa < LV_OPA_MIN) return;
 80089f8:	9b06      	ldr	r3, [sp, #24]
 80089fa:	2b0f      	cmp	r3, #15
 80089fc:	d800      	bhi.n	8008a00 <lv_draw_letter+0x48>
 80089fe:	e0dc      	b.n	8008bba <lv_draw_letter+0x202>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8008a00:	2bfb      	cmp	r3, #251	; 0xfb
 8008a02:	d900      	bls.n	8008a06 <lv_draw_letter+0x4e>
 8008a04:	9406      	str	r4, [sp, #24]
    if(font_p == NULL) {
 8008a06:	2d00      	cmp	r5, #0
 8008a08:	d100      	bne.n	8008a0c <lv_draw_letter+0x54>
 8008a0a:	e0d6      	b.n	8008bba <lv_draw_letter+0x202>
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 8008a0c:	ac18      	add	r4, sp, #96	; 0x60
 8008a0e:	2300      	movs	r3, #0
 8008a10:	0032      	movs	r2, r6
 8008a12:	0021      	movs	r1, r4
 8008a14:	0028      	movs	r0, r5
 8008a16:	f003 f9f5 	bl	800be04 <lv_font_get_glyph_dsc>
    if(g_ret == false) return;
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	d100      	bne.n	8008a20 <lv_draw_letter+0x68>
 8008a1e:	e0cc      	b.n	8008bba <lv_draw_letter+0x202>
    switch(g.bpp) {
 8008a20:	79a0      	ldrb	r0, [r4, #6]
 8008a22:	3801      	subs	r0, #1
 8008a24:	2807      	cmp	r0, #7
 8008a26:	d900      	bls.n	8008a2a <lv_draw_letter+0x72>
 8008a28:	e0c7      	b.n	8008bba <lv_draw_letter+0x202>
 8008a2a:	f7f7 fb7b 	bl	8000124 <__gnu_thumb1_case_uqi>
 8008a2e:	d004      	.short	0xd004
 8008a30:	c6c6c8c6 	.word	0xc6c6c8c6
 8008a34:	ccc6      	.short	0xccc6
            bitmask_init  = 0x80;
 8008a36:	2380      	movs	r3, #128	; 0x80
 8008a38:	930b      	str	r3, [sp, #44]	; 0x2c
            bpp_opa_table = bpp1_opa_table;
 8008a3a:	ab16      	add	r3, sp, #88	; 0x58
            bpp_opa_table = bpp2_opa_table;
 8008a3c:	930a      	str	r3, [sp, #40]	; 0x28
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8008a3e:	2200      	movs	r2, #0
 8008a40:	5ebb      	ldrsh	r3, [r7, r2]
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 8008a42:	0031      	movs	r1, r6
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8008a44:	9307      	str	r3, [sp, #28]
 8008a46:	2304      	movs	r3, #4
 8008a48:	56e3      	ldrsb	r3, [r4, r3]
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 8008a4a:	0028      	movs	r0, r5
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8008a4c:	9308      	str	r3, [sp, #32]
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 8008a4e:	2202      	movs	r2, #2
 8008a50:	5ebb      	ldrsh	r3, [r7, r2]
 8008a52:	2705      	movs	r7, #5
 8008a54:	9309      	str	r3, [sp, #36]	; 0x24
 8008a56:	7a2b      	ldrb	r3, [r5, #8]
 8008a58:	930d      	str	r3, [sp, #52]	; 0x34
 8008a5a:	7a6b      	ldrb	r3, [r5, #9]
 8008a5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a5e:	78e3      	ldrb	r3, [r4, #3]
 8008a60:	9310      	str	r3, [sp, #64]	; 0x40
 8008a62:	57e7      	ldrsb	r7, [r4, r7]
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 8008a64:	f003 f9ca 	bl	800bdfc <lv_font_get_glyph_bitmap>
 8008a68:	900c      	str	r0, [sp, #48]	; 0x30
    if(map_p == NULL) return;
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	d100      	bne.n	8008a70 <lv_draw_letter+0xb8>
 8008a6e:	e0a4      	b.n	8008bba <lv_draw_letter+0x202>
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8008a70:	9a08      	ldr	r2, [sp, #32]
 8008a72:	9b07      	ldr	r3, [sp, #28]
 8008a74:	4694      	mov	ip, r2
 8008a76:	4463      	add	r3, ip
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	930e      	str	r3, [sp, #56]	; 0x38
 8008a7c:	466b      	mov	r3, sp
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 8008a7e:	9a05      	ldr	r2, [sp, #20]
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8008a80:	2538      	movs	r5, #56	; 0x38
 8008a82:	5f5d      	ldrsh	r5, [r3, r5]
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 8008a84:	78a3      	ldrb	r3, [r4, #2]
 8008a86:	2100      	movs	r1, #0
 8008a88:	5e52      	ldrsh	r2, [r2, r1]
 8008a8a:	195b      	adds	r3, r3, r5
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	da00      	bge.n	8008a92 <lv_draw_letter+0xda>
 8008a90:	e093      	b.n	8008bba <lv_draw_letter+0x202>
 8008a92:	9b05      	ldr	r3, [sp, #20]
 8008a94:	2204      	movs	r2, #4
 8008a96:	5e9b      	ldrsh	r3, [r3, r2]
 8008a98:	42ab      	cmp	r3, r5
 8008a9a:	da00      	bge.n	8008a9e <lv_draw_letter+0xe6>
 8008a9c:	e08d      	b.n	8008bba <lv_draw_letter+0x202>
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 8008a9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 8008aa0:	9a05      	ldr	r2, [sp, #20]
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 8008aa2:	19df      	adds	r7, r3, r7
 8008aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aa6:	1bdf      	subs	r7, r3, r7
 8008aa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aaa:	18ff      	adds	r7, r7, r3
 8008aac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008aae:	1aff      	subs	r7, r7, r3
 8008ab0:	b2bb      	uxth	r3, r7
 8008ab2:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ab4:	466b      	mov	r3, sp
 8008ab6:	263c      	movs	r6, #60	; 0x3c
 8008ab8:	5f9e      	ldrsh	r6, [r3, r6]
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 8008aba:	78e3      	ldrb	r3, [r4, #3]
 8008abc:	2102      	movs	r1, #2
 8008abe:	5e52      	ldrsh	r2, [r2, r1]
 8008ac0:	199b      	adds	r3, r3, r6
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	db79      	blt.n	8008bba <lv_draw_letter+0x202>
 8008ac6:	9b05      	ldr	r3, [sp, #20]
 8008ac8:	2206      	movs	r2, #6
 8008aca:	5e9b      	ldrsh	r3, [r3, r2]
 8008acc:	42b3      	cmp	r3, r6
 8008ace:	db74      	blt.n	8008bba <lv_draw_letter+0x202>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 8008ad0:	f7fe ff74 	bl	80079bc <lv_refr_get_disp_refreshing>
 8008ad4:	9012      	str	r0, [sp, #72]	; 0x48
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8008ad6:	f003 fb7b 	bl	800c1d0 <lv_disp_get_buf>
 8008ada:	2210      	movs	r2, #16
 8008adc:	5e83      	ldrsh	r3, [r0, r2]
 8008ade:	0007      	movs	r7, r0
 8008ae0:	469c      	mov	ip, r3
    return area_p->x2 - area_p->x1 + 1;
 8008ae2:	4662      	mov	r2, ip
 8008ae4:	8a83      	ldrh	r3, [r0, #20]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	1a9b      	subs	r3, r3, r2
 8008aea:	b21b      	sxth	r3, r3
 8008aec:	9310      	str	r3, [sp, #64]	; 0x40
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8008aee:	6883      	ldr	r3, [r0, #8]
 8008af0:	930d      	str	r3, [sp, #52]	; 0x34
    uint8_t width_byte_scr = g.box_w >> 3; /*Width in bytes (on the screen finally) (e.g. w = 11 -> 2 bytes wide)*/
 8008af2:	78a0      	ldrb	r0, [r4, #2]
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
 8008af4:	79a3      	ldrb	r3, [r4, #6]
 8008af6:	0002      	movs	r2, r0
 8008af8:	435a      	muls	r2, r3
 8008afa:	9213      	str	r2, [sp, #76]	; 0x4c
    lv_coord_t col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
 8008afc:	9a05      	ldr	r2, [sp, #20]
 8008afe:	2100      	movs	r1, #0
 8008b00:	5e52      	ldrsh	r2, [r2, r1]
 8008b02:	2100      	movs	r1, #0
 8008b04:	4295      	cmp	r5, r2
 8008b06:	da02      	bge.n	8008b0e <lv_draw_letter+0x156>
 8008b08:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008b0a:	1a51      	subs	r1, r2, r1
 8008b0c:	b289      	uxth	r1, r1
 8008b0e:	b20a      	sxth	r2, r1
 8008b10:	9208      	str	r2, [sp, #32]
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 8008b12:	9a05      	ldr	r2, [sp, #20]
 8008b14:	2404      	movs	r4, #4
 8008b16:	5f12      	ldrsh	r2, [r2, r4]
 8008b18:	182c      	adds	r4, r5, r0
 8008b1a:	4294      	cmp	r4, r2
 8008b1c:	dc5b      	bgt.n	8008bd6 <lv_draw_letter+0x21e>
 8008b1e:	b202      	sxth	r2, r0
 8008b20:	9209      	str	r2, [sp, #36]	; 0x24
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 8008b22:	9a05      	ldr	r2, [sp, #20]
 8008b24:	2002      	movs	r0, #2
 8008b26:	5e12      	ldrsh	r2, [r2, r0]
 8008b28:	2000      	movs	r0, #0
 8008b2a:	4296      	cmp	r6, r2
 8008b2c:	da02      	bge.n	8008b34 <lv_draw_letter+0x17c>
 8008b2e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008b30:	1a12      	subs	r2, r2, r0
 8008b32:	b290      	uxth	r0, r2
 8008b34:	b202      	sxth	r2, r0
 8008b36:	9207      	str	r2, [sp, #28]
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 8008b38:	aa18      	add	r2, sp, #96	; 0x60
 8008b3a:	78d0      	ldrb	r0, [r2, #3]
 8008b3c:	9a05      	ldr	r2, [sp, #20]
 8008b3e:	2406      	movs	r4, #6
 8008b40:	5f12      	ldrsh	r2, [r2, r4]
 8008b42:	1984      	adds	r4, r0, r6
 8008b44:	4294      	cmp	r4, r2
 8008b46:	dc4b      	bgt.n	8008be0 <lv_draw_letter+0x228>
 8008b48:	b202      	sxth	r2, r0
 8008b4a:	9214      	str	r2, [sp, #80]	; 0x50
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 8008b4c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008b4e:	9a07      	ldr	r2, [sp, #28]
 8008b50:	9808      	ldr	r0, [sp, #32]
 8008b52:	4354      	muls	r4, r2
 8008b54:	9a08      	ldr	r2, [sp, #32]
 8008b56:	4353      	muls	r3, r2
    map_p += bit_ofs >> 3;
 8008b58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 8008b5a:	18e4      	adds	r4, r4, r3
    map_p += bit_ofs >> 3;
 8008b5c:	08e3      	lsrs	r3, r4, #3
 8008b5e:	18d3      	adds	r3, r2, r3
 8008b60:	9305      	str	r3, [sp, #20]
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 8008b62:	2307      	movs	r3, #7
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 8008b64:	9a08      	ldr	r2, [sp, #32]
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 8008b66:	401c      	ands	r4, r3
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 8008b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b6a:	1a9b      	subs	r3, r3, r2
 8008b6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	005b      	lsls	r3, r3, #1
 8008b72:	930c      	str	r3, [sp, #48]	; 0x30
 8008b74:	0003      	movs	r3, r0
 8008b76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b78:	2200      	movs	r2, #0
 8008b7a:	4283      	cmp	r3, r0
 8008b7c:	dc02      	bgt.n	8008b84 <lv_draw_letter+0x1cc>
 8008b7e:	1a41      	subs	r1, r0, r1
 8008b80:	b28a      	uxth	r2, r1
 8008b82:	0052      	lsls	r2, r2, #1
 8008b84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b86:	189b      	adds	r3, r3, r2
 8008b88:	9315      	str	r3, [sp, #84]	; 0x54
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 8008b8a:	2212      	movs	r2, #18
 8008b8c:	5ebb      	ldrsh	r3, [r7, r2]
 8008b8e:	1af6      	subs	r6, r6, r3
 8008b90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b92:	435e      	muls	r6, r3
 8008b94:	4663      	mov	r3, ip
 8008b96:	1975      	adds	r5, r6, r5
 8008b98:	1aed      	subs	r5, r5, r3
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 8008b9a:	9e07      	ldr	r6, [sp, #28]
 8008b9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b9e:	435e      	muls	r6, r3
 8008ba0:	9b08      	ldr	r3, [sp, #32]
 8008ba2:	18f6      	adds	r6, r6, r3
 8008ba4:	19ad      	adds	r5, r5, r6
 8008ba6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ba8:	006d      	lsls	r5, r5, #1
 8008baa:	195b      	adds	r3, r3, r5
 8008bac:	9313      	str	r3, [sp, #76]	; 0x4c
 8008bae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    for(row = row_start; row < row_end; row++) {
 8008bb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008bb2:	930c      	str	r3, [sp, #48]	; 0x30
 8008bb4:	9b07      	ldr	r3, [sp, #28]
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	db17      	blt.n	8008bea <lv_draw_letter+0x232>
}
 8008bba:	b01f      	add	sp, #124	; 0x7c
 8008bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            bitmask_init  = 0xF0;
 8008bbe:	23f0      	movs	r3, #240	; 0xf0
 8008bc0:	930b      	str	r3, [sp, #44]	; 0x2c
            bpp_opa_table = bpp4_opa_table;
 8008bc2:	ab1a      	add	r3, sp, #104	; 0x68
 8008bc4:	e73a      	b.n	8008a3c <lv_draw_letter+0x84>
            bitmask_init  = 0xFF;
 8008bc6:	23ff      	movs	r3, #255	; 0xff
 8008bc8:	930b      	str	r3, [sp, #44]	; 0x2c
            bpp_opa_table = NULL;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	e736      	b.n	8008a3c <lv_draw_letter+0x84>
            bitmask_init  = 0xC0;
 8008bce:	23c0      	movs	r3, #192	; 0xc0
 8008bd0:	930b      	str	r3, [sp, #44]	; 0x2c
            bpp_opa_table = bpp2_opa_table;
 8008bd2:	ab17      	add	r3, sp, #92	; 0x5c
 8008bd4:	e732      	b.n	8008a3c <lv_draw_letter+0x84>
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 8008bd6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008bd8:	3201      	adds	r2, #1
 8008bda:	1a12      	subs	r2, r2, r0
 8008bdc:	b212      	sxth	r2, r2
 8008bde:	e79f      	b.n	8008b20 <lv_draw_letter+0x168>
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 8008be0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008be2:	3201      	adds	r2, #1
 8008be4:	1a12      	subs	r2, r2, r0
 8008be6:	b212      	sxth	r2, r2
 8008be8:	e7af      	b.n	8008b4a <lv_draw_letter+0x192>
        bitmask = bitmask_init >> col_bit;
 8008bea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        for(col = col_start; col < col_end; col++) {
 8008bec:	9e08      	ldr	r6, [sp, #32]
        bitmask = bitmask_init >> col_bit;
 8008bee:	4123      	asrs	r3, r4
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	930d      	str	r3, [sp, #52]	; 0x34
        for(col = col_start; col < col_end; col++) {
 8008bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf6:	a918      	add	r1, sp, #96	; 0x60
 8008bf8:	429e      	cmp	r6, r3
 8008bfa:	db16      	blt.n	8008c2a <lv_draw_letter+0x272>
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
 8008bfc:	788a      	ldrb	r2, [r1, #2]
 8008bfe:	1ad2      	subs	r2, r2, r3
 8008c00:	9b08      	ldr	r3, [sp, #32]
 8008c02:	18d2      	adds	r2, r2, r3
 8008c04:	798b      	ldrb	r3, [r1, #6]
 8008c06:	4353      	muls	r3, r2
 8008c08:	18e4      	adds	r4, r4, r3
        map_p += (col_bit >> 3);
 8008c0a:	9a05      	ldr	r2, [sp, #20]
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
 8008c0c:	b2a4      	uxth	r4, r4
        map_p += (col_bit >> 3);
 8008c0e:	08e3      	lsrs	r3, r4, #3
 8008c10:	18d3      	adds	r3, r2, r3
 8008c12:	9305      	str	r3, [sp, #20]
        col_bit = col_bit & 0x7;
 8008c14:	2307      	movs	r3, #7
 8008c16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008c18:	401c      	ands	r4, r3
 8008c1a:	4694      	mov	ip, r2
 8008c1c:	9b07      	ldr	r3, [sp, #28]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	b21b      	sxth	r3, r3
 8008c22:	9307      	str	r3, [sp, #28]
 8008c24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c26:	4463      	add	r3, ip
 8008c28:	e7c0      	b.n	8008bac <lv_draw_letter+0x1f4>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - g.bpp);
 8008c2a:	9b05      	ldr	r3, [sp, #20]
 8008c2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	7989      	ldrb	r1, [r1, #6]
 8008c32:	4013      	ands	r3, r2
 8008c34:	2208      	movs	r2, #8
 8008c36:	1b12      	subs	r2, r2, r4
 8008c38:	1a52      	subs	r2, r2, r1
 8008c3a:	4113      	asrs	r3, r2
 8008c3c:	b2da      	uxtb	r2, r3
            if(letter_px != 0) {
 8008c3e:	2a00      	cmp	r2, #0
 8008c40:	d022      	beq.n	8008c88 <lv_draw_letter+0x2d0>
                if(opa == LV_OPA_COVER) {
 8008c42:	9806      	ldr	r0, [sp, #24]
 8008c44:	28ff      	cmp	r0, #255	; 0xff
 8008c46:	d131      	bne.n	8008cac <lv_draw_letter+0x2f4>
                    px_opa = g.bpp == 8 ? letter_px : bpp_opa_table[letter_px];
 8008c48:	2908      	cmp	r1, #8
 8008c4a:	d002      	beq.n	8008c52 <lv_draw_letter+0x29a>
 8008c4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c4e:	4003      	ands	r3, r0
 8008c50:	5cd2      	ldrb	r2, [r2, r3]
                if(disp->driver.set_px_cb) {
 8008c52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	1e1d      	subs	r5, r3, #0
 8008c58:	d033      	beq.n	8008cc2 <lv_draw_letter+0x30a>
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 8008c5a:	8a3b      	ldrh	r3, [r7, #16]
 8008c5c:	990e      	ldr	r1, [sp, #56]	; 0x38
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8008c5e:	2046      	movs	r0, #70	; 0x46
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 8008c60:	1acb      	subs	r3, r1, r3
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8008c62:	4669      	mov	r1, sp
 8008c64:	9202      	str	r2, [sp, #8]
 8008c66:	1809      	adds	r1, r1, r0
 8008c68:	8809      	ldrh	r1, [r1, #0]
 8008c6a:	aa01      	add	r2, sp, #4
 8008c6c:	8011      	strh	r1, [r2, #0]
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 8008c6e:	8a7a      	ldrh	r2, [r7, #18]
 8008c70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008c72:	199b      	adds	r3, r3, r6
 8008c74:	1a8a      	subs	r2, r1, r2
 8008c76:	9907      	ldr	r1, [sp, #28]
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8008c78:	b21b      	sxth	r3, r3
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 8008c7a:	1852      	adds	r2, r2, r1
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8008c7c:	b212      	sxth	r2, r2
 8008c7e:	9200      	str	r2, [sp, #0]
 8008c80:	68b9      	ldr	r1, [r7, #8]
 8008c82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c84:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008c86:	47a8      	blx	r5
            if(col_bit < 8 - g.bpp) {
 8008c88:	2208      	movs	r2, #8
            vdb_buf_tmp++;
 8008c8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c8c:	3302      	adds	r3, #2
 8008c8e:	930c      	str	r3, [sp, #48]	; 0x30
            if(col_bit < 8 - g.bpp) {
 8008c90:	ab18      	add	r3, sp, #96	; 0x60
 8008c92:	799b      	ldrb	r3, [r3, #6]
 8008c94:	1ad2      	subs	r2, r2, r3
 8008c96:	4294      	cmp	r4, r2
 8008c98:	da2e      	bge.n	8008cf8 <lv_draw_letter+0x340>
                bitmask = bitmask >> g.bpp;
 8008c9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
                col_bit += g.bpp;
 8008c9c:	18e4      	adds	r4, r4, r3
                bitmask = bitmask >> g.bpp;
 8008c9e:	411a      	asrs	r2, r3
 8008ca0:	b2d3      	uxtb	r3, r2
                col_bit += g.bpp;
 8008ca2:	b2a4      	uxth	r4, r4
                bitmask = bitmask >> g.bpp;
 8008ca4:	930d      	str	r3, [sp, #52]	; 0x34
 8008ca6:	3601      	adds	r6, #1
 8008ca8:	b236      	sxth	r6, r6
 8008caa:	e7a3      	b.n	8008bf4 <lv_draw_letter+0x23c>
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 8008cac:	2908      	cmp	r1, #8
 8008cae:	d103      	bne.n	8008cb8 <lv_draw_letter+0x300>
 8008cb0:	9b06      	ldr	r3, [sp, #24]
 8008cb2:	435a      	muls	r2, r3
 8008cb4:	0a12      	lsrs	r2, r2, #8
 8008cb6:	e7cc      	b.n	8008c52 <lv_draw_letter+0x29a>
                                        : (uint16_t)((uint16_t)bpp_opa_table[letter_px] * opa) >> 8;
 8008cb8:	22ff      	movs	r2, #255	; 0xff
 8008cba:	4013      	ands	r3, r2
 8008cbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cbe:	5cd2      	ldrb	r2, [r2, r3]
 8008cc0:	e7f6      	b.n	8008cb0 <lv_draw_letter+0x2f8>
                } else if(vdb_buf_tmp->full != color.full) {
 8008cc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cc4:	2046      	movs	r0, #70	; 0x46
 8008cc6:	8819      	ldrh	r1, [r3, #0]
 8008cc8:	466b      	mov	r3, sp
 8008cca:	181b      	adds	r3, r3, r0
 8008ccc:	881b      	ldrh	r3, [r3, #0]
 8008cce:	4299      	cmp	r1, r3
 8008cd0:	d0da      	beq.n	8008c88 <lv_draw_letter+0x2d0>
                    if(px_opa > LV_OPA_MAX)
 8008cd2:	2afb      	cmp	r2, #251	; 0xfb
 8008cd4:	d905      	bls.n	8008ce2 <lv_draw_letter+0x32a>
                        *vdb_buf_tmp = color;
 8008cd6:	466b      	mov	r3, sp
 8008cd8:	181b      	adds	r3, r3, r0
 8008cda:	881b      	ldrh	r3, [r3, #0]
 8008cdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cde:	8013      	strh	r3, [r2, #0]
 8008ce0:	e7d2      	b.n	8008c88 <lv_draw_letter+0x2d0>
                    else if(px_opa > LV_OPA_MIN) {
 8008ce2:	2a10      	cmp	r2, #16
 8008ce4:	d9d0      	bls.n	8008c88 <lv_draw_letter+0x2d0>
                            *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
 8008ce6:	2046      	movs	r0, #70	; 0x46
 8008ce8:	466b      	mov	r3, sp
 8008cea:	181b      	adds	r3, r3, r0
 8008cec:	8818      	ldrh	r0, [r3, #0]
 8008cee:	f7ff fc7d 	bl	80085ec <lv_color_mix>
 8008cf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cf4:	8018      	strh	r0, [r3, #0]
 8008cf6:	e7c7      	b.n	8008c88 <lv_draw_letter+0x2d0>
                map_p++;
 8008cf8:	9b05      	ldr	r3, [sp, #20]
                col_bit = 0;
 8008cfa:	2400      	movs	r4, #0
                map_p++;
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	9305      	str	r3, [sp, #20]
                bitmask = bitmask_init;
 8008d00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d02:	930d      	str	r3, [sp, #52]	; 0x34
 8008d04:	e7cf      	b.n	8008ca6 <lv_draw_letter+0x2ee>
 8008d06:	46c0      	nop			; (mov r8, r8)
 8008d08:	0800de0e 	.word	0x0800de0e

08008d0c <lv_draw_map>:
{
 8008d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d0e:	b097      	sub	sp, #92	; 0x5c
 8008d10:	0004      	movs	r4, r0
 8008d12:	9204      	str	r2, [sp, #16]
 8008d14:	204a      	movs	r0, #74	; 0x4a
 8008d16:	466a      	mov	r2, sp
 8008d18:	9306      	str	r3, [sp, #24]
 8008d1a:	ab1c      	add	r3, sp, #112	; 0x70
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	1812      	adds	r2, r2, r0
 8008d20:	9311      	str	r3, [sp, #68]	; 0x44
 8008d22:	ab1d      	add	r3, sp, #116	; 0x74
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d28:	ab1e      	add	r3, sp, #120	; 0x78
 8008d2a:	881b      	ldrh	r3, [r3, #0]
 8008d2c:	8013      	strh	r3, [r2, #0]
 8008d2e:	ab1f      	add	r3, sp, #124	; 0x7c
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	930e      	str	r3, [sp, #56]	; 0x38
    if(opa < LV_OPA_MIN) return;
 8008d34:	9b06      	ldr	r3, [sp, #24]
 8008d36:	2b0f      	cmp	r3, #15
 8008d38:	d800      	bhi.n	8008d3c <lv_draw_map+0x30>
 8008d3a:	e082      	b.n	8008e42 <lv_draw_map+0x136>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8008d3c:	2bfb      	cmp	r3, #251	; 0xfb
 8008d3e:	d901      	bls.n	8008d44 <lv_draw_map+0x38>
 8008d40:	23ff      	movs	r3, #255	; 0xff
 8008d42:	9306      	str	r3, [sp, #24]
    union_ok = lv_area_intersect(&masked_a, cords_p, mask_p);
 8008d44:	ad14      	add	r5, sp, #80	; 0x50
 8008d46:	000a      	movs	r2, r1
 8008d48:	0028      	movs	r0, r5
 8008d4a:	0021      	movs	r1, r4
 8008d4c:	f003 fb3a 	bl	800c3c4 <lv_area_intersect>
    if(union_ok == false) return;
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d076      	beq.n	8008e42 <lv_draw_map+0x136>
    uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 8008d54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d56:	1e5a      	subs	r2, r3, #1
 8008d58:	4193      	sbcs	r3, r2
 8008d5a:	3302      	adds	r3, #2
 8008d5c:	930a      	str	r3, [sp, #40]	; 0x28
 8008d5e:	2300      	movs	r3, #0
 8008d60:	5ee2      	ldrsh	r2, [r4, r3]
 8008d62:	88a3      	ldrh	r3, [r4, #4]
 8008d64:	3301      	adds	r3, #1
 8008d66:	1a9b      	subs	r3, r3, r2
 8008d68:	b21b      	sxth	r3, r3
 8008d6a:	930b      	str	r3, [sp, #44]	; 0x2c
    if(cords_p->y1 < masked_a.y1) {
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	5ee1      	ldrsh	r1, [r4, r3]
 8008d70:	2002      	movs	r0, #2
 8008d72:	5e2b      	ldrsh	r3, [r5, r0]
 8008d74:	4299      	cmp	r1, r3
 8008d76:	da07      	bge.n	8008d88 <lv_draw_map+0x7c>
        map_p += (uint32_t)map_width * ((masked_a.y1 - cords_p->y1)) * px_size_byte;
 8008d78:	1a5b      	subs	r3, r3, r1
 8008d7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d7c:	434b      	muls	r3, r1
 8008d7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008d80:	434b      	muls	r3, r1
 8008d82:	9904      	ldr	r1, [sp, #16]
 8008d84:	18cb      	adds	r3, r1, r3
 8008d86:	9304      	str	r3, [sp, #16]
    if(cords_p->x1 < masked_a.x1) {
 8008d88:	ab14      	add	r3, sp, #80	; 0x50
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	5e5b      	ldrsh	r3, [r3, r1]
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	dd05      	ble.n	8008d9e <lv_draw_map+0x92>
        map_p += (masked_a.x1 - cords_p->x1) * px_size_byte;
 8008d92:	1a9a      	subs	r2, r3, r2
 8008d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d96:	435a      	muls	r2, r3
 8008d98:	9b04      	ldr	r3, [sp, #16]
 8008d9a:	189b      	adds	r3, r3, r2
 8008d9c:	9304      	str	r3, [sp, #16]
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 8008d9e:	f7fe fe0d 	bl	80079bc <lv_refr_get_disp_refreshing>
 8008da2:	0007      	movs	r7, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8008da4:	f003 fa14 	bl	800c1d0 <lv_disp_get_buf>
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8008da8:	0003      	movs	r3, r0
 8008daa:	aa14      	add	r2, sp, #80	; 0x50
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8008dac:	9008      	str	r0, [sp, #32]
    masked_a.x1 = masked_a.x1 - vdb->area.x1;
 8008dae:	8a00      	ldrh	r0, [r0, #16]
 8008db0:	8811      	ldrh	r1, [r2, #0]
 8008db2:	1a09      	subs	r1, r1, r0
 8008db4:	b289      	uxth	r1, r1
 8008db6:	b20e      	sxth	r6, r1
 8008db8:	8016      	strh	r6, [r2, #0]
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 8008dba:	8a5d      	ldrh	r5, [r3, #18]
 8008dbc:	8853      	ldrh	r3, [r2, #2]
 8008dbe:	1b5b      	subs	r3, r3, r5
 8008dc0:	b21b      	sxth	r3, r3
 8008dc2:	9305      	str	r3, [sp, #20]
 8008dc4:	466b      	mov	r3, sp
 8008dc6:	8a9b      	ldrh	r3, [r3, #20]
    masked_a.y2 = masked_a.y2 - vdb->area.y1;
 8008dc8:	88d4      	ldrh	r4, [r2, #6]
    masked_a.y1 = masked_a.y1 - vdb->area.y1;
 8008dca:	8053      	strh	r3, [r2, #2]
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 8008dcc:	8893      	ldrh	r3, [r2, #4]
    masked_a.y2 = masked_a.y2 - vdb->area.y1;
 8008dce:	1b64      	subs	r4, r4, r5
    masked_a.x2 = masked_a.x2 - vdb->area.x1;
 8008dd0:	1a1b      	subs	r3, r3, r0
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	8093      	strh	r3, [r2, #4]
    masked_a.y2 = masked_a.y2 - vdb->area.y1;
 8008dd6:	80d4      	strh	r4, [r2, #6]
 8008dd8:	9a08      	ldr	r2, [sp, #32]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	8a95      	ldrh	r5, [r2, #20]
 8008dde:	1a59      	subs	r1, r3, r1
 8008de0:	3501      	adds	r5, #1
 8008de2:	1a2d      	subs	r5, r5, r0
 8008de4:	b22a      	sxth	r2, r5
 8008de6:	9209      	str	r2, [sp, #36]	; 0x24
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8008de8:	9a08      	ldr	r2, [sp, #32]
    vdb_buf_tmp += (uint32_t)vdb_width * masked_a.y1; /*Move to the first row*/
 8008dea:	9809      	ldr	r0, [sp, #36]	; 0x24
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8008dec:	6892      	ldr	r2, [r2, #8]
 8008dee:	b20b      	sxth	r3, r1
 8008df0:	9207      	str	r2, [sp, #28]
    vdb_buf_tmp += (uint32_t)vdb_width * masked_a.y1; /*Move to the first row*/
 8008df2:	9a05      	ldr	r2, [sp, #20]
 8008df4:	930c      	str	r3, [sp, #48]	; 0x30
 8008df6:	4342      	muls	r2, r0
    vdb_buf_tmp += (uint32_t)masked_a.x1;             /*Move to the first col*/
 8008df8:	1996      	adds	r6, r2, r6
 8008dfa:	9a07      	ldr	r2, [sp, #28]
 8008dfc:	0076      	lsls	r6, r6, #1
 8008dfe:	1992      	adds	r2, r2, r6
 8008e00:	9207      	str	r2, [sp, #28]
 8008e02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e06:	4353      	muls	r3, r2
 8008e08:	9310      	str	r3, [sp, #64]	; 0x40
    if(chroma_key == false && alpha_byte == false && opa == LV_OPA_COVER && recolor_opa == LV_OPA_TRANSP) {
 8008e0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d162      	bne.n	8008ed6 <lv_draw_map+0x1ca>
 8008e10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d15f      	bne.n	8008ed6 <lv_draw_map+0x1ca>
 8008e16:	9b06      	ldr	r3, [sp, #24]
 8008e18:	2bff      	cmp	r3, #255	; 0xff
 8008e1a:	d15c      	bne.n	8008ed6 <lv_draw_map+0x1ca>
 8008e1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d159      	bne.n	8008ed6 <lv_draw_map+0x1ca>
                map_p += map_width * px_size_byte; /*Next row on the map*/
 8008e22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e24:	930b      	str	r3, [sp, #44]	; 0x2c
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1, row,
 8008e26:	9b06      	ldr	r3, [sp, #24]
 8008e28:	930d      	str	r3, [sp, #52]	; 0x34
        if(disp->driver.set_px_cb) {
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d12c      	bne.n	8008e8a <lv_draw_map+0x17e>
        memcpy(dest, src, length * sizeof(lv_color_t));
 8008e30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8008e32:	0045      	lsls	r5, r0, #1
        memcpy(dest, src, length * sizeof(lv_color_t));
 8008e34:	005e      	lsls	r6, r3, #1
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8008e36:	ab14      	add	r3, sp, #80	; 0x50
 8008e38:	2206      	movs	r2, #6
 8008e3a:	5e9b      	ldrsh	r3, [r3, r2]
 8008e3c:	9a05      	ldr	r2, [sp, #20]
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	da2c      	bge.n	8008e9c <lv_draw_map+0x190>
}
 8008e42:	b017      	add	sp, #92	; 0x5c
 8008e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1, row,
 8008e46:	990d      	ldr	r1, [sp, #52]	; 0x34
                    lv_color_t px_color = *((lv_color_t *)&map_p[(uint32_t)col * px_size_byte]);
 8008e48:	882a      	ldrh	r2, [r5, #0]
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1, row,
 8008e4a:	ab14      	add	r3, sp, #80	; 0x50
 8008e4c:	881b      	ldrh	r3, [r3, #0]
 8008e4e:	9102      	str	r1, [sp, #8]
 8008e50:	a901      	add	r1, sp, #4
 8008e52:	800a      	strh	r2, [r1, #0]
 8008e54:	9a05      	ldr	r2, [sp, #20]
 8008e56:	b2a4      	uxth	r4, r4
 8008e58:	9908      	ldr	r1, [sp, #32]
 8008e5a:	9200      	str	r2, [sp, #0]
 8008e5c:	18e3      	adds	r3, r4, r3
 8008e5e:	b21b      	sxth	r3, r3
 8008e60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e62:	6889      	ldr	r1, [r1, #8]
 8008e64:	0038      	movs	r0, r7
 8008e66:	697e      	ldr	r6, [r7, #20]
 8008e68:	47b0      	blx	r6
 8008e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                for(col = 0; col < map_useful_w; col++) {
 8008e6c:	3401      	adds	r4, #1
 8008e6e:	18ed      	adds	r5, r5, r3
 8008e70:	b224      	sxth	r4, r4
 8008e72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e74:	429c      	cmp	r4, r3
 8008e76:	dbe6      	blt.n	8008e46 <lv_draw_map+0x13a>
                map_p += map_width * px_size_byte; /*Next row on the map*/
 8008e78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e7a:	9b04      	ldr	r3, [sp, #16]
 8008e7c:	4694      	mov	ip, r2
 8008e7e:	4463      	add	r3, ip
 8008e80:	9304      	str	r3, [sp, #16]
 8008e82:	9b05      	ldr	r3, [sp, #20]
 8008e84:	3301      	adds	r3, #1
 8008e86:	b21b      	sxth	r3, r3
 8008e88:	9305      	str	r3, [sp, #20]
            for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8008e8a:	ab14      	add	r3, sp, #80	; 0x50
 8008e8c:	2206      	movs	r2, #6
 8008e8e:	5e9b      	ldrsh	r3, [r3, r2]
 8008e90:	9a05      	ldr	r2, [sp, #20]
 8008e92:	4293      	cmp	r3, r2
 8008e94:	dbd5      	blt.n	8008e42 <lv_draw_map+0x136>
 8008e96:	9d04      	ldr	r5, [sp, #16]
 8008e98:	2400      	movs	r4, #0
 8008e9a:	e7ea      	b.n	8008e72 <lv_draw_map+0x166>
                if(disp->driver.gpu_blend_cb == false) {
 8008e9c:	69fc      	ldr	r4, [r7, #28]
 8008e9e:	2c00      	cmp	r4, #0
 8008ea0:	d111      	bne.n	8008ec6 <lv_draw_map+0x1ba>
        memcpy(dest, src, length * sizeof(lv_color_t));
 8008ea2:	0032      	movs	r2, r6
 8008ea4:	9904      	ldr	r1, [sp, #16]
 8008ea6:	9807      	ldr	r0, [sp, #28]
 8008ea8:	f004 fe5c 	bl	800db64 <memcpy>
                map_p += map_width * px_size_byte; /*Next row on the map*/
 8008eac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008eae:	9b04      	ldr	r3, [sp, #16]
 8008eb0:	4694      	mov	ip, r2
 8008eb2:	4463      	add	r3, ip
 8008eb4:	9304      	str	r3, [sp, #16]
                vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8008eb6:	9b07      	ldr	r3, [sp, #28]
 8008eb8:	195b      	adds	r3, r3, r5
 8008eba:	9307      	str	r3, [sp, #28]
 8008ebc:	9b05      	ldr	r3, [sp, #20]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	b21b      	sxth	r3, r3
 8008ec2:	9305      	str	r3, [sp, #20]
 8008ec4:	e7b7      	b.n	8008e36 <lv_draw_map+0x12a>
                    disp->driver.gpu_blend_cb(&disp->driver, vdb_buf_tmp, (lv_color_t *)map_p, map_useful_w, opa);
 8008ec6:	9b06      	ldr	r3, [sp, #24]
 8008ec8:	9a04      	ldr	r2, [sp, #16]
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	9907      	ldr	r1, [sp, #28]
 8008ece:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ed0:	0038      	movs	r0, r7
 8008ed2:	47a0      	blx	r4
 8008ed4:	e7ea      	b.n	8008eac <lv_draw_map+0x1a0>
        lv_color_t last_img_px  = LV_COLOR_BLACK;
 8008ed6:	2248      	movs	r2, #72	; 0x48
 8008ed8:	466b      	mov	r3, sp
 8008eda:	2100      	movs	r1, #0
 8008edc:	189b      	adds	r3, r3, r2
 8008ede:	8019      	strh	r1, [r3, #0]
        lv_color_t recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 8008ee0:	204a      	movs	r0, #74	; 0x4a
 8008ee2:	466b      	mov	r3, sp
 8008ee4:	181b      	adds	r3, r3, r0
 8008ee6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ee8:	8818      	ldrh	r0, [r3, #0]
 8008eea:	f7ff fb7f 	bl	80085ec <lv_color_mix>
 8008eee:	466b      	mov	r3, sp
 8008ef0:	8698      	strh	r0, [r3, #52]	; 0x34
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8008ef2:	ab14      	add	r3, sp, #80	; 0x50
 8008ef4:	2202      	movs	r2, #2
 8008ef6:	5e9b      	ldrsh	r3, [r3, r2]
 8008ef8:	9305      	str	r3, [sp, #20]
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8008efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008efc:	005b      	lsls	r3, r3, #1
 8008efe:	9313      	str	r3, [sp, #76]	; 0x4c
        for(row = masked_a.y1; row <= masked_a.y2; row++) {
 8008f00:	ab14      	add	r3, sp, #80	; 0x50
 8008f02:	2206      	movs	r2, #6
 8008f04:	5e9b      	ldrsh	r3, [r3, r2]
 8008f06:	9a05      	ldr	r2, [sp, #20]
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	db9a      	blt.n	8008e42 <lv_draw_map+0x136>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	9c07      	ldr	r4, [sp, #28]
 8008f10:	9e04      	ldr	r6, [sp, #16]
 8008f12:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f14:	e051      	b.n	8008fba <lv_draw_map+0x2ae>
                if(alpha_byte) {
 8008f16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d03f      	beq.n	8008f9c <lv_draw_map+0x290>
                    px_color.full = px_color_p[0] + (px_color_p[1] << 8);
 8008f1c:	7873      	ldrb	r3, [r6, #1]
 8008f1e:	7830      	ldrb	r0, [r6, #0]
 8008f20:	021b      	lsls	r3, r3, #8
 8008f22:	18c0      	adds	r0, r0, r3
                    lv_opa_t px_opa = *(px_color_p + LV_IMG_PX_SIZE_ALPHA_BYTE - 1);
 8008f24:	78b3      	ldrb	r3, [r6, #2]
                    px_color.full = px_color_p[0] + (px_color_p[1] << 8);
 8008f26:	b280      	uxth	r0, r0
                    if(px_opa == LV_OPA_TRANSP)
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d03f      	beq.n	8008fac <lv_draw_map+0x2a0>
 8008f2c:	9d06      	ldr	r5, [sp, #24]
                    else if(px_opa != LV_OPA_COVER)
 8008f2e:	2bff      	cmp	r3, #255	; 0xff
 8008f30:	d001      	beq.n	8008f36 <lv_draw_map+0x22a>
                        opa_result = (uint32_t)((uint32_t)px_opa * opa_result) >> 8;
 8008f32:	435d      	muls	r5, r3
 8008f34:	0a2d      	lsrs	r5, r5, #8
                if(chroma_key && px_color.full == disp->driver.color_chroma_key.full) continue;
 8008f36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d002      	beq.n	8008f42 <lv_draw_map+0x236>
 8008f3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f3e:	4283      	cmp	r3, r0
 8008f40:	d034      	beq.n	8008fac <lv_draw_map+0x2a0>
                if(recolor_opa != LV_OPA_TRANSP) {
 8008f42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d052      	beq.n	8008fee <lv_draw_map+0x2e2>
                    if(last_img_px.full != px_color.full) { /*Minor acceleration: calculate only for
 8008f48:	466b      	mov	r3, sp
 8008f4a:	2248      	movs	r2, #72	; 0x48
 8008f4c:	189b      	adds	r3, r3, r2
 8008f4e:	881b      	ldrh	r3, [r3, #0]
 8008f50:	4283      	cmp	r3, r0
 8008f52:	d00c      	beq.n	8008f6e <lv_draw_map+0x262>
                        last_img_px  = px_color;
 8008f54:	466b      	mov	r3, sp
 8008f56:	189b      	adds	r3, r3, r2
 8008f58:	8018      	strh	r0, [r3, #0]
                        recolored_px = lv_color_mix(recolor, last_img_px, recolor_opa);
 8008f5a:	1c01      	adds	r1, r0, #0
 8008f5c:	466b      	mov	r3, sp
 8008f5e:	204a      	movs	r0, #74	; 0x4a
 8008f60:	181b      	adds	r3, r3, r0
 8008f62:	8818      	ldrh	r0, [r3, #0]
 8008f64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f66:	f7ff fb41 	bl	80085ec <lv_color_mix>
 8008f6a:	466b      	mov	r3, sp
 8008f6c:	8698      	strh	r0, [r3, #52]	; 0x34
                    if(disp->driver.set_px_cb) {
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	469c      	mov	ip, r3
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d015      	beq.n	8008fa2 <lv_draw_map+0x296>
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 8008f76:	4669      	mov	r1, sp
 8008f78:	ab14      	add	r3, sp, #80	; 0x50
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f7e:	9502      	str	r5, [sp, #8]
 8008f80:	8e89      	ldrh	r1, [r1, #52]	; 0x34
 8008f82:	189b      	adds	r3, r3, r2
 8008f84:	aa01      	add	r2, sp, #4
 8008f86:	8011      	strh	r1, [r2, #0]
 8008f88:	9a05      	ldr	r2, [sp, #20]
 8008f8a:	9908      	ldr	r1, [sp, #32]
 8008f8c:	9200      	str	r2, [sp, #0]
 8008f8e:	6889      	ldr	r1, [r1, #8]
 8008f90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f92:	b21b      	sxth	r3, r3
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 8008f94:	0038      	movs	r0, r7
 8008f96:	4665      	mov	r5, ip
 8008f98:	47a8      	blx	r5
 8008f9a:	e007      	b.n	8008fac <lv_draw_map+0x2a0>
                    px_color = *((lv_color_t *)px_color_p);
 8008f9c:	8830      	ldrh	r0, [r6, #0]
 8008f9e:	9d06      	ldr	r5, [sp, #24]
 8008fa0:	e7c9      	b.n	8008f36 <lv_draw_map+0x22a>
                        if(opa_result == LV_OPA_COVER)
 8008fa2:	2dff      	cmp	r5, #255	; 0xff
 8008fa4:	d11c      	bne.n	8008fe0 <lv_draw_map+0x2d4>
                            vdb_buf_tmp[col].full = recolored_px.full;
 8008fa6:	466b      	mov	r3, sp
 8008fa8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008faa:	8023      	strh	r3, [r4, #0]
 8008fac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fae:	3402      	adds	r4, #2
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	b21b      	sxth	r3, r3
 8008fb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fb8:	18f6      	adds	r6, r6, r3
            for(col = 0; col < map_useful_w; col++) {
 8008fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	dba9      	blt.n	8008f16 <lv_draw_map+0x20a>
            map_p += map_width * px_size_byte; /*Next row on the map*/
 8008fc2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008fc4:	9b04      	ldr	r3, [sp, #16]
 8008fc6:	4694      	mov	ip, r2
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8008fc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            map_p += map_width * px_size_byte; /*Next row on the map*/
 8008fca:	4463      	add	r3, ip
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8008fcc:	4694      	mov	ip, r2
            map_p += map_width * px_size_byte; /*Next row on the map*/
 8008fce:	9304      	str	r3, [sp, #16]
            vdb_buf_tmp += vdb_width;          /*Next row on the VDB*/
 8008fd0:	9b07      	ldr	r3, [sp, #28]
 8008fd2:	4463      	add	r3, ip
 8008fd4:	9307      	str	r3, [sp, #28]
 8008fd6:	9b05      	ldr	r3, [sp, #20]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	b21b      	sxth	r3, r3
 8008fdc:	9305      	str	r3, [sp, #20]
 8008fde:	e78f      	b.n	8008f00 <lv_draw_map+0x1f4>
                            vdb_buf_tmp[col] = lv_color_mix(recolored_px, vdb_buf_tmp[col], opa_result);
 8008fe0:	466b      	mov	r3, sp
 8008fe2:	002a      	movs	r2, r5
 8008fe4:	8821      	ldrh	r1, [r4, #0]
 8008fe6:	8e98      	ldrh	r0, [r3, #52]	; 0x34
                                vdb_buf_tmp[col] = lv_color_mix(px_color, vdb_buf_tmp[col], opa_result);
 8008fe8:	f7ff fb00 	bl	80085ec <lv_color_mix>
 8008fec:	e013      	b.n	8009016 <lv_draw_map+0x30a>
                    if(disp->driver.set_px_cb) {
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	469c      	mov	ip, r3
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00d      	beq.n	8009012 <lv_draw_map+0x306>
                        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, col + masked_a.x1,
 8008ff6:	9b08      	ldr	r3, [sp, #32]
 8008ff8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ffa:	6899      	ldr	r1, [r3, #8]
 8008ffc:	ab14      	add	r3, sp, #80	; 0x50
 8008ffe:	881b      	ldrh	r3, [r3, #0]
 8009000:	9502      	str	r5, [sp, #8]
 8009002:	189b      	adds	r3, r3, r2
 8009004:	aa01      	add	r2, sp, #4
 8009006:	8010      	strh	r0, [r2, #0]
 8009008:	9a05      	ldr	r2, [sp, #20]
 800900a:	b21b      	sxth	r3, r3
 800900c:	9200      	str	r2, [sp, #0]
 800900e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009010:	e7c0      	b.n	8008f94 <lv_draw_map+0x288>
                        if(opa_result == LV_OPA_COVER)
 8009012:	2dff      	cmp	r5, #255	; 0xff
 8009014:	d101      	bne.n	800901a <lv_draw_map+0x30e>
                                vdb_buf_tmp[col] = lv_color_mix(px_color, vdb_buf_tmp[col], opa_result);
 8009016:	8020      	strh	r0, [r4, #0]
 8009018:	e7c8      	b.n	8008fac <lv_draw_map+0x2a0>
 800901a:	002a      	movs	r2, r5
 800901c:	8821      	ldrh	r1, [r4, #0]
 800901e:	e7e3      	b.n	8008fe8 <lv_draw_map+0x2dc>

08009020 <lv_img_color_format_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_color_format_get_px_size(lv_img_cf_t cf)
{
 8009020:	1f03      	subs	r3, r0, #4
 8009022:	b2db      	uxtb	r3, r3
 8009024:	2000      	movs	r0, #0
 8009026:	2b0a      	cmp	r3, #10
 8009028:	d801      	bhi.n	800902e <lv_img_color_format_get_px_size+0xe>
 800902a:	4a01      	ldr	r2, [pc, #4]	; (8009030 <lv_img_color_format_get_px_size+0x10>)
 800902c:	5cd0      	ldrb	r0, [r2, r3]
        case LV_IMG_CF_ALPHA_8BIT: px_size = 8; break;
        default: px_size = 0; break;
    }

    return px_size;
}
 800902e:	4770      	bx	lr
 8009030:	0800dfc4 	.word	0x0800dfc4

08009034 <lv_img_color_format_is_chroma_keyed>:
        case LV_IMG_CF_RAW_CHROMA_KEYED:
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_INDEXED_8BIT: is_chroma_keyed = true; break;
        default: is_chroma_keyed = false; break;
 8009034:	2300      	movs	r3, #0
 8009036:	280a      	cmp	r0, #10
 8009038:	d807      	bhi.n	800904a <lv_img_color_format_is_chroma_keyed+0x16>
 800903a:	3301      	adds	r3, #1
 800903c:	4083      	lsls	r3, r0
 800903e:	20f9      	movs	r0, #249	; 0xf9
 8009040:	00c0      	lsls	r0, r0, #3
 8009042:	4003      	ands	r3, r0
 8009044:	1e58      	subs	r0, r3, #1
 8009046:	4183      	sbcs	r3, r0
 8009048:	b2db      	uxtb	r3, r3
    }

    return is_chroma_keyed;
}
 800904a:	0018      	movs	r0, r3
 800904c:	4770      	bx	lr
	...

08009050 <lv_img_color_format_has_alpha>:
        case LV_IMG_CF_RAW_ALPHA:
        case LV_IMG_CF_ALPHA_1BIT:
        case LV_IMG_CF_ALPHA_2BIT:
        case LV_IMG_CF_ALPHA_4BIT:
        case LV_IMG_CF_ALPHA_8BIT: has_alpha = true; break;
        default: has_alpha = false; break;
 8009050:	2300      	movs	r3, #0
 8009052:	280e      	cmp	r0, #14
 8009054:	d806      	bhi.n	8009064 <lv_img_color_format_has_alpha+0x14>
 8009056:	3301      	adds	r3, #1
 8009058:	4083      	lsls	r3, r0
 800905a:	4803      	ldr	r0, [pc, #12]	; (8009068 <lv_img_color_format_has_alpha+0x18>)
 800905c:	4003      	ands	r3, r0
 800905e:	1e58      	subs	r0, r3, #1
 8009060:	4183      	sbcs	r3, r0
 8009062:	b2db      	uxtb	r3, r3
    }

    return has_alpha;
}
 8009064:	0018      	movs	r0, r3
 8009066:	4770      	bx	lr
 8009068:	00007824 	.word	0x00007824

0800906c <lv_draw_img>:
{
 800906c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800906e:	b095      	sub	sp, #84	; 0x54
 8009070:	9308      	str	r3, [sp, #32]
 8009072:	ab1a      	add	r3, sp, #104	; 0x68
 8009074:	0004      	movs	r4, r0
 8009076:	9107      	str	r1, [sp, #28]
 8009078:	0015      	movs	r5, r2
 800907a:	781f      	ldrb	r7, [r3, #0]
    if(src == NULL) {
 800907c:	2a00      	cmp	r2, #0
 800907e:	d113      	bne.n	80090a8 <lv_draw_img+0x3c>
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 8009080:	4e60      	ldr	r6, [pc, #384]	; (8009204 <lv_draw_img+0x198>)
 8009082:	23ff      	movs	r3, #255	; 0xff
 8009084:	0032      	movs	r2, r6
 8009086:	f000 fb8b 	bl	80097a0 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 800908a:	4b5f      	ldr	r3, [pc, #380]	; (8009208 <lv_draw_img+0x19c>)
 800908c:	9505      	str	r5, [sp, #20]
 800908e:	9304      	str	r3, [sp, #16]
 8009090:	9303      	str	r3, [sp, #12]
 8009092:	4b5e      	ldr	r3, [pc, #376]	; (800920c <lv_draw_img+0x1a0>)
 8009094:	9502      	str	r5, [sp, #8]
 8009096:	9501      	str	r5, [sp, #4]
    bool alpha_byte   = lv_img_color_format_has_alpha(cdsc->dec_dsc.header.cf);

    if(cdsc->dec_dsc.error_msg != NULL) {
        LV_LOG_WARN("Image draw error");
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, cdsc->dec_dsc.error_msg, LV_TXT_FLAG_NONE, NULL, -1,
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	0032      	movs	r2, r6
 800909c:	23ff      	movs	r3, #255	; 0xff
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 800909e:	9907      	ldr	r1, [sp, #28]
 80090a0:	0020      	movs	r0, r4
 80090a2:	f000 f8d7 	bl	8009254 <lv_draw_label>
        return;
 80090a6:	e049      	b.n	800913c <lv_draw_img+0xd0>
    union_ok = lv_area_intersect(&mask_com, mask, coords);
 80090a8:	ae10      	add	r6, sp, #64	; 0x40
 80090aa:	0002      	movs	r2, r0
 80090ac:	9907      	ldr	r1, [sp, #28]
 80090ae:	0030      	movs	r0, r6
 80090b0:	f003 f988 	bl	800c3c4 <lv_area_intersect>
    if(union_ok == false) {
 80090b4:	2800      	cmp	r0, #0
 80090b6:	d041      	beq.n	800913c <lv_draw_img+0xd0>
 80090b8:	9b08      	ldr	r3, [sp, #32]
 80090ba:	3333      	adds	r3, #51	; 0x33
    lv_opa_t opa =
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	2fff      	cmp	r7, #255	; 0xff
 80090c0:	d125      	bne.n	800910e <lv_draw_img+0xa2>
    lv_img_cache_entry_t * cdsc = lv_img_cache_open(src, style);
 80090c2:	0028      	movs	r0, r5
 80090c4:	9908      	ldr	r1, [sp, #32]
    lv_opa_t opa =
 80090c6:	9309      	str	r3, [sp, #36]	; 0x24
    lv_img_cache_entry_t * cdsc = lv_img_cache_open(src, style);
 80090c8:	f002 fa90 	bl	800b5ec <lv_img_cache_open>
 80090cc:	1e05      	subs	r5, r0, #0
    if(cdsc == NULL) return LV_RES_INV;
 80090ce:	d100      	bne.n	80090d2 <lv_draw_img+0x66>
 80090d0:	e068      	b.n	80091a4 <lv_draw_img+0x138>
    bool chroma_keyed = lv_img_color_format_is_chroma_keyed(cdsc->dec_dsc.header.cf);
 80090d2:	7c07      	ldrb	r7, [r0, #16]
 80090d4:	06ff      	lsls	r7, r7, #27
 80090d6:	0eff      	lsrs	r7, r7, #27
 80090d8:	0038      	movs	r0, r7
 80090da:	f7ff ffab 	bl	8009034 <lv_img_color_format_is_chroma_keyed>
 80090de:	900b      	str	r0, [sp, #44]	; 0x2c
    bool alpha_byte   = lv_img_color_format_has_alpha(cdsc->dec_dsc.header.cf);
 80090e0:	0038      	movs	r0, r7
 80090e2:	f7ff ffb5 	bl	8009050 <lv_img_color_format_has_alpha>
    if(cdsc->dec_dsc.error_msg != NULL) {
 80090e6:	69eb      	ldr	r3, [r5, #28]
    bool alpha_byte   = lv_img_color_format_has_alpha(cdsc->dec_dsc.header.cf);
 80090e8:	900c      	str	r0, [sp, #48]	; 0x30
    if(cdsc->dec_dsc.error_msg != NULL) {
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d012      	beq.n	8009114 <lv_draw_img+0xa8>
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 80090ee:	4e45      	ldr	r6, [pc, #276]	; (8009204 <lv_draw_img+0x198>)
 80090f0:	23ff      	movs	r3, #255	; 0xff
 80090f2:	0032      	movs	r2, r6
 80090f4:	9907      	ldr	r1, [sp, #28]
 80090f6:	0020      	movs	r0, r4
 80090f8:	f000 fb52 	bl	80097a0 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, cdsc->dec_dsc.error_msg, LV_TXT_FLAG_NONE, NULL, -1,
 80090fc:	2300      	movs	r3, #0
 80090fe:	4a42      	ldr	r2, [pc, #264]	; (8009208 <lv_draw_img+0x19c>)
 8009100:	9305      	str	r3, [sp, #20]
 8009102:	9204      	str	r2, [sp, #16]
 8009104:	9203      	str	r2, [sp, #12]
 8009106:	9302      	str	r3, [sp, #8]
 8009108:	9301      	str	r3, [sp, #4]
 800910a:	69eb      	ldr	r3, [r5, #28]
 800910c:	e7c4      	b.n	8009098 <lv_draw_img+0x2c>
    lv_opa_t opa =
 800910e:	435f      	muls	r7, r3
 8009110:	0a3b      	lsrs	r3, r7, #8
 8009112:	e7d6      	b.n	80090c2 <lv_draw_img+0x56>
                      -1, NULL);
    }
    /* The decoder open could open the image and gave the entire uncompressed image.
     * Just draw it!*/
    else if(cdsc->dec_dsc.img_data) {
 8009114:	696a      	ldr	r2, [r5, #20]
 8009116:	2a00      	cmp	r2, #0
 8009118:	d012      	beq.n	8009140 <lv_draw_img+0xd4>
        lv_draw_map(coords, mask, cdsc->dec_dsc.img_data, opa, chroma_keyed, alpha_byte, style->image.color,
 800911a:	9b08      	ldr	r3, [sp, #32]
 800911c:	9908      	ldr	r1, [sp, #32]
 800911e:	3332      	adds	r3, #50	; 0x32
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	0020      	movs	r0, r4
 8009124:	9303      	str	r3, [sp, #12]
 8009126:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 8009128:	ab02      	add	r3, sp, #8
 800912a:	8019      	strh	r1, [r3, #0]
 800912c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800912e:	9907      	ldr	r1, [sp, #28]
 8009130:	9301      	str	r3, [sp, #4]
 8009132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009134:	9300      	str	r3, [sp, #0]
 8009136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009138:	f7ff fde8 	bl	8008d0c <lv_draw_map>
}
 800913c:	b015      	add	sp, #84	; 0x54
 800913e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    }
    /* The whole uncompressed image is not available. Try to read it line-by-line*/
    else {
        lv_coord_t width = lv_area_get_width(&mask_com);

        uint8_t  * buf = lv_draw_get_buf(lv_area_get_width(&mask_com) * ((LV_COLOR_DEPTH >> 3) + 1));  /*+1 because of the possible alpha byte*/
 8009140:	2003      	movs	r0, #3
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 8009142:	88b3      	ldrh	r3, [r6, #4]
 8009144:	8832      	ldrh	r2, [r6, #0]
 8009146:	3301      	adds	r3, #1
 8009148:	1a9b      	subs	r3, r3, r2
 800914a:	b21b      	sxth	r3, r3
 800914c:	4358      	muls	r0, r3
 800914e:	930a      	str	r3, [sp, #40]	; 0x28
 8009150:	f7ff fa02 	bl	8008558 <lv_draw_get_buf>
    memcpy(dest, src, sizeof(lv_area_t));
 8009154:	2208      	movs	r2, #8
 8009156:	0031      	movs	r1, r6
 8009158:	0007      	movs	r7, r0
 800915a:	a812      	add	r0, sp, #72	; 0x48
 800915c:	f004 fd02 	bl	800db64 <memcpy>

        lv_area_t line;
        lv_area_copy(&line, &mask_com);
        lv_area_set_height(&line, 1);
 8009160:	2101      	movs	r1, #1
 8009162:	a812      	add	r0, sp, #72	; 0x48
 8009164:	f003 f91b 	bl	800c39e <lv_area_set_height>
        lv_coord_t x = mask_com.x1 - coords->x1;
 8009168:	8822      	ldrh	r2, [r4, #0]
 800916a:	8833      	ldrh	r3, [r6, #0]
 800916c:	1a9b      	subs	r3, r3, r2
 800916e:	b21b      	sxth	r3, r3
 8009170:	930d      	str	r3, [sp, #52]	; 0x34
        lv_coord_t y = mask_com.y1 - coords->y1;
 8009172:	2202      	movs	r2, #2
 8009174:	5eb3      	ldrsh	r3, [r6, r2]
 8009176:	8862      	ldrh	r2, [r4, #2]
 8009178:	920e      	str	r2, [sp, #56]	; 0x38
 800917a:	b29a      	uxth	r2, r3
 800917c:	920f      	str	r2, [sp, #60]	; 0x3c
        lv_coord_t row;
        lv_res_t read_res;
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800917e:	a910      	add	r1, sp, #64	; 0x40
 8009180:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009182:	2006      	movs	r0, #6
 8009184:	5e09      	ldrsh	r1, [r1, r0]
 8009186:	1a9a      	subs	r2, r3, r2
 8009188:	b212      	sxth	r2, r2
 800918a:	4299      	cmp	r1, r3
 800918c:	dbd6      	blt.n	800913c <lv_draw_img+0xd0>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800918e:	9700      	str	r7, [sp, #0]
 8009190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009192:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009194:	0028      	movs	r0, r5
 8009196:	f002 fde9 	bl	800bd6c <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
 800919a:	2801      	cmp	r0, #1
 800919c:	d015      	beq.n	80091ca <lv_draw_img+0x15e>
                lv_img_decoder_close(&cdsc->dec_dsc);
 800919e:	0028      	movs	r0, r5
 80091a0:	f002 fdf3 	bl	800bd8a <lv_img_decoder_close>
        lv_draw_rect(coords, mask, &lv_style_plain, LV_OPA_COVER);
 80091a4:	4d17      	ldr	r5, [pc, #92]	; (8009204 <lv_draw_img+0x198>)
 80091a6:	23ff      	movs	r3, #255	; 0xff
 80091a8:	002a      	movs	r2, r5
 80091aa:	9907      	ldr	r1, [sp, #28]
 80091ac:	0020      	movs	r0, r4
 80091ae:	f000 faf7 	bl	80097a0 <lv_draw_rect>
        lv_draw_label(coords, mask, &lv_style_plain, LV_OPA_COVER, "No\ndata", LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 80091b2:	2300      	movs	r3, #0
 80091b4:	4a14      	ldr	r2, [pc, #80]	; (8009208 <lv_draw_img+0x19c>)
 80091b6:	9305      	str	r3, [sp, #20]
 80091b8:	9302      	str	r3, [sp, #8]
 80091ba:	9301      	str	r3, [sp, #4]
 80091bc:	4b13      	ldr	r3, [pc, #76]	; (800920c <lv_draw_img+0x1a0>)
 80091be:	9204      	str	r2, [sp, #16]
 80091c0:	9203      	str	r2, [sp, #12]
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	002a      	movs	r2, r5
 80091c6:	23ff      	movs	r3, #255	; 0xff
 80091c8:	e769      	b.n	800909e <lv_draw_img+0x32>
                LV_LOG_WARN("Image draw can't read the line");
                return LV_RES_INV;
            }
            lv_draw_map(&line, mask, buf, opa, chroma_keyed, alpha_byte, style->image.color, style->image.intense);
 80091ca:	9b08      	ldr	r3, [sp, #32]
 80091cc:	9a08      	ldr	r2, [sp, #32]
 80091ce:	3332      	adds	r3, #50	; 0x32
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	ae12      	add	r6, sp, #72	; 0x48
 80091d4:	9303      	str	r3, [sp, #12]
 80091d6:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 80091d8:	ab02      	add	r3, sp, #8
 80091da:	801a      	strh	r2, [r3, #0]
 80091dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091de:	003a      	movs	r2, r7
 80091e0:	9301      	str	r3, [sp, #4]
 80091e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091e4:	9907      	ldr	r1, [sp, #28]
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	0030      	movs	r0, r6
 80091ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ec:	f7ff fd8e 	bl	8008d0c <lv_draw_map>
            line.y1++;
 80091f0:	8873      	ldrh	r3, [r6, #2]
 80091f2:	3301      	adds	r3, #1
 80091f4:	8073      	strh	r3, [r6, #2]
            line.y2++;
 80091f6:	88f3      	ldrh	r3, [r6, #6]
 80091f8:	3301      	adds	r3, #1
 80091fa:	80f3      	strh	r3, [r6, #6]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 80091fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091fe:	3301      	adds	r3, #1
 8009200:	b21b      	sxth	r3, r3
 8009202:	e7ba      	b.n	800917a <lv_draw_img+0x10e>
 8009204:	20005248 	.word	0x20005248
 8009208:	0000ffff 	.word	0x0000ffff
 800920c:	0800dfcf 	.word	0x0800dfcf

08009210 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 8009210:	2303      	movs	r3, #3
 8009212:	2800      	cmp	r0, #0
 8009214:	d007      	beq.n	8009226 <lv_img_src_get_type+0x16>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 8009216:	7802      	ldrb	r2, [r0, #0]
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 8009218:	3b02      	subs	r3, #2
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800921a:	0011      	movs	r1, r2
 800921c:	3920      	subs	r1, #32
 800921e:	295f      	cmp	r1, #95	; 0x5f
 8009220:	d901      	bls.n	8009226 <lv_img_src_get_type+0x16>
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 8009222:	09d3      	lsrs	r3, r2, #7
 8009224:	005b      	lsls	r3, r3, #1
}
 8009226:	0018      	movs	r0, r3
 8009228:	4770      	bx	lr
	...

0800922c <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 800922c:	0003      	movs	r3, r0
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 800922e:	3830      	subs	r0, #48	; 0x30
 8009230:	b2c0      	uxtb	r0, r0
 8009232:	2809      	cmp	r0, #9
 8009234:	d90a      	bls.n	800924c <hex_char_to_num+0x20>
        result = hex - '0';
    } else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 8009236:	2b60      	cmp	r3, #96	; 0x60
 8009238:	d901      	bls.n	800923e <hex_char_to_num+0x12>
 800923a:	3b20      	subs	r3, #32
 800923c:	b2db      	uxtb	r3, r3
 800923e:	3b41      	subs	r3, #65	; 0x41
 8009240:	b2db      	uxtb	r3, r3
 8009242:	2000      	movs	r0, #0
 8009244:	2b05      	cmp	r3, #5
 8009246:	d801      	bhi.n	800924c <hex_char_to_num+0x20>
 8009248:	4a01      	ldr	r2, [pc, #4]	; (8009250 <hex_char_to_num+0x24>)
 800924a:	5cd0      	ldrb	r0, [r2, r3]
            default: result = 0; break;
        }
    }

    return result;
}
 800924c:	4770      	bx	lr
 800924e:	46c0      	nop			; (mov r8, r8)
 8009250:	0800dfd7 	.word	0x0800dfd7

08009254 <lv_draw_label>:
{
 8009254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009256:	0017      	movs	r7, r2
 8009258:	b0ad      	sub	sp, #180	; 0xb4
 800925a:	9312      	str	r3, [sp, #72]	; 0x48
 800925c:	ab32      	add	r3, sp, #200	; 0xc8
 800925e:	cb04      	ldmia	r3!, {r2}
 8009260:	9005      	str	r0, [sp, #20]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	910c      	str	r1, [sp, #48]	; 0x30
 8009266:	9306      	str	r3, [sp, #24]
 8009268:	ab35      	add	r3, sp, #212	; 0xd4
 800926a:	881b      	ldrh	r3, [r3, #0]
 800926c:	9209      	str	r2, [sp, #36]	; 0x24
 800926e:	9313      	str	r3, [sp, #76]	; 0x4c
 8009270:	ab36      	add	r3, sp, #216	; 0xd8
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	9d37      	ldr	r5, [sp, #220]	; 0xdc
 8009276:	9314      	str	r3, [sp, #80]	; 0x50
    const lv_font_t * font = style->text.font;
 8009278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927a:	9308      	str	r3, [sp, #32]
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 800927c:	9b06      	ldr	r3, [sp, #24]
 800927e:	079b      	lsls	r3, r3, #30
 8009280:	d500      	bpl.n	8009284 <lv_draw_label+0x30>
 8009282:	e092      	b.n	80093aa <lv_draw_label+0x156>
    return area_p->x2 - area_p->x1 + 1;
 8009284:	8883      	ldrh	r3, [r0, #4]
 8009286:	8802      	ldrh	r2, [r0, #0]
 8009288:	3301      	adds	r3, #1
 800928a:	1a9b      	subs	r3, r3, r2
 800928c:	b21b      	sxth	r3, r3
        w = p.x;
 800928e:	930a      	str	r3, [sp, #40]	; 0x28
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 8009290:	9b08      	ldr	r3, [sp, #32]
 8009292:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8009294:	7a1b      	ldrb	r3, [r3, #8]
 8009296:	189b      	adds	r3, r3, r2
 8009298:	b29b      	uxth	r3, r3
 800929a:	930b      	str	r3, [sp, #44]	; 0x2c
 800929c:	466b      	mov	r3, sp
 800929e:	222c      	movs	r2, #44	; 0x2c
 80092a0:	5e9b      	ldrsh	r3, [r3, r2]
    pos.x = coords->x1;
 80092a2:	9a05      	ldr	r2, [sp, #20]
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 80092a4:	930d      	str	r3, [sp, #52]	; 0x34
    pos.x = coords->x1;
 80092a6:	8812      	ldrh	r2, [r2, #0]
 80092a8:	ab19      	add	r3, sp, #100	; 0x64
 80092aa:	801a      	strh	r2, [r3, #0]
    pos.y = coords->y1;
 80092ac:	9a05      	ldr	r2, [sp, #20]
 80092ae:	2102      	movs	r1, #2
 80092b0:	5e52      	ldrsh	r2, [r2, r1]
    if(offset != NULL) {
 80092b2:	9934      	ldr	r1, [sp, #208]	; 0xd0
    pos.y = coords->y1;
 80092b4:	805a      	strh	r2, [r3, #2]
    if(offset != NULL) {
 80092b6:	2900      	cmp	r1, #0
 80092b8:	d100      	bne.n	80092bc <lv_draw_label+0x68>
 80092ba:	e1f0      	b.n	800969e <lv_draw_label+0x44a>
        x_ofs = offset->x;
 80092bc:	2000      	movs	r0, #0
 80092be:	5e09      	ldrsh	r1, [r1, r0]
    uint32_t line_start     = 0;
 80092c0:	002c      	movs	r4, r5
        x_ofs = offset->x;
 80092c2:	910f      	str	r1, [sp, #60]	; 0x3c
        y_ofs = offset->y;
 80092c4:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80092c6:	2002      	movs	r0, #2
 80092c8:	5e09      	ldrsh	r1, [r1, r0]
        pos.y += y_ofs;
 80092ca:	1850      	adds	r0, r2, r1
 80092cc:	8058      	strh	r0, [r3, #2]
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 80092ce:	2d00      	cmp	r5, #0
 80092d0:	d01e      	beq.n	8009310 <lv_draw_label+0xbc>
 80092d2:	2900      	cmp	r1, #0
 80092d4:	d000      	beq.n	80092d8 <lv_draw_label+0x84>
 80092d6:	e1e8      	b.n	80096aa <lv_draw_label+0x456>
 80092d8:	2a00      	cmp	r2, #0
 80092da:	db00      	blt.n	80092de <lv_draw_label+0x8a>
 80092dc:	e1e5      	b.n	80096aa <lv_draw_label+0x456>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 80092de:	68ab      	ldr	r3, [r5, #8]
 80092e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80092e2:	1a9a      	subs	r2, r3, r2
 80092e4:	17d3      	asrs	r3, r2, #31
 80092e6:	18d2      	adds	r2, r2, r3
 80092e8:	405a      	eors	r2, r3
 80092ea:	2380      	movs	r3, #128	; 0x80
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	1a5b      	subs	r3, r3, r1
 80092f0:	005b      	lsls	r3, r3, #1
 80092f2:	429a      	cmp	r2, r3
 80092f4:	dd02      	ble.n	80092fc <lv_draw_label+0xa8>
            hint->line_start = -1;
 80092f6:	2301      	movs	r3, #1
 80092f8:	425b      	negs	r3, r3
 80092fa:	602b      	str	r3, [r5, #0]
    uint32_t line_start     = 0;
 80092fc:	2400      	movs	r4, #0
        last_line_start = hint->line_start;
 80092fe:	682b      	ldr	r3, [r5, #0]
    if(hint && last_line_start >= 0) {
 8009300:	42a3      	cmp	r3, r4
 8009302:	db05      	blt.n	8009310 <lv_draw_label+0xbc>
        pos.y += hint->y;
 8009304:	aa19      	add	r2, sp, #100	; 0x64
        line_start = last_line_start;
 8009306:	001c      	movs	r4, r3
        pos.y += hint->y;
 8009308:	6869      	ldr	r1, [r5, #4]
 800930a:	8853      	ldrh	r3, [r2, #2]
 800930c:	18cb      	adds	r3, r1, r3
 800930e:	8053      	strh	r3, [r2, #2]
    uint32_t line_end = line_start + lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8009310:	2328      	movs	r3, #40	; 0x28
 8009312:	5efa      	ldrsh	r2, [r7, r3]
 8009314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009316:	9908      	ldr	r1, [sp, #32]
 8009318:	1918      	adds	r0, r3, r4
 800931a:	9b06      	ldr	r3, [sp, #24]
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009320:	f003 fe74 	bl	800d00c <lv_txt_get_next_line>
 8009324:	1903      	adds	r3, r0, r4
 8009326:	9307      	str	r3, [sp, #28]
    while(pos.y + line_height < mask->y1) {
 8009328:	ae19      	add	r6, sp, #100	; 0x64
 800932a:	2202      	movs	r2, #2
 800932c:	5eb3      	ldrsh	r3, [r6, r2]
 800932e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009330:	189b      	adds	r3, r3, r2
 8009332:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009334:	2102      	movs	r1, #2
 8009336:	5e52      	ldrsh	r2, [r2, r1]
 8009338:	4293      	cmp	r3, r2
 800933a:	db48      	blt.n	80093ce <lv_draw_label+0x17a>
 800933c:	2304      	movs	r3, #4
 800933e:	9a06      	ldr	r2, [sp, #24]
 8009340:	401a      	ands	r2, r3
 8009342:	9211      	str	r2, [sp, #68]	; 0x44
    if(flag & LV_TXT_FLAG_CENTER) {
 8009344:	d100      	bne.n	8009348 <lv_draw_label+0xf4>
 8009346:	e06e      	b.n	8009426 <lv_draw_label+0x1d2>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 8009348:	2228      	movs	r2, #40	; 0x28
 800934a:	5ebb      	ldrsh	r3, [r7, r2]
 800934c:	9a07      	ldr	r2, [sp, #28]
 800934e:	1b11      	subs	r1, r2, r4
 8009350:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009352:	b289      	uxth	r1, r1
 8009354:	1910      	adds	r0, r2, r4
 8009356:	9a06      	ldr	r2, [sp, #24]
 8009358:	9200      	str	r2, [sp, #0]
 800935a:	9a08      	ldr	r2, [sp, #32]
 800935c:	f003 fedc 	bl	800d118 <lv_txt_get_width>
 8009360:	9b05      	ldr	r3, [sp, #20]
 8009362:	9a05      	ldr	r2, [sp, #20]
 8009364:	889b      	ldrh	r3, [r3, #4]
 8009366:	8812      	ldrh	r2, [r2, #0]
 8009368:	3301      	adds	r3, #1
 800936a:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800936c:	b21b      	sxth	r3, r3
 800936e:	1a18      	subs	r0, r3, r0
 8009370:	0fc3      	lsrs	r3, r0, #31
 8009372:	1818      	adds	r0, r3, r0
 8009374:	1040      	asrs	r0, r0, #1
        pos.x += lv_area_get_width(coords) - line_width;
 8009376:	8833      	ldrh	r3, [r6, #0]
 8009378:	18c0      	adds	r0, r0, r3
 800937a:	8030      	strh	r0, [r6, #0]
 800937c:	003b      	movs	r3, r7
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 800937e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009380:	332c      	adds	r3, #44	; 0x2c
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	2aff      	cmp	r2, #255	; 0xff
 8009386:	d166      	bne.n	8009456 <lv_draw_label+0x202>
    lv_style_copy(&sel_style, &lv_style_plain_color);
 8009388:	ad1d      	add	r5, sp, #116	; 0x74
 800938a:	49ca      	ldr	r1, [pc, #808]	; (80096b4 <lv_draw_label+0x460>)
 800938c:	0028      	movs	r0, r5
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 800938e:	930e      	str	r3, [sp, #56]	; 0x38
    lv_style_copy(&sel_style, &lv_style_plain_color);
 8009390:	f7fe fce2 	bl	8007d58 <lv_style_copy>
    sel_style.body.main_color = sel_style.body.grad_color = style->text.sel_color;
 8009394:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009396:	80ab      	strh	r3, [r5, #4]
 8009398:	806b      	strh	r3, [r5, #2]
    uint16_t par_start = 0;
 800939a:	2300      	movs	r3, #0
 800939c:	930d      	str	r3, [sp, #52]	; 0x34
    while(txt[line_start] != '\0') {
 800939e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093a0:	5d1b      	ldrb	r3, [r3, r4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d15b      	bne.n	800945e <lv_draw_label+0x20a>
}
 80093a6:	b02d      	add	sp, #180	; 0xb4
 80093a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_txt_get_size(&p, txt, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX,
 80093aa:	2228      	movs	r2, #40	; 0x28
 80093ac:	5ebb      	ldrsh	r3, [r7, r2]
 80093ae:	9a06      	ldr	r2, [sp, #24]
 80093b0:	ac1d      	add	r4, sp, #116	; 0x74
 80093b2:	9202      	str	r2, [sp, #8]
 80093b4:	4ac0      	ldr	r2, [pc, #768]	; (80096b8 <lv_draw_label+0x464>)
 80093b6:	0020      	movs	r0, r4
 80093b8:	9201      	str	r2, [sp, #4]
 80093ba:	212a      	movs	r1, #42	; 0x2a
 80093bc:	5e7a      	ldrsh	r2, [r7, r1]
 80093be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093c0:	9200      	str	r2, [sp, #0]
 80093c2:	9a08      	ldr	r2, [sp, #32]
 80093c4:	f003 fef2 	bl	800d1ac <lv_txt_get_size>
        w = p.x;
 80093c8:	2200      	movs	r2, #0
 80093ca:	5ea3      	ldrsh	r3, [r4, r2]
 80093cc:	e75f      	b.n	800928e <lv_draw_label+0x3a>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 80093ce:	9a07      	ldr	r2, [sp, #28]
 80093d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d2:	4694      	mov	ip, r2
 80093d4:	4463      	add	r3, ip
 80093d6:	930e      	str	r3, [sp, #56]	; 0x38
 80093d8:	2328      	movs	r3, #40	; 0x28
 80093da:	5efa      	ldrsh	r2, [r7, r3]
 80093dc:	9b06      	ldr	r3, [sp, #24]
 80093de:	9908      	ldr	r1, [sp, #32]
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80093e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093e6:	f003 fe11 	bl	800d00c <lv_txt_get_next_line>
 80093ea:	9b07      	ldr	r3, [sp, #28]
        pos.y += line_height;
 80093ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 80093ee:	18c0      	adds	r0, r0, r3
        pos.y += line_height;
 80093f0:	8873      	ldrh	r3, [r6, #2]
 80093f2:	18d3      	adds	r3, r2, r3
 80093f4:	b21b      	sxth	r3, r3
 80093f6:	8073      	strh	r3, [r6, #2]
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 80093f8:	2d00      	cmp	r5, #0
 80093fa:	d00d      	beq.n	8009418 <lv_draw_label+0x1c4>
 80093fc:	4aaf      	ldr	r2, [pc, #700]	; (80096bc <lv_draw_label+0x468>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	db0a      	blt.n	8009418 <lv_draw_label+0x1c4>
 8009402:	682a      	ldr	r2, [r5, #0]
 8009404:	2a00      	cmp	r2, #0
 8009406:	da07      	bge.n	8009418 <lv_draw_label+0x1c4>
            hint->line_start = line_start;
 8009408:	9a07      	ldr	r2, [sp, #28]
 800940a:	602a      	str	r2, [r5, #0]
            hint->y          = pos.y - coords->y1;
 800940c:	9a05      	ldr	r2, [sp, #20]
 800940e:	2102      	movs	r1, #2
 8009410:	5e52      	ldrsh	r2, [r2, r1]
 8009412:	1a9b      	subs	r3, r3, r2
 8009414:	606b      	str	r3, [r5, #4]
            hint->coord_y    = coords->y1;
 8009416:	60aa      	str	r2, [r5, #8]
        if(txt[line_start] == '\0') return;
 8009418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800941a:	9c07      	ldr	r4, [sp, #28]
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d0c1      	beq.n	80093a6 <lv_draw_label+0x152>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8009422:	9007      	str	r0, [sp, #28]
 8009424:	e780      	b.n	8009328 <lv_draw_label+0xd4>
    else if(flag & LV_TXT_FLAG_RIGHT) {
 8009426:	9b06      	ldr	r3, [sp, #24]
 8009428:	071b      	lsls	r3, r3, #28
 800942a:	d5a7      	bpl.n	800937c <lv_draw_label+0x128>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 800942c:	2228      	movs	r2, #40	; 0x28
 800942e:	5ebb      	ldrsh	r3, [r7, r2]
 8009430:	9a07      	ldr	r2, [sp, #28]
 8009432:	1b11      	subs	r1, r2, r4
 8009434:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009436:	b289      	uxth	r1, r1
 8009438:	1910      	adds	r0, r2, r4
 800943a:	9a06      	ldr	r2, [sp, #24]
 800943c:	9200      	str	r2, [sp, #0]
 800943e:	9a08      	ldr	r2, [sp, #32]
 8009440:	f003 fe6a 	bl	800d118 <lv_txt_get_width>
 8009444:	9b05      	ldr	r3, [sp, #20]
 8009446:	9a05      	ldr	r2, [sp, #20]
 8009448:	889b      	ldrh	r3, [r3, #4]
 800944a:	8812      	ldrh	r2, [r2, #0]
 800944c:	3301      	adds	r3, #1
 800944e:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 8009450:	b21b      	sxth	r3, r3
 8009452:	1a18      	subs	r0, r3, r0
 8009454:	e78f      	b.n	8009376 <lv_draw_label+0x122>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 8009456:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009458:	4353      	muls	r3, r2
 800945a:	0a1b      	lsrs	r3, r3, #8
 800945c:	e794      	b.n	8009388 <lv_draw_label+0x134>
        if(offset != NULL) {
 800945e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d004      	beq.n	800946e <lv_draw_label+0x21a>
            pos.x += x_ofs;
 8009464:	aa19      	add	r2, sp, #100	; 0x64
 8009466:	8813      	ldrh	r3, [r2, #0]
 8009468:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800946a:	185b      	adds	r3, r3, r1
 800946c:	8013      	strh	r3, [r2, #0]
        i         = line_start;
 800946e:	941a      	str	r4, [sp, #104]	; 0x68
                        cmd_state = CMD_STATE_WAIT;
 8009470:	2400      	movs	r4, #0
 8009472:	e019      	b.n	80094a8 <lv_draw_label+0x254>
            letter      = lv_txt_encoded_next(txt, &i);
 8009474:	4d92      	ldr	r5, [pc, #584]	; (80096c0 <lv_draw_label+0x46c>)
 8009476:	a91a      	add	r1, sp, #104	; 0x68
 8009478:	682b      	ldr	r3, [r5, #0]
 800947a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800947c:	4798      	blx	r3
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800947e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009480:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009482:	2100      	movs	r1, #0
            letter      = lv_txt_encoded_next(txt, &i);
 8009484:	0006      	movs	r6, r0
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8009486:	1898      	adds	r0, r3, r2
 8009488:	682b      	ldr	r3, [r5, #0]
 800948a:	4798      	blx	r3
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800948c:	2101      	movs	r1, #1
 800948e:	9b06      	ldr	r3, [sp, #24]
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8009490:	0002      	movs	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8009492:	420b      	tst	r3, r1
 8009494:	d100      	bne.n	8009498 <lv_draw_label+0x244>
 8009496:	e09b      	b.n	80095d0 <lv_draw_label+0x37c>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8009498:	2e23      	cmp	r6, #35	; 0x23
 800949a:	d150      	bne.n	800953e <lv_draw_label+0x2ea>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800949c:	2c00      	cmp	r4, #0
 800949e:	d143      	bne.n	8009528 <lv_draw_label+0x2d4>
                        cmd_state = CMD_STATE_PAR;
 80094a0:	000c      	movs	r4, r1
                        par_start = i;
 80094a2:	ab14      	add	r3, sp, #80	; 0x50
 80094a4:	8b1b      	ldrh	r3, [r3, #24]
 80094a6:	930d      	str	r3, [sp, #52]	; 0x34
        while(i < line_end) {
 80094a8:	9b07      	ldr	r3, [sp, #28]
 80094aa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d8e1      	bhi.n	8009474 <lv_draw_label+0x220>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 80094b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094b2:	9a07      	ldr	r2, [sp, #28]
 80094b4:	9908      	ldr	r1, [sp, #32]
 80094b6:	189d      	adds	r5, r3, r2
 80094b8:	2328      	movs	r3, #40	; 0x28
 80094ba:	5efa      	ldrsh	r2, [r7, r3]
 80094bc:	9b06      	ldr	r3, [sp, #24]
 80094be:	0028      	movs	r0, r5
 80094c0:	9300      	str	r3, [sp, #0]
 80094c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094c4:	f003 fda2 	bl	800d00c <lv_txt_get_next_line>
 80094c8:	9b07      	ldr	r3, [sp, #28]
        pos.x = coords->x1;
 80094ca:	ac19      	add	r4, sp, #100	; 0x64
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 80094cc:	18c6      	adds	r6, r0, r3
        pos.x = coords->x1;
 80094ce:	9b05      	ldr	r3, [sp, #20]
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 80094d0:	0001      	movs	r1, r0
        pos.x = coords->x1;
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	8023      	strh	r3, [r4, #0]
        if(flag & LV_TXT_FLAG_CENTER) {
 80094d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d100      	bne.n	80094de <lv_draw_label+0x28a>
 80094dc:	e0ca      	b.n	8009674 <lv_draw_label+0x420>
            line_width =
 80094de:	2228      	movs	r2, #40	; 0x28
 80094e0:	5ebb      	ldrsh	r3, [r7, r2]
 80094e2:	9a06      	ldr	r2, [sp, #24]
 80094e4:	0028      	movs	r0, r5
 80094e6:	9200      	str	r2, [sp, #0]
 80094e8:	9a08      	ldr	r2, [sp, #32]
 80094ea:	f003 fe15 	bl	800d118 <lv_txt_get_width>
 80094ee:	9b05      	ldr	r3, [sp, #20]
 80094f0:	9a05      	ldr	r2, [sp, #20]
 80094f2:	889b      	ldrh	r3, [r3, #4]
 80094f4:	8812      	ldrh	r2, [r2, #0]
 80094f6:	3301      	adds	r3, #1
 80094f8:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 80094fa:	b21b      	sxth	r3, r3
 80094fc:	1a18      	subs	r0, r3, r0
 80094fe:	0fc3      	lsrs	r3, r0, #31
 8009500:	1818      	adds	r0, r3, r0
 8009502:	1040      	asrs	r0, r0, #1
            pos.x += lv_area_get_width(coords) - line_width;
 8009504:	8823      	ldrh	r3, [r4, #0]
 8009506:	18c0      	adds	r0, r0, r3
 8009508:	8020      	strh	r0, [r4, #0]
        pos.y += line_height;
 800950a:	aa19      	add	r2, sp, #100	; 0x64
 800950c:	8853      	ldrh	r3, [r2, #2]
 800950e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009510:	9c07      	ldr	r4, [sp, #28]
 8009512:	18cb      	adds	r3, r1, r3
 8009514:	b21b      	sxth	r3, r3
 8009516:	8053      	strh	r3, [r2, #2]
        if(pos.y > mask->y2) return;
 8009518:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800951a:	2106      	movs	r1, #6
 800951c:	5e52      	ldrsh	r2, [r2, r1]
 800951e:	429a      	cmp	r2, r3
 8009520:	da00      	bge.n	8009524 <lv_draw_label+0x2d0>
 8009522:	e740      	b.n	80093a6 <lv_draw_label+0x152>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8009524:	9607      	str	r6, [sp, #28]
 8009526:	e73a      	b.n	800939e <lv_draw_label+0x14a>
                    } else if(cmd_state == CMD_STATE_PAR) { /*Other start char in parameter escaped cmd. char */
 8009528:	2c01      	cmp	r4, #1
 800952a:	d100      	bne.n	800952e <lv_draw_label+0x2da>
 800952c:	e0bf      	b.n	80096ae <lv_draw_label+0x45a>
                    } else if(cmd_state == CMD_STATE_IN) { /*Command end */
 800952e:	2c02      	cmp	r4, #2
 8009530:	d09e      	beq.n	8009470 <lv_draw_label+0x21c>
            lv_color_t color = style->text.color;
 8009532:	4669      	mov	r1, sp
 8009534:	2048      	movs	r0, #72	; 0x48
 8009536:	8c3b      	ldrh	r3, [r7, #32]
 8009538:	1809      	adds	r1, r1, r0
 800953a:	800b      	strh	r3, [r1, #0]
 800953c:	e052      	b.n	80095e4 <lv_draw_label+0x390>
                if(cmd_state == CMD_STATE_PAR) {
 800953e:	2c01      	cmp	r4, #1
 8009540:	d146      	bne.n	80095d0 <lv_draw_label+0x37c>
                    if(letter == ' ') {
 8009542:	2e20      	cmp	r6, #32
 8009544:	d1b0      	bne.n	80094a8 <lv_draw_label+0x254>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 8009546:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009548:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800954a:	1a9b      	subs	r3, r3, r2
 800954c:	2b07      	cmp	r3, #7
 800954e:	d13d      	bne.n	80095cc <lv_draw_label+0x378>
                            memcpy(buf, &txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 8009550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009552:	ae1b      	add	r6, sp, #108	; 0x6c
 8009554:	1899      	adds	r1, r3, r2
 8009556:	0030      	movs	r0, r6
 8009558:	2206      	movs	r2, #6
 800955a:	f004 fb03 	bl	800db64 <memcpy>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800955e:	7830      	ldrb	r0, [r6, #0]
 8009560:	f7ff fe64 	bl	800922c <hex_char_to_num>
 8009564:	0004      	movs	r4, r0
 8009566:	7870      	ldrb	r0, [r6, #1]
 8009568:	f7ff fe60 	bl	800922c <hex_char_to_num>
 800956c:	0124      	lsls	r4, r4, #4
 800956e:	1824      	adds	r4, r4, r0
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 8009570:	78b0      	ldrb	r0, [r6, #2]
 8009572:	f7ff fe5b 	bl	800922c <hex_char_to_num>
 8009576:	0005      	movs	r5, r0
 8009578:	78f0      	ldrb	r0, [r6, #3]
 800957a:	f7ff fe57 	bl	800922c <hex_char_to_num>
 800957e:	012d      	lsls	r5, r5, #4
 8009580:	182d      	adds	r5, r5, r0
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 8009582:	7930      	ldrb	r0, [r6, #4]
 8009584:	f7ff fe52 	bl	800922c <hex_char_to_num>
 8009588:	9010      	str	r0, [sp, #64]	; 0x40
 800958a:	7970      	ldrb	r0, [r6, #5]
 800958c:	f7ff fe4e 	bl	800922c <hex_char_to_num>
 8009590:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009592:	2258      	movs	r2, #88	; 0x58
 8009594:	011e      	lsls	r6, r3, #4
 8009596:	1836      	adds	r6, r6, r0
 8009598:	08f6      	lsrs	r6, r6, #3
 800959a:	231f      	movs	r3, #31
 800959c:	0030      	movs	r0, r6
 800959e:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80095a0:	4018      	ands	r0, r3
 80095a2:	439e      	bics	r6, r3
 80095a4:	466b      	mov	r3, sp
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{b8 >> 3, g8 >> 2, r8 >> 3}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
    lv_color_t color;
    color.ch.blue  = (uint16_t)(b8 >> 3);
    color.ch.green = (uint16_t)(g8 >> 2);
 80095a6:	b2ed      	uxtb	r5, r5
 80095a8:	08ad      	lsrs	r5, r5, #2
 80095aa:	4306      	orrs	r6, r0
 80095ac:	0168      	lsls	r0, r5, #5
 80095ae:	4d45      	ldr	r5, [pc, #276]	; (80096c4 <lv_draw_label+0x470>)
    color.ch.red   = (uint16_t)(r8 >> 3);
 80095b0:	b2e4      	uxtb	r4, r4
 80095b2:	4035      	ands	r5, r6
 80095b4:	4305      	orrs	r5, r0
 80095b6:	08e4      	lsrs	r4, r4, #3
 80095b8:	02e0      	lsls	r0, r4, #11
 80095ba:	056c      	lsls	r4, r5, #21
 80095bc:	0d64      	lsrs	r4, r4, #21
 80095be:	4304      	orrs	r4, r0
 80095c0:	189b      	adds	r3, r3, r2
 80095c2:	801c      	strh	r4, [r3, #0]
 80095c4:	b2a3      	uxth	r3, r4
                            recolor.full = style->text.color.full;
 80095c6:	9310      	str	r3, [sp, #64]	; 0x40
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 80095c8:	2402      	movs	r4, #2
 80095ca:	e76d      	b.n	80094a8 <lv_draw_label+0x254>
                            recolor.full = style->text.color.full;
 80095cc:	8c3b      	ldrh	r3, [r7, #32]
 80095ce:	e7fa      	b.n	80095c6 <lv_draw_label+0x372>
            if(cmd_state == CMD_STATE_IN) color = recolor;
 80095d0:	2140      	movs	r1, #64	; 0x40
 80095d2:	466b      	mov	r3, sp
 80095d4:	2048      	movs	r0, #72	; 0x48
 80095d6:	185b      	adds	r3, r3, r1
 80095d8:	4669      	mov	r1, sp
 80095da:	881b      	ldrh	r3, [r3, #0]
 80095dc:	1809      	adds	r1, r1, r0
 80095de:	800b      	strh	r3, [r1, #0]
 80095e0:	2c02      	cmp	r4, #2
 80095e2:	d1a6      	bne.n	8009532 <lv_draw_label+0x2de>
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 80095e4:	0031      	movs	r1, r6
 80095e6:	9808      	ldr	r0, [sp, #32]
 80095e8:	f002 fc10 	bl	800be0c <lv_font_get_glyph_width>
 80095ec:	b203      	sxth	r3, r0
 80095ee:	9315      	str	r3, [sp, #84]	; 0x54
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 80095f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80095f2:	4b35      	ldr	r3, [pc, #212]	; (80096c8 <lv_draw_label+0x474>)
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 80095f4:	0005      	movs	r5, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d023      	beq.n	8009642 <lv_draw_label+0x3ee>
 80095fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d020      	beq.n	8009642 <lv_draw_label+0x3ee>
                int char_ind = lv_encoded_get_char_id(txt, i);
 8009600:	4b32      	ldr	r3, [pc, #200]	; (80096cc <lv_draw_label+0x478>)
 8009602:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009608:	4798      	blx	r3
                if(char_ind > sel_start && char_ind <= sel_end) {
 800960a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800960c:	4298      	cmp	r0, r3
 800960e:	dd18      	ble.n	8009642 <lv_draw_label+0x3ee>
 8009610:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009612:	4298      	cmp	r0, r3
 8009614:	dc15      	bgt.n	8009642 <lv_draw_label+0x3ee>
                    sel_coords.x1 = pos.x;
 8009616:	ab19      	add	r3, sp, #100	; 0x64
 8009618:	2200      	movs	r2, #0
 800961a:	5e99      	ldrsh	r1, [r3, r2]
 800961c:	a81b      	add	r0, sp, #108	; 0x6c
 800961e:	8001      	strh	r1, [r0, #0]
                    sel_coords.y1 = pos.y;
 8009620:	2202      	movs	r2, #2
 8009622:	5e9b      	ldrsh	r3, [r3, r2]
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 8009624:	3901      	subs	r1, #1
                    sel_coords.y1 = pos.y;
 8009626:	8043      	strh	r3, [r0, #2]
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 8009628:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
                    sel_coords.y2 = pos.y + line_height - 1;
 800962a:	3b01      	subs	r3, #1
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 800962c:	1852      	adds	r2, r2, r1
 800962e:	18aa      	adds	r2, r5, r2
 8009630:	8082      	strh	r2, [r0, #4]
                    sel_coords.y2 = pos.y + line_height - 1;
 8009632:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 8009634:	990c      	ldr	r1, [sp, #48]	; 0x30
                    sel_coords.y2 = pos.y + line_height - 1;
 8009636:	18d3      	adds	r3, r2, r3
 8009638:	80c3      	strh	r3, [r0, #6]
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 800963a:	aa1d      	add	r2, sp, #116	; 0x74
 800963c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800963e:	f000 f8af 	bl	80097a0 <lv_draw_rect>
            lv_draw_letter(&pos, mask, font, letter, color, opa);
 8009642:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009644:	2148      	movs	r1, #72	; 0x48
 8009646:	9301      	str	r3, [sp, #4]
 8009648:	466b      	mov	r3, sp
 800964a:	185a      	adds	r2, r3, r1
 800964c:	8812      	ldrh	r2, [r2, #0]
 800964e:	a819      	add	r0, sp, #100	; 0x64
 8009650:	801a      	strh	r2, [r3, #0]
 8009652:	9a08      	ldr	r2, [sp, #32]
 8009654:	0033      	movs	r3, r6
 8009656:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009658:	f7ff f9ae 	bl	80089b8 <lv_draw_letter>
            if(letter_w > 0) {
 800965c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800965e:	2b00      	cmp	r3, #0
 8009660:	dc00      	bgt.n	8009664 <lv_draw_label+0x410>
 8009662:	e721      	b.n	80094a8 <lv_draw_label+0x254>
                pos.x += letter_w + style->text.letter_space;
 8009664:	ab14      	add	r3, sp, #80	; 0x50
 8009666:	8a9b      	ldrh	r3, [r3, #20]
 8009668:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800966a:	189b      	adds	r3, r3, r2
 800966c:	18ed      	adds	r5, r5, r3
 800966e:	ab14      	add	r3, sp, #80	; 0x50
 8009670:	829d      	strh	r5, [r3, #20]
 8009672:	e719      	b.n	80094a8 <lv_draw_label+0x254>
        else if(flag & LV_TXT_FLAG_RIGHT) {
 8009674:	9b06      	ldr	r3, [sp, #24]
 8009676:	071b      	lsls	r3, r3, #28
 8009678:	d400      	bmi.n	800967c <lv_draw_label+0x428>
 800967a:	e746      	b.n	800950a <lv_draw_label+0x2b6>
            line_width =
 800967c:	2228      	movs	r2, #40	; 0x28
 800967e:	5ebb      	ldrsh	r3, [r7, r2]
 8009680:	9a06      	ldr	r2, [sp, #24]
 8009682:	0028      	movs	r0, r5
 8009684:	9200      	str	r2, [sp, #0]
 8009686:	9a08      	ldr	r2, [sp, #32]
 8009688:	f003 fd46 	bl	800d118 <lv_txt_get_width>
 800968c:	9b05      	ldr	r3, [sp, #20]
 800968e:	9a05      	ldr	r2, [sp, #20]
 8009690:	889b      	ldrh	r3, [r3, #4]
 8009692:	8812      	ldrh	r2, [r2, #0]
 8009694:	3301      	adds	r3, #1
 8009696:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 8009698:	b21b      	sxth	r3, r3
 800969a:	1a18      	subs	r0, r3, r0
 800969c:	e732      	b.n	8009504 <lv_draw_label+0x2b0>
    lv_coord_t x_ofs = 0;
 800969e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80096a0:	930f      	str	r3, [sp, #60]	; 0x3c
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 80096a2:	2d00      	cmp	r5, #0
 80096a4:	d000      	beq.n	80096a8 <lv_draw_label+0x454>
 80096a6:	e617      	b.n	80092d8 <lv_draw_label+0x84>
    lv_coord_t x_ofs = 0;
 80096a8:	950f      	str	r5, [sp, #60]	; 0x3c
    uint32_t line_start     = 0;
 80096aa:	2400      	movs	r4, #0
 80096ac:	e630      	b.n	8009310 <lv_draw_label+0xbc>
                        cmd_state = CMD_STATE_WAIT;
 80096ae:	2400      	movs	r4, #0
 80096b0:	e73f      	b.n	8009532 <lv_draw_label+0x2de>
 80096b2:	46c0      	nop			; (mov r8, r8)
 80096b4:	20005338 	.word	0x20005338
 80096b8:	00007c18 	.word	0x00007c18
 80096bc:	fffffc00 	.word	0xfffffc00
 80096c0:	20000044 	.word	0x20000044
 80096c4:	fffff81f 	.word	0xfffff81f
 80096c8:	0000ffff 	.word	0x0000ffff
 80096cc:	20000040 	.word	0x20000040

080096d0 <lv_color_mix>:
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 80096d0:	23ff      	movs	r3, #255	; 0xff
{
 80096d2:	b5f0      	push	{r4, r5, r6, r7, lr}
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 80096d4:	261f      	movs	r6, #31
 80096d6:	b297      	uxth	r7, r2
 80096d8:	0404      	lsls	r4, r0, #16
 80096da:	1a9a      	subs	r2, r3, r2
 80096dc:	040b      	lsls	r3, r1, #16
 80096de:	b292      	uxth	r2, r2
 80096e0:	0ee4      	lsrs	r4, r4, #27
 80096e2:	0edb      	lsrs	r3, r3, #27
 80096e4:	437c      	muls	r4, r7
 80096e6:	4353      	muls	r3, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 80096e8:	0545      	lsls	r5, r0, #21
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 80096ea:	18e4      	adds	r4, r4, r3
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 80096ec:	054b      	lsls	r3, r1, #21
 80096ee:	0ead      	lsrs	r5, r5, #26
 80096f0:	0e9b      	lsrs	r3, r3, #26
 80096f2:	437d      	muls	r5, r7
 80096f4:	4353      	muls	r3, r2
 80096f6:	18ed      	adds	r5, r5, r3
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 80096f8:	06c3      	lsls	r3, r0, #27
 80096fa:	06c8      	lsls	r0, r1, #27
 80096fc:	0edb      	lsrs	r3, r3, #27
 80096fe:	0ec0      	lsrs	r0, r0, #27
 8009700:	437b      	muls	r3, r7
 8009702:	4350      	muls	r0, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8009704:	04ad      	lsls	r5, r5, #18
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8009706:	1818      	adds	r0, r3, r0
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8009708:	0a24      	lsrs	r4, r4, #8
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800970a:	0a00      	lsrs	r0, r0, #8
    return ret;
 800970c:	0ead      	lsrs	r5, r5, #26
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800970e:	4034      	ands	r4, r6
    return ret;
 8009710:	016d      	lsls	r5, r5, #5
 8009712:	4030      	ands	r0, r6
 8009714:	4328      	orrs	r0, r5
 8009716:	02e4      	lsls	r4, r4, #11
 8009718:	4320      	orrs	r0, r4
}
 800971a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800971c <lv_draw_cont_radius_corr>:
}

#endif

static uint16_t lv_draw_cont_radius_corr(uint16_t r, lv_coord_t w, lv_coord_t h)
{
 800971c:	b570      	push	{r4, r5, r6, lr}
 800971e:	000e      	movs	r6, r1
 8009720:	0015      	movs	r5, r2
 8009722:	0004      	movs	r4, r0
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009724:	f7fe f94a 	bl	80079bc <lv_refr_get_disp_refreshing>
 8009728:	f002 fd3e 	bl	800c1a8 <lv_disp_get_antialiasing>

    if(r >= (w >> 1)) {
 800972c:	1076      	asrs	r6, r6, #1
 800972e:	42b4      	cmp	r4, r6
 8009730:	db04      	blt.n	800973c <lv_draw_cont_radius_corr+0x20>
        r = (w >> 1);
 8009732:	b2b4      	uxth	r4, r6
        if(r != 0) r--;
 8009734:	2c00      	cmp	r4, #0
 8009736:	d001      	beq.n	800973c <lv_draw_cont_radius_corr+0x20>
 8009738:	3c01      	subs	r4, #1
 800973a:	b2a4      	uxth	r4, r4
    }
    if(r >= (h >> 1)) {
 800973c:	106d      	asrs	r5, r5, #1
 800973e:	42ac      	cmp	r4, r5
 8009740:	db04      	blt.n	800974c <lv_draw_cont_radius_corr+0x30>
        r = (h >> 1);
 8009742:	b2ac      	uxth	r4, r5
        if(r != 0) r--;
 8009744:	2c00      	cmp	r4, #0
 8009746:	d005      	beq.n	8009754 <lv_draw_cont_radius_corr+0x38>
 8009748:	3c01      	subs	r4, #1
 800974a:	b2a4      	uxth	r4, r4
    }

    if(r > 0) r -= aa;
 800974c:	2c00      	cmp	r4, #0
 800974e:	d001      	beq.n	8009754 <lv_draw_cont_radius_corr+0x38>
 8009750:	1a24      	subs	r4, r4, r0
 8009752:	b2a4      	uxth	r4, r4

    return r;
}
 8009754:	0020      	movs	r0, r4
 8009756:	bd70      	pop	{r4, r5, r6, pc}

08009758 <antialias_get_opa_circ>:
 * @param px_id index of pixel on the line segment
 * @param line_opa opacity of the lien (it will be the max opacity)
 * @return the desired opacity of the pixel
 */
static lv_opa_t antialias_get_opa_circ(lv_coord_t seg, lv_coord_t px_id, lv_opa_t opa)
{
 8009758:	b510      	push	{r4, lr}
 800975a:	0003      	movs	r3, r0
 800975c:	0014      	movs	r4, r2
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 1
    if(seg == 1) return 170;
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 2
    if(seg == 2) return (opa_map2[px_id] * opa) >> 8;
 800975e:	2802      	cmp	r0, #2
 8009760:	d104      	bne.n	800976c <antialias_get_opa_circ+0x14>
 8009762:	4b0b      	ldr	r3, [pc, #44]	; (8009790 <antialias_get_opa_circ+0x38>)
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 3
    if(seg == 3) return (opa_map3[px_id] * opa) >> 8;
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 4
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 8009764:	5c58      	ldrb	r0, [r3, r1]
#endif

    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 8009766:	4360      	muls	r0, r4
 8009768:	0a00      	lsrs	r0, r0, #8
}
 800976a:	bd10      	pop	{r4, pc}
    if(seg == 3) return (opa_map3[px_id] * opa) >> 8;
 800976c:	2803      	cmp	r0, #3
 800976e:	d101      	bne.n	8009774 <antialias_get_opa_circ+0x1c>
 8009770:	4b08      	ldr	r3, [pc, #32]	; (8009794 <antialias_get_opa_circ+0x3c>)
 8009772:	e7f7      	b.n	8009764 <antialias_get_opa_circ+0xc>
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 8009774:	2804      	cmp	r0, #4
 8009776:	d101      	bne.n	800977c <antialias_get_opa_circ+0x24>
 8009778:	4b07      	ldr	r3, [pc, #28]	; (8009798 <antialias_get_opa_circ+0x40>)
 800977a:	e7f3      	b.n	8009764 <antialias_get_opa_circ+0xc>
    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
 800977c:	2007      	movs	r0, #7
 800977e:	4348      	muls	r0, r1
 8009780:	1e59      	subs	r1, r3, #1
 8009782:	f7f6 fced 	bl	8000160 <__udivsi3>
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 8009786:	4b05      	ldr	r3, [pc, #20]	; (800979c <antialias_get_opa_circ+0x44>)
 8009788:	b2c0      	uxtb	r0, r0
 800978a:	5c18      	ldrb	r0, [r3, r0]
 800978c:	e7eb      	b.n	8009766 <antialias_get_opa_circ+0xe>
 800978e:	46c0      	nop			; (mov r8, r8)
 8009790:	0800dfdd 	.word	0x0800dfdd
 8009794:	0800dfdf 	.word	0x0800dfdf
 8009798:	0800dfe2 	.word	0x0800dfe2
 800979c:	0800dfe6 	.word	0x0800dfe6

080097a0 <lv_draw_rect>:
{
 80097a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097a2:	b0ab      	sub	sp, #172	; 0xac
 80097a4:	9204      	str	r2, [sp, #16]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 80097a6:	88c2      	ldrh	r2, [r0, #6]
 80097a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80097aa:	8843      	ldrh	r3, [r0, #2]
 80097ac:	3201      	adds	r2, #1
 80097ae:	1ad2      	subs	r2, r2, r3
 80097b0:	b212      	sxth	r2, r2
 80097b2:	0007      	movs	r7, r0
 80097b4:	9103      	str	r1, [sp, #12]
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 80097b6:	2a00      	cmp	r2, #0
 80097b8:	dc01      	bgt.n	80097be <lv_draw_rect+0x1e>
 80097ba:	f000 fe72 	bl	800a4a2 <lv_draw_rect+0xd02>
    return area_p->x2 - area_p->x1 + 1;
 80097be:	8881      	ldrh	r1, [r0, #4]
 80097c0:	8803      	ldrh	r3, [r0, #0]
 80097c2:	3101      	adds	r1, #1
 80097c4:	1ac9      	subs	r1, r1, r3
 80097c6:	b209      	sxth	r1, r1
 80097c8:	2900      	cmp	r1, #0
 80097ca:	dc01      	bgt.n	80097d0 <lv_draw_rect+0x30>
 80097cc:	f000 fe69 	bl	800a4a2 <lv_draw_rect+0xd02>
    if(style->body.shadow.width != 0) {
 80097d0:	9b04      	ldr	r3, [sp, #16]
 80097d2:	2012      	movs	r0, #18
 80097d4:	5e1b      	ldrsh	r3, [r3, r0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d100      	bne.n	80097dc <lv_draw_rect+0x3c>
 80097da:	e2cb      	b.n	8009d74 <lv_draw_rect+0x5d4>
    radius            = lv_draw_cont_radius_corr(radius, width, height);
 80097dc:	9b04      	ldr	r3, [sp, #16]
    memcpy(dest, src, sizeof(lv_area_t));
 80097de:	ac20      	add	r4, sp, #128	; 0x80
 80097e0:	88d8      	ldrh	r0, [r3, #6]
 80097e2:	f7ff ff9b 	bl	800971c <lv_draw_cont_radius_corr>
 80097e6:	0005      	movs	r5, r0
 80097e8:	0039      	movs	r1, r7
 80097ea:	2208      	movs	r2, #8
 80097ec:	0020      	movs	r0, r4
 80097ee:	f004 f9b9 	bl	800db64 <memcpy>
    area_tmp.x1 += radius;
 80097f2:	8823      	ldrh	r3, [r4, #0]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 80097f4:	0021      	movs	r1, r4
    area_tmp.x1 += radius;
 80097f6:	18eb      	adds	r3, r5, r3
 80097f8:	8023      	strh	r3, [r4, #0]
    area_tmp.x2 -= radius;
 80097fa:	88a3      	ldrh	r3, [r4, #4]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 80097fc:	9803      	ldr	r0, [sp, #12]
    area_tmp.x2 -= radius;
 80097fe:	1b5b      	subs	r3, r3, r5
 8009800:	80a3      	strh	r3, [r4, #4]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8009802:	f002 fe59 	bl	800c4b8 <lv_area_is_in>
 8009806:	2800      	cmp	r0, #0
 8009808:	d000      	beq.n	800980c <lv_draw_rect+0x6c>
 800980a:	e2b3      	b.n	8009d74 <lv_draw_rect+0x5d4>
 800980c:	2208      	movs	r2, #8
 800980e:	0039      	movs	r1, r7
 8009810:	0020      	movs	r0, r4
 8009812:	f004 f9a7 	bl	800db64 <memcpy>
    area_tmp.y1 += radius;
 8009816:	8863      	ldrh	r3, [r4, #2]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8009818:	0021      	movs	r1, r4
    area_tmp.y1 += radius;
 800981a:	18eb      	adds	r3, r5, r3
 800981c:	8063      	strh	r3, [r4, #2]
    area_tmp.y2 -= radius;
 800981e:	88e3      	ldrh	r3, [r4, #6]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8009820:	9803      	ldr	r0, [sp, #12]
    area_tmp.y2 -= radius;
 8009822:	1b5d      	subs	r5, r3, r5
 8009824:	80e5      	strh	r5, [r4, #6]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8009826:	f002 fe47 	bl	800c4b8 <lv_area_is_in>
 800982a:	1e06      	subs	r6, r0, #0
 800982c:	d000      	beq.n	8009830 <lv_draw_rect+0x90>
 800982e:	e2a1      	b.n	8009d74 <lv_draw_rect+0x5d4>
    if(style->body.shadow.type == LV_SHADOW_FULL) {
 8009830:	9b04      	ldr	r3, [sp, #16]
 8009832:	7d1b      	ldrb	r3, [r3, #20]
 8009834:	2b01      	cmp	r3, #1
 8009836:	d000      	beq.n	800983a <lv_draw_rect+0x9a>
 8009838:	e219      	b.n	8009c6e <lv_draw_rect+0x4ce>
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800983a:	f7fe f8bf 	bl	80079bc <lv_refr_get_disp_refreshing>
 800983e:	f002 fcb3 	bl	800c1a8 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 8009842:	9b04      	ldr	r3, [sp, #16]
    return area_p->x2 - area_p->x1 + 1;
 8009844:	88b9      	ldrh	r1, [r7, #4]
 8009846:	2212      	movs	r2, #18
 8009848:	5e9b      	ldrsh	r3, [r3, r2]
    return area_p->y2 - area_p->y1 + 1;
 800984a:	88fa      	ldrh	r2, [r7, #6]
 800984c:	9307      	str	r3, [sp, #28]
 800984e:	887b      	ldrh	r3, [r7, #2]
 8009850:	3201      	adds	r2, #1
 8009852:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 8009854:	883b      	ldrh	r3, [r7, #0]
 8009856:	3101      	adds	r1, #1
 8009858:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800985a:	9b04      	ldr	r3, [sp, #16]
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800985c:	0004      	movs	r4, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800985e:	b212      	sxth	r2, r2
 8009860:	b209      	sxth	r1, r1
 8009862:	88d8      	ldrh	r0, [r3, #6]
 8009864:	f7ff ff5a 	bl	800971c <lv_draw_cont_radius_corr>
    radius += aa;
 8009868:	b2a3      	uxth	r3, r4
 800986a:	18c0      	adds	r0, r0, r3
 800986c:	9305      	str	r3, [sp, #20]
 800986e:	b283      	uxth	r3, r0
 8009870:	9308      	str	r3, [sp, #32]
 8009872:	466b      	mov	r3, sp
 8009874:	2220      	movs	r2, #32
 8009876:	5e9b      	ldrsh	r3, [r3, r2]
 8009878:	930e      	str	r3, [sp, #56]	; 0x38
    int16_t filter_width = 2 * swidth + 1;
 800987a:	466b      	mov	r3, sp
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 800987c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    int16_t filter_width = 2 * swidth + 1;
 800987e:	8b9b      	ldrh	r3, [r3, #28]
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8009880:	4694      	mov	ip, r2
    int16_t filter_width = 2 * swidth + 1;
 8009882:	9314      	str	r3, [sp, #80]	; 0x50
 8009884:	005b      	lsls	r3, r3, #1
 8009886:	3301      	adds	r3, #1
 8009888:	b21b      	sxth	r3, r3
 800988a:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 800988c:	9b07      	ldr	r3, [sp, #28]
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 800988e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8009890:	4463      	add	r3, ip
 8009892:	930f      	str	r3, [sp, #60]	; 0x3c
 8009894:	1d18      	adds	r0, r3, #4
 8009896:	2303      	movs	r3, #3
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 8009898:	18d4      	adds	r4, r2, r3
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 800989a:	4398      	bics	r0, r3
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 800989c:	439c      	bics	r4, r3
    curve_x_size *= sizeof(lv_coord_t);
 800989e:	0045      	lsls	r5, r0, #1
    line_1d_blur_size *= sizeof(uint32_t);
 80098a0:	00a4      	lsls	r4, r4, #2
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 80098a2:	1964      	adds	r4, r4, r5
 80098a4:	1900      	adds	r0, r0, r4
 80098a6:	f7fe fe57 	bl	8008558 <lv_draw_get_buf>
    uint32_t * line_1d_blur = (uint32_t *)&draw_buf[curve_x_size];
 80098aa:	1943      	adds	r3, r0, r5
 80098ac:	9310      	str	r3, [sp, #64]	; 0x40
    memset(curve_x, 0, curve_x_size);
 80098ae:	002a      	movs	r2, r5
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 80098b0:	1903      	adds	r3, r0, r4
    memset(curve_x, 0, curve_x_size);
 80098b2:	0031      	movs	r1, r6
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 80098b4:	9311      	str	r3, [sp, #68]	; 0x44
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 80098b6:	9006      	str	r0, [sp, #24]
    memset(curve_x, 0, curve_x_size);
 80098b8:	f004 f95d 	bl	800db76 <memset>
    lv_circ_init(&circ, &circ_tmp, radius);
 80098bc:	210a      	movs	r1, #10
 80098be:	ab1c      	add	r3, sp, #112	; 0x70
 80098c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098c2:	18c9      	adds	r1, r1, r3
 80098c4:	a81f      	add	r0, sp, #124	; 0x7c
 80098c6:	f002 fe16 	bl	800c4f6 <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 80098ca:	ac1f      	add	r4, sp, #124	; 0x7c
 80098cc:	0020      	movs	r0, r4
 80098ce:	f002 fe19 	bl	800c504 <lv_circ_cont>
 80098d2:	2800      	cmp	r0, #0
 80098d4:	d156      	bne.n	8009984 <lv_draw_rect+0x1e4>
 80098d6:	9b04      	ldr	r3, [sp, #16]
 80098d8:	7a1c      	ldrb	r4, [r3, #8]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 80098da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098dc:	2bff      	cmp	r3, #255	; 0xff
 80098de:	d001      	beq.n	80098e4 <lv_draw_rect+0x144>
 80098e0:	435c      	muls	r4, r3
 80098e2:	0a24      	lsrs	r4, r4, #8
                             (filter_width * filter_width);
 80098e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098e6:	2600      	movs	r6, #0
 80098e8:	001a      	movs	r2, r3
 80098ea:	435b      	muls	r3, r3
 80098ec:	0065      	lsls	r5, r4, #1
 80098ee:	930a      	str	r3, [sp, #40]	; 0x28
 80098f0:	0213      	lsls	r3, r2, #8
 80098f2:	435d      	muls	r5, r3
 80098f4:	0264      	lsls	r4, r4, #9
 80098f6:	4264      	negs	r4, r4
    for(line = 0; line < filter_width; line++) {
 80098f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098fa:	b233      	sxth	r3, r6
 80098fc:	429a      	cmp	r2, r3
 80098fe:	dc56      	bgt.n	80099ae <lv_draw_rect+0x20e>
    ofs_rb.x = coords->x2 - radius - aa;
 8009900:	88bb      	ldrh	r3, [r7, #4]
 8009902:	9a08      	ldr	r2, [sp, #32]
 8009904:	1a9b      	subs	r3, r3, r2
 8009906:	9a05      	ldr	r2, [sp, #20]
 8009908:	1a9b      	subs	r3, r3, r2
 800990a:	b29b      	uxth	r3, r3
 800990c:	9315      	str	r3, [sp, #84]	; 0x54
 800990e:	2254      	movs	r2, #84	; 0x54
 8009910:	466b      	mov	r3, sp
 8009912:	189b      	adds	r3, r3, r2
 8009914:	2200      	movs	r2, #0
 8009916:	5e9b      	ldrsh	r3, [r3, r2]
    ofs_rb.y = coords->y2 - radius - aa;
 8009918:	9a08      	ldr	r2, [sp, #32]
    ofs_rb.x = coords->x2 - radius - aa;
 800991a:	9319      	str	r3, [sp, #100]	; 0x64
    ofs_rb.y = coords->y2 - radius - aa;
 800991c:	88fb      	ldrh	r3, [r7, #6]
 800991e:	1a9b      	subs	r3, r3, r2
 8009920:	9a05      	ldr	r2, [sp, #20]
 8009922:	1a9b      	subs	r3, r3, r2
 8009924:	b29b      	uxth	r3, r3
 8009926:	930a      	str	r3, [sp, #40]	; 0x28
 8009928:	466b      	mov	r3, sp
 800992a:	2228      	movs	r2, #40	; 0x28
 800992c:	5e9b      	ldrsh	r3, [r3, r2]
    ofs_rt.y = coords->y1 + radius + aa;
 800992e:	9a05      	ldr	r2, [sp, #20]
    ofs_rb.y = coords->y2 - radius - aa;
 8009930:	9316      	str	r3, [sp, #88]	; 0x58
    ofs_rt.y = coords->y1 + radius + aa;
 8009932:	887b      	ldrh	r3, [r7, #2]
 8009934:	18d3      	adds	r3, r2, r3
 8009936:	9a08      	ldr	r2, [sp, #32]
 8009938:	18d3      	adds	r3, r2, r3
 800993a:	b29b      	uxth	r3, r3
 800993c:	930c      	str	r3, [sp, #48]	; 0x30
 800993e:	466b      	mov	r3, sp
 8009940:	2230      	movs	r2, #48	; 0x30
 8009942:	5e9b      	ldrsh	r3, [r3, r2]
    ofs_lb.x = coords->x1 + radius + aa;
 8009944:	9a05      	ldr	r2, [sp, #20]
    ofs_rt.y = coords->y1 + radius + aa;
 8009946:	9317      	str	r3, [sp, #92]	; 0x5c
    ofs_lb.x = coords->x1 + radius + aa;
 8009948:	883b      	ldrh	r3, [r7, #0]
 800994a:	18d3      	adds	r3, r2, r3
 800994c:	9a08      	ldr	r2, [sp, #32]
 800994e:	18d3      	adds	r3, r2, r3
 8009950:	b29b      	uxth	r3, r3
 8009952:	9318      	str	r3, [sp, #96]	; 0x60
 8009954:	2260      	movs	r2, #96	; 0x60
 8009956:	466b      	mov	r3, sp
 8009958:	189b      	adds	r3, r3, r2
 800995a:	2200      	movs	r2, #0
 800995c:	5e9b      	ldrsh	r3, [r3, r2]
 800995e:	931a      	str	r3, [sp, #104]	; 0x68
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
 8009960:	2300      	movs	r3, #0
 8009962:	9309      	str	r3, [sp, #36]	; 0x24
 8009964:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009968:	4293      	cmp	r3, r2
 800996a:	da00      	bge.n	800996e <lv_draw_rect+0x1ce>
 800996c:	e202      	b.n	8009d74 <lv_draw_rect+0x5d4>
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 800996e:	9b06      	ldr	r3, [sp, #24]
 8009970:	0050      	lsls	r0, r2, #1
 8009972:	1818      	adds	r0, r3, r0
 8009974:	2300      	movs	r3, #0
 8009976:	9305      	str	r3, [sp, #20]
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8009978:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800997a:	425e      	negs	r6, r3
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 800997c:	9b07      	ldr	r3, [sp, #28]
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 800997e:	b236      	sxth	r6, r6
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 8009980:	425c      	negs	r4, r3
 8009982:	e0e8      	b.n	8009b56 <lv_draw_rect+0x3b6>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 8009984:	2300      	movs	r3, #0
 8009986:	5ee2      	ldrsh	r2, [r4, r3]
 8009988:	2102      	movs	r1, #2
 800998a:	5e63      	ldrsh	r3, [r4, r1]
 800998c:	9906      	ldr	r1, [sp, #24]
 800998e:	005b      	lsls	r3, r3, #1
 8009990:	525a      	strh	r2, [r3, r1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 8009992:	2302      	movs	r3, #2
 8009994:	5ee2      	ldrsh	r2, [r4, r3]
 8009996:	2100      	movs	r1, #0
 8009998:	5e63      	ldrsh	r3, [r4, r1]
 800999a:	9906      	ldr	r1, [sp, #24]
 800999c:	005b      	lsls	r3, r3, #1
 800999e:	525a      	strh	r2, [r3, r1]
        lv_circ_next(&circ, &circ_tmp);
 80099a0:	210a      	movs	r1, #10
 80099a2:	ab1c      	add	r3, sp, #112	; 0x70
 80099a4:	18c9      	adds	r1, r1, r3
 80099a6:	0020      	movs	r0, r4
 80099a8:	f002 fdb6 	bl	800c518 <lv_circ_next>
 80099ac:	e78d      	b.n	80098ca <lv_draw_rect+0x12a>
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2) << SHADOW_OPA_EXTRA_PRECISION) /
 80099ae:	0028      	movs	r0, r5
 80099b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80099b2:	f7f6 fbd5 	bl	8000160 <__udivsi3>
 80099b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099b8:	00b2      	lsls	r2, r6, #2
 80099ba:	5098      	str	r0, [r3, r2]
 80099bc:	3601      	adds	r6, #1
 80099be:	192d      	adds	r5, r5, r4
 80099c0:	e79a      	b.n	80098f8 <lv_draw_rect+0x158>
                if(line + line_rel < 0) { /*Below the radius, here is the blur of the edge */
 80099c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099c4:	18d3      	adds	r3, r2, r3
 80099c6:	d400      	bmi.n	80099ca <lv_draw_rect+0x22a>
 80099c8:	e0aa      	b.n	8009b20 <lv_draw_rect+0x380>
                    col_rel = radius - curve_x[line] - col;
 80099ca:	8803      	ldrh	r3, [r0, #0]
 80099cc:	9d08      	ldr	r5, [sp, #32]
 80099ce:	1aeb      	subs	r3, r5, r3
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 80099d0:	9d05      	ldr	r5, [sp, #20]
 80099d2:	1b5b      	subs	r3, r3, r5
 80099d4:	b21b      	sxth	r3, r3
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 80099d6:	42a3      	cmp	r3, r4
 80099d8:	db00      	blt.n	80099dc <lv_draw_rect+0x23c>
 80099da:	e0aa      	b.n	8009b32 <lv_draw_rect+0x392>
                    if(line_rel == -swidth)
 80099dc:	1b12      	subs	r2, r2, r4
 80099de:	4253      	negs	r3, r2
 80099e0:	4153      	adcs	r3, r2
 80099e2:	b2db      	uxtb	r3, r3
            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 80099e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80099e6:	9d05      	ldr	r5, [sp, #20]
 80099e8:	0a09      	lsrs	r1, r1, #8
 80099ea:	5551      	strb	r1, [r2, r5]
 80099ec:	002a      	movs	r2, r5
 80099ee:	3201      	adds	r2, #1
            if(line_ready) {
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d100      	bne.n	80099f6 <lv_draw_rect+0x256>
 80099f4:	e0ad      	b.n	8009b52 <lv_draw_rect+0x3b2>
                col++; /*To make this line to the last one ( drawing will go to '< col')*/
 80099f6:	b293      	uxth	r3, r2
 80099f8:	9305      	str	r3, [sp, #20]
        point_rt.y = ofs_rt.y - line;
 80099fa:	466a      	mov	r2, sp
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 80099fc:	8801      	ldrh	r1, [r0, #0]
        point_rt.y = ofs_rt.y - line;
 80099fe:	2030      	movs	r0, #48	; 0x30
 8009a00:	5e12      	ldrsh	r2, [r2, r0]
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 8009a02:	9b15      	ldr	r3, [sp, #84]	; 0x54
        point_rt.y = ofs_rt.y - line;
 8009a04:	920d      	str	r2, [sp, #52]	; 0x34
        point_rb.y = ofs_rb.y + line;
 8009a06:	466a      	mov	r2, sp
 8009a08:	2628      	movs	r6, #40	; 0x28
 8009a0a:	5f96      	ldrsh	r6, [r2, r6]
        point_lt.x = ofs_lt.x - curve_x[line] - 1;
 8009a0c:	9a18      	ldr	r2, [sp, #96]	; 0x60
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 8009a0e:	3301      	adds	r3, #1
        point_lt.x = ofs_lt.x - curve_x[line] - 1;
 8009a10:	3a01      	subs	r2, #1
 8009a12:	1a52      	subs	r2, r2, r1
 8009a14:	b292      	uxth	r2, r2
 8009a16:	9213      	str	r2, [sp, #76]	; 0x4c
 8009a18:	9a11      	ldr	r2, [sp, #68]	; 0x44
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 8009a1a:	18cb      	adds	r3, r1, r3
 8009a1c:	1c55      	adds	r5, r2, #1
        for(d = 1; d < col; d++) {
 8009a1e:	2201      	movs	r2, #1
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	b21c      	sxth	r4, r3
        for(d = 1; d < col; d++) {
 8009a24:	1ad3      	subs	r3, r2, r3
 8009a26:	931c      	str	r3, [sp, #112]	; 0x70
 8009a28:	224c      	movs	r2, #76	; 0x4c
 8009a2a:	466b      	mov	r3, sp
 8009a2c:	189b      	adds	r3, r3, r2
 8009a2e:	2200      	movs	r2, #0
 8009a30:	5e9b      	ldrsh	r3, [r3, r2]
 8009a32:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009a34:	9312      	str	r3, [sp, #72]	; 0x48
 8009a36:	b2a3      	uxth	r3, r4
 8009a38:	931b      	str	r3, [sp, #108]	; 0x6c
 8009a3a:	189b      	adds	r3, r3, r2
 8009a3c:	9a05      	ldr	r2, [sp, #20]
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d900      	bls.n	8009a46 <lv_draw_rect+0x2a6>
 8009a44:	e094      	b.n	8009b70 <lv_draw_rect+0x3d0>
        if(line == 0) lv_draw_shadow_full_straight(coords, mask, style, line_2d_blur);
 8009a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d15c      	bne.n	8009b06 <lv_draw_rect+0x366>
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009a4c:	f7fd ffb6 	bl	80079bc <lv_refr_get_disp_refreshing>
 8009a50:	f002 fbaa 	bl	800c1a8 <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 8009a54:	9b04      	ldr	r3, [sp, #16]
 8009a56:	88b9      	ldrh	r1, [r7, #4]
 8009a58:	2212      	movs	r2, #18
 8009a5a:	5e9b      	ldrsh	r3, [r3, r2]
    return area_p->y2 - area_p->y1 + 1;
 8009a5c:	88fa      	ldrh	r2, [r7, #6]
 8009a5e:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a60:	887b      	ldrh	r3, [r7, #2]
 8009a62:	3201      	adds	r2, #1
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009a64:	0004      	movs	r4, r0
 8009a66:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 8009a68:	883b      	ldrh	r3, [r7, #0]
 8009a6a:	3101      	adds	r1, #1
 8009a6c:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009a6e:	9b04      	ldr	r3, [sp, #16]
 8009a70:	b212      	sxth	r2, r2
 8009a72:	b209      	sxth	r1, r1
 8009a74:	88d8      	ldrh	r0, [r3, #6]
 8009a76:	f7ff fe51 	bl	800971c <lv_draw_cont_radius_corr>
    right_area.x1 = coords->x2 + 1 - aa;
 8009a7a:	88ba      	ldrh	r2, [r7, #4]
    radius += aa;
 8009a7c:	b2a3      	uxth	r3, r4
    right_area.x1 = coords->x2 + 1 - aa;
 8009a7e:	9205      	str	r2, [sp, #20]
 8009a80:	3201      	adds	r2, #1
 8009a82:	1ad2      	subs	r2, r2, r3
 8009a84:	a922      	add	r1, sp, #136	; 0x88
 8009a86:	b212      	sxth	r2, r2
 8009a88:	800a      	strh	r2, [r1, #0]
    right_area.y1 = coords->y1 + radius + aa;
 8009a8a:	887c      	ldrh	r4, [r7, #2]
    radius += aa;
 8009a8c:	18c0      	adds	r0, r0, r3
 8009a8e:	b280      	uxth	r0, r0
    right_area.y1 = coords->y1 + radius + aa;
 8009a90:	191d      	adds	r5, r3, r4
 8009a92:	1945      	adds	r5, r0, r5
 8009a94:	b22d      	sxth	r5, r5
 8009a96:	804d      	strh	r5, [r1, #2]
    right_area.x2 = right_area.x1;
 8009a98:	808a      	strh	r2, [r1, #4]
    right_area.y2 = coords->y2 - radius - aa;
 8009a9a:	88fa      	ldrh	r2, [r7, #6]
    right_area.y1 = coords->y1 + radius + aa;
 8009a9c:	46ac      	mov	ip, r5
    right_area.y2 = coords->y2 - radius - aa;
 8009a9e:	1a15      	subs	r5, r2, r0
 8009aa0:	1aed      	subs	r5, r5, r3
 8009aa2:	b22d      	sxth	r5, r5
 8009aa4:	9512      	str	r5, [sp, #72]	; 0x48
 8009aa6:	920d      	str	r2, [sp, #52]	; 0x34
 8009aa8:	2548      	movs	r5, #72	; 0x48
 8009aaa:	466a      	mov	r2, sp
 8009aac:	1952      	adds	r2, r2, r5
 8009aae:	8815      	ldrh	r5, [r2, #0]
    left_area.y1 = coords->y1 + radius + aa;
 8009ab0:	4662      	mov	r2, ip
    right_area.y2 = coords->y2 - radius - aa;
 8009ab2:	80cd      	strh	r5, [r1, #6]
    left_area.x1 = coords->x1 - 1 + aa;
 8009ab4:	8839      	ldrh	r1, [r7, #0]
 8009ab6:	ad24      	add	r5, sp, #144	; 0x90
 8009ab8:	1e4e      	subs	r6, r1, #1
 8009aba:	199e      	adds	r6, r3, r6
 8009abc:	b236      	sxth	r6, r6
 8009abe:	802e      	strh	r6, [r5, #0]
    left_area.y1 = coords->y1 + radius + aa;
 8009ac0:	806a      	strh	r2, [r5, #2]
    left_area.x2 = left_area.x1;
 8009ac2:	80ae      	strh	r6, [r5, #4]
    left_area.y2 = coords->y2 - radius - aa;
 8009ac4:	466a      	mov	r2, sp
 8009ac6:	2648      	movs	r6, #72	; 0x48
 8009ac8:	1992      	adds	r2, r2, r6
 8009aca:	8812      	ldrh	r2, [r2, #0]
    top_area.x1 = coords->x1 + radius + aa;
 8009acc:	1859      	adds	r1, r3, r1
    left_area.y2 = coords->y2 - radius - aa;
 8009ace:	80ea      	strh	r2, [r5, #6]
    top_area.x2 = coords->x2 - radius - aa;
 8009ad0:	9a05      	ldr	r2, [sp, #20]
    top_area.x1 = coords->x1 + radius + aa;
 8009ad2:	1841      	adds	r1, r0, r1
    top_area.x2 = coords->x2 - radius - aa;
 8009ad4:	1a10      	subs	r0, r2, r0
    bottom_area.y1 = coords->y2 + 1 - aa;
 8009ad6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    top_area.y1 = coords->y1 - 1 + aa;
 8009ad8:	3c01      	subs	r4, #1
 8009ada:	191c      	adds	r4, r3, r4
    bottom_area.y1 = coords->y2 + 1 - aa;
 8009adc:	3201      	adds	r2, #1
    top_area.x1 = coords->x1 + radius + aa;
 8009ade:	ad26      	add	r5, sp, #152	; 0x98
    top_area.y1 = coords->y1 - 1 + aa;
 8009ae0:	b224      	sxth	r4, r4
    top_area.x2 = coords->x2 - radius - aa;
 8009ae2:	1ac0      	subs	r0, r0, r3
    bottom_area.y1 = coords->y2 + 1 - aa;
 8009ae4:	1ad3      	subs	r3, r2, r3
    top_area.x1 = coords->x1 + radius + aa;
 8009ae6:	b209      	sxth	r1, r1
    top_area.x2 = coords->x2 - radius - aa;
 8009ae8:	b200      	sxth	r0, r0
    bottom_area.y1 = coords->y2 + 1 - aa;
 8009aea:	b21b      	sxth	r3, r3
    top_area.y1 = coords->y1 - 1 + aa;
 8009aec:	806c      	strh	r4, [r5, #2]
    top_area.y2 = top_area.y1;
 8009aee:	80ec      	strh	r4, [r5, #6]
    bottom_area.x1 = coords->x1 + radius + aa;
 8009af0:	ac28      	add	r4, sp, #160	; 0xa0
 8009af2:	8021      	strh	r1, [r4, #0]
    bottom_area.y1 = coords->y2 + 1 - aa;
 8009af4:	8063      	strh	r3, [r4, #2]
    bottom_area.x2 = coords->x2 - radius - aa;
 8009af6:	80a0      	strh	r0, [r4, #4]
    bottom_area.y2 = bottom_area.y1;
 8009af8:	80e3      	strh	r3, [r4, #6]
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 8009afa:	2401      	movs	r4, #1
    top_area.x1 = coords->x1 + radius + aa;
 8009afc:	8029      	strh	r1, [r5, #0]
    top_area.x2 = coords->x2 - radius - aa;
 8009afe:	80a8      	strh	r0, [r5, #4]
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 8009b00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b02:	42a3      	cmp	r3, r4
 8009b04:	da76      	bge.n	8009bf4 <lv_draw_rect+0x454>
 8009b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b08:	3301      	adds	r3, #1
 8009b0a:	b21b      	sxth	r3, r3
 8009b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b10:	3301      	adds	r3, #1
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	930a      	str	r3, [sp, #40]	; 0x28
 8009b16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	930c      	str	r3, [sp, #48]	; 0x30
 8009b1e:	e721      	b.n	8009964 <lv_draw_rect+0x1c4>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 8009b20:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009b22:	429d      	cmp	r5, r3
 8009b24:	db22      	blt.n	8009b6c <lv_draw_rect+0x3cc>
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 8009b26:	9d06      	ldr	r5, [sp, #24]
 8009b28:	005b      	lsls	r3, r3, #1
 8009b2a:	5b5b      	ldrh	r3, [r3, r5]
 8009b2c:	8805      	ldrh	r5, [r0, #0]
 8009b2e:	1b5b      	subs	r3, r3, r5
 8009b30:	e74e      	b.n	80099d0 <lv_draw_rect+0x230>
                } else if(col_rel > swidth)
 8009b32:	9d07      	ldr	r5, [sp, #28]
 8009b34:	429d      	cmp	r5, r3
 8009b36:	da06      	bge.n	8009b46 <lv_draw_rect+0x3a6>
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
 8009b38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	930d      	str	r3, [sp, #52]	; 0x34
 8009b3e:	3201      	adds	r2, #1
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 8009b40:	18c9      	adds	r1, r1, r3
 8009b42:	b212      	sxth	r2, r2
 8009b44:	e00e      	b.n	8009b64 <lv_draw_rect+0x3c4>
 8009b46:	9d07      	ldr	r5, [sp, #28]
 8009b48:	1aeb      	subs	r3, r5, r3
 8009b4a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	595b      	ldr	r3, [r3, r5]
 8009b50:	e7f5      	b.n	8009b3e <lv_draw_rect+0x39e>
        for(col = 0; col <= radius + swidth; col++) { /*Check all pixels in a 1D blur line (from the origo to last
 8009b52:	b293      	uxth	r3, r2
 8009b54:	9305      	str	r3, [sp, #20]
 8009b56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b58:	9a05      	ldr	r2, [sp, #20]
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	da00      	bge.n	8009b60 <lv_draw_rect+0x3c0>
 8009b5e:	e74c      	b.n	80099fa <lv_draw_rect+0x25a>
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8009b60:	0032      	movs	r2, r6
            uint32_t px_opa_sum = 0;
 8009b62:	2100      	movs	r1, #0
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8009b64:	9b07      	ldr	r3, [sp, #28]
 8009b66:	4293      	cmp	r3, r2
 8009b68:	db00      	blt.n	8009b6c <lv_draw_rect+0x3cc>
 8009b6a:	e72a      	b.n	80099c2 <lv_draw_rect+0x222>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	e739      	b.n	80099e4 <lv_draw_rect+0x244>
            if(point_lt.x < ofs_lt.x && point_lt.y < ofs_lt.y) {
 8009b70:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009b72:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b74:	4293      	cmp	r3, r2
 8009b76:	dd18      	ble.n	8009baa <lv_draw_rect+0x40a>
 8009b78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	dd08      	ble.n	8009b92 <lv_draw_rect+0x3f2>
                lv_draw_px(point_lt.x, point_lt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8009b80:	782b      	ldrb	r3, [r5, #0]
 8009b82:	9a03      	ldr	r2, [sp, #12]
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	9b04      	ldr	r3, [sp, #16]
 8009b88:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009b8a:	8a1b      	ldrh	r3, [r3, #16]
 8009b8c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009b8e:	f7fe fdea 	bl	8008766 <lv_draw_px>
            if(point_lb.x < ofs_lb.x && point_lb.y > ofs_lb.y) {
 8009b92:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009b94:	42b3      	cmp	r3, r6
 8009b96:	da08      	bge.n	8009baa <lv_draw_rect+0x40a>
                lv_draw_px(point_lb.x, point_lb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8009b98:	782b      	ldrb	r3, [r5, #0]
 8009b9a:	9a03      	ldr	r2, [sp, #12]
 8009b9c:	9300      	str	r3, [sp, #0]
 8009b9e:	9b04      	ldr	r3, [sp, #16]
 8009ba0:	0031      	movs	r1, r6
 8009ba2:	8a1b      	ldrh	r3, [r3, #16]
 8009ba4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009ba6:	f7fe fdde 	bl	8008766 <lv_draw_px>
            if(point_rt.x > ofs_rt.x && point_rt.y < ofs_rt.y) {
 8009baa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009bac:	42a3      	cmp	r3, r4
 8009bae:	da18      	bge.n	8009be2 <lv_draw_rect+0x442>
 8009bb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	dd08      	ble.n	8009bca <lv_draw_rect+0x42a>
                lv_draw_px(point_rt.x, point_rt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8009bb8:	782b      	ldrb	r3, [r5, #0]
 8009bba:	9a03      	ldr	r2, [sp, #12]
 8009bbc:	9300      	str	r3, [sp, #0]
 8009bbe:	9b04      	ldr	r3, [sp, #16]
 8009bc0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009bc2:	8a1b      	ldrh	r3, [r3, #16]
 8009bc4:	0020      	movs	r0, r4
 8009bc6:	f7fe fdce 	bl	8008766 <lv_draw_px>
            if(point_rb.x > ofs_rb.x && point_rb.y > ofs_rb.y) {
 8009bca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009bcc:	42b3      	cmp	r3, r6
 8009bce:	da08      	bge.n	8009be2 <lv_draw_rect+0x442>
                lv_draw_px(point_rb.x, point_rb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8009bd0:	782b      	ldrb	r3, [r5, #0]
 8009bd2:	9a03      	ldr	r2, [sp, #12]
 8009bd4:	9300      	str	r3, [sp, #0]
 8009bd6:	9b04      	ldr	r3, [sp, #16]
 8009bd8:	0031      	movs	r1, r6
 8009bda:	8a1b      	ldrh	r3, [r3, #16]
 8009bdc:	0020      	movs	r0, r4
 8009bde:	f7fe fdc2 	bl	8008766 <lv_draw_px>
 8009be2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
            point_rt.x++;
 8009be4:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8009be6:	3b01      	subs	r3, #1
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	3401      	adds	r4, #1
 8009bec:	9313      	str	r3, [sp, #76]	; 0x4c
 8009bee:	3501      	adds	r5, #1
 8009bf0:	b224      	sxth	r4, r4
 8009bf2:	e719      	b.n	8009a28 <lv_draw_rect+0x288>
        opa_act = map[d];
 8009bf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 8009bf6:	9a04      	ldr	r2, [sp, #16]
        opa_act = map[d];
 8009bf8:	5d1e      	ldrb	r6, [r3, r4]
        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 8009bfa:	ad22      	add	r5, sp, #136	; 0x88
 8009bfc:	0028      	movs	r0, r5
 8009bfe:	0033      	movs	r3, r6
 8009c00:	8a12      	ldrh	r2, [r2, #16]
 8009c02:	9903      	ldr	r1, [sp, #12]
 8009c04:	f7fe fdf8 	bl	80087f8 <lv_draw_fill>
        right_area.x1++;
 8009c08:	882b      	ldrh	r3, [r5, #0]
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 8009c0a:	9a04      	ldr	r2, [sp, #16]
        right_area.x1++;
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	802b      	strh	r3, [r5, #0]
        right_area.x2++;
 8009c10:	88ab      	ldrh	r3, [r5, #4]
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 8009c12:	9903      	ldr	r1, [sp, #12]
        right_area.x2++;
 8009c14:	3301      	adds	r3, #1
 8009c16:	80ab      	strh	r3, [r5, #4]
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 8009c18:	ad24      	add	r5, sp, #144	; 0x90
 8009c1a:	0028      	movs	r0, r5
 8009c1c:	0033      	movs	r3, r6
 8009c1e:	8a12      	ldrh	r2, [r2, #16]
 8009c20:	f7fe fdea 	bl	80087f8 <lv_draw_fill>
        left_area.x1--;
 8009c24:	882b      	ldrh	r3, [r5, #0]
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 8009c26:	9a04      	ldr	r2, [sp, #16]
        left_area.x1--;
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	802b      	strh	r3, [r5, #0]
        left_area.x2--;
 8009c2c:	88ab      	ldrh	r3, [r5, #4]
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 8009c2e:	9903      	ldr	r1, [sp, #12]
        left_area.x2--;
 8009c30:	3b01      	subs	r3, #1
 8009c32:	80ab      	strh	r3, [r5, #4]
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 8009c34:	ad26      	add	r5, sp, #152	; 0x98
 8009c36:	0028      	movs	r0, r5
 8009c38:	0033      	movs	r3, r6
 8009c3a:	8a12      	ldrh	r2, [r2, #16]
 8009c3c:	f7fe fddc 	bl	80087f8 <lv_draw_fill>
        top_area.y1--;
 8009c40:	886b      	ldrh	r3, [r5, #2]
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 8009c42:	9a04      	ldr	r2, [sp, #16]
        top_area.y1--;
 8009c44:	3b01      	subs	r3, #1
 8009c46:	806b      	strh	r3, [r5, #2]
        top_area.y2--;
 8009c48:	88eb      	ldrh	r3, [r5, #6]
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 8009c4a:	9903      	ldr	r1, [sp, #12]
        top_area.y2--;
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	80eb      	strh	r3, [r5, #6]
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 8009c50:	ad28      	add	r5, sp, #160	; 0xa0
 8009c52:	0033      	movs	r3, r6
 8009c54:	8a12      	ldrh	r2, [r2, #16]
 8009c56:	0028      	movs	r0, r5
 8009c58:	f7fe fdce 	bl	80087f8 <lv_draw_fill>
        bottom_area.y1++;
 8009c5c:	886b      	ldrh	r3, [r5, #2]
 8009c5e:	3401      	adds	r4, #1
 8009c60:	3301      	adds	r3, #1
 8009c62:	806b      	strh	r3, [r5, #2]
        bottom_area.y2++;
 8009c64:	88eb      	ldrh	r3, [r5, #6]
 8009c66:	b224      	sxth	r4, r4
 8009c68:	3301      	adds	r3, #1
 8009c6a:	80eb      	strh	r3, [r5, #6]
 8009c6c:	e748      	b.n	8009b00 <lv_draw_rect+0x360>
    } else if(style->body.shadow.type == LV_SHADOW_BOTTOM) {
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d000      	beq.n	8009c74 <lv_draw_rect+0x4d4>
 8009c72:	e07f      	b.n	8009d74 <lv_draw_rect+0x5d4>
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009c74:	f7fd fea2 	bl	80079bc <lv_refr_get_disp_refreshing>
 8009c78:	f002 fa96 	bl	800c1a8 <lv_disp_get_antialiasing>
 8009c7c:	0006      	movs	r6, r0
    lv_coord_t swidth = style->body.shadow.width;
 8009c7e:	9b04      	ldr	r3, [sp, #16]
    return area_p->y2 - area_p->y1 + 1;
 8009c80:	88fa      	ldrh	r2, [r7, #6]
 8009c82:	2512      	movs	r5, #18
 8009c84:	5f5d      	ldrsh	r5, [r3, r5]
 8009c86:	887b      	ldrh	r3, [r7, #2]
    return area_p->x2 - area_p->x1 + 1;
 8009c88:	88b9      	ldrh	r1, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8009c8a:	3201      	adds	r2, #1
 8009c8c:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 8009c8e:	883b      	ldrh	r3, [r7, #0]
 8009c90:	3101      	adds	r1, #1
 8009c92:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009c94:	9b04      	ldr	r3, [sp, #16]
 8009c96:	b209      	sxth	r1, r1
 8009c98:	b212      	sxth	r2, r2
 8009c9a:	88d8      	ldrh	r0, [r3, #6]
 8009c9c:	f7ff fd3e 	bl	800971c <lv_draw_cont_radius_corr>
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 8009ca0:	b2b3      	uxth	r3, r6
 8009ca2:	9308      	str	r3, [sp, #32]
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	9c08      	ldr	r4, [sp, #32]
 8009ca8:	435c      	muls	r4, r3
 8009caa:	1904      	adds	r4, r0, r4
 8009cac:	b2a4      	uxth	r4, r4
 8009cae:	b222      	sxth	r2, r4
 8009cb0:	9209      	str	r2, [sp, #36]	; 0x24
    swidth += aa;
 8009cb2:	9a08      	ldr	r2, [sp, #32]
 8009cb4:	1955      	adds	r5, r2, r5
 8009cb6:	b2a8      	uxth	r0, r5
 8009cb8:	b202      	sxth	r2, r0
 8009cba:	9205      	str	r2, [sp, #20]
    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 8009cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    lv_opa_t line_1d_blur_size = (swidth + 3) & ~0x3;     /*Round to 4*/
 8009cbe:	18c0      	adds	r0, r0, r3
    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 8009cc0:	1d15      	adds	r5, r2, #4
 8009cc2:	439d      	bics	r5, r3
    lv_opa_t line_1d_blur_size = (swidth + 3) & ~0x3;     /*Round to 4*/
 8009cc4:	4398      	bics	r0, r3
    curve_x_size *= sizeof(lv_coord_t);
 8009cc6:	006d      	lsls	r5, r5, #1
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 8009cc8:	b2c0      	uxtb	r0, r0
 8009cca:	1940      	adds	r0, r0, r5
 8009ccc:	f7fe fc44 	bl	8008558 <lv_draw_get_buf>
    lv_circ_init(&circ, &circ_tmp, radius);
 8009cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    lv_opa_t * line_1d_blur = (lv_opa_t *)&draw_buf[curve_x_size];
 8009cd2:	1943      	adds	r3, r0, r5
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 8009cd4:	9006      	str	r0, [sp, #24]
    lv_circ_init(&circ, &circ_tmp, radius);
 8009cd6:	a924      	add	r1, sp, #144	; 0x90
 8009cd8:	a826      	add	r0, sp, #152	; 0x98
    lv_opa_t * line_1d_blur = (lv_opa_t *)&draw_buf[curve_x_size];
 8009cda:	9307      	str	r3, [sp, #28]
    lv_circ_init(&circ, &circ_tmp, radius);
 8009cdc:	f002 fc0b 	bl	800c4f6 <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 8009ce0:	ad26      	add	r5, sp, #152	; 0x98
 8009ce2:	0028      	movs	r0, r5
 8009ce4:	f002 fc0e 	bl	800c504 <lv_circ_cont>
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	d001      	beq.n	8009cf0 <lv_draw_rect+0x550>
 8009cec:	f000 fbdb 	bl	800a4a6 <lv_draw_rect+0xd06>
 8009cf0:	9b04      	ldr	r3, [sp, #16]
 8009cf2:	7a1d      	ldrb	r5, [r3, #8]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8009cf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cf6:	2bff      	cmp	r3, #255	; 0xff
 8009cf8:	d001      	beq.n	8009cfe <lv_draw_rect+0x55e>
 8009cfa:	435d      	muls	r5, r3
 8009cfc:	0a2d      	lsrs	r5, r5, #8
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
 8009cfe:	2600      	movs	r6, #0
 8009d00:	9b05      	ldr	r3, [sp, #20]
 8009d02:	436b      	muls	r3, r5
 8009d04:	930a      	str	r3, [sp, #40]	; 0x28
    for(col = 0; col < swidth; col++) {
 8009d06:	9a05      	ldr	r2, [sp, #20]
 8009d08:	b233      	sxth	r3, r6
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	dd01      	ble.n	8009d12 <lv_draw_rect+0x572>
 8009d0e:	f000 fbde 	bl	800a4ce <lv_draw_rect+0xd2e>
    ofs_l.x = coords->x1 + radius;
 8009d12:	883b      	ldrh	r3, [r7, #0]
 8009d14:	18e3      	adds	r3, r4, r3
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	930a      	str	r3, [sp, #40]	; 0x28
 8009d1a:	466b      	mov	r3, sp
 8009d1c:	2228      	movs	r2, #40	; 0x28
 8009d1e:	5e9b      	ldrsh	r3, [r3, r2]
 8009d20:	9a08      	ldr	r2, [sp, #32]
 8009d22:	9310      	str	r3, [sp, #64]	; 0x40
 8009d24:	88fb      	ldrh	r3, [r7, #6]
 8009d26:	3301      	adds	r3, #1
 8009d28:	1a9b      	subs	r3, r3, r2
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	930c      	str	r3, [sp, #48]	; 0x30
    ofs_l.y = coords->y2 - radius + 1 - aa;
 8009d2e:	1b1b      	subs	r3, r3, r4
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	9311      	str	r3, [sp, #68]	; 0x44
    ofs_r.x = coords->x2 - radius;
 8009d34:	88b8      	ldrh	r0, [r7, #4]
 8009d36:	1b04      	subs	r4, r0, r4
 8009d38:	b2a3      	uxth	r3, r4
 8009d3a:	930d      	str	r3, [sp, #52]	; 0x34
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	9308      	str	r3, [sp, #32]
 8009d40:	466b      	mov	r3, sp
 8009d42:	2120      	movs	r1, #32
 8009d44:	5e59      	ldrsh	r1, [r3, r1]
    for(col = 0; col <= radius; col++) {
 8009d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d48:	428b      	cmp	r3, r1
 8009d4a:	db01      	blt.n	8009d50 <lv_draw_rect+0x5b0>
 8009d4c:	f000 fbcc 	bl	800a4e8 <lv_draw_rect+0xd48>
    area_mid.x1 = ofs_l.x + 1;
 8009d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d52:	aa28      	add	r2, sp, #160	; 0xa0
 8009d54:	3301      	adds	r3, #1
 8009d56:	8013      	strh	r3, [r2, #0]
    area_mid.x2 = ofs_r.x - 1;
 8009d58:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    area_mid.y1 = ofs_l.y + radius;
 8009d5a:	466b      	mov	r3, sp
    area_mid.x2 = ofs_r.x - 1;
 8009d5c:	3c01      	subs	r4, #1
 8009d5e:	8094      	strh	r4, [r2, #4]
    for(d = 0; d < swidth; d++) {
 8009d60:	2400      	movs	r4, #0
    area_mid.y1 = ofs_l.y + radius;
 8009d62:	2130      	movs	r1, #48	; 0x30
 8009d64:	5e5b      	ldrsh	r3, [r3, r1]
 8009d66:	8053      	strh	r3, [r2, #2]
    area_mid.y2 = area_mid.y1;
 8009d68:	80d3      	strh	r3, [r2, #6]
    for(d = 0; d < swidth; d++) {
 8009d6a:	9b05      	ldr	r3, [sp, #20]
 8009d6c:	429c      	cmp	r4, r3
 8009d6e:	da01      	bge.n	8009d74 <lv_draw_rect+0x5d4>
 8009d70:	f000 fc00 	bl	800a574 <lv_draw_rect+0xdd4>
    if(lv_area_is_on(coords, mask) == false) return;
 8009d74:	9903      	ldr	r1, [sp, #12]
 8009d76:	0038      	movs	r0, r7
 8009d78:	f002 fb7f 	bl	800c47a <lv_area_is_on>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	d100      	bne.n	8009d82 <lv_draw_rect+0x5e2>
 8009d80:	e38f      	b.n	800a4a2 <lv_draw_rect+0xd02>
    if(style->body.opa > LV_OPA_MIN) {
 8009d82:	9b04      	ldr	r3, [sp, #16]
 8009d84:	7a1b      	ldrb	r3, [r3, #8]
 8009d86:	2b10      	cmp	r3, #16
 8009d88:	d800      	bhi.n	8009d8c <lv_draw_rect+0x5ec>
 8009d8a:	e1e7      	b.n	800a15c <lv_draw_rect+0x9bc>
    uint16_t radius = style->body.radius;
 8009d8c:	9b04      	ldr	r3, [sp, #16]
 8009d8e:	88dc      	ldrh	r4, [r3, #6]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009d90:	f7fd fe14 	bl	80079bc <lv_refr_get_disp_refreshing>
 8009d94:	f002 fa08 	bl	800c1a8 <lv_disp_get_antialiasing>
    lv_color_t mcolor = style->body.main_color;
 8009d98:	9b04      	ldr	r3, [sp, #16]
    return area_p->y2 - area_p->y1 + 1;
 8009d9a:	887a      	ldrh	r2, [r7, #2]
 8009d9c:	885b      	ldrh	r3, [r3, #2]
    return area_p->x2 - area_p->x1 + 1;
 8009d9e:	88b9      	ldrh	r1, [r7, #4]
 8009da0:	9305      	str	r3, [sp, #20]
    lv_color_t gcolor = style->body.grad_color;
 8009da2:	9b04      	ldr	r3, [sp, #16]
 8009da4:	3101      	adds	r1, #1
 8009da6:	889b      	ldrh	r3, [r3, #4]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009da8:	0005      	movs	r5, r0
    lv_color_t gcolor = style->body.grad_color;
 8009daa:	9307      	str	r3, [sp, #28]
    return area_p->y2 - area_p->y1 + 1;
 8009dac:	88fb      	ldrh	r3, [r7, #6]
 8009dae:	3301      	adds	r3, #1
 8009db0:	1a9b      	subs	r3, r3, r2
 8009db2:	b21e      	sxth	r6, r3
    return area_p->x2 - area_p->x1 + 1;
 8009db4:	883b      	ldrh	r3, [r7, #0]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8009db6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009db8:	1ac9      	subs	r1, r1, r3
 8009dba:	9b04      	ldr	r3, [sp, #16]
 8009dbc:	b209      	sxth	r1, r1
 8009dbe:	7a1b      	ldrb	r3, [r3, #8]
 8009dc0:	2aff      	cmp	r2, #255	; 0xff
 8009dc2:	d001      	beq.n	8009dc8 <lv_draw_rect+0x628>
 8009dc4:	f000 fbe9 	bl	800a59a <lv_draw_rect+0xdfa>
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009dc8:	0032      	movs	r2, r6
 8009dca:	0020      	movs	r0, r4
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8009dcc:	9306      	str	r3, [sp, #24]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009dce:	f7ff fca5 	bl	800971c <lv_draw_cont_radius_corr>
    if(radius > height / 2) return;
 8009dd2:	0ff3      	lsrs	r3, r6, #31
 8009dd4:	199b      	adds	r3, r3, r6
 8009dd6:	105b      	asrs	r3, r3, #1
 8009dd8:	4298      	cmp	r0, r3
 8009dda:	dc29      	bgt.n	8009e30 <lv_draw_rect+0x690>
    work_area.x1 = coords->x1;
 8009ddc:	883b      	ldrh	r3, [r7, #0]
 8009dde:	aa28      	add	r2, sp, #160	; 0xa0
 8009de0:	8013      	strh	r3, [r2, #0]
    work_area.x2 = coords->x2;
 8009de2:	88bb      	ldrh	r3, [r7, #4]
 8009de4:	9904      	ldr	r1, [sp, #16]
 8009de6:	8093      	strh	r3, [r2, #4]
 8009de8:	887b      	ldrh	r3, [r7, #2]
 8009dea:	88fc      	ldrh	r4, [r7, #6]
 8009dec:	9308      	str	r3, [sp, #32]
 8009dee:	2306      	movs	r3, #6
 8009df0:	5ec9      	ldrsh	r1, [r1, r3]
    if(mcolor.full == gcolor.full) {
 8009df2:	9b05      	ldr	r3, [sp, #20]
 8009df4:	469c      	mov	ip, r3
 8009df6:	9b07      	ldr	r3, [sp, #28]
 8009df8:	459c      	cmp	ip, r3
 8009dfa:	d001      	beq.n	8009e00 <lv_draw_rect+0x660>
 8009dfc:	f000 fbd7 	bl	800a5ae <lv_draw_rect+0xe0e>
        work_area.y1 = coords->y1 + radius;
 8009e00:	9b08      	ldr	r3, [sp, #32]
        work_area.y2 = coords->y2 - radius;
 8009e02:	1a24      	subs	r4, r4, r0
        work_area.y1 = coords->y1 + radius;
 8009e04:	18c3      	adds	r3, r0, r3
 8009e06:	b29b      	uxth	r3, r3
        work_area.y2 = coords->y2 - radius;
 8009e08:	b2a4      	uxth	r4, r4
        work_area.y1 = coords->y1 + radius;
 8009e0a:	8053      	strh	r3, [r2, #2]
        work_area.y2 = coords->y2 - radius;
 8009e0c:	80d4      	strh	r4, [r2, #6]
        if(style->body.radius != 0) {
 8009e0e:	2900      	cmp	r1, #0
 8009e10:	d007      	beq.n	8009e22 <lv_draw_rect+0x682>
            if(aa) {
 8009e12:	2d00      	cmp	r5, #0
 8009e14:	d101      	bne.n	8009e1a <lv_draw_rect+0x67a>
 8009e16:	f000 fbc5 	bl	800a5a4 <lv_draw_rect+0xe04>
                work_area.y1 += 2;
 8009e1a:	3302      	adds	r3, #2
 8009e1c:	8053      	strh	r3, [r2, #2]
                work_area.y2 -= 2;
 8009e1e:	3c02      	subs	r4, #2
                work_area.y2 -= 1;
 8009e20:	80d4      	strh	r4, [r2, #6]
        lv_draw_fill(&work_area, mask, mcolor, opa);
 8009e22:	466a      	mov	r2, sp
 8009e24:	9b06      	ldr	r3, [sp, #24]
 8009e26:	8a92      	ldrh	r2, [r2, #20]
 8009e28:	9903      	ldr	r1, [sp, #12]
 8009e2a:	a828      	add	r0, sp, #160	; 0xa0
 8009e2c:	f7fe fce4 	bl	80087f8 <lv_draw_fill>
        if(style->body.radius != 0) {
 8009e30:	9b04      	ldr	r3, [sp, #16]
 8009e32:	2406      	movs	r4, #6
 8009e34:	5f1c      	ldrsh	r4, [r3, r4]
 8009e36:	2c00      	cmp	r4, #0
 8009e38:	d100      	bne.n	8009e3c <lv_draw_rect+0x69c>
 8009e3a:	e18f      	b.n	800a15c <lv_draw_rect+0x9bc>
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009e3c:	f7fd fdbe 	bl	80079bc <lv_refr_get_disp_refreshing>
 8009e40:	f002 f9b2 	bl	800c1a8 <lv_disp_get_antialiasing>
    lv_color_t mcolor = style->body.main_color;
 8009e44:	9b04      	ldr	r3, [sp, #16]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8009e46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    lv_color_t mcolor = style->body.main_color;
 8009e48:	885b      	ldrh	r3, [r3, #2]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009e4a:	9018      	str	r0, [sp, #96]	; 0x60
    lv_color_t mcolor = style->body.main_color;
 8009e4c:	9305      	str	r3, [sp, #20]
    lv_color_t gcolor = style->body.grad_color;
 8009e4e:	9b04      	ldr	r3, [sp, #16]
    uint16_t radius = style->body.radius;
 8009e50:	b2a4      	uxth	r4, r4
    lv_color_t gcolor = style->body.grad_color;
 8009e52:	889b      	ldrh	r3, [r3, #4]
 8009e54:	9306      	str	r3, [sp, #24]
 8009e56:	9b04      	ldr	r3, [sp, #16]
 8009e58:	7a1b      	ldrb	r3, [r3, #8]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8009e5a:	2aff      	cmp	r2, #255	; 0xff
 8009e5c:	d001      	beq.n	8009e62 <lv_draw_rect+0x6c2>
 8009e5e:	f000 fbdb 	bl	800a618 <lv_draw_rect+0xe78>
 8009e62:	9307      	str	r3, [sp, #28]
    return area_p->y2 - area_p->y1 + 1;
 8009e64:	88fb      	ldrh	r3, [r7, #6]
 8009e66:	887a      	ldrh	r2, [r7, #2]
 8009e68:	3301      	adds	r3, #1
 8009e6a:	1a9b      	subs	r3, r3, r2
 8009e6c:	b21b      	sxth	r3, r3
    return area_p->x2 - area_p->x1 + 1;
 8009e6e:	88b9      	ldrh	r1, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8009e70:	9308      	str	r3, [sp, #32]
    return area_p->x2 - area_p->x1 + 1;
 8009e72:	883b      	ldrh	r3, [r7, #0]
 8009e74:	3101      	adds	r1, #1
 8009e76:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009e78:	b209      	sxth	r1, r1
 8009e7a:	9a08      	ldr	r2, [sp, #32]
 8009e7c:	0020      	movs	r0, r4
 8009e7e:	f7ff fc4d 	bl	800971c <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + aa;
 8009e82:	2260      	movs	r2, #96	; 0x60
 8009e84:	466b      	mov	r3, sp
 8009e86:	189b      	adds	r3, r3, r2
 8009e88:	881b      	ldrh	r3, [r3, #0]
 8009e8a:	883e      	ldrh	r6, [r7, #0]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009e8c:	900c      	str	r0, [sp, #48]	; 0x30
    lt_origo.x = coords->x1 + radius + aa;
 8009e8e:	199e      	adds	r6, r3, r6
 8009e90:	1986      	adds	r6, r0, r6
 8009e92:	b2b2      	uxth	r2, r6
 8009e94:	9209      	str	r2, [sp, #36]	; 0x24
    lt_origo.y = coords->y1 + radius + aa;
 8009e96:	887c      	ldrh	r4, [r7, #2]
 8009e98:	191c      	adds	r4, r3, r4
 8009e9a:	1904      	adds	r4, r0, r4
 8009e9c:	b2a2      	uxth	r2, r4
 8009e9e:	920d      	str	r2, [sp, #52]	; 0x34
 8009ea0:	466a      	mov	r2, sp
 8009ea2:	2134      	movs	r1, #52	; 0x34
 8009ea4:	5e52      	ldrsh	r2, [r2, r1]
    lv_circ_init(&cir, &cir_tmp, radius);
 8009ea6:	ac20      	add	r4, sp, #128	; 0x80
    lt_origo.y = coords->y1 + radius + aa;
 8009ea8:	9219      	str	r2, [sp, #100]	; 0x64
    lb_origo.y = coords->y2 - radius - aa;
 8009eaa:	88fa      	ldrh	r2, [r7, #6]
 8009eac:	1a12      	subs	r2, r2, r0
 8009eae:	1ad2      	subs	r2, r2, r3
 8009eb0:	b292      	uxth	r2, r2
 8009eb2:	920e      	str	r2, [sp, #56]	; 0x38
 8009eb4:	466a      	mov	r2, sp
 8009eb6:	2138      	movs	r1, #56	; 0x38
 8009eb8:	5e52      	ldrsh	r2, [r2, r1]
    lv_circ_init(&cir, &cir_tmp, radius);
 8009eba:	a91f      	add	r1, sp, #124	; 0x7c
    lb_origo.y = coords->y2 - radius - aa;
 8009ebc:	921a      	str	r2, [sp, #104]	; 0x68
    rt_origo.x = coords->x2 - radius - aa;
 8009ebe:	88bd      	ldrh	r5, [r7, #4]
 8009ec0:	1a2d      	subs	r5, r5, r0
 8009ec2:	1aeb      	subs	r3, r5, r3
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	930a      	str	r3, [sp, #40]	; 0x28
    lv_circ_init(&cir, &cir_tmp, radius);
 8009ec8:	466b      	mov	r3, sp
 8009eca:	2230      	movs	r2, #48	; 0x30
 8009ecc:	5e9b      	ldrsh	r3, [r3, r2]
 8009ece:	0020      	movs	r0, r4
 8009ed0:	001a      	movs	r2, r3
 8009ed2:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ed4:	f002 fb0f 	bl	800c4f6 <lv_circ_init>
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8009ed8:	8862      	ldrh	r2, [r4, #2]
 8009eda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009edc:	8821      	ldrh	r1, [r4, #0]
 8009ede:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ee0:	189a      	adds	r2, r3, r2
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 8009ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8009ee4:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 8009ee6:	185b      	adds	r3, r3, r1
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8009ee8:	1a41      	subs	r1, r0, r1
 8009eea:	b21b      	sxth	r3, r3
 8009eec:	b209      	sxth	r1, r1
 8009eee:	9200      	str	r2, [sp, #0]
 8009ef0:	a826      	add	r0, sp, #152	; 0x98
 8009ef2:	f002 fa4b 	bl	800c38c <lv_area_set>
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8009ef6:	8822      	ldrh	r2, [r4, #0]
 8009ef8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009efa:	8861      	ldrh	r1, [r4, #2]
 8009efc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009efe:	189a      	adds	r2, r3, r2
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 8009f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8009f02:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 8009f04:	185b      	adds	r3, r3, r1
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8009f06:	1a41      	subs	r1, r0, r1
 8009f08:	b21b      	sxth	r3, r3
 8009f0a:	b209      	sxth	r1, r1
 8009f0c:	9200      	str	r2, [sp, #0]
 8009f0e:	a828      	add	r0, sp, #160	; 0xa0
 8009f10:	f002 fa3c 	bl	800c38c <lv_area_set>
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8009f14:	8862      	ldrh	r2, [r4, #2]
 8009f16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f18:	8821      	ldrh	r1, [r4, #0]
 8009f1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f1c:	1a9a      	subs	r2, r3, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 8009f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8009f20:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 8009f22:	185b      	adds	r3, r3, r1
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8009f24:	1a41      	subs	r1, r0, r1
 8009f26:	b21b      	sxth	r3, r3
 8009f28:	b209      	sxth	r1, r1
 8009f2a:	9200      	str	r2, [sp, #0]
 8009f2c:	a824      	add	r0, sp, #144	; 0x90
 8009f2e:	f002 fa2d 	bl	800c38c <lv_area_set>
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8009f32:	8822      	ldrh	r2, [r4, #0]
 8009f34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f36:	8861      	ldrh	r1, [r4, #2]
 8009f38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f3a:	1a9a      	subs	r2, r3, r2
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 8009f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8009f3e:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 8009f40:	185b      	adds	r3, r3, r1
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8009f42:	1a41      	subs	r1, r0, r1
 8009f44:	b21b      	sxth	r3, r3
 8009f46:	b209      	sxth	r1, r1
 8009f48:	9200      	str	r2, [sp, #0]
 8009f4a:	a822      	add	r0, sp, #136	; 0x88
 8009f4c:	f002 fa1e 	bl	800c38c <lv_area_set>
    lv_coord_t out_y_seg_start = 0;
 8009f50:	2300      	movs	r3, #0
 8009f52:	9310      	str	r3, [sp, #64]	; 0x40
    while(lv_circ_cont(&cir)) {
 8009f54:	ac20      	add	r4, sp, #128	; 0x80
 8009f56:	0020      	movs	r0, r4
 8009f58:	f002 fad4 	bl	800c504 <lv_circ_cont>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	d000      	beq.n	8009f62 <lv_draw_rect+0x7c2>
 8009f60:	e35f      	b.n	800a622 <lv_draw_rect+0xe82>
    if(mcolor.full == gcolor.full)
 8009f62:	9b05      	ldr	r3, [sp, #20]
 8009f64:	9a06      	ldr	r2, [sp, #24]
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d001      	beq.n	8009f6e <lv_draw_rect+0x7ce>
 8009f6a:	f000 fd10 	bl	800a98e <lv_draw_rect+0x11ee>
        act_color = mcolor;
 8009f6e:	466b      	mov	r3, sp
 8009f70:	8a9a      	ldrh	r2, [r3, #20]
    lv_draw_fill(&edge_top_area, mask, act_color, opa);
 8009f72:	ac22      	add	r4, sp, #136	; 0x88
 8009f74:	9b07      	ldr	r3, [sp, #28]
 8009f76:	9903      	ldr	r1, [sp, #12]
 8009f78:	0020      	movs	r0, r4
 8009f7a:	f7fe fc3d 	bl	80087f8 <lv_draw_fill>
    if(edge_top_area.y1 != mid_top_area.y1) {
 8009f7e:	ab24      	add	r3, sp, #144	; 0x90
 8009f80:	2202      	movs	r2, #2
 8009f82:	5e9b      	ldrsh	r3, [r3, r2]
 8009f84:	2102      	movs	r1, #2
 8009f86:	5e62      	ldrsh	r2, [r4, r1]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d00c      	beq.n	8009fa6 <lv_draw_rect+0x806>
        if(mcolor.full == gcolor.full)
 8009f8c:	9a05      	ldr	r2, [sp, #20]
 8009f8e:	9906      	ldr	r1, [sp, #24]
 8009f90:	428a      	cmp	r2, r1
 8009f92:	d001      	beq.n	8009f98 <lv_draw_rect+0x7f8>
 8009f94:	f000 fd0f 	bl	800a9b6 <lv_draw_rect+0x1216>
            act_color = mcolor;
 8009f98:	466b      	mov	r3, sp
 8009f9a:	8a9a      	ldrh	r2, [r3, #20]
        lv_draw_fill(&mid_top_area, mask, act_color, opa);
 8009f9c:	9b07      	ldr	r3, [sp, #28]
 8009f9e:	9903      	ldr	r1, [sp, #12]
 8009fa0:	a824      	add	r0, sp, #144	; 0x90
 8009fa2:	f7fe fc29 	bl	80087f8 <lv_draw_fill>
    if(mcolor.full == gcolor.full)
 8009fa6:	9b05      	ldr	r3, [sp, #20]
 8009fa8:	9a06      	ldr	r2, [sp, #24]
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d001      	beq.n	8009fb2 <lv_draw_rect+0x812>
 8009fae:	f000 fd13 	bl	800a9d8 <lv_draw_rect+0x1238>
        act_color = mcolor;
 8009fb2:	466b      	mov	r3, sp
 8009fb4:	8a9a      	ldrh	r2, [r3, #20]
    lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 8009fb6:	ac26      	add	r4, sp, #152	; 0x98
 8009fb8:	9b07      	ldr	r3, [sp, #28]
 8009fba:	9903      	ldr	r1, [sp, #12]
 8009fbc:	0020      	movs	r0, r4
 8009fbe:	f7fe fc1b 	bl	80087f8 <lv_draw_fill>
    if(edge_bot_area.y1 != mid_bot_area.y1) {
 8009fc2:	ab28      	add	r3, sp, #160	; 0xa0
 8009fc4:	2202      	movs	r2, #2
 8009fc6:	5e9b      	ldrsh	r3, [r3, r2]
 8009fc8:	2102      	movs	r1, #2
 8009fca:	5e62      	ldrsh	r2, [r4, r1]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d00c      	beq.n	8009fea <lv_draw_rect+0x84a>
        if(mcolor.full == gcolor.full)
 8009fd0:	9a05      	ldr	r2, [sp, #20]
 8009fd2:	9906      	ldr	r1, [sp, #24]
 8009fd4:	428a      	cmp	r2, r1
 8009fd6:	d001      	beq.n	8009fdc <lv_draw_rect+0x83c>
 8009fd8:	f000 fd12 	bl	800aa00 <lv_draw_rect+0x1260>
            act_color = mcolor;
 8009fdc:	466b      	mov	r3, sp
 8009fde:	8a9a      	ldrh	r2, [r3, #20]
        lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 8009fe0:	9b07      	ldr	r3, [sp, #28]
 8009fe2:	9903      	ldr	r1, [sp, #12]
 8009fe4:	a828      	add	r0, sp, #160	; 0xa0
 8009fe6:	f7fe fc07 	bl	80087f8 <lv_draw_fill>
    if(aa) {
 8009fea:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d100      	bne.n	8009ff2 <lv_draw_rect+0x852>
 8009ff0:	e0b4      	b.n	800a15c <lv_draw_rect+0x9bc>
        edge_top_area.x1 = coords->x1 + radius + 2;
 8009ff2:	883b      	ldrh	r3, [r7, #0]
 8009ff4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ff6:	3302      	adds	r3, #2
 8009ff8:	ac22      	add	r4, sp, #136	; 0x88
 8009ffa:	18d3      	adds	r3, r2, r3
 8009ffc:	8023      	strh	r3, [r4, #0]
        edge_top_area.x2 = coords->x2 - radius - 2;
 8009ffe:	88bb      	ldrh	r3, [r7, #4]
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 800a000:	0020      	movs	r0, r4
        edge_top_area.x2 = coords->x2 - radius - 2;
 800a002:	3b02      	subs	r3, #2
 800a004:	1a9b      	subs	r3, r3, r2
 800a006:	80a3      	strh	r3, [r4, #4]
        edge_top_area.y1 = coords->y1;
 800a008:	2202      	movs	r2, #2
 800a00a:	5ebb      	ldrsh	r3, [r7, r2]
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 800a00c:	9a04      	ldr	r2, [sp, #16]
        edge_top_area.y1 = coords->y1;
 800a00e:	8063      	strh	r3, [r4, #2]
        edge_top_area.y2 = coords->y1;
 800a010:	80e3      	strh	r3, [r4, #6]
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 800a012:	8852      	ldrh	r2, [r2, #2]
 800a014:	9b07      	ldr	r3, [sp, #28]
 800a016:	9903      	ldr	r1, [sp, #12]
 800a018:	f7fe fbee 	bl	80087f8 <lv_draw_fill>
        edge_top_area.y1 = coords->y2;
 800a01c:	2206      	movs	r2, #6
 800a01e:	5ebb      	ldrsh	r3, [r7, r2]
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 800a020:	9a04      	ldr	r2, [sp, #16]
        edge_top_area.y1 = coords->y2;
 800a022:	8063      	strh	r3, [r4, #2]
        edge_top_area.y2 = coords->y2;
 800a024:	80e3      	strh	r3, [r4, #6]
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 800a026:	0020      	movs	r0, r4
 800a028:	9b07      	ldr	r3, [sp, #28]
 800a02a:	8892      	ldrh	r2, [r2, #4]
 800a02c:	9903      	ldr	r1, [sp, #12]
 800a02e:	f7fe fbe3 	bl	80087f8 <lv_draw_fill>
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a032:	2240      	movs	r2, #64	; 0x40
 800a034:	466b      	mov	r3, sp
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800a036:	25ff      	movs	r5, #255	; 0xff
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a038:	189b      	adds	r3, r3, r2
 800a03a:	881b      	ldrh	r3, [r3, #0]
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800a03c:	9908      	ldr	r1, [sp, #32]
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a03e:	9313      	str	r3, [sp, #76]	; 0x4c
        out_y_seg_end       = cir.y;
 800a040:	ab20      	add	r3, sp, #128	; 0x80
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a042:	885b      	ldrh	r3, [r3, #2]
 800a044:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a046:	1a9b      	subs	r3, r3, r2
 800a048:	b21b      	sxth	r3, r3
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800a04a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a04c:	9316      	str	r3, [sp, #88]	; 0x58
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800a04e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a050:	1a98      	subs	r0, r3, r2
 800a052:	4368      	muls	r0, r5
 800a054:	f7f6 f884 	bl	8000160 <__udivsi3>
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 800a058:	466b      	mov	r3, sp
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800a05a:	b2c4      	uxtb	r4, r0
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 800a05c:	0022      	movs	r2, r4
 800a05e:	8a99      	ldrh	r1, [r3, #20]
 800a060:	8b18      	ldrh	r0, [r3, #24]
 800a062:	f7ff fb35 	bl	80096d0 <lv_color_mix>
 800a066:	2248      	movs	r2, #72	; 0x48
 800a068:	466b      	mov	r3, sp
 800a06a:	189b      	adds	r3, r3, r2
 800a06c:	8018      	strh	r0, [r3, #0]
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 800a06e:	466b      	mov	r3, sp
 800a070:	0022      	movs	r2, r4
 800a072:	8b19      	ldrh	r1, [r3, #24]
 800a074:	8a98      	ldrh	r0, [r3, #20]
 800a076:	f7ff fb2b 	bl	80096d0 <lv_color_mix>
 800a07a:	2244      	movs	r2, #68	; 0x44
 800a07c:	466b      	mov	r3, sp
        for(i = 0; i < seg_size; i++) {
 800a07e:	2400      	movs	r4, #0
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 800a080:	189b      	adds	r3, r3, r2
 800a082:	8018      	strh	r0, [r3, #0]
 800a084:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a086:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a088:	1a9b      	subs	r3, r3, r2
 800a08a:	435d      	muls	r5, r3
 800a08c:	9517      	str	r5, [sp, #92]	; 0x5c
        for(i = 0; i < seg_size; i++) {
 800a08e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a090:	42a3      	cmp	r3, r4
 800a092:	dd01      	ble.n	800a098 <lv_draw_rect+0x8f8>
 800a094:	f000 fcc5 	bl	800aa22 <lv_draw_rect+0x1282>
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 800a098:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a09a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a09c:	1a9b      	subs	r3, r3, r2
 800a09e:	17da      	asrs	r2, r3, #31
 800a0a0:	189b      	adds	r3, r3, r2
 800a0a2:	4053      	eors	r3, r2
 800a0a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d158      	bne.n	800a15c <lv_draw_rect+0x9bc>
            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 800a0aa:	20ff      	movs	r0, #255	; 0xff
 800a0ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0ae:	9908      	ldr	r1, [sp, #32]
 800a0b0:	4358      	muls	r0, r3
 800a0b2:	f7f6 f855 	bl	8000160 <__udivsi3>
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800a0b6:	466b      	mov	r3, sp
            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 800a0b8:	b2c4      	uxtb	r4, r0
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800a0ba:	0022      	movs	r2, r4
 800a0bc:	8a99      	ldrh	r1, [r3, #20]
 800a0be:	8b18      	ldrh	r0, [r3, #24]
 800a0c0:	f7ff fb06 	bl	80096d0 <lv_color_mix>
 800a0c4:	2244      	movs	r2, #68	; 0x44
 800a0c6:	466b      	mov	r3, sp
 800a0c8:	189b      	adds	r3, r3, r2
 800a0ca:	8018      	strh	r0, [r3, #0]
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800a0cc:	466b      	mov	r3, sp
 800a0ce:	0022      	movs	r2, r4
 800a0d0:	8b19      	ldrh	r1, [r3, #24]
 800a0d2:	8a98      	ldrh	r0, [r3, #20]
 800a0d4:	f7ff fafc 	bl	80096d0 <lv_color_mix>
 800a0d8:	2248      	movs	r2, #72	; 0x48
 800a0da:	466b      	mov	r3, sp
 800a0dc:	189b      	adds	r3, r3, r2
 800a0de:	8018      	strh	r0, [r3, #0]
            lv_opa_t aa_opa = opa >> 1;
 800a0e0:	9b07      	ldr	r3, [sp, #28]
 800a0e2:	085b      	lsrs	r3, r3, #1
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	9305      	str	r3, [sp, #20]
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom,
 800a0e8:	466b      	mov	r3, sp
 800a0ea:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
 800a0ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0ee:	191d      	adds	r5, r3, r4
 800a0f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0f2:	b22d      	sxth	r5, r5
 800a0f4:	191b      	adds	r3, r3, r4
 800a0f6:	b21b      	sxth	r3, r3
 800a0f8:	9306      	str	r3, [sp, #24]
 800a0fa:	9b05      	ldr	r3, [sp, #20]
 800a0fc:	9906      	ldr	r1, [sp, #24]
 800a0fe:	9300      	str	r3, [sp, #0]
 800a100:	466b      	mov	r3, sp
 800a102:	189b      	adds	r3, r3, r2
 800a104:	881b      	ldrh	r3, [r3, #0]
 800a106:	9a03      	ldr	r2, [sp, #12]
 800a108:	0028      	movs	r0, r5
 800a10a:	f7fe fb2c 	bl	8008766 <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask, aa_color_hor_bottom,
 800a10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a110:	2248      	movs	r2, #72	; 0x48
 800a112:	1b1e      	subs	r6, r3, r4
 800a114:	9b05      	ldr	r3, [sp, #20]
 800a116:	b236      	sxth	r6, r6
 800a118:	9300      	str	r3, [sp, #0]
 800a11a:	466b      	mov	r3, sp
 800a11c:	189b      	adds	r3, r3, r2
 800a11e:	881b      	ldrh	r3, [r3, #0]
 800a120:	9a03      	ldr	r2, [sp, #12]
 800a122:	9906      	ldr	r1, [sp, #24]
 800a124:	0030      	movs	r0, r6
 800a126:	f7fe fb1e 	bl	8008766 <lv_draw_px>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask, aa_color_hor_top,
 800a12a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a12c:	2244      	movs	r2, #68	; 0x44
 800a12e:	1b1c      	subs	r4, r3, r4
 800a130:	9b05      	ldr	r3, [sp, #20]
 800a132:	b224      	sxth	r4, r4
 800a134:	9300      	str	r3, [sp, #0]
 800a136:	466b      	mov	r3, sp
 800a138:	189b      	adds	r3, r3, r2
 800a13a:	881b      	ldrh	r3, [r3, #0]
 800a13c:	9a03      	ldr	r2, [sp, #12]
 800a13e:	0021      	movs	r1, r4
 800a140:	0030      	movs	r0, r6
 800a142:	f7fe fb10 	bl	8008766 <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask, aa_color_hor_top,
 800a146:	9b05      	ldr	r3, [sp, #20]
 800a148:	2244      	movs	r2, #68	; 0x44
 800a14a:	9300      	str	r3, [sp, #0]
 800a14c:	466b      	mov	r3, sp
 800a14e:	189b      	adds	r3, r3, r2
 800a150:	881b      	ldrh	r3, [r3, #0]
 800a152:	9a03      	ldr	r2, [sp, #12]
 800a154:	0021      	movs	r1, r4
 800a156:	0028      	movs	r0, r5
 800a158:	f7fe fb05 	bl	8008766 <lv_draw_px>
    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE &&
 800a15c:	9b04      	ldr	r3, [sp, #16]
 800a15e:	220c      	movs	r2, #12
 800a160:	5e9b      	ldrsh	r3, [r3, r2]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d100      	bne.n	800a168 <lv_draw_rect+0x9c8>
 800a166:	e19c      	b.n	800a4a2 <lv_draw_rect+0xd02>
 800a168:	9b04      	ldr	r3, [sp, #16]
 800a16a:	7b9b      	ldrb	r3, [r3, #14]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d100      	bne.n	800a172 <lv_draw_rect+0x9d2>
 800a170:	e197      	b.n	800a4a2 <lv_draw_rect+0xd02>
 800a172:	9b04      	ldr	r3, [sp, #16]
 800a174:	7bdb      	ldrb	r3, [r3, #15]
 800a176:	2b0f      	cmp	r3, #15
 800a178:	d800      	bhi.n	800a17c <lv_draw_rect+0x9dc>
 800a17a:	e192      	b.n	800a4a2 <lv_draw_rect+0xd02>
    uint16_t radius = style->body.radius;
 800a17c:	9b04      	ldr	r3, [sp, #16]
 800a17e:	88dd      	ldrh	r5, [r3, #6]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800a180:	f7fd fc1c 	bl	80079bc <lv_refr_get_disp_refreshing>
 800a184:	f002 f810 	bl	800c1a8 <lv_disp_get_antialiasing>
 800a188:	88b9      	ldrh	r1, [r7, #4]
 800a18a:	883b      	ldrh	r3, [r7, #0]
 800a18c:	3101      	adds	r1, #1
    return area_p->y2 - area_p->y1 + 1;
 800a18e:	88fa      	ldrh	r2, [r7, #6]
    return area_p->x2 - area_p->x1 + 1;
 800a190:	1ac9      	subs	r1, r1, r3
    return area_p->y2 - area_p->y1 + 1;
 800a192:	887b      	ldrh	r3, [r7, #2]
 800a194:	3201      	adds	r2, #1
 800a196:	1ad2      	subs	r2, r2, r3
    lv_coord_t bwidth = style->body.border.width;
 800a198:	9b04      	ldr	r3, [sp, #16]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800a19a:	9008      	str	r0, [sp, #32]
    lv_coord_t bwidth = style->body.border.width;
 800a19c:	200c      	movs	r0, #12
 800a19e:	5e1b      	ldrsh	r3, [r3, r0]
 800a1a0:	9804      	ldr	r0, [sp, #16]
    return area_p->x2 - area_p->x1 + 1;
 800a1a2:	b209      	sxth	r1, r1
 800a1a4:	7bc4      	ldrb	r4, [r0, #15]
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800a1a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    return area_p->y2 - area_p->y1 + 1;
 800a1a8:	b212      	sxth	r2, r2
 800a1aa:	28ff      	cmp	r0, #255	; 0xff
 800a1ac:	d001      	beq.n	800a1b2 <lv_draw_rect+0xa12>
 800a1ae:	f000 fcda 	bl	800ab66 <lv_draw_rect+0x13c6>
 800a1b2:	9405      	str	r4, [sp, #20]
    bwidth--;
 800a1b4:	b29e      	uxth	r6, r3
    lv_border_part_t part = style->body.border.part;
 800a1b6:	9804      	ldr	r0, [sp, #16]
    bwidth--;
 800a1b8:	1e73      	subs	r3, r6, #1
 800a1ba:	b29b      	uxth	r3, r3
    lv_border_part_t part = style->body.border.part;
 800a1bc:	7b84      	ldrb	r4, [r0, #14]
    lv_color_t color      = style->body.border.color;
 800a1be:	8940      	ldrh	r0, [r0, #10]
    bwidth--;
 800a1c0:	9307      	str	r3, [sp, #28]
 800a1c2:	466b      	mov	r3, sp
    lv_color_t color      = style->body.border.color;
 800a1c4:	9006      	str	r0, [sp, #24]
    bwidth--;
 800a1c6:	201c      	movs	r0, #28
 800a1c8:	5e1b      	ldrsh	r3, [r3, r0]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a1ca:	0028      	movs	r0, r5
    bwidth--;
 800a1cc:	9309      	str	r3, [sp, #36]	; 0x24
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a1ce:	f7ff faa5 	bl	800971c <lv_draw_cont_radius_corr>
    if(radius < bwidth) {
 800a1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a1d4:	0005      	movs	r5, r0
    if(radius < bwidth) {
 800a1d6:	4298      	cmp	r0, r3
 800a1d8:	db01      	blt.n	800a1de <lv_draw_rect+0xa3e>
 800a1da:	f000 fcca 	bl	800ab72 <lv_draw_rect+0x13d2>
        length_corr = bwidth - radius - aa;
 800a1de:	9b07      	ldr	r3, [sp, #28]
 800a1e0:	9a08      	ldr	r2, [sp, #32]
 800a1e2:	1a1b      	subs	r3, r3, r0
 800a1e4:	1a9b      	subs	r3, r3, r2
 800a1e6:	b21b      	sxth	r3, r3
    lv_coord_t length_corr = 0;
 800a1e8:	930a      	str	r3, [sp, #40]	; 0x28
    if(style->body.radius == 0) {
 800a1ea:	9b04      	ldr	r3, [sp, #16]
 800a1ec:	2206      	movs	r2, #6
 800a1ee:	5e9a      	ldrsh	r2, [r3, r2]
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	2a00      	cmp	r2, #0
 800a1f4:	d001      	beq.n	800a1fa <lv_draw_rect+0xa5a>
 800a1f6:	f000 fcc3 	bl	800ab80 <lv_draw_rect+0x13e0>
 800a1fa:	4023      	ands	r3, r4
 800a1fc:	1e1d      	subs	r5, r3, #0
        if(part & LV_BORDER_TOP) {
 800a1fe:	d010      	beq.n	800a222 <lv_draw_rect+0xa82>
            work_area.x1 = coords->x1;
 800a200:	883b      	ldrh	r3, [r7, #0]
 800a202:	a828      	add	r0, sp, #160	; 0xa0
 800a204:	8003      	strh	r3, [r0, #0]
            work_area.x2 = coords->x2;
 800a206:	88bb      	ldrh	r3, [r7, #4]
            lv_draw_fill(&work_area, mask, color, opa);
 800a208:	9903      	ldr	r1, [sp, #12]
            work_area.x2 = coords->x2;
 800a20a:	8083      	strh	r3, [r0, #4]
            work_area.y1 = coords->y1;
 800a20c:	2202      	movs	r2, #2
 800a20e:	5ebb      	ldrsh	r3, [r7, r2]
            work_area.y2 = coords->y1 + bwidth;
 800a210:	9a07      	ldr	r2, [sp, #28]
            work_area.y1 = coords->y1;
 800a212:	8043      	strh	r3, [r0, #2]
            work_area.y2 = coords->y1 + bwidth;
 800a214:	18d3      	adds	r3, r2, r3
            lv_draw_fill(&work_area, mask, color, opa);
 800a216:	466a      	mov	r2, sp
            work_area.y2 = coords->y1 + bwidth;
 800a218:	80c3      	strh	r3, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800a21a:	8b12      	ldrh	r2, [r2, #24]
 800a21c:	9b05      	ldr	r3, [sp, #20]
 800a21e:	f7fe faeb 	bl	80087f8 <lv_draw_fill>
        if(part & LV_BORDER_RIGHT) {
 800a222:	0723      	lsls	r3, r4, #28
 800a224:	d51a      	bpl.n	800a25c <lv_draw_rect+0xabc>
            work_area.x1 = coords->x2 - bwidth;
 800a226:	2204      	movs	r2, #4
 800a228:	5ebb      	ldrsh	r3, [r7, r2]
 800a22a:	9a07      	ldr	r2, [sp, #28]
 800a22c:	a828      	add	r0, sp, #160	; 0xa0
 800a22e:	1a9a      	subs	r2, r3, r2
            work_area.x2 = coords->x2;
 800a230:	8083      	strh	r3, [r0, #4]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800a232:	002b      	movs	r3, r5
 800a234:	1e59      	subs	r1, r3, #1
 800a236:	418b      	sbcs	r3, r1
            work_area.x1 = coords->x2 - bwidth;
 800a238:	8002      	strh	r2, [r0, #0]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800a23a:	887a      	ldrh	r2, [r7, #2]
 800a23c:	425b      	negs	r3, r3
 800a23e:	4033      	ands	r3, r6
 800a240:	18d3      	adds	r3, r2, r3
 800a242:	8043      	strh	r3, [r0, #2]
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800a244:	07e3      	lsls	r3, r4, #31
 800a246:	88fa      	ldrh	r2, [r7, #6]
 800a248:	17db      	asrs	r3, r3, #31
 800a24a:	4033      	ands	r3, r6
 800a24c:	1ad3      	subs	r3, r2, r3
            lv_draw_fill(&work_area, mask, color, opa);
 800a24e:	466a      	mov	r2, sp
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800a250:	80c3      	strh	r3, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800a252:	8b12      	ldrh	r2, [r2, #24]
 800a254:	9b05      	ldr	r3, [sp, #20]
 800a256:	9903      	ldr	r1, [sp, #12]
 800a258:	f7fe face 	bl	80087f8 <lv_draw_fill>
        if(part & LV_BORDER_LEFT) {
 800a25c:	0763      	lsls	r3, r4, #29
 800a25e:	d519      	bpl.n	800a294 <lv_draw_rect+0xaf4>
            work_area.x1 = coords->x1;
 800a260:	2200      	movs	r2, #0
 800a262:	5ebb      	ldrsh	r3, [r7, r2]
            work_area.x2 = coords->x1 + bwidth;
 800a264:	9a07      	ldr	r2, [sp, #28]
            work_area.x1 = coords->x1;
 800a266:	a828      	add	r0, sp, #160	; 0xa0
 800a268:	8003      	strh	r3, [r0, #0]
            work_area.x2 = coords->x1 + bwidth;
 800a26a:	18d3      	adds	r3, r2, r3
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800a26c:	1e6a      	subs	r2, r5, #1
 800a26e:	4195      	sbcs	r5, r2
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800a270:	07e2      	lsls	r2, r4, #31
 800a272:	17d2      	asrs	r2, r2, #31
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800a274:	426d      	negs	r5, r5
 800a276:	4035      	ands	r5, r6
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800a278:	4016      	ands	r6, r2
            lv_draw_fill(&work_area, mask, color, opa);
 800a27a:	466a      	mov	r2, sp
            work_area.x2 = coords->x1 + bwidth;
 800a27c:	8083      	strh	r3, [r0, #4]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800a27e:	887b      	ldrh	r3, [r7, #2]
            lv_draw_fill(&work_area, mask, color, opa);
 800a280:	8b12      	ldrh	r2, [r2, #24]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800a282:	195d      	adds	r5, r3, r5
 800a284:	8045      	strh	r5, [r0, #2]
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800a286:	88fb      	ldrh	r3, [r7, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800a288:	9903      	ldr	r1, [sp, #12]
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800a28a:	1b9b      	subs	r3, r3, r6
 800a28c:	80c3      	strh	r3, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800a28e:	9b05      	ldr	r3, [sp, #20]
 800a290:	f7fe fab2 	bl	80087f8 <lv_draw_fill>
        if(part & LV_BORDER_BOTTOM) {
 800a294:	07e3      	lsls	r3, r4, #31
 800a296:	d510      	bpl.n	800a2ba <lv_draw_rect+0xb1a>
            work_area.x1 = coords->x1;
 800a298:	883b      	ldrh	r3, [r7, #0]
 800a29a:	a828      	add	r0, sp, #160	; 0xa0
 800a29c:	8003      	strh	r3, [r0, #0]
            work_area.x2 = coords->x2;
 800a29e:	88bb      	ldrh	r3, [r7, #4]
 800a2a0:	8083      	strh	r3, [r0, #4]
            work_area.y1 = coords->y2 - bwidth;
 800a2a2:	2206      	movs	r2, #6
 800a2a4:	5ebb      	ldrsh	r3, [r7, r2]
 800a2a6:	9a07      	ldr	r2, [sp, #28]
            work_area.y2 = coords->y2;
 800a2a8:	80c3      	strh	r3, [r0, #6]
            work_area.y1 = coords->y2 - bwidth;
 800a2aa:	1a9a      	subs	r2, r3, r2
 800a2ac:	8042      	strh	r2, [r0, #2]
            lv_draw_fill(&work_area, mask, color, opa);
 800a2ae:	466a      	mov	r2, sp
 800a2b0:	9b05      	ldr	r3, [sp, #20]
 800a2b2:	8b12      	ldrh	r2, [r2, #24]
 800a2b4:	9903      	ldr	r1, [sp, #12]
 800a2b6:	f7fe fa9f 	bl	80087f8 <lv_draw_fill>
        if(style->body.radius != 0) {
 800a2ba:	9b04      	ldr	r3, [sp, #16]
 800a2bc:	2506      	movs	r5, #6
 800a2be:	5f5d      	ldrsh	r5, [r3, r5]
 800a2c0:	2d00      	cmp	r5, #0
 800a2c2:	d100      	bne.n	800a2c6 <lv_draw_rect+0xb26>
 800a2c4:	e0ed      	b.n	800a4a2 <lv_draw_rect+0xd02>
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800a2c6:	f7fd fb79 	bl	80079bc <lv_refr_get_disp_refreshing>
 800a2ca:	f001 ff6d 	bl	800c1a8 <lv_disp_get_antialiasing>
    lv_color_t color      = style->body.border.color;
 800a2ce:	466a      	mov	r2, sp
    lv_coord_t bwidth     = style->body.border.width;
 800a2d0:	9b04      	ldr	r3, [sp, #16]
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800a2d2:	9014      	str	r0, [sp, #80]	; 0x50
    lv_coord_t bwidth     = style->body.border.width;
 800a2d4:	240c      	movs	r4, #12
 800a2d6:	5f1c      	ldrsh	r4, [r3, r4]
    lv_color_t color      = style->body.border.color;
 800a2d8:	9b04      	ldr	r3, [sp, #16]
    uint16_t radius       = style->body.radius;
 800a2da:	b2ad      	uxth	r5, r5
    lv_color_t color      = style->body.border.color;
 800a2dc:	895b      	ldrh	r3, [r3, #10]
 800a2de:	8713      	strh	r3, [r2, #56]	; 0x38
    lv_border_part_t part = style->body.border.part;
 800a2e0:	9b04      	ldr	r3, [sp, #16]
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800a2e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    lv_border_part_t part = style->body.border.part;
 800a2e4:	7b9b      	ldrb	r3, [r3, #14]
 800a2e6:	9305      	str	r3, [sp, #20]
 800a2e8:	9b04      	ldr	r3, [sp, #16]
 800a2ea:	7bdb      	ldrb	r3, [r3, #15]
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800a2ec:	2aff      	cmp	r2, #255	; 0xff
 800a2ee:	d001      	beq.n	800a2f4 <lv_draw_rect+0xb54>
 800a2f0:	f000 fd76 	bl	800ade0 <lv_draw_rect+0x1640>
 800a2f4:	930b      	str	r3, [sp, #44]	; 0x2c
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800a2f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    bwidth--;
 800a2f8:	b2a4      	uxth	r4, r4
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d001      	beq.n	800a302 <lv_draw_rect+0xb62>
 800a2fe:	f000 fd74 	bl	800adea <lv_draw_rect+0x164a>
    bwidth--;
 800a302:	3c01      	subs	r4, #1
 800a304:	88fa      	ldrh	r2, [r7, #6]
 800a306:	887b      	ldrh	r3, [r7, #2]
    return area_p->x2 - area_p->x1 + 1;
 800a308:	88b9      	ldrh	r1, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 800a30a:	3201      	adds	r2, #1
 800a30c:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 800a30e:	883b      	ldrh	r3, [r7, #0]
 800a310:	3101      	adds	r1, #1
 800a312:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a314:	b209      	sxth	r1, r1
 800a316:	b212      	sxth	r2, r2
 800a318:	0028      	movs	r0, r5
 800a31a:	f7ff f9ff 	bl	800971c <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + aa;
 800a31e:	2250      	movs	r2, #80	; 0x50
 800a320:	466b      	mov	r3, sp
 800a322:	189b      	adds	r3, r3, r2
 800a324:	881b      	ldrh	r3, [r3, #0]
 800a326:	883a      	ldrh	r2, [r7, #0]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a328:	0005      	movs	r5, r0
    lt_origo.x = coords->x1 + radius + aa;
 800a32a:	189a      	adds	r2, r3, r2
 800a32c:	1882      	adds	r2, r0, r2
 800a32e:	b292      	uxth	r2, r2
 800a330:	9208      	str	r2, [sp, #32]
    lt_origo.y = coords->y1 + radius + aa;
 800a332:	887a      	ldrh	r2, [r7, #2]
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800a334:	b2a4      	uxth	r4, r4
    lt_origo.y = coords->y1 + radius + aa;
 800a336:	189a      	adds	r2, r3, r2
 800a338:	1882      	adds	r2, r0, r2
 800a33a:	b292      	uxth	r2, r2
 800a33c:	9206      	str	r2, [sp, #24]
 800a33e:	466a      	mov	r2, sp
 800a340:	2118      	movs	r1, #24
 800a342:	5e52      	ldrsh	r2, [r2, r1]
    lv_coord_t radius_in = radius - bwidth;
 800a344:	1b2c      	subs	r4, r5, r4
    lt_origo.y = coords->y1 + radius + aa;
 800a346:	9215      	str	r2, [sp, #84]	; 0x54
    lb_origo.y = coords->y2 - radius - aa;
 800a348:	88fa      	ldrh	r2, [r7, #6]
 800a34a:	1a12      	subs	r2, r2, r0
 800a34c:	1ad2      	subs	r2, r2, r3
 800a34e:	b292      	uxth	r2, r2
 800a350:	9207      	str	r2, [sp, #28]
 800a352:	466a      	mov	r2, sp
 800a354:	211c      	movs	r1, #28
 800a356:	5e52      	ldrsh	r2, [r2, r1]
    lv_circ_init(&cir_out, &tmp_out, radius);
 800a358:	a920      	add	r1, sp, #128	; 0x80
    lb_origo.y = coords->y2 - radius - aa;
 800a35a:	9216      	str	r2, [sp, #88]	; 0x58
    rt_origo.x = coords->x2 - radius - aa;
 800a35c:	88ba      	ldrh	r2, [r7, #4]
 800a35e:	1a12      	subs	r2, r2, r0
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	b29b      	uxth	r3, r3
 800a364:	9309      	str	r3, [sp, #36]	; 0x24
    lv_circ_init(&cir_out, &tmp_out, radius);
 800a366:	b203      	sxth	r3, r0
 800a368:	001a      	movs	r2, r3
 800a36a:	a824      	add	r0, sp, #144	; 0x90
 800a36c:	930c      	str	r3, [sp, #48]	; 0x30
 800a36e:	f002 f8c2 	bl	800c4f6 <lv_circ_init>
    lv_coord_t radius_in = radius - bwidth;
 800a372:	b223      	sxth	r3, r4
 800a374:	930a      	str	r3, [sp, #40]	; 0x28
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 800a376:	466b      	mov	r3, sp
 800a378:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a37a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	da00      	bge.n	800a382 <lv_draw_rect+0xbe2>
 800a380:	2200      	movs	r2, #0
 800a382:	b212      	sxth	r2, r2
 800a384:	a922      	add	r1, sp, #136	; 0x88
 800a386:	a826      	add	r0, sp, #152	; 0x98
 800a388:	f002 f8b5 	bl	800c4f6 <lv_circ_init>
    lv_coord_t in_y_seg_start = 0;
 800a38c:	2300      	movs	r3, #0
 800a38e:	9311      	str	r3, [sp, #68]	; 0x44
    lv_coord_t out_y_seg_start = 0;
 800a390:	9313      	str	r3, [sp, #76]	; 0x4c
    while(cir_out.y <= cir_out.x) {
 800a392:	ab24      	add	r3, sp, #144	; 0x90
 800a394:	2102      	movs	r1, #2
 800a396:	5e5a      	ldrsh	r2, [r3, r1]
 800a398:	9210      	str	r2, [sp, #64]	; 0x40
 800a39a:	2200      	movs	r2, #0
 800a39c:	5e9a      	ldrsh	r2, [r3, r2]
 800a39e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	db01      	blt.n	800a3a8 <lv_draw_rect+0xc08>
 800a3a4:	f000 fd24 	bl	800adf0 <lv_draw_rect+0x1650>
    if(aa) {
 800a3a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d100      	bne.n	800a3b0 <lv_draw_rect+0xc10>
 800a3ae:	e078      	b.n	800a4a2 <lv_draw_rect+0xd02>
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a3b0:	466b      	mov	r3, sp
 800a3b2:	224c      	movs	r2, #76	; 0x4c
 800a3b4:	189b      	adds	r3, r3, r2
 800a3b6:	881d      	ldrh	r5, [r3, #0]
 800a3b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3ba:	1b5b      	subs	r3, r3, r5
 800a3bc:	b21b      	sxth	r3, r3
 800a3be:	930e      	str	r3, [sp, #56]	; 0x38
        for(i = 0; i < seg_size; i++) {
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	930d      	str	r3, [sp, #52]	; 0x34
 800a3c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	dd01      	ble.n	800a3d0 <lv_draw_rect+0xc30>
 800a3cc:	f000 ffa6 	bl	800b31c <lv_draw_rect+0x1b7c>
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 800a3d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a3d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3d4:	1a9b      	subs	r3, r3, r2
 800a3d6:	17da      	asrs	r2, r3, #31
 800a3d8:	189b      	adds	r3, r3, r2
 800a3da:	4053      	eors	r3, r2
 800a3dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d14e      	bne.n	800a480 <lv_draw_rect+0xce0>
            lv_opa_t aa_opa = opa >> 1;
 800a3e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800a3e4:	9a05      	ldr	r2, [sp, #20]
            lv_opa_t aa_opa = opa >> 1;
 800a3e6:	085c      	lsrs	r4, r3, #1
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800a3e8:	2309      	movs	r3, #9
            lv_opa_t aa_opa = opa >> 1;
 800a3ea:	b2e4      	uxtb	r4, r4
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800a3ec:	4013      	ands	r3, r2
 800a3ee:	2b09      	cmp	r3, #9
 800a3f0:	d10d      	bne.n	800a40e <lv_draw_rect+0xc6e>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask,
 800a3f2:	466b      	mov	r3, sp
 800a3f4:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 800a3f6:	9b07      	ldr	r3, [sp, #28]
 800a3f8:	9400      	str	r4, [sp, #0]
 800a3fa:	1819      	adds	r1, r3, r0
 800a3fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3fe:	b209      	sxth	r1, r1
 800a400:	1818      	adds	r0, r3, r0
 800a402:	9b04      	ldr	r3, [sp, #16]
 800a404:	b200      	sxth	r0, r0
 800a406:	895b      	ldrh	r3, [r3, #10]
 800a408:	9a03      	ldr	r2, [sp, #12]
 800a40a:	f7fe f9ac 	bl	8008766 <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800a40e:	2305      	movs	r3, #5
 800a410:	9a05      	ldr	r2, [sp, #20]
 800a412:	4013      	ands	r3, r2
 800a414:	2b05      	cmp	r3, #5
 800a416:	d10d      	bne.n	800a434 <lv_draw_rect+0xc94>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask,
 800a418:	466b      	mov	r3, sp
 800a41a:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 800a41c:	9b07      	ldr	r3, [sp, #28]
 800a41e:	9400      	str	r4, [sp, #0]
 800a420:	1819      	adds	r1, r3, r0
 800a422:	9b08      	ldr	r3, [sp, #32]
 800a424:	b209      	sxth	r1, r1
 800a426:	1a18      	subs	r0, r3, r0
 800a428:	9b04      	ldr	r3, [sp, #16]
 800a42a:	b200      	sxth	r0, r0
 800a42c:	895b      	ldrh	r3, [r3, #10]
 800a42e:	9a03      	ldr	r2, [sp, #12]
 800a430:	f7fe f999 	bl	8008766 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800a434:	2306      	movs	r3, #6
 800a436:	9a05      	ldr	r2, [sp, #20]
 800a438:	4013      	ands	r3, r2
 800a43a:	2b06      	cmp	r3, #6
 800a43c:	d10d      	bne.n	800a45a <lv_draw_rect+0xcba>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask,
 800a43e:	466b      	mov	r3, sp
 800a440:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 800a442:	9b06      	ldr	r3, [sp, #24]
 800a444:	9400      	str	r4, [sp, #0]
 800a446:	1a19      	subs	r1, r3, r0
 800a448:	9b08      	ldr	r3, [sp, #32]
 800a44a:	b209      	sxth	r1, r1
 800a44c:	1a18      	subs	r0, r3, r0
 800a44e:	9b04      	ldr	r3, [sp, #16]
 800a450:	b200      	sxth	r0, r0
 800a452:	895b      	ldrh	r3, [r3, #10]
 800a454:	9a03      	ldr	r2, [sp, #12]
 800a456:	f7fe f986 	bl	8008766 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800a45a:	230a      	movs	r3, #10
 800a45c:	9a05      	ldr	r2, [sp, #20]
 800a45e:	4013      	ands	r3, r2
 800a460:	2b0a      	cmp	r3, #10
 800a462:	d10d      	bne.n	800a480 <lv_draw_rect+0xce0>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask,
 800a464:	466b      	mov	r3, sp
 800a466:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 800a468:	9b06      	ldr	r3, [sp, #24]
 800a46a:	9400      	str	r4, [sp, #0]
 800a46c:	1a19      	subs	r1, r3, r0
 800a46e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a470:	b209      	sxth	r1, r1
 800a472:	1818      	adds	r0, r3, r0
 800a474:	9b04      	ldr	r3, [sp, #16]
 800a476:	b200      	sxth	r0, r0
 800a478:	895b      	ldrh	r3, [r3, #10]
 800a47a:	9a03      	ldr	r2, [sp, #12]
 800a47c:	f7fe f973 	bl	8008766 <lv_draw_px>
        seg_size     = in_y_seg_end - in_y_seg_start;
 800a480:	466b      	mov	r3, sp
 800a482:	2244      	movs	r2, #68	; 0x44
 800a484:	189b      	adds	r3, r3, r2
 800a486:	881d      	ldrh	r5, [r3, #0]
        in_y_seg_end = cir_in.y;
 800a488:	ab26      	add	r3, sp, #152	; 0x98
        seg_size     = in_y_seg_end - in_y_seg_start;
 800a48a:	885b      	ldrh	r3, [r3, #2]
 800a48c:	1b5b      	subs	r3, r3, r5
 800a48e:	b21b      	sxth	r3, r3
 800a490:	930d      	str	r3, [sp, #52]	; 0x34
 800a492:	2300      	movs	r3, #0
        for(i = 0; i < seg_size; i++) {
 800a494:	001c      	movs	r4, r3
        seg_size     = in_y_seg_end - in_y_seg_start;
 800a496:	930c      	str	r3, [sp, #48]	; 0x30
        for(i = 0; i < seg_size; i++) {
 800a498:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a49a:	42a3      	cmp	r3, r4
 800a49c:	dd01      	ble.n	800a4a2 <lv_draw_rect+0xd02>
 800a49e:	f000 ffda 	bl	800b456 <lv_draw_rect+0x1cb6>
}
 800a4a2:	b02b      	add	sp, #172	; 0xac
 800a4a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	5eea      	ldrsh	r2, [r5, r3]
 800a4aa:	2102      	movs	r1, #2
 800a4ac:	5e6b      	ldrsh	r3, [r5, r1]
 800a4ae:	9906      	ldr	r1, [sp, #24]
 800a4b0:	005b      	lsls	r3, r3, #1
 800a4b2:	525a      	strh	r2, [r3, r1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 800a4b4:	2302      	movs	r3, #2
 800a4b6:	5eea      	ldrsh	r2, [r5, r3]
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	5e6b      	ldrsh	r3, [r5, r1]
 800a4bc:	9906      	ldr	r1, [sp, #24]
 800a4be:	005b      	lsls	r3, r3, #1
 800a4c0:	525a      	strh	r2, [r3, r1]
        lv_circ_next(&circ, &circ_tmp);
 800a4c2:	0028      	movs	r0, r5
 800a4c4:	a924      	add	r1, sp, #144	; 0x90
 800a4c6:	f002 f827 	bl	800c518 <lv_circ_next>
 800a4ca:	f7ff fc09 	bl	8009ce0 <lv_draw_rect+0x540>
        line_1d_blur[col] = (uint32_t)((uint32_t)(swidth - col) * opa / 2) / (swidth);
 800a4ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4d0:	9905      	ldr	r1, [sp, #20]
 800a4d2:	0858      	lsrs	r0, r3, #1
 800a4d4:	f7f5 fe44 	bl	8000160 <__udivsi3>
 800a4d8:	9b07      	ldr	r3, [sp, #28]
 800a4da:	5598      	strb	r0, [r3, r6]
 800a4dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4de:	3601      	adds	r6, #1
 800a4e0:	1b5b      	subs	r3, r3, r5
 800a4e2:	930a      	str	r3, [sp, #40]	; 0x28
 800a4e4:	f7ff fc0f 	bl	8009d06 <lv_draw_rect+0x566>
 800a4e8:	466b      	mov	r3, sp
 800a4ea:	8c18      	ldrh	r0, [r3, #32]
 800a4ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        point_l.y = ofs_l.y + curve_x[col];
 800a4ee:	9a06      	ldr	r2, [sp, #24]
 800a4f0:	1a1b      	subs	r3, r3, r0
 800a4f2:	b21b      	sxth	r3, r3
 800a4f4:	9313      	str	r3, [sp, #76]	; 0x4c
 800a4f6:	004b      	lsls	r3, r1, #1
 800a4f8:	5ad2      	ldrh	r2, [r2, r3]
 800a4fa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800a4fc:	18a4      	adds	r4, r4, r2
 800a4fe:	b2a4      	uxth	r4, r4
 800a500:	9412      	str	r4, [sp, #72]	; 0x48
 800a502:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a504:	1820      	adds	r0, r4, r0
 800a506:	b200      	sxth	r0, r0
 800a508:	900e      	str	r0, [sp, #56]	; 0x38
        int16_t diff = col == 0 ? 0 : curve_x[col - 1] - curve_x[col];
 800a50a:	1e0c      	subs	r4, r1, #0
 800a50c:	d005      	beq.n	800a51a <lv_draw_rect+0xd7a>
 800a50e:	9906      	ldr	r1, [sp, #24]
 800a510:	18cb      	adds	r3, r1, r3
 800a512:	3b02      	subs	r3, #2
 800a514:	881c      	ldrh	r4, [r3, #0]
 800a516:	1aa4      	subs	r4, r4, r2
 800a518:	b2a4      	uxth	r4, r4
 800a51a:	2600      	movs	r6, #0
 800a51c:	b224      	sxth	r4, r4
 800a51e:	9b12      	ldr	r3, [sp, #72]	; 0x48
        for(d = 0; d < swidth; d++) {
 800a520:	9a05      	ldr	r2, [sp, #20]
 800a522:	199b      	adds	r3, r3, r6
 800a524:	b21b      	sxth	r3, r3
 800a526:	930f      	str	r3, [sp, #60]	; 0x3c
 800a528:	b2b3      	uxth	r3, r6
 800a52a:	4293      	cmp	r3, r2
 800a52c:	db03      	blt.n	800a536 <lv_draw_rect+0xd96>
 800a52e:	9b08      	ldr	r3, [sp, #32]
 800a530:	3301      	adds	r3, #1
 800a532:	f7ff fc04 	bl	8009d3e <lv_draw_rect+0x59e>
                px_opa = line_1d_blur[d];
 800a536:	9a07      	ldr	r2, [sp, #28]
 800a538:	5cd5      	ldrb	r5, [r2, r3]
            if(diff == 0) {
 800a53a:	2c00      	cmp	r4, #0
 800a53c:	d115      	bne.n	800a56a <lv_draw_rect+0xdca>
            lv_draw_px(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 800a53e:	9b04      	ldr	r3, [sp, #16]
 800a540:	9500      	str	r5, [sp, #0]
 800a542:	8a1b      	ldrh	r3, [r3, #16]
 800a544:	9a03      	ldr	r2, [sp, #12]
 800a546:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a548:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800a54a:	f7fe f90c 	bl	8008766 <lv_draw_px>
            if(point_r.x > ofs_l.x) {
 800a54e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a550:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a552:	4293      	cmp	r3, r2
 800a554:	da07      	bge.n	800a566 <lv_draw_rect+0xdc6>
                lv_draw_px(point_r.x, point_r.y, mask, style->body.shadow.color, px_opa);
 800a556:	9b04      	ldr	r3, [sp, #16]
 800a558:	9500      	str	r5, [sp, #0]
 800a55a:	8a1b      	ldrh	r3, [r3, #16]
 800a55c:	9a03      	ldr	r2, [sp, #12]
 800a55e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a560:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a562:	f7fe f900 	bl	8008766 <lv_draw_px>
 800a566:	3601      	adds	r6, #1
 800a568:	e7d9      	b.n	800a51e <lv_draw_rect+0xd7e>
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
 800a56a:	1b1b      	subs	r3, r3, r4
 800a56c:	5cd3      	ldrb	r3, [r2, r3]
 800a56e:	18ed      	adds	r5, r5, r3
 800a570:	086d      	lsrs	r5, r5, #1
 800a572:	e7e4      	b.n	800a53e <lv_draw_rect+0xd9e>
        lv_draw_fill(&area_mid, mask, style->body.shadow.color, line_1d_blur[d]);
 800a574:	9b07      	ldr	r3, [sp, #28]
 800a576:	9a04      	ldr	r2, [sp, #16]
 800a578:	ad28      	add	r5, sp, #160	; 0xa0
 800a57a:	5d1b      	ldrb	r3, [r3, r4]
 800a57c:	8a12      	ldrh	r2, [r2, #16]
 800a57e:	9903      	ldr	r1, [sp, #12]
 800a580:	0028      	movs	r0, r5
 800a582:	f7fe f939 	bl	80087f8 <lv_draw_fill>
        area_mid.y1++;
 800a586:	886b      	ldrh	r3, [r5, #2]
    for(d = 0; d < swidth; d++) {
 800a588:	3401      	adds	r4, #1
        area_mid.y1++;
 800a58a:	3301      	adds	r3, #1
 800a58c:	806b      	strh	r3, [r5, #2]
        area_mid.y2++;
 800a58e:	88eb      	ldrh	r3, [r5, #6]
    for(d = 0; d < swidth; d++) {
 800a590:	b2a4      	uxth	r4, r4
        area_mid.y2++;
 800a592:	3301      	adds	r3, #1
 800a594:	80eb      	strh	r3, [r5, #6]
 800a596:	f7ff fbe8 	bl	8009d6a <lv_draw_rect+0x5ca>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800a59a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a59c:	4353      	muls	r3, r2
 800a59e:	0a1b      	lsrs	r3, r3, #8
 800a5a0:	f7ff fc12 	bl	8009dc8 <lv_draw_rect+0x628>
                work_area.y1 += 1;
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	8053      	strh	r3, [r2, #2]
                work_area.y2 -= 1;
 800a5a8:	3c01      	subs	r4, #1
 800a5aa:	f7ff fc39 	bl	8009e20 <lv_draw_rect+0x680>
        lv_coord_t row_start = coords->y1 + radius;
 800a5ae:	9b08      	ldr	r3, [sp, #32]
        lv_coord_t row_end   = coords->y2 - radius;
 800a5b0:	1a24      	subs	r4, r4, r0
        lv_coord_t row_start = coords->y1 + radius;
 800a5b2:	18c3      	adds	r3, r0, r3
 800a5b4:	b29b      	uxth	r3, r3
        lv_coord_t row_end   = coords->y2 - radius;
 800a5b6:	b2a4      	uxth	r4, r4
        if(style->body.radius != 0) {
 800a5b8:	2900      	cmp	r1, #0
 800a5ba:	d123      	bne.n	800a604 <lv_draw_rect+0xe64>
        lv_coord_t row_start = coords->y1 + radius;
 800a5bc:	b21b      	sxth	r3, r3
                row_end -= 1;
 800a5be:	b224      	sxth	r4, r4
 800a5c0:	1c1d      	adds	r5, r3, #0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	da00      	bge.n	800a5c8 <lv_draw_rect+0xe28>
 800a5c6:	2500      	movs	r5, #0
 800a5c8:	b22d      	sxth	r5, r5
        for(row = row_start; row <= row_end; row++) {
 800a5ca:	42a5      	cmp	r5, r4
 800a5cc:	dd01      	ble.n	800a5d2 <lv_draw_rect+0xe32>
 800a5ce:	f7ff fc2f 	bl	8009e30 <lv_draw_rect+0x690>
            work_area.y1 = row;
 800a5d2:	ab1c      	add	r3, sp, #112	; 0x70
 800a5d4:	865d      	strh	r5, [r3, #50]	; 0x32
            work_area.y2 = row;
 800a5d6:	86dd      	strh	r5, [r3, #54]	; 0x36
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800a5d8:	2306      	movs	r3, #6
 800a5da:	5ef8      	ldrsh	r0, [r7, r3]
 800a5dc:	23ff      	movs	r3, #255	; 0xff
 800a5de:	1b40      	subs	r0, r0, r5
 800a5e0:	4358      	muls	r0, r3
 800a5e2:	0031      	movs	r1, r6
 800a5e4:	f7f5 fdbc 	bl	8000160 <__udivsi3>
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 800a5e8:	466b      	mov	r3, sp
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800a5ea:	b2c2      	uxtb	r2, r0
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 800a5ec:	8b99      	ldrh	r1, [r3, #28]
 800a5ee:	8a98      	ldrh	r0, [r3, #20]
 800a5f0:	f7ff f86e 	bl	80096d0 <lv_color_mix>
            lv_draw_fill(&work_area, mask, act_color, opa);
 800a5f4:	9b06      	ldr	r3, [sp, #24]
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 800a5f6:	1c02      	adds	r2, r0, #0
            lv_draw_fill(&work_area, mask, act_color, opa);
 800a5f8:	9903      	ldr	r1, [sp, #12]
 800a5fa:	a828      	add	r0, sp, #160	; 0xa0
 800a5fc:	f7fe f8fc 	bl	80087f8 <lv_draw_fill>
 800a600:	3501      	adds	r5, #1
 800a602:	e7e1      	b.n	800a5c8 <lv_draw_rect+0xe28>
            if(aa) {
 800a604:	2d00      	cmp	r5, #0
 800a606:	d003      	beq.n	800a610 <lv_draw_rect+0xe70>
                row_start += 2;
 800a608:	3302      	adds	r3, #2
 800a60a:	b21b      	sxth	r3, r3
                row_end -= 2;
 800a60c:	3c02      	subs	r4, #2
 800a60e:	e7d6      	b.n	800a5be <lv_draw_rect+0xe1e>
                row_start += 1;
 800a610:	3301      	adds	r3, #1
 800a612:	b21b      	sxth	r3, r3
                row_end -= 1;
 800a614:	3c01      	subs	r4, #1
 800a616:	e7d2      	b.n	800a5be <lv_draw_rect+0xe1e>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800a618:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a61a:	4353      	muls	r3, r2
 800a61c:	0a1b      	lsrs	r3, r3, #8
 800a61e:	f7ff fc20 	bl	8009e62 <lv_draw_rect+0x6c2>
        if(aa) {
 800a622:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a624:	2b00      	cmp	r3, #0
 800a626:	d03f      	beq.n	800a6a8 <lv_draw_rect+0xf08>
            if(out_x_last != cir.x) {
 800a628:	2200      	movs	r2, #0
 800a62a:	5ea3      	ldrsh	r3, [r4, r2]
 800a62c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a62e:	4293      	cmp	r3, r2
 800a630:	d03a      	beq.n	800a6a8 <lv_draw_rect+0xf08>
                out_y_seg_end       = cir.y;
 800a632:	2202      	movs	r2, #2
 800a634:	5ea3      	ldrsh	r3, [r4, r2]
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a636:	2240      	movs	r2, #64	; 0x40
                out_y_seg_end       = cir.y;
 800a638:	931b      	str	r3, [sp, #108]	; 0x6c
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a63a:	466b      	mov	r3, sp
 800a63c:	189b      	adds	r3, r3, r2
 800a63e:	881b      	ldrh	r3, [r3, #0]
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800a640:	9908      	ldr	r1, [sp, #32]
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a642:	9313      	str	r3, [sp, #76]	; 0x4c
 800a644:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a646:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a648:	1a9b      	subs	r3, r3, r2
 800a64a:	b21b      	sxth	r3, r3
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800a64c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a64e:	9315      	str	r3, [sp, #84]	; 0x54
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800a650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a652:	1a98      	subs	r0, r3, r2
 800a654:	23ff      	movs	r3, #255	; 0xff
 800a656:	4358      	muls	r0, r3
 800a658:	f7f5 fd82 	bl	8000160 <__udivsi3>
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800a65c:	466b      	mov	r3, sp
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800a65e:	b2c4      	uxtb	r4, r0
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800a660:	0022      	movs	r2, r4
 800a662:	8a99      	ldrh	r1, [r3, #20]
 800a664:	8b18      	ldrh	r0, [r3, #24]
 800a666:	f7ff f833 	bl	80096d0 <lv_color_mix>
 800a66a:	2244      	movs	r2, #68	; 0x44
 800a66c:	466b      	mov	r3, sp
 800a66e:	189b      	adds	r3, r3, r2
 800a670:	8018      	strh	r0, [r3, #0]
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800a672:	466b      	mov	r3, sp
 800a674:	0022      	movs	r2, r4
 800a676:	8b19      	ldrh	r1, [r3, #24]
 800a678:	8a98      	ldrh	r0, [r3, #20]
 800a67a:	f7ff f829 	bl	80096d0 <lv_color_mix>
 800a67e:	2248      	movs	r2, #72	; 0x48
 800a680:	466b      	mov	r3, sp
 800a682:	189b      	adds	r3, r3, r2
 800a684:	8018      	strh	r0, [r3, #0]
 800a686:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                for(i = 0; i < seg_size; i++) {
 800a68a:	2400      	movs	r4, #0
 800a68c:	1a9b      	subs	r3, r3, r2
 800a68e:	22ff      	movs	r2, #255	; 0xff
 800a690:	435a      	muls	r2, r3
 800a692:	9217      	str	r2, [sp, #92]	; 0x5c
 800a694:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a696:	42a3      	cmp	r3, r4
 800a698:	dd00      	ble.n	800a69c <lv_draw_rect+0xefc>
 800a69a:	e095      	b.n	800a7c8 <lv_draw_rect+0x1028>
                out_x_last      = cir.x;
 800a69c:	ab20      	add	r3, sp, #128	; 0x80
 800a69e:	2200      	movs	r2, #0
 800a6a0:	5e9b      	ldrsh	r3, [r3, r2]
 800a6a2:	930f      	str	r3, [sp, #60]	; 0x3c
                out_y_seg_start = out_y_seg_end;
 800a6a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a6a6:	9310      	str	r3, [sp, #64]	; 0x40
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 800a6a8:	ab26      	add	r3, sp, #152	; 0x98
 800a6aa:	2202      	movs	r2, #2
 800a6ac:	5e9b      	ldrsh	r3, [r3, r2]
 800a6ae:	9311      	str	r3, [sp, #68]	; 0x44
 800a6b0:	ab20      	add	r3, sp, #128	; 0x80
 800a6b2:	2202      	movs	r2, #2
 800a6b4:	5e9c      	ldrsh	r4, [r3, r2]
 800a6b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a6b8:	18a6      	adds	r6, r4, r2
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 800a6ba:	aa28      	add	r2, sp, #160	; 0xa0
 800a6bc:	2102      	movs	r1, #2
 800a6be:	5e52      	ldrsh	r2, [r2, r1]
 800a6c0:	9212      	str	r2, [sp, #72]	; 0x48
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	5e9b      	ldrsh	r3, [r3, r2]
 800a6c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a6c8:	18d2      	adds	r2, r2, r3
 800a6ca:	9213      	str	r2, [sp, #76]	; 0x4c
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 800a6cc:	aa24      	add	r2, sp, #144	; 0x90
 800a6ce:	2502      	movs	r5, #2
 800a6d0:	5f55      	ldrsh	r5, [r2, r5]
 800a6d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a6d4:	1b14      	subs	r4, r2, r4
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 800a6d6:	aa22      	add	r2, sp, #136	; 0x88
 800a6d8:	2102      	movs	r1, #2
 800a6da:	5e51      	ldrsh	r1, [r2, r1]
 800a6dc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a6de:	1ad3      	subs	r3, r2, r3
 800a6e0:	4299      	cmp	r1, r3
 800a6e2:	d001      	beq.n	800a6e8 <lv_draw_rect+0xf48>
 800a6e4:	f000 ff65 	bl	800b5b2 <lv_draw_rect+0x1e12>
        if(mid_top_refr != 0) {
 800a6e8:	42a5      	cmp	r5, r4
 800a6ea:	d00b      	beq.n	800a704 <lv_draw_rect+0xf64>
            if(mcolor.full == gcolor.full)
 800a6ec:	9b05      	ldr	r3, [sp, #20]
 800a6ee:	9a06      	ldr	r2, [sp, #24]
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d000      	beq.n	800a6f6 <lv_draw_rect+0xf56>
 800a6f4:	e112      	b.n	800a91c <lv_draw_rect+0x117c>
                act_color = mcolor;
 800a6f6:	466b      	mov	r3, sp
 800a6f8:	8a9a      	ldrh	r2, [r3, #20]
            lv_draw_fill(&mid_top_area, mask, act_color, opa);
 800a6fa:	9b07      	ldr	r3, [sp, #28]
 800a6fc:	9903      	ldr	r1, [sp, #12]
 800a6fe:	a824      	add	r0, sp, #144	; 0x90
 800a700:	f7fe f87a 	bl	80087f8 <lv_draw_fill>
        if(mid_bot_refr != 0) {
 800a704:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a706:	42b3      	cmp	r3, r6
 800a708:	d00b      	beq.n	800a722 <lv_draw_rect+0xf82>
            if(mcolor.full == gcolor.full)
 800a70a:	9b05      	ldr	r3, [sp, #20]
 800a70c:	9a06      	ldr	r2, [sp, #24]
 800a70e:	4293      	cmp	r3, r2
 800a710:	d000      	beq.n	800a714 <lv_draw_rect+0xf74>
 800a712:	e116      	b.n	800a942 <lv_draw_rect+0x11a2>
                act_color = mcolor;
 800a714:	466b      	mov	r3, sp
 800a716:	8a9a      	ldrh	r2, [r3, #20]
            lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 800a718:	9b07      	ldr	r3, [sp, #28]
 800a71a:	9903      	ldr	r1, [sp, #12]
 800a71c:	a826      	add	r0, sp, #152	; 0x98
 800a71e:	f7fe f86b 	bl	80087f8 <lv_draw_fill>
        if(edge_bot_refr != 0) {
 800a722:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a724:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a726:	4293      	cmp	r3, r2
 800a728:	d00b      	beq.n	800a742 <lv_draw_rect+0xfa2>
            if(mcolor.full == gcolor.full)
 800a72a:	9b05      	ldr	r3, [sp, #20]
 800a72c:	9a06      	ldr	r2, [sp, #24]
 800a72e:	4293      	cmp	r3, r2
 800a730:	d000      	beq.n	800a734 <lv_draw_rect+0xf94>
 800a732:	e119      	b.n	800a968 <lv_draw_rect+0x11c8>
                act_color = mcolor;
 800a734:	466b      	mov	r3, sp
 800a736:	8a9a      	ldrh	r2, [r3, #20]
            lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 800a738:	9b07      	ldr	r3, [sp, #28]
 800a73a:	9903      	ldr	r1, [sp, #12]
 800a73c:	a828      	add	r0, sp, #160	; 0xa0
 800a73e:	f7fe f85b 	bl	80087f8 <lv_draw_fill>
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800a742:	ac20      	add	r4, sp, #128	; 0x80
 800a744:	8862      	ldrh	r2, [r4, #2]
 800a746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a748:	8821      	ldrh	r1, [r4, #0]
 800a74a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a74c:	189a      	adds	r2, r3, r2
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800a74e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800a750:	b212      	sxth	r2, r2
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800a752:	185b      	adds	r3, r3, r1
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800a754:	1a41      	subs	r1, r0, r1
 800a756:	9200      	str	r2, [sp, #0]
 800a758:	a826      	add	r0, sp, #152	; 0x98
 800a75a:	b21b      	sxth	r3, r3
 800a75c:	b209      	sxth	r1, r1
 800a75e:	f001 fe15 	bl	800c38c <lv_area_set>
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800a762:	8822      	ldrh	r2, [r4, #0]
 800a764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a766:	8861      	ldrh	r1, [r4, #2]
 800a768:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a76a:	189a      	adds	r2, r3, r2
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800a76c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800a76e:	b212      	sxth	r2, r2
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800a770:	185b      	adds	r3, r3, r1
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800a772:	1a41      	subs	r1, r0, r1
 800a774:	9200      	str	r2, [sp, #0]
 800a776:	a828      	add	r0, sp, #160	; 0xa0
 800a778:	b21b      	sxth	r3, r3
 800a77a:	b209      	sxth	r1, r1
 800a77c:	f001 fe06 	bl	800c38c <lv_area_set>
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800a780:	8862      	ldrh	r2, [r4, #2]
 800a782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a784:	8821      	ldrh	r1, [r4, #0]
 800a786:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a788:	1a9a      	subs	r2, r3, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800a78a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800a78c:	b212      	sxth	r2, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800a78e:	185b      	adds	r3, r3, r1
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800a790:	1a41      	subs	r1, r0, r1
 800a792:	9200      	str	r2, [sp, #0]
 800a794:	a824      	add	r0, sp, #144	; 0x90
 800a796:	b21b      	sxth	r3, r3
 800a798:	b209      	sxth	r1, r1
 800a79a:	f001 fdf7 	bl	800c38c <lv_area_set>
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800a79e:	8822      	ldrh	r2, [r4, #0]
 800a7a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7a2:	8861      	ldrh	r1, [r4, #2]
 800a7a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7a6:	1a9a      	subs	r2, r3, r2
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800a7a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800a7aa:	b212      	sxth	r2, r2
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800a7ac:	185b      	adds	r3, r3, r1
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800a7ae:	1a41      	subs	r1, r0, r1
 800a7b0:	b21b      	sxth	r3, r3
 800a7b2:	a822      	add	r0, sp, #136	; 0x88
 800a7b4:	b209      	sxth	r1, r1
 800a7b6:	9200      	str	r2, [sp, #0]
 800a7b8:	f001 fde8 	bl	800c38c <lv_area_set>
        lv_circ_next(&cir, &cir_tmp);
 800a7bc:	a91f      	add	r1, sp, #124	; 0x7c
 800a7be:	0020      	movs	r0, r4
 800a7c0:	f001 feaa 	bl	800c518 <lv_circ_next>
 800a7c4:	f7ff fbc6 	bl	8009f54 <lv_draw_rect+0x7b4>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800a7c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800a7ca:	9a07      	ldr	r2, [sp, #28]
 800a7cc:	0021      	movs	r1, r4
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d100      	bne.n	800a7d4 <lv_draw_rect+0x1034>
 800a7d2:	e09b      	b.n	800a90c <lv_draw_rect+0x116c>
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800a7d4:	0018      	movs	r0, r3
 800a7d6:	f7fe ffbf 	bl	8009758 <antialias_get_opa_circ>
 800a7da:	9010      	str	r0, [sp, #64]	; 0x40
 800a7dc:	b2a3      	uxth	r3, r4
 800a7de:	9314      	str	r3, [sp, #80]	; 0x50
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800a7e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a7e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7e4:	189c      	adds	r4, r3, r2
 800a7e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a7ea:	191c      	adds	r4, r3, r4
 800a7ec:	466b      	mov	r3, sp
 800a7ee:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a7f0:	1c55      	adds	r5, r2, #1
 800a7f2:	9316      	str	r3, [sp, #88]	; 0x58
 800a7f4:	195d      	adds	r5, r3, r5
 800a7f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7f8:	2248      	movs	r2, #72	; 0x48
 800a7fa:	9300      	str	r3, [sp, #0]
 800a7fc:	466b      	mov	r3, sp
 800a7fe:	b224      	sxth	r4, r4
 800a800:	b22d      	sxth	r5, r5
 800a802:	189b      	adds	r3, r3, r2
 800a804:	0029      	movs	r1, r5
 800a806:	0020      	movs	r0, r4
 800a808:	881b      	ldrh	r3, [r3, #0]
 800a80a:	9a03      	ldr	r2, [sp, #12]
 800a80c:	f7fd ffab 	bl	8008766 <lv_draw_px>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800a810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a812:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a814:	0029      	movs	r1, r5
 800a816:	1a9e      	subs	r6, r3, r2
 800a818:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a81a:	2248      	movs	r2, #72	; 0x48
 800a81c:	1af6      	subs	r6, r6, r3
 800a81e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a820:	b236      	sxth	r6, r6
 800a822:	9300      	str	r3, [sp, #0]
 800a824:	466b      	mov	r3, sp
 800a826:	189b      	adds	r3, r3, r2
 800a828:	0030      	movs	r0, r6
 800a82a:	881b      	ldrh	r3, [r3, #0]
 800a82c:	9a03      	ldr	r2, [sp, #12]
 800a82e:	f7fd ff9a 	bl	8008766 <lv_draw_px>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800a832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a834:	2244      	movs	r2, #68	; 0x44
 800a836:	1e5d      	subs	r5, r3, #1
 800a838:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a83a:	0030      	movs	r0, r6
 800a83c:	1aed      	subs	r5, r5, r3
 800a83e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a840:	b22d      	sxth	r5, r5
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	466b      	mov	r3, sp
 800a846:	189b      	adds	r3, r3, r2
 800a848:	0029      	movs	r1, r5
 800a84a:	881b      	ldrh	r3, [r3, #0]
 800a84c:	9a03      	ldr	r2, [sp, #12]
 800a84e:	f7fd ff8a 	bl	8008766 <lv_draw_px>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800a852:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a854:	2244      	movs	r2, #68	; 0x44
 800a856:	9300      	str	r3, [sp, #0]
 800a858:	466b      	mov	r3, sp
 800a85a:	189b      	adds	r3, r3, r2
 800a85c:	881b      	ldrh	r3, [r3, #0]
 800a85e:	9a03      	ldr	r2, [sp, #12]
 800a860:	0029      	movs	r1, r5
 800a862:	0020      	movs	r0, r4
 800a864:	f7fd ff7f 	bl	8008766 <lv_draw_px>
                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800a868:	9908      	ldr	r1, [sp, #32]
 800a86a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a86c:	f7f5 fc78 	bl	8000160 <__udivsi3>
 800a870:	b2c3      	uxtb	r3, r0
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800a872:	001a      	movs	r2, r3
                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800a874:	931c      	str	r3, [sp, #112]	; 0x70
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800a876:	466b      	mov	r3, sp
 800a878:	8b19      	ldrh	r1, [r3, #24]
 800a87a:	8a98      	ldrh	r0, [r3, #20]
 800a87c:	f7fe ff28 	bl	80096d0 <lv_color_mix>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a882:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a884:	3301      	adds	r3, #1
 800a886:	18d3      	adds	r3, r2, r3
 800a888:	b21b      	sxth	r3, r3
 800a88a:	931d      	str	r3, [sp, #116]	; 0x74
 800a88c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a88e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800a890:	1c04      	adds	r4, r0, #0
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a892:	189e      	adds	r6, r3, r2
 800a894:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a896:	9a03      	ldr	r2, [sp, #12]
 800a898:	199e      	adds	r6, r3, r6
 800a89a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a89c:	b236      	sxth	r6, r6
 800a89e:	0031      	movs	r1, r6
 800a8a0:	9300      	str	r3, [sp, #0]
 800a8a2:	1c03      	adds	r3, r0, #0
 800a8a4:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a8a6:	f7fd ff5e 	bl	8008766 <lv_draw_px>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800a8aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ac:	0031      	movs	r1, r6
 800a8ae:	1e5d      	subs	r5, r3, #1
 800a8b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a8b2:	9a03      	ldr	r2, [sp, #12]
 800a8b4:	1aed      	subs	r5, r5, r3
 800a8b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8b8:	b22d      	sxth	r5, r5
 800a8ba:	9300      	str	r3, [sp, #0]
 800a8bc:	0028      	movs	r0, r5
 800a8be:	1c23      	adds	r3, r4, #0
 800a8c0:	f7fd ff51 	bl	8008766 <lv_draw_px>
                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800a8c4:	466b      	mov	r3, sp
 800a8c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a8c8:	8a99      	ldrh	r1, [r3, #20]
 800a8ca:	8b18      	ldrh	r0, [r3, #24]
 800a8cc:	f7fe ff00 	bl	80096d0 <lv_color_mix>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800a8d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800a8d4:	1c04      	adds	r4, r0, #0
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800a8d6:	1a9e      	subs	r6, r3, r2
 800a8d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8da:	9a03      	ldr	r2, [sp, #12]
 800a8dc:	1af6      	subs	r6, r6, r3
 800a8de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8e0:	b236      	sxth	r6, r6
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	0031      	movs	r1, r6
 800a8e6:	1c03      	adds	r3, r0, #0
 800a8e8:	0028      	movs	r0, r5
 800a8ea:	f7fd ff3c 	bl	8008766 <lv_draw_px>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800a8ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8f0:	9a03      	ldr	r2, [sp, #12]
 800a8f2:	9300      	str	r3, [sp, #0]
 800a8f4:	0031      	movs	r1, r6
 800a8f6:	1c23      	adds	r3, r4, #0
 800a8f8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a8fa:	f7fd ff34 	bl	8008766 <lv_draw_px>
 800a8fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a900:	33ff      	adds	r3, #255	; 0xff
 800a902:	9317      	str	r3, [sp, #92]	; 0x5c
                for(i = 0; i < seg_size; i++) {
 800a904:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a906:	1c5c      	adds	r4, r3, #1
 800a908:	b224      	sxth	r4, r4
 800a90a:	e6c3      	b.n	800a694 <lv_draw_rect+0xef4>
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800a90c:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a90e:	f7fd fe53 	bl	80085b8 <lv_draw_aa_get_opa>
 800a912:	9b07      	ldr	r3, [sp, #28]
 800a914:	1a18      	subs	r0, r3, r0
 800a916:	b2c3      	uxtb	r3, r0
 800a918:	9310      	str	r3, [sp, #64]	; 0x40
 800a91a:	e75f      	b.n	800a7dc <lv_draw_rect+0x103c>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800a91c:	2306      	movs	r3, #6
 800a91e:	5ef8      	ldrsh	r0, [r7, r3]
 800a920:	ab24      	add	r3, sp, #144	; 0x90
 800a922:	2202      	movs	r2, #2
 800a924:	5e9b      	ldrsh	r3, [r3, r2]
 800a926:	9908      	ldr	r1, [sp, #32]
 800a928:	1ac0      	subs	r0, r0, r3
 800a92a:	23ff      	movs	r3, #255	; 0xff
 800a92c:	4358      	muls	r0, r3
 800a92e:	f7f5 fc17 	bl	8000160 <__udivsi3>
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800a932:	466b      	mov	r3, sp
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800a934:	b2c2      	uxtb	r2, r0
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800a936:	8b19      	ldrh	r1, [r3, #24]
 800a938:	8a98      	ldrh	r0, [r3, #20]
 800a93a:	f7fe fec9 	bl	80096d0 <lv_color_mix>
 800a93e:	1c02      	adds	r2, r0, #0
 800a940:	e6db      	b.n	800a6fa <lv_draw_rect+0xf5a>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800a942:	2306      	movs	r3, #6
 800a944:	5ef8      	ldrsh	r0, [r7, r3]
 800a946:	ab26      	add	r3, sp, #152	; 0x98
 800a948:	2202      	movs	r2, #2
 800a94a:	5e9b      	ldrsh	r3, [r3, r2]
 800a94c:	9908      	ldr	r1, [sp, #32]
 800a94e:	1ac0      	subs	r0, r0, r3
 800a950:	23ff      	movs	r3, #255	; 0xff
 800a952:	4358      	muls	r0, r3
 800a954:	f7f5 fc04 	bl	8000160 <__udivsi3>
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800a958:	466b      	mov	r3, sp
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800a95a:	b2c2      	uxtb	r2, r0
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800a95c:	8b19      	ldrh	r1, [r3, #24]
 800a95e:	8a98      	ldrh	r0, [r3, #20]
 800a960:	f7fe feb6 	bl	80096d0 <lv_color_mix>
 800a964:	1c02      	adds	r2, r0, #0
 800a966:	e6d7      	b.n	800a718 <lv_draw_rect+0xf78>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800a968:	2306      	movs	r3, #6
 800a96a:	5ef8      	ldrsh	r0, [r7, r3]
 800a96c:	ab28      	add	r3, sp, #160	; 0xa0
 800a96e:	2202      	movs	r2, #2
 800a970:	5e9b      	ldrsh	r3, [r3, r2]
 800a972:	9908      	ldr	r1, [sp, #32]
 800a974:	1ac0      	subs	r0, r0, r3
 800a976:	23ff      	movs	r3, #255	; 0xff
 800a978:	4358      	muls	r0, r3
 800a97a:	f7f5 fbf1 	bl	8000160 <__udivsi3>
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800a97e:	466b      	mov	r3, sp
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800a980:	b2c2      	uxtb	r2, r0
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800a982:	8b19      	ldrh	r1, [r3, #24]
 800a984:	8a98      	ldrh	r0, [r3, #20]
 800a986:	f7fe fea3 	bl	80096d0 <lv_color_mix>
 800a98a:	1c02      	adds	r2, r0, #0
 800a98c:	e6d4      	b.n	800a738 <lv_draw_rect+0xf98>
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800a98e:	2306      	movs	r3, #6
 800a990:	5ef8      	ldrsh	r0, [r7, r3]
 800a992:	ab22      	add	r3, sp, #136	; 0x88
 800a994:	2202      	movs	r2, #2
 800a996:	5e9b      	ldrsh	r3, [r3, r2]
 800a998:	9908      	ldr	r1, [sp, #32]
 800a99a:	1ac3      	subs	r3, r0, r3
 800a99c:	20ff      	movs	r0, #255	; 0xff
 800a99e:	4358      	muls	r0, r3
 800a9a0:	f7f5 fbde 	bl	8000160 <__udivsi3>
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800a9a4:	466b      	mov	r3, sp
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800a9a6:	b2c2      	uxtb	r2, r0
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800a9a8:	8b19      	ldrh	r1, [r3, #24]
 800a9aa:	8a98      	ldrh	r0, [r3, #20]
 800a9ac:	f7fe fe90 	bl	80096d0 <lv_color_mix>
 800a9b0:	1c02      	adds	r2, r0, #0
 800a9b2:	f7ff fade 	bl	8009f72 <lv_draw_rect+0x7d2>
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800a9b6:	2206      	movs	r2, #6
 800a9b8:	5eb8      	ldrsh	r0, [r7, r2]
 800a9ba:	9908      	ldr	r1, [sp, #32]
 800a9bc:	1ac3      	subs	r3, r0, r3
 800a9be:	20ff      	movs	r0, #255	; 0xff
 800a9c0:	4358      	muls	r0, r3
 800a9c2:	f7f5 fbcd 	bl	8000160 <__udivsi3>
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800a9c6:	466b      	mov	r3, sp
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800a9c8:	b2c2      	uxtb	r2, r0
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800a9ca:	8b19      	ldrh	r1, [r3, #24]
 800a9cc:	8a98      	ldrh	r0, [r3, #20]
 800a9ce:	f7fe fe7f 	bl	80096d0 <lv_color_mix>
 800a9d2:	1c02      	adds	r2, r0, #0
 800a9d4:	f7ff fae2 	bl	8009f9c <lv_draw_rect+0x7fc>
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800a9d8:	2306      	movs	r3, #6
 800a9da:	5ef8      	ldrsh	r0, [r7, r3]
 800a9dc:	ab26      	add	r3, sp, #152	; 0x98
 800a9de:	2202      	movs	r2, #2
 800a9e0:	5e9b      	ldrsh	r3, [r3, r2]
 800a9e2:	9908      	ldr	r1, [sp, #32]
 800a9e4:	1ac3      	subs	r3, r0, r3
 800a9e6:	20ff      	movs	r0, #255	; 0xff
 800a9e8:	4358      	muls	r0, r3
 800a9ea:	f7f5 fbb9 	bl	8000160 <__udivsi3>
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800a9ee:	466b      	mov	r3, sp
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800a9f0:	b2c2      	uxtb	r2, r0
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800a9f2:	8b19      	ldrh	r1, [r3, #24]
 800a9f4:	8a98      	ldrh	r0, [r3, #20]
 800a9f6:	f7fe fe6b 	bl	80096d0 <lv_color_mix>
 800a9fa:	1c02      	adds	r2, r0, #0
 800a9fc:	f7ff fadb 	bl	8009fb6 <lv_draw_rect+0x816>
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800aa00:	2206      	movs	r2, #6
 800aa02:	5eb8      	ldrsh	r0, [r7, r2]
 800aa04:	9908      	ldr	r1, [sp, #32]
 800aa06:	1ac3      	subs	r3, r0, r3
 800aa08:	20ff      	movs	r0, #255	; 0xff
 800aa0a:	4358      	muls	r0, r3
 800aa0c:	f7f5 fba8 	bl	8000160 <__udivsi3>
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800aa10:	466b      	mov	r3, sp
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800aa12:	b2c2      	uxtb	r2, r0
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800aa14:	8b19      	ldrh	r1, [r3, #24]
 800aa16:	8a98      	ldrh	r0, [r3, #20]
 800aa18:	f7fe fe5a 	bl	80096d0 <lv_color_mix>
 800aa1c:	1c02      	adds	r2, r0, #0
 800aa1e:	f7ff fadf 	bl	8009fe0 <lv_draw_rect+0x840>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800aa22:	0021      	movs	r1, r4
 800aa24:	9a07      	ldr	r2, [sp, #28]
 800aa26:	9816      	ldr	r0, [sp, #88]	; 0x58
 800aa28:	f7fd fdc6 	bl	80085b8 <lv_draw_aa_get_opa>
 800aa2c:	9b07      	ldr	r3, [sp, #28]
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800aa2e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800aa30:	1a18      	subs	r0, r3, r0
 800aa32:	b2c3      	uxtb	r3, r0
 800aa34:	930c      	str	r3, [sp, #48]	; 0x30
 800aa36:	b2a3      	uxth	r3, r4
 800aa38:	9314      	str	r3, [sp, #80]	; 0x50
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800aa3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa3c:	189c      	adds	r4, r3, r2
 800aa3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa42:	191c      	adds	r4, r3, r4
 800aa44:	466b      	mov	r3, sp
 800aa46:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800aa48:	1c55      	adds	r5, r2, #1
 800aa4a:	9315      	str	r3, [sp, #84]	; 0x54
 800aa4c:	195d      	adds	r5, r3, r5
 800aa4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa50:	2244      	movs	r2, #68	; 0x44
 800aa52:	9300      	str	r3, [sp, #0]
 800aa54:	466b      	mov	r3, sp
 800aa56:	b224      	sxth	r4, r4
 800aa58:	b22d      	sxth	r5, r5
 800aa5a:	189b      	adds	r3, r3, r2
 800aa5c:	0029      	movs	r1, r5
 800aa5e:	0020      	movs	r0, r4
 800aa60:	881b      	ldrh	r3, [r3, #0]
 800aa62:	9a03      	ldr	r2, [sp, #12]
 800aa64:	f7fd fe7f 	bl	8008766 <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800aa68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aa6c:	0029      	movs	r1, r5
 800aa6e:	1a9e      	subs	r6, r3, r2
 800aa70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa72:	2244      	movs	r2, #68	; 0x44
 800aa74:	1af6      	subs	r6, r6, r3
 800aa76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa78:	b236      	sxth	r6, r6
 800aa7a:	9300      	str	r3, [sp, #0]
 800aa7c:	466b      	mov	r3, sp
 800aa7e:	189b      	adds	r3, r3, r2
 800aa80:	0030      	movs	r0, r6
 800aa82:	881b      	ldrh	r3, [r3, #0]
 800aa84:	9a03      	ldr	r2, [sp, #12]
 800aa86:	f7fd fe6e 	bl	8008766 <lv_draw_px>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800aa8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa8c:	2248      	movs	r2, #72	; 0x48
 800aa8e:	1e5d      	subs	r5, r3, #1
 800aa90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa92:	0030      	movs	r0, r6
 800aa94:	1aed      	subs	r5, r5, r3
 800aa96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa98:	b22d      	sxth	r5, r5
 800aa9a:	9300      	str	r3, [sp, #0]
 800aa9c:	466b      	mov	r3, sp
 800aa9e:	189b      	adds	r3, r3, r2
 800aaa0:	0029      	movs	r1, r5
 800aaa2:	881b      	ldrh	r3, [r3, #0]
 800aaa4:	9a03      	ldr	r2, [sp, #12]
 800aaa6:	f7fd fe5e 	bl	8008766 <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800aaaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aaac:	2248      	movs	r2, #72	; 0x48
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	466b      	mov	r3, sp
 800aab2:	189b      	adds	r3, r3, r2
 800aab4:	881b      	ldrh	r3, [r3, #0]
 800aab6:	9a03      	ldr	r2, [sp, #12]
 800aab8:	0029      	movs	r1, r5
 800aaba:	0020      	movs	r0, r4
 800aabc:	f7fd fe53 	bl	8008766 <lv_draw_px>
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800aac0:	9908      	ldr	r1, [sp, #32]
 800aac2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800aac4:	f7f5 fb4c 	bl	8000160 <__udivsi3>
 800aac8:	b2c3      	uxtb	r3, r0
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800aaca:	001a      	movs	r2, r3
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800aacc:	9318      	str	r3, [sp, #96]	; 0x60
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800aace:	466b      	mov	r3, sp
 800aad0:	8b19      	ldrh	r1, [r3, #24]
 800aad2:	8a98      	ldrh	r0, [r3, #20]
 800aad4:	f7fe fdfc 	bl	80096d0 <lv_color_mix>
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 800aad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aada:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aadc:	3301      	adds	r3, #1
 800aade:	18d3      	adds	r3, r2, r3
 800aae0:	b21b      	sxth	r3, r3
 800aae2:	9319      	str	r3, [sp, #100]	; 0x64
 800aae4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aae6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800aae8:	1c04      	adds	r4, r0, #0
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 800aaea:	189e      	adds	r6, r3, r2
 800aaec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aaee:	9a03      	ldr	r2, [sp, #12]
 800aaf0:	199e      	adds	r6, r3, r6
 800aaf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aaf4:	b236      	sxth	r6, r6
 800aaf6:	0031      	movs	r1, r6
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	1c03      	adds	r3, r0, #0
 800aafc:	9819      	ldr	r0, [sp, #100]	; 0x64
 800aafe:	f7fd fe32 	bl	8008766 <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, aa_color_ver,
 800ab02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab04:	0031      	movs	r1, r6
 800ab06:	1e5d      	subs	r5, r3, #1
 800ab08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab0a:	9a03      	ldr	r2, [sp, #12]
 800ab0c:	1aed      	subs	r5, r5, r3
 800ab0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab10:	b22d      	sxth	r5, r5
 800ab12:	9300      	str	r3, [sp, #0]
 800ab14:	0028      	movs	r0, r5
 800ab16:	1c23      	adds	r3, r4, #0
 800ab18:	f7fd fe25 	bl	8008766 <lv_draw_px>
            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800ab1c:	466b      	mov	r3, sp
 800ab1e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ab20:	8a99      	ldrh	r1, [r3, #20]
 800ab22:	8b18      	ldrh	r0, [r3, #24]
 800ab24:	f7fe fdd4 	bl	80096d0 <lv_color_mix>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 800ab28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800ab2c:	1c04      	adds	r4, r0, #0
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 800ab2e:	1a9e      	subs	r6, r3, r2
 800ab30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab32:	9a03      	ldr	r2, [sp, #12]
 800ab34:	1af6      	subs	r6, r6, r3
 800ab36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab38:	b236      	sxth	r6, r6
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	0031      	movs	r1, r6
 800ab3e:	1c03      	adds	r3, r0, #0
 800ab40:	0028      	movs	r0, r5
 800ab42:	f7fd fe10 	bl	8008766 <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, aa_color_ver,
 800ab46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab48:	9a03      	ldr	r2, [sp, #12]
 800ab4a:	9300      	str	r3, [sp, #0]
 800ab4c:	0031      	movs	r1, r6
 800ab4e:	1c23      	adds	r3, r4, #0
 800ab50:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ab52:	f7fd fe08 	bl	8008766 <lv_draw_px>
 800ab56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab58:	33ff      	adds	r3, #255	; 0xff
 800ab5a:	9317      	str	r3, [sp, #92]	; 0x5c
        for(i = 0; i < seg_size; i++) {
 800ab5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab5e:	1c5c      	adds	r4, r3, #1
 800ab60:	b224      	sxth	r4, r4
 800ab62:	f7ff fa94 	bl	800a08e <lv_draw_rect+0x8ee>
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800ab66:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ab68:	4344      	muls	r4, r0
 800ab6a:	0a20      	lsrs	r0, r4, #8
 800ab6c:	9005      	str	r0, [sp, #20]
 800ab6e:	f7ff fb21 	bl	800a1b4 <lv_draw_rect+0xa14>
        corner_size = radius + aa;
 800ab72:	9b08      	ldr	r3, [sp, #32]
 800ab74:	18c3      	adds	r3, r0, r3
 800ab76:	b21b      	sxth	r3, r3
 800ab78:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t length_corr = 0;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	f7ff fb34 	bl	800a1e8 <lv_draw_rect+0xa48>
 800ab80:	4023      	ands	r3, r4
    corner_size++;
 800ab82:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ab84:	9309      	str	r3, [sp, #36]	; 0x24
    if(part & LV_BORDER_TOP)
 800ab86:	9909      	ldr	r1, [sp, #36]	; 0x24
    corner_size++;
 800ab88:	3601      	adds	r6, #1
 800ab8a:	b2b6      	uxth	r6, r6
 800ab8c:	887b      	ldrh	r3, [r7, #2]
 800ab8e:	aa28      	add	r2, sp, #160	; 0xa0
    if(part & LV_BORDER_TOP)
 800ab90:	2900      	cmp	r1, #0
 800ab92:	d100      	bne.n	800ab96 <lv_draw_rect+0x13f6>
 800ab94:	e120      	b.n	800add8 <lv_draw_rect+0x1638>
        work_area.y1 = coords->y1 + corner_size;
 800ab96:	18f3      	adds	r3, r6, r3
        work_area.y1 = coords->y1 + radius;
 800ab98:	8053      	strh	r3, [r2, #2]
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	4023      	ands	r3, r4
 800ab9e:	930c      	str	r3, [sp, #48]	; 0x30
    if(part & LV_BORDER_BOTTOM)
 800aba0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aba2:	88fb      	ldrh	r3, [r7, #6]
 800aba4:	aa28      	add	r2, sp, #160	; 0xa0
 800aba6:	2900      	cmp	r1, #0
 800aba8:	d100      	bne.n	800abac <lv_draw_rect+0x140c>
 800abaa:	e117      	b.n	800addc <lv_draw_rect+0x163c>
        work_area.y2 = coords->y2 - corner_size;
 800abac:	1b9b      	subs	r3, r3, r6
        work_area.y2 = coords->y2 - radius;
 800abae:	80d3      	strh	r3, [r2, #6]
    if(part & LV_BORDER_LEFT) {
 800abb0:	0763      	lsls	r3, r4, #29
 800abb2:	d50c      	bpl.n	800abce <lv_draw_rect+0x142e>
        work_area.x1 = coords->x1;
 800abb4:	2200      	movs	r2, #0
 800abb6:	5ebb      	ldrsh	r3, [r7, r2]
        work_area.x2 = work_area.x1 + bwidth;
 800abb8:	9a07      	ldr	r2, [sp, #28]
        work_area.x1 = coords->x1;
 800abba:	a828      	add	r0, sp, #160	; 0xa0
 800abbc:	8003      	strh	r3, [r0, #0]
        work_area.x2 = work_area.x1 + bwidth;
 800abbe:	18d3      	adds	r3, r2, r3
        lv_draw_fill(&work_area, mask, color, opa);
 800abc0:	466a      	mov	r2, sp
        work_area.x2 = work_area.x1 + bwidth;
 800abc2:	8083      	strh	r3, [r0, #4]
        lv_draw_fill(&work_area, mask, color, opa);
 800abc4:	8b12      	ldrh	r2, [r2, #24]
 800abc6:	9b05      	ldr	r3, [sp, #20]
 800abc8:	9903      	ldr	r1, [sp, #12]
 800abca:	f7fd fe15 	bl	80087f8 <lv_draw_fill>
    if(part & LV_BORDER_RIGHT) {
 800abce:	0723      	lsls	r3, r4, #28
 800abd0:	d50c      	bpl.n	800abec <lv_draw_rect+0x144c>
        work_area.x2 = coords->x2;
 800abd2:	2204      	movs	r2, #4
 800abd4:	5ebb      	ldrsh	r3, [r7, r2]
        work_area.x1 = work_area.x2 - bwidth;
 800abd6:	9a07      	ldr	r2, [sp, #28]
        work_area.x2 = coords->x2;
 800abd8:	a828      	add	r0, sp, #160	; 0xa0
 800abda:	8083      	strh	r3, [r0, #4]
        work_area.x1 = work_area.x2 - bwidth;
 800abdc:	1a9b      	subs	r3, r3, r2
        lv_draw_fill(&work_area, mask, color, opa);
 800abde:	466a      	mov	r2, sp
        work_area.x1 = work_area.x2 - bwidth;
 800abe0:	8003      	strh	r3, [r0, #0]
        lv_draw_fill(&work_area, mask, color, opa);
 800abe2:	8b12      	ldrh	r2, [r2, #24]
 800abe4:	9b05      	ldr	r3, [sp, #20]
 800abe6:	9903      	ldr	r1, [sp, #12]
 800abe8:	f7fd fe06 	bl	80087f8 <lv_draw_fill>
    work_area.x1 = coords->x1 + corner_size - length_corr;
 800abec:	466b      	mov	r3, sp
 800abee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abf0:	883a      	ldrh	r2, [r7, #0]
 800abf2:	1af1      	subs	r1, r6, r3
 800abf4:	a828      	add	r0, sp, #160	; 0xa0
 800abf6:	1852      	adds	r2, r2, r1
 800abf8:	8002      	strh	r2, [r0, #0]
    work_area.x2 = coords->x2 - corner_size + length_corr;
 800abfa:	88ba      	ldrh	r2, [r7, #4]
 800abfc:	189b      	adds	r3, r3, r2
 800abfe:	1b9e      	subs	r6, r3, r6
    if(part & LV_BORDER_TOP) {
 800ac00:	9b09      	ldr	r3, [sp, #36]	; 0x24
    work_area.x2 = coords->x2 - corner_size + length_corr;
 800ac02:	8086      	strh	r6, [r0, #4]
    if(part & LV_BORDER_TOP) {
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d00b      	beq.n	800ac20 <lv_draw_rect+0x1480>
        work_area.y1 = coords->y1;
 800ac08:	2202      	movs	r2, #2
 800ac0a:	5ebb      	ldrsh	r3, [r7, r2]
        work_area.y2 = coords->y1 + bwidth;
 800ac0c:	9a07      	ldr	r2, [sp, #28]
        work_area.y1 = coords->y1;
 800ac0e:	8043      	strh	r3, [r0, #2]
        work_area.y2 = coords->y1 + bwidth;
 800ac10:	18d3      	adds	r3, r2, r3
        lv_draw_fill(&work_area, mask, color, opa);
 800ac12:	466a      	mov	r2, sp
        work_area.y2 = coords->y1 + bwidth;
 800ac14:	80c3      	strh	r3, [r0, #6]
        lv_draw_fill(&work_area, mask, color, opa);
 800ac16:	8b12      	ldrh	r2, [r2, #24]
 800ac18:	9b05      	ldr	r3, [sp, #20]
 800ac1a:	9903      	ldr	r1, [sp, #12]
 800ac1c:	f7fd fdec 	bl	80087f8 <lv_draw_fill>
    if(part & LV_BORDER_BOTTOM) {
 800ac20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00c      	beq.n	800ac40 <lv_draw_rect+0x14a0>
        work_area.y2 = coords->y2;
 800ac26:	2206      	movs	r2, #6
 800ac28:	5ebb      	ldrsh	r3, [r7, r2]
        work_area.y1 = work_area.y2 - bwidth;
 800ac2a:	9a07      	ldr	r2, [sp, #28]
        work_area.y2 = coords->y2;
 800ac2c:	a828      	add	r0, sp, #160	; 0xa0
 800ac2e:	80c3      	strh	r3, [r0, #6]
        work_area.y1 = work_area.y2 - bwidth;
 800ac30:	1a9b      	subs	r3, r3, r2
        lv_draw_fill(&work_area, mask, color, opa);
 800ac32:	466a      	mov	r2, sp
        work_area.y1 = work_area.y2 - bwidth;
 800ac34:	8043      	strh	r3, [r0, #2]
        lv_draw_fill(&work_area, mask, color, opa);
 800ac36:	8b12      	ldrh	r2, [r2, #24]
 800ac38:	9b05      	ldr	r3, [sp, #20]
 800ac3a:	9903      	ldr	r1, [sp, #12]
 800ac3c:	f7fd fddc 	bl	80087f8 <lv_draw_fill>
    if(length_corr != 0) {
 800ac40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d06b      	beq.n	800ad1e <lv_draw_rect+0x157e>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800ac46:	2306      	movs	r3, #6
 800ac48:	4023      	ands	r3, r4
 800ac4a:	2b06      	cmp	r3, #6
 800ac4c:	d116      	bne.n	800ac7c <lv_draw_rect+0x14dc>
            work_area.x1 = coords->x1;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	5efa      	ldrsh	r2, [r7, r3]
            work_area.x2 = coords->x1 + radius + aa;
 800ac52:	466b      	mov	r3, sp
 800ac54:	8c1b      	ldrh	r3, [r3, #32]
            work_area.x1 = coords->x1;
 800ac56:	a828      	add	r0, sp, #160	; 0xa0
 800ac58:	8002      	strh	r2, [r0, #0]
            work_area.x2 = coords->x1 + radius + aa;
 800ac5a:	189a      	adds	r2, r3, r2
 800ac5c:	18aa      	adds	r2, r5, r2
 800ac5e:	8082      	strh	r2, [r0, #4]
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800ac60:	887a      	ldrh	r2, [r7, #2]
 800ac62:	1c51      	adds	r1, r2, #1
 800ac64:	185b      	adds	r3, r3, r1
 800ac66:	18eb      	adds	r3, r5, r3
 800ac68:	8043      	strh	r3, [r0, #2]
            work_area.y2 = coords->y1 + bwidth;
 800ac6a:	9b07      	ldr	r3, [sp, #28]
            lv_draw_fill(&work_area, mask, color, opa);
 800ac6c:	9903      	ldr	r1, [sp, #12]
            work_area.y2 = coords->y1 + bwidth;
 800ac6e:	189a      	adds	r2, r3, r2
 800ac70:	80c2      	strh	r2, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800ac72:	466a      	mov	r2, sp
 800ac74:	9b05      	ldr	r3, [sp, #20]
 800ac76:	8b12      	ldrh	r2, [r2, #24]
 800ac78:	f7fd fdbe 	bl	80087f8 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800ac7c:	230a      	movs	r3, #10
 800ac7e:	4023      	ands	r3, r4
 800ac80:	2b0a      	cmp	r3, #10
 800ac82:	d116      	bne.n	800acb2 <lv_draw_rect+0x1512>
            work_area.x1 = coords->x2 - radius - aa;
 800ac84:	2304      	movs	r3, #4
 800ac86:	5ef9      	ldrsh	r1, [r7, r3]
 800ac88:	466b      	mov	r3, sp
 800ac8a:	8c1b      	ldrh	r3, [r3, #32]
 800ac8c:	1b4a      	subs	r2, r1, r5
 800ac8e:	a828      	add	r0, sp, #160	; 0xa0
 800ac90:	1ad2      	subs	r2, r2, r3
            work_area.x2 = coords->x2;
 800ac92:	8081      	strh	r1, [r0, #4]
            work_area.x1 = coords->x2 - radius - aa;
 800ac94:	8002      	strh	r2, [r0, #0]
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800ac96:	887a      	ldrh	r2, [r7, #2]
 800ac98:	1c51      	adds	r1, r2, #1
 800ac9a:	185b      	adds	r3, r3, r1
 800ac9c:	18eb      	adds	r3, r5, r3
 800ac9e:	8043      	strh	r3, [r0, #2]
            work_area.y2 = coords->y1 + bwidth;
 800aca0:	9b07      	ldr	r3, [sp, #28]
            lv_draw_fill(&work_area, mask, color, opa);
 800aca2:	9903      	ldr	r1, [sp, #12]
            work_area.y2 = coords->y1 + bwidth;
 800aca4:	189a      	adds	r2, r3, r2
 800aca6:	80c2      	strh	r2, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800aca8:	466a      	mov	r2, sp
 800acaa:	9b05      	ldr	r3, [sp, #20]
 800acac:	8b12      	ldrh	r2, [r2, #24]
 800acae:	f7fd fda3 	bl	80087f8 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800acb2:	2305      	movs	r3, #5
 800acb4:	4023      	ands	r3, r4
 800acb6:	2b05      	cmp	r3, #5
 800acb8:	d116      	bne.n	800ace8 <lv_draw_rect+0x1548>
            work_area.x1 = coords->x1;
 800acba:	2300      	movs	r3, #0
 800acbc:	5efa      	ldrsh	r2, [r7, r3]
            work_area.x2 = coords->x1 + radius + aa;
 800acbe:	466b      	mov	r3, sp
 800acc0:	8c19      	ldrh	r1, [r3, #32]
            work_area.x1 = coords->x1;
 800acc2:	a828      	add	r0, sp, #160	; 0xa0
 800acc4:	8002      	strh	r2, [r0, #0]
            work_area.x2 = coords->x1 + radius + aa;
 800acc6:	188a      	adds	r2, r1, r2
 800acc8:	18aa      	adds	r2, r5, r2
 800acca:	8082      	strh	r2, [r0, #4]
            work_area.y1 = coords->y2 - bwidth;
 800accc:	88fb      	ldrh	r3, [r7, #6]
 800acce:	9a07      	ldr	r2, [sp, #28]
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800acd0:	43c9      	mvns	r1, r1
            work_area.y1 = coords->y2 - bwidth;
 800acd2:	1a9a      	subs	r2, r3, r2
 800acd4:	8042      	strh	r2, [r0, #2]
            lv_draw_fill(&work_area, mask, color, opa);
 800acd6:	466a      	mov	r2, sp
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800acd8:	185b      	adds	r3, r3, r1
 800acda:	1b5b      	subs	r3, r3, r5
 800acdc:	80c3      	strh	r3, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800acde:	8b12      	ldrh	r2, [r2, #24]
 800ace0:	9b05      	ldr	r3, [sp, #20]
 800ace2:	9903      	ldr	r1, [sp, #12]
 800ace4:	f7fd fd88 	bl	80087f8 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800ace8:	2309      	movs	r3, #9
 800acea:	4023      	ands	r3, r4
 800acec:	2b09      	cmp	r3, #9
 800acee:	d116      	bne.n	800ad1e <lv_draw_rect+0x157e>
            work_area.x1 = coords->x2 - radius - aa;
 800acf0:	2304      	movs	r3, #4
 800acf2:	5efe      	ldrsh	r6, [r7, r3]
 800acf4:	466b      	mov	r3, sp
 800acf6:	8c19      	ldrh	r1, [r3, #32]
 800acf8:	1b73      	subs	r3, r6, r5
 800acfa:	1a5b      	subs	r3, r3, r1
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800acfc:	43c9      	mvns	r1, r1
            work_area.x1 = coords->x2 - radius - aa;
 800acfe:	a828      	add	r0, sp, #160	; 0xa0
 800ad00:	8003      	strh	r3, [r0, #0]
            work_area.x2 = coords->x2;
 800ad02:	8086      	strh	r6, [r0, #4]
            work_area.y1 = coords->y2 - bwidth;
 800ad04:	88fa      	ldrh	r2, [r7, #6]
 800ad06:	9b07      	ldr	r3, [sp, #28]
 800ad08:	1ad3      	subs	r3, r2, r3
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800ad0a:	1852      	adds	r2, r2, r1
 800ad0c:	1b55      	subs	r5, r2, r5
            lv_draw_fill(&work_area, mask, color, opa);
 800ad0e:	466a      	mov	r2, sp
            work_area.y1 = coords->y2 - bwidth;
 800ad10:	8043      	strh	r3, [r0, #2]
            lv_draw_fill(&work_area, mask, color, opa);
 800ad12:	8b12      	ldrh	r2, [r2, #24]
 800ad14:	9b05      	ldr	r3, [sp, #20]
 800ad16:	9903      	ldr	r1, [sp, #12]
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800ad18:	80c5      	strh	r5, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800ad1a:	f7fd fd6d 	bl	80087f8 <lv_draw_fill>
    if(style->body.radius == 0) {
 800ad1e:	9b04      	ldr	r3, [sp, #16]
 800ad20:	2206      	movs	r2, #6
 800ad22:	5e9b      	ldrsh	r3, [r3, r2]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d001      	beq.n	800ad2c <lv_draw_rect+0x158c>
 800ad28:	f7ff fac7 	bl	800a2ba <lv_draw_rect+0xb1a>
        if(part & (LV_BORDER_TOP | LV_BORDER_LEFT)) {
 800ad2c:	3306      	adds	r3, #6
 800ad2e:	421c      	tst	r4, r3
 800ad30:	d012      	beq.n	800ad58 <lv_draw_rect+0x15b8>
            work_area.x1 = coords->x1;
 800ad32:	2300      	movs	r3, #0
 800ad34:	5efa      	ldrsh	r2, [r7, r3]
            work_area.x2 = coords->x1 + aa;
 800ad36:	466b      	mov	r3, sp
 800ad38:	8c1b      	ldrh	r3, [r3, #32]
            work_area.x1 = coords->x1;
 800ad3a:	a828      	add	r0, sp, #160	; 0xa0
 800ad3c:	8002      	strh	r2, [r0, #0]
            work_area.x2 = coords->x1 + aa;
 800ad3e:	189a      	adds	r2, r3, r2
 800ad40:	8082      	strh	r2, [r0, #4]
            work_area.y1 = coords->y1;
 800ad42:	2102      	movs	r1, #2
 800ad44:	5e7a      	ldrsh	r2, [r7, r1]
            lv_draw_fill(&work_area, mask, color, opa);
 800ad46:	9903      	ldr	r1, [sp, #12]
            work_area.y2 = coords->y1 + aa;
 800ad48:	189b      	adds	r3, r3, r2
            work_area.y1 = coords->y1;
 800ad4a:	8042      	strh	r2, [r0, #2]
            lv_draw_fill(&work_area, mask, color, opa);
 800ad4c:	466a      	mov	r2, sp
            work_area.y2 = coords->y1 + aa;
 800ad4e:	80c3      	strh	r3, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800ad50:	8b12      	ldrh	r2, [r2, #24]
 800ad52:	9b05      	ldr	r3, [sp, #20]
 800ad54:	f7fd fd50 	bl	80087f8 <lv_draw_fill>
        if(part & (LV_BORDER_TOP | LV_BORDER_RIGHT)) {
 800ad58:	230a      	movs	r3, #10
 800ad5a:	421c      	tst	r4, r3
 800ad5c:	d012      	beq.n	800ad84 <lv_draw_rect+0x15e4>
            work_area.x1 = coords->x2 - aa;
 800ad5e:	2304      	movs	r3, #4
 800ad60:	5efa      	ldrsh	r2, [r7, r3]
 800ad62:	466b      	mov	r3, sp
 800ad64:	8c1b      	ldrh	r3, [r3, #32]
 800ad66:	a828      	add	r0, sp, #160	; 0xa0
 800ad68:	1ad1      	subs	r1, r2, r3
 800ad6a:	8001      	strh	r1, [r0, #0]
            work_area.x2 = coords->x2;
 800ad6c:	8082      	strh	r2, [r0, #4]
            work_area.y1 = coords->y1;
 800ad6e:	2102      	movs	r1, #2
 800ad70:	5e7a      	ldrsh	r2, [r7, r1]
            lv_draw_fill(&work_area, mask, color, opa);
 800ad72:	9903      	ldr	r1, [sp, #12]
            work_area.y2 = coords->y1 + aa;
 800ad74:	189b      	adds	r3, r3, r2
            work_area.y1 = coords->y1;
 800ad76:	8042      	strh	r2, [r0, #2]
            lv_draw_fill(&work_area, mask, color, opa);
 800ad78:	466a      	mov	r2, sp
            work_area.y2 = coords->y1 + aa;
 800ad7a:	80c3      	strh	r3, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800ad7c:	8b12      	ldrh	r2, [r2, #24]
 800ad7e:	9b05      	ldr	r3, [sp, #20]
 800ad80:	f7fd fd3a 	bl	80087f8 <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_LEFT)) {
 800ad84:	2305      	movs	r3, #5
 800ad86:	421c      	tst	r4, r3
 800ad88:	d012      	beq.n	800adb0 <lv_draw_rect+0x1610>
            work_area.x1 = coords->x1;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	5efa      	ldrsh	r2, [r7, r3]
            work_area.x2 = coords->x1 + aa;
 800ad8e:	466b      	mov	r3, sp
 800ad90:	8c1b      	ldrh	r3, [r3, #32]
            work_area.x1 = coords->x1;
 800ad92:	a828      	add	r0, sp, #160	; 0xa0
 800ad94:	8002      	strh	r2, [r0, #0]
            work_area.x2 = coords->x1 + aa;
 800ad96:	189a      	adds	r2, r3, r2
 800ad98:	8082      	strh	r2, [r0, #4]
            work_area.y1 = coords->y2 - aa;
 800ad9a:	2106      	movs	r1, #6
 800ad9c:	5e7a      	ldrsh	r2, [r7, r1]
            lv_draw_fill(&work_area, mask, color, opa);
 800ad9e:	9903      	ldr	r1, [sp, #12]
            work_area.y1 = coords->y2 - aa;
 800ada0:	1ad3      	subs	r3, r2, r3
            work_area.y2 = coords->y2;
 800ada2:	80c2      	strh	r2, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800ada4:	466a      	mov	r2, sp
            work_area.y1 = coords->y2 - aa;
 800ada6:	8043      	strh	r3, [r0, #2]
            lv_draw_fill(&work_area, mask, color, opa);
 800ada8:	8b12      	ldrh	r2, [r2, #24]
 800adaa:	9b05      	ldr	r3, [sp, #20]
 800adac:	f7fd fd24 	bl	80087f8 <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_RIGHT)) {
 800adb0:	2309      	movs	r3, #9
 800adb2:	421c      	tst	r4, r3
 800adb4:	d101      	bne.n	800adba <lv_draw_rect+0x161a>
 800adb6:	f7ff fa80 	bl	800a2ba <lv_draw_rect+0xb1a>
            work_area.x1 = coords->x2 - aa;
 800adba:	2304      	movs	r3, #4
 800adbc:	5efa      	ldrsh	r2, [r7, r3]
 800adbe:	466b      	mov	r3, sp
 800adc0:	8c1b      	ldrh	r3, [r3, #32]
 800adc2:	a828      	add	r0, sp, #160	; 0xa0
 800adc4:	1ad1      	subs	r1, r2, r3
 800adc6:	8001      	strh	r1, [r0, #0]
            work_area.x2 = coords->x2;
 800adc8:	8082      	strh	r2, [r0, #4]
            work_area.y1 = coords->y2 - aa;
 800adca:	2106      	movs	r1, #6
 800adcc:	5e7a      	ldrsh	r2, [r7, r1]
 800adce:	1ad3      	subs	r3, r2, r3
 800add0:	8043      	strh	r3, [r0, #2]
            work_area.y2 = coords->y2;
 800add2:	80c2      	strh	r2, [r0, #6]
 800add4:	f7ff fa6b 	bl	800a2ae <lv_draw_rect+0xb0e>
        work_area.y1 = coords->y1 + radius;
 800add8:	18eb      	adds	r3, r5, r3
 800adda:	e6dd      	b.n	800ab98 <lv_draw_rect+0x13f8>
        work_area.y2 = coords->y2 - radius;
 800addc:	1b5b      	subs	r3, r3, r5
 800adde:	e6e6      	b.n	800abae <lv_draw_rect+0x140e>
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800ade0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ade2:	4353      	muls	r3, r2
 800ade4:	0a1b      	lsrs	r3, r3, #8
 800ade6:	f7ff fa85 	bl	800a2f4 <lv_draw_rect+0xb54>
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800adea:	3c02      	subs	r4, #2
 800adec:	f7ff fa8a 	bl	800a304 <lv_draw_rect+0xb64>
        if(cir_in.y < cir_in.x) {
 800adf0:	a926      	add	r1, sp, #152	; 0x98
 800adf2:	2000      	movs	r0, #0
 800adf4:	5e0b      	ldrsh	r3, [r1, r0]
 800adf6:	2002      	movs	r0, #2
 800adf8:	5e09      	ldrsh	r1, [r1, r0]
 800adfa:	4299      	cmp	r1, r3
 800adfc:	db00      	blt.n	800ae00 <lv_draw_rect+0x1660>
 800adfe:	e121      	b.n	800b044 <lv_draw_rect+0x18a4>
            act_w1 = cir_out.x - cir_in.x;
 800ae00:	1ad3      	subs	r3, r2, r3
 800ae02:	b21b      	sxth	r3, r3
 800ae04:	930f      	str	r3, [sp, #60]	; 0x3c
            act_w2 = act_w1 - 1;
 800ae06:	9312      	str	r3, [sp, #72]	; 0x48
        if(aa) {
 800ae08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d036      	beq.n	800ae7c <lv_draw_rect+0x16dc>
            if(out_x_last != cir_out.x) {
 800ae0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d014      	beq.n	800ae3e <lv_draw_rect+0x169e>
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800ae14:	224c      	movs	r2, #76	; 0x4c
 800ae16:	466b      	mov	r3, sp
                for(i = 0; i < seg_size; i++) {
 800ae18:	2500      	movs	r5, #0
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800ae1a:	189b      	adds	r3, r3, r2
 800ae1c:	881b      	ldrh	r3, [r3, #0]
 800ae1e:	930d      	str	r3, [sp, #52]	; 0x34
 800ae20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae24:	1a9b      	subs	r3, r3, r2
 800ae26:	b21b      	sxth	r3, r3
 800ae28:	9313      	str	r3, [sp, #76]	; 0x4c
                for(i = 0; i < seg_size; i++) {
 800ae2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae2c:	42ab      	cmp	r3, r5
 800ae2e:	dd00      	ble.n	800ae32 <lv_draw_rect+0x1692>
 800ae30:	e110      	b.n	800b054 <lv_draw_rect+0x18b4>
                out_x_last      = cir_out.x;
 800ae32:	ab24      	add	r3, sp, #144	; 0x90
 800ae34:	2200      	movs	r2, #0
 800ae36:	5e9b      	ldrsh	r3, [r3, r2]
 800ae38:	930c      	str	r3, [sp, #48]	; 0x30
 800ae3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae3c:	9313      	str	r3, [sp, #76]	; 0x4c
            if(in_x_last != cir_in.x) {
 800ae3e:	ab26      	add	r3, sp, #152	; 0x98
 800ae40:	2200      	movs	r2, #0
 800ae42:	5e9b      	ldrsh	r3, [r3, r2]
 800ae44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d018      	beq.n	800ae7c <lv_draw_rect+0x16dc>
                in_y_seg_end        = cir_out.y;
 800ae4a:	ab24      	add	r3, sp, #144	; 0x90
 800ae4c:	2202      	movs	r2, #2
 800ae4e:	5e9b      	ldrsh	r3, [r3, r2]
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800ae50:	2244      	movs	r2, #68	; 0x44
                in_y_seg_end        = cir_out.y;
 800ae52:	9317      	str	r3, [sp, #92]	; 0x5c
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800ae54:	466b      	mov	r3, sp
 800ae56:	189b      	adds	r3, r3, r2
 800ae58:	881e      	ldrh	r6, [r3, #0]
 800ae5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae5c:	1b9b      	subs	r3, r3, r6
 800ae5e:	b21b      	sxth	r3, r3
 800ae60:	930d      	str	r3, [sp, #52]	; 0x34
 800ae62:	2300      	movs	r3, #0
                for(i = 0; i < seg_size; i++) {
 800ae64:	001c      	movs	r4, r3
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800ae66:	9310      	str	r3, [sp, #64]	; 0x40
                for(i = 0; i < seg_size; i++) {
 800ae68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae6a:	42a3      	cmp	r3, r4
 800ae6c:	dd00      	ble.n	800ae70 <lv_draw_rect+0x16d0>
 800ae6e:	e19d      	b.n	800b1ac <lv_draw_rect+0x1a0c>
                in_x_last      = cir_in.x;
 800ae70:	ab26      	add	r3, sp, #152	; 0x98
 800ae72:	2200      	movs	r2, #0
 800ae74:	5e9b      	ldrsh	r3, [r3, r2]
 800ae76:	930a      	str	r3, [sp, #40]	; 0x28
                in_y_seg_start = in_y_seg_end;
 800ae78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae7a:	9311      	str	r3, [sp, #68]	; 0x44
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800ae7c:	2209      	movs	r2, #9
 800ae7e:	9b05      	ldr	r3, [sp, #20]
 800ae80:	4013      	ands	r3, r2
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d12b      	bne.n	800aede <lv_draw_rect+0x173e>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 800ae86:	ad24      	add	r5, sp, #144	; 0x90
 800ae88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae8a:	882b      	ldrh	r3, [r5, #0]
 800ae8c:	ac28      	add	r4, sp, #160	; 0xa0
 800ae8e:	18d3      	adds	r3, r2, r3
 800ae90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	1a9a      	subs	r2, r3, r2
 800ae96:	8022      	strh	r2, [r4, #0]
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT1_X(cir_out);
 800ae98:	80a3      	strh	r3, [r4, #4]
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800ae9a:	886b      	ldrh	r3, [r5, #2]
 800ae9c:	9a07      	ldr	r2, [sp, #28]
            lv_draw_fill(&circ_area, mask, color, opa);
 800ae9e:	9903      	ldr	r1, [sp, #12]
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800aea0:	18d3      	adds	r3, r2, r3
            lv_draw_fill(&circ_area, mask, color, opa);
 800aea2:	466a      	mov	r2, sp
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800aea4:	b21b      	sxth	r3, r3
 800aea6:	8063      	strh	r3, [r4, #2]
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800aea8:	80e3      	strh	r3, [r4, #6]
            lv_draw_fill(&circ_area, mask, color, opa);
 800aeaa:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800aeac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeae:	0020      	movs	r0, r4
 800aeb0:	f7fd fca2 	bl	80087f8 <lv_draw_fill>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800aeb4:	886b      	ldrh	r3, [r5, #2]
 800aeb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
            lv_draw_fill(&circ_area, mask, color, opa);
 800aeb8:	9903      	ldr	r1, [sp, #12]
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800aeba:	18d3      	adds	r3, r2, r3
 800aebc:	b21b      	sxth	r3, r3
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800aebe:	9a07      	ldr	r2, [sp, #28]
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800aec0:	8023      	strh	r3, [r4, #0]
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800aec2:	80a3      	strh	r3, [r4, #4]
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800aec4:	882b      	ldrh	r3, [r5, #0]
            lv_draw_fill(&circ_area, mask, color, opa);
 800aec6:	0020      	movs	r0, r4
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800aec8:	18d3      	adds	r3, r2, r3
 800aeca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aecc:	b29b      	uxth	r3, r3
 800aece:	1a9a      	subs	r2, r3, r2
 800aed0:	8062      	strh	r2, [r4, #2]
            lv_draw_fill(&circ_area, mask, color, opa);
 800aed2:	466a      	mov	r2, sp
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out);
 800aed4:	80e3      	strh	r3, [r4, #6]
            lv_draw_fill(&circ_area, mask, color, opa);
 800aed6:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800aed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeda:	f7fd fc8d 	bl	80087f8 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800aede:	2205      	movs	r2, #5
 800aee0:	9b05      	ldr	r3, [sp, #20]
 800aee2:	4013      	ands	r3, r2
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d12b      	bne.n	800af40 <lv_draw_rect+0x17a0>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800aee8:	ad24      	add	r5, sp, #144	; 0x90
 800aeea:	886b      	ldrh	r3, [r5, #2]
 800aeec:	9a08      	ldr	r2, [sp, #32]
 800aeee:	ac28      	add	r4, sp, #160	; 0xa0
 800aef0:	1ad3      	subs	r3, r2, r3
 800aef2:	b21b      	sxth	r3, r3
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800aef4:	9a07      	ldr	r2, [sp, #28]
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800aef6:	8023      	strh	r3, [r4, #0]
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800aef8:	80a3      	strh	r3, [r4, #4]
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800aefa:	882b      	ldrh	r3, [r5, #0]
            lv_draw_fill(&circ_area, mask, color, opa);
 800aefc:	9903      	ldr	r1, [sp, #12]
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800aefe:	18d3      	adds	r3, r2, r3
 800af00:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af02:	b29b      	uxth	r3, r3
 800af04:	1a9a      	subs	r2, r3, r2
 800af06:	8062      	strh	r2, [r4, #2]
            lv_draw_fill(&circ_area, mask, color, opa);
 800af08:	466a      	mov	r2, sp
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out);
 800af0a:	80e3      	strh	r3, [r4, #6]
            lv_draw_fill(&circ_area, mask, color, opa);
 800af0c:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800af0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af10:	0020      	movs	r0, r4
 800af12:	f7fd fc71 	bl	80087f8 <lv_draw_fill>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800af16:	9a08      	ldr	r2, [sp, #32]
 800af18:	882b      	ldrh	r3, [r5, #0]
            lv_draw_fill(&circ_area, mask, color, opa);
 800af1a:	9903      	ldr	r1, [sp, #12]
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800af1c:	1ad3      	subs	r3, r2, r3
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 800af1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800af20:	b29b      	uxth	r3, r3
 800af22:	8023      	strh	r3, [r4, #0]
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 800af24:	189b      	adds	r3, r3, r2
 800af26:	80a3      	strh	r3, [r4, #4]
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800af28:	886b      	ldrh	r3, [r5, #2]
 800af2a:	9a07      	ldr	r2, [sp, #28]
            lv_draw_fill(&circ_area, mask, color, opa);
 800af2c:	0020      	movs	r0, r4
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800af2e:	18d3      	adds	r3, r2, r3
            lv_draw_fill(&circ_area, mask, color, opa);
 800af30:	466a      	mov	r2, sp
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800af32:	b21b      	sxth	r3, r3
 800af34:	8063      	strh	r3, [r4, #2]
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800af36:	80e3      	strh	r3, [r4, #6]
            lv_draw_fill(&circ_area, mask, color, opa);
 800af38:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800af3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af3c:	f7fd fc5c 	bl	80087f8 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800af40:	2306      	movs	r3, #6
 800af42:	9a05      	ldr	r2, [sp, #20]
 800af44:	4013      	ands	r3, r2
 800af46:	2b06      	cmp	r3, #6
 800af48:	d132      	bne.n	800afb0 <lv_draw_rect+0x1810>
            if(lb_origo.y + LV_CIRC_OCT4_Y(cir_out) > lt_origo.y + LV_CIRC_OCT5_Y(cir_out)) {
 800af4a:	aa24      	add	r2, sp, #144	; 0x90
 800af4c:	2102      	movs	r1, #2
 800af4e:	5e53      	ldrsh	r3, [r2, r1]
 800af50:	9916      	ldr	r1, [sp, #88]	; 0x58
 800af52:	18c8      	adds	r0, r1, r3
 800af54:	9915      	ldr	r1, [sp, #84]	; 0x54
 800af56:	1ac9      	subs	r1, r1, r3
 800af58:	4288      	cmp	r0, r1
 800af5a:	dd13      	ble.n	800af84 <lv_draw_rect+0x17e4>
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 800af5c:	9908      	ldr	r1, [sp, #32]
 800af5e:	8812      	ldrh	r2, [r2, #0]
 800af60:	a828      	add	r0, sp, #160	; 0xa0
 800af62:	1a8a      	subs	r2, r1, r2
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 800af64:	9912      	ldr	r1, [sp, #72]	; 0x48
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 800af66:	b292      	uxth	r2, r2
 800af68:	8002      	strh	r2, [r0, #0]
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 800af6a:	1852      	adds	r2, r2, r1
 800af6c:	8082      	strh	r2, [r0, #4]
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800af6e:	9a06      	ldr	r2, [sp, #24]
                lv_draw_fill(&circ_area, mask, color, opa);
 800af70:	9903      	ldr	r1, [sp, #12]
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800af72:	1ad3      	subs	r3, r2, r3
                lv_draw_fill(&circ_area, mask, color, opa);
 800af74:	466a      	mov	r2, sp
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800af76:	b21b      	sxth	r3, r3
 800af78:	8043      	strh	r3, [r0, #2]
                circ_area.y2 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800af7a:	80c3      	strh	r3, [r0, #6]
                lv_draw_fill(&circ_area, mask, color, opa);
 800af7c:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800af7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af80:	f7fd fc3a 	bl	80087f8 <lv_draw_fill>
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800af84:	aa24      	add	r2, sp, #144	; 0x90
 800af86:	8853      	ldrh	r3, [r2, #2]
 800af88:	9908      	ldr	r1, [sp, #32]
 800af8a:	a828      	add	r0, sp, #160	; 0xa0
 800af8c:	1acb      	subs	r3, r1, r3
 800af8e:	b21b      	sxth	r3, r3
 800af90:	8003      	strh	r3, [r0, #0]
            circ_area.x2 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800af92:	8083      	strh	r3, [r0, #4]
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800af94:	8813      	ldrh	r3, [r2, #0]
 800af96:	9a06      	ldr	r2, [sp, #24]
            lv_draw_fill(&circ_area, mask, color, opa);
 800af98:	9903      	ldr	r1, [sp, #12]
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800af9a:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800af9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	8043      	strh	r3, [r0, #2]
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800afa2:	189b      	adds	r3, r3, r2
            lv_draw_fill(&circ_area, mask, color, opa);
 800afa4:	466a      	mov	r2, sp
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800afa6:	80c3      	strh	r3, [r0, #6]
            lv_draw_fill(&circ_area, mask, color, opa);
 800afa8:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800afaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afac:	f7fd fc24 	bl	80087f8 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800afb0:	230a      	movs	r3, #10
 800afb2:	9a05      	ldr	r2, [sp, #20]
 800afb4:	4013      	ands	r3, r2
 800afb6:	2b0a      	cmp	r3, #10
 800afb8:	d132      	bne.n	800b020 <lv_draw_rect+0x1880>
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800afba:	ad24      	add	r5, sp, #144	; 0x90
 800afbc:	886b      	ldrh	r3, [r5, #2]
 800afbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afc0:	ac28      	add	r4, sp, #160	; 0xa0
 800afc2:	18d3      	adds	r3, r2, r3
 800afc4:	b21b      	sxth	r3, r3
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800afc6:	9a06      	ldr	r2, [sp, #24]
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800afc8:	8023      	strh	r3, [r4, #0]
            circ_area.x2 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800afca:	80a3      	strh	r3, [r4, #4]
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800afcc:	882b      	ldrh	r3, [r5, #0]
            lv_draw_fill(&circ_area, mask, color, opa);
 800afce:	9903      	ldr	r1, [sp, #12]
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800afd0:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800afd2:	9a12      	ldr	r2, [sp, #72]	; 0x48
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	8063      	strh	r3, [r4, #2]
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800afd8:	189b      	adds	r3, r3, r2
            lv_draw_fill(&circ_area, mask, color, opa);
 800afda:	466a      	mov	r2, sp
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800afdc:	80e3      	strh	r3, [r4, #6]
            lv_draw_fill(&circ_area, mask, color, opa);
 800afde:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800afe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afe2:	0020      	movs	r0, r4
 800afe4:	f7fd fc08 	bl	80087f8 <lv_draw_fill>
            if(rb_origo.y + LV_CIRC_OCT1_Y(cir_out) > rt_origo.y + LV_CIRC_OCT8_Y(cir_out)) {
 800afe8:	2202      	movs	r2, #2
 800afea:	5eab      	ldrsh	r3, [r5, r2]
 800afec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800afee:	18d1      	adds	r1, r2, r3
 800aff0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aff2:	1ad2      	subs	r2, r2, r3
 800aff4:	4291      	cmp	r1, r2
 800aff6:	dd13      	ble.n	800b020 <lv_draw_rect+0x1880>
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 800aff8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800affa:	8829      	ldrh	r1, [r5, #0]
                lv_draw_fill(&circ_area, mask, color, opa);
 800affc:	0020      	movs	r0, r4
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 800affe:	1851      	adds	r1, r2, r1
 800b000:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b002:	b289      	uxth	r1, r1
 800b004:	1a8a      	subs	r2, r1, r2
 800b006:	8022      	strh	r2, [r4, #0]
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800b008:	9a06      	ldr	r2, [sp, #24]
                circ_area.x2 = rt_origo.x + LV_CIRC_OCT8_X(cir_out);
 800b00a:	80a1      	strh	r1, [r4, #4]
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800b00c:	1ad3      	subs	r3, r2, r3
                lv_draw_fill(&circ_area, mask, color, opa);
 800b00e:	466a      	mov	r2, sp
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800b010:	b21b      	sxth	r3, r3
 800b012:	8063      	strh	r3, [r4, #2]
                circ_area.y2 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800b014:	80e3      	strh	r3, [r4, #6]
                lv_draw_fill(&circ_area, mask, color, opa);
 800b016:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800b018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b01a:	9903      	ldr	r1, [sp, #12]
 800b01c:	f7fd fbec 	bl	80087f8 <lv_draw_fill>
        lv_circ_next(&cir_out, &tmp_out);
 800b020:	a920      	add	r1, sp, #128	; 0x80
 800b022:	a824      	add	r0, sp, #144	; 0x90
 800b024:	f001 fa78 	bl	800c518 <lv_circ_next>
        if(cir_in.y < cir_in.x) {
 800b028:	a826      	add	r0, sp, #152	; 0x98
 800b02a:	2302      	movs	r3, #2
 800b02c:	5ec2      	ldrsh	r2, [r0, r3]
 800b02e:	2100      	movs	r1, #0
 800b030:	5e43      	ldrsh	r3, [r0, r1]
 800b032:	429a      	cmp	r2, r3
 800b034:	db01      	blt.n	800b03a <lv_draw_rect+0x189a>
 800b036:	f7ff f9ac 	bl	800a392 <lv_draw_rect+0xbf2>
            lv_circ_next(&cir_in, &tmp_in);
 800b03a:	a922      	add	r1, sp, #136	; 0x88
 800b03c:	f001 fa6c 	bl	800c518 <lv_circ_next>
 800b040:	f7ff f9a7 	bl	800a392 <lv_draw_rect+0xbf2>
            act_w1 = cir_out.x - cir_out.y;
 800b044:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b046:	1ad3      	subs	r3, r2, r3
 800b048:	b29b      	uxth	r3, r3
 800b04a:	b219      	sxth	r1, r3
            act_w2 = act_w1 - 1;
 800b04c:	3b01      	subs	r3, #1
            act_w1 = cir_out.x - cir_out.y;
 800b04e:	910f      	str	r1, [sp, #60]	; 0x3c
            act_w2 = act_w1 - 1;
 800b050:	b21b      	sxth	r3, r3
 800b052:	e6d8      	b.n	800ae06 <lv_draw_rect+0x1666>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800b054:	9b13      	ldr	r3, [sp, #76]	; 0x4c
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800b056:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b058:	0029      	movs	r1, r5
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d100      	bne.n	800b060 <lv_draw_rect+0x18c0>
 800b05e:	e09e      	b.n	800b19e <lv_draw_rect+0x19fe>
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800b060:	0018      	movs	r0, r3
 800b062:	f7fe fb79 	bl	8009758 <antialias_get_opa_circ>
 800b066:	0004      	movs	r4, r0
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b068:	2209      	movs	r2, #9
 800b06a:	9b05      	ldr	r3, [sp, #20]
 800b06c:	4013      	ands	r3, r2
 800b06e:	4293      	cmp	r3, r2
 800b070:	d120      	bne.n	800b0b4 <lv_draw_rect+0x1914>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b072:	466b      	mov	r3, sp
 800b074:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b076:	8e1f      	ldrh	r7, [r3, #48]	; 0x30
 800b078:	9b07      	ldr	r3, [sp, #28]
 800b07a:	b2ae      	uxth	r6, r5
 800b07c:	1899      	adds	r1, r3, r2
 800b07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b080:	9400      	str	r4, [sp, #0]
 800b082:	1c58      	adds	r0, r3, #1
 800b084:	9b04      	ldr	r3, [sp, #16]
 800b086:	1871      	adds	r1, r6, r1
 800b088:	1838      	adds	r0, r7, r0
 800b08a:	b209      	sxth	r1, r1
 800b08c:	b200      	sxth	r0, r0
 800b08e:	895b      	ldrh	r3, [r3, #10]
 800b090:	9a03      	ldr	r2, [sp, #12]
 800b092:	f7fd fb68 	bl	8008766 <lv_draw_px>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800b096:	9b07      	ldr	r3, [sp, #28]
 800b098:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b09a:	1c59      	adds	r1, r3, #1
 800b09c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b09e:	1879      	adds	r1, r7, r1
 800b0a0:	1898      	adds	r0, r3, r2
 800b0a2:	9b04      	ldr	r3, [sp, #16]
 800b0a4:	1830      	adds	r0, r6, r0
 800b0a6:	9400      	str	r4, [sp, #0]
 800b0a8:	b209      	sxth	r1, r1
 800b0aa:	b200      	sxth	r0, r0
 800b0ac:	895b      	ldrh	r3, [r3, #10]
 800b0ae:	9a03      	ldr	r2, [sp, #12]
 800b0b0:	f7fd fb59 	bl	8008766 <lv_draw_px>
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b0b4:	2205      	movs	r2, #5
 800b0b6:	9b05      	ldr	r3, [sp, #20]
 800b0b8:	4013      	ands	r3, r2
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d120      	bne.n	800b100 <lv_draw_rect+0x1960>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800b0be:	466b      	mov	r3, sp
 800b0c0:	8e1f      	ldrh	r7, [r3, #48]	; 0x30
 800b0c2:	9b07      	ldr	r3, [sp, #28]
 800b0c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0c6:	1c59      	adds	r1, r3, #1
 800b0c8:	9b08      	ldr	r3, [sp, #32]
 800b0ca:	b2ae      	uxth	r6, r5
 800b0cc:	1a98      	subs	r0, r3, r2
 800b0ce:	9b04      	ldr	r3, [sp, #16]
 800b0d0:	9400      	str	r4, [sp, #0]
 800b0d2:	1879      	adds	r1, r7, r1
 800b0d4:	1b80      	subs	r0, r0, r6
 800b0d6:	b209      	sxth	r1, r1
 800b0d8:	b200      	sxth	r0, r0
 800b0da:	895b      	ldrh	r3, [r3, #10]
 800b0dc:	9a03      	ldr	r2, [sp, #12]
 800b0de:	f7fd fb42 	bl	8008766 <lv_draw_px>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800b0e2:	9b07      	ldr	r3, [sp, #28]
 800b0e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0e6:	9400      	str	r4, [sp, #0]
 800b0e8:	1899      	adds	r1, r3, r2
 800b0ea:	9b08      	ldr	r3, [sp, #32]
 800b0ec:	1871      	adds	r1, r6, r1
 800b0ee:	1e58      	subs	r0, r3, #1
 800b0f0:	9b04      	ldr	r3, [sp, #16]
 800b0f2:	1bc0      	subs	r0, r0, r7
 800b0f4:	b209      	sxth	r1, r1
 800b0f6:	b200      	sxth	r0, r0
 800b0f8:	895b      	ldrh	r3, [r3, #10]
 800b0fa:	9a03      	ldr	r2, [sp, #12]
 800b0fc:	f7fd fb33 	bl	8008766 <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b100:	2306      	movs	r3, #6
 800b102:	9a05      	ldr	r2, [sp, #20]
 800b104:	4013      	ands	r3, r2
 800b106:	2b06      	cmp	r3, #6
 800b108:	d120      	bne.n	800b14c <lv_draw_rect+0x19ac>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800b10a:	466b      	mov	r3, sp
 800b10c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b10e:	8e1f      	ldrh	r7, [r3, #48]	; 0x30
 800b110:	9b06      	ldr	r3, [sp, #24]
 800b112:	b2ae      	uxth	r6, r5
 800b114:	1a99      	subs	r1, r3, r2
 800b116:	9b08      	ldr	r3, [sp, #32]
 800b118:	9400      	str	r4, [sp, #0]
 800b11a:	1e58      	subs	r0, r3, #1
 800b11c:	9b04      	ldr	r3, [sp, #16]
 800b11e:	1b89      	subs	r1, r1, r6
 800b120:	1bc0      	subs	r0, r0, r7
 800b122:	b209      	sxth	r1, r1
 800b124:	b200      	sxth	r0, r0
 800b126:	895b      	ldrh	r3, [r3, #10]
 800b128:	9a03      	ldr	r2, [sp, #12]
 800b12a:	f7fd fb1c 	bl	8008766 <lv_draw_px>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800b12e:	9b06      	ldr	r3, [sp, #24]
 800b130:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b132:	1e59      	subs	r1, r3, #1
 800b134:	9b08      	ldr	r3, [sp, #32]
 800b136:	1bc9      	subs	r1, r1, r7
 800b138:	1a98      	subs	r0, r3, r2
 800b13a:	9b04      	ldr	r3, [sp, #16]
 800b13c:	1b80      	subs	r0, r0, r6
 800b13e:	9400      	str	r4, [sp, #0]
 800b140:	b209      	sxth	r1, r1
 800b142:	b200      	sxth	r0, r0
 800b144:	895b      	ldrh	r3, [r3, #10]
 800b146:	9a03      	ldr	r2, [sp, #12]
 800b148:	f7fd fb0d 	bl	8008766 <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b14c:	230a      	movs	r3, #10
 800b14e:	9a05      	ldr	r2, [sp, #20]
 800b150:	4013      	ands	r3, r2
 800b152:	2b0a      	cmp	r3, #10
 800b154:	d120      	bne.n	800b198 <lv_draw_rect+0x19f8>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800b156:	466b      	mov	r3, sp
 800b158:	8e1e      	ldrh	r6, [r3, #48]	; 0x30
 800b15a:	9b06      	ldr	r3, [sp, #24]
 800b15c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b15e:	1e59      	subs	r1, r3, #1
 800b160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b162:	b2af      	uxth	r7, r5
 800b164:	1898      	adds	r0, r3, r2
 800b166:	9b04      	ldr	r3, [sp, #16]
 800b168:	9400      	str	r4, [sp, #0]
 800b16a:	1b89      	subs	r1, r1, r6
 800b16c:	1838      	adds	r0, r7, r0
 800b16e:	b209      	sxth	r1, r1
 800b170:	b200      	sxth	r0, r0
 800b172:	895b      	ldrh	r3, [r3, #10]
 800b174:	9a03      	ldr	r2, [sp, #12]
 800b176:	f7fd faf6 	bl	8008766 <lv_draw_px>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800b17a:	9b06      	ldr	r3, [sp, #24]
 800b17c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b17e:	9400      	str	r4, [sp, #0]
 800b180:	1a99      	subs	r1, r3, r2
 800b182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b184:	1bc9      	subs	r1, r1, r7
 800b186:	1c58      	adds	r0, r3, #1
 800b188:	9b04      	ldr	r3, [sp, #16]
 800b18a:	1830      	adds	r0, r6, r0
 800b18c:	b209      	sxth	r1, r1
 800b18e:	b200      	sxth	r0, r0
 800b190:	895b      	ldrh	r3, [r3, #10]
 800b192:	9a03      	ldr	r2, [sp, #12]
 800b194:	f7fd fae7 	bl	8008766 <lv_draw_px>
 800b198:	3501      	adds	r5, #1
 800b19a:	b22d      	sxth	r5, r5
 800b19c:	e645      	b.n	800ae2a <lv_draw_rect+0x168a>
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800b19e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800b1a0:	f7fd fa0a 	bl	80085b8 <lv_draw_aa_get_opa>
 800b1a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1a6:	1a1c      	subs	r4, r3, r0
 800b1a8:	b2e4      	uxtb	r4, r4
 800b1aa:	e75d      	b.n	800b068 <lv_draw_rect+0x18c8>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800b1ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 800b1ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b1b0:	0021      	movs	r1, r4
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800b1b2:	2b01      	cmp	r3, #1
 800b1b4:	d100      	bne.n	800b1b8 <lv_draw_rect+0x1a18>
 800b1b6:	e0ac      	b.n	800b312 <lv_draw_rect+0x1b72>
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 800b1b8:	0018      	movs	r0, r3
 800b1ba:	f7fe facd 	bl	8009758 <antialias_get_opa_circ>
 800b1be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1c0:	1a1d      	subs	r5, r3, r0
 800b1c2:	b2ed      	uxtb	r5, r5
 800b1c4:	2209      	movs	r2, #9
 800b1c6:	9b05      	ldr	r3, [sp, #20]
 800b1c8:	4013      	ands	r3, r2
 800b1ca:	9318      	str	r3, [sp, #96]	; 0x60
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d10e      	bne.n	800b1ee <lv_draw_rect+0x1a4e>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b1d0:	9b07      	ldr	r3, [sp, #28]
 800b1d2:	9500      	str	r5, [sp, #0]
 800b1d4:	1999      	adds	r1, r3, r6
 800b1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1d8:	1909      	adds	r1, r1, r4
 800b1da:	1e58      	subs	r0, r3, #1
 800b1dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1de:	b209      	sxth	r1, r1
 800b1e0:	18c0      	adds	r0, r0, r3
 800b1e2:	9b04      	ldr	r3, [sp, #16]
 800b1e4:	b200      	sxth	r0, r0
 800b1e6:	895b      	ldrh	r3, [r3, #10]
 800b1e8:	9a03      	ldr	r2, [sp, #12]
 800b1ea:	f7fd fabc 	bl	8008766 <lv_draw_px>
 800b1ee:	2205      	movs	r2, #5
 800b1f0:	9b05      	ldr	r3, [sp, #20]
 800b1f2:	4013      	ands	r3, r2
 800b1f4:	9319      	str	r3, [sp, #100]	; 0x64
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d10e      	bne.n	800b218 <lv_draw_rect+0x1a78>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 800b1fa:	9b07      	ldr	r3, [sp, #28]
 800b1fc:	9500      	str	r5, [sp, #0]
 800b1fe:	1e59      	subs	r1, r3, #1
 800b200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b202:	9a03      	ldr	r2, [sp, #12]
 800b204:	18c9      	adds	r1, r1, r3
 800b206:	9b08      	ldr	r3, [sp, #32]
 800b208:	b209      	sxth	r1, r1
 800b20a:	1b98      	subs	r0, r3, r6
 800b20c:	9b04      	ldr	r3, [sp, #16]
 800b20e:	1b00      	subs	r0, r0, r4
 800b210:	b200      	sxth	r0, r0
 800b212:	895b      	ldrh	r3, [r3, #10]
 800b214:	f7fd faa7 	bl	8008766 <lv_draw_px>
 800b218:	2306      	movs	r3, #6
 800b21a:	9a05      	ldr	r2, [sp, #20]
 800b21c:	401a      	ands	r2, r3
 800b21e:	921a      	str	r2, [sp, #104]	; 0x68
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b220:	2a06      	cmp	r2, #6
 800b222:	d10e      	bne.n	800b242 <lv_draw_rect+0x1aa2>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800b224:	9b06      	ldr	r3, [sp, #24]
 800b226:	9500      	str	r5, [sp, #0]
 800b228:	1b99      	subs	r1, r3, r6
 800b22a:	9b08      	ldr	r3, [sp, #32]
 800b22c:	1b09      	subs	r1, r1, r4
 800b22e:	1c58      	adds	r0, r3, #1
 800b230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b232:	b209      	sxth	r1, r1
 800b234:	1ac0      	subs	r0, r0, r3
 800b236:	9b04      	ldr	r3, [sp, #16]
 800b238:	b200      	sxth	r0, r0
 800b23a:	895b      	ldrh	r3, [r3, #10]
 800b23c:	9a03      	ldr	r2, [sp, #12]
 800b23e:	f7fd fa92 	bl	8008766 <lv_draw_px>
 800b242:	270a      	movs	r7, #10
 800b244:	9b05      	ldr	r3, [sp, #20]
 800b246:	401f      	ands	r7, r3
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b248:	2f0a      	cmp	r7, #10
 800b24a:	d10e      	bne.n	800b26a <lv_draw_rect+0x1aca>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 800b24c:	9b06      	ldr	r3, [sp, #24]
 800b24e:	9500      	str	r5, [sp, #0]
 800b250:	1c59      	adds	r1, r3, #1
 800b252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b254:	9a03      	ldr	r2, [sp, #12]
 800b256:	1ac9      	subs	r1, r1, r3
 800b258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b25a:	b209      	sxth	r1, r1
 800b25c:	1998      	adds	r0, r3, r6
 800b25e:	9b04      	ldr	r3, [sp, #16]
 800b260:	1900      	adds	r0, r0, r4
 800b262:	b200      	sxth	r0, r0
 800b264:	895b      	ldrh	r3, [r3, #10]
 800b266:	f7fd fa7e 	bl	8008766 <lv_draw_px>
                    if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 800b26a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b26c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b26e:	189b      	adds	r3, r3, r2
 800b270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b272:	3a01      	subs	r2, #1
 800b274:	4293      	cmp	r3, r2
 800b276:	d046      	beq.n	800b306 <lv_draw_rect+0x1b66>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b278:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b27a:	2b09      	cmp	r3, #9
 800b27c:	d10e      	bne.n	800b29c <lv_draw_rect+0x1afc>
                            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1,
 800b27e:	9b07      	ldr	r3, [sp, #28]
 800b280:	9500      	str	r5, [sp, #0]
 800b282:	1e59      	subs	r1, r3, #1
 800b284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b286:	9a03      	ldr	r2, [sp, #12]
 800b288:	18c9      	adds	r1, r1, r3
 800b28a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b28c:	b209      	sxth	r1, r1
 800b28e:	1998      	adds	r0, r3, r6
 800b290:	9b04      	ldr	r3, [sp, #16]
 800b292:	1900      	adds	r0, r0, r4
 800b294:	b200      	sxth	r0, r0
 800b296:	895b      	ldrh	r3, [r3, #10]
 800b298:	f7fd fa65 	bl	8008766 <lv_draw_px>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b29c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b29e:	2b05      	cmp	r3, #5
 800b2a0:	d10e      	bne.n	800b2c0 <lv_draw_rect+0x1b20>
                            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i,
 800b2a2:	9b07      	ldr	r3, [sp, #28]
 800b2a4:	9500      	str	r5, [sp, #0]
 800b2a6:	1999      	adds	r1, r3, r6
 800b2a8:	9b08      	ldr	r3, [sp, #32]
 800b2aa:	1909      	adds	r1, r1, r4
 800b2ac:	1c58      	adds	r0, r3, #1
 800b2ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2b0:	b209      	sxth	r1, r1
 800b2b2:	1ac0      	subs	r0, r0, r3
 800b2b4:	9b04      	ldr	r3, [sp, #16]
 800b2b6:	b200      	sxth	r0, r0
 800b2b8:	895b      	ldrh	r3, [r3, #10]
 800b2ba:	9a03      	ldr	r2, [sp, #12]
 800b2bc:	f7fd fa53 	bl	8008766 <lv_draw_px>
                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b2c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b2c2:	2b06      	cmp	r3, #6
 800b2c4:	d10e      	bne.n	800b2e4 <lv_draw_rect+0x1b44>
                            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1,
 800b2c6:	9b06      	ldr	r3, [sp, #24]
 800b2c8:	9500      	str	r5, [sp, #0]
 800b2ca:	1c59      	adds	r1, r3, #1
 800b2cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2ce:	9a03      	ldr	r2, [sp, #12]
 800b2d0:	1ac9      	subs	r1, r1, r3
 800b2d2:	9b08      	ldr	r3, [sp, #32]
 800b2d4:	b209      	sxth	r1, r1
 800b2d6:	1b98      	subs	r0, r3, r6
 800b2d8:	9b04      	ldr	r3, [sp, #16]
 800b2da:	1b00      	subs	r0, r0, r4
 800b2dc:	b200      	sxth	r0, r0
 800b2de:	895b      	ldrh	r3, [r3, #10]
 800b2e0:	f7fd fa41 	bl	8008766 <lv_draw_px>
                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b2e4:	2f0a      	cmp	r7, #10
 800b2e6:	d10e      	bne.n	800b306 <lv_draw_rect+0x1b66>
                            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i,
 800b2e8:	9b06      	ldr	r3, [sp, #24]
 800b2ea:	9500      	str	r5, [sp, #0]
 800b2ec:	1b99      	subs	r1, r3, r6
 800b2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2f0:	1b09      	subs	r1, r1, r4
 800b2f2:	1e58      	subs	r0, r3, #1
 800b2f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2f6:	b209      	sxth	r1, r1
 800b2f8:	18c0      	adds	r0, r0, r3
 800b2fa:	9b04      	ldr	r3, [sp, #16]
 800b2fc:	b200      	sxth	r0, r0
 800b2fe:	895b      	ldrh	r3, [r3, #10]
 800b300:	9a03      	ldr	r2, [sp, #12]
 800b302:	f7fd fa30 	bl	8008766 <lv_draw_px>
 800b306:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b308:	3401      	adds	r4, #1
 800b30a:	3301      	adds	r3, #1
 800b30c:	b224      	sxth	r4, r4
 800b30e:	9310      	str	r3, [sp, #64]	; 0x40
 800b310:	e5aa      	b.n	800ae68 <lv_draw_rect+0x16c8>
                        aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800b312:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b314:	f7fd f950 	bl	80085b8 <lv_draw_aa_get_opa>
 800b318:	0005      	movs	r5, r0
 800b31a:	e753      	b.n	800b1c4 <lv_draw_rect+0x1a24>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800b31c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b31e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b320:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b322:	f7fd f949 	bl	80085b8 <lv_draw_aa_get_opa>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b326:	2209      	movs	r2, #9
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800b328:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b32a:	1a1c      	subs	r4, r3, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b32c:	9b05      	ldr	r3, [sp, #20]
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800b32e:	b2e4      	uxtb	r4, r4
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b330:	4013      	ands	r3, r2
 800b332:	4293      	cmp	r3, r2
 800b334:	d11e      	bne.n	800b374 <lv_draw_rect+0x1bd4>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b336:	466b      	mov	r3, sp
 800b338:	8e1f      	ldrh	r7, [r3, #48]	; 0x30
 800b33a:	8e9e      	ldrh	r6, [r3, #52]	; 0x34
 800b33c:	9b07      	ldr	r3, [sp, #28]
 800b33e:	9400      	str	r4, [sp, #0]
 800b340:	1959      	adds	r1, r3, r5
 800b342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b344:	1871      	adds	r1, r6, r1
 800b346:	1c58      	adds	r0, r3, #1
 800b348:	9b04      	ldr	r3, [sp, #16]
 800b34a:	1838      	adds	r0, r7, r0
 800b34c:	b209      	sxth	r1, r1
 800b34e:	b200      	sxth	r0, r0
 800b350:	895b      	ldrh	r3, [r3, #10]
 800b352:	9a03      	ldr	r2, [sp, #12]
 800b354:	f7fd fa07 	bl	8008766 <lv_draw_px>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800b358:	9b07      	ldr	r3, [sp, #28]
 800b35a:	9400      	str	r4, [sp, #0]
 800b35c:	1c59      	adds	r1, r3, #1
 800b35e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b360:	1879      	adds	r1, r7, r1
 800b362:	1958      	adds	r0, r3, r5
 800b364:	9b04      	ldr	r3, [sp, #16]
 800b366:	1830      	adds	r0, r6, r0
 800b368:	b209      	sxth	r1, r1
 800b36a:	b200      	sxth	r0, r0
 800b36c:	895b      	ldrh	r3, [r3, #10]
 800b36e:	9a03      	ldr	r2, [sp, #12]
 800b370:	f7fd f9f9 	bl	8008766 <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b374:	2205      	movs	r2, #5
 800b376:	9b05      	ldr	r3, [sp, #20]
 800b378:	4013      	ands	r3, r2
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d11e      	bne.n	800b3bc <lv_draw_rect+0x1c1c>
 800b37e:	466b      	mov	r3, sp
 800b380:	8e9e      	ldrh	r6, [r3, #52]	; 0x34
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800b382:	8e1f      	ldrh	r7, [r3, #48]	; 0x30
 800b384:	9b07      	ldr	r3, [sp, #28]
 800b386:	9400      	str	r4, [sp, #0]
 800b388:	1c59      	adds	r1, r3, #1
 800b38a:	9b08      	ldr	r3, [sp, #32]
 800b38c:	1879      	adds	r1, r7, r1
 800b38e:	1b58      	subs	r0, r3, r5
 800b390:	9b04      	ldr	r3, [sp, #16]
 800b392:	1b80      	subs	r0, r0, r6
 800b394:	b209      	sxth	r1, r1
 800b396:	b200      	sxth	r0, r0
 800b398:	895b      	ldrh	r3, [r3, #10]
 800b39a:	9a03      	ldr	r2, [sp, #12]
 800b39c:	f7fd f9e3 	bl	8008766 <lv_draw_px>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800b3a0:	9b07      	ldr	r3, [sp, #28]
 800b3a2:	9400      	str	r4, [sp, #0]
 800b3a4:	1959      	adds	r1, r3, r5
 800b3a6:	9b08      	ldr	r3, [sp, #32]
 800b3a8:	1871      	adds	r1, r6, r1
 800b3aa:	1e58      	subs	r0, r3, #1
 800b3ac:	9b04      	ldr	r3, [sp, #16]
 800b3ae:	1bc0      	subs	r0, r0, r7
 800b3b0:	b209      	sxth	r1, r1
 800b3b2:	b200      	sxth	r0, r0
 800b3b4:	895b      	ldrh	r3, [r3, #10]
 800b3b6:	9a03      	ldr	r2, [sp, #12]
 800b3b8:	f7fd f9d5 	bl	8008766 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b3bc:	2306      	movs	r3, #6
 800b3be:	9a05      	ldr	r2, [sp, #20]
 800b3c0:	4013      	ands	r3, r2
 800b3c2:	2b06      	cmp	r3, #6
 800b3c4:	d11e      	bne.n	800b404 <lv_draw_rect+0x1c64>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800b3c6:	466b      	mov	r3, sp
 800b3c8:	8e1f      	ldrh	r7, [r3, #48]	; 0x30
 800b3ca:	8e9e      	ldrh	r6, [r3, #52]	; 0x34
 800b3cc:	9b06      	ldr	r3, [sp, #24]
 800b3ce:	9400      	str	r4, [sp, #0]
 800b3d0:	1b59      	subs	r1, r3, r5
 800b3d2:	9b08      	ldr	r3, [sp, #32]
 800b3d4:	1b89      	subs	r1, r1, r6
 800b3d6:	1e58      	subs	r0, r3, #1
 800b3d8:	9b04      	ldr	r3, [sp, #16]
 800b3da:	1bc0      	subs	r0, r0, r7
 800b3dc:	b209      	sxth	r1, r1
 800b3de:	b200      	sxth	r0, r0
 800b3e0:	895b      	ldrh	r3, [r3, #10]
 800b3e2:	9a03      	ldr	r2, [sp, #12]
 800b3e4:	f7fd f9bf 	bl	8008766 <lv_draw_px>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800b3e8:	9b06      	ldr	r3, [sp, #24]
 800b3ea:	9400      	str	r4, [sp, #0]
 800b3ec:	1e59      	subs	r1, r3, #1
 800b3ee:	9b08      	ldr	r3, [sp, #32]
 800b3f0:	1bc9      	subs	r1, r1, r7
 800b3f2:	1b58      	subs	r0, r3, r5
 800b3f4:	9b04      	ldr	r3, [sp, #16]
 800b3f6:	1b80      	subs	r0, r0, r6
 800b3f8:	b209      	sxth	r1, r1
 800b3fa:	b200      	sxth	r0, r0
 800b3fc:	895b      	ldrh	r3, [r3, #10]
 800b3fe:	9a03      	ldr	r2, [sp, #12]
 800b400:	f7fd f9b1 	bl	8008766 <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b404:	230a      	movs	r3, #10
 800b406:	9a05      	ldr	r2, [sp, #20]
 800b408:	4013      	ands	r3, r2
 800b40a:	2b0a      	cmp	r3, #10
 800b40c:	d11e      	bne.n	800b44c <lv_draw_rect+0x1cac>
 800b40e:	466b      	mov	r3, sp
 800b410:	8e9f      	ldrh	r7, [r3, #52]	; 0x34
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800b412:	8e1e      	ldrh	r6, [r3, #48]	; 0x30
 800b414:	9b06      	ldr	r3, [sp, #24]
 800b416:	9400      	str	r4, [sp, #0]
 800b418:	1e59      	subs	r1, r3, #1
 800b41a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b41c:	1b89      	subs	r1, r1, r6
 800b41e:	1958      	adds	r0, r3, r5
 800b420:	9b04      	ldr	r3, [sp, #16]
 800b422:	1838      	adds	r0, r7, r0
 800b424:	b209      	sxth	r1, r1
 800b426:	b200      	sxth	r0, r0
 800b428:	895b      	ldrh	r3, [r3, #10]
 800b42a:	9a03      	ldr	r2, [sp, #12]
 800b42c:	f7fd f99b 	bl	8008766 <lv_draw_px>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800b430:	9b06      	ldr	r3, [sp, #24]
 800b432:	9400      	str	r4, [sp, #0]
 800b434:	1b59      	subs	r1, r3, r5
 800b436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b438:	1bc9      	subs	r1, r1, r7
 800b43a:	1c58      	adds	r0, r3, #1
 800b43c:	9b04      	ldr	r3, [sp, #16]
 800b43e:	1830      	adds	r0, r6, r0
 800b440:	b209      	sxth	r1, r1
 800b442:	b200      	sxth	r0, r0
 800b444:	895b      	ldrh	r3, [r3, #10]
 800b446:	9a03      	ldr	r2, [sp, #12]
 800b448:	f7fd f98d 	bl	8008766 <lv_draw_px>
 800b44c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b44e:	3301      	adds	r3, #1
 800b450:	b21b      	sxth	r3, r3
 800b452:	f7fe ffb6 	bl	800a3c2 <lv_draw_rect+0xc22>
            lv_opa_t aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800b456:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b458:	0021      	movs	r1, r4
 800b45a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b45c:	f7fd f8ac 	bl	80085b8 <lv_draw_aa_get_opa>
 800b460:	2209      	movs	r2, #9
 800b462:	9b05      	ldr	r3, [sp, #20]
 800b464:	0006      	movs	r6, r0
 800b466:	4013      	ands	r3, r2
 800b468:	930e      	str	r3, [sp, #56]	; 0x38
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d10e      	bne.n	800b48c <lv_draw_rect+0x1cec>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b46e:	9b07      	ldr	r3, [sp, #28]
 800b470:	9600      	str	r6, [sp, #0]
 800b472:	1959      	adds	r1, r3, r5
 800b474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b476:	1909      	adds	r1, r1, r4
 800b478:	1e58      	subs	r0, r3, #1
 800b47a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b47c:	b209      	sxth	r1, r1
 800b47e:	18c0      	adds	r0, r0, r3
 800b480:	9b04      	ldr	r3, [sp, #16]
 800b482:	b200      	sxth	r0, r0
 800b484:	895b      	ldrh	r3, [r3, #10]
 800b486:	9a03      	ldr	r2, [sp, #12]
 800b488:	f7fd f96d 	bl	8008766 <lv_draw_px>
 800b48c:	2205      	movs	r2, #5
 800b48e:	9b05      	ldr	r3, [sp, #20]
 800b490:	4013      	ands	r3, r2
 800b492:	930f      	str	r3, [sp, #60]	; 0x3c
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b494:	4293      	cmp	r3, r2
 800b496:	d10e      	bne.n	800b4b6 <lv_draw_rect+0x1d16>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 800b498:	9b07      	ldr	r3, [sp, #28]
 800b49a:	9600      	str	r6, [sp, #0]
 800b49c:	1e59      	subs	r1, r3, #1
 800b49e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4a0:	9a03      	ldr	r2, [sp, #12]
 800b4a2:	18c9      	adds	r1, r1, r3
 800b4a4:	9b08      	ldr	r3, [sp, #32]
 800b4a6:	b209      	sxth	r1, r1
 800b4a8:	1b58      	subs	r0, r3, r5
 800b4aa:	9b04      	ldr	r3, [sp, #16]
 800b4ac:	1b00      	subs	r0, r0, r4
 800b4ae:	b200      	sxth	r0, r0
 800b4b0:	895b      	ldrh	r3, [r3, #10]
 800b4b2:	f7fd f958 	bl	8008766 <lv_draw_px>
 800b4b6:	2306      	movs	r3, #6
 800b4b8:	9a05      	ldr	r2, [sp, #20]
 800b4ba:	401a      	ands	r2, r3
 800b4bc:	9210      	str	r2, [sp, #64]	; 0x40
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b4be:	2a06      	cmp	r2, #6
 800b4c0:	d10e      	bne.n	800b4e0 <lv_draw_rect+0x1d40>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800b4c2:	9b06      	ldr	r3, [sp, #24]
 800b4c4:	9600      	str	r6, [sp, #0]
 800b4c6:	1b59      	subs	r1, r3, r5
 800b4c8:	9b08      	ldr	r3, [sp, #32]
 800b4ca:	1b09      	subs	r1, r1, r4
 800b4cc:	1c58      	adds	r0, r3, #1
 800b4ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4d0:	b209      	sxth	r1, r1
 800b4d2:	1ac0      	subs	r0, r0, r3
 800b4d4:	9b04      	ldr	r3, [sp, #16]
 800b4d6:	b200      	sxth	r0, r0
 800b4d8:	895b      	ldrh	r3, [r3, #10]
 800b4da:	9a03      	ldr	r2, [sp, #12]
 800b4dc:	f7fd f943 	bl	8008766 <lv_draw_px>
 800b4e0:	270a      	movs	r7, #10
 800b4e2:	9b05      	ldr	r3, [sp, #20]
 800b4e4:	401f      	ands	r7, r3
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b4e6:	2f0a      	cmp	r7, #10
 800b4e8:	d10e      	bne.n	800b508 <lv_draw_rect+0x1d68>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 800b4ea:	9b06      	ldr	r3, [sp, #24]
 800b4ec:	9600      	str	r6, [sp, #0]
 800b4ee:	1c59      	adds	r1, r3, #1
 800b4f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4f2:	9a03      	ldr	r2, [sp, #12]
 800b4f4:	1ac9      	subs	r1, r1, r3
 800b4f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4f8:	b209      	sxth	r1, r1
 800b4fa:	1958      	adds	r0, r3, r5
 800b4fc:	9b04      	ldr	r3, [sp, #16]
 800b4fe:	1900      	adds	r0, r0, r4
 800b500:	b200      	sxth	r0, r0
 800b502:	895b      	ldrh	r3, [r3, #10]
 800b504:	f7fd f92f 	bl	8008766 <lv_draw_px>
            if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 800b508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b50a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b50c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b50e:	3b01      	subs	r3, #1
 800b510:	1852      	adds	r2, r2, r1
 800b512:	4293      	cmp	r3, r2
 800b514:	d046      	beq.n	800b5a4 <lv_draw_rect+0x1e04>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b516:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b518:	2b09      	cmp	r3, #9
 800b51a:	d10e      	bne.n	800b53a <lv_draw_rect+0x1d9a>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1, mask,
 800b51c:	9b07      	ldr	r3, [sp, #28]
 800b51e:	9600      	str	r6, [sp, #0]
 800b520:	1e59      	subs	r1, r3, #1
 800b522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b524:	9a03      	ldr	r2, [sp, #12]
 800b526:	18c9      	adds	r1, r1, r3
 800b528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b52a:	b209      	sxth	r1, r1
 800b52c:	1958      	adds	r0, r3, r5
 800b52e:	9b04      	ldr	r3, [sp, #16]
 800b530:	1900      	adds	r0, r0, r4
 800b532:	b200      	sxth	r0, r0
 800b534:	895b      	ldrh	r3, [r3, #10]
 800b536:	f7fd f916 	bl	8008766 <lv_draw_px>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b53a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b53c:	2b05      	cmp	r3, #5
 800b53e:	d10e      	bne.n	800b55e <lv_draw_rect+0x1dbe>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800b540:	9b07      	ldr	r3, [sp, #28]
 800b542:	9600      	str	r6, [sp, #0]
 800b544:	1959      	adds	r1, r3, r5
 800b546:	9b08      	ldr	r3, [sp, #32]
 800b548:	1909      	adds	r1, r1, r4
 800b54a:	1c58      	adds	r0, r3, #1
 800b54c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b54e:	b209      	sxth	r1, r1
 800b550:	1ac0      	subs	r0, r0, r3
 800b552:	9b04      	ldr	r3, [sp, #16]
 800b554:	b200      	sxth	r0, r0
 800b556:	895b      	ldrh	r3, [r3, #10]
 800b558:	9a03      	ldr	r2, [sp, #12]
 800b55a:	f7fd f904 	bl	8008766 <lv_draw_px>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b55e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b560:	2b06      	cmp	r3, #6
 800b562:	d10e      	bne.n	800b582 <lv_draw_rect+0x1de2>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1, mask,
 800b564:	9b06      	ldr	r3, [sp, #24]
 800b566:	9600      	str	r6, [sp, #0]
 800b568:	1c59      	adds	r1, r3, #1
 800b56a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b56c:	9a03      	ldr	r2, [sp, #12]
 800b56e:	1ac9      	subs	r1, r1, r3
 800b570:	9b08      	ldr	r3, [sp, #32]
 800b572:	b209      	sxth	r1, r1
 800b574:	1b58      	subs	r0, r3, r5
 800b576:	9b04      	ldr	r3, [sp, #16]
 800b578:	1b00      	subs	r0, r0, r4
 800b57a:	b200      	sxth	r0, r0
 800b57c:	895b      	ldrh	r3, [r3, #10]
 800b57e:	f7fd f8f2 	bl	8008766 <lv_draw_px>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b582:	2f0a      	cmp	r7, #10
 800b584:	d10e      	bne.n	800b5a4 <lv_draw_rect+0x1e04>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800b586:	9b06      	ldr	r3, [sp, #24]
 800b588:	9600      	str	r6, [sp, #0]
 800b58a:	1b59      	subs	r1, r3, r5
 800b58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b58e:	1b09      	subs	r1, r1, r4
 800b590:	1e58      	subs	r0, r3, #1
 800b592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b594:	b209      	sxth	r1, r1
 800b596:	18c0      	adds	r0, r0, r3
 800b598:	9b04      	ldr	r3, [sp, #16]
 800b59a:	b200      	sxth	r0, r0
 800b59c:	895b      	ldrh	r3, [r3, #10]
 800b59e:	9a03      	ldr	r2, [sp, #12]
 800b5a0:	f7fd f8e1 	bl	8008766 <lv_draw_px>
 800b5a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5a6:	3401      	adds	r4, #1
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	b224      	sxth	r4, r4
 800b5ac:	930c      	str	r3, [sp, #48]	; 0x30
 800b5ae:	f7fe ff73 	bl	800a498 <lv_draw_rect+0xcf8>
                act_color = mcolor;
 800b5b2:	466b      	mov	r3, sp
            if(mcolor.full == gcolor.full)
 800b5b4:	9806      	ldr	r0, [sp, #24]
                act_color = mcolor;
 800b5b6:	8a9a      	ldrh	r2, [r3, #20]
            if(mcolor.full == gcolor.full)
 800b5b8:	9b05      	ldr	r3, [sp, #20]
 800b5ba:	4283      	cmp	r3, r0
 800b5bc:	d00e      	beq.n	800b5dc <lv_draw_rect+0x1e3c>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800b5be:	2306      	movs	r3, #6
 800b5c0:	5ef8      	ldrsh	r0, [r7, r3]
 800b5c2:	23ff      	movs	r3, #255	; 0xff
 800b5c4:	1a40      	subs	r0, r0, r1
 800b5c6:	4358      	muls	r0, r3
 800b5c8:	9908      	ldr	r1, [sp, #32]
 800b5ca:	f7f4 fdc9 	bl	8000160 <__udivsi3>
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800b5ce:	466b      	mov	r3, sp
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800b5d0:	b2c2      	uxtb	r2, r0
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800b5d2:	8b19      	ldrh	r1, [r3, #24]
 800b5d4:	8a98      	ldrh	r0, [r3, #20]
 800b5d6:	f7fe f87b 	bl	80096d0 <lv_color_mix>
 800b5da:	1c02      	adds	r2, r0, #0
            lv_draw_fill(&edge_top_area, mask, act_color, opa);
 800b5dc:	9b07      	ldr	r3, [sp, #28]
 800b5de:	9903      	ldr	r1, [sp, #12]
 800b5e0:	a822      	add	r0, sp, #136	; 0x88
 800b5e2:	f7fd f909 	bl	80087f8 <lv_draw_fill>
 800b5e6:	f7ff f87f 	bl	800a6e8 <lv_draw_rect+0xf48>
	...

0800b5ec <lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param style style of the image
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * lv_img_cache_open(const void * src, const lv_style_t * style)
{
 800b5ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(entry_cnt == 0) {
 800b5ee:	4b36      	ldr	r3, [pc, #216]	; (800b6c8 <lv_img_cache_open+0xdc>)
{
 800b5f0:	0006      	movs	r6, r0
    if(entry_cnt == 0) {
 800b5f2:	881b      	ldrh	r3, [r3, #0]
{
 800b5f4:	9101      	str	r1, [sp, #4]
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
 800b5f6:	1e1c      	subs	r4, r3, #0
    if(entry_cnt == 0) {
 800b5f8:	d01d      	beq.n	800b636 <lv_img_cache_open+0x4a>
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800b5fa:	4a34      	ldr	r2, [pc, #208]	; (800b6cc <lv_img_cache_open+0xe0>)

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 800b5fc:	4d34      	ldr	r5, [pc, #208]	; (800b6d0 <lv_img_cache_open+0xe4>)
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800b5fe:	6811      	ldr	r1, [r2, #0]
 800b600:	2228      	movs	r2, #40	; 0x28
 800b602:	0008      	movs	r0, r1
 800b604:	435a      	muls	r2, r3
 800b606:	3224      	adds	r2, #36	; 0x24
 800b608:	3024      	adds	r0, #36	; 0x24
 800b60a:	188a      	adds	r2, r1, r2
    for(i = 0; i < entry_cnt; i++) {
 800b60c:	4282      	cmp	r2, r0
 800b60e:	d114      	bne.n	800b63a <lv_img_cache_open+0x4e>
 800b610:	2028      	movs	r0, #40	; 0x28
 800b612:	000a      	movs	r2, r1
 800b614:	3b01      	subs	r3, #1
 800b616:	b29b      	uxth	r3, r3
 800b618:	3301      	adds	r3, #1
 800b61a:	4343      	muls	r3, r0
 800b61c:	18cb      	adds	r3, r1, r3
    }

    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;
    for(i = 0; i < entry_cnt; i++) {
        if(cache[i].dec_dsc.src == src) {
 800b61e:	6850      	ldr	r0, [r2, #4]
 800b620:	0014      	movs	r4, r2
 800b622:	42b0      	cmp	r0, r6
 800b624:	d112      	bne.n	800b64c <lv_img_cache_open+0x60>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
 800b626:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800b628:	6992      	ldr	r2, [r2, #24]
 800b62a:	189b      	adds	r3, r3, r2
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
 800b62c:	22fa      	movs	r2, #250	; 0xfa
 800b62e:	0092      	lsls	r2, r2, #2
 800b630:	4293      	cmp	r3, r2
 800b632:	dc09      	bgt.n	800b648 <lv_img_cache_open+0x5c>
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
 800b634:	6263      	str	r3, [r4, #36]	; 0x24

        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
    }

    return cached_src;
}
 800b636:	0020      	movs	r0, r4
 800b638:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 800b63a:	6804      	ldr	r4, [r0, #0]
 800b63c:	42ac      	cmp	r4, r5
 800b63e:	db01      	blt.n	800b644 <lv_img_cache_open+0x58>
            cache[i].life -= LV_IMG_CACHE_AGING;
 800b640:	3c01      	subs	r4, #1
 800b642:	6004      	str	r4, [r0, #0]
 800b644:	3028      	adds	r0, #40	; 0x28
 800b646:	e7e1      	b.n	800b60c <lv_img_cache_open+0x20>
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
 800b648:	6262      	str	r2, [r4, #36]	; 0x24
 800b64a:	e7f4      	b.n	800b636 <lv_img_cache_open+0x4a>
 800b64c:	3228      	adds	r2, #40	; 0x28
    for(i = 0; i < entry_cnt; i++) {
 800b64e:	429a      	cmp	r2, r3
 800b650:	d1e5      	bne.n	800b61e <lv_img_cache_open+0x32>
 800b652:	000b      	movs	r3, r1
 800b654:	000c      	movs	r4, r1
 800b656:	3328      	adds	r3, #40	; 0x28
        for(i = 1; i < entry_cnt; i++) {
 800b658:	429a      	cmp	r2, r3
 800b65a:	d11f      	bne.n	800b69c <lv_img_cache_open+0xb0>
        if(cached_src->dec_dsc.src) {
 800b65c:	6863      	ldr	r3, [r4, #4]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d002      	beq.n	800b668 <lv_img_cache_open+0x7c>
            lv_img_decoder_close(&cached_src->dec_dsc);
 800b662:	0020      	movs	r0, r4
 800b664:	f000 fb91 	bl	800bd8a <lv_img_decoder_close>
        t_start                          = lv_tick_get();
 800b668:	f000 fdde 	bl	800c228 <lv_tick_get>
        cached_src->dec_dsc.time_to_open = 0;
 800b66c:	2500      	movs	r5, #0
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, style);
 800b66e:	0031      	movs	r1, r6
        t_start                          = lv_tick_get();
 800b670:	0007      	movs	r7, r0
        cached_src->dec_dsc.time_to_open = 0;
 800b672:	61a5      	str	r5, [r4, #24]
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, style);
 800b674:	9a01      	ldr	r2, [sp, #4]
 800b676:	0020      	movs	r0, r4
 800b678:	f000 fb3e 	bl	800bcf8 <lv_img_decoder_open>
 800b67c:	0006      	movs	r6, r0
        if(open_res == LV_RES_INV) {
 800b67e:	42a8      	cmp	r0, r5
 800b680:	d113      	bne.n	800b6aa <lv_img_cache_open+0xbe>
            lv_img_decoder_close(&cached_src->dec_dsc);
 800b682:	0020      	movs	r0, r4
 800b684:	f000 fb81 	bl	800bd8a <lv_img_decoder_close>
            memset(cached_src, 0, sizeof(lv_img_cache_entry_t));
 800b688:	0020      	movs	r0, r4
 800b68a:	2228      	movs	r2, #40	; 0x28
 800b68c:	0031      	movs	r1, r6
 800b68e:	f002 fa72 	bl	800db76 <memset>
            cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
 800b692:	2380      	movs	r3, #128	; 0x80
 800b694:	061b      	lsls	r3, r3, #24
 800b696:	6263      	str	r3, [r4, #36]	; 0x24
            return NULL;
 800b698:	0034      	movs	r4, r6
 800b69a:	e7cc      	b.n	800b636 <lv_img_cache_open+0x4a>
            if(cache[i].life < cached_src->life) {
 800b69c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b69e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b6a0:	4281      	cmp	r1, r0
 800b6a2:	da00      	bge.n	800b6a6 <lv_img_cache_open+0xba>
 800b6a4:	001c      	movs	r4, r3
 800b6a6:	3328      	adds	r3, #40	; 0x28
 800b6a8:	e7d6      	b.n	800b658 <lv_img_cache_open+0x6c>
        if(cached_src->dec_dsc.time_to_open == 0) {
 800b6aa:	69a3      	ldr	r3, [r4, #24]
        cached_src->life = 0;
 800b6ac:	6265      	str	r5, [r4, #36]	; 0x24
        if(cached_src->dec_dsc.time_to_open == 0) {
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d103      	bne.n	800b6ba <lv_img_cache_open+0xce>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 800b6b2:	0038      	movs	r0, r7
 800b6b4:	f000 fdc6 	bl	800c244 <lv_tick_elaps>
 800b6b8:	61a0      	str	r0, [r4, #24]
        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 800b6ba:	69a3      	ldr	r3, [r4, #24]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d1ba      	bne.n	800b636 <lv_img_cache_open+0x4a>
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	61a3      	str	r3, [r4, #24]
 800b6c4:	e7b7      	b.n	800b636 <lv_img_cache_open+0x4a>
 800b6c6:	46c0      	nop			; (mov r8, r8)
 800b6c8:	20001540 	.word	0x20001540
 800b6cc:	200053b8 	.word	0x200053b8
 800b6d0:	80000002 	.word	0x80000002

0800b6d4 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 800b6d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6d6:	0006      	movs	r6, r0

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 800b6d8:	2400      	movs	r4, #0
        if(cache[i].dec_dsc.src == src || src == NULL) {
 800b6da:	2728      	movs	r7, #40	; 0x28
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800b6dc:	4b0e      	ldr	r3, [pc, #56]	; (800b718 <lv_img_cache_invalidate_src+0x44>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	9301      	str	r3, [sp, #4]
    for(i = 0; i < entry_cnt; i++) {
 800b6e2:	4b0e      	ldr	r3, [pc, #56]	; (800b71c <lv_img_cache_invalidate_src+0x48>)
 800b6e4:	881b      	ldrh	r3, [r3, #0]
 800b6e6:	42a3      	cmp	r3, r4
 800b6e8:	d800      	bhi.n	800b6ec <lv_img_cache_invalidate_src+0x18>

            memset(&cache[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
        }
    }
}
 800b6ea:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        if(cache[i].dec_dsc.src == src || src == NULL) {
 800b6ec:	003d      	movs	r5, r7
 800b6ee:	4365      	muls	r5, r4
 800b6f0:	9b01      	ldr	r3, [sp, #4]
 800b6f2:	195d      	adds	r5, r3, r5
 800b6f4:	686b      	ldr	r3, [r5, #4]
 800b6f6:	42b3      	cmp	r3, r6
 800b6f8:	d001      	beq.n	800b6fe <lv_img_cache_invalidate_src+0x2a>
 800b6fa:	2e00      	cmp	r6, #0
 800b6fc:	d109      	bne.n	800b712 <lv_img_cache_invalidate_src+0x3e>
            if(cache[i].dec_dsc.src != NULL) {
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d002      	beq.n	800b708 <lv_img_cache_invalidate_src+0x34>
                lv_img_decoder_close(&cache[i].dec_dsc);
 800b702:	0028      	movs	r0, r5
 800b704:	f000 fb41 	bl	800bd8a <lv_img_decoder_close>
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
 800b708:	003a      	movs	r2, r7
 800b70a:	2100      	movs	r1, #0
 800b70c:	0028      	movs	r0, r5
 800b70e:	f002 fa32 	bl	800db76 <memset>
    for(i = 0; i < entry_cnt; i++) {
 800b712:	3401      	adds	r4, #1
 800b714:	b2a4      	uxth	r4, r4
 800b716:	e7e4      	b.n	800b6e2 <lv_img_cache_invalidate_src+0xe>
 800b718:	200053b8 	.word	0x200053b8
 800b71c:	20001540 	.word	0x20001540

0800b720 <lv_img_cache_set_size>:
{
 800b720:	b570      	push	{r4, r5, r6, lr}
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 800b722:	4d14      	ldr	r5, [pc, #80]	; (800b774 <lv_img_cache_set_size+0x54>)
{
 800b724:	0004      	movs	r4, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 800b726:	682b      	ldr	r3, [r5, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d005      	beq.n	800b738 <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
 800b72c:	2000      	movs	r0, #0
 800b72e:	f7ff ffd1 	bl	800b6d4 <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 800b732:	6828      	ldr	r0, [r5, #0]
 800b734:	f001 f9e2 	bl	800cafc <lv_mem_free>
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 800b738:	2628      	movs	r6, #40	; 0x28
 800b73a:	4366      	muls	r6, r4
 800b73c:	0030      	movs	r0, r6
 800b73e:	f001 f9a9 	bl	800ca94 <lv_mem_alloc>
 800b742:	6028      	str	r0, [r5, #0]
    lv_mem_assert(LV_GC_ROOT(_lv_img_cache_array));
 800b744:	2800      	cmp	r0, #0
 800b746:	d100      	bne.n	800b74a <lv_img_cache_set_size+0x2a>
 800b748:	e7fe      	b.n	800b748 <lv_img_cache_set_size+0x28>
    entry_cnt = new_entry_cnt;
 800b74a:	4b0b      	ldr	r3, [pc, #44]	; (800b778 <lv_img_cache_set_size+0x58>)
 800b74c:	801c      	strh	r4, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
 800b74e:	2400      	movs	r4, #0
 800b750:	42a6      	cmp	r6, r4
 800b752:	d100      	bne.n	800b756 <lv_img_cache_set_size+0x36>
}
 800b754:	bd70      	pop	{r4, r5, r6, pc}
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 800b756:	682b      	ldr	r3, [r5, #0]
 800b758:	2224      	movs	r2, #36	; 0x24
 800b75a:	1918      	adds	r0, r3, r4
 800b75c:	2100      	movs	r1, #0
 800b75e:	f002 fa0a 	bl	800db76 <memset>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i], 0, sizeof(lv_img_cache_entry_t));
 800b762:	682b      	ldr	r3, [r5, #0]
 800b764:	2228      	movs	r2, #40	; 0x28
 800b766:	1918      	adds	r0, r3, r4
 800b768:	2100      	movs	r1, #0
 800b76a:	f002 fa04 	bl	800db76 <memset>
 800b76e:	3428      	adds	r4, #40	; 0x28
 800b770:	e7ee      	b.n	800b750 <lv_img_cache_set_size+0x30>
 800b772:	46c0      	nop			; (mov r8, r8)
 800b774:	200053b8 	.word	0x200053b8
 800b778:	20001540 	.word	0x20001540

0800b77c <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 800b77c:	b570      	push	{r4, r5, r6, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b77e:	6a0c      	ldr	r4, [r1, #32]
{
 800b780:	000d      	movs	r5, r1
    if(user_data) {
 800b782:	2c00      	cmp	r4, #0
 800b784:	d011      	beq.n	800b7aa <lv_img_decoder_built_in_close+0x2e>
#if LV_USE_FILESYSTEM
        if(user_data->f) {
 800b786:	6820      	ldr	r0, [r4, #0]
 800b788:	2800      	cmp	r0, #0
 800b78a:	d004      	beq.n	800b796 <lv_img_decoder_built_in_close+0x1a>
            lv_fs_close(user_data->f);
 800b78c:	f000 fef2 	bl	800c574 <lv_fs_close>
            lv_mem_free(user_data->f);
 800b790:	6820      	ldr	r0, [r4, #0]
 800b792:	f001 f9b3 	bl	800cafc <lv_mem_free>
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
 800b796:	6860      	ldr	r0, [r4, #4]
 800b798:	2800      	cmp	r0, #0
 800b79a:	d001      	beq.n	800b7a0 <lv_img_decoder_built_in_close+0x24>
 800b79c:	f001 f9ae 	bl	800cafc <lv_mem_free>

        lv_mem_free(user_data);
 800b7a0:	0020      	movs	r0, r4
 800b7a2:	f001 f9ab 	bl	800cafc <lv_mem_free>

        dsc->user_data = NULL;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	622b      	str	r3, [r5, #32]
    }
}
 800b7aa:	bd70      	pop	{r4, r5, r6, pc}

0800b7ac <lv_img_decoder_built_in_open>:
{
 800b7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800b7ae:	7b0b      	ldrb	r3, [r1, #12]
{
 800b7b0:	b085      	sub	sp, #20
 800b7b2:	0005      	movs	r5, r0
 800b7b4:	000c      	movs	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d12a      	bne.n	800b810 <lv_img_decoder_built_in_open+0x64>
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 800b7ba:	6848      	ldr	r0, [r1, #4]
 800b7bc:	f000 ff8a 	bl	800c6d4 <lv_fs_get_ext>
 800b7c0:	494b      	ldr	r1, [pc, #300]	; (800b8f0 <lv_img_decoder_built_in_open+0x144>)
 800b7c2:	f7f4 fc9d 	bl	8000100 <strcmp>
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	d000      	beq.n	800b7cc <lv_img_decoder_built_in_open+0x20>
 800b7ca:	e08e      	b.n	800b8ea <lv_img_decoder_built_in_open+0x13e>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 800b7cc:	2202      	movs	r2, #2
 800b7ce:	6861      	ldr	r1, [r4, #4]
 800b7d0:	a802      	add	r0, sp, #8
 800b7d2:	f000 ff3d 	bl	800c650 <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 800b7d6:	2800      	cmp	r0, #0
 800b7d8:	d000      	beq.n	800b7dc <lv_img_decoder_built_in_open+0x30>
 800b7da:	e086      	b.n	800b8ea <lv_img_decoder_built_in_open+0x13e>
        if(dsc->user_data == NULL) {
 800b7dc:	6a26      	ldr	r6, [r4, #32]
 800b7de:	2e00      	cmp	r6, #0
 800b7e0:	d10a      	bne.n	800b7f8 <lv_img_decoder_built_in_open+0x4c>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800b7e2:	3008      	adds	r0, #8
 800b7e4:	f001 f956 	bl	800ca94 <lv_mem_alloc>
 800b7e8:	6220      	str	r0, [r4, #32]
            if(dsc->user_data == NULL) {
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	d100      	bne.n	800b7f0 <lv_img_decoder_built_in_open+0x44>
 800b7ee:	e7fe      	b.n	800b7ee <lv_img_decoder_built_in_open+0x42>
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 800b7f0:	2208      	movs	r2, #8
 800b7f2:	0031      	movs	r1, r6
 800b7f4:	f002 f9bf 	bl	800db76 <memset>
        user_data->f                               = lv_mem_alloc(sizeof(f));
 800b7f8:	2008      	movs	r0, #8
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b7fa:	6a26      	ldr	r6, [r4, #32]
        user_data->f                               = lv_mem_alloc(sizeof(f));
 800b7fc:	f001 f94a 	bl	800ca94 <lv_mem_alloc>
 800b800:	6030      	str	r0, [r6, #0]
        if(user_data->f == NULL) {
 800b802:	2800      	cmp	r0, #0
 800b804:	d100      	bne.n	800b808 <lv_img_decoder_built_in_open+0x5c>
 800b806:	e7fe      	b.n	800b806 <lv_img_decoder_built_in_open+0x5a>
        memcpy(user_data->f, &f, sizeof(f));
 800b808:	2208      	movs	r2, #8
 800b80a:	a902      	add	r1, sp, #8
 800b80c:	f002 f9aa 	bl	800db64 <memcpy>
    lv_img_cf_t cf = dsc->header.cf;
 800b810:	7c20      	ldrb	r0, [r4, #16]
 800b812:	06c0      	lsls	r0, r0, #27
 800b814:	0ec0      	lsrs	r0, r0, #27
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800b816:	1f03      	subs	r3, r0, #4
 800b818:	2b02      	cmp	r3, #2
 800b81a:	d808      	bhi.n	800b82e <lv_img_decoder_built_in_open+0x82>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800b81c:	7b23      	ldrb	r3, [r4, #12]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d132      	bne.n	800b888 <lv_img_decoder_built_in_open+0xdc>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 800b822:	6863      	ldr	r3, [r4, #4]
 800b824:	689b      	ldr	r3, [r3, #8]
            return LV_RES_OK;
 800b826:	2001      	movs	r0, #1
            dsc->img_data = NULL;
 800b828:	6163      	str	r3, [r4, #20]
}
 800b82a:	b005      	add	sp, #20
 800b82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 800b82e:	1fc3      	subs	r3, r0, #7
 800b830:	2b03      	cmp	r3, #3
 800b832:	d853      	bhi.n	800b8dc <lv_img_decoder_built_in_open+0x130>
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 800b834:	f7fd fbf4 	bl	8009020 <lv_img_color_format_get_px_size>
        if(dsc->user_data == NULL) {
 800b838:	6a26      	ldr	r6, [r4, #32]
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 800b83a:	0005      	movs	r5, r0
        if(dsc->user_data == NULL) {
 800b83c:	2e00      	cmp	r6, #0
 800b83e:	d10a      	bne.n	800b856 <lv_img_decoder_built_in_open+0xaa>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800b840:	2008      	movs	r0, #8
 800b842:	f001 f927 	bl	800ca94 <lv_mem_alloc>
 800b846:	6220      	str	r0, [r4, #32]
            if(dsc->user_data == NULL) {
 800b848:	2800      	cmp	r0, #0
 800b84a:	d100      	bne.n	800b84e <lv_img_decoder_built_in_open+0xa2>
 800b84c:	e7fe      	b.n	800b84c <lv_img_decoder_built_in_open+0xa0>
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 800b84e:	2208      	movs	r2, #8
 800b850:	0031      	movs	r1, r6
 800b852:	f002 f990 	bl	800db76 <memset>
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800b856:	2702      	movs	r7, #2
 800b858:	40af      	lsls	r7, r5
 800b85a:	0038      	movs	r0, r7
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b85c:	6a26      	ldr	r6, [r4, #32]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800b85e:	f001 f919 	bl	800ca94 <lv_mem_alloc>
 800b862:	6070      	str	r0, [r6, #4]
        if(user_data->palette == NULL) {
 800b864:	2800      	cmp	r0, #0
 800b866:	d103      	bne.n	800b870 <lv_img_decoder_built_in_open+0xc4>
            lv_mem_assert(user_data->f);
 800b868:	6833      	ldr	r3, [r6, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d100      	bne.n	800b870 <lv_img_decoder_built_in_open+0xc4>
 800b86e:	e7fe      	b.n	800b86e <lv_img_decoder_built_in_open+0xc2>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800b870:	7b23      	ldrb	r3, [r4, #12]
 800b872:	2b01      	cmp	r3, #1
 800b874:	d10a      	bne.n	800b88c <lv_img_decoder_built_in_open+0xe0>
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
 800b876:	2104      	movs	r1, #4
 800b878:	6830      	ldr	r0, [r6, #0]
 800b87a:	f000 feae 	bl	800c5da <lv_fs_seek>
            lv_fs_read(user_data->f, user_data->palette, palette_size * sizeof(lv_color_t), NULL);
 800b87e:	ce03      	ldmia	r6!, {r0, r1}
 800b880:	2300      	movs	r3, #0
 800b882:	003a      	movs	r2, r7
 800b884:	f000 fe8b 	bl	800c59e <lv_fs_read>
            dsc->img_data = NULL;
 800b888:	2300      	movs	r3, #0
 800b88a:	e7cc      	b.n	800b826 <lv_img_decoder_built_in_open+0x7a>
 800b88c:	2204      	movs	r2, #4
 800b88e:	40aa      	lsls	r2, r5
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 800b890:	6863      	ldr	r3, [r4, #4]
    color.ch.red   = (uint16_t)(r8 >> 3);
 800b892:	271f      	movs	r7, #31
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	189a      	adds	r2, r3, r2
 800b898:	9201      	str	r2, [sp, #4]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800b89a:	2207      	movs	r2, #7
 800b89c:	4694      	mov	ip, r2
            for(i = 0; i < palette_size; i++) {
 800b89e:	9a01      	ldr	r2, [sp, #4]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d0f1      	beq.n	800b888 <lv_img_decoder_built_in_open+0xdc>
    color.ch.blue  = (uint16_t)(b8 >> 3);
 800b8a4:	781e      	ldrb	r6, [r3, #0]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800b8a6:	7805      	ldrb	r5, [r0, #0]
 800b8a8:	08f6      	lsrs	r6, r6, #3
 800b8aa:	43bd      	bics	r5, r7
 800b8ac:	4335      	orrs	r5, r6
    color.ch.green = (uint16_t)(g8 >> 2);
 800b8ae:	7859      	ldrb	r1, [r3, #1]
    color.ch.red   = (uint16_t)(r8 >> 3);
 800b8b0:	789a      	ldrb	r2, [r3, #2]
 800b8b2:	7005      	strb	r5, [r0, #0]
 800b8b4:	253f      	movs	r5, #63	; 0x3f
    color.ch.green = (uint16_t)(g8 >> 2);
 800b8b6:	0889      	lsrs	r1, r1, #2
 800b8b8:	4029      	ands	r1, r5
 800b8ba:	4e0e      	ldr	r6, [pc, #56]	; (800b8f4 <lv_img_decoder_built_in_open+0x148>)
 800b8bc:	8805      	ldrh	r5, [r0, #0]
 800b8be:	0149      	lsls	r1, r1, #5
 800b8c0:	4035      	ands	r5, r6
 800b8c2:	4329      	orrs	r1, r5
 800b8c4:	4665      	mov	r5, ip
    color.ch.red   = (uint16_t)(r8 >> 3);
 800b8c6:	08d2      	lsrs	r2, r2, #3
 800b8c8:	8001      	strh	r1, [r0, #0]
 800b8ca:	403a      	ands	r2, r7
 800b8cc:	0a09      	lsrs	r1, r1, #8
 800b8ce:	00d2      	lsls	r2, r2, #3
 800b8d0:	4029      	ands	r1, r5
 800b8d2:	430a      	orrs	r2, r1
 800b8d4:	7042      	strb	r2, [r0, #1]
 800b8d6:	3304      	adds	r3, #4
 800b8d8:	3002      	adds	r0, #2
 800b8da:	e7e0      	b.n	800b89e <lv_img_decoder_built_in_open+0xf2>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 800b8dc:	380b      	subs	r0, #11
 800b8de:	2803      	cmp	r0, #3
 800b8e0:	d9d2      	bls.n	800b888 <lv_img_decoder_built_in_open+0xdc>
        lv_img_decoder_built_in_close(decoder, dsc);
 800b8e2:	0021      	movs	r1, r4
 800b8e4:	0028      	movs	r0, r5
 800b8e6:	f7ff ff49 	bl	800b77c <lv_img_decoder_built_in_close>
        return LV_RES_INV;
 800b8ea:	2000      	movs	r0, #0
 800b8ec:	e79d      	b.n	800b82a <lv_img_decoder_built_in_open+0x7e>
 800b8ee:	46c0      	nop			; (mov r8, r8)
 800b8f0:	0800de5a 	.word	0x0800de5a
 800b8f4:	fffff81f 	.word	0xfffff81f

0800b8f8 <lv_img_decoder_built_in_info>:
{
 800b8f8:	b530      	push	{r4, r5, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800b8fa:	0008      	movs	r0, r1
{
 800b8fc:	b085      	sub	sp, #20
 800b8fe:	000d      	movs	r5, r1
 800b900:	0014      	movs	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800b902:	f7fd fc85 	bl	8009210 <lv_img_src_get_type>
 800b906:	1e03      	subs	r3, r0, #0
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800b908:	d11d      	bne.n	800b946 <lv_img_decoder_built_in_info+0x4e>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 800b90a:	782a      	ldrb	r2, [r5, #0]
 800b90c:	06d2      	lsls	r2, r2, #27
 800b90e:	0ed2      	lsrs	r2, r2, #27
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800b910:	1f11      	subs	r1, r2, #4
 800b912:	290a      	cmp	r1, #10
 800b914:	d815      	bhi.n	800b942 <lv_img_decoder_built_in_info+0x4a>
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 800b916:	6820      	ldr	r0, [r4, #0]
 800b918:	4923      	ldr	r1, [pc, #140]	; (800b9a8 <lv_img_decoder_built_in_info+0xb0>)
 800b91a:	682b      	ldr	r3, [r5, #0]
 800b91c:	4001      	ands	r1, r0
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800b91e:	201f      	movs	r0, #31
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 800b920:	02db      	lsls	r3, r3, #11
 800b922:	0d5b      	lsrs	r3, r3, #21
 800b924:	029b      	lsls	r3, r3, #10
 800b926:	430b      	orrs	r3, r1
 800b928:	6023      	str	r3, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800b92a:	886b      	ldrh	r3, [r5, #2]
 800b92c:	095b      	lsrs	r3, r3, #5
 800b92e:	0159      	lsls	r1, r3, #5
 800b930:	8863      	ldrh	r3, [r4, #2]
 800b932:	4003      	ands	r3, r0
 800b934:	430b      	orrs	r3, r1
 800b936:	8063      	strh	r3, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800b938:	7823      	ldrb	r3, [r4, #0]
 800b93a:	4383      	bics	r3, r0
 800b93c:	431a      	orrs	r2, r3
 800b93e:	7022      	strb	r2, [r4, #0]
    return LV_RES_OK;
 800b940:	381e      	subs	r0, #30
}
 800b942:	b005      	add	sp, #20
 800b944:	bd30      	pop	{r4, r5, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 800b946:	2801      	cmp	r0, #1
 800b948:	d11a      	bne.n	800b980 <lv_img_decoder_built_in_info+0x88>
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
 800b94a:	2202      	movs	r2, #2
 800b94c:	0029      	movs	r1, r5
 800b94e:	a802      	add	r0, sp, #8
 800b950:	f000 fe7e 	bl	800c650 <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 800b954:	2800      	cmp	r0, #0
 800b956:	d108      	bne.n	800b96a <lv_img_decoder_built_in_info+0x72>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
 800b958:	ab01      	add	r3, sp, #4
 800b95a:	2204      	movs	r2, #4
 800b95c:	0021      	movs	r1, r4
 800b95e:	a802      	add	r0, sp, #8
 800b960:	f000 fe1d 	bl	800c59e <lv_fs_read>
            lv_fs_close(&file);
 800b964:	a802      	add	r0, sp, #8
 800b966:	f000 fe05 	bl	800c574 <lv_fs_close>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800b96a:	221f      	movs	r2, #31
 800b96c:	2000      	movs	r0, #0
 800b96e:	7823      	ldrb	r3, [r4, #0]
 800b970:	06db      	lsls	r3, r3, #27
 800b972:	0edb      	lsrs	r3, r3, #27
 800b974:	331c      	adds	r3, #28
 800b976:	4013      	ands	r3, r2
 800b978:	3a15      	subs	r2, #21
 800b97a:	429a      	cmp	r2, r3
 800b97c:	4140      	adcs	r0, r0
 800b97e:	e7e0      	b.n	800b942 <lv_img_decoder_built_in_info+0x4a>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800b980:	2000      	movs	r0, #0
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 800b982:	2b02      	cmp	r3, #2
 800b984:	d1dd      	bne.n	800b942 <lv_img_decoder_built_in_info+0x4a>
        header->w = 1;
 800b986:	6823      	ldr	r3, [r4, #0]
 800b988:	4a07      	ldr	r2, [pc, #28]	; (800b9a8 <lv_img_decoder_built_in_info+0xb0>)
    return LV_RES_OK;
 800b98a:	3001      	adds	r0, #1
        header->w = 1;
 800b98c:	401a      	ands	r2, r3
 800b98e:	2380      	movs	r3, #128	; 0x80
 800b990:	00db      	lsls	r3, r3, #3
 800b992:	4313      	orrs	r3, r2
        header->h = 1;
 800b994:	2220      	movs	r2, #32
        header->w = 1;
 800b996:	6023      	str	r3, [r4, #0]
        header->h = 1;
 800b998:	8062      	strh	r2, [r4, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800b99a:	32c0      	adds	r2, #192	; 0xc0
 800b99c:	4013      	ands	r3, r2
 800b99e:	3ad5      	subs	r2, #213	; 0xd5
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	7023      	strb	r3, [r4, #0]
 800b9a4:	e7cd      	b.n	800b942 <lv_img_decoder_built_in_info+0x4a>
 800b9a6:	46c0      	nop			; (mov r8, r8)
 800b9a8:	ffe003ff 	.word	0xffe003ff

0800b9ac <lv_img_decoder_built_in_read_line>:
{
 800b9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9ae:	b0b5      	sub	sp, #212	; 0xd4
 800b9b0:	001f      	movs	r7, r3
 800b9b2:	ab3a      	add	r3, sp, #232	; 0xe8
 800b9b4:	0014      	movs	r4, r2
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	5e9b      	ldrsh	r3, [r3, r2]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800b9ba:	7c08      	ldrb	r0, [r1, #16]
{
 800b9bc:	9302      	str	r3, [sp, #8]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800b9be:	231f      	movs	r3, #31
 800b9c0:	4003      	ands	r3, r0
 800b9c2:	1f1a      	subs	r2, r3, #4
{
 800b9c4:	9101      	str	r1, [sp, #4]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800b9c6:	2a02      	cmp	r2, #2
 800b9c8:	d82e      	bhi.n	800ba28 <lv_img_decoder_built_in_read_line+0x7c>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800b9ca:	7b0b      	ldrb	r3, [r1, #12]
    lv_res_t res = LV_RES_INV;
 800b9cc:	2500      	movs	r5, #0
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d127      	bne.n	800ba22 <lv_img_decoder_built_in_read_line+0x76>

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b9d2:	6a0b      	ldr	r3, [r1, #32]
    lv_fs_res_t res;
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800b9d4:	06c0      	lsls	r0, r0, #27
 800b9d6:	0ec0      	lsrs	r0, r0, #27
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b9d8:	9303      	str	r3, [sp, #12]
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800b9da:	f7fd fb21 	bl	8009020 <lv_img_color_format_get_px_size>

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800b9de:	9b01      	ldr	r3, [sp, #4]
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800b9e0:	0006      	movs	r6, r0
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800b9e2:	6919      	ldr	r1, [r3, #16]
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(user_data->f, pos);
 800b9e4:	9b03      	ldr	r3, [sp, #12]
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800b9e6:	02c9      	lsls	r1, r1, #11
 800b9e8:	0d49      	lsrs	r1, r1, #21
 800b9ea:	4379      	muls	r1, r7
 800b9ec:	1909      	adds	r1, r1, r4
 800b9ee:	4341      	muls	r1, r0
 800b9f0:	10c9      	asrs	r1, r1, #3
    pos += 4; /*Skip the header*/
 800b9f2:	3104      	adds	r1, #4
    res = lv_fs_seek(user_data->f, pos);
 800b9f4:	6818      	ldr	r0, [r3, #0]
 800b9f6:	f000 fdf0 	bl	800c5da <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 800b9fa:	42a8      	cmp	r0, r5
 800b9fc:	d111      	bne.n	800ba22 <lv_img_decoder_built_in_read_line+0x76>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
    }
    uint32_t btr = len * (px_size >> 3);
 800b9fe:	9b02      	ldr	r3, [sp, #8]
 800ba00:	08f6      	lsrs	r6, r6, #3
 800ba02:	b2f6      	uxtb	r6, r6
 800ba04:	4373      	muls	r3, r6
 800ba06:	001e      	movs	r6, r3
    uint32_t br  = 0;
    lv_fs_read(user_data->f, buf, btr, &br);
 800ba08:	9803      	ldr	r0, [sp, #12]
 800ba0a:	ab0c      	add	r3, sp, #48	; 0x30
 800ba0c:	0032      	movs	r2, r6
 800ba0e:	993b      	ldr	r1, [sp, #236]	; 0xec
 800ba10:	6800      	ldr	r0, [r0, #0]
    uint32_t br  = 0;
 800ba12:	950c      	str	r5, [sp, #48]	; 0x30
    lv_fs_read(user_data->f, buf, btr, &br);
 800ba14:	f000 fdc3 	bl	800c59e <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 800ba18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba1a:	1b9e      	subs	r6, r3, r6
 800ba1c:	4275      	negs	r5, r6
 800ba1e:	4175      	adcs	r5, r6
        return LV_RES_INV;
 800ba20:	b2ed      	uxtb	r5, r5
}
 800ba22:	0028      	movs	r0, r5
 800ba24:	b035      	add	sp, #212	; 0xd4
 800ba26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 800ba28:	001a      	movs	r2, r3
 800ba2a:	3a0b      	subs	r2, #11
 800ba2c:	2600      	movs	r6, #0
 800ba2e:	2a03      	cmp	r2, #3
 800ba30:	d900      	bls.n	800ba34 <lv_img_decoder_built_in_read_line+0x88>
 800ba32:	e0ac      	b.n	800bb8e <lv_img_decoder_built_in_read_line+0x1e2>
static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800ba34:	22ff      	movs	r2, #255	; 0xff
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800ba36:	2155      	movs	r1, #85	; 0x55
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800ba38:	ab06      	add	r3, sp, #24
 800ba3a:	705a      	strb	r2, [r3, #1]
 800ba3c:	701e      	strb	r6, [r3, #0]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800ba3e:	ab07      	add	r3, sp, #28
 800ba40:	7059      	strb	r1, [r3, #1]
 800ba42:	1849      	adds	r1, r1, r1
 800ba44:	7099      	strb	r1, [r3, #2]
 800ba46:	70da      	strb	r2, [r3, #3]
 800ba48:	701e      	strb	r6, [r3, #0]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800ba4a:	3aef      	subs	r2, #239	; 0xef
 800ba4c:	4997      	ldr	r1, [pc, #604]	; (800bcac <lv_img_decoder_built_in_read_line+0x300>)
 800ba4e:	a808      	add	r0, sp, #32
 800ba50:	f002 f888 	bl	800db64 <memcpy>
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255};

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->style->image.color;
 800ba54:	9b01      	ldr	r3, [sp, #4]
 800ba56:	689b      	ldr	r3, [r3, #8]
 800ba58:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800ba5a:	9303      	str	r3, [sp, #12]
 800ba5c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800ba5e:	0a11      	lsrs	r1, r2, #8
    for(i = 0; i < len; i++) {
 800ba60:	9802      	ldr	r0, [sp, #8]
 800ba62:	42b0      	cmp	r0, r6
 800ba64:	dc18      	bgt.n	800ba98 <lv_img_decoder_built_in_read_line+0xec>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 800ba66:	9b01      	ldr	r3, [sp, #4]
 800ba68:	7c18      	ldrb	r0, [r3, #16]
 800ba6a:	06c0      	lsls	r0, r0, #27
 800ba6c:	0ec0      	lsrs	r0, r0, #27
 800ba6e:	f7fd fad7 	bl	8009020 <lv_img_color_format_get_px_size>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800ba72:	2301      	movs	r3, #1
 800ba74:	4083      	lsls	r3, r0
 800ba76:	3b01      	subs	r3, #1
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	9304      	str	r3, [sp, #16]

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
 800ba7c:	9b01      	ldr	r3, [sp, #4]
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 800ba7e:	9003      	str	r0, [sp, #12]
    switch(dsc->header.cf) {
 800ba80:	7c18      	ldrb	r0, [r3, #16]
 800ba82:	06c0      	lsls	r0, r0, #27
 800ba84:	0ec0      	lsrs	r0, r0, #27
 800ba86:	380b      	subs	r0, #11
 800ba88:	2803      	cmp	r0, #3
 800ba8a:	d854      	bhi.n	800bb36 <lv_img_decoder_built_in_read_line+0x18a>
 800ba8c:	691d      	ldr	r5, [r3, #16]
            ofs += w * y + (x >> 1); /*First pixel*/
            pos       = 4 - ((x & 0x1) * 4);
            opa_table = alpha4_opa_table;
            break;
        case LV_IMG_CF_ALPHA_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800ba8e:	02ed      	lsls	r5, r5, #11
    switch(dsc->header.cf) {
 800ba90:	f7f4 fb48 	bl	8000124 <__gnu_thumb1_case_uqi>
 800ba94:	493a2b08 	.word	0x493a2b08
 800ba98:	3601      	adds	r6, #1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 800ba9a:	701a      	strb	r2, [r3, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800ba9c:	7059      	strb	r1, [r3, #1]
 800ba9e:	b236      	sxth	r6, r6
 800baa0:	3303      	adds	r3, #3
 800baa2:	e7dd      	b.n	800ba60 <lv_img_decoder_built_in_read_line+0xb4>
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800baa4:	0d6b      	lsrs	r3, r5, #21
 800baa6:	10da      	asrs	r2, r3, #3
            if(dsc->header.w & 0x7) w++;
 800baa8:	1c55      	adds	r5, r2, #1
 800baaa:	075b      	lsls	r3, r3, #29
 800baac:	d100      	bne.n	800bab0 <lv_img_decoder_built_in_read_line+0x104>
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800baae:	b215      	sxth	r5, r2
            pos       = 7 - (x & 0x7);
 800bab0:	2607      	movs	r6, #7
            ofs += w * y + (x >> 3); /*First pixel*/
 800bab2:	436f      	muls	r7, r5
 800bab4:	10e1      	asrs	r1, r4, #3
            pos       = 7 - (x & 0x7);
 800bab6:	43a6      	bics	r6, r4
            ofs += w * y + (x >> 3); /*First pixel*/
 800bab8:	1879      	adds	r1, r7, r1
            opa_table = alpha1_opa_table;
 800baba:	ac06      	add	r4, sp, #24
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800babc:	9b01      	ldr	r3, [sp, #4]
 800babe:	7b1b      	ldrb	r3, [r3, #12]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d13c      	bne.n	800bb3e <lv_img_decoder_built_in_read_line+0x192>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
 800bac4:	9b01      	ldr	r3, [sp, #4]
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	689b      	ldr	r3, [r3, #8]
 800baca:	1859      	adds	r1, r3, r1
 800bacc:	9b3b      	ldr	r3, [sp, #236]	; 0xec
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 800bace:	2708      	movs	r7, #8
 800bad0:	1c98      	adds	r0, r3, #2
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800bad2:	231f      	movs	r3, #31
        data_tmp = fs_buf;
 800bad4:	2200      	movs	r2, #0
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800bad6:	469c      	mov	ip, r3
            pos = 8 - px_size;
 800bad8:	9b03      	ldr	r3, [sp, #12]
 800bada:	1aff      	subs	r7, r7, r3
 800badc:	b27b      	sxtb	r3, r7
 800bade:	9305      	str	r3, [sp, #20]
    for(i = 0; i < len; i++) {
 800bae0:	9b02      	ldr	r3, [sp, #8]
 800bae2:	4293      	cmp	r3, r2
 800bae4:	dc39      	bgt.n	800bb5a <lv_img_decoder_built_in_read_line+0x1ae>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 800bae6:	2501      	movs	r5, #1
 800bae8:	e79b      	b.n	800ba22 <lv_img_decoder_built_in_read_line+0x76>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800baea:	0d6b      	lsrs	r3, r5, #21
 800baec:	109a      	asrs	r2, r3, #2
            if(dsc->header.w & 0x3) w++;
 800baee:	1c55      	adds	r5, r2, #1
 800baf0:	079b      	lsls	r3, r3, #30
 800baf2:	d100      	bne.n	800baf6 <lv_img_decoder_built_in_read_line+0x14a>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800baf4:	b215      	sxth	r5, r2
            pos       = 6 - ((x & 0x3) * 2);
 800baf6:	2603      	movs	r6, #3
            ofs += w * y + (x >> 2); /*First pixel*/
 800baf8:	436f      	muls	r7, r5
 800bafa:	10a1      	asrs	r1, r4, #2
            pos       = 6 - ((x & 0x3) * 2);
 800bafc:	b2a4      	uxth	r4, r4
 800bafe:	43a6      	bics	r6, r4
            ofs += w * y + (x >> 2); /*First pixel*/
 800bb00:	1879      	adds	r1, r7, r1
            pos       = 6 - ((x & 0x3) * 2);
 800bb02:	0076      	lsls	r6, r6, #1
            opa_table = alpha2_opa_table;
 800bb04:	ac07      	add	r4, sp, #28
 800bb06:	e7d9      	b.n	800babc <lv_img_decoder_built_in_read_line+0x110>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800bb08:	0d6b      	lsrs	r3, r5, #21
 800bb0a:	105a      	asrs	r2, r3, #1
            if(dsc->header.w & 0x1) w++;
 800bb0c:	1c55      	adds	r5, r2, #1
 800bb0e:	07db      	lsls	r3, r3, #31
 800bb10:	d400      	bmi.n	800bb14 <lv_img_decoder_built_in_read_line+0x168>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800bb12:	b215      	sxth	r5, r2
            ofs += w * y + (x >> 1); /*First pixel*/
 800bb14:	436f      	muls	r7, r5
 800bb16:	1061      	asrs	r1, r4, #1
 800bb18:	1879      	adds	r1, r7, r1
            pos       = 4 - ((x & 0x1) * 4);
 800bb1a:	2600      	movs	r6, #0
 800bb1c:	07e3      	lsls	r3, r4, #31
 800bb1e:	d400      	bmi.n	800bb22 <lv_img_decoder_built_in_read_line+0x176>
 800bb20:	2604      	movs	r6, #4
            opa_table = alpha4_opa_table;
 800bb22:	ac08      	add	r4, sp, #32
 800bb24:	e7ca      	b.n	800babc <lv_img_decoder_built_in_read_line+0x110>
            pos = 0;
 800bb26:	2600      	movs	r6, #0
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800bb28:	0d6d      	lsrs	r5, r5, #21
 800bb2a:	b2a9      	uxth	r1, r5
            ofs += w * y + x;  /*First pixel*/
 800bb2c:	4379      	muls	r1, r7
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800bb2e:	b22d      	sxth	r5, r5
            ofs += w * y + x;  /*First pixel*/
 800bb30:	1909      	adds	r1, r1, r4
    const lv_opa_t * opa_table = NULL;
 800bb32:	0034      	movs	r4, r6
 800bb34:	e7c2      	b.n	800babc <lv_img_decoder_built_in_read_line+0x110>
    int8_t pos   = 0;
 800bb36:	2600      	movs	r6, #0
    uint32_t ofs = 0;
 800bb38:	0031      	movs	r1, r6
    lv_coord_t w = 0;
 800bb3a:	0035      	movs	r5, r6
 800bb3c:	e7f9      	b.n	800bb32 <lv_img_decoder_built_in_read_line+0x186>
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800bb3e:	9b01      	ldr	r3, [sp, #4]
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 800bb40:	3104      	adds	r1, #4
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800bb42:	6a1f      	ldr	r7, [r3, #32]
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 800bb44:	6838      	ldr	r0, [r7, #0]
 800bb46:	f000 fd48 	bl	800c5da <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 800bb4a:	a90c      	add	r1, sp, #48	; 0x30
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	002a      	movs	r2, r5
 800bb50:	6838      	ldr	r0, [r7, #0]
 800bb52:	f000 fd24 	bl	800c59e <lv_fs_read>
        data_tmp = fs_buf;
 800bb56:	a90c      	add	r1, sp, #48	; 0x30
 800bb58:	e7b8      	b.n	800bacc <lv_img_decoder_built_in_read_line+0x120>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800bb5a:	9b04      	ldr	r3, [sp, #16]
 800bb5c:	780d      	ldrb	r5, [r1, #0]
 800bb5e:	40b3      	lsls	r3, r6
 800bb60:	402b      	ands	r3, r5
 800bb62:	4133      	asrs	r3, r6
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800bb64:	4667      	mov	r7, ip
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800bb66:	9d01      	ldr	r5, [sp, #4]
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	7c2d      	ldrb	r5, [r5, #16]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800bb6c:	403d      	ands	r5, r7
 800bb6e:	2d0e      	cmp	r5, #14
 800bb70:	d10b      	bne.n	800bb8a <lv_img_decoder_built_in_read_line+0x1de>
 800bb72:	7003      	strb	r3, [r0, #0]
        pos -= px_size;
 800bb74:	9b03      	ldr	r3, [sp, #12]
 800bb76:	1af6      	subs	r6, r6, r3
 800bb78:	b276      	sxtb	r6, r6
        if(pos < 0) {
 800bb7a:	2e00      	cmp	r6, #0
 800bb7c:	da01      	bge.n	800bb82 <lv_img_decoder_built_in_read_line+0x1d6>
            pos = 8 - px_size;
 800bb7e:	9e05      	ldr	r6, [sp, #20]
            data_tmp++;
 800bb80:	3101      	adds	r1, #1
 800bb82:	3201      	adds	r2, #1
 800bb84:	b212      	sxth	r2, r2
 800bb86:	3003      	adds	r0, #3
 800bb88:	e7aa      	b.n	800bae0 <lv_img_decoder_built_in_read_line+0x134>
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800bb8a:	5ce3      	ldrb	r3, [r4, r3]
 800bb8c:	e7f1      	b.n	800bb72 <lv_img_decoder_built_in_read_line+0x1c6>
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 800bb8e:	3b07      	subs	r3, #7
    lv_res_t res = LV_RES_INV;
 800bb90:	0035      	movs	r5, r6
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 800bb92:	2b03      	cmp	r3, #3
 800bb94:	d900      	bls.n	800bb98 <lv_img_decoder_built_in_read_line+0x1ec>
 800bb96:	e744      	b.n	800ba22 <lv_img_decoder_built_in_read_line+0x76>
static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800bb98:	06c0      	lsls	r0, r0, #27
 800bb9a:	0ec0      	lsrs	r0, r0, #27
 800bb9c:	f7fd fa40 	bl	8009020 <lv_img_color_format_get_px_size>
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800bba0:	2301      	movs	r3, #1
 800bba2:	4083      	lsls	r3, r0
 800bba4:	3b01      	subs	r3, #1
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	9304      	str	r3, [sp, #16]

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
 800bbaa:	9b01      	ldr	r3, [sp, #4]
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800bbac:	9003      	str	r0, [sp, #12]
    switch(dsc->header.cf) {
 800bbae:	7c18      	ldrb	r0, [r3, #16]
 800bbb0:	06c0      	lsls	r0, r0, #27
 800bbb2:	0ec0      	lsrs	r0, r0, #27
 800bbb4:	3807      	subs	r0, #7
 800bbb6:	2803      	cmp	r0, #3
 800bbb8:	d868      	bhi.n	800bc8c <lv_img_decoder_built_in_read_line+0x2e0>
 800bbba:	691d      	ldr	r5, [r3, #16]
            ofs += w * y + (x >> 1); /*First pixel*/
            ofs += 64;               /*Skip the palette*/
            pos = 4 - ((x & 0x1) * 4);
            break;
        case LV_IMG_CF_INDEXED_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800bbbc:	02ed      	lsls	r5, r5, #11
    switch(dsc->header.cf) {
 800bbbe:	f7f4 fab1 	bl	8000124 <__gnu_thumb1_case_uqi>
 800bbc2:	3a02      	.short	0x3a02
 800bbc4:	5b4a      	.short	0x5b4a
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800bbc6:	0d6b      	lsrs	r3, r5, #21
 800bbc8:	10da      	asrs	r2, r3, #3
            if(dsc->header.w & 0x7) w++;
 800bbca:	1c55      	adds	r5, r2, #1
 800bbcc:	075b      	lsls	r3, r3, #29
 800bbce:	d100      	bne.n	800bbd2 <lv_img_decoder_built_in_read_line+0x226>
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800bbd0:	b215      	sxth	r5, r2
            ofs += w * y + (x >> 3); /*First pixel*/
 800bbd2:	003e      	movs	r6, r7
            pos = 7 - (x & 0x7);
 800bbd4:	2707      	movs	r7, #7
            ofs += w * y + (x >> 3); /*First pixel*/
 800bbd6:	436e      	muls	r6, r5
 800bbd8:	10e1      	asrs	r1, r4, #3
 800bbda:	1876      	adds	r6, r6, r1
            ofs += 8;                /*Skip the palette*/
 800bbdc:	3608      	adds	r6, #8
            pos = 7 - (x & 0x7);
 800bbde:	43a7      	bics	r7, r4
            ofs += 1024;       /*Skip the palette*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800bbe0:	9b01      	ldr	r3, [sp, #4]
 800bbe2:	6a1c      	ldr	r4, [r3, #32]

#if LV_USE_FILESYSTEM
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800bbe4:	7b1b      	ldrb	r3, [r3, #12]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d153      	bne.n	800bc92 <lv_img_decoder_built_in_read_line+0x2e6>
        const lv_img_dsc_t * img_dsc = dsc->src;
        data_tmp                     = img_dsc->data + ofs;
 800bbea:	9b01      	ldr	r3, [sp, #4]
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	6899      	ldr	r1, [r3, #8]
 800bbf0:	198e      	adds	r6, r1, r6
    uint8_t val_act;
    lv_coord_t i;
    lv_color_t * cbuf = (lv_color_t *)buf;
    for(i = 0; i < len; i++) {
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
        cbuf[i] = user_data->palette[val_act];
 800bbf2:	23ff      	movs	r3, #255	; 0xff

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 800bbf4:	2208      	movs	r2, #8
        data_tmp = fs_buf;
 800bbf6:	2100      	movs	r1, #0
        cbuf[i] = user_data->palette[val_act];
 800bbf8:	469c      	mov	ip, r3
            pos = 8 - px_size;
 800bbfa:	9b03      	ldr	r3, [sp, #12]
 800bbfc:	1ad2      	subs	r2, r2, r3
 800bbfe:	b252      	sxtb	r2, r2
    for(i = 0; i < len; i++) {
 800bc00:	9802      	ldr	r0, [sp, #8]
 800bc02:	b20b      	sxth	r3, r1
 800bc04:	4298      	cmp	r0, r3
 800bc06:	dc00      	bgt.n	800bc0a <lv_img_decoder_built_in_read_line+0x25e>
 800bc08:	e76d      	b.n	800bae6 <lv_img_decoder_built_in_read_line+0x13a>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800bc0a:	9b04      	ldr	r3, [sp, #16]
 800bc0c:	7835      	ldrb	r5, [r6, #0]
 800bc0e:	40bb      	lsls	r3, r7
 800bc10:	402b      	ands	r3, r5
 800bc12:	413b      	asrs	r3, r7
        cbuf[i] = user_data->palette[val_act];
 800bc14:	4665      	mov	r5, ip
 800bc16:	402b      	ands	r3, r5
 800bc18:	6865      	ldr	r5, [r4, #4]
 800bc1a:	005b      	lsls	r3, r3, #1
 800bc1c:	5b5b      	ldrh	r3, [r3, r5]
 800bc1e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800bc20:	0048      	lsls	r0, r1, #1
 800bc22:	522b      	strh	r3, [r5, r0]
        pos -= px_size;
 800bc24:	9b03      	ldr	r3, [sp, #12]
 800bc26:	1aff      	subs	r7, r7, r3
 800bc28:	b27f      	sxtb	r7, r7
        if(pos < 0) {
 800bc2a:	2f00      	cmp	r7, #0
 800bc2c:	da01      	bge.n	800bc32 <lv_img_decoder_built_in_read_line+0x286>
            pos = 8 - px_size;
 800bc2e:	0017      	movs	r7, r2
            data_tmp++;
 800bc30:	3601      	adds	r6, #1
 800bc32:	3101      	adds	r1, #1
 800bc34:	e7e4      	b.n	800bc00 <lv_img_decoder_built_in_read_line+0x254>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800bc36:	0d6b      	lsrs	r3, r5, #21
 800bc38:	109a      	asrs	r2, r3, #2
            if(dsc->header.w & 0x3) w++;
 800bc3a:	1c55      	adds	r5, r2, #1
 800bc3c:	079b      	lsls	r3, r3, #30
 800bc3e:	d100      	bne.n	800bc42 <lv_img_decoder_built_in_read_line+0x296>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800bc40:	b215      	sxth	r5, r2
            ofs += w * y + (x >> 2); /*First pixel*/
 800bc42:	003e      	movs	r6, r7
            pos = 6 - ((x & 0x3) * 2);
 800bc44:	2703      	movs	r7, #3
            ofs += w * y + (x >> 2); /*First pixel*/
 800bc46:	436e      	muls	r6, r5
 800bc48:	10a1      	asrs	r1, r4, #2
            pos = 6 - ((x & 0x3) * 2);
 800bc4a:	b2a4      	uxth	r4, r4
            ofs += w * y + (x >> 2); /*First pixel*/
 800bc4c:	1876      	adds	r6, r6, r1
            pos = 6 - ((x & 0x3) * 2);
 800bc4e:	43a7      	bics	r7, r4
            ofs += 16;               /*Skip the palette*/
 800bc50:	3610      	adds	r6, #16
            pos = 6 - ((x & 0x3) * 2);
 800bc52:	007f      	lsls	r7, r7, #1
 800bc54:	e7c4      	b.n	800bbe0 <lv_img_decoder_built_in_read_line+0x234>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800bc56:	0d6b      	lsrs	r3, r5, #21
 800bc58:	105a      	asrs	r2, r3, #1
            if(dsc->header.w & 0x1) w++;
 800bc5a:	1c55      	adds	r5, r2, #1
 800bc5c:	07db      	lsls	r3, r3, #31
 800bc5e:	d400      	bmi.n	800bc62 <lv_img_decoder_built_in_read_line+0x2b6>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800bc60:	b215      	sxth	r5, r2
            ofs += w * y + (x >> 1); /*First pixel*/
 800bc62:	003e      	movs	r6, r7
            pos = 4 - ((x & 0x1) * 4);
 800bc64:	2701      	movs	r7, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 800bc66:	1061      	asrs	r1, r4, #1
            pos = 4 - ((x & 0x1) * 4);
 800bc68:	403c      	ands	r4, r7
 800bc6a:	4267      	negs	r7, r4
 800bc6c:	4167      	adcs	r7, r4
            ofs += w * y + (x >> 1); /*First pixel*/
 800bc6e:	436e      	muls	r6, r5
 800bc70:	1876      	adds	r6, r6, r1
            ofs += 64;               /*Skip the palette*/
 800bc72:	3640      	adds	r6, #64	; 0x40
            pos = 4 - ((x & 0x1) * 4);
 800bc74:	00bf      	lsls	r7, r7, #2
 800bc76:	e7b3      	b.n	800bbe0 <lv_img_decoder_built_in_read_line+0x234>
            ofs += 1024;       /*Skip the palette*/
 800bc78:	2380      	movs	r3, #128	; 0x80
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800bc7a:	0d6d      	lsrs	r5, r5, #21
 800bc7c:	b2ae      	uxth	r6, r5
            ofs += w * y + x;  /*First pixel*/
 800bc7e:	437e      	muls	r6, r7
            ofs += 1024;       /*Skip the palette*/
 800bc80:	00db      	lsls	r3, r3, #3
            ofs += w * y + x;  /*First pixel*/
 800bc82:	1936      	adds	r6, r6, r4
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800bc84:	b22d      	sxth	r5, r5
            ofs += 1024;       /*Skip the palette*/
 800bc86:	18f6      	adds	r6, r6, r3
            pos = 0;
 800bc88:	2700      	movs	r7, #0
 800bc8a:	e7a9      	b.n	800bbe0 <lv_img_decoder_built_in_read_line+0x234>
    int8_t pos   = 0;
 800bc8c:	0037      	movs	r7, r6
    lv_coord_t w = 0;
 800bc8e:	0035      	movs	r5, r6
 800bc90:	e7a6      	b.n	800bbe0 <lv_img_decoder_built_in_read_line+0x234>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 800bc92:	1d31      	adds	r1, r6, #4
 800bc94:	6820      	ldr	r0, [r4, #0]
 800bc96:	f000 fca0 	bl	800c5da <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	002a      	movs	r2, r5
 800bc9e:	a90c      	add	r1, sp, #48	; 0x30
 800bca0:	6820      	ldr	r0, [r4, #0]
 800bca2:	f000 fc7c 	bl	800c59e <lv_fs_read>
        data_tmp = fs_buf;
 800bca6:	ae0c      	add	r6, sp, #48	; 0x30
 800bca8:	e7a3      	b.n	800bbf2 <lv_img_decoder_built_in_read_line+0x246>
 800bcaa:	46c0      	nop			; (mov r8, r8)
 800bcac:	0800de1e 	.word	0x0800de1e

0800bcb0 <lv_img_decoder_get_info>:
{
 800bcb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    header->always_zero = 0;
 800bcb2:	221f      	movs	r2, #31
 800bcb4:	780b      	ldrb	r3, [r1, #0]
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 800bcb6:	4f0f      	ldr	r7, [pc, #60]	; (800bcf4 <lv_img_decoder_get_info+0x44>)
    header->always_zero = 0;
 800bcb8:	4013      	ands	r3, r2
{
 800bcba:	9001      	str	r0, [sp, #4]
    header->always_zero = 0;
 800bcbc:	700b      	strb	r3, [r1, #0]
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 800bcbe:	0038      	movs	r0, r7
{
 800bcc0:	000e      	movs	r6, r1
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 800bcc2:	f000 fd8c 	bl	800c7de <lv_ll_get_head>
    lv_res_t res = LV_RES_INV;
 800bcc6:	2400      	movs	r4, #0
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 800bcc8:	0005      	movs	r5, r0
 800bcca:	2d00      	cmp	r5, #0
 800bccc:	d101      	bne.n	800bcd2 <lv_img_decoder_get_info+0x22>
}
 800bcce:	0020      	movs	r0, r4
 800bcd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if(d->info_cb) {
 800bcd2:	682c      	ldr	r4, [r5, #0]
 800bcd4:	2c00      	cmp	r4, #0
 800bcd6:	d006      	beq.n	800bce6 <lv_img_decoder_get_info+0x36>
            res = d->info_cb(d, src, header);
 800bcd8:	0032      	movs	r2, r6
 800bcda:	9901      	ldr	r1, [sp, #4]
 800bcdc:	0028      	movs	r0, r5
 800bcde:	47a0      	blx	r4
 800bce0:	0004      	movs	r4, r0
            if(res == LV_RES_OK) break;
 800bce2:	2801      	cmp	r0, #1
 800bce4:	d0f3      	beq.n	800bcce <lv_img_decoder_get_info+0x1e>
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 800bce6:	0029      	movs	r1, r5
 800bce8:	0038      	movs	r0, r7
 800bcea:	f000 fd80 	bl	800c7ee <lv_ll_get_next>
 800bcee:	0005      	movs	r5, r0
 800bcf0:	e7eb      	b.n	800bcca <lv_img_decoder_get_info+0x1a>
 800bcf2:	46c0      	nop			; (mov r8, r8)
 800bcf4:	2000539c 	.word	0x2000539c

0800bcf8 <lv_img_decoder_open>:
{
 800bcf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcfa:	0005      	movs	r5, r0
    dsc->style     = style;
 800bcfc:	6082      	str	r2, [r0, #8]
    dsc->src       = src;
 800bcfe:	6069      	str	r1, [r5, #4]
    dsc->src_type  = lv_img_src_get_type(src);
 800bd00:	0008      	movs	r0, r1
{
 800bd02:	000f      	movs	r7, r1
    dsc->user_data = NULL;
 800bd04:	2400      	movs	r4, #0
    dsc->src_type  = lv_img_src_get_type(src);
 800bd06:	f7fd fa83 	bl	8009210 <lv_img_src_get_type>
    dsc->user_data = NULL;
 800bd0a:	622c      	str	r4, [r5, #32]
    dsc->src_type  = lv_img_src_get_type(src);
 800bd0c:	7328      	strb	r0, [r5, #12]
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 800bd0e:	4816      	ldr	r0, [pc, #88]	; (800bd68 <lv_img_decoder_open+0x70>)
 800bd10:	f000 fd65 	bl	800c7de <lv_ll_get_head>
 800bd14:	1e06      	subs	r6, r0, #0
 800bd16:	d108      	bne.n	800bd2a <lv_img_decoder_open+0x32>
    if(res == LV_RES_INV) {
 800bd18:	2c00      	cmp	r4, #0
 800bd1a:	d104      	bne.n	800bd26 <lv_img_decoder_open+0x2e>
        memset(dsc, 0, sizeof(lv_img_decoder_dsc_t));
 800bd1c:	2224      	movs	r2, #36	; 0x24
 800bd1e:	0021      	movs	r1, r4
 800bd20:	0028      	movs	r0, r5
 800bd22:	f001 ff28 	bl	800db76 <memset>
}
 800bd26:	0020      	movs	r0, r4
 800bd28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 800bd2a:	6833      	ldr	r3, [r6, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d015      	beq.n	800bd5c <lv_img_decoder_open+0x64>
 800bd30:	6872      	ldr	r2, [r6, #4]
 800bd32:	2a00      	cmp	r2, #0
 800bd34:	d012      	beq.n	800bd5c <lv_img_decoder_open+0x64>
        res = d->info_cb(d, src, &dsc->header);
 800bd36:	002a      	movs	r2, r5
 800bd38:	0039      	movs	r1, r7
 800bd3a:	3210      	adds	r2, #16
 800bd3c:	0030      	movs	r0, r6
 800bd3e:	4798      	blx	r3
 800bd40:	0004      	movs	r4, r0
        if(res != LV_RES_OK) continue;
 800bd42:	2801      	cmp	r0, #1
 800bd44:	d10a      	bne.n	800bd5c <lv_img_decoder_open+0x64>
        dsc->error_msg = NULL;
 800bd46:	2300      	movs	r3, #0
        dsc->decoder   = d;
 800bd48:	602e      	str	r6, [r5, #0]
        dsc->error_msg = NULL;
 800bd4a:	61eb      	str	r3, [r5, #28]
        dsc->img_data  = NULL;
 800bd4c:	616b      	str	r3, [r5, #20]
        res = d->open_cb(d, dsc);
 800bd4e:	0029      	movs	r1, r5
 800bd50:	0030      	movs	r0, r6
 800bd52:	6873      	ldr	r3, [r6, #4]
 800bd54:	4798      	blx	r3
 800bd56:	0004      	movs	r4, r0
        if(res == LV_RES_OK) break;
 800bd58:	2801      	cmp	r0, #1
 800bd5a:	d0e4      	beq.n	800bd26 <lv_img_decoder_open+0x2e>
    LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d)
 800bd5c:	0031      	movs	r1, r6
 800bd5e:	4802      	ldr	r0, [pc, #8]	; (800bd68 <lv_img_decoder_open+0x70>)
 800bd60:	f000 fd45 	bl	800c7ee <lv_ll_get_next>
 800bd64:	e7d6      	b.n	800bd14 <lv_img_decoder_open+0x1c>
 800bd66:	46c0      	nop			; (mov r8, r8)
 800bd68:	2000539c 	.word	0x2000539c

0800bd6c <lv_img_decoder_read_line>:
{
 800bd6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 800bd6e:	6805      	ldr	r5, [r0, #0]
{
 800bd70:	0006      	movs	r6, r0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 800bd72:	68ac      	ldr	r4, [r5, #8]
    lv_res_t res = LV_RES_INV;
 800bd74:	1e20      	subs	r0, r4, #0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 800bd76:	d007      	beq.n	800bd88 <lv_img_decoder_read_line+0x1c>
 800bd78:	9806      	ldr	r0, [sp, #24]
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	9001      	str	r0, [sp, #4]
 800bd7e:	0013      	movs	r3, r2
 800bd80:	0028      	movs	r0, r5
 800bd82:	000a      	movs	r2, r1
 800bd84:	0031      	movs	r1, r6
 800bd86:	47a0      	blx	r4
}
 800bd88:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0800bd8a <lv_img_decoder_close>:
{
 800bd8a:	0001      	movs	r1, r0
    if(dsc->decoder) {
 800bd8c:	6800      	ldr	r0, [r0, #0]
{
 800bd8e:	b510      	push	{r4, lr}
    if(dsc->decoder) {
 800bd90:	2800      	cmp	r0, #0
 800bd92:	d003      	beq.n	800bd9c <lv_img_decoder_close+0x12>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 800bd94:	68c2      	ldr	r2, [r0, #12]
 800bd96:	2a00      	cmp	r2, #0
 800bd98:	d000      	beq.n	800bd9c <lv_img_decoder_close+0x12>
 800bd9a:	4790      	blx	r2
}
 800bd9c:	bd10      	pop	{r4, pc}
	...

0800bda0 <lv_img_decoder_create>:
{
 800bda0:	b510      	push	{r4, lr}
    decoder = lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 800bda2:	4806      	ldr	r0, [pc, #24]	; (800bdbc <lv_img_decoder_create+0x1c>)
 800bda4:	f000 fcdb 	bl	800c75e <lv_ll_ins_head>
 800bda8:	1e04      	subs	r4, r0, #0
    lv_mem_assert(decoder);
 800bdaa:	d100      	bne.n	800bdae <lv_img_decoder_create+0xe>
 800bdac:	e7fe      	b.n	800bdac <lv_img_decoder_create+0xc>
    memset(decoder, 0, sizeof(lv_img_decoder_t));
 800bdae:	2210      	movs	r2, #16
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	f001 fee0 	bl	800db76 <memset>
}
 800bdb6:	0020      	movs	r0, r4
 800bdb8:	bd10      	pop	{r4, pc}
 800bdba:	46c0      	nop			; (mov r8, r8)
 800bdbc:	2000539c 	.word	0x2000539c

0800bdc0 <lv_img_decoder_init>:
{
 800bdc0:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 800bdc2:	2110      	movs	r1, #16
 800bdc4:	4808      	ldr	r0, [pc, #32]	; (800bde8 <lv_img_decoder_init+0x28>)
 800bdc6:	f000 fcc0 	bl	800c74a <lv_ll_init>
    decoder = lv_img_decoder_create();
 800bdca:	f7ff ffe9 	bl	800bda0 <lv_img_decoder_create>
    if(decoder == NULL) {
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	d100      	bne.n	800bdd4 <lv_img_decoder_init+0x14>
 800bdd2:	e7fe      	b.n	800bdd2 <lv_img_decoder_init+0x12>
    decoder->info_cb = info_cb;
 800bdd4:	4b05      	ldr	r3, [pc, #20]	; (800bdec <lv_img_decoder_init+0x2c>)
 800bdd6:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
 800bdd8:	4b05      	ldr	r3, [pc, #20]	; (800bdf0 <lv_img_decoder_init+0x30>)
 800bdda:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
 800bddc:	4b05      	ldr	r3, [pc, #20]	; (800bdf4 <lv_img_decoder_init+0x34>)
 800bdde:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
 800bde0:	4b05      	ldr	r3, [pc, #20]	; (800bdf8 <lv_img_decoder_init+0x38>)
 800bde2:	60c3      	str	r3, [r0, #12]
}
 800bde4:	bd10      	pop	{r4, pc}
 800bde6:	46c0      	nop			; (mov r8, r8)
 800bde8:	2000539c 	.word	0x2000539c
 800bdec:	0800b8f9 	.word	0x0800b8f9
 800bdf0:	0800b7ad 	.word	0x0800b7ad
 800bdf4:	0800b9ad 	.word	0x0800b9ad
 800bdf8:	0800b77d 	.word	0x0800b77d

0800bdfc <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
 800bdfc:	b510      	push	{r4, lr}
    return font_p->get_glyph_bitmap(font_p, letter);
 800bdfe:	6843      	ldr	r3, [r0, #4]
 800be00:	4798      	blx	r3
}
 800be02:	bd10      	pop	{r4, pc}

0800be04 <lv_font_get_glyph_dsc>:
 * @param letter an UNICODE letter code
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter, uint32_t letter_next)
{
 800be04:	b510      	push	{r4, lr}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 800be06:	6804      	ldr	r4, [r0, #0]
 800be08:	47a0      	blx	r4
}
 800be0a:	bd10      	pop	{r4, pc}

0800be0c <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 800be0c:	b507      	push	{r0, r1, r2, lr}
 800be0e:	0013      	movs	r3, r2
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 800be10:	000a      	movs	r2, r1
 800be12:	4669      	mov	r1, sp
 800be14:	f7ff fff6 	bl	800be04 <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
    else return 0;
 800be18:	2300      	movs	r3, #0
    if(ret) return g.adv_w;
 800be1a:	4298      	cmp	r0, r3
 800be1c:	d001      	beq.n	800be22 <lv_font_get_glyph_width+0x16>
 800be1e:	466b      	mov	r3, sp
 800be20:	881b      	ldrh	r3, [r3, #0]
}
 800be22:	0018      	movs	r0, r3
 800be24:	bd0e      	pop	{r1, r2, r3, pc}

0800be26 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 800be26:	7803      	ldrb	r3, [r0, #0]
 800be28:	780a      	ldrb	r2, [r1, #0]
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d001      	beq.n	800be32 <kern_pair_8_compare+0xc>
 800be2e:	1a98      	subs	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];

}
 800be30:	4770      	bx	lr
    else return (int32_t) ref8_p[1] - element8_p[1];
 800be32:	7840      	ldrb	r0, [r0, #1]
 800be34:	784b      	ldrb	r3, [r1, #1]
 800be36:	1ac0      	subs	r0, r0, r3
 800be38:	e7fa      	b.n	800be30 <kern_pair_8_compare+0xa>

0800be3a <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 800be3a:	8803      	ldrh	r3, [r0, #0]
 800be3c:	880a      	ldrh	r2, [r1, #0]
 800be3e:	4293      	cmp	r3, r2
 800be40:	d001      	beq.n	800be46 <kern_pair_16_compare+0xc>
 800be42:	1a98      	subs	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
}
 800be44:	4770      	bx	lr
    else return (int32_t) ref16_p[1] - element16_p[1];
 800be46:	8840      	ldrh	r0, [r0, #2]
 800be48:	884b      	ldrh	r3, [r1, #2]
 800be4a:	1ac0      	subs	r0, r0, r3
 800be4c:	e7fa      	b.n	800be44 <kern_pair_16_compare+0xa>

0800be4e <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return (*(uint16_t *)ref) - (*(uint16_t *)element);
 800be4e:	8800      	ldrh	r0, [r0, #0]
 800be50:	880b      	ldrh	r3, [r1, #0]
 800be52:	1ac0      	subs	r0, r0, r3
}
 800be54:	4770      	bx	lr
	...

0800be58 <get_glyph_dsc_id.isra.0.part.1>:
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800be58:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800be5a:	6804      	ldr	r4, [r0, #0]
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800be5c:	b085      	sub	sp, #20
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800be5e:	6963      	ldr	r3, [r4, #20]
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800be60:	000d      	movs	r5, r1
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800be62:	428b      	cmp	r3, r1
 800be64:	d009      	beq.n	800be7a <get_glyph_dsc_id.isra.0.part.1+0x22>
 800be66:	2300      	movs	r3, #0
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800be68:	2014      	movs	r0, #20
    for(i = 0; i < fdsc->cmap_num; i++) {
 800be6a:	8a62      	ldrh	r2, [r4, #18]
 800be6c:	0592      	lsls	r2, r2, #22
 800be6e:	0d92      	lsrs	r2, r2, #22
 800be70:	4293      	cmp	r3, r2
 800be72:	db05      	blt.n	800be80 <get_glyph_dsc_id.isra.0.part.1+0x28>
    fdsc->last_letter = letter;
 800be74:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 800be76:	2000      	movs	r0, #0
 800be78:	e016      	b.n	800bea8 <get_glyph_dsc_id.isra.0.part.1+0x50>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800be7a:	69a0      	ldr	r0, [r4, #24]
}
 800be7c:	b005      	add	sp, #20
 800be7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800be80:	0006      	movs	r6, r0
 800be82:	435e      	muls	r6, r3
 800be84:	68a2      	ldr	r2, [r4, #8]
 800be86:	1991      	adds	r1, r2, r6
 800be88:	680a      	ldr	r2, [r1, #0]
 800be8a:	1aaa      	subs	r2, r5, r2
 800be8c:	9203      	str	r2, [sp, #12]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800be8e:	888f      	ldrh	r7, [r1, #4]
 800be90:	42ba      	cmp	r2, r7
 800be92:	d902      	bls.n	800be9a <get_glyph_dsc_id.isra.0.part.1+0x42>
    for(i = 0; i < fdsc->cmap_num; i++) {
 800be94:	3301      	adds	r3, #1
 800be96:	b29b      	uxth	r3, r3
 800be98:	e7e7      	b.n	800be6a <get_glyph_dsc_id.isra.0.part.1+0x12>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 800be9a:	2003      	movs	r0, #3
 800be9c:	7c8b      	ldrb	r3, [r1, #18]
 800be9e:	4003      	ands	r3, r0
 800bea0:	d104      	bne.n	800beac <get_glyph_dsc_id.isra.0.part.1+0x54>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 800bea2:	88c8      	ldrh	r0, [r1, #6]
 800bea4:	1880      	adds	r0, r0, r2
        fdsc->last_letter = letter;
 800bea6:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 800bea8:	61a0      	str	r0, [r4, #24]
 800beaa:	e7e7      	b.n	800be7c <get_glyph_dsc_id.isra.0.part.1+0x24>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 800beac:	2b01      	cmp	r3, #1
 800beae:	d104      	bne.n	800beba <get_glyph_dsc_id.isra.0.part.1+0x62>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 800beb0:	68cb      	ldr	r3, [r1, #12]
 800beb2:	5c98      	ldrb	r0, [r3, r2]
 800beb4:	88cb      	ldrh	r3, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800beb6:	18c0      	adds	r0, r0, r3
 800beb8:	e7f5      	b.n	800bea6 <get_glyph_dsc_id.isra.0.part.1+0x4e>
 800beba:	4811      	ldr	r0, [pc, #68]	; (800bf00 <get_glyph_dsc_id.isra.0.part.1+0xa8>)
 800bebc:	8a0a      	ldrh	r2, [r1, #16]
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 800bebe:	9000      	str	r0, [sp, #0]
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 800bec0:	2b02      	cmp	r3, #2
 800bec2:	d10e      	bne.n	800bee2 <get_glyph_dsc_id.isra.0.part.1+0x8a>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 800bec4:	6889      	ldr	r1, [r1, #8]
 800bec6:	a803      	add	r0, sp, #12
 800bec8:	f001 f9d0 	bl	800d26c <lv_utils_bsearch>
            if(p) {
 800becc:	2800      	cmp	r0, #0
 800bece:	d101      	bne.n	800bed4 <get_glyph_dsc_id.isra.0.part.1+0x7c>
        uint32_t glyph_id = 0;
 800bed0:	2000      	movs	r0, #0
 800bed2:	e7e8      	b.n	800bea6 <get_glyph_dsc_id.isra.0.part.1+0x4e>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 800bed4:	68a3      	ldr	r3, [r4, #8]
 800bed6:	199e      	adds	r6, r3, r6
 800bed8:	68b3      	ldr	r3, [r6, #8]
 800beda:	1ac0      	subs	r0, r0, r3
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 800bedc:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800bede:	88f3      	ldrh	r3, [r6, #6]
 800bee0:	e7e9      	b.n	800beb6 <get_glyph_dsc_id.isra.0.part.1+0x5e>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 800bee2:	2302      	movs	r3, #2
 800bee4:	6889      	ldr	r1, [r1, #8]
 800bee6:	a803      	add	r0, sp, #12
 800bee8:	f001 f9c0 	bl	800d26c <lv_utils_bsearch>
            if(p) {
 800beec:	2800      	cmp	r0, #0
 800beee:	d0ef      	beq.n	800bed0 <get_glyph_dsc_id.isra.0.part.1+0x78>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 800bef0:	68a3      	ldr	r3, [r4, #8]
 800bef2:	199e      	adds	r6, r3, r6
 800bef4:	68b3      	ldr	r3, [r6, #8]
 800bef6:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800bef8:	68f3      	ldr	r3, [r6, #12]
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 800befa:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800befc:	5c18      	ldrb	r0, [r3, r0]
 800befe:	e7ee      	b.n	800bede <get_glyph_dsc_id.isra.0.part.1+0x86>
 800bf00:	0800be4f 	.word	0x0800be4f

0800bf04 <lv_font_get_bitmap_fmt_txt>:
{
 800bf04:	b510      	push	{r4, lr}
    if(letter == '\0') return 0;
 800bf06:	2900      	cmp	r1, #0
 800bf08:	d101      	bne.n	800bf0e <lv_font_get_bitmap_fmt_txt+0xa>
    if(!gid) return false;
 800bf0a:	2000      	movs	r0, #0
}
 800bf0c:	bd10      	pop	{r4, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800bf0e:	68c4      	ldr	r4, [r0, #12]
 800bf10:	300c      	adds	r0, #12
 800bf12:	f7ff ffa1 	bl	800be58 <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return false;
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d0f7      	beq.n	800bf0a <lv_font_get_bitmap_fmt_txt+0x6>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800bf1a:	6863      	ldr	r3, [r4, #4]
 800bf1c:	00c0      	lsls	r0, r0, #3
 800bf1e:	1818      	adds	r0, r3, r0
    if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 800bf20:	2800      	cmp	r0, #0
 800bf22:	d0f2      	beq.n	800bf0a <lv_font_get_bitmap_fmt_txt+0x6>
 800bf24:	6800      	ldr	r0, [r0, #0]
 800bf26:	6823      	ldr	r3, [r4, #0]
 800bf28:	0300      	lsls	r0, r0, #12
 800bf2a:	0b00      	lsrs	r0, r0, #12
 800bf2c:	1818      	adds	r0, r3, r0
 800bf2e:	e7ed      	b.n	800bf0c <lv_font_get_bitmap_fmt_txt+0x8>

0800bf30 <lv_font_get_glyph_dsc_fmt_txt>:
{
 800bf30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf32:	b087      	sub	sp, #28
 800bf34:	0005      	movs	r5, r0
 800bf36:	000f      	movs	r7, r1
 800bf38:	9303      	str	r3, [sp, #12]
    if(letter == '\0') return 0;
 800bf3a:	2a00      	cmp	r2, #0
 800bf3c:	d102      	bne.n	800bf44 <lv_font_get_glyph_dsc_fmt_txt+0x14>
    if(!gid) return false;
 800bf3e:	2000      	movs	r0, #0
}
 800bf40:	b007      	add	sp, #28
 800bf42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf44:	0006      	movs	r6, r0
 800bf46:	360c      	adds	r6, #12
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800bf48:	68c4      	ldr	r4, [r0, #12]
 800bf4a:	0011      	movs	r1, r2
 800bf4c:	0030      	movs	r0, r6
 800bf4e:	f7ff ff83 	bl	800be58 <get_glyph_dsc_id.isra.0.part.1>
 800bf52:	9002      	str	r0, [sp, #8]
    if(!gid) return false;
 800bf54:	2800      	cmp	r0, #0
 800bf56:	d0f2      	beq.n	800bf3e <lv_font_get_glyph_dsc_fmt_txt+0xe>
    if(fdsc->kern_dsc) {
 800bf58:	68e3      	ldr	r3, [r4, #12]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d11b      	bne.n	800bf96 <lv_font_get_glyph_dsc_fmt_txt+0x66>
    int8_t kvalue = 0;
 800bf5e:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800bf60:	9a02      	ldr	r2, [sp, #8]
 800bf62:	6861      	ldr	r1, [r4, #4]
 800bf64:	00d2      	lsls	r2, r2, #3
 800bf66:	188a      	adds	r2, r1, r2
    uint32_t adv_w = gdsc->adv_w + ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 800bf68:	8a21      	ldrh	r1, [r4, #16]
    return true;
 800bf6a:	2001      	movs	r0, #1
    uint32_t adv_w = gdsc->adv_w + ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 800bf6c:	434b      	muls	r3, r1
 800bf6e:	8851      	ldrh	r1, [r2, #2]
 800bf70:	111b      	asrs	r3, r3, #4
 800bf72:	0909      	lsrs	r1, r1, #4
 800bf74:	185b      	adds	r3, r3, r1
    adv_w  = (adv_w + (1 << 3)) >> 4;
 800bf76:	3308      	adds	r3, #8
 800bf78:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
 800bf7a:	803b      	strh	r3, [r7, #0]
    dsc_out->box_h = gdsc->box_h;
 800bf7c:	7953      	ldrb	r3, [r2, #5]
 800bf7e:	70fb      	strb	r3, [r7, #3]
    dsc_out->box_w = gdsc->box_w;
 800bf80:	7913      	ldrb	r3, [r2, #4]
 800bf82:	70bb      	strb	r3, [r7, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 800bf84:	7993      	ldrb	r3, [r2, #6]
 800bf86:	713b      	strb	r3, [r7, #4]
    dsc_out->ofs_y = gdsc->ofs_y;
 800bf88:	79d3      	ldrb	r3, [r2, #7]
 800bf8a:	717b      	strb	r3, [r7, #5]
    dsc_out->bpp   = fdsc->bpp;
 800bf8c:	7ce3      	ldrb	r3, [r4, #19]
 800bf8e:	06db      	lsls	r3, r3, #27
 800bf90:	0f5b      	lsrs	r3, r3, #29
 800bf92:	71bb      	strb	r3, [r7, #6]
    return true;
 800bf94:	e7d4      	b.n	800bf40 <lv_font_get_glyph_dsc_fmt_txt+0x10>
    if(letter == '\0') return 0;
 800bf96:	9b03      	ldr	r3, [sp, #12]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d0e0      	beq.n	800bf5e <lv_font_get_glyph_dsc_fmt_txt+0x2e>
 800bf9c:	0019      	movs	r1, r3
 800bf9e:	0030      	movs	r0, r6
 800bfa0:	f7ff ff5a 	bl	800be58 <get_glyph_dsc_id.isra.0.part.1>
        if(gid_next) {
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	d0da      	beq.n	800bf5e <lv_font_get_glyph_dsc_fmt_txt+0x2e>
 800bfa8:	68eb      	ldr	r3, [r5, #12]
    if(fdsc->kern_classes == 0) {
 800bfaa:	7cda      	ldrb	r2, [r3, #19]
 800bfac:	68dd      	ldr	r5, [r3, #12]
 800bfae:	0693      	lsls	r3, r2, #26
 800bfb0:	d432      	bmi.n	800c018 <lv_font_get_glyph_dsc_fmt_txt+0xe8>
        if(kdsc->glyph_ids_size == 0) {
 800bfb2:	2203      	movs	r2, #3
 800bfb4:	7aeb      	ldrb	r3, [r5, #11]
 800bfb6:	4013      	ands	r3, r2
 800bfb8:	d118      	bne.n	800bfec <lv_font_get_glyph_dsc_fmt_txt+0xbc>
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 800bfba:	ab05      	add	r3, sp, #20
 800bfbc:	469c      	mov	ip, r3
 800bfbe:	9b02      	ldr	r3, [sp, #8]
 800bfc0:	0200      	lsls	r0, r0, #8
 800bfc2:	18c0      	adds	r0, r0, r3
 800bfc4:	4663      	mov	r3, ip
            const uint8_t * g_ids = kdsc->glyph_ids;
 800bfc6:	682e      	ldr	r6, [r5, #0]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 800bfc8:	8018      	strh	r0, [r3, #0]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 800bfca:	68ab      	ldr	r3, [r5, #8]
 800bfcc:	0031      	movs	r1, r6
 800bfce:	021a      	lsls	r2, r3, #8
 800bfd0:	4b1a      	ldr	r3, [pc, #104]	; (800c03c <lv_font_get_glyph_dsc_fmt_txt+0x10c>)
 800bfd2:	0a12      	lsrs	r2, r2, #8
 800bfd4:	9300      	str	r3, [sp, #0]
 800bfd6:	4660      	mov	r0, ip
 800bfd8:	2302      	movs	r3, #2
 800bfda:	f001 f947 	bl	800d26c <lv_utils_bsearch>
    int8_t value = 0;
 800bfde:	1e03      	subs	r3, r0, #0
            if(kid_p) {
 800bfe0:	d0be      	beq.n	800bf60 <lv_font_get_glyph_dsc_fmt_txt+0x30>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 800bfe2:	1b80      	subs	r0, r0, r6
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
 800bfe4:	0840      	lsrs	r0, r0, #1
                value = kdsc->values[ofs];
 800bfe6:	686b      	ldr	r3, [r5, #4]
 800bfe8:	561b      	ldrsb	r3, [r3, r0]
 800bfea:	e7b9      	b.n	800bf60 <lv_font_get_glyph_dsc_fmt_txt+0x30>
        } else if(kdsc->glyph_ids_size == 1) {
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d1b6      	bne.n	800bf5e <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 800bff0:	9b02      	ldr	r3, [sp, #8]
 800bff2:	0200      	lsls	r0, r0, #8
 800bff4:	18c0      	adds	r0, r0, r3
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800bff6:	68ab      	ldr	r3, [r5, #8]
            const uint16_t * g_ids = kdsc->glyph_ids;
 800bff8:	682e      	ldr	r6, [r5, #0]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800bffa:	021a      	lsls	r2, r3, #8
 800bffc:	4b10      	ldr	r3, [pc, #64]	; (800c040 <lv_font_get_glyph_dsc_fmt_txt+0x110>)
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 800bffe:	9005      	str	r0, [sp, #20]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800c000:	9300      	str	r3, [sp, #0]
 800c002:	0a12      	lsrs	r2, r2, #8
 800c004:	2304      	movs	r3, #4
 800c006:	0031      	movs	r1, r6
 800c008:	a805      	add	r0, sp, #20
 800c00a:	f001 f92f 	bl	800d26c <lv_utils_bsearch>
    int8_t value = 0;
 800c00e:	1e03      	subs	r3, r0, #0
            if(kid_p) {
 800c010:	d0a6      	beq.n	800bf60 <lv_font_get_glyph_dsc_fmt_txt+0x30>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 800c012:	1b80      	subs	r0, r0, r6
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
 800c014:	0900      	lsrs	r0, r0, #4
 800c016:	e7e6      	b.n	800bfe6 <lv_font_get_glyph_dsc_fmt_txt+0xb6>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 800c018:	686b      	ldr	r3, [r5, #4]
 800c01a:	9a02      	ldr	r2, [sp, #8]
 800c01c:	5c9a      	ldrb	r2, [r3, r2]
        if(left_class > 0 && right_class > 0) {
 800c01e:	2a00      	cmp	r2, #0
 800c020:	d09d      	beq.n	800bf5e <lv_font_get_glyph_dsc_fmt_txt+0x2e>
        uint8_t right_class = kdsc->left_class_mapping[gid_right];
 800c022:	5c19      	ldrb	r1, [r3, r0]
        if(left_class > 0 && right_class > 0) {
 800c024:	2900      	cmp	r1, #0
 800c026:	d09a      	beq.n	800bf5e <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            value = kdsc->class_pair_values[(left_class-1)* kdsc->right_class_cnt + (right_class-1)];
 800c028:	7b6b      	ldrb	r3, [r5, #13]
 800c02a:	3a01      	subs	r2, #1
 800c02c:	435a      	muls	r2, r3
 800c02e:	682b      	ldr	r3, [r5, #0]
 800c030:	185b      	adds	r3, r3, r1
 800c032:	189b      	adds	r3, r3, r2
 800c034:	3b01      	subs	r3, #1
 800c036:	781b      	ldrb	r3, [r3, #0]
 800c038:	b25b      	sxtb	r3, r3
 800c03a:	e791      	b.n	800bf60 <lv_font_get_glyph_dsc_fmt_txt+0x30>
 800c03c:	0800be27 	.word	0x0800be27
 800c040:	0800be3b 	.word	0x0800be3b

0800c044 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 800c044:	b510      	push	{r4, lr}
    memset(driver, 0, sizeof(lv_disp_drv_t));
 800c046:	2228      	movs	r2, #40	; 0x28
 800c048:	2100      	movs	r1, #0
{
 800c04a:	0004      	movs	r4, r0
    memset(driver, 0, sizeof(lv_disp_drv_t));
 800c04c:	f001 fd93 	bl	800db76 <memset>

    driver->flush_cb         = NULL;
    driver->hor_res          = LV_HOR_RES_MAX;
 800c050:	23a0      	movs	r3, #160	; 0xa0
    driver->flush_cb         = NULL;
 800c052:	2200      	movs	r2, #0
    driver->hor_res          = LV_HOR_RES_MAX;
 800c054:	8023      	strh	r3, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
 800c056:	3b20      	subs	r3, #32
 800c058:	8063      	strh	r3, [r4, #2]
    driver->buffer           = NULL;
    driver->rotated          = 0;
    driver->color_chroma_key = LV_COLOR_TRANSP;
 800c05a:	1d63      	adds	r3, r4, #5
 800c05c:	77da      	strb	r2, [r3, #31]
 800c05e:	23fc      	movs	r3, #252	; 0xfc
 800c060:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 800c062:	00db      	lsls	r3, r3, #3
 800c064:	430b      	orrs	r3, r1
 800c066:	84a3      	strh	r3, [r4, #36]	; 0x24
 800c068:	055b      	lsls	r3, r3, #21
 800c06a:	1da1      	adds	r1, r4, #6
 800c06c:	0f5b      	lsrs	r3, r3, #29
 800c06e:	77cb      	strb	r3, [r1, #31]

#if LV_ANTIALIAS
    driver->antialiasing = true;
 800c070:	2301      	movs	r3, #1
#if LV_COLOR_SCREEN_TRANSP
    driver->screen_transp = 1;
#endif

#if LV_USE_GPU
    driver->gpu_blend_cb = NULL;
 800c072:	61e2      	str	r2, [r4, #28]
    driver->antialiasing = true;
 800c074:	7223      	strb	r3, [r4, #8]
    driver->gpu_fill_cb  = NULL;
 800c076:	6222      	str	r2, [r4, #32]

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
 800c078:	6162      	str	r2, [r4, #20]
}
 800c07a:	bd10      	pop	{r4, pc}

0800c07c <lv_disp_buf_init>:
 *             It lets LittlevGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 800c07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07e:	0004      	movs	r4, r0
 800c080:	000d      	movs	r5, r1
 800c082:	0017      	movs	r7, r2
 800c084:	001e      	movs	r6, r3
    memset(disp_buf, 0, sizeof(lv_disp_buf_t));
 800c086:	221c      	movs	r2, #28
 800c088:	2100      	movs	r1, #0
 800c08a:	f001 fd74 	bl	800db76 <memset>

    disp_buf->buf1    = buf1;
 800c08e:	6025      	str	r5, [r4, #0]
    disp_buf->buf2    = buf2;
 800c090:	6067      	str	r7, [r4, #4]
    disp_buf->buf_act = disp_buf->buf1;
 800c092:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
 800c094:	60e6      	str	r6, [r4, #12]
}
 800c096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c098 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 800c098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c09a:	0005      	movs	r5, r0
    lv_disp_t * disp = lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 800c09c:	4829      	ldr	r0, [pc, #164]	; (800c144 <lv_disp_drv_register+0xac>)
 800c09e:	f000 fb5e 	bl	800c75e <lv_ll_ins_head>
 800c0a2:	1e04      	subs	r4, r0, #0
    if(!disp) {
 800c0a4:	d100      	bne.n	800c0a8 <lv_disp_drv_register+0x10>
 800c0a6:	e7fe      	b.n	800c0a6 <lv_disp_drv_register+0xe>
        lv_mem_assert(disp);
        return NULL;
    }

    memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
 800c0a8:	0029      	movs	r1, r5
 800c0aa:	2228      	movs	r2, #40	; 0x28
 800c0ac:	f001 fd5a 	bl	800db64 <memcpy>
    memset(&disp->inv_area_joined, 0, sizeof(disp->inv_area_joined));
 800c0b0:	0020      	movs	r0, r4
 800c0b2:	3045      	adds	r0, #69	; 0x45
 800c0b4:	2220      	movs	r2, #32
 800c0b6:	2100      	movs	r1, #0
 800c0b8:	30ff      	adds	r0, #255	; 0xff
 800c0ba:	f001 fd5c 	bl	800db76 <memset>
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
 800c0be:	2280      	movs	r2, #128	; 0x80
 800c0c0:	0020      	movs	r0, r4
 800c0c2:	0052      	lsls	r2, r2, #1
 800c0c4:	2100      	movs	r1, #0
 800c0c6:	3044      	adds	r0, #68	; 0x44
 800c0c8:	f001 fd55 	bl	800db76 <memset>
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 800c0cc:	0020      	movs	r0, r4
 800c0ce:	2144      	movs	r1, #68	; 0x44
 800c0d0:	302c      	adds	r0, #44	; 0x2c
 800c0d2:	f000 fb3a 	bl	800c74a <lv_ll_init>

    if(disp_def == NULL) disp_def = disp;
 800c0d6:	4d1c      	ldr	r5, [pc, #112]	; (800c148 <lv_disp_drv_register+0xb0>)
 800c0d8:	682b      	ldr	r3, [r5, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d100      	bne.n	800c0e0 <lv_disp_drv_register+0x48>
 800c0de:	602c      	str	r4, [r5, #0]

    lv_disp_t * disp_def_tmp = disp_def;
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
                                        new display*/

    disp->inv_p = 0;
 800c0e0:	22b2      	movs	r2, #178	; 0xb2

    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800c0e2:	2100      	movs	r1, #0
    disp->inv_p = 0;
 800c0e4:	0052      	lsls	r2, r2, #1
 800c0e6:	5aa3      	ldrh	r3, [r4, r2]
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800c0e8:	0008      	movs	r0, r1
    disp->inv_p = 0;
 800c0ea:	0a9b      	lsrs	r3, r3, #10
 800c0ec:	029b      	lsls	r3, r3, #10
 800c0ee:	52a3      	strh	r3, [r4, r2]
    lv_disp_t * disp_def_tmp = disp_def;
 800c0f0:	682e      	ldr	r6, [r5, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 800c0f2:	602c      	str	r4, [r5, #0]
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800c0f4:	f7fb f810 	bl	8007118 <lv_obj_create>
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800c0f8:	2100      	movs	r1, #0
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800c0fa:	63a0      	str	r0, [r4, #56]	; 0x38
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800c0fc:	0008      	movs	r0, r1
 800c0fe:	f7fb f80b 	bl	8007118 <lv_obj_create>
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800c102:	2100      	movs	r1, #0
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800c104:	63e0      	str	r0, [r4, #60]	; 0x3c
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800c106:	0008      	movs	r0, r1
 800c108:	f7fb f806 	bl	8007118 <lv_obj_create>
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 800c10c:	4f0f      	ldr	r7, [pc, #60]	; (800c14c <lv_disp_drv_register+0xb4>)
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800c10e:	6420      	str	r0, [r4, #64]	; 0x40
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 800c110:	0039      	movs	r1, r7
 800c112:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800c114:	f7fb f9d7 	bl	80074c6 <lv_obj_set_style>
    lv_obj_set_style(disp->sys_layer, &lv_style_transp);
 800c118:	0039      	movs	r1, r7
 800c11a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800c11c:	f7fb f9d3 	bl	80074c6 <lv_obj_set_style>

    lv_obj_invalidate(disp->act_scr);
 800c120:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800c122:	f7fa fd55 	bl	8006bd0 <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/

    /*Create a refresh task*/
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 800c126:	0023      	movs	r3, r4
 800c128:	2203      	movs	r2, #3
 800c12a:	211e      	movs	r1, #30
 800c12c:	4808      	ldr	r0, [pc, #32]	; (800c150 <lv_disp_drv_register+0xb8>)
    disp_def = disp_def_tmp; /*Revert the default display*/
 800c12e:	602e      	str	r6, [r5, #0]
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 800c130:	f000 fe74 	bl	800ce1c <lv_task_create>
 800c134:	62a0      	str	r0, [r4, #40]	; 0x28
    lv_mem_assert(disp->refr_task);
 800c136:	2800      	cmp	r0, #0
 800c138:	d100      	bne.n	800c13c <lv_disp_drv_register+0xa4>
 800c13a:	e7fe      	b.n	800c13a <lv_disp_drv_register+0xa2>
    if(disp->refr_task == NULL) return NULL;

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 800c13c:	f000 fe81 	bl	800ce42 <lv_task_ready>

    return disp;
}
 800c140:	0020      	movs	r0, r4
 800c142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c144:	20005390 	.word	0x20005390
 800c148:	20001544 	.word	0x20001544
 800c14c:	200050a4 	.word	0x200050a4
 800c150:	080079c9 	.word	0x080079c9

0800c154 <lv_disp_get_default>:
 * Get the default display
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
 800c154:	4b01      	ldr	r3, [pc, #4]	; (800c15c <lv_disp_get_default+0x8>)
 800c156:	6818      	ldr	r0, [r3, #0]
}
 800c158:	4770      	bx	lr
 800c15a:	46c0      	nop			; (mov r8, r8)
 800c15c:	20001544 	.word	0x20001544

0800c160 <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
 800c160:	1e03      	subs	r3, r0, #0
    if(disp == NULL) disp = lv_disp_get_default();
 800c162:	d104      	bne.n	800c16e <lv_disp_get_hor_res+0xe>
    return disp_def;
 800c164:	4b06      	ldr	r3, [pc, #24]	; (800c180 <lv_disp_get_hor_res+0x20>)

    if(disp == NULL)
        return LV_HOR_RES_MAX;
 800c166:	20a0      	movs	r0, #160	; 0xa0
    return disp_def;
 800c168:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL)
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d004      	beq.n	800c178 <lv_disp_get_hor_res+0x18>
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 800c16e:	7a1a      	ldrb	r2, [r3, #8]
 800c170:	0792      	lsls	r2, r2, #30
 800c172:	d402      	bmi.n	800c17a <lv_disp_get_hor_res+0x1a>
 800c174:	2000      	movs	r0, #0
 800c176:	5e18      	ldrsh	r0, [r3, r0]
}
 800c178:	4770      	bx	lr
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 800c17a:	2002      	movs	r0, #2
 800c17c:	5e18      	ldrsh	r0, [r3, r0]
 800c17e:	e7fb      	b.n	800c178 <lv_disp_get_hor_res+0x18>
 800c180:	20001544 	.word	0x20001544

0800c184 <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
 800c184:	1e03      	subs	r3, r0, #0
    if(disp == NULL) disp = lv_disp_get_default();
 800c186:	d104      	bne.n	800c192 <lv_disp_get_ver_res+0xe>
    return disp_def;
 800c188:	4b06      	ldr	r3, [pc, #24]	; (800c1a4 <lv_disp_get_ver_res+0x20>)

    if(disp == NULL)
        return LV_VER_RES_MAX;
 800c18a:	2080      	movs	r0, #128	; 0x80
    return disp_def;
 800c18c:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL)
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d004      	beq.n	800c19c <lv_disp_get_ver_res+0x18>
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
 800c192:	7a1a      	ldrb	r2, [r3, #8]
 800c194:	0792      	lsls	r2, r2, #30
 800c196:	d402      	bmi.n	800c19e <lv_disp_get_ver_res+0x1a>
 800c198:	2002      	movs	r0, #2
 800c19a:	5e18      	ldrsh	r0, [r3, r0]
}
 800c19c:	4770      	bx	lr
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
 800c19e:	2000      	movs	r0, #0
 800c1a0:	5e18      	ldrsh	r0, [r3, r0]
 800c1a2:	e7fb      	b.n	800c19c <lv_disp_get_ver_res+0x18>
 800c1a4:	20001544 	.word	0x20001544

0800c1a8 <lv_disp_get_antialiasing>:
 * Get if anti-aliasing is enabled for a display or not
 * @param disp pointer to a display (NULL to use the default display)
 * @return true: anti-aliasing is enabled; false: disabled
 */
bool lv_disp_get_antialiasing(lv_disp_t * disp)
{
 800c1a8:	1e03      	subs	r3, r0, #0
#if LV_ANTIALIAS == 0
    return false;
#else
    if(disp == NULL) disp = lv_disp_get_default();
 800c1aa:	d104      	bne.n	800c1b6 <lv_disp_get_antialiasing+0xe>
    if(disp == NULL) return false;
 800c1ac:	2000      	movs	r0, #0
    return disp_def;
 800c1ae:	4b04      	ldr	r3, [pc, #16]	; (800c1c0 <lv_disp_get_antialiasing+0x18>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL) return false;
 800c1b2:	4283      	cmp	r3, r0
 800c1b4:	d002      	beq.n	800c1bc <lv_disp_get_antialiasing+0x14>

    return disp->driver.antialiasing ? true : false;
 800c1b6:	7a18      	ldrb	r0, [r3, #8]
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	4018      	ands	r0, r3
#endif
}
 800c1bc:	4770      	bx	lr
 800c1be:	46c0      	nop			; (mov r8, r8)
 800c1c0:	20001544 	.word	0x20001544

0800c1c4 <lv_disp_flush_ready>:
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
    disp_drv->buffer->flushing = 0;
 800c1c4:	2101      	movs	r1, #1
 800c1c6:	6842      	ldr	r2, [r0, #4]
 800c1c8:	7e13      	ldrb	r3, [r2, #24]
 800c1ca:	438b      	bics	r3, r1
 800c1cc:	7613      	strb	r3, [r2, #24]
#if LV_COLOR_SCREEN_TRANSP
    if(disp_drv->screen_transp) {
        memset(disp_drv->buffer->buf_act, 0x00, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif
}
 800c1ce:	4770      	bx	lr

0800c1d0 <lv_disp_get_buf>:
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
 800c1d0:	6840      	ldr	r0, [r0, #4]
}
 800c1d2:	4770      	bx	lr

0800c1d4 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 800c1d4:	6843      	ldr	r3, [r0, #4]
        return true;
    else
        return false;
 800c1d6:	6818      	ldr	r0, [r3, #0]
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	d003      	beq.n	800c1e4 <lv_disp_is_double_buf+0x10>
 800c1dc:	6858      	ldr	r0, [r3, #4]
 800c1de:	1e43      	subs	r3, r0, #1
 800c1e0:	4198      	sbcs	r0, r3
 800c1e2:	b2c0      	uxtb	r0, r0
}
 800c1e4:	4770      	bx	lr

0800c1e6 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
 800c1e6:	b510      	push	{r4, lr}
 800c1e8:	0004      	movs	r4, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 800c1ea:	f7ff fff3 	bl	800c1d4 <lv_disp_is_double_buf>
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	d00a      	beq.n	800c208 <lv_disp_is_true_double_buf+0x22>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	5ea3      	ldrsh	r3, [r4, r2]
 800c1f6:	2202      	movs	r2, #2
 800c1f8:	5ea0      	ldrsh	r0, [r4, r2]
 800c1fa:	4358      	muls	r0, r3
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 800c1fc:	6863      	ldr	r3, [r4, #4]
 800c1fe:	68db      	ldr	r3, [r3, #12]
 800c200:	1ac0      	subs	r0, r0, r3
 800c202:	4243      	negs	r3, r0
 800c204:	4158      	adcs	r0, r3
 800c206:	b2c0      	uxtb	r0, r0
        return true;
    } else {
        return false;
    }
}
 800c208:	bd10      	pop	{r4, pc}
	...

0800c20c <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 800c20c:	0001      	movs	r1, r0
 800c20e:	b510      	push	{r4, lr}
 800c210:	4804      	ldr	r0, [pc, #16]	; (800c224 <lv_indev_get_next+0x18>)
    if(indev == NULL)
 800c212:	2900      	cmp	r1, #0
 800c214:	d102      	bne.n	800c21c <lv_indev_get_next+0x10>
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 800c216:	f000 fae2 	bl	800c7de <lv_ll_get_head>
    else
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
}
 800c21a:	bd10      	pop	{r4, pc}
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 800c21c:	f000 fae7 	bl	800c7ee <lv_ll_get_next>
 800c220:	e7fb      	b.n	800c21a <lv_indev_get_next+0xe>
 800c222:	46c0      	nop			; (mov r8, r8)
 800c224:	20005380 	.word	0x20005380

0800c228 <lv_tick_get>:
uint32_t lv_tick_get(void)
{
#if LV_TICK_CUSTOM == 0
    uint32_t result;
    do {
        tick_irq_flag = 1;
 800c228:	2101      	movs	r1, #1
 800c22a:	4b04      	ldr	r3, [pc, #16]	; (800c23c <lv_tick_get+0x14>)
 800c22c:	7019      	strb	r1, [r3, #0]
        result        = sys_time;
    } while(!tick_irq_flag); /*'lv_tick_inc()' clears this flag which can be in an interrupt.
 800c22e:	781a      	ldrb	r2, [r3, #0]
 800c230:	2a00      	cmp	r2, #0
 800c232:	d0fb      	beq.n	800c22c <lv_tick_get+0x4>
        result        = sys_time;
 800c234:	4b02      	ldr	r3, [pc, #8]	; (800c240 <lv_tick_get+0x18>)
                                Continue until make a non interrupted cycle */

    return result;
 800c236:	6818      	ldr	r0, [r3, #0]
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 800c238:	4770      	bx	lr
 800c23a:	46c0      	nop			; (mov r8, r8)
 800c23c:	2000154c 	.word	0x2000154c
 800c240:	20001548 	.word	0x20001548

0800c244 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 800c244:	b510      	push	{r4, lr}
 800c246:	0004      	movs	r4, r0
    uint32_t act_time = lv_tick_get();
 800c248:	f7ff ffee 	bl	800c228 <lv_tick_get>
    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
        prev_tick = act_time - prev_tick;
    } else {
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
 800c24c:	1b00      	subs	r0, r0, r4
    }

    return prev_tick;
}
 800c24e:	bd10      	pop	{r4, pc}

0800c250 <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(lv_task_t * param)
{
 800c250:	b5f0      	push	{r4, r5, r6, r7, lr}
    (void)param;

    lv_anim_t * a;
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800c252:	4d40      	ldr	r5, [pc, #256]	; (800c354 <anim_task+0x104>)
{
 800c254:	b08d      	sub	sp, #52	; 0x34
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800c256:	0028      	movs	r0, r5
 800c258:	f000 fac1 	bl	800c7de <lv_ll_get_head>
    {
        a->has_run = 0;
 800c25c:	2408      	movs	r4, #8
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800c25e:	2800      	cmp	r0, #0
 800c260:	d10e      	bne.n	800c280 <anim_task+0x30>
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
 800c262:	4f3d      	ldr	r7, [pc, #244]	; (800c358 <anim_task+0x108>)
 800c264:	6838      	ldr	r0, [r7, #0]
 800c266:	f7ff ffed 	bl	800c244 <lv_tick_elaps>
 800c26a:	9001      	str	r0, [sp, #4]
        }

        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed)
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800c26c:	0028      	movs	r0, r5
 800c26e:	f000 fab6 	bl	800c7de <lv_ll_get_head>
        else
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800c272:	1e04      	subs	r4, r0, #0
    while(a != NULL) {
 800c274:	d10d      	bne.n	800c292 <anim_task+0x42>
    }

    last_task_run = lv_tick_get();
 800c276:	f7ff ffd7 	bl	800c228 <lv_tick_get>
 800c27a:	6038      	str	r0, [r7, #0]
}
 800c27c:	b00d      	add	sp, #52	; 0x34
 800c27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        a->has_run = 0;
 800c280:	1c42      	adds	r2, r0, #1
 800c282:	7fd3      	ldrb	r3, [r2, #31]
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800c284:	0001      	movs	r1, r0
        a->has_run = 0;
 800c286:	43a3      	bics	r3, r4
 800c288:	77d3      	strb	r3, [r2, #31]
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800c28a:	0028      	movs	r0, r5
 800c28c:	f000 faaf 	bl	800c7ee <lv_ll_get_next>
 800c290:	e7e5      	b.n	800c25e <anim_task+0xe>
        anim_list_changed = false;
 800c292:	2300      	movs	r3, #0
 800c294:	4a31      	ldr	r2, [pc, #196]	; (800c35c <anim_task+0x10c>)
        if(!a->has_run) {
 800c296:	1c66      	adds	r6, r4, #1
        anim_list_changed = false;
 800c298:	7013      	strb	r3, [r2, #0]
        if(!a->has_run) {
 800c29a:	2208      	movs	r2, #8
 800c29c:	7ff3      	ldrb	r3, [r6, #31]
 800c29e:	4213      	tst	r3, r2
 800c2a0:	d13a      	bne.n	800c318 <anim_task+0xc8>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	77f3      	strb	r3, [r6, #31]
            a->act_time += elaps;
 800c2a6:	8b63      	ldrh	r3, [r4, #26]
 800c2a8:	9a01      	ldr	r2, [sp, #4]
 800c2aa:	189b      	adds	r3, r3, r2
 800c2ac:	b21b      	sxth	r3, r3
 800c2ae:	8363      	strh	r3, [r4, #26]
            if(a->act_time >= 0) {
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	db31      	blt.n	800c318 <anim_task+0xc8>
                if(a->act_time > a->time) a->act_time = a->time;
 800c2b4:	8b22      	ldrh	r2, [r4, #24]
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	dd00      	ble.n	800c2bc <anim_task+0x6c>
 800c2ba:	8362      	strh	r2, [r4, #26]
                new_value = a->path_cb(a);
 800c2bc:	68a3      	ldr	r3, [r4, #8]
 800c2be:	0020      	movs	r0, r4
 800c2c0:	4798      	blx	r3
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 800c2c2:	6863      	ldr	r3, [r4, #4]
                new_value = a->path_cb(a);
 800c2c4:	0001      	movs	r1, r0
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d001      	beq.n	800c2ce <anim_task+0x7e>
 800c2ca:	6820      	ldr	r0, [r4, #0]
 800c2cc:	4798      	blx	r3
                if(a->act_time >= a->time) {
 800c2ce:	231a      	movs	r3, #26
 800c2d0:	5ee2      	ldrsh	r2, [r4, r3]
 800c2d2:	8b23      	ldrh	r3, [r4, #24]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	db1b      	blt.n	800c310 <anim_task+0xc0>
{

    /*Delete the animation if
     * - no repeat and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready */
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 800c2d8:	2203      	movs	r2, #3
 800c2da:	7ff3      	ldrb	r3, [r6, #31]
 800c2dc:	4213      	tst	r3, r2
 800c2de:	d003      	beq.n	800c2e8 <anim_task+0x98>
 800c2e0:	3204      	adds	r2, #4
 800c2e2:	401a      	ands	r2, r3
 800c2e4:	2a05      	cmp	r2, #5
 800c2e6:	d11c      	bne.n	800c322 <anim_task+0xd2>

        /*Create copy from the animation and delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        lv_anim_t a_tmp;
        memcpy(&a_tmp, a, sizeof(lv_anim_t));
 800c2e8:	2224      	movs	r2, #36	; 0x24
 800c2ea:	0021      	movs	r1, r4
 800c2ec:	a803      	add	r0, sp, #12
 800c2ee:	f001 fc39 	bl	800db64 <memcpy>
        lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 800c2f2:	0021      	movs	r1, r4
 800c2f4:	0028      	movs	r0, r5
 800c2f6:	f000 fac7 	bl	800c888 <lv_ll_rem>
        lv_mem_free(a);
 800c2fa:	0020      	movs	r0, r4
 800c2fc:	f000 fbfe 	bl	800cafc <lv_mem_free>
        anim_list_changed = true;
 800c300:	2301      	movs	r3, #1
 800c302:	4a16      	ldr	r2, [pc, #88]	; (800c35c <anim_task+0x10c>)
 800c304:	7013      	strb	r3, [r2, #0]

        /* Call the callback function at the end*/
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 800c306:	9b06      	ldr	r3, [sp, #24]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d001      	beq.n	800c310 <anim_task+0xc0>
 800c30c:	a803      	add	r0, sp, #12
 800c30e:	4798      	blx	r3
        if(anim_list_changed)
 800c310:	4b12      	ldr	r3, [pc, #72]	; (800c35c <anim_task+0x10c>)
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d1a9      	bne.n	800c26c <anim_task+0x1c>
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800c318:	0021      	movs	r1, r4
 800c31a:	0028      	movs	r0, r5
 800c31c:	f000 fa67 	bl	800c7ee <lv_ll_get_next>
 800c320:	e7a7      	b.n	800c272 <anim_task+0x22>
    }
    /*If the animation is not deleted then restart it*/
    else {
        a->act_time = -a->repeat_pause; /*Restart the animation*/
 800c322:	8be2      	ldrh	r2, [r4, #30]
 800c324:	4252      	negs	r2, r2
 800c326:	8362      	strh	r2, [r4, #26]
        /*Swap the start and end values in play back mode*/
        if(a->playback != 0) {
 800c328:	07da      	lsls	r2, r3, #31
 800c32a:	d5f1      	bpl.n	800c310 <anim_task+0xc0>
            /*If now turning back use the 'playback_pause*/
            if(a->playback_now == 0) a->act_time = -a->playback_pause;
 800c32c:	2204      	movs	r2, #4
 800c32e:	4013      	ands	r3, r2
 800c330:	1e19      	subs	r1, r3, #0
 800c332:	d102      	bne.n	800c33a <anim_task+0xea>
 800c334:	8ba2      	ldrh	r2, [r4, #28]
 800c336:	4252      	negs	r2, r2
 800c338:	8362      	strh	r2, [r4, #26]

            /*Toggle the play back state*/
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 800c33a:	424b      	negs	r3, r1
 800c33c:	414b      	adcs	r3, r1
 800c33e:	2104      	movs	r1, #4
 800c340:	7ff2      	ldrb	r2, [r6, #31]
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	438a      	bics	r2, r1
 800c346:	4313      	orrs	r3, r2
 800c348:	77f3      	strb	r3, [r6, #31]
            /*Swap the start and end values*/
            int32_t tmp;
            tmp      = a->start;
 800c34a:	6923      	ldr	r3, [r4, #16]
            a->start = a->end;
 800c34c:	6962      	ldr	r2, [r4, #20]
            a->end   = tmp;
 800c34e:	6163      	str	r3, [r4, #20]
            a->start = a->end;
 800c350:	6122      	str	r2, [r4, #16]
 800c352:	e7dd      	b.n	800c310 <anim_task+0xc0>
 800c354:	200053bc 	.word	0x200053bc
 800c358:	20001550 	.word	0x20001550
 800c35c:	2000154d 	.word	0x2000154d

0800c360 <lv_anim_core_init>:
{
 800c360:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 800c362:	2124      	movs	r1, #36	; 0x24
 800c364:	4806      	ldr	r0, [pc, #24]	; (800c380 <lv_anim_core_init+0x20>)
 800c366:	f000 f9f0 	bl	800c74a <lv_ll_init>
    last_task_run = lv_tick_get();
 800c36a:	f7ff ff5d 	bl	800c228 <lv_tick_get>
 800c36e:	4b05      	ldr	r3, [pc, #20]	; (800c384 <lv_anim_core_init+0x24>)
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800c370:	2203      	movs	r2, #3
    last_task_run = lv_tick_get();
 800c372:	6018      	str	r0, [r3, #0]
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800c374:	211e      	movs	r1, #30
 800c376:	2300      	movs	r3, #0
 800c378:	4803      	ldr	r0, [pc, #12]	; (800c388 <lv_anim_core_init+0x28>)
 800c37a:	f000 fd4f 	bl	800ce1c <lv_task_create>
}
 800c37e:	bd10      	pop	{r4, pc}
 800c380:	200053bc 	.word	0x200053bc
 800c384:	20001550 	.word	0x20001550
 800c388:	0800c251 	.word	0x0800c251

0800c38c <lv_area_set>:
 * @param y1 top coordinate of the area
 * @param x2 right coordinate of the area
 * @param y2 bottom coordinate of the area
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
 800c38c:	b530      	push	{r4, r5, lr}
 800c38e:	ac03      	add	r4, sp, #12
 800c390:	2500      	movs	r5, #0
 800c392:	5f64      	ldrsh	r4, [r4, r5]
    area_p->x1 = x1;
 800c394:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 800c396:	8042      	strh	r2, [r0, #2]
    area_p->x2 = x2;
 800c398:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 800c39a:	80c4      	strh	r4, [r0, #6]
}
 800c39c:	bd30      	pop	{r4, r5, pc}

0800c39e <lv_area_set_height>:
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
    area_p->y2 = area_p->y1 + h - 1;
 800c39e:	1e4b      	subs	r3, r1, #1
 800c3a0:	8841      	ldrh	r1, [r0, #2]
 800c3a2:	18c9      	adds	r1, r1, r3
 800c3a4:	80c1      	strh	r1, [r0, #6]
}
 800c3a6:	4770      	bx	lr

0800c3a8 <lv_area_get_size>:
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 800c3a8:	2304      	movs	r3, #4
 800c3aa:	5ec2      	ldrsh	r2, [r0, r3]
 800c3ac:	2100      	movs	r1, #0
 800c3ae:	5e43      	ldrsh	r3, [r0, r1]
 800c3b0:	1ad2      	subs	r2, r2, r3
 800c3b2:	2106      	movs	r1, #6
 800c3b4:	5e43      	ldrsh	r3, [r0, r1]
 800c3b6:	2102      	movs	r1, #2
 800c3b8:	5e40      	ldrsh	r0, [r0, r1]
 800c3ba:	3201      	adds	r2, #1
 800c3bc:	1a18      	subs	r0, r3, r0
 800c3be:	3001      	adds	r0, #1
 800c3c0:	4350      	muls	r0, r2

    return size;
}
 800c3c2:	4770      	bx	lr

0800c3c4 <lv_area_intersect>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 800c3c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800c3c6:	8813      	ldrh	r3, [r2, #0]
 800c3c8:	880d      	ldrh	r5, [r1, #0]
 800c3ca:	1c1c      	adds	r4, r3, #0
 800c3cc:	b22e      	sxth	r6, r5
 800c3ce:	b21b      	sxth	r3, r3
 800c3d0:	42b3      	cmp	r3, r6
 800c3d2:	da00      	bge.n	800c3d6 <lv_area_intersect+0x12>
 800c3d4:	1c2c      	adds	r4, r5, #0
 800c3d6:	8004      	strh	r4, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800c3d8:	8853      	ldrh	r3, [r2, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800c3da:	b225      	sxth	r5, r4
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800c3dc:	884c      	ldrh	r4, [r1, #2]
 800c3de:	1c1e      	adds	r6, r3, #0
 800c3e0:	b227      	sxth	r7, r4
 800c3e2:	b21b      	sxth	r3, r3
 800c3e4:	42bb      	cmp	r3, r7
 800c3e6:	da00      	bge.n	800c3ea <lv_area_intersect+0x26>
 800c3e8:	1c26      	adds	r6, r4, #0
 800c3ea:	8046      	strh	r6, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800c3ec:	8893      	ldrh	r3, [r2, #4]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800c3ee:	b234      	sxth	r4, r6
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800c3f0:	888e      	ldrh	r6, [r1, #4]
 800c3f2:	1c1f      	adds	r7, r3, #0
 800c3f4:	b21b      	sxth	r3, r3
 800c3f6:	9301      	str	r3, [sp, #4]
 800c3f8:	b233      	sxth	r3, r6
 800c3fa:	469c      	mov	ip, r3
 800c3fc:	9b01      	ldr	r3, [sp, #4]
 800c3fe:	4563      	cmp	r3, ip
 800c400:	dd00      	ble.n	800c404 <lv_area_intersect+0x40>
 800c402:	1c37      	adds	r7, r6, #0
 800c404:	8087      	strh	r7, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800c406:	88d3      	ldrh	r3, [r2, #6]
 800c408:	88c9      	ldrh	r1, [r1, #6]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800c40a:	b23e      	sxth	r6, r7
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800c40c:	1c1a      	adds	r2, r3, #0
 800c40e:	b20f      	sxth	r7, r1
 800c410:	b21b      	sxth	r3, r3
 800c412:	42bb      	cmp	r3, r7
 800c414:	dd00      	ble.n	800c418 <lv_area_intersect+0x54>
 800c416:	1c0a      	adds	r2, r1, #0
 800c418:	80c2      	strh	r2, [r0, #6]
 800c41a:	b213      	sxth	r3, r2

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
        union_ok = false;
 800c41c:	2000      	movs	r0, #0
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 800c41e:	42b5      	cmp	r5, r6
 800c420:	dc04      	bgt.n	800c42c <lv_area_intersect+0x68>
 800c422:	0fe0      	lsrs	r0, r4, #31
 800c424:	17da      	asrs	r2, r3, #31
 800c426:	42a3      	cmp	r3, r4
 800c428:	4150      	adcs	r0, r2
 800c42a:	b2c0      	uxtb	r0, r0
    }

    return union_ok;
}
 800c42c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800c42e <lv_area_join>:
 * @param res_p pointer to an area, the result will be stored here
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 800c42e:	b570      	push	{r4, r5, r6, lr}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 800c430:	8813      	ldrh	r3, [r2, #0]
 800c432:	880d      	ldrh	r5, [r1, #0]
 800c434:	1c1c      	adds	r4, r3, #0
 800c436:	b22e      	sxth	r6, r5
 800c438:	b21b      	sxth	r3, r3
 800c43a:	42b3      	cmp	r3, r6
 800c43c:	dd00      	ble.n	800c440 <lv_area_join+0x12>
 800c43e:	1c2c      	adds	r4, r5, #0
 800c440:	8004      	strh	r4, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 800c442:	8853      	ldrh	r3, [r2, #2]
 800c444:	884d      	ldrh	r5, [r1, #2]
 800c446:	1c1c      	adds	r4, r3, #0
 800c448:	b22e      	sxth	r6, r5
 800c44a:	b21b      	sxth	r3, r3
 800c44c:	42b3      	cmp	r3, r6
 800c44e:	dd00      	ble.n	800c452 <lv_area_join+0x24>
 800c450:	1c2c      	adds	r4, r5, #0
 800c452:	8044      	strh	r4, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 800c454:	8893      	ldrh	r3, [r2, #4]
 800c456:	888d      	ldrh	r5, [r1, #4]
 800c458:	1c1c      	adds	r4, r3, #0
 800c45a:	b22e      	sxth	r6, r5
 800c45c:	b21b      	sxth	r3, r3
 800c45e:	42b3      	cmp	r3, r6
 800c460:	da00      	bge.n	800c464 <lv_area_join+0x36>
 800c462:	1c2c      	adds	r4, r5, #0
 800c464:	8084      	strh	r4, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 800c466:	88d3      	ldrh	r3, [r2, #6]
 800c468:	88c9      	ldrh	r1, [r1, #6]
 800c46a:	1c1a      	adds	r2, r3, #0
 800c46c:	b20c      	sxth	r4, r1
 800c46e:	b21b      	sxth	r3, r3
 800c470:	42a3      	cmp	r3, r4
 800c472:	da00      	bge.n	800c476 <lv_area_join+0x48>
 800c474:	1c0a      	adds	r2, r1, #0
 800c476:	80c2      	strh	r2, [r0, #6]
}
 800c478:	bd70      	pop	{r4, r5, r6, pc}

0800c47a <lv_area_is_on>:
 * @param a1_p pointer to an area.
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 800c47a:	b530      	push	{r4, r5, lr}
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 800c47c:	2304      	movs	r3, #4
 800c47e:	5eca      	ldrsh	r2, [r1, r3]
 800c480:	2300      	movs	r3, #0
 800c482:	5ec4      	ldrsh	r4, [r0, r3]
        return true;
    } else {
        return false;
 800c484:	2300      	movs	r3, #0
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 800c486:	4294      	cmp	r4, r2
 800c488:	dc14      	bgt.n	800c4b4 <lv_area_is_on+0x3a>
 800c48a:	2204      	movs	r2, #4
 800c48c:	5e84      	ldrsh	r4, [r0, r2]
 800c48e:	2500      	movs	r5, #0
 800c490:	5f4a      	ldrsh	r2, [r1, r5]
 800c492:	4294      	cmp	r4, r2
 800c494:	db0e      	blt.n	800c4b4 <lv_area_is_on+0x3a>
 800c496:	2202      	movs	r2, #2
 800c498:	5e84      	ldrsh	r4, [r0, r2]
 800c49a:	2506      	movs	r5, #6
 800c49c:	5f4a      	ldrsh	r2, [r1, r5]
 800c49e:	4294      	cmp	r4, r2
 800c4a0:	dc08      	bgt.n	800c4b4 <lv_area_is_on+0x3a>
 800c4a2:	2306      	movs	r3, #6
 800c4a4:	5ec4      	ldrsh	r4, [r0, r3]
 800c4a6:	2302      	movs	r3, #2
 800c4a8:	5eca      	ldrsh	r2, [r1, r3]
 800c4aa:	17e3      	asrs	r3, r4, #31
 800c4ac:	0fd0      	lsrs	r0, r2, #31
 800c4ae:	4294      	cmp	r4, r2
 800c4b0:	4143      	adcs	r3, r0
 800c4b2:	b2db      	uxtb	r3, r3
    }
}
 800c4b4:	0018      	movs	r0, r3
 800c4b6:	bd30      	pop	{r4, r5, pc}

0800c4b8 <lv_area_is_in>:
 * @param ain_p pointer to an area which could be in 'aholder_p'
 * @param aholder pointer to an area which could involve 'ain_p'
 * @return
 */
bool lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p)
{
 800c4b8:	b530      	push	{r4, r5, lr}
    bool is_in = false;

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	5eca      	ldrsh	r2, [r1, r3]
 800c4be:	2300      	movs	r3, #0
 800c4c0:	5ec4      	ldrsh	r4, [r0, r3]
    bool is_in = false;
 800c4c2:	2300      	movs	r3, #0
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800c4c4:	4294      	cmp	r4, r2
 800c4c6:	db14      	blt.n	800c4f2 <lv_area_is_in+0x3a>
 800c4c8:	2202      	movs	r2, #2
 800c4ca:	5e84      	ldrsh	r4, [r0, r2]
 800c4cc:	2502      	movs	r5, #2
 800c4ce:	5f4a      	ldrsh	r2, [r1, r5]
 800c4d0:	4294      	cmp	r4, r2
 800c4d2:	db0e      	blt.n	800c4f2 <lv_area_is_in+0x3a>
 800c4d4:	2204      	movs	r2, #4
 800c4d6:	5e84      	ldrsh	r4, [r0, r2]
 800c4d8:	2504      	movs	r5, #4
 800c4da:	5f4a      	ldrsh	r2, [r1, r5]
 800c4dc:	4294      	cmp	r4, r2
 800c4de:	dc08      	bgt.n	800c4f2 <lv_area_is_in+0x3a>
 800c4e0:	2306      	movs	r3, #6
 800c4e2:	5ec2      	ldrsh	r2, [r0, r3]
 800c4e4:	2306      	movs	r3, #6
 800c4e6:	5ec9      	ldrsh	r1, [r1, r3]
 800c4e8:	0fd3      	lsrs	r3, r2, #31
 800c4ea:	17c8      	asrs	r0, r1, #31
 800c4ec:	4291      	cmp	r1, r2
 800c4ee:	4143      	adcs	r3, r0
 800c4f0:	b2db      	uxtb	r3, r3
       ain_p->y2 <= aholder_p->y2) {
        is_in = true;
    }

    return is_in;
}
 800c4f2:	0018      	movs	r0, r3
 800c4f4:	bd30      	pop	{r4, r5, pc}

0800c4f6 <lv_circ_init>:
 * @param radius radius of the circle
 */
void lv_circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
    c->x = radius;
    c->y = 0;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	8043      	strh	r3, [r0, #2]
    *tmp = 1 - radius;
 800c4fa:	3301      	adds	r3, #1
    c->x = radius;
 800c4fc:	8002      	strh	r2, [r0, #0]
    *tmp = 1 - radius;
 800c4fe:	1a9a      	subs	r2, r3, r2
 800c500:	800a      	strh	r2, [r1, #0]
}
 800c502:	4770      	bx	lr

0800c504 <lv_circ_cont>:
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
bool lv_circ_cont(lv_point_t * c)
{
    return c->y <= c->x ? true : false;
 800c504:	2202      	movs	r2, #2
 800c506:	5e83      	ldrsh	r3, [r0, r2]
 800c508:	2100      	movs	r1, #0
 800c50a:	5e42      	ldrsh	r2, [r0, r1]
 800c50c:	0fd8      	lsrs	r0, r3, #31
 800c50e:	17d1      	asrs	r1, r2, #31
 800c510:	429a      	cmp	r2, r3
 800c512:	4148      	adcs	r0, r1
 800c514:	b2c0      	uxtb	r0, r0
}
 800c516:	4770      	bx	lr

0800c518 <lv_circ_next>:
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
void lv_circ_next(lv_point_t * c, lv_coord_t * tmp)
{
    c->y++;
 800c518:	8843      	ldrh	r3, [r0, #2]
{
 800c51a:	b530      	push	{r4, r5, lr}
    c->y++;
 800c51c:	3301      	adds	r3, #1
 800c51e:	b29b      	uxth	r3, r3
 800c520:	b21a      	sxth	r2, r3
 800c522:	8042      	strh	r2, [r0, #2]

    if(*tmp <= 0) {
 800c524:	2500      	movs	r5, #0
 800c526:	5f4c      	ldrsh	r4, [r1, r5]
 800c528:	2c00      	cmp	r4, #0
 800c52a:	dc04      	bgt.n	800c536 <lv_circ_next+0x1e>
        (*tmp) += 2 * c->y + 1; /*Change in decision criterion for y -> y+1*/
 800c52c:	005b      	lsls	r3, r3, #1
 800c52e:	3401      	adds	r4, #1
 800c530:	191b      	adds	r3, r3, r4
 800c532:	800b      	strh	r3, [r1, #0]
    } else {
        c->x--;
        (*tmp) += 2 * (c->y - c->x) + 1; /*Change for y -> y+1, x -> x-1*/
    }
}
 800c534:	bd30      	pop	{r4, r5, pc}
        c->x--;
 800c536:	8803      	ldrh	r3, [r0, #0]
 800c538:	3b01      	subs	r3, #1
 800c53a:	b21b      	sxth	r3, r3
 800c53c:	8003      	strh	r3, [r0, #0]
        (*tmp) += 2 * (c->y - c->x) + 1; /*Change for y -> y+1, x -> x-1*/
 800c53e:	1ad2      	subs	r2, r2, r3
 800c540:	880b      	ldrh	r3, [r1, #0]
 800c542:	0052      	lsls	r2, r2, #1
 800c544:	3301      	adds	r3, #1
 800c546:	18d2      	adds	r2, r2, r3
 800c548:	800a      	strh	r2, [r1, #0]
}
 800c54a:	e7f3      	b.n	800c534 <lv_circ_next+0x1c>

0800c54c <lv_fs_get_real_path>:

    path++; /*Ignore the driver letter*/

    while(*path != '\0') {
        if(*path == ':' || *path == '\\' || *path == '/') {
            path++;
 800c54c:	3001      	adds	r0, #1
    while(*path != '\0') {
 800c54e:	7803      	ldrb	r3, [r0, #0]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d005      	beq.n	800c560 <lv_fs_get_real_path+0x14>
        if(*path == ':' || *path == '\\' || *path == '/') {
 800c554:	2b3a      	cmp	r3, #58	; 0x3a
 800c556:	d0f9      	beq.n	800c54c <lv_fs_get_real_path>
 800c558:	2b5c      	cmp	r3, #92	; 0x5c
 800c55a:	d0f7      	beq.n	800c54c <lv_fs_get_real_path>
 800c55c:	2b2f      	cmp	r3, #47	; 0x2f
 800c55e:	d0f5      	beq.n	800c54c <lv_fs_get_real_path>
            break;
        }
    }

    return path;
}
 800c560:	4770      	bx	lr
	...

0800c564 <lv_fs_init>:
{
 800c564:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
 800c566:	2144      	movs	r1, #68	; 0x44
 800c568:	4801      	ldr	r0, [pc, #4]	; (800c570 <lv_fs_init+0xc>)
 800c56a:	f000 f8ee 	bl	800c74a <lv_ll_init>
}
 800c56e:	bd10      	pop	{r4, pc}
 800c570:	200053a8 	.word	0x200053a8

0800c574 <lv_fs_close>:
{
 800c574:	b570      	push	{r4, r5, r6, lr}
 800c576:	0004      	movs	r4, r0
    if(file_p->drv == NULL) {
 800c578:	6840      	ldr	r0, [r0, #4]
        return LV_FS_RES_INV_PARAM;
 800c57a:	250b      	movs	r5, #11
    if(file_p->drv == NULL) {
 800c57c:	2800      	cmp	r0, #0
 800c57e:	d00c      	beq.n	800c59a <lv_fs_close+0x26>
    if(file_p->drv->close_cb == NULL) {
 800c580:	6903      	ldr	r3, [r0, #16]
        return LV_FS_RES_NOT_IMP;
 800c582:	3d02      	subs	r5, #2
    if(file_p->drv->close_cb == NULL) {
 800c584:	2b00      	cmp	r3, #0
 800c586:	d008      	beq.n	800c59a <lv_fs_close+0x26>
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 800c588:	6821      	ldr	r1, [r4, #0]
 800c58a:	4798      	blx	r3
 800c58c:	0005      	movs	r5, r0
    lv_mem_free(file_p->file_d); /*Clean up*/
 800c58e:	6820      	ldr	r0, [r4, #0]
 800c590:	f000 fab4 	bl	800cafc <lv_mem_free>
    file_p->file_d = NULL;
 800c594:	2300      	movs	r3, #0
 800c596:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
 800c598:	6063      	str	r3, [r4, #4]
}
 800c59a:	0028      	movs	r0, r5
 800c59c:	bd70      	pop	{r4, r5, r6, pc}

0800c59e <lv_fs_read>:
{
 800c59e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c5a0:	0006      	movs	r6, r0
 800c5a2:	1e1c      	subs	r4, r3, #0
    if(br != NULL) *br = 0;
 800c5a4:	d001      	beq.n	800c5aa <lv_fs_read+0xc>
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	6023      	str	r3, [r4, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 800c5aa:	6870      	ldr	r0, [r6, #4]
 800c5ac:	230b      	movs	r3, #11
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	d010      	beq.n	800c5d4 <lv_fs_read+0x36>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 800c5b2:	6985      	ldr	r5, [r0, #24]
 800c5b4:	3b02      	subs	r3, #2
 800c5b6:	2d00      	cmp	r5, #0
 800c5b8:	d00c      	beq.n	800c5d4 <lv_fs_read+0x36>
    uint32_t br_tmp = 0;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	9303      	str	r3, [sp, #12]
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 800c5be:	ab03      	add	r3, sp, #12
 800c5c0:	9300      	str	r3, [sp, #0]
 800c5c2:	0013      	movs	r3, r2
 800c5c4:	000a      	movs	r2, r1
 800c5c6:	6831      	ldr	r1, [r6, #0]
 800c5c8:	47a8      	blx	r5
 800c5ca:	0003      	movs	r3, r0
    if(br != NULL) *br = br_tmp;
 800c5cc:	2c00      	cmp	r4, #0
 800c5ce:	d001      	beq.n	800c5d4 <lv_fs_read+0x36>
 800c5d0:	9a03      	ldr	r2, [sp, #12]
 800c5d2:	6022      	str	r2, [r4, #0]
}
 800c5d4:	0018      	movs	r0, r3
 800c5d6:	b004      	add	sp, #16
 800c5d8:	bd70      	pop	{r4, r5, r6, pc}

0800c5da <lv_fs_seek>:
{
 800c5da:	b570      	push	{r4, r5, r6, lr}
 800c5dc:	0005      	movs	r5, r0
    if(file_p->drv == NULL) {
 800c5de:	6840      	ldr	r0, [r0, #4]
{
 800c5e0:	000a      	movs	r2, r1
        return LV_FS_RES_INV_PARAM;
 800c5e2:	230b      	movs	r3, #11
    if(file_p->drv == NULL) {
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	d006      	beq.n	800c5f6 <lv_fs_seek+0x1c>
    if(file_p->drv->seek_cb == NULL) {
 800c5e8:	6a04      	ldr	r4, [r0, #32]
        return LV_FS_RES_NOT_IMP;
 800c5ea:	3b02      	subs	r3, #2
    if(file_p->drv->seek_cb == NULL) {
 800c5ec:	2c00      	cmp	r4, #0
 800c5ee:	d002      	beq.n	800c5f6 <lv_fs_seek+0x1c>
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 800c5f0:	6829      	ldr	r1, [r5, #0]
 800c5f2:	47a0      	blx	r4
 800c5f4:	0003      	movs	r3, r0
}
 800c5f6:	0018      	movs	r0, r3
 800c5f8:	bd70      	pop	{r4, r5, r6, pc}

0800c5fa <lv_fs_drv_init>:
{
 800c5fa:	b510      	push	{r4, lr}
    memset(drv, 0, sizeof(lv_fs_drv_t));
 800c5fc:	2244      	movs	r2, #68	; 0x44
 800c5fe:	2100      	movs	r1, #0
 800c600:	f001 fab9 	bl	800db76 <memset>
}
 800c604:	bd10      	pop	{r4, pc}
	...

0800c608 <lv_fs_drv_register>:
{
 800c608:	b510      	push	{r4, lr}
 800c60a:	0004      	movs	r4, r0
    new_drv = lv_ll_ins_head(&LV_GC_ROOT(_lv_drv_ll));
 800c60c:	4805      	ldr	r0, [pc, #20]	; (800c624 <lv_fs_drv_register+0x1c>)
 800c60e:	f000 f8a6 	bl	800c75e <lv_ll_ins_head>
    lv_mem_assert(new_drv);
 800c612:	2800      	cmp	r0, #0
 800c614:	d100      	bne.n	800c618 <lv_fs_drv_register+0x10>
 800c616:	e7fe      	b.n	800c616 <lv_fs_drv_register+0xe>
    memcpy(new_drv, drv_p, sizeof(lv_fs_drv_t));
 800c618:	2244      	movs	r2, #68	; 0x44
 800c61a:	0021      	movs	r1, r4
 800c61c:	f001 faa2 	bl	800db64 <memcpy>
}
 800c620:	bd10      	pop	{r4, pc}
 800c622:	46c0      	nop			; (mov r8, r8)
 800c624:	200053a8 	.word	0x200053a8

0800c628 <lv_fs_get_drv>:
{
 800c628:	b570      	push	{r4, r5, r6, lr}
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 800c62a:	4c08      	ldr	r4, [pc, #32]	; (800c64c <lv_fs_get_drv+0x24>)
{
 800c62c:	0005      	movs	r5, r0
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 800c62e:	0020      	movs	r0, r4
 800c630:	f000 f8d5 	bl	800c7de <lv_ll_get_head>
 800c634:	2800      	cmp	r0, #0
 800c636:	d100      	bne.n	800c63a <lv_fs_get_drv+0x12>
}
 800c638:	bd70      	pop	{r4, r5, r6, pc}
        if(drv->letter == letter) {
 800c63a:	7803      	ldrb	r3, [r0, #0]
 800c63c:	42ab      	cmp	r3, r5
 800c63e:	d0fb      	beq.n	800c638 <lv_fs_get_drv+0x10>
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 800c640:	0001      	movs	r1, r0
 800c642:	0020      	movs	r0, r4
 800c644:	f000 f8d3 	bl	800c7ee <lv_ll_get_next>
 800c648:	e7f4      	b.n	800c634 <lv_fs_get_drv+0xc>
 800c64a:	46c0      	nop			; (mov r8, r8)
 800c64c:	200053a8 	.word	0x200053a8

0800c650 <lv_fs_open>:
    file_p->drv    = NULL;
 800c650:	2300      	movs	r3, #0
{
 800c652:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c654:	b085      	sub	sp, #20
 800c656:	0004      	movs	r4, r0
 800c658:	000f      	movs	r7, r1
 800c65a:	9203      	str	r2, [sp, #12]
    file_p->drv    = NULL;
 800c65c:	6043      	str	r3, [r0, #4]
    file_p->file_d = NULL;
 800c65e:	6003      	str	r3, [r0, #0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 800c660:	4299      	cmp	r1, r3
 800c662:	d035      	beq.n	800c6d0 <lv_fs_open+0x80>
    file_p->drv = lv_fs_get_drv(letter);
 800c664:	7808      	ldrb	r0, [r1, #0]
 800c666:	f7ff ffdf 	bl	800c628 <lv_fs_get_drv>
 800c66a:	6060      	str	r0, [r4, #4]
    if(file_p->drv == NULL) {
 800c66c:	2800      	cmp	r0, #0
 800c66e:	d104      	bne.n	800c67a <lv_fs_open+0x2a>
        return LV_FS_RES_NOT_EX;
 800c670:	2503      	movs	r5, #3
        file_p->file_d = NULL;
 800c672:	6020      	str	r0, [r4, #0]
}
 800c674:	0028      	movs	r0, r5
 800c676:	b005      	add	sp, #20
 800c678:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(file_p->drv->ready_cb != NULL) {
 800c67a:	6883      	ldr	r3, [r0, #8]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d006      	beq.n	800c68e <lv_fs_open+0x3e>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
 800c680:	4798      	blx	r3
 800c682:	2800      	cmp	r0, #0
 800c684:	d103      	bne.n	800c68e <lv_fs_open+0x3e>
            file_p->drv    = NULL;
 800c686:	6060      	str	r0, [r4, #4]
            file_p->file_d = NULL;
 800c688:	6020      	str	r0, [r4, #0]
            return LV_FS_RES_HW_ERR;
 800c68a:	2501      	movs	r5, #1
 800c68c:	e7f2      	b.n	800c674 <lv_fs_open+0x24>
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
 800c68e:	6863      	ldr	r3, [r4, #4]
 800c690:	8858      	ldrh	r0, [r3, #2]
 800c692:	f000 f9ff 	bl	800ca94 <lv_mem_alloc>
 800c696:	1e06      	subs	r6, r0, #0
 800c698:	6020      	str	r0, [r4, #0]
    lv_mem_assert(file_p->file_d);
 800c69a:	d100      	bne.n	800c69e <lv_fs_open+0x4e>
 800c69c:	e7fe      	b.n	800c69c <lv_fs_open+0x4c>
    if(file_p->drv->open_cb == NULL) {
 800c69e:	6863      	ldr	r3, [r4, #4]
        return LV_FS_RES_NOT_IMP;
 800c6a0:	2509      	movs	r5, #9
    if(file_p->drv->open_cb == NULL) {
 800c6a2:	9301      	str	r3, [sp, #4]
 800c6a4:	68db      	ldr	r3, [r3, #12]
 800c6a6:	9302      	str	r3, [sp, #8]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d0e3      	beq.n	800c674 <lv_fs_open+0x24>
    const char * real_path = lv_fs_get_real_path(path);
 800c6ac:	0038      	movs	r0, r7
 800c6ae:	f7ff ff4d 	bl	800c54c <lv_fs_get_real_path>
    lv_fs_res_t res        = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
 800c6b2:	9d02      	ldr	r5, [sp, #8]
    const char * real_path = lv_fs_get_real_path(path);
 800c6b4:	0002      	movs	r2, r0
    lv_fs_res_t res        = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
 800c6b6:	9b03      	ldr	r3, [sp, #12]
 800c6b8:	0031      	movs	r1, r6
 800c6ba:	9801      	ldr	r0, [sp, #4]
 800c6bc:	47a8      	blx	r5
 800c6be:	1e05      	subs	r5, r0, #0
    if(res != LV_FS_RES_OK) {
 800c6c0:	d0d8      	beq.n	800c674 <lv_fs_open+0x24>
        lv_mem_free(file_p->file_d);
 800c6c2:	6820      	ldr	r0, [r4, #0]
 800c6c4:	f000 fa1a 	bl	800cafc <lv_mem_free>
        file_p->file_d = NULL;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	6023      	str	r3, [r4, #0]
        file_p->drv    = NULL;
 800c6cc:	6063      	str	r3, [r4, #4]
 800c6ce:	e7d1      	b.n	800c674 <lv_fs_open+0x24>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 800c6d0:	250b      	movs	r5, #11
 800c6d2:	e7cf      	b.n	800c674 <lv_fs_open+0x24>

0800c6d4 <lv_fs_get_ext>:
{
 800c6d4:	b510      	push	{r4, lr}
 800c6d6:	0004      	movs	r4, r0
    for(i = strlen(fn); i > 0; i--) {
 800c6d8:	f7f3 fd1c 	bl	8000114 <strlen>
 800c6dc:	b280      	uxth	r0, r0
 800c6de:	2800      	cmp	r0, #0
 800c6e0:	d101      	bne.n	800c6e6 <lv_fs_get_ext+0x12>
            return ""; /*No extension if a '\' or '/' found*/
 800c6e2:	4807      	ldr	r0, [pc, #28]	; (800c700 <lv_fs_get_ext+0x2c>)
 800c6e4:	e004      	b.n	800c6f0 <lv_fs_get_ext+0x1c>
        if(fn[i] == '.') {
 800c6e6:	5c23      	ldrb	r3, [r4, r0]
 800c6e8:	2b2e      	cmp	r3, #46	; 0x2e
 800c6ea:	d102      	bne.n	800c6f2 <lv_fs_get_ext+0x1e>
            return &fn[i + 1];
 800c6ec:	3001      	adds	r0, #1
 800c6ee:	1820      	adds	r0, r4, r0
}
 800c6f0:	bd10      	pop	{r4, pc}
        } else if(fn[i] == '/' || fn[i] == '\\') {
 800c6f2:	2b2f      	cmp	r3, #47	; 0x2f
 800c6f4:	d0f5      	beq.n	800c6e2 <lv_fs_get_ext+0xe>
 800c6f6:	2b5c      	cmp	r3, #92	; 0x5c
 800c6f8:	d0f3      	beq.n	800c6e2 <lv_fs_get_ext+0xe>
    for(i = strlen(fn); i > 0; i--) {
 800c6fa:	3801      	subs	r0, #1
 800c6fc:	e7ee      	b.n	800c6dc <lv_fs_get_ext+0x8>
 800c6fe:	46c0      	nop			; (mov r8, r8)
 800c700:	0800de50 	.word	0x0800de50

0800c704 <node_set_next.isra.0>:
 * Set the 'next node pointer' of a node
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
 800c704:	b507      	push	{r0, r1, r2, lr}
 800c706:	1e0b      	subs	r3, r1, #0
 800c708:	9201      	str	r2, [sp, #4]
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 800c70a:	d009      	beq.n	800c720 <node_set_next.isra.0+0x1c>
 800c70c:	6800      	ldr	r0, [r0, #0]

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
    if(next)
 800c70e:	0011      	movs	r1, r2
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 800c710:	3004      	adds	r0, #4
 800c712:	1818      	adds	r0, r3, r0
 800c714:	2204      	movs	r2, #4
    if(next)
 800c716:	2900      	cmp	r1, #0
 800c718:	d003      	beq.n	800c722 <node_set_next.isra.0+0x1e>
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 800c71a:	a901      	add	r1, sp, #4
 800c71c:	f001 fa22 	bl	800db64 <memcpy>
    else
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
}
 800c720:	bd07      	pop	{r0, r1, r2, pc}
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 800c722:	f001 fa28 	bl	800db76 <memset>
 800c726:	e7fb      	b.n	800c720 <node_set_next.isra.0+0x1c>

0800c728 <node_set_prev.isra.2>:
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
 800c728:	b507      	push	{r0, r1, r2, lr}
 800c72a:	1e0b      	subs	r3, r1, #0
 800c72c:	9201      	str	r2, [sp, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 800c72e:	d008      	beq.n	800c742 <node_set_prev.isra.2+0x1a>
 800c730:	6800      	ldr	r0, [r0, #0]
    if(prev)
 800c732:	0011      	movs	r1, r2
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 800c734:	1818      	adds	r0, r3, r0
 800c736:	2204      	movs	r2, #4
    if(prev)
 800c738:	2900      	cmp	r1, #0
 800c73a:	d003      	beq.n	800c744 <node_set_prev.isra.2+0x1c>
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 800c73c:	a901      	add	r1, sp, #4
 800c73e:	f001 fa11 	bl	800db64 <memcpy>
}
 800c742:	bd07      	pop	{r0, r1, r2, pc}
        memset(act + LL_PREV_P_OFFSET(ll_p), 0, node_p_size);
 800c744:	f001 fa17 	bl	800db76 <memset>
 800c748:	e7fb      	b.n	800c742 <node_set_prev.isra.2+0x1a>

0800c74a <lv_ll_init>:
    ll_p->head = NULL;
 800c74a:	2300      	movs	r3, #0
 800c74c:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
 800c74e:	6083      	str	r3, [r0, #8]
    if(node_size & 0x3) {
 800c750:	3303      	adds	r3, #3
 800c752:	4219      	tst	r1, r3
 800c754:	d001      	beq.n	800c75a <lv_ll_init+0x10>
        node_size = node_size & (~0x3);
 800c756:	4399      	bics	r1, r3
        node_size += 4;
 800c758:	3104      	adds	r1, #4
    ll_p->n_size = node_size;
 800c75a:	6001      	str	r1, [r0, #0]
}
 800c75c:	4770      	bx	lr

0800c75e <lv_ll_ins_head>:
{
 800c75e:	b570      	push	{r4, r5, r6, lr}
 800c760:	0004      	movs	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800c762:	6800      	ldr	r0, [r0, #0]
 800c764:	3008      	adds	r0, #8
 800c766:	f000 f995 	bl	800ca94 <lv_mem_alloc>
 800c76a:	1e05      	subs	r5, r0, #0
    if(n_new != NULL) {
 800c76c:	d015      	beq.n	800c79a <lv_ll_ins_head+0x3c>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 800c76e:	0001      	movs	r1, r0
 800c770:	2200      	movs	r2, #0
 800c772:	0020      	movs	r0, r4
 800c774:	f7ff ffd8 	bl	800c728 <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 800c778:	0029      	movs	r1, r5
 800c77a:	6862      	ldr	r2, [r4, #4]
 800c77c:	0020      	movs	r0, r4
 800c77e:	f7ff ffc1 	bl	800c704 <node_set_next.isra.0>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 800c782:	6861      	ldr	r1, [r4, #4]
 800c784:	2900      	cmp	r1, #0
 800c786:	d003      	beq.n	800c790 <lv_ll_ins_head+0x32>
            node_set_prev(ll_p, ll_p->head, n_new);
 800c788:	002a      	movs	r2, r5
 800c78a:	0020      	movs	r0, r4
 800c78c:	f7ff ffcc 	bl	800c728 <node_set_prev.isra.2>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 800c790:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 800c792:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 800c794:	2b00      	cmp	r3, #0
 800c796:	d100      	bne.n	800c79a <lv_ll_ins_head+0x3c>
            ll_p->tail = n_new;
 800c798:	60a5      	str	r5, [r4, #8]
}
 800c79a:	0028      	movs	r0, r5
 800c79c:	bd70      	pop	{r4, r5, r6, pc}

0800c79e <lv_ll_ins_tail>:
{
 800c79e:	b570      	push	{r4, r5, r6, lr}
 800c7a0:	0004      	movs	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800c7a2:	6800      	ldr	r0, [r0, #0]
 800c7a4:	3008      	adds	r0, #8
 800c7a6:	f000 f975 	bl	800ca94 <lv_mem_alloc>
 800c7aa:	1e05      	subs	r5, r0, #0
    if(n_new == NULL) return NULL;
 800c7ac:	d015      	beq.n	800c7da <lv_ll_ins_tail+0x3c>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 800c7ae:	0001      	movs	r1, r0
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	0020      	movs	r0, r4
 800c7b4:	f7ff ffa6 	bl	800c704 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
 800c7b8:	0029      	movs	r1, r5
 800c7ba:	68a2      	ldr	r2, [r4, #8]
 800c7bc:	0020      	movs	r0, r4
 800c7be:	f7ff ffb3 	bl	800c728 <node_set_prev.isra.2>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 800c7c2:	68a1      	ldr	r1, [r4, #8]
 800c7c4:	2900      	cmp	r1, #0
 800c7c6:	d003      	beq.n	800c7d0 <lv_ll_ins_tail+0x32>
            node_set_next(ll_p, ll_p->tail, n_new);
 800c7c8:	002a      	movs	r2, r5
 800c7ca:	0020      	movs	r0, r4
 800c7cc:	f7ff ff9a 	bl	800c704 <node_set_next.isra.0>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800c7d0:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 800c7d2:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d100      	bne.n	800c7da <lv_ll_ins_tail+0x3c>
            ll_p->head = n_new;
 800c7d8:	6065      	str	r5, [r4, #4]
}
 800c7da:	0028      	movs	r0, r5
 800c7dc:	bd70      	pop	{r4, r5, r6, pc}

0800c7de <lv_ll_get_head>:
    if(ll_p != NULL) {
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	d000      	beq.n	800c7e4 <lv_ll_get_head+0x6>
        head = ll_p->head;
 800c7e2:	6840      	ldr	r0, [r0, #4]
}
 800c7e4:	4770      	bx	lr

0800c7e6 <lv_ll_get_tail>:
    if(ll_p != NULL) {
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	d000      	beq.n	800c7ec <lv_ll_get_tail+0x6>
        tail = ll_p->tail;
 800c7ea:	6880      	ldr	r0, [r0, #8]
}
 800c7ec:	4770      	bx	lr

0800c7ee <lv_ll_get_next>:
    void * next = NULL;
 800c7ee:	2300      	movs	r3, #0
{
 800c7f0:	b507      	push	{r0, r1, r2, lr}
    void * next = NULL;
 800c7f2:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
 800c7f4:	4298      	cmp	r0, r3
 800c7f6:	d006      	beq.n	800c806 <lv_ll_get_next+0x18>
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 800c7f8:	6803      	ldr	r3, [r0, #0]
 800c7fa:	2204      	movs	r2, #4
 800c7fc:	3304      	adds	r3, #4
 800c7fe:	18c9      	adds	r1, r1, r3
 800c800:	a801      	add	r0, sp, #4
 800c802:	f001 f9af 	bl	800db64 <memcpy>
}
 800c806:	9801      	ldr	r0, [sp, #4]
 800c808:	bd0e      	pop	{r1, r2, r3, pc}

0800c80a <lv_ll_get_prev>:
    void * prev = NULL;
 800c80a:	2300      	movs	r3, #0
{
 800c80c:	b507      	push	{r0, r1, r2, lr}
    void * prev = NULL;
 800c80e:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
 800c810:	4298      	cmp	r0, r3
 800c812:	d005      	beq.n	800c820 <lv_ll_get_prev+0x16>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 800c814:	6803      	ldr	r3, [r0, #0]
 800c816:	2204      	movs	r2, #4
 800c818:	18c9      	adds	r1, r1, r3
 800c81a:	a801      	add	r0, sp, #4
 800c81c:	f001 f9a2 	bl	800db64 <memcpy>
}
 800c820:	9801      	ldr	r0, [sp, #4]
 800c822:	bd0e      	pop	{r1, r2, r3, pc}

0800c824 <lv_ll_ins_prev>:
{
 800c824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c826:	0005      	movs	r5, r0
 800c828:	000c      	movs	r4, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
 800c82a:	2800      	cmp	r0, #0
 800c82c:	d02a      	beq.n	800c884 <lv_ll_ins_prev+0x60>
 800c82e:	2900      	cmp	r1, #0
 800c830:	d005      	beq.n	800c83e <lv_ll_ins_prev+0x1a>
    if(lv_ll_get_head(ll_p) == n_act) {
 800c832:	6843      	ldr	r3, [r0, #4]
 800c834:	4299      	cmp	r1, r3
 800c836:	d104      	bne.n	800c842 <lv_ll_ins_prev+0x1e>
        n_new = lv_ll_ins_head(ll_p);
 800c838:	f7ff ff91 	bl	800c75e <lv_ll_ins_head>
 800c83c:	0004      	movs	r4, r0
}
 800c83e:	0020      	movs	r0, r4
 800c840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800c842:	6800      	ldr	r0, [r0, #0]
 800c844:	3008      	adds	r0, #8
 800c846:	f000 f925 	bl	800ca94 <lv_mem_alloc>
 800c84a:	1e06      	subs	r6, r0, #0
        if(n_new == NULL) return NULL;
 800c84c:	d018      	beq.n	800c880 <lv_ll_ins_prev+0x5c>
        n_prev = lv_ll_get_prev(ll_p, n_act);
 800c84e:	0021      	movs	r1, r4
 800c850:	0028      	movs	r0, r5
 800c852:	f7ff ffda 	bl	800c80a <lv_ll_get_prev>
 800c856:	0007      	movs	r7, r0
        node_set_next(ll_p, n_prev, n_new);
 800c858:	0001      	movs	r1, r0
 800c85a:	0032      	movs	r2, r6
 800c85c:	0028      	movs	r0, r5
 800c85e:	f7ff ff51 	bl	800c704 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, n_prev);
 800c862:	003a      	movs	r2, r7
 800c864:	0031      	movs	r1, r6
 800c866:	0028      	movs	r0, r5
 800c868:	f7ff ff5e 	bl	800c728 <node_set_prev.isra.2>
        node_set_prev(ll_p, n_act, n_new);
 800c86c:	0032      	movs	r2, r6
 800c86e:	0021      	movs	r1, r4
 800c870:	0028      	movs	r0, r5
 800c872:	f7ff ff59 	bl	800c728 <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, n_act);
 800c876:	0022      	movs	r2, r4
 800c878:	0031      	movs	r1, r6
 800c87a:	0028      	movs	r0, r5
 800c87c:	f7ff ff42 	bl	800c704 <node_set_next.isra.0>
        if(n_new == NULL) return NULL;
 800c880:	0034      	movs	r4, r6
 800c882:	e7dc      	b.n	800c83e <lv_ll_ins_prev+0x1a>
    if(NULL == ll_p || NULL == n_act) return NULL;
 800c884:	0004      	movs	r4, r0
 800c886:	e7da      	b.n	800c83e <lv_ll_ins_prev+0x1a>

0800c888 <lv_ll_rem>:
{
 800c888:	b570      	push	{r4, r5, r6, lr}
 800c88a:	0004      	movs	r4, r0
 800c88c:	000d      	movs	r5, r1
    if(ll_p != NULL) {
 800c88e:	2800      	cmp	r0, #0
 800c890:	d01b      	beq.n	800c8ca <lv_ll_rem+0x42>
    if(lv_ll_get_head(ll_p) == node_p) {
 800c892:	6843      	ldr	r3, [r0, #4]
 800c894:	4299      	cmp	r1, r3
 800c896:	d109      	bne.n	800c8ac <lv_ll_rem+0x24>
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 800c898:	0029      	movs	r1, r5
 800c89a:	0020      	movs	r0, r4
 800c89c:	f7ff ffa7 	bl	800c7ee <lv_ll_get_next>
            node_set_prev(ll_p, ll_p->head, NULL);
 800c8a0:	2200      	movs	r2, #0
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 800c8a2:	1e01      	subs	r1, r0, #0
 800c8a4:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
 800c8a6:	d123      	bne.n	800c8f0 <lv_ll_rem+0x68>
            ll_p->tail = NULL;
 800c8a8:	60a0      	str	r0, [r4, #8]
}
 800c8aa:	bd70      	pop	{r4, r5, r6, pc}
    } else if(lv_ll_get_tail(ll_p) == node_p) {
 800c8ac:	6883      	ldr	r3, [r0, #8]
 800c8ae:	4299      	cmp	r1, r3
 800c8b0:	d10d      	bne.n	800c8ce <lv_ll_rem+0x46>
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
 800c8b2:	f7ff ffaa 	bl	800c80a <lv_ll_get_prev>
 800c8b6:	1e01      	subs	r1, r0, #0
 800c8b8:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
 800c8ba:	d101      	bne.n	800c8c0 <lv_ll_rem+0x38>
            ll_p->head = NULL;
 800c8bc:	6060      	str	r0, [r4, #4]
 800c8be:	e7f4      	b.n	800c8aa <lv_ll_rem+0x22>
            node_set_next(ll_p, ll_p->tail, NULL);
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	0020      	movs	r0, r4
 800c8c4:	f7ff ff1e 	bl	800c704 <node_set_next.isra.0>
 800c8c8:	e7ef      	b.n	800c8aa <lv_ll_rem+0x22>
    if(lv_ll_get_head(ll_p) == node_p) {
 800c8ca:	2900      	cmp	r1, #0
 800c8cc:	d0e4      	beq.n	800c898 <lv_ll_rem+0x10>
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
 800c8ce:	0029      	movs	r1, r5
 800c8d0:	0020      	movs	r0, r4
 800c8d2:	f7ff ff9a 	bl	800c80a <lv_ll_get_prev>
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 800c8d6:	0029      	movs	r1, r5
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
 800c8d8:	0006      	movs	r6, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 800c8da:	0020      	movs	r0, r4
 800c8dc:	f7ff ff87 	bl	800c7ee <lv_ll_get_next>
 800c8e0:	0005      	movs	r5, r0
        node_set_next(ll_p, n_prev, n_next);
 800c8e2:	0002      	movs	r2, r0
 800c8e4:	0031      	movs	r1, r6
 800c8e6:	0020      	movs	r0, r4
 800c8e8:	f7ff ff0c 	bl	800c704 <node_set_next.isra.0>
        node_set_prev(ll_p, n_next, n_prev);
 800c8ec:	0032      	movs	r2, r6
 800c8ee:	0029      	movs	r1, r5
 800c8f0:	0020      	movs	r0, r4
 800c8f2:	f7ff ff19 	bl	800c728 <node_set_prev.isra.2>
}
 800c8f6:	e7d8      	b.n	800c8aa <lv_ll_rem+0x22>

0800c8f8 <lv_ll_chg_list>:
{
 800c8f8:	b570      	push	{r4, r5, r6, lr}
 800c8fa:	000c      	movs	r4, r1
    lv_ll_rem(ll_ori_p, node);
 800c8fc:	0011      	movs	r1, r2
{
 800c8fe:	001e      	movs	r6, r3
 800c900:	0015      	movs	r5, r2
    lv_ll_rem(ll_ori_p, node);
 800c902:	f7ff ffc1 	bl	800c888 <lv_ll_rem>
    if(head) {
 800c906:	2e00      	cmp	r6, #0
 800c908:	d016      	beq.n	800c938 <lv_ll_chg_list+0x40>
        node_set_prev(ll_new_p, node, NULL);
 800c90a:	2200      	movs	r2, #0
 800c90c:	0029      	movs	r1, r5
 800c90e:	0020      	movs	r0, r4
 800c910:	f7ff ff0a 	bl	800c728 <node_set_prev.isra.2>
        node_set_next(ll_new_p, node, ll_new_p->head);
 800c914:	0029      	movs	r1, r5
 800c916:	6862      	ldr	r2, [r4, #4]
 800c918:	0020      	movs	r0, r4
 800c91a:	f7ff fef3 	bl	800c704 <node_set_next.isra.0>
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 800c91e:	6861      	ldr	r1, [r4, #4]
 800c920:	2900      	cmp	r1, #0
 800c922:	d003      	beq.n	800c92c <lv_ll_chg_list+0x34>
            node_set_prev(ll_new_p, ll_new_p->head, node);
 800c924:	002a      	movs	r2, r5
 800c926:	0020      	movs	r0, r4
 800c928:	f7ff fefe 	bl	800c728 <node_set_prev.isra.2>
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 800c92c:	68a3      	ldr	r3, [r4, #8]
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
 800c92e:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 800c930:	2b00      	cmp	r3, #0
 800c932:	d100      	bne.n	800c936 <lv_ll_chg_list+0x3e>
            ll_new_p->tail = node;
 800c934:	60a5      	str	r5, [r4, #8]
}
 800c936:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
 800c938:	68a2      	ldr	r2, [r4, #8]
 800c93a:	0029      	movs	r1, r5
 800c93c:	0020      	movs	r0, r4
 800c93e:	f7ff fef3 	bl	800c728 <node_set_prev.isra.2>
        node_set_next(ll_new_p, node, NULL);
 800c942:	0029      	movs	r1, r5
 800c944:	0032      	movs	r2, r6
 800c946:	0020      	movs	r0, r4
 800c948:	f7ff fedc 	bl	800c704 <node_set_next.isra.0>
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
 800c94c:	68a1      	ldr	r1, [r4, #8]
 800c94e:	2900      	cmp	r1, #0
 800c950:	d003      	beq.n	800c95a <lv_ll_chg_list+0x62>
            node_set_next(ll_new_p, ll_new_p->tail, node);
 800c952:	002a      	movs	r2, r5
 800c954:	0020      	movs	r0, r4
 800c956:	f7ff fed5 	bl	800c704 <node_set_next.isra.0>
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 800c95a:	6863      	ldr	r3, [r4, #4]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
 800c95c:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d1e9      	bne.n	800c936 <lv_ll_chg_list+0x3e>
            ll_new_p->head = node;
 800c962:	6065      	str	r5, [r4, #4]
}
 800c964:	e7e7      	b.n	800c936 <lv_ll_chg_list+0x3e>

0800c966 <lv_ll_move_before>:
{
 800c966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c968:	0004      	movs	r4, r0
 800c96a:	000d      	movs	r5, r1
 800c96c:	0016      	movs	r6, r2
    if(n_act == n_after) return; /*Can't move before itself*/
 800c96e:	4291      	cmp	r1, r2
 800c970:	d007      	beq.n	800c982 <lv_ll_move_before+0x1c>
    if(n_after != NULL)
 800c972:	2a00      	cmp	r2, #0
 800c974:	d006      	beq.n	800c984 <lv_ll_move_before+0x1e>
        n_before = lv_ll_get_prev(ll_p, n_after);
 800c976:	0011      	movs	r1, r2
 800c978:	f7ff ff47 	bl	800c80a <lv_ll_get_prev>
 800c97c:	0007      	movs	r7, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
 800c97e:	4285      	cmp	r5, r0
 800c980:	d122      	bne.n	800c9c8 <lv_ll_move_before+0x62>
}
 800c982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ll_p != NULL) {
 800c984:	2800      	cmp	r0, #0
 800c986:	d000      	beq.n	800c98a <lv_ll_move_before+0x24>
        tail = ll_p->tail;
 800c988:	6886      	ldr	r6, [r0, #8]
    if(n_act == n_before) return; /*Already before `n_after`*/
 800c98a:	42b5      	cmp	r5, r6
 800c98c:	d0f9      	beq.n	800c982 <lv_ll_move_before+0x1c>
    lv_ll_rem(ll_p, n_act);
 800c98e:	0029      	movs	r1, r5
 800c990:	0020      	movs	r0, r4
 800c992:	f7ff ff79 	bl	800c888 <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
 800c996:	002a      	movs	r2, r5
 800c998:	0031      	movs	r1, r6
 800c99a:	0020      	movs	r0, r4
 800c99c:	f7ff feb2 	bl	800c704 <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
 800c9a0:	0032      	movs	r2, r6
 800c9a2:	0029      	movs	r1, r5
 800c9a4:	0020      	movs	r0, r4
 800c9a6:	f7ff febf 	bl	800c728 <node_set_prev.isra.2>
    node_set_prev(ll_p, n_after, n_act);
 800c9aa:	002a      	movs	r2, r5
 800c9ac:	2100      	movs	r1, #0
 800c9ae:	0020      	movs	r0, r4
 800c9b0:	f7ff feba 	bl	800c728 <node_set_prev.isra.2>
    node_set_next(ll_p, n_act, n_after);
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	0029      	movs	r1, r5
 800c9b8:	0020      	movs	r0, r4
 800c9ba:	f7ff fea3 	bl	800c704 <node_set_next.isra.0>
    if(n_after == NULL) ll_p->tail = n_act;
 800c9be:	60a5      	str	r5, [r4, #8]
    if(n_before == NULL) ll_p->head = n_act;
 800c9c0:	2e00      	cmp	r6, #0
 800c9c2:	d1de      	bne.n	800c982 <lv_ll_move_before+0x1c>
 800c9c4:	6065      	str	r5, [r4, #4]
 800c9c6:	e7dc      	b.n	800c982 <lv_ll_move_before+0x1c>
    lv_ll_rem(ll_p, n_act);
 800c9c8:	0029      	movs	r1, r5
 800c9ca:	0020      	movs	r0, r4
 800c9cc:	f7ff ff5c 	bl	800c888 <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
 800c9d0:	002a      	movs	r2, r5
 800c9d2:	0039      	movs	r1, r7
 800c9d4:	0020      	movs	r0, r4
 800c9d6:	f7ff fe95 	bl	800c704 <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
 800c9da:	003a      	movs	r2, r7
 800c9dc:	0029      	movs	r1, r5
 800c9de:	0020      	movs	r0, r4
 800c9e0:	f7ff fea2 	bl	800c728 <node_set_prev.isra.2>
    node_set_prev(ll_p, n_after, n_act);
 800c9e4:	0031      	movs	r1, r6
 800c9e6:	002a      	movs	r2, r5
 800c9e8:	0020      	movs	r0, r4
 800c9ea:	f7ff fe9d 	bl	800c728 <node_set_prev.isra.2>
    node_set_next(ll_p, n_act, n_after);
 800c9ee:	0032      	movs	r2, r6
 800c9f0:	0029      	movs	r1, r5
 800c9f2:	0020      	movs	r0, r4
 800c9f4:	f7ff fe86 	bl	800c704 <node_set_next.isra.0>
 800c9f8:	003e      	movs	r6, r7
 800c9fa:	e7e1      	b.n	800c9c0 <lv_ll_move_before+0x5a>

0800c9fc <ent_get_next>:
 * Give the next entry after 'act_e'
 * @param act_e pointer to an entry
 * @return pointer to an entry after 'act_e'
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
 800c9fc:	4908      	ldr	r1, [pc, #32]	; (800ca20 <ent_get_next+0x24>)
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	d101      	bne.n	800ca06 <ent_get_next+0xa>
        next_e = (lv_mem_ent_t *)work_mem;
 800ca02:	6808      	ldr	r0, [r1, #0]

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
    }

    return next_e;
}
 800ca04:	4770      	bx	lr
        uint8_t * data = &act_e->first_data;
 800ca06:	1d03      	adds	r3, r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 800ca08:	6800      	ldr	r0, [r0, #0]
 800ca0a:	0840      	lsrs	r0, r0, #1
 800ca0c:	1818      	adds	r0, r3, r0
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 800ca0e:	680b      	ldr	r3, [r1, #0]
 800ca10:	21c0      	movs	r1, #192	; 0xc0
 800ca12:	0189      	lsls	r1, r1, #6
 800ca14:	1d02      	adds	r2, r0, #4
 800ca16:	185b      	adds	r3, r3, r1
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	419b      	sbcs	r3, r3
 800ca1c:	4018      	ands	r0, r3
 800ca1e:	e7f1      	b.n	800ca04 <ent_get_next+0x8>
 800ca20:	20001554 	.word	0x20001554

0800ca24 <ent_trunc>:
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
 800ca24:	2303      	movs	r3, #3
{
 800ca26:	b530      	push	{r4, r5, lr}
    if(size & 0x3) {
 800ca28:	4219      	tst	r1, r3
 800ca2a:	d001      	beq.n	800ca30 <ent_trunc+0xc>
        size = size & (~0x3);
 800ca2c:	4399      	bics	r1, r3
        size += 4;
 800ca2e:	3104      	adds	r1, #4
    }
#endif

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 800ca30:	6803      	ldr	r3, [r0, #0]
 800ca32:	1d0a      	adds	r2, r1, #4
 800ca34:	085b      	lsrs	r3, r3, #1
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d015      	beq.n	800ca66 <ent_trunc+0x42>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
 800ca3a:	4299      	cmp	r1, r3
 800ca3c:	d00c      	beq.n	800ca58 <ent_trunc+0x34>
        uint8_t * e_data             = &e->first_data;
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
 800ca3e:	2401      	movs	r4, #1
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 800ca40:	3b04      	subs	r3, #4
 800ca42:	1a5b      	subs	r3, r3, r1
 800ca44:	40a3      	lsls	r3, r4
        uint8_t * e_data             = &e->first_data;
 800ca46:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
 800ca48:	1852      	adds	r2, r2, r1
        after_new_e->header.s.used   = 0;
 800ca4a:	7815      	ldrb	r5, [r2, #0]
 800ca4c:	43a5      	bics	r5, r4
 800ca4e:	7015      	strb	r5, [r2, #0]
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 800ca50:	6815      	ldr	r5, [r2, #0]
 800ca52:	402c      	ands	r4, r5
 800ca54:	4323      	orrs	r3, r4
 800ca56:	6013      	str	r3, [r2, #0]
    }

    /* Set the new size for the original entry */
    e->header.s.d_size = size;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	6802      	ldr	r2, [r0, #0]
 800ca5c:	0049      	lsls	r1, r1, #1
 800ca5e:	4013      	ands	r3, r2
 800ca60:	4319      	orrs	r1, r3
 800ca62:	6001      	str	r1, [r0, #0]
}
 800ca64:	bd30      	pop	{r4, r5, pc}
 800ca66:	0019      	movs	r1, r3
 800ca68:	e7f6      	b.n	800ca58 <ent_trunc+0x34>
	...

0800ca6c <lv_mem_init>:
    full->header.s.used = 0;
 800ca6c:	2101      	movs	r1, #1
    work_mem = (uint8_t *)work_mem_int;
 800ca6e:	4b06      	ldr	r3, [pc, #24]	; (800ca88 <lv_mem_init+0x1c>)
 800ca70:	4a06      	ldr	r2, [pc, #24]	; (800ca8c <lv_mem_init+0x20>)
    full->header.s.used = 0;
 800ca72:	7818      	ldrb	r0, [r3, #0]
    work_mem = (uint8_t *)work_mem_int;
 800ca74:	6013      	str	r3, [r2, #0]
    full->header.s.used = 0;
 800ca76:	4388      	bics	r0, r1
 800ca78:	7018      	strb	r0, [r3, #0]
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	4011      	ands	r1, r2
 800ca7e:	4a04      	ldr	r2, [pc, #16]	; (800ca90 <lv_mem_init+0x24>)
 800ca80:	430a      	orrs	r2, r1
 800ca82:	601a      	str	r2, [r3, #0]
}
 800ca84:	4770      	bx	lr
 800ca86:	46c0      	nop			; (mov r8, r8)
 800ca88:	20001558 	.word	0x20001558
 800ca8c:	20001554 	.word	0x20001554
 800ca90:	00005ff8 	.word	0x00005ff8

0800ca94 <lv_mem_alloc>:
{
 800ca94:	b570      	push	{r4, r5, r6, lr}
 800ca96:	1e05      	subs	r5, r0, #0
        return &zero_mem;
 800ca98:	4c11      	ldr	r4, [pc, #68]	; (800cae0 <lv_mem_alloc+0x4c>)
    if(size == 0) {
 800ca9a:	d01e      	beq.n	800cada <lv_mem_alloc+0x46>
    if(size & 0x3) {
 800ca9c:	2303      	movs	r3, #3
 800ca9e:	4218      	tst	r0, r3
 800caa0:	d001      	beq.n	800caa6 <lv_mem_alloc+0x12>
        size = size & (~0x3);
 800caa2:	439d      	bics	r5, r3
        size += 4;
 800caa4:	3504      	adds	r5, #4
    lv_mem_ent_t * e = NULL;
 800caa6:	2400      	movs	r4, #0
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 800caa8:	2601      	movs	r6, #1
        e = ent_get_next(e);
 800caaa:	0020      	movs	r0, r4
 800caac:	f7ff ffa6 	bl	800c9fc <ent_get_next>
 800cab0:	1e04      	subs	r4, r0, #0
        if(e != NULL) {
 800cab2:	d012      	beq.n	800cada <lv_mem_alloc+0x46>
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 800cab4:	7803      	ldrb	r3, [r0, #0]
 800cab6:	4233      	tst	r3, r6
 800cab8:	d1f7      	bne.n	800caaa <lv_mem_alloc+0x16>
 800caba:	6803      	ldr	r3, [r0, #0]
 800cabc:	085b      	lsrs	r3, r3, #1
 800cabe:	429d      	cmp	r5, r3
 800cac0:	d8f3      	bhi.n	800caaa <lv_mem_alloc+0x16>
        ent_trunc(e, size),
 800cac2:	0029      	movs	r1, r5
 800cac4:	f7ff ffae 	bl	800ca24 <ent_trunc>
            e->header.s.used = 1;
 800cac8:	7823      	ldrb	r3, [r4, #0]
    if(alloc != NULL) memset(alloc, 0xaa, size);
 800caca:	002a      	movs	r2, r5
            e->header.s.used = 1;
 800cacc:	431e      	orrs	r6, r3
 800cace:	7026      	strb	r6, [r4, #0]
        alloc = &e->first_data;
 800cad0:	3404      	adds	r4, #4
    if(alloc != NULL) memset(alloc, 0xaa, size);
 800cad2:	21aa      	movs	r1, #170	; 0xaa
 800cad4:	0020      	movs	r0, r4
 800cad6:	f001 f84e 	bl	800db76 <memset>
}
 800cada:	0020      	movs	r0, r4
 800cadc:	bd70      	pop	{r4, r5, r6, pc}
 800cade:	46c0      	nop			; (mov r8, r8)
 800cae0:	20004558 	.word	0x20004558

0800cae4 <lv_mem_get_size>:
{
 800cae4:	1e03      	subs	r3, r0, #0
    if(data == NULL) return 0;
 800cae6:	d006      	beq.n	800caf6 <lv_mem_get_size+0x12>
    if(data == &zero_mem) return 0;
 800cae8:	4a03      	ldr	r2, [pc, #12]	; (800caf8 <lv_mem_get_size+0x14>)
    if(data == NULL) return 0;
 800caea:	2000      	movs	r0, #0
    if(data == &zero_mem) return 0;
 800caec:	4293      	cmp	r3, r2
 800caee:	d002      	beq.n	800caf6 <lv_mem_get_size+0x12>
    return e->header.s.d_size;
 800caf0:	3b04      	subs	r3, #4
 800caf2:	6818      	ldr	r0, [r3, #0]
 800caf4:	0840      	lsrs	r0, r0, #1
}
 800caf6:	4770      	bx	lr
 800caf8:	20004558 	.word	0x20004558

0800cafc <lv_mem_free>:
    if(data == &zero_mem) return;
 800cafc:	4b13      	ldr	r3, [pc, #76]	; (800cb4c <lv_mem_free+0x50>)
{
 800cafe:	b570      	push	{r4, r5, r6, lr}
 800cb00:	0004      	movs	r4, r0
    if(data == &zero_mem) return;
 800cb02:	4298      	cmp	r0, r3
 800cb04:	d012      	beq.n	800cb2c <lv_mem_free+0x30>
    if(data == NULL) return;
 800cb06:	2800      	cmp	r0, #0
 800cb08:	d010      	beq.n	800cb2c <lv_mem_free+0x30>
    memset((void *)data, 0xbb, lv_mem_get_size(data));
 800cb0a:	f7ff ffeb 	bl	800cae4 <lv_mem_get_size>
    e->header.s.used = 0;
 800cb0e:	2501      	movs	r5, #1
    memset((void *)data, 0xbb, lv_mem_get_size(data));
 800cb10:	0002      	movs	r2, r0
 800cb12:	21bb      	movs	r1, #187	; 0xbb
 800cb14:	0020      	movs	r0, r4
    e->header.s.used = 0;
 800cb16:	3c04      	subs	r4, #4
    memset((void *)data, 0xbb, lv_mem_get_size(data));
 800cb18:	f001 f82d 	bl	800db76 <memset>
    e_next = ent_get_next(e);
 800cb1c:	0020      	movs	r0, r4
    e->header.s.used = 0;
 800cb1e:	7823      	ldrb	r3, [r4, #0]
 800cb20:	43ab      	bics	r3, r5
 800cb22:	7023      	strb	r3, [r4, #0]
        e_next = ent_get_next(e_next);
 800cb24:	f7ff ff6a 	bl	800c9fc <ent_get_next>
    while(e_next != NULL) {
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	d100      	bne.n	800cb2e <lv_mem_free+0x32>
}
 800cb2c:	bd70      	pop	{r4, r5, r6, pc}
        if(e_next->header.s.used == 0) {
 800cb2e:	7803      	ldrb	r3, [r0, #0]
 800cb30:	422b      	tst	r3, r5
 800cb32:	d1fb      	bne.n	800cb2c <lv_mem_free+0x30>
            e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
 800cb34:	6822      	ldr	r2, [r4, #0]
 800cb36:	6801      	ldr	r1, [r0, #0]
 800cb38:	0853      	lsrs	r3, r2, #1
 800cb3a:	3304      	adds	r3, #4
 800cb3c:	0849      	lsrs	r1, r1, #1
 800cb3e:	185b      	adds	r3, r3, r1
 800cb40:	005b      	lsls	r3, r3, #1
 800cb42:	402a      	ands	r2, r5
 800cb44:	4313      	orrs	r3, r2
 800cb46:	6023      	str	r3, [r4, #0]
 800cb48:	e7ec      	b.n	800cb24 <lv_mem_free+0x28>
 800cb4a:	46c0      	nop			; (mov r8, r8)
 800cb4c:	20004558 	.word	0x20004558

0800cb50 <lv_mem_realloc>:
{
 800cb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb52:	0004      	movs	r4, r0
 800cb54:	000e      	movs	r6, r1
    if(data_p != NULL) {
 800cb56:	2800      	cmp	r0, #0
 800cb58:	d004      	beq.n	800cb64 <lv_mem_realloc+0x14>
        if(e->header.s.used == 0) {
 800cb5a:	1f03      	subs	r3, r0, #4
 800cb5c:	781b      	ldrb	r3, [r3, #0]
            data_p = NULL;
 800cb5e:	07db      	lsls	r3, r3, #31
 800cb60:	17db      	asrs	r3, r3, #31
 800cb62:	401c      	ands	r4, r3
    uint32_t old_size = lv_mem_get_size(data_p);
 800cb64:	0020      	movs	r0, r4
 800cb66:	f7ff ffbd 	bl	800cae4 <lv_mem_get_size>
 800cb6a:	0027      	movs	r7, r4
 800cb6c:	0005      	movs	r5, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 800cb6e:	42b0      	cmp	r0, r6
 800cb70:	d004      	beq.n	800cb7c <lv_mem_realloc+0x2c>
    if(new_size < old_size) {
 800cb72:	d905      	bls.n	800cb80 <lv_mem_realloc+0x30>
        lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data_p - sizeof(lv_mem_header_t));
 800cb74:	1f20      	subs	r0, r4, #4
        ent_trunc(e, new_size);
 800cb76:	0031      	movs	r1, r6
 800cb78:	f7ff ff54 	bl	800ca24 <ent_trunc>
}
 800cb7c:	0038      	movs	r0, r7
 800cb7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    new_p = lv_mem_alloc(new_size);
 800cb80:	0030      	movs	r0, r6
 800cb82:	f7ff ff87 	bl	800ca94 <lv_mem_alloc>
 800cb86:	1e07      	subs	r7, r0, #0
    if(new_p != NULL && data_p != NULL) {
 800cb88:	d0f8      	beq.n	800cb7c <lv_mem_realloc+0x2c>
 800cb8a:	2c00      	cmp	r4, #0
 800cb8c:	d0f6      	beq.n	800cb7c <lv_mem_realloc+0x2c>
        if(old_size != 0) {
 800cb8e:	2d00      	cmp	r5, #0
 800cb90:	d0f4      	beq.n	800cb7c <lv_mem_realloc+0x2c>
            memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 800cb92:	002a      	movs	r2, r5
 800cb94:	42b5      	cmp	r5, r6
 800cb96:	d900      	bls.n	800cb9a <lv_mem_realloc+0x4a>
 800cb98:	0032      	movs	r2, r6
 800cb9a:	0021      	movs	r1, r4
 800cb9c:	0038      	movs	r0, r7
 800cb9e:	f000 ffe1 	bl	800db64 <memcpy>
            lv_mem_free(data_p);
 800cba2:	0020      	movs	r0, r4
 800cba4:	f7ff ffaa 	bl	800cafc <lv_mem_free>
 800cba8:	e7e8      	b.n	800cb7c <lv_mem_realloc+0x2c>
	...

0800cbac <lv_task_core_init>:

/**
 * Init the lv_task module
 */
void lv_task_core_init(void)
{
 800cbac:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 800cbae:	2114      	movs	r1, #20
 800cbb0:	4803      	ldr	r0, [pc, #12]	; (800cbc0 <lv_task_core_init+0x14>)
 800cbb2:	f7ff fdca 	bl	800c74a <lv_ll_init>
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	4b02      	ldr	r3, [pc, #8]	; (800cbc4 <lv_task_core_init+0x18>)
 800cbba:	701a      	strb	r2, [r3, #0]
}
 800cbbc:	bd10      	pop	{r4, pc}
 800cbbe:	46c0      	nop			; (mov r8, r8)
 800cbc0:	20005374 	.word	0x20005374
 800cbc4:	2000456c 	.word	0x2000456c

0800cbc8 <lv_task_create_basic>:
{
 800cbc8:	b570      	push	{r4, r5, r6, lr}
    tmp = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800cbca:	4c1c      	ldr	r4, [pc, #112]	; (800cc3c <lv_task_create_basic+0x74>)
 800cbcc:	0020      	movs	r0, r4
 800cbce:	f7ff fe06 	bl	800c7de <lv_ll_get_head>
 800cbd2:	1e01      	subs	r1, r0, #0
    if(NULL == tmp) {
 800cbd4:	d105      	bne.n	800cbe2 <lv_task_create_basic+0x1a>
        new_task = lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 800cbd6:	0020      	movs	r0, r4
 800cbd8:	f7ff fdc1 	bl	800c75e <lv_ll_ins_head>
 800cbdc:	1e04      	subs	r4, r0, #0
        lv_mem_assert(new_task);
 800cbde:	d114      	bne.n	800cc0a <lv_task_create_basic+0x42>
 800cbe0:	e7fe      	b.n	800cbe0 <lv_task_create_basic+0x18>
            if(tmp->prio <= DEF_PRIO) {
 800cbe2:	7c0b      	ldrb	r3, [r1, #16]
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 800cbe4:	0020      	movs	r0, r4
            if(tmp->prio <= DEF_PRIO) {
 800cbe6:	075b      	lsls	r3, r3, #29
 800cbe8:	0f5b      	lsrs	r3, r3, #29
 800cbea:	2b03      	cmp	r3, #3
 800cbec:	dc04      	bgt.n	800cbf8 <lv_task_create_basic+0x30>
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 800cbee:	f7ff fe19 	bl	800c824 <lv_ll_ins_prev>
 800cbf2:	1e04      	subs	r4, r0, #0
                lv_mem_assert(new_task);
 800cbf4:	d109      	bne.n	800cc0a <lv_task_create_basic+0x42>
 800cbf6:	e7fe      	b.n	800cbf6 <lv_task_create_basic+0x2e>
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 800cbf8:	f7ff fdf9 	bl	800c7ee <lv_ll_get_next>
 800cbfc:	1e01      	subs	r1, r0, #0
        } while(tmp != NULL);
 800cbfe:	d1f0      	bne.n	800cbe2 <lv_task_create_basic+0x1a>
            new_task = lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 800cc00:	0020      	movs	r0, r4
 800cc02:	f7ff fdcc 	bl	800c79e <lv_ll_ins_tail>
 800cc06:	1e04      	subs	r4, r0, #0
            lv_mem_assert(new_task);
 800cc08:	d016      	beq.n	800cc38 <lv_task_create_basic+0x70>
    new_task->period  = DEF_PERIOD;
 800cc0a:	23fa      	movs	r3, #250	; 0xfa
    new_task->prio    = DEF_PRIO;
 800cc0c:	2207      	movs	r2, #7
    new_task->period  = DEF_PERIOD;
 800cc0e:	005b      	lsls	r3, r3, #1
 800cc10:	6023      	str	r3, [r4, #0]
    new_task->prio    = DEF_PRIO;
 800cc12:	7c23      	ldrb	r3, [r4, #16]
    new_task->task_cb = NULL;
 800cc14:	2500      	movs	r5, #0
    new_task->prio    = DEF_PRIO;
 800cc16:	4393      	bics	r3, r2
 800cc18:	001a      	movs	r2, r3
    new_task->once     = 0;
 800cc1a:	2303      	movs	r3, #3
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	2208      	movs	r2, #8
 800cc20:	4393      	bics	r3, r2
    new_task->task_cb = NULL;
 800cc22:	60a5      	str	r5, [r4, #8]
    new_task->once     = 0;
 800cc24:	7423      	strb	r3, [r4, #16]
    new_task->last_run = lv_tick_get();
 800cc26:	f7ff faff 	bl	800c228 <lv_tick_get>
    task_created = true;
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	4b04      	ldr	r3, [pc, #16]	; (800cc40 <lv_task_create_basic+0x78>)
    new_task->last_run = lv_tick_get();
 800cc2e:	6060      	str	r0, [r4, #4]
    new_task->user_data = NULL;
 800cc30:	60e5      	str	r5, [r4, #12]
}
 800cc32:	0020      	movs	r0, r4
    task_created = true;
 800cc34:	701a      	strb	r2, [r3, #0]
}
 800cc36:	bd70      	pop	{r4, r5, r6, pc}
 800cc38:	e7fe      	b.n	800cc38 <lv_task_create_basic+0x70>
 800cc3a:	46c0      	nop			; (mov r8, r8)
 800cc3c:	20005374 	.word	0x20005374
 800cc40:	2000456d 	.word	0x2000456d

0800cc44 <lv_task_del>:
{
 800cc44:	b510      	push	{r4, lr}
 800cc46:	0004      	movs	r4, r0
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
 800cc48:	0001      	movs	r1, r0
 800cc4a:	4807      	ldr	r0, [pc, #28]	; (800cc68 <lv_task_del+0x24>)
 800cc4c:	f7ff fe1c 	bl	800c888 <lv_ll_rem>
    lv_mem_free(task);
 800cc50:	0020      	movs	r0, r4
 800cc52:	f7ff ff53 	bl	800cafc <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 800cc56:	4b05      	ldr	r3, [pc, #20]	; (800cc6c <lv_task_del+0x28>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	429c      	cmp	r4, r3
 800cc5c:	d102      	bne.n	800cc64 <lv_task_del+0x20>
 800cc5e:	2201      	movs	r2, #1
 800cc60:	4b03      	ldr	r3, [pc, #12]	; (800cc70 <lv_task_del+0x2c>)
 800cc62:	701a      	strb	r2, [r3, #0]
}
 800cc64:	bd10      	pop	{r4, pc}
 800cc66:	46c0      	nop			; (mov r8, r8)
 800cc68:	20005374 	.word	0x20005374
 800cc6c:	200053b4 	.word	0x200053b4
 800cc70:	2000456e 	.word	0x2000456e

0800cc74 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
 800cc74:	b570      	push	{r4, r5, r6, lr}
 800cc76:	0004      	movs	r4, r0
    bool exec = false;

    /*Execute if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
 800cc78:	6840      	ldr	r0, [r0, #4]
 800cc7a:	f7ff fae3 	bl	800c244 <lv_tick_elaps>
    if(elp >= task->period) {
 800cc7e:	6823      	ldr	r3, [r4, #0]
    bool exec = false;
 800cc80:	2500      	movs	r5, #0
    if(elp >= task->period) {
 800cc82:	4298      	cmp	r0, r3
 800cc84:	d315      	bcc.n	800ccb2 <lv_task_exec+0x3e>
        task->last_run = lv_tick_get();
 800cc86:	f7ff facf 	bl	800c228 <lv_tick_get>
        task_deleted   = false;
        task_created   = false;
 800cc8a:	4b0b      	ldr	r3, [pc, #44]	; (800ccb8 <lv_task_exec+0x44>)
        task_deleted   = false;
 800cc8c:	4e0b      	ldr	r6, [pc, #44]	; (800ccbc <lv_task_exec+0x48>)
        task_created   = false;
 800cc8e:	701d      	strb	r5, [r3, #0]
        if(task->task_cb) task->task_cb(task);
 800cc90:	68a3      	ldr	r3, [r4, #8]
        task->last_run = lv_tick_get();
 800cc92:	6060      	str	r0, [r4, #4]
        task_deleted   = false;
 800cc94:	7035      	strb	r5, [r6, #0]
        if(task->task_cb) task->task_cb(task);
 800cc96:	42ab      	cmp	r3, r5
 800cc98:	d001      	beq.n	800cc9e <lv_task_exec+0x2a>
 800cc9a:	0020      	movs	r0, r4
 800cc9c:	4798      	blx	r3

        /*Delete if it was a one shot lv_task*/
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
 800cc9e:	7835      	ldrb	r5, [r6, #0]
 800cca0:	2d00      	cmp	r5, #0
 800cca2:	d106      	bne.n	800ccb2 <lv_task_exec+0x3e>
            if(task->once != 0) {
 800cca4:	7c23      	ldrb	r3, [r4, #16]
                lv_task_del(task);
            }
        }
        exec = true;
 800cca6:	3501      	adds	r5, #1
            if(task->once != 0) {
 800cca8:	071b      	lsls	r3, r3, #28
 800ccaa:	d502      	bpl.n	800ccb2 <lv_task_exec+0x3e>
                lv_task_del(task);
 800ccac:	0020      	movs	r0, r4
 800ccae:	f7ff ffc9 	bl	800cc44 <lv_task_del>
    }

    return exec;
}
 800ccb2:	0028      	movs	r0, r5
 800ccb4:	bd70      	pop	{r4, r5, r6, pc}
 800ccb6:	46c0      	nop			; (mov r8, r8)
 800ccb8:	2000456d 	.word	0x2000456d
 800ccbc:	2000456e 	.word	0x2000456e

0800ccc0 <lv_task_handler>:
{
 800ccc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(task_handler_mutex) return;
 800ccc2:	4f38      	ldr	r7, [pc, #224]	; (800cda4 <lv_task_handler+0xe4>)
 800ccc4:	783c      	ldrb	r4, [r7, #0]
 800ccc6:	2c00      	cmp	r4, #0
 800ccc8:	d107      	bne.n	800ccda <lv_task_handler+0x1a>
    task_handler_mutex = true;
 800ccca:	2301      	movs	r3, #1
 800cccc:	703b      	strb	r3, [r7, #0]
    if(lv_task_run == false) {
 800ccce:	4b36      	ldr	r3, [pc, #216]	; (800cda8 <lv_task_handler+0xe8>)
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d102      	bne.n	800ccdc <lv_task_handler+0x1c>
        task_handler_mutex = false; /*Release mutex*/
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	703b      	strb	r3, [r7, #0]
}
 800ccda:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    handler_start = lv_tick_get();
 800ccdc:	f7ff faa4 	bl	800c228 <lv_tick_get>
 800cce0:	4e32      	ldr	r6, [pc, #200]	; (800cdac <lv_task_handler+0xec>)
 800cce2:	6030      	str	r0, [r6, #0]
        task_deleted             = false;
 800cce4:	2300      	movs	r3, #0
 800cce6:	4a32      	ldr	r2, [pc, #200]	; (800cdb0 <lv_task_handler+0xf0>)
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800cce8:	4832      	ldr	r0, [pc, #200]	; (800cdb4 <lv_task_handler+0xf4>)
        task_deleted             = false;
 800ccea:	7013      	strb	r3, [r2, #0]
        task_created             = false;
 800ccec:	4a32      	ldr	r2, [pc, #200]	; (800cdb8 <lv_task_handler+0xf8>)
 800ccee:	7013      	strb	r3, [r2, #0]
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800ccf0:	f7ff fd75 	bl	800c7de <lv_ll_get_head>
 800ccf4:	4b31      	ldr	r3, [pc, #196]	; (800cdbc <lv_task_handler+0xfc>)
 800ccf6:	6018      	str	r0, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 800ccf8:	4d30      	ldr	r5, [pc, #192]	; (800cdbc <lv_task_handler+0xfc>)
 800ccfa:	6829      	ldr	r1, [r5, #0]
 800ccfc:	2900      	cmp	r1, #0
 800ccfe:	d123      	bne.n	800cd48 <lv_task_handler+0x88>
    busy_time += lv_tick_elaps(handler_start);
 800cd00:	6830      	ldr	r0, [r6, #0]
 800cd02:	f7ff fa9f 	bl	800c244 <lv_tick_elaps>
 800cd06:	4c2e      	ldr	r4, [pc, #184]	; (800cdc0 <lv_task_handler+0x100>)
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 800cd08:	4e2e      	ldr	r6, [pc, #184]	; (800cdc4 <lv_task_handler+0x104>)
    busy_time += lv_tick_elaps(handler_start);
 800cd0a:	6823      	ldr	r3, [r4, #0]
 800cd0c:	1818      	adds	r0, r3, r0
 800cd0e:	6020      	str	r0, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 800cd10:	6830      	ldr	r0, [r6, #0]
 800cd12:	f7ff fa97 	bl	800c244 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 800cd16:	23f4      	movs	r3, #244	; 0xf4
 800cd18:	33ff      	adds	r3, #255	; 0xff
 800cd1a:	4298      	cmp	r0, r3
 800cd1c:	d9db      	bls.n	800ccd6 <lv_task_handler+0x16>
        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
 800cd1e:	2564      	movs	r5, #100	; 0x64
 800cd20:	21fa      	movs	r1, #250	; 0xfa
 800cd22:	6820      	ldr	r0, [r4, #0]
 800cd24:	0049      	lsls	r1, r1, #1
 800cd26:	4368      	muls	r0, r5
 800cd28:	f7f3 fa1a 	bl	8000160 <__udivsi3>
 800cd2c:	b2c0      	uxtb	r0, r0
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
 800cd2e:	2300      	movs	r3, #0
 800cd30:	42a8      	cmp	r0, r5
 800cd32:	d801      	bhi.n	800cd38 <lv_task_handler+0x78>
 800cd34:	1a2d      	subs	r5, r5, r0
 800cd36:	b2eb      	uxtb	r3, r5
 800cd38:	4a23      	ldr	r2, [pc, #140]	; (800cdc8 <lv_task_handler+0x108>)
 800cd3a:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
 800cd40:	f7ff fa72 	bl	800c228 <lv_tick_get>
 800cd44:	6030      	str	r0, [r6, #0]
 800cd46:	e7c6      	b.n	800ccd6 <lv_task_handler+0x16>
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 800cd48:	481a      	ldr	r0, [pc, #104]	; (800cdb4 <lv_task_handler+0xf4>)
 800cd4a:	f7ff fd50 	bl	800c7ee <lv_ll_get_next>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
 800cd4e:	2207      	movs	r2, #7
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 800cd50:	9001      	str	r0, [sp, #4]
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
 800cd52:	6828      	ldr	r0, [r5, #0]
 800cd54:	7c03      	ldrb	r3, [r0, #16]
 800cd56:	401a      	ands	r2, r3
 800cd58:	d0d2      	beq.n	800cd00 <lv_task_handler+0x40>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 800cd5a:	4284      	cmp	r4, r0
 800cd5c:	d103      	bne.n	800cd66 <lv_task_handler+0xa6>
                LV_GC_ROOT(_lv_task_act) = next;
 800cd5e:	9b01      	ldr	r3, [sp, #4]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
 800cd60:	2400      	movs	r4, #0
                LV_GC_ROOT(_lv_task_act) = next;
 800cd62:	602b      	str	r3, [r5, #0]
                continue; /*Load the next task*/
 800cd64:	e7c8      	b.n	800ccf8 <lv_task_handler+0x38>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
 800cd66:	2a05      	cmp	r2, #5
 800cd68:	d10d      	bne.n	800cd86 <lv_task_handler+0xc6>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 800cd6a:	f7ff ff83 	bl	800cc74 <lv_task_exec>
            if(task_deleted) break; /*If a task was deleted then this or the next item might be corrupted*/
 800cd6e:	4b10      	ldr	r3, [pc, #64]	; (800cdb0 <lv_task_handler+0xf0>)
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d1c4      	bne.n	800cd00 <lv_task_handler+0x40>
            if(task_created) break; /*If a task was created then this or the next item might be corrupted*/
 800cd76:	4b10      	ldr	r3, [pc, #64]	; (800cdb8 <lv_task_handler+0xf8>)
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d1c0      	bne.n	800cd00 <lv_task_handler+0x40>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
 800cd7e:	4b0f      	ldr	r3, [pc, #60]	; (800cdbc <lv_task_handler+0xfc>)
 800cd80:	9a01      	ldr	r2, [sp, #4]
 800cd82:	601a      	str	r2, [r3, #0]
 800cd84:	e7b8      	b.n	800ccf8 <lv_task_handler+0x38>
            else if(task_interrupter) {
 800cd86:	2c00      	cmp	r4, #0
 800cd88:	d006      	beq.n	800cd98 <lv_task_handler+0xd8>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
 800cd8a:	7c22      	ldrb	r2, [r4, #16]
 800cd8c:	075b      	lsls	r3, r3, #29
 800cd8e:	0752      	lsls	r2, r2, #29
 800cd90:	0f5b      	lsrs	r3, r3, #29
 800cd92:	0f52      	lsrs	r2, r2, #29
 800cd94:	4293      	cmp	r3, r2
 800cd96:	ddea      	ble.n	800cd6e <lv_task_handler+0xae>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 800cd98:	f7ff ff6c 	bl	800cc74 <lv_task_exec>
 800cd9c:	2800      	cmp	r0, #0
 800cd9e:	d0e6      	beq.n	800cd6e <lv_task_handler+0xae>
                    task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
 800cda0:	682c      	ldr	r4, [r5, #0]
                    break;
 800cda2:	e79f      	b.n	800cce4 <lv_task_handler+0x24>
 800cda4:	2000456f 	.word	0x2000456f
 800cda8:	2000456c 	.word	0x2000456c
 800cdac:	20004560 	.word	0x20004560
 800cdb0:	2000456e 	.word	0x2000456e
 800cdb4:	20005374 	.word	0x20005374
 800cdb8:	2000456d 	.word	0x2000456d
 800cdbc:	200053b4 	.word	0x200053b4
 800cdc0:	2000455c 	.word	0x2000455c
 800cdc4:	20004568 	.word	0x20004568
 800cdc8:	20004564 	.word	0x20004564

0800cdcc <lv_task_set_prio>:
    if(task->prio == prio) return;
 800cdcc:	7c03      	ldrb	r3, [r0, #16]
{
 800cdce:	b570      	push	{r4, r5, r6, lr}
    if(task->prio == prio) return;
 800cdd0:	075b      	lsls	r3, r3, #29
{
 800cdd2:	0004      	movs	r4, r0
 800cdd4:	000d      	movs	r5, r1
    if(task->prio == prio) return;
 800cdd6:	0f5b      	lsrs	r3, r3, #29
 800cdd8:	428b      	cmp	r3, r1
 800cdda:	d017      	beq.n	800ce0c <lv_task_set_prio+0x40>
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 800cddc:	4e0e      	ldr	r6, [pc, #56]	; (800ce18 <lv_task_set_prio+0x4c>)
 800cdde:	0030      	movs	r0, r6
 800cde0:	f7ff fcfd 	bl	800c7de <lv_ll_get_head>
 800cde4:	1e02      	subs	r2, r0, #0
 800cde6:	d006      	beq.n	800cdf6 <lv_task_set_prio+0x2a>
        if(i->prio <= prio) {
 800cde8:	7c13      	ldrb	r3, [r2, #16]
 800cdea:	075b      	lsls	r3, r3, #29
 800cdec:	0f5b      	lsrs	r3, r3, #29
 800cdee:	429d      	cmp	r5, r3
 800cdf0:	db0d      	blt.n	800ce0e <lv_task_set_prio+0x42>
            if(i != task) lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 800cdf2:	42a2      	cmp	r2, r4
 800cdf4:	d003      	beq.n	800cdfe <lv_task_set_prio+0x32>
        lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 800cdf6:	0021      	movs	r1, r4
 800cdf8:	0030      	movs	r0, r6
 800cdfa:	f7ff fdb4 	bl	800c966 <lv_ll_move_before>
    task->prio = prio;
 800cdfe:	2307      	movs	r3, #7
 800ce00:	002a      	movs	r2, r5
 800ce02:	7c25      	ldrb	r5, [r4, #16]
 800ce04:	401a      	ands	r2, r3
 800ce06:	439d      	bics	r5, r3
 800ce08:	4315      	orrs	r5, r2
 800ce0a:	7425      	strb	r5, [r4, #16]
}
 800ce0c:	bd70      	pop	{r4, r5, r6, pc}
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 800ce0e:	0011      	movs	r1, r2
 800ce10:	0030      	movs	r0, r6
 800ce12:	f7ff fcec 	bl	800c7ee <lv_ll_get_next>
 800ce16:	e7e5      	b.n	800cde4 <lv_task_set_prio+0x18>
 800ce18:	20005374 	.word	0x20005374

0800ce1c <lv_task_create>:
{
 800ce1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce1e:	0007      	movs	r7, r0
 800ce20:	000e      	movs	r6, r1
 800ce22:	0015      	movs	r5, r2
 800ce24:	9301      	str	r3, [sp, #4]
    lv_task_t * new_task = lv_task_create_basic();
 800ce26:	f7ff fecf 	bl	800cbc8 <lv_task_create_basic>
 800ce2a:	1e04      	subs	r4, r0, #0
    lv_mem_assert(new_task);
 800ce2c:	d100      	bne.n	800ce30 <lv_task_create+0x14>
 800ce2e:	e7fe      	b.n	800ce2e <lv_task_create+0x12>
    task->task_cb = task_cb;
 800ce30:	6087      	str	r7, [r0, #8]
    task->period = period;
 800ce32:	6006      	str	r6, [r0, #0]
    lv_task_set_prio(new_task, prio);
 800ce34:	0029      	movs	r1, r5
 800ce36:	f7ff ffc9 	bl	800cdcc <lv_task_set_prio>
    new_task->user_data = user_data;
 800ce3a:	9b01      	ldr	r3, [sp, #4]
}
 800ce3c:	0020      	movs	r0, r4
    new_task->user_data = user_data;
 800ce3e:	60e3      	str	r3, [r4, #12]
}
 800ce40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800ce42 <lv_task_ready>:
{
 800ce42:	b510      	push	{r4, lr}
 800ce44:	0004      	movs	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
 800ce46:	f7ff f9ef 	bl	800c228 <lv_tick_get>
 800ce4a:	6823      	ldr	r3, [r4, #0]
 800ce4c:	43db      	mvns	r3, r3
 800ce4e:	1818      	adds	r0, r3, r0
 800ce50:	6060      	str	r0, [r4, #4]
}
 800ce52:	bd10      	pop	{r4, pc}

0800ce54 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
 800ce54:	7803      	ldrb	r3, [r0, #0]
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
        return 4;
    return 1; /*If the char was invalid step tell it's 1 byte long*/
 800ce56:	2001      	movs	r0, #1
    if((str[0] & 0x80) == 0)
 800ce58:	b25a      	sxtb	r2, r3
 800ce5a:	2a00      	cmp	r2, #0
 800ce5c:	da11      	bge.n	800ce82 <lv_txt_utf8_size+0x2e>
    else if((str[0] & 0xE0) == 0xC0)
 800ce5e:	221f      	movs	r2, #31
 800ce60:	0019      	movs	r1, r3
        return 2;
 800ce62:	1800      	adds	r0, r0, r0
    else if((str[0] & 0xE0) == 0xC0)
 800ce64:	4391      	bics	r1, r2
 800ce66:	29c0      	cmp	r1, #192	; 0xc0
 800ce68:	d00b      	beq.n	800ce82 <lv_txt_utf8_size+0x2e>
    else if((str[0] & 0xF0) == 0xE0)
 800ce6a:	220f      	movs	r2, #15
 800ce6c:	0019      	movs	r1, r3
        return 3;
 800ce6e:	3001      	adds	r0, #1
    else if((str[0] & 0xF0) == 0xE0)
 800ce70:	4391      	bics	r1, r2
 800ce72:	29e0      	cmp	r1, #224	; 0xe0
 800ce74:	d005      	beq.n	800ce82 <lv_txt_utf8_size+0x2e>
    else if((str[0] & 0xF8) == 0xF0)
 800ce76:	2207      	movs	r2, #7
    return 1; /*If the char was invalid step tell it's 1 byte long*/
 800ce78:	3802      	subs	r0, #2
    else if((str[0] & 0xF8) == 0xF0)
 800ce7a:	4393      	bics	r3, r2
 800ce7c:	2bf0      	cmp	r3, #240	; 0xf0
 800ce7e:	d100      	bne.n	800ce82 <lv_txt_utf8_size+0x2e>
        return 4;
 800ce80:	3003      	adds	r0, #3
}
 800ce82:	4770      	bx	lr

0800ce84 <lv_txt_utf8_next>:
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 800ce84:	2300      	movs	r3, #0
{
 800ce86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t i_tmp = 0;
 800ce88:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 800ce8a:	4299      	cmp	r1, r3
 800ce8c:	d100      	bne.n	800ce90 <lv_txt_utf8_next+0xc>
 800ce8e:	a901      	add	r1, sp, #4

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 800ce90:	680a      	ldr	r2, [r1, #0]
 800ce92:	5c84      	ldrb	r4, [r0, r2]
 800ce94:	1c53      	adds	r3, r2, #1
 800ce96:	b265      	sxtb	r5, r4
 800ce98:	2d00      	cmp	r5, #0
 800ce9a:	db02      	blt.n	800cea2 <lv_txt_utf8_next+0x1e>
        result = txt[*i];
 800ce9c:	0020      	movs	r0, r4
        (*i)++;
 800ce9e:	600b      	str	r3, [r1, #0]
        } else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 800cea0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if((txt[*i] & 0xE0) == 0xC0) {
 800cea2:	251f      	movs	r5, #31
 800cea4:	0026      	movs	r6, r4
 800cea6:	43ae      	bics	r6, r5
 800cea8:	0035      	movs	r5, r6
 800ceaa:	2ec0      	cmp	r6, #192	; 0xc0
 800ceac:	d111      	bne.n	800ced2 <lv_txt_utf8_next+0x4e>
            (*i)++;
 800ceae:	600b      	str	r3, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800ceb0:	5cc3      	ldrb	r3, [r0, r3]
 800ceb2:	3d81      	subs	r5, #129	; 0x81
 800ceb4:	0018      	movs	r0, r3
 800ceb6:	43a8      	bics	r0, r5
 800ceb8:	2880      	cmp	r0, #128	; 0x80
 800ceba:	d001      	beq.n	800cec0 <lv_txt_utf8_next+0x3c>
    uint32_t result = 0;
 800cebc:	2000      	movs	r0, #0
 800cebe:	e7ef      	b.n	800cea0 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 800cec0:	01a0      	lsls	r0, r4, #6
 800cec2:	24f8      	movs	r4, #248	; 0xf8
 800cec4:	00e4      	lsls	r4, r4, #3
 800cec6:	4004      	ands	r4, r0
            result += (txt[*i] & 0x3F);
 800cec8:	402b      	ands	r3, r5
 800ceca:	1918      	adds	r0, r3, r4
            (*i)++;
 800cecc:	3202      	adds	r2, #2
            (*i)++;
 800cece:	600a      	str	r2, [r1, #0]
 800ced0:	e7e6      	b.n	800cea0 <lv_txt_utf8_next+0x1c>
        else if((txt[*i] & 0xF0) == 0xE0) {
 800ced2:	250f      	movs	r5, #15
 800ced4:	0026      	movs	r6, r4
 800ced6:	43ae      	bics	r6, r5
 800ced8:	2ee0      	cmp	r6, #224	; 0xe0
 800ceda:	d119      	bne.n	800cf10 <lv_txt_utf8_next+0x8c>
            (*i)++;
 800cedc:	600b      	str	r3, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800cede:	5cc3      	ldrb	r3, [r0, r3]
 800cee0:	263f      	movs	r6, #63	; 0x3f
 800cee2:	001d      	movs	r5, r3
 800cee4:	43b5      	bics	r5, r6
 800cee6:	2d80      	cmp	r5, #128	; 0x80
 800cee8:	d1e8      	bne.n	800cebc <lv_txt_utf8_next+0x38>
            (*i)++;
 800ceea:	1c95      	adds	r5, r2, #2
 800ceec:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800ceee:	5d45      	ldrb	r5, [r0, r5]
 800cef0:	0028      	movs	r0, r5
 800cef2:	43b0      	bics	r0, r6
 800cef4:	2880      	cmp	r0, #128	; 0x80
 800cef6:	d1e1      	bne.n	800cebc <lv_txt_utf8_next+0x38>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 800cef8:	0720      	lsls	r0, r4, #28
            result += (txt[*i] & 0x3F);
 800cefa:	002c      	movs	r4, r5
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 800cefc:	0c00      	lsrs	r0, r0, #16
            result += (txt[*i] & 0x3F);
 800cefe:	4034      	ands	r4, r6
 800cf00:	1904      	adds	r4, r0, r4
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 800cf02:	0198      	lsls	r0, r3, #6
 800cf04:	23fc      	movs	r3, #252	; 0xfc
 800cf06:	011b      	lsls	r3, r3, #4
 800cf08:	4018      	ands	r0, r3
            result += (txt[*i] & 0x3F);
 800cf0a:	1900      	adds	r0, r0, r4
            (*i)++;
 800cf0c:	3203      	adds	r2, #3
 800cf0e:	e7de      	b.n	800cece <lv_txt_utf8_next+0x4a>
        else if((txt[*i] & 0xF8) == 0xF0) {
 800cf10:	2507      	movs	r5, #7
 800cf12:	0026      	movs	r6, r4
            (*i)++;
 800cf14:	600b      	str	r3, [r1, #0]
        else if((txt[*i] & 0xF8) == 0xF0) {
 800cf16:	43ae      	bics	r6, r5
 800cf18:	2ef0      	cmp	r6, #240	; 0xf0
 800cf1a:	d1cf      	bne.n	800cebc <lv_txt_utf8_next+0x38>
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800cf1c:	5cc7      	ldrb	r7, [r0, r3]
 800cf1e:	263f      	movs	r6, #63	; 0x3f
 800cf20:	003b      	movs	r3, r7
 800cf22:	43b3      	bics	r3, r6
 800cf24:	2b80      	cmp	r3, #128	; 0x80
 800cf26:	d1c9      	bne.n	800cebc <lv_txt_utf8_next+0x38>
            (*i)++;
 800cf28:	1c93      	adds	r3, r2, #2
 800cf2a:	600b      	str	r3, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800cf2c:	5cc3      	ldrb	r3, [r0, r3]
 800cf2e:	001d      	movs	r5, r3
 800cf30:	43b5      	bics	r5, r6
 800cf32:	2d80      	cmp	r5, #128	; 0x80
 800cf34:	d1c2      	bne.n	800cebc <lv_txt_utf8_next+0x38>
            (*i)++;
 800cf36:	1cd5      	adds	r5, r2, #3
 800cf38:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800cf3a:	5d45      	ldrb	r5, [r0, r5]
 800cf3c:	0028      	movs	r0, r5
 800cf3e:	43b0      	bics	r0, r6
 800cf40:	2880      	cmp	r0, #128	; 0x80
 800cf42:	d1bb      	bne.n	800cebc <lv_txt_utf8_next+0x38>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 800cf44:	20e0      	movs	r0, #224	; 0xe0
 800cf46:	04a4      	lsls	r4, r4, #18
 800cf48:	0340      	lsls	r0, r0, #13
 800cf4a:	4004      	ands	r4, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 800cf4c:	20fc      	movs	r0, #252	; 0xfc
 800cf4e:	033f      	lsls	r7, r7, #12
 800cf50:	0280      	lsls	r0, r0, #10
 800cf52:	4038      	ands	r0, r7
 800cf54:	4304      	orrs	r4, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 800cf56:	20fc      	movs	r0, #252	; 0xfc
 800cf58:	019b      	lsls	r3, r3, #6
 800cf5a:	0100      	lsls	r0, r0, #4
 800cf5c:	4018      	ands	r0, r3
            result += txt[*i] & 0x3F;
 800cf5e:	4035      	ands	r5, r6
 800cf60:	1940      	adds	r0, r0, r5
 800cf62:	1900      	adds	r0, r0, r4
            (*i)++;
 800cf64:	3204      	adds	r2, #4
 800cf66:	e7b2      	b.n	800cece <lv_txt_utf8_next+0x4a>

0800cf68 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 800cf68:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t i        = 0;
 800cf6a:	2400      	movs	r4, #0
{
 800cf6c:	0006      	movs	r6, r0
 800cf6e:	000d      	movs	r5, r1
    uint32_t i        = 0;
 800cf70:	9401      	str	r4, [sp, #4]
    uint32_t char_cnt = 0;

    while(i < byte_id) {
 800cf72:	9b01      	ldr	r3, [sp, #4]
 800cf74:	42ab      	cmp	r3, r5
 800cf76:	d301      	bcc.n	800cf7c <lv_txt_utf8_get_char_id+0x14>
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
        char_cnt++;
    }

    return char_cnt;
}
 800cf78:	0020      	movs	r0, r4
 800cf7a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 800cf7c:	4b03      	ldr	r3, [pc, #12]	; (800cf8c <lv_txt_utf8_get_char_id+0x24>)
 800cf7e:	a901      	add	r1, sp, #4
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	0030      	movs	r0, r6
 800cf84:	4798      	blx	r3
        char_cnt++;
 800cf86:	3401      	adds	r4, #1
 800cf88:	e7f3      	b.n	800cf72 <lv_txt_utf8_get_char_id+0xa>
 800cf8a:	46c0      	nop			; (mov r8, r8)
 800cf8c:	20000044 	.word	0x20000044

0800cf90 <lv_txt_utf8_prev>:
{
 800cf90:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf92:	0006      	movs	r6, r0
 800cf94:	000d      	movs	r5, r1
    (*i)--;
 800cf96:	2404      	movs	r4, #4
 800cf98:	680b      	ldr	r3, [r1, #0]
 800cf9a:	3b01      	subs	r3, #1
 800cf9c:	600b      	str	r3, [r1, #0]
        c_size = lv_txt_encoded_size(&txt[*i]);
 800cf9e:	682b      	ldr	r3, [r5, #0]
 800cfa0:	18f0      	adds	r0, r6, r3
 800cfa2:	4b0b      	ldr	r3, [pc, #44]	; (800cfd0 <lv_txt_utf8_prev+0x40>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	4798      	blx	r3
 800cfa8:	682b      	ldr	r3, [r5, #0]
        if(c_size == 0) {
 800cfaa:	2800      	cmp	r0, #0
 800cfac:	d109      	bne.n	800cfc2 <lv_txt_utf8_prev+0x32>
            if(*i != 0)
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d005      	beq.n	800cfbe <lv_txt_utf8_prev+0x2e>
 800cfb2:	3c01      	subs	r4, #1
                (*i)--;
 800cfb4:	3b01      	subs	r3, #1
 800cfb6:	b2e4      	uxtb	r4, r4
 800cfb8:	602b      	str	r3, [r5, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 800cfba:	2c00      	cmp	r4, #0
 800cfbc:	d1ef      	bne.n	800cf9e <lv_txt_utf8_prev+0xe>
 800cfbe:	2000      	movs	r0, #0
}
 800cfc0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    uint32_t i_tmp  = *i;
 800cfc2:	9301      	str	r3, [sp, #4]
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 800cfc4:	4b03      	ldr	r3, [pc, #12]	; (800cfd4 <lv_txt_utf8_prev+0x44>)
 800cfc6:	a901      	add	r1, sp, #4
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	0030      	movs	r0, r6
 800cfcc:	4798      	blx	r3
 800cfce:	e7f7      	b.n	800cfc0 <lv_txt_utf8_prev+0x30>
 800cfd0:	2000004c 	.word	0x2000004c
 800cfd4:	20000044 	.word	0x20000044

0800cfd8 <lv_txt_is_cmd>:
{
 800cfd8:	0002      	movs	r2, r0
    bool ret = false;
 800cfda:	2000      	movs	r0, #0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800cfdc:	2923      	cmp	r1, #35	; 0x23
 800cfde:	d104      	bne.n	800cfea <lv_txt_is_cmd+0x12>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 800cfe0:	7813      	ldrb	r3, [r2, #0]
 800cfe2:	4283      	cmp	r3, r0
 800cfe4:	d10a      	bne.n	800cffc <lv_txt_is_cmd+0x24>
            *state = LV_TXT_CMD_STATE_PAR;
 800cfe6:	3001      	adds	r0, #1
            *state = LV_TXT_CMD_STATE_WAIT;
 800cfe8:	7010      	strb	r0, [r2, #0]
    if(*state == LV_TXT_CMD_STATE_PAR) {
 800cfea:	7813      	ldrb	r3, [r2, #0]
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d104      	bne.n	800cffa <lv_txt_is_cmd+0x22>
        ret = true;
 800cff0:	0018      	movs	r0, r3
        if(c == ' ') {
 800cff2:	2920      	cmp	r1, #32
 800cff4:	d101      	bne.n	800cffa <lv_txt_is_cmd+0x22>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 800cff6:	3301      	adds	r3, #1
 800cff8:	7013      	strb	r3, [r2, #0]
}
 800cffa:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_PAR) {
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d0f3      	beq.n	800cfe8 <lv_txt_is_cmd+0x10>
        else if(*state == LV_TXT_CMD_STATE_IN) {
 800d000:	2b02      	cmp	r3, #2
 800d002:	d1f2      	bne.n	800cfea <lv_txt_is_cmd+0x12>
            *state = LV_TXT_CMD_STATE_WAIT;
 800d004:	7010      	strb	r0, [r2, #0]
            ret    = true;
 800d006:	2001      	movs	r0, #1
 800d008:	e7ef      	b.n	800cfea <lv_txt_is_cmd+0x12>
	...

0800d00c <lv_txt_get_next_line>:
{
 800d00c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d00e:	b08b      	sub	sp, #44	; 0x2c
 800d010:	9303      	str	r3, [sp, #12]
 800d012:	ab10      	add	r3, sp, #64	; 0x40
 800d014:	781b      	ldrb	r3, [r3, #0]
 800d016:	1e05      	subs	r5, r0, #0
 800d018:	9101      	str	r1, [sp, #4]
 800d01a:	9205      	str	r2, [sp, #20]
 800d01c:	9304      	str	r3, [sp, #16]
    if(txt == NULL) return 0;
 800d01e:	d03a      	beq.n	800d096 <lv_txt_get_next_line+0x8a>
 800d020:	1e08      	subs	r0, r1, #0
    if(font == NULL) return 0;
 800d022:	d038      	beq.n	800d096 <lv_txt_get_next_line+0x8a>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800d024:	9b04      	ldr	r3, [sp, #16]
 800d026:	079b      	lsls	r3, r3, #30
 800d028:	d501      	bpl.n	800d02e <lv_txt_get_next_line+0x22>
 800d02a:	4b37      	ldr	r3, [pc, #220]	; (800d108 <lv_txt_get_next_line+0xfc>)
 800d02c:	9303      	str	r3, [sp, #12]
    uint32_t i                   = 0;
 800d02e:	2400      	movs	r4, #0
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800d030:	ab06      	add	r3, sp, #24
 800d032:	71dc      	strb	r4, [r3, #7]
    letter_next = lv_txt_encoded_next(txt, &i_next);
 800d034:	4b35      	ldr	r3, [pc, #212]	; (800d10c <lv_txt_get_next_line+0x100>)
    uint32_t i                   = 0;
 800d036:	9408      	str	r4, [sp, #32]
    letter_next = lv_txt_encoded_next(txt, &i_next);
 800d038:	681b      	ldr	r3, [r3, #0]
    uint32_t i_next              = 0;
 800d03a:	9409      	str	r4, [sp, #36]	; 0x24
    letter_next = lv_txt_encoded_next(txt, &i_next);
 800d03c:	a909      	add	r1, sp, #36	; 0x24
 800d03e:	0028      	movs	r0, r5
 800d040:	4798      	blx	r3
    uint32_t last_break          = NO_BREAK_FOUND;
 800d042:	2301      	movs	r3, #1
    letter_next = lv_txt_encoded_next(txt, &i_next);
 800d044:	0006      	movs	r6, r0
    uint32_t last_break          = NO_BREAK_FOUND;
 800d046:	425b      	negs	r3, r3
 800d048:	9300      	str	r3, [sp, #0]
    while(txt[i] != '\0') {
 800d04a:	9808      	ldr	r0, [sp, #32]
 800d04c:	5c2b      	ldrb	r3, [r5, r0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d101      	bne.n	800d056 <lv_txt_get_next_line+0x4a>
    return i;
 800d052:	b280      	uxth	r0, r0
 800d054:	e01f      	b.n	800d096 <lv_txt_get_next_line+0x8a>
        i           = i_next;
 800d056:	9b09      	ldr	r3, [sp, #36]	; 0x24
        letter_next = lv_txt_encoded_next(txt, &i_next);
 800d058:	a909      	add	r1, sp, #36	; 0x24
        i           = i_next;
 800d05a:	9308      	str	r3, [sp, #32]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 800d05c:	4b2b      	ldr	r3, [pc, #172]	; (800d10c <lv_txt_get_next_line+0x100>)
 800d05e:	0028      	movs	r0, r5
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	4798      	blx	r3
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800d064:	2201      	movs	r2, #1
 800d066:	9b04      	ldr	r3, [sp, #16]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 800d068:	0007      	movs	r7, r0
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800d06a:	4213      	tst	r3, r2
 800d06c:	d104      	bne.n	800d078 <lv_txt_get_next_line+0x6c>
        if(letter == '\n' || letter == '\r') {
 800d06e:	2e0a      	cmp	r6, #10
 800d070:	d10b      	bne.n	800d08a <lv_txt_get_next_line+0x7e>
                return i;
 800d072:	ab06      	add	r3, sp, #24
 800d074:	8918      	ldrh	r0, [r3, #8]
 800d076:	e00e      	b.n	800d096 <lv_txt_get_next_line+0x8a>
            if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 800d078:	ab06      	add	r3, sp, #24
 800d07a:	0031      	movs	r1, r6
 800d07c:	1dd8      	adds	r0, r3, #7
 800d07e:	f7ff ffab 	bl	800cfd8 <lv_txt_is_cmd>
 800d082:	2800      	cmp	r0, #0
 800d084:	d0f3      	beq.n	800d06e <lv_txt_get_next_line+0x62>
        letter_next = lv_txt_encoded_next(txt, &i_next);
 800d086:	003e      	movs	r6, r7
 800d088:	e7df      	b.n	800d04a <lv_txt_get_next_line+0x3e>
        if(letter == '\n' || letter == '\r') {
 800d08a:	2e0d      	cmp	r6, #13
 800d08c:	d105      	bne.n	800d09a <lv_txt_get_next_line+0x8e>
            if(letter == '\r' && letter_next == '\n')
 800d08e:	2f0a      	cmp	r7, #10
 800d090:	d1ef      	bne.n	800d072 <lv_txt_get_next_line+0x66>
                return i_next;
 800d092:	ab06      	add	r3, sp, #24
 800d094:	8998      	ldrh	r0, [r3, #12]
}
 800d096:	b00b      	add	sp, #44	; 0x2c
 800d098:	bdf0      	pop	{r4, r5, r6, r7, pc}
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800d09a:	003a      	movs	r2, r7
 800d09c:	0031      	movs	r1, r6
 800d09e:	9801      	ldr	r0, [sp, #4]
 800d0a0:	f7fe feb4 	bl	800be0c <lv_font_get_glyph_width>
            cur_w += letter_w;
 800d0a4:	1904      	adds	r4, r0, r4
 800d0a6:	b2a3      	uxth	r3, r4
 800d0a8:	9302      	str	r3, [sp, #8]
 800d0aa:	466b      	mov	r3, sp
 800d0ac:	891b      	ldrh	r3, [r3, #8]
            if(cur_w > max_width) {
 800d0ae:	9a03      	ldr	r2, [sp, #12]
            cur_w += letter_w;
 800d0b0:	b21c      	sxth	r4, r3
            if(cur_w > max_width) {
 800d0b2:	42a2      	cmp	r2, r4
 800d0b4:	db0c      	blt.n	800d0d0 <lv_txt_get_next_line+0xc4>
 800d0b6:	2200      	movs	r2, #0
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 800d0b8:	4915      	ldr	r1, [pc, #84]	; (800d110 <lv_txt_get_next_line+0x104>)
 800d0ba:	5c8b      	ldrb	r3, [r1, r2]
 800d0bc:	469c      	mov	ip, r3
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d11a      	bne.n	800d0f8 <lv_txt_get_next_line+0xec>
        if(letter_w > 0) {
 800d0c2:	2800      	cmp	r0, #0
 800d0c4:	d0df      	beq.n	800d086 <lv_txt_get_next_line+0x7a>
            cur_w += letter_space;
 800d0c6:	9b05      	ldr	r3, [sp, #20]
 800d0c8:	9a02      	ldr	r2, [sp, #8]
 800d0ca:	18d3      	adds	r3, r2, r3
 800d0cc:	b21c      	sxth	r4, r3
 800d0ce:	e7da      	b.n	800d086 <lv_txt_get_next_line+0x7a>
                if(last_break != NO_BREAK_FOUND) {
 800d0d0:	9b00      	ldr	r3, [sp, #0]
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	d00a      	beq.n	800d0ec <lv_txt_get_next_line+0xe0>
                    i = last_break;
 800d0d6:	9b00      	ldr	r3, [sp, #0]
 800d0d8:	9308      	str	r3, [sp, #32]
                if(i == 0) lv_txt_encoded_next(txt, &i);
 800d0da:	9b08      	ldr	r3, [sp, #32]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d1c8      	bne.n	800d072 <lv_txt_get_next_line+0x66>
 800d0e0:	4b0a      	ldr	r3, [pc, #40]	; (800d10c <lv_txt_get_next_line+0x100>)
 800d0e2:	a908      	add	r1, sp, #32
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	0028      	movs	r0, r5
 800d0e8:	4798      	blx	r3
 800d0ea:	e7c2      	b.n	800d072 <lv_txt_get_next_line+0x66>
                    lv_txt_encoded_prev(txt, &i);
 800d0ec:	4b09      	ldr	r3, [pc, #36]	; (800d114 <lv_txt_get_next_line+0x108>)
 800d0ee:	a908      	add	r1, sp, #32
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	0028      	movs	r0, r5
 800d0f4:	4798      	blx	r3
 800d0f6:	e7f0      	b.n	800d0da <lv_txt_get_next_line+0xce>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 800d0f8:	4566      	cmp	r6, ip
 800d0fa:	d002      	beq.n	800d102 <lv_txt_get_next_line+0xf6>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 800d0fc:	3201      	adds	r2, #1
 800d0fe:	b2d2      	uxtb	r2, r2
 800d100:	e7db      	b.n	800d0ba <lv_txt_get_next_line+0xae>
                last_break = i; /*Save the first char index after break*/
 800d102:	9b08      	ldr	r3, [sp, #32]
 800d104:	9300      	str	r3, [sp, #0]
 800d106:	e7dc      	b.n	800d0c2 <lv_txt_get_next_line+0xb6>
 800d108:	00007c18 	.word	0x00007c18
 800d10c:	20000044 	.word	0x20000044
 800d110:	08010da8 	.word	0x08010da8
 800d114:	20000048 	.word	0x20000048

0800d118 <lv_txt_get_width>:
{
 800d118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d11a:	b087      	sub	sp, #28
 800d11c:	9302      	str	r3, [sp, #8]
 800d11e:	ab0c      	add	r3, sp, #48	; 0x30
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	1e05      	subs	r5, r0, #0
 800d124:	9100      	str	r1, [sp, #0]
 800d126:	9201      	str	r2, [sp, #4]
 800d128:	9303      	str	r3, [sp, #12]
    if(txt == NULL) return 0;
 800d12a:	d103      	bne.n	800d134 <lv_txt_get_width+0x1c>
 800d12c:	2400      	movs	r4, #0
}
 800d12e:	0020      	movs	r0, r4
 800d130:	b007      	add	sp, #28
 800d132:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(font == NULL) return 0;
 800d134:	9b01      	ldr	r3, [sp, #4]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d0f8      	beq.n	800d12c <lv_txt_get_width+0x14>
    uint32_t i                   = 0;
 800d13a:	2400      	movs	r4, #0
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800d13c:	ab04      	add	r3, sp, #16
 800d13e:	70dc      	strb	r4, [r3, #3]
    if(length != 0) {
 800d140:	9b00      	ldr	r3, [sp, #0]
    uint32_t i                   = 0;
 800d142:	9405      	str	r4, [sp, #20]
    if(length != 0) {
 800d144:	42a3      	cmp	r3, r4
 800d146:	d0f1      	beq.n	800d12c <lv_txt_get_width+0x14>
        while(i < length) {
 800d148:	9b00      	ldr	r3, [sp, #0]
 800d14a:	9a05      	ldr	r2, [sp, #20]
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d805      	bhi.n	800d15c <lv_txt_get_width+0x44>
        if(width > 0) {
 800d150:	2c00      	cmp	r4, #0
 800d152:	ddec      	ble.n	800d12e <lv_txt_get_width+0x16>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 800d154:	9b02      	ldr	r3, [sp, #8]
 800d156:	1ae4      	subs	r4, r4, r3
 800d158:	b224      	sxth	r4, r4
 800d15a:	e7e8      	b.n	800d12e <lv_txt_get_width+0x16>
            letter      = lv_txt_encoded_next(txt, &i);
 800d15c:	4f12      	ldr	r7, [pc, #72]	; (800d1a8 <lv_txt_get_width+0x90>)
 800d15e:	a905      	add	r1, sp, #20
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	0028      	movs	r0, r5
 800d164:	4798      	blx	r3
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800d166:	9b05      	ldr	r3, [sp, #20]
            letter      = lv_txt_encoded_next(txt, &i);
 800d168:	0006      	movs	r6, r0
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800d16a:	2100      	movs	r1, #0
 800d16c:	18e8      	adds	r0, r5, r3
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	4798      	blx	r3
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800d172:	2201      	movs	r2, #1
 800d174:	9b03      	ldr	r3, [sp, #12]
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800d176:	0007      	movs	r7, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800d178:	4213      	tst	r3, r2
 800d17a:	d10c      	bne.n	800d196 <lv_txt_get_width+0x7e>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 800d17c:	003a      	movs	r2, r7
 800d17e:	0031      	movs	r1, r6
 800d180:	9801      	ldr	r0, [sp, #4]
 800d182:	f7fe fe43 	bl	800be0c <lv_font_get_glyph_width>
            if(char_width > 0) {
 800d186:	b203      	sxth	r3, r0
 800d188:	2b00      	cmp	r3, #0
 800d18a:	dddd      	ble.n	800d148 <lv_txt_get_width+0x30>
                width += letter_space;
 800d18c:	9b02      	ldr	r3, [sp, #8]
 800d18e:	18e4      	adds	r4, r4, r3
 800d190:	1904      	adds	r4, r0, r4
 800d192:	b224      	sxth	r4, r4
 800d194:	e7d8      	b.n	800d148 <lv_txt_get_width+0x30>
                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 800d196:	ab04      	add	r3, sp, #16
 800d198:	0031      	movs	r1, r6
 800d19a:	1cd8      	adds	r0, r3, #3
 800d19c:	f7ff ff1c 	bl	800cfd8 <lv_txt_is_cmd>
 800d1a0:	2800      	cmp	r0, #0
 800d1a2:	d1d1      	bne.n	800d148 <lv_txt_get_width+0x30>
 800d1a4:	e7ea      	b.n	800d17c <lv_txt_get_width+0x64>
 800d1a6:	46c0      	nop			; (mov r8, r8)
 800d1a8:	20000044 	.word	0x20000044

0800d1ac <lv_txt_get_size>:
{
 800d1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1ae:	b089      	sub	sp, #36	; 0x24
 800d1b0:	9306      	str	r3, [sp, #24]
 800d1b2:	ab0e      	add	r3, sp, #56	; 0x38
 800d1b4:	0016      	movs	r6, r2
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	5e9b      	ldrsh	r3, [r3, r2]
 800d1ba:	0004      	movs	r4, r0
 800d1bc:	9303      	str	r3, [sp, #12]
 800d1be:	ab0f      	add	r3, sp, #60	; 0x3c
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	5e9b      	ldrsh	r3, [r3, r2]
 800d1c4:	9105      	str	r1, [sp, #20]
 800d1c6:	9307      	str	r3, [sp, #28]
 800d1c8:	ab10      	add	r3, sp, #64	; 0x40
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	9304      	str	r3, [sp, #16]
    size_res->x = 0;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	8003      	strh	r3, [r0, #0]
    size_res->y = 0;
 800d1d2:	8043      	strh	r3, [r0, #2]
    if(text == NULL) return;
 800d1d4:	2900      	cmp	r1, #0
 800d1d6:	d023      	beq.n	800d220 <lv_txt_get_size+0x74>
    if(font == NULL) return;
 800d1d8:	2e00      	cmp	r6, #0
 800d1da:	d021      	beq.n	800d220 <lv_txt_get_size+0x74>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800d1dc:	9b04      	ldr	r3, [sp, #16]
 800d1de:	079b      	lsls	r3, r3, #30
 800d1e0:	d501      	bpl.n	800d1e6 <lv_txt_get_size+0x3a>
 800d1e2:	4b21      	ldr	r3, [pc, #132]	; (800d268 <lv_txt_get_size+0xbc>)
 800d1e4:	9307      	str	r3, [sp, #28]
    uint32_t line_start     = 0;
 800d1e6:	2700      	movs	r7, #0
 800d1e8:	7a33      	ldrb	r3, [r6, #8]
 800d1ea:	9302      	str	r3, [sp, #8]
    while(text[line_start] != '\0') {
 800d1ec:	9b05      	ldr	r3, [sp, #20]
 800d1ee:	19dd      	adds	r5, r3, r7
 800d1f0:	782b      	ldrb	r3, [r5, #0]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d116      	bne.n	800d224 <lv_txt_get_size+0x78>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 800d1f6:	2f00      	cmp	r7, #0
 800d1f8:	d00b      	beq.n	800d212 <lv_txt_get_size+0x66>
 800d1fa:	3d01      	subs	r5, #1
 800d1fc:	782b      	ldrb	r3, [r5, #0]
 800d1fe:	2b0a      	cmp	r3, #10
 800d200:	d001      	beq.n	800d206 <lv_txt_get_size+0x5a>
 800d202:	2b0d      	cmp	r3, #13
 800d204:	d105      	bne.n	800d212 <lv_txt_get_size+0x66>
        size_res->y += letter_height + line_space;
 800d206:	9b02      	ldr	r3, [sp, #8]
 800d208:	9a03      	ldr	r2, [sp, #12]
 800d20a:	189a      	adds	r2, r3, r2
 800d20c:	8863      	ldrh	r3, [r4, #2]
 800d20e:	189b      	adds	r3, r3, r2
 800d210:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
 800d212:	2202      	movs	r2, #2
 800d214:	5ea3      	ldrsh	r3, [r4, r2]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d123      	bne.n	800d262 <lv_txt_get_size+0xb6>
        size_res->y = letter_height;
 800d21a:	466b      	mov	r3, sp
 800d21c:	891b      	ldrh	r3, [r3, #8]
        size_res->y -= line_space;
 800d21e:	8063      	strh	r3, [r4, #2]
}
 800d220:	b009      	add	sp, #36	; 0x24
 800d222:	bdf0      	pop	{r4, r5, r6, r7, pc}
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 800d224:	9b04      	ldr	r3, [sp, #16]
 800d226:	9a06      	ldr	r2, [sp, #24]
 800d228:	9300      	str	r3, [sp, #0]
 800d22a:	0031      	movs	r1, r6
 800d22c:	9b07      	ldr	r3, [sp, #28]
 800d22e:	0028      	movs	r0, r5
 800d230:	f7ff feec 	bl	800d00c <lv_txt_get_next_line>
        size_res->y += line_space;
 800d234:	9b02      	ldr	r3, [sp, #8]
 800d236:	9a03      	ldr	r2, [sp, #12]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 800d238:	0001      	movs	r1, r0
        size_res->y += line_space;
 800d23a:	189a      	adds	r2, r3, r2
 800d23c:	8863      	ldrh	r3, [r4, #2]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 800d23e:	183f      	adds	r7, r7, r0
        size_res->y += line_space;
 800d240:	189b      	adds	r3, r3, r2
 800d242:	8063      	strh	r3, [r4, #2]
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 800d244:	9b04      	ldr	r3, [sp, #16]
 800d246:	0032      	movs	r2, r6
 800d248:	9300      	str	r3, [sp, #0]
 800d24a:	0028      	movs	r0, r5
 800d24c:	9b06      	ldr	r3, [sp, #24]
 800d24e:	f7ff ff63 	bl	800d118 <lv_txt_get_width>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 800d252:	8823      	ldrh	r3, [r4, #0]
 800d254:	1c1a      	adds	r2, r3, #0
 800d256:	b21b      	sxth	r3, r3
 800d258:	4283      	cmp	r3, r0
 800d25a:	da00      	bge.n	800d25e <lv_txt_get_size+0xb2>
 800d25c:	1c02      	adds	r2, r0, #0
 800d25e:	8022      	strh	r2, [r4, #0]
 800d260:	e7c4      	b.n	800d1ec <lv_txt_get_size+0x40>
        size_res->y -= line_space;
 800d262:	9a03      	ldr	r2, [sp, #12]
 800d264:	1a9b      	subs	r3, r3, r2
 800d266:	e7da      	b.n	800d21e <lv_txt_get_size+0x72>
 800d268:	00007c18 	.word	0x00007c18

0800d26c <lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                        int32_t (*cmp)(const void * pRef, const void * pElement))
{
 800d26c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d26e:	000f      	movs	r7, r1
 800d270:	0015      	movs	r5, r2
 800d272:	9001      	str	r0, [sp, #4]
 800d274:	9300      	str	r3, [sp, #0]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 800d276:	2d00      	cmp	r5, #0
 800d278:	d101      	bne.n	800d27e <lv_utils_bsearch+0x12>
            middle = base;
        } else {
            return (char *)middle;
        }
    }
    return NULL;
 800d27a:	0028      	movs	r0, r5
}
 800d27c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        middle += (n / 2) * size;
 800d27e:	9c00      	ldr	r4, [sp, #0]
 800d280:	086e      	lsrs	r6, r5, #1
 800d282:	4374      	muls	r4, r6
 800d284:	193c      	adds	r4, r7, r4
        if((c = (*cmp)(key, middle)) > 0) {
 800d286:	0021      	movs	r1, r4
 800d288:	9801      	ldr	r0, [sp, #4]
 800d28a:	9b08      	ldr	r3, [sp, #32]
 800d28c:	4798      	blx	r3
 800d28e:	2800      	cmp	r0, #0
 800d290:	dd06      	ble.n	800d2a0 <lv_utils_bsearch+0x34>
 800d292:	2301      	movs	r3, #1
 800d294:	43ab      	bics	r3, r5
            n    = (n / 2) - ((n & 1) == 0);
 800d296:	1af6      	subs	r6, r6, r3
            base = (middle += size);
 800d298:	9b00      	ldr	r3, [sp, #0]
 800d29a:	18e7      	adds	r7, r4, r3
 800d29c:	0035      	movs	r5, r6
 800d29e:	e7ea      	b.n	800d276 <lv_utils_bsearch+0xa>
        } else if(c < 0) {
 800d2a0:	2800      	cmp	r0, #0
 800d2a2:	d1fb      	bne.n	800d29c <lv_utils_bsearch+0x30>
        middle += (n / 2) * size;
 800d2a4:	0020      	movs	r0, r4
 800d2a6:	e7e9      	b.n	800d27c <lv_utils_bsearch+0x10>

0800d2a8 <lv_img_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_img_design(lv_obj_t * img, const lv_area_t * mask, lv_design_mode_t mode)
{
 800d2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2aa:	b09d      	sub	sp, #116	; 0x74
 800d2ac:	0005      	movs	r5, r0
 800d2ae:	9108      	str	r1, [sp, #32]
 800d2b0:	0016      	movs	r6, r2
    const lv_style_t * style = lv_obj_get_style(img);
 800d2b2:	f7fa f927 	bl	8007504 <lv_obj_get_style>
 800d2b6:	9007      	str	r0, [sp, #28]
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
 800d2b8:	0028      	movs	r0, r5
 800d2ba:	f7fa f9e9 	bl	8007690 <lv_obj_get_ext_attr>
 800d2be:	0004      	movs	r4, r0

    if(mode == LV_DESIGN_COVER_CHK) {
 800d2c0:	2e02      	cmp	r6, #2
 800d2c2:	d113      	bne.n	800d2ec <lv_img_design+0x44>
        bool cover = false;
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return false;
 800d2c4:	2203      	movs	r2, #3
 800d2c6:	7b03      	ldrb	r3, [r0, #12]
 800d2c8:	2000      	movs	r0, #0
 800d2ca:	401a      	ands	r2, r3
 800d2cc:	3a02      	subs	r2, #2
 800d2ce:	2a01      	cmp	r2, #1
 800d2d0:	d90a      	bls.n	800d2e8 <lv_img_design+0x40>

        if(ext->cf == LV_IMG_CF_TRUE_COLOR || ext->cf == LV_IMG_CF_RAW) cover = lv_area_is_in(mask, &img->coords);
 800d2d2:	2207      	movs	r2, #7
 800d2d4:	4393      	bics	r3, r2
 800d2d6:	2b20      	cmp	r3, #32
 800d2d8:	d001      	beq.n	800d2de <lv_img_design+0x36>
 800d2da:	2b08      	cmp	r3, #8
 800d2dc:	d104      	bne.n	800d2e8 <lv_img_design+0x40>
 800d2de:	0029      	movs	r1, r5
 800d2e0:	9808      	ldr	r0, [sp, #32]
 800d2e2:	3110      	adds	r1, #16
 800d2e4:	f7ff f8e8 	bl	800c4b8 <lv_area_is_in>
            lv_draw_img(&img->coords, mask, NULL, style, opa_scale);
        }
    }

    return true;
}
 800d2e8:	b01d      	add	sp, #116	; 0x74
 800d2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return true;
 800d2ec:	2001      	movs	r0, #1
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 800d2ee:	2e00      	cmp	r6, #0
 800d2f0:	d1fa      	bne.n	800d2e8 <lv_img_design+0x40>
        if(ext->h == 0 || ext->w == 0) return true;
 800d2f2:	220a      	movs	r2, #10
 800d2f4:	5ea3      	ldrsh	r3, [r4, r2]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d003      	beq.n	800d302 <lv_img_design+0x5a>
 800d2fa:	2208      	movs	r2, #8
 800d2fc:	5ea3      	ldrsh	r3, [r4, r2]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d101      	bne.n	800d306 <lv_img_design+0x5e>
 800d302:	2001      	movs	r0, #1
 800d304:	e7f0      	b.n	800d2e8 <lv_img_design+0x40>
        lv_opa_t opa_scale = lv_obj_get_opa_scale(img);
 800d306:	0028      	movs	r0, r5
 800d308:	f7fa f95b 	bl	80075c2 <lv_obj_get_opa_scale>
        lv_obj_get_coords(img, &coords);
 800d30c:	af0b      	add	r7, sp, #44	; 0x2c
        lv_opa_t opa_scale = lv_obj_get_opa_scale(img);
 800d30e:	9009      	str	r0, [sp, #36]	; 0x24
        lv_obj_get_coords(img, &coords);
 800d310:	0039      	movs	r1, r7
 800d312:	0028      	movs	r0, r5
 800d314:	f7fa f8e0 	bl	80074d8 <lv_obj_get_coords>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
 800d318:	2203      	movs	r2, #3
 800d31a:	7b23      	ldrb	r3, [r4, #12]
 800d31c:	4013      	ands	r3, r2
 800d31e:	2b01      	cmp	r3, #1
 800d320:	d83e      	bhi.n	800d3a0 <lv_img_design+0xf8>
            coords.x1 -= ext->offset.x;
 800d322:	88a2      	ldrh	r2, [r4, #4]
 800d324:	883b      	ldrh	r3, [r7, #0]
            cords_tmp.y1 = coords.y1;
 800d326:	a90d      	add	r1, sp, #52	; 0x34
            coords.x1 -= ext->offset.x;
 800d328:	1a9b      	subs	r3, r3, r2
 800d32a:	803b      	strh	r3, [r7, #0]
            coords.y1 -= ext->offset.y;
 800d32c:	88e2      	ldrh	r2, [r4, #6]
 800d32e:	887b      	ldrh	r3, [r7, #2]
 800d330:	1a9b      	subs	r3, r3, r2
 800d332:	b29b      	uxth	r3, r3
 800d334:	b21a      	sxth	r2, r3
 800d336:	807a      	strh	r2, [r7, #2]
            cords_tmp.y1 = coords.y1;
 800d338:	804a      	strh	r2, [r1, #2]
            cords_tmp.y2 = coords.y1 + ext->h - 1;
 800d33a:	8962      	ldrh	r2, [r4, #10]
 800d33c:	3a01      	subs	r2, #1
 800d33e:	189b      	adds	r3, r3, r2
 800d340:	80cb      	strh	r3, [r1, #6]
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 800d342:	aa0d      	add	r2, sp, #52	; 0x34
 800d344:	ab0b      	add	r3, sp, #44	; 0x2c
 800d346:	2102      	movs	r1, #2
 800d348:	5e50      	ldrsh	r0, [r2, r1]
 800d34a:	2506      	movs	r5, #6
 800d34c:	5f59      	ldrsh	r1, [r3, r5]
 800d34e:	4288      	cmp	r0, r1
 800d350:	dad7      	bge.n	800d302 <lv_img_design+0x5a>
                cords_tmp.x1 = coords.x1;
 800d352:	2100      	movs	r1, #0
 800d354:	5e5b      	ldrsh	r3, [r3, r1]
 800d356:	8013      	strh	r3, [r2, #0]
                cords_tmp.x2 = coords.x1 + ext->w - 1;
 800d358:	8921      	ldrh	r1, [r4, #8]
 800d35a:	3b01      	subs	r3, #1
 800d35c:	18cb      	adds	r3, r1, r3
 800d35e:	8093      	strh	r3, [r2, #4]
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 800d360:	ad0d      	add	r5, sp, #52	; 0x34
 800d362:	2300      	movs	r3, #0
 800d364:	5eea      	ldrsh	r2, [r5, r3]
 800d366:	ab0b      	add	r3, sp, #44	; 0x2c
 800d368:	2104      	movs	r1, #4
 800d36a:	5e5b      	ldrsh	r3, [r3, r1]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	db07      	blt.n	800d380 <lv_img_design+0xd8>
            for(; cords_tmp.y1 < coords.y2; cords_tmp.y1 += ext->h, cords_tmp.y2 += ext->h) {
 800d370:	8963      	ldrh	r3, [r4, #10]
 800d372:	886a      	ldrh	r2, [r5, #2]
 800d374:	189a      	adds	r2, r3, r2
 800d376:	806a      	strh	r2, [r5, #2]
 800d378:	88ea      	ldrh	r2, [r5, #6]
 800d37a:	189b      	adds	r3, r3, r2
 800d37c:	80eb      	strh	r3, [r5, #6]
 800d37e:	e7e0      	b.n	800d342 <lv_img_design+0x9a>
                    lv_draw_img(&cords_tmp, mask, ext->src, style, opa_scale);
 800d380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d382:	9908      	ldr	r1, [sp, #32]
 800d384:	9300      	str	r3, [sp, #0]
 800d386:	6822      	ldr	r2, [r4, #0]
 800d388:	9b07      	ldr	r3, [sp, #28]
 800d38a:	0028      	movs	r0, r5
 800d38c:	f7fb fe6e 	bl	800906c <lv_draw_img>
                for(; cords_tmp.x1 < coords.x2; cords_tmp.x1 += ext->w, cords_tmp.x2 += ext->w) {
 800d390:	8923      	ldrh	r3, [r4, #8]
 800d392:	882a      	ldrh	r2, [r5, #0]
 800d394:	189a      	adds	r2, r3, r2
 800d396:	802a      	strh	r2, [r5, #0]
 800d398:	88aa      	ldrh	r2, [r5, #4]
 800d39a:	189b      	adds	r3, r3, r2
 800d39c:	80ab      	strh	r3, [r5, #4]
 800d39e:	e7df      	b.n	800d360 <lv_img_design+0xb8>
        } else if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 800d3a0:	2b02      	cmp	r3, #2
 800d3a2:	d116      	bne.n	800d3d2 <lv_img_design+0x12a>
            lv_style_copy(&style_mod, style);
 800d3a4:	ad0d      	add	r5, sp, #52	; 0x34
 800d3a6:	9907      	ldr	r1, [sp, #28]
 800d3a8:	0028      	movs	r0, r5
 800d3aa:	f7fa fcd5 	bl	8007d58 <lv_style_copy>
            style_mod.text.color = style->image.color;
 800d3ae:	9b07      	ldr	r3, [sp, #28]
            lv_draw_label(&coords, mask, &style_mod, opa_scale, ext->src, LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 800d3b0:	002a      	movs	r2, r5
            style_mod.text.color = style->image.color;
 800d3b2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
            lv_draw_label(&coords, mask, &style_mod, opa_scale, ext->src, LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 800d3b4:	9908      	ldr	r1, [sp, #32]
            style_mod.text.color = style->image.color;
 800d3b6:	842b      	strh	r3, [r5, #32]
            lv_draw_label(&coords, mask, &style_mod, opa_scale, ext->src, LV_TXT_FLAG_NONE, NULL, -1, -1, NULL);
 800d3b8:	4b0b      	ldr	r3, [pc, #44]	; (800d3e8 <lv_img_design+0x140>)
 800d3ba:	9605      	str	r6, [sp, #20]
 800d3bc:	9304      	str	r3, [sp, #16]
 800d3be:	9303      	str	r3, [sp, #12]
 800d3c0:	9602      	str	r6, [sp, #8]
 800d3c2:	9601      	str	r6, [sp, #4]
 800d3c4:	6823      	ldr	r3, [r4, #0]
 800d3c6:	0038      	movs	r0, r7
 800d3c8:	9300      	str	r3, [sp, #0]
 800d3ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3cc:	f7fb ff42 	bl	8009254 <lv_draw_label>
 800d3d0:	e797      	b.n	800d302 <lv_img_design+0x5a>
            lv_draw_img(&img->coords, mask, NULL, style, opa_scale);
 800d3d2:	0028      	movs	r0, r5
 800d3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3d6:	3010      	adds	r0, #16
 800d3d8:	9300      	str	r3, [sp, #0]
 800d3da:	0032      	movs	r2, r6
 800d3dc:	9b07      	ldr	r3, [sp, #28]
 800d3de:	9908      	ldr	r1, [sp, #32]
 800d3e0:	f7fb fe44 	bl	800906c <lv_draw_img>
 800d3e4:	e78d      	b.n	800d302 <lv_img_design+0x5a>
 800d3e6:	46c0      	nop			; (mov r8, r8)
 800d3e8:	0000ffff 	.word	0x0000ffff

0800d3ec <lv_img_get_auto_size>:
{
 800d3ec:	b510      	push	{r4, lr}
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 800d3ee:	f7fa f94f 	bl	8007690 <lv_obj_get_ext_attr>
    return ext->auto_size == 0 ? false : true;
 800d3f2:	7b00      	ldrb	r0, [r0, #12]
 800d3f4:	0740      	lsls	r0, r0, #29
 800d3f6:	0fc0      	lsrs	r0, r0, #31
}
 800d3f8:	bd10      	pop	{r4, pc}
	...

0800d3fc <lv_img_set_src>:
{
 800d3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3fe:	b089      	sub	sp, #36	; 0x24
 800d400:	9005      	str	r0, [sp, #20]
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
 800d402:	0008      	movs	r0, r1
{
 800d404:	000d      	movs	r5, r1
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
 800d406:	f7fb ff03 	bl	8009210 <lv_img_src_get_type>
 800d40a:	0006      	movs	r6, r0
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
 800d40c:	9805      	ldr	r0, [sp, #20]
 800d40e:	f7fa f93f 	bl	8007690 <lv_obj_get_ext_attr>
 800d412:	0004      	movs	r4, r0
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 800d414:	2e03      	cmp	r6, #3
 800d416:	d10f      	bne.n	800d438 <lv_img_set_src+0x3c>
        if(ext->src_type == LV_IMG_SRC_SYMBOL || ext->src_type == LV_IMG_SRC_FILE) {
 800d418:	7b03      	ldrb	r3, [r0, #12]
 800d41a:	4033      	ands	r3, r6
 800d41c:	3b01      	subs	r3, #1
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d802      	bhi.n	800d428 <lv_img_set_src+0x2c>
            lv_mem_free(ext->src);
 800d422:	6800      	ldr	r0, [r0, #0]
 800d424:	f7ff fb6a 	bl	800cafc <lv_mem_free>
        ext->src      = NULL;
 800d428:	2300      	movs	r3, #0
        ext->src_type = LV_IMG_SRC_UNKNOWN;
 800d42a:	7b22      	ldrb	r2, [r4, #12]
        ext->src      = NULL;
 800d42c:	6023      	str	r3, [r4, #0]
        ext->src_type = LV_IMG_SRC_UNKNOWN;
 800d42e:	3303      	adds	r3, #3
 800d430:	4313      	orrs	r3, r2
 800d432:	7323      	strb	r3, [r4, #12]
}
 800d434:	b009      	add	sp, #36	; 0x24
 800d436:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_img_decoder_get_info(src_img, &header);
 800d438:	a906      	add	r1, sp, #24
 800d43a:	0028      	movs	r0, r5
 800d43c:	f7fe fc38 	bl	800bcb0 <lv_img_decoder_get_info>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800d440:	2e00      	cmp	r6, #0
 800d442:	d130      	bne.n	800d4a6 <lv_img_set_src+0xaa>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 800d444:	2203      	movs	r2, #3
 800d446:	7b23      	ldrb	r3, [r4, #12]
 800d448:	4013      	ands	r3, r2
 800d44a:	3b01      	subs	r3, #1
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	d802      	bhi.n	800d456 <lv_img_set_src+0x5a>
            lv_mem_free(ext->src);
 800d450:	6820      	ldr	r0, [r4, #0]
 800d452:	f7ff fb53 	bl	800cafc <lv_mem_free>
        ext->src = src_img;
 800d456:	6025      	str	r5, [r4, #0]
    ext->src_type = src_type;
 800d458:	2203      	movs	r2, #3
 800d45a:	0031      	movs	r1, r6
 800d45c:	7b23      	ldrb	r3, [r4, #12]
 800d45e:	4011      	ands	r1, r2
 800d460:	4393      	bics	r3, r2
    ext->w        = header.w;
 800d462:	9a06      	ldr	r2, [sp, #24]
    ext->cf       = header.cf;
 800d464:	430b      	orrs	r3, r1
    ext->w        = header.w;
 800d466:	02d2      	lsls	r2, r2, #11
 800d468:	0d52      	lsrs	r2, r2, #21
 800d46a:	8122      	strh	r2, [r4, #8]
    ext->h        = header.h;
 800d46c:	2212      	movs	r2, #18
    ext->cf       = header.cf;
 800d46e:	2107      	movs	r1, #7
    ext->h        = header.h;
 800d470:	a802      	add	r0, sp, #8
 800d472:	1812      	adds	r2, r2, r0
 800d474:	8812      	ldrh	r2, [r2, #0]
    ext->cf       = header.cf;
 800d476:	400b      	ands	r3, r1
    ext->h        = header.h;
 800d478:	0952      	lsrs	r2, r2, #5
 800d47a:	8162      	strh	r2, [r4, #10]
    ext->cf       = header.cf;
 800d47c:	7c02      	ldrb	r2, [r0, #16]
    if(lv_img_get_auto_size(img) != false) {
 800d47e:	9805      	ldr	r0, [sp, #20]
    ext->cf       = header.cf;
 800d480:	06d2      	lsls	r2, r2, #27
 800d482:	0e12      	lsrs	r2, r2, #24
 800d484:	4313      	orrs	r3, r2
 800d486:	7323      	strb	r3, [r4, #12]
    if(lv_img_get_auto_size(img) != false) {
 800d488:	f7ff ffb0 	bl	800d3ec <lv_img_get_auto_size>
 800d48c:	2800      	cmp	r0, #0
 800d48e:	d006      	beq.n	800d49e <lv_img_set_src+0xa2>
        lv_obj_set_size(img, ext->w, ext->h);
 800d490:	230a      	movs	r3, #10
 800d492:	5ee2      	ldrsh	r2, [r4, r3]
 800d494:	2308      	movs	r3, #8
 800d496:	5ee1      	ldrsh	r1, [r4, r3]
 800d498:	9805      	ldr	r0, [sp, #20]
 800d49a:	f7f9 ff85 	bl	80073a8 <lv_obj_set_size>
    lv_obj_invalidate(img);
 800d49e:	9805      	ldr	r0, [sp, #20]
 800d4a0:	f7f9 fb96 	bl	8006bd0 <lv_obj_invalidate>
 800d4a4:	e7c6      	b.n	800d434 <lv_img_set_src+0x38>
    } else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
 800d4a6:	1e73      	subs	r3, r6, #1
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	2b01      	cmp	r3, #1
 800d4ac:	d8d4      	bhi.n	800d458 <lv_img_set_src+0x5c>
        if(ext->src != src_img) {
 800d4ae:	6820      	ldr	r0, [r4, #0]
 800d4b0:	4285      	cmp	r5, r0
 800d4b2:	d014      	beq.n	800d4de <lv_img_set_src+0xe2>
            if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 800d4b4:	2203      	movs	r2, #3
 800d4b6:	7b23      	ldrb	r3, [r4, #12]
 800d4b8:	4013      	ands	r3, r2
 800d4ba:	3b01      	subs	r3, #1
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	d801      	bhi.n	800d4c4 <lv_img_set_src+0xc8>
                lv_mem_free(ext->src);
 800d4c0:	f7ff fb1c 	bl	800cafc <lv_mem_free>
            char * new_str = lv_mem_alloc(strlen(src_img) + 1);
 800d4c4:	0028      	movs	r0, r5
 800d4c6:	f7f2 fe25 	bl	8000114 <strlen>
 800d4ca:	3001      	adds	r0, #1
 800d4cc:	f7ff fae2 	bl	800ca94 <lv_mem_alloc>
 800d4d0:	1e07      	subs	r7, r0, #0
            lv_mem_assert(new_str);
 800d4d2:	d100      	bne.n	800d4d6 <lv_img_set_src+0xda>
 800d4d4:	e7fe      	b.n	800d4d4 <lv_img_set_src+0xd8>
            strcpy(new_str, src_img);
 800d4d6:	0029      	movs	r1, r5
 800d4d8:	f000 fb78 	bl	800dbcc <strcpy>
            ext->src = new_str;
 800d4dc:	6027      	str	r7, [r4, #0]
    if(src_type == LV_IMG_SRC_SYMBOL) {
 800d4de:	2e02      	cmp	r6, #2
 800d4e0:	d1ba      	bne.n	800d458 <lv_img_set_src+0x5c>
 * @return pointer to the image's style
 */
static inline const lv_style_t * lv_img_get_style(const lv_obj_t * img, lv_img_style_t type)
{
    (void)type; /*Unused*/
    return lv_obj_get_style(img);
 800d4e2:	9805      	ldr	r0, [sp, #20]
 800d4e4:	f7fa f80e 	bl	8007504 <lv_obj_get_style>
        lv_txt_get_size(&size, src_img, style->text.font, style->text.letter_space, style->text.line_space,
 800d4e8:	2228      	movs	r2, #40	; 0x28
 800d4ea:	5e83      	ldrsh	r3, [r0, r2]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	9202      	str	r2, [sp, #8]
 800d4f0:	4a0e      	ldr	r2, [pc, #56]	; (800d52c <lv_img_set_src+0x130>)
 800d4f2:	af07      	add	r7, sp, #28
 800d4f4:	9201      	str	r2, [sp, #4]
 800d4f6:	212a      	movs	r1, #42	; 0x2a
 800d4f8:	5e42      	ldrsh	r2, [r0, r1]
 800d4fa:	0029      	movs	r1, r5
 800d4fc:	9200      	str	r2, [sp, #0]
 800d4fe:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d500:	0038      	movs	r0, r7
 800d502:	f7ff fe53 	bl	800d1ac <lv_txt_get_size>
        header.w = size.x;
 800d506:	883b      	ldrh	r3, [r7, #0]
 800d508:	9906      	ldr	r1, [sp, #24]
 800d50a:	055b      	lsls	r3, r3, #21
 800d50c:	0ada      	lsrs	r2, r3, #11
 800d50e:	4b08      	ldr	r3, [pc, #32]	; (800d530 <lv_img_set_src+0x134>)
 800d510:	400b      	ands	r3, r1
 800d512:	4313      	orrs	r3, r2
 800d514:	9306      	str	r3, [sp, #24]
        header.h = size.y;
 800d516:	887a      	ldrh	r2, [r7, #2]
 800d518:	02db      	lsls	r3, r3, #11
 800d51a:	0152      	lsls	r2, r2, #5
 800d51c:	0edb      	lsrs	r3, r3, #27
 800d51e:	4313      	orrs	r3, r2
 800d520:	2212      	movs	r2, #18
 800d522:	a902      	add	r1, sp, #8
 800d524:	1852      	adds	r2, r2, r1
 800d526:	8013      	strh	r3, [r2, #0]
 800d528:	e796      	b.n	800d458 <lv_img_set_src+0x5c>
 800d52a:	46c0      	nop			; (mov r8, r8)
 800d52c:	00007c18 	.word	0x00007c18
 800d530:	ffe003ff 	.word	0xffe003ff

0800d534 <lv_img_create>:
{
 800d534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d536:	000e      	movs	r6, r1
 800d538:	9001      	str	r0, [sp, #4]
    new_img = lv_obj_create(par, copy);
 800d53a:	f7f9 fded 	bl	8007118 <lv_obj_create>
 800d53e:	1e05      	subs	r5, r0, #0
    lv_mem_assert(new_img);
 800d540:	d100      	bne.n	800d544 <lv_img_create+0x10>
 800d542:	e7fe      	b.n	800d542 <lv_img_create+0xe>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_img);
 800d544:	4c2a      	ldr	r4, [pc, #168]	; (800d5f0 <lv_img_create+0xbc>)
 800d546:	6823      	ldr	r3, [r4, #0]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d102      	bne.n	800d552 <lv_img_create+0x1e>
 800d54c:	f7fa f89e 	bl	800768c <lv_obj_get_signal_cb>
 800d550:	6020      	str	r0, [r4, #0]
    lv_img_ext_t * ext = lv_obj_allocate_ext_attr(new_img, sizeof(lv_img_ext_t));
 800d552:	2110      	movs	r1, #16
 800d554:	0028      	movs	r0, r5
 800d556:	f7f9 fb0b 	bl	8006b70 <lv_obj_allocate_ext_attr>
 800d55a:	1e04      	subs	r4, r0, #0
    lv_mem_assert(ext);
 800d55c:	d100      	bne.n	800d560 <lv_img_create+0x2c>
 800d55e:	e7fe      	b.n	800d55e <lv_img_create+0x2a>
    ext->src       = NULL;
 800d560:	2300      	movs	r3, #0
    ext->src_type  = LV_IMG_SRC_UNKNOWN;
 800d562:	7b02      	ldrb	r2, [r0, #12]
    ext->src       = NULL;
 800d564:	6003      	str	r3, [r0, #0]
    ext->cf        = LV_IMG_CF_UNKNOWN;
 800d566:	3303      	adds	r3, #3
 800d568:	4313      	orrs	r3, r2
 800d56a:	2207      	movs	r2, #7
 800d56c:	4013      	ands	r3, r2
 800d56e:	7303      	strb	r3, [r0, #12]
    ext->w         = lv_obj_get_width(new_img);
 800d570:	0028      	movs	r0, r5
 800d572:	f7f9 ffba 	bl	80074ea <lv_obj_get_width>
    ext->auto_size = 1;
 800d576:	2704      	movs	r7, #4
    ext->w         = lv_obj_get_width(new_img);
 800d578:	8120      	strh	r0, [r4, #8]
    ext->h         = lv_obj_get_height(new_img);
 800d57a:	0028      	movs	r0, r5
 800d57c:	f7f9 ffbb 	bl	80074f6 <lv_obj_get_height>
    ext->auto_size = 1;
 800d580:	7b23      	ldrb	r3, [r4, #12]
    ext->h         = lv_obj_get_height(new_img);
 800d582:	8160      	strh	r0, [r4, #10]
    ext->auto_size = 1;
 800d584:	433b      	orrs	r3, r7
 800d586:	7323      	strb	r3, [r4, #12]
    ext->offset.x  = 0;
 800d588:	2300      	movs	r3, #0
 800d58a:	80a3      	strh	r3, [r4, #4]
    ext->offset.y  = 0;
 800d58c:	2300      	movs	r3, #0
    lv_obj_set_signal_cb(new_img, lv_img_signal);
 800d58e:	4919      	ldr	r1, [pc, #100]	; (800d5f4 <lv_img_create+0xc0>)
 800d590:	0028      	movs	r0, r5
    ext->offset.y  = 0;
 800d592:	80e3      	strh	r3, [r4, #6]
    lv_obj_set_signal_cb(new_img, lv_img_signal);
 800d594:	f7f9 fae8 	bl	8006b68 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_img, lv_img_design);
 800d598:	4917      	ldr	r1, [pc, #92]	; (800d5f8 <lv_img_create+0xc4>)
 800d59a:	0028      	movs	r0, r5
 800d59c:	f7f9 fae6 	bl	8006b6c <lv_obj_set_design_cb>
    if(copy == NULL) {
 800d5a0:	2e00      	cmp	r6, #0
 800d5a2:	d113      	bne.n	800d5cc <lv_img_create+0x98>
        lv_obj_set_click(new_img, false);
 800d5a4:	0031      	movs	r1, r6
 800d5a6:	0028      	movs	r0, r5
 800d5a8:	f7f9 fa7c 	bl	8006aa4 <lv_obj_set_click>
        if(par != NULL) {
 800d5ac:	9a01      	ldr	r2, [sp, #4]
 800d5ae:	7b23      	ldrb	r3, [r4, #12]
 800d5b0:	2a00      	cmp	r2, #0
 800d5b2:	d007      	beq.n	800d5c4 <lv_img_create+0x90>
            lv_obj_set_style(new_img, NULL); /*Inherit the style  by default*/
 800d5b4:	0031      	movs	r1, r6
            ext->auto_size = 1;
 800d5b6:	431f      	orrs	r7, r3
 800d5b8:	7327      	strb	r7, [r4, #12]
            lv_obj_set_style(new_img, &lv_style_plain); /*Set a style for screens*/
 800d5ba:	0028      	movs	r0, r5
 800d5bc:	f7f9 ff83 	bl	80074c6 <lv_obj_set_style>
}
 800d5c0:	0028      	movs	r0, r5
 800d5c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            ext->auto_size = 0;
 800d5c4:	43bb      	bics	r3, r7
 800d5c6:	7323      	strb	r3, [r4, #12]
            lv_obj_set_style(new_img, &lv_style_plain); /*Set a style for screens*/
 800d5c8:	490c      	ldr	r1, [pc, #48]	; (800d5fc <lv_img_create+0xc8>)
 800d5ca:	e7f6      	b.n	800d5ba <lv_img_create+0x86>
        lv_img_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 800d5cc:	0030      	movs	r0, r6
 800d5ce:	f7fa f85f 	bl	8007690 <lv_obj_get_ext_attr>
        ext->auto_size          = copy_ext->auto_size;
 800d5d2:	2204      	movs	r2, #4
 800d5d4:	7b03      	ldrb	r3, [r0, #12]
 800d5d6:	401a      	ands	r2, r3
 800d5d8:	7b23      	ldrb	r3, [r4, #12]
 800d5da:	43bb      	bics	r3, r7
 800d5dc:	4313      	orrs	r3, r2
 800d5de:	7323      	strb	r3, [r4, #12]
        lv_img_set_src(new_img, copy_ext->src);
 800d5e0:	6801      	ldr	r1, [r0, #0]
 800d5e2:	0028      	movs	r0, r5
 800d5e4:	f7ff ff0a 	bl	800d3fc <lv_img_set_src>
        lv_obj_refresh_style(new_img);
 800d5e8:	0028      	movs	r0, r5
 800d5ea:	f7f9 ff28 	bl	800743e <lv_obj_refresh_style>
 800d5ee:	e7e7      	b.n	800d5c0 <lv_img_create+0x8c>
 800d5f0:	20004570 	.word	0x20004570
 800d5f4:	0800d601 	.word	0x0800d601
 800d5f8:	0800d2a9 	.word	0x0800d2a9
 800d5fc:	20005248 	.word	0x20005248

0800d600 <lv_img_signal>:
static lv_res_t lv_img_signal(lv_obj_t * img, lv_signal_t sign, void * param)
{
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(img, sign, param);
 800d600:	4b1d      	ldr	r3, [pc, #116]	; (800d678 <lv_img_signal+0x78>)
{
 800d602:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    res = ancestor_signal(img, sign, param);
 800d604:	681b      	ldr	r3, [r3, #0]
{
 800d606:	0007      	movs	r7, r0
 800d608:	000d      	movs	r5, r1
 800d60a:	0016      	movs	r6, r2
    res = ancestor_signal(img, sign, param);
 800d60c:	4798      	blx	r3
 800d60e:	9001      	str	r0, [sp, #4]
    if(res != LV_RES_OK) return res;
 800d610:	2801      	cmp	r0, #1
 800d612:	d112      	bne.n	800d63a <lv_img_signal+0x3a>

    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
 800d614:	0038      	movs	r0, r7
 800d616:	f7fa f83b 	bl	8007690 <lv_obj_get_ext_attr>
 800d61a:	0004      	movs	r4, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 800d61c:	2d00      	cmp	r5, #0
 800d61e:	d10e      	bne.n	800d63e <lv_img_signal+0x3e>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
 800d620:	2603      	movs	r6, #3
 800d622:	7b03      	ldrb	r3, [r0, #12]
 800d624:	4033      	ands	r3, r6
 800d626:	3b01      	subs	r3, #1
 800d628:	2b01      	cmp	r3, #1
 800d62a:	d806      	bhi.n	800d63a <lv_img_signal+0x3a>
            lv_mem_free(ext->src);
 800d62c:	6800      	ldr	r0, [r0, #0]
 800d62e:	f7ff fa65 	bl	800cafc <lv_mem_free>
            ext->src      = NULL;
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 800d632:	7b23      	ldrb	r3, [r4, #12]
            ext->src      = NULL;
 800d634:	6025      	str	r5, [r4, #0]
            ext->src_type = LV_IMG_SRC_UNKNOWN;
 800d636:	431e      	orrs	r6, r3
 800d638:	7326      	strb	r6, [r4, #12]
        }
        buf->type[i] = "lv_img";
    }

    return res;
}
 800d63a:	9801      	ldr	r0, [sp, #4]
 800d63c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 800d63e:	2d04      	cmp	r5, #4
 800d640:	d109      	bne.n	800d656 <lv_img_signal+0x56>
        if(ext->src_type == LV_IMG_SRC_SYMBOL) {
 800d642:	2203      	movs	r2, #3
 800d644:	7b03      	ldrb	r3, [r0, #12]
 800d646:	4013      	ands	r3, r2
 800d648:	2b02      	cmp	r3, #2
 800d64a:	d1f6      	bne.n	800d63a <lv_img_signal+0x3a>
            lv_img_set_src(img, ext->src);
 800d64c:	6801      	ldr	r1, [r0, #0]
 800d64e:	0038      	movs	r0, r7
 800d650:	f7ff fed4 	bl	800d3fc <lv_img_set_src>
 800d654:	e7f1      	b.n	800d63a <lv_img_signal+0x3a>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800d656:	2d06      	cmp	r5, #6
 800d658:	d1ef      	bne.n	800d63a <lv_img_signal+0x3a>
 800d65a:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 800d65c:	0099      	lsls	r1, r3, #2
 800d65e:	5871      	ldr	r1, [r6, r1]
 800d660:	b2da      	uxtb	r2, r3
 800d662:	2900      	cmp	r1, #0
 800d664:	d003      	beq.n	800d66e <lv_img_signal+0x6e>
 800d666:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 800d668:	2b07      	cmp	r3, #7
 800d66a:	d1f7      	bne.n	800d65c <lv_img_signal+0x5c>
 800d66c:	001a      	movs	r2, r3
        buf->type[i] = "lv_img";
 800d66e:	4b03      	ldr	r3, [pc, #12]	; (800d67c <lv_img_signal+0x7c>)
 800d670:	0092      	lsls	r2, r2, #2
 800d672:	5193      	str	r3, [r2, r6]
 800d674:	e7e1      	b.n	800d63a <lv_img_signal+0x3a>
 800d676:	46c0      	nop			; (mov r8, r8)
 800d678:	20004570 	.word	0x20004570
 800d67c:	08010db0 	.word	0x08010db0

0800d680 <lv_theme_get_current>:
 * @return pointer to the current system theme. NULL if not set.
 */
lv_theme_t * lv_theme_get_current(void)
{
#if LV_THEME_LIVE_UPDATE == 0
    return current_theme;
 800d680:	4b01      	ldr	r3, [pc, #4]	; (800d688 <lv_theme_get_current+0x8>)
 800d682:	6818      	ldr	r0, [r3, #0]
    if(!inited)
        return NULL;
    else
        return &current_theme;
#endif
}
 800d684:	4770      	bx	lr
 800d686:	46c0      	nop			; (mov r8, r8)
 800d688:	20004574 	.word	0x20004574

0800d68c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800d68c:	480d      	ldr	r0, [pc, #52]	; (800d6c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800d68e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800d690:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800d692:	e003      	b.n	800d69c <LoopCopyDataInit>

0800d694 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800d694:	4b0c      	ldr	r3, [pc, #48]	; (800d6c8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800d696:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800d698:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800d69a:	3104      	adds	r1, #4

0800d69c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800d69c:	480b      	ldr	r0, [pc, #44]	; (800d6cc <LoopForever+0xa>)
  ldr r3, =_edata
 800d69e:	4b0c      	ldr	r3, [pc, #48]	; (800d6d0 <LoopForever+0xe>)
  adds r2, r0, r1
 800d6a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800d6a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800d6a4:	d3f6      	bcc.n	800d694 <CopyDataInit>
  ldr r2, =_sbss
 800d6a6:	4a0b      	ldr	r2, [pc, #44]	; (800d6d4 <LoopForever+0x12>)
  b LoopFillZerobss
 800d6a8:	e002      	b.n	800d6b0 <LoopFillZerobss>

0800d6aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800d6aa:	2300      	movs	r3, #0
  str  r3, [r2]
 800d6ac:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d6ae:	3204      	adds	r2, #4

0800d6b0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800d6b0:	4b09      	ldr	r3, [pc, #36]	; (800d6d8 <LoopForever+0x16>)
  cmp r2, r3
 800d6b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 800d6b4:	d3f9      	bcc.n	800d6aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800d6b6:	f7f4 fd33 	bl	8002120 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800d6ba:	f000 f817 	bl	800d6ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d6be:	f7f3 fb0d 	bl	8000cdc <main>

0800d6c2 <LoopForever>:

LoopForever:
    b LoopForever
 800d6c2:	e7fe      	b.n	800d6c2 <LoopForever>
  ldr   r0, =_estack
 800d6c4:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 800d6c8:	08010dc0 	.word	0x08010dc0
  ldr r0, =_sdata
 800d6cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800d6d0:	20000554 	.word	0x20000554
  ldr r2, =_sbss
 800d6d4:	20000554 	.word	0x20000554
  ldr r3, = _ebss
 800d6d8:	200053f0 	.word	0x200053f0

0800d6dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d6dc:	e7fe      	b.n	800d6dc <ADC1_IRQHandler>
	...

0800d6e0 <__errno>:
 800d6e0:	4b01      	ldr	r3, [pc, #4]	; (800d6e8 <__errno+0x8>)
 800d6e2:	6818      	ldr	r0, [r3, #0]
 800d6e4:	4770      	bx	lr
 800d6e6:	46c0      	nop			; (mov r8, r8)
 800d6e8:	20000050 	.word	0x20000050

0800d6ec <__libc_init_array>:
 800d6ec:	b570      	push	{r4, r5, r6, lr}
 800d6ee:	2600      	movs	r6, #0
 800d6f0:	4d0c      	ldr	r5, [pc, #48]	; (800d724 <__libc_init_array+0x38>)
 800d6f2:	4c0d      	ldr	r4, [pc, #52]	; (800d728 <__libc_init_array+0x3c>)
 800d6f4:	1b64      	subs	r4, r4, r5
 800d6f6:	10a4      	asrs	r4, r4, #2
 800d6f8:	42a6      	cmp	r6, r4
 800d6fa:	d109      	bne.n	800d710 <__libc_init_array+0x24>
 800d6fc:	2600      	movs	r6, #0
 800d6fe:	f000 fb77 	bl	800ddf0 <_init>
 800d702:	4d0a      	ldr	r5, [pc, #40]	; (800d72c <__libc_init_array+0x40>)
 800d704:	4c0a      	ldr	r4, [pc, #40]	; (800d730 <__libc_init_array+0x44>)
 800d706:	1b64      	subs	r4, r4, r5
 800d708:	10a4      	asrs	r4, r4, #2
 800d70a:	42a6      	cmp	r6, r4
 800d70c:	d105      	bne.n	800d71a <__libc_init_array+0x2e>
 800d70e:	bd70      	pop	{r4, r5, r6, pc}
 800d710:	00b3      	lsls	r3, r6, #2
 800d712:	58eb      	ldr	r3, [r5, r3]
 800d714:	4798      	blx	r3
 800d716:	3601      	adds	r6, #1
 800d718:	e7ee      	b.n	800d6f8 <__libc_init_array+0xc>
 800d71a:	00b3      	lsls	r3, r6, #2
 800d71c:	58eb      	ldr	r3, [r5, r3]
 800d71e:	4798      	blx	r3
 800d720:	3601      	adds	r6, #1
 800d722:	e7f2      	b.n	800d70a <__libc_init_array+0x1e>
 800d724:	08010db8 	.word	0x08010db8
 800d728:	08010db8 	.word	0x08010db8
 800d72c:	08010db8 	.word	0x08010db8
 800d730:	08010dbc 	.word	0x08010dbc

0800d734 <malloc>:
 800d734:	b510      	push	{r4, lr}
 800d736:	4b03      	ldr	r3, [pc, #12]	; (800d744 <malloc+0x10>)
 800d738:	0001      	movs	r1, r0
 800d73a:	6818      	ldr	r0, [r3, #0]
 800d73c:	f000 f80e 	bl	800d75c <_malloc_r>
 800d740:	bd10      	pop	{r4, pc}
 800d742:	46c0      	nop			; (mov r8, r8)
 800d744:	20000050 	.word	0x20000050

0800d748 <free>:
 800d748:	b510      	push	{r4, lr}
 800d74a:	4b03      	ldr	r3, [pc, #12]	; (800d758 <free+0x10>)
 800d74c:	0001      	movs	r1, r0
 800d74e:	6818      	ldr	r0, [r3, #0]
 800d750:	f000 fa98 	bl	800dc84 <_free_r>
 800d754:	bd10      	pop	{r4, pc}
 800d756:	46c0      	nop			; (mov r8, r8)
 800d758:	20000050 	.word	0x20000050

0800d75c <_malloc_r>:
 800d75c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d75e:	000d      	movs	r5, r1
 800d760:	b085      	sub	sp, #20
 800d762:	350b      	adds	r5, #11
 800d764:	9001      	str	r0, [sp, #4]
 800d766:	2d16      	cmp	r5, #22
 800d768:	d908      	bls.n	800d77c <_malloc_r+0x20>
 800d76a:	2307      	movs	r3, #7
 800d76c:	439d      	bics	r5, r3
 800d76e:	d506      	bpl.n	800d77e <_malloc_r+0x22>
 800d770:	230c      	movs	r3, #12
 800d772:	9a01      	ldr	r2, [sp, #4]
 800d774:	6013      	str	r3, [r2, #0]
 800d776:	2000      	movs	r0, #0
 800d778:	b005      	add	sp, #20
 800d77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d77c:	2510      	movs	r5, #16
 800d77e:	428d      	cmp	r5, r1
 800d780:	d3f6      	bcc.n	800d770 <_malloc_r+0x14>
 800d782:	9801      	ldr	r0, [sp, #4]
 800d784:	f000 fa00 	bl	800db88 <__malloc_lock>
 800d788:	23f8      	movs	r3, #248	; 0xf8
 800d78a:	33ff      	adds	r3, #255	; 0xff
 800d78c:	48ba      	ldr	r0, [pc, #744]	; (800da78 <_malloc_r+0x31c>)
 800d78e:	429d      	cmp	r5, r3
 800d790:	d81f      	bhi.n	800d7d2 <_malloc_r+0x76>
 800d792:	002a      	movs	r2, r5
 800d794:	3208      	adds	r2, #8
 800d796:	1882      	adds	r2, r0, r2
 800d798:	0011      	movs	r1, r2
 800d79a:	6854      	ldr	r4, [r2, #4]
 800d79c:	3908      	subs	r1, #8
 800d79e:	08eb      	lsrs	r3, r5, #3
 800d7a0:	428c      	cmp	r4, r1
 800d7a2:	d103      	bne.n	800d7ac <_malloc_r+0x50>
 800d7a4:	68d4      	ldr	r4, [r2, #12]
 800d7a6:	3302      	adds	r3, #2
 800d7a8:	42a2      	cmp	r2, r4
 800d7aa:	d029      	beq.n	800d800 <_malloc_r+0xa4>
 800d7ac:	2303      	movs	r3, #3
 800d7ae:	6862      	ldr	r2, [r4, #4]
 800d7b0:	68a1      	ldr	r1, [r4, #8]
 800d7b2:	439a      	bics	r2, r3
 800d7b4:	0013      	movs	r3, r2
 800d7b6:	68e2      	ldr	r2, [r4, #12]
 800d7b8:	18e3      	adds	r3, r4, r3
 800d7ba:	60ca      	str	r2, [r1, #12]
 800d7bc:	6091      	str	r1, [r2, #8]
 800d7be:	2201      	movs	r2, #1
 800d7c0:	6859      	ldr	r1, [r3, #4]
 800d7c2:	430a      	orrs	r2, r1
 800d7c4:	605a      	str	r2, [r3, #4]
 800d7c6:	9801      	ldr	r0, [sp, #4]
 800d7c8:	f000 f9e6 	bl	800db98 <__malloc_unlock>
 800d7cc:	0020      	movs	r0, r4
 800d7ce:	3008      	adds	r0, #8
 800d7d0:	e7d2      	b.n	800d778 <_malloc_r+0x1c>
 800d7d2:	0a6a      	lsrs	r2, r5, #9
 800d7d4:	233f      	movs	r3, #63	; 0x3f
 800d7d6:	2a00      	cmp	r2, #0
 800d7d8:	d003      	beq.n	800d7e2 <_malloc_r+0x86>
 800d7da:	2a04      	cmp	r2, #4
 800d7dc:	d828      	bhi.n	800d830 <_malloc_r+0xd4>
 800d7de:	09ab      	lsrs	r3, r5, #6
 800d7e0:	3338      	adds	r3, #56	; 0x38
 800d7e2:	2203      	movs	r2, #3
 800d7e4:	4694      	mov	ip, r2
 800d7e6:	00d9      	lsls	r1, r3, #3
 800d7e8:	1809      	adds	r1, r1, r0
 800d7ea:	68cc      	ldr	r4, [r1, #12]
 800d7ec:	428c      	cmp	r4, r1
 800d7ee:	d006      	beq.n	800d7fe <_malloc_r+0xa2>
 800d7f0:	4666      	mov	r6, ip
 800d7f2:	6862      	ldr	r2, [r4, #4]
 800d7f4:	43b2      	bics	r2, r6
 800d7f6:	1b57      	subs	r7, r2, r5
 800d7f8:	2f0f      	cmp	r7, #15
 800d7fa:	dd31      	ble.n	800d860 <_malloc_r+0x104>
 800d7fc:	3b01      	subs	r3, #1
 800d7fe:	3301      	adds	r3, #1
 800d800:	0001      	movs	r1, r0
 800d802:	6904      	ldr	r4, [r0, #16]
 800d804:	3108      	adds	r1, #8
 800d806:	428c      	cmp	r4, r1
 800d808:	d04e      	beq.n	800d8a8 <_malloc_r+0x14c>
 800d80a:	2203      	movs	r2, #3
 800d80c:	6866      	ldr	r6, [r4, #4]
 800d80e:	4396      	bics	r6, r2
 800d810:	0032      	movs	r2, r6
 800d812:	1b76      	subs	r6, r6, r5
 800d814:	2e0f      	cmp	r6, #15
 800d816:	dd31      	ble.n	800d87c <_malloc_r+0x120>
 800d818:	2701      	movs	r7, #1
 800d81a:	1963      	adds	r3, r4, r5
 800d81c:	433d      	orrs	r5, r7
 800d81e:	4337      	orrs	r7, r6
 800d820:	6065      	str	r5, [r4, #4]
 800d822:	6143      	str	r3, [r0, #20]
 800d824:	6103      	str	r3, [r0, #16]
 800d826:	60d9      	str	r1, [r3, #12]
 800d828:	6099      	str	r1, [r3, #8]
 800d82a:	605f      	str	r7, [r3, #4]
 800d82c:	50a6      	str	r6, [r4, r2]
 800d82e:	e7ca      	b.n	800d7c6 <_malloc_r+0x6a>
 800d830:	2a14      	cmp	r2, #20
 800d832:	d802      	bhi.n	800d83a <_malloc_r+0xde>
 800d834:	0013      	movs	r3, r2
 800d836:	335b      	adds	r3, #91	; 0x5b
 800d838:	e7d3      	b.n	800d7e2 <_malloc_r+0x86>
 800d83a:	2a54      	cmp	r2, #84	; 0x54
 800d83c:	d802      	bhi.n	800d844 <_malloc_r+0xe8>
 800d83e:	0b2b      	lsrs	r3, r5, #12
 800d840:	336e      	adds	r3, #110	; 0x6e
 800d842:	e7ce      	b.n	800d7e2 <_malloc_r+0x86>
 800d844:	23aa      	movs	r3, #170	; 0xaa
 800d846:	005b      	lsls	r3, r3, #1
 800d848:	429a      	cmp	r2, r3
 800d84a:	d802      	bhi.n	800d852 <_malloc_r+0xf6>
 800d84c:	0beb      	lsrs	r3, r5, #15
 800d84e:	3377      	adds	r3, #119	; 0x77
 800d850:	e7c7      	b.n	800d7e2 <_malloc_r+0x86>
 800d852:	498a      	ldr	r1, [pc, #552]	; (800da7c <_malloc_r+0x320>)
 800d854:	237e      	movs	r3, #126	; 0x7e
 800d856:	428a      	cmp	r2, r1
 800d858:	d8c3      	bhi.n	800d7e2 <_malloc_r+0x86>
 800d85a:	0cab      	lsrs	r3, r5, #18
 800d85c:	337c      	adds	r3, #124	; 0x7c
 800d85e:	e7c0      	b.n	800d7e2 <_malloc_r+0x86>
 800d860:	68e6      	ldr	r6, [r4, #12]
 800d862:	2f00      	cmp	r7, #0
 800d864:	db08      	blt.n	800d878 <_malloc_r+0x11c>
 800d866:	68a3      	ldr	r3, [r4, #8]
 800d868:	60de      	str	r6, [r3, #12]
 800d86a:	60b3      	str	r3, [r6, #8]
 800d86c:	2301      	movs	r3, #1
 800d86e:	18a2      	adds	r2, r4, r2
 800d870:	6851      	ldr	r1, [r2, #4]
 800d872:	430b      	orrs	r3, r1
 800d874:	6053      	str	r3, [r2, #4]
 800d876:	e7a6      	b.n	800d7c6 <_malloc_r+0x6a>
 800d878:	0034      	movs	r4, r6
 800d87a:	e7b7      	b.n	800d7ec <_malloc_r+0x90>
 800d87c:	6141      	str	r1, [r0, #20]
 800d87e:	6101      	str	r1, [r0, #16]
 800d880:	2e00      	cmp	r6, #0
 800d882:	daf3      	bge.n	800d86c <_malloc_r+0x110>
 800d884:	497e      	ldr	r1, [pc, #504]	; (800da80 <_malloc_r+0x324>)
 800d886:	428a      	cmp	r2, r1
 800d888:	d842      	bhi.n	800d910 <_malloc_r+0x1b4>
 800d88a:	08d2      	lsrs	r2, r2, #3
 800d88c:	39ff      	subs	r1, #255	; 0xff
 800d88e:	1096      	asrs	r6, r2, #2
 800d890:	39ff      	subs	r1, #255	; 0xff
 800d892:	40b1      	lsls	r1, r6
 800d894:	6846      	ldr	r6, [r0, #4]
 800d896:	00d2      	lsls	r2, r2, #3
 800d898:	4331      	orrs	r1, r6
 800d89a:	6041      	str	r1, [r0, #4]
 800d89c:	1810      	adds	r0, r2, r0
 800d89e:	6882      	ldr	r2, [r0, #8]
 800d8a0:	60e0      	str	r0, [r4, #12]
 800d8a2:	60a2      	str	r2, [r4, #8]
 800d8a4:	6084      	str	r4, [r0, #8]
 800d8a6:	60d4      	str	r4, [r2, #12]
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	1099      	asrs	r1, r3, #2
 800d8ac:	408a      	lsls	r2, r1
 800d8ae:	4972      	ldr	r1, [pc, #456]	; (800da78 <_malloc_r+0x31c>)
 800d8b0:	6848      	ldr	r0, [r1, #4]
 800d8b2:	4282      	cmp	r2, r0
 800d8b4:	d900      	bls.n	800d8b8 <_malloc_r+0x15c>
 800d8b6:	e097      	b.n	800d9e8 <_malloc_r+0x28c>
 800d8b8:	4210      	tst	r0, r2
 800d8ba:	d105      	bne.n	800d8c8 <_malloc_r+0x16c>
 800d8bc:	2403      	movs	r4, #3
 800d8be:	43a3      	bics	r3, r4
 800d8c0:	0052      	lsls	r2, r2, #1
 800d8c2:	3304      	adds	r3, #4
 800d8c4:	4210      	tst	r0, r2
 800d8c6:	d0fb      	beq.n	800d8c0 <_malloc_r+0x164>
 800d8c8:	469c      	mov	ip, r3
 800d8ca:	00d8      	lsls	r0, r3, #3
 800d8cc:	1808      	adds	r0, r1, r0
 800d8ce:	9002      	str	r0, [sp, #8]
 800d8d0:	9c02      	ldr	r4, [sp, #8]
 800d8d2:	68e4      	ldr	r4, [r4, #12]
 800d8d4:	9e02      	ldr	r6, [sp, #8]
 800d8d6:	42b4      	cmp	r4, r6
 800d8d8:	d158      	bne.n	800d98c <_malloc_r+0x230>
 800d8da:	0034      	movs	r4, r6
 800d8dc:	3408      	adds	r4, #8
 800d8de:	9402      	str	r4, [sp, #8]
 800d8e0:	2401      	movs	r4, #1
 800d8e2:	44a4      	add	ip, r4
 800d8e4:	4664      	mov	r4, ip
 800d8e6:	2603      	movs	r6, #3
 800d8e8:	4234      	tst	r4, r6
 800d8ea:	d1f1      	bne.n	800d8d0 <_malloc_r+0x174>
 800d8ec:	2403      	movs	r4, #3
 800d8ee:	4223      	tst	r3, r4
 800d8f0:	d174      	bne.n	800d9dc <_malloc_r+0x280>
 800d8f2:	684b      	ldr	r3, [r1, #4]
 800d8f4:	4393      	bics	r3, r2
 800d8f6:	604b      	str	r3, [r1, #4]
 800d8f8:	6848      	ldr	r0, [r1, #4]
 800d8fa:	0052      	lsls	r2, r2, #1
 800d8fc:	4282      	cmp	r2, r0
 800d8fe:	d873      	bhi.n	800d9e8 <_malloc_r+0x28c>
 800d900:	2a00      	cmp	r2, #0
 800d902:	d071      	beq.n	800d9e8 <_malloc_r+0x28c>
 800d904:	4663      	mov	r3, ip
 800d906:	4210      	tst	r0, r2
 800d908:	d1de      	bne.n	800d8c8 <_malloc_r+0x16c>
 800d90a:	3304      	adds	r3, #4
 800d90c:	0052      	lsls	r2, r2, #1
 800d90e:	e7fa      	b.n	800d906 <_malloc_r+0x1aa>
 800d910:	0a56      	lsrs	r6, r2, #9
 800d912:	2e04      	cmp	r6, #4
 800d914:	d816      	bhi.n	800d944 <_malloc_r+0x1e8>
 800d916:	0991      	lsrs	r1, r2, #6
 800d918:	3138      	adds	r1, #56	; 0x38
 800d91a:	00cf      	lsls	r7, r1, #3
 800d91c:	183e      	adds	r6, r7, r0
 800d91e:	2703      	movs	r7, #3
 800d920:	9602      	str	r6, [sp, #8]
 800d922:	46bc      	mov	ip, r7
 800d924:	68b6      	ldr	r6, [r6, #8]
 800d926:	9f02      	ldr	r7, [sp, #8]
 800d928:	42b7      	cmp	r7, r6
 800d92a:	d127      	bne.n	800d97c <_malloc_r+0x220>
 800d92c:	2201      	movs	r2, #1
 800d92e:	1089      	asrs	r1, r1, #2
 800d930:	408a      	lsls	r2, r1
 800d932:	6841      	ldr	r1, [r0, #4]
 800d934:	430a      	orrs	r2, r1
 800d936:	6042      	str	r2, [r0, #4]
 800d938:	9a02      	ldr	r2, [sp, #8]
 800d93a:	60a6      	str	r6, [r4, #8]
 800d93c:	60e2      	str	r2, [r4, #12]
 800d93e:	6094      	str	r4, [r2, #8]
 800d940:	60f4      	str	r4, [r6, #12]
 800d942:	e7b1      	b.n	800d8a8 <_malloc_r+0x14c>
 800d944:	2e14      	cmp	r6, #20
 800d946:	d802      	bhi.n	800d94e <_malloc_r+0x1f2>
 800d948:	0031      	movs	r1, r6
 800d94a:	315b      	adds	r1, #91	; 0x5b
 800d94c:	e7e5      	b.n	800d91a <_malloc_r+0x1be>
 800d94e:	2e54      	cmp	r6, #84	; 0x54
 800d950:	d802      	bhi.n	800d958 <_malloc_r+0x1fc>
 800d952:	0b11      	lsrs	r1, r2, #12
 800d954:	316e      	adds	r1, #110	; 0x6e
 800d956:	e7e0      	b.n	800d91a <_malloc_r+0x1be>
 800d958:	21aa      	movs	r1, #170	; 0xaa
 800d95a:	0049      	lsls	r1, r1, #1
 800d95c:	428e      	cmp	r6, r1
 800d95e:	d802      	bhi.n	800d966 <_malloc_r+0x20a>
 800d960:	0bd1      	lsrs	r1, r2, #15
 800d962:	3177      	adds	r1, #119	; 0x77
 800d964:	e7d9      	b.n	800d91a <_malloc_r+0x1be>
 800d966:	4f45      	ldr	r7, [pc, #276]	; (800da7c <_malloc_r+0x320>)
 800d968:	217e      	movs	r1, #126	; 0x7e
 800d96a:	42be      	cmp	r6, r7
 800d96c:	d8d5      	bhi.n	800d91a <_malloc_r+0x1be>
 800d96e:	0c91      	lsrs	r1, r2, #18
 800d970:	317c      	adds	r1, #124	; 0x7c
 800d972:	e7d2      	b.n	800d91a <_malloc_r+0x1be>
 800d974:	68b6      	ldr	r6, [r6, #8]
 800d976:	9902      	ldr	r1, [sp, #8]
 800d978:	42b1      	cmp	r1, r6
 800d97a:	d004      	beq.n	800d986 <_malloc_r+0x22a>
 800d97c:	4660      	mov	r0, ip
 800d97e:	6871      	ldr	r1, [r6, #4]
 800d980:	4381      	bics	r1, r0
 800d982:	428a      	cmp	r2, r1
 800d984:	d3f6      	bcc.n	800d974 <_malloc_r+0x218>
 800d986:	68f2      	ldr	r2, [r6, #12]
 800d988:	9202      	str	r2, [sp, #8]
 800d98a:	e7d5      	b.n	800d938 <_malloc_r+0x1dc>
 800d98c:	2603      	movs	r6, #3
 800d98e:	6867      	ldr	r7, [r4, #4]
 800d990:	43b7      	bics	r7, r6
 800d992:	9703      	str	r7, [sp, #12]
 800d994:	1b7e      	subs	r6, r7, r5
 800d996:	2e0f      	cmp	r6, #15
 800d998:	dd11      	ble.n	800d9be <_malloc_r+0x262>
 800d99a:	2201      	movs	r2, #1
 800d99c:	1963      	adds	r3, r4, r5
 800d99e:	4315      	orrs	r5, r2
 800d9a0:	6065      	str	r5, [r4, #4]
 800d9a2:	68e0      	ldr	r0, [r4, #12]
 800d9a4:	68a5      	ldr	r5, [r4, #8]
 800d9a6:	3108      	adds	r1, #8
 800d9a8:	60e8      	str	r0, [r5, #12]
 800d9aa:	4332      	orrs	r2, r6
 800d9ac:	6085      	str	r5, [r0, #8]
 800d9ae:	60cb      	str	r3, [r1, #12]
 800d9b0:	608b      	str	r3, [r1, #8]
 800d9b2:	60d9      	str	r1, [r3, #12]
 800d9b4:	6099      	str	r1, [r3, #8]
 800d9b6:	605a      	str	r2, [r3, #4]
 800d9b8:	003b      	movs	r3, r7
 800d9ba:	50e6      	str	r6, [r4, r3]
 800d9bc:	e703      	b.n	800d7c6 <_malloc_r+0x6a>
 800d9be:	68e7      	ldr	r7, [r4, #12]
 800d9c0:	2e00      	cmp	r6, #0
 800d9c2:	db09      	blt.n	800d9d8 <_malloc_r+0x27c>
 800d9c4:	2201      	movs	r2, #1
 800d9c6:	9b03      	ldr	r3, [sp, #12]
 800d9c8:	18e3      	adds	r3, r4, r3
 800d9ca:	6859      	ldr	r1, [r3, #4]
 800d9cc:	430a      	orrs	r2, r1
 800d9ce:	605a      	str	r2, [r3, #4]
 800d9d0:	68a3      	ldr	r3, [r4, #8]
 800d9d2:	60df      	str	r7, [r3, #12]
 800d9d4:	60bb      	str	r3, [r7, #8]
 800d9d6:	e6f6      	b.n	800d7c6 <_malloc_r+0x6a>
 800d9d8:	003c      	movs	r4, r7
 800d9da:	e77b      	b.n	800d8d4 <_malloc_r+0x178>
 800d9dc:	3808      	subs	r0, #8
 800d9de:	6884      	ldr	r4, [r0, #8]
 800d9e0:	3b01      	subs	r3, #1
 800d9e2:	42a0      	cmp	r0, r4
 800d9e4:	d082      	beq.n	800d8ec <_malloc_r+0x190>
 800d9e6:	e787      	b.n	800d8f8 <_malloc_r+0x19c>
 800d9e8:	2303      	movs	r3, #3
 800d9ea:	688f      	ldr	r7, [r1, #8]
 800d9ec:	687a      	ldr	r2, [r7, #4]
 800d9ee:	439a      	bics	r2, r3
 800d9f0:	9202      	str	r2, [sp, #8]
 800d9f2:	4295      	cmp	r5, r2
 800d9f4:	d803      	bhi.n	800d9fe <_malloc_r+0x2a2>
 800d9f6:	1b52      	subs	r2, r2, r5
 800d9f8:	2a0f      	cmp	r2, #15
 800d9fa:	dd00      	ble.n	800d9fe <_malloc_r+0x2a2>
 800d9fc:	e09f      	b.n	800db3e <_malloc_r+0x3e2>
 800d9fe:	9b02      	ldr	r3, [sp, #8]
 800da00:	18fb      	adds	r3, r7, r3
 800da02:	9303      	str	r3, [sp, #12]
 800da04:	4b1f      	ldr	r3, [pc, #124]	; (800da84 <_malloc_r+0x328>)
 800da06:	681e      	ldr	r6, [r3, #0]
 800da08:	4b1f      	ldr	r3, [pc, #124]	; (800da88 <_malloc_r+0x32c>)
 800da0a:	3610      	adds	r6, #16
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	1976      	adds	r6, r6, r5
 800da10:	3301      	adds	r3, #1
 800da12:	d005      	beq.n	800da20 <_malloc_r+0x2c4>
 800da14:	4b1d      	ldr	r3, [pc, #116]	; (800da8c <_malloc_r+0x330>)
 800da16:	3b01      	subs	r3, #1
 800da18:	199e      	adds	r6, r3, r6
 800da1a:	4b1c      	ldr	r3, [pc, #112]	; (800da8c <_malloc_r+0x330>)
 800da1c:	425b      	negs	r3, r3
 800da1e:	401e      	ands	r6, r3
 800da20:	0031      	movs	r1, r6
 800da22:	9801      	ldr	r0, [sp, #4]
 800da24:	f000 f8c0 	bl	800dba8 <_sbrk_r>
 800da28:	0004      	movs	r4, r0
 800da2a:	1c43      	adds	r3, r0, #1
 800da2c:	d05f      	beq.n	800daee <_malloc_r+0x392>
 800da2e:	9b03      	ldr	r3, [sp, #12]
 800da30:	4283      	cmp	r3, r0
 800da32:	d902      	bls.n	800da3a <_malloc_r+0x2de>
 800da34:	4b10      	ldr	r3, [pc, #64]	; (800da78 <_malloc_r+0x31c>)
 800da36:	429f      	cmp	r7, r3
 800da38:	d159      	bne.n	800daee <_malloc_r+0x392>
 800da3a:	4b15      	ldr	r3, [pc, #84]	; (800da90 <_malloc_r+0x334>)
 800da3c:	681a      	ldr	r2, [r3, #0]
 800da3e:	18b1      	adds	r1, r6, r2
 800da40:	6019      	str	r1, [r3, #0]
 800da42:	4b12      	ldr	r3, [pc, #72]	; (800da8c <_malloc_r+0x330>)
 800da44:	1e5a      	subs	r2, r3, #1
 800da46:	9b03      	ldr	r3, [sp, #12]
 800da48:	42a3      	cmp	r3, r4
 800da4a:	d127      	bne.n	800da9c <_malloc_r+0x340>
 800da4c:	4213      	tst	r3, r2
 800da4e:	d125      	bne.n	800da9c <_malloc_r+0x340>
 800da50:	9a02      	ldr	r2, [sp, #8]
 800da52:	4b09      	ldr	r3, [pc, #36]	; (800da78 <_malloc_r+0x31c>)
 800da54:	1992      	adds	r2, r2, r6
 800da56:	2601      	movs	r6, #1
 800da58:	689b      	ldr	r3, [r3, #8]
 800da5a:	4316      	orrs	r6, r2
 800da5c:	605e      	str	r6, [r3, #4]
 800da5e:	4b0c      	ldr	r3, [pc, #48]	; (800da90 <_malloc_r+0x334>)
 800da60:	4a0c      	ldr	r2, [pc, #48]	; (800da94 <_malloc_r+0x338>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	6811      	ldr	r1, [r2, #0]
 800da66:	428b      	cmp	r3, r1
 800da68:	d900      	bls.n	800da6c <_malloc_r+0x310>
 800da6a:	6013      	str	r3, [r2, #0]
 800da6c:	4a0a      	ldr	r2, [pc, #40]	; (800da98 <_malloc_r+0x33c>)
 800da6e:	6811      	ldr	r1, [r2, #0]
 800da70:	428b      	cmp	r3, r1
 800da72:	d93c      	bls.n	800daee <_malloc_r+0x392>
 800da74:	6013      	str	r3, [r2, #0]
 800da76:	e03a      	b.n	800daee <_malloc_r+0x392>
 800da78:	20000144 	.word	0x20000144
 800da7c:	00000554 	.word	0x00000554
 800da80:	000001ff 	.word	0x000001ff
 800da84:	200045a8 	.word	0x200045a8
 800da88:	2000054c 	.word	0x2000054c
 800da8c:	00000080 	.word	0x00000080
 800da90:	20004578 	.word	0x20004578
 800da94:	200045a0 	.word	0x200045a0
 800da98:	200045a4 	.word	0x200045a4
 800da9c:	4b2d      	ldr	r3, [pc, #180]	; (800db54 <_malloc_r+0x3f8>)
 800da9e:	6818      	ldr	r0, [r3, #0]
 800daa0:	3001      	adds	r0, #1
 800daa2:	d132      	bne.n	800db0a <_malloc_r+0x3ae>
 800daa4:	601c      	str	r4, [r3, #0]
 800daa6:	2007      	movs	r0, #7
 800daa8:	4020      	ands	r0, r4
 800daaa:	d002      	beq.n	800dab2 <_malloc_r+0x356>
 800daac:	2308      	movs	r3, #8
 800daae:	1a18      	subs	r0, r3, r0
 800dab0:	1824      	adds	r4, r4, r0
 800dab2:	4b29      	ldr	r3, [pc, #164]	; (800db58 <_malloc_r+0x3fc>)
 800dab4:	19a6      	adds	r6, r4, r6
 800dab6:	1818      	adds	r0, r3, r0
 800dab8:	4016      	ands	r6, r2
 800daba:	1b86      	subs	r6, r0, r6
 800dabc:	0031      	movs	r1, r6
 800dabe:	9801      	ldr	r0, [sp, #4]
 800dac0:	f000 f872 	bl	800dba8 <_sbrk_r>
 800dac4:	1c43      	adds	r3, r0, #1
 800dac6:	d101      	bne.n	800dacc <_malloc_r+0x370>
 800dac8:	0020      	movs	r0, r4
 800daca:	2600      	movs	r6, #0
 800dacc:	4a23      	ldr	r2, [pc, #140]	; (800db5c <_malloc_r+0x400>)
 800dace:	1b00      	subs	r0, r0, r4
 800dad0:	6813      	ldr	r3, [r2, #0]
 800dad2:	199b      	adds	r3, r3, r6
 800dad4:	6013      	str	r3, [r2, #0]
 800dad6:	2301      	movs	r3, #1
 800dad8:	4a21      	ldr	r2, [pc, #132]	; (800db60 <_malloc_r+0x404>)
 800dada:	1986      	adds	r6, r0, r6
 800dadc:	431e      	orrs	r6, r3
 800dade:	6094      	str	r4, [r2, #8]
 800dae0:	6066      	str	r6, [r4, #4]
 800dae2:	4297      	cmp	r7, r2
 800dae4:	d0bb      	beq.n	800da5e <_malloc_r+0x302>
 800dae6:	9a02      	ldr	r2, [sp, #8]
 800dae8:	2a0f      	cmp	r2, #15
 800daea:	d814      	bhi.n	800db16 <_malloc_r+0x3ba>
 800daec:	6063      	str	r3, [r4, #4]
 800daee:	2203      	movs	r2, #3
 800daf0:	4b1b      	ldr	r3, [pc, #108]	; (800db60 <_malloc_r+0x404>)
 800daf2:	689b      	ldr	r3, [r3, #8]
 800daf4:	685b      	ldr	r3, [r3, #4]
 800daf6:	4393      	bics	r3, r2
 800daf8:	1b5a      	subs	r2, r3, r5
 800dafa:	429d      	cmp	r5, r3
 800dafc:	d801      	bhi.n	800db02 <_malloc_r+0x3a6>
 800dafe:	2a0f      	cmp	r2, #15
 800db00:	dc1d      	bgt.n	800db3e <_malloc_r+0x3e2>
 800db02:	9801      	ldr	r0, [sp, #4]
 800db04:	f000 f848 	bl	800db98 <__malloc_unlock>
 800db08:	e635      	b.n	800d776 <_malloc_r+0x1a>
 800db0a:	9b03      	ldr	r3, [sp, #12]
 800db0c:	1ae3      	subs	r3, r4, r3
 800db0e:	185b      	adds	r3, r3, r1
 800db10:	4912      	ldr	r1, [pc, #72]	; (800db5c <_malloc_r+0x400>)
 800db12:	600b      	str	r3, [r1, #0]
 800db14:	e7c7      	b.n	800daa6 <_malloc_r+0x34a>
 800db16:	2207      	movs	r2, #7
 800db18:	9e02      	ldr	r6, [sp, #8]
 800db1a:	3e0c      	subs	r6, #12
 800db1c:	4396      	bics	r6, r2
 800db1e:	687a      	ldr	r2, [r7, #4]
 800db20:	4013      	ands	r3, r2
 800db22:	2205      	movs	r2, #5
 800db24:	4333      	orrs	r3, r6
 800db26:	607b      	str	r3, [r7, #4]
 800db28:	19bb      	adds	r3, r7, r6
 800db2a:	605a      	str	r2, [r3, #4]
 800db2c:	609a      	str	r2, [r3, #8]
 800db2e:	2e0f      	cmp	r6, #15
 800db30:	d995      	bls.n	800da5e <_malloc_r+0x302>
 800db32:	0039      	movs	r1, r7
 800db34:	9801      	ldr	r0, [sp, #4]
 800db36:	3108      	adds	r1, #8
 800db38:	f000 f8a4 	bl	800dc84 <_free_r>
 800db3c:	e78f      	b.n	800da5e <_malloc_r+0x302>
 800db3e:	2301      	movs	r3, #1
 800db40:	0018      	movs	r0, r3
 800db42:	4907      	ldr	r1, [pc, #28]	; (800db60 <_malloc_r+0x404>)
 800db44:	4328      	orrs	r0, r5
 800db46:	688c      	ldr	r4, [r1, #8]
 800db48:	4313      	orrs	r3, r2
 800db4a:	1965      	adds	r5, r4, r5
 800db4c:	6060      	str	r0, [r4, #4]
 800db4e:	608d      	str	r5, [r1, #8]
 800db50:	606b      	str	r3, [r5, #4]
 800db52:	e638      	b.n	800d7c6 <_malloc_r+0x6a>
 800db54:	2000054c 	.word	0x2000054c
 800db58:	00000080 	.word	0x00000080
 800db5c:	20004578 	.word	0x20004578
 800db60:	20000144 	.word	0x20000144

0800db64 <memcpy>:
 800db64:	2300      	movs	r3, #0
 800db66:	b510      	push	{r4, lr}
 800db68:	429a      	cmp	r2, r3
 800db6a:	d100      	bne.n	800db6e <memcpy+0xa>
 800db6c:	bd10      	pop	{r4, pc}
 800db6e:	5ccc      	ldrb	r4, [r1, r3]
 800db70:	54c4      	strb	r4, [r0, r3]
 800db72:	3301      	adds	r3, #1
 800db74:	e7f8      	b.n	800db68 <memcpy+0x4>

0800db76 <memset>:
 800db76:	0003      	movs	r3, r0
 800db78:	1882      	adds	r2, r0, r2
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d100      	bne.n	800db80 <memset+0xa>
 800db7e:	4770      	bx	lr
 800db80:	7019      	strb	r1, [r3, #0]
 800db82:	3301      	adds	r3, #1
 800db84:	e7f9      	b.n	800db7a <memset+0x4>
	...

0800db88 <__malloc_lock>:
 800db88:	b510      	push	{r4, lr}
 800db8a:	4802      	ldr	r0, [pc, #8]	; (800db94 <__malloc_lock+0xc>)
 800db8c:	f000 f92e 	bl	800ddec <__retarget_lock_acquire_recursive>
 800db90:	bd10      	pop	{r4, pc}
 800db92:	46c0      	nop			; (mov r8, r8)
 800db94:	200053e4 	.word	0x200053e4

0800db98 <__malloc_unlock>:
 800db98:	b510      	push	{r4, lr}
 800db9a:	4802      	ldr	r0, [pc, #8]	; (800dba4 <__malloc_unlock+0xc>)
 800db9c:	f000 f927 	bl	800ddee <__retarget_lock_release_recursive>
 800dba0:	bd10      	pop	{r4, pc}
 800dba2:	46c0      	nop			; (mov r8, r8)
 800dba4:	200053e4 	.word	0x200053e4

0800dba8 <_sbrk_r>:
 800dba8:	2300      	movs	r3, #0
 800dbaa:	b570      	push	{r4, r5, r6, lr}
 800dbac:	4c06      	ldr	r4, [pc, #24]	; (800dbc8 <_sbrk_r+0x20>)
 800dbae:	0005      	movs	r5, r0
 800dbb0:	0008      	movs	r0, r1
 800dbb2:	6023      	str	r3, [r4, #0]
 800dbb4:	f7f4 fa9a 	bl	80020ec <_sbrk>
 800dbb8:	1c43      	adds	r3, r0, #1
 800dbba:	d103      	bne.n	800dbc4 <_sbrk_r+0x1c>
 800dbbc:	6823      	ldr	r3, [r4, #0]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d000      	beq.n	800dbc4 <_sbrk_r+0x1c>
 800dbc2:	602b      	str	r3, [r5, #0]
 800dbc4:	bd70      	pop	{r4, r5, r6, pc}
 800dbc6:	46c0      	nop			; (mov r8, r8)
 800dbc8:	200053ec 	.word	0x200053ec

0800dbcc <strcpy>:
 800dbcc:	1c03      	adds	r3, r0, #0
 800dbce:	780a      	ldrb	r2, [r1, #0]
 800dbd0:	3101      	adds	r1, #1
 800dbd2:	701a      	strb	r2, [r3, #0]
 800dbd4:	3301      	adds	r3, #1
 800dbd6:	2a00      	cmp	r2, #0
 800dbd8:	d1f9      	bne.n	800dbce <strcpy+0x2>
 800dbda:	4770      	bx	lr

0800dbdc <_malloc_trim_r>:
 800dbdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dbde:	4f25      	ldr	r7, [pc, #148]	; (800dc74 <_malloc_trim_r+0x98>)
 800dbe0:	000c      	movs	r4, r1
 800dbe2:	0005      	movs	r5, r0
 800dbe4:	f7ff ffd0 	bl	800db88 <__malloc_lock>
 800dbe8:	0038      	movs	r0, r7
 800dbea:	2203      	movs	r2, #3
 800dbec:	4e22      	ldr	r6, [pc, #136]	; (800dc78 <_malloc_trim_r+0x9c>)
 800dbee:	3811      	subs	r0, #17
 800dbf0:	68b3      	ldr	r3, [r6, #8]
 800dbf2:	1b00      	subs	r0, r0, r4
 800dbf4:	685b      	ldr	r3, [r3, #4]
 800dbf6:	0039      	movs	r1, r7
 800dbf8:	4393      	bics	r3, r2
 800dbfa:	18c0      	adds	r0, r0, r3
 800dbfc:	9301      	str	r3, [sp, #4]
 800dbfe:	f7f2 faaf 	bl	8000160 <__udivsi3>
 800dc02:	1e44      	subs	r4, r0, #1
 800dc04:	437c      	muls	r4, r7
 800dc06:	42bc      	cmp	r4, r7
 800dc08:	da04      	bge.n	800dc14 <_malloc_trim_r+0x38>
 800dc0a:	0028      	movs	r0, r5
 800dc0c:	f7ff ffc4 	bl	800db98 <__malloc_unlock>
 800dc10:	2000      	movs	r0, #0
 800dc12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dc14:	2100      	movs	r1, #0
 800dc16:	0028      	movs	r0, r5
 800dc18:	f7ff ffc6 	bl	800dba8 <_sbrk_r>
 800dc1c:	68b3      	ldr	r3, [r6, #8]
 800dc1e:	9a01      	ldr	r2, [sp, #4]
 800dc20:	189b      	adds	r3, r3, r2
 800dc22:	4298      	cmp	r0, r3
 800dc24:	d1f1      	bne.n	800dc0a <_malloc_trim_r+0x2e>
 800dc26:	4261      	negs	r1, r4
 800dc28:	0028      	movs	r0, r5
 800dc2a:	f7ff ffbd 	bl	800dba8 <_sbrk_r>
 800dc2e:	1c43      	adds	r3, r0, #1
 800dc30:	d110      	bne.n	800dc54 <_malloc_trim_r+0x78>
 800dc32:	2100      	movs	r1, #0
 800dc34:	0028      	movs	r0, r5
 800dc36:	f7ff ffb7 	bl	800dba8 <_sbrk_r>
 800dc3a:	68b2      	ldr	r2, [r6, #8]
 800dc3c:	1a81      	subs	r1, r0, r2
 800dc3e:	290f      	cmp	r1, #15
 800dc40:	dde3      	ble.n	800dc0a <_malloc_trim_r+0x2e>
 800dc42:	4b0e      	ldr	r3, [pc, #56]	; (800dc7c <_malloc_trim_r+0xa0>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	1ac0      	subs	r0, r0, r3
 800dc48:	4b0d      	ldr	r3, [pc, #52]	; (800dc80 <_malloc_trim_r+0xa4>)
 800dc4a:	6018      	str	r0, [r3, #0]
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	430b      	orrs	r3, r1
 800dc50:	6053      	str	r3, [r2, #4]
 800dc52:	e7da      	b.n	800dc0a <_malloc_trim_r+0x2e>
 800dc54:	68b2      	ldr	r2, [r6, #8]
 800dc56:	2601      	movs	r6, #1
 800dc58:	9b01      	ldr	r3, [sp, #4]
 800dc5a:	0028      	movs	r0, r5
 800dc5c:	1b1b      	subs	r3, r3, r4
 800dc5e:	4333      	orrs	r3, r6
 800dc60:	6053      	str	r3, [r2, #4]
 800dc62:	4b07      	ldr	r3, [pc, #28]	; (800dc80 <_malloc_trim_r+0xa4>)
 800dc64:	681a      	ldr	r2, [r3, #0]
 800dc66:	1b14      	subs	r4, r2, r4
 800dc68:	601c      	str	r4, [r3, #0]
 800dc6a:	f7ff ff95 	bl	800db98 <__malloc_unlock>
 800dc6e:	0030      	movs	r0, r6
 800dc70:	e7cf      	b.n	800dc12 <_malloc_trim_r+0x36>
 800dc72:	46c0      	nop			; (mov r8, r8)
 800dc74:	00000080 	.word	0x00000080
 800dc78:	20000144 	.word	0x20000144
 800dc7c:	2000054c 	.word	0x2000054c
 800dc80:	20004578 	.word	0x20004578

0800dc84 <_free_r>:
 800dc84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc86:	1e0d      	subs	r5, r1, #0
 800dc88:	9001      	str	r0, [sp, #4]
 800dc8a:	d02d      	beq.n	800dce8 <_free_r+0x64>
 800dc8c:	f7ff ff7c 	bl	800db88 <__malloc_lock>
 800dc90:	2301      	movs	r3, #1
 800dc92:	0029      	movs	r1, r5
 800dc94:	469c      	mov	ip, r3
 800dc96:	3908      	subs	r1, #8
 800dc98:	684f      	ldr	r7, [r1, #4]
 800dc9a:	4662      	mov	r2, ip
 800dc9c:	003b      	movs	r3, r7
 800dc9e:	4666      	mov	r6, ip
 800dca0:	4393      	bics	r3, r2
 800dca2:	18c8      	adds	r0, r1, r3
 800dca4:	6845      	ldr	r5, [r0, #4]
 800dca6:	3202      	adds	r2, #2
 800dca8:	4395      	bics	r5, r2
 800dcaa:	4a4a      	ldr	r2, [pc, #296]	; (800ddd4 <_free_r+0x150>)
 800dcac:	4037      	ands	r7, r6
 800dcae:	6896      	ldr	r6, [r2, #8]
 800dcb0:	42b0      	cmp	r0, r6
 800dcb2:	d11a      	bne.n	800dcea <_free_r+0x66>
 800dcb4:	195b      	adds	r3, r3, r5
 800dcb6:	2f00      	cmp	r7, #0
 800dcb8:	d106      	bne.n	800dcc8 <_free_r+0x44>
 800dcba:	6808      	ldr	r0, [r1, #0]
 800dcbc:	1a09      	subs	r1, r1, r0
 800dcbe:	688d      	ldr	r5, [r1, #8]
 800dcc0:	181b      	adds	r3, r3, r0
 800dcc2:	68c8      	ldr	r0, [r1, #12]
 800dcc4:	60e8      	str	r0, [r5, #12]
 800dcc6:	6085      	str	r5, [r0, #8]
 800dcc8:	2001      	movs	r0, #1
 800dcca:	4318      	orrs	r0, r3
 800dccc:	6048      	str	r0, [r1, #4]
 800dcce:	6091      	str	r1, [r2, #8]
 800dcd0:	4a41      	ldr	r2, [pc, #260]	; (800ddd8 <_free_r+0x154>)
 800dcd2:	6812      	ldr	r2, [r2, #0]
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d304      	bcc.n	800dce2 <_free_r+0x5e>
 800dcd8:	4b40      	ldr	r3, [pc, #256]	; (800dddc <_free_r+0x158>)
 800dcda:	9801      	ldr	r0, [sp, #4]
 800dcdc:	6819      	ldr	r1, [r3, #0]
 800dcde:	f7ff ff7d 	bl	800dbdc <_malloc_trim_r>
 800dce2:	9801      	ldr	r0, [sp, #4]
 800dce4:	f7ff ff58 	bl	800db98 <__malloc_unlock>
 800dce8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800dcea:	2600      	movs	r6, #0
 800dcec:	6045      	str	r5, [r0, #4]
 800dcee:	42b7      	cmp	r7, r6
 800dcf0:	d109      	bne.n	800dd06 <_free_r+0x82>
 800dcf2:	680f      	ldr	r7, [r1, #0]
 800dcf4:	4c3a      	ldr	r4, [pc, #232]	; (800dde0 <_free_r+0x15c>)
 800dcf6:	1bc9      	subs	r1, r1, r7
 800dcf8:	19db      	adds	r3, r3, r7
 800dcfa:	688f      	ldr	r7, [r1, #8]
 800dcfc:	42a7      	cmp	r7, r4
 800dcfe:	d02b      	beq.n	800dd58 <_free_r+0xd4>
 800dd00:	68cc      	ldr	r4, [r1, #12]
 800dd02:	60fc      	str	r4, [r7, #12]
 800dd04:	60a7      	str	r7, [r4, #8]
 800dd06:	1947      	adds	r7, r0, r5
 800dd08:	687c      	ldr	r4, [r7, #4]
 800dd0a:	2701      	movs	r7, #1
 800dd0c:	423c      	tst	r4, r7
 800dd0e:	d10b      	bne.n	800dd28 <_free_r+0xa4>
 800dd10:	195b      	adds	r3, r3, r5
 800dd12:	6885      	ldr	r5, [r0, #8]
 800dd14:	2e00      	cmp	r6, #0
 800dd16:	d121      	bne.n	800dd5c <_free_r+0xd8>
 800dd18:	4c31      	ldr	r4, [pc, #196]	; (800dde0 <_free_r+0x15c>)
 800dd1a:	42a5      	cmp	r5, r4
 800dd1c:	d11e      	bne.n	800dd5c <_free_r+0xd8>
 800dd1e:	003e      	movs	r6, r7
 800dd20:	6151      	str	r1, [r2, #20]
 800dd22:	6111      	str	r1, [r2, #16]
 800dd24:	60cd      	str	r5, [r1, #12]
 800dd26:	608d      	str	r5, [r1, #8]
 800dd28:	2001      	movs	r0, #1
 800dd2a:	0005      	movs	r5, r0
 800dd2c:	431d      	orrs	r5, r3
 800dd2e:	604d      	str	r5, [r1, #4]
 800dd30:	50cb      	str	r3, [r1, r3]
 800dd32:	2e00      	cmp	r6, #0
 800dd34:	d1d5      	bne.n	800dce2 <_free_r+0x5e>
 800dd36:	4d2b      	ldr	r5, [pc, #172]	; (800dde4 <_free_r+0x160>)
 800dd38:	42ab      	cmp	r3, r5
 800dd3a:	d813      	bhi.n	800dd64 <_free_r+0xe0>
 800dd3c:	08db      	lsrs	r3, r3, #3
 800dd3e:	109d      	asrs	r5, r3, #2
 800dd40:	40a8      	lsls	r0, r5
 800dd42:	6854      	ldr	r4, [r2, #4]
 800dd44:	00db      	lsls	r3, r3, #3
 800dd46:	4320      	orrs	r0, r4
 800dd48:	6050      	str	r0, [r2, #4]
 800dd4a:	189a      	adds	r2, r3, r2
 800dd4c:	6893      	ldr	r3, [r2, #8]
 800dd4e:	60ca      	str	r2, [r1, #12]
 800dd50:	608b      	str	r3, [r1, #8]
 800dd52:	6091      	str	r1, [r2, #8]
 800dd54:	60d9      	str	r1, [r3, #12]
 800dd56:	e7c4      	b.n	800dce2 <_free_r+0x5e>
 800dd58:	4666      	mov	r6, ip
 800dd5a:	e7d4      	b.n	800dd06 <_free_r+0x82>
 800dd5c:	68c0      	ldr	r0, [r0, #12]
 800dd5e:	60e8      	str	r0, [r5, #12]
 800dd60:	6085      	str	r5, [r0, #8]
 800dd62:	e7e1      	b.n	800dd28 <_free_r+0xa4>
 800dd64:	0a5d      	lsrs	r5, r3, #9
 800dd66:	2d04      	cmp	r5, #4
 800dd68:	d812      	bhi.n	800dd90 <_free_r+0x10c>
 800dd6a:	0998      	lsrs	r0, r3, #6
 800dd6c:	3038      	adds	r0, #56	; 0x38
 800dd6e:	00c6      	lsls	r6, r0, #3
 800dd70:	18b6      	adds	r6, r6, r2
 800dd72:	68b5      	ldr	r5, [r6, #8]
 800dd74:	2703      	movs	r7, #3
 800dd76:	42ae      	cmp	r6, r5
 800dd78:	d125      	bne.n	800ddc6 <_free_r+0x142>
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	1080      	asrs	r0, r0, #2
 800dd7e:	4083      	lsls	r3, r0
 800dd80:	6850      	ldr	r0, [r2, #4]
 800dd82:	4303      	orrs	r3, r0
 800dd84:	6053      	str	r3, [r2, #4]
 800dd86:	60ce      	str	r6, [r1, #12]
 800dd88:	608d      	str	r5, [r1, #8]
 800dd8a:	60b1      	str	r1, [r6, #8]
 800dd8c:	60e9      	str	r1, [r5, #12]
 800dd8e:	e7a8      	b.n	800dce2 <_free_r+0x5e>
 800dd90:	2d14      	cmp	r5, #20
 800dd92:	d802      	bhi.n	800dd9a <_free_r+0x116>
 800dd94:	0028      	movs	r0, r5
 800dd96:	305b      	adds	r0, #91	; 0x5b
 800dd98:	e7e9      	b.n	800dd6e <_free_r+0xea>
 800dd9a:	2d54      	cmp	r5, #84	; 0x54
 800dd9c:	d802      	bhi.n	800dda4 <_free_r+0x120>
 800dd9e:	0b18      	lsrs	r0, r3, #12
 800dda0:	306e      	adds	r0, #110	; 0x6e
 800dda2:	e7e4      	b.n	800dd6e <_free_r+0xea>
 800dda4:	20aa      	movs	r0, #170	; 0xaa
 800dda6:	0040      	lsls	r0, r0, #1
 800dda8:	4285      	cmp	r5, r0
 800ddaa:	d802      	bhi.n	800ddb2 <_free_r+0x12e>
 800ddac:	0bd8      	lsrs	r0, r3, #15
 800ddae:	3077      	adds	r0, #119	; 0x77
 800ddb0:	e7dd      	b.n	800dd6e <_free_r+0xea>
 800ddb2:	4e0d      	ldr	r6, [pc, #52]	; (800dde8 <_free_r+0x164>)
 800ddb4:	207e      	movs	r0, #126	; 0x7e
 800ddb6:	42b5      	cmp	r5, r6
 800ddb8:	d8d9      	bhi.n	800dd6e <_free_r+0xea>
 800ddba:	0c98      	lsrs	r0, r3, #18
 800ddbc:	307c      	adds	r0, #124	; 0x7c
 800ddbe:	e7d6      	b.n	800dd6e <_free_r+0xea>
 800ddc0:	68ad      	ldr	r5, [r5, #8]
 800ddc2:	42ae      	cmp	r6, r5
 800ddc4:	d003      	beq.n	800ddce <_free_r+0x14a>
 800ddc6:	686a      	ldr	r2, [r5, #4]
 800ddc8:	43ba      	bics	r2, r7
 800ddca:	4293      	cmp	r3, r2
 800ddcc:	d3f8      	bcc.n	800ddc0 <_free_r+0x13c>
 800ddce:	68ee      	ldr	r6, [r5, #12]
 800ddd0:	e7d9      	b.n	800dd86 <_free_r+0x102>
 800ddd2:	46c0      	nop			; (mov r8, r8)
 800ddd4:	20000144 	.word	0x20000144
 800ddd8:	20000550 	.word	0x20000550
 800dddc:	200045a8 	.word	0x200045a8
 800dde0:	2000014c 	.word	0x2000014c
 800dde4:	000001ff 	.word	0x000001ff
 800dde8:	00000554 	.word	0x00000554

0800ddec <__retarget_lock_acquire_recursive>:
 800ddec:	4770      	bx	lr

0800ddee <__retarget_lock_release_recursive>:
 800ddee:	4770      	bx	lr

0800ddf0 <_init>:
 800ddf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddf2:	46c0      	nop			; (mov r8, r8)
 800ddf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddf6:	bc08      	pop	{r3}
 800ddf8:	469e      	mov	lr, r3
 800ddfa:	4770      	bx	lr

0800ddfc <_fini>:
 800ddfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddfe:	46c0      	nop			; (mov r8, r8)
 800de00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de02:	bc08      	pop	{r3}
 800de04:	469e      	mov	lr, r3
 800de06:	4770      	bx	lr
