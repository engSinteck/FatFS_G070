
FatFS_G070.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c20  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003288  08010cd8  08010cd8  00020cd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013f60  08013f60  00023f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013f68  08013f68  00023f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08013f6c  08013f6c  00023f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000006c8  20000000  08013f70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004dc0  200006c8  08014638  000306c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20005488  08014638  00035488  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000306c8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00060382  00000000  00000000  000306f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b252  00000000  00000000  00090a72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00024cf5  00000000  00000000  0009bcc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002378  00000000  00000000  000c09c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00003cc8  00000000  00000000  000c2d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000175f3  00000000  00000000  000c6a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000c71b  00000000  00000000  000ddff3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000ea70e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007278  00000000  00000000  000ea78c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200006c8 	.word	0x200006c8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08010cc0 	.word	0x08010cc0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200006cc 	.word	0x200006cc
 80000fc:	08010cc0 	.word	0x08010cc0

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_uqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5c09      	ldrb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			; (mov r8, r8)

08000138 <__gnu_thumb1_case_shi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5e09      	ldrsh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__gnu_thumb1_case_uhi>:
 800014c:	b403      	push	{r0, r1}
 800014e:	4671      	mov	r1, lr
 8000150:	0849      	lsrs	r1, r1, #1
 8000152:	0040      	lsls	r0, r0, #1
 8000154:	0049      	lsls	r1, r1, #1
 8000156:	5a09      	ldrh	r1, [r1, r0]
 8000158:	0049      	lsls	r1, r1, #1
 800015a:	448e      	add	lr, r1
 800015c:	bc03      	pop	{r0, r1}
 800015e:	4770      	bx	lr

08000160 <__udivsi3>:
 8000160:	2200      	movs	r2, #0
 8000162:	0843      	lsrs	r3, r0, #1
 8000164:	428b      	cmp	r3, r1
 8000166:	d374      	bcc.n	8000252 <__udivsi3+0xf2>
 8000168:	0903      	lsrs	r3, r0, #4
 800016a:	428b      	cmp	r3, r1
 800016c:	d35f      	bcc.n	800022e <__udivsi3+0xce>
 800016e:	0a03      	lsrs	r3, r0, #8
 8000170:	428b      	cmp	r3, r1
 8000172:	d344      	bcc.n	80001fe <__udivsi3+0x9e>
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d328      	bcc.n	80001cc <__udivsi3+0x6c>
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d30d      	bcc.n	800019c <__udivsi3+0x3c>
 8000180:	22ff      	movs	r2, #255	; 0xff
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	ba12      	rev	r2, r2
 8000186:	0c03      	lsrs	r3, r0, #16
 8000188:	428b      	cmp	r3, r1
 800018a:	d302      	bcc.n	8000192 <__udivsi3+0x32>
 800018c:	1212      	asrs	r2, r2, #8
 800018e:	0209      	lsls	r1, r1, #8
 8000190:	d065      	beq.n	800025e <__udivsi3+0xfe>
 8000192:	0b03      	lsrs	r3, r0, #12
 8000194:	428b      	cmp	r3, r1
 8000196:	d319      	bcc.n	80001cc <__udivsi3+0x6c>
 8000198:	e000      	b.n	800019c <__udivsi3+0x3c>
 800019a:	0a09      	lsrs	r1, r1, #8
 800019c:	0bc3      	lsrs	r3, r0, #15
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x46>
 80001a2:	03cb      	lsls	r3, r1, #15
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b83      	lsrs	r3, r0, #14
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x52>
 80001ae:	038b      	lsls	r3, r1, #14
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b43      	lsrs	r3, r0, #13
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x5e>
 80001ba:	034b      	lsls	r3, r1, #13
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0b03      	lsrs	r3, r0, #12
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x6a>
 80001c6:	030b      	lsls	r3, r1, #12
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0ac3      	lsrs	r3, r0, #11
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x76>
 80001d2:	02cb      	lsls	r3, r1, #11
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a83      	lsrs	r3, r0, #10
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x82>
 80001de:	028b      	lsls	r3, r1, #10
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a43      	lsrs	r3, r0, #9
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x8e>
 80001ea:	024b      	lsls	r3, r1, #9
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	0a03      	lsrs	r3, r0, #8
 80001f2:	428b      	cmp	r3, r1
 80001f4:	d301      	bcc.n	80001fa <__udivsi3+0x9a>
 80001f6:	020b      	lsls	r3, r1, #8
 80001f8:	1ac0      	subs	r0, r0, r3
 80001fa:	4152      	adcs	r2, r2
 80001fc:	d2cd      	bcs.n	800019a <__udivsi3+0x3a>
 80001fe:	09c3      	lsrs	r3, r0, #7
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xa8>
 8000204:	01cb      	lsls	r3, r1, #7
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0983      	lsrs	r3, r0, #6
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xb4>
 8000210:	018b      	lsls	r3, r1, #6
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0943      	lsrs	r3, r0, #5
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xc0>
 800021c:	014b      	lsls	r3, r1, #5
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xcc>
 8000228:	010b      	lsls	r3, r1, #4
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	08c3      	lsrs	r3, r0, #3
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xd8>
 8000234:	00cb      	lsls	r3, r1, #3
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0883      	lsrs	r3, r0, #2
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xe4>
 8000240:	008b      	lsls	r3, r1, #2
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	0843      	lsrs	r3, r0, #1
 8000248:	428b      	cmp	r3, r1
 800024a:	d301      	bcc.n	8000250 <__udivsi3+0xf0>
 800024c:	004b      	lsls	r3, r1, #1
 800024e:	1ac0      	subs	r0, r0, r3
 8000250:	4152      	adcs	r2, r2
 8000252:	1a41      	subs	r1, r0, r1
 8000254:	d200      	bcs.n	8000258 <__udivsi3+0xf8>
 8000256:	4601      	mov	r1, r0
 8000258:	4152      	adcs	r2, r2
 800025a:	4610      	mov	r0, r2
 800025c:	4770      	bx	lr
 800025e:	e7ff      	b.n	8000260 <__udivsi3+0x100>
 8000260:	b501      	push	{r0, lr}
 8000262:	2000      	movs	r0, #0
 8000264:	f000 f8f0 	bl	8000448 <__aeabi_idiv0>
 8000268:	bd02      	pop	{r1, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_uidivmod>:
 800026c:	2900      	cmp	r1, #0
 800026e:	d0f7      	beq.n	8000260 <__udivsi3+0x100>
 8000270:	e776      	b.n	8000160 <__udivsi3>
 8000272:	4770      	bx	lr

08000274 <__divsi3>:
 8000274:	4603      	mov	r3, r0
 8000276:	430b      	orrs	r3, r1
 8000278:	d47f      	bmi.n	800037a <__divsi3+0x106>
 800027a:	2200      	movs	r2, #0
 800027c:	0843      	lsrs	r3, r0, #1
 800027e:	428b      	cmp	r3, r1
 8000280:	d374      	bcc.n	800036c <__divsi3+0xf8>
 8000282:	0903      	lsrs	r3, r0, #4
 8000284:	428b      	cmp	r3, r1
 8000286:	d35f      	bcc.n	8000348 <__divsi3+0xd4>
 8000288:	0a03      	lsrs	r3, r0, #8
 800028a:	428b      	cmp	r3, r1
 800028c:	d344      	bcc.n	8000318 <__divsi3+0xa4>
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d328      	bcc.n	80002e6 <__divsi3+0x72>
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d30d      	bcc.n	80002b6 <__divsi3+0x42>
 800029a:	22ff      	movs	r2, #255	; 0xff
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	ba12      	rev	r2, r2
 80002a0:	0c03      	lsrs	r3, r0, #16
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d302      	bcc.n	80002ac <__divsi3+0x38>
 80002a6:	1212      	asrs	r2, r2, #8
 80002a8:	0209      	lsls	r1, r1, #8
 80002aa:	d065      	beq.n	8000378 <__divsi3+0x104>
 80002ac:	0b03      	lsrs	r3, r0, #12
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d319      	bcc.n	80002e6 <__divsi3+0x72>
 80002b2:	e000      	b.n	80002b6 <__divsi3+0x42>
 80002b4:	0a09      	lsrs	r1, r1, #8
 80002b6:	0bc3      	lsrs	r3, r0, #15
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x4c>
 80002bc:	03cb      	lsls	r3, r1, #15
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b83      	lsrs	r3, r0, #14
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x58>
 80002c8:	038b      	lsls	r3, r1, #14
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b43      	lsrs	r3, r0, #13
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x64>
 80002d4:	034b      	lsls	r3, r1, #13
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0b03      	lsrs	r3, r0, #12
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x70>
 80002e0:	030b      	lsls	r3, r1, #12
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0ac3      	lsrs	r3, r0, #11
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x7c>
 80002ec:	02cb      	lsls	r3, r1, #11
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a83      	lsrs	r3, r0, #10
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x88>
 80002f8:	028b      	lsls	r3, r1, #10
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a43      	lsrs	r3, r0, #9
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0x94>
 8000304:	024b      	lsls	r3, r1, #9
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	0a03      	lsrs	r3, r0, #8
 800030c:	428b      	cmp	r3, r1
 800030e:	d301      	bcc.n	8000314 <__divsi3+0xa0>
 8000310:	020b      	lsls	r3, r1, #8
 8000312:	1ac0      	subs	r0, r0, r3
 8000314:	4152      	adcs	r2, r2
 8000316:	d2cd      	bcs.n	80002b4 <__divsi3+0x40>
 8000318:	09c3      	lsrs	r3, r0, #7
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xae>
 800031e:	01cb      	lsls	r3, r1, #7
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0983      	lsrs	r3, r0, #6
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xba>
 800032a:	018b      	lsls	r3, r1, #6
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0943      	lsrs	r3, r0, #5
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xc6>
 8000336:	014b      	lsls	r3, r1, #5
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0903      	lsrs	r3, r0, #4
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xd2>
 8000342:	010b      	lsls	r3, r1, #4
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	08c3      	lsrs	r3, r0, #3
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xde>
 800034e:	00cb      	lsls	r3, r1, #3
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0883      	lsrs	r3, r0, #2
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xea>
 800035a:	008b      	lsls	r3, r1, #2
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	0843      	lsrs	r3, r0, #1
 8000362:	428b      	cmp	r3, r1
 8000364:	d301      	bcc.n	800036a <__divsi3+0xf6>
 8000366:	004b      	lsls	r3, r1, #1
 8000368:	1ac0      	subs	r0, r0, r3
 800036a:	4152      	adcs	r2, r2
 800036c:	1a41      	subs	r1, r0, r1
 800036e:	d200      	bcs.n	8000372 <__divsi3+0xfe>
 8000370:	4601      	mov	r1, r0
 8000372:	4152      	adcs	r2, r2
 8000374:	4610      	mov	r0, r2
 8000376:	4770      	bx	lr
 8000378:	e05d      	b.n	8000436 <__divsi3+0x1c2>
 800037a:	0fca      	lsrs	r2, r1, #31
 800037c:	d000      	beq.n	8000380 <__divsi3+0x10c>
 800037e:	4249      	negs	r1, r1
 8000380:	1003      	asrs	r3, r0, #32
 8000382:	d300      	bcc.n	8000386 <__divsi3+0x112>
 8000384:	4240      	negs	r0, r0
 8000386:	4053      	eors	r3, r2
 8000388:	2200      	movs	r2, #0
 800038a:	469c      	mov	ip, r3
 800038c:	0903      	lsrs	r3, r0, #4
 800038e:	428b      	cmp	r3, r1
 8000390:	d32d      	bcc.n	80003ee <__divsi3+0x17a>
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d312      	bcc.n	80003be <__divsi3+0x14a>
 8000398:	22fc      	movs	r2, #252	; 0xfc
 800039a:	0189      	lsls	r1, r1, #6
 800039c:	ba12      	rev	r2, r2
 800039e:	0a03      	lsrs	r3, r0, #8
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d30c      	bcc.n	80003be <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	1192      	asrs	r2, r2, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d308      	bcc.n	80003be <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	1192      	asrs	r2, r2, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d304      	bcc.n	80003be <__divsi3+0x14a>
 80003b4:	0189      	lsls	r1, r1, #6
 80003b6:	d03a      	beq.n	800042e <__divsi3+0x1ba>
 80003b8:	1192      	asrs	r2, r2, #6
 80003ba:	e000      	b.n	80003be <__divsi3+0x14a>
 80003bc:	0989      	lsrs	r1, r1, #6
 80003be:	09c3      	lsrs	r3, r0, #7
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x154>
 80003c4:	01cb      	lsls	r3, r1, #7
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0983      	lsrs	r3, r0, #6
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x160>
 80003d0:	018b      	lsls	r3, r1, #6
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0943      	lsrs	r3, r0, #5
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x16c>
 80003dc:	014b      	lsls	r3, r1, #5
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	0903      	lsrs	r3, r0, #4
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x178>
 80003e8:	010b      	lsls	r3, r1, #4
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	08c3      	lsrs	r3, r0, #3
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x184>
 80003f4:	00cb      	lsls	r3, r1, #3
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	0883      	lsrs	r3, r0, #2
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x190>
 8000400:	008b      	lsls	r3, r1, #2
 8000402:	1ac0      	subs	r0, r0, r3
 8000404:	4152      	adcs	r2, r2
 8000406:	d2d9      	bcs.n	80003bc <__divsi3+0x148>
 8000408:	0843      	lsrs	r3, r0, #1
 800040a:	428b      	cmp	r3, r1
 800040c:	d301      	bcc.n	8000412 <__divsi3+0x19e>
 800040e:	004b      	lsls	r3, r1, #1
 8000410:	1ac0      	subs	r0, r0, r3
 8000412:	4152      	adcs	r2, r2
 8000414:	1a41      	subs	r1, r0, r1
 8000416:	d200      	bcs.n	800041a <__divsi3+0x1a6>
 8000418:	4601      	mov	r1, r0
 800041a:	4663      	mov	r3, ip
 800041c:	4152      	adcs	r2, r2
 800041e:	105b      	asrs	r3, r3, #1
 8000420:	4610      	mov	r0, r2
 8000422:	d301      	bcc.n	8000428 <__divsi3+0x1b4>
 8000424:	4240      	negs	r0, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d500      	bpl.n	800042c <__divsi3+0x1b8>
 800042a:	4249      	negs	r1, r1
 800042c:	4770      	bx	lr
 800042e:	4663      	mov	r3, ip
 8000430:	105b      	asrs	r3, r3, #1
 8000432:	d300      	bcc.n	8000436 <__divsi3+0x1c2>
 8000434:	4240      	negs	r0, r0
 8000436:	b501      	push	{r0, lr}
 8000438:	2000      	movs	r0, #0
 800043a:	f000 f805 	bl	8000448 <__aeabi_idiv0>
 800043e:	bd02      	pop	{r1, pc}

08000440 <__aeabi_idivmod>:
 8000440:	2900      	cmp	r1, #0
 8000442:	d0f8      	beq.n	8000436 <__divsi3+0x1c2>
 8000444:	e716      	b.n	8000274 <__divsi3>
 8000446:	4770      	bx	lr

08000448 <__aeabi_idiv0>:
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdrcmple>:
 800044c:	4684      	mov	ip, r0
 800044e:	1c10      	adds	r0, r2, #0
 8000450:	4662      	mov	r2, ip
 8000452:	468c      	mov	ip, r1
 8000454:	1c19      	adds	r1, r3, #0
 8000456:	4663      	mov	r3, ip
 8000458:	e000      	b.n	800045c <__aeabi_cdcmpeq>
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_cdcmpeq>:
 800045c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800045e:	f000 fff5 	bl	800144c <__ledf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	d401      	bmi.n	800046a <__aeabi_cdcmpeq+0xe>
 8000466:	2100      	movs	r1, #0
 8000468:	42c8      	cmn	r0, r1
 800046a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800046c <__aeabi_dcmpeq>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff4f 	bl	8001310 <__eqdf2>
 8000472:	4240      	negs	r0, r0
 8000474:	3001      	adds	r0, #1
 8000476:	bd10      	pop	{r4, pc}

08000478 <__aeabi_dcmplt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 ffe7 	bl	800144c <__ledf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	db01      	blt.n	8000486 <__aeabi_dcmplt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmple>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f000 ffdd 	bl	800144c <__ledf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	dd01      	ble.n	800049a <__aeabi_dcmple+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_dcmpgt>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f000 ff6f 	bl	8001384 <__gedf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	dc01      	bgt.n	80004ae <__aeabi_dcmpgt+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_dcmpge>:
 80004b4:	b510      	push	{r4, lr}
 80004b6:	f000 ff65 	bl	8001384 <__gedf2>
 80004ba:	2800      	cmp	r0, #0
 80004bc:	da01      	bge.n	80004c2 <__aeabi_dcmpge+0xe>
 80004be:	2000      	movs	r0, #0
 80004c0:	bd10      	pop	{r4, pc}
 80004c2:	2001      	movs	r0, #1
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_uldivmod>:
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d111      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	d10f      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d100      	bne.n	80004d6 <__aeabi_uldivmod+0xe>
 80004d4:	2800      	cmp	r0, #0
 80004d6:	d002      	beq.n	80004de <__aeabi_uldivmod+0x16>
 80004d8:	2100      	movs	r1, #0
 80004da:	43c9      	mvns	r1, r1
 80004dc:	1c08      	adds	r0, r1, #0
 80004de:	b407      	push	{r0, r1, r2}
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <__aeabi_uldivmod+0x24>)
 80004e2:	a102      	add	r1, pc, #8	; (adr r1, 80004ec <__aeabi_uldivmod+0x24>)
 80004e4:	1840      	adds	r0, r0, r1
 80004e6:	9002      	str	r0, [sp, #8]
 80004e8:	bd03      	pop	{r0, r1, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	ffffff5d 	.word	0xffffff5d
 80004f0:	b403      	push	{r0, r1}
 80004f2:	4668      	mov	r0, sp
 80004f4:	b501      	push	{r0, lr}
 80004f6:	9802      	ldr	r0, [sp, #8]
 80004f8:	f000 f806 	bl	8000508 <__udivmoddi4>
 80004fc:	9b01      	ldr	r3, [sp, #4]
 80004fe:	469e      	mov	lr, r3
 8000500:	b002      	add	sp, #8
 8000502:	bc0c      	pop	{r2, r3}
 8000504:	4770      	bx	lr
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__udivmoddi4>:
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	4657      	mov	r7, sl
 800050c:	464e      	mov	r6, r9
 800050e:	4645      	mov	r5, r8
 8000510:	46de      	mov	lr, fp
 8000512:	b5e0      	push	{r5, r6, r7, lr}
 8000514:	0004      	movs	r4, r0
 8000516:	b083      	sub	sp, #12
 8000518:	000d      	movs	r5, r1
 800051a:	4692      	mov	sl, r2
 800051c:	4699      	mov	r9, r3
 800051e:	428b      	cmp	r3, r1
 8000520:	d82f      	bhi.n	8000582 <__udivmoddi4+0x7a>
 8000522:	d02c      	beq.n	800057e <__udivmoddi4+0x76>
 8000524:	4649      	mov	r1, r9
 8000526:	4650      	mov	r0, sl
 8000528:	f001 fe74 	bl	8002214 <__clzdi2>
 800052c:	0029      	movs	r1, r5
 800052e:	0006      	movs	r6, r0
 8000530:	0020      	movs	r0, r4
 8000532:	f001 fe6f 	bl	8002214 <__clzdi2>
 8000536:	1a33      	subs	r3, r6, r0
 8000538:	4698      	mov	r8, r3
 800053a:	3b20      	subs	r3, #32
 800053c:	469b      	mov	fp, r3
 800053e:	d500      	bpl.n	8000542 <__udivmoddi4+0x3a>
 8000540:	e074      	b.n	800062c <__udivmoddi4+0x124>
 8000542:	4653      	mov	r3, sl
 8000544:	465a      	mov	r2, fp
 8000546:	4093      	lsls	r3, r2
 8000548:	001f      	movs	r7, r3
 800054a:	4653      	mov	r3, sl
 800054c:	4642      	mov	r2, r8
 800054e:	4093      	lsls	r3, r2
 8000550:	001e      	movs	r6, r3
 8000552:	42af      	cmp	r7, r5
 8000554:	d829      	bhi.n	80005aa <__udivmoddi4+0xa2>
 8000556:	d026      	beq.n	80005a6 <__udivmoddi4+0x9e>
 8000558:	465b      	mov	r3, fp
 800055a:	1ba4      	subs	r4, r4, r6
 800055c:	41bd      	sbcs	r5, r7
 800055e:	2b00      	cmp	r3, #0
 8000560:	da00      	bge.n	8000564 <__udivmoddi4+0x5c>
 8000562:	e079      	b.n	8000658 <__udivmoddi4+0x150>
 8000564:	2200      	movs	r2, #0
 8000566:	2300      	movs	r3, #0
 8000568:	9200      	str	r2, [sp, #0]
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	2301      	movs	r3, #1
 800056e:	465a      	mov	r2, fp
 8000570:	4093      	lsls	r3, r2
 8000572:	9301      	str	r3, [sp, #4]
 8000574:	2301      	movs	r3, #1
 8000576:	4642      	mov	r2, r8
 8000578:	4093      	lsls	r3, r2
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	e019      	b.n	80005b2 <__udivmoddi4+0xaa>
 800057e:	4282      	cmp	r2, r0
 8000580:	d9d0      	bls.n	8000524 <__udivmoddi4+0x1c>
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	9200      	str	r2, [sp, #0]
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <__udivmoddi4+0x8c>
 8000590:	601c      	str	r4, [r3, #0]
 8000592:	605d      	str	r5, [r3, #4]
 8000594:	9800      	ldr	r0, [sp, #0]
 8000596:	9901      	ldr	r1, [sp, #4]
 8000598:	b003      	add	sp, #12
 800059a:	bc3c      	pop	{r2, r3, r4, r5}
 800059c:	4690      	mov	r8, r2
 800059e:	4699      	mov	r9, r3
 80005a0:	46a2      	mov	sl, r4
 80005a2:	46ab      	mov	fp, r5
 80005a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a6:	42a3      	cmp	r3, r4
 80005a8:	d9d6      	bls.n	8000558 <__udivmoddi4+0x50>
 80005aa:	2200      	movs	r2, #0
 80005ac:	2300      	movs	r3, #0
 80005ae:	9200      	str	r2, [sp, #0]
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	4643      	mov	r3, r8
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0e8      	beq.n	800058a <__udivmoddi4+0x82>
 80005b8:	07fb      	lsls	r3, r7, #31
 80005ba:	0872      	lsrs	r2, r6, #1
 80005bc:	431a      	orrs	r2, r3
 80005be:	4646      	mov	r6, r8
 80005c0:	087b      	lsrs	r3, r7, #1
 80005c2:	e00e      	b.n	80005e2 <__udivmoddi4+0xda>
 80005c4:	42ab      	cmp	r3, r5
 80005c6:	d101      	bne.n	80005cc <__udivmoddi4+0xc4>
 80005c8:	42a2      	cmp	r2, r4
 80005ca:	d80c      	bhi.n	80005e6 <__udivmoddi4+0xde>
 80005cc:	1aa4      	subs	r4, r4, r2
 80005ce:	419d      	sbcs	r5, r3
 80005d0:	2001      	movs	r0, #1
 80005d2:	1924      	adds	r4, r4, r4
 80005d4:	416d      	adcs	r5, r5
 80005d6:	2100      	movs	r1, #0
 80005d8:	3e01      	subs	r6, #1
 80005da:	1824      	adds	r4, r4, r0
 80005dc:	414d      	adcs	r5, r1
 80005de:	2e00      	cmp	r6, #0
 80005e0:	d006      	beq.n	80005f0 <__udivmoddi4+0xe8>
 80005e2:	42ab      	cmp	r3, r5
 80005e4:	d9ee      	bls.n	80005c4 <__udivmoddi4+0xbc>
 80005e6:	3e01      	subs	r6, #1
 80005e8:	1924      	adds	r4, r4, r4
 80005ea:	416d      	adcs	r5, r5
 80005ec:	2e00      	cmp	r6, #0
 80005ee:	d1f8      	bne.n	80005e2 <__udivmoddi4+0xda>
 80005f0:	465b      	mov	r3, fp
 80005f2:	9800      	ldr	r0, [sp, #0]
 80005f4:	9901      	ldr	r1, [sp, #4]
 80005f6:	1900      	adds	r0, r0, r4
 80005f8:	4169      	adcs	r1, r5
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	db22      	blt.n	8000644 <__udivmoddi4+0x13c>
 80005fe:	002b      	movs	r3, r5
 8000600:	465a      	mov	r2, fp
 8000602:	40d3      	lsrs	r3, r2
 8000604:	002a      	movs	r2, r5
 8000606:	4644      	mov	r4, r8
 8000608:	40e2      	lsrs	r2, r4
 800060a:	001c      	movs	r4, r3
 800060c:	465b      	mov	r3, fp
 800060e:	0015      	movs	r5, r2
 8000610:	2b00      	cmp	r3, #0
 8000612:	db2c      	blt.n	800066e <__udivmoddi4+0x166>
 8000614:	0026      	movs	r6, r4
 8000616:	409e      	lsls	r6, r3
 8000618:	0033      	movs	r3, r6
 800061a:	0026      	movs	r6, r4
 800061c:	4647      	mov	r7, r8
 800061e:	40be      	lsls	r6, r7
 8000620:	0032      	movs	r2, r6
 8000622:	1a80      	subs	r0, r0, r2
 8000624:	4199      	sbcs	r1, r3
 8000626:	9000      	str	r0, [sp, #0]
 8000628:	9101      	str	r1, [sp, #4]
 800062a:	e7ae      	b.n	800058a <__udivmoddi4+0x82>
 800062c:	4642      	mov	r2, r8
 800062e:	2320      	movs	r3, #32
 8000630:	1a9b      	subs	r3, r3, r2
 8000632:	4652      	mov	r2, sl
 8000634:	40da      	lsrs	r2, r3
 8000636:	4641      	mov	r1, r8
 8000638:	0013      	movs	r3, r2
 800063a:	464a      	mov	r2, r9
 800063c:	408a      	lsls	r2, r1
 800063e:	0017      	movs	r7, r2
 8000640:	431f      	orrs	r7, r3
 8000642:	e782      	b.n	800054a <__udivmoddi4+0x42>
 8000644:	4642      	mov	r2, r8
 8000646:	2320      	movs	r3, #32
 8000648:	1a9b      	subs	r3, r3, r2
 800064a:	002a      	movs	r2, r5
 800064c:	4646      	mov	r6, r8
 800064e:	409a      	lsls	r2, r3
 8000650:	0023      	movs	r3, r4
 8000652:	40f3      	lsrs	r3, r6
 8000654:	4313      	orrs	r3, r2
 8000656:	e7d5      	b.n	8000604 <__udivmoddi4+0xfc>
 8000658:	4642      	mov	r2, r8
 800065a:	2320      	movs	r3, #32
 800065c:	2100      	movs	r1, #0
 800065e:	1a9b      	subs	r3, r3, r2
 8000660:	2200      	movs	r2, #0
 8000662:	9100      	str	r1, [sp, #0]
 8000664:	9201      	str	r2, [sp, #4]
 8000666:	2201      	movs	r2, #1
 8000668:	40da      	lsrs	r2, r3
 800066a:	9201      	str	r2, [sp, #4]
 800066c:	e782      	b.n	8000574 <__udivmoddi4+0x6c>
 800066e:	4642      	mov	r2, r8
 8000670:	2320      	movs	r3, #32
 8000672:	0026      	movs	r6, r4
 8000674:	1a9b      	subs	r3, r3, r2
 8000676:	40de      	lsrs	r6, r3
 8000678:	002f      	movs	r7, r5
 800067a:	46b4      	mov	ip, r6
 800067c:	4097      	lsls	r7, r2
 800067e:	4666      	mov	r6, ip
 8000680:	003b      	movs	r3, r7
 8000682:	4333      	orrs	r3, r6
 8000684:	e7c9      	b.n	800061a <__udivmoddi4+0x112>
 8000686:	46c0      	nop			; (mov r8, r8)

08000688 <__aeabi_dadd>:
 8000688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800068a:	4645      	mov	r5, r8
 800068c:	46de      	mov	lr, fp
 800068e:	4657      	mov	r7, sl
 8000690:	464e      	mov	r6, r9
 8000692:	030c      	lsls	r4, r1, #12
 8000694:	b5e0      	push	{r5, r6, r7, lr}
 8000696:	004e      	lsls	r6, r1, #1
 8000698:	0fc9      	lsrs	r1, r1, #31
 800069a:	4688      	mov	r8, r1
 800069c:	000d      	movs	r5, r1
 800069e:	0a61      	lsrs	r1, r4, #9
 80006a0:	0f44      	lsrs	r4, r0, #29
 80006a2:	430c      	orrs	r4, r1
 80006a4:	00c7      	lsls	r7, r0, #3
 80006a6:	0319      	lsls	r1, r3, #12
 80006a8:	0058      	lsls	r0, r3, #1
 80006aa:	0fdb      	lsrs	r3, r3, #31
 80006ac:	469b      	mov	fp, r3
 80006ae:	0a4b      	lsrs	r3, r1, #9
 80006b0:	0f51      	lsrs	r1, r2, #29
 80006b2:	430b      	orrs	r3, r1
 80006b4:	0d76      	lsrs	r6, r6, #21
 80006b6:	0d40      	lsrs	r0, r0, #21
 80006b8:	0019      	movs	r1, r3
 80006ba:	00d2      	lsls	r2, r2, #3
 80006bc:	45d8      	cmp	r8, fp
 80006be:	d100      	bne.n	80006c2 <__aeabi_dadd+0x3a>
 80006c0:	e0ae      	b.n	8000820 <__aeabi_dadd+0x198>
 80006c2:	1a35      	subs	r5, r6, r0
 80006c4:	2d00      	cmp	r5, #0
 80006c6:	dc00      	bgt.n	80006ca <__aeabi_dadd+0x42>
 80006c8:	e0f6      	b.n	80008b8 <__aeabi_dadd+0x230>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	d10f      	bne.n	80006ee <__aeabi_dadd+0x66>
 80006ce:	4313      	orrs	r3, r2
 80006d0:	d100      	bne.n	80006d4 <__aeabi_dadd+0x4c>
 80006d2:	e0db      	b.n	800088c <__aeabi_dadd+0x204>
 80006d4:	1e6b      	subs	r3, r5, #1
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d000      	beq.n	80006dc <__aeabi_dadd+0x54>
 80006da:	e137      	b.n	800094c <__aeabi_dadd+0x2c4>
 80006dc:	1aba      	subs	r2, r7, r2
 80006de:	4297      	cmp	r7, r2
 80006e0:	41bf      	sbcs	r7, r7
 80006e2:	1a64      	subs	r4, r4, r1
 80006e4:	427f      	negs	r7, r7
 80006e6:	1be4      	subs	r4, r4, r7
 80006e8:	2601      	movs	r6, #1
 80006ea:	0017      	movs	r7, r2
 80006ec:	e024      	b.n	8000738 <__aeabi_dadd+0xb0>
 80006ee:	4bc6      	ldr	r3, [pc, #792]	; (8000a08 <__aeabi_dadd+0x380>)
 80006f0:	429e      	cmp	r6, r3
 80006f2:	d04d      	beq.n	8000790 <__aeabi_dadd+0x108>
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	041b      	lsls	r3, r3, #16
 80006f8:	4319      	orrs	r1, r3
 80006fa:	2d38      	cmp	r5, #56	; 0x38
 80006fc:	dd00      	ble.n	8000700 <__aeabi_dadd+0x78>
 80006fe:	e107      	b.n	8000910 <__aeabi_dadd+0x288>
 8000700:	2d1f      	cmp	r5, #31
 8000702:	dd00      	ble.n	8000706 <__aeabi_dadd+0x7e>
 8000704:	e138      	b.n	8000978 <__aeabi_dadd+0x2f0>
 8000706:	2020      	movs	r0, #32
 8000708:	1b43      	subs	r3, r0, r5
 800070a:	469a      	mov	sl, r3
 800070c:	000b      	movs	r3, r1
 800070e:	4650      	mov	r0, sl
 8000710:	4083      	lsls	r3, r0
 8000712:	4699      	mov	r9, r3
 8000714:	0013      	movs	r3, r2
 8000716:	4648      	mov	r0, r9
 8000718:	40eb      	lsrs	r3, r5
 800071a:	4318      	orrs	r0, r3
 800071c:	0003      	movs	r3, r0
 800071e:	4650      	mov	r0, sl
 8000720:	4082      	lsls	r2, r0
 8000722:	1e50      	subs	r0, r2, #1
 8000724:	4182      	sbcs	r2, r0
 8000726:	40e9      	lsrs	r1, r5
 8000728:	431a      	orrs	r2, r3
 800072a:	1aba      	subs	r2, r7, r2
 800072c:	1a61      	subs	r1, r4, r1
 800072e:	4297      	cmp	r7, r2
 8000730:	41a4      	sbcs	r4, r4
 8000732:	0017      	movs	r7, r2
 8000734:	4264      	negs	r4, r4
 8000736:	1b0c      	subs	r4, r1, r4
 8000738:	0223      	lsls	r3, r4, #8
 800073a:	d562      	bpl.n	8000802 <__aeabi_dadd+0x17a>
 800073c:	0264      	lsls	r4, r4, #9
 800073e:	0a65      	lsrs	r5, r4, #9
 8000740:	2d00      	cmp	r5, #0
 8000742:	d100      	bne.n	8000746 <__aeabi_dadd+0xbe>
 8000744:	e0df      	b.n	8000906 <__aeabi_dadd+0x27e>
 8000746:	0028      	movs	r0, r5
 8000748:	f001 fd46 	bl	80021d8 <__clzsi2>
 800074c:	0003      	movs	r3, r0
 800074e:	3b08      	subs	r3, #8
 8000750:	2b1f      	cmp	r3, #31
 8000752:	dd00      	ble.n	8000756 <__aeabi_dadd+0xce>
 8000754:	e0d2      	b.n	80008fc <__aeabi_dadd+0x274>
 8000756:	2220      	movs	r2, #32
 8000758:	003c      	movs	r4, r7
 800075a:	1ad2      	subs	r2, r2, r3
 800075c:	409d      	lsls	r5, r3
 800075e:	40d4      	lsrs	r4, r2
 8000760:	409f      	lsls	r7, r3
 8000762:	4325      	orrs	r5, r4
 8000764:	429e      	cmp	r6, r3
 8000766:	dd00      	ble.n	800076a <__aeabi_dadd+0xe2>
 8000768:	e0c4      	b.n	80008f4 <__aeabi_dadd+0x26c>
 800076a:	1b9e      	subs	r6, r3, r6
 800076c:	1c73      	adds	r3, r6, #1
 800076e:	2b1f      	cmp	r3, #31
 8000770:	dd00      	ble.n	8000774 <__aeabi_dadd+0xec>
 8000772:	e0f1      	b.n	8000958 <__aeabi_dadd+0x2d0>
 8000774:	2220      	movs	r2, #32
 8000776:	0038      	movs	r0, r7
 8000778:	0029      	movs	r1, r5
 800077a:	1ad2      	subs	r2, r2, r3
 800077c:	40d8      	lsrs	r0, r3
 800077e:	4091      	lsls	r1, r2
 8000780:	4097      	lsls	r7, r2
 8000782:	002c      	movs	r4, r5
 8000784:	4301      	orrs	r1, r0
 8000786:	1e78      	subs	r0, r7, #1
 8000788:	4187      	sbcs	r7, r0
 800078a:	40dc      	lsrs	r4, r3
 800078c:	2600      	movs	r6, #0
 800078e:	430f      	orrs	r7, r1
 8000790:	077b      	lsls	r3, r7, #29
 8000792:	d009      	beq.n	80007a8 <__aeabi_dadd+0x120>
 8000794:	230f      	movs	r3, #15
 8000796:	403b      	ands	r3, r7
 8000798:	2b04      	cmp	r3, #4
 800079a:	d005      	beq.n	80007a8 <__aeabi_dadd+0x120>
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	42bb      	cmp	r3, r7
 80007a0:	41bf      	sbcs	r7, r7
 80007a2:	427f      	negs	r7, r7
 80007a4:	19e4      	adds	r4, r4, r7
 80007a6:	001f      	movs	r7, r3
 80007a8:	0223      	lsls	r3, r4, #8
 80007aa:	d52c      	bpl.n	8000806 <__aeabi_dadd+0x17e>
 80007ac:	4b96      	ldr	r3, [pc, #600]	; (8000a08 <__aeabi_dadd+0x380>)
 80007ae:	3601      	adds	r6, #1
 80007b0:	429e      	cmp	r6, r3
 80007b2:	d100      	bne.n	80007b6 <__aeabi_dadd+0x12e>
 80007b4:	e09a      	b.n	80008ec <__aeabi_dadd+0x264>
 80007b6:	4645      	mov	r5, r8
 80007b8:	4b94      	ldr	r3, [pc, #592]	; (8000a0c <__aeabi_dadd+0x384>)
 80007ba:	08ff      	lsrs	r7, r7, #3
 80007bc:	401c      	ands	r4, r3
 80007be:	0760      	lsls	r0, r4, #29
 80007c0:	0576      	lsls	r6, r6, #21
 80007c2:	0264      	lsls	r4, r4, #9
 80007c4:	4307      	orrs	r7, r0
 80007c6:	0b24      	lsrs	r4, r4, #12
 80007c8:	0d76      	lsrs	r6, r6, #21
 80007ca:	2100      	movs	r1, #0
 80007cc:	0324      	lsls	r4, r4, #12
 80007ce:	0b23      	lsrs	r3, r4, #12
 80007d0:	0d0c      	lsrs	r4, r1, #20
 80007d2:	4a8f      	ldr	r2, [pc, #572]	; (8000a10 <__aeabi_dadd+0x388>)
 80007d4:	0524      	lsls	r4, r4, #20
 80007d6:	431c      	orrs	r4, r3
 80007d8:	4014      	ands	r4, r2
 80007da:	0533      	lsls	r3, r6, #20
 80007dc:	4323      	orrs	r3, r4
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	07ed      	lsls	r5, r5, #31
 80007e2:	085b      	lsrs	r3, r3, #1
 80007e4:	432b      	orrs	r3, r5
 80007e6:	0038      	movs	r0, r7
 80007e8:	0019      	movs	r1, r3
 80007ea:	bc3c      	pop	{r2, r3, r4, r5}
 80007ec:	4690      	mov	r8, r2
 80007ee:	4699      	mov	r9, r3
 80007f0:	46a2      	mov	sl, r4
 80007f2:	46ab      	mov	fp, r5
 80007f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007f6:	4664      	mov	r4, ip
 80007f8:	4304      	orrs	r4, r0
 80007fa:	d100      	bne.n	80007fe <__aeabi_dadd+0x176>
 80007fc:	e211      	b.n	8000c22 <__aeabi_dadd+0x59a>
 80007fe:	0004      	movs	r4, r0
 8000800:	4667      	mov	r7, ip
 8000802:	077b      	lsls	r3, r7, #29
 8000804:	d1c6      	bne.n	8000794 <__aeabi_dadd+0x10c>
 8000806:	4645      	mov	r5, r8
 8000808:	0760      	lsls	r0, r4, #29
 800080a:	08ff      	lsrs	r7, r7, #3
 800080c:	4307      	orrs	r7, r0
 800080e:	08e4      	lsrs	r4, r4, #3
 8000810:	4b7d      	ldr	r3, [pc, #500]	; (8000a08 <__aeabi_dadd+0x380>)
 8000812:	429e      	cmp	r6, r3
 8000814:	d030      	beq.n	8000878 <__aeabi_dadd+0x1f0>
 8000816:	0324      	lsls	r4, r4, #12
 8000818:	0576      	lsls	r6, r6, #21
 800081a:	0b24      	lsrs	r4, r4, #12
 800081c:	0d76      	lsrs	r6, r6, #21
 800081e:	e7d4      	b.n	80007ca <__aeabi_dadd+0x142>
 8000820:	1a33      	subs	r3, r6, r0
 8000822:	469a      	mov	sl, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	dd78      	ble.n	800091a <__aeabi_dadd+0x292>
 8000828:	2800      	cmp	r0, #0
 800082a:	d031      	beq.n	8000890 <__aeabi_dadd+0x208>
 800082c:	4876      	ldr	r0, [pc, #472]	; (8000a08 <__aeabi_dadd+0x380>)
 800082e:	4286      	cmp	r6, r0
 8000830:	d0ae      	beq.n	8000790 <__aeabi_dadd+0x108>
 8000832:	2080      	movs	r0, #128	; 0x80
 8000834:	0400      	lsls	r0, r0, #16
 8000836:	4301      	orrs	r1, r0
 8000838:	4653      	mov	r3, sl
 800083a:	2b38      	cmp	r3, #56	; 0x38
 800083c:	dc00      	bgt.n	8000840 <__aeabi_dadd+0x1b8>
 800083e:	e0e9      	b.n	8000a14 <__aeabi_dadd+0x38c>
 8000840:	430a      	orrs	r2, r1
 8000842:	1e51      	subs	r1, r2, #1
 8000844:	418a      	sbcs	r2, r1
 8000846:	2100      	movs	r1, #0
 8000848:	19d2      	adds	r2, r2, r7
 800084a:	42ba      	cmp	r2, r7
 800084c:	41bf      	sbcs	r7, r7
 800084e:	1909      	adds	r1, r1, r4
 8000850:	427c      	negs	r4, r7
 8000852:	0017      	movs	r7, r2
 8000854:	190c      	adds	r4, r1, r4
 8000856:	0223      	lsls	r3, r4, #8
 8000858:	d5d3      	bpl.n	8000802 <__aeabi_dadd+0x17a>
 800085a:	4b6b      	ldr	r3, [pc, #428]	; (8000a08 <__aeabi_dadd+0x380>)
 800085c:	3601      	adds	r6, #1
 800085e:	429e      	cmp	r6, r3
 8000860:	d100      	bne.n	8000864 <__aeabi_dadd+0x1dc>
 8000862:	e13a      	b.n	8000ada <__aeabi_dadd+0x452>
 8000864:	2001      	movs	r0, #1
 8000866:	4b69      	ldr	r3, [pc, #420]	; (8000a0c <__aeabi_dadd+0x384>)
 8000868:	401c      	ands	r4, r3
 800086a:	087b      	lsrs	r3, r7, #1
 800086c:	4007      	ands	r7, r0
 800086e:	431f      	orrs	r7, r3
 8000870:	07e0      	lsls	r0, r4, #31
 8000872:	4307      	orrs	r7, r0
 8000874:	0864      	lsrs	r4, r4, #1
 8000876:	e78b      	b.n	8000790 <__aeabi_dadd+0x108>
 8000878:	0023      	movs	r3, r4
 800087a:	433b      	orrs	r3, r7
 800087c:	d100      	bne.n	8000880 <__aeabi_dadd+0x1f8>
 800087e:	e1cb      	b.n	8000c18 <__aeabi_dadd+0x590>
 8000880:	2280      	movs	r2, #128	; 0x80
 8000882:	0312      	lsls	r2, r2, #12
 8000884:	4314      	orrs	r4, r2
 8000886:	0324      	lsls	r4, r4, #12
 8000888:	0b24      	lsrs	r4, r4, #12
 800088a:	e79e      	b.n	80007ca <__aeabi_dadd+0x142>
 800088c:	002e      	movs	r6, r5
 800088e:	e77f      	b.n	8000790 <__aeabi_dadd+0x108>
 8000890:	0008      	movs	r0, r1
 8000892:	4310      	orrs	r0, r2
 8000894:	d100      	bne.n	8000898 <__aeabi_dadd+0x210>
 8000896:	e0b4      	b.n	8000a02 <__aeabi_dadd+0x37a>
 8000898:	1e58      	subs	r0, r3, #1
 800089a:	2800      	cmp	r0, #0
 800089c:	d000      	beq.n	80008a0 <__aeabi_dadd+0x218>
 800089e:	e0de      	b.n	8000a5e <__aeabi_dadd+0x3d6>
 80008a0:	18ba      	adds	r2, r7, r2
 80008a2:	42ba      	cmp	r2, r7
 80008a4:	419b      	sbcs	r3, r3
 80008a6:	1864      	adds	r4, r4, r1
 80008a8:	425b      	negs	r3, r3
 80008aa:	18e4      	adds	r4, r4, r3
 80008ac:	0017      	movs	r7, r2
 80008ae:	2601      	movs	r6, #1
 80008b0:	0223      	lsls	r3, r4, #8
 80008b2:	d5a6      	bpl.n	8000802 <__aeabi_dadd+0x17a>
 80008b4:	2602      	movs	r6, #2
 80008b6:	e7d5      	b.n	8000864 <__aeabi_dadd+0x1dc>
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d16e      	bne.n	800099a <__aeabi_dadd+0x312>
 80008bc:	1c70      	adds	r0, r6, #1
 80008be:	0540      	lsls	r0, r0, #21
 80008c0:	0d40      	lsrs	r0, r0, #21
 80008c2:	2801      	cmp	r0, #1
 80008c4:	dc00      	bgt.n	80008c8 <__aeabi_dadd+0x240>
 80008c6:	e0f9      	b.n	8000abc <__aeabi_dadd+0x434>
 80008c8:	1ab8      	subs	r0, r7, r2
 80008ca:	4684      	mov	ip, r0
 80008cc:	4287      	cmp	r7, r0
 80008ce:	4180      	sbcs	r0, r0
 80008d0:	1ae5      	subs	r5, r4, r3
 80008d2:	4240      	negs	r0, r0
 80008d4:	1a2d      	subs	r5, r5, r0
 80008d6:	0228      	lsls	r0, r5, #8
 80008d8:	d400      	bmi.n	80008dc <__aeabi_dadd+0x254>
 80008da:	e089      	b.n	80009f0 <__aeabi_dadd+0x368>
 80008dc:	1bd7      	subs	r7, r2, r7
 80008de:	42ba      	cmp	r2, r7
 80008e0:	4192      	sbcs	r2, r2
 80008e2:	1b1c      	subs	r4, r3, r4
 80008e4:	4252      	negs	r2, r2
 80008e6:	1aa5      	subs	r5, r4, r2
 80008e8:	46d8      	mov	r8, fp
 80008ea:	e729      	b.n	8000740 <__aeabi_dadd+0xb8>
 80008ec:	4645      	mov	r5, r8
 80008ee:	2400      	movs	r4, #0
 80008f0:	2700      	movs	r7, #0
 80008f2:	e76a      	b.n	80007ca <__aeabi_dadd+0x142>
 80008f4:	4c45      	ldr	r4, [pc, #276]	; (8000a0c <__aeabi_dadd+0x384>)
 80008f6:	1af6      	subs	r6, r6, r3
 80008f8:	402c      	ands	r4, r5
 80008fa:	e749      	b.n	8000790 <__aeabi_dadd+0x108>
 80008fc:	003d      	movs	r5, r7
 80008fe:	3828      	subs	r0, #40	; 0x28
 8000900:	4085      	lsls	r5, r0
 8000902:	2700      	movs	r7, #0
 8000904:	e72e      	b.n	8000764 <__aeabi_dadd+0xdc>
 8000906:	0038      	movs	r0, r7
 8000908:	f001 fc66 	bl	80021d8 <__clzsi2>
 800090c:	3020      	adds	r0, #32
 800090e:	e71d      	b.n	800074c <__aeabi_dadd+0xc4>
 8000910:	430a      	orrs	r2, r1
 8000912:	1e51      	subs	r1, r2, #1
 8000914:	418a      	sbcs	r2, r1
 8000916:	2100      	movs	r1, #0
 8000918:	e707      	b.n	800072a <__aeabi_dadd+0xa2>
 800091a:	2b00      	cmp	r3, #0
 800091c:	d000      	beq.n	8000920 <__aeabi_dadd+0x298>
 800091e:	e0f3      	b.n	8000b08 <__aeabi_dadd+0x480>
 8000920:	1c70      	adds	r0, r6, #1
 8000922:	0543      	lsls	r3, r0, #21
 8000924:	0d5b      	lsrs	r3, r3, #21
 8000926:	2b01      	cmp	r3, #1
 8000928:	dc00      	bgt.n	800092c <__aeabi_dadd+0x2a4>
 800092a:	e0ad      	b.n	8000a88 <__aeabi_dadd+0x400>
 800092c:	4b36      	ldr	r3, [pc, #216]	; (8000a08 <__aeabi_dadd+0x380>)
 800092e:	4298      	cmp	r0, r3
 8000930:	d100      	bne.n	8000934 <__aeabi_dadd+0x2ac>
 8000932:	e0d1      	b.n	8000ad8 <__aeabi_dadd+0x450>
 8000934:	18ba      	adds	r2, r7, r2
 8000936:	42ba      	cmp	r2, r7
 8000938:	41bf      	sbcs	r7, r7
 800093a:	1864      	adds	r4, r4, r1
 800093c:	427f      	negs	r7, r7
 800093e:	19e4      	adds	r4, r4, r7
 8000940:	07e7      	lsls	r7, r4, #31
 8000942:	0852      	lsrs	r2, r2, #1
 8000944:	4317      	orrs	r7, r2
 8000946:	0864      	lsrs	r4, r4, #1
 8000948:	0006      	movs	r6, r0
 800094a:	e721      	b.n	8000790 <__aeabi_dadd+0x108>
 800094c:	482e      	ldr	r0, [pc, #184]	; (8000a08 <__aeabi_dadd+0x380>)
 800094e:	4285      	cmp	r5, r0
 8000950:	d100      	bne.n	8000954 <__aeabi_dadd+0x2cc>
 8000952:	e093      	b.n	8000a7c <__aeabi_dadd+0x3f4>
 8000954:	001d      	movs	r5, r3
 8000956:	e6d0      	b.n	80006fa <__aeabi_dadd+0x72>
 8000958:	0029      	movs	r1, r5
 800095a:	3e1f      	subs	r6, #31
 800095c:	40f1      	lsrs	r1, r6
 800095e:	2b20      	cmp	r3, #32
 8000960:	d100      	bne.n	8000964 <__aeabi_dadd+0x2dc>
 8000962:	e08d      	b.n	8000a80 <__aeabi_dadd+0x3f8>
 8000964:	2240      	movs	r2, #64	; 0x40
 8000966:	1ad3      	subs	r3, r2, r3
 8000968:	409d      	lsls	r5, r3
 800096a:	432f      	orrs	r7, r5
 800096c:	1e7d      	subs	r5, r7, #1
 800096e:	41af      	sbcs	r7, r5
 8000970:	2400      	movs	r4, #0
 8000972:	430f      	orrs	r7, r1
 8000974:	2600      	movs	r6, #0
 8000976:	e744      	b.n	8000802 <__aeabi_dadd+0x17a>
 8000978:	002b      	movs	r3, r5
 800097a:	0008      	movs	r0, r1
 800097c:	3b20      	subs	r3, #32
 800097e:	40d8      	lsrs	r0, r3
 8000980:	0003      	movs	r3, r0
 8000982:	2d20      	cmp	r5, #32
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x300>
 8000986:	e07d      	b.n	8000a84 <__aeabi_dadd+0x3fc>
 8000988:	2040      	movs	r0, #64	; 0x40
 800098a:	1b45      	subs	r5, r0, r5
 800098c:	40a9      	lsls	r1, r5
 800098e:	430a      	orrs	r2, r1
 8000990:	1e51      	subs	r1, r2, #1
 8000992:	418a      	sbcs	r2, r1
 8000994:	2100      	movs	r1, #0
 8000996:	431a      	orrs	r2, r3
 8000998:	e6c7      	b.n	800072a <__aeabi_dadd+0xa2>
 800099a:	2e00      	cmp	r6, #0
 800099c:	d050      	beq.n	8000a40 <__aeabi_dadd+0x3b8>
 800099e:	4e1a      	ldr	r6, [pc, #104]	; (8000a08 <__aeabi_dadd+0x380>)
 80009a0:	42b0      	cmp	r0, r6
 80009a2:	d057      	beq.n	8000a54 <__aeabi_dadd+0x3cc>
 80009a4:	2680      	movs	r6, #128	; 0x80
 80009a6:	426b      	negs	r3, r5
 80009a8:	4699      	mov	r9, r3
 80009aa:	0436      	lsls	r6, r6, #16
 80009ac:	4334      	orrs	r4, r6
 80009ae:	464b      	mov	r3, r9
 80009b0:	2b38      	cmp	r3, #56	; 0x38
 80009b2:	dd00      	ble.n	80009b6 <__aeabi_dadd+0x32e>
 80009b4:	e0d6      	b.n	8000b64 <__aeabi_dadd+0x4dc>
 80009b6:	2b1f      	cmp	r3, #31
 80009b8:	dd00      	ble.n	80009bc <__aeabi_dadd+0x334>
 80009ba:	e135      	b.n	8000c28 <__aeabi_dadd+0x5a0>
 80009bc:	2620      	movs	r6, #32
 80009be:	1af5      	subs	r5, r6, r3
 80009c0:	0026      	movs	r6, r4
 80009c2:	40ae      	lsls	r6, r5
 80009c4:	46b2      	mov	sl, r6
 80009c6:	003e      	movs	r6, r7
 80009c8:	40de      	lsrs	r6, r3
 80009ca:	46ac      	mov	ip, r5
 80009cc:	0035      	movs	r5, r6
 80009ce:	4656      	mov	r6, sl
 80009d0:	432e      	orrs	r6, r5
 80009d2:	4665      	mov	r5, ip
 80009d4:	40af      	lsls	r7, r5
 80009d6:	1e7d      	subs	r5, r7, #1
 80009d8:	41af      	sbcs	r7, r5
 80009da:	40dc      	lsrs	r4, r3
 80009dc:	4337      	orrs	r7, r6
 80009de:	1bd7      	subs	r7, r2, r7
 80009e0:	42ba      	cmp	r2, r7
 80009e2:	4192      	sbcs	r2, r2
 80009e4:	1b0c      	subs	r4, r1, r4
 80009e6:	4252      	negs	r2, r2
 80009e8:	1aa4      	subs	r4, r4, r2
 80009ea:	0006      	movs	r6, r0
 80009ec:	46d8      	mov	r8, fp
 80009ee:	e6a3      	b.n	8000738 <__aeabi_dadd+0xb0>
 80009f0:	4664      	mov	r4, ip
 80009f2:	4667      	mov	r7, ip
 80009f4:	432c      	orrs	r4, r5
 80009f6:	d000      	beq.n	80009fa <__aeabi_dadd+0x372>
 80009f8:	e6a2      	b.n	8000740 <__aeabi_dadd+0xb8>
 80009fa:	2500      	movs	r5, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	2700      	movs	r7, #0
 8000a00:	e706      	b.n	8000810 <__aeabi_dadd+0x188>
 8000a02:	001e      	movs	r6, r3
 8000a04:	e6c4      	b.n	8000790 <__aeabi_dadd+0x108>
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	000007ff 	.word	0x000007ff
 8000a0c:	ff7fffff 	.word	0xff7fffff
 8000a10:	800fffff 	.word	0x800fffff
 8000a14:	2b1f      	cmp	r3, #31
 8000a16:	dc63      	bgt.n	8000ae0 <__aeabi_dadd+0x458>
 8000a18:	2020      	movs	r0, #32
 8000a1a:	1ac3      	subs	r3, r0, r3
 8000a1c:	0008      	movs	r0, r1
 8000a1e:	4098      	lsls	r0, r3
 8000a20:	469c      	mov	ip, r3
 8000a22:	4683      	mov	fp, r0
 8000a24:	4653      	mov	r3, sl
 8000a26:	0010      	movs	r0, r2
 8000a28:	40d8      	lsrs	r0, r3
 8000a2a:	0003      	movs	r3, r0
 8000a2c:	4658      	mov	r0, fp
 8000a2e:	4318      	orrs	r0, r3
 8000a30:	4663      	mov	r3, ip
 8000a32:	409a      	lsls	r2, r3
 8000a34:	1e53      	subs	r3, r2, #1
 8000a36:	419a      	sbcs	r2, r3
 8000a38:	4653      	mov	r3, sl
 8000a3a:	4302      	orrs	r2, r0
 8000a3c:	40d9      	lsrs	r1, r3
 8000a3e:	e703      	b.n	8000848 <__aeabi_dadd+0x1c0>
 8000a40:	0026      	movs	r6, r4
 8000a42:	433e      	orrs	r6, r7
 8000a44:	d006      	beq.n	8000a54 <__aeabi_dadd+0x3cc>
 8000a46:	43eb      	mvns	r3, r5
 8000a48:	4699      	mov	r9, r3
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d0c7      	beq.n	80009de <__aeabi_dadd+0x356>
 8000a4e:	4e94      	ldr	r6, [pc, #592]	; (8000ca0 <__aeabi_dadd+0x618>)
 8000a50:	42b0      	cmp	r0, r6
 8000a52:	d1ac      	bne.n	80009ae <__aeabi_dadd+0x326>
 8000a54:	000c      	movs	r4, r1
 8000a56:	0017      	movs	r7, r2
 8000a58:	0006      	movs	r6, r0
 8000a5a:	46d8      	mov	r8, fp
 8000a5c:	e698      	b.n	8000790 <__aeabi_dadd+0x108>
 8000a5e:	4b90      	ldr	r3, [pc, #576]	; (8000ca0 <__aeabi_dadd+0x618>)
 8000a60:	459a      	cmp	sl, r3
 8000a62:	d00b      	beq.n	8000a7c <__aeabi_dadd+0x3f4>
 8000a64:	4682      	mov	sl, r0
 8000a66:	e6e7      	b.n	8000838 <__aeabi_dadd+0x1b0>
 8000a68:	2800      	cmp	r0, #0
 8000a6a:	d000      	beq.n	8000a6e <__aeabi_dadd+0x3e6>
 8000a6c:	e09e      	b.n	8000bac <__aeabi_dadd+0x524>
 8000a6e:	0018      	movs	r0, r3
 8000a70:	4310      	orrs	r0, r2
 8000a72:	d100      	bne.n	8000a76 <__aeabi_dadd+0x3ee>
 8000a74:	e0e9      	b.n	8000c4a <__aeabi_dadd+0x5c2>
 8000a76:	001c      	movs	r4, r3
 8000a78:	0017      	movs	r7, r2
 8000a7a:	46d8      	mov	r8, fp
 8000a7c:	4e88      	ldr	r6, [pc, #544]	; (8000ca0 <__aeabi_dadd+0x618>)
 8000a7e:	e687      	b.n	8000790 <__aeabi_dadd+0x108>
 8000a80:	2500      	movs	r5, #0
 8000a82:	e772      	b.n	800096a <__aeabi_dadd+0x2e2>
 8000a84:	2100      	movs	r1, #0
 8000a86:	e782      	b.n	800098e <__aeabi_dadd+0x306>
 8000a88:	0023      	movs	r3, r4
 8000a8a:	433b      	orrs	r3, r7
 8000a8c:	2e00      	cmp	r6, #0
 8000a8e:	d000      	beq.n	8000a92 <__aeabi_dadd+0x40a>
 8000a90:	e0ab      	b.n	8000bea <__aeabi_dadd+0x562>
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d100      	bne.n	8000a98 <__aeabi_dadd+0x410>
 8000a96:	e0e7      	b.n	8000c68 <__aeabi_dadd+0x5e0>
 8000a98:	000b      	movs	r3, r1
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	d100      	bne.n	8000aa0 <__aeabi_dadd+0x418>
 8000a9e:	e677      	b.n	8000790 <__aeabi_dadd+0x108>
 8000aa0:	18ba      	adds	r2, r7, r2
 8000aa2:	42ba      	cmp	r2, r7
 8000aa4:	41bf      	sbcs	r7, r7
 8000aa6:	1864      	adds	r4, r4, r1
 8000aa8:	427f      	negs	r7, r7
 8000aaa:	19e4      	adds	r4, r4, r7
 8000aac:	0223      	lsls	r3, r4, #8
 8000aae:	d400      	bmi.n	8000ab2 <__aeabi_dadd+0x42a>
 8000ab0:	e0f2      	b.n	8000c98 <__aeabi_dadd+0x610>
 8000ab2:	4b7c      	ldr	r3, [pc, #496]	; (8000ca4 <__aeabi_dadd+0x61c>)
 8000ab4:	0017      	movs	r7, r2
 8000ab6:	401c      	ands	r4, r3
 8000ab8:	0006      	movs	r6, r0
 8000aba:	e669      	b.n	8000790 <__aeabi_dadd+0x108>
 8000abc:	0020      	movs	r0, r4
 8000abe:	4338      	orrs	r0, r7
 8000ac0:	2e00      	cmp	r6, #0
 8000ac2:	d1d1      	bne.n	8000a68 <__aeabi_dadd+0x3e0>
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d15b      	bne.n	8000b80 <__aeabi_dadd+0x4f8>
 8000ac8:	001c      	movs	r4, r3
 8000aca:	4314      	orrs	r4, r2
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_dadd+0x448>
 8000ace:	e0a8      	b.n	8000c22 <__aeabi_dadd+0x59a>
 8000ad0:	001c      	movs	r4, r3
 8000ad2:	0017      	movs	r7, r2
 8000ad4:	46d8      	mov	r8, fp
 8000ad6:	e65b      	b.n	8000790 <__aeabi_dadd+0x108>
 8000ad8:	0006      	movs	r6, r0
 8000ada:	2400      	movs	r4, #0
 8000adc:	2700      	movs	r7, #0
 8000ade:	e697      	b.n	8000810 <__aeabi_dadd+0x188>
 8000ae0:	4650      	mov	r0, sl
 8000ae2:	000b      	movs	r3, r1
 8000ae4:	3820      	subs	r0, #32
 8000ae6:	40c3      	lsrs	r3, r0
 8000ae8:	4699      	mov	r9, r3
 8000aea:	4653      	mov	r3, sl
 8000aec:	2b20      	cmp	r3, #32
 8000aee:	d100      	bne.n	8000af2 <__aeabi_dadd+0x46a>
 8000af0:	e095      	b.n	8000c1e <__aeabi_dadd+0x596>
 8000af2:	2340      	movs	r3, #64	; 0x40
 8000af4:	4650      	mov	r0, sl
 8000af6:	1a1b      	subs	r3, r3, r0
 8000af8:	4099      	lsls	r1, r3
 8000afa:	430a      	orrs	r2, r1
 8000afc:	1e51      	subs	r1, r2, #1
 8000afe:	418a      	sbcs	r2, r1
 8000b00:	464b      	mov	r3, r9
 8000b02:	2100      	movs	r1, #0
 8000b04:	431a      	orrs	r2, r3
 8000b06:	e69f      	b.n	8000848 <__aeabi_dadd+0x1c0>
 8000b08:	2e00      	cmp	r6, #0
 8000b0a:	d130      	bne.n	8000b6e <__aeabi_dadd+0x4e6>
 8000b0c:	0026      	movs	r6, r4
 8000b0e:	433e      	orrs	r6, r7
 8000b10:	d067      	beq.n	8000be2 <__aeabi_dadd+0x55a>
 8000b12:	43db      	mvns	r3, r3
 8000b14:	469a      	mov	sl, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d01c      	beq.n	8000b54 <__aeabi_dadd+0x4cc>
 8000b1a:	4e61      	ldr	r6, [pc, #388]	; (8000ca0 <__aeabi_dadd+0x618>)
 8000b1c:	42b0      	cmp	r0, r6
 8000b1e:	d060      	beq.n	8000be2 <__aeabi_dadd+0x55a>
 8000b20:	4653      	mov	r3, sl
 8000b22:	2b38      	cmp	r3, #56	; 0x38
 8000b24:	dd00      	ble.n	8000b28 <__aeabi_dadd+0x4a0>
 8000b26:	e096      	b.n	8000c56 <__aeabi_dadd+0x5ce>
 8000b28:	2b1f      	cmp	r3, #31
 8000b2a:	dd00      	ble.n	8000b2e <__aeabi_dadd+0x4a6>
 8000b2c:	e09f      	b.n	8000c6e <__aeabi_dadd+0x5e6>
 8000b2e:	2620      	movs	r6, #32
 8000b30:	1af3      	subs	r3, r6, r3
 8000b32:	0026      	movs	r6, r4
 8000b34:	409e      	lsls	r6, r3
 8000b36:	469c      	mov	ip, r3
 8000b38:	46b3      	mov	fp, r6
 8000b3a:	4653      	mov	r3, sl
 8000b3c:	003e      	movs	r6, r7
 8000b3e:	40de      	lsrs	r6, r3
 8000b40:	0033      	movs	r3, r6
 8000b42:	465e      	mov	r6, fp
 8000b44:	431e      	orrs	r6, r3
 8000b46:	4663      	mov	r3, ip
 8000b48:	409f      	lsls	r7, r3
 8000b4a:	1e7b      	subs	r3, r7, #1
 8000b4c:	419f      	sbcs	r7, r3
 8000b4e:	4653      	mov	r3, sl
 8000b50:	40dc      	lsrs	r4, r3
 8000b52:	4337      	orrs	r7, r6
 8000b54:	18bf      	adds	r7, r7, r2
 8000b56:	4297      	cmp	r7, r2
 8000b58:	4192      	sbcs	r2, r2
 8000b5a:	1864      	adds	r4, r4, r1
 8000b5c:	4252      	negs	r2, r2
 8000b5e:	18a4      	adds	r4, r4, r2
 8000b60:	0006      	movs	r6, r0
 8000b62:	e678      	b.n	8000856 <__aeabi_dadd+0x1ce>
 8000b64:	4327      	orrs	r7, r4
 8000b66:	1e7c      	subs	r4, r7, #1
 8000b68:	41a7      	sbcs	r7, r4
 8000b6a:	2400      	movs	r4, #0
 8000b6c:	e737      	b.n	80009de <__aeabi_dadd+0x356>
 8000b6e:	4e4c      	ldr	r6, [pc, #304]	; (8000ca0 <__aeabi_dadd+0x618>)
 8000b70:	42b0      	cmp	r0, r6
 8000b72:	d036      	beq.n	8000be2 <__aeabi_dadd+0x55a>
 8000b74:	2680      	movs	r6, #128	; 0x80
 8000b76:	425b      	negs	r3, r3
 8000b78:	0436      	lsls	r6, r6, #16
 8000b7a:	469a      	mov	sl, r3
 8000b7c:	4334      	orrs	r4, r6
 8000b7e:	e7cf      	b.n	8000b20 <__aeabi_dadd+0x498>
 8000b80:	0018      	movs	r0, r3
 8000b82:	4310      	orrs	r0, r2
 8000b84:	d100      	bne.n	8000b88 <__aeabi_dadd+0x500>
 8000b86:	e603      	b.n	8000790 <__aeabi_dadd+0x108>
 8000b88:	1ab8      	subs	r0, r7, r2
 8000b8a:	4684      	mov	ip, r0
 8000b8c:	4567      	cmp	r7, ip
 8000b8e:	41ad      	sbcs	r5, r5
 8000b90:	1ae0      	subs	r0, r4, r3
 8000b92:	426d      	negs	r5, r5
 8000b94:	1b40      	subs	r0, r0, r5
 8000b96:	0205      	lsls	r5, r0, #8
 8000b98:	d400      	bmi.n	8000b9c <__aeabi_dadd+0x514>
 8000b9a:	e62c      	b.n	80007f6 <__aeabi_dadd+0x16e>
 8000b9c:	1bd7      	subs	r7, r2, r7
 8000b9e:	42ba      	cmp	r2, r7
 8000ba0:	4192      	sbcs	r2, r2
 8000ba2:	1b1c      	subs	r4, r3, r4
 8000ba4:	4252      	negs	r2, r2
 8000ba6:	1aa4      	subs	r4, r4, r2
 8000ba8:	46d8      	mov	r8, fp
 8000baa:	e5f1      	b.n	8000790 <__aeabi_dadd+0x108>
 8000bac:	0018      	movs	r0, r3
 8000bae:	4310      	orrs	r0, r2
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_dadd+0x52c>
 8000bb2:	e763      	b.n	8000a7c <__aeabi_dadd+0x3f4>
 8000bb4:	08f8      	lsrs	r0, r7, #3
 8000bb6:	0767      	lsls	r7, r4, #29
 8000bb8:	4307      	orrs	r7, r0
 8000bba:	2080      	movs	r0, #128	; 0x80
 8000bbc:	08e4      	lsrs	r4, r4, #3
 8000bbe:	0300      	lsls	r0, r0, #12
 8000bc0:	4204      	tst	r4, r0
 8000bc2:	d008      	beq.n	8000bd6 <__aeabi_dadd+0x54e>
 8000bc4:	08dd      	lsrs	r5, r3, #3
 8000bc6:	4205      	tst	r5, r0
 8000bc8:	d105      	bne.n	8000bd6 <__aeabi_dadd+0x54e>
 8000bca:	08d2      	lsrs	r2, r2, #3
 8000bcc:	0759      	lsls	r1, r3, #29
 8000bce:	4311      	orrs	r1, r2
 8000bd0:	000f      	movs	r7, r1
 8000bd2:	002c      	movs	r4, r5
 8000bd4:	46d8      	mov	r8, fp
 8000bd6:	0f7b      	lsrs	r3, r7, #29
 8000bd8:	00e4      	lsls	r4, r4, #3
 8000bda:	431c      	orrs	r4, r3
 8000bdc:	00ff      	lsls	r7, r7, #3
 8000bde:	4e30      	ldr	r6, [pc, #192]	; (8000ca0 <__aeabi_dadd+0x618>)
 8000be0:	e5d6      	b.n	8000790 <__aeabi_dadd+0x108>
 8000be2:	000c      	movs	r4, r1
 8000be4:	0017      	movs	r7, r2
 8000be6:	0006      	movs	r6, r0
 8000be8:	e5d2      	b.n	8000790 <__aeabi_dadd+0x108>
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d038      	beq.n	8000c60 <__aeabi_dadd+0x5d8>
 8000bee:	000b      	movs	r3, r1
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	d100      	bne.n	8000bf6 <__aeabi_dadd+0x56e>
 8000bf4:	e742      	b.n	8000a7c <__aeabi_dadd+0x3f4>
 8000bf6:	08f8      	lsrs	r0, r7, #3
 8000bf8:	0767      	lsls	r7, r4, #29
 8000bfa:	4307      	orrs	r7, r0
 8000bfc:	2080      	movs	r0, #128	; 0x80
 8000bfe:	08e4      	lsrs	r4, r4, #3
 8000c00:	0300      	lsls	r0, r0, #12
 8000c02:	4204      	tst	r4, r0
 8000c04:	d0e7      	beq.n	8000bd6 <__aeabi_dadd+0x54e>
 8000c06:	08cb      	lsrs	r3, r1, #3
 8000c08:	4203      	tst	r3, r0
 8000c0a:	d1e4      	bne.n	8000bd6 <__aeabi_dadd+0x54e>
 8000c0c:	08d2      	lsrs	r2, r2, #3
 8000c0e:	0749      	lsls	r1, r1, #29
 8000c10:	4311      	orrs	r1, r2
 8000c12:	000f      	movs	r7, r1
 8000c14:	001c      	movs	r4, r3
 8000c16:	e7de      	b.n	8000bd6 <__aeabi_dadd+0x54e>
 8000c18:	2700      	movs	r7, #0
 8000c1a:	2400      	movs	r4, #0
 8000c1c:	e5d5      	b.n	80007ca <__aeabi_dadd+0x142>
 8000c1e:	2100      	movs	r1, #0
 8000c20:	e76b      	b.n	8000afa <__aeabi_dadd+0x472>
 8000c22:	2500      	movs	r5, #0
 8000c24:	2700      	movs	r7, #0
 8000c26:	e5f3      	b.n	8000810 <__aeabi_dadd+0x188>
 8000c28:	464e      	mov	r6, r9
 8000c2a:	0025      	movs	r5, r4
 8000c2c:	3e20      	subs	r6, #32
 8000c2e:	40f5      	lsrs	r5, r6
 8000c30:	464b      	mov	r3, r9
 8000c32:	002e      	movs	r6, r5
 8000c34:	2b20      	cmp	r3, #32
 8000c36:	d02d      	beq.n	8000c94 <__aeabi_dadd+0x60c>
 8000c38:	2540      	movs	r5, #64	; 0x40
 8000c3a:	1aed      	subs	r5, r5, r3
 8000c3c:	40ac      	lsls	r4, r5
 8000c3e:	4327      	orrs	r7, r4
 8000c40:	1e7c      	subs	r4, r7, #1
 8000c42:	41a7      	sbcs	r7, r4
 8000c44:	2400      	movs	r4, #0
 8000c46:	4337      	orrs	r7, r6
 8000c48:	e6c9      	b.n	80009de <__aeabi_dadd+0x356>
 8000c4a:	2480      	movs	r4, #128	; 0x80
 8000c4c:	2500      	movs	r5, #0
 8000c4e:	0324      	lsls	r4, r4, #12
 8000c50:	4e13      	ldr	r6, [pc, #76]	; (8000ca0 <__aeabi_dadd+0x618>)
 8000c52:	2700      	movs	r7, #0
 8000c54:	e5dc      	b.n	8000810 <__aeabi_dadd+0x188>
 8000c56:	4327      	orrs	r7, r4
 8000c58:	1e7c      	subs	r4, r7, #1
 8000c5a:	41a7      	sbcs	r7, r4
 8000c5c:	2400      	movs	r4, #0
 8000c5e:	e779      	b.n	8000b54 <__aeabi_dadd+0x4cc>
 8000c60:	000c      	movs	r4, r1
 8000c62:	0017      	movs	r7, r2
 8000c64:	4e0e      	ldr	r6, [pc, #56]	; (8000ca0 <__aeabi_dadd+0x618>)
 8000c66:	e593      	b.n	8000790 <__aeabi_dadd+0x108>
 8000c68:	000c      	movs	r4, r1
 8000c6a:	0017      	movs	r7, r2
 8000c6c:	e590      	b.n	8000790 <__aeabi_dadd+0x108>
 8000c6e:	4656      	mov	r6, sl
 8000c70:	0023      	movs	r3, r4
 8000c72:	3e20      	subs	r6, #32
 8000c74:	40f3      	lsrs	r3, r6
 8000c76:	4699      	mov	r9, r3
 8000c78:	4653      	mov	r3, sl
 8000c7a:	2b20      	cmp	r3, #32
 8000c7c:	d00e      	beq.n	8000c9c <__aeabi_dadd+0x614>
 8000c7e:	2340      	movs	r3, #64	; 0x40
 8000c80:	4656      	mov	r6, sl
 8000c82:	1b9b      	subs	r3, r3, r6
 8000c84:	409c      	lsls	r4, r3
 8000c86:	4327      	orrs	r7, r4
 8000c88:	1e7c      	subs	r4, r7, #1
 8000c8a:	41a7      	sbcs	r7, r4
 8000c8c:	464b      	mov	r3, r9
 8000c8e:	2400      	movs	r4, #0
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e75f      	b.n	8000b54 <__aeabi_dadd+0x4cc>
 8000c94:	2400      	movs	r4, #0
 8000c96:	e7d2      	b.n	8000c3e <__aeabi_dadd+0x5b6>
 8000c98:	0017      	movs	r7, r2
 8000c9a:	e5b2      	b.n	8000802 <__aeabi_dadd+0x17a>
 8000c9c:	2400      	movs	r4, #0
 8000c9e:	e7f2      	b.n	8000c86 <__aeabi_dadd+0x5fe>
 8000ca0:	000007ff 	.word	0x000007ff
 8000ca4:	ff7fffff 	.word	0xff7fffff

08000ca8 <__aeabi_ddiv>:
 8000ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000caa:	4657      	mov	r7, sl
 8000cac:	4645      	mov	r5, r8
 8000cae:	46de      	mov	lr, fp
 8000cb0:	464e      	mov	r6, r9
 8000cb2:	b5e0      	push	{r5, r6, r7, lr}
 8000cb4:	004c      	lsls	r4, r1, #1
 8000cb6:	030e      	lsls	r6, r1, #12
 8000cb8:	b087      	sub	sp, #28
 8000cba:	4683      	mov	fp, r0
 8000cbc:	4692      	mov	sl, r2
 8000cbe:	001d      	movs	r5, r3
 8000cc0:	4680      	mov	r8, r0
 8000cc2:	0b36      	lsrs	r6, r6, #12
 8000cc4:	0d64      	lsrs	r4, r4, #21
 8000cc6:	0fcf      	lsrs	r7, r1, #31
 8000cc8:	2c00      	cmp	r4, #0
 8000cca:	d04f      	beq.n	8000d6c <__aeabi_ddiv+0xc4>
 8000ccc:	4b6f      	ldr	r3, [pc, #444]	; (8000e8c <__aeabi_ddiv+0x1e4>)
 8000cce:	429c      	cmp	r4, r3
 8000cd0:	d035      	beq.n	8000d3e <__aeabi_ddiv+0x96>
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	0f42      	lsrs	r2, r0, #29
 8000cd6:	041b      	lsls	r3, r3, #16
 8000cd8:	00f6      	lsls	r6, r6, #3
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	4333      	orrs	r3, r6
 8000cde:	4699      	mov	r9, r3
 8000ce0:	00c3      	lsls	r3, r0, #3
 8000ce2:	4698      	mov	r8, r3
 8000ce4:	4b6a      	ldr	r3, [pc, #424]	; (8000e90 <__aeabi_ddiv+0x1e8>)
 8000ce6:	2600      	movs	r6, #0
 8000ce8:	469c      	mov	ip, r3
 8000cea:	2300      	movs	r3, #0
 8000cec:	4464      	add	r4, ip
 8000cee:	9303      	str	r3, [sp, #12]
 8000cf0:	032b      	lsls	r3, r5, #12
 8000cf2:	0b1b      	lsrs	r3, r3, #12
 8000cf4:	469b      	mov	fp, r3
 8000cf6:	006b      	lsls	r3, r5, #1
 8000cf8:	0fed      	lsrs	r5, r5, #31
 8000cfa:	4650      	mov	r0, sl
 8000cfc:	0d5b      	lsrs	r3, r3, #21
 8000cfe:	9501      	str	r5, [sp, #4]
 8000d00:	d05e      	beq.n	8000dc0 <__aeabi_ddiv+0x118>
 8000d02:	4a62      	ldr	r2, [pc, #392]	; (8000e8c <__aeabi_ddiv+0x1e4>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d053      	beq.n	8000db0 <__aeabi_ddiv+0x108>
 8000d08:	465a      	mov	r2, fp
 8000d0a:	00d1      	lsls	r1, r2, #3
 8000d0c:	2280      	movs	r2, #128	; 0x80
 8000d0e:	0f40      	lsrs	r0, r0, #29
 8000d10:	0412      	lsls	r2, r2, #16
 8000d12:	4302      	orrs	r2, r0
 8000d14:	430a      	orrs	r2, r1
 8000d16:	4693      	mov	fp, r2
 8000d18:	4652      	mov	r2, sl
 8000d1a:	00d1      	lsls	r1, r2, #3
 8000d1c:	4a5c      	ldr	r2, [pc, #368]	; (8000e90 <__aeabi_ddiv+0x1e8>)
 8000d1e:	4694      	mov	ip, r2
 8000d20:	2200      	movs	r2, #0
 8000d22:	4463      	add	r3, ip
 8000d24:	0038      	movs	r0, r7
 8000d26:	4068      	eors	r0, r5
 8000d28:	4684      	mov	ip, r0
 8000d2a:	9002      	str	r0, [sp, #8]
 8000d2c:	1ae4      	subs	r4, r4, r3
 8000d2e:	4316      	orrs	r6, r2
 8000d30:	2e0f      	cmp	r6, #15
 8000d32:	d900      	bls.n	8000d36 <__aeabi_ddiv+0x8e>
 8000d34:	e0b4      	b.n	8000ea0 <__aeabi_ddiv+0x1f8>
 8000d36:	4b57      	ldr	r3, [pc, #348]	; (8000e94 <__aeabi_ddiv+0x1ec>)
 8000d38:	00b6      	lsls	r6, r6, #2
 8000d3a:	599b      	ldr	r3, [r3, r6]
 8000d3c:	469f      	mov	pc, r3
 8000d3e:	0003      	movs	r3, r0
 8000d40:	4333      	orrs	r3, r6
 8000d42:	4699      	mov	r9, r3
 8000d44:	d16c      	bne.n	8000e20 <__aeabi_ddiv+0x178>
 8000d46:	2300      	movs	r3, #0
 8000d48:	4698      	mov	r8, r3
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	2608      	movs	r6, #8
 8000d4e:	9303      	str	r3, [sp, #12]
 8000d50:	e7ce      	b.n	8000cf0 <__aeabi_ddiv+0x48>
 8000d52:	46cb      	mov	fp, r9
 8000d54:	4641      	mov	r1, r8
 8000d56:	9a03      	ldr	r2, [sp, #12]
 8000d58:	9701      	str	r7, [sp, #4]
 8000d5a:	2a02      	cmp	r2, #2
 8000d5c:	d165      	bne.n	8000e2a <__aeabi_ddiv+0x182>
 8000d5e:	9b01      	ldr	r3, [sp, #4]
 8000d60:	4c4a      	ldr	r4, [pc, #296]	; (8000e8c <__aeabi_ddiv+0x1e4>)
 8000d62:	469c      	mov	ip, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	2200      	movs	r2, #0
 8000d68:	4698      	mov	r8, r3
 8000d6a:	e06b      	b.n	8000e44 <__aeabi_ddiv+0x19c>
 8000d6c:	0003      	movs	r3, r0
 8000d6e:	4333      	orrs	r3, r6
 8000d70:	4699      	mov	r9, r3
 8000d72:	d04e      	beq.n	8000e12 <__aeabi_ddiv+0x16a>
 8000d74:	2e00      	cmp	r6, #0
 8000d76:	d100      	bne.n	8000d7a <__aeabi_ddiv+0xd2>
 8000d78:	e1bc      	b.n	80010f4 <__aeabi_ddiv+0x44c>
 8000d7a:	0030      	movs	r0, r6
 8000d7c:	f001 fa2c 	bl	80021d8 <__clzsi2>
 8000d80:	0003      	movs	r3, r0
 8000d82:	3b0b      	subs	r3, #11
 8000d84:	2b1c      	cmp	r3, #28
 8000d86:	dd00      	ble.n	8000d8a <__aeabi_ddiv+0xe2>
 8000d88:	e1ac      	b.n	80010e4 <__aeabi_ddiv+0x43c>
 8000d8a:	221d      	movs	r2, #29
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	465a      	mov	r2, fp
 8000d90:	0001      	movs	r1, r0
 8000d92:	40da      	lsrs	r2, r3
 8000d94:	3908      	subs	r1, #8
 8000d96:	408e      	lsls	r6, r1
 8000d98:	0013      	movs	r3, r2
 8000d9a:	4333      	orrs	r3, r6
 8000d9c:	4699      	mov	r9, r3
 8000d9e:	465b      	mov	r3, fp
 8000da0:	408b      	lsls	r3, r1
 8000da2:	4698      	mov	r8, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	4c3c      	ldr	r4, [pc, #240]	; (8000e98 <__aeabi_ddiv+0x1f0>)
 8000da8:	2600      	movs	r6, #0
 8000daa:	1a24      	subs	r4, r4, r0
 8000dac:	9303      	str	r3, [sp, #12]
 8000dae:	e79f      	b.n	8000cf0 <__aeabi_ddiv+0x48>
 8000db0:	4651      	mov	r1, sl
 8000db2:	465a      	mov	r2, fp
 8000db4:	4311      	orrs	r1, r2
 8000db6:	d129      	bne.n	8000e0c <__aeabi_ddiv+0x164>
 8000db8:	2200      	movs	r2, #0
 8000dba:	4693      	mov	fp, r2
 8000dbc:	3202      	adds	r2, #2
 8000dbe:	e7b1      	b.n	8000d24 <__aeabi_ddiv+0x7c>
 8000dc0:	4659      	mov	r1, fp
 8000dc2:	4301      	orrs	r1, r0
 8000dc4:	d01e      	beq.n	8000e04 <__aeabi_ddiv+0x15c>
 8000dc6:	465b      	mov	r3, fp
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d100      	bne.n	8000dce <__aeabi_ddiv+0x126>
 8000dcc:	e19e      	b.n	800110c <__aeabi_ddiv+0x464>
 8000dce:	4658      	mov	r0, fp
 8000dd0:	f001 fa02 	bl	80021d8 <__clzsi2>
 8000dd4:	0003      	movs	r3, r0
 8000dd6:	3b0b      	subs	r3, #11
 8000dd8:	2b1c      	cmp	r3, #28
 8000dda:	dd00      	ble.n	8000dde <__aeabi_ddiv+0x136>
 8000ddc:	e18f      	b.n	80010fe <__aeabi_ddiv+0x456>
 8000dde:	0002      	movs	r2, r0
 8000de0:	4659      	mov	r1, fp
 8000de2:	3a08      	subs	r2, #8
 8000de4:	4091      	lsls	r1, r2
 8000de6:	468b      	mov	fp, r1
 8000de8:	211d      	movs	r1, #29
 8000dea:	1acb      	subs	r3, r1, r3
 8000dec:	4651      	mov	r1, sl
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	000b      	movs	r3, r1
 8000df2:	4659      	mov	r1, fp
 8000df4:	430b      	orrs	r3, r1
 8000df6:	4651      	mov	r1, sl
 8000df8:	469b      	mov	fp, r3
 8000dfa:	4091      	lsls	r1, r2
 8000dfc:	4b26      	ldr	r3, [pc, #152]	; (8000e98 <__aeabi_ddiv+0x1f0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	1a1b      	subs	r3, r3, r0
 8000e02:	e78f      	b.n	8000d24 <__aeabi_ddiv+0x7c>
 8000e04:	2300      	movs	r3, #0
 8000e06:	2201      	movs	r2, #1
 8000e08:	469b      	mov	fp, r3
 8000e0a:	e78b      	b.n	8000d24 <__aeabi_ddiv+0x7c>
 8000e0c:	4651      	mov	r1, sl
 8000e0e:	2203      	movs	r2, #3
 8000e10:	e788      	b.n	8000d24 <__aeabi_ddiv+0x7c>
 8000e12:	2300      	movs	r3, #0
 8000e14:	4698      	mov	r8, r3
 8000e16:	3301      	adds	r3, #1
 8000e18:	2604      	movs	r6, #4
 8000e1a:	2400      	movs	r4, #0
 8000e1c:	9303      	str	r3, [sp, #12]
 8000e1e:	e767      	b.n	8000cf0 <__aeabi_ddiv+0x48>
 8000e20:	2303      	movs	r3, #3
 8000e22:	46b1      	mov	r9, r6
 8000e24:	9303      	str	r3, [sp, #12]
 8000e26:	260c      	movs	r6, #12
 8000e28:	e762      	b.n	8000cf0 <__aeabi_ddiv+0x48>
 8000e2a:	2a03      	cmp	r2, #3
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_ddiv+0x188>
 8000e2e:	e25c      	b.n	80012ea <__aeabi_ddiv+0x642>
 8000e30:	9b01      	ldr	r3, [sp, #4]
 8000e32:	2a01      	cmp	r2, #1
 8000e34:	d000      	beq.n	8000e38 <__aeabi_ddiv+0x190>
 8000e36:	e1e4      	b.n	8001202 <__aeabi_ddiv+0x55a>
 8000e38:	4013      	ands	r3, r2
 8000e3a:	469c      	mov	ip, r3
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	2400      	movs	r4, #0
 8000e40:	2200      	movs	r2, #0
 8000e42:	4698      	mov	r8, r3
 8000e44:	2100      	movs	r1, #0
 8000e46:	0312      	lsls	r2, r2, #12
 8000e48:	0b13      	lsrs	r3, r2, #12
 8000e4a:	0d0a      	lsrs	r2, r1, #20
 8000e4c:	0512      	lsls	r2, r2, #20
 8000e4e:	431a      	orrs	r2, r3
 8000e50:	0523      	lsls	r3, r4, #20
 8000e52:	4c12      	ldr	r4, [pc, #72]	; (8000e9c <__aeabi_ddiv+0x1f4>)
 8000e54:	4640      	mov	r0, r8
 8000e56:	4022      	ands	r2, r4
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	4662      	mov	r2, ip
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	07d2      	lsls	r2, r2, #31
 8000e60:	085b      	lsrs	r3, r3, #1
 8000e62:	4313      	orrs	r3, r2
 8000e64:	0019      	movs	r1, r3
 8000e66:	b007      	add	sp, #28
 8000e68:	bc3c      	pop	{r2, r3, r4, r5}
 8000e6a:	4690      	mov	r8, r2
 8000e6c:	4699      	mov	r9, r3
 8000e6e:	46a2      	mov	sl, r4
 8000e70:	46ab      	mov	fp, r5
 8000e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e74:	2300      	movs	r3, #0
 8000e76:	2280      	movs	r2, #128	; 0x80
 8000e78:	469c      	mov	ip, r3
 8000e7a:	0312      	lsls	r2, r2, #12
 8000e7c:	4698      	mov	r8, r3
 8000e7e:	4c03      	ldr	r4, [pc, #12]	; (8000e8c <__aeabi_ddiv+0x1e4>)
 8000e80:	e7e0      	b.n	8000e44 <__aeabi_ddiv+0x19c>
 8000e82:	2300      	movs	r3, #0
 8000e84:	4c01      	ldr	r4, [pc, #4]	; (8000e8c <__aeabi_ddiv+0x1e4>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	4698      	mov	r8, r3
 8000e8a:	e7db      	b.n	8000e44 <__aeabi_ddiv+0x19c>
 8000e8c:	000007ff 	.word	0x000007ff
 8000e90:	fffffc01 	.word	0xfffffc01
 8000e94:	08010d00 	.word	0x08010d00
 8000e98:	fffffc0d 	.word	0xfffffc0d
 8000e9c:	800fffff 	.word	0x800fffff
 8000ea0:	45d9      	cmp	r9, fp
 8000ea2:	d900      	bls.n	8000ea6 <__aeabi_ddiv+0x1fe>
 8000ea4:	e139      	b.n	800111a <__aeabi_ddiv+0x472>
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_ddiv+0x202>
 8000ea8:	e134      	b.n	8001114 <__aeabi_ddiv+0x46c>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	4646      	mov	r6, r8
 8000eae:	464d      	mov	r5, r9
 8000eb0:	469a      	mov	sl, r3
 8000eb2:	3c01      	subs	r4, #1
 8000eb4:	465b      	mov	r3, fp
 8000eb6:	0e0a      	lsrs	r2, r1, #24
 8000eb8:	021b      	lsls	r3, r3, #8
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	020b      	lsls	r3, r1, #8
 8000ebe:	0c17      	lsrs	r7, r2, #16
 8000ec0:	9303      	str	r3, [sp, #12]
 8000ec2:	0413      	lsls	r3, r2, #16
 8000ec4:	0c1b      	lsrs	r3, r3, #16
 8000ec6:	0039      	movs	r1, r7
 8000ec8:	0028      	movs	r0, r5
 8000eca:	4690      	mov	r8, r2
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	f7ff f947 	bl	8000160 <__udivsi3>
 8000ed2:	0002      	movs	r2, r0
 8000ed4:	9b01      	ldr	r3, [sp, #4]
 8000ed6:	4683      	mov	fp, r0
 8000ed8:	435a      	muls	r2, r3
 8000eda:	0028      	movs	r0, r5
 8000edc:	0039      	movs	r1, r7
 8000ede:	4691      	mov	r9, r2
 8000ee0:	f7ff f9c4 	bl	800026c <__aeabi_uidivmod>
 8000ee4:	0c35      	lsrs	r5, r6, #16
 8000ee6:	0409      	lsls	r1, r1, #16
 8000ee8:	430d      	orrs	r5, r1
 8000eea:	45a9      	cmp	r9, r5
 8000eec:	d90d      	bls.n	8000f0a <__aeabi_ddiv+0x262>
 8000eee:	465b      	mov	r3, fp
 8000ef0:	4445      	add	r5, r8
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	45a8      	cmp	r8, r5
 8000ef6:	d900      	bls.n	8000efa <__aeabi_ddiv+0x252>
 8000ef8:	e13a      	b.n	8001170 <__aeabi_ddiv+0x4c8>
 8000efa:	45a9      	cmp	r9, r5
 8000efc:	d800      	bhi.n	8000f00 <__aeabi_ddiv+0x258>
 8000efe:	e137      	b.n	8001170 <__aeabi_ddiv+0x4c8>
 8000f00:	2302      	movs	r3, #2
 8000f02:	425b      	negs	r3, r3
 8000f04:	469c      	mov	ip, r3
 8000f06:	4445      	add	r5, r8
 8000f08:	44e3      	add	fp, ip
 8000f0a:	464b      	mov	r3, r9
 8000f0c:	1aeb      	subs	r3, r5, r3
 8000f0e:	0039      	movs	r1, r7
 8000f10:	0018      	movs	r0, r3
 8000f12:	9304      	str	r3, [sp, #16]
 8000f14:	f7ff f924 	bl	8000160 <__udivsi3>
 8000f18:	9b01      	ldr	r3, [sp, #4]
 8000f1a:	0005      	movs	r5, r0
 8000f1c:	4343      	muls	r3, r0
 8000f1e:	0039      	movs	r1, r7
 8000f20:	9804      	ldr	r0, [sp, #16]
 8000f22:	4699      	mov	r9, r3
 8000f24:	f7ff f9a2 	bl	800026c <__aeabi_uidivmod>
 8000f28:	0433      	lsls	r3, r6, #16
 8000f2a:	0409      	lsls	r1, r1, #16
 8000f2c:	0c1b      	lsrs	r3, r3, #16
 8000f2e:	430b      	orrs	r3, r1
 8000f30:	4599      	cmp	r9, r3
 8000f32:	d909      	bls.n	8000f48 <__aeabi_ddiv+0x2a0>
 8000f34:	4443      	add	r3, r8
 8000f36:	1e6a      	subs	r2, r5, #1
 8000f38:	4598      	cmp	r8, r3
 8000f3a:	d900      	bls.n	8000f3e <__aeabi_ddiv+0x296>
 8000f3c:	e11a      	b.n	8001174 <__aeabi_ddiv+0x4cc>
 8000f3e:	4599      	cmp	r9, r3
 8000f40:	d800      	bhi.n	8000f44 <__aeabi_ddiv+0x29c>
 8000f42:	e117      	b.n	8001174 <__aeabi_ddiv+0x4cc>
 8000f44:	3d02      	subs	r5, #2
 8000f46:	4443      	add	r3, r8
 8000f48:	464a      	mov	r2, r9
 8000f4a:	1a9b      	subs	r3, r3, r2
 8000f4c:	465a      	mov	r2, fp
 8000f4e:	0412      	lsls	r2, r2, #16
 8000f50:	432a      	orrs	r2, r5
 8000f52:	9903      	ldr	r1, [sp, #12]
 8000f54:	4693      	mov	fp, r2
 8000f56:	0c10      	lsrs	r0, r2, #16
 8000f58:	0c0a      	lsrs	r2, r1, #16
 8000f5a:	4691      	mov	r9, r2
 8000f5c:	0409      	lsls	r1, r1, #16
 8000f5e:	465a      	mov	r2, fp
 8000f60:	0c09      	lsrs	r1, r1, #16
 8000f62:	464e      	mov	r6, r9
 8000f64:	000d      	movs	r5, r1
 8000f66:	0412      	lsls	r2, r2, #16
 8000f68:	0c12      	lsrs	r2, r2, #16
 8000f6a:	4345      	muls	r5, r0
 8000f6c:	9105      	str	r1, [sp, #20]
 8000f6e:	4351      	muls	r1, r2
 8000f70:	4372      	muls	r2, r6
 8000f72:	4370      	muls	r0, r6
 8000f74:	1952      	adds	r2, r2, r5
 8000f76:	0c0e      	lsrs	r6, r1, #16
 8000f78:	18b2      	adds	r2, r6, r2
 8000f7a:	4295      	cmp	r5, r2
 8000f7c:	d903      	bls.n	8000f86 <__aeabi_ddiv+0x2de>
 8000f7e:	2580      	movs	r5, #128	; 0x80
 8000f80:	026d      	lsls	r5, r5, #9
 8000f82:	46ac      	mov	ip, r5
 8000f84:	4460      	add	r0, ip
 8000f86:	0c15      	lsrs	r5, r2, #16
 8000f88:	0409      	lsls	r1, r1, #16
 8000f8a:	0412      	lsls	r2, r2, #16
 8000f8c:	0c09      	lsrs	r1, r1, #16
 8000f8e:	1828      	adds	r0, r5, r0
 8000f90:	1852      	adds	r2, r2, r1
 8000f92:	4283      	cmp	r3, r0
 8000f94:	d200      	bcs.n	8000f98 <__aeabi_ddiv+0x2f0>
 8000f96:	e0ce      	b.n	8001136 <__aeabi_ddiv+0x48e>
 8000f98:	d100      	bne.n	8000f9c <__aeabi_ddiv+0x2f4>
 8000f9a:	e0c8      	b.n	800112e <__aeabi_ddiv+0x486>
 8000f9c:	1a1d      	subs	r5, r3, r0
 8000f9e:	4653      	mov	r3, sl
 8000fa0:	1a9e      	subs	r6, r3, r2
 8000fa2:	45b2      	cmp	sl, r6
 8000fa4:	4192      	sbcs	r2, r2
 8000fa6:	4252      	negs	r2, r2
 8000fa8:	1aab      	subs	r3, r5, r2
 8000faa:	469a      	mov	sl, r3
 8000fac:	4598      	cmp	r8, r3
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_ddiv+0x30a>
 8000fb0:	e117      	b.n	80011e2 <__aeabi_ddiv+0x53a>
 8000fb2:	0039      	movs	r1, r7
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f7ff f8d3 	bl	8000160 <__udivsi3>
 8000fba:	9b01      	ldr	r3, [sp, #4]
 8000fbc:	0005      	movs	r5, r0
 8000fbe:	4343      	muls	r3, r0
 8000fc0:	0039      	movs	r1, r7
 8000fc2:	4650      	mov	r0, sl
 8000fc4:	9304      	str	r3, [sp, #16]
 8000fc6:	f7ff f951 	bl	800026c <__aeabi_uidivmod>
 8000fca:	9804      	ldr	r0, [sp, #16]
 8000fcc:	040b      	lsls	r3, r1, #16
 8000fce:	0c31      	lsrs	r1, r6, #16
 8000fd0:	4319      	orrs	r1, r3
 8000fd2:	4288      	cmp	r0, r1
 8000fd4:	d909      	bls.n	8000fea <__aeabi_ddiv+0x342>
 8000fd6:	4441      	add	r1, r8
 8000fd8:	1e6b      	subs	r3, r5, #1
 8000fda:	4588      	cmp	r8, r1
 8000fdc:	d900      	bls.n	8000fe0 <__aeabi_ddiv+0x338>
 8000fde:	e107      	b.n	80011f0 <__aeabi_ddiv+0x548>
 8000fe0:	4288      	cmp	r0, r1
 8000fe2:	d800      	bhi.n	8000fe6 <__aeabi_ddiv+0x33e>
 8000fe4:	e104      	b.n	80011f0 <__aeabi_ddiv+0x548>
 8000fe6:	3d02      	subs	r5, #2
 8000fe8:	4441      	add	r1, r8
 8000fea:	9b04      	ldr	r3, [sp, #16]
 8000fec:	1acb      	subs	r3, r1, r3
 8000fee:	0018      	movs	r0, r3
 8000ff0:	0039      	movs	r1, r7
 8000ff2:	9304      	str	r3, [sp, #16]
 8000ff4:	f7ff f8b4 	bl	8000160 <__udivsi3>
 8000ff8:	9b01      	ldr	r3, [sp, #4]
 8000ffa:	4682      	mov	sl, r0
 8000ffc:	4343      	muls	r3, r0
 8000ffe:	0039      	movs	r1, r7
 8001000:	9804      	ldr	r0, [sp, #16]
 8001002:	9301      	str	r3, [sp, #4]
 8001004:	f7ff f932 	bl	800026c <__aeabi_uidivmod>
 8001008:	9801      	ldr	r0, [sp, #4]
 800100a:	040b      	lsls	r3, r1, #16
 800100c:	0431      	lsls	r1, r6, #16
 800100e:	0c09      	lsrs	r1, r1, #16
 8001010:	4319      	orrs	r1, r3
 8001012:	4288      	cmp	r0, r1
 8001014:	d90d      	bls.n	8001032 <__aeabi_ddiv+0x38a>
 8001016:	4653      	mov	r3, sl
 8001018:	4441      	add	r1, r8
 800101a:	3b01      	subs	r3, #1
 800101c:	4588      	cmp	r8, r1
 800101e:	d900      	bls.n	8001022 <__aeabi_ddiv+0x37a>
 8001020:	e0e8      	b.n	80011f4 <__aeabi_ddiv+0x54c>
 8001022:	4288      	cmp	r0, r1
 8001024:	d800      	bhi.n	8001028 <__aeabi_ddiv+0x380>
 8001026:	e0e5      	b.n	80011f4 <__aeabi_ddiv+0x54c>
 8001028:	2302      	movs	r3, #2
 800102a:	425b      	negs	r3, r3
 800102c:	469c      	mov	ip, r3
 800102e:	4441      	add	r1, r8
 8001030:	44e2      	add	sl, ip
 8001032:	9b01      	ldr	r3, [sp, #4]
 8001034:	042d      	lsls	r5, r5, #16
 8001036:	1ace      	subs	r6, r1, r3
 8001038:	4651      	mov	r1, sl
 800103a:	4329      	orrs	r1, r5
 800103c:	9d05      	ldr	r5, [sp, #20]
 800103e:	464f      	mov	r7, r9
 8001040:	002a      	movs	r2, r5
 8001042:	040b      	lsls	r3, r1, #16
 8001044:	0c08      	lsrs	r0, r1, #16
 8001046:	0c1b      	lsrs	r3, r3, #16
 8001048:	435a      	muls	r2, r3
 800104a:	4345      	muls	r5, r0
 800104c:	437b      	muls	r3, r7
 800104e:	4378      	muls	r0, r7
 8001050:	195b      	adds	r3, r3, r5
 8001052:	0c17      	lsrs	r7, r2, #16
 8001054:	18fb      	adds	r3, r7, r3
 8001056:	429d      	cmp	r5, r3
 8001058:	d903      	bls.n	8001062 <__aeabi_ddiv+0x3ba>
 800105a:	2580      	movs	r5, #128	; 0x80
 800105c:	026d      	lsls	r5, r5, #9
 800105e:	46ac      	mov	ip, r5
 8001060:	4460      	add	r0, ip
 8001062:	0c1d      	lsrs	r5, r3, #16
 8001064:	0412      	lsls	r2, r2, #16
 8001066:	041b      	lsls	r3, r3, #16
 8001068:	0c12      	lsrs	r2, r2, #16
 800106a:	1828      	adds	r0, r5, r0
 800106c:	189b      	adds	r3, r3, r2
 800106e:	4286      	cmp	r6, r0
 8001070:	d200      	bcs.n	8001074 <__aeabi_ddiv+0x3cc>
 8001072:	e093      	b.n	800119c <__aeabi_ddiv+0x4f4>
 8001074:	d100      	bne.n	8001078 <__aeabi_ddiv+0x3d0>
 8001076:	e08e      	b.n	8001196 <__aeabi_ddiv+0x4ee>
 8001078:	2301      	movs	r3, #1
 800107a:	4319      	orrs	r1, r3
 800107c:	4ba0      	ldr	r3, [pc, #640]	; (8001300 <__aeabi_ddiv+0x658>)
 800107e:	18e3      	adds	r3, r4, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	dc00      	bgt.n	8001086 <__aeabi_ddiv+0x3de>
 8001084:	e099      	b.n	80011ba <__aeabi_ddiv+0x512>
 8001086:	074a      	lsls	r2, r1, #29
 8001088:	d000      	beq.n	800108c <__aeabi_ddiv+0x3e4>
 800108a:	e09e      	b.n	80011ca <__aeabi_ddiv+0x522>
 800108c:	465a      	mov	r2, fp
 800108e:	01d2      	lsls	r2, r2, #7
 8001090:	d506      	bpl.n	80010a0 <__aeabi_ddiv+0x3f8>
 8001092:	465a      	mov	r2, fp
 8001094:	4b9b      	ldr	r3, [pc, #620]	; (8001304 <__aeabi_ddiv+0x65c>)
 8001096:	401a      	ands	r2, r3
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	4693      	mov	fp, r2
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	18e3      	adds	r3, r4, r3
 80010a0:	4a99      	ldr	r2, [pc, #612]	; (8001308 <__aeabi_ddiv+0x660>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	dd68      	ble.n	8001178 <__aeabi_ddiv+0x4d0>
 80010a6:	2301      	movs	r3, #1
 80010a8:	9a02      	ldr	r2, [sp, #8]
 80010aa:	4c98      	ldr	r4, [pc, #608]	; (800130c <__aeabi_ddiv+0x664>)
 80010ac:	401a      	ands	r2, r3
 80010ae:	2300      	movs	r3, #0
 80010b0:	4694      	mov	ip, r2
 80010b2:	4698      	mov	r8, r3
 80010b4:	2200      	movs	r2, #0
 80010b6:	e6c5      	b.n	8000e44 <__aeabi_ddiv+0x19c>
 80010b8:	2280      	movs	r2, #128	; 0x80
 80010ba:	464b      	mov	r3, r9
 80010bc:	0312      	lsls	r2, r2, #12
 80010be:	4213      	tst	r3, r2
 80010c0:	d00a      	beq.n	80010d8 <__aeabi_ddiv+0x430>
 80010c2:	465b      	mov	r3, fp
 80010c4:	4213      	tst	r3, r2
 80010c6:	d106      	bne.n	80010d6 <__aeabi_ddiv+0x42e>
 80010c8:	431a      	orrs	r2, r3
 80010ca:	0312      	lsls	r2, r2, #12
 80010cc:	0b12      	lsrs	r2, r2, #12
 80010ce:	46ac      	mov	ip, r5
 80010d0:	4688      	mov	r8, r1
 80010d2:	4c8e      	ldr	r4, [pc, #568]	; (800130c <__aeabi_ddiv+0x664>)
 80010d4:	e6b6      	b.n	8000e44 <__aeabi_ddiv+0x19c>
 80010d6:	464b      	mov	r3, r9
 80010d8:	431a      	orrs	r2, r3
 80010da:	0312      	lsls	r2, r2, #12
 80010dc:	0b12      	lsrs	r2, r2, #12
 80010de:	46bc      	mov	ip, r7
 80010e0:	4c8a      	ldr	r4, [pc, #552]	; (800130c <__aeabi_ddiv+0x664>)
 80010e2:	e6af      	b.n	8000e44 <__aeabi_ddiv+0x19c>
 80010e4:	0003      	movs	r3, r0
 80010e6:	465a      	mov	r2, fp
 80010e8:	3b28      	subs	r3, #40	; 0x28
 80010ea:	409a      	lsls	r2, r3
 80010ec:	2300      	movs	r3, #0
 80010ee:	4691      	mov	r9, r2
 80010f0:	4698      	mov	r8, r3
 80010f2:	e657      	b.n	8000da4 <__aeabi_ddiv+0xfc>
 80010f4:	4658      	mov	r0, fp
 80010f6:	f001 f86f 	bl	80021d8 <__clzsi2>
 80010fa:	3020      	adds	r0, #32
 80010fc:	e640      	b.n	8000d80 <__aeabi_ddiv+0xd8>
 80010fe:	0003      	movs	r3, r0
 8001100:	4652      	mov	r2, sl
 8001102:	3b28      	subs	r3, #40	; 0x28
 8001104:	409a      	lsls	r2, r3
 8001106:	2100      	movs	r1, #0
 8001108:	4693      	mov	fp, r2
 800110a:	e677      	b.n	8000dfc <__aeabi_ddiv+0x154>
 800110c:	f001 f864 	bl	80021d8 <__clzsi2>
 8001110:	3020      	adds	r0, #32
 8001112:	e65f      	b.n	8000dd4 <__aeabi_ddiv+0x12c>
 8001114:	4588      	cmp	r8, r1
 8001116:	d200      	bcs.n	800111a <__aeabi_ddiv+0x472>
 8001118:	e6c7      	b.n	8000eaa <__aeabi_ddiv+0x202>
 800111a:	464b      	mov	r3, r9
 800111c:	07de      	lsls	r6, r3, #31
 800111e:	085d      	lsrs	r5, r3, #1
 8001120:	4643      	mov	r3, r8
 8001122:	085b      	lsrs	r3, r3, #1
 8001124:	431e      	orrs	r6, r3
 8001126:	4643      	mov	r3, r8
 8001128:	07db      	lsls	r3, r3, #31
 800112a:	469a      	mov	sl, r3
 800112c:	e6c2      	b.n	8000eb4 <__aeabi_ddiv+0x20c>
 800112e:	2500      	movs	r5, #0
 8001130:	4592      	cmp	sl, r2
 8001132:	d300      	bcc.n	8001136 <__aeabi_ddiv+0x48e>
 8001134:	e733      	b.n	8000f9e <__aeabi_ddiv+0x2f6>
 8001136:	9e03      	ldr	r6, [sp, #12]
 8001138:	4659      	mov	r1, fp
 800113a:	46b4      	mov	ip, r6
 800113c:	44e2      	add	sl, ip
 800113e:	45b2      	cmp	sl, r6
 8001140:	41ad      	sbcs	r5, r5
 8001142:	426d      	negs	r5, r5
 8001144:	4445      	add	r5, r8
 8001146:	18eb      	adds	r3, r5, r3
 8001148:	3901      	subs	r1, #1
 800114a:	4598      	cmp	r8, r3
 800114c:	d207      	bcs.n	800115e <__aeabi_ddiv+0x4b6>
 800114e:	4298      	cmp	r0, r3
 8001150:	d900      	bls.n	8001154 <__aeabi_ddiv+0x4ac>
 8001152:	e07f      	b.n	8001254 <__aeabi_ddiv+0x5ac>
 8001154:	d100      	bne.n	8001158 <__aeabi_ddiv+0x4b0>
 8001156:	e0bc      	b.n	80012d2 <__aeabi_ddiv+0x62a>
 8001158:	1a1d      	subs	r5, r3, r0
 800115a:	468b      	mov	fp, r1
 800115c:	e71f      	b.n	8000f9e <__aeabi_ddiv+0x2f6>
 800115e:	4598      	cmp	r8, r3
 8001160:	d1fa      	bne.n	8001158 <__aeabi_ddiv+0x4b0>
 8001162:	9d03      	ldr	r5, [sp, #12]
 8001164:	4555      	cmp	r5, sl
 8001166:	d9f2      	bls.n	800114e <__aeabi_ddiv+0x4a6>
 8001168:	4643      	mov	r3, r8
 800116a:	468b      	mov	fp, r1
 800116c:	1a1d      	subs	r5, r3, r0
 800116e:	e716      	b.n	8000f9e <__aeabi_ddiv+0x2f6>
 8001170:	469b      	mov	fp, r3
 8001172:	e6ca      	b.n	8000f0a <__aeabi_ddiv+0x262>
 8001174:	0015      	movs	r5, r2
 8001176:	e6e7      	b.n	8000f48 <__aeabi_ddiv+0x2a0>
 8001178:	465a      	mov	r2, fp
 800117a:	08c9      	lsrs	r1, r1, #3
 800117c:	0752      	lsls	r2, r2, #29
 800117e:	430a      	orrs	r2, r1
 8001180:	055b      	lsls	r3, r3, #21
 8001182:	4690      	mov	r8, r2
 8001184:	0d5c      	lsrs	r4, r3, #21
 8001186:	465a      	mov	r2, fp
 8001188:	2301      	movs	r3, #1
 800118a:	9902      	ldr	r1, [sp, #8]
 800118c:	0252      	lsls	r2, r2, #9
 800118e:	4019      	ands	r1, r3
 8001190:	0b12      	lsrs	r2, r2, #12
 8001192:	468c      	mov	ip, r1
 8001194:	e656      	b.n	8000e44 <__aeabi_ddiv+0x19c>
 8001196:	2b00      	cmp	r3, #0
 8001198:	d100      	bne.n	800119c <__aeabi_ddiv+0x4f4>
 800119a:	e76f      	b.n	800107c <__aeabi_ddiv+0x3d4>
 800119c:	4446      	add	r6, r8
 800119e:	1e4a      	subs	r2, r1, #1
 80011a0:	45b0      	cmp	r8, r6
 80011a2:	d929      	bls.n	80011f8 <__aeabi_ddiv+0x550>
 80011a4:	0011      	movs	r1, r2
 80011a6:	4286      	cmp	r6, r0
 80011a8:	d000      	beq.n	80011ac <__aeabi_ddiv+0x504>
 80011aa:	e765      	b.n	8001078 <__aeabi_ddiv+0x3d0>
 80011ac:	9a03      	ldr	r2, [sp, #12]
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d000      	beq.n	80011b4 <__aeabi_ddiv+0x50c>
 80011b2:	e761      	b.n	8001078 <__aeabi_ddiv+0x3d0>
 80011b4:	e762      	b.n	800107c <__aeabi_ddiv+0x3d4>
 80011b6:	2101      	movs	r1, #1
 80011b8:	4249      	negs	r1, r1
 80011ba:	2001      	movs	r0, #1
 80011bc:	1ac2      	subs	r2, r0, r3
 80011be:	2a38      	cmp	r2, #56	; 0x38
 80011c0:	dd21      	ble.n	8001206 <__aeabi_ddiv+0x55e>
 80011c2:	9b02      	ldr	r3, [sp, #8]
 80011c4:	4003      	ands	r3, r0
 80011c6:	469c      	mov	ip, r3
 80011c8:	e638      	b.n	8000e3c <__aeabi_ddiv+0x194>
 80011ca:	220f      	movs	r2, #15
 80011cc:	400a      	ands	r2, r1
 80011ce:	2a04      	cmp	r2, #4
 80011d0:	d100      	bne.n	80011d4 <__aeabi_ddiv+0x52c>
 80011d2:	e75b      	b.n	800108c <__aeabi_ddiv+0x3e4>
 80011d4:	000a      	movs	r2, r1
 80011d6:	1d11      	adds	r1, r2, #4
 80011d8:	4291      	cmp	r1, r2
 80011da:	4192      	sbcs	r2, r2
 80011dc:	4252      	negs	r2, r2
 80011de:	4493      	add	fp, r2
 80011e0:	e754      	b.n	800108c <__aeabi_ddiv+0x3e4>
 80011e2:	4b47      	ldr	r3, [pc, #284]	; (8001300 <__aeabi_ddiv+0x658>)
 80011e4:	18e3      	adds	r3, r4, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	dde5      	ble.n	80011b6 <__aeabi_ddiv+0x50e>
 80011ea:	2201      	movs	r2, #1
 80011ec:	4252      	negs	r2, r2
 80011ee:	e7f2      	b.n	80011d6 <__aeabi_ddiv+0x52e>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e6fa      	b.n	8000fea <__aeabi_ddiv+0x342>
 80011f4:	469a      	mov	sl, r3
 80011f6:	e71c      	b.n	8001032 <__aeabi_ddiv+0x38a>
 80011f8:	42b0      	cmp	r0, r6
 80011fa:	d839      	bhi.n	8001270 <__aeabi_ddiv+0x5c8>
 80011fc:	d06e      	beq.n	80012dc <__aeabi_ddiv+0x634>
 80011fe:	0011      	movs	r1, r2
 8001200:	e73a      	b.n	8001078 <__aeabi_ddiv+0x3d0>
 8001202:	9302      	str	r3, [sp, #8]
 8001204:	e73a      	b.n	800107c <__aeabi_ddiv+0x3d4>
 8001206:	2a1f      	cmp	r2, #31
 8001208:	dc3c      	bgt.n	8001284 <__aeabi_ddiv+0x5dc>
 800120a:	2320      	movs	r3, #32
 800120c:	1a9b      	subs	r3, r3, r2
 800120e:	000c      	movs	r4, r1
 8001210:	4658      	mov	r0, fp
 8001212:	4099      	lsls	r1, r3
 8001214:	4098      	lsls	r0, r3
 8001216:	1e4b      	subs	r3, r1, #1
 8001218:	4199      	sbcs	r1, r3
 800121a:	465b      	mov	r3, fp
 800121c:	40d4      	lsrs	r4, r2
 800121e:	40d3      	lsrs	r3, r2
 8001220:	4320      	orrs	r0, r4
 8001222:	4308      	orrs	r0, r1
 8001224:	001a      	movs	r2, r3
 8001226:	0743      	lsls	r3, r0, #29
 8001228:	d009      	beq.n	800123e <__aeabi_ddiv+0x596>
 800122a:	230f      	movs	r3, #15
 800122c:	4003      	ands	r3, r0
 800122e:	2b04      	cmp	r3, #4
 8001230:	d005      	beq.n	800123e <__aeabi_ddiv+0x596>
 8001232:	0001      	movs	r1, r0
 8001234:	1d08      	adds	r0, r1, #4
 8001236:	4288      	cmp	r0, r1
 8001238:	419b      	sbcs	r3, r3
 800123a:	425b      	negs	r3, r3
 800123c:	18d2      	adds	r2, r2, r3
 800123e:	0213      	lsls	r3, r2, #8
 8001240:	d53a      	bpl.n	80012b8 <__aeabi_ddiv+0x610>
 8001242:	2301      	movs	r3, #1
 8001244:	9a02      	ldr	r2, [sp, #8]
 8001246:	2401      	movs	r4, #1
 8001248:	401a      	ands	r2, r3
 800124a:	2300      	movs	r3, #0
 800124c:	4694      	mov	ip, r2
 800124e:	4698      	mov	r8, r3
 8001250:	2200      	movs	r2, #0
 8001252:	e5f7      	b.n	8000e44 <__aeabi_ddiv+0x19c>
 8001254:	2102      	movs	r1, #2
 8001256:	4249      	negs	r1, r1
 8001258:	468c      	mov	ip, r1
 800125a:	9d03      	ldr	r5, [sp, #12]
 800125c:	44e3      	add	fp, ip
 800125e:	46ac      	mov	ip, r5
 8001260:	44e2      	add	sl, ip
 8001262:	45aa      	cmp	sl, r5
 8001264:	41ad      	sbcs	r5, r5
 8001266:	426d      	negs	r5, r5
 8001268:	4445      	add	r5, r8
 800126a:	18ed      	adds	r5, r5, r3
 800126c:	1a2d      	subs	r5, r5, r0
 800126e:	e696      	b.n	8000f9e <__aeabi_ddiv+0x2f6>
 8001270:	1e8a      	subs	r2, r1, #2
 8001272:	9903      	ldr	r1, [sp, #12]
 8001274:	004d      	lsls	r5, r1, #1
 8001276:	428d      	cmp	r5, r1
 8001278:	4189      	sbcs	r1, r1
 800127a:	4249      	negs	r1, r1
 800127c:	4441      	add	r1, r8
 800127e:	1876      	adds	r6, r6, r1
 8001280:	9503      	str	r5, [sp, #12]
 8001282:	e78f      	b.n	80011a4 <__aeabi_ddiv+0x4fc>
 8001284:	201f      	movs	r0, #31
 8001286:	4240      	negs	r0, r0
 8001288:	1ac3      	subs	r3, r0, r3
 800128a:	4658      	mov	r0, fp
 800128c:	40d8      	lsrs	r0, r3
 800128e:	0003      	movs	r3, r0
 8001290:	2a20      	cmp	r2, #32
 8001292:	d028      	beq.n	80012e6 <__aeabi_ddiv+0x63e>
 8001294:	2040      	movs	r0, #64	; 0x40
 8001296:	465d      	mov	r5, fp
 8001298:	1a82      	subs	r2, r0, r2
 800129a:	4095      	lsls	r5, r2
 800129c:	4329      	orrs	r1, r5
 800129e:	1e4a      	subs	r2, r1, #1
 80012a0:	4191      	sbcs	r1, r2
 80012a2:	4319      	orrs	r1, r3
 80012a4:	2307      	movs	r3, #7
 80012a6:	2200      	movs	r2, #0
 80012a8:	400b      	ands	r3, r1
 80012aa:	d009      	beq.n	80012c0 <__aeabi_ddiv+0x618>
 80012ac:	230f      	movs	r3, #15
 80012ae:	2200      	movs	r2, #0
 80012b0:	400b      	ands	r3, r1
 80012b2:	0008      	movs	r0, r1
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	d1bd      	bne.n	8001234 <__aeabi_ddiv+0x58c>
 80012b8:	0001      	movs	r1, r0
 80012ba:	0753      	lsls	r3, r2, #29
 80012bc:	0252      	lsls	r2, r2, #9
 80012be:	0b12      	lsrs	r2, r2, #12
 80012c0:	08c9      	lsrs	r1, r1, #3
 80012c2:	4319      	orrs	r1, r3
 80012c4:	2301      	movs	r3, #1
 80012c6:	4688      	mov	r8, r1
 80012c8:	9902      	ldr	r1, [sp, #8]
 80012ca:	2400      	movs	r4, #0
 80012cc:	4019      	ands	r1, r3
 80012ce:	468c      	mov	ip, r1
 80012d0:	e5b8      	b.n	8000e44 <__aeabi_ddiv+0x19c>
 80012d2:	4552      	cmp	r2, sl
 80012d4:	d8be      	bhi.n	8001254 <__aeabi_ddiv+0x5ac>
 80012d6:	468b      	mov	fp, r1
 80012d8:	2500      	movs	r5, #0
 80012da:	e660      	b.n	8000f9e <__aeabi_ddiv+0x2f6>
 80012dc:	9d03      	ldr	r5, [sp, #12]
 80012de:	429d      	cmp	r5, r3
 80012e0:	d3c6      	bcc.n	8001270 <__aeabi_ddiv+0x5c8>
 80012e2:	0011      	movs	r1, r2
 80012e4:	e762      	b.n	80011ac <__aeabi_ddiv+0x504>
 80012e6:	2500      	movs	r5, #0
 80012e8:	e7d8      	b.n	800129c <__aeabi_ddiv+0x5f4>
 80012ea:	2280      	movs	r2, #128	; 0x80
 80012ec:	465b      	mov	r3, fp
 80012ee:	0312      	lsls	r2, r2, #12
 80012f0:	431a      	orrs	r2, r3
 80012f2:	9b01      	ldr	r3, [sp, #4]
 80012f4:	0312      	lsls	r2, r2, #12
 80012f6:	0b12      	lsrs	r2, r2, #12
 80012f8:	469c      	mov	ip, r3
 80012fa:	4688      	mov	r8, r1
 80012fc:	4c03      	ldr	r4, [pc, #12]	; (800130c <__aeabi_ddiv+0x664>)
 80012fe:	e5a1      	b.n	8000e44 <__aeabi_ddiv+0x19c>
 8001300:	000003ff 	.word	0x000003ff
 8001304:	feffffff 	.word	0xfeffffff
 8001308:	000007fe 	.word	0x000007fe
 800130c:	000007ff 	.word	0x000007ff

08001310 <__eqdf2>:
 8001310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001312:	464f      	mov	r7, r9
 8001314:	4646      	mov	r6, r8
 8001316:	46d6      	mov	lr, sl
 8001318:	005c      	lsls	r4, r3, #1
 800131a:	b5c0      	push	{r6, r7, lr}
 800131c:	031f      	lsls	r7, r3, #12
 800131e:	0fdb      	lsrs	r3, r3, #31
 8001320:	469a      	mov	sl, r3
 8001322:	4b17      	ldr	r3, [pc, #92]	; (8001380 <__eqdf2+0x70>)
 8001324:	030e      	lsls	r6, r1, #12
 8001326:	004d      	lsls	r5, r1, #1
 8001328:	4684      	mov	ip, r0
 800132a:	4680      	mov	r8, r0
 800132c:	0b36      	lsrs	r6, r6, #12
 800132e:	0d6d      	lsrs	r5, r5, #21
 8001330:	0fc9      	lsrs	r1, r1, #31
 8001332:	4691      	mov	r9, r2
 8001334:	0b3f      	lsrs	r7, r7, #12
 8001336:	0d64      	lsrs	r4, r4, #21
 8001338:	2001      	movs	r0, #1
 800133a:	429d      	cmp	r5, r3
 800133c:	d008      	beq.n	8001350 <__eqdf2+0x40>
 800133e:	429c      	cmp	r4, r3
 8001340:	d001      	beq.n	8001346 <__eqdf2+0x36>
 8001342:	42a5      	cmp	r5, r4
 8001344:	d00b      	beq.n	800135e <__eqdf2+0x4e>
 8001346:	bc1c      	pop	{r2, r3, r4}
 8001348:	4690      	mov	r8, r2
 800134a:	4699      	mov	r9, r3
 800134c:	46a2      	mov	sl, r4
 800134e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001350:	4663      	mov	r3, ip
 8001352:	4333      	orrs	r3, r6
 8001354:	d1f7      	bne.n	8001346 <__eqdf2+0x36>
 8001356:	42ac      	cmp	r4, r5
 8001358:	d1f5      	bne.n	8001346 <__eqdf2+0x36>
 800135a:	433a      	orrs	r2, r7
 800135c:	d1f3      	bne.n	8001346 <__eqdf2+0x36>
 800135e:	2001      	movs	r0, #1
 8001360:	42be      	cmp	r6, r7
 8001362:	d1f0      	bne.n	8001346 <__eqdf2+0x36>
 8001364:	45c8      	cmp	r8, r9
 8001366:	d1ee      	bne.n	8001346 <__eqdf2+0x36>
 8001368:	4551      	cmp	r1, sl
 800136a:	d007      	beq.n	800137c <__eqdf2+0x6c>
 800136c:	2d00      	cmp	r5, #0
 800136e:	d1ea      	bne.n	8001346 <__eqdf2+0x36>
 8001370:	4663      	mov	r3, ip
 8001372:	431e      	orrs	r6, r3
 8001374:	0030      	movs	r0, r6
 8001376:	1e46      	subs	r6, r0, #1
 8001378:	41b0      	sbcs	r0, r6
 800137a:	e7e4      	b.n	8001346 <__eqdf2+0x36>
 800137c:	2000      	movs	r0, #0
 800137e:	e7e2      	b.n	8001346 <__eqdf2+0x36>
 8001380:	000007ff 	.word	0x000007ff

08001384 <__gedf2>:
 8001384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001386:	4645      	mov	r5, r8
 8001388:	46de      	mov	lr, fp
 800138a:	4657      	mov	r7, sl
 800138c:	464e      	mov	r6, r9
 800138e:	b5e0      	push	{r5, r6, r7, lr}
 8001390:	031f      	lsls	r7, r3, #12
 8001392:	0b3d      	lsrs	r5, r7, #12
 8001394:	4f2c      	ldr	r7, [pc, #176]	; (8001448 <__gedf2+0xc4>)
 8001396:	030e      	lsls	r6, r1, #12
 8001398:	004c      	lsls	r4, r1, #1
 800139a:	46ab      	mov	fp, r5
 800139c:	005d      	lsls	r5, r3, #1
 800139e:	4684      	mov	ip, r0
 80013a0:	0b36      	lsrs	r6, r6, #12
 80013a2:	0d64      	lsrs	r4, r4, #21
 80013a4:	0fc9      	lsrs	r1, r1, #31
 80013a6:	4690      	mov	r8, r2
 80013a8:	0d6d      	lsrs	r5, r5, #21
 80013aa:	0fdb      	lsrs	r3, r3, #31
 80013ac:	42bc      	cmp	r4, r7
 80013ae:	d02a      	beq.n	8001406 <__gedf2+0x82>
 80013b0:	4f25      	ldr	r7, [pc, #148]	; (8001448 <__gedf2+0xc4>)
 80013b2:	42bd      	cmp	r5, r7
 80013b4:	d02d      	beq.n	8001412 <__gedf2+0x8e>
 80013b6:	2c00      	cmp	r4, #0
 80013b8:	d10f      	bne.n	80013da <__gedf2+0x56>
 80013ba:	4330      	orrs	r0, r6
 80013bc:	0007      	movs	r7, r0
 80013be:	4681      	mov	r9, r0
 80013c0:	4278      	negs	r0, r7
 80013c2:	4178      	adcs	r0, r7
 80013c4:	b2c0      	uxtb	r0, r0
 80013c6:	2d00      	cmp	r5, #0
 80013c8:	d117      	bne.n	80013fa <__gedf2+0x76>
 80013ca:	465f      	mov	r7, fp
 80013cc:	433a      	orrs	r2, r7
 80013ce:	d114      	bne.n	80013fa <__gedf2+0x76>
 80013d0:	464b      	mov	r3, r9
 80013d2:	2000      	movs	r0, #0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00a      	beq.n	80013ee <__gedf2+0x6a>
 80013d8:	e006      	b.n	80013e8 <__gedf2+0x64>
 80013da:	2d00      	cmp	r5, #0
 80013dc:	d102      	bne.n	80013e4 <__gedf2+0x60>
 80013de:	4658      	mov	r0, fp
 80013e0:	4302      	orrs	r2, r0
 80013e2:	d001      	beq.n	80013e8 <__gedf2+0x64>
 80013e4:	4299      	cmp	r1, r3
 80013e6:	d018      	beq.n	800141a <__gedf2+0x96>
 80013e8:	4248      	negs	r0, r1
 80013ea:	2101      	movs	r1, #1
 80013ec:	4308      	orrs	r0, r1
 80013ee:	bc3c      	pop	{r2, r3, r4, r5}
 80013f0:	4690      	mov	r8, r2
 80013f2:	4699      	mov	r9, r3
 80013f4:	46a2      	mov	sl, r4
 80013f6:	46ab      	mov	fp, r5
 80013f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013fa:	2800      	cmp	r0, #0
 80013fc:	d0f2      	beq.n	80013e4 <__gedf2+0x60>
 80013fe:	2001      	movs	r0, #1
 8001400:	3b01      	subs	r3, #1
 8001402:	4318      	orrs	r0, r3
 8001404:	e7f3      	b.n	80013ee <__gedf2+0x6a>
 8001406:	0037      	movs	r7, r6
 8001408:	4307      	orrs	r7, r0
 800140a:	d0d1      	beq.n	80013b0 <__gedf2+0x2c>
 800140c:	2002      	movs	r0, #2
 800140e:	4240      	negs	r0, r0
 8001410:	e7ed      	b.n	80013ee <__gedf2+0x6a>
 8001412:	465f      	mov	r7, fp
 8001414:	4317      	orrs	r7, r2
 8001416:	d0ce      	beq.n	80013b6 <__gedf2+0x32>
 8001418:	e7f8      	b.n	800140c <__gedf2+0x88>
 800141a:	42ac      	cmp	r4, r5
 800141c:	dce4      	bgt.n	80013e8 <__gedf2+0x64>
 800141e:	da03      	bge.n	8001428 <__gedf2+0xa4>
 8001420:	1e48      	subs	r0, r1, #1
 8001422:	2101      	movs	r1, #1
 8001424:	4308      	orrs	r0, r1
 8001426:	e7e2      	b.n	80013ee <__gedf2+0x6a>
 8001428:	455e      	cmp	r6, fp
 800142a:	d8dd      	bhi.n	80013e8 <__gedf2+0x64>
 800142c:	d006      	beq.n	800143c <__gedf2+0xb8>
 800142e:	2000      	movs	r0, #0
 8001430:	455e      	cmp	r6, fp
 8001432:	d2dc      	bcs.n	80013ee <__gedf2+0x6a>
 8001434:	2301      	movs	r3, #1
 8001436:	1e48      	subs	r0, r1, #1
 8001438:	4318      	orrs	r0, r3
 800143a:	e7d8      	b.n	80013ee <__gedf2+0x6a>
 800143c:	45c4      	cmp	ip, r8
 800143e:	d8d3      	bhi.n	80013e8 <__gedf2+0x64>
 8001440:	2000      	movs	r0, #0
 8001442:	45c4      	cmp	ip, r8
 8001444:	d3f6      	bcc.n	8001434 <__gedf2+0xb0>
 8001446:	e7d2      	b.n	80013ee <__gedf2+0x6a>
 8001448:	000007ff 	.word	0x000007ff

0800144c <__ledf2>:
 800144c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144e:	464e      	mov	r6, r9
 8001450:	4645      	mov	r5, r8
 8001452:	46de      	mov	lr, fp
 8001454:	4657      	mov	r7, sl
 8001456:	005c      	lsls	r4, r3, #1
 8001458:	b5e0      	push	{r5, r6, r7, lr}
 800145a:	031f      	lsls	r7, r3, #12
 800145c:	0fdb      	lsrs	r3, r3, #31
 800145e:	4699      	mov	r9, r3
 8001460:	4b2a      	ldr	r3, [pc, #168]	; (800150c <__ledf2+0xc0>)
 8001462:	030e      	lsls	r6, r1, #12
 8001464:	004d      	lsls	r5, r1, #1
 8001466:	0fc9      	lsrs	r1, r1, #31
 8001468:	4684      	mov	ip, r0
 800146a:	0b36      	lsrs	r6, r6, #12
 800146c:	0d6d      	lsrs	r5, r5, #21
 800146e:	468b      	mov	fp, r1
 8001470:	4690      	mov	r8, r2
 8001472:	0b3f      	lsrs	r7, r7, #12
 8001474:	0d64      	lsrs	r4, r4, #21
 8001476:	429d      	cmp	r5, r3
 8001478:	d020      	beq.n	80014bc <__ledf2+0x70>
 800147a:	4b24      	ldr	r3, [pc, #144]	; (800150c <__ledf2+0xc0>)
 800147c:	429c      	cmp	r4, r3
 800147e:	d022      	beq.n	80014c6 <__ledf2+0x7a>
 8001480:	2d00      	cmp	r5, #0
 8001482:	d112      	bne.n	80014aa <__ledf2+0x5e>
 8001484:	4330      	orrs	r0, r6
 8001486:	4243      	negs	r3, r0
 8001488:	4143      	adcs	r3, r0
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2c00      	cmp	r4, #0
 800148e:	d01f      	beq.n	80014d0 <__ledf2+0x84>
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00c      	beq.n	80014ae <__ledf2+0x62>
 8001494:	464b      	mov	r3, r9
 8001496:	2001      	movs	r0, #1
 8001498:	3b01      	subs	r3, #1
 800149a:	4303      	orrs	r3, r0
 800149c:	0018      	movs	r0, r3
 800149e:	bc3c      	pop	{r2, r3, r4, r5}
 80014a0:	4690      	mov	r8, r2
 80014a2:	4699      	mov	r9, r3
 80014a4:	46a2      	mov	sl, r4
 80014a6:	46ab      	mov	fp, r5
 80014a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014aa:	2c00      	cmp	r4, #0
 80014ac:	d016      	beq.n	80014dc <__ledf2+0x90>
 80014ae:	45cb      	cmp	fp, r9
 80014b0:	d017      	beq.n	80014e2 <__ledf2+0x96>
 80014b2:	465b      	mov	r3, fp
 80014b4:	4259      	negs	r1, r3
 80014b6:	2301      	movs	r3, #1
 80014b8:	430b      	orrs	r3, r1
 80014ba:	e7ef      	b.n	800149c <__ledf2+0x50>
 80014bc:	0031      	movs	r1, r6
 80014be:	2302      	movs	r3, #2
 80014c0:	4301      	orrs	r1, r0
 80014c2:	d1eb      	bne.n	800149c <__ledf2+0x50>
 80014c4:	e7d9      	b.n	800147a <__ledf2+0x2e>
 80014c6:	0039      	movs	r1, r7
 80014c8:	2302      	movs	r3, #2
 80014ca:	4311      	orrs	r1, r2
 80014cc:	d1e6      	bne.n	800149c <__ledf2+0x50>
 80014ce:	e7d7      	b.n	8001480 <__ledf2+0x34>
 80014d0:	433a      	orrs	r2, r7
 80014d2:	d1dd      	bne.n	8001490 <__ledf2+0x44>
 80014d4:	2300      	movs	r3, #0
 80014d6:	2800      	cmp	r0, #0
 80014d8:	d0e0      	beq.n	800149c <__ledf2+0x50>
 80014da:	e7ea      	b.n	80014b2 <__ledf2+0x66>
 80014dc:	433a      	orrs	r2, r7
 80014de:	d1e6      	bne.n	80014ae <__ledf2+0x62>
 80014e0:	e7e7      	b.n	80014b2 <__ledf2+0x66>
 80014e2:	42a5      	cmp	r5, r4
 80014e4:	dce5      	bgt.n	80014b2 <__ledf2+0x66>
 80014e6:	db05      	blt.n	80014f4 <__ledf2+0xa8>
 80014e8:	42be      	cmp	r6, r7
 80014ea:	d8e2      	bhi.n	80014b2 <__ledf2+0x66>
 80014ec:	d007      	beq.n	80014fe <__ledf2+0xb2>
 80014ee:	2300      	movs	r3, #0
 80014f0:	42be      	cmp	r6, r7
 80014f2:	d2d3      	bcs.n	800149c <__ledf2+0x50>
 80014f4:	4659      	mov	r1, fp
 80014f6:	2301      	movs	r3, #1
 80014f8:	3901      	subs	r1, #1
 80014fa:	430b      	orrs	r3, r1
 80014fc:	e7ce      	b.n	800149c <__ledf2+0x50>
 80014fe:	45c4      	cmp	ip, r8
 8001500:	d8d7      	bhi.n	80014b2 <__ledf2+0x66>
 8001502:	2300      	movs	r3, #0
 8001504:	45c4      	cmp	ip, r8
 8001506:	d3f5      	bcc.n	80014f4 <__ledf2+0xa8>
 8001508:	e7c8      	b.n	800149c <__ledf2+0x50>
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	000007ff 	.word	0x000007ff

08001510 <__aeabi_dmul>:
 8001510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001512:	4657      	mov	r7, sl
 8001514:	4645      	mov	r5, r8
 8001516:	46de      	mov	lr, fp
 8001518:	464e      	mov	r6, r9
 800151a:	b5e0      	push	{r5, r6, r7, lr}
 800151c:	030c      	lsls	r4, r1, #12
 800151e:	4698      	mov	r8, r3
 8001520:	004e      	lsls	r6, r1, #1
 8001522:	0b23      	lsrs	r3, r4, #12
 8001524:	b087      	sub	sp, #28
 8001526:	0007      	movs	r7, r0
 8001528:	4692      	mov	sl, r2
 800152a:	469b      	mov	fp, r3
 800152c:	0d76      	lsrs	r6, r6, #21
 800152e:	0fcd      	lsrs	r5, r1, #31
 8001530:	2e00      	cmp	r6, #0
 8001532:	d06b      	beq.n	800160c <__aeabi_dmul+0xfc>
 8001534:	4b6d      	ldr	r3, [pc, #436]	; (80016ec <__aeabi_dmul+0x1dc>)
 8001536:	429e      	cmp	r6, r3
 8001538:	d035      	beq.n	80015a6 <__aeabi_dmul+0x96>
 800153a:	2480      	movs	r4, #128	; 0x80
 800153c:	465b      	mov	r3, fp
 800153e:	0f42      	lsrs	r2, r0, #29
 8001540:	0424      	lsls	r4, r4, #16
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	4314      	orrs	r4, r2
 8001546:	431c      	orrs	r4, r3
 8001548:	00c3      	lsls	r3, r0, #3
 800154a:	4699      	mov	r9, r3
 800154c:	4b68      	ldr	r3, [pc, #416]	; (80016f0 <__aeabi_dmul+0x1e0>)
 800154e:	46a3      	mov	fp, r4
 8001550:	469c      	mov	ip, r3
 8001552:	2300      	movs	r3, #0
 8001554:	2700      	movs	r7, #0
 8001556:	4466      	add	r6, ip
 8001558:	9302      	str	r3, [sp, #8]
 800155a:	4643      	mov	r3, r8
 800155c:	031c      	lsls	r4, r3, #12
 800155e:	005a      	lsls	r2, r3, #1
 8001560:	0fdb      	lsrs	r3, r3, #31
 8001562:	4650      	mov	r0, sl
 8001564:	0b24      	lsrs	r4, r4, #12
 8001566:	0d52      	lsrs	r2, r2, #21
 8001568:	4698      	mov	r8, r3
 800156a:	d100      	bne.n	800156e <__aeabi_dmul+0x5e>
 800156c:	e076      	b.n	800165c <__aeabi_dmul+0x14c>
 800156e:	4b5f      	ldr	r3, [pc, #380]	; (80016ec <__aeabi_dmul+0x1dc>)
 8001570:	429a      	cmp	r2, r3
 8001572:	d06d      	beq.n	8001650 <__aeabi_dmul+0x140>
 8001574:	2380      	movs	r3, #128	; 0x80
 8001576:	0f41      	lsrs	r1, r0, #29
 8001578:	041b      	lsls	r3, r3, #16
 800157a:	430b      	orrs	r3, r1
 800157c:	495c      	ldr	r1, [pc, #368]	; (80016f0 <__aeabi_dmul+0x1e0>)
 800157e:	00e4      	lsls	r4, r4, #3
 8001580:	468c      	mov	ip, r1
 8001582:	431c      	orrs	r4, r3
 8001584:	00c3      	lsls	r3, r0, #3
 8001586:	2000      	movs	r0, #0
 8001588:	4462      	add	r2, ip
 800158a:	4641      	mov	r1, r8
 800158c:	18b6      	adds	r6, r6, r2
 800158e:	4069      	eors	r1, r5
 8001590:	1c72      	adds	r2, r6, #1
 8001592:	9101      	str	r1, [sp, #4]
 8001594:	4694      	mov	ip, r2
 8001596:	4307      	orrs	r7, r0
 8001598:	2f0f      	cmp	r7, #15
 800159a:	d900      	bls.n	800159e <__aeabi_dmul+0x8e>
 800159c:	e0b0      	b.n	8001700 <__aeabi_dmul+0x1f0>
 800159e:	4a55      	ldr	r2, [pc, #340]	; (80016f4 <__aeabi_dmul+0x1e4>)
 80015a0:	00bf      	lsls	r7, r7, #2
 80015a2:	59d2      	ldr	r2, [r2, r7]
 80015a4:	4697      	mov	pc, r2
 80015a6:	465b      	mov	r3, fp
 80015a8:	4303      	orrs	r3, r0
 80015aa:	4699      	mov	r9, r3
 80015ac:	d000      	beq.n	80015b0 <__aeabi_dmul+0xa0>
 80015ae:	e087      	b.n	80016c0 <__aeabi_dmul+0x1b0>
 80015b0:	2300      	movs	r3, #0
 80015b2:	469b      	mov	fp, r3
 80015b4:	3302      	adds	r3, #2
 80015b6:	2708      	movs	r7, #8
 80015b8:	9302      	str	r3, [sp, #8]
 80015ba:	e7ce      	b.n	800155a <__aeabi_dmul+0x4a>
 80015bc:	4642      	mov	r2, r8
 80015be:	9201      	str	r2, [sp, #4]
 80015c0:	2802      	cmp	r0, #2
 80015c2:	d067      	beq.n	8001694 <__aeabi_dmul+0x184>
 80015c4:	2803      	cmp	r0, #3
 80015c6:	d100      	bne.n	80015ca <__aeabi_dmul+0xba>
 80015c8:	e20e      	b.n	80019e8 <__aeabi_dmul+0x4d8>
 80015ca:	2801      	cmp	r0, #1
 80015cc:	d000      	beq.n	80015d0 <__aeabi_dmul+0xc0>
 80015ce:	e162      	b.n	8001896 <__aeabi_dmul+0x386>
 80015d0:	2300      	movs	r3, #0
 80015d2:	2400      	movs	r4, #0
 80015d4:	2200      	movs	r2, #0
 80015d6:	4699      	mov	r9, r3
 80015d8:	9901      	ldr	r1, [sp, #4]
 80015da:	4001      	ands	r1, r0
 80015dc:	b2cd      	uxtb	r5, r1
 80015de:	2100      	movs	r1, #0
 80015e0:	0312      	lsls	r2, r2, #12
 80015e2:	0d0b      	lsrs	r3, r1, #20
 80015e4:	0b12      	lsrs	r2, r2, #12
 80015e6:	051b      	lsls	r3, r3, #20
 80015e8:	4313      	orrs	r3, r2
 80015ea:	4a43      	ldr	r2, [pc, #268]	; (80016f8 <__aeabi_dmul+0x1e8>)
 80015ec:	0524      	lsls	r4, r4, #20
 80015ee:	4013      	ands	r3, r2
 80015f0:	431c      	orrs	r4, r3
 80015f2:	0064      	lsls	r4, r4, #1
 80015f4:	07ed      	lsls	r5, r5, #31
 80015f6:	0864      	lsrs	r4, r4, #1
 80015f8:	432c      	orrs	r4, r5
 80015fa:	4648      	mov	r0, r9
 80015fc:	0021      	movs	r1, r4
 80015fe:	b007      	add	sp, #28
 8001600:	bc3c      	pop	{r2, r3, r4, r5}
 8001602:	4690      	mov	r8, r2
 8001604:	4699      	mov	r9, r3
 8001606:	46a2      	mov	sl, r4
 8001608:	46ab      	mov	fp, r5
 800160a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800160c:	4303      	orrs	r3, r0
 800160e:	4699      	mov	r9, r3
 8001610:	d04f      	beq.n	80016b2 <__aeabi_dmul+0x1a2>
 8001612:	465b      	mov	r3, fp
 8001614:	2b00      	cmp	r3, #0
 8001616:	d100      	bne.n	800161a <__aeabi_dmul+0x10a>
 8001618:	e189      	b.n	800192e <__aeabi_dmul+0x41e>
 800161a:	4658      	mov	r0, fp
 800161c:	f000 fddc 	bl	80021d8 <__clzsi2>
 8001620:	0003      	movs	r3, r0
 8001622:	3b0b      	subs	r3, #11
 8001624:	2b1c      	cmp	r3, #28
 8001626:	dd00      	ble.n	800162a <__aeabi_dmul+0x11a>
 8001628:	e17a      	b.n	8001920 <__aeabi_dmul+0x410>
 800162a:	221d      	movs	r2, #29
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	003a      	movs	r2, r7
 8001630:	0001      	movs	r1, r0
 8001632:	465c      	mov	r4, fp
 8001634:	40da      	lsrs	r2, r3
 8001636:	3908      	subs	r1, #8
 8001638:	408c      	lsls	r4, r1
 800163a:	0013      	movs	r3, r2
 800163c:	408f      	lsls	r7, r1
 800163e:	4323      	orrs	r3, r4
 8001640:	469b      	mov	fp, r3
 8001642:	46b9      	mov	r9, r7
 8001644:	2300      	movs	r3, #0
 8001646:	4e2d      	ldr	r6, [pc, #180]	; (80016fc <__aeabi_dmul+0x1ec>)
 8001648:	2700      	movs	r7, #0
 800164a:	1a36      	subs	r6, r6, r0
 800164c:	9302      	str	r3, [sp, #8]
 800164e:	e784      	b.n	800155a <__aeabi_dmul+0x4a>
 8001650:	4653      	mov	r3, sl
 8001652:	4323      	orrs	r3, r4
 8001654:	d12a      	bne.n	80016ac <__aeabi_dmul+0x19c>
 8001656:	2400      	movs	r4, #0
 8001658:	2002      	movs	r0, #2
 800165a:	e796      	b.n	800158a <__aeabi_dmul+0x7a>
 800165c:	4653      	mov	r3, sl
 800165e:	4323      	orrs	r3, r4
 8001660:	d020      	beq.n	80016a4 <__aeabi_dmul+0x194>
 8001662:	2c00      	cmp	r4, #0
 8001664:	d100      	bne.n	8001668 <__aeabi_dmul+0x158>
 8001666:	e157      	b.n	8001918 <__aeabi_dmul+0x408>
 8001668:	0020      	movs	r0, r4
 800166a:	f000 fdb5 	bl	80021d8 <__clzsi2>
 800166e:	0003      	movs	r3, r0
 8001670:	3b0b      	subs	r3, #11
 8001672:	2b1c      	cmp	r3, #28
 8001674:	dd00      	ble.n	8001678 <__aeabi_dmul+0x168>
 8001676:	e149      	b.n	800190c <__aeabi_dmul+0x3fc>
 8001678:	211d      	movs	r1, #29
 800167a:	1acb      	subs	r3, r1, r3
 800167c:	4651      	mov	r1, sl
 800167e:	0002      	movs	r2, r0
 8001680:	40d9      	lsrs	r1, r3
 8001682:	4653      	mov	r3, sl
 8001684:	3a08      	subs	r2, #8
 8001686:	4094      	lsls	r4, r2
 8001688:	4093      	lsls	r3, r2
 800168a:	430c      	orrs	r4, r1
 800168c:	4a1b      	ldr	r2, [pc, #108]	; (80016fc <__aeabi_dmul+0x1ec>)
 800168e:	1a12      	subs	r2, r2, r0
 8001690:	2000      	movs	r0, #0
 8001692:	e77a      	b.n	800158a <__aeabi_dmul+0x7a>
 8001694:	2501      	movs	r5, #1
 8001696:	9b01      	ldr	r3, [sp, #4]
 8001698:	4c14      	ldr	r4, [pc, #80]	; (80016ec <__aeabi_dmul+0x1dc>)
 800169a:	401d      	ands	r5, r3
 800169c:	2300      	movs	r3, #0
 800169e:	2200      	movs	r2, #0
 80016a0:	4699      	mov	r9, r3
 80016a2:	e79c      	b.n	80015de <__aeabi_dmul+0xce>
 80016a4:	2400      	movs	r4, #0
 80016a6:	2200      	movs	r2, #0
 80016a8:	2001      	movs	r0, #1
 80016aa:	e76e      	b.n	800158a <__aeabi_dmul+0x7a>
 80016ac:	4653      	mov	r3, sl
 80016ae:	2003      	movs	r0, #3
 80016b0:	e76b      	b.n	800158a <__aeabi_dmul+0x7a>
 80016b2:	2300      	movs	r3, #0
 80016b4:	469b      	mov	fp, r3
 80016b6:	3301      	adds	r3, #1
 80016b8:	2704      	movs	r7, #4
 80016ba:	2600      	movs	r6, #0
 80016bc:	9302      	str	r3, [sp, #8]
 80016be:	e74c      	b.n	800155a <__aeabi_dmul+0x4a>
 80016c0:	2303      	movs	r3, #3
 80016c2:	4681      	mov	r9, r0
 80016c4:	270c      	movs	r7, #12
 80016c6:	9302      	str	r3, [sp, #8]
 80016c8:	e747      	b.n	800155a <__aeabi_dmul+0x4a>
 80016ca:	2280      	movs	r2, #128	; 0x80
 80016cc:	2300      	movs	r3, #0
 80016ce:	2500      	movs	r5, #0
 80016d0:	0312      	lsls	r2, r2, #12
 80016d2:	4699      	mov	r9, r3
 80016d4:	4c05      	ldr	r4, [pc, #20]	; (80016ec <__aeabi_dmul+0x1dc>)
 80016d6:	e782      	b.n	80015de <__aeabi_dmul+0xce>
 80016d8:	465c      	mov	r4, fp
 80016da:	464b      	mov	r3, r9
 80016dc:	9802      	ldr	r0, [sp, #8]
 80016de:	e76f      	b.n	80015c0 <__aeabi_dmul+0xb0>
 80016e0:	465c      	mov	r4, fp
 80016e2:	464b      	mov	r3, r9
 80016e4:	9501      	str	r5, [sp, #4]
 80016e6:	9802      	ldr	r0, [sp, #8]
 80016e8:	e76a      	b.n	80015c0 <__aeabi_dmul+0xb0>
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	000007ff 	.word	0x000007ff
 80016f0:	fffffc01 	.word	0xfffffc01
 80016f4:	08010d40 	.word	0x08010d40
 80016f8:	800fffff 	.word	0x800fffff
 80016fc:	fffffc0d 	.word	0xfffffc0d
 8001700:	464a      	mov	r2, r9
 8001702:	4649      	mov	r1, r9
 8001704:	0c17      	lsrs	r7, r2, #16
 8001706:	0c1a      	lsrs	r2, r3, #16
 8001708:	041b      	lsls	r3, r3, #16
 800170a:	0c1b      	lsrs	r3, r3, #16
 800170c:	0408      	lsls	r0, r1, #16
 800170e:	0019      	movs	r1, r3
 8001710:	0c00      	lsrs	r0, r0, #16
 8001712:	4341      	muls	r1, r0
 8001714:	0015      	movs	r5, r2
 8001716:	4688      	mov	r8, r1
 8001718:	0019      	movs	r1, r3
 800171a:	437d      	muls	r5, r7
 800171c:	4379      	muls	r1, r7
 800171e:	9503      	str	r5, [sp, #12]
 8001720:	4689      	mov	r9, r1
 8001722:	0029      	movs	r1, r5
 8001724:	0015      	movs	r5, r2
 8001726:	4345      	muls	r5, r0
 8001728:	444d      	add	r5, r9
 800172a:	9502      	str	r5, [sp, #8]
 800172c:	4645      	mov	r5, r8
 800172e:	0c2d      	lsrs	r5, r5, #16
 8001730:	46aa      	mov	sl, r5
 8001732:	9d02      	ldr	r5, [sp, #8]
 8001734:	4455      	add	r5, sl
 8001736:	45a9      	cmp	r9, r5
 8001738:	d906      	bls.n	8001748 <__aeabi_dmul+0x238>
 800173a:	468a      	mov	sl, r1
 800173c:	2180      	movs	r1, #128	; 0x80
 800173e:	0249      	lsls	r1, r1, #9
 8001740:	4689      	mov	r9, r1
 8001742:	44ca      	add	sl, r9
 8001744:	4651      	mov	r1, sl
 8001746:	9103      	str	r1, [sp, #12]
 8001748:	0c29      	lsrs	r1, r5, #16
 800174a:	9104      	str	r1, [sp, #16]
 800174c:	4641      	mov	r1, r8
 800174e:	0409      	lsls	r1, r1, #16
 8001750:	042d      	lsls	r5, r5, #16
 8001752:	0c09      	lsrs	r1, r1, #16
 8001754:	4688      	mov	r8, r1
 8001756:	0029      	movs	r1, r5
 8001758:	0c25      	lsrs	r5, r4, #16
 800175a:	0424      	lsls	r4, r4, #16
 800175c:	4441      	add	r1, r8
 800175e:	0c24      	lsrs	r4, r4, #16
 8001760:	9105      	str	r1, [sp, #20]
 8001762:	0021      	movs	r1, r4
 8001764:	4341      	muls	r1, r0
 8001766:	4688      	mov	r8, r1
 8001768:	0021      	movs	r1, r4
 800176a:	4379      	muls	r1, r7
 800176c:	468a      	mov	sl, r1
 800176e:	4368      	muls	r0, r5
 8001770:	4641      	mov	r1, r8
 8001772:	4450      	add	r0, sl
 8001774:	4681      	mov	r9, r0
 8001776:	0c08      	lsrs	r0, r1, #16
 8001778:	4448      	add	r0, r9
 800177a:	436f      	muls	r7, r5
 800177c:	4582      	cmp	sl, r0
 800177e:	d903      	bls.n	8001788 <__aeabi_dmul+0x278>
 8001780:	2180      	movs	r1, #128	; 0x80
 8001782:	0249      	lsls	r1, r1, #9
 8001784:	4689      	mov	r9, r1
 8001786:	444f      	add	r7, r9
 8001788:	0c01      	lsrs	r1, r0, #16
 800178a:	4689      	mov	r9, r1
 800178c:	0039      	movs	r1, r7
 800178e:	4449      	add	r1, r9
 8001790:	9102      	str	r1, [sp, #8]
 8001792:	4641      	mov	r1, r8
 8001794:	040f      	lsls	r7, r1, #16
 8001796:	9904      	ldr	r1, [sp, #16]
 8001798:	0c3f      	lsrs	r7, r7, #16
 800179a:	4688      	mov	r8, r1
 800179c:	0400      	lsls	r0, r0, #16
 800179e:	19c0      	adds	r0, r0, r7
 80017a0:	4480      	add	r8, r0
 80017a2:	4641      	mov	r1, r8
 80017a4:	9104      	str	r1, [sp, #16]
 80017a6:	4659      	mov	r1, fp
 80017a8:	0c0f      	lsrs	r7, r1, #16
 80017aa:	0409      	lsls	r1, r1, #16
 80017ac:	0c09      	lsrs	r1, r1, #16
 80017ae:	4688      	mov	r8, r1
 80017b0:	4359      	muls	r1, r3
 80017b2:	468a      	mov	sl, r1
 80017b4:	0039      	movs	r1, r7
 80017b6:	4351      	muls	r1, r2
 80017b8:	4689      	mov	r9, r1
 80017ba:	4641      	mov	r1, r8
 80017bc:	434a      	muls	r2, r1
 80017be:	4651      	mov	r1, sl
 80017c0:	0c09      	lsrs	r1, r1, #16
 80017c2:	468b      	mov	fp, r1
 80017c4:	437b      	muls	r3, r7
 80017c6:	18d2      	adds	r2, r2, r3
 80017c8:	445a      	add	r2, fp
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d903      	bls.n	80017d6 <__aeabi_dmul+0x2c6>
 80017ce:	2380      	movs	r3, #128	; 0x80
 80017d0:	025b      	lsls	r3, r3, #9
 80017d2:	469b      	mov	fp, r3
 80017d4:	44d9      	add	r9, fp
 80017d6:	4651      	mov	r1, sl
 80017d8:	0409      	lsls	r1, r1, #16
 80017da:	0c09      	lsrs	r1, r1, #16
 80017dc:	468a      	mov	sl, r1
 80017de:	4641      	mov	r1, r8
 80017e0:	4361      	muls	r1, r4
 80017e2:	437c      	muls	r4, r7
 80017e4:	0c13      	lsrs	r3, r2, #16
 80017e6:	0412      	lsls	r2, r2, #16
 80017e8:	444b      	add	r3, r9
 80017ea:	4452      	add	r2, sl
 80017ec:	46a1      	mov	r9, r4
 80017ee:	468a      	mov	sl, r1
 80017f0:	003c      	movs	r4, r7
 80017f2:	4641      	mov	r1, r8
 80017f4:	436c      	muls	r4, r5
 80017f6:	434d      	muls	r5, r1
 80017f8:	4651      	mov	r1, sl
 80017fa:	444d      	add	r5, r9
 80017fc:	0c0f      	lsrs	r7, r1, #16
 80017fe:	197d      	adds	r5, r7, r5
 8001800:	45a9      	cmp	r9, r5
 8001802:	d903      	bls.n	800180c <__aeabi_dmul+0x2fc>
 8001804:	2180      	movs	r1, #128	; 0x80
 8001806:	0249      	lsls	r1, r1, #9
 8001808:	4688      	mov	r8, r1
 800180a:	4444      	add	r4, r8
 800180c:	9f04      	ldr	r7, [sp, #16]
 800180e:	9903      	ldr	r1, [sp, #12]
 8001810:	46b8      	mov	r8, r7
 8001812:	4441      	add	r1, r8
 8001814:	468b      	mov	fp, r1
 8001816:	4583      	cmp	fp, r0
 8001818:	4180      	sbcs	r0, r0
 800181a:	4241      	negs	r1, r0
 800181c:	4688      	mov	r8, r1
 800181e:	4651      	mov	r1, sl
 8001820:	0408      	lsls	r0, r1, #16
 8001822:	042f      	lsls	r7, r5, #16
 8001824:	0c00      	lsrs	r0, r0, #16
 8001826:	183f      	adds	r7, r7, r0
 8001828:	4658      	mov	r0, fp
 800182a:	9902      	ldr	r1, [sp, #8]
 800182c:	1810      	adds	r0, r2, r0
 800182e:	4689      	mov	r9, r1
 8001830:	4290      	cmp	r0, r2
 8001832:	4192      	sbcs	r2, r2
 8001834:	444f      	add	r7, r9
 8001836:	46ba      	mov	sl, r7
 8001838:	4252      	negs	r2, r2
 800183a:	4699      	mov	r9, r3
 800183c:	4693      	mov	fp, r2
 800183e:	44c2      	add	sl, r8
 8001840:	44d1      	add	r9, sl
 8001842:	44cb      	add	fp, r9
 8001844:	428f      	cmp	r7, r1
 8001846:	41bf      	sbcs	r7, r7
 8001848:	45c2      	cmp	sl, r8
 800184a:	4189      	sbcs	r1, r1
 800184c:	4599      	cmp	r9, r3
 800184e:	419b      	sbcs	r3, r3
 8001850:	4593      	cmp	fp, r2
 8001852:	4192      	sbcs	r2, r2
 8001854:	427f      	negs	r7, r7
 8001856:	4249      	negs	r1, r1
 8001858:	0c2d      	lsrs	r5, r5, #16
 800185a:	4252      	negs	r2, r2
 800185c:	430f      	orrs	r7, r1
 800185e:	425b      	negs	r3, r3
 8001860:	4313      	orrs	r3, r2
 8001862:	197f      	adds	r7, r7, r5
 8001864:	18ff      	adds	r7, r7, r3
 8001866:	465b      	mov	r3, fp
 8001868:	193c      	adds	r4, r7, r4
 800186a:	0ddb      	lsrs	r3, r3, #23
 800186c:	9a05      	ldr	r2, [sp, #20]
 800186e:	0264      	lsls	r4, r4, #9
 8001870:	431c      	orrs	r4, r3
 8001872:	0243      	lsls	r3, r0, #9
 8001874:	4313      	orrs	r3, r2
 8001876:	1e5d      	subs	r5, r3, #1
 8001878:	41ab      	sbcs	r3, r5
 800187a:	465a      	mov	r2, fp
 800187c:	0dc0      	lsrs	r0, r0, #23
 800187e:	4303      	orrs	r3, r0
 8001880:	0252      	lsls	r2, r2, #9
 8001882:	4313      	orrs	r3, r2
 8001884:	01e2      	lsls	r2, r4, #7
 8001886:	d556      	bpl.n	8001936 <__aeabi_dmul+0x426>
 8001888:	2001      	movs	r0, #1
 800188a:	085a      	lsrs	r2, r3, #1
 800188c:	4003      	ands	r3, r0
 800188e:	4313      	orrs	r3, r2
 8001890:	07e2      	lsls	r2, r4, #31
 8001892:	4313      	orrs	r3, r2
 8001894:	0864      	lsrs	r4, r4, #1
 8001896:	485a      	ldr	r0, [pc, #360]	; (8001a00 <__aeabi_dmul+0x4f0>)
 8001898:	4460      	add	r0, ip
 800189a:	2800      	cmp	r0, #0
 800189c:	dd4d      	ble.n	800193a <__aeabi_dmul+0x42a>
 800189e:	075a      	lsls	r2, r3, #29
 80018a0:	d009      	beq.n	80018b6 <__aeabi_dmul+0x3a6>
 80018a2:	220f      	movs	r2, #15
 80018a4:	401a      	ands	r2, r3
 80018a6:	2a04      	cmp	r2, #4
 80018a8:	d005      	beq.n	80018b6 <__aeabi_dmul+0x3a6>
 80018aa:	1d1a      	adds	r2, r3, #4
 80018ac:	429a      	cmp	r2, r3
 80018ae:	419b      	sbcs	r3, r3
 80018b0:	425b      	negs	r3, r3
 80018b2:	18e4      	adds	r4, r4, r3
 80018b4:	0013      	movs	r3, r2
 80018b6:	01e2      	lsls	r2, r4, #7
 80018b8:	d504      	bpl.n	80018c4 <__aeabi_dmul+0x3b4>
 80018ba:	2080      	movs	r0, #128	; 0x80
 80018bc:	4a51      	ldr	r2, [pc, #324]	; (8001a04 <__aeabi_dmul+0x4f4>)
 80018be:	00c0      	lsls	r0, r0, #3
 80018c0:	4014      	ands	r4, r2
 80018c2:	4460      	add	r0, ip
 80018c4:	4a50      	ldr	r2, [pc, #320]	; (8001a08 <__aeabi_dmul+0x4f8>)
 80018c6:	4290      	cmp	r0, r2
 80018c8:	dd00      	ble.n	80018cc <__aeabi_dmul+0x3bc>
 80018ca:	e6e3      	b.n	8001694 <__aeabi_dmul+0x184>
 80018cc:	2501      	movs	r5, #1
 80018ce:	08db      	lsrs	r3, r3, #3
 80018d0:	0762      	lsls	r2, r4, #29
 80018d2:	431a      	orrs	r2, r3
 80018d4:	0264      	lsls	r4, r4, #9
 80018d6:	9b01      	ldr	r3, [sp, #4]
 80018d8:	4691      	mov	r9, r2
 80018da:	0b22      	lsrs	r2, r4, #12
 80018dc:	0544      	lsls	r4, r0, #21
 80018de:	0d64      	lsrs	r4, r4, #21
 80018e0:	401d      	ands	r5, r3
 80018e2:	e67c      	b.n	80015de <__aeabi_dmul+0xce>
 80018e4:	2280      	movs	r2, #128	; 0x80
 80018e6:	4659      	mov	r1, fp
 80018e8:	0312      	lsls	r2, r2, #12
 80018ea:	4211      	tst	r1, r2
 80018ec:	d008      	beq.n	8001900 <__aeabi_dmul+0x3f0>
 80018ee:	4214      	tst	r4, r2
 80018f0:	d106      	bne.n	8001900 <__aeabi_dmul+0x3f0>
 80018f2:	4322      	orrs	r2, r4
 80018f4:	0312      	lsls	r2, r2, #12
 80018f6:	0b12      	lsrs	r2, r2, #12
 80018f8:	4645      	mov	r5, r8
 80018fa:	4699      	mov	r9, r3
 80018fc:	4c43      	ldr	r4, [pc, #268]	; (8001a0c <__aeabi_dmul+0x4fc>)
 80018fe:	e66e      	b.n	80015de <__aeabi_dmul+0xce>
 8001900:	465b      	mov	r3, fp
 8001902:	431a      	orrs	r2, r3
 8001904:	0312      	lsls	r2, r2, #12
 8001906:	0b12      	lsrs	r2, r2, #12
 8001908:	4c40      	ldr	r4, [pc, #256]	; (8001a0c <__aeabi_dmul+0x4fc>)
 800190a:	e668      	b.n	80015de <__aeabi_dmul+0xce>
 800190c:	0003      	movs	r3, r0
 800190e:	4654      	mov	r4, sl
 8001910:	3b28      	subs	r3, #40	; 0x28
 8001912:	409c      	lsls	r4, r3
 8001914:	2300      	movs	r3, #0
 8001916:	e6b9      	b.n	800168c <__aeabi_dmul+0x17c>
 8001918:	f000 fc5e 	bl	80021d8 <__clzsi2>
 800191c:	3020      	adds	r0, #32
 800191e:	e6a6      	b.n	800166e <__aeabi_dmul+0x15e>
 8001920:	0003      	movs	r3, r0
 8001922:	3b28      	subs	r3, #40	; 0x28
 8001924:	409f      	lsls	r7, r3
 8001926:	2300      	movs	r3, #0
 8001928:	46bb      	mov	fp, r7
 800192a:	4699      	mov	r9, r3
 800192c:	e68a      	b.n	8001644 <__aeabi_dmul+0x134>
 800192e:	f000 fc53 	bl	80021d8 <__clzsi2>
 8001932:	3020      	adds	r0, #32
 8001934:	e674      	b.n	8001620 <__aeabi_dmul+0x110>
 8001936:	46b4      	mov	ip, r6
 8001938:	e7ad      	b.n	8001896 <__aeabi_dmul+0x386>
 800193a:	2501      	movs	r5, #1
 800193c:	1a2a      	subs	r2, r5, r0
 800193e:	2a38      	cmp	r2, #56	; 0x38
 8001940:	dd06      	ble.n	8001950 <__aeabi_dmul+0x440>
 8001942:	9b01      	ldr	r3, [sp, #4]
 8001944:	2400      	movs	r4, #0
 8001946:	401d      	ands	r5, r3
 8001948:	2300      	movs	r3, #0
 800194a:	2200      	movs	r2, #0
 800194c:	4699      	mov	r9, r3
 800194e:	e646      	b.n	80015de <__aeabi_dmul+0xce>
 8001950:	2a1f      	cmp	r2, #31
 8001952:	dc21      	bgt.n	8001998 <__aeabi_dmul+0x488>
 8001954:	2520      	movs	r5, #32
 8001956:	0020      	movs	r0, r4
 8001958:	1aad      	subs	r5, r5, r2
 800195a:	001e      	movs	r6, r3
 800195c:	40ab      	lsls	r3, r5
 800195e:	40a8      	lsls	r0, r5
 8001960:	40d6      	lsrs	r6, r2
 8001962:	1e5d      	subs	r5, r3, #1
 8001964:	41ab      	sbcs	r3, r5
 8001966:	4330      	orrs	r0, r6
 8001968:	4318      	orrs	r0, r3
 800196a:	40d4      	lsrs	r4, r2
 800196c:	0743      	lsls	r3, r0, #29
 800196e:	d009      	beq.n	8001984 <__aeabi_dmul+0x474>
 8001970:	230f      	movs	r3, #15
 8001972:	4003      	ands	r3, r0
 8001974:	2b04      	cmp	r3, #4
 8001976:	d005      	beq.n	8001984 <__aeabi_dmul+0x474>
 8001978:	0003      	movs	r3, r0
 800197a:	1d18      	adds	r0, r3, #4
 800197c:	4298      	cmp	r0, r3
 800197e:	419b      	sbcs	r3, r3
 8001980:	425b      	negs	r3, r3
 8001982:	18e4      	adds	r4, r4, r3
 8001984:	0223      	lsls	r3, r4, #8
 8001986:	d521      	bpl.n	80019cc <__aeabi_dmul+0x4bc>
 8001988:	2501      	movs	r5, #1
 800198a:	9b01      	ldr	r3, [sp, #4]
 800198c:	2401      	movs	r4, #1
 800198e:	401d      	ands	r5, r3
 8001990:	2300      	movs	r3, #0
 8001992:	2200      	movs	r2, #0
 8001994:	4699      	mov	r9, r3
 8001996:	e622      	b.n	80015de <__aeabi_dmul+0xce>
 8001998:	251f      	movs	r5, #31
 800199a:	0021      	movs	r1, r4
 800199c:	426d      	negs	r5, r5
 800199e:	1a28      	subs	r0, r5, r0
 80019a0:	40c1      	lsrs	r1, r0
 80019a2:	0008      	movs	r0, r1
 80019a4:	2a20      	cmp	r2, #32
 80019a6:	d01d      	beq.n	80019e4 <__aeabi_dmul+0x4d4>
 80019a8:	355f      	adds	r5, #95	; 0x5f
 80019aa:	1aaa      	subs	r2, r5, r2
 80019ac:	4094      	lsls	r4, r2
 80019ae:	4323      	orrs	r3, r4
 80019b0:	1e5c      	subs	r4, r3, #1
 80019b2:	41a3      	sbcs	r3, r4
 80019b4:	2507      	movs	r5, #7
 80019b6:	4303      	orrs	r3, r0
 80019b8:	401d      	ands	r5, r3
 80019ba:	2200      	movs	r2, #0
 80019bc:	2d00      	cmp	r5, #0
 80019be:	d009      	beq.n	80019d4 <__aeabi_dmul+0x4c4>
 80019c0:	220f      	movs	r2, #15
 80019c2:	2400      	movs	r4, #0
 80019c4:	401a      	ands	r2, r3
 80019c6:	0018      	movs	r0, r3
 80019c8:	2a04      	cmp	r2, #4
 80019ca:	d1d6      	bne.n	800197a <__aeabi_dmul+0x46a>
 80019cc:	0003      	movs	r3, r0
 80019ce:	0765      	lsls	r5, r4, #29
 80019d0:	0264      	lsls	r4, r4, #9
 80019d2:	0b22      	lsrs	r2, r4, #12
 80019d4:	08db      	lsrs	r3, r3, #3
 80019d6:	432b      	orrs	r3, r5
 80019d8:	2501      	movs	r5, #1
 80019da:	4699      	mov	r9, r3
 80019dc:	9b01      	ldr	r3, [sp, #4]
 80019de:	2400      	movs	r4, #0
 80019e0:	401d      	ands	r5, r3
 80019e2:	e5fc      	b.n	80015de <__aeabi_dmul+0xce>
 80019e4:	2400      	movs	r4, #0
 80019e6:	e7e2      	b.n	80019ae <__aeabi_dmul+0x49e>
 80019e8:	2280      	movs	r2, #128	; 0x80
 80019ea:	2501      	movs	r5, #1
 80019ec:	0312      	lsls	r2, r2, #12
 80019ee:	4322      	orrs	r2, r4
 80019f0:	9901      	ldr	r1, [sp, #4]
 80019f2:	0312      	lsls	r2, r2, #12
 80019f4:	0b12      	lsrs	r2, r2, #12
 80019f6:	400d      	ands	r5, r1
 80019f8:	4699      	mov	r9, r3
 80019fa:	4c04      	ldr	r4, [pc, #16]	; (8001a0c <__aeabi_dmul+0x4fc>)
 80019fc:	e5ef      	b.n	80015de <__aeabi_dmul+0xce>
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	000003ff 	.word	0x000003ff
 8001a04:	feffffff 	.word	0xfeffffff
 8001a08:	000007fe 	.word	0x000007fe
 8001a0c:	000007ff 	.word	0x000007ff

08001a10 <__aeabi_dsub>:
 8001a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a12:	4646      	mov	r6, r8
 8001a14:	46d6      	mov	lr, sl
 8001a16:	464f      	mov	r7, r9
 8001a18:	030c      	lsls	r4, r1, #12
 8001a1a:	b5c0      	push	{r6, r7, lr}
 8001a1c:	0fcd      	lsrs	r5, r1, #31
 8001a1e:	004e      	lsls	r6, r1, #1
 8001a20:	0a61      	lsrs	r1, r4, #9
 8001a22:	0f44      	lsrs	r4, r0, #29
 8001a24:	430c      	orrs	r4, r1
 8001a26:	00c1      	lsls	r1, r0, #3
 8001a28:	0058      	lsls	r0, r3, #1
 8001a2a:	0d40      	lsrs	r0, r0, #21
 8001a2c:	4684      	mov	ip, r0
 8001a2e:	468a      	mov	sl, r1
 8001a30:	000f      	movs	r7, r1
 8001a32:	0319      	lsls	r1, r3, #12
 8001a34:	0f50      	lsrs	r0, r2, #29
 8001a36:	0a49      	lsrs	r1, r1, #9
 8001a38:	4301      	orrs	r1, r0
 8001a3a:	48c6      	ldr	r0, [pc, #792]	; (8001d54 <__aeabi_dsub+0x344>)
 8001a3c:	0d76      	lsrs	r6, r6, #21
 8001a3e:	46a8      	mov	r8, r5
 8001a40:	0fdb      	lsrs	r3, r3, #31
 8001a42:	00d2      	lsls	r2, r2, #3
 8001a44:	4584      	cmp	ip, r0
 8001a46:	d100      	bne.n	8001a4a <__aeabi_dsub+0x3a>
 8001a48:	e0d8      	b.n	8001bfc <__aeabi_dsub+0x1ec>
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	4043      	eors	r3, r0
 8001a4e:	42ab      	cmp	r3, r5
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dsub+0x44>
 8001a52:	e0a6      	b.n	8001ba2 <__aeabi_dsub+0x192>
 8001a54:	4660      	mov	r0, ip
 8001a56:	1a35      	subs	r5, r6, r0
 8001a58:	2d00      	cmp	r5, #0
 8001a5a:	dc00      	bgt.n	8001a5e <__aeabi_dsub+0x4e>
 8001a5c:	e105      	b.n	8001c6a <__aeabi_dsub+0x25a>
 8001a5e:	2800      	cmp	r0, #0
 8001a60:	d110      	bne.n	8001a84 <__aeabi_dsub+0x74>
 8001a62:	000b      	movs	r3, r1
 8001a64:	4313      	orrs	r3, r2
 8001a66:	d100      	bne.n	8001a6a <__aeabi_dsub+0x5a>
 8001a68:	e0d7      	b.n	8001c1a <__aeabi_dsub+0x20a>
 8001a6a:	1e6b      	subs	r3, r5, #1
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d000      	beq.n	8001a72 <__aeabi_dsub+0x62>
 8001a70:	e14b      	b.n	8001d0a <__aeabi_dsub+0x2fa>
 8001a72:	4653      	mov	r3, sl
 8001a74:	1a9f      	subs	r7, r3, r2
 8001a76:	45ba      	cmp	sl, r7
 8001a78:	4180      	sbcs	r0, r0
 8001a7a:	1a64      	subs	r4, r4, r1
 8001a7c:	4240      	negs	r0, r0
 8001a7e:	1a24      	subs	r4, r4, r0
 8001a80:	2601      	movs	r6, #1
 8001a82:	e01e      	b.n	8001ac2 <__aeabi_dsub+0xb2>
 8001a84:	4bb3      	ldr	r3, [pc, #716]	; (8001d54 <__aeabi_dsub+0x344>)
 8001a86:	429e      	cmp	r6, r3
 8001a88:	d048      	beq.n	8001b1c <__aeabi_dsub+0x10c>
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	041b      	lsls	r3, r3, #16
 8001a8e:	4319      	orrs	r1, r3
 8001a90:	2d38      	cmp	r5, #56	; 0x38
 8001a92:	dd00      	ble.n	8001a96 <__aeabi_dsub+0x86>
 8001a94:	e119      	b.n	8001cca <__aeabi_dsub+0x2ba>
 8001a96:	2d1f      	cmp	r5, #31
 8001a98:	dd00      	ble.n	8001a9c <__aeabi_dsub+0x8c>
 8001a9a:	e14c      	b.n	8001d36 <__aeabi_dsub+0x326>
 8001a9c:	2320      	movs	r3, #32
 8001a9e:	000f      	movs	r7, r1
 8001aa0:	1b5b      	subs	r3, r3, r5
 8001aa2:	0010      	movs	r0, r2
 8001aa4:	409a      	lsls	r2, r3
 8001aa6:	409f      	lsls	r7, r3
 8001aa8:	40e8      	lsrs	r0, r5
 8001aaa:	1e53      	subs	r3, r2, #1
 8001aac:	419a      	sbcs	r2, r3
 8001aae:	40e9      	lsrs	r1, r5
 8001ab0:	4307      	orrs	r7, r0
 8001ab2:	4317      	orrs	r7, r2
 8001ab4:	4653      	mov	r3, sl
 8001ab6:	1bdf      	subs	r7, r3, r7
 8001ab8:	1a61      	subs	r1, r4, r1
 8001aba:	45ba      	cmp	sl, r7
 8001abc:	41a4      	sbcs	r4, r4
 8001abe:	4264      	negs	r4, r4
 8001ac0:	1b0c      	subs	r4, r1, r4
 8001ac2:	0223      	lsls	r3, r4, #8
 8001ac4:	d400      	bmi.n	8001ac8 <__aeabi_dsub+0xb8>
 8001ac6:	e0c5      	b.n	8001c54 <__aeabi_dsub+0x244>
 8001ac8:	0264      	lsls	r4, r4, #9
 8001aca:	0a65      	lsrs	r5, r4, #9
 8001acc:	2d00      	cmp	r5, #0
 8001ace:	d100      	bne.n	8001ad2 <__aeabi_dsub+0xc2>
 8001ad0:	e0f6      	b.n	8001cc0 <__aeabi_dsub+0x2b0>
 8001ad2:	0028      	movs	r0, r5
 8001ad4:	f000 fb80 	bl	80021d8 <__clzsi2>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	3b08      	subs	r3, #8
 8001adc:	2b1f      	cmp	r3, #31
 8001ade:	dd00      	ble.n	8001ae2 <__aeabi_dsub+0xd2>
 8001ae0:	e0e9      	b.n	8001cb6 <__aeabi_dsub+0x2a6>
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	003c      	movs	r4, r7
 8001ae6:	1ad2      	subs	r2, r2, r3
 8001ae8:	409d      	lsls	r5, r3
 8001aea:	40d4      	lsrs	r4, r2
 8001aec:	409f      	lsls	r7, r3
 8001aee:	4325      	orrs	r5, r4
 8001af0:	429e      	cmp	r6, r3
 8001af2:	dd00      	ble.n	8001af6 <__aeabi_dsub+0xe6>
 8001af4:	e0db      	b.n	8001cae <__aeabi_dsub+0x29e>
 8001af6:	1b9e      	subs	r6, r3, r6
 8001af8:	1c73      	adds	r3, r6, #1
 8001afa:	2b1f      	cmp	r3, #31
 8001afc:	dd00      	ble.n	8001b00 <__aeabi_dsub+0xf0>
 8001afe:	e10a      	b.n	8001d16 <__aeabi_dsub+0x306>
 8001b00:	2220      	movs	r2, #32
 8001b02:	0038      	movs	r0, r7
 8001b04:	1ad2      	subs	r2, r2, r3
 8001b06:	0029      	movs	r1, r5
 8001b08:	4097      	lsls	r7, r2
 8001b0a:	002c      	movs	r4, r5
 8001b0c:	4091      	lsls	r1, r2
 8001b0e:	40d8      	lsrs	r0, r3
 8001b10:	1e7a      	subs	r2, r7, #1
 8001b12:	4197      	sbcs	r7, r2
 8001b14:	40dc      	lsrs	r4, r3
 8001b16:	2600      	movs	r6, #0
 8001b18:	4301      	orrs	r1, r0
 8001b1a:	430f      	orrs	r7, r1
 8001b1c:	077b      	lsls	r3, r7, #29
 8001b1e:	d009      	beq.n	8001b34 <__aeabi_dsub+0x124>
 8001b20:	230f      	movs	r3, #15
 8001b22:	403b      	ands	r3, r7
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d005      	beq.n	8001b34 <__aeabi_dsub+0x124>
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	42bb      	cmp	r3, r7
 8001b2c:	41bf      	sbcs	r7, r7
 8001b2e:	427f      	negs	r7, r7
 8001b30:	19e4      	adds	r4, r4, r7
 8001b32:	001f      	movs	r7, r3
 8001b34:	0223      	lsls	r3, r4, #8
 8001b36:	d525      	bpl.n	8001b84 <__aeabi_dsub+0x174>
 8001b38:	4b86      	ldr	r3, [pc, #536]	; (8001d54 <__aeabi_dsub+0x344>)
 8001b3a:	3601      	adds	r6, #1
 8001b3c:	429e      	cmp	r6, r3
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dsub+0x132>
 8001b40:	e0af      	b.n	8001ca2 <__aeabi_dsub+0x292>
 8001b42:	4b85      	ldr	r3, [pc, #532]	; (8001d58 <__aeabi_dsub+0x348>)
 8001b44:	2501      	movs	r5, #1
 8001b46:	401c      	ands	r4, r3
 8001b48:	4643      	mov	r3, r8
 8001b4a:	0762      	lsls	r2, r4, #29
 8001b4c:	08ff      	lsrs	r7, r7, #3
 8001b4e:	0264      	lsls	r4, r4, #9
 8001b50:	0576      	lsls	r6, r6, #21
 8001b52:	4317      	orrs	r7, r2
 8001b54:	0b24      	lsrs	r4, r4, #12
 8001b56:	0d76      	lsrs	r6, r6, #21
 8001b58:	401d      	ands	r5, r3
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	0324      	lsls	r4, r4, #12
 8001b5e:	0b23      	lsrs	r3, r4, #12
 8001b60:	0d0c      	lsrs	r4, r1, #20
 8001b62:	4a7e      	ldr	r2, [pc, #504]	; (8001d5c <__aeabi_dsub+0x34c>)
 8001b64:	0524      	lsls	r4, r4, #20
 8001b66:	431c      	orrs	r4, r3
 8001b68:	4014      	ands	r4, r2
 8001b6a:	0533      	lsls	r3, r6, #20
 8001b6c:	4323      	orrs	r3, r4
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	07ed      	lsls	r5, r5, #31
 8001b72:	085b      	lsrs	r3, r3, #1
 8001b74:	432b      	orrs	r3, r5
 8001b76:	0038      	movs	r0, r7
 8001b78:	0019      	movs	r1, r3
 8001b7a:	bc1c      	pop	{r2, r3, r4}
 8001b7c:	4690      	mov	r8, r2
 8001b7e:	4699      	mov	r9, r3
 8001b80:	46a2      	mov	sl, r4
 8001b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b84:	2501      	movs	r5, #1
 8001b86:	4643      	mov	r3, r8
 8001b88:	0762      	lsls	r2, r4, #29
 8001b8a:	08ff      	lsrs	r7, r7, #3
 8001b8c:	4317      	orrs	r7, r2
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	401d      	ands	r5, r3
 8001b92:	4b70      	ldr	r3, [pc, #448]	; (8001d54 <__aeabi_dsub+0x344>)
 8001b94:	429e      	cmp	r6, r3
 8001b96:	d036      	beq.n	8001c06 <__aeabi_dsub+0x1f6>
 8001b98:	0324      	lsls	r4, r4, #12
 8001b9a:	0576      	lsls	r6, r6, #21
 8001b9c:	0b24      	lsrs	r4, r4, #12
 8001b9e:	0d76      	lsrs	r6, r6, #21
 8001ba0:	e7db      	b.n	8001b5a <__aeabi_dsub+0x14a>
 8001ba2:	4663      	mov	r3, ip
 8001ba4:	1af3      	subs	r3, r6, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	dc00      	bgt.n	8001bac <__aeabi_dsub+0x19c>
 8001baa:	e094      	b.n	8001cd6 <__aeabi_dsub+0x2c6>
 8001bac:	4660      	mov	r0, ip
 8001bae:	2800      	cmp	r0, #0
 8001bb0:	d035      	beq.n	8001c1e <__aeabi_dsub+0x20e>
 8001bb2:	4868      	ldr	r0, [pc, #416]	; (8001d54 <__aeabi_dsub+0x344>)
 8001bb4:	4286      	cmp	r6, r0
 8001bb6:	d0b1      	beq.n	8001b1c <__aeabi_dsub+0x10c>
 8001bb8:	2780      	movs	r7, #128	; 0x80
 8001bba:	043f      	lsls	r7, r7, #16
 8001bbc:	4339      	orrs	r1, r7
 8001bbe:	2b38      	cmp	r3, #56	; 0x38
 8001bc0:	dc00      	bgt.n	8001bc4 <__aeabi_dsub+0x1b4>
 8001bc2:	e0fd      	b.n	8001dc0 <__aeabi_dsub+0x3b0>
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	0017      	movs	r7, r2
 8001bc8:	2100      	movs	r1, #0
 8001bca:	1e7a      	subs	r2, r7, #1
 8001bcc:	4197      	sbcs	r7, r2
 8001bce:	4457      	add	r7, sl
 8001bd0:	4557      	cmp	r7, sl
 8001bd2:	4180      	sbcs	r0, r0
 8001bd4:	1909      	adds	r1, r1, r4
 8001bd6:	4244      	negs	r4, r0
 8001bd8:	190c      	adds	r4, r1, r4
 8001bda:	0223      	lsls	r3, r4, #8
 8001bdc:	d53a      	bpl.n	8001c54 <__aeabi_dsub+0x244>
 8001bde:	4b5d      	ldr	r3, [pc, #372]	; (8001d54 <__aeabi_dsub+0x344>)
 8001be0:	3601      	adds	r6, #1
 8001be2:	429e      	cmp	r6, r3
 8001be4:	d100      	bne.n	8001be8 <__aeabi_dsub+0x1d8>
 8001be6:	e14b      	b.n	8001e80 <__aeabi_dsub+0x470>
 8001be8:	2201      	movs	r2, #1
 8001bea:	4b5b      	ldr	r3, [pc, #364]	; (8001d58 <__aeabi_dsub+0x348>)
 8001bec:	401c      	ands	r4, r3
 8001bee:	087b      	lsrs	r3, r7, #1
 8001bf0:	4017      	ands	r7, r2
 8001bf2:	431f      	orrs	r7, r3
 8001bf4:	07e2      	lsls	r2, r4, #31
 8001bf6:	4317      	orrs	r7, r2
 8001bf8:	0864      	lsrs	r4, r4, #1
 8001bfa:	e78f      	b.n	8001b1c <__aeabi_dsub+0x10c>
 8001bfc:	0008      	movs	r0, r1
 8001bfe:	4310      	orrs	r0, r2
 8001c00:	d000      	beq.n	8001c04 <__aeabi_dsub+0x1f4>
 8001c02:	e724      	b.n	8001a4e <__aeabi_dsub+0x3e>
 8001c04:	e721      	b.n	8001a4a <__aeabi_dsub+0x3a>
 8001c06:	0023      	movs	r3, r4
 8001c08:	433b      	orrs	r3, r7
 8001c0a:	d100      	bne.n	8001c0e <__aeabi_dsub+0x1fe>
 8001c0c:	e1b9      	b.n	8001f82 <__aeabi_dsub+0x572>
 8001c0e:	2280      	movs	r2, #128	; 0x80
 8001c10:	0312      	lsls	r2, r2, #12
 8001c12:	4314      	orrs	r4, r2
 8001c14:	0324      	lsls	r4, r4, #12
 8001c16:	0b24      	lsrs	r4, r4, #12
 8001c18:	e79f      	b.n	8001b5a <__aeabi_dsub+0x14a>
 8001c1a:	002e      	movs	r6, r5
 8001c1c:	e77e      	b.n	8001b1c <__aeabi_dsub+0x10c>
 8001c1e:	0008      	movs	r0, r1
 8001c20:	4310      	orrs	r0, r2
 8001c22:	d100      	bne.n	8001c26 <__aeabi_dsub+0x216>
 8001c24:	e0ca      	b.n	8001dbc <__aeabi_dsub+0x3ac>
 8001c26:	1e58      	subs	r0, r3, #1
 8001c28:	4684      	mov	ip, r0
 8001c2a:	2800      	cmp	r0, #0
 8001c2c:	d000      	beq.n	8001c30 <__aeabi_dsub+0x220>
 8001c2e:	e0e7      	b.n	8001e00 <__aeabi_dsub+0x3f0>
 8001c30:	4452      	add	r2, sl
 8001c32:	4552      	cmp	r2, sl
 8001c34:	4180      	sbcs	r0, r0
 8001c36:	1864      	adds	r4, r4, r1
 8001c38:	4240      	negs	r0, r0
 8001c3a:	1824      	adds	r4, r4, r0
 8001c3c:	0017      	movs	r7, r2
 8001c3e:	2601      	movs	r6, #1
 8001c40:	0223      	lsls	r3, r4, #8
 8001c42:	d507      	bpl.n	8001c54 <__aeabi_dsub+0x244>
 8001c44:	2602      	movs	r6, #2
 8001c46:	e7cf      	b.n	8001be8 <__aeabi_dsub+0x1d8>
 8001c48:	4664      	mov	r4, ip
 8001c4a:	432c      	orrs	r4, r5
 8001c4c:	d100      	bne.n	8001c50 <__aeabi_dsub+0x240>
 8001c4e:	e1b3      	b.n	8001fb8 <__aeabi_dsub+0x5a8>
 8001c50:	002c      	movs	r4, r5
 8001c52:	4667      	mov	r7, ip
 8001c54:	077b      	lsls	r3, r7, #29
 8001c56:	d000      	beq.n	8001c5a <__aeabi_dsub+0x24a>
 8001c58:	e762      	b.n	8001b20 <__aeabi_dsub+0x110>
 8001c5a:	0763      	lsls	r3, r4, #29
 8001c5c:	08ff      	lsrs	r7, r7, #3
 8001c5e:	431f      	orrs	r7, r3
 8001c60:	2501      	movs	r5, #1
 8001c62:	4643      	mov	r3, r8
 8001c64:	08e4      	lsrs	r4, r4, #3
 8001c66:	401d      	ands	r5, r3
 8001c68:	e793      	b.n	8001b92 <__aeabi_dsub+0x182>
 8001c6a:	2d00      	cmp	r5, #0
 8001c6c:	d178      	bne.n	8001d60 <__aeabi_dsub+0x350>
 8001c6e:	1c75      	adds	r5, r6, #1
 8001c70:	056d      	lsls	r5, r5, #21
 8001c72:	0d6d      	lsrs	r5, r5, #21
 8001c74:	2d01      	cmp	r5, #1
 8001c76:	dc00      	bgt.n	8001c7a <__aeabi_dsub+0x26a>
 8001c78:	e0f2      	b.n	8001e60 <__aeabi_dsub+0x450>
 8001c7a:	4650      	mov	r0, sl
 8001c7c:	1a80      	subs	r0, r0, r2
 8001c7e:	4582      	cmp	sl, r0
 8001c80:	41bf      	sbcs	r7, r7
 8001c82:	1a65      	subs	r5, r4, r1
 8001c84:	427f      	negs	r7, r7
 8001c86:	1bed      	subs	r5, r5, r7
 8001c88:	4684      	mov	ip, r0
 8001c8a:	0228      	lsls	r0, r5, #8
 8001c8c:	d400      	bmi.n	8001c90 <__aeabi_dsub+0x280>
 8001c8e:	e08c      	b.n	8001daa <__aeabi_dsub+0x39a>
 8001c90:	4650      	mov	r0, sl
 8001c92:	1a17      	subs	r7, r2, r0
 8001c94:	42ba      	cmp	r2, r7
 8001c96:	4192      	sbcs	r2, r2
 8001c98:	1b0c      	subs	r4, r1, r4
 8001c9a:	4255      	negs	r5, r2
 8001c9c:	1b65      	subs	r5, r4, r5
 8001c9e:	4698      	mov	r8, r3
 8001ca0:	e714      	b.n	8001acc <__aeabi_dsub+0xbc>
 8001ca2:	2501      	movs	r5, #1
 8001ca4:	4643      	mov	r3, r8
 8001ca6:	2400      	movs	r4, #0
 8001ca8:	401d      	ands	r5, r3
 8001caa:	2700      	movs	r7, #0
 8001cac:	e755      	b.n	8001b5a <__aeabi_dsub+0x14a>
 8001cae:	4c2a      	ldr	r4, [pc, #168]	; (8001d58 <__aeabi_dsub+0x348>)
 8001cb0:	1af6      	subs	r6, r6, r3
 8001cb2:	402c      	ands	r4, r5
 8001cb4:	e732      	b.n	8001b1c <__aeabi_dsub+0x10c>
 8001cb6:	003d      	movs	r5, r7
 8001cb8:	3828      	subs	r0, #40	; 0x28
 8001cba:	4085      	lsls	r5, r0
 8001cbc:	2700      	movs	r7, #0
 8001cbe:	e717      	b.n	8001af0 <__aeabi_dsub+0xe0>
 8001cc0:	0038      	movs	r0, r7
 8001cc2:	f000 fa89 	bl	80021d8 <__clzsi2>
 8001cc6:	3020      	adds	r0, #32
 8001cc8:	e706      	b.n	8001ad8 <__aeabi_dsub+0xc8>
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	0017      	movs	r7, r2
 8001cce:	2100      	movs	r1, #0
 8001cd0:	1e7a      	subs	r2, r7, #1
 8001cd2:	4197      	sbcs	r7, r2
 8001cd4:	e6ee      	b.n	8001ab4 <__aeabi_dsub+0xa4>
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d000      	beq.n	8001cdc <__aeabi_dsub+0x2cc>
 8001cda:	e0e5      	b.n	8001ea8 <__aeabi_dsub+0x498>
 8001cdc:	1c73      	adds	r3, r6, #1
 8001cde:	469c      	mov	ip, r3
 8001ce0:	055b      	lsls	r3, r3, #21
 8001ce2:	0d5b      	lsrs	r3, r3, #21
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	dc00      	bgt.n	8001cea <__aeabi_dsub+0x2da>
 8001ce8:	e09f      	b.n	8001e2a <__aeabi_dsub+0x41a>
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <__aeabi_dsub+0x344>)
 8001cec:	459c      	cmp	ip, r3
 8001cee:	d100      	bne.n	8001cf2 <__aeabi_dsub+0x2e2>
 8001cf0:	e0c5      	b.n	8001e7e <__aeabi_dsub+0x46e>
 8001cf2:	4452      	add	r2, sl
 8001cf4:	4552      	cmp	r2, sl
 8001cf6:	4180      	sbcs	r0, r0
 8001cf8:	1864      	adds	r4, r4, r1
 8001cfa:	4240      	negs	r0, r0
 8001cfc:	1824      	adds	r4, r4, r0
 8001cfe:	07e7      	lsls	r7, r4, #31
 8001d00:	0852      	lsrs	r2, r2, #1
 8001d02:	4317      	orrs	r7, r2
 8001d04:	0864      	lsrs	r4, r4, #1
 8001d06:	4666      	mov	r6, ip
 8001d08:	e708      	b.n	8001b1c <__aeabi_dsub+0x10c>
 8001d0a:	4812      	ldr	r0, [pc, #72]	; (8001d54 <__aeabi_dsub+0x344>)
 8001d0c:	4285      	cmp	r5, r0
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dsub+0x302>
 8001d10:	e085      	b.n	8001e1e <__aeabi_dsub+0x40e>
 8001d12:	001d      	movs	r5, r3
 8001d14:	e6bc      	b.n	8001a90 <__aeabi_dsub+0x80>
 8001d16:	0029      	movs	r1, r5
 8001d18:	3e1f      	subs	r6, #31
 8001d1a:	40f1      	lsrs	r1, r6
 8001d1c:	2b20      	cmp	r3, #32
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_dsub+0x312>
 8001d20:	e07f      	b.n	8001e22 <__aeabi_dsub+0x412>
 8001d22:	2240      	movs	r2, #64	; 0x40
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	409d      	lsls	r5, r3
 8001d28:	432f      	orrs	r7, r5
 8001d2a:	1e7d      	subs	r5, r7, #1
 8001d2c:	41af      	sbcs	r7, r5
 8001d2e:	2400      	movs	r4, #0
 8001d30:	430f      	orrs	r7, r1
 8001d32:	2600      	movs	r6, #0
 8001d34:	e78e      	b.n	8001c54 <__aeabi_dsub+0x244>
 8001d36:	002b      	movs	r3, r5
 8001d38:	000f      	movs	r7, r1
 8001d3a:	3b20      	subs	r3, #32
 8001d3c:	40df      	lsrs	r7, r3
 8001d3e:	2d20      	cmp	r5, #32
 8001d40:	d071      	beq.n	8001e26 <__aeabi_dsub+0x416>
 8001d42:	2340      	movs	r3, #64	; 0x40
 8001d44:	1b5d      	subs	r5, r3, r5
 8001d46:	40a9      	lsls	r1, r5
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	1e51      	subs	r1, r2, #1
 8001d4c:	418a      	sbcs	r2, r1
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4317      	orrs	r7, r2
 8001d52:	e6af      	b.n	8001ab4 <__aeabi_dsub+0xa4>
 8001d54:	000007ff 	.word	0x000007ff
 8001d58:	ff7fffff 	.word	0xff7fffff
 8001d5c:	800fffff 	.word	0x800fffff
 8001d60:	2e00      	cmp	r6, #0
 8001d62:	d03e      	beq.n	8001de2 <__aeabi_dsub+0x3d2>
 8001d64:	4eb3      	ldr	r6, [pc, #716]	; (8002034 <__aeabi_dsub+0x624>)
 8001d66:	45b4      	cmp	ip, r6
 8001d68:	d045      	beq.n	8001df6 <__aeabi_dsub+0x3e6>
 8001d6a:	2680      	movs	r6, #128	; 0x80
 8001d6c:	0436      	lsls	r6, r6, #16
 8001d6e:	426d      	negs	r5, r5
 8001d70:	4334      	orrs	r4, r6
 8001d72:	2d38      	cmp	r5, #56	; 0x38
 8001d74:	dd00      	ble.n	8001d78 <__aeabi_dsub+0x368>
 8001d76:	e0a8      	b.n	8001eca <__aeabi_dsub+0x4ba>
 8001d78:	2d1f      	cmp	r5, #31
 8001d7a:	dd00      	ble.n	8001d7e <__aeabi_dsub+0x36e>
 8001d7c:	e11f      	b.n	8001fbe <__aeabi_dsub+0x5ae>
 8001d7e:	2620      	movs	r6, #32
 8001d80:	0027      	movs	r7, r4
 8001d82:	4650      	mov	r0, sl
 8001d84:	1b76      	subs	r6, r6, r5
 8001d86:	40b7      	lsls	r7, r6
 8001d88:	40e8      	lsrs	r0, r5
 8001d8a:	4307      	orrs	r7, r0
 8001d8c:	4650      	mov	r0, sl
 8001d8e:	40b0      	lsls	r0, r6
 8001d90:	1e46      	subs	r6, r0, #1
 8001d92:	41b0      	sbcs	r0, r6
 8001d94:	40ec      	lsrs	r4, r5
 8001d96:	4338      	orrs	r0, r7
 8001d98:	1a17      	subs	r7, r2, r0
 8001d9a:	42ba      	cmp	r2, r7
 8001d9c:	4192      	sbcs	r2, r2
 8001d9e:	1b0c      	subs	r4, r1, r4
 8001da0:	4252      	negs	r2, r2
 8001da2:	1aa4      	subs	r4, r4, r2
 8001da4:	4666      	mov	r6, ip
 8001da6:	4698      	mov	r8, r3
 8001da8:	e68b      	b.n	8001ac2 <__aeabi_dsub+0xb2>
 8001daa:	4664      	mov	r4, ip
 8001dac:	4667      	mov	r7, ip
 8001dae:	432c      	orrs	r4, r5
 8001db0:	d000      	beq.n	8001db4 <__aeabi_dsub+0x3a4>
 8001db2:	e68b      	b.n	8001acc <__aeabi_dsub+0xbc>
 8001db4:	2500      	movs	r5, #0
 8001db6:	2600      	movs	r6, #0
 8001db8:	2700      	movs	r7, #0
 8001dba:	e6ea      	b.n	8001b92 <__aeabi_dsub+0x182>
 8001dbc:	001e      	movs	r6, r3
 8001dbe:	e6ad      	b.n	8001b1c <__aeabi_dsub+0x10c>
 8001dc0:	2b1f      	cmp	r3, #31
 8001dc2:	dc60      	bgt.n	8001e86 <__aeabi_dsub+0x476>
 8001dc4:	2720      	movs	r7, #32
 8001dc6:	1af8      	subs	r0, r7, r3
 8001dc8:	000f      	movs	r7, r1
 8001dca:	4684      	mov	ip, r0
 8001dcc:	4087      	lsls	r7, r0
 8001dce:	0010      	movs	r0, r2
 8001dd0:	40d8      	lsrs	r0, r3
 8001dd2:	4307      	orrs	r7, r0
 8001dd4:	4660      	mov	r0, ip
 8001dd6:	4082      	lsls	r2, r0
 8001dd8:	1e50      	subs	r0, r2, #1
 8001dda:	4182      	sbcs	r2, r0
 8001ddc:	40d9      	lsrs	r1, r3
 8001dde:	4317      	orrs	r7, r2
 8001de0:	e6f5      	b.n	8001bce <__aeabi_dsub+0x1be>
 8001de2:	0026      	movs	r6, r4
 8001de4:	4650      	mov	r0, sl
 8001de6:	4306      	orrs	r6, r0
 8001de8:	d005      	beq.n	8001df6 <__aeabi_dsub+0x3e6>
 8001dea:	43ed      	mvns	r5, r5
 8001dec:	2d00      	cmp	r5, #0
 8001dee:	d0d3      	beq.n	8001d98 <__aeabi_dsub+0x388>
 8001df0:	4e90      	ldr	r6, [pc, #576]	; (8002034 <__aeabi_dsub+0x624>)
 8001df2:	45b4      	cmp	ip, r6
 8001df4:	d1bd      	bne.n	8001d72 <__aeabi_dsub+0x362>
 8001df6:	000c      	movs	r4, r1
 8001df8:	0017      	movs	r7, r2
 8001dfa:	4666      	mov	r6, ip
 8001dfc:	4698      	mov	r8, r3
 8001dfe:	e68d      	b.n	8001b1c <__aeabi_dsub+0x10c>
 8001e00:	488c      	ldr	r0, [pc, #560]	; (8002034 <__aeabi_dsub+0x624>)
 8001e02:	4283      	cmp	r3, r0
 8001e04:	d00b      	beq.n	8001e1e <__aeabi_dsub+0x40e>
 8001e06:	4663      	mov	r3, ip
 8001e08:	e6d9      	b.n	8001bbe <__aeabi_dsub+0x1ae>
 8001e0a:	2d00      	cmp	r5, #0
 8001e0c:	d000      	beq.n	8001e10 <__aeabi_dsub+0x400>
 8001e0e:	e096      	b.n	8001f3e <__aeabi_dsub+0x52e>
 8001e10:	0008      	movs	r0, r1
 8001e12:	4310      	orrs	r0, r2
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x408>
 8001e16:	e0e2      	b.n	8001fde <__aeabi_dsub+0x5ce>
 8001e18:	000c      	movs	r4, r1
 8001e1a:	0017      	movs	r7, r2
 8001e1c:	4698      	mov	r8, r3
 8001e1e:	4e85      	ldr	r6, [pc, #532]	; (8002034 <__aeabi_dsub+0x624>)
 8001e20:	e67c      	b.n	8001b1c <__aeabi_dsub+0x10c>
 8001e22:	2500      	movs	r5, #0
 8001e24:	e780      	b.n	8001d28 <__aeabi_dsub+0x318>
 8001e26:	2100      	movs	r1, #0
 8001e28:	e78e      	b.n	8001d48 <__aeabi_dsub+0x338>
 8001e2a:	0023      	movs	r3, r4
 8001e2c:	4650      	mov	r0, sl
 8001e2e:	4303      	orrs	r3, r0
 8001e30:	2e00      	cmp	r6, #0
 8001e32:	d000      	beq.n	8001e36 <__aeabi_dsub+0x426>
 8001e34:	e0a8      	b.n	8001f88 <__aeabi_dsub+0x578>
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d100      	bne.n	8001e3c <__aeabi_dsub+0x42c>
 8001e3a:	e0de      	b.n	8001ffa <__aeabi_dsub+0x5ea>
 8001e3c:	000b      	movs	r3, r1
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	d100      	bne.n	8001e44 <__aeabi_dsub+0x434>
 8001e42:	e66b      	b.n	8001b1c <__aeabi_dsub+0x10c>
 8001e44:	4452      	add	r2, sl
 8001e46:	4552      	cmp	r2, sl
 8001e48:	4180      	sbcs	r0, r0
 8001e4a:	1864      	adds	r4, r4, r1
 8001e4c:	4240      	negs	r0, r0
 8001e4e:	1824      	adds	r4, r4, r0
 8001e50:	0017      	movs	r7, r2
 8001e52:	0223      	lsls	r3, r4, #8
 8001e54:	d400      	bmi.n	8001e58 <__aeabi_dsub+0x448>
 8001e56:	e6fd      	b.n	8001c54 <__aeabi_dsub+0x244>
 8001e58:	4b77      	ldr	r3, [pc, #476]	; (8002038 <__aeabi_dsub+0x628>)
 8001e5a:	4666      	mov	r6, ip
 8001e5c:	401c      	ands	r4, r3
 8001e5e:	e65d      	b.n	8001b1c <__aeabi_dsub+0x10c>
 8001e60:	0025      	movs	r5, r4
 8001e62:	4650      	mov	r0, sl
 8001e64:	4305      	orrs	r5, r0
 8001e66:	2e00      	cmp	r6, #0
 8001e68:	d1cf      	bne.n	8001e0a <__aeabi_dsub+0x3fa>
 8001e6a:	2d00      	cmp	r5, #0
 8001e6c:	d14f      	bne.n	8001f0e <__aeabi_dsub+0x4fe>
 8001e6e:	000c      	movs	r4, r1
 8001e70:	4314      	orrs	r4, r2
 8001e72:	d100      	bne.n	8001e76 <__aeabi_dsub+0x466>
 8001e74:	e0a0      	b.n	8001fb8 <__aeabi_dsub+0x5a8>
 8001e76:	000c      	movs	r4, r1
 8001e78:	0017      	movs	r7, r2
 8001e7a:	4698      	mov	r8, r3
 8001e7c:	e64e      	b.n	8001b1c <__aeabi_dsub+0x10c>
 8001e7e:	4666      	mov	r6, ip
 8001e80:	2400      	movs	r4, #0
 8001e82:	2700      	movs	r7, #0
 8001e84:	e685      	b.n	8001b92 <__aeabi_dsub+0x182>
 8001e86:	001f      	movs	r7, r3
 8001e88:	0008      	movs	r0, r1
 8001e8a:	3f20      	subs	r7, #32
 8001e8c:	40f8      	lsrs	r0, r7
 8001e8e:	0007      	movs	r7, r0
 8001e90:	2b20      	cmp	r3, #32
 8001e92:	d100      	bne.n	8001e96 <__aeabi_dsub+0x486>
 8001e94:	e08e      	b.n	8001fb4 <__aeabi_dsub+0x5a4>
 8001e96:	2040      	movs	r0, #64	; 0x40
 8001e98:	1ac3      	subs	r3, r0, r3
 8001e9a:	4099      	lsls	r1, r3
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	1e51      	subs	r1, r2, #1
 8001ea0:	418a      	sbcs	r2, r1
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4317      	orrs	r7, r2
 8001ea6:	e692      	b.n	8001bce <__aeabi_dsub+0x1be>
 8001ea8:	2e00      	cmp	r6, #0
 8001eaa:	d114      	bne.n	8001ed6 <__aeabi_dsub+0x4c6>
 8001eac:	0026      	movs	r6, r4
 8001eae:	4650      	mov	r0, sl
 8001eb0:	4306      	orrs	r6, r0
 8001eb2:	d062      	beq.n	8001f7a <__aeabi_dsub+0x56a>
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d15c      	bne.n	8001f74 <__aeabi_dsub+0x564>
 8001eba:	1887      	adds	r7, r0, r2
 8001ebc:	4297      	cmp	r7, r2
 8001ebe:	4192      	sbcs	r2, r2
 8001ec0:	1864      	adds	r4, r4, r1
 8001ec2:	4252      	negs	r2, r2
 8001ec4:	18a4      	adds	r4, r4, r2
 8001ec6:	4666      	mov	r6, ip
 8001ec8:	e687      	b.n	8001bda <__aeabi_dsub+0x1ca>
 8001eca:	4650      	mov	r0, sl
 8001ecc:	4320      	orrs	r0, r4
 8001ece:	1e44      	subs	r4, r0, #1
 8001ed0:	41a0      	sbcs	r0, r4
 8001ed2:	2400      	movs	r4, #0
 8001ed4:	e760      	b.n	8001d98 <__aeabi_dsub+0x388>
 8001ed6:	4e57      	ldr	r6, [pc, #348]	; (8002034 <__aeabi_dsub+0x624>)
 8001ed8:	45b4      	cmp	ip, r6
 8001eda:	d04e      	beq.n	8001f7a <__aeabi_dsub+0x56a>
 8001edc:	2680      	movs	r6, #128	; 0x80
 8001ede:	0436      	lsls	r6, r6, #16
 8001ee0:	425b      	negs	r3, r3
 8001ee2:	4334      	orrs	r4, r6
 8001ee4:	2b38      	cmp	r3, #56	; 0x38
 8001ee6:	dd00      	ble.n	8001eea <__aeabi_dsub+0x4da>
 8001ee8:	e07f      	b.n	8001fea <__aeabi_dsub+0x5da>
 8001eea:	2b1f      	cmp	r3, #31
 8001eec:	dd00      	ble.n	8001ef0 <__aeabi_dsub+0x4e0>
 8001eee:	e08b      	b.n	8002008 <__aeabi_dsub+0x5f8>
 8001ef0:	2620      	movs	r6, #32
 8001ef2:	0027      	movs	r7, r4
 8001ef4:	4650      	mov	r0, sl
 8001ef6:	1af6      	subs	r6, r6, r3
 8001ef8:	40b7      	lsls	r7, r6
 8001efa:	40d8      	lsrs	r0, r3
 8001efc:	4307      	orrs	r7, r0
 8001efe:	4650      	mov	r0, sl
 8001f00:	40b0      	lsls	r0, r6
 8001f02:	1e46      	subs	r6, r0, #1
 8001f04:	41b0      	sbcs	r0, r6
 8001f06:	4307      	orrs	r7, r0
 8001f08:	40dc      	lsrs	r4, r3
 8001f0a:	18bf      	adds	r7, r7, r2
 8001f0c:	e7d6      	b.n	8001ebc <__aeabi_dsub+0x4ac>
 8001f0e:	000d      	movs	r5, r1
 8001f10:	4315      	orrs	r5, r2
 8001f12:	d100      	bne.n	8001f16 <__aeabi_dsub+0x506>
 8001f14:	e602      	b.n	8001b1c <__aeabi_dsub+0x10c>
 8001f16:	4650      	mov	r0, sl
 8001f18:	1a80      	subs	r0, r0, r2
 8001f1a:	4582      	cmp	sl, r0
 8001f1c:	41bf      	sbcs	r7, r7
 8001f1e:	1a65      	subs	r5, r4, r1
 8001f20:	427f      	negs	r7, r7
 8001f22:	1bed      	subs	r5, r5, r7
 8001f24:	4684      	mov	ip, r0
 8001f26:	0228      	lsls	r0, r5, #8
 8001f28:	d400      	bmi.n	8001f2c <__aeabi_dsub+0x51c>
 8001f2a:	e68d      	b.n	8001c48 <__aeabi_dsub+0x238>
 8001f2c:	4650      	mov	r0, sl
 8001f2e:	1a17      	subs	r7, r2, r0
 8001f30:	42ba      	cmp	r2, r7
 8001f32:	4192      	sbcs	r2, r2
 8001f34:	1b0c      	subs	r4, r1, r4
 8001f36:	4252      	negs	r2, r2
 8001f38:	1aa4      	subs	r4, r4, r2
 8001f3a:	4698      	mov	r8, r3
 8001f3c:	e5ee      	b.n	8001b1c <__aeabi_dsub+0x10c>
 8001f3e:	000d      	movs	r5, r1
 8001f40:	4315      	orrs	r5, r2
 8001f42:	d100      	bne.n	8001f46 <__aeabi_dsub+0x536>
 8001f44:	e76b      	b.n	8001e1e <__aeabi_dsub+0x40e>
 8001f46:	4650      	mov	r0, sl
 8001f48:	0767      	lsls	r7, r4, #29
 8001f4a:	08c0      	lsrs	r0, r0, #3
 8001f4c:	4307      	orrs	r7, r0
 8001f4e:	2080      	movs	r0, #128	; 0x80
 8001f50:	08e4      	lsrs	r4, r4, #3
 8001f52:	0300      	lsls	r0, r0, #12
 8001f54:	4204      	tst	r4, r0
 8001f56:	d007      	beq.n	8001f68 <__aeabi_dsub+0x558>
 8001f58:	08cd      	lsrs	r5, r1, #3
 8001f5a:	4205      	tst	r5, r0
 8001f5c:	d104      	bne.n	8001f68 <__aeabi_dsub+0x558>
 8001f5e:	002c      	movs	r4, r5
 8001f60:	4698      	mov	r8, r3
 8001f62:	08d7      	lsrs	r7, r2, #3
 8001f64:	0749      	lsls	r1, r1, #29
 8001f66:	430f      	orrs	r7, r1
 8001f68:	0f7b      	lsrs	r3, r7, #29
 8001f6a:	00e4      	lsls	r4, r4, #3
 8001f6c:	431c      	orrs	r4, r3
 8001f6e:	00ff      	lsls	r7, r7, #3
 8001f70:	4e30      	ldr	r6, [pc, #192]	; (8002034 <__aeabi_dsub+0x624>)
 8001f72:	e5d3      	b.n	8001b1c <__aeabi_dsub+0x10c>
 8001f74:	4e2f      	ldr	r6, [pc, #188]	; (8002034 <__aeabi_dsub+0x624>)
 8001f76:	45b4      	cmp	ip, r6
 8001f78:	d1b4      	bne.n	8001ee4 <__aeabi_dsub+0x4d4>
 8001f7a:	000c      	movs	r4, r1
 8001f7c:	0017      	movs	r7, r2
 8001f7e:	4666      	mov	r6, ip
 8001f80:	e5cc      	b.n	8001b1c <__aeabi_dsub+0x10c>
 8001f82:	2700      	movs	r7, #0
 8001f84:	2400      	movs	r4, #0
 8001f86:	e5e8      	b.n	8001b5a <__aeabi_dsub+0x14a>
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d039      	beq.n	8002000 <__aeabi_dsub+0x5f0>
 8001f8c:	000b      	movs	r3, r1
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	d100      	bne.n	8001f94 <__aeabi_dsub+0x584>
 8001f92:	e744      	b.n	8001e1e <__aeabi_dsub+0x40e>
 8001f94:	08c0      	lsrs	r0, r0, #3
 8001f96:	0767      	lsls	r7, r4, #29
 8001f98:	4307      	orrs	r7, r0
 8001f9a:	2080      	movs	r0, #128	; 0x80
 8001f9c:	08e4      	lsrs	r4, r4, #3
 8001f9e:	0300      	lsls	r0, r0, #12
 8001fa0:	4204      	tst	r4, r0
 8001fa2:	d0e1      	beq.n	8001f68 <__aeabi_dsub+0x558>
 8001fa4:	08cb      	lsrs	r3, r1, #3
 8001fa6:	4203      	tst	r3, r0
 8001fa8:	d1de      	bne.n	8001f68 <__aeabi_dsub+0x558>
 8001faa:	08d7      	lsrs	r7, r2, #3
 8001fac:	0749      	lsls	r1, r1, #29
 8001fae:	430f      	orrs	r7, r1
 8001fb0:	001c      	movs	r4, r3
 8001fb2:	e7d9      	b.n	8001f68 <__aeabi_dsub+0x558>
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	e771      	b.n	8001e9c <__aeabi_dsub+0x48c>
 8001fb8:	2500      	movs	r5, #0
 8001fba:	2700      	movs	r7, #0
 8001fbc:	e5e9      	b.n	8001b92 <__aeabi_dsub+0x182>
 8001fbe:	002e      	movs	r6, r5
 8001fc0:	0027      	movs	r7, r4
 8001fc2:	3e20      	subs	r6, #32
 8001fc4:	40f7      	lsrs	r7, r6
 8001fc6:	2d20      	cmp	r5, #32
 8001fc8:	d02f      	beq.n	800202a <__aeabi_dsub+0x61a>
 8001fca:	2640      	movs	r6, #64	; 0x40
 8001fcc:	1b75      	subs	r5, r6, r5
 8001fce:	40ac      	lsls	r4, r5
 8001fd0:	4650      	mov	r0, sl
 8001fd2:	4320      	orrs	r0, r4
 8001fd4:	1e44      	subs	r4, r0, #1
 8001fd6:	41a0      	sbcs	r0, r4
 8001fd8:	2400      	movs	r4, #0
 8001fda:	4338      	orrs	r0, r7
 8001fdc:	e6dc      	b.n	8001d98 <__aeabi_dsub+0x388>
 8001fde:	2480      	movs	r4, #128	; 0x80
 8001fe0:	2500      	movs	r5, #0
 8001fe2:	0324      	lsls	r4, r4, #12
 8001fe4:	4e13      	ldr	r6, [pc, #76]	; (8002034 <__aeabi_dsub+0x624>)
 8001fe6:	2700      	movs	r7, #0
 8001fe8:	e5d3      	b.n	8001b92 <__aeabi_dsub+0x182>
 8001fea:	4650      	mov	r0, sl
 8001fec:	4320      	orrs	r0, r4
 8001fee:	0007      	movs	r7, r0
 8001ff0:	1e78      	subs	r0, r7, #1
 8001ff2:	4187      	sbcs	r7, r0
 8001ff4:	2400      	movs	r4, #0
 8001ff6:	18bf      	adds	r7, r7, r2
 8001ff8:	e760      	b.n	8001ebc <__aeabi_dsub+0x4ac>
 8001ffa:	000c      	movs	r4, r1
 8001ffc:	0017      	movs	r7, r2
 8001ffe:	e58d      	b.n	8001b1c <__aeabi_dsub+0x10c>
 8002000:	000c      	movs	r4, r1
 8002002:	0017      	movs	r7, r2
 8002004:	4e0b      	ldr	r6, [pc, #44]	; (8002034 <__aeabi_dsub+0x624>)
 8002006:	e589      	b.n	8001b1c <__aeabi_dsub+0x10c>
 8002008:	001e      	movs	r6, r3
 800200a:	0027      	movs	r7, r4
 800200c:	3e20      	subs	r6, #32
 800200e:	40f7      	lsrs	r7, r6
 8002010:	2b20      	cmp	r3, #32
 8002012:	d00c      	beq.n	800202e <__aeabi_dsub+0x61e>
 8002014:	2640      	movs	r6, #64	; 0x40
 8002016:	1af3      	subs	r3, r6, r3
 8002018:	409c      	lsls	r4, r3
 800201a:	4650      	mov	r0, sl
 800201c:	4320      	orrs	r0, r4
 800201e:	1e44      	subs	r4, r0, #1
 8002020:	41a0      	sbcs	r0, r4
 8002022:	4307      	orrs	r7, r0
 8002024:	2400      	movs	r4, #0
 8002026:	18bf      	adds	r7, r7, r2
 8002028:	e748      	b.n	8001ebc <__aeabi_dsub+0x4ac>
 800202a:	2400      	movs	r4, #0
 800202c:	e7d0      	b.n	8001fd0 <__aeabi_dsub+0x5c0>
 800202e:	2400      	movs	r4, #0
 8002030:	e7f3      	b.n	800201a <__aeabi_dsub+0x60a>
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	000007ff 	.word	0x000007ff
 8002038:	ff7fffff 	.word	0xff7fffff

0800203c <__aeabi_dcmpun>:
 800203c:	b570      	push	{r4, r5, r6, lr}
 800203e:	4e0e      	ldr	r6, [pc, #56]	; (8002078 <__aeabi_dcmpun+0x3c>)
 8002040:	030d      	lsls	r5, r1, #12
 8002042:	031c      	lsls	r4, r3, #12
 8002044:	0049      	lsls	r1, r1, #1
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	0b2d      	lsrs	r5, r5, #12
 800204a:	0d49      	lsrs	r1, r1, #21
 800204c:	0b24      	lsrs	r4, r4, #12
 800204e:	0d5b      	lsrs	r3, r3, #21
 8002050:	42b1      	cmp	r1, r6
 8002052:	d004      	beq.n	800205e <__aeabi_dcmpun+0x22>
 8002054:	4908      	ldr	r1, [pc, #32]	; (8002078 <__aeabi_dcmpun+0x3c>)
 8002056:	2000      	movs	r0, #0
 8002058:	428b      	cmp	r3, r1
 800205a:	d008      	beq.n	800206e <__aeabi_dcmpun+0x32>
 800205c:	bd70      	pop	{r4, r5, r6, pc}
 800205e:	4305      	orrs	r5, r0
 8002060:	2001      	movs	r0, #1
 8002062:	2d00      	cmp	r5, #0
 8002064:	d1fa      	bne.n	800205c <__aeabi_dcmpun+0x20>
 8002066:	4904      	ldr	r1, [pc, #16]	; (8002078 <__aeabi_dcmpun+0x3c>)
 8002068:	2000      	movs	r0, #0
 800206a:	428b      	cmp	r3, r1
 800206c:	d1f6      	bne.n	800205c <__aeabi_dcmpun+0x20>
 800206e:	4314      	orrs	r4, r2
 8002070:	0020      	movs	r0, r4
 8002072:	1e44      	subs	r4, r0, #1
 8002074:	41a0      	sbcs	r0, r4
 8002076:	e7f1      	b.n	800205c <__aeabi_dcmpun+0x20>
 8002078:	000007ff 	.word	0x000007ff

0800207c <__aeabi_d2iz>:
 800207c:	b530      	push	{r4, r5, lr}
 800207e:	4d13      	ldr	r5, [pc, #76]	; (80020cc <__aeabi_d2iz+0x50>)
 8002080:	030a      	lsls	r2, r1, #12
 8002082:	004b      	lsls	r3, r1, #1
 8002084:	0b12      	lsrs	r2, r2, #12
 8002086:	0d5b      	lsrs	r3, r3, #21
 8002088:	0fc9      	lsrs	r1, r1, #31
 800208a:	2400      	movs	r4, #0
 800208c:	42ab      	cmp	r3, r5
 800208e:	dd10      	ble.n	80020b2 <__aeabi_d2iz+0x36>
 8002090:	4c0f      	ldr	r4, [pc, #60]	; (80020d0 <__aeabi_d2iz+0x54>)
 8002092:	42a3      	cmp	r3, r4
 8002094:	dc0f      	bgt.n	80020b6 <__aeabi_d2iz+0x3a>
 8002096:	2480      	movs	r4, #128	; 0x80
 8002098:	4d0e      	ldr	r5, [pc, #56]	; (80020d4 <__aeabi_d2iz+0x58>)
 800209a:	0364      	lsls	r4, r4, #13
 800209c:	4322      	orrs	r2, r4
 800209e:	1aed      	subs	r5, r5, r3
 80020a0:	2d1f      	cmp	r5, #31
 80020a2:	dd0b      	ble.n	80020bc <__aeabi_d2iz+0x40>
 80020a4:	480c      	ldr	r0, [pc, #48]	; (80020d8 <__aeabi_d2iz+0x5c>)
 80020a6:	1ac3      	subs	r3, r0, r3
 80020a8:	40da      	lsrs	r2, r3
 80020aa:	4254      	negs	r4, r2
 80020ac:	2900      	cmp	r1, #0
 80020ae:	d100      	bne.n	80020b2 <__aeabi_d2iz+0x36>
 80020b0:	0014      	movs	r4, r2
 80020b2:	0020      	movs	r0, r4
 80020b4:	bd30      	pop	{r4, r5, pc}
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <__aeabi_d2iz+0x60>)
 80020b8:	18cc      	adds	r4, r1, r3
 80020ba:	e7fa      	b.n	80020b2 <__aeabi_d2iz+0x36>
 80020bc:	4c08      	ldr	r4, [pc, #32]	; (80020e0 <__aeabi_d2iz+0x64>)
 80020be:	40e8      	lsrs	r0, r5
 80020c0:	46a4      	mov	ip, r4
 80020c2:	4463      	add	r3, ip
 80020c4:	409a      	lsls	r2, r3
 80020c6:	4302      	orrs	r2, r0
 80020c8:	e7ef      	b.n	80020aa <__aeabi_d2iz+0x2e>
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	000003fe 	.word	0x000003fe
 80020d0:	0000041d 	.word	0x0000041d
 80020d4:	00000433 	.word	0x00000433
 80020d8:	00000413 	.word	0x00000413
 80020dc:	7fffffff 	.word	0x7fffffff
 80020e0:	fffffbed 	.word	0xfffffbed

080020e4 <__aeabi_i2d>:
 80020e4:	b570      	push	{r4, r5, r6, lr}
 80020e6:	2800      	cmp	r0, #0
 80020e8:	d030      	beq.n	800214c <__aeabi_i2d+0x68>
 80020ea:	17c3      	asrs	r3, r0, #31
 80020ec:	18c4      	adds	r4, r0, r3
 80020ee:	405c      	eors	r4, r3
 80020f0:	0fc5      	lsrs	r5, r0, #31
 80020f2:	0020      	movs	r0, r4
 80020f4:	f000 f870 	bl	80021d8 <__clzsi2>
 80020f8:	4b17      	ldr	r3, [pc, #92]	; (8002158 <__aeabi_i2d+0x74>)
 80020fa:	4a18      	ldr	r2, [pc, #96]	; (800215c <__aeabi_i2d+0x78>)
 80020fc:	1a1b      	subs	r3, r3, r0
 80020fe:	1ad2      	subs	r2, r2, r3
 8002100:	2a1f      	cmp	r2, #31
 8002102:	dd18      	ble.n	8002136 <__aeabi_i2d+0x52>
 8002104:	4a16      	ldr	r2, [pc, #88]	; (8002160 <__aeabi_i2d+0x7c>)
 8002106:	1ad2      	subs	r2, r2, r3
 8002108:	4094      	lsls	r4, r2
 800210a:	2200      	movs	r2, #0
 800210c:	0324      	lsls	r4, r4, #12
 800210e:	055b      	lsls	r3, r3, #21
 8002110:	0b24      	lsrs	r4, r4, #12
 8002112:	0d5b      	lsrs	r3, r3, #21
 8002114:	2100      	movs	r1, #0
 8002116:	0010      	movs	r0, r2
 8002118:	0324      	lsls	r4, r4, #12
 800211a:	0d0a      	lsrs	r2, r1, #20
 800211c:	0b24      	lsrs	r4, r4, #12
 800211e:	0512      	lsls	r2, r2, #20
 8002120:	4322      	orrs	r2, r4
 8002122:	4c10      	ldr	r4, [pc, #64]	; (8002164 <__aeabi_i2d+0x80>)
 8002124:	051b      	lsls	r3, r3, #20
 8002126:	4022      	ands	r2, r4
 8002128:	4313      	orrs	r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	07ed      	lsls	r5, r5, #31
 800212e:	085b      	lsrs	r3, r3, #1
 8002130:	432b      	orrs	r3, r5
 8002132:	0019      	movs	r1, r3
 8002134:	bd70      	pop	{r4, r5, r6, pc}
 8002136:	0021      	movs	r1, r4
 8002138:	4091      	lsls	r1, r2
 800213a:	000a      	movs	r2, r1
 800213c:	210b      	movs	r1, #11
 800213e:	1a08      	subs	r0, r1, r0
 8002140:	40c4      	lsrs	r4, r0
 8002142:	055b      	lsls	r3, r3, #21
 8002144:	0324      	lsls	r4, r4, #12
 8002146:	0b24      	lsrs	r4, r4, #12
 8002148:	0d5b      	lsrs	r3, r3, #21
 800214a:	e7e3      	b.n	8002114 <__aeabi_i2d+0x30>
 800214c:	2500      	movs	r5, #0
 800214e:	2300      	movs	r3, #0
 8002150:	2400      	movs	r4, #0
 8002152:	2200      	movs	r2, #0
 8002154:	e7de      	b.n	8002114 <__aeabi_i2d+0x30>
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	0000041e 	.word	0x0000041e
 800215c:	00000433 	.word	0x00000433
 8002160:	00000413 	.word	0x00000413
 8002164:	800fffff 	.word	0x800fffff

08002168 <__aeabi_ui2d>:
 8002168:	b510      	push	{r4, lr}
 800216a:	1e04      	subs	r4, r0, #0
 800216c:	d028      	beq.n	80021c0 <__aeabi_ui2d+0x58>
 800216e:	f000 f833 	bl	80021d8 <__clzsi2>
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <__aeabi_ui2d+0x60>)
 8002174:	4a15      	ldr	r2, [pc, #84]	; (80021cc <__aeabi_ui2d+0x64>)
 8002176:	1a1b      	subs	r3, r3, r0
 8002178:	1ad2      	subs	r2, r2, r3
 800217a:	2a1f      	cmp	r2, #31
 800217c:	dd15      	ble.n	80021aa <__aeabi_ui2d+0x42>
 800217e:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <__aeabi_ui2d+0x68>)
 8002180:	1ad2      	subs	r2, r2, r3
 8002182:	4094      	lsls	r4, r2
 8002184:	2200      	movs	r2, #0
 8002186:	0324      	lsls	r4, r4, #12
 8002188:	055b      	lsls	r3, r3, #21
 800218a:	0b24      	lsrs	r4, r4, #12
 800218c:	0d5b      	lsrs	r3, r3, #21
 800218e:	2100      	movs	r1, #0
 8002190:	0010      	movs	r0, r2
 8002192:	0324      	lsls	r4, r4, #12
 8002194:	0d0a      	lsrs	r2, r1, #20
 8002196:	0b24      	lsrs	r4, r4, #12
 8002198:	0512      	lsls	r2, r2, #20
 800219a:	4322      	orrs	r2, r4
 800219c:	4c0d      	ldr	r4, [pc, #52]	; (80021d4 <__aeabi_ui2d+0x6c>)
 800219e:	051b      	lsls	r3, r3, #20
 80021a0:	4022      	ands	r2, r4
 80021a2:	4313      	orrs	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	0859      	lsrs	r1, r3, #1
 80021a8:	bd10      	pop	{r4, pc}
 80021aa:	0021      	movs	r1, r4
 80021ac:	4091      	lsls	r1, r2
 80021ae:	000a      	movs	r2, r1
 80021b0:	210b      	movs	r1, #11
 80021b2:	1a08      	subs	r0, r1, r0
 80021b4:	40c4      	lsrs	r4, r0
 80021b6:	055b      	lsls	r3, r3, #21
 80021b8:	0324      	lsls	r4, r4, #12
 80021ba:	0b24      	lsrs	r4, r4, #12
 80021bc:	0d5b      	lsrs	r3, r3, #21
 80021be:	e7e6      	b.n	800218e <__aeabi_ui2d+0x26>
 80021c0:	2300      	movs	r3, #0
 80021c2:	2400      	movs	r4, #0
 80021c4:	2200      	movs	r2, #0
 80021c6:	e7e2      	b.n	800218e <__aeabi_ui2d+0x26>
 80021c8:	0000041e 	.word	0x0000041e
 80021cc:	00000433 	.word	0x00000433
 80021d0:	00000413 	.word	0x00000413
 80021d4:	800fffff 	.word	0x800fffff

080021d8 <__clzsi2>:
 80021d8:	211c      	movs	r1, #28
 80021da:	2301      	movs	r3, #1
 80021dc:	041b      	lsls	r3, r3, #16
 80021de:	4298      	cmp	r0, r3
 80021e0:	d301      	bcc.n	80021e6 <__clzsi2+0xe>
 80021e2:	0c00      	lsrs	r0, r0, #16
 80021e4:	3910      	subs	r1, #16
 80021e6:	0a1b      	lsrs	r3, r3, #8
 80021e8:	4298      	cmp	r0, r3
 80021ea:	d301      	bcc.n	80021f0 <__clzsi2+0x18>
 80021ec:	0a00      	lsrs	r0, r0, #8
 80021ee:	3908      	subs	r1, #8
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	4298      	cmp	r0, r3
 80021f4:	d301      	bcc.n	80021fa <__clzsi2+0x22>
 80021f6:	0900      	lsrs	r0, r0, #4
 80021f8:	3904      	subs	r1, #4
 80021fa:	a202      	add	r2, pc, #8	; (adr r2, 8002204 <__clzsi2+0x2c>)
 80021fc:	5c10      	ldrb	r0, [r2, r0]
 80021fe:	1840      	adds	r0, r0, r1
 8002200:	4770      	bx	lr
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	02020304 	.word	0x02020304
 8002208:	01010101 	.word	0x01010101
	...

08002214 <__clzdi2>:
 8002214:	b510      	push	{r4, lr}
 8002216:	2900      	cmp	r1, #0
 8002218:	d103      	bne.n	8002222 <__clzdi2+0xe>
 800221a:	f7ff ffdd 	bl	80021d8 <__clzsi2>
 800221e:	3020      	adds	r0, #32
 8002220:	e002      	b.n	8002228 <__clzdi2+0x14>
 8002222:	1c08      	adds	r0, r1, #0
 8002224:	f7ff ffd8 	bl	80021d8 <__clzsi2>
 8002228:	bd10      	pop	{r4, pc}
 800222a:	46c0      	nop			; (mov r8, r8)

0800222c <ST7735_write>:
uint16_t scr_height;
//uint8_t buf_tft[3300] = {0};
static lv_disp_drv_t * disp_p;

void ST7735_write(uint8_t data)
{
 800222c:	b507      	push	{r0, r1, r2, lr}
 800222e:	466b      	mov	r3, sp
 8002230:	1dd9      	adds	r1, r3, #7
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 8002232:	2301      	movs	r3, #1
{
 8002234:	7008      	strb	r0, [r1, #0]
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&data, 1, HAL_MAX_DELAY);
 8002236:	425b      	negs	r3, r3
 8002238:	2201      	movs	r2, #1
 800223a:	4802      	ldr	r0, [pc, #8]	; (8002244 <ST7735_write+0x18>)
 800223c:	f003 f841 	bl	80052c2 <HAL_SPI_Transmit>
}
 8002240:	bd07      	pop	{r0, r1, r2, pc}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	20004918 	.word	0x20004918

08002248 <ST7735_cmd>:
	tmp[0] = color >> 8;
	tmp[1] = color;
	HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&tmp[0], 2, HAL_MAX_DELAY);
}

void ST7735_cmd(uint8_t cmd) {
 8002248:	b510      	push	{r4, lr}
 800224a:	0004      	movs	r4, r0
	A0_L();
 800224c:	2200      	movs	r2, #0
 800224e:	2110      	movs	r1, #16
 8002250:	4803      	ldr	r0, [pc, #12]	; (8002260 <ST7735_cmd+0x18>)
 8002252:	f002 f99d 	bl	8004590 <HAL_GPIO_WritePin>
	ST7735_write(cmd);
 8002256:	0020      	movs	r0, r4
 8002258:	f7ff ffe8 	bl	800222c <ST7735_write>
}
 800225c:	bd10      	pop	{r4, pc}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	50000c00 	.word	0x50000c00

08002264 <ST7735_data>:

void ST7735_data(uint8_t data) {
 8002264:	b510      	push	{r4, lr}
 8002266:	0004      	movs	r4, r0
	A0_H();
 8002268:	2201      	movs	r2, #1
 800226a:	2110      	movs	r1, #16
 800226c:	4803      	ldr	r0, [pc, #12]	; (800227c <ST7735_data+0x18>)
 800226e:	f002 f98f 	bl	8004590 <HAL_GPIO_WritePin>
	ST7735_write(data);
 8002272:	0020      	movs	r0, r4
 8002274:	f7ff ffda 	bl	800222c <ST7735_write>
}
 8002278:	bd10      	pop	{r4, pc}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	50000c00 	.word	0x50000c00

08002280 <ST7735_Orientation>:
	CS_H();

	ST7735_Orientation(scr_CCW);
}

void ST7735_Orientation(ScrOrientation_TypeDef orientation) {
 8002280:	b510      	push	{r4, lr}
	CS_L();
 8002282:	2200      	movs	r2, #0
 8002284:	2102      	movs	r1, #2
void ST7735_Orientation(ScrOrientation_TypeDef orientation) {
 8002286:	0004      	movs	r4, r0
	CS_L();
 8002288:	4813      	ldr	r0, [pc, #76]	; (80022d8 <ST7735_Orientation+0x58>)
 800228a:	f002 f981 	bl	8004590 <HAL_GPIO_WritePin>
	ST7735_cmd(0x36); // Memory data access control:
 800228e:	2036      	movs	r0, #54	; 0x36
 8002290:	f7ff ffda 	bl	8002248 <ST7735_cmd>
 8002294:	4a11      	ldr	r2, [pc, #68]	; (80022dc <ST7735_Orientation+0x5c>)
 8002296:	20a0      	movs	r0, #160	; 0xa0
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <ST7735_Orientation+0x60>)
	switch(orientation) {
 800229a:	2c02      	cmp	r4, #2
 800229c:	d00e      	beq.n	80022bc <ST7735_Orientation+0x3c>
 800229e:	2180      	movs	r1, #128	; 0x80
 80022a0:	2c03      	cmp	r4, #3
 80022a2:	d010      	beq.n	80022c6 <ST7735_Orientation+0x46>
 80022a4:	2c01      	cmp	r4, #1
 80022a6:	d112      	bne.n	80022ce <ST7735_Orientation+0x4e>
	case scr_CW:
		scr_width  = TFT_H;
 80022a8:	8010      	strh	r0, [r2, #0]
		scr_height = TFT_W;
 80022aa:	8019      	strh	r1, [r3, #0]
		ST7735_data(0xc0); // X-Mirror,Y-Mirror: Bottom to top; Right to left; RGB
		break;
	default:
		scr_width  = TFT_W;
		scr_height = TFT_H;
		ST7735_data(0x00); // Normal: Top to Bottom; Left to Right; RGB
 80022ac:	f7ff ffda 	bl	8002264 <ST7735_data>
		break;
	}
	CS_H();
 80022b0:	2201      	movs	r2, #1
 80022b2:	2102      	movs	r1, #2
 80022b4:	4808      	ldr	r0, [pc, #32]	; (80022d8 <ST7735_Orientation+0x58>)
 80022b6:	f002 f96b 	bl	8004590 <HAL_GPIO_WritePin>
}
 80022ba:	bd10      	pop	{r4, pc}
		scr_width  = TFT_H;
 80022bc:	8010      	strh	r0, [r2, #0]
		scr_height = TFT_W;
 80022be:	2280      	movs	r2, #128	; 0x80
		ST7735_data(0x60); // X-Y Exchange,X-Mirror
 80022c0:	2060      	movs	r0, #96	; 0x60
		scr_height = TFT_W;
 80022c2:	801a      	strh	r2, [r3, #0]
 80022c4:	e7f2      	b.n	80022ac <ST7735_Orientation+0x2c>
		scr_height = TFT_H;
 80022c6:	8018      	strh	r0, [r3, #0]
		scr_width  = TFT_W;
 80022c8:	8011      	strh	r1, [r2, #0]
		ST7735_data(0xc0); // X-Mirror,Y-Mirror: Bottom to top; Right to left; RGB
 80022ca:	20c0      	movs	r0, #192	; 0xc0
 80022cc:	e7ee      	b.n	80022ac <ST7735_Orientation+0x2c>
		scr_height = TFT_H;
 80022ce:	8018      	strh	r0, [r3, #0]
		scr_width  = TFT_W;
 80022d0:	8011      	strh	r1, [r2, #0]
		ST7735_data(0x00); // Normal: Top to Bottom; Left to Right; RGB
 80022d2:	2000      	movs	r0, #0
 80022d4:	e7ea      	b.n	80022ac <ST7735_Orientation+0x2c>
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	50000c00 	.word	0x50000c00
 80022dc:	200046bc 	.word	0x200046bc
 80022e0:	200046be 	.word	0x200046be

080022e4 <ST7735_Init>:
void ST7735_Init(void) {
 80022e4:	b510      	push	{r4, lr}
	CS_H();
 80022e6:	4c44      	ldr	r4, [pc, #272]	; (80023f8 <ST7735_Init+0x114>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	0020      	movs	r0, r4
 80022ec:	2102      	movs	r1, #2
 80022ee:	f002 f94f 	bl	8004590 <HAL_GPIO_WritePin>
	RST_H();
 80022f2:	2201      	movs	r2, #1
 80022f4:	0020      	movs	r0, r4
 80022f6:	0011      	movs	r1, r2
 80022f8:	f002 f94a 	bl	8004590 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80022fc:	2005      	movs	r0, #5
 80022fe:	f001 fd7d 	bl	8003dfc <HAL_Delay>
	RST_L();
 8002302:	2200      	movs	r2, #0
 8002304:	2101      	movs	r1, #1
 8002306:	0020      	movs	r0, r4
 8002308:	f002 f942 	bl	8004590 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800230c:	2005      	movs	r0, #5
 800230e:	f001 fd75 	bl	8003dfc <HAL_Delay>
	RST_H();
 8002312:	2201      	movs	r2, #1
 8002314:	0020      	movs	r0, r4
 8002316:	0011      	movs	r1, r2
 8002318:	f002 f93a 	bl	8004590 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800231c:	2005      	movs	r0, #5
 800231e:	f001 fd6d 	bl	8003dfc <HAL_Delay>
	CS_L();
 8002322:	2200      	movs	r2, #0
 8002324:	2102      	movs	r1, #2
 8002326:	0020      	movs	r0, r4
 8002328:	f002 f932 	bl	8004590 <HAL_GPIO_WritePin>
	ST7735_cmd(0x11); 	// Sleep out & booster on
 800232c:	2011      	movs	r0, #17
 800232e:	f7ff ff8b 	bl	8002248 <ST7735_cmd>
	HAL_Delay(25); 		// Datasheet says what display wakes about 120ms (may be much faster actually)
 8002332:	2019      	movs	r0, #25
 8002334:	f001 fd62 	bl	8003dfc <HAL_Delay>
	ST7735_cmd(0xb1);   // In normal mode (full colors):
 8002338:	20b1      	movs	r0, #177	; 0xb1
 800233a:	f7ff ff85 	bl	8002248 <ST7735_cmd>
	A0_H();
 800233e:	2201      	movs	r2, #1
 8002340:	2110      	movs	r1, #16
 8002342:	0020      	movs	r0, r4
 8002344:	f002 f924 	bl	8004590 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNA set 1-line period: RTNA2, RTNA0
 8002348:	2005      	movs	r0, #5
 800234a:	f7ff ff6f 	bl	800222c <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPA5,FPA4,FPA3,FPA2
 800234e:	203c      	movs	r0, #60	; 0x3c
 8002350:	f7ff ff6c 	bl	800222c <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPA5,BPA4,BPA3,BPA2
 8002354:	203c      	movs	r0, #60	; 0x3c
 8002356:	f7ff ff69 	bl	800222c <ST7735_write>
	ST7735_cmd(0xb2);   // In idle mode (8-colors):
 800235a:	20b2      	movs	r0, #178	; 0xb2
 800235c:	f7ff ff74 	bl	8002248 <ST7735_cmd>
	A0_H();
 8002360:	2201      	movs	r2, #1
 8002362:	2110      	movs	r1, #16
 8002364:	0020      	movs	r0, r4
 8002366:	f002 f913 	bl	8004590 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNB set 1-line period: RTNAB, RTNB0
 800236a:	2005      	movs	r0, #5
 800236c:	f7ff ff5e 	bl	800222c <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPB5,FPB4,FPB3,FPB2
 8002370:	203c      	movs	r0, #60	; 0x3c
 8002372:	f7ff ff5b 	bl	800222c <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPB5,BPB4,BPB3,BPB2
 8002376:	203c      	movs	r0, #60	; 0x3c
 8002378:	f7ff ff58 	bl	800222c <ST7735_write>
	ST7735_cmd(0xb3);   // In partial mode + full colors:
 800237c:	20b3      	movs	r0, #179	; 0xb3
 800237e:	f7ff ff63 	bl	8002248 <ST7735_cmd>
	A0_H();
 8002382:	2201      	movs	r2, #1
 8002384:	2110      	movs	r1, #16
 8002386:	0020      	movs	r0, r4
 8002388:	f002 f902 	bl	8004590 <HAL_GPIO_WritePin>
	ST7735_write(0x05); //   RTNC set 1-line period: RTNC2, RTNC0
 800238c:	2005      	movs	r0, #5
 800238e:	f7ff ff4d 	bl	800222c <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPC5,FPC4,FPC3,FPC2
 8002392:	203c      	movs	r0, #60	; 0x3c
 8002394:	f7ff ff4a 	bl	800222c <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPC5,BPC4,BPC3,BPC2
 8002398:	203c      	movs	r0, #60	; 0x3c
 800239a:	f7ff ff47 	bl	800222c <ST7735_write>
	ST7735_write(0x05); //   RTND set 1-line period: RTND2, RTND0
 800239e:	2005      	movs	r0, #5
 80023a0:	f7ff ff44 	bl	800222c <ST7735_write>
	ST7735_write(0x3c); //   Front porch: FPD5,FPD4,FPD3,FPD2
 80023a4:	203c      	movs	r0, #60	; 0x3c
 80023a6:	f7ff ff41 	bl	800222c <ST7735_write>
	ST7735_write(0x3c); //   Back porch: BPD5,BPD4,BPD3,BPD2
 80023aa:	203c      	movs	r0, #60	; 0x3c
 80023ac:	f7ff ff3e 	bl	800222c <ST7735_write>
	ST7735_cmd(0xB4);   // Display dot inversion control:
 80023b0:	20b4      	movs	r0, #180	; 0xb4
 80023b2:	f7ff ff49 	bl	8002248 <ST7735_cmd>
	ST7735_data(0x03);  //   NLB,NLC
 80023b6:	2003      	movs	r0, #3
 80023b8:	f7ff ff54 	bl	8002264 <ST7735_data>
	ST7735_cmd(0x3a);   // Interface pixel format
 80023bc:	203a      	movs	r0, #58	; 0x3a
 80023be:	f7ff ff43 	bl	8002248 <ST7735_cmd>
	ST7735_data(0x05);  // 16-bit/pixel RGB 5-6-5 (65k colors)
 80023c2:	2005      	movs	r0, #5
 80023c4:	f7ff ff4e 	bl	8002264 <ST7735_data>
	ST7735_cmd(0x20);   // Display inversion off
 80023c8:	2020      	movs	r0, #32
 80023ca:	f7ff ff3d 	bl	8002248 <ST7735_cmd>
	ST7735_cmd(0x13);   // Partial mode off
 80023ce:	2013      	movs	r0, #19
 80023d0:	f7ff ff3a 	bl	8002248 <ST7735_cmd>
	ST7735_cmd(0x26);   // Gamma curve set:
 80023d4:	2026      	movs	r0, #38	; 0x26
 80023d6:	f7ff ff37 	bl	8002248 <ST7735_cmd>
	ST7735_data(0x01);  //   Gamma curve 1 (G2.2) or (G1.0)
 80023da:	2001      	movs	r0, #1
 80023dc:	f7ff ff42 	bl	8002264 <ST7735_data>
	ST7735_cmd(0x29);   // Display on
 80023e0:	2029      	movs	r0, #41	; 0x29
 80023e2:	f7ff ff31 	bl	8002248 <ST7735_cmd>
	CS_H();
 80023e6:	2201      	movs	r2, #1
 80023e8:	2102      	movs	r1, #2
 80023ea:	0020      	movs	r0, r4
 80023ec:	f002 f8d0 	bl	8004590 <HAL_GPIO_WritePin>
	ST7735_Orientation(scr_CCW);
 80023f0:	2002      	movs	r0, #2
 80023f2:	f7ff ff45 	bl	8002280 <ST7735_Orientation>
}
 80023f6:	bd10      	pop	{r4, pc}
 80023f8:	50000c00 	.word	0x50000c00

080023fc <ST7735_AddrSet>:

void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 80023fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023fe:	0006      	movs	r6, r0
 8002400:	0015      	movs	r5, r2
 8002402:	000c      	movs	r4, r1
	ST7735_cmd(0x2a); // Column address set
	A0_H();
 8002404:	4f17      	ldr	r7, [pc, #92]	; (8002464 <ST7735_AddrSet+0x68>)
	ST7735_cmd(0x2a); // Column address set
 8002406:	202a      	movs	r0, #42	; 0x2a
void ST7735_AddrSet(uint16_t XS, uint16_t YS, uint16_t XE, uint16_t YE) {
 8002408:	9301      	str	r3, [sp, #4]
	ST7735_cmd(0x2a); // Column address set
 800240a:	f7ff ff1d 	bl	8002248 <ST7735_cmd>
	A0_H();
 800240e:	2201      	movs	r2, #1
 8002410:	2110      	movs	r1, #16
 8002412:	0038      	movs	r0, r7
 8002414:	f002 f8bc 	bl	8004590 <HAL_GPIO_WritePin>
	ST7735_write(XS >> 8);
 8002418:	0a30      	lsrs	r0, r6, #8
 800241a:	f7ff ff07 	bl	800222c <ST7735_write>
	ST7735_write(XS);
 800241e:	b2f0      	uxtb	r0, r6
 8002420:	f7ff ff04 	bl	800222c <ST7735_write>
	ST7735_write(XE >> 8);
 8002424:	0a28      	lsrs	r0, r5, #8
 8002426:	f7ff ff01 	bl	800222c <ST7735_write>
	ST7735_write(XE);
 800242a:	b2e8      	uxtb	r0, r5
 800242c:	f7ff fefe 	bl	800222c <ST7735_write>

	ST7735_cmd(0x2b); // Row address set
 8002430:	202b      	movs	r0, #43	; 0x2b
 8002432:	f7ff ff09 	bl	8002248 <ST7735_cmd>
	A0_H();
 8002436:	2201      	movs	r2, #1
 8002438:	2110      	movs	r1, #16
 800243a:	0038      	movs	r0, r7
 800243c:	f002 f8a8 	bl	8004590 <HAL_GPIO_WritePin>
	ST7735_write(YS >> 8);
 8002440:	0a20      	lsrs	r0, r4, #8
 8002442:	f7ff fef3 	bl	800222c <ST7735_write>
	ST7735_write(YS);
 8002446:	b2e0      	uxtb	r0, r4
 8002448:	f7ff fef0 	bl	800222c <ST7735_write>
	ST7735_write(YE >> 8);
 800244c:	9b01      	ldr	r3, [sp, #4]
 800244e:	0a18      	lsrs	r0, r3, #8
 8002450:	f7ff feec 	bl	800222c <ST7735_write>
	ST7735_write(YE);
 8002454:	466b      	mov	r3, sp
 8002456:	7918      	ldrb	r0, [r3, #4]
 8002458:	f7ff fee8 	bl	800222c <ST7735_write>

	ST7735_cmd(0x2c); // Memory write
 800245c:	202c      	movs	r0, #44	; 0x2c
 800245e:	f7ff fef3 	bl	8002248 <ST7735_cmd>
}
 8002462:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002464:	50000c00 	.word	0x50000c00

08002468 <ST7735_Clear>:

void ST7735_Clear(uint16_t color) {
 8002468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t i;
	uint8_t  CH,CL;

	CH = color >> 8;
 800246a:	0a03      	lsrs	r3, r0, #8
	CL = (uint8_t)color;

	CS_L();
 800246c:	2200      	movs	r2, #0
 800246e:	2102      	movs	r1, #2
	CL = (uint8_t)color;
 8002470:	b2c5      	uxtb	r5, r0
	CS_L();
 8002472:	4815      	ldr	r0, [pc, #84]	; (80024c8 <ST7735_Clear+0x60>)
	CH = color >> 8;
 8002474:	9301      	str	r3, [sp, #4]
	CS_L();
 8002476:	f002 f88b 	bl	8004590 <HAL_GPIO_WritePin>
	ST7735_AddrSet(0, 0, scr_width - 1, scr_height - 1);
 800247a:	2100      	movs	r1, #0
 800247c:	4e13      	ldr	r6, [pc, #76]	; (80024cc <ST7735_Clear+0x64>)
 800247e:	4f14      	ldr	r7, [pc, #80]	; (80024d0 <ST7735_Clear+0x68>)
 8002480:	8833      	ldrh	r3, [r6, #0]
 8002482:	883a      	ldrh	r2, [r7, #0]
 8002484:	3b01      	subs	r3, #1
 8002486:	3a01      	subs	r2, #1
 8002488:	0008      	movs	r0, r1
 800248a:	b29b      	uxth	r3, r3
 800248c:	b292      	uxth	r2, r2
 800248e:	f7ff ffb5 	bl	80023fc <ST7735_AddrSet>
	A0_H();
 8002492:	2201      	movs	r2, #1
 8002494:	2110      	movs	r1, #16
 8002496:	480c      	ldr	r0, [pc, #48]	; (80024c8 <ST7735_Clear+0x60>)
 8002498:	f002 f87a 	bl	8004590 <HAL_GPIO_WritePin>
	for (i = 0; i < scr_width * scr_height; i++) {
 800249c:	2400      	movs	r4, #0
 800249e:	883a      	ldrh	r2, [r7, #0]
 80024a0:	8833      	ldrh	r3, [r6, #0]
 80024a2:	4353      	muls	r3, r2
 80024a4:	429c      	cmp	r4, r3
 80024a6:	db05      	blt.n	80024b4 <ST7735_Clear+0x4c>
		ST7735_write(CH);
		ST7735_write(CL);
	}
	CS_H();
 80024a8:	2201      	movs	r2, #1
 80024aa:	2102      	movs	r1, #2
 80024ac:	4806      	ldr	r0, [pc, #24]	; (80024c8 <ST7735_Clear+0x60>)
 80024ae:	f002 f86f 	bl	8004590 <HAL_GPIO_WritePin>
}
 80024b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		ST7735_write(CH);
 80024b4:	9801      	ldr	r0, [sp, #4]
 80024b6:	f7ff feb9 	bl	800222c <ST7735_write>
	for (i = 0; i < scr_width * scr_height; i++) {
 80024ba:	3401      	adds	r4, #1
		ST7735_write(CL);
 80024bc:	0028      	movs	r0, r5
 80024be:	f7ff feb5 	bl	800222c <ST7735_write>
	for (i = 0; i < scr_width * scr_height; i++) {
 80024c2:	b2a4      	uxth	r4, r4
 80024c4:	e7eb      	b.n	800249e <ST7735_Clear+0x36>
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	50000c00 	.word	0x50000c00
 80024cc:	200046be 	.word	0x200046be
 80024d0:	200046bc 	.word	0x200046bc

080024d4 <ST7735_Flush_2>:
	lv_disp_flush_ready(disp_drv);                  /* Tell you are ready with the flushing*/
#endif
}

void ST7735_Flush_2(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
 80024d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024d6:	000c      	movs	r4, r1
 80024d8:	0016      	movs	r6, r2
	uint16_t size;
	uint16_t teste = 0;
	uint8_t tmp[2];

    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 80024da:	2204      	movs	r2, #4
 80024dc:	5e8b      	ldrsh	r3, [r1, r2]
 80024de:	2100      	movs	r1, #0
 80024e0:	5e62      	ldrsh	r2, [r4, r1]
{
 80024e2:	0005      	movs	r5, r0
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 80024e4:	1a9b      	subs	r3, r3, r2
 80024e6:	2106      	movs	r1, #6
 80024e8:	5e62      	ldrsh	r2, [r4, r1]
 80024ea:	2002      	movs	r0, #2
 80024ec:	5e21      	ldrsh	r1, [r4, r0]
 80024ee:	3301      	adds	r3, #1
 80024f0:	1a52      	subs	r2, r2, r1
 80024f2:	3201      	adds	r2, #1
 80024f4:	4353      	muls	r3, r2
{
 80024f6:	b085      	sub	sp, #20
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 80024f8:	b29b      	uxth	r3, r3

	CS_L();
 80024fa:	2200      	movs	r2, #0
 80024fc:	2102      	movs	r1, #2
 80024fe:	4829      	ldr	r0, [pc, #164]	; (80025a4 <ST7735_Flush_2+0xd0>)
    size = ( ((area->x2 - area->x1) + 1)  * ((area->y2 - area->y1) + 1) );
 8002500:	9301      	str	r3, [sp, #4]
	CS_L();
 8002502:	f002 f845 	bl	8004590 <HAL_GPIO_WritePin>
    ST7735_cmd(0x2a); // Column address set
 8002506:	202a      	movs	r0, #42	; 0x2a
 8002508:	f7ff fe9e 	bl	8002248 <ST7735_cmd>
	A0_H();
 800250c:	2201      	movs	r2, #1
 800250e:	2110      	movs	r1, #16
 8002510:	4824      	ldr	r0, [pc, #144]	; (80025a4 <ST7735_Flush_2+0xd0>)
 8002512:	f002 f83d 	bl	8004590 <HAL_GPIO_WritePin>
	ST7735_write(area->x1 >> 8);
 8002516:	7860      	ldrb	r0, [r4, #1]
 8002518:	f7ff fe88 	bl	800222c <ST7735_write>
	ST7735_write(area->x1);
 800251c:	7820      	ldrb	r0, [r4, #0]
 800251e:	f7ff fe85 	bl	800222c <ST7735_write>
	ST7735_write(area->x2 >> 8);
 8002522:	7960      	ldrb	r0, [r4, #5]
 8002524:	f7ff fe82 	bl	800222c <ST7735_write>
	ST7735_write(area->x2);
 8002528:	7920      	ldrb	r0, [r4, #4]
 800252a:	f7ff fe7f 	bl	800222c <ST7735_write>

	ST7735_cmd(0x2b); // Row address set
 800252e:	202b      	movs	r0, #43	; 0x2b
 8002530:	f7ff fe8a 	bl	8002248 <ST7735_cmd>
	A0_H();
 8002534:	2201      	movs	r2, #1
 8002536:	2110      	movs	r1, #16
 8002538:	481a      	ldr	r0, [pc, #104]	; (80025a4 <ST7735_Flush_2+0xd0>)
 800253a:	f002 f829 	bl	8004590 <HAL_GPIO_WritePin>
	ST7735_write(area->y1 >> 8);
 800253e:	78e0      	ldrb	r0, [r4, #3]
 8002540:	f7ff fe74 	bl	800222c <ST7735_write>
	ST7735_write(area->y1);
 8002544:	78a0      	ldrb	r0, [r4, #2]
 8002546:	f7ff fe71 	bl	800222c <ST7735_write>
	ST7735_write(area->y2 >> 8);
 800254a:	79e0      	ldrb	r0, [r4, #7]
 800254c:	f7ff fe6e 	bl	800222c <ST7735_write>
	ST7735_write(area->y2);
 8002550:	79a0      	ldrb	r0, [r4, #6]
 8002552:	f7ff fe6b 	bl	800222c <ST7735_write>

	ST7735_cmd(0x2c); // Memory write
 8002556:	202c      	movs	r0, #44	; 0x2c
 8002558:	f7ff fe76 	bl	8002248 <ST7735_cmd>
	A0_H();
	//
	for(uint16_t x = 0; x <= size-1; x++) {
		tmp[0] = color_p->full >> 8;
		tmp[1] = color_p->full;
		HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&tmp[0], 2, HAL_MAX_DELAY);
 800255c:	2701      	movs	r7, #1
	A0_H();
 800255e:	2201      	movs	r2, #1
 8002560:	2110      	movs	r1, #16
 8002562:	4810      	ldr	r0, [pc, #64]	; (80025a4 <ST7735_Flush_2+0xd0>)
 8002564:	f002 f814 	bl	8004590 <HAL_GPIO_WritePin>
	for(uint16_t x = 0; x <= size-1; x++) {
 8002568:	2400      	movs	r4, #0
		HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&tmp[0], 2, HAL_MAX_DELAY);
 800256a:	427f      	negs	r7, r7
	for(uint16_t x = 0; x <= size-1; x++) {
 800256c:	9a01      	ldr	r2, [sp, #4]
 800256e:	b2a3      	uxth	r3, r4
 8002570:	429a      	cmp	r2, r3
 8002572:	dc09      	bgt.n	8002588 <ST7735_Flush_2+0xb4>
		color_p++;
		teste++;
	}
	CS_H();
 8002574:	2201      	movs	r2, #1
 8002576:	2102      	movs	r1, #2
 8002578:	480a      	ldr	r0, [pc, #40]	; (80025a4 <ST7735_Flush_2+0xd0>)
 800257a:	f002 f809 	bl	8004590 <HAL_GPIO_WritePin>

//	sprintf(buffer, "ST7735-Flush2 X1: %d X2: %d Y1: %d Y2: %d Size: %d Teste: %d", area->x1, area->x2, area->y1, area->y2, size, teste);
//    LV_LOG_ERROR(buffer);

	lv_disp_flush_ready(disp_drv);                  /* Tell you are ready with the flushing*/
 800257e:	0028      	movs	r0, r5
 8002580:	f009 fc82 	bl	800be88 <lv_disp_flush_ready>
}
 8002584:	b005      	add	sp, #20
 8002586:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[0] = color_p->full >> 8;
 8002588:	0063      	lsls	r3, r4, #1
 800258a:	5af3      	ldrh	r3, [r6, r3]
 800258c:	a903      	add	r1, sp, #12
 800258e:	0a1a      	lsrs	r2, r3, #8
 8002590:	700a      	strb	r2, [r1, #0]
		tmp[1] = color_p->full;
 8002592:	704b      	strb	r3, [r1, #1]
		HAL_SPI_Transmit(&_SPI_PORT, (uint8_t *)&tmp[0], 2, HAL_MAX_DELAY);
 8002594:	2202      	movs	r2, #2
 8002596:	003b      	movs	r3, r7
 8002598:	4803      	ldr	r0, [pc, #12]	; (80025a8 <ST7735_Flush_2+0xd4>)
 800259a:	f002 fe92 	bl	80052c2 <HAL_SPI_Transmit>
 800259e:	3401      	adds	r4, #1
 80025a0:	e7e4      	b.n	800256c <ST7735_Flush_2+0x98>
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	50000c00 	.word	0x50000c00
 80025a8:	20004918 	.word	0x20004918

080025ac <ST7735_Flush_3>:
 80025ac:	b510      	push	{r4, lr}
 80025ae:	f7ff ff91 	bl	80024d4 <ST7735_Flush_2>
 80025b2:	bd10      	pop	{r4, pc}

080025b4 <ClearLog>:

/** Clear the duration parameter and the click count parameter of the button.
 */
void ClearLog(uint8_t key, uint8_t index)
{
	if(index < 8)
 80025b4:	2907      	cmp	r1, #7
 80025b6:	d807      	bhi.n	80025c8 <ClearLog+0x14>
	{
		bt[key]->click[index] = bt[key]->duration[index] = 0;
 80025b8:	2360      	movs	r3, #96	; 0x60
 80025ba:	4343      	muls	r3, r0
 80025bc:	4803      	ldr	r0, [pc, #12]	; (80025cc <ClearLog+0x18>)
 80025be:	18c0      	adds	r0, r0, r3
 80025c0:	2300      	movs	r3, #0
 80025c2:	1841      	adds	r1, r0, r1
 80025c4:	728b      	strb	r3, [r1, #10]
 80025c6:	708b      	strb	r3, [r1, #2]
	}
}
 80025c8:	4770      	bx	lr
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	200046d8 	.word	0x200046d8

080025d0 <KeyboardInit>:
{
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d2:	0006      	movs	r6, r0
	for(x = 0; x < 6; x++) {
 80025d4:	2500      	movs	r5, #0
 80025d6:	4c0a      	ldr	r4, [pc, #40]	; (8002600 <KeyboardInit+0x30>)
		bt[x]->old_state = bt[x]->new_state = 0;
 80025d8:	2700      	movs	r7, #0
		bt[x]->mask = mask;
 80025da:	74a6      	strb	r6, [r4, #18]
		bt[x]->old_state = bt[x]->new_state = 0;
 80025dc:	7067      	strb	r7, [r4, #1]
 80025de:	7027      	strb	r7, [r4, #0]
		bt[x]->mode = 0;
 80025e0:	74e7      	strb	r7, [r4, #19]
		bt[x]->flag = 0;
 80025e2:	6167      	str	r7, [r4, #20]
			ClearLog(x, i);
 80025e4:	b2f9      	uxtb	r1, r7
 80025e6:	0028      	movs	r0, r5
		for(i = 0; i < 8; i++) {
 80025e8:	3701      	adds	r7, #1
			ClearLog(x, i);
 80025ea:	f7ff ffe3 	bl	80025b4 <ClearLog>
		for(i = 0; i < 8; i++) {
 80025ee:	2f08      	cmp	r7, #8
 80025f0:	d1f8      	bne.n	80025e4 <KeyboardInit+0x14>
	for(x = 0; x < 6; x++) {
 80025f2:	3501      	adds	r5, #1
 80025f4:	b2ed      	uxtb	r5, r5
 80025f6:	3460      	adds	r4, #96	; 0x60
 80025f8:	2d06      	cmp	r5, #6
 80025fa:	d1ed      	bne.n	80025d8 <KeyboardInit+0x8>
}
 80025fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	200046d8 	.word	0x200046d8

08002604 <KeyboardSetMode>:

void KeyboardSetMode(uint8_t key, uint8_t mode, bool flag)
{
 8002604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	// clear data
	bt[key]->old_state = bt[key]->new_state = 0;
 8002606:	2360      	movs	r3, #96	; 0x60
 8002608:	2400      	movs	r4, #0
 800260a:	4343      	muls	r3, r0
 800260c:	4d0a      	ldr	r5, [pc, #40]	; (8002638 <KeyboardSetMode+0x34>)
{
 800260e:	000e      	movs	r6, r1
	bt[key]->old_state = bt[key]->new_state = 0;
 8002610:	555c      	strb	r4, [r3, r5]
 8002612:	18e9      	adds	r1, r5, r3
	// this looks weird but correct
	bt[key]->flag = !flag;
 8002614:	2301      	movs	r3, #1
{
 8002616:	0007      	movs	r7, r0
	bt[key]->flag = !flag;
 8002618:	405a      	eors	r2, r3
	bt[key]->old_state = bt[key]->new_state = 0;
 800261a:	704c      	strb	r4, [r1, #1]
	bt[key]->flag = !flag;
 800261c:	614a      	str	r2, [r1, #20]

	// clear log
	for(i = 0; i < 8; i++)
	{
		ClearLog(key, i);
 800261e:	b2e1      	uxtb	r1, r4
 8002620:	0038      	movs	r0, r7
	for(i = 0; i < 8; i++)
 8002622:	3401      	adds	r4, #1
		ClearLog(key, i);
 8002624:	f7ff ffc6 	bl	80025b4 <ClearLog>
	for(i = 0; i < 8; i++)
 8002628:	2c08      	cmp	r4, #8
 800262a:	d1f8      	bne.n	800261e <KeyboardSetMode+0x1a>
	}

	// change mode
	bt[key]->mode = mode;
 800262c:	2360      	movs	r3, #96	; 0x60
 800262e:	435f      	muls	r7, r3
 8002630:	19ed      	adds	r5, r5, r7
 8002632:	74ee      	strb	r6, [r5, #19]
}
 8002634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	200046d8 	.word	0x200046d8

0800263c <PushButton_Read>:
	bt[key]->old_state = bt[key]->new_state;
}


uint8_t PushButton_Read(uint8_t key)
{
 800263c:	b510      	push	{r4, lr}
	uint8_t ret = 0x00;
 800263e:	2300      	movs	r3, #0

	switch(key) {
 8002640:	2804      	cmp	r0, #4
 8002642:	d80b      	bhi.n	800265c <PushButton_Read+0x20>
 8002644:	f7fd fd6e 	bl	8000124 <__gnu_thumb1_case_uqi>
 8002648:	100e0c03 	.word	0x100e0c03
 800264c:	12          	.byte	0x12
 800264d:	00          	.byte	0x00
		case 0:			// Down
			ret = !(HAL_GPIO_ReadPin(KEY_DN_GPIO_Port, KEY_DN_Pin));
 800264e:	2101      	movs	r1, #1
			break;
		case 2:			// Enter
			ret = !(HAL_GPIO_ReadPin(KEY_ENTER_GPIO_Port, KEY_ENTER_Pin));
			break;
		case 3:			// Esc
			ret = !(HAL_GPIO_ReadPin(KEY_ESC_GPIO_Port, KEY_ESC_Pin));
 8002650:	4808      	ldr	r0, [pc, #32]	; (8002674 <PushButton_Read+0x38>)
			break;
		case 4:			// SW Rotary Encoder
			ret = !(HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin));
 8002652:	f001 ff97 	bl	8004584 <HAL_GPIO_ReadPin>
 8002656:	4243      	negs	r3, r0
 8002658:	4143      	adcs	r3, r0
 800265a:	b2db      	uxtb	r3, r3
			break;
		default:
			break;
	}
	return ret;
}
 800265c:	0018      	movs	r0, r3
 800265e:	bd10      	pop	{r4, pc}
			ret = !(HAL_GPIO_ReadPin(KEY_UP_GPIO_Port, KEY_UP_Pin));
 8002660:	2102      	movs	r1, #2
 8002662:	e7f5      	b.n	8002650 <PushButton_Read+0x14>
			ret = !(HAL_GPIO_ReadPin(KEY_ENTER_GPIO_Port, KEY_ENTER_Pin));
 8002664:	2104      	movs	r1, #4
 8002666:	e7f3      	b.n	8002650 <PushButton_Read+0x14>
			ret = !(HAL_GPIO_ReadPin(KEY_ESC_GPIO_Port, KEY_ESC_Pin));
 8002668:	2108      	movs	r1, #8
 800266a:	e7f1      	b.n	8002650 <PushButton_Read+0x14>
			ret = !(HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin));
 800266c:	2120      	movs	r1, #32
 800266e:	4802      	ldr	r0, [pc, #8]	; (8002678 <PushButton_Read+0x3c>)
 8002670:	e7ef      	b.n	8002652 <PushButton_Read+0x16>
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	50000400 	.word	0x50000400
 8002678:	50000c00 	.word	0x50000c00

0800267c <Evt_EnQueue>:
 * \return false if the queue is full
 */
bool Evt_EnQueue(uint8_t *event)
{
	unsigned i;
	uint8_t next = ADVANCE_QPTR(evt_queue.head);
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <Evt_EnQueue+0x34>)
 800267e:	2107      	movs	r1, #7
 8002680:	001a      	movs	r2, r3
{
 8002682:	b530      	push	{r4, r5, lr}
	uint8_t next = ADVANCE_QPTR(evt_queue.head);
 8002684:	3280      	adds	r2, #128	; 0x80
 8002686:	7812      	ldrb	r2, [r2, #0]
 8002688:	1c54      	adds	r4, r2, #1
 800268a:	400c      	ands	r4, r1

	// queue is full
	if(next == evt_queue.tail)
 800268c:	0019      	movs	r1, r3
 800268e:	3181      	adds	r1, #129	; 0x81
 8002690:	780d      	ldrb	r5, [r1, #0]
	{
		// event will be lost
		//logI("I - Evt_EnQueue Full\n\r");
		return false;
 8002692:	2100      	movs	r1, #0
	if(next == evt_queue.tail)
 8002694:	42a5      	cmp	r5, r4
 8002696:	d009      	beq.n	80026ac <Evt_EnQueue+0x30>
 8002698:	0112      	lsls	r2, r2, #4
 800269a:	189a      	adds	r2, r3, r2
	}

	// copy event bytes into the buffer
	for(i = 0; i < EVT_QWIDTH; i++)
	{
		evt_queue.buff[evt_queue.head][i] = event[i];
 800269c:	5c45      	ldrb	r5, [r0, r1]
 800269e:	5455      	strb	r5, [r2, r1]
	for(i = 0; i < EVT_QWIDTH; i++)
 80026a0:	3101      	adds	r1, #1
 80026a2:	2910      	cmp	r1, #16
 80026a4:	d1fa      	bne.n	800269c <Evt_EnQueue+0x20>
	}
	// move to the next positition
	evt_queue.head = next;
 80026a6:	3380      	adds	r3, #128	; 0x80
 80026a8:	701c      	strb	r4, [r3, #0]

	//logI("I - Evt_EnQueue OK\n\r");
	return true;
 80026aa:	390f      	subs	r1, #15
}
 80026ac:	0008      	movs	r0, r1
 80026ae:	bd30      	pop	{r4, r5, pc}
 80026b0:	200006e4 	.word	0x200006e4

080026b4 <KeyboardRead>:
{
 80026b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b6:	b085      	sub	sp, #20
 80026b8:	0004      	movs	r4, r0
	bt[key]->new_state = PushButton_Read(key);
 80026ba:	f7ff ffbf 	bl	800263c <PushButton_Read>
 80026be:	2260      	movs	r2, #96	; 0x60
 80026c0:	4362      	muls	r2, r4
 80026c2:	4e3e      	ldr	r6, [pc, #248]	; (80027bc <KeyboardRead+0x108>)
 80026c4:	18b3      	adds	r3, r6, r2
 80026c6:	7058      	strb	r0, [r3, #1]
	diff_state = bt[key]->old_state ^ bt[key]->new_state;
 80026c8:	5d95      	ldrb	r5, [r2, r6]
	if(((bt[key]->mode >> i) & 0x01)  == PUSHBTN_MODE_UDOWN) {
 80026ca:	2201      	movs	r2, #1
 80026cc:	7cd9      	ldrb	r1, [r3, #19]
 80026ce:	4211      	tst	r1, r2
 80026d0:	d01d      	beq.n	800270e <KeyboardRead+0x5a>
		if(((bt[key]->new_state >> i) & 0x01) == 0x01) {
 80026d2:	0001      	movs	r1, r0
 80026d4:	4011      	ands	r1, r2
 80026d6:	d00f      	beq.n	80026f8 <KeyboardRead+0x44>
			event[0] = EVT_PBTN_INPUT;
 80026d8:	2310      	movs	r3, #16
 80026da:	466a      	mov	r2, sp
 80026dc:	7013      	strb	r3, [r2, #0]
			event[2] = PBTN_DOWN;
 80026de:	2305      	movs	r3, #5
			event[1] = (uint8_t)key;
 80026e0:	7054      	strb	r4, [r2, #1]
				Evt_EnQueue(event);
 80026e2:	4668      	mov	r0, sp
				event[2] = PBTN_ENDN;
 80026e4:	7093      	strb	r3, [r2, #2]
				Evt_EnQueue(event);
 80026e6:	f7ff ffc9 	bl	800267c <Evt_EnQueue>
	bt[key]->old_state = bt[key]->new_state;
 80026ea:	2360      	movs	r3, #96	; 0x60
 80026ec:	435c      	muls	r4, r3
 80026ee:	1933      	adds	r3, r6, r4
 80026f0:	785b      	ldrb	r3, [r3, #1]
 80026f2:	5533      	strb	r3, [r6, r4]
}
 80026f4:	b005      	add	sp, #20
 80026f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(((bt[key]->old_state >> i) & 0x01) == 0x01) {
 80026f8:	4215      	tst	r5, r2
 80026fa:	d0f6      	beq.n	80026ea <KeyboardRead+0x36>
				KeyboardSetMode(key, PUSHBTN_MODE_CLICK, true);
 80026fc:	0020      	movs	r0, r4
 80026fe:	f7ff ff81 	bl	8002604 <KeyboardSetMode>
				event[0] = EVT_PBTN_INPUT;
 8002702:	2310      	movs	r3, #16
 8002704:	466a      	mov	r2, sp
 8002706:	7013      	strb	r3, [r2, #0]
				event[1] = (uint8_t)key;
 8002708:	7054      	strb	r4, [r2, #1]
				event[2] = PBTN_ENDN;
 800270a:	2306      	movs	r3, #6
 800270c:	e7e9      	b.n	80026e2 <KeyboardRead+0x2e>
	diff_state = bt[key]->old_state ^ bt[key]->new_state;
 800270e:	4045      	eors	r5, r0
		if((diff_state >> i) & 0x01) {
 8002710:	4215      	tst	r5, r2
 8002712:	d01e      	beq.n	8002752 <KeyboardRead+0x9e>
			bt[key]->duration[i] = 1;
 8002714:	729a      	strb	r2, [r3, #10]
			if(((bt[key]->new_state >> i) & 0x01) == 0x00) {
 8002716:	4002      	ands	r2, r0
 8002718:	d108      	bne.n	800272c <KeyboardRead+0x78>
				if(bt[key]->flag) {
 800271a:	6959      	ldr	r1, [r3, #20]
 800271c:	2900      	cmp	r1, #0
 800271e:	d002      	beq.n	8002726 <KeyboardRead+0x72>
					bt[key]->flag = false;
 8002720:	615a      	str	r2, [r3, #20]
				bt[key]->duration[i]++;
 8002722:	729a      	strb	r2, [r3, #10]
 8002724:	e002      	b.n	800272c <KeyboardRead+0x78>
					bt[key]->click[i]++;
 8002726:	789a      	ldrb	r2, [r3, #2]
 8002728:	3201      	adds	r2, #1
 800272a:	709a      	strb	r2, [r3, #2]
		if(bt[key]->click[i] >= 3) {
 800272c:	2560      	movs	r5, #96	; 0x60
 800272e:	4365      	muls	r5, r4
 8002730:	1975      	adds	r5, r6, r5
 8002732:	78aa      	ldrb	r2, [r5, #2]
 8002734:	2a02      	cmp	r2, #2
 8002736:	d913      	bls.n	8002760 <KeyboardRead+0xac>
			event[0] = EVT_PBTN_INPUT;
 8002738:	466a      	mov	r2, sp
 800273a:	2310      	movs	r3, #16
 800273c:	7013      	strb	r3, [r2, #0]
			event[2] = PBTN_TCLK;
 800273e:	2304      	movs	r3, #4
			Evt_EnQueue(event);
 8002740:	4668      	mov	r0, sp
			event[2] = PBTN_TCLK;
 8002742:	7093      	strb	r3, [r2, #2]
			event[1] = (uint8_t)key;
 8002744:	7054      	strb	r4, [r2, #1]
			Evt_EnQueue(event);
 8002746:	f7ff ff99 	bl	800267c <Evt_EnQueue>
			bt[key]->click[i] = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	70ab      	strb	r3, [r5, #2]
			bt[key]->duration[i] = 0;
 800274e:	72ab      	strb	r3, [r5, #10]
 8002750:	e7cb      	b.n	80026ea <KeyboardRead+0x36>
			if((bt[key]->duration[i] > 0) && (bt[key]->duration[i] < PUSHBTN_TO_MAX)) {
 8002752:	7a9a      	ldrb	r2, [r3, #10]
 8002754:	1e51      	subs	r1, r2, #1
 8002756:	b2c9      	uxtb	r1, r1
 8002758:	29fd      	cmp	r1, #253	; 0xfd
 800275a:	d8e7      	bhi.n	800272c <KeyboardRead+0x78>
				bt[key]->duration[i]++;
 800275c:	3201      	adds	r2, #1
 800275e:	e7e0      	b.n	8002722 <KeyboardRead+0x6e>
		else if((bt[key]->duration[i] > PUSHBTN_TO_SHORT) &&	(((bt[key]->new_state >> i) & 0x01) == 0x00)) {
 8002760:	7aab      	ldrb	r3, [r5, #10]
 8002762:	2b03      	cmp	r3, #3
 8002764:	d9c1      	bls.n	80026ea <KeyboardRead+0x36>
 8002766:	2701      	movs	r7, #1
 8002768:	4238      	tst	r0, r7
 800276a:	d116      	bne.n	800279a <KeyboardRead+0xe6>
 800276c:	2310      	movs	r3, #16
			if(bt[key]->click[i] == 2) {
 800276e:	2a02      	cmp	r2, #2
 8002770:	d10e      	bne.n	8002790 <KeyboardRead+0xdc>
				event[0] = EVT_PBTN_INPUT;
 8002772:	466a      	mov	r2, sp
 8002774:	7013      	strb	r3, [r2, #0]
				event[2] = PBTN_DCLK;
 8002776:	2303      	movs	r3, #3
				event[1] = (uint8_t)key;
 8002778:	7054      	strb	r4, [r2, #1]
				event[2] = PBTN_DCLK;
 800277a:	7093      	strb	r3, [r2, #2]
				Evt_EnQueue(event);
 800277c:	4668      	mov	r0, sp
 800277e:	f7ff ff7d 	bl	800267c <Evt_EnQueue>
			bt[key]->click[i] = 0;
 8002782:	2360      	movs	r3, #96	; 0x60
 8002784:	2200      	movs	r2, #0
 8002786:	4363      	muls	r3, r4
 8002788:	18f3      	adds	r3, r6, r3
 800278a:	709a      	strb	r2, [r3, #2]
			bt[key]->duration[i] = 0;
 800278c:	729a      	strb	r2, [r3, #10]
 800278e:	e7ac      	b.n	80026ea <KeyboardRead+0x36>
				event[0] = EVT_PBTN_INPUT;
 8002790:	466a      	mov	r2, sp
 8002792:	7013      	strb	r3, [r2, #0]
				event[1] = (uint8_t)key;
 8002794:	7054      	strb	r4, [r2, #1]
				event[2] = PBTN_SCLK;
 8002796:	7097      	strb	r7, [r2, #2]
 8002798:	e7f0      	b.n	800277c <KeyboardRead+0xc8>
		else if((bt[key]->duration[i] > PUSHBTN_TO_LONG) && (((bt[key]->new_state >> i) & 0x01) == 0x01)) {
 800279a:	2b0a      	cmp	r3, #10
 800279c:	d9a5      	bls.n	80026ea <KeyboardRead+0x36>
			event[0] = EVT_PBTN_INPUT;
 800279e:	466a      	mov	r2, sp
 80027a0:	2310      	movs	r3, #16
 80027a2:	7013      	strb	r3, [r2, #0]
			event[2] = PBTN_LCLK;
 80027a4:	2302      	movs	r3, #2
			Evt_EnQueue(event);
 80027a6:	4668      	mov	r0, sp
			event[2] = PBTN_LCLK;
 80027a8:	7093      	strb	r3, [r2, #2]
			event[1] = (uint8_t)key;
 80027aa:	7054      	strb	r4, [r2, #1]
			Evt_EnQueue(event);
 80027ac:	f7ff ff66 	bl	800267c <Evt_EnQueue>
			bt[key]->click[i] = 0;
 80027b0:	2300      	movs	r3, #0
			bt[key]->flag = true;
 80027b2:	616f      	str	r7, [r5, #20]
			bt[key]->click[i] = 0;
 80027b4:	70ab      	strb	r3, [r5, #2]
			bt[key]->duration[i] = 0;
 80027b6:	72ab      	strb	r3, [r5, #10]
 80027b8:	e797      	b.n	80026ea <KeyboardRead+0x36>
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	200046d8 	.word	0x200046d8

080027c0 <Key_Read>:
{
 80027c0:	b510      	push	{r4, lr}
	for(x = 0; x < 6; x++) {
 80027c2:	2400      	movs	r4, #0
		KeyboardRead(x);
 80027c4:	0020      	movs	r0, r4
	for(x = 0; x < 6; x++) {
 80027c6:	3401      	adds	r4, #1
 80027c8:	b2e4      	uxtb	r4, r4
		KeyboardRead(x);
 80027ca:	f7ff ff73 	bl	80026b4 <KeyboardRead>
	for(x = 0; x < 6; x++) {
 80027ce:	2c06      	cmp	r4, #6
 80027d0:	d1f8      	bne.n	80027c4 <Key_Read+0x4>
}
 80027d2:	bd10      	pop	{r4, pc}

080027d4 <Evt_DeQueue>:
 *
 * \param  event data in an array of uint8_t
 * \return false if the queue is empty
 */
bool Evt_DeQueue(uint8_t *event)
{
 80027d4:	b530      	push	{r4, r5, lr}

	// disable all timers
	//UsrTimer_Enable(false);

	// queue is not empty
	if(evt_queue.tail != evt_queue.head)
 80027d6:	4c0d      	ldr	r4, [pc, #52]	; (800280c <Evt_DeQueue+0x38>)
 80027d8:	0023      	movs	r3, r4
 80027da:	0022      	movs	r2, r4
 80027dc:	3381      	adds	r3, #129	; 0x81
 80027de:	3280      	adds	r2, #128	; 0x80
 80027e0:	7811      	ldrb	r1, [r2, #0]
 80027e2:	781d      	ldrb	r5, [r3, #0]
	bool flag = false;
 80027e4:	2200      	movs	r2, #0
	if(evt_queue.tail != evt_queue.head)
 80027e6:	428d      	cmp	r5, r1
 80027e8:	d00d      	beq.n	8002806 <Evt_DeQueue+0x32>
	{
		// copy event bytes into the buffer
		for(i = 0; i < EVT_QWIDTH; i++)
		{
			event[i] = evt_queue.buff[evt_queue.tail][i];
 80027ea:	7819      	ldrb	r1, [r3, #0]
 80027ec:	0109      	lsls	r1, r1, #4
 80027ee:	1861      	adds	r1, r4, r1
 80027f0:	5c89      	ldrb	r1, [r1, r2]
 80027f2:	5481      	strb	r1, [r0, r2]
 80027f4:	3201      	adds	r2, #1
		for(i = 0; i < EVT_QWIDTH; i++)
 80027f6:	2a10      	cmp	r2, #16
 80027f8:	d1f7      	bne.n	80027ea <Evt_DeQueue+0x16>
		}
		// move to the next position
		evt_queue.tail = ADVANCE_QPTR(evt_queue.tail);
 80027fa:	2107      	movs	r1, #7
 80027fc:	781a      	ldrb	r2, [r3, #0]
 80027fe:	3201      	adds	r2, #1
 8002800:	400a      	ands	r2, r1
 8002802:	701a      	strb	r2, [r3, #0]
		// set flag
		flag = true;
 8002804:	2201      	movs	r2, #1
	// enable all timers
	//UsrTimer_Enable(true);

	// return with the flag
	return flag;
}
 8002806:	0010      	movs	r0, r2
 8002808:	bd30      	pop	{r4, r5, pc}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	200006e4 	.word	0x200006e4

08002810 <Evt_InitQueue>:
 * the data in the queue.
 */
void Evt_InitQueue(void)
{
	// clear queue by resetting the pointers
	evt_queue.head = evt_queue.tail = 0;
 8002810:	4b03      	ldr	r3, [pc, #12]	; (8002820 <Evt_InitQueue+0x10>)
 8002812:	2200      	movs	r2, #0
 8002814:	0019      	movs	r1, r3
 8002816:	3380      	adds	r3, #128	; 0x80
 8002818:	3181      	adds	r1, #129	; 0x81
 800281a:	700a      	strb	r2, [r1, #0]
 800281c:	701a      	strb	r2, [r3, #0]
}
 800281e:	4770      	bx	lr
 8002820:	200006e4 	.word	0x200006e4

08002824 <KeyboardEvent>:
	}
}

// Eventos Teclado
void KeyboardEvent(void)
{
 8002824:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t event[EVT_QWIDTH];
	//const char* teclas[] = {"KEY-DOWN", "KEY-UP", "KEY-ENTER", "KEY-ESC", "KEY-ROTARY", "KEY-USER"};

	// check event queue
	if(Evt_DeQueue(event)) {
 8002826:	4668      	mov	r0, sp
 8002828:	f7ff ffd4 	bl	80027d4 <Evt_DeQueue>
					//logI("\r\n --> Switch to click mode.");
				}
				break;
		}
	}
}
 800282c:	b005      	add	sp, #20
 800282e:	bd00      	pop	{pc}

08002830 <ButtonEvent>:
 8002830:	b510      	push	{r4, lr}
 8002832:	f7ff fff7 	bl	8002824 <KeyboardEvent>
 8002836:	bd10      	pop	{r4, pc}

08002838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002838:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800283a:	2610      	movs	r6, #16
{
 800283c:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800283e:	2234      	movs	r2, #52	; 0x34
 8002840:	2100      	movs	r1, #0
 8002842:	a80b      	add	r0, sp, #44	; 0x2c
 8002844:	f00b fcab 	bl	800e19e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002848:	0032      	movs	r2, r6
 800284a:	2100      	movs	r1, #0
 800284c:	4668      	mov	r0, sp
 800284e:	f00b fca6 	bl	800e19e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002852:	221c      	movs	r2, #28
 8002854:	2100      	movs	r1, #0
 8002856:	a804      	add	r0, sp, #16
 8002858:	f00b fca1 	bl	800e19e <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800285c:	2080      	movs	r0, #128	; 0x80
 800285e:	0080      	lsls	r0, r0, #2
 8002860:	f001 ff44 	bl	80046ec <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002864:	2118      	movs	r1, #24
 8002866:	4a1b      	ldr	r2, [pc, #108]	; (80028d4 <SystemClock_Config+0x9c>)
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002868:	2502      	movs	r5, #2
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800286a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800286c:	2400      	movs	r4, #0
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800286e:	438b      	bics	r3, r1
 8002870:	65d3      	str	r3, [r2, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002872:	2305      	movs	r3, #5
 8002874:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002876:	23a0      	movs	r3, #160	; 0xa0
 8002878:	02db      	lsls	r3, r3, #11
 800287a:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800287c:	2301      	movs	r3, #1
 800287e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002880:	195b      	adds	r3, r3, r5
 8002882:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 16;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002884:	2380      	movs	r3, #128	; 0x80
 8002886:	029b      	lsls	r3, r3, #10
 8002888:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800288a:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800288c:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800288e:	059b      	lsls	r3, r3, #22
 8002890:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002892:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002894:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002896:	9615      	str	r6, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002898:	f001 ff52 	bl	8004740 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800289c:	2307      	movs	r3, #7
 800289e:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028a0:	2380      	movs	r3, #128	; 0x80

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028a2:	0029      	movs	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028a4:	01db      	lsls	r3, r3, #7
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028a6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028a8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028aa:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028ac:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028ae:	f002 f9ad 	bl	8004c0c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <SystemClock_Config+0xa0>)
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028b4:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 80028b6:	9304      	str	r3, [sp, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80028be:	9406      	str	r4, [sp, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80028c0:	9407      	str	r4, [sp, #28]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80028c2:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028c4:	f002 faa4 	bl	8004e10 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 80028c8:	f002 fa7c 	bl	8004dc4 <HAL_RCC_EnableCSS>
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableLSECSS();
 80028cc:	f002 fa84 	bl	8004dd8 <HAL_RCC_EnableLSECSS>
}
 80028d0:	b018      	add	sp, #96	; 0x60
 80028d2:	bd70      	pop	{r4, r5, r6, pc}
 80028d4:	40021000 	.word	0x40021000
 80028d8:	00024042 	.word	0x00024042

080028dc <main>:
{
 80028dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028de:	b099      	sub	sp, #100	; 0x64
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e0:	ad0e      	add	r5, sp, #56	; 0x38
  HAL_Init();
 80028e2:	f001 fa65 	bl	8003db0 <HAL_Init>
  SystemClock_Config();
 80028e6:	f7ff ffa7 	bl	8002838 <SystemClock_Config>
  BSP_SD_Init();
 80028ea:	f000 fb8b 	bl	8003004 <BSP_SD_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ee:	2214      	movs	r2, #20
 80028f0:	2100      	movs	r1, #0
 80028f2:	0028      	movs	r0, r5
 80028f4:	f00b fc53 	bl	800e19e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028f8:	2104      	movs	r1, #4
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028fa:	2620      	movs	r6, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028fc:	4bfa      	ldr	r3, [pc, #1000]	; (8002ce8 <main+0x40c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 80028fe:	48fb      	ldr	r0, [pc, #1004]	; (8002cec <main+0x410>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002900:	6b5a      	ldr	r2, [r3, #52]	; 0x34

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FLASH_CS_Pin|LCD_RST_Pin|LCD_CS_Pin|LCD_WR_Pin 
 8002902:	4ffb      	ldr	r7, [pc, #1004]	; (8002cf0 <main+0x414>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002904:	430a      	orrs	r2, r1
 8002906:	635a      	str	r2, [r3, #52]	; 0x34
 8002908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : SW_USER_Pin */
  GPIO_InitStruct.Pin = SW_USER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800290a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800290c:	400a      	ands	r2, r1
 800290e:	9202      	str	r2, [sp, #8]
 8002910:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002914:	3903      	subs	r1, #3
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002916:	4332      	orrs	r2, r6
 8002918:	635a      	str	r2, [r3, #52]	; 0x34
 800291a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800291c:	4032      	ands	r2, r6
 800291e:	9203      	str	r2, [sp, #12]
 8002920:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002924:	430a      	orrs	r2, r1
 8002926:	635a      	str	r2, [r3, #52]	; 0x34
 8002928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800292a:	400a      	ands	r2, r1
 800292c:	9204      	str	r2, [sp, #16]
 800292e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002932:	3101      	adds	r1, #1
 8002934:	430a      	orrs	r2, r1
 8002936:	635a      	str	r2, [r3, #52]	; 0x34
 8002938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800293a:	400a      	ands	r2, r1
 800293c:	9205      	str	r2, [sp, #20]
 800293e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002942:	3106      	adds	r1, #6
 8002944:	430a      	orrs	r2, r1
 8002946:	635a      	str	r2, [r3, #52]	; 0x34
 8002948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOC, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 800294a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800294c:	400b      	ands	r3, r1
 800294e:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 8002950:	31f7      	adds	r1, #247	; 0xf7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002952:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 8002954:	f001 fe1c 	bl	8004590 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002958:	20a0      	movs	r0, #160	; 0xa0
 800295a:	0031      	movs	r1, r6
 800295c:	2200      	movs	r2, #0
 800295e:	05c0      	lsls	r0, r0, #23
 8002960:	f001 fe16 	bl	8004590 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, FLASH_CS_Pin|LCD_RST_Pin|LCD_CS_Pin|LCD_WR_Pin 
 8002964:	0039      	movs	r1, r7
 8002966:	2201      	movs	r2, #1
 8002968:	48e2      	ldr	r0, [pc, #904]	; (8002cf4 <main+0x418>)
 800296a:	f001 fe11 	bl	8004590 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800296e:	2180      	movs	r1, #128	; 0x80
 8002970:	20a0      	movs	r0, #160	; 0xa0
 8002972:	2201      	movs	r2, #1
 8002974:	00c9      	lsls	r1, r1, #3
 8002976:	05c0      	lsls	r0, r0, #23
 8002978:	f001 fe0a 	bl	8004590 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SW_USER_Pin;
 800297c:	2380      	movs	r3, #128	; 0x80
 800297e:	019b      	lsls	r3, r3, #6
 8002980:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002982:	2301      	movs	r3, #1
  HAL_GPIO_Init(SW_USER_GPIO_Port, &GPIO_InitStruct);
 8002984:	0029      	movs	r1, r5
 8002986:	48d9      	ldr	r0, [pc, #868]	; (8002cec <main+0x410>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002988:	606c      	str	r4, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800298a:	60ab      	str	r3, [r5, #8]
  HAL_GPIO_Init(SW_USER_GPIO_Port, &GPIO_InitStruct);
 800298c:	f001 fcdc 	bl	8004348 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D0_Pin LCD_D1_Pin LCD_D2_Pin LCD_D3_Pin 
                           LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 8002990:	23ff      	movs	r3, #255	; 0xff
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002992:	0029      	movs	r1, r5
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 8002994:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002996:	48d5      	ldr	r0, [pc, #852]	; (8002cec <main+0x410>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002998:	3bfe      	subs	r3, #254	; 0xfe
 800299a:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299e:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a0:	f001 fcd2 	bl	8004348 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = LED_Pin|SD_CS_Pin;
 80029a4:	2384      	movs	r3, #132	; 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a6:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = LED_Pin|SD_CS_Pin;
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ac:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ae:	0029      	movs	r1, r5
 80029b0:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b2:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b6:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b8:	f001 fcc6 	bl	8004348 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_DN_Pin KEY_UP_Pin KEY_ENTER_Pin KEY_ESC_Pin */
  GPIO_InitStruct.Pin = KEY_DN_Pin|KEY_UP_Pin|KEY_ENTER_Pin|KEY_ESC_Pin;
 80029bc:	230f      	movs	r3, #15
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029be:	0029      	movs	r1, r5
  GPIO_InitStruct.Pin = KEY_DN_Pin|KEY_UP_Pin|KEY_ENTER_Pin|KEY_ESC_Pin;
 80029c0:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c2:	48cd      	ldr	r0, [pc, #820]	; (8002cf8 <main+0x41c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029c4:	3b0e      	subs	r3, #14
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c6:	606c      	str	r4, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029c8:	60ab      	str	r3, [r5, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ca:	f001 fcbd 	bl	8004348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	015b      	lsls	r3, r3, #5
 80029d2:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029d4:	4bc9      	ldr	r3, [pc, #804]	; (8002cfc <main+0x420>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d6:	0029      	movs	r1, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029d8:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029da:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029dc:	48c6      	ldr	r0, [pc, #792]	; (8002cf8 <main+0x41c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029de:	60ab      	str	r3, [r5, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e0:	f001 fcb2 	bl	8004348 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_B_Pin ENC_A_Pin */
  GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 80029e4:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e6:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 80029e8:	009b      	lsls	r3, r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ea:	0029      	movs	r1, r5
 80029ec:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 80029ee:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029f0:	606c      	str	r4, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	60ac      	str	r4, [r5, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f4:	f001 fca8 	bl	8004348 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_CS_Pin LCD_RST_Pin LCD_CS_Pin LCD_WR_Pin 
                           LCD_RD_Pin LCD_DC_Pin TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|LCD_RST_Pin|LCD_CS_Pin|LCD_WR_Pin 
                          |LCD_RD_Pin|LCD_DC_Pin|TOUCH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f8:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029fa:	0029      	movs	r1, r5
 80029fc:	48bd      	ldr	r0, [pc, #756]	; (8002cf4 <main+0x418>)
  GPIO_InitStruct.Pin = FLASH_CS_Pin|LCD_RST_Pin|LCD_CS_Pin|LCD_WR_Pin 
 80029fe:	970e      	str	r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a00:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a02:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a04:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a06:	f001 fc9f 	bl	8004348 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a0a:	2301      	movs	r3, #1
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8002a0c:	0029      	movs	r1, r5
 8002a0e:	48b9      	ldr	r0, [pc, #740]	; (8002cf4 <main+0x418>)
  GPIO_InitStruct.Pin = SW_Pin;
 8002a10:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a12:	606c      	str	r4, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a14:	60ab      	str	r3, [r5, #8]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8002a16:	f001 fc97 	bl	8004348 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_C_Pin ENC_D_Pin */
  GPIO_InitStruct.Pin = ENC_C_Pin|ENC_D_Pin;
 8002a1a:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1c:	0029      	movs	r1, r5
 8002a1e:	48b6      	ldr	r0, [pc, #728]	; (8002cf8 <main+0x41c>)
  GPIO_InitStruct.Pin = ENC_C_Pin|ENC_D_Pin;
 8002a20:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a22:	606c      	str	r4, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	60ac      	str	r4, [r5, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a26:	f001 fc8f 	bl	8004348 <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002a2a:	220c      	movs	r2, #12
 8002a2c:	0021      	movs	r1, r4
 8002a2e:	0028      	movs	r0, r5
 8002a30:	f00b fbb5 	bl	800e19e <memset>
  hadc1.Instance = ADC1;
 8002a34:	4eb2      	ldr	r6, [pc, #712]	; (8002d00 <main+0x424>)
 8002a36:	4bb3      	ldr	r3, [pc, #716]	; (8002d04 <main+0x428>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002a38:	2780      	movs	r7, #128	; 0x80
  hadc1.Instance = ADC1;
 8002a3a:	6033      	str	r3, [r6, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002a3c:	2380      	movs	r3, #128	; 0x80
 8002a3e:	039b      	lsls	r3, r3, #14
 8002a40:	6133      	str	r3, [r6, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a42:	2304      	movs	r3, #4
 8002a44:	6173      	str	r3, [r6, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002a46:	3b03      	subs	r3, #3
 8002a48:	76b3      	strb	r3, [r6, #26]
  hadc1.Init.NbrOfConversion = 2;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	61f3      	str	r3, [r6, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a4e:	1c73      	adds	r3, r6, #1
 8002a50:	77dc      	strb	r4, [r3, #31]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002a52:	0033      	movs	r3, r6
 8002a54:	332c      	adds	r3, #44	; 0x2c
 8002a56:	701c      	strb	r4, [r3, #0]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8002a58:	2307      	movs	r3, #7
 8002a5a:	6373      	str	r3, [r6, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	63b3      	str	r3, [r6, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002a60:	0033      	movs	r3, r6
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002a62:	05ff      	lsls	r7, r7, #23
  hadc1.Init.OversamplingMode = DISABLE;
 8002a64:	333c      	adds	r3, #60	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a66:	0030      	movs	r0, r6
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002a68:	6077      	str	r7, [r6, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a6a:	60b4      	str	r4, [r6, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a6c:	60f4      	str	r4, [r6, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002a6e:	7634      	strb	r4, [r6, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002a70:	7674      	strb	r4, [r6, #25]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a72:	6274      	str	r4, [r6, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a74:	62b4      	str	r4, [r6, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002a76:	6334      	str	r4, [r6, #48]	; 0x30
  hadc1.Init.OversamplingMode = DISABLE;
 8002a78:	701c      	strb	r4, [r3, #0]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002a7a:	64f4      	str	r4, [r6, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a7c:	f001 f9d4 	bl	8003e28 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_0;
 8002a80:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a82:	0029      	movs	r1, r5
 8002a84:	0030      	movs	r0, r6
  sConfig.Channel = ADC_CHANNEL_0;
 8002a86:	930e      	str	r3, [sp, #56]	; 0x38
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002a88:	606c      	str	r4, [r5, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002a8a:	60ac      	str	r4, [r5, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a8c:	f001 fb04 	bl	8004098 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 8002a90:	4b9d      	ldr	r3, [pc, #628]	; (8002d08 <main+0x42c>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a92:	0029      	movs	r1, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8002a94:	930e      	str	r3, [sp, #56]	; 0x38
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002a96:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a98:	0030      	movs	r0, r6
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002a9a:	606b      	str	r3, [r5, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a9c:	f001 fafc 	bl	8004098 <HAL_ADC_ConfigChannel>
  hi2c1.Instance = I2C1;
 8002aa0:	4e9a      	ldr	r6, [pc, #616]	; (8002d0c <main+0x430>)
 8002aa2:	4b9b      	ldr	r3, [pc, #620]	; (8002d10 <main+0x434>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002aa4:	0030      	movs	r0, r6
  hi2c1.Instance = I2C1;
 8002aa6:	6033      	str	r3, [r6, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8002aa8:	4b9a      	ldr	r3, [pc, #616]	; (8002d14 <main+0x438>)
  hi2c1.Init.OwnAddress1 = 0;
 8002aaa:	60b4      	str	r4, [r6, #8]
  hi2c1.Init.Timing = 0x00300F38;
 8002aac:	6073      	str	r3, [r6, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002aae:	2301      	movs	r3, #1
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ab0:	6134      	str	r4, [r6, #16]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ab2:	60f3      	str	r3, [r6, #12]
  hi2c1.Init.OwnAddress2 = 0;
 8002ab4:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ab6:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ab8:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002aba:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002abc:	f001 fd76 	bl	80045ac <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ac0:	0021      	movs	r1, r4
 8002ac2:	0030      	movs	r0, r6
 8002ac4:	f001 fdc8 	bl	8004658 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ac8:	0021      	movs	r1, r4
 8002aca:	0030      	movs	r0, r6
 8002acc:	f001 fdea 	bl	80046a4 <HAL_I2CEx_ConfigDigitalFilter>
  hrtc.Instance = RTC;
 8002ad0:	4891      	ldr	r0, [pc, #580]	; (8002d18 <main+0x43c>)
 8002ad2:	4b92      	ldr	r3, [pc, #584]	; (8002d1c <main+0x440>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002ad4:	6084      	str	r4, [r0, #8]
  hrtc.Instance = RTC;
 8002ad6:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = 127;
 8002ad8:	237f      	movs	r3, #127	; 0x7f
 8002ada:	60c3      	str	r3, [r0, #12]
  hrtc.Init.SynchPrediv = 255;
 8002adc:	3380      	adds	r3, #128	; 0x80
 8002ade:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002ae0:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002ae2:	6184      	str	r4, [r0, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002ae4:	61c4      	str	r4, [r0, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002ae6:	6207      	str	r7, [r0, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002ae8:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002aea:	f002 faa3 	bl	8005034 <HAL_RTC_Init>
  hspi1.Instance = SPI1;
 8002aee:	488c      	ldr	r0, [pc, #560]	; (8002d20 <main+0x444>)
 8002af0:	4b8c      	ldr	r3, [pc, #560]	; (8002d24 <main+0x448>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002af2:	27e0      	movs	r7, #224	; 0xe0
  hspi1.Instance = SPI1;
 8002af4:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002af6:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002af8:	2680      	movs	r6, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	6043      	str	r3, [r0, #4]
  hspi1.Init.CRCPolynomial = 7;
 8002afe:	3bfd      	subs	r3, #253	; 0xfd
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b00:	00ff      	lsls	r7, r7, #3
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b02:	00b6      	lsls	r6, r6, #2
  hspi1.Init.CRCPolynomial = 7;
 8002b04:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b06:	3301      	adds	r3, #1
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b08:	6084      	str	r4, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b0a:	60c7      	str	r7, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b0c:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b0e:	6144      	str	r4, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b10:	6186      	str	r6, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b12:	61c4      	str	r4, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b14:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b16:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b18:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b1a:	6304      	str	r4, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b1c:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b1e:	f002 fb5b 	bl	80051d8 <HAL_SPI_Init>
  hspi2.Instance = SPI2;
 8002b22:	4881      	ldr	r0, [pc, #516]	; (8002d28 <main+0x44c>)
 8002b24:	4b81      	ldr	r3, [pc, #516]	; (8002d2c <main+0x450>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b26:	6084      	str	r4, [r0, #8]
  hspi2.Instance = SPI2;
 8002b28:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b2a:	2382      	movs	r3, #130	; 0x82
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	6043      	str	r3, [r0, #4]
  hspi2.Init.CRCPolynomial = 7;
 8002b30:	3bfd      	subs	r3, #253	; 0xfd
 8002b32:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b34:	3301      	adds	r3, #1
 8002b36:	6343      	str	r3, [r0, #52]	; 0x34
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b38:	60c7      	str	r7, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b3a:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b3c:	6144      	str	r4, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b3e:	6186      	str	r6, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b40:	61c4      	str	r4, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b42:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b44:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b46:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b48:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b4a:	f002 fb45 	bl	80051d8 <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b4e:	0021      	movs	r1, r4
 8002b50:	2210      	movs	r2, #16
 8002b52:	a80a      	add	r0, sp, #40	; 0x28
 8002b54:	f00b fb23 	bl	800e19e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b58:	0021      	movs	r1, r4
 8002b5a:	220c      	movs	r2, #12
 8002b5c:	a807      	add	r0, sp, #28
 8002b5e:	f00b fb1e 	bl	800e19e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b62:	221c      	movs	r2, #28
 8002b64:	0021      	movs	r1, r4
 8002b66:	0028      	movs	r0, r5
 8002b68:	f00b fb19 	bl	800e19e <memset>
  htim3.Instance = TIM3;
 8002b6c:	4f70      	ldr	r7, [pc, #448]	; (8002d30 <main+0x454>)
 8002b6e:	4b71      	ldr	r3, [pc, #452]	; (8002d34 <main+0x458>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b70:	0038      	movs	r0, r7
  htim3.Instance = TIM3;
 8002b72:	603b      	str	r3, [r7, #0]
  htim3.Init.Prescaler = 1;
 8002b74:	2301      	movs	r3, #1
 8002b76:	607b      	str	r3, [r7, #4]
  htim3.Init.Period = 4095;
 8002b78:	4b6f      	ldr	r3, [pc, #444]	; (8002d38 <main+0x45c>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7a:	60bc      	str	r4, [r7, #8]
  htim3.Init.Period = 4095;
 8002b7c:	60fb      	str	r3, [r7, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b7e:	613c      	str	r4, [r7, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b80:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b82:	f002 ffef 	bl	8005b64 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b86:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b88:	a90a      	add	r1, sp, #40	; 0x28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b8a:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b8c:	0038      	movs	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b8e:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b90:	f003 f9d8 	bl	8005f44 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002b94:	0038      	movs	r0, r7
 8002b96:	f003 f800 	bl	8005b9a <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b9a:	a907      	add	r1, sp, #28
 8002b9c:	0038      	movs	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b9e:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba0:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ba2:	f003 faa5 	bl	80060f0 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ba6:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ba8:	0022      	movs	r2, r4
 8002baa:	0029      	movs	r1, r5
 8002bac:	0038      	movs	r0, r7
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bae:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002bb0:	606c      	str	r4, [r5, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bb2:	60ac      	str	r4, [r5, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bb4:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bb6:	f003 f867 	bl	8005c88 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bba:	2204      	movs	r2, #4
 8002bbc:	0029      	movs	r1, r5
 8002bbe:	0038      	movs	r0, r7
 8002bc0:	f003 f862 	bl	8005c88 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8002bc4:	0038      	movs	r0, r7
 8002bc6:	f000 ff27 	bl	8003a18 <HAL_TIM_MspPostInit>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002bca:	0021      	movs	r1, r4
 8002bcc:	2210      	movs	r2, #16
 8002bce:	0028      	movs	r0, r5
 8002bd0:	f00b fae5 	bl	800e19e <memset>
  htim14.Instance = TIM14;
 8002bd4:	4e59      	ldr	r6, [pc, #356]	; (8002d3c <main+0x460>)
 8002bd6:	4b5a      	ldr	r3, [pc, #360]	; (8002d40 <main+0x464>)
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002bd8:	0030      	movs	r0, r6
  htim14.Instance = TIM14;
 8002bda:	6033      	str	r3, [r6, #0]
  htim14.Init.Prescaler = 0;
 8002bdc:	6074      	str	r4, [r6, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bde:	60b4      	str	r4, [r6, #8]
  htim14.Init.Period = 0;
 8002be0:	60f4      	str	r4, [r6, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002be2:	6134      	str	r4, [r6, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002be4:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002be6:	f002 ffbd 	bl	8005b64 <HAL_TIM_Base_Init>
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 8002bea:	0030      	movs	r0, r6
 8002bec:	f002 fff0 	bl	8005bd0 <HAL_TIM_IC_Init>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002bf0:	2301      	movs	r3, #1
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002bf2:	0022      	movs	r2, r4
 8002bf4:	0029      	movs	r1, r5
 8002bf6:	0030      	movs	r0, r6
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002bf8:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002bfa:	606b      	str	r3, [r5, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002bfc:	60ac      	str	r4, [r5, #8]
  sConfigIC.ICFilter = 0;
 8002bfe:	60ec      	str	r4, [r5, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002c00:	f003 f8f6 	bl	8005df0 <HAL_TIM_IC_ConfigChannel>
  huart2.Instance = USART2;
 8002c04:	4e4f      	ldr	r6, [pc, #316]	; (8002d44 <main+0x468>)
 8002c06:	4b50      	ldr	r3, [pc, #320]	; (8002d48 <main+0x46c>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c08:	0030      	movs	r0, r6
  huart2.Instance = USART2;
 8002c0a:	6033      	str	r3, [r6, #0]
  huart2.Init.BaudRate = 115200;
 8002c0c:	23e1      	movs	r3, #225	; 0xe1
 8002c0e:	025b      	lsls	r3, r3, #9
 8002c10:	6073      	str	r3, [r6, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c12:	230c      	movs	r3, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c14:	60b4      	str	r4, [r6, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c16:	6173      	str	r3, [r6, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c18:	60f4      	str	r4, [r6, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c1a:	6134      	str	r4, [r6, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c1c:	61b4      	str	r4, [r6, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c1e:	61f4      	str	r4, [r6, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c20:	6234      	str	r4, [r6, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c22:	6274      	str	r4, [r6, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c24:	62b4      	str	r4, [r6, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c26:	f003 fdcd 	bl	80067c4 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c2a:	0021      	movs	r1, r4
 8002c2c:	0030      	movs	r0, r6
 8002c2e:	f003 fe59 	bl	80068e4 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c32:	0021      	movs	r1, r4
 8002c34:	0030      	movs	r0, r6
 8002c36:	f003 fe77 	bl	8006928 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8002c3a:	0030      	movs	r0, r6
 8002c3c:	f003 fe34 	bl	80068a8 <HAL_UARTEx_EnableFifoMode>
  huart3.Instance = USART3;
 8002c40:	4842      	ldr	r0, [pc, #264]	; (8002d4c <main+0x470>)
 8002c42:	4b43      	ldr	r3, [pc, #268]	; (8002d50 <main+0x474>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c44:	6084      	str	r4, [r0, #8]
  huart3.Instance = USART3;
 8002c46:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8002c48:	23e1      	movs	r3, #225	; 0xe1
 8002c4a:	025b      	lsls	r3, r3, #9
 8002c4c:	6043      	str	r3, [r0, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c4e:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c50:	60c4      	str	r4, [r0, #12]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c52:	6143      	str	r3, [r0, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c54:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c56:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c58:	61c4      	str	r4, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c5a:	6204      	str	r4, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c5c:	6244      	str	r4, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c5e:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c60:	f003 fdb0 	bl	80067c4 <HAL_UART_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8002c64:	f003 fe84 	bl	8006970 <MX_FATFS_Init>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002c68:	0021      	movs	r1, r4
 8002c6a:	0038      	movs	r0, r7
 8002c6c:	f003 fa0e 	bl	800608c <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002c70:	2104      	movs	r1, #4
 8002c72:	0038      	movs	r0, r7
 8002c74:	f003 fa0a 	bl	800608c <HAL_TIM_PWM_Start>
   __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 4095);			// PWM_CH1 = 4095 100% brilho
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	4a2f      	ldr	r2, [pc, #188]	; (8002d38 <main+0x45c>)
 8002c7c:	635a      	str	r2, [r3, #52]	; 0x34
   __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 4095);		    // PWM_CH2 = 4095
 8002c7e:	639a      	str	r2, [r3, #56]	; 0x38
  ST7735_Init();
 8002c80:	f7ff fb30 	bl	80022e4 <ST7735_Init>
  ST7735_Clear(0x0000);
 8002c84:	0020      	movs	r0, r4
 8002c86:	f7ff fbef 	bl	8002468 <ST7735_Clear>
  tft_backlight(100);
 8002c8a:	2064      	movs	r0, #100	; 0x64
 8002c8c:	f000 f91c 	bl	8002ec8 <tft_backlight>
  Evt_InitQueue();
 8002c90:	f7ff fdbe 	bl	8002810 <Evt_InitQueue>
  KeyboardInit(0x01);
 8002c94:	2001      	movs	r0, #1
 8002c96:	f7ff fc9b 	bl	80025d0 <KeyboardInit>
    lv_disp_buf_init(&disp_buf, buf, NULL, LV_HOR_RES_MAX * 10);    //Initialize the display buffer
 8002c9a:	23c8      	movs	r3, #200	; 0xc8
 8002c9c:	4f2d      	ldr	r7, [pc, #180]	; (8002d54 <main+0x478>)
 8002c9e:	0022      	movs	r2, r4
 8002ca0:	492d      	ldr	r1, [pc, #180]	; (8002d58 <main+0x47c>)
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	0038      	movs	r0, r7
 8002ca6:	f009 f84b 	bl	800bd40 <lv_disp_buf_init>
    lv_init();
 8002caa:	f004 f871 	bl	8006d90 <lv_init>
    lv_disp_drv_init(&disp_drv);          //Basic initialization
 8002cae:	0028      	movs	r0, r5
 8002cb0:	f009 f82a 	bl	800bd08 <lv_disp_drv_init>
    disp_drv.hor_res = 160;               //Set the horizontal resolution
 8002cb4:	23a0      	movs	r3, #160	; 0xa0
 8002cb6:	802b      	strh	r3, [r5, #0]
    disp_drv.ver_res = 128;               //Set the vertical resolution
 8002cb8:	3b20      	subs	r3, #32
 8002cba:	806b      	strh	r3, [r5, #2]
    disp_drv.flush_cb = ST7735_Flush_3;	//Set your driver function
 8002cbc:	4b27      	ldr	r3, [pc, #156]	; (8002d5c <main+0x480>)
    lv_disp_drv_register(&disp_drv);      //Finally register the driver
 8002cbe:	0028      	movs	r0, r5
    disp_drv.flush_cb = ST7735_Flush_3;	//Set your driver function
 8002cc0:	60eb      	str	r3, [r5, #12]
    disp_drv.buffer = &disp_buf;          //Assign the buffer to teh display
 8002cc2:	606f      	str	r7, [r5, #4]
    lv_disp_drv_register(&disp_drv);      //Finally register the driver
 8002cc4:	f009 f84a 	bl	800bd5c <lv_disp_drv_register>
    ProcessStatus = MX_FATFS_Process();
 8002cc8:	f003 fe66 	bl	8006998 <MX_FATFS_Process>
 8002ccc:	4c24      	ldr	r4, [pc, #144]	; (8002d60 <main+0x484>)
 8002cce:	6020      	str	r0, [r4, #0]
    ProcessStatus = MX_FATFS_Process();
 8002cd0:	f003 fe62 	bl	8006998 <MX_FATFS_Process>
      sprintf(buffer, "STM32G070 FatFs ProcessStatus Error...\n\r");
 8002cd4:	4923      	ldr	r1, [pc, #140]	; (8002d64 <main+0x488>)
    ProcessStatus = MX_FATFS_Process();
 8002cd6:	6020      	str	r0, [r4, #0]
 8002cd8:	4c23      	ldr	r4, [pc, #140]	; (8002d68 <main+0x48c>)
    if (ProcessStatus == APP_ERROR)
 8002cda:	1c43      	adds	r3, r0, #1
 8002cdc:	d048      	beq.n	8002d70 <main+0x494>
    else if (ProcessStatus == APP_OK)
 8002cde:	2800      	cmp	r0, #0
 8002ce0:	d152      	bne.n	8002d88 <main+0x4ac>
      sprintf(buffer, "STM32G070 FatFs - ProcessStatus OK...\n\r");
 8002ce2:	4922      	ldr	r1, [pc, #136]	; (8002d6c <main+0x490>)
 8002ce4:	e044      	b.n	8002d70 <main+0x494>
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	50000800 	.word	0x50000800
 8002cf0:	0000025f 	.word	0x0000025f
 8002cf4:	50000c00 	.word	0x50000c00
 8002cf8:	50000400 	.word	0x50000400
 8002cfc:	10110000 	.word	0x10110000
 8002d00:	20004a94 	.word	0x20004a94
 8002d04:	40012400 	.word	0x40012400
 8002d08:	04000002 	.word	0x04000002
 8002d0c:	20004a08 	.word	0x20004a08
 8002d10:	40005400 	.word	0x40005400
 8002d14:	00300f38 	.word	0x00300f38
 8002d18:	20004afc 	.word	0x20004afc
 8002d1c:	40002800 	.word	0x40002800
 8002d20:	20004b28 	.word	0x20004b28
 8002d24:	40013000 	.word	0x40013000
 8002d28:	20004918 	.word	0x20004918
 8002d2c:	40003800 	.word	0x40003800
 8002d30:	20004a54 	.word	0x20004a54
 8002d34:	40000400 	.word	0x40000400
 8002d38:	00000fff 	.word	0x00000fff
 8002d3c:	20004c18 	.word	0x20004c18
 8002d40:	40002000 	.word	0x40002000
 8002d44:	20004b8c 	.word	0x20004b8c
 8002d48:	40004400 	.word	0x40004400
 8002d4c:	2000497c 	.word	0x2000497c
 8002d50:	40004800 	.word	0x40004800
 8002d54:	20001450 	.word	0x20001450
 8002d58:	2000076c 	.word	0x2000076c
 8002d5c:	080025ad 	.word	0x080025ad
 8002d60:	20000768 	.word	0x20000768
 8002d64:	08010d80 	.word	0x08010d80
 8002d68:	200013ec 	.word	0x200013ec
 8002d6c:	08010da9 	.word	0x08010da9
 8002d70:	0020      	movs	r0, r4
 8002d72:	f00b fa61 	bl	800e238 <strcpy>
      HAL_UART_Transmit(&huart2, (uint8_t *)&buffer, strlen(buffer), 0xFFFF);
 8002d76:	0020      	movs	r0, r4
 8002d78:	f7fd f9cc 	bl	8000114 <strlen>
 8002d7c:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <main+0x504>)
 8002d7e:	b282      	uxth	r2, r0
 8002d80:	0021      	movs	r1, r4
 8002d82:	0030      	movs	r0, r6
 8002d84:	f003 fc7e 	bl	8006684 <HAL_UART_Transmit>
  sprintf(buffer, "STM32G070 FatFs - INIC OK\n\r");
 8002d88:	4916      	ldr	r1, [pc, #88]	; (8002de4 <main+0x508>)
 8002d8a:	0020      	movs	r0, r4
 8002d8c:	f00b fa54 	bl	800e238 <strcpy>
  HAL_UART_Transmit(&huart2, (uint8_t *)&buffer, strlen(buffer), 0xFFFF);
 8002d90:	0020      	movs	r0, r4
 8002d92:	f7fd f9bf 	bl	8000114 <strlen>
 8002d96:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <main+0x504>)
 8002d98:	b282      	uxth	r2, r0
 8002d9a:	0021      	movs	r1, r4
 8002d9c:	0030      	movs	r0, r6
 8002d9e:	f003 fc71 	bl	8006684 <HAL_UART_Transmit>
  lv_obj_t * scr = lv_disp_get_scr_act(NULL);     /*Get the current screen*/
 8002da2:	2000      	movs	r0, #0
 8002da4:	f003 fe8f 	bl	8006ac6 <lv_disp_get_scr_act>
  lv_obj_t * label1 =  lv_label_create(scr, NULL);
 8002da8:	2100      	movs	r1, #0
 8002daa:	f00a febf 	bl	800db2c <lv_label_create>
  lv_label_set_text(label1, "STM32G070RB");
 8002dae:	490e      	ldr	r1, [pc, #56]	; (8002de8 <main+0x50c>)
  lv_obj_t * label1 =  lv_label_create(scr, NULL);
 8002db0:	0004      	movs	r4, r0
  lv_label_set_text(label1, "STM32G070RB");
 8002db2:	f00a fe09 	bl	800d9c8 <lv_label_set_text>
  lv_obj_align(label1, NULL, LV_ALIGN_CENTER, 0, 0);
 8002db6:	2100      	movs	r1, #0
 8002db8:	0020      	movs	r0, r4
 8002dba:	9100      	str	r1, [sp, #0]
 8002dbc:	000b      	movs	r3, r1
 8002dbe:	000a      	movs	r2, r1
	    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002dc0:	24a0      	movs	r4, #160	; 0xa0
  lv_obj_align(label1, NULL, LV_ALIGN_CENTER, 0, 0);
 8002dc2:	f004 f961 	bl	8007088 <lv_obj_align>
	    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002dc6:	05e4      	lsls	r4, r4, #23
		  ButtonEvent();
 8002dc8:	f7ff fd32 	bl	8002830 <ButtonEvent>
		  Read_Encoder();
 8002dcc:	f000 f82a 	bl	8002e24 <Read_Encoder>
	    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002dd0:	2120      	movs	r1, #32
 8002dd2:	0020      	movs	r0, r4
 8002dd4:	f001 fbe2 	bl	800459c <HAL_GPIO_TogglePin>
	  	  lv_task_handler();
 8002dd8:	f009 fe38 	bl	800ca4c <lv_task_handler>
 8002ddc:	e7f4      	b.n	8002dc8 <main+0x4ec>
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	0000ffff 	.word	0x0000ffff
 8002de4:	08010dd1 	.word	0x08010dd1
 8002de8:	08010ded 	.word	0x08010ded

08002dec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dec:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002dee:	6803      	ldr	r3, [r0, #0]
 8002df0:	4c0a      	ldr	r4, [pc, #40]	; (8002e1c <HAL_TIM_PeriodElapsedCallback+0x30>)
{
 8002df2:	0005      	movs	r5, r0
  if (htim->Instance == TIM6) {
 8002df4:	42a3      	cmp	r3, r4
 8002df6:	d101      	bne.n	8002dfc <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 8002df8:	f000 ffee 	bl	8003dd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
//  if (htim->Instance == TIM6) {
//	  lv_tick_inc(1);
// }
  if (htim->Instance == TIM6) {
 8002dfc:	682b      	ldr	r3, [r5, #0]
 8002dfe:	42a3      	cmp	r3, r4
 8002e00:	d105      	bne.n	8002e0e <HAL_TIM_PeriodElapsedCallback+0x22>
   	  timer_key++;
 8002e02:	4a07      	ldr	r2, [pc, #28]	; (8002e20 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002e04:	6813      	ldr	r3, [r2, #0]
 8002e06:	3301      	adds	r3, #1
   	  if(timer_key >= 40) {
 8002e08:	2b27      	cmp	r3, #39	; 0x27
 8002e0a:	d801      	bhi.n	8002e10 <HAL_TIM_PeriodElapsedCallback+0x24>
   	  timer_key++;
 8002e0c:	6013      	str	r3, [r2, #0]
   		  timer_key = 0;
   		  Key_Read();
   	  }
  }
  /* USER CODE END Callback 1 */
}
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}
   		  timer_key = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	6013      	str	r3, [r2, #0]
   		  Key_Read();
 8002e14:	f7ff fcd4 	bl	80027c0 <Key_Read>
}
 8002e18:	e7f9      	b.n	8002e0e <HAL_TIM_PeriodElapsedCallback+0x22>
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	40001000 	.word	0x40001000
 8002e20:	2000146c 	.word	0x2000146c

08002e24 <Read_Encoder>:

uint8_t aVal = 0, bVal = 0, CLKLast = 0, bCW = 0, CCW = 0, CLKLast1 = 0;
uint32_t encoderPosCount = 0;

uint16_t Read_Encoder(void)
{
 8002e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* BEGIN � Code for encoder */
	aVal = HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 8002e26:	2180      	movs	r1, #128	; 0x80
 8002e28:	20a0      	movs	r0, #160	; 0xa0
 8002e2a:	0049      	lsls	r1, r1, #1
 8002e2c:	05c0      	lsls	r0, r0, #23
 8002e2e:	f001 fba9 	bl	8004584 <HAL_GPIO_ReadPin>
	if (aVal != CLKLast)
 8002e32:	4b1e      	ldr	r3, [pc, #120]	; (8002eac <Read_Encoder+0x88>)
	aVal = HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 8002e34:	4d1e      	ldr	r5, [pc, #120]	; (8002eb0 <Read_Encoder+0x8c>)
	if (aVal != CLKLast)
 8002e36:	781b      	ldrb	r3, [r3, #0]
	aVal = HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin);
 8002e38:	7028      	strb	r0, [r5, #0]
	if (aVal != CLKLast)
 8002e3a:	4283      	cmp	r3, r0
 8002e3c:	d02a      	beq.n	8002e94 <Read_Encoder+0x70>
	{ // Means the knob is rotating
	  // if the knob is rotating, we need to determine direction
	  // We do that by reading pin B.
//		if(!aVal)
//		{ // aVal is false or 0 then proceed. This prevents double incrementation.
			if (HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin) != aVal)
 8002e3e:	2180      	movs	r1, #128	; 0x80
 8002e40:	20a0      	movs	r0, #160	; 0xa0
 8002e42:	0089      	lsls	r1, r1, #2
 8002e44:	05c0      	lsls	r0, r0, #23
 8002e46:	f001 fb9d 	bl	8004584 <HAL_GPIO_ReadPin>
 8002e4a:	4c1a      	ldr	r4, [pc, #104]	; (8002eb4 <Read_Encoder+0x90>)
 8002e4c:	782f      	ldrb	r7, [r5, #0]
 8002e4e:	4a1a      	ldr	r2, [pc, #104]	; (8002eb8 <Read_Encoder+0x94>)
			{ // Means pin A Changed first � We�re Rotating Clockwise
				encoderPosCount++;
 8002e50:	6823      	ldr	r3, [r4, #0]
			if (HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin) != aVal)
 8002e52:	42b8      	cmp	r0, r7
 8002e54:	d024      	beq.n	8002ea0 <Read_Encoder+0x7c>
				encoderPosCount++;
 8002e56:	3301      	adds	r3, #1
				if(encoderPosCount >= 100) encoderPosCount = 100;
 8002e58:	2b63      	cmp	r3, #99	; 0x63
 8002e5a:	d81f      	bhi.n	8002e9c <Read_Encoder+0x78>
 8002e5c:	6023      	str	r3, [r4, #0]
				bCW = true;
 8002e5e:	2301      	movs	r3, #1
			}
			else {// Otherwise B changed first and we�re moving CCW
				if(encoderPosCount >= 1) encoderPosCount--;
				bCW = false;
			}
			sprintf(buffer, "Encoder - aVal: %d DT: %d, EncoderPosition: %ld\n", aVal, HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin), encoderPosCount);
 8002e60:	2180      	movs	r1, #128	; 0x80
 8002e62:	20a0      	movs	r0, #160	; 0xa0
 8002e64:	0089      	lsls	r1, r1, #2
 8002e66:	05c0      	lsls	r0, r0, #23
				bCW = false;
 8002e68:	7013      	strb	r3, [r2, #0]
			sprintf(buffer, "Encoder - aVal: %d DT: %d, EncoderPosition: %ld\n", aVal, HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin), encoderPosCount);
 8002e6a:	f001 fb8b 	bl	8004584 <HAL_GPIO_ReadPin>
 8002e6e:	4e13      	ldr	r6, [pc, #76]	; (8002ebc <Read_Encoder+0x98>)
 8002e70:	6822      	ldr	r2, [r4, #0]
 8002e72:	0003      	movs	r3, r0
 8002e74:	4912      	ldr	r1, [pc, #72]	; (8002ec0 <Read_Encoder+0x9c>)
 8002e76:	9200      	str	r2, [sp, #0]
 8002e78:	0030      	movs	r0, r6
 8002e7a:	003a      	movs	r2, r7
 8002e7c:	f00b f9ba 	bl	800e1f4 <sprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002e80:	0030      	movs	r0, r6
 8002e82:	f7fd f947 	bl	8000114 <strlen>
 8002e86:	2301      	movs	r3, #1
 8002e88:	b282      	uxth	r2, r0
 8002e8a:	425b      	negs	r3, r3
 8002e8c:	0031      	movs	r1, r6
 8002e8e:	480d      	ldr	r0, [pc, #52]	; (8002ec4 <Read_Encoder+0xa0>)
 8002e90:	f003 fbf8 	bl	8006684 <HAL_UART_Transmit>
//		}
	}
	CLKLast = aVal;
 8002e94:	7828      	ldrb	r0, [r5, #0]
 8002e96:	4b05      	ldr	r3, [pc, #20]	; (8002eac <Read_Encoder+0x88>)
 8002e98:	7018      	strb	r0, [r3, #0]
	return aVal;
}
 8002e9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
				if(encoderPosCount >= 100) encoderPosCount = 100;
 8002e9c:	2364      	movs	r3, #100	; 0x64
 8002e9e:	e7dd      	b.n	8002e5c <Read_Encoder+0x38>
				if(encoderPosCount >= 1) encoderPosCount--;
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <Read_Encoder+0x84>
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	6023      	str	r3, [r4, #0]
				bCW = false;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e7d9      	b.n	8002e60 <Read_Encoder+0x3c>
 8002eac:	20001470 	.word	0x20001470
 8002eb0:	20001471 	.word	0x20001471
 8002eb4:	20001474 	.word	0x20001474
 8002eb8:	20001472 	.word	0x20001472
 8002ebc:	200013ec 	.word	0x200013ec
 8002ec0:	08010df9 	.word	0x08010df9
 8002ec4:	20004b8c 	.word	0x20004b8c

08002ec8 <tft_backlight>:
	}
}

void tft_backlight(uint16_t value)
{
	if(value >= 0 && value <= 100) {
 8002ec8:	2864      	cmp	r0, #100	; 0x64
 8002eca:	d808      	bhi.n	8002ede <tft_backlight+0x16>
		tft_pwm = value * 40;
 8002ecc:	2328      	movs	r3, #40	; 0x28
 8002ece:	4358      	muls	r0, r3
 8002ed0:	4b03      	ldr	r3, [pc, #12]	; (8002ee0 <tft_backlight+0x18>)
 8002ed2:	b280      	uxth	r0, r0
 8002ed4:	8018      	strh	r0, [r3, #0]
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, tft_pwm);		// PWM_CH1 = TFT
 8002ed6:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <tft_backlight+0x1c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6358      	str	r0, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, tft_pwm);		// PWM_CH2 = TFT
 8002edc:	6398      	str	r0, [r3, #56]	; 0x38
	}
}
 8002ede:	4770      	bx	lr
 8002ee0:	20004af8 	.word	0x20004af8
 8002ee4:	20004a54 	.word	0x20004a54

08002ee8 <SD_ReadData>:
  * @brief  Waits a data until a value different from SD_DUMMY_BITE
  * @param  None
  * @retval the value read
  */
uint8_t SD_ReadData(void)
{
 8002ee8:	b510      	push	{r4, lr}
 8002eea:	2408      	movs	r4, #8
  uint8_t timeout = 0x08;
  uint8_t readvalue;

  /* Check if response is got or a timeout is happen */
  do {
    readvalue = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002eec:	20ff      	movs	r0, #255	; 0xff
 8002eee:	f000 fee8 	bl	8003cc2 <SD_IO_WriteByte>
    timeout--;

  }while ((readvalue == SD_DUMMY_BYTE) && timeout);
 8002ef2:	28ff      	cmp	r0, #255	; 0xff
 8002ef4:	d103      	bne.n	8002efe <SD_ReadData+0x16>
 8002ef6:	3c01      	subs	r4, #1
 8002ef8:	b2e4      	uxtb	r4, r4
 8002efa:	2c00      	cmp	r4, #0
 8002efc:	d1f6      	bne.n	8002eec <SD_ReadData+0x4>

  /* Right response got */
  return readvalue;
}
 8002efe:	bd10      	pop	{r4, pc}

08002f00 <SD_SendCmd>:
{
 8002f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f02:	b087      	sub	sp, #28
 8002f04:	0004      	movs	r4, r0
 8002f06:	a80c      	add	r0, sp, #48	; 0x30
 8002f08:	7805      	ldrb	r5, [r0, #0]
  frame[0] = (Cmd | 0x40);         /* Construct byte 1 */
 8002f0a:	2040      	movs	r0, #64	; 0x40
 8002f0c:	4301      	orrs	r1, r0
 8002f0e:	a802      	add	r0, sp, #8
 8002f10:	7001      	strb	r1, [r0, #0]
  frame[1] = (uint8_t)(Arg >> 24); /* Construct byte 2 */
 8002f12:	0e11      	lsrs	r1, r2, #24
 8002f14:	7041      	strb	r1, [r0, #1]
  frame[2] = (uint8_t)(Arg >> 16); /* Construct byte 3 */
 8002f16:	0c11      	lsrs	r1, r2, #16
 8002f18:	7081      	strb	r1, [r0, #2]
  frame[4] = (uint8_t)(Arg);       /* Construct byte 5 */
 8002f1a:	7102      	strb	r2, [r0, #4]
  frame[3] = (uint8_t)(Arg >> 8);  /* Construct byte 4 */
 8002f1c:	0a11      	lsrs	r1, r2, #8
  frame[5] = (Crc | 0x01);         /* Construct byte 6 */
 8002f1e:	2201      	movs	r2, #1
 8002f20:	4313      	orrs	r3, r2
  frame[3] = (uint8_t)(Arg >> 8);  /* Construct byte 4 */
 8002f22:	70c1      	strb	r1, [r0, #3]
  frame[5] = (Crc | 0x01);         /* Construct byte 6 */
 8002f24:	7143      	strb	r3, [r0, #5]
  SD_IO_CSState(0);
 8002f26:	2000      	movs	r0, #0
 8002f28:	f000 feba 	bl	8003ca0 <SD_IO_CSState>
  SD_IO_WriteReadData(frame, frameout, SD_CMD_LENGTH); /* Send the Cmd bytes */
 8002f2c:	2206      	movs	r2, #6
 8002f2e:	a904      	add	r1, sp, #16
 8002f30:	a802      	add	r0, sp, #8
 8002f32:	f000 fec2 	bl	8003cba <SD_IO_WriteReadData>
  switch(Answer)
 8002f36:	2d05      	cmp	r5, #5
 8002f38:	d84a      	bhi.n	8002fd0 <SD_SendCmd+0xd0>
 8002f3a:	0028      	movs	r0, r5
 8002f3c:	f7fd f8f2 	bl	8000124 <__gnu_thumb1_case_uqi>
 8002f40:	352c1403 	.word	0x352c1403
 8002f44:	3548      	.short	0x3548
    retr.r1 = SD_ReadData();
 8002f46:	f7ff ffcf 	bl	8002ee8 <SD_ReadData>
 8002f4a:	0007      	movs	r7, r0
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 8002f4c:	20ff      	movs	r0, #255	; 0xff
 8002f4e:	0005      	movs	r5, r0
 8002f50:	0006      	movs	r6, r0
 8002f52:	9001      	str	r0, [sp, #4]
  return retr;
 8002f54:	466b      	mov	r3, sp
 8002f56:	7120      	strb	r0, [r4, #4]
}
 8002f58:	0020      	movs	r0, r4
  return retr;
 8002f5a:	791b      	ldrb	r3, [r3, #4]
 8002f5c:	7027      	strb	r7, [r4, #0]
 8002f5e:	7066      	strb	r6, [r4, #1]
 8002f60:	70a5      	strb	r5, [r4, #2]
 8002f62:	70e3      	strb	r3, [r4, #3]
}
 8002f64:	b007      	add	sp, #28
 8002f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    retr.r1 = SD_ReadData();
 8002f68:	f7ff ffbe 	bl	8002ee8 <SD_ReadData>
 8002f6c:	0007      	movs	r7, r0
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002f6e:	20ff      	movs	r0, #255	; 0xff
 8002f70:	f000 fea7 	bl	8003cc2 <SD_IO_WriteByte>
 8002f74:	0006      	movs	r6, r0
    SD_IO_CSState(1);
 8002f76:	2001      	movs	r0, #1
 8002f78:	f000 fe92 	bl	8003ca0 <SD_IO_CSState>
    HAL_Delay(1);
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	f000 ff3d 	bl	8003dfc <HAL_Delay>
    SD_IO_CSState(0);
 8002f82:	2000      	movs	r0, #0
 8002f84:	f000 fe8c 	bl	8003ca0 <SD_IO_CSState>
    while (SD_IO_WriteByte(SD_DUMMY_BYTE) != 0xFF);
 8002f88:	20ff      	movs	r0, #255	; 0xff
 8002f8a:	f000 fe9a 	bl	8003cc2 <SD_IO_WriteByte>
 8002f8e:	28ff      	cmp	r0, #255	; 0xff
 8002f90:	d1fa      	bne.n	8002f88 <SD_SendCmd+0x88>
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 8002f92:	9001      	str	r0, [sp, #4]
 8002f94:	0005      	movs	r5, r0
    break;
 8002f96:	e7dd      	b.n	8002f54 <SD_SendCmd+0x54>
    retr.r1 = SD_ReadData();
 8002f98:	f7ff ffa6 	bl	8002ee8 <SD_ReadData>
 8002f9c:	0007      	movs	r7, r0
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002f9e:	20ff      	movs	r0, #255	; 0xff
 8002fa0:	f000 fe8f 	bl	8003cc2 <SD_IO_WriteByte>
 8002fa4:	0006      	movs	r6, r0
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 8002fa6:	20ff      	movs	r0, #255	; 0xff
 8002fa8:	e7f3      	b.n	8002f92 <SD_SendCmd+0x92>
    retr.r1 = SD_ReadData();
 8002faa:	f7ff ff9d 	bl	8002ee8 <SD_ReadData>
 8002fae:	0007      	movs	r7, r0
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002fb0:	20ff      	movs	r0, #255	; 0xff
 8002fb2:	f000 fe86 	bl	8003cc2 <SD_IO_WriteByte>
 8002fb6:	0006      	movs	r6, r0
    retr.r3 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002fb8:	20ff      	movs	r0, #255	; 0xff
 8002fba:	f000 fe82 	bl	8003cc2 <SD_IO_WriteByte>
 8002fbe:	0005      	movs	r5, r0
    retr.r4 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002fc0:	20ff      	movs	r0, #255	; 0xff
 8002fc2:	f000 fe7e 	bl	8003cc2 <SD_IO_WriteByte>
 8002fc6:	9001      	str	r0, [sp, #4]
    retr.r5 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002fc8:	20ff      	movs	r0, #255	; 0xff
 8002fca:	f000 fe7a 	bl	8003cc2 <SD_IO_WriteByte>
    break;
 8002fce:	e7c1      	b.n	8002f54 <SD_SendCmd+0x54>
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 8002fd0:	20ff      	movs	r0, #255	; 0xff
 8002fd2:	9001      	str	r0, [sp, #4]
 8002fd4:	0005      	movs	r5, r0
 8002fd6:	0006      	movs	r6, r0
 8002fd8:	0007      	movs	r7, r0
 8002fda:	e7bb      	b.n	8002f54 <SD_SendCmd+0x54>

08002fdc <SD_WaitData.constprop.0>:
/**
  * @brief  Waits a data from the SD card
  * @param  data : Expected data from the SD card
  * @retval BSP_SD_OK or BSP_SD_TIMEOUT
  */
uint8_t SD_WaitData(uint8_t data)
 8002fdc:	b510      	push	{r4, lr}
{
  uint16_t timeout = 0xFFFF;
 8002fde:	4c08      	ldr	r4, [pc, #32]	; (8003000 <SD_WaitData.constprop.0+0x24>)
  uint8_t readvalue;

  /* Check if response is got or a timeout is happen */

  do {
    readvalue = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8002fe0:	20ff      	movs	r0, #255	; 0xff
 8002fe2:	f000 fe6e 	bl	8003cc2 <SD_IO_WriteByte>
    timeout--;
 8002fe6:	3c01      	subs	r4, #1
 8002fe8:	b2a4      	uxth	r4, r4
  }while ((readvalue != data) && timeout);
 8002fea:	28fe      	cmp	r0, #254	; 0xfe
 8002fec:	d003      	beq.n	8002ff6 <SD_WaitData.constprop.0+0x1a>
 8002fee:	2c00      	cmp	r4, #0
 8002ff0:	d1f6      	bne.n	8002fe0 <SD_WaitData.constprop.0+0x4>

  if (timeout == 0)
  {
    /* After time out */
    return BSP_SD_TIMEOUT;
 8002ff2:	2002      	movs	r0, #2
  }

  /* Right response got */
  return BSP_SD_OK;
}
 8002ff4:	bd10      	pop	{r4, pc}
  return BSP_SD_OK;
 8002ff6:	4260      	negs	r0, r4
 8002ff8:	4160      	adcs	r0, r4
 8002ffa:	0040      	lsls	r0, r0, #1
 8002ffc:	e7fa      	b.n	8002ff4 <SD_WaitData.constprop.0+0x18>
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	0000ffff 	.word	0x0000ffff

08003004 <BSP_SD_Init>:
{
 8003004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003006:	b089      	sub	sp, #36	; 0x24
  SD_IO_Init();
 8003008:	f000 fe6a 	bl	8003ce0 <SD_IO_Init>
  SdStatus = SD_PRESENT;
 800300c:	2201      	movs	r2, #1
  __IO uint8_t counter = 0;
 800300e:	250f      	movs	r5, #15
  SdStatus = SD_PRESENT;
 8003010:	4b5b      	ldr	r3, [pc, #364]	; (8003180 <BSP_SD_Init+0x17c>)
 8003012:	701a      	strb	r2, [r3, #0]
  __IO uint8_t counter = 0;
 8003014:	ab02      	add	r3, sp, #8
 8003016:	18ed      	adds	r5, r5, r3
 8003018:	2300      	movs	r3, #0
 800301a:	702b      	strb	r3, [r5, #0]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 800301c:	2100      	movs	r1, #0
    counter++;
 800301e:	782b      	ldrb	r3, [r5, #0]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8003020:	ac06      	add	r4, sp, #24
    counter++;
 8003022:	3301      	adds	r3, #1
 8003024:	b2db      	uxtb	r3, r3
 8003026:	702b      	strb	r3, [r5, #0]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8003028:	000a      	movs	r2, r1
 800302a:	2395      	movs	r3, #149	; 0x95
 800302c:	9100      	str	r1, [sp, #0]
 800302e:	0020      	movs	r0, r4
 8003030:	f7ff ff66 	bl	8002f00 <SD_SendCmd>
    SD_IO_CSState(1);
 8003034:	2001      	movs	r0, #1
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8003036:	7827      	ldrb	r7, [r4, #0]
    SD_IO_CSState(1);
 8003038:	f000 fe32 	bl	8003ca0 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 800303c:	20ff      	movs	r0, #255	; 0xff
 800303e:	f000 fe40 	bl	8003cc2 <SD_IO_WriteByte>
    if(counter >= SD_MAX_TRY)
 8003042:	782b      	ldrb	r3, [r5, #0]
 8003044:	2b63      	cmp	r3, #99	; 0x63
 8003046:	d903      	bls.n	8003050 <BSP_SD_Init+0x4c>
      return BSP_SD_ERROR;
 8003048:	2501      	movs	r5, #1
}
 800304a:	0028      	movs	r0, r5
 800304c:	b009      	add	sp, #36	; 0x24
 800304e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while(response.r1 != SD_R1_IN_IDLE_STATE);
 8003050:	2f01      	cmp	r7, #1
 8003052:	d1e3      	bne.n	800301c <BSP_SD_Init+0x18>
  response = SD_SendCmd(SD_CMD_SEND_IF_COND, 0x1AA, 0x87, SD_ANSWER_R7_EXPECTED);
 8003054:	2305      	movs	r3, #5
 8003056:	22d5      	movs	r2, #213	; 0xd5
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	0052      	lsls	r2, r2, #1
 800305c:	3382      	adds	r3, #130	; 0x82
 800305e:	2108      	movs	r1, #8
 8003060:	0020      	movs	r0, r4
 8003062:	f7ff ff4d 	bl	8002f00 <SD_SendCmd>
 8003066:	7825      	ldrb	r5, [r4, #0]
  SD_IO_CSState(1);
 8003068:	0038      	movs	r0, r7
 800306a:	f000 fe19 	bl	8003ca0 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 800306e:	20ff      	movs	r0, #255	; 0xff
 8003070:	f000 fe27 	bl	8003cc2 <SD_IO_WriteByte>
  if((response.r1  & SD_R1_ILLEGAL_COMMAND) == SD_R1_ILLEGAL_COMMAND)
 8003074:	076b      	lsls	r3, r5, #29
 8003076:	d523      	bpl.n	80030c0 <BSP_SD_Init+0xbc>
      response = SD_SendCmd(SD_CMD_APP_CMD, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8003078:	26ff      	movs	r6, #255	; 0xff
 800307a:	2500      	movs	r5, #0
 800307c:	0033      	movs	r3, r6
 800307e:	002a      	movs	r2, r5
 8003080:	2137      	movs	r1, #55	; 0x37
 8003082:	0020      	movs	r0, r4
 8003084:	9500      	str	r5, [sp, #0]
 8003086:	f7ff ff3b 	bl	8002f00 <SD_SendCmd>
      SD_IO_CSState(1);
 800308a:	0038      	movs	r0, r7
 800308c:	f000 fe08 	bl	8003ca0 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003090:	0030      	movs	r0, r6
 8003092:	f000 fe16 	bl	8003cc2 <SD_IO_WriteByte>
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8003096:	002a      	movs	r2, r5
 8003098:	2129      	movs	r1, #41	; 0x29
 800309a:	0033      	movs	r3, r6
 800309c:	0020      	movs	r0, r4
 800309e:	9500      	str	r5, [sp, #0]
 80030a0:	f7ff ff2e 	bl	8002f00 <SD_SendCmd>
 80030a4:	7823      	ldrb	r3, [r4, #0]
      SD_IO_CSState(1);
 80030a6:	0038      	movs	r0, r7
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 80030a8:	9303      	str	r3, [sp, #12]
      SD_IO_CSState(1);
 80030aa:	f000 fdf9 	bl	8003ca0 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80030ae:	0030      	movs	r0, r6
 80030b0:	f000 fe07 	bl	8003cc2 <SD_IO_WriteByte>
    while(response.r1 == SD_R1_IN_IDLE_STATE);
 80030b4:	9b03      	ldr	r3, [sp, #12]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d0df      	beq.n	800307a <BSP_SD_Init+0x76>
    flag_SDHC = 0;
 80030ba:	4b32      	ldr	r3, [pc, #200]	; (8003184 <BSP_SD_Init+0x180>)
 80030bc:	801d      	strh	r5, [r3, #0]
 80030be:	e7c4      	b.n	800304a <BSP_SD_Init+0x46>
  else if(response.r1 == SD_R1_IN_IDLE_STATE)
 80030c0:	2d01      	cmp	r5, #1
 80030c2:	d1c1      	bne.n	8003048 <BSP_SD_Init+0x44>
      response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 80030c4:	27ff      	movs	r7, #255	; 0xff
 80030c6:	2600      	movs	r6, #0
 80030c8:	003b      	movs	r3, r7
 80030ca:	0032      	movs	r2, r6
 80030cc:	2137      	movs	r1, #55	; 0x37
 80030ce:	9600      	str	r6, [sp, #0]
 80030d0:	0020      	movs	r0, r4
 80030d2:	f7ff ff15 	bl	8002f00 <SD_SendCmd>
      SD_IO_CSState(1);
 80030d6:	0028      	movs	r0, r5
 80030d8:	f000 fde2 	bl	8003ca0 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80030dc:	0038      	movs	r0, r7
 80030de:	f000 fdf0 	bl	8003cc2 <SD_IO_WriteByte>
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x40000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 80030e2:	2280      	movs	r2, #128	; 0x80
 80030e4:	9600      	str	r6, [sp, #0]
 80030e6:	003b      	movs	r3, r7
 80030e8:	05d2      	lsls	r2, r2, #23
 80030ea:	2129      	movs	r1, #41	; 0x29
 80030ec:	0020      	movs	r0, r4
 80030ee:	f7ff ff07 	bl	8002f00 <SD_SendCmd>
 80030f2:	7826      	ldrb	r6, [r4, #0]
      SD_IO_CSState(1);
 80030f4:	0028      	movs	r0, r5
 80030f6:	f000 fdd3 	bl	8003ca0 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80030fa:	0038      	movs	r0, r7
 80030fc:	f000 fde1 	bl	8003cc2 <SD_IO_WriteByte>
    while(response.r1 == SD_R1_IN_IDLE_STATE);
 8003100:	2e01      	cmp	r6, #1
 8003102:	d0e0      	beq.n	80030c6 <BSP_SD_Init+0xc2>
        response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8003104:	25ff      	movs	r5, #255	; 0xff
    if((response.r1 & SD_R1_ILLEGAL_COMMAND) == SD_R1_ILLEGAL_COMMAND)
 8003106:	0773      	lsls	r3, r6, #29
 8003108:	d417      	bmi.n	800313a <BSP_SD_Init+0x136>
    response = SD_SendCmd(SD_CMD_READ_OCR, 0x00000000, 0xFF, SD_ANSWER_R3_EXPECTED);
 800310a:	2303      	movs	r3, #3
 800310c:	2200      	movs	r2, #0
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	213a      	movs	r1, #58	; 0x3a
 8003112:	33fc      	adds	r3, #252	; 0xfc
 8003114:	0020      	movs	r0, r4
 8003116:	f7ff fef3 	bl	8002f00 <SD_SendCmd>
 800311a:	7825      	ldrb	r5, [r4, #0]
    SD_IO_CSState(1);
 800311c:	2001      	movs	r0, #1
 800311e:	f000 fdbf 	bl	8003ca0 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003122:	20ff      	movs	r0, #255	; 0xff
 8003124:	f000 fdcd 	bl	8003cc2 <SD_IO_WriteByte>
    if(response.r1 != SD_R1_NO_ERROR)
 8003128:	2d00      	cmp	r5, #0
 800312a:	d000      	beq.n	800312e <BSP_SD_Init+0x12a>
 800312c:	e78c      	b.n	8003048 <BSP_SD_Init+0x44>
    flag_SDHC = (response.r2 & 0x40) >> 6;
 800312e:	7863      	ldrb	r3, [r4, #1]
 8003130:	4a14      	ldr	r2, [pc, #80]	; (8003184 <BSP_SD_Init+0x180>)
 8003132:	065b      	lsls	r3, r3, #25
 8003134:	0fdb      	lsrs	r3, r3, #31
 8003136:	8013      	strh	r3, [r2, #0]
 8003138:	e787      	b.n	800304a <BSP_SD_Init+0x46>
        response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 800313a:	2600      	movs	r6, #0
 800313c:	002b      	movs	r3, r5
 800313e:	0032      	movs	r2, r6
 8003140:	2137      	movs	r1, #55	; 0x37
 8003142:	0020      	movs	r0, r4
 8003144:	9600      	str	r6, [sp, #0]
 8003146:	f7ff fedb 	bl	8002f00 <SD_SendCmd>
 800314a:	7827      	ldrb	r7, [r4, #0]
        SD_IO_CSState(1);
 800314c:	2001      	movs	r0, #1
 800314e:	f000 fda7 	bl	8003ca0 <SD_IO_CSState>
        SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003152:	0028      	movs	r0, r5
 8003154:	f000 fdb5 	bl	8003cc2 <SD_IO_WriteByte>
        if(response.r1 != SD_R1_IN_IDLE_STATE)
 8003158:	2f01      	cmp	r7, #1
 800315a:	d000      	beq.n	800315e <BSP_SD_Init+0x15a>
 800315c:	e774      	b.n	8003048 <BSP_SD_Init+0x44>
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 800315e:	0032      	movs	r2, r6
 8003160:	9600      	str	r6, [sp, #0]
 8003162:	002b      	movs	r3, r5
 8003164:	2129      	movs	r1, #41	; 0x29
 8003166:	0020      	movs	r0, r4
 8003168:	f7ff feca 	bl	8002f00 <SD_SendCmd>
 800316c:	7826      	ldrb	r6, [r4, #0]
        SD_IO_CSState(1);
 800316e:	0038      	movs	r0, r7
 8003170:	f000 fd96 	bl	8003ca0 <SD_IO_CSState>
        SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003174:	0028      	movs	r0, r5
 8003176:	f000 fda4 	bl	8003cc2 <SD_IO_WriteByte>
      while(response.r1 == SD_R1_IN_IDLE_STATE);
 800317a:	2e01      	cmp	r6, #1
 800317c:	d0dd      	beq.n	800313a <BSP_SD_Init+0x136>
 800317e:	e7c4      	b.n	800310a <BSP_SD_Init+0x106>
 8003180:	20001478 	.word	0x20001478
 8003184:	2000147a 	.word	0x2000147a

08003188 <BSP_SD_GetCardInfo>:
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8003188:	2200      	movs	r2, #0
{
 800318a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800318c:	b08b      	sub	sp, #44	; 0x2c
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 800318e:	ad04      	add	r5, sp, #16
 8003190:	23ff      	movs	r3, #255	; 0xff
{
 8003192:	0004      	movs	r4, r0
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8003194:	9200      	str	r2, [sp, #0]
 8003196:	2109      	movs	r1, #9
 8003198:	0028      	movs	r0, r5
 800319a:	f7ff feb1 	bl	8002f00 <SD_SendCmd>
  if(response.r1 == SD_R1_NO_ERROR)
 800319e:	782b      	ldrb	r3, [r5, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d030      	beq.n	8003206 <BSP_SD_GetCardInfo+0x7e>
  uint8_t retr = BSP_SD_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	9303      	str	r3, [sp, #12]
  SD_IO_CSState(1);
 80031a8:	2001      	movs	r0, #1
 80031aa:	f000 fd79 	bl	8003ca0 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 80031ae:	20ff      	movs	r0, #255	; 0xff
 80031b0:	f000 fd87 	bl	8003cc2 <SD_IO_WriteByte>
  response = SD_SendCmd(SD_CMD_SEND_CID, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 80031b4:	2200      	movs	r2, #0
 80031b6:	ad04      	add	r5, sp, #16
 80031b8:	23ff      	movs	r3, #255	; 0xff
 80031ba:	9200      	str	r2, [sp, #0]
 80031bc:	210a      	movs	r1, #10
 80031be:	0028      	movs	r0, r5
 80031c0:	f7ff fe9e 	bl	8002f00 <SD_SendCmd>
  if(response.r1 == SD_R1_NO_ERROR)
 80031c4:	782b      	ldrb	r3, [r5, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d100      	bne.n	80031cc <BSP_SD_GetCardInfo+0x44>
 80031ca:	e12b      	b.n	8003424 <BSP_SD_GetCardInfo+0x29c>
  uint8_t retr = BSP_SD_ERROR;
 80031cc:	2601      	movs	r6, #1
  SD_IO_CSState(1);
 80031ce:	2001      	movs	r0, #1
 80031d0:	f000 fd66 	bl	8003ca0 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 80031d4:	20ff      	movs	r0, #255	; 0xff
 80031d6:	f000 fd74 	bl	8003cc2 <SD_IO_WriteByte>
  status|= SD_GetCIDRegister(&(pCardInfo->Cid));
 80031da:	9b03      	ldr	r3, [sp, #12]
 80031dc:	431e      	orrs	r6, r3
  if(flag_SDHC == 1 )
 80031de:	4bca      	ldr	r3, [pc, #808]	; (8003508 <BSP_SD_GetCardInfo+0x380>)
  status|= SD_GetCIDRegister(&(pCardInfo->Cid));
 80031e0:	b2f0      	uxtb	r0, r6
  if(flag_SDHC == 1 )
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d000      	beq.n	80031ea <BSP_SD_GetCardInfo+0x62>
 80031e8:	e17b      	b.n	80034e2 <BSP_SD_GetCardInfo+0x35a>
    pCardInfo->LogBlockSize = 512;
 80031ea:	2380      	movs	r3, #128	; 0x80
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	63e3      	str	r3, [r4, #60]	; 0x3c
    pCardInfo->CardBlockSize = 512;
 80031f0:	6363      	str	r3, [r4, #52]	; 0x34
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v2.DeviceSize + 1) * 1024 * pCardInfo->LogBlockSize;
 80031f2:	68a3      	ldr	r3, [r4, #8]
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	0a9b      	lsrs	r3, r3, #10
 80031f8:	3301      	adds	r3, #1
 80031fa:	04db      	lsls	r3, r3, #19
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 80031fc:	6323      	str	r3, [r4, #48]	; 0x30
    pCardInfo->LogBlockNbr = (pCardInfo->CardCapacity) / (pCardInfo->LogBlockSize);
 80031fe:	0a5b      	lsrs	r3, r3, #9
 8003200:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8003202:	b00b      	add	sp, #44	; 0x2c
 8003204:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 8003206:	f7ff fee9 	bl	8002fdc <SD_WaitData.constprop.0>
 800320a:	9003      	str	r0, [sp, #12]
 800320c:	2800      	cmp	r0, #0
 800320e:	d1c9      	bne.n	80031a4 <BSP_SD_GetCardInfo+0x1c>
 8003210:	0006      	movs	r6, r0
        CSD_Tab[counter] = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003212:	20ff      	movs	r0, #255	; 0xff
 8003214:	f000 fd55 	bl	8003cc2 <SD_IO_WriteByte>
 8003218:	ad06      	add	r5, sp, #24
 800321a:	5570      	strb	r0, [r6, r5]
 800321c:	3601      	adds	r6, #1
      for (counter = 0; counter < 16; counter++)
 800321e:	2e10      	cmp	r6, #16
 8003220:	d1f7      	bne.n	8003212 <BSP_SD_GetCardInfo+0x8a>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003222:	20ff      	movs	r0, #255	; 0xff
 8003224:	f000 fd4d 	bl	8003cc2 <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003228:	20ff      	movs	r0, #255	; 0xff
 800322a:	f000 fd4a 	bl	8003cc2 <SD_IO_WriteByte>
      Csd->PartBlockRead   = (CSD_Tab[6] & 0x80) >> 7;
 800322e:	2001      	movs	r0, #1
      Csd->CSDStruct = (CSD_Tab[0] & 0xC0) >> 6;
 8003230:	782b      	ldrb	r3, [r5, #0]
      Csd->Reserved1 =  CSD_Tab[0] & 0x3F;
 8003232:	009a      	lsls	r2, r3, #2
 8003234:	099b      	lsrs	r3, r3, #6
 8003236:	4313      	orrs	r3, r2
 8003238:	7023      	strb	r3, [r4, #0]
      Csd->TAAC = CSD_Tab[1];
 800323a:	786b      	ldrb	r3, [r5, #1]
 800323c:	7063      	strb	r3, [r4, #1]
      Csd->NSAC = CSD_Tab[2];
 800323e:	78ab      	ldrb	r3, [r5, #2]
 8003240:	70a3      	strb	r3, [r4, #2]
      Csd->MaxBusClkFrec = CSD_Tab[3];
 8003242:	78eb      	ldrb	r3, [r5, #3]
 8003244:	70e3      	strb	r3, [r4, #3]
      Csd->CardComdClasses = (CSD_Tab[4] << 4) | ((CSD_Tab[5] & 0xF0) >> 4);
 8003246:	796a      	ldrb	r2, [r5, #5]
 8003248:	792b      	ldrb	r3, [r5, #4]
 800324a:	0911      	lsrs	r1, r2, #4
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	4319      	orrs	r1, r3
 8003250:	88a3      	ldrh	r3, [r4, #4]
      Csd->RdBlockLen = CSD_Tab[5] & 0x0F;
 8003252:	0112      	lsls	r2, r2, #4
      Csd->CardComdClasses = (CSD_Tab[4] << 4) | ((CSD_Tab[5] & 0xF0) >> 4);
 8003254:	0b1b      	lsrs	r3, r3, #12
 8003256:	031b      	lsls	r3, r3, #12
 8003258:	430b      	orrs	r3, r1
 800325a:	80a3      	strh	r3, [r4, #4]
      Csd->RdBlockLen = CSD_Tab[5] & 0x0F;
 800325c:	051b      	lsls	r3, r3, #20
 800325e:	0f1b      	lsrs	r3, r3, #28
 8003260:	4313      	orrs	r3, r2
 8003262:	7163      	strb	r3, [r4, #5]
      Csd->PartBlockRead   = (CSD_Tab[6] & 0x80) >> 7;
 8003264:	79ab      	ldrb	r3, [r5, #6]
 8003266:	79a1      	ldrb	r1, [r4, #6]
 8003268:	09da      	lsrs	r2, r3, #7
 800326a:	4381      	bics	r1, r0
      Csd->WrBlockMisalign = (CSD_Tab[6] & 0x40) >> 6;
 800326c:	119f      	asrs	r7, r3, #6
 800326e:	4007      	ands	r7, r0
 8003270:	430a      	orrs	r2, r1
 8003272:	2102      	movs	r1, #2
 8003274:	4087      	lsls	r7, r0
 8003276:	438a      	bics	r2, r1
      Csd->RdBlockMisalign = (CSD_Tab[6] & 0x20) >> 5;
 8003278:	433a      	orrs	r2, r7
 800327a:	2704      	movs	r7, #4
 800327c:	1159      	asrs	r1, r3, #5
 800327e:	4001      	ands	r1, r0
 8003280:	0089      	lsls	r1, r1, #2
 8003282:	43ba      	bics	r2, r7
      Csd->DSRImpl         = (CSD_Tab[6] & 0x10) >> 4;
 8003284:	430a      	orrs	r2, r1
 8003286:	2108      	movs	r1, #8
 8003288:	111f      	asrs	r7, r3, #4
 800328a:	4038      	ands	r0, r7
 800328c:	438a      	bics	r2, r1
 800328e:	00c0      	lsls	r0, r0, #3
 8003290:	4302      	orrs	r2, r0
 8003292:	71a2      	strb	r2, [r4, #6]
      if(flag_SDHC == 0)
 8003294:	4a9c      	ldr	r2, [pc, #624]	; (8003508 <BSP_SD_GetCardInfo+0x380>)
 8003296:	8811      	ldrh	r1, [r2, #0]
 8003298:	79ea      	ldrb	r2, [r5, #7]
 800329a:	2900      	cmp	r1, #0
 800329c:	d000      	beq.n	80032a0 <BSP_SD_GetCardInfo+0x118>
 800329e:	e0a7      	b.n	80033f0 <BSP_SD_GetCardInfo+0x268>
        Csd->version.v1.Reserved1 = ((CSD_Tab[6] & 0x0C) >> 2);
 80032a0:	1098      	asrs	r0, r3, #2
 80032a2:	3103      	adds	r1, #3
 80032a4:	4008      	ands	r0, r1
 80032a6:	7a21      	ldrb	r1, [r4, #8]
 80032a8:	3e0d      	subs	r6, #13
 80032aa:	43b1      	bics	r1, r6
 80032ac:	4301      	orrs	r1, r0
 80032ae:	7221      	strb	r1, [r4, #8]
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 80032b0:	7a29      	ldrb	r1, [r5, #8]
                                    |  (CSD_Tab[7] << 2)
 80032b2:	0090      	lsls	r0, r2, #2
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 80032b4:	098a      	lsrs	r2, r1, #6
 80032b6:	4302      	orrs	r2, r0
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10)
 80032b8:	029b      	lsls	r3, r3, #10
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 80032ba:	4313      	orrs	r3, r2
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10)
 80032bc:	4893      	ldr	r0, [pc, #588]	; (800350c <BSP_SD_GetCardInfo+0x384>)
 80032be:	8922      	ldrh	r2, [r4, #8]
 80032c0:	051b      	lsls	r3, r3, #20
 80032c2:	4002      	ands	r2, r0
 80032c4:	0c9b      	lsrs	r3, r3, #18
 80032c6:	4313      	orrs	r3, r2
        Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
 80032c8:	2207      	movs	r2, #7
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10)
 80032ca:	8123      	strh	r3, [r4, #8]
        Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
 80032cc:	7aa3      	ldrb	r3, [r4, #10]
 80032ce:	10c8      	asrs	r0, r1, #3
 80032d0:	4010      	ands	r0, r2
 80032d2:	4393      	bics	r3, r2
        Csd->version.v1.MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07);
 80032d4:	4303      	orrs	r3, r0
 80032d6:	4011      	ands	r1, r2
 80032d8:	2038      	movs	r0, #56	; 0x38
 80032da:	40b1      	lsls	r1, r6
 80032dc:	4383      	bics	r3, r0
 80032de:	430b      	orrs	r3, r1
 80032e0:	72a3      	strb	r3, [r4, #10]
        Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0) >> 5;
 80032e2:	7a6b      	ldrb	r3, [r5, #9]
 80032e4:	7ae1      	ldrb	r1, [r4, #11]
 80032e6:	095f      	lsrs	r7, r3, #5
        Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 80032e8:	109e      	asrs	r6, r3, #2
        Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0) >> 5;
 80032ea:	4391      	bics	r1, r2
        Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 80032ec:	4016      	ands	r6, r2
 80032ee:	4339      	orrs	r1, r7
 80032f0:	00f6      	lsls	r6, r6, #3
 80032f2:	4381      	bics	r1, r0
 80032f4:	4331      	orrs	r1, r6
 80032f6:	72e1      	strb	r1, [r4, #11]
        Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03) << 1)
 80032f8:	2106      	movs	r1, #6
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	400b      	ands	r3, r1
                                       |((CSD_Tab[10] & 0x80) >> 7);
 80032fe:	7aa9      	ldrb	r1, [r5, #10]
 8003300:	40d1      	lsrs	r1, r2
 8003302:	430b      	orrs	r3, r1
        Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03) << 1)
 8003304:	7b21      	ldrb	r1, [r4, #12]
 8003306:	4391      	bics	r1, r2
 8003308:	430b      	orrs	r3, r1
 800330a:	7323      	strb	r3, [r4, #12]
      Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40) >> 6;
 800330c:	2001      	movs	r0, #1
 800330e:	ae06      	add	r6, sp, #24
 8003310:	7ab3      	ldrb	r3, [r6, #10]
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8003312:	277e      	movs	r7, #126	; 0x7e
      Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40) >> 6;
 8003314:	119d      	asrs	r5, r3, #6
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8003316:	4083      	lsls	r3, r0
      Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40) >> 6;
 8003318:	7c22      	ldrb	r2, [r4, #16]
 800331a:	4005      	ands	r5, r0
 800331c:	4382      	bics	r2, r0
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 800331e:	432a      	orrs	r2, r5
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 8003320:	257f      	movs	r5, #127	; 0x7f
                              |((CSD_Tab[11] & 0x80) >> 7);
 8003322:	7af1      	ldrb	r1, [r6, #11]
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8003324:	403b      	ands	r3, r7
                              |((CSD_Tab[11] & 0x80) >> 7);
 8003326:	09cf      	lsrs	r7, r1, #7
 8003328:	433b      	orrs	r3, r7
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 800332a:	4083      	lsls	r3, r0
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 800332c:	4029      	ands	r1, r5
 800332e:	000f      	movs	r7, r1
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8003330:	4002      	ands	r2, r0
 8003332:	4313      	orrs	r3, r2
 8003334:	7423      	strb	r3, [r4, #16]
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 8003336:	7c63      	ldrb	r3, [r4, #17]
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 8003338:	7b31      	ldrb	r1, [r6, #12]
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 800333a:	43ab      	bics	r3, r5
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 800333c:	09ca      	lsrs	r2, r1, #7
 800333e:	433b      	orrs	r3, r7
 8003340:	01d2      	lsls	r2, r2, #7
 8003342:	402b      	ands	r3, r5
 8003344:	4313      	orrs	r3, r2
      Csd->Reserved2         = (CSD_Tab[12] & 0x60) >> 5;
 8003346:	2203      	movs	r2, #3
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 8003348:	7463      	strb	r3, [r4, #17]
      Csd->Reserved2         = (CSD_Tab[12] & 0x60) >> 5;
 800334a:	114b      	asrs	r3, r1, #5
 800334c:	4013      	ands	r3, r2
 800334e:	469c      	mov	ip, r3
      Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1C) >> 2;
 8003350:	4667      	mov	r7, ip
      Csd->Reserved2         = (CSD_Tab[12] & 0x60) >> 5;
 8003352:	7ca3      	ldrb	r3, [r4, #18]
 8003354:	4393      	bics	r3, r2
      Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1C) >> 2;
 8003356:	433b      	orrs	r3, r7
 8003358:	271c      	movs	r7, #28
 800335a:	3219      	adds	r2, #25
 800335c:	43bb      	bics	r3, r7
 800335e:	400a      	ands	r2, r1
 8003360:	431a      	orrs	r2, r3
 8003362:	74a2      	strb	r2, [r4, #18]
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8003364:	220c      	movs	r2, #12
                              |((CSD_Tab[13] & 0xC0) >> 6);
 8003366:	7b73      	ldrb	r3, [r6, #13]
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8003368:	0089      	lsls	r1, r1, #2
 800336a:	4011      	ands	r1, r2
                              |((CSD_Tab[13] & 0xC0) >> 6);
 800336c:	099a      	lsrs	r2, r3, #6
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 800336e:	4311      	orrs	r1, r2
 8003370:	468c      	mov	ip, r1
 8003372:	220f      	movs	r2, #15
      Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20) >> 5;
 8003374:	4667      	mov	r7, ip
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8003376:	7ce1      	ldrb	r1, [r4, #19]
 8003378:	4391      	bics	r1, r2
      Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20) >> 5;
 800337a:	4339      	orrs	r1, r7
 800337c:	2710      	movs	r7, #16
 800337e:	115a      	asrs	r2, r3, #5
 8003380:	4002      	ands	r2, r0
 8003382:	43b9      	bics	r1, r7
 8003384:	0112      	lsls	r2, r2, #4
 8003386:	430a      	orrs	r2, r1
 8003388:	74e2      	strb	r2, [r4, #19]
      Csd->Reserved3         = (CSD_Tab[13] & 0x1F);
 800338a:	221f      	movs	r2, #31
 800338c:	7d21      	ldrb	r1, [r4, #20]
 800338e:	4013      	ands	r3, r2
 8003390:	4391      	bics	r1, r2
      Csd->FileFormatGrouop  = (CSD_Tab[14] & 0x80) >> 7;
 8003392:	430b      	orrs	r3, r1
 8003394:	2120      	movs	r1, #32
 8003396:	7bb2      	ldrb	r2, [r6, #14]
 8003398:	438b      	bics	r3, r1
 800339a:	09d7      	lsrs	r7, r2, #7
 800339c:	017f      	lsls	r7, r7, #5
      Csd->CopyFlag          = (CSD_Tab[14] & 0x40) >> 6;
 800339e:	433b      	orrs	r3, r7
 80033a0:	2740      	movs	r7, #64	; 0x40
 80033a2:	1191      	asrs	r1, r2, #6
 80033a4:	4001      	ands	r1, r0
 80033a6:	0189      	lsls	r1, r1, #6
 80033a8:	43bb      	bics	r3, r7
      Csd->PermWrProtect     = (CSD_Tab[14] & 0x20) >> 5;
 80033aa:	430b      	orrs	r3, r1
 80033ac:	1157      	asrs	r7, r2, #5
 80033ae:	01ff      	lsls	r7, r7, #7
 80033b0:	402b      	ands	r3, r5
      Csd->TempWrProtect     = (CSD_Tab[14] & 0x10) >> 4;
 80033b2:	7d61      	ldrb	r1, [r4, #21]
      Csd->PermWrProtect     = (CSD_Tab[14] & 0x20) >> 5;
 80033b4:	433b      	orrs	r3, r7
 80033b6:	7523      	strb	r3, [r4, #20]
      Csd->TempWrProtect     = (CSD_Tab[14] & 0x10) >> 4;
 80033b8:	4381      	bics	r1, r0
 80033ba:	1113      	asrs	r3, r2, #4
 80033bc:	4003      	ands	r3, r0
 80033be:	0008      	movs	r0, r1
      Csd->FileFormat        = (CSD_Tab[14] & 0x0C) >> 2;
 80033c0:	2703      	movs	r7, #3
 80033c2:	4303      	orrs	r3, r0
 80033c4:	2006      	movs	r0, #6
 80033c6:	1091      	asrs	r1, r2, #2
 80033c8:	4039      	ands	r1, r7
 80033ca:	0049      	lsls	r1, r1, #1
 80033cc:	4383      	bics	r3, r0
      Csd->Reserved4         = (CSD_Tab[14] & 0x03);
 80033ce:	430b      	orrs	r3, r1
 80033d0:	403a      	ands	r2, r7
 80033d2:	2118      	movs	r1, #24
 80033d4:	40ba      	lsls	r2, r7
 80033d6:	438b      	bics	r3, r1
 80033d8:	431a      	orrs	r2, r3
 80033da:	7562      	strb	r2, [r4, #21]
      Csd->crc               = (CSD_Tab[15] & 0xFE) >> 1;
 80033dc:	7bf2      	ldrb	r2, [r6, #15]
 80033de:	7da3      	ldrb	r3, [r4, #22]
 80033e0:	0851      	lsrs	r1, r2, #1
 80033e2:	43ab      	bics	r3, r5
      Csd->Reserved5         = (CSD_Tab[15] & 0x01);
 80033e4:	430b      	orrs	r3, r1
 80033e6:	01d2      	lsls	r2, r2, #7
 80033e8:	401d      	ands	r5, r3
 80033ea:	4315      	orrs	r5, r2
 80033ec:	75a5      	strb	r5, [r4, #22]
 80033ee:	e6db      	b.n	80031a8 <BSP_SD_GetCardInfo+0x20>
        Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0F) << 2) | ((CSD_Tab[7] & 0xC0) >> 6);
 80033f0:	213c      	movs	r1, #60	; 0x3c
 80033f2:	203f      	movs	r0, #63	; 0x3f
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	400b      	ands	r3, r1
 80033f8:	0991      	lsrs	r1, r2, #6
 80033fa:	430b      	orrs	r3, r1
 80033fc:	7a21      	ldrb	r1, [r4, #8]
        Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3F) << 16) | (CSD_Tab[8] << 8) | CSD_Tab[9];
 80033fe:	0412      	lsls	r2, r2, #16
        Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0F) << 2) | ((CSD_Tab[7] & 0xC0) >> 6);
 8003400:	4381      	bics	r1, r0
 8003402:	430b      	orrs	r3, r1
 8003404:	7223      	strb	r3, [r4, #8]
        Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3F) << 16) | (CSD_Tab[8] << 8) | CSD_Tab[9];
 8003406:	892b      	ldrh	r3, [r5, #8]
 8003408:	68a1      	ldr	r1, [r4, #8]
 800340a:	ba5b      	rev16	r3, r3
 800340c:	b29b      	uxth	r3, r3
 800340e:	431a      	orrs	r2, r3
 8003410:	4b3f      	ldr	r3, [pc, #252]	; (8003510 <BSP_SD_GetCardInfo+0x388>)
 8003412:	0292      	lsls	r2, r2, #10
 8003414:	0912      	lsrs	r2, r2, #4
 8003416:	400b      	ands	r3, r1
 8003418:	431a      	orrs	r2, r3
 800341a:	60a2      	str	r2, [r4, #8]
        Csd->version.v2.Reserved2 = ((CSD_Tab[10] & 0x80) >> 8);
 800341c:	0e12      	lsrs	r2, r2, #24
 800341e:	43b2      	bics	r2, r6
 8003420:	72e2      	strb	r2, [r4, #11]
 8003422:	e773      	b.n	800330c <BSP_SD_GetCardInfo+0x184>
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 8003424:	f7ff fdda 	bl	8002fdc <SD_WaitData.constprop.0>
 8003428:	1e06      	subs	r6, r0, #0
 800342a:	d000      	beq.n	800342e <BSP_SD_GetCardInfo+0x2a6>
 800342c:	e6ce      	b.n	80031cc <BSP_SD_GetCardInfo+0x44>
 800342e:	0007      	movs	r7, r0
        CID_Tab[counter] = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003430:	20ff      	movs	r0, #255	; 0xff
 8003432:	f000 fc46 	bl	8003cc2 <SD_IO_WriteByte>
 8003436:	ad06      	add	r5, sp, #24
 8003438:	5578      	strb	r0, [r7, r5]
      for (counter = 0; counter < 16; counter++)
 800343a:	3701      	adds	r7, #1
 800343c:	2f10      	cmp	r7, #16
 800343e:	d1f7      	bne.n	8003430 <BSP_SD_GetCardInfo+0x2a8>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003440:	20ff      	movs	r0, #255	; 0xff
 8003442:	f000 fc3e 	bl	8003cc2 <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003446:	20ff      	movs	r0, #255	; 0xff
 8003448:	f000 fc3b 	bl	8003cc2 <SD_IO_WriteByte>
      Cid->ManufacturerID = CID_Tab[0];
 800344c:	782b      	ldrb	r3, [r5, #0]
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 800344e:	0021      	movs	r1, r4
      Cid->ManufacturerID = CID_Tab[0];
 8003450:	7623      	strb	r3, [r4, #24]
      Cid->OEM_AppliID = CID_Tab[1] << 8;
 8003452:	786b      	ldrb	r3, [r5, #1]
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 8003454:	3128      	adds	r1, #40	; 0x28
      Cid->OEM_AppliID = CID_Tab[1] << 8;
 8003456:	021b      	lsls	r3, r3, #8
 8003458:	8363      	strh	r3, [r4, #26]
      Cid->OEM_AppliID |= CID_Tab[2];
 800345a:	8b63      	ldrh	r3, [r4, #26]
 800345c:	78aa      	ldrb	r2, [r5, #2]
 800345e:	4313      	orrs	r3, r2
 8003460:	8363      	strh	r3, [r4, #26]
      Cid->ProdName1 = CID_Tab[3] << 24;
 8003462:	78eb      	ldrb	r3, [r5, #3]
 8003464:	061b      	lsls	r3, r3, #24
 8003466:	61e3      	str	r3, [r4, #28]
      Cid->ProdName1 |= CID_Tab[4] << 16;
 8003468:	792b      	ldrb	r3, [r5, #4]
 800346a:	69e2      	ldr	r2, [r4, #28]
 800346c:	041b      	lsls	r3, r3, #16
 800346e:	4313      	orrs	r3, r2
 8003470:	61e3      	str	r3, [r4, #28]
      Cid->ProdName1 |= CID_Tab[5] << 8;
 8003472:	796b      	ldrb	r3, [r5, #5]
 8003474:	69e2      	ldr	r2, [r4, #28]
 8003476:	021b      	lsls	r3, r3, #8
 8003478:	4313      	orrs	r3, r2
 800347a:	61e3      	str	r3, [r4, #28]
      Cid->ProdName1 |= CID_Tab[6];
 800347c:	69e2      	ldr	r2, [r4, #28]
 800347e:	79ab      	ldrb	r3, [r5, #6]
 8003480:	4313      	orrs	r3, r2
 8003482:	61e3      	str	r3, [r4, #28]
      Cid->ProdName2 = CID_Tab[7];
 8003484:	79ea      	ldrb	r2, [r5, #7]
 8003486:	1c63      	adds	r3, r4, #1
 8003488:	77da      	strb	r2, [r3, #31]
      Cid->ProdRev = CID_Tab[8];
 800348a:	7a2a      	ldrb	r2, [r5, #8]
 800348c:	1ca3      	adds	r3, r4, #2
 800348e:	77da      	strb	r2, [r3, #31]
      Cid->ProdSN = CID_Tab[9] << 24;
 8003490:	7a6b      	ldrb	r3, [r5, #9]
 8003492:	061b      	lsls	r3, r3, #24
 8003494:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->ProdSN |= CID_Tab[10] << 16;
 8003496:	7aab      	ldrb	r3, [r5, #10]
 8003498:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800349a:	041b      	lsls	r3, r3, #16
 800349c:	4313      	orrs	r3, r2
 800349e:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->ProdSN |= CID_Tab[11] << 8;
 80034a0:	7aeb      	ldrb	r3, [r5, #11]
 80034a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80034a4:	021b      	lsls	r3, r3, #8
 80034a6:	4313      	orrs	r3, r2
 80034a8:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->ProdSN |= CID_Tab[12];
 80034aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80034ac:	7b2b      	ldrb	r3, [r5, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 80034b2:	7b6b      	ldrb	r3, [r5, #13]
 80034b4:	780a      	ldrb	r2, [r1, #0]
 80034b6:	0918      	lsrs	r0, r3, #4
 80034b8:	4302      	orrs	r2, r0
 80034ba:	700a      	strb	r2, [r1, #0]
      Cid->ManufactDate = (CID_Tab[13] & 0x0F) << 8;
 80034bc:	22f0      	movs	r2, #240	; 0xf0
 80034be:	021b      	lsls	r3, r3, #8
 80034c0:	0112      	lsls	r2, r2, #4
 80034c2:	4013      	ands	r3, r2
 80034c4:	8563      	strh	r3, [r4, #42]	; 0x2a
      Cid->ManufactDate |= CID_Tab[14];
 80034c6:	7baa      	ldrb	r2, [r5, #14]
 80034c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80034ca:	4313      	orrs	r3, r2
      Cid->CID_CRC = (CID_Tab[15] & 0xFE) >> 1;
 80034cc:	0022      	movs	r2, r4
      Cid->ManufactDate |= CID_Tab[14];
 80034ce:	8563      	strh	r3, [r4, #42]	; 0x2a
      Cid->CID_CRC = (CID_Tab[15] & 0xFE) >> 1;
 80034d0:	7beb      	ldrb	r3, [r5, #15]
 80034d2:	322c      	adds	r2, #44	; 0x2c
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	7013      	strb	r3, [r2, #0]
      Cid->Reserved2 = 1;
 80034d8:	0023      	movs	r3, r4
 80034da:	2201      	movs	r2, #1
 80034dc:	332d      	adds	r3, #45	; 0x2d
 80034de:	701a      	strb	r2, [r3, #0]
 80034e0:	e675      	b.n	80031ce <BSP_SD_GetCardInfo+0x46>
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 80034e2:	8923      	ldrh	r3, [r4, #8]
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 80034e4:	7b22      	ldrb	r2, [r4, #12]
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 80034e6:	049b      	lsls	r3, r3, #18
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 80034e8:	0752      	lsls	r2, r2, #29
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 80034ea:	0d1b      	lsrs	r3, r3, #20
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 80034ec:	0f52      	lsrs	r2, r2, #29
 80034ee:	3202      	adds	r2, #2
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 80034f0:	3301      	adds	r3, #1
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 80034f2:	4093      	lsls	r3, r2
    pCardInfo->LogBlockSize = 512;
 80034f4:	2280      	movs	r2, #128	; 0x80
    pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 80034f6:	2101      	movs	r1, #1
    pCardInfo->LogBlockSize = 512;
 80034f8:	0092      	lsls	r2, r2, #2
 80034fa:	63e2      	str	r2, [r4, #60]	; 0x3c
    pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 80034fc:	7962      	ldrb	r2, [r4, #5]
 80034fe:	0912      	lsrs	r2, r2, #4
 8003500:	4091      	lsls	r1, r2
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8003502:	4093      	lsls	r3, r2
    pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 8003504:	6361      	str	r1, [r4, #52]	; 0x34
 8003506:	e679      	b.n	80031fc <BSP_SD_GetCardInfo+0x74>
 8003508:	2000147a 	.word	0x2000147a
 800350c:	ffffc003 	.word	0xffffc003
 8003510:	f000003f 	.word	0xf000003f

08003514 <BSP_SD_ReadBlocks>:
{
 8003514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003516:	b087      	sub	sp, #28
 8003518:	9203      	str	r2, [sp, #12]
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 800351a:	2300      	movs	r3, #0
 800351c:	2280      	movs	r2, #128	; 0x80
 800351e:	ad04      	add	r5, sp, #16
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	0092      	lsls	r2, r2, #2
 8003524:	33ff      	adds	r3, #255	; 0xff
{
 8003526:	0007      	movs	r7, r0
 8003528:	000c      	movs	r4, r1
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 800352a:	0028      	movs	r0, r5
 800352c:	2110      	movs	r1, #16
 800352e:	f7ff fce7 	bl	8002f00 <SD_SendCmd>
 8003532:	782e      	ldrb	r6, [r5, #0]
  SD_IO_CSState(1);
 8003534:	2001      	movs	r0, #1
 8003536:	f000 fbb3 	bl	8003ca0 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 800353a:	20ff      	movs	r0, #255	; 0xff
 800353c:	f000 fbc1 	bl	8003cc2 <SD_IO_WriteByte>
  if ( response.r1 != SD_R1_NO_ERROR)
 8003540:	2e00      	cmp	r6, #0
 8003542:	d002      	beq.n	800354a <BSP_SD_ReadBlocks+0x36>
  uint8_t *ptr = NULL;
 8003544:	2500      	movs	r5, #0
  uint8_t retr = BSP_SD_ERROR;
 8003546:	2601      	movs	r6, #1
 8003548:	e014      	b.n	8003574 <BSP_SD_ReadBlocks+0x60>
  ptr = malloc(sizeof(uint8_t)*BlockSize);
 800354a:	2080      	movs	r0, #128	; 0x80
 800354c:	0080      	lsls	r0, r0, #2
 800354e:	f00a fc05 	bl	800dd5c <malloc>
 8003552:	1e05      	subs	r5, r0, #0
  if( ptr == NULL )
 8003554:	d0f6      	beq.n	8003544 <BSP_SD_ReadBlocks+0x30>
  memset(ptr, SD_DUMMY_BYTE, sizeof(uint8_t)*BlockSize);
 8003556:	2280      	movs	r2, #128	; 0x80
 8003558:	21ff      	movs	r1, #255	; 0xff
 800355a:	0092      	lsls	r2, r2, #2
 800355c:	f00a fe1f 	bl	800e19e <memset>
  addr = (ReadAddr * ((flag_SDHC == 1) ? 1 : BlockSize));
 8003560:	4b24      	ldr	r3, [pc, #144]	; (80035f4 <BSP_SD_ReadBlocks+0xe0>)
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d001      	beq.n	800356c <BSP_SD_ReadBlocks+0x58>
 8003568:	2380      	movs	r3, #128	; 0x80
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	435c      	muls	r4, r3
  while (NumOfBlocks--)
 800356e:	9b03      	ldr	r3, [sp, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10d      	bne.n	8003590 <BSP_SD_ReadBlocks+0x7c>
  SD_IO_CSState(1);
 8003574:	2001      	movs	r0, #1
 8003576:	f000 fb93 	bl	8003ca0 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 800357a:	20ff      	movs	r0, #255	; 0xff
 800357c:	f000 fba1 	bl	8003cc2 <SD_IO_WriteByte>
  if(ptr != NULL) free(ptr);
 8003580:	2d00      	cmp	r5, #0
 8003582:	d002      	beq.n	800358a <BSP_SD_ReadBlocks+0x76>
 8003584:	0028      	movs	r0, r5
 8003586:	f00a fbf3 	bl	800dd70 <free>
}
 800358a:	0030      	movs	r0, r6
 800358c:	b007      	add	sp, #28
 800358e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    response = SD_SendCmd(SD_CMD_READ_SINGLE_BLOCK, addr, 0xFF, SD_ANSWER_R1_EXPECTED);
 8003590:	2300      	movs	r3, #0
 8003592:	0022      	movs	r2, r4
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	2111      	movs	r1, #17
 8003598:	33ff      	adds	r3, #255	; 0xff
 800359a:	a804      	add	r0, sp, #16
 800359c:	f7ff fcb0 	bl	8002f00 <SD_SendCmd>
    if ( response.r1 != SD_R1_NO_ERROR)
 80035a0:	ab02      	add	r3, sp, #8
 80035a2:	7a1b      	ldrb	r3, [r3, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1ce      	bne.n	8003546 <BSP_SD_ReadBlocks+0x32>
    if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 80035a8:	f7ff fd18 	bl	8002fdc <SD_WaitData.constprop.0>
 80035ac:	2800      	cmp	r0, #0
 80035ae:	d1ca      	bne.n	8003546 <BSP_SD_ReadBlocks+0x32>
      SD_IO_WriteReadData(ptr, (uint8_t*)pData + offset, BlockSize);
 80035b0:	2280      	movs	r2, #128	; 0x80
 80035b2:	0039      	movs	r1, r7
 80035b4:	0092      	lsls	r2, r2, #2
 80035b6:	0028      	movs	r0, r5
 80035b8:	f000 fb7f 	bl	8003cba <SD_IO_WriteReadData>
      addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 80035bc:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <BSP_SD_ReadBlocks+0xe0>)
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d113      	bne.n	80035ec <BSP_SD_ReadBlocks+0xd8>
 80035c4:	3401      	adds	r4, #1
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80035c6:	20ff      	movs	r0, #255	; 0xff
 80035c8:	f000 fb7b 	bl	8003cc2 <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80035cc:	20ff      	movs	r0, #255	; 0xff
 80035ce:	f000 fb78 	bl	8003cc2 <SD_IO_WriteByte>
    SD_IO_CSState(1);
 80035d2:	2001      	movs	r0, #1
 80035d4:	f000 fb64 	bl	8003ca0 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80035d8:	20ff      	movs	r0, #255	; 0xff
 80035da:	f000 fb72 	bl	8003cc2 <SD_IO_WriteByte>
 80035de:	9b03      	ldr	r3, [sp, #12]
 80035e0:	3b01      	subs	r3, #1
 80035e2:	9303      	str	r3, [sp, #12]
 80035e4:	2380      	movs	r3, #128	; 0x80
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	18ff      	adds	r7, r7, r3
 80035ea:	e7c0      	b.n	800356e <BSP_SD_ReadBlocks+0x5a>
      addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 80035ec:	2380      	movs	r3, #128	; 0x80
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	18e4      	adds	r4, r4, r3
 80035f2:	e7e8      	b.n	80035c6 <BSP_SD_ReadBlocks+0xb2>
 80035f4:	2000147a 	.word	0x2000147a

080035f8 <BSP_SD_WriteBlocks>:
{
 80035f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035fa:	b087      	sub	sp, #28
 80035fc:	9203      	str	r2, [sp, #12]
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 80035fe:	2300      	movs	r3, #0
 8003600:	2280      	movs	r2, #128	; 0x80
 8003602:	ad04      	add	r5, sp, #16
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	0092      	lsls	r2, r2, #2
 8003608:	33ff      	adds	r3, #255	; 0xff
{
 800360a:	0007      	movs	r7, r0
 800360c:	000c      	movs	r4, r1
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 800360e:	0028      	movs	r0, r5
 8003610:	2110      	movs	r1, #16
 8003612:	f7ff fc75 	bl	8002f00 <SD_SendCmd>
 8003616:	782d      	ldrb	r5, [r5, #0]
  SD_IO_CSState(1);
 8003618:	2001      	movs	r0, #1
 800361a:	f000 fb41 	bl	8003ca0 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 800361e:	20ff      	movs	r0, #255	; 0xff
 8003620:	f000 fb4f 	bl	8003cc2 <SD_IO_WriteByte>
  if ( response.r1 != SD_R1_NO_ERROR)
 8003624:	2d00      	cmp	r5, #0
 8003626:	d009      	beq.n	800363c <BSP_SD_WriteBlocks+0x44>
  uint8_t retr = BSP_SD_ERROR;
 8003628:	2501      	movs	r5, #1
  SD_IO_CSState(1);
 800362a:	2001      	movs	r0, #1
 800362c:	f000 fb38 	bl	8003ca0 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003630:	20ff      	movs	r0, #255	; 0xff
 8003632:	f000 fb46 	bl	8003cc2 <SD_IO_WriteByte>
}
 8003636:	0028      	movs	r0, r5
 8003638:	b007      	add	sp, #28
 800363a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ptr = malloc(sizeof(uint8_t)*BlockSize);
 800363c:	2080      	movs	r0, #128	; 0x80
 800363e:	0080      	lsls	r0, r0, #2
 8003640:	f00a fb8c 	bl	800dd5c <malloc>
 8003644:	1e06      	subs	r6, r0, #0
  if (ptr == NULL)
 8003646:	d0ef      	beq.n	8003628 <BSP_SD_WriteBlocks+0x30>
  addr = (WriteAddr * ((flag_SDHC == 1) ? 1 : BlockSize));
 8003648:	4b30      	ldr	r3, [pc, #192]	; (800370c <BSP_SD_WriteBlocks+0x114>)
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d001      	beq.n	8003654 <BSP_SD_WriteBlocks+0x5c>
 8003650:	2380      	movs	r3, #128	; 0x80
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	435c      	muls	r4, r3
 8003656:	9702      	str	r7, [sp, #8]
  while (NumOfBlocks--)
 8003658:	9b03      	ldr	r3, [sp, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d103      	bne.n	8003666 <BSP_SD_WriteBlocks+0x6e>
  if(ptr != NULL) free(ptr);
 800365e:	0030      	movs	r0, r6
 8003660:	f00a fb86 	bl	800dd70 <free>
 8003664:	e7e1      	b.n	800362a <BSP_SD_WriteBlocks+0x32>
    response = SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK, addr, 0xFF, SD_ANSWER_R1_EXPECTED);
 8003666:	2300      	movs	r3, #0
 8003668:	af04      	add	r7, sp, #16
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	0022      	movs	r2, r4
 800366e:	33ff      	adds	r3, #255	; 0xff
 8003670:	2118      	movs	r1, #24
 8003672:	0038      	movs	r0, r7
 8003674:	f7ff fc44 	bl	8002f00 <SD_SendCmd>
    if (response.r1 != SD_R1_NO_ERROR)
 8003678:	783b      	ldrb	r3, [r7, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d144      	bne.n	8003708 <BSP_SD_WriteBlocks+0x110>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 800367e:	20ff      	movs	r0, #255	; 0xff
 8003680:	f000 fb1f 	bl	8003cc2 <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003684:	20ff      	movs	r0, #255	; 0xff
 8003686:	f000 fb1c 	bl	8003cc2 <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_TOKEN_START_DATA_SINGLE_BLOCK_WRITE);
 800368a:	20fe      	movs	r0, #254	; 0xfe
 800368c:	f000 fb19 	bl	8003cc2 <SD_IO_WriteByte>
    SD_IO_WriteReadData((uint8_t*)pData + offset, ptr, BlockSize);
 8003690:	2280      	movs	r2, #128	; 0x80
 8003692:	0031      	movs	r1, r6
 8003694:	0092      	lsls	r2, r2, #2
 8003696:	9802      	ldr	r0, [sp, #8]
 8003698:	f000 fb0f 	bl	8003cba <SD_IO_WriteReadData>
    addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 800369c:	4b1b      	ldr	r3, [pc, #108]	; (800370c <BSP_SD_WriteBlocks+0x114>)
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d12d      	bne.n	8003700 <BSP_SD_WriteBlocks+0x108>
 80036a4:	3401      	adds	r4, #1
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80036a6:	20ff      	movs	r0, #255	; 0xff
 80036a8:	f000 fb0b 	bl	8003cc2 <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80036ac:	20ff      	movs	r0, #255	; 0xff
 80036ae:	f000 fb08 	bl	8003cc2 <SD_IO_WriteByte>
  dataresponse = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80036b2:	20ff      	movs	r0, #255	; 0xff
 80036b4:	f000 fb05 	bl	8003cc2 <SD_IO_WriteByte>
 80036b8:	0007      	movs	r7, r0
  SD_IO_WriteByte(SD_DUMMY_BYTE); /* read the busy response byte*/
 80036ba:	20ff      	movs	r0, #255	; 0xff
 80036bc:	f000 fb01 	bl	8003cc2 <SD_IO_WriteByte>
  switch (dataresponse & 0x1F)
 80036c0:	231f      	movs	r3, #31
 80036c2:	401f      	ands	r7, r3
 80036c4:	2f05      	cmp	r7, #5
 80036c6:	d11f      	bne.n	8003708 <BSP_SD_WriteBlocks+0x110>
    SD_IO_CSState(1);
 80036c8:	2001      	movs	r0, #1
 80036ca:	f000 fae9 	bl	8003ca0 <SD_IO_CSState>
    SD_IO_CSState(0);
 80036ce:	2000      	movs	r0, #0
 80036d0:	f000 fae6 	bl	8003ca0 <SD_IO_CSState>
    while (SD_IO_WriteByte(SD_DUMMY_BYTE) != 0xFF);
 80036d4:	20ff      	movs	r0, #255	; 0xff
 80036d6:	f000 faf4 	bl	8003cc2 <SD_IO_WriteByte>
 80036da:	0007      	movs	r7, r0
 80036dc:	28ff      	cmp	r0, #255	; 0xff
 80036de:	d1f9      	bne.n	80036d4 <BSP_SD_WriteBlocks+0xdc>
    SD_IO_CSState(1);
 80036e0:	2001      	movs	r0, #1
 80036e2:	f000 fadd 	bl	8003ca0 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80036e6:	0038      	movs	r0, r7
 80036e8:	f000 faeb 	bl	8003cc2 <SD_IO_WriteByte>
 80036ec:	2280      	movs	r2, #128	; 0x80
 80036ee:	0092      	lsls	r2, r2, #2
 80036f0:	4694      	mov	ip, r2
 80036f2:	9b03      	ldr	r3, [sp, #12]
 80036f4:	3b01      	subs	r3, #1
 80036f6:	9303      	str	r3, [sp, #12]
 80036f8:	9b02      	ldr	r3, [sp, #8]
 80036fa:	4463      	add	r3, ip
 80036fc:	9302      	str	r3, [sp, #8]
 80036fe:	e7ab      	b.n	8003658 <BSP_SD_WriteBlocks+0x60>
    addr = ((flag_SDHC == 1) ? (addr + 1) : (addr + BlockSize));
 8003700:	2380      	movs	r3, #128	; 0x80
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	18e4      	adds	r4, r4, r3
 8003706:	e7ce      	b.n	80036a6 <BSP_SD_WriteBlocks+0xae>
  uint8_t retr = BSP_SD_ERROR;
 8003708:	2501      	movs	r5, #1
 800370a:	e7a8      	b.n	800365e <BSP_SD_WriteBlocks+0x66>
 800370c:	2000147a 	.word	0x2000147a

08003710 <BSP_SD_GetCardState>:
{
 8003710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  retr = SD_SendCmd(SD_CMD_SEND_STATUS, 0, 0xFF, SD_ANSWER_R2_EXPECTED);
 8003712:	2302      	movs	r3, #2
 8003714:	ac02      	add	r4, sp, #8
 8003716:	2200      	movs	r2, #0
 8003718:	210d      	movs	r1, #13
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	0020      	movs	r0, r4
 800371e:	33fd      	adds	r3, #253	; 0xfd
 8003720:	f7ff fbee 	bl	8002f00 <SD_SendCmd>
  SD_IO_CSState(1);
 8003724:	2001      	movs	r0, #1
 8003726:	f000 fabb 	bl	8003ca0 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 800372a:	20ff      	movs	r0, #255	; 0xff
 800372c:	f000 fac9 	bl	8003cc2 <SD_IO_WriteByte>
  if(( retr.r1 == SD_R1_NO_ERROR) && ( retr.r2 == SD_R2_NO_ERROR))
 8003730:	7823      	ldrb	r3, [r4, #0]
 8003732:	2001      	movs	r0, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d103      	bne.n	8003740 <BSP_SD_GetCardState+0x30>
 8003738:	7860      	ldrb	r0, [r4, #1]
 800373a:	1e43      	subs	r3, r0, #1
 800373c:	4198      	sbcs	r0, r3
 800373e:	b2c0      	uxtb	r0, r0
}
 8003740:	b004      	add	sp, #16
 8003742:	bd10      	pop	{r4, pc}

08003744 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003744:	2001      	movs	r0, #1
 8003746:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <HAL_MspInit+0x2c>)
{
 8003748:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800374a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800374c:	4301      	orrs	r1, r0
 800374e:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8003750:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8003754:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003756:	4002      	ands	r2, r0
 8003758:	9200      	str	r2, [sp, #0]
 800375a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800375c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800375e:	430a      	orrs	r2, r1
 8003760:	63da      	str	r2, [r3, #60]	; 0x3c
 8003762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003764:	400b      	ands	r3, r1
 8003766:	9301      	str	r3, [sp, #4]
 8003768:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800376a:	b002      	add	sp, #8
 800376c:	4770      	bx	lr
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	40021000 	.word	0x40021000

08003774 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003774:	b510      	push	{r4, lr}
 8003776:	0004      	movs	r4, r0
 8003778:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800377a:	2214      	movs	r2, #20
 800377c:	2100      	movs	r1, #0
 800377e:	a803      	add	r0, sp, #12
 8003780:	f00a fd0d 	bl	800e19e <memset>
  if(hadc->Instance==ADC1)
 8003784:	4b0f      	ldr	r3, [pc, #60]	; (80037c4 <HAL_ADC_MspInit+0x50>)
 8003786:	6822      	ldr	r2, [r4, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d119      	bne.n	80037c0 <HAL_ADC_MspInit+0x4c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800378c:	2080      	movs	r0, #128	; 0x80
 800378e:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <HAL_ADC_MspInit+0x54>)
 8003790:	0340      	lsls	r0, r0, #13
 8003792:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003794:	4301      	orrs	r1, r0
 8003796:	6419      	str	r1, [r3, #64]	; 0x40
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003798:	2101      	movs	r1, #1
    __HAL_RCC_ADC_CLK_ENABLE();
 800379a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800379c:	4002      	ands	r2, r0
 800379e:	9201      	str	r2, [sp, #4]
 80037a0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a4:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a6:	430a      	orrs	r2, r1
 80037a8:	635a      	str	r2, [r3, #52]	; 0x34
 80037aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ac:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ae:	400b      	ands	r3, r1
 80037b0:	9302      	str	r3, [sp, #8]
 80037b2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80037b4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80037b8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037ba:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037bc:	f000 fdc4 	bl	8004348 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80037c0:	b008      	add	sp, #32
 80037c2:	bd10      	pop	{r4, pc}
 80037c4:	40012400 	.word	0x40012400
 80037c8:	40021000 	.word	0x40021000

080037cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037cc:	b510      	push	{r4, lr}
 80037ce:	0004      	movs	r4, r0
 80037d0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d2:	2214      	movs	r2, #20
 80037d4:	2100      	movs	r1, #0
 80037d6:	a803      	add	r0, sp, #12
 80037d8:	f00a fce1 	bl	800e19e <memset>
  if(hi2c->Instance==I2C1)
 80037dc:	4b12      	ldr	r3, [pc, #72]	; (8003828 <HAL_I2C_MspInit+0x5c>)
 80037de:	6822      	ldr	r2, [r4, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d11e      	bne.n	8003822 <HAL_I2C_MspInit+0x56>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037e4:	2102      	movs	r1, #2
 80037e6:	4c11      	ldr	r4, [pc, #68]	; (800382c <HAL_I2C_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037e8:	4811      	ldr	r0, [pc, #68]	; (8003830 <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ea:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80037ec:	430a      	orrs	r2, r1
 80037ee:	6362      	str	r2, [r4, #52]	; 0x34
 80037f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037f2:	400b      	ands	r3, r1
 80037f4:	9301      	str	r3, [sp, #4]
 80037f6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80037f8:	2390      	movs	r3, #144	; 0x90
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037fe:	2312      	movs	r3, #18
 8003800:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003802:	3b11      	subs	r3, #17
 8003804:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003806:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003808:	3305      	adds	r3, #5
 800380a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800380c:	f000 fd9c 	bl	8004348 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003810:	2180      	movs	r1, #128	; 0x80
 8003812:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003814:	0389      	lsls	r1, r1, #14
 8003816:	430a      	orrs	r2, r1
 8003818:	63e2      	str	r2, [r4, #60]	; 0x3c
 800381a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800381c:	400b      	ands	r3, r1
 800381e:	9302      	str	r3, [sp, #8]
 8003820:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003822:	b008      	add	sp, #32
 8003824:	bd10      	pop	{r4, pc}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	40005400 	.word	0x40005400
 800382c:	40021000 	.word	0x40021000
 8003830:	50000400 	.word	0x50000400

08003834 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8003834:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <HAL_RTC_MspInit+0x2c>)
 8003836:	6802      	ldr	r2, [r0, #0]
{
 8003838:	b082      	sub	sp, #8
  if(hrtc->Instance==RTC)
 800383a:	429a      	cmp	r2, r3
 800383c:	d10e      	bne.n	800385c <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800383e:	2280      	movs	r2, #128	; 0x80
 8003840:	4b08      	ldr	r3, [pc, #32]	; (8003864 <HAL_RTC_MspInit+0x30>)
 8003842:	0212      	lsls	r2, r2, #8
 8003844:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003846:	430a      	orrs	r2, r1
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003848:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_RTC_ENABLE();
 800384a:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800384c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800384e:	00c9      	lsls	r1, r1, #3
 8003850:	430a      	orrs	r2, r1
 8003852:	63da      	str	r2, [r3, #60]	; 0x3c
 8003854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003856:	400b      	ands	r3, r1
 8003858:	9301      	str	r3, [sp, #4]
 800385a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800385c:	b002      	add	sp, #8
 800385e:	4770      	bx	lr
 8003860:	40002800 	.word	0x40002800
 8003864:	40021000 	.word	0x40021000

08003868 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003868:	b510      	push	{r4, lr}
 800386a:	0004      	movs	r4, r0
 800386c:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800386e:	2214      	movs	r2, #20
 8003870:	2100      	movs	r1, #0
 8003872:	a805      	add	r0, sp, #20
 8003874:	f00a fc93 	bl	800e19e <memset>
  if(hspi->Instance==SPI1)
 8003878:	6823      	ldr	r3, [r4, #0]
 800387a:	4a29      	ldr	r2, [pc, #164]	; (8003920 <HAL_SPI_MspInit+0xb8>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d132      	bne.n	80038e6 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003880:	2080      	movs	r0, #128	; 0x80
 8003882:	4b28      	ldr	r3, [pc, #160]	; (8003924 <HAL_SPI_MspInit+0xbc>)
 8003884:	0140      	lsls	r0, r0, #5
 8003886:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PD8     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003888:	2402      	movs	r4, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 800388a:	4301      	orrs	r1, r0
 800388c:	6419      	str	r1, [r3, #64]	; 0x40
 800388e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003890:	4002      	ands	r2, r0
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003892:	2008      	movs	r0, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003894:	9200      	str	r2, [sp, #0]
 8003896:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003898:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800389a:	4301      	orrs	r1, r0
 800389c:	6359      	str	r1, [r3, #52]	; 0x34
 800389e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038a0:	4002      	ands	r2, r0
 80038a2:	9201      	str	r2, [sp, #4]
 80038a4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a6:	2201      	movs	r2, #1
 80038a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038aa:	481f      	ldr	r0, [pc, #124]	; (8003928 <HAL_SPI_MspInit+0xc0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ac:	4311      	orrs	r1, r2
 80038ae:	6359      	str	r1, [r3, #52]	; 0x34
 80038b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038b2:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038b4:	4013      	ands	r3, r2
 80038b6:	9302      	str	r3, [sp, #8]
 80038b8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80038ba:	2380      	movs	r3, #128	; 0x80
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c0:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 80038c2:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038c4:	f000 fd40 	bl	8004348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80038c8:	23c0      	movs	r3, #192	; 0xc0
 80038ca:	015b      	lsls	r3, r3, #5
 80038cc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ce:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d0:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d2:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80038d8:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038da:	a905      	add	r1, sp, #20
 80038dc:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038de:	f000 fd33 	bl	8004348 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80038e2:	b00a      	add	sp, #40	; 0x28
 80038e4:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 80038e6:	4a11      	ldr	r2, [pc, #68]	; (800392c <HAL_SPI_MspInit+0xc4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d1fa      	bne.n	80038e2 <HAL_SPI_MspInit+0x7a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80038ec:	2080      	movs	r0, #128	; 0x80
 80038ee:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <HAL_SPI_MspInit+0xbc>)
 80038f0:	01c0      	lsls	r0, r0, #7
 80038f2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80038f4:	4301      	orrs	r1, r0
 80038f6:	63d9      	str	r1, [r3, #60]	; 0x3c
 80038f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038fa:	4002      	ands	r2, r0
 80038fc:	9203      	str	r2, [sp, #12]
 80038fe:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003900:	2202      	movs	r2, #2
 8003902:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003904:	480a      	ldr	r0, [pc, #40]	; (8003930 <HAL_SPI_MspInit+0xc8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003906:	4311      	orrs	r1, r2
 8003908:	6359      	str	r1, [r3, #52]	; 0x34
 800390a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800390c:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800390e:	4013      	ands	r3, r2
 8003910:	9304      	str	r3, [sp, #16]
 8003912:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003914:	23e0      	movs	r3, #224	; 0xe0
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800391a:	9206      	str	r2, [sp, #24]
 800391c:	e7df      	b.n	80038de <HAL_SPI_MspInit+0x76>
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	40013000 	.word	0x40013000
 8003924:	40021000 	.word	0x40021000
 8003928:	50000c00 	.word	0x50000c00
 800392c:	40003800 	.word	0x40003800
 8003930:	50000400 	.word	0x50000400

08003934 <HAL_SPI_MspDeInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
  if(hspi->Instance==SPI1)
 8003934:	6803      	ldr	r3, [r0, #0]
 8003936:	4a10      	ldr	r2, [pc, #64]	; (8003978 <HAL_SPI_MspDeInit+0x44>)
{
 8003938:	b510      	push	{r4, lr}
  if(hspi->Instance==SPI1)
 800393a:	4293      	cmp	r3, r2
 800393c:	d110      	bne.n	8003960 <HAL_SPI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800393e:	4a0f      	ldr	r2, [pc, #60]	; (800397c <HAL_SPI_MspDeInit+0x48>)
 8003940:	490f      	ldr	r1, [pc, #60]	; (8003980 <HAL_SPI_MspDeInit+0x4c>)
 8003942:	6c13      	ldr	r3, [r2, #64]	; 0x40
    /**SPI1 GPIO Configuration    
    PD8     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI 
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8);
 8003944:	480f      	ldr	r0, [pc, #60]	; (8003984 <HAL_SPI_MspDeInit+0x50>)
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003946:	400b      	ands	r3, r1
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8);
 8003948:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_DISABLE();
 800394a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8);
 800394c:	0049      	lsls	r1, r1, #1
 800394e:	f000 fda3 	bl	8004498 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8003952:	21c0      	movs	r1, #192	; 0xc0
 8003954:	20a0      	movs	r0, #160	; 0xa0
 8003956:	0149      	lsls	r1, r1, #5
 8003958:	05c0      	lsls	r0, r0, #23
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 800395a:	f000 fd9d 	bl	8004498 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 800395e:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8003960:	4a09      	ldr	r2, [pc, #36]	; (8003988 <HAL_SPI_MspDeInit+0x54>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d1fb      	bne.n	800395e <HAL_SPI_MspDeInit+0x2a>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8003966:	4a05      	ldr	r2, [pc, #20]	; (800397c <HAL_SPI_MspDeInit+0x48>)
 8003968:	4908      	ldr	r1, [pc, #32]	; (800398c <HAL_SPI_MspDeInit+0x58>)
 800396a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 800396c:	4808      	ldr	r0, [pc, #32]	; (8003990 <HAL_SPI_MspDeInit+0x5c>)
    __HAL_RCC_SPI2_CLK_DISABLE();
 800396e:	400b      	ands	r3, r1
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8003970:	21e0      	movs	r1, #224	; 0xe0
    __HAL_RCC_SPI2_CLK_DISABLE();
 8003972:	63d3      	str	r3, [r2, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8003974:	0209      	lsls	r1, r1, #8
 8003976:	e7f0      	b.n	800395a <HAL_SPI_MspDeInit+0x26>
 8003978:	40013000 	.word	0x40013000
 800397c:	40021000 	.word	0x40021000
 8003980:	ffffefff 	.word	0xffffefff
 8003984:	50000c00 	.word	0x50000c00
 8003988:	40003800 	.word	0x40003800
 800398c:	ffffbfff 	.word	0xffffbfff
 8003990:	50000400 	.word	0x50000400

08003994 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003994:	b510      	push	{r4, lr}
 8003996:	0004      	movs	r4, r0
 8003998:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800399a:	2214      	movs	r2, #20
 800399c:	2100      	movs	r1, #0
 800399e:	a803      	add	r0, sp, #12
 80039a0:	f00a fbfd 	bl	800e19e <memset>
  if(htim_base->Instance==TIM3)
 80039a4:	6823      	ldr	r3, [r4, #0]
 80039a6:	4a18      	ldr	r2, [pc, #96]	; (8003a08 <HAL_TIM_Base_MspInit+0x74>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d10a      	bne.n	80039c2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039ac:	2002      	movs	r0, #2
 80039ae:	4a17      	ldr	r2, [pc, #92]	; (8003a0c <HAL_TIM_Base_MspInit+0x78>)
 80039b0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80039b2:	4301      	orrs	r1, r0
 80039b4:	63d1      	str	r1, [r2, #60]	; 0x3c
 80039b6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80039b8:	4003      	ands	r3, r0
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80039be:	b008      	add	sp, #32
 80039c0:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM14)
 80039c2:	4a13      	ldr	r2, [pc, #76]	; (8003a10 <HAL_TIM_Base_MspInit+0x7c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d1fa      	bne.n	80039be <HAL_TIM_Base_MspInit+0x2a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80039c8:	2080      	movs	r0, #128	; 0x80
 80039ca:	4b10      	ldr	r3, [pc, #64]	; (8003a0c <HAL_TIM_Base_MspInit+0x78>)
 80039cc:	0200      	lsls	r0, r0, #8
 80039ce:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80039d0:	4301      	orrs	r1, r0
 80039d2:	6419      	str	r1, [r3, #64]	; 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039d4:	2104      	movs	r1, #4
    __HAL_RCC_TIM14_CLK_ENABLE();
 80039d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039d8:	4002      	ands	r2, r0
 80039da:	9201      	str	r2, [sp, #4]
 80039dc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039e0:	480c      	ldr	r0, [pc, #48]	; (8003a14 <HAL_TIM_Base_MspInit+0x80>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039e2:	430a      	orrs	r2, r1
 80039e4:	635a      	str	r2, [r3, #52]	; 0x34
 80039e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039e8:	2201      	movs	r2, #1
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039ea:	400b      	ands	r3, r1
 80039ec:	9302      	str	r3, [sp, #8]
 80039ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80039f0:	2380      	movs	r3, #128	; 0x80
 80039f2:	015b      	lsls	r3, r3, #5
 80039f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f6:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039f8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039fc:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM14;
 80039fe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a00:	f000 fca2 	bl	8004348 <HAL_GPIO_Init>
}
 8003a04:	e7db      	b.n	80039be <HAL_TIM_Base_MspInit+0x2a>
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	40000400 	.word	0x40000400
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	40002000 	.word	0x40002000
 8003a14:	50000800 	.word	0x50000800

08003a18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a18:	b510      	push	{r4, lr}
 8003a1a:	0004      	movs	r4, r0
 8003a1c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a1e:	2214      	movs	r2, #20
 8003a20:	2100      	movs	r1, #0
 8003a22:	a801      	add	r0, sp, #4
 8003a24:	f00a fbbb 	bl	800e19e <memset>
  if(htim->Instance==TIM3)
 8003a28:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <HAL_TIM_MspPostInit+0x44>)
 8003a2a:	6822      	ldr	r2, [r4, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d112      	bne.n	8003a56 <HAL_TIM_MspPostInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a30:	2301      	movs	r3, #1
 8003a32:	4a0b      	ldr	r2, [pc, #44]	; (8003a60 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = PWM_1_Pin|PWM_LCD_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a34:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a36:	6b51      	ldr	r1, [r2, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a38:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a3a:	4319      	orrs	r1, r3
 8003a3c:	6351      	str	r1, [r2, #52]	; 0x34
 8003a3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a40:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a42:	401a      	ands	r2, r3
 8003a44:	9200      	str	r2, [sp, #0]
 8003a46:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = PWM_1_Pin|PWM_LCD_Pin;
 8003a48:	22c0      	movs	r2, #192	; 0xc0
 8003a4a:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4c:	3abe      	subs	r2, #190	; 0xbe
 8003a4e:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003a50:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a52:	f000 fc79 	bl	8004348 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003a56:	b006      	add	sp, #24
 8003a58:	bd10      	pop	{r4, pc}
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	40000400 	.word	0x40000400
 8003a60:	40021000 	.word	0x40021000

08003a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a64:	b510      	push	{r4, lr}
 8003a66:	0004      	movs	r4, r0
 8003a68:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a6a:	2214      	movs	r2, #20
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	a805      	add	r0, sp, #20
 8003a70:	f00a fb95 	bl	800e19e <memset>
  if(huart->Instance==USART2)
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	4a1f      	ldr	r2, [pc, #124]	; (8003af4 <HAL_UART_MspInit+0x90>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d11d      	bne.n	8003ab8 <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a7c:	2080      	movs	r0, #128	; 0x80
 8003a7e:	4b1e      	ldr	r3, [pc, #120]	; (8003af8 <HAL_UART_MspInit+0x94>)
 8003a80:	0280      	lsls	r0, r0, #10
 8003a82:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003a84:	4301      	orrs	r1, r0
 8003a86:	63d9      	str	r1, [r3, #60]	; 0x3c
 8003a88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a8a:	4002      	ands	r2, r0
 8003a8c:	9201      	str	r2, [sp, #4]
 8003a8e:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a90:	2201      	movs	r2, #1
 8003a92:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a94:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a96:	4311      	orrs	r1, r2
 8003a98:	6359      	str	r1, [r3, #52]	; 0x34
 8003a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a9c:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	9302      	str	r3, [sp, #8]
 8003aa2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003aa4:	230c      	movs	r3, #12
 8003aa6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa8:	3b0a      	subs	r3, #10
 8003aaa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003aac:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aae:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ab0:	f000 fc4a 	bl	8004348 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003ab4:	b00a      	add	sp, #40	; 0x28
 8003ab6:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 8003ab8:	4a10      	ldr	r2, [pc, #64]	; (8003afc <HAL_UART_MspInit+0x98>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d1fa      	bne.n	8003ab4 <HAL_UART_MspInit+0x50>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003abe:	2080      	movs	r0, #128	; 0x80
 8003ac0:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <HAL_UART_MspInit+0x94>)
 8003ac2:	02c0      	lsls	r0, r0, #11
 8003ac4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003ac6:	4301      	orrs	r1, r0
 8003ac8:	63d9      	str	r1, [r3, #60]	; 0x3c
 8003aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003acc:	4002      	ands	r2, r0
 8003ace:	9203      	str	r2, [sp, #12]
 8003ad0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ad6:	480a      	ldr	r0, [pc, #40]	; (8003b00 <HAL_UART_MspInit+0x9c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ad8:	4311      	orrs	r1, r2
 8003ada:	6359      	str	r1, [r3, #52]	; 0x34
 8003adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ade:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	9304      	str	r3, [sp, #16]
 8003ae4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003ae6:	23c0      	movs	r3, #192	; 0xc0
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003aec:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aee:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003af0:	9309      	str	r3, [sp, #36]	; 0x24
 8003af2:	e7dd      	b.n	8003ab0 <HAL_UART_MspInit+0x4c>
 8003af4:	40004400 	.word	0x40004400
 8003af8:	40021000 	.word	0x40021000
 8003afc:	40004800 	.word	0x40004800
 8003b00:	50000400 	.word	0x50000400

08003b04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b04:	b510      	push	{r4, lr}
 8003b06:	0001      	movs	r1, r0
 8003b08:	b086      	sub	sp, #24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0); 
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2011      	movs	r0, #17
 8003b0e:	f000 fbdf 	bl	80042d0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn); 
 8003b12:	2011      	movs	r0, #17
 8003b14:	f000 fc0c 	bl	8004330 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003b18:	2010      	movs	r0, #16
 8003b1a:	4a14      	ldr	r2, [pc, #80]	; (8003b6c <HAL_InitTick+0x68>)
 8003b1c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003b1e:	4301      	orrs	r1, r0
 8003b20:	63d1      	str	r1, [r2, #60]	; 0x3c
 8003b22:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b24:	4669      	mov	r1, sp
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003b26:	4003      	ands	r3, r0
 8003b28:	9301      	str	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b2a:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003b2c:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b2e:	f001 f92f 	bl	8004d90 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003b32:	f001 f919 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003b36:	4c0e      	ldr	r4, [pc, #56]	; (8003b70 <HAL_InitTick+0x6c>)
 8003b38:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <HAL_InitTick+0x70>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003b3a:	490f      	ldr	r1, [pc, #60]	; (8003b78 <HAL_InitTick+0x74>)
  htim6.Instance = TIM6;
 8003b3c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8003b3e:	4b0f      	ldr	r3, [pc, #60]	; (8003b7c <HAL_InitTick+0x78>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003b40:	0040      	lsls	r0, r0, #1
  htim6.Init.Period = (1000000 / 1000) - 1;
 8003b42:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003b44:	f7fc fb0c 	bl	8000160 <__udivsi3>
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 8003b48:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003b4a:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8003b4c:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003b4e:	0020      	movs	r0, r4
  htim6.Init.ClockDivision = 0;
 8003b50:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b52:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003b54:	f002 f806 	bl	8005b64 <HAL_TIM_Base_Init>
 8003b58:	0003      	movs	r3, r0
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003b5a:	2001      	movs	r0, #1
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d102      	bne.n	8003b66 <HAL_InitTick+0x62>
    return HAL_TIM_Base_Start_IT(&htim6);
 8003b60:	0020      	movs	r0, r4
 8003b62:	f001 fee9 	bl	8005938 <HAL_TIM_Base_Start_IT>
}
 8003b66:	b006      	add	sp, #24
 8003b68:	bd10      	pop	{r4, pc}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	20004c58 	.word	0x20004c58
 8003b74:	40001000 	.word	0x40001000
 8003b78:	000f4240 	.word	0x000f4240
 8003b7c:	000003e7 	.word	0x000003e7

08003b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b80:	b510      	push	{r4, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003b82:	f001 f933 	bl	8004dec <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b86:	bd10      	pop	{r4, pc}

08003b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b88:	e7fe      	b.n	8003b88 <HardFault_Handler>

08003b8a <SVC_Handler>:
 8003b8a:	4770      	bx	lr

08003b8c <PendSV_Handler>:
 8003b8c:	4770      	bx	lr

08003b8e <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b8e:	4770      	bx	lr

08003b90 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003b90:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b92:	4802      	ldr	r0, [pc, #8]	; (8003b9c <TIM6_IRQHandler+0xc>)
 8003b94:	f001 feea 	bl	800596c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003b98:	bd10      	pop	{r4, pc}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	20004c58 	.word	0x20004c58

08003ba0 <SPIx_Init>:
/**
  * @brief  Initialize SPI HAL.
  * @retval None
  */
static void SPIx_Init(void)
{
 8003ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(HAL_SPI_GetState(&hnucleo_Spi) == HAL_SPI_STATE_RESET)
 8003ba2:	4c2f      	ldr	r4, [pc, #188]	; (8003c60 <SPIx_Init+0xc0>)
{
 8003ba4:	b089      	sub	sp, #36	; 0x24
  if(HAL_SPI_GetState(&hnucleo_Spi) == HAL_SPI_STATE_RESET)
 8003ba6:	0020      	movs	r0, r4
 8003ba8:	f001 fd8c 	bl	80056c4 <HAL_SPI_GetState>
 8003bac:	1e06      	subs	r6, r0, #0
 8003bae:	d155      	bne.n	8003c5c <SPIx_Init+0xbc>
  {
    /* SPI Config */
    hnucleo_Spi.Instance = NUCLEO_SPIx;
 8003bb0:	4b2c      	ldr	r3, [pc, #176]	; (8003c64 <SPIx_Init+0xc4>)
          - SD card SPI interface max baudrate is 25MHz for write/read
          - PCLK1 max frequency is 48 MHz 
       */ 
    hnucleo_Spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
    hnucleo_Spi.Init.Direction = SPI_DIRECTION_2LINES;
    hnucleo_Spi.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003bb2:	2701      	movs	r7, #1
    hnucleo_Spi.Instance = NUCLEO_SPIx;
 8003bb4:	6023      	str	r3, [r4, #0]
    hnucleo_Spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003bb6:	2308      	movs	r3, #8
 8003bb8:	61e3      	str	r3, [r4, #28]
    hnucleo_Spi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003bba:	3b06      	subs	r3, #6
 8003bbc:	6123      	str	r3, [r4, #16]
    hnucleo_Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    hnucleo_Spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    hnucleo_Spi.Init.CRCPolynomial = 7;
 8003bbe:	3305      	adds	r3, #5
 8003bc0:	62e3      	str	r3, [r4, #44]	; 0x2c
    hnucleo_Spi.Init.DataSize = SPI_DATASIZE_8BIT;
 8003bc2:	23e0      	movs	r3, #224	; 0xe0
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	60e3      	str	r3, [r4, #12]
    hnucleo_Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
    hnucleo_Spi.Init.NSS = SPI_NSS_SOFT;
 8003bc8:	2380      	movs	r3, #128	; 0x80
 8003bca:	009b      	lsls	r3, r3, #2
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8003bcc:	0001      	movs	r1, r0
    hnucleo_Spi.Init.Direction = SPI_DIRECTION_2LINES;
 8003bce:	60a0      	str	r0, [r4, #8]
    hnucleo_Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bd0:	62a0      	str	r0, [r4, #40]	; 0x28
    hnucleo_Spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003bd2:	6320      	str	r0, [r4, #48]	; 0x30
    hnucleo_Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bd4:	6220      	str	r0, [r4, #32]
    hnucleo_Spi.Init.NSS = SPI_NSS_SOFT;
 8003bd6:	61a3      	str	r3, [r4, #24]
    hnucleo_Spi.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bd8:	6260      	str	r0, [r4, #36]	; 0x24
    hnucleo_Spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    hnucleo_Spi.Init.Mode = SPI_MODE_MASTER;
 8003bda:	3bfc      	subs	r3, #252	; 0xfc
    hnucleo_Spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003bdc:	6360      	str	r0, [r4, #52]	; 0x34
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8003bde:	2214      	movs	r2, #20
 8003be0:	a803      	add	r0, sp, #12
    hnucleo_Spi.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003be2:	6167      	str	r7, [r4, #20]
    hnucleo_Spi.Init.Mode = SPI_MODE_MASTER;
 8003be4:	6063      	str	r3, [r4, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8003be6:	f00a fada 	bl	800e19e <memset>
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 8003bea:	2208      	movs	r2, #8
 8003bec:	4d1e      	ldr	r5, [pc, #120]	; (8003c68 <SPIx_Init+0xc8>)
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &gpioinitstruct);
 8003bee:	a903      	add	r1, sp, #12
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 8003bf0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &gpioinitstruct);
 8003bf2:	481e      	ldr	r0, [pc, #120]	; (8003c6c <SPIx_Init+0xcc>)
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	636b      	str	r3, [r5, #52]	; 0x34
 8003bf8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	9b00      	ldr	r3, [sp, #0]
  NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 8003c00:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003c02:	433b      	orrs	r3, r7
 8003c04:	636b      	str	r3, [r5, #52]	; 0x34
 8003c06:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  gpioinitstruct.Pull  = GPIO_PULLUP;
 8003c08:	9705      	str	r7, [sp, #20]
  NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 8003c0a:	403b      	ands	r3, r7
 8003c0c:	9301      	str	r3, [sp, #4]
 8003c0e:	9b01      	ldr	r3, [sp, #4]
  gpioinitstruct.Pin = NUCLEO_SPIx_SCK_PIN;
 8003c10:	2380      	movs	r3, #128	; 0x80
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	9303      	str	r3, [sp, #12]
  gpioinitstruct.Mode = GPIO_MODE_AF_PP;
 8003c16:	3bfe      	subs	r3, #254	; 0xfe
 8003c18:	9304      	str	r3, [sp, #16]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c1a:	19db      	adds	r3, r3, r7
 8003c1c:	9306      	str	r3, [sp, #24]
  gpioinitstruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 8003c1e:	2780      	movs	r7, #128	; 0x80
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &gpioinitstruct);
 8003c20:	f000 fb92 	bl	8004348 <HAL_GPIO_Init>
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8003c24:	20a0      	movs	r0, #160	; 0xa0
  gpioinitstruct.Pull  = GPIO_PULLDOWN;
 8003c26:	2302      	movs	r3, #2
  gpioinitstruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 8003c28:	017f      	lsls	r7, r7, #5
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8003c2a:	a903      	add	r1, sp, #12
 8003c2c:	05c0      	lsls	r0, r0, #23
  gpioinitstruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 8003c2e:	9703      	str	r7, [sp, #12]
  gpioinitstruct.Pull  = GPIO_PULLDOWN;
 8003c30:	9305      	str	r3, [sp, #20]
  gpioinitstruct.Alternate = NUCLEO_SPIx_MISO_MOSI_AF;
 8003c32:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8003c34:	f000 fb88 	bl	8004348 <HAL_GPIO_Init>
  gpioinitstruct.Pin = NUCLEO_SPIx_MISO_PIN;
 8003c38:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8003c3a:	20a0      	movs	r0, #160	; 0xa0
  gpioinitstruct.Pin = NUCLEO_SPIx_MISO_PIN;
 8003c3c:	011b      	lsls	r3, r3, #4
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8003c3e:	05c0      	lsls	r0, r0, #23
 8003c40:	a903      	add	r1, sp, #12
  gpioinitstruct.Pin = NUCLEO_SPIx_MISO_PIN;
 8003c42:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &gpioinitstruct);
 8003c44:	f000 fb80 	bl	8004348 <HAL_GPIO_Init>
  NUCLEO_SPIx_CLK_ENABLE();
 8003c48:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    
    SPIx_MspInit();
    HAL_SPI_Init(&hnucleo_Spi);
 8003c4a:	0020      	movs	r0, r4
  NUCLEO_SPIx_CLK_ENABLE();
 8003c4c:	433b      	orrs	r3, r7
 8003c4e:	642b      	str	r3, [r5, #64]	; 0x40
 8003c50:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003c52:	401f      	ands	r7, r3
 8003c54:	9702      	str	r7, [sp, #8]
 8003c56:	9b02      	ldr	r3, [sp, #8]
    HAL_SPI_Init(&hnucleo_Spi);
 8003c58:	f001 fabe 	bl	80051d8 <HAL_SPI_Init>
  }
}
 8003c5c:	b009      	add	sp, #36	; 0x24
 8003c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c60:	2000147c 	.word	0x2000147c
 8003c64:	40013000 	.word	0x40013000
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	50000c00 	.word	0x50000c00

08003c70 <SPIx_WriteReadData>:
  * @param  DataOut: read value
  * @param  DataLength: value data length
  * @retval None
  */
static void SPIx_WriteReadData(const uint8_t *DataIn, uint8_t *DataOut, uint16_t DataLength)
{
 8003c70:	b513      	push	{r0, r1, r4, lr}
 8003c72:	0013      	movs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_SPI_TransmitReceive(&hnucleo_Spi, (uint8_t*) DataIn, DataOut, DataLength, SpixTimeout);
 8003c74:	4a08      	ldr	r2, [pc, #32]	; (8003c98 <SPIx_WriteReadData+0x28>)
 8003c76:	4c09      	ldr	r4, [pc, #36]	; (8003c9c <SPIx_WriteReadData+0x2c>)
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	9200      	str	r2, [sp, #0]
 8003c7c:	000a      	movs	r2, r1
 8003c7e:	0001      	movs	r1, r0
 8003c80:	0020      	movs	r0, r4
 8003c82:	f001 fbed 	bl	8005460 <HAL_SPI_TransmitReceive>

  /* Check the communication status */
  if(status != HAL_OK)
 8003c86:	2800      	cmp	r0, #0
 8003c88:	d004      	beq.n	8003c94 <SPIx_WriteReadData+0x24>
  * @retval None
  */
static void SPIx_Error (void)
{
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&hnucleo_Spi);
 8003c8a:	0020      	movs	r0, r4
 8003c8c:	f001 fb02 	bl	8005294 <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI communication BUS */
  SPIx_Init();
 8003c90:	f7ff ff86 	bl	8003ba0 <SPIx_Init>
}
 8003c94:	bd13      	pop	{r0, r1, r4, pc}
 8003c96:	46c0      	nop			; (mov r8, r8)
 8003c98:	20000000 	.word	0x20000000
 8003c9c:	2000147c 	.word	0x2000147c

08003ca0 <SD_IO_CSState>:
  * @brief  Set the SD_CS pin.
  * @param  val: pin value.
  * @retval None
  */
void SD_IO_CSState(uint8_t val)
{
 8003ca0:	b510      	push	{r4, lr}
 8003ca2:	0002      	movs	r2, r0
  if(val == 1) 
 8003ca4:	2801      	cmp	r0, #1
 8003ca6:	d106      	bne.n	8003cb6 <SD_IO_CSState+0x16>
  {
    SD_CS_HIGH();
  }
  else
  {
    SD_CS_LOW();
 8003ca8:	2180      	movs	r1, #128	; 0x80
 8003caa:	20a0      	movs	r0, #160	; 0xa0
 8003cac:	00c9      	lsls	r1, r1, #3
 8003cae:	05c0      	lsls	r0, r0, #23
 8003cb0:	f000 fc6e 	bl	8004590 <HAL_GPIO_WritePin>
  }
}
 8003cb4:	bd10      	pop	{r4, pc}
    SD_CS_LOW();
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	e7f6      	b.n	8003ca8 <SD_IO_CSState+0x8>

08003cba <SD_IO_WriteReadData>:
  * @param  DataOut: Pointer to data buffer for read data
  * @param  DataLength: number of bytes to write
  * @retval None
  */
void SD_IO_WriteReadData(const uint8_t *DataIn, uint8_t *DataOut, uint16_t DataLength)
{
 8003cba:	b510      	push	{r4, lr}
  /* Send the byte */
  SPIx_WriteReadData(DataIn, DataOut, DataLength);
 8003cbc:	f7ff ffd8 	bl	8003c70 <SPIx_WriteReadData>
}
 8003cc0:	bd10      	pop	{r4, pc}

08003cc2 <SD_IO_WriteByte>:
  * @brief  Write a byte on the SD.
  * @param  Data: byte to send.
  * @retval Data written
  */
uint8_t SD_IO_WriteByte(uint8_t Data)
{
 8003cc2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t tmp;

  /* Send the byte */
  SPIx_WriteReadData(&Data,&tmp,1);
 8003cc4:	240f      	movs	r4, #15
{
 8003cc6:	466b      	mov	r3, sp
  SPIx_WriteReadData(&Data,&tmp,1);
 8003cc8:	446c      	add	r4, sp
{
 8003cca:	71d8      	strb	r0, [r3, #7]
 8003ccc:	3307      	adds	r3, #7
  SPIx_WriteReadData(&Data,&tmp,1);
 8003cce:	0018      	movs	r0, r3
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	0021      	movs	r1, r4
 8003cd4:	f7ff ffcc 	bl	8003c70 <SPIx_WriteReadData>
  return tmp;
 8003cd8:	7820      	ldrb	r0, [r4, #0]
  }
 8003cda:	b004      	add	sp, #16
 8003cdc:	bd10      	pop	{r4, pc}
	...

08003ce0 <SD_IO_Init>:
{
 8003ce0:	b530      	push	{r4, r5, lr}
  SD_CS_GPIO_CLK_ENABLE();
 8003ce2:	2401      	movs	r4, #1
{
 8003ce4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8003ce6:	2214      	movs	r2, #20
 8003ce8:	2100      	movs	r1, #0
 8003cea:	a803      	add	r0, sp, #12
 8003cec:	f00a fa57 	bl	800e19e <memset>
  LCD_CS_GPIO_CLK_ENABLE();
 8003cf0:	2102      	movs	r1, #2
  SD_CS_HIGH();
 8003cf2:	2580      	movs	r5, #128	; 0x80
 8003cf4:	20a0      	movs	r0, #160	; 0xa0
  SD_CS_GPIO_CLK_ENABLE();
 8003cf6:	4b1b      	ldr	r3, [pc, #108]	; (8003d64 <SD_IO_Init+0x84>)
  SD_CS_HIGH();
 8003cf8:	00ed      	lsls	r5, r5, #3
  SD_CS_GPIO_CLK_ENABLE();
 8003cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  SD_CS_HIGH();
 8003cfc:	05c0      	lsls	r0, r0, #23
  SD_CS_GPIO_CLK_ENABLE();
 8003cfe:	4322      	orrs	r2, r4
 8003d00:	635a      	str	r2, [r3, #52]	; 0x34
 8003d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d04:	4022      	ands	r2, r4
 8003d06:	9201      	str	r2, [sp, #4]
 8003d08:	9a01      	ldr	r2, [sp, #4]
  LCD_CS_GPIO_CLK_ENABLE();
 8003d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	635a      	str	r2, [r3, #52]	; 0x34
 8003d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  SD_CS_HIGH();
 8003d12:	0022      	movs	r2, r4
  LCD_CS_GPIO_CLK_ENABLE();
 8003d14:	400b      	ands	r3, r1
 8003d16:	9302      	str	r3, [sp, #8]
  SD_CS_HIGH();
 8003d18:	0029      	movs	r1, r5
  LCD_CS_GPIO_CLK_ENABLE();
 8003d1a:	9b02      	ldr	r3, [sp, #8]
  SD_CS_HIGH();
 8003d1c:	f000 fc38 	bl	8004590 <HAL_GPIO_WritePin>
  LCD_CS_HIGH();
 8003d20:	0022      	movs	r2, r4
 8003d22:	0021      	movs	r1, r4
 8003d24:	4810      	ldr	r0, [pc, #64]	; (8003d68 <SD_IO_Init+0x88>)
 8003d26:	f000 fc33 	bl	8004590 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 8003d2a:	20a0      	movs	r0, #160	; 0xa0
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d2c:	2303      	movs	r3, #3
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 8003d2e:	a903      	add	r1, sp, #12
 8003d30:	05c0      	lsls	r0, r0, #23
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d32:	9306      	str	r3, [sp, #24]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d34:	9404      	str	r4, [sp, #16]
  gpioinitstruct.Pull = GPIO_PULLUP;
 8003d36:	9405      	str	r4, [sp, #20]
  gpioinitstruct.Pin = SD_CS_PIN;
 8003d38:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 8003d3a:	f000 fb05 	bl	8004348 <HAL_GPIO_Init>
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 8003d3e:	20a0      	movs	r0, #160	; 0xa0
 8003d40:	a903      	add	r1, sp, #12
 8003d42:	05c0      	lsls	r0, r0, #23
  gpioinitstruct.Pin   = LCD_CS_PIN;
 8003d44:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &gpioinitstruct);
 8003d46:	f000 faff 	bl	8004348 <HAL_GPIO_Init>
  SPIx_Init();
 8003d4a:	f7ff ff29 	bl	8003ba0 <SPIx_Init>
 8003d4e:	3409      	adds	r4, #9
 8003d50:	3c01      	subs	r4, #1
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8003d52:	20ff      	movs	r0, #255	; 0xff
 8003d54:	b2e4      	uxtb	r4, r4
 8003d56:	f7ff ffb4 	bl	8003cc2 <SD_IO_WriteByte>
  for (counter = 0; counter <= 9; counter++)
 8003d5a:	2c00      	cmp	r4, #0
 8003d5c:	d1f8      	bne.n	8003d50 <SD_IO_Init+0x70>
}
 8003d5e:	b009      	add	sp, #36	; 0x24
 8003d60:	bd30      	pop	{r4, r5, pc}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	40021000 	.word	0x40021000
 8003d68:	50000400 	.word	0x50000400

08003d6c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <_sbrk+0x2c>)
{
 8003d6e:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8003d70:	6819      	ldr	r1, [r3, #0]
{
 8003d72:	0002      	movs	r2, r0
	if (heap_end == 0)
 8003d74:	2900      	cmp	r1, #0
 8003d76:	d101      	bne.n	8003d7c <_sbrk+0x10>
		heap_end = &end;
 8003d78:	4908      	ldr	r1, [pc, #32]	; (8003d9c <_sbrk+0x30>)
 8003d7a:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8003d7c:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8003d7e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003d80:	1882      	adds	r2, r0, r2
 8003d82:	428a      	cmp	r2, r1
 8003d84:	d906      	bls.n	8003d94 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003d86:	f009 ffbf 	bl	800dd08 <__errno>
 8003d8a:	230c      	movs	r3, #12
 8003d8c:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003d8e:	2001      	movs	r0, #1
 8003d90:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8003d92:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8003d94:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8003d96:	e7fc      	b.n	8003d92 <_sbrk+0x26>
 8003d98:	200014e0 	.word	0x200014e0
 8003d9c:	20005488 	.word	0x20005488

08003da0 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003da0:	2280      	movs	r2, #128	; 0x80
 8003da2:	4b02      	ldr	r3, [pc, #8]	; (8003dac <SystemInit+0xc>)
 8003da4:	0512      	lsls	r2, r2, #20
 8003da6:	609a      	str	r2, [r3, #8]
#endif
}
 8003da8:	4770      	bx	lr
 8003daa:	46c0      	nop			; (mov r8, r8)
 8003dac:	e000ed00 	.word	0xe000ed00

08003db0 <HAL_Init>:
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003db0:	2380      	movs	r3, #128	; 0x80
 8003db2:	4a08      	ldr	r2, [pc, #32]	; (8003dd4 <HAL_Init+0x24>)
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	6811      	ldr	r1, [r2, #0]
{
 8003db8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	f7ff fea0 	bl	8003b04 <HAL_InitTick>
 8003dc4:	1e04      	subs	r4, r0, #0
 8003dc6:	d103      	bne.n	8003dd0 <HAL_Init+0x20>
    status = HAL_ERROR;
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003dc8:	f7ff fcbc 	bl	8003744 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8003dcc:	0020      	movs	r0, r4
 8003dce:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8003dd0:	2401      	movs	r4, #1
 8003dd2:	e7fb      	b.n	8003dcc <HAL_Init+0x1c>
 8003dd4:	40022000 	.word	0x40022000

08003dd8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003dd8:	4a03      	ldr	r2, [pc, #12]	; (8003de8 <HAL_IncTick+0x10>)
 8003dda:	4904      	ldr	r1, [pc, #16]	; (8003dec <HAL_IncTick+0x14>)
 8003ddc:	6813      	ldr	r3, [r2, #0]
 8003dde:	6809      	ldr	r1, [r1, #0]
 8003de0:	185b      	adds	r3, r3, r1
 8003de2:	6013      	str	r3, [r2, #0]
}
 8003de4:	4770      	bx	lr
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	20004c98 	.word	0x20004c98
 8003dec:	20000008 	.word	0x20000008

08003df0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003df0:	4b01      	ldr	r3, [pc, #4]	; (8003df8 <HAL_GetTick+0x8>)
 8003df2:	6818      	ldr	r0, [r3, #0]
}
 8003df4:	4770      	bx	lr
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	20004c98 	.word	0x20004c98

08003dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dfc:	b570      	push	{r4, r5, r6, lr}
 8003dfe:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003e00:	f7ff fff6 	bl	8003df0 <HAL_GetTick>
 8003e04:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e06:	1c63      	adds	r3, r4, #1
 8003e08:	d002      	beq.n	8003e10 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e0a:	4b04      	ldr	r3, [pc, #16]	; (8003e1c <HAL_Delay+0x20>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e10:	f7ff ffee 	bl	8003df0 <HAL_GetTick>
 8003e14:	1b40      	subs	r0, r0, r5
 8003e16:	4284      	cmp	r4, r0
 8003e18:	d8fa      	bhi.n	8003e10 <HAL_Delay+0x14>
  {
  }
}
 8003e1a:	bd70      	pop	{r4, r5, r6, pc}
 8003e1c:	20000008 	.word	0x20000008

08003e20 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e20:	6880      	ldr	r0, [r0, #8]
 8003e22:	0740      	lsls	r0, r0, #29
 8003e24:	0fc0      	lsrs	r0, r0, #31
}
 8003e26:	4770      	bx	lr

08003e28 <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e28:	2300      	movs	r3, #0
{
 8003e2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e2c:	b085      	sub	sp, #20
 8003e2e:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8003e30:	9303      	str	r3, [sp, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8003e32:	2501      	movs	r5, #1
  if(hadc == NULL)
 8003e34:	4298      	cmp	r0, r3
 8003e36:	d100      	bne.n	8003e3a <HAL_ADC_Init+0x12>
 8003e38:	e09a      	b.n	8003f70 <HAL_ADC_Init+0x148>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e3a:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8003e3c:	429d      	cmp	r5, r3
 8003e3e:	d105      	bne.n	8003e4c <HAL_ADC_Init+0x24>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e40:	f7ff fc98 	bl	8003774 <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e44:	0023      	movs	r3, r4
 8003e46:	3354      	adds	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8003e48:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8003e4a:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e4c:	2380      	movs	r3, #128	; 0x80
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e4e:	6826      	ldr	r6, [r4, #0]
 8003e50:	055b      	lsls	r3, r3, #21
 8003e52:	68b2      	ldr	r2, [r6, #8]
 8003e54:	421a      	tst	r2, r3
 8003e56:	d100      	bne.n	8003e5a <HAL_ADC_Init+0x32>
 8003e58:	e0d0      	b.n	8003ffc <HAL_ADC_Init+0x1d4>
 8003e5a:	68b3      	ldr	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e5c:	2500      	movs	r5, #0
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	d400      	bmi.n	8003e64 <HAL_ADC_Init+0x3c>
 8003e62:	e0d8      	b.n	8004016 <HAL_ADC_Init+0x1ee>
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e64:	0030      	movs	r0, r6
 8003e66:	f7ff ffdb 	bl	8003e20 <LL_ADC_REG_IsConversionOngoing>
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e6a:	2310      	movs	r3, #16
 8003e6c:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8003e6e:	401e      	ands	r6, r3
 8003e70:	d000      	beq.n	8003e74 <HAL_ADC_Init+0x4c>
 8003e72:	e0be      	b.n	8003ff2 <HAL_ADC_Init+0x1ca>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003e74:	2800      	cmp	r0, #0
 8003e76:	d000      	beq.n	8003e7a <HAL_ADC_Init+0x52>
 8003e78:	e0bb      	b.n	8003ff2 <HAL_ADC_Init+0x1ca>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e7c:	4a7c      	ldr	r2, [pc, #496]	; (8004070 <HAL_ADC_Init+0x248>)
 8003e7e:	401a      	ands	r2, r3
 8003e80:	2302      	movs	r3, #2
 8003e82:	4313      	orrs	r3, r2
 8003e84:	65a3      	str	r3, [r4, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e86:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	07d2      	lsls	r2, r2, #31
 8003e8c:	d400      	bmi.n	8003e90 <HAL_ADC_Init+0x68>
 8003e8e:	e0cb      	b.n	8004028 <HAL_ADC_Init+0x200>
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003e90:	6b27      	ldr	r7, [r4, #48]	; 0x30
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e92:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003e94:	1e78      	subs	r0, r7, #1
 8003e96:	4187      	sbcs	r7, r0
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003e98:	7e62      	ldrb	r2, [r4, #25]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003e9a:	0338      	lsls	r0, r7, #12
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003e9c:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e9e:	0389      	lsls	r1, r1, #14
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003ea0:	9001      	str	r0, [sp, #4]
 8003ea2:	68e0      	ldr	r0, [r4, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ea4:	4311      	orrs	r1, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003ea6:	7ea2      	ldrb	r2, [r4, #26]
 8003ea8:	4301      	orrs	r1, r0
                 hadc->Init.DataAlign                                             |
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8003eaa:	6920      	ldr	r0, [r4, #16]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003eac:	4694      	mov	ip, r2
 8003eae:	0352      	lsls	r2, r2, #13
 8003eb0:	4311      	orrs	r1, r2
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	da66      	bge.n	8003f84 <HAL_ADC_Init+0x15c>
 8003eb6:	0047      	lsls	r7, r0, #1
 8003eb8:	087f      	lsrs	r7, r7, #1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003eba:	0022      	movs	r2, r4
 8003ebc:	322c      	adds	r2, #44	; 0x2c
 8003ebe:	7812      	ldrb	r2, [r2, #0]
 8003ec0:	0052      	lsls	r2, r2, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	9901      	ldr	r1, [sp, #4]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	4317      	orrs	r7, r2
 8003eca:	9701      	str	r7, [sp, #4]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ecc:	1c62      	adds	r2, r4, #1
 8003ece:	7fd2      	ldrb	r2, [r2, #31]
 8003ed0:	2a01      	cmp	r2, #1
 8003ed2:	d107      	bne.n	8003ee4 <HAL_ADC_Init+0xbc>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003ed4:	4661      	mov	r1, ip
 8003ed6:	2900      	cmp	r1, #0
 8003ed8:	d157      	bne.n	8003f8a <HAL_ADC_Init+0x162>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003eda:	2280      	movs	r2, #128	; 0x80
 8003edc:	0039      	movs	r1, r7
 8003ede:	0252      	lsls	r2, r2, #9
 8003ee0:	4311      	orrs	r1, r2
 8003ee2:	9101      	str	r1, [sp, #4]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ee4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003ee6:	2a00      	cmp	r2, #0
 8003ee8:	d007      	beq.n	8003efa <HAL_ADC_Init+0xd2>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003eea:	21e0      	movs	r1, #224	; 0xe0
 8003eec:	0049      	lsls	r1, r1, #1
 8003eee:	400a      	ands	r2, r1
 8003ef0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	9901      	ldr	r1, [sp, #4]
 8003ef6:	4311      	orrs	r1, r2
 8003ef8:	9101      	str	r1, [sp, #4]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8003efa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003efc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003efe:	430a      	orrs	r2, r1
                  hadc->Init.Oversampling.RightBitShift |
 8003f00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003f02:	430a      	orrs	r2, r1
                  hadc->Init.Oversampling.TriggeredMode |
 8003f04:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003f06:	430a      	orrs	r2, r1
                  hadc->Init.TriggerFrequencyMode
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 8003f08:	0021      	movs	r1, r4
 8003f0a:	313c      	adds	r1, #60	; 0x3c
 8003f0c:	7809      	ldrb	r1, [r1, #0]
 8003f0e:	2901      	cmp	r1, #1
 8003f10:	d100      	bne.n	8003f14 <HAL_ADC_Init+0xec>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8003f12:	430a      	orrs	r2, r1
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003f14:	68d9      	ldr	r1, [r3, #12]
 8003f16:	4f57      	ldr	r7, [pc, #348]	; (8004074 <HAL_ADC_Init+0x24c>)
 8003f18:	4039      	ands	r1, r7
 8003f1a:	9f01      	ldr	r7, [sp, #4]
 8003f1c:	4339      	orrs	r1, r7
 8003f1e:	60d9      	str	r1, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 8003f20:	6919      	ldr	r1, [r3, #16]
 8003f22:	4f55      	ldr	r7, [pc, #340]	; (8004078 <HAL_ADC_Init+0x250>)
 8003f24:	4039      	ands	r1, r7
 8003f26:	430a      	orrs	r2, r1
  MODIFY_REG(ADCx->SMPR,
 8003f28:	2107      	movs	r1, #7
 8003f2a:	2770      	movs	r7, #112	; 0x70
 8003f2c:	611a      	str	r2, [r3, #16]
 8003f2e:	695a      	ldr	r2, [r3, #20]
 8003f30:	438a      	bics	r2, r1
 8003f32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f34:	430a      	orrs	r2, r1
 8003f36:	615a      	str	r2, [r3, #20]
 8003f38:	695a      	ldr	r2, [r3, #20]
 8003f3a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003f3c:	43ba      	bics	r2, r7
 8003f3e:	0109      	lsls	r1, r1, #4
 8003f40:	430a      	orrs	r2, r1
 8003f42:	615a      	str	r2, [r3, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003f44:	2800      	cmp	r0, #0
 8003f46:	d12a      	bne.n	8003f9e <HAL_ADC_Init+0x176>
      if(ADCGroupRegularSequencerRanksCount == 1UL)
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003f48:	2210      	movs	r2, #16
 8003f4a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003f4c:	4252      	negs	r2, r2
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003f52:	4a4a      	ldr	r2, [pc, #296]	; (800407c <HAL_ADC_Init+0x254>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	4013      	ands	r3, r2
 8003f58:	9a01      	ldr	r2, [sp, #4]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d13d      	bne.n	8003fda <HAL_ADC_Init+0x1b2>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f5e:	2300      	movs	r3, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f60:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8003f62:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8003f64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f66:	4393      	bics	r3, r2
 8003f68:	001a      	movs	r2, r3
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8003f70:	0028      	movs	r0, r5
 8003f72:	b005      	add	sp, #20
 8003f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index--;
 8003f76:	9b03      	ldr	r3, [sp, #12]
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	9303      	str	r3, [sp, #12]
    while(wait_loop_index != 0UL)
 8003f7c:	9b03      	ldr	r3, [sp, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f9      	bne.n	8003f76 <HAL_ADC_Init+0x14e>
 8003f82:	e76a      	b.n	8003e5a <HAL_ADC_Init+0x32>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8003f84:	2780      	movs	r7, #128	; 0x80
 8003f86:	03bf      	lsls	r7, r7, #14
 8003f88:	e797      	b.n	8003eba <HAL_ADC_Init+0x92>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f8a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003f8c:	468c      	mov	ip, r1
 8003f8e:	2120      	movs	r1, #32
 8003f90:	4667      	mov	r7, ip
 8003f92:	4339      	orrs	r1, r7
 8003f94:	65a1      	str	r1, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f96:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	65e2      	str	r2, [r4, #92]	; 0x5c
 8003f9c:	e7a2      	b.n	8003ee4 <HAL_ADC_Init+0xbc>
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f9e:	2280      	movs	r2, #128	; 0x80
 8003fa0:	0392      	lsls	r2, r2, #14
 8003fa2:	4290      	cmp	r0, r2
 8003fa4:	d1d5      	bne.n	8003f52 <HAL_ADC_Init+0x12a>
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 8003fa6:	200f      	movs	r0, #15
 8003fa8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003faa:	000f      	movs	r7, r1
 8003fac:	00b2      	lsls	r2, r6, #2
 8003fae:	40d7      	lsrs	r7, r2
 8003fb0:	003a      	movs	r2, r7
 8003fb2:	4002      	ands	r2, r0
 8003fb4:	2a0f      	cmp	r2, #15
 8003fb6:	d00d      	beq.n	8003fd4 <HAL_ADC_Init+0x1ac>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003fb8:	3601      	adds	r6, #1
 8003fba:	2e08      	cmp	r6, #8
 8003fbc:	d1f5      	bne.n	8003faa <HAL_ADC_Init+0x182>
        MODIFY_REG(hadc->Instance->CHSELR,
 8003fbe:	4830      	ldr	r0, [pc, #192]	; (8004080 <HAL_ADC_Init+0x258>)
 8003fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fc2:	69e2      	ldr	r2, [r4, #28]
 8003fc4:	1812      	adds	r2, r2, r0
 8003fc6:	201c      	movs	r0, #28
 8003fc8:	0092      	lsls	r2, r2, #2
 8003fca:	4002      	ands	r2, r0
 8003fcc:	382c      	subs	r0, #44	; 0x2c
 8003fce:	4090      	lsls	r0, r2
 8003fd0:	0002      	movs	r2, r0
 8003fd2:	e7bc      	b.n	8003f4e <HAL_ADC_Init+0x126>
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 8003fd4:	2e01      	cmp	r6, #1
 8003fd6:	d0b7      	beq.n	8003f48 <HAL_ADC_Init+0x120>
 8003fd8:	e7f1      	b.n	8003fbe <HAL_ADC_Init+0x196>
      ADC_STATE_CLR_SET(hadc->State,
 8003fda:	2212      	movs	r2, #18
 8003fdc:	6da3      	ldr	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fde:	2501      	movs	r5, #1
      ADC_STATE_CLR_SET(hadc->State,
 8003fe0:	4393      	bics	r3, r2
 8003fe2:	001a      	movs	r2, r3
 8003fe4:	2310      	movs	r3, #16
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003fec:	432b      	orrs	r3, r5
 8003fee:	65e3      	str	r3, [r4, #92]	; 0x5c
 8003ff0:	e7be      	b.n	8003f70 <HAL_ADC_Init+0x148>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ff2:	6da2      	ldr	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8003ff4:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	65a3      	str	r3, [r4, #88]	; 0x58
 8003ffa:	e7b9      	b.n	8003f70 <HAL_ADC_Init+0x148>
  MODIFY_REG(ADCx->CR,
 8003ffc:	68b2      	ldr	r2, [r6, #8]
 8003ffe:	4921      	ldr	r1, [pc, #132]	; (8004084 <HAL_ADC_Init+0x25c>)
 8004000:	400a      	ands	r2, r1
 8004002:	4313      	orrs	r3, r2
 8004004:	60b3      	str	r3, [r6, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004006:	4b20      	ldr	r3, [pc, #128]	; (8004088 <HAL_ADC_Init+0x260>)
 8004008:	4920      	ldr	r1, [pc, #128]	; (800408c <HAL_ADC_Init+0x264>)
 800400a:	6818      	ldr	r0, [r3, #0]
 800400c:	f7fc f8a8 	bl	8000160 <__udivsi3>
 8004010:	0040      	lsls	r0, r0, #1
 8004012:	9003      	str	r0, [sp, #12]
    while(wait_loop_index != 0UL)
 8004014:	e7b2      	b.n	8003f7c <HAL_ADC_Init+0x154>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004016:	2310      	movs	r3, #16
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004018:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800401a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800401c:	4313      	orrs	r3, r2
 800401e:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004020:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004022:	432b      	orrs	r3, r5
 8004024:	65e3      	str	r3, [r4, #92]	; 0x5c
 8004026:	e71d      	b.n	8003e64 <HAL_ADC_Init+0x3c>
      MODIFY_REG(hadc->Instance->CFGR1,
 8004028:	2118      	movs	r1, #24
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	438a      	bics	r2, r1
 800402e:	68a1      	ldr	r1, [r4, #8]
 8004030:	430a      	orrs	r2, r1
 8004032:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 8004034:	6861      	ldr	r1, [r4, #4]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	0f88      	lsrs	r0, r1, #30
 800403a:	0092      	lsls	r2, r2, #2
 800403c:	0780      	lsls	r0, r0, #30
 800403e:	0892      	lsrs	r2, r2, #2
 8004040:	4302      	orrs	r2, r0
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004042:	2080      	movs	r0, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 8004044:	611a      	str	r2, [r3, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004046:	004a      	lsls	r2, r1, #1
 8004048:	0852      	lsrs	r2, r2, #1
 800404a:	05c0      	lsls	r0, r0, #23
 800404c:	4282      	cmp	r2, r0
 800404e:	d100      	bne.n	8004052 <HAL_ADC_Init+0x22a>
 8004050:	e71e      	b.n	8003e90 <HAL_ADC_Init+0x68>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004052:	2280      	movs	r2, #128	; 0x80
 8004054:	0612      	lsls	r2, r2, #24
 8004056:	4291      	cmp	r1, r2
 8004058:	d100      	bne.n	800405c <HAL_ADC_Init+0x234>
 800405a:	e719      	b.n	8003e90 <HAL_ADC_Init+0x68>
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 800405c:	480c      	ldr	r0, [pc, #48]	; (8004090 <HAL_ADC_Init+0x268>)
 800405e:	4f0d      	ldr	r7, [pc, #52]	; (8004094 <HAL_ADC_Init+0x26c>)
 8004060:	6802      	ldr	r2, [r0, #0]
 8004062:	403a      	ands	r2, r7
 8004064:	27f0      	movs	r7, #240	; 0xf0
 8004066:	03bf      	lsls	r7, r7, #14
 8004068:	4039      	ands	r1, r7
 800406a:	430a      	orrs	r2, r1
 800406c:	6002      	str	r2, [r0, #0]
 800406e:	e70f      	b.n	8003e90 <HAL_ADC_Init+0x68>
 8004070:	fffffefd 	.word	0xfffffefd
 8004074:	fffe0219 	.word	0xfffe0219
 8004078:	dffffc02 	.word	0xdffffc02
 800407c:	833fffe7 	.word	0x833fffe7
 8004080:	3fffffff 	.word	0x3fffffff
 8004084:	6fffffe8 	.word	0x6fffffe8
 8004088:	20000004 	.word	0x20000004
 800408c:	00030d40 	.word	0x00030d40
 8004090:	40012708 	.word	0x40012708
 8004094:	ffc3ffff 	.word	0xffc3ffff

08004098 <HAL_ADC_ConfigChannel>:
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004098:	2300      	movs	r3, #0
{
 800409a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800409c:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t wait_loop_index = 0UL;
 800409e:	9307      	str	r3, [sp, #28]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040a0:	0003      	movs	r3, r0
 80040a2:	3354      	adds	r3, #84	; 0x54
 80040a4:	781a      	ldrb	r2, [r3, #0]
{
 80040a6:	0005      	movs	r5, r0
 80040a8:	000f      	movs	r7, r1
  __HAL_LOCK(hadc);
 80040aa:	2402      	movs	r4, #2
 80040ac:	2a01      	cmp	r2, #1
 80040ae:	d100      	bne.n	80040b2 <HAL_ADC_ConfigChannel+0x1a>
 80040b0:	e0c1      	b.n	8004236 <HAL_ADC_ConfigChannel+0x19e>
 80040b2:	2601      	movs	r6, #1
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040b4:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hadc);
 80040b6:	701e      	strb	r6, [r3, #0]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040b8:	f7ff feb2 	bl	8003e20 <LL_ADC_REG_IsConversionOngoing>
 80040bc:	9003      	str	r0, [sp, #12]
 80040be:	2800      	cmp	r0, #0
 80040c0:	d000      	beq.n	80040c4 <HAL_ADC_ConfigChannel+0x2c>
 80040c2:	e0ef      	b.n	80042a4 <HAL_ADC_ConfigChannel+0x20c>
 80040c4:	2204      	movs	r2, #4
 80040c6:	2180      	movs	r1, #128	; 0x80
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4694      	mov	ip, r2
 80040cc:	9301      	str	r3, [sp, #4]
 80040ce:	9801      	ldr	r0, [sp, #4]
 80040d0:	692b      	ldr	r3, [r5, #16]
 80040d2:	0609      	lsls	r1, r1, #24
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	42a0      	cmp	r0, r4
 80040d8:	d100      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x44>
 80040da:	e0b6      	b.n	800424a <HAL_ADC_ConfigChannel+0x1b2>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80040dc:	4660      	mov	r0, ip
 80040de:	4383      	bics	r3, r0
 80040e0:	428b      	cmp	r3, r1
 80040e2:	d113      	bne.n	800410c <HAL_ADC_ConfigChannel+0x74>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80040e4:	6829      	ldr	r1, [r5, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80040e6:	0353      	lsls	r3, r2, #13
 80040e8:	6a88      	ldr	r0, [r1, #40]	; 0x28
 80040ea:	0b5b      	lsrs	r3, r3, #13
  MODIFY_REG(ADCx->CHSELR,
 80040ec:	4303      	orrs	r3, r0
 80040ee:	628b      	str	r3, [r1, #40]	; 0x28
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80040f0:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(ADCx->SMPR,
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	496e      	ldr	r1, [pc, #440]	; (80042b0 <HAL_ADC_ConfigChannel+0x218>)
 80040f6:	6944      	ldr	r4, [r0, #20]
 80040f8:	4019      	ands	r1, r3
 80040fa:	4061      	eors	r1, r4
 80040fc:	0213      	lsls	r3, r2, #8
 80040fe:	400b      	ands	r3, r1
 8004100:	4063      	eors	r3, r4
 8004102:	6143      	str	r3, [r0, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004104:	2a00      	cmp	r2, #0
 8004106:	db65      	blt.n	80041d4 <HAL_ADC_ConfigChannel+0x13c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004108:	2400      	movs	r4, #0
 800410a:	e091      	b.n	8004230 <HAL_ADC_ConfigChannel+0x198>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800410c:	211f      	movs	r1, #31
 800410e:	9b01      	ldr	r3, [sp, #4]
 8004110:	400b      	ands	r3, r1
 8004112:	9302      	str	r3, [sp, #8]
 8004114:	230f      	movs	r3, #15
 8004116:	9802      	ldr	r0, [sp, #8]
 8004118:	4083      	lsls	r3, r0
 800411a:	43db      	mvns	r3, r3
 800411c:	9304      	str	r3, [sp, #16]
 800411e:	9804      	ldr	r0, [sp, #16]
 8004120:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8004122:	4003      	ands	r3, r0
 8004124:	9305      	str	r3, [sp, #20]
 8004126:	0350      	lsls	r0, r2, #13
 8004128:	0013      	movs	r3, r2
 800412a:	2800      	cmp	r0, #0
 800412c:	d115      	bne.n	800415a <HAL_ADC_ConfigChannel+0xc2>
 800412e:	0e90      	lsrs	r0, r2, #26
 8004130:	4008      	ands	r0, r1
 8004132:	9902      	ldr	r1, [sp, #8]
 8004134:	4088      	lsls	r0, r1
 8004136:	9905      	ldr	r1, [sp, #20]
 8004138:	4308      	orrs	r0, r1
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800413a:	9901      	ldr	r1, [sp, #4]
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800413c:	6628      	str	r0, [r5, #96]	; 0x60
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800413e:	0889      	lsrs	r1, r1, #2
 8004140:	69e8      	ldr	r0, [r5, #28]
 8004142:	3101      	adds	r1, #1
 8004144:	4281      	cmp	r1, r0
 8004146:	d8d3      	bhi.n	80040f0 <HAL_ADC_ConfigChannel+0x58>
  MODIFY_REG(ADCx->CHSELR,
 8004148:	9c02      	ldr	r4, [sp, #8]
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800414a:	6829      	ldr	r1, [r5, #0]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	0f1b      	lsrs	r3, r3, #28
 8004150:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8004152:	40a3      	lsls	r3, r4
 8004154:	9c04      	ldr	r4, [sp, #16]
 8004156:	4020      	ands	r0, r4
 8004158:	e7c8      	b.n	80040ec <HAL_ADC_ConfigChannel+0x54>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800415a:	9803      	ldr	r0, [sp, #12]
 800415c:	4232      	tst	r2, r6
 800415e:	d1e8      	bne.n	8004132 <HAL_ADC_ConfigChannel+0x9a>
 8004160:	0030      	movs	r0, r6
 8004162:	4222      	tst	r2, r4
 8004164:	d1e5      	bne.n	8004132 <HAL_ADC_ConfigChannel+0x9a>
 8004166:	4661      	mov	r1, ip
 8004168:	0020      	movs	r0, r4
 800416a:	420a      	tst	r2, r1
 800416c:	d1e1      	bne.n	8004132 <HAL_ADC_ConfigChannel+0x9a>
 800416e:	2003      	movs	r0, #3
 8004170:	0711      	lsls	r1, r2, #28
 8004172:	d4de      	bmi.n	8004132 <HAL_ADC_ConfigChannel+0x9a>
 8004174:	4660      	mov	r0, ip
 8004176:	06d1      	lsls	r1, r2, #27
 8004178:	d4db      	bmi.n	8004132 <HAL_ADC_ConfigChannel+0x9a>
 800417a:	2005      	movs	r0, #5
 800417c:	0691      	lsls	r1, r2, #26
 800417e:	d4d8      	bmi.n	8004132 <HAL_ADC_ConfigChannel+0x9a>
 8004180:	3001      	adds	r0, #1
 8004182:	0651      	lsls	r1, r2, #25
 8004184:	d4d5      	bmi.n	8004132 <HAL_ADC_ConfigChannel+0x9a>
 8004186:	3001      	adds	r0, #1
 8004188:	0611      	lsls	r1, r2, #24
 800418a:	d4d2      	bmi.n	8004132 <HAL_ADC_ConfigChannel+0x9a>
 800418c:	3001      	adds	r0, #1
 800418e:	05d1      	lsls	r1, r2, #23
 8004190:	d4cf      	bmi.n	8004132 <HAL_ADC_ConfigChannel+0x9a>
 8004192:	3001      	adds	r0, #1
 8004194:	0591      	lsls	r1, r2, #22
 8004196:	d4cc      	bmi.n	8004132 <HAL_ADC_ConfigChannel+0x9a>
 8004198:	3001      	adds	r0, #1
 800419a:	0551      	lsls	r1, r2, #21
 800419c:	d4c9      	bmi.n	8004132 <HAL_ADC_ConfigChannel+0x9a>
 800419e:	3001      	adds	r0, #1
 80041a0:	0511      	lsls	r1, r2, #20
 80041a2:	d4c6      	bmi.n	8004132 <HAL_ADC_ConfigChannel+0x9a>
 80041a4:	3001      	adds	r0, #1
 80041a6:	04d1      	lsls	r1, r2, #19
 80041a8:	d4c3      	bmi.n	8004132 <HAL_ADC_ConfigChannel+0x9a>
 80041aa:	3001      	adds	r0, #1
 80041ac:	0491      	lsls	r1, r2, #18
 80041ae:	d4c0      	bmi.n	8004132 <HAL_ADC_ConfigChannel+0x9a>
 80041b0:	3001      	adds	r0, #1
 80041b2:	0451      	lsls	r1, r2, #17
 80041b4:	d4bd      	bmi.n	8004132 <HAL_ADC_ConfigChannel+0x9a>
 80041b6:	3001      	adds	r0, #1
 80041b8:	0411      	lsls	r1, r2, #16
 80041ba:	d4ba      	bmi.n	8004132 <HAL_ADC_ConfigChannel+0x9a>
 80041bc:	3001      	adds	r0, #1
 80041be:	03d1      	lsls	r1, r2, #15
 80041c0:	d4b7      	bmi.n	8004132 <HAL_ADC_ConfigChannel+0x9a>
 80041c2:	3001      	adds	r0, #1
 80041c4:	0391      	lsls	r1, r2, #14
 80041c6:	d4b4      	bmi.n	8004132 <HAL_ADC_ConfigChannel+0x9a>
 80041c8:	2080      	movs	r0, #128	; 0x80
 80041ca:	02c0      	lsls	r0, r0, #11
 80041cc:	4010      	ands	r0, r2
 80041ce:	d0b0      	beq.n	8004132 <HAL_ADC_ConfigChannel+0x9a>
 80041d0:	2012      	movs	r0, #18
 80041d2:	e7ae      	b.n	8004132 <HAL_ADC_ConfigChannel+0x9a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80041d4:	21e0      	movs	r1, #224	; 0xe0
 80041d6:	4b37      	ldr	r3, [pc, #220]	; (80042b4 <HAL_ADC_ConfigChannel+0x21c>)
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041d8:	4837      	ldr	r0, [pc, #220]	; (80042b8 <HAL_ADC_ConfigChannel+0x220>)
 80041da:	681c      	ldr	r4, [r3, #0]
 80041dc:	0449      	lsls	r1, r1, #17
 80041de:	4021      	ands	r1, r4
 80041e0:	4282      	cmp	r2, r0
 80041e2:	d117      	bne.n	8004214 <HAL_ADC_ConfigChannel+0x17c>
 80041e4:	2080      	movs	r0, #128	; 0x80
 80041e6:	0400      	lsls	r0, r0, #16
 80041e8:	4204      	tst	r4, r0
 80041ea:	d18d      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x70>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	4c33      	ldr	r4, [pc, #204]	; (80042bc <HAL_ADC_ConfigChannel+0x224>)
 80041f0:	4022      	ands	r2, r4
 80041f2:	430a      	orrs	r2, r1
 80041f4:	4302      	orrs	r2, r0
 80041f6:	601a      	str	r2, [r3, #0]
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80041f8:	4b31      	ldr	r3, [pc, #196]	; (80042c0 <HAL_ADC_ConfigChannel+0x228>)
 80041fa:	4932      	ldr	r1, [pc, #200]	; (80042c4 <HAL_ADC_ConfigChannel+0x22c>)
 80041fc:	6818      	ldr	r0, [r3, #0]
 80041fe:	f7fb ffaf 	bl	8000160 <__udivsi3>
 8004202:	9007      	str	r0, [sp, #28]
          while(wait_loop_index != 0UL)
 8004204:	9b07      	ldr	r3, [sp, #28]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d100      	bne.n	800420c <HAL_ADC_ConfigChannel+0x174>
 800420a:	e77d      	b.n	8004108 <HAL_ADC_ConfigChannel+0x70>
          {
            wait_loop_index--;
 800420c:	9b07      	ldr	r3, [sp, #28]
 800420e:	3b01      	subs	r3, #1
 8004210:	9307      	str	r3, [sp, #28]
 8004212:	e7f7      	b.n	8004204 <HAL_ADC_ConfigChannel+0x16c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004214:	482c      	ldr	r0, [pc, #176]	; (80042c8 <HAL_ADC_ConfigChannel+0x230>)
 8004216:	4282      	cmp	r2, r0
 8004218:	d110      	bne.n	800423c <HAL_ADC_ConfigChannel+0x1a4>
 800421a:	2080      	movs	r0, #128	; 0x80
 800421c:	0440      	lsls	r0, r0, #17
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800421e:	4004      	ands	r4, r0
 8004220:	d000      	beq.n	8004224 <HAL_ADC_ConfigChannel+0x18c>
 8004222:	e771      	b.n	8004108 <HAL_ADC_ConfigChannel+0x70>
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	4e25      	ldr	r6, [pc, #148]	; (80042bc <HAL_ADC_ConfigChannel+0x224>)
 8004228:	4032      	ands	r2, r6
 800422a:	430a      	orrs	r2, r1
 800422c:	4302      	orrs	r2, r0
 800422e:	601a      	str	r2, [r3, #0]
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004230:	2300      	movs	r3, #0
 8004232:	3554      	adds	r5, #84	; 0x54
 8004234:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 8004236:	0020      	movs	r0, r4
 8004238:	b009      	add	sp, #36	; 0x24
 800423a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800423c:	4823      	ldr	r0, [pc, #140]	; (80042cc <HAL_ADC_ConfigChannel+0x234>)
 800423e:	4282      	cmp	r2, r0
 8004240:	d000      	beq.n	8004244 <HAL_ADC_ConfigChannel+0x1ac>
 8004242:	e761      	b.n	8004108 <HAL_ADC_ConfigChannel+0x70>
 8004244:	2080      	movs	r0, #128	; 0x80
 8004246:	03c0      	lsls	r0, r0, #15
 8004248:	e7e9      	b.n	800421e <HAL_ADC_ConfigChannel+0x186>
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800424a:	4660      	mov	r0, ip
 800424c:	4383      	bics	r3, r0
 800424e:	428b      	cmp	r3, r1
 8004250:	d105      	bne.n	800425e <HAL_ADC_ConfigChannel+0x1c6>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8004252:	6828      	ldr	r0, [r5, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004254:	0351      	lsls	r1, r2, #13
 8004256:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004258:	0b49      	lsrs	r1, r1, #13
 800425a:	438b      	bics	r3, r1
 800425c:	6283      	str	r3, [r0, #40]	; 0x28
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800425e:	2a00      	cmp	r2, #0
 8004260:	db00      	blt.n	8004264 <HAL_ADC_ConfigChannel+0x1cc>
 8004262:	e751      	b.n	8004108 <HAL_ADC_ConfigChannel+0x70>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004264:	4b13      	ldr	r3, [pc, #76]	; (80042b4 <HAL_ADC_ConfigChannel+0x21c>)
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004266:	4914      	ldr	r1, [pc, #80]	; (80042b8 <HAL_ADC_ConfigChannel+0x220>)
 8004268:	6818      	ldr	r0, [r3, #0]
 800426a:	428a      	cmp	r2, r1
 800426c:	d108      	bne.n	8004280 <HAL_ADC_ConfigChannel+0x1e8>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 800426e:	22a0      	movs	r2, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004270:	681c      	ldr	r4, [r3, #0]
 8004272:	0452      	lsls	r2, r2, #17
 8004274:	4911      	ldr	r1, [pc, #68]	; (80042bc <HAL_ADC_ConfigChannel+0x224>)
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8004276:	4002      	ands	r2, r0
 8004278:	4021      	ands	r1, r4
 800427a:	430a      	orrs	r2, r1
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	e743      	b.n	8004108 <HAL_ADC_ConfigChannel+0x70>
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8004280:	4911      	ldr	r1, [pc, #68]	; (80042c8 <HAL_ADC_ConfigChannel+0x230>)
 8004282:	428a      	cmp	r2, r1
 8004284:	d103      	bne.n	800428e <HAL_ADC_ConfigChannel+0x1f6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8004286:	22c0      	movs	r2, #192	; 0xc0
 8004288:	681c      	ldr	r4, [r3, #0]
 800428a:	0412      	lsls	r2, r2, #16
 800428c:	e7f2      	b.n	8004274 <HAL_ADC_ConfigChannel+0x1dc>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800428e:	490f      	ldr	r1, [pc, #60]	; (80042cc <HAL_ADC_ConfigChannel+0x234>)
 8004290:	428a      	cmp	r2, r1
 8004292:	d000      	beq.n	8004296 <HAL_ADC_ConfigChannel+0x1fe>
 8004294:	e738      	b.n	8004108 <HAL_ADC_ConfigChannel+0x70>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 8004296:	22c0      	movs	r2, #192	; 0xc0
 8004298:	0452      	lsls	r2, r2, #17
 800429a:	6819      	ldr	r1, [r3, #0]
 800429c:	4002      	ands	r2, r0
 800429e:	4807      	ldr	r0, [pc, #28]	; (80042bc <HAL_ADC_ConfigChannel+0x224>)
 80042a0:	4001      	ands	r1, r0
 80042a2:	e7ea      	b.n	800427a <HAL_ADC_ConfigChannel+0x1e2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042a4:	2320      	movs	r3, #32
 80042a6:	6daa      	ldr	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80042a8:	0034      	movs	r4, r6
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042aa:	4313      	orrs	r3, r2
 80042ac:	65ab      	str	r3, [r5, #88]	; 0x58
 80042ae:	e7bf      	b.n	8004230 <HAL_ADC_ConfigChannel+0x198>
 80042b0:	07ffff00 	.word	0x07ffff00
 80042b4:	40012708 	.word	0x40012708
 80042b8:	b0001000 	.word	0xb0001000
 80042bc:	fe3fffff 	.word	0xfe3fffff
 80042c0:	20000004 	.word	0x20000004
 80042c4:	00030d40 	.word	0x00030d40
 80042c8:	b8004000 	.word	0xb8004000
 80042cc:	b4002000 	.word	0xb4002000

080042d0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042d0:	b570      	push	{r4, r5, r6, lr}
 80042d2:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80042d4:	2800      	cmp	r0, #0
 80042d6:	db12      	blt.n	80042fe <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042d8:	0883      	lsrs	r3, r0, #2
 80042da:	4a13      	ldr	r2, [pc, #76]	; (8004328 <HAL_NVIC_SetPriority+0x58>)
 80042dc:	2403      	movs	r4, #3
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	189b      	adds	r3, r3, r2
 80042e2:	22ff      	movs	r2, #255	; 0xff
 80042e4:	4020      	ands	r0, r4
 80042e6:	40a0      	lsls	r0, r4
 80042e8:	0014      	movs	r4, r2
 80042ea:	25c0      	movs	r5, #192	; 0xc0
 80042ec:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80042ee:	4011      	ands	r1, r2
 80042f0:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042f2:	00ad      	lsls	r5, r5, #2
 80042f4:	595e      	ldr	r6, [r3, r5]
 80042f6:	43a6      	bics	r6, r4
 80042f8:	4331      	orrs	r1, r6
 80042fa:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80042fc:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042fe:	2403      	movs	r4, #3
 8004300:	230f      	movs	r3, #15
 8004302:	b2c0      	uxtb	r0, r0
 8004304:	4003      	ands	r3, r0
 8004306:	4020      	ands	r0, r4
 8004308:	40a0      	lsls	r0, r4
 800430a:	34fc      	adds	r4, #252	; 0xfc
 800430c:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800430e:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004310:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004312:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004314:	3b08      	subs	r3, #8
 8004316:	4a05      	ldr	r2, [pc, #20]	; (800432c <HAL_NVIC_SetPriority+0x5c>)
 8004318:	089b      	lsrs	r3, r3, #2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	189b      	adds	r3, r3, r2
 800431e:	69da      	ldr	r2, [r3, #28]
 8004320:	43aa      	bics	r2, r5
 8004322:	4311      	orrs	r1, r2
 8004324:	61d9      	str	r1, [r3, #28]
 8004326:	e7e9      	b.n	80042fc <HAL_NVIC_SetPriority+0x2c>
 8004328:	e000e100 	.word	0xe000e100
 800432c:	e000ed00 	.word	0xe000ed00

08004330 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004330:	2800      	cmp	r0, #0
 8004332:	db05      	blt.n	8004340 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004334:	231f      	movs	r3, #31
 8004336:	4018      	ands	r0, r3
 8004338:	3b1e      	subs	r3, #30
 800433a:	4083      	lsls	r3, r0
 800433c:	4a01      	ldr	r2, [pc, #4]	; (8004344 <HAL_NVIC_EnableIRQ+0x14>)
 800433e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004340:	4770      	bx	lr
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	e000e100 	.word	0xe000e100

08004348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004348:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800434a:	680b      	ldr	r3, [r1, #0]
{
 800434c:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800434e:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00u;
 8004350:	2300      	movs	r3, #0
{
 8004352:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004354:	9a02      	ldr	r2, [sp, #8]
 8004356:	40da      	lsrs	r2, r3
 8004358:	d101      	bne.n	800435e <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  }
}
 800435a:	b005      	add	sp, #20
 800435c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800435e:	2201      	movs	r2, #1
 8004360:	409a      	lsls	r2, r3
 8004362:	9203      	str	r2, [sp, #12]
 8004364:	9903      	ldr	r1, [sp, #12]
 8004366:	9a02      	ldr	r2, [sp, #8]
 8004368:	400a      	ands	r2, r1
 800436a:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 800436c:	d100      	bne.n	8004370 <HAL_GPIO_Init+0x28>
 800436e:	e085      	b.n	800447c <HAL_GPIO_Init+0x134>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004370:	9a01      	ldr	r2, [sp, #4]
 8004372:	2110      	movs	r1, #16
 8004374:	6852      	ldr	r2, [r2, #4]
 8004376:	0016      	movs	r6, r2
 8004378:	438e      	bics	r6, r1
 800437a:	2e02      	cmp	r6, #2
 800437c:	d10e      	bne.n	800439c <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800437e:	2507      	movs	r5, #7
 8004380:	401d      	ands	r5, r3
 8004382:	00ad      	lsls	r5, r5, #2
 8004384:	3901      	subs	r1, #1
 8004386:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8004388:	08dc      	lsrs	r4, r3, #3
 800438a:	00a4      	lsls	r4, r4, #2
 800438c:	1904      	adds	r4, r0, r4
 800438e:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004390:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004392:	9901      	ldr	r1, [sp, #4]
 8004394:	6909      	ldr	r1, [r1, #16]
 8004396:	40a9      	lsls	r1, r5
 8004398:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 800439a:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800439c:	2403      	movs	r4, #3
 800439e:	005f      	lsls	r7, r3, #1
 80043a0:	40bc      	lsls	r4, r7
 80043a2:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80043a4:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043a6:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80043a8:	4025      	ands	r5, r4
 80043aa:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80043ac:	2503      	movs	r5, #3
 80043ae:	4015      	ands	r5, r2
 80043b0:	40bd      	lsls	r5, r7
 80043b2:	4661      	mov	r1, ip
 80043b4:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80043b6:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043b8:	2e01      	cmp	r6, #1
 80043ba:	d80f      	bhi.n	80043dc <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043bc:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 80043be:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043c0:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80043c2:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043c4:	40bd      	lsls	r5, r7
 80043c6:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80043c8:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80043ca:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043cc:	9903      	ldr	r1, [sp, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80043ce:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043d0:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80043d2:	2101      	movs	r1, #1
 80043d4:	400d      	ands	r5, r1
 80043d6:	409d      	lsls	r5, r3
 80043d8:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80043da:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80043dc:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80043de:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80043e0:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80043e2:	688d      	ldr	r5, [r1, #8]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043e4:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80043e6:	40bd      	lsls	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043e8:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80043ea:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80043ec:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043ee:	420a      	tst	r2, r1
 80043f0:	d044      	beq.n	800447c <HAL_GPIO_Init+0x134>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80043f2:	2603      	movs	r6, #3
 80043f4:	240f      	movs	r4, #15
 80043f6:	4922      	ldr	r1, [pc, #136]	; (8004480 <HAL_GPIO_Init+0x138>)
        temp = EXTI->EXTICR[position >> 2u];
 80043f8:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80043fa:	401e      	ands	r6, r3
 80043fc:	00ad      	lsls	r5, r5, #2
 80043fe:	00f6      	lsls	r6, r6, #3
 8004400:	186d      	adds	r5, r5, r1
 8004402:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004404:	21a0      	movs	r1, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 8004406:	6e2f      	ldr	r7, [r5, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004408:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800440a:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800440c:	2400      	movs	r4, #0
 800440e:	4288      	cmp	r0, r1
 8004410:	d00c      	beq.n	800442c <HAL_GPIO_Init+0xe4>
 8004412:	491c      	ldr	r1, [pc, #112]	; (8004484 <HAL_GPIO_Init+0x13c>)
 8004414:	3401      	adds	r4, #1
 8004416:	4288      	cmp	r0, r1
 8004418:	d008      	beq.n	800442c <HAL_GPIO_Init+0xe4>
 800441a:	491b      	ldr	r1, [pc, #108]	; (8004488 <HAL_GPIO_Init+0x140>)
 800441c:	3401      	adds	r4, #1
 800441e:	4288      	cmp	r0, r1
 8004420:	d004      	beq.n	800442c <HAL_GPIO_Init+0xe4>
 8004422:	491a      	ldr	r1, [pc, #104]	; (800448c <HAL_GPIO_Init+0x144>)
 8004424:	3403      	adds	r4, #3
 8004426:	4288      	cmp	r0, r1
 8004428:	d100      	bne.n	800442c <HAL_GPIO_Init+0xe4>
 800442a:	3c02      	subs	r4, #2
 800442c:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 800442e:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004430:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8004432:	000e      	movs	r6, r1
        EXTI->EXTICR[position >> 2u] = temp;
 8004434:	662c      	str	r4, [r5, #96]	; 0x60
        temp = EXTI->IMR1;
 8004436:	4c16      	ldr	r4, [pc, #88]	; (8004490 <HAL_GPIO_Init+0x148>)
        temp &= ~(iocurrent);
 8004438:	43cd      	mvns	r5, r1
        temp = EXTI->IMR1;
 800443a:	6fe7      	ldr	r7, [r4, #124]	; 0x7c
          temp |= iocurrent;
 800443c:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800443e:	03d1      	lsls	r1, r2, #15
 8004440:	d401      	bmi.n	8004446 <HAL_GPIO_Init+0xfe>
        temp &= ~(iocurrent);
 8004442:	003e      	movs	r6, r7
 8004444:	402e      	ands	r6, r5
        EXTI->IMR1 = temp;
 8004446:	67e6      	str	r6, [r4, #124]	; 0x7c
        temp = EXTI->EMR1;
 8004448:	4e12      	ldr	r6, [pc, #72]	; (8004494 <HAL_GPIO_Init+0x14c>)
          temp |= iocurrent;
 800444a:	9f00      	ldr	r7, [sp, #0]
        temp = EXTI->EMR1;
 800444c:	6ff4      	ldr	r4, [r6, #124]	; 0x7c
          temp |= iocurrent;
 800444e:	4327      	orrs	r7, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004450:	0391      	lsls	r1, r2, #14
 8004452:	d401      	bmi.n	8004458 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 8004454:	402c      	ands	r4, r5
 8004456:	0027      	movs	r7, r4
        EXTI->EMR1 = temp;
 8004458:	4c09      	ldr	r4, [pc, #36]	; (8004480 <HAL_GPIO_Init+0x138>)
 800445a:	67f7      	str	r7, [r6, #124]	; 0x7c
        temp = EXTI->RTSR1;
 800445c:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 800445e:	9e00      	ldr	r6, [sp, #0]
 8004460:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004462:	02d1      	lsls	r1, r2, #11
 8004464:	d401      	bmi.n	800446a <HAL_GPIO_Init+0x122>
        temp &= ~(iocurrent);
 8004466:	003e      	movs	r6, r7
 8004468:	402e      	ands	r6, r5
        EXTI->RTSR1 = temp;
 800446a:	6026      	str	r6, [r4, #0]
        temp = EXTI->FTSR1;
 800446c:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 800446e:	9f00      	ldr	r7, [sp, #0]
 8004470:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004472:	0292      	lsls	r2, r2, #10
 8004474:	d401      	bmi.n	800447a <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 8004476:	402e      	ands	r6, r5
 8004478:	0037      	movs	r7, r6
        EXTI->FTSR1 = temp;
 800447a:	6067      	str	r7, [r4, #4]
    position++;
 800447c:	3301      	adds	r3, #1
 800447e:	e769      	b.n	8004354 <HAL_GPIO_Init+0xc>
 8004480:	40021800 	.word	0x40021800
 8004484:	50000400 	.word	0x50000400
 8004488:	50000800 	.word	0x50000800
 800448c:	50000c00 	.word	0x50000c00
 8004490:	40021804 	.word	0x40021804
 8004494:	40021808 	.word	0x40021808

08004498 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004498:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 800449a:	2300      	movs	r3, #0
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800449c:	2703      	movs	r7, #3
{
 800449e:	b085      	sub	sp, #20
 80044a0:	9102      	str	r1, [sp, #8]
  while ((GPIO_Pin >> position) != 0x00u)
 80044a2:	9a02      	ldr	r2, [sp, #8]
 80044a4:	40da      	lsrs	r2, r3
 80044a6:	d101      	bne.n	80044ac <HAL_GPIO_DeInit+0x14>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
    }

    position++;
  }
}
 80044a8:	b005      	add	sp, #20
 80044aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 80044ac:	2201      	movs	r2, #1
 80044ae:	409a      	lsls	r2, r3
 80044b0:	9902      	ldr	r1, [sp, #8]
 80044b2:	9200      	str	r2, [sp, #0]
 80044b4:	4011      	ands	r1, r2
    if (iocurrent != 0x00u)
 80044b6:	d056      	beq.n	8004566 <HAL_GPIO_DeInit+0xce>
 80044b8:	4c2c      	ldr	r4, [pc, #176]	; (800456c <HAL_GPIO_DeInit+0xd4>)
      tmp = EXTI->EXTICR[position >> 2u];
 80044ba:	089a      	lsrs	r2, r3, #2
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80044bc:	001d      	movs	r5, r3
 80044be:	0092      	lsls	r2, r2, #2
 80044c0:	1912      	adds	r2, r2, r4
 80044c2:	240f      	movs	r4, #15
 80044c4:	403d      	ands	r5, r7
 80044c6:	00ed      	lsls	r5, r5, #3
 80044c8:	40ac      	lsls	r4, r5
      tmp = EXTI->EXTICR[position >> 2u];
 80044ca:	6e16      	ldr	r6, [r2, #96]	; 0x60
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80044cc:	9401      	str	r4, [sp, #4]
 80044ce:	4026      	ands	r6, r4
 80044d0:	9603      	str	r6, [sp, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80044d2:	26a0      	movs	r6, #160	; 0xa0
 80044d4:	2400      	movs	r4, #0
 80044d6:	05f6      	lsls	r6, r6, #23
 80044d8:	42b0      	cmp	r0, r6
 80044da:	d00f      	beq.n	80044fc <HAL_GPIO_DeInit+0x64>
 80044dc:	4c24      	ldr	r4, [pc, #144]	; (8004570 <HAL_GPIO_DeInit+0xd8>)
 80044de:	46a4      	mov	ip, r4
 80044e0:	2401      	movs	r4, #1
 80044e2:	4560      	cmp	r0, ip
 80044e4:	d00a      	beq.n	80044fc <HAL_GPIO_DeInit+0x64>
 80044e6:	4c23      	ldr	r4, [pc, #140]	; (8004574 <HAL_GPIO_DeInit+0xdc>)
 80044e8:	46a4      	mov	ip, r4
 80044ea:	2402      	movs	r4, #2
 80044ec:	4560      	cmp	r0, ip
 80044ee:	d005      	beq.n	80044fc <HAL_GPIO_DeInit+0x64>
 80044f0:	4c21      	ldr	r4, [pc, #132]	; (8004578 <HAL_GPIO_DeInit+0xe0>)
 80044f2:	46a4      	mov	ip, r4
 80044f4:	003c      	movs	r4, r7
 80044f6:	4560      	cmp	r0, ip
 80044f8:	d000      	beq.n	80044fc <HAL_GPIO_DeInit+0x64>
 80044fa:	2405      	movs	r4, #5
 80044fc:	40ac      	lsls	r4, r5
 80044fe:	9d03      	ldr	r5, [sp, #12]
 8004500:	42a5      	cmp	r5, r4
 8004502:	d113      	bne.n	800452c <HAL_GPIO_DeInit+0x94>
        EXTI->IMR1 &= ~(iocurrent);
 8004504:	43c9      	mvns	r1, r1
 8004506:	4e1d      	ldr	r6, [pc, #116]	; (800457c <HAL_GPIO_DeInit+0xe4>)
 8004508:	4c18      	ldr	r4, [pc, #96]	; (800456c <HAL_GPIO_DeInit+0xd4>)
 800450a:	6ff5      	ldr	r5, [r6, #124]	; 0x7c
 800450c:	400d      	ands	r5, r1
 800450e:	67f5      	str	r5, [r6, #124]	; 0x7c
        EXTI->EMR1 &= ~(iocurrent);
 8004510:	4e1b      	ldr	r6, [pc, #108]	; (8004580 <HAL_GPIO_DeInit+0xe8>)
 8004512:	6ff5      	ldr	r5, [r6, #124]	; 0x7c
 8004514:	400d      	ands	r5, r1
 8004516:	67f5      	str	r5, [r6, #124]	; 0x7c
        EXTI->RTSR1 &= ~(iocurrent);
 8004518:	6825      	ldr	r5, [r4, #0]
 800451a:	400d      	ands	r5, r1
 800451c:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800451e:	6865      	ldr	r5, [r4, #4]
 8004520:	4029      	ands	r1, r5
 8004522:	6061      	str	r1, [r4, #4]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8004524:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8004526:	9c01      	ldr	r4, [sp, #4]
 8004528:	43a1      	bics	r1, r4
 800452a:	6611      	str	r1, [r2, #96]	; 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800452c:	003c      	movs	r4, r7
 800452e:	0059      	lsls	r1, r3, #1
 8004530:	408c      	lsls	r4, r1
 8004532:	6802      	ldr	r2, [r0, #0]
 8004534:	0021      	movs	r1, r4
 8004536:	4322      	orrs	r2, r4
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004538:	2407      	movs	r4, #7
 800453a:	260f      	movs	r6, #15
 800453c:	401c      	ands	r4, r3
 800453e:	00a4      	lsls	r4, r4, #2
 8004540:	40a6      	lsls	r6, r4
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004542:	43c9      	mvns	r1, r1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004544:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004546:	08da      	lsrs	r2, r3, #3
 8004548:	0092      	lsls	r2, r2, #2
 800454a:	1882      	adds	r2, r0, r2
 800454c:	6a15      	ldr	r5, [r2, #32]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800454e:	9c00      	ldr	r4, [sp, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004550:	43b5      	bics	r5, r6
 8004552:	6215      	str	r5, [r2, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004554:	6882      	ldr	r2, [r0, #8]
 8004556:	400a      	ands	r2, r1
 8004558:	6082      	str	r2, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800455a:	6842      	ldr	r2, [r0, #4]
 800455c:	43a2      	bics	r2, r4
 800455e:	6042      	str	r2, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004560:	68c2      	ldr	r2, [r0, #12]
 8004562:	4011      	ands	r1, r2
 8004564:	60c1      	str	r1, [r0, #12]
    position++;
 8004566:	3301      	adds	r3, #1
 8004568:	e79b      	b.n	80044a2 <HAL_GPIO_DeInit+0xa>
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	40021800 	.word	0x40021800
 8004570:	50000400 	.word	0x50000400
 8004574:	50000800 	.word	0x50000800
 8004578:	50000c00 	.word	0x50000c00
 800457c:	40021804 	.word	0x40021804
 8004580:	40021808 	.word	0x40021808

08004584 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004584:	6900      	ldr	r0, [r0, #16]
 8004586:	4008      	ands	r0, r1
 8004588:	1e41      	subs	r1, r0, #1
 800458a:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800458c:	b2c0      	uxtb	r0, r0
}
 800458e:	4770      	bx	lr

08004590 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004590:	2a00      	cmp	r2, #0
 8004592:	d001      	beq.n	8004598 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004594:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004596:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004598:	6281      	str	r1, [r0, #40]	; 0x28
}
 800459a:	e7fc      	b.n	8004596 <HAL_GPIO_WritePin+0x6>

0800459c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800459c:	6943      	ldr	r3, [r0, #20]
 800459e:	4219      	tst	r1, r3
 80045a0:	d001      	beq.n	80045a6 <HAL_GPIO_TogglePin+0xa>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045a2:	6281      	str	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80045a4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045a6:	6181      	str	r1, [r0, #24]
}
 80045a8:	e7fc      	b.n	80045a4 <HAL_GPIO_TogglePin+0x8>
	...

080045ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045ac:	b570      	push	{r4, r5, r6, lr}
 80045ae:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 80045b0:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80045b2:	2c00      	cmp	r4, #0
 80045b4:	d03f      	beq.n	8004636 <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045b6:	0025      	movs	r5, r4
 80045b8:	3541      	adds	r5, #65	; 0x41
 80045ba:	782b      	ldrb	r3, [r5, #0]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d105      	bne.n	80045ce <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045c2:	0022      	movs	r2, r4
 80045c4:	3240      	adds	r2, #64	; 0x40
 80045c6:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80045c8:	0020      	movs	r0, r4
 80045ca:	f7ff f8ff 	bl	80037cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045ce:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045d0:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80045d2:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80045d4:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045d6:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68a6      	ldr	r6, [r4, #8]
 80045dc:	438a      	bics	r2, r1
 80045de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80045e0:	6861      	ldr	r1, [r4, #4]
 80045e2:	4a1a      	ldr	r2, [pc, #104]	; (800464c <HAL_I2C_Init+0xa0>)
 80045e4:	400a      	ands	r2, r1
 80045e6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80045e8:	6899      	ldr	r1, [r3, #8]
 80045ea:	4a19      	ldr	r2, [pc, #100]	; (8004650 <HAL_I2C_Init+0xa4>)
 80045ec:	4011      	ands	r1, r2
 80045ee:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045f0:	2801      	cmp	r0, #1
 80045f2:	d121      	bne.n	8004638 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045f4:	2180      	movs	r1, #128	; 0x80
 80045f6:	0209      	lsls	r1, r1, #8
 80045f8:	4331      	orrs	r1, r6
 80045fa:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045fc:	6858      	ldr	r0, [r3, #4]
 80045fe:	4915      	ldr	r1, [pc, #84]	; (8004654 <HAL_I2C_Init+0xa8>)
 8004600:	4301      	orrs	r1, r0
 8004602:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004604:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004606:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004608:	400a      	ands	r2, r1
 800460a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800460c:	6961      	ldr	r1, [r4, #20]
 800460e:	6922      	ldr	r2, [r4, #16]
 8004610:	430a      	orrs	r2, r1
 8004612:	69a1      	ldr	r1, [r4, #24]
 8004614:	0209      	lsls	r1, r1, #8
 8004616:	430a      	orrs	r2, r1
 8004618:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800461a:	6a21      	ldr	r1, [r4, #32]
 800461c:	69e2      	ldr	r2, [r4, #28]
 800461e:	430a      	orrs	r2, r1
 8004620:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004622:	2201      	movs	r2, #1
 8004624:	6819      	ldr	r1, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800462a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800462c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800462e:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004630:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004632:	3442      	adds	r4, #66	; 0x42
 8004634:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8004636:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004638:	2184      	movs	r1, #132	; 0x84
 800463a:	0209      	lsls	r1, r1, #8
 800463c:	4331      	orrs	r1, r6
 800463e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004640:	2802      	cmp	r0, #2
 8004642:	d1db      	bne.n	80045fc <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004644:	2180      	movs	r1, #128	; 0x80
 8004646:	0109      	lsls	r1, r1, #4
 8004648:	6059      	str	r1, [r3, #4]
 800464a:	e7d7      	b.n	80045fc <HAL_I2C_Init+0x50>
 800464c:	f0ffffff 	.word	0xf0ffffff
 8004650:	ffff7fff 	.word	0xffff7fff
 8004654:	02008000 	.word	0x02008000

08004658 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004658:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800465a:	0004      	movs	r4, r0
 800465c:	3441      	adds	r4, #65	; 0x41
 800465e:	7822      	ldrb	r2, [r4, #0]
{
 8004660:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004662:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004664:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004666:	2a20      	cmp	r2, #32
 8004668:	d118      	bne.n	800469c <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 800466a:	001d      	movs	r5, r3
 800466c:	3540      	adds	r5, #64	; 0x40
 800466e:	782e      	ldrb	r6, [r5, #0]
 8004670:	2e01      	cmp	r6, #1
 8004672:	d013      	beq.n	800469c <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8004674:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004676:	3022      	adds	r0, #34	; 0x22
 8004678:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800467a:	681e      	ldr	r6, [r3, #0]
 800467c:	3823      	subs	r0, #35	; 0x23
 800467e:	4386      	bics	r6, r0
 8004680:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004682:	681e      	ldr	r6, [r3, #0]
 8004684:	4f06      	ldr	r7, [pc, #24]	; (80046a0 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8004686:	403e      	ands	r6, r7
 8004688:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800468a:	681e      	ldr	r6, [r3, #0]
 800468c:	4331      	orrs	r1, r6
 800468e:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8004690:	6819      	ldr	r1, [r3, #0]
 8004692:	4308      	orrs	r0, r1
 8004694:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8004696:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004698:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800469a:	7028      	strb	r0, [r5, #0]
  }
}
 800469c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	ffffefff 	.word	0xffffefff

080046a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046a4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046a6:	0005      	movs	r5, r0
 80046a8:	3541      	adds	r5, #65	; 0x41
 80046aa:	782a      	ldrb	r2, [r5, #0]
{
 80046ac:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ae:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80046b0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80046b2:	2a20      	cmp	r2, #32
 80046b4:	d117      	bne.n	80046e6 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 80046b6:	001c      	movs	r4, r3
 80046b8:	3440      	adds	r4, #64	; 0x40
 80046ba:	7826      	ldrb	r6, [r4, #0]
 80046bc:	2e01      	cmp	r6, #1
 80046be:	d012      	beq.n	80046e6 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 80046c0:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80046c2:	3022      	adds	r0, #34	; 0x22
 80046c4:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 80046c6:	681e      	ldr	r6, [r3, #0]
 80046c8:	3823      	subs	r0, #35	; 0x23
 80046ca:	4386      	bics	r6, r0
 80046cc:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80046ce:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80046d0:	4f05      	ldr	r7, [pc, #20]	; (80046e8 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 80046d2:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80046d4:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80046d6:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80046d8:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80046da:	6819      	ldr	r1, [r3, #0]
 80046dc:	4308      	orrs	r0, r1
 80046de:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80046e0:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80046e2:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80046e4:	7020      	strb	r0, [r4, #0]
  }
}
 80046e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046e8:	fffff0ff 	.word	0xfffff0ff

080046ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046ec:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80046ee:	4c10      	ldr	r4, [pc, #64]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0x44>)
 80046f0:	4910      	ldr	r1, [pc, #64]	; (8004734 <HAL_PWREx_ControlVoltageScaling+0x48>)
 80046f2:	6823      	ldr	r3, [r4, #0]
{
 80046f4:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80046f6:	400b      	ands	r3, r1
 80046f8:	4303      	orrs	r3, r0
 80046fa:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046fc:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80046fe:	2000      	movs	r0, #0
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	429a      	cmp	r2, r3
 8004704:	d10c      	bne.n	8004720 <HAL_PWREx_ControlVoltageScaling+0x34>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8004706:	4b0c      	ldr	r3, [pc, #48]	; (8004738 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8004708:	490c      	ldr	r1, [pc, #48]	; (800473c <HAL_PWREx_ControlVoltageScaling+0x50>)
 800470a:	6818      	ldr	r0, [r3, #0]
 800470c:	2306      	movs	r3, #6
 800470e:	4358      	muls	r0, r3
 8004710:	f7fb fd26 	bl	8000160 <__udivsi3>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004714:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8004716:	1c43      	adds	r3, r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004718:	00d2      	lsls	r2, r2, #3
 800471a:	6960      	ldr	r0, [r4, #20]
 800471c:	4010      	ands	r0, r2
 800471e:	d100      	bne.n	8004722 <HAL_PWREx_ControlVoltageScaling+0x36>
}
 8004720:	bd10      	pop	{r4, pc}
      if(wait_loop_index != 0U)
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_PWREx_ControlVoltageScaling+0x3e>
        wait_loop_index--;
 8004726:	3b01      	subs	r3, #1
 8004728:	e7f7      	b.n	800471a <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 800472a:	2003      	movs	r0, #3
 800472c:	e7f8      	b.n	8004720 <HAL_PWREx_ControlVoltageScaling+0x34>
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	40007000 	.word	0x40007000
 8004734:	fffff9ff 	.word	0xfffff9ff
 8004738:	20000004 	.word	0x20000004
 800473c:	000f4240 	.word	0x000f4240

08004740 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004742:	0004      	movs	r4, r0
 8004744:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004746:	2800      	cmp	r0, #0
 8004748:	d102      	bne.n	8004750 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800474a:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 800474c:	b005      	add	sp, #20
 800474e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004750:	6803      	ldr	r3, [r0, #0]
 8004752:	07db      	lsls	r3, r3, #31
 8004754:	d410      	bmi.n	8004778 <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	079b      	lsls	r3, r3, #30
 800475a:	d45c      	bmi.n	8004816 <HAL_RCC_OscConfig+0xd6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	071b      	lsls	r3, r3, #28
 8004760:	d500      	bpl.n	8004764 <HAL_RCC_OscConfig+0x24>
 8004762:	e0c2      	b.n	80048ea <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	075b      	lsls	r3, r3, #29
 8004768:	d500      	bpl.n	800476c <HAL_RCC_OscConfig+0x2c>
 800476a:	e0f4      	b.n	8004956 <HAL_RCC_OscConfig+0x216>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800476c:	69e2      	ldr	r2, [r4, #28]
 800476e:	2a00      	cmp	r2, #0
 8004770:	d000      	beq.n	8004774 <HAL_RCC_OscConfig+0x34>
 8004772:	e173      	b.n	8004a5c <HAL_RCC_OscConfig+0x31c>
  return HAL_OK;
 8004774:	2000      	movs	r0, #0
 8004776:	e7e9      	b.n	800474c <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004778:	2238      	movs	r2, #56	; 0x38
 800477a:	4dac      	ldr	r5, [pc, #688]	; (8004a2c <HAL_RCC_OscConfig+0x2ec>)
 800477c:	68ab      	ldr	r3, [r5, #8]
 800477e:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004780:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004782:	2b10      	cmp	r3, #16
 8004784:	d109      	bne.n	800479a <HAL_RCC_OscConfig+0x5a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004786:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004788:	0793      	lsls	r3, r2, #30
 800478a:	d108      	bne.n	800479e <HAL_RCC_OscConfig+0x5e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800478c:	682b      	ldr	r3, [r5, #0]
 800478e:	039b      	lsls	r3, r3, #14
 8004790:	d5e1      	bpl.n	8004756 <HAL_RCC_OscConfig+0x16>
 8004792:	6863      	ldr	r3, [r4, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1de      	bne.n	8004756 <HAL_RCC_OscConfig+0x16>
 8004798:	e7d7      	b.n	800474a <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800479a:	2b08      	cmp	r3, #8
 800479c:	d0f6      	beq.n	800478c <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800479e:	2280      	movs	r2, #128	; 0x80
 80047a0:	6863      	ldr	r3, [r4, #4]
 80047a2:	0252      	lsls	r2, r2, #9
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d111      	bne.n	80047cc <HAL_RCC_OscConfig+0x8c>
 80047a8:	682a      	ldr	r2, [r5, #0]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80047ae:	f7ff fb1f 	bl	8003df0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047b2:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80047b4:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047b6:	02b6      	lsls	r6, r6, #10
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	4233      	tst	r3, r6
 80047bc:	d1cb      	bne.n	8004756 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047be:	f7ff fb17 	bl	8003df0 <HAL_GetTick>
 80047c2:	1bc0      	subs	r0, r0, r7
 80047c4:	2864      	cmp	r0, #100	; 0x64
 80047c6:	d9f7      	bls.n	80047b8 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80047c8:	2003      	movs	r0, #3
 80047ca:	e7bf      	b.n	800474c <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047cc:	21a0      	movs	r1, #160	; 0xa0
 80047ce:	02c9      	lsls	r1, r1, #11
 80047d0:	428b      	cmp	r3, r1
 80047d2:	d108      	bne.n	80047e6 <HAL_RCC_OscConfig+0xa6>
 80047d4:	2380      	movs	r3, #128	; 0x80
 80047d6:	6829      	ldr	r1, [r5, #0]
 80047d8:	02db      	lsls	r3, r3, #11
 80047da:	430b      	orrs	r3, r1
 80047dc:	602b      	str	r3, [r5, #0]
 80047de:	682b      	ldr	r3, [r5, #0]
 80047e0:	431a      	orrs	r2, r3
 80047e2:	602a      	str	r2, [r5, #0]
 80047e4:	e7e3      	b.n	80047ae <HAL_RCC_OscConfig+0x6e>
 80047e6:	682a      	ldr	r2, [r5, #0]
 80047e8:	4991      	ldr	r1, [pc, #580]	; (8004a30 <HAL_RCC_OscConfig+0x2f0>)
 80047ea:	400a      	ands	r2, r1
 80047ec:	602a      	str	r2, [r5, #0]
 80047ee:	682a      	ldr	r2, [r5, #0]
 80047f0:	4990      	ldr	r1, [pc, #576]	; (8004a34 <HAL_RCC_OscConfig+0x2f4>)
 80047f2:	400a      	ands	r2, r1
 80047f4:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1d9      	bne.n	80047ae <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 80047fa:	f7ff faf9 	bl	8003df0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047fe:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8004800:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004802:	02b6      	lsls	r6, r6, #10
 8004804:	682b      	ldr	r3, [r5, #0]
 8004806:	4233      	tst	r3, r6
 8004808:	d0a5      	beq.n	8004756 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800480a:	f7ff faf1 	bl	8003df0 <HAL_GetTick>
 800480e:	1bc0      	subs	r0, r0, r7
 8004810:	2864      	cmp	r0, #100	; 0x64
 8004812:	d9f7      	bls.n	8004804 <HAL_RCC_OscConfig+0xc4>
 8004814:	e7d8      	b.n	80047c8 <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004816:	2338      	movs	r3, #56	; 0x38
 8004818:	4d84      	ldr	r5, [pc, #528]	; (8004a2c <HAL_RCC_OscConfig+0x2ec>)
 800481a:	68aa      	ldr	r2, [r5, #8]
 800481c:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800481e:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004820:	2b10      	cmp	r3, #16
 8004822:	d129      	bne.n	8004878 <HAL_RCC_OscConfig+0x138>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004824:	2103      	movs	r1, #3
 8004826:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004828:	2a02      	cmp	r2, #2
 800482a:	d127      	bne.n	800487c <HAL_RCC_OscConfig+0x13c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800482c:	682a      	ldr	r2, [r5, #0]
 800482e:	0552      	lsls	r2, r2, #21
 8004830:	d503      	bpl.n	800483a <HAL_RCC_OscConfig+0xfa>
 8004832:	68e2      	ldr	r2, [r4, #12]
 8004834:	2a00      	cmp	r2, #0
 8004836:	d100      	bne.n	800483a <HAL_RCC_OscConfig+0xfa>
 8004838:	e787      	b.n	800474a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483a:	6869      	ldr	r1, [r5, #4]
 800483c:	6962      	ldr	r2, [r4, #20]
 800483e:	487e      	ldr	r0, [pc, #504]	; (8004a38 <HAL_RCC_OscConfig+0x2f8>)
 8004840:	0212      	lsls	r2, r2, #8
 8004842:	4001      	ands	r1, r0
 8004844:	430a      	orrs	r2, r1
 8004846:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10d      	bne.n	8004868 <HAL_RCC_OscConfig+0x128>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800484c:	682b      	ldr	r3, [r5, #0]
 800484e:	4a7b      	ldr	r2, [pc, #492]	; (8004a3c <HAL_RCC_OscConfig+0x2fc>)
 8004850:	4013      	ands	r3, r2
 8004852:	6922      	ldr	r2, [r4, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004858:	682b      	ldr	r3, [r5, #0]
 800485a:	4a79      	ldr	r2, [pc, #484]	; (8004a40 <HAL_RCC_OscConfig+0x300>)
 800485c:	049b      	lsls	r3, r3, #18
 800485e:	0f5b      	lsrs	r3, r3, #29
 8004860:	40da      	lsrs	r2, r3
 8004862:	0013      	movs	r3, r2
 8004864:	4a77      	ldr	r2, [pc, #476]	; (8004a44 <HAL_RCC_OscConfig+0x304>)
 8004866:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004868:	4b77      	ldr	r3, [pc, #476]	; (8004a48 <HAL_RCC_OscConfig+0x308>)
 800486a:	6818      	ldr	r0, [r3, #0]
 800486c:	f7ff f94a 	bl	8003b04 <HAL_InitTick>
 8004870:	2800      	cmp	r0, #0
 8004872:	d100      	bne.n	8004876 <HAL_RCC_OscConfig+0x136>
 8004874:	e772      	b.n	800475c <HAL_RCC_OscConfig+0x1c>
 8004876:	e768      	b.n	800474a <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0d7      	beq.n	800482c <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800487c:	68e3      	ldr	r3, [r4, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d020      	beq.n	80048c4 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004882:	682b      	ldr	r3, [r5, #0]
 8004884:	4a6d      	ldr	r2, [pc, #436]	; (8004a3c <HAL_RCC_OscConfig+0x2fc>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004886:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004888:	4013      	ands	r3, r2
 800488a:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800488c:	00f6      	lsls	r6, r6, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800488e:	4313      	orrs	r3, r2
 8004890:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8004892:	2380      	movs	r3, #128	; 0x80
 8004894:	682a      	ldr	r2, [r5, #0]
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	4313      	orrs	r3, r2
 800489a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800489c:	f7ff faa8 	bl	8003df0 <HAL_GetTick>
 80048a0:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048a2:	682b      	ldr	r3, [r5, #0]
 80048a4:	4233      	tst	r3, r6
 80048a6:	d007      	beq.n	80048b8 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a8:	686a      	ldr	r2, [r5, #4]
 80048aa:	6963      	ldr	r3, [r4, #20]
 80048ac:	4962      	ldr	r1, [pc, #392]	; (8004a38 <HAL_RCC_OscConfig+0x2f8>)
 80048ae:	021b      	lsls	r3, r3, #8
 80048b0:	400a      	ands	r2, r1
 80048b2:	4313      	orrs	r3, r2
 80048b4:	606b      	str	r3, [r5, #4]
 80048b6:	e751      	b.n	800475c <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048b8:	f7ff fa9a 	bl	8003df0 <HAL_GetTick>
 80048bc:	1bc0      	subs	r0, r0, r7
 80048be:	2802      	cmp	r0, #2
 80048c0:	d9ef      	bls.n	80048a2 <HAL_RCC_OscConfig+0x162>
 80048c2:	e781      	b.n	80047c8 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 80048c4:	682b      	ldr	r3, [r5, #0]
 80048c6:	4a61      	ldr	r2, [pc, #388]	; (8004a4c <HAL_RCC_OscConfig+0x30c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048c8:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 80048ca:	4013      	ands	r3, r2
 80048cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80048ce:	f7ff fa8f 	bl	8003df0 <HAL_GetTick>
 80048d2:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048d4:	00f6      	lsls	r6, r6, #3
 80048d6:	682b      	ldr	r3, [r5, #0]
 80048d8:	4233      	tst	r3, r6
 80048da:	d100      	bne.n	80048de <HAL_RCC_OscConfig+0x19e>
 80048dc:	e73e      	b.n	800475c <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048de:	f7ff fa87 	bl	8003df0 <HAL_GetTick>
 80048e2:	1bc0      	subs	r0, r0, r7
 80048e4:	2802      	cmp	r0, #2
 80048e6:	d9f6      	bls.n	80048d6 <HAL_RCC_OscConfig+0x196>
 80048e8:	e76e      	b.n	80047c8 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80048ea:	2138      	movs	r1, #56	; 0x38
 80048ec:	4b4f      	ldr	r3, [pc, #316]	; (8004a2c <HAL_RCC_OscConfig+0x2ec>)
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	001d      	movs	r5, r3
 80048f2:	400a      	ands	r2, r1
 80048f4:	2a18      	cmp	r2, #24
 80048f6:	d108      	bne.n	800490a <HAL_RCC_OscConfig+0x1ca>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80048f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048fa:	079b      	lsls	r3, r3, #30
 80048fc:	d400      	bmi.n	8004900 <HAL_RCC_OscConfig+0x1c0>
 80048fe:	e731      	b.n	8004764 <HAL_RCC_OscConfig+0x24>
 8004900:	69a3      	ldr	r3, [r4, #24]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d000      	beq.n	8004908 <HAL_RCC_OscConfig+0x1c8>
 8004906:	e72d      	b.n	8004764 <HAL_RCC_OscConfig+0x24>
 8004908:	e71f      	b.n	800474a <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800490a:	69a2      	ldr	r2, [r4, #24]
 800490c:	2301      	movs	r3, #1
 800490e:	2a00      	cmp	r2, #0
 8004910:	d010      	beq.n	8004934 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_LSI_ENABLE();
 8004912:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004914:	2602      	movs	r6, #2
        __HAL_RCC_LSI_ENABLE();
 8004916:	4313      	orrs	r3, r2
 8004918:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 800491a:	f7ff fa69 	bl	8003df0 <HAL_GetTick>
 800491e:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004920:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8004922:	4233      	tst	r3, r6
 8004924:	d000      	beq.n	8004928 <HAL_RCC_OscConfig+0x1e8>
 8004926:	e71d      	b.n	8004764 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004928:	f7ff fa62 	bl	8003df0 <HAL_GetTick>
 800492c:	1bc0      	subs	r0, r0, r7
 800492e:	2802      	cmp	r0, #2
 8004930:	d9f6      	bls.n	8004920 <HAL_RCC_OscConfig+0x1e0>
 8004932:	e749      	b.n	80047c8 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_LSI_DISABLE();
 8004934:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004936:	2602      	movs	r6, #2
        __HAL_RCC_LSI_DISABLE();
 8004938:	439a      	bics	r2, r3
 800493a:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 800493c:	f7ff fa58 	bl	8003df0 <HAL_GetTick>
 8004940:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004942:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8004944:	4233      	tst	r3, r6
 8004946:	d100      	bne.n	800494a <HAL_RCC_OscConfig+0x20a>
 8004948:	e70c      	b.n	8004764 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800494a:	f7ff fa51 	bl	8003df0 <HAL_GetTick>
 800494e:	1bc0      	subs	r0, r0, r7
 8004950:	2802      	cmp	r0, #2
 8004952:	d9f6      	bls.n	8004942 <HAL_RCC_OscConfig+0x202>
 8004954:	e738      	b.n	80047c8 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004956:	2138      	movs	r1, #56	; 0x38
 8004958:	4b34      	ldr	r3, [pc, #208]	; (8004a2c <HAL_RCC_OscConfig+0x2ec>)
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	001d      	movs	r5, r3
 800495e:	400a      	ands	r2, r1
 8004960:	2a20      	cmp	r2, #32
 8004962:	d108      	bne.n	8004976 <HAL_RCC_OscConfig+0x236>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004966:	079b      	lsls	r3, r3, #30
 8004968:	d400      	bmi.n	800496c <HAL_RCC_OscConfig+0x22c>
 800496a:	e6ff      	b.n	800476c <HAL_RCC_OscConfig+0x2c>
 800496c:	68a3      	ldr	r3, [r4, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d000      	beq.n	8004974 <HAL_RCC_OscConfig+0x234>
 8004972:	e6fb      	b.n	800476c <HAL_RCC_OscConfig+0x2c>
 8004974:	e6e9      	b.n	800474a <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004976:	2280      	movs	r2, #128	; 0x80
 8004978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497a:	0552      	lsls	r2, r2, #21
 800497c:	4213      	tst	r3, r2
 800497e:	d100      	bne.n	8004982 <HAL_RCC_OscConfig+0x242>
 8004980:	e0ed      	b.n	8004b5e <HAL_RCC_OscConfig+0x41e>
    FlagStatus       pwrclkchanged = RESET;
 8004982:	2300      	movs	r3, #0
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004984:	2780      	movs	r7, #128	; 0x80
 8004986:	4e32      	ldr	r6, [pc, #200]	; (8004a50 <HAL_RCC_OscConfig+0x310>)
    FlagStatus       pwrclkchanged = RESET;
 8004988:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800498a:	6833      	ldr	r3, [r6, #0]
 800498c:	007f      	lsls	r7, r7, #1
 800498e:	423b      	tst	r3, r7
 8004990:	d015      	beq.n	80049be <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004992:	68a3      	ldr	r3, [r4, #8]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d122      	bne.n	80049de <HAL_RCC_OscConfig+0x29e>
 8004998:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800499a:	4313      	orrs	r3, r2
 800499c:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 800499e:	f7ff fa27 	bl	8003df0 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049a2:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80049a4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049a6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80049a8:	423b      	tst	r3, r7
 80049aa:	d038      	beq.n	8004a1e <HAL_RCC_OscConfig+0x2de>
      if (pwrclkchanged == SET)
 80049ac:	9b00      	ldr	r3, [sp, #0]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d000      	beq.n	80049b4 <HAL_RCC_OscConfig+0x274>
 80049b2:	e6db      	b.n	800476c <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 80049b4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80049b6:	4a27      	ldr	r2, [pc, #156]	; (8004a54 <HAL_RCC_OscConfig+0x314>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	63eb      	str	r3, [r5, #60]	; 0x3c
 80049bc:	e6d6      	b.n	800476c <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049be:	6833      	ldr	r3, [r6, #0]
 80049c0:	433b      	orrs	r3, r7
 80049c2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80049c4:	f7ff fa14 	bl	8003df0 <HAL_GetTick>
 80049c8:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ca:	6833      	ldr	r3, [r6, #0]
 80049cc:	423b      	tst	r3, r7
 80049ce:	d1e0      	bne.n	8004992 <HAL_RCC_OscConfig+0x252>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d0:	f7ff fa0e 	bl	8003df0 <HAL_GetTick>
 80049d4:	9b01      	ldr	r3, [sp, #4]
 80049d6:	1ac0      	subs	r0, r0, r3
 80049d8:	2802      	cmp	r0, #2
 80049da:	d9f6      	bls.n	80049ca <HAL_RCC_OscConfig+0x28a>
 80049dc:	e6f4      	b.n	80047c8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049de:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80049e0:	2b05      	cmp	r3, #5
 80049e2:	d105      	bne.n	80049f0 <HAL_RCC_OscConfig+0x2b0>
 80049e4:	3b01      	subs	r3, #1
 80049e6:	4313      	orrs	r3, r2
 80049e8:	65eb      	str	r3, [r5, #92]	; 0x5c
 80049ea:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80049ec:	2301      	movs	r3, #1
 80049ee:	e7d4      	b.n	800499a <HAL_RCC_OscConfig+0x25a>
 80049f0:	2101      	movs	r1, #1
 80049f2:	438a      	bics	r2, r1
 80049f4:	65ea      	str	r2, [r5, #92]	; 0x5c
 80049f6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80049f8:	3103      	adds	r1, #3
 80049fa:	438a      	bics	r2, r1
 80049fc:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1cd      	bne.n	800499e <HAL_RCC_OscConfig+0x25e>
        tickstart = HAL_GetTick();
 8004a02:	f7ff f9f5 	bl	8003df0 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a06:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8004a08:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a0a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8004a0c:	423b      	tst	r3, r7
 8004a0e:	d0cd      	beq.n	80049ac <HAL_RCC_OscConfig+0x26c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a10:	f7ff f9ee 	bl	8003df0 <HAL_GetTick>
 8004a14:	4b10      	ldr	r3, [pc, #64]	; (8004a58 <HAL_RCC_OscConfig+0x318>)
 8004a16:	1b80      	subs	r0, r0, r6
 8004a18:	4298      	cmp	r0, r3
 8004a1a:	d9f6      	bls.n	8004a0a <HAL_RCC_OscConfig+0x2ca>
 8004a1c:	e6d4      	b.n	80047c8 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a1e:	f7ff f9e7 	bl	8003df0 <HAL_GetTick>
 8004a22:	4b0d      	ldr	r3, [pc, #52]	; (8004a58 <HAL_RCC_OscConfig+0x318>)
 8004a24:	1b80      	subs	r0, r0, r6
 8004a26:	4298      	cmp	r0, r3
 8004a28:	d9bd      	bls.n	80049a6 <HAL_RCC_OscConfig+0x266>
 8004a2a:	e6cd      	b.n	80047c8 <HAL_RCC_OscConfig+0x88>
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	fffeffff 	.word	0xfffeffff
 8004a34:	fffbffff 	.word	0xfffbffff
 8004a38:	ffff80ff 	.word	0xffff80ff
 8004a3c:	ffffc7ff 	.word	0xffffc7ff
 8004a40:	00f42400 	.word	0x00f42400
 8004a44:	20000004 	.word	0x20000004
 8004a48:	2000000c 	.word	0x2000000c
 8004a4c:	fffffeff 	.word	0xfffffeff
 8004a50:	40007000 	.word	0x40007000
 8004a54:	efffffff 	.word	0xefffffff
 8004a58:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a5c:	2038      	movs	r0, #56	; 0x38
 8004a5e:	4b44      	ldr	r3, [pc, #272]	; (8004b70 <HAL_RCC_OscConfig+0x430>)
 8004a60:	6899      	ldr	r1, [r3, #8]
 8004a62:	001d      	movs	r5, r3
 8004a64:	4001      	ands	r1, r0
 8004a66:	2910      	cmp	r1, #16
 8004a68:	d052      	beq.n	8004b10 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_DISABLE();
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4941      	ldr	r1, [pc, #260]	; (8004b74 <HAL_RCC_OscConfig+0x434>)
 8004a6e:	400b      	ands	r3, r1
 8004a70:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a72:	2a02      	cmp	r2, #2
 8004a74:	d135      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x3a2>
        tickstart = HAL_GetTick();
 8004a76:	f7ff f9bb 	bl	8003df0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a7a:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8004a7c:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a7e:	04b6      	lsls	r6, r6, #18
 8004a80:	682b      	ldr	r3, [r5, #0]
 8004a82:	4233      	tst	r3, r6
 8004a84:	d127      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x396>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a86:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004a88:	6a23      	ldr	r3, [r4, #32]
 8004a8a:	68ea      	ldr	r2, [r5, #12]
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	493a      	ldr	r1, [pc, #232]	; (8004b78 <HAL_RCC_OscConfig+0x438>)
 8004a90:	400a      	ands	r2, r1
 8004a92:	4313      	orrs	r3, r2
 8004a94:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004a96:	4313      	orrs	r3, r2
 8004a98:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a9e:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004aa0:	0212      	lsls	r2, r2, #8
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8004aa6:	2380      	movs	r3, #128	; 0x80
 8004aa8:	682a      	ldr	r2, [r5, #0]
 8004aaa:	045b      	lsls	r3, r3, #17
 8004aac:	4313      	orrs	r3, r2
 8004aae:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004ab0:	2380      	movs	r3, #128	; 0x80
 8004ab2:	68ea      	ldr	r2, [r5, #12]
 8004ab4:	055b      	lsls	r3, r3, #21
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8004aba:	f7ff f999 	bl	8003df0 <HAL_GetTick>
 8004abe:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ac0:	04a4      	lsls	r4, r4, #18
 8004ac2:	682b      	ldr	r3, [r5, #0]
 8004ac4:	4223      	tst	r3, r4
 8004ac6:	d000      	beq.n	8004aca <HAL_RCC_OscConfig+0x38a>
 8004ac8:	e654      	b.n	8004774 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aca:	f7ff f991 	bl	8003df0 <HAL_GetTick>
 8004ace:	1b80      	subs	r0, r0, r6
 8004ad0:	2802      	cmp	r0, #2
 8004ad2:	d9f6      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x382>
 8004ad4:	e678      	b.n	80047c8 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad6:	f7ff f98b 	bl	8003df0 <HAL_GetTick>
 8004ada:	1bc0      	subs	r0, r0, r7
 8004adc:	2802      	cmp	r0, #2
 8004ade:	d9cf      	bls.n	8004a80 <HAL_RCC_OscConfig+0x340>
 8004ae0:	e672      	b.n	80047c8 <HAL_RCC_OscConfig+0x88>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004ae2:	2203      	movs	r2, #3
 8004ae4:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ae6:	2480      	movs	r4, #128	; 0x80
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004ae8:	4393      	bics	r3, r2
 8004aea:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004aec:	68eb      	ldr	r3, [r5, #12]
 8004aee:	4a23      	ldr	r2, [pc, #140]	; (8004b7c <HAL_RCC_OscConfig+0x43c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004af0:	04a4      	lsls	r4, r4, #18
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004af2:	4013      	ands	r3, r2
 8004af4:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8004af6:	f7ff f97b 	bl	8003df0 <HAL_GetTick>
 8004afa:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004afc:	682b      	ldr	r3, [r5, #0]
 8004afe:	4223      	tst	r3, r4
 8004b00:	d100      	bne.n	8004b04 <HAL_RCC_OscConfig+0x3c4>
 8004b02:	e637      	b.n	8004774 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b04:	f7ff f974 	bl	8003df0 <HAL_GetTick>
 8004b08:	1b80      	subs	r0, r0, r6
 8004b0a:	2802      	cmp	r0, #2
 8004b0c:	d9f6      	bls.n	8004afc <HAL_RCC_OscConfig+0x3bc>
 8004b0e:	e65b      	b.n	80047c8 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b10:	2a01      	cmp	r2, #1
 8004b12:	d100      	bne.n	8004b16 <HAL_RCC_OscConfig+0x3d6>
 8004b14:	e619      	b.n	800474a <HAL_RCC_OscConfig+0xa>
        temp_pllckcfg = RCC->PLLCFGR;
 8004b16:	68d8      	ldr	r0, [r3, #12]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b18:	2303      	movs	r3, #3
 8004b1a:	6a22      	ldr	r2, [r4, #32]
 8004b1c:	4003      	ands	r3, r0
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d000      	beq.n	8004b24 <HAL_RCC_OscConfig+0x3e4>
 8004b22:	e612      	b.n	800474a <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b24:	2370      	movs	r3, #112	; 0x70
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b26:	6a62      	ldr	r2, [r4, #36]	; 0x24
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b28:	4003      	ands	r3, r0
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d000      	beq.n	8004b30 <HAL_RCC_OscConfig+0x3f0>
 8004b2e:	e60c      	b.n	800474a <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b30:	22fe      	movs	r2, #254	; 0xfe
 8004b32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b34:	01d2      	lsls	r2, r2, #7
 8004b36:	4002      	ands	r2, r0
 8004b38:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d000      	beq.n	8004b40 <HAL_RCC_OscConfig+0x400>
 8004b3e:	e604      	b.n	800474a <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b40:	23f8      	movs	r3, #248	; 0xf8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b42:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b44:	039b      	lsls	r3, r3, #14
 8004b46:	4003      	ands	r3, r0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d000      	beq.n	8004b4e <HAL_RCC_OscConfig+0x40e>
 8004b4c:	e5fd      	b.n	800474a <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004b50:	0f40      	lsrs	r0, r0, #29
 8004b52:	0740      	lsls	r0, r0, #29
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b54:	1ac0      	subs	r0, r0, r3
 8004b56:	1e43      	subs	r3, r0, #1
 8004b58:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8004b5a:	b2c0      	uxtb	r0, r0
 8004b5c:	e5f6      	b.n	800474c <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_PWR_CLK_ENABLE();
 8004b5e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004b60:	4313      	orrs	r3, r2
 8004b62:	63eb      	str	r3, [r5, #60]	; 0x3c
 8004b64:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004b66:	4013      	ands	r3, r2
 8004b68:	9303      	str	r3, [sp, #12]
 8004b6a:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e709      	b.n	8004984 <HAL_RCC_OscConfig+0x244>
 8004b70:	40021000 	.word	0x40021000
 8004b74:	feffffff 	.word	0xfeffffff
 8004b78:	1fc1808c 	.word	0x1fc1808c
 8004b7c:	effeffff 	.word	0xeffeffff

08004b80 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b80:	2338      	movs	r3, #56	; 0x38
 8004b82:	4a1f      	ldr	r2, [pc, #124]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x80>)
{
 8004b84:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b86:	6891      	ldr	r1, [r2, #8]
 8004b88:	0014      	movs	r4, r2
 8004b8a:	4219      	tst	r1, r3
 8004b8c:	d108      	bne.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x20>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004b8e:	2101      	movs	r1, #1
 8004b90:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004b92:	481c      	ldr	r0, [pc, #112]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x84>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004b94:	049b      	lsls	r3, r3, #18
 8004b96:	0f5b      	lsrs	r3, r3, #29
 8004b98:	4099      	lsls	r1, r3
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
        break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
    sysclockfreq = pllvco / pllr;
 8004b9a:	f7fb fae1 	bl	8000160 <__udivsi3>
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ba0:	6891      	ldr	r1, [r2, #8]
 8004ba2:	4019      	ands	r1, r3
 8004ba4:	2908      	cmp	r1, #8
 8004ba6:	d025      	beq.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004ba8:	6891      	ldr	r1, [r2, #8]
 8004baa:	4019      	ands	r1, r3
 8004bac:	2910      	cmp	r1, #16
 8004bae:	d115      	bne.n	8004bdc <HAL_RCC_GetSysClockFreq+0x5c>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004bb0:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bb2:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	227f      	movs	r2, #127	; 0x7f
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bb8:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bba:	0649      	lsls	r1, r1, #25
 8004bbc:	0f49      	lsrs	r1, r1, #29
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bbe:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bc0:	3101      	adds	r1, #1
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bc2:	4015      	ands	r5, r2
    switch (pllsource)
 8004bc4:	079b      	lsls	r3, r3, #30
 8004bc6:	d107      	bne.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x58>
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bc8:	480f      	ldr	r0, [pc, #60]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004bca:	f7fb fac9 	bl	8000160 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004bce:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004bd0:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004bd2:	0f49      	lsrs	r1, r1, #29
 8004bd4:	3101      	adds	r1, #1
 8004bd6:	e7e0      	b.n	8004b9a <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004bd8:	480a      	ldr	r0, [pc, #40]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x84>)
 8004bda:	e7f6      	b.n	8004bca <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004bdc:	6891      	ldr	r1, [r2, #8]
 8004bde:	4019      	ands	r1, r3
 8004be0:	2920      	cmp	r1, #32
 8004be2:	d009      	beq.n	8004bf8 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004be4:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 8004be6:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004be8:	4013      	ands	r3, r2
 8004bea:	2b18      	cmp	r3, #24
 8004bec:	d1d7      	bne.n	8004b9e <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSI_VALUE;
 8004bee:	20fa      	movs	r0, #250	; 0xfa
 8004bf0:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 8004bf2:	e7d4      	b.n	8004b9e <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = HSE_VALUE;
 8004bf4:	4804      	ldr	r0, [pc, #16]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x88>)
 8004bf6:	e7d2      	b.n	8004b9e <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSE_VALUE;
 8004bf8:	2080      	movs	r0, #128	; 0x80
 8004bfa:	0200      	lsls	r0, r0, #8
 8004bfc:	e7cf      	b.n	8004b9e <HAL_RCC_GetSysClockFreq+0x1e>
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	40021000 	.word	0x40021000
 8004c04:	00f42400 	.word	0x00f42400
 8004c08:	007a1200 	.word	0x007a1200

08004c0c <HAL_RCC_ClockConfig>:
{
 8004c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c0e:	0005      	movs	r5, r0
 8004c10:	000e      	movs	r6, r1
  if (RCC_ClkInitStruct == NULL)
 8004c12:	2800      	cmp	r0, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8004c16:	2001      	movs	r0, #1
}
 8004c18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c1a:	2707      	movs	r7, #7
 8004c1c:	4c4a      	ldr	r4, [pc, #296]	; (8004d48 <HAL_RCC_ClockConfig+0x13c>)
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	403b      	ands	r3, r7
 8004c22:	428b      	cmp	r3, r1
 8004c24:	d32a      	bcc.n	8004c7c <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c26:	6829      	ldr	r1, [r5, #0]
 8004c28:	078b      	lsls	r3, r1, #30
 8004c2a:	d43b      	bmi.n	8004ca4 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c2c:	07cb      	lsls	r3, r1, #31
 8004c2e:	d448      	bmi.n	8004cc2 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c30:	2707      	movs	r7, #7
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	403b      	ands	r3, r7
 8004c36:	429e      	cmp	r6, r3
 8004c38:	d20a      	bcs.n	8004c50 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	43bb      	bics	r3, r7
 8004c3e:	4333      	orrs	r3, r6
 8004c40:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8004c42:	f7ff f8d5 	bl	8003df0 <HAL_GetTick>
 8004c46:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	403b      	ands	r3, r7
 8004c4c:	429e      	cmp	r6, r3
 8004c4e:	d16b      	bne.n	8004d28 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c50:	682b      	ldr	r3, [r5, #0]
 8004c52:	4c3e      	ldr	r4, [pc, #248]	; (8004d4c <HAL_RCC_ClockConfig+0x140>)
 8004c54:	075b      	lsls	r3, r3, #29
 8004c56:	d46f      	bmi.n	8004d38 <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004c58:	f7ff ff92 	bl	8004b80 <HAL_RCC_GetSysClockFreq>
 8004c5c:	68a3      	ldr	r3, [r4, #8]
 8004c5e:	4a3c      	ldr	r2, [pc, #240]	; (8004d50 <HAL_RCC_ClockConfig+0x144>)
 8004c60:	051b      	lsls	r3, r3, #20
 8004c62:	0f1b      	lsrs	r3, r3, #28
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	589b      	ldr	r3, [r3, r2]
 8004c68:	221f      	movs	r2, #31
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	40d8      	lsrs	r0, r3
 8004c6e:	4b39      	ldr	r3, [pc, #228]	; (8004d54 <HAL_RCC_ClockConfig+0x148>)
 8004c70:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8004c72:	4b39      	ldr	r3, [pc, #228]	; (8004d58 <HAL_RCC_ClockConfig+0x14c>)
 8004c74:	6818      	ldr	r0, [r3, #0]
 8004c76:	f7fe ff45 	bl	8003b04 <HAL_InitTick>
 8004c7a:	e7cd      	b.n	8004c18 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	43bb      	bics	r3, r7
 8004c80:	430b      	orrs	r3, r1
 8004c82:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8004c84:	f7ff f8b4 	bl	8003df0 <HAL_GetTick>
 8004c88:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	403b      	ands	r3, r7
 8004c8e:	429e      	cmp	r6, r3
 8004c90:	d0c9      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c92:	f7ff f8ad 	bl	8003df0 <HAL_GetTick>
 8004c96:	9b01      	ldr	r3, [sp, #4]
 8004c98:	1ac0      	subs	r0, r0, r3
 8004c9a:	4b30      	ldr	r3, [pc, #192]	; (8004d5c <HAL_RCC_ClockConfig+0x150>)
 8004c9c:	4298      	cmp	r0, r3
 8004c9e:	d9f4      	bls.n	8004c8a <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8004ca0:	2003      	movs	r0, #3
 8004ca2:	e7b9      	b.n	8004c18 <HAL_RCC_ClockConfig+0xc>
 8004ca4:	4a29      	ldr	r2, [pc, #164]	; (8004d4c <HAL_RCC_ClockConfig+0x140>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca6:	074b      	lsls	r3, r1, #29
 8004ca8:	d504      	bpl.n	8004cb4 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004caa:	23e0      	movs	r3, #224	; 0xe0
 8004cac:	6890      	ldr	r0, [r2, #8]
 8004cae:	01db      	lsls	r3, r3, #7
 8004cb0:	4303      	orrs	r3, r0
 8004cb2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cb4:	6893      	ldr	r3, [r2, #8]
 8004cb6:	482a      	ldr	r0, [pc, #168]	; (8004d60 <HAL_RCC_ClockConfig+0x154>)
 8004cb8:	4003      	ands	r3, r0
 8004cba:	68a8      	ldr	r0, [r5, #8]
 8004cbc:	4303      	orrs	r3, r0
 8004cbe:	6093      	str	r3, [r2, #8]
 8004cc0:	e7b4      	b.n	8004c2c <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cc2:	686a      	ldr	r2, [r5, #4]
 8004cc4:	4f21      	ldr	r7, [pc, #132]	; (8004d4c <HAL_RCC_ClockConfig+0x140>)
 8004cc6:	2a01      	cmp	r2, #1
 8004cc8:	d119      	bne.n	8004cfe <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	039b      	lsls	r3, r3, #14
 8004cce:	d5a2      	bpl.n	8004c16 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cd0:	2107      	movs	r1, #7
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	438b      	bics	r3, r1
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8004cda:	f7ff f889 	bl	8003df0 <HAL_GetTick>
 8004cde:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce0:	2338      	movs	r3, #56	; 0x38
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	401a      	ands	r2, r3
 8004ce6:	686b      	ldr	r3, [r5, #4]
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d0a0      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cee:	f7ff f87f 	bl	8003df0 <HAL_GetTick>
 8004cf2:	9b01      	ldr	r3, [sp, #4]
 8004cf4:	1ac0      	subs	r0, r0, r3
 8004cf6:	4b19      	ldr	r3, [pc, #100]	; (8004d5c <HAL_RCC_ClockConfig+0x150>)
 8004cf8:	4298      	cmp	r0, r3
 8004cfa:	d9f1      	bls.n	8004ce0 <HAL_RCC_ClockConfig+0xd4>
 8004cfc:	e7d0      	b.n	8004ca0 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cfe:	2a02      	cmp	r2, #2
 8004d00:	d103      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	019b      	lsls	r3, r3, #6
 8004d06:	d4e3      	bmi.n	8004cd0 <HAL_RCC_ClockConfig+0xc4>
 8004d08:	e785      	b.n	8004c16 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004d0a:	2a00      	cmp	r2, #0
 8004d0c:	d103      	bne.n	8004d16 <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	055b      	lsls	r3, r3, #21
 8004d12:	d4dd      	bmi.n	8004cd0 <HAL_RCC_ClockConfig+0xc4>
 8004d14:	e77f      	b.n	8004c16 <HAL_RCC_ClockConfig+0xa>
 8004d16:	2302      	movs	r3, #2
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004d18:	2a03      	cmp	r2, #3
 8004d1a:	d103      	bne.n	8004d24 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d1c:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d1e:	4219      	tst	r1, r3
 8004d20:	d1d6      	bne.n	8004cd0 <HAL_RCC_ClockConfig+0xc4>
 8004d22:	e778      	b.n	8004c16 <HAL_RCC_ClockConfig+0xa>
 8004d24:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004d26:	e7fa      	b.n	8004d1e <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d28:	f7ff f862 	bl	8003df0 <HAL_GetTick>
 8004d2c:	9b01      	ldr	r3, [sp, #4]
 8004d2e:	1ac0      	subs	r0, r0, r3
 8004d30:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <HAL_RCC_ClockConfig+0x150>)
 8004d32:	4298      	cmp	r0, r3
 8004d34:	d988      	bls.n	8004c48 <HAL_RCC_ClockConfig+0x3c>
 8004d36:	e7b3      	b.n	8004ca0 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004d38:	68a3      	ldr	r3, [r4, #8]
 8004d3a:	4a0a      	ldr	r2, [pc, #40]	; (8004d64 <HAL_RCC_ClockConfig+0x158>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	68ea      	ldr	r2, [r5, #12]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	60a3      	str	r3, [r4, #8]
 8004d44:	e788      	b.n	8004c58 <HAL_RCC_ClockConfig+0x4c>
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	40022000 	.word	0x40022000
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	08010e2c 	.word	0x08010e2c
 8004d54:	20000004 	.word	0x20000004
 8004d58:	2000000c 	.word	0x2000000c
 8004d5c:	00001388 	.word	0x00001388
 8004d60:	fffff0ff 	.word	0xfffff0ff
 8004d64:	ffff8fff 	.word	0xffff8fff

08004d68 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004d68:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004d6a:	4a07      	ldr	r2, [pc, #28]	; (8004d88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	045b      	lsls	r3, r3, #17
 8004d70:	0f5b      	lsrs	r3, r3, #29
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	589b      	ldr	r3, [r3, r2]
 8004d76:	221f      	movs	r2, #31
 8004d78:	4013      	ands	r3, r2
 8004d7a:	4a04      	ldr	r2, [pc, #16]	; (8004d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d7c:	6810      	ldr	r0, [r2, #0]
 8004d7e:	40d8      	lsrs	r0, r3
}
 8004d80:	4770      	bx	lr
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	40021000 	.word	0x40021000
 8004d88:	08010e6c 	.word	0x08010e6c
 8004d8c:	20000004 	.word	0x20000004

08004d90 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004d90:	2207      	movs	r2, #7
{
 8004d92:	b530      	push	{r4, r5, lr}

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d94:	25f0      	movs	r5, #240	; 0xf0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d96:	4b09      	ldr	r3, [pc, #36]	; (8004dbc <HAL_RCC_GetClockConfig+0x2c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004d98:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d9a:	689c      	ldr	r4, [r3, #8]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d9c:	012d      	lsls	r5, r5, #4
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d9e:	4014      	ands	r4, r2
 8004da0:	6044      	str	r4, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004da2:	689c      	ldr	r4, [r3, #8]
 8004da4:	402c      	ands	r4, r5
 8004da6:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8004da8:	24e0      	movs	r4, #224	; 0xe0
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	01e4      	lsls	r4, r4, #7
 8004dae:	4023      	ands	r3, r4
 8004db0:	60c3      	str	r3, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004db2:	4b03      	ldr	r3, [pc, #12]	; (8004dc0 <HAL_RCC_GetClockConfig+0x30>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4013      	ands	r3, r2
 8004db8:	600b      	str	r3, [r1, #0]
}
 8004dba:	bd30      	pop	{r4, r5, pc}
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	40022000 	.word	0x40022000

08004dc4 <HAL_RCC_EnableCSS>:
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004dc4:	2380      	movs	r3, #128	; 0x80
 8004dc6:	4a03      	ldr	r2, [pc, #12]	; (8004dd4 <HAL_RCC_EnableCSS+0x10>)
 8004dc8:	031b      	lsls	r3, r3, #12
 8004dca:	6811      	ldr	r1, [r2, #0]
 8004dcc:	430b      	orrs	r3, r1
 8004dce:	6013      	str	r3, [r2, #0]
}
 8004dd0:	4770      	bx	lr
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	40021000 	.word	0x40021000

08004dd8 <HAL_RCC_EnableLSECSS>:
  *         cleared by a backup domain reset.
  * @retval None
  */
void HAL_RCC_EnableLSECSS(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8004dd8:	2320      	movs	r3, #32
 8004dda:	4a02      	ldr	r2, [pc, #8]	; (8004de4 <HAL_RCC_EnableLSECSS+0xc>)
 8004ddc:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8004dde:	430b      	orrs	r3, r1
 8004de0:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8004de2:	4770      	bx	lr
 8004de4:	40021000 	.word	0x40021000

08004de8 <HAL_RCC_CSSCallback>:
 8004de8:	4770      	bx	lr

08004dea <HAL_RCC_LSECSSCallback>:
__weak void HAL_RCC_LSECSSCallback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_LSECSSCallback should be implemented in the user file
   */
}
 8004dea:	4770      	bx	lr

08004dec <HAL_RCC_NMI_IRQHandler>:
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 8004dec:	23c0      	movs	r3, #192	; 0xc0
  uint32_t itflag = RCC->CIFR;
 8004dee:	4a07      	ldr	r2, [pc, #28]	; (8004e0c <HAL_RCC_NMI_IRQHandler+0x20>)
{
 8004df0:	b510      	push	{r4, lr}
  uint32_t itflag = RCC->CIFR;
 8004df2:	69d4      	ldr	r4, [r2, #28]
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4023      	ands	r3, r4
 8004df8:	6213      	str	r3, [r2, #32]
  if ((itflag & RCC_CIFR_CSSF) != 0x00u)
 8004dfa:	05e3      	lsls	r3, r4, #23
 8004dfc:	d501      	bpl.n	8004e02 <HAL_RCC_NMI_IRQHandler+0x16>
    HAL_RCC_CSSCallback();
 8004dfe:	f7ff fff3 	bl	8004de8 <HAL_RCC_CSSCallback>
  if ((itflag & RCC_CIFR_LSECSSF) != 0x00u)
 8004e02:	05a3      	lsls	r3, r4, #22
 8004e04:	d501      	bpl.n	8004e0a <HAL_RCC_NMI_IRQHandler+0x1e>
    HAL_RCC_LSECSSCallback();
 8004e06:	f7ff fff0 	bl	8004dea <HAL_RCC_LSECSSCallback>
}
 8004e0a:	bd10      	pop	{r4, pc}
 8004e0c:	40021000 	.word	0x40021000

08004e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e12:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e14:	682b      	ldr	r3, [r5, #0]
{
 8004e16:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e18:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e1a:	039b      	lsls	r3, r3, #14
 8004e1c:	d54f      	bpl.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0xae>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e1e:	2280      	movs	r2, #128	; 0x80
 8004e20:	4c4b      	ldr	r4, [pc, #300]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004e22:	0552      	lsls	r2, r2, #21
 8004e24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8004e26:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e28:	4213      	tst	r3, r2
 8004e2a:	d108      	bne.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004e32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e34:	4013      	ands	r3, r2
 8004e36:	9303      	str	r3, [sp, #12]
 8004e38:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e3e:	2780      	movs	r7, #128	; 0x80
 8004e40:	4e44      	ldr	r6, [pc, #272]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8004e42:	007f      	lsls	r7, r7, #1
 8004e44:	6833      	ldr	r3, [r6, #0]
 8004e46:	433b      	orrs	r3, r7
 8004e48:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e4a:	f7fe ffd1 	bl	8003df0 <HAL_GetTick>
 8004e4e:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e50:	6833      	ldr	r3, [r6, #0]
 8004e52:	423b      	tst	r3, r7
 8004e54:	d025      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e56:	23c0      	movs	r3, #192	; 0xc0
 8004e58:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e5e:	d00f      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004e60:	69aa      	ldr	r2, [r5, #24]
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d00c      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x70>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e66:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004e68:	4b3b      	ldr	r3, [pc, #236]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x148>)
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e6a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e6c:	4013      	ands	r3, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e6e:	2280      	movs	r2, #128	; 0x80
 8004e70:	0252      	lsls	r2, r2, #9
 8004e72:	430a      	orrs	r2, r1
 8004e74:	65e2      	str	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e76:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004e78:	4938      	ldr	r1, [pc, #224]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e7a:	400a      	ands	r2, r1
 8004e7c:	65e2      	str	r2, [r4, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e7e:	65e3      	str	r3, [r4, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e80:	07db      	lsls	r3, r3, #31
 8004e82:	d506      	bpl.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e84:	f7fe ffb4 	bl	8003df0 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e88:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8004e8a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e8c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004e8e:	423b      	tst	r3, r7
 8004e90:	d057      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x132>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e92:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004e94:	4a30      	ldr	r2, [pc, #192]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x148>)
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e96:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e98:	4013      	ands	r3, r2
 8004e9a:	69aa      	ldr	r2, [r5, #24]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8004ea0:	e006      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea2:	f7fe ffa5 	bl	8003df0 <HAL_GetTick>
 8004ea6:	9b01      	ldr	r3, [sp, #4]
 8004ea8:	1ac0      	subs	r0, r0, r3
 8004eaa:	2802      	cmp	r0, #2
 8004eac:	d9d0      	bls.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 8004eae:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004eb0:	9b00      	ldr	r3, [sp, #0]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d103      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eb6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004eb8:	4a29      	ldr	r2, [pc, #164]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004eba:	4013      	ands	r3, r2
 8004ebc:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ebe:	682a      	ldr	r2, [r5, #0]
 8004ec0:	07d3      	lsls	r3, r2, #31
 8004ec2:	d506      	bpl.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ec4:	2403      	movs	r4, #3
 8004ec6:	4922      	ldr	r1, [pc, #136]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004ec8:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8004eca:	43a3      	bics	r3, r4
 8004ecc:	686c      	ldr	r4, [r5, #4]
 8004ece:	4323      	orrs	r3, r4
 8004ed0:	654b      	str	r3, [r1, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ed2:	0793      	lsls	r3, r2, #30
 8004ed4:	d506      	bpl.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ed6:	240c      	movs	r4, #12
 8004ed8:	491d      	ldr	r1, [pc, #116]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004eda:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8004edc:	43a3      	bics	r3, r4
 8004ede:	68ac      	ldr	r4, [r5, #8]
 8004ee0:	4323      	orrs	r3, r4
 8004ee2:	654b      	str	r3, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ee4:	0653      	lsls	r3, r2, #25
 8004ee6:	d506      	bpl.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ee8:	4919      	ldr	r1, [pc, #100]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004eea:	4c1e      	ldr	r4, [pc, #120]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004eec:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8004eee:	4023      	ands	r3, r4
 8004ef0:	68ec      	ldr	r4, [r5, #12]
 8004ef2:	4323      	orrs	r3, r4
 8004ef4:	654b      	str	r3, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ef6:	0453      	lsls	r3, r2, #17
 8004ef8:	d50f      	bpl.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004efa:	4915      	ldr	r1, [pc, #84]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004efc:	696c      	ldr	r4, [r5, #20]
 8004efe:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	089b      	lsrs	r3, r3, #2
 8004f04:	4323      	orrs	r3, r4
 8004f06:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004f08:	2380      	movs	r3, #128	; 0x80
 8004f0a:	05db      	lsls	r3, r3, #23
 8004f0c:	429c      	cmp	r4, r3
 8004f0e:	d104      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x10a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004f10:	2380      	movs	r3, #128	; 0x80
 8004f12:	68cc      	ldr	r4, [r1, #12]
 8004f14:	025b      	lsls	r3, r3, #9
 8004f16:	4323      	orrs	r3, r4
 8004f18:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004f1a:	0513      	lsls	r3, r2, #20
 8004f1c:	d50f      	bpl.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004f1e:	490c      	ldr	r1, [pc, #48]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004f20:	4c11      	ldr	r4, [pc, #68]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004f22:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8004f24:	692a      	ldr	r2, [r5, #16]
 8004f26:	4023      	ands	r3, r4
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004f2c:	2380      	movs	r3, #128	; 0x80
 8004f2e:	01db      	lsls	r3, r3, #7
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d104      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x12e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004f34:	2380      	movs	r3, #128	; 0x80
 8004f36:	68ca      	ldr	r2, [r1, #12]
 8004f38:	025b      	lsls	r3, r3, #9
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60cb      	str	r3, [r1, #12]
    }
  }

  return status;
}
 8004f3e:	b005      	add	sp, #20
 8004f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f42:	f7fe ff55 	bl	8003df0 <HAL_GetTick>
 8004f46:	4b09      	ldr	r3, [pc, #36]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004f48:	1b80      	subs	r0, r0, r6
 8004f4a:	4298      	cmp	r0, r3
 8004f4c:	d99e      	bls.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f4e:	e7ae      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004f50:	40021000 	.word	0x40021000
 8004f54:	40007000 	.word	0x40007000
 8004f58:	fffffcff 	.word	0xfffffcff
 8004f5c:	fffeffff 	.word	0xfffeffff
 8004f60:	efffffff 	.word	0xefffffff
 8004f64:	ffffcfff 	.word	0xffffcfff
 8004f68:	ffff3fff 	.word	0xffff3fff
 8004f6c:	00001388 	.word	0x00001388

08004f70 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8004f70:	21a0      	movs	r1, #160	; 0xa0
 8004f72:	6802      	ldr	r2, [r0, #0]
{
 8004f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8004f76:	68d3      	ldr	r3, [r2, #12]
{
 8004f78:	0004      	movs	r4, r0
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8004f7a:	438b      	bics	r3, r1
 8004f7c:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004f7e:	f7fe ff37 	bl	8003df0 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004f82:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8004f84:	0006      	movs	r6, r0
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004f86:	2520      	movs	r5, #32
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004f88:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	422b      	tst	r3, r5
 8004f90:	d001      	beq.n	8004f96 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8004f92:	2000      	movs	r0, #0
}
 8004f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004f96:	f7fe ff2b 	bl	8003df0 <HAL_GetTick>
 8004f9a:	1b80      	subs	r0, r0, r6
 8004f9c:	42b8      	cmp	r0, r7
 8004f9e:	d9f4      	bls.n	8004f8a <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8004fa0:	2003      	movs	r0, #3
 8004fa2:	e7f7      	b.n	8004f94 <HAL_RTC_WaitForSynchro+0x24>

08004fa4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004fa6:	2740      	movs	r7, #64	; 0x40
 8004fa8:	6803      	ldr	r3, [r0, #0]
{
 8004faa:	0005      	movs	r5, r0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004fac:	68da      	ldr	r2, [r3, #12]
  HAL_StatusTypeDef status = HAL_OK;  
 8004fae:	2400      	movs	r4, #0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004fb0:	423a      	tst	r2, r7
 8004fb2:	d10c      	bne.n	8004fce <RTC_EnterInitMode+0x2a>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004fb4:	2280      	movs	r2, #128	; 0x80
 8004fb6:	68d9      	ldr	r1, [r3, #12]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004fbc:	f7fe ff18 	bl	8003df0 <HAL_GetTick>
 8004fc0:	0006      	movs	r6, r0
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004fc2:	682b      	ldr	r3, [r5, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	423b      	tst	r3, r7
 8004fc8:	d101      	bne.n	8004fce <RTC_EnterInitMode+0x2a>
 8004fca:	2c03      	cmp	r4, #3
 8004fcc:	d101      	bne.n	8004fd2 <RTC_EnterInitMode+0x2e>
      }
    }
  }

  return status;
}
 8004fce:	0020      	movs	r0, r4
 8004fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004fd2:	f7fe ff0d 	bl	8003df0 <HAL_GetTick>
 8004fd6:	23fa      	movs	r3, #250	; 0xfa
 8004fd8:	1b80      	subs	r0, r0, r6
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4298      	cmp	r0, r3
 8004fde:	d9f0      	bls.n	8004fc2 <RTC_EnterInitMode+0x1e>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fe0:	002b      	movs	r3, r5
 8004fe2:	2403      	movs	r4, #3
 8004fe4:	3329      	adds	r3, #41	; 0x29
 8004fe6:	701c      	strb	r4, [r3, #0]
 8004fe8:	e7eb      	b.n	8004fc2 <RTC_EnterInitMode+0x1e>
	...

08004fec <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004fec:	2280      	movs	r2, #128	; 0x80
{
 8004fee:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004ff0:	4c0f      	ldr	r4, [pc, #60]	; (8005030 <RTC_ExitInitMode+0x44>)
{
 8004ff2:	0005      	movs	r5, r0
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004ff4:	68e3      	ldr	r3, [r4, #12]
 8004ff6:	4393      	bics	r3, r2
 8004ff8:	60e3      	str	r3, [r4, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004ffa:	69a3      	ldr	r3, [r4, #24]
 8004ffc:	3a60      	subs	r2, #96	; 0x60
 8004ffe:	4213      	tst	r3, r2
 8005000:	d107      	bne.n	8005012 <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005002:	f7ff ffb5 	bl	8004f70 <HAL_RTC_WaitForSynchro>
 8005006:	2800      	cmp	r0, #0
 8005008:	d002      	beq.n	8005010 <RTC_ExitInitMode+0x24>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800500a:	2003      	movs	r0, #3
 800500c:	3529      	adds	r5, #41	; 0x29
 800500e:	7028      	strb	r0, [r5, #0]
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 8005010:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005012:	69a3      	ldr	r3, [r4, #24]
 8005014:	4393      	bics	r3, r2
 8005016:	61a3      	str	r3, [r4, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005018:	f7ff ffaa 	bl	8004f70 <HAL_RTC_WaitForSynchro>
 800501c:	2800      	cmp	r0, #0
 800501e:	d002      	beq.n	8005026 <RTC_ExitInitMode+0x3a>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005020:	2003      	movs	r0, #3
 8005022:	3529      	adds	r5, #41	; 0x29
 8005024:	7028      	strb	r0, [r5, #0]
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005026:	2320      	movs	r3, #32
 8005028:	69a2      	ldr	r2, [r4, #24]
 800502a:	4313      	orrs	r3, r2
 800502c:	61a3      	str	r3, [r4, #24]
 800502e:	e7ef      	b.n	8005010 <RTC_ExitInitMode+0x24>
 8005030:	40002800 	.word	0x40002800

08005034 <HAL_RTC_Init>:
{
 8005034:	b570      	push	{r4, r5, r6, lr}
 8005036:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 8005038:	2001      	movs	r0, #1
  if(hrtc != NULL)
 800503a:	2c00      	cmp	r4, #0
 800503c:	d047      	beq.n	80050ce <HAL_RTC_Init+0x9a>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800503e:	0025      	movs	r5, r4
 8005040:	3529      	adds	r5, #41	; 0x29
 8005042:	782b      	ldrb	r3, [r5, #0]
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d108      	bne.n	800505c <HAL_RTC_Init+0x28>
    hrtc->Lock = HAL_UNLOCKED;
 800504a:	0022      	movs	r2, r4
 800504c:	3228      	adds	r2, #40	; 0x28
 800504e:	7013      	strb	r3, [r2, #0]
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005050:	2388      	movs	r3, #136	; 0x88
 8005052:	021b      	lsls	r3, r3, #8
 8005054:	6063      	str	r3, [r4, #4]
    HAL_RTC_MspInit(hrtc);
 8005056:	0020      	movs	r0, r4
 8005058:	f7fe fbec 	bl	8003834 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800505c:	2302      	movs	r3, #2
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800505e:	22ca      	movs	r2, #202	; 0xca
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005060:	702b      	strb	r3, [r5, #0]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005062:	6823      	ldr	r3, [r4, #0]
    status = RTC_EnterInitMode(hrtc);
 8005064:	0020      	movs	r0, r4
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005066:	625a      	str	r2, [r3, #36]	; 0x24
 8005068:	3a77      	subs	r2, #119	; 0x77
 800506a:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 800506c:	f7ff ff9a 	bl	8004fa4 <RTC_EnterInitMode>
    if(status == HAL_OK)
 8005070:	2800      	cmp	r0, #0
 8005072:	d125      	bne.n	80050c0 <HAL_RTC_Init+0x8c>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005074:	6823      	ldr	r3, [r4, #0]
 8005076:	4916      	ldr	r1, [pc, #88]	; (80050d0 <HAL_RTC_Init+0x9c>)
 8005078:	699a      	ldr	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800507a:	6960      	ldr	r0, [r4, #20]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800507c:	400a      	ands	r2, r1
 800507e:	619a      	str	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005080:	68a2      	ldr	r2, [r4, #8]
 8005082:	6999      	ldr	r1, [r3, #24]
 8005084:	4302      	orrs	r2, r0
 8005086:	69e0      	ldr	r0, [r4, #28]
 8005088:	4302      	orrs	r2, r0
 800508a:	430a      	orrs	r2, r1
 800508c:	619a      	str	r2, [r3, #24]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800508e:	6922      	ldr	r2, [r4, #16]
      status = RTC_ExitInitMode(hrtc);
 8005090:	0020      	movs	r0, r4
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005092:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005094:	68e2      	ldr	r2, [r4, #12]
 8005096:	6919      	ldr	r1, [r3, #16]
 8005098:	0412      	lsls	r2, r2, #16
 800509a:	430a      	orrs	r2, r1
 800509c:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 800509e:	f7ff ffa5 	bl	8004fec <RTC_ExitInitMode>
      if (status == HAL_OK)
 80050a2:	2800      	cmp	r0, #0
 80050a4:	d10c      	bne.n	80050c0 <HAL_RTC_Init+0x8c>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80050a6:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80050a8:	6a26      	ldr	r6, [r4, #32]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80050aa:	6993      	ldr	r3, [r2, #24]
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	08db      	lsrs	r3, r3, #3
 80050b0:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80050b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050b4:	6991      	ldr	r1, [r2, #24]
 80050b6:	4333      	orrs	r3, r6
 80050b8:	69a6      	ldr	r6, [r4, #24]
 80050ba:	4333      	orrs	r3, r6
 80050bc:	430b      	orrs	r3, r1
 80050be:	6193      	str	r3, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050c0:	22ff      	movs	r2, #255	; 0xff
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80050c6:	2800      	cmp	r0, #0
 80050c8:	d101      	bne.n	80050ce <HAL_RTC_Init+0x9a>
      hrtc->State = HAL_RTC_STATE_READY;
 80050ca:	2301      	movs	r3, #1
 80050cc:	702b      	strb	r3, [r5, #0]
}
 80050ce:	bd70      	pop	{r4, r5, r6, pc}
 80050d0:	fb8fffbf 	.word	0xfb8fffbf

080050d4 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050d4:	21e0      	movs	r1, #224	; 0xe0
 80050d6:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80050d8:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	438a      	bics	r2, r1
 80050de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050e0:	2282      	movs	r2, #130	; 0x82
 80050e2:	6841      	ldr	r1, [r0, #4]
 80050e4:	0052      	lsls	r2, r2, #1
 80050e6:	4291      	cmp	r1, r2
 80050e8:	d10c      	bne.n	8005104 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
 80050ea:	2180      	movs	r1, #128	; 0x80
 80050ec:	6882      	ldr	r2, [r0, #8]
 80050ee:	0209      	lsls	r1, r1, #8
 80050f0:	428a      	cmp	r2, r1
 80050f2:	d003      	beq.n	80050fc <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050f4:	2180      	movs	r1, #128	; 0x80
 80050f6:	00c9      	lsls	r1, r1, #3
 80050f8:	428a      	cmp	r2, r1
 80050fa:	d103      	bne.n	8005104 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050fc:	2140      	movs	r1, #64	; 0x40
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	438a      	bics	r2, r1
 8005102:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005104:	2180      	movs	r1, #128	; 0x80
 8005106:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8005108:	0189      	lsls	r1, r1, #6
 800510a:	428a      	cmp	r2, r1
 800510c:	d106      	bne.n	800511c <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
        {
          SPI_RESET_CRC(hspi);
 800510e:	6819      	ldr	r1, [r3, #0]
 8005110:	4c07      	ldr	r4, [pc, #28]	; (8005130 <SPI_WaitFifoStateUntilTimeout.part.1+0x5c>)
 8005112:	4021      	ands	r1, r4
 8005114:	6019      	str	r1, [r3, #0]
 8005116:	6819      	ldr	r1, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800511c:	0003      	movs	r3, r0
 800511e:	2201      	movs	r2, #1
 8005120:	335d      	adds	r3, #93	; 0x5d
 8005122:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005124:	2300      	movs	r3, #0
 8005126:	305c      	adds	r0, #92	; 0x5c
 8005128:	7003      	strb	r3, [r0, #0]
      }
    }
  }

  return HAL_OK;
}
 800512a:	2003      	movs	r0, #3
 800512c:	bd10      	pop	{r4, pc}
 800512e:	46c0      	nop			; (mov r8, r8)
 8005130:	ffffdfff 	.word	0xffffdfff

08005134 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8005134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005136:	0004      	movs	r4, r0
 8005138:	000d      	movs	r5, r1
 800513a:	0017      	movs	r7, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800513c:	2680      	movs	r6, #128	; 0x80
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	6898      	ldr	r0, [r3, #8]
 8005142:	4030      	ands	r0, r6
 8005144:	d009      	beq.n	800515a <SPI_WaitFlagStateUntilTimeout.constprop.10+0x26>
    if (Timeout != HAL_MAX_DELAY)
 8005146:	1c6a      	adds	r2, r5, #1
 8005148:	d0fa      	beq.n	8005140 <SPI_WaitFlagStateUntilTimeout.constprop.10+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800514a:	f7fe fe51 	bl	8003df0 <HAL_GetTick>
 800514e:	1bc0      	subs	r0, r0, r7
 8005150:	4285      	cmp	r5, r0
 8005152:	d8f4      	bhi.n	800513e <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
 8005154:	0020      	movs	r0, r4
 8005156:	f7ff ffbd 	bl	80050d4 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 800515a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800515c <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800515c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800515e:	27c0      	movs	r7, #192	; 0xc0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005160:	0005      	movs	r5, r0
 8005162:	000c      	movs	r4, r1
 8005164:	0016      	movs	r6, r2
 8005166:	9301      	str	r3, [sp, #4]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005168:	00ff      	lsls	r7, r7, #3
  while ((hspi->Instance->SR & Fifo) != State)
 800516a:	682b      	ldr	r3, [r5, #0]
 800516c:	6898      	ldr	r0, [r3, #8]
 800516e:	4020      	ands	r0, r4
 8005170:	d00d      	beq.n	800518e <SPI_WaitFifoStateUntilTimeout.constprop.11+0x32>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005172:	42bc      	cmp	r4, r7
 8005174:	d100      	bne.n	8005178 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x1c>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005176:	7b1a      	ldrb	r2, [r3, #12]
    if (Timeout != HAL_MAX_DELAY)
 8005178:	1c72      	adds	r2, r6, #1
 800517a:	d0f7      	beq.n	800516c <SPI_WaitFifoStateUntilTimeout.constprop.11+0x10>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800517c:	f7fe fe38 	bl	8003df0 <HAL_GetTick>
 8005180:	9b01      	ldr	r3, [sp, #4]
 8005182:	1ac0      	subs	r0, r0, r3
 8005184:	4286      	cmp	r6, r0
 8005186:	d8f0      	bhi.n	800516a <SPI_WaitFifoStateUntilTimeout.constprop.11+0xe>
 8005188:	0028      	movs	r0, r5
 800518a:	f7ff ffa3 	bl	80050d4 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 800518e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08005190 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005190:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005192:	0013      	movs	r3, r2
{
 8005194:	000d      	movs	r5, r1
 8005196:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005198:	000a      	movs	r2, r1
 800519a:	21c0      	movs	r1, #192	; 0xc0
 800519c:	0149      	lsls	r1, r1, #5
{
 800519e:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051a0:	f7ff ffdc 	bl	800515c <SPI_WaitFifoStateUntilTimeout.constprop.11>
 80051a4:	2800      	cmp	r0, #0
 80051a6:	d005      	beq.n	80051b4 <SPI_EndRxTxTransaction+0x24>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051a8:	2320      	movs	r3, #32
 80051aa:	6e22      	ldr	r2, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80051ac:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051ae:	4313      	orrs	r3, r2
 80051b0:	6623      	str	r3, [r4, #96]	; 0x60
 80051b2:	e00f      	b.n	80051d4 <SPI_EndRxTxTransaction+0x44>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051b4:	0032      	movs	r2, r6
 80051b6:	0029      	movs	r1, r5
 80051b8:	0020      	movs	r0, r4
 80051ba:	f7ff ffbb 	bl	8005134 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 80051be:	2800      	cmp	r0, #0
 80051c0:	d1f2      	bne.n	80051a8 <SPI_EndRxTxTransaction+0x18>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051c2:	21c0      	movs	r1, #192	; 0xc0
 80051c4:	0033      	movs	r3, r6
 80051c6:	002a      	movs	r2, r5
 80051c8:	00c9      	lsls	r1, r1, #3
 80051ca:	0020      	movs	r0, r4
 80051cc:	f7ff ffc6 	bl	800515c <SPI_WaitFifoStateUntilTimeout.constprop.11>
 80051d0:	2800      	cmp	r0, #0
 80051d2:	d1e9      	bne.n	80051a8 <SPI_EndRxTxTransaction+0x18>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80051d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080051d8 <HAL_SPI_Init>:
{
 80051d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051da:	0004      	movs	r4, r0
    return HAL_ERROR;
 80051dc:	2001      	movs	r0, #1
  if (hspi == NULL)
 80051de:	2c00      	cmp	r4, #0
 80051e0:	d04b      	beq.n	800527a <HAL_SPI_Init+0xa2>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051e2:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80051e4:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051e6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80051e8:	355d      	adds	r5, #93	; 0x5d
 80051ea:	782b      	ldrb	r3, [r5, #0]
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d105      	bne.n	80051fe <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 80051f2:	0022      	movs	r2, r4
 80051f4:	325c      	adds	r2, #92	; 0x5c
 80051f6:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 80051f8:	0020      	movs	r0, r4
 80051fa:	f7fe fb35 	bl	8003868 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80051fe:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8005200:	2240      	movs	r2, #64	; 0x40
 8005202:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005204:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8005206:	680b      	ldr	r3, [r1, #0]
 8005208:	2000      	movs	r0, #0
 800520a:	4393      	bics	r3, r2
 800520c:	600b      	str	r3, [r1, #0]
 800520e:	23e0      	movs	r3, #224	; 0xe0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005210:	68e2      	ldr	r2, [r4, #12]
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	429a      	cmp	r2, r3
 8005216:	d931      	bls.n	800527c <HAL_SPI_Init+0xa4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005218:	26f0      	movs	r6, #240	; 0xf0
 800521a:	0136      	lsls	r6, r6, #4
 800521c:	42b2      	cmp	r2, r6
 800521e:	d133      	bne.n	8005288 <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005220:	0006      	movs	r6, r0
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005222:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005224:	2800      	cmp	r0, #0
 8005226:	d103      	bne.n	8005230 <HAL_SPI_Init+0x58>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005228:	429a      	cmp	r2, r3
 800522a:	d92f      	bls.n	800528c <HAL_SPI_Init+0xb4>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800522c:	2302      	movs	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800522e:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005230:	68a7      	ldr	r7, [r4, #8]
 8005232:	6863      	ldr	r3, [r4, #4]
 8005234:	69a0      	ldr	r0, [r4, #24]
 8005236:	433b      	orrs	r3, r7
 8005238:	6927      	ldr	r7, [r4, #16]
 800523a:	433b      	orrs	r3, r7
 800523c:	6967      	ldr	r7, [r4, #20]
 800523e:	433b      	orrs	r3, r7
 8005240:	69e7      	ldr	r7, [r4, #28]
 8005242:	433b      	orrs	r3, r7
 8005244:	6a27      	ldr	r7, [r4, #32]
 8005246:	433b      	orrs	r3, r7
 8005248:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800524a:	433b      	orrs	r3, r7
 800524c:	2780      	movs	r7, #128	; 0x80
 800524e:	00bf      	lsls	r7, r7, #2
 8005250:	4007      	ands	r7, r0
 8005252:	433b      	orrs	r3, r7
 8005254:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005258:	0c00      	lsrs	r0, r0, #16
 800525a:	431a      	orrs	r2, r3
 800525c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800525e:	431a      	orrs	r2, r3
 8005260:	2304      	movs	r3, #4
 8005262:	4018      	ands	r0, r3
 8005264:	4310      	orrs	r0, r2
 8005266:	4306      	orrs	r6, r0
 8005268:	604e      	str	r6, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800526a:	69cb      	ldr	r3, [r1, #28]
 800526c:	4a08      	ldr	r2, [pc, #32]	; (8005290 <HAL_SPI_Init+0xb8>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800526e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005270:	4013      	ands	r3, r2
 8005272:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8005274:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005276:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005278:	702b      	strb	r3, [r5, #0]
}
 800527a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800527c:	2680      	movs	r6, #128	; 0x80
 800527e:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005280:	429a      	cmp	r2, r3
 8005282:	d0ce      	beq.n	8005222 <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005284:	62a0      	str	r0, [r4, #40]	; 0x28
 8005286:	e7cc      	b.n	8005222 <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005288:	0006      	movs	r6, r0
 800528a:	e7fb      	b.n	8005284 <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800528c:	2301      	movs	r3, #1
 800528e:	e7ce      	b.n	800522e <HAL_SPI_Init+0x56>
 8005290:	fffff7ff 	.word	0xfffff7ff

08005294 <HAL_SPI_DeInit>:
{
 8005294:	b570      	push	{r4, r5, r6, lr}
 8005296:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005298:	2001      	movs	r0, #1
  if (hspi == NULL)
 800529a:	2c00      	cmp	r4, #0
 800529c:	d010      	beq.n	80052c0 <HAL_SPI_DeInit+0x2c>
  hspi->State = HAL_SPI_STATE_BUSY;
 800529e:	0025      	movs	r5, r4
 80052a0:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80052a2:	2140      	movs	r1, #64	; 0x40
 80052a4:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80052a6:	355d      	adds	r5, #93	; 0x5d
 80052a8:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80052aa:	6813      	ldr	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 80052ac:	0020      	movs	r0, r4
  __HAL_SPI_DISABLE(hspi);
 80052ae:	438b      	bics	r3, r1
 80052b0:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 80052b2:	f7fe fb3f 	bl	8003934 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052b6:	2000      	movs	r0, #0
  __HAL_UNLOCK(hspi);
 80052b8:	345c      	adds	r4, #92	; 0x5c
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052ba:	6060      	str	r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_RESET;
 80052bc:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hspi);
 80052be:	7020      	strb	r0, [r4, #0]
}
 80052c0:	bd70      	pop	{r4, r5, r6, pc}

080052c2 <HAL_SPI_Transmit>:
{
 80052c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052c4:	b087      	sub	sp, #28
 80052c6:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hspi);
 80052c8:	0003      	movs	r3, r0
 80052ca:	335c      	adds	r3, #92	; 0x5c
 80052cc:	9303      	str	r3, [sp, #12]
 80052ce:	781b      	ldrb	r3, [r3, #0]
{
 80052d0:	0004      	movs	r4, r0
 80052d2:	000d      	movs	r5, r1
 80052d4:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 80052d6:	2602      	movs	r6, #2
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d100      	bne.n	80052de <HAL_SPI_Transmit+0x1c>
 80052dc:	e07c      	b.n	80053d8 <HAL_SPI_Transmit+0x116>
 80052de:	2301      	movs	r3, #1
 80052e0:	9a03      	ldr	r2, [sp, #12]
 80052e2:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80052e4:	f7fe fd84 	bl	8003df0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80052e8:	0022      	movs	r2, r4
  tickstart = HAL_GetTick();
 80052ea:	9002      	str	r0, [sp, #8]
  if (hspi->State != HAL_SPI_STATE_READY)
 80052ec:	325d      	adds	r2, #93	; 0x5d
 80052ee:	7813      	ldrb	r3, [r2, #0]
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d16a      	bne.n	80053cc <HAL_SPI_Transmit+0x10a>
    errorcode = HAL_ERROR;
 80052f6:	001e      	movs	r6, r3
  if ((pData == NULL) || (Size == 0U))
 80052f8:	2d00      	cmp	r5, #0
 80052fa:	d067      	beq.n	80053cc <HAL_SPI_Transmit+0x10a>
 80052fc:	2f00      	cmp	r7, #0
 80052fe:	d065      	beq.n	80053cc <HAL_SPI_Transmit+0x10a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005300:	3302      	adds	r3, #2
 8005302:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005304:	2300      	movs	r3, #0
  hspi->RxXferSize  = 0U;
 8005306:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005308:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800530a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800530c:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800530e:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005310:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 8005312:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8005314:	8793      	strh	r3, [r2, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005316:	87d3      	strh	r3, [r2, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005318:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 800531a:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800531c:	2380      	movs	r3, #128	; 0x80
 800531e:	68a2      	ldr	r2, [r4, #8]
 8005320:	021b      	lsls	r3, r3, #8
 8005322:	429a      	cmp	r2, r3
 8005324:	d105      	bne.n	8005332 <HAL_SPI_Transmit+0x70>
    SPI_1LINE_TX(hspi);
 8005326:	2380      	movs	r3, #128	; 0x80
 8005328:	6822      	ldr	r2, [r4, #0]
 800532a:	01db      	lsls	r3, r3, #7
 800532c:	6811      	ldr	r1, [r2, #0]
 800532e:	430b      	orrs	r3, r1
 8005330:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005332:	2240      	movs	r2, #64	; 0x40
 8005334:	6823      	ldr	r3, [r4, #0]
 8005336:	6819      	ldr	r1, [r3, #0]
 8005338:	4211      	tst	r1, r2
 800533a:	d102      	bne.n	8005342 <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 800533c:	6819      	ldr	r1, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005342:	21e0      	movs	r1, #224	; 0xe0
 8005344:	68e0      	ldr	r0, [r4, #12]
 8005346:	00c9      	lsls	r1, r1, #3
 8005348:	6862      	ldr	r2, [r4, #4]
 800534a:	4288      	cmp	r0, r1
 800534c:	d947      	bls.n	80053de <HAL_SPI_Transmit+0x11c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800534e:	2a00      	cmp	r2, #0
 8005350:	d001      	beq.n	8005356 <HAL_SPI_Transmit+0x94>
 8005352:	2f01      	cmp	r7, #1
 8005354:	d107      	bne.n	8005366 <HAL_SPI_Transmit+0xa4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005356:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005358:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800535a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800535c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800535e:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8005360:	3b01      	subs	r3, #1
 8005362:	b29b      	uxth	r3, r3
 8005364:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005366:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 8005368:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800536a:	2b00      	cmp	r3, #0
 800536c:	d116      	bne.n	800539c <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800536e:	9a02      	ldr	r2, [sp, #8]
 8005370:	9901      	ldr	r1, [sp, #4]
 8005372:	0020      	movs	r0, r4
 8005374:	f7ff ff0c 	bl	8005190 <SPI_EndRxTxTransaction>
 8005378:	2800      	cmp	r0, #0
 800537a:	d000      	beq.n	800537e <HAL_SPI_Transmit+0xbc>
 800537c:	e06d      	b.n	800545a <HAL_SPI_Transmit+0x198>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800537e:	68a3      	ldr	r3, [r4, #8]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d106      	bne.n	8005392 <HAL_SPI_Transmit+0xd0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005384:	9305      	str	r3, [sp, #20]
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	68da      	ldr	r2, [r3, #12]
 800538a:	9205      	str	r2, [sp, #20]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	9305      	str	r3, [sp, #20]
 8005390:	9b05      	ldr	r3, [sp, #20]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005392:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8005394:	1e73      	subs	r3, r6, #1
 8005396:	419e      	sbcs	r6, r3
    errorcode = HAL_BUSY;
 8005398:	b2f6      	uxtb	r6, r6
 800539a:	e017      	b.n	80053cc <HAL_SPI_Transmit+0x10a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800539c:	6822      	ldr	r2, [r4, #0]
 800539e:	6893      	ldr	r3, [r2, #8]
 80053a0:	422b      	tst	r3, r5
 80053a2:	d009      	beq.n	80053b8 <HAL_SPI_Transmit+0xf6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80053a6:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053a8:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053aa:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053ac:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80053ae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80053b6:	e7d7      	b.n	8005368 <HAL_SPI_Transmit+0xa6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053b8:	f7fe fd1a 	bl	8003df0 <HAL_GetTick>
 80053bc:	9b02      	ldr	r3, [sp, #8]
 80053be:	1ac0      	subs	r0, r0, r3
 80053c0:	9b01      	ldr	r3, [sp, #4]
 80053c2:	4298      	cmp	r0, r3
 80053c4:	d3d0      	bcc.n	8005368 <HAL_SPI_Transmit+0xa6>
 80053c6:	3301      	adds	r3, #1
 80053c8:	d0ce      	beq.n	8005368 <HAL_SPI_Transmit+0xa6>
          errorcode = HAL_TIMEOUT;
 80053ca:	2603      	movs	r6, #3
  hspi->State = HAL_SPI_STATE_READY;
 80053cc:	2301      	movs	r3, #1
 80053ce:	345d      	adds	r4, #93	; 0x5d
 80053d0:	7023      	strb	r3, [r4, #0]
  __HAL_UNLOCK(hspi);
 80053d2:	2300      	movs	r3, #0
 80053d4:	9a03      	ldr	r2, [sp, #12]
 80053d6:	7013      	strb	r3, [r2, #0]
}
 80053d8:	0030      	movs	r0, r6
 80053da:	b007      	add	sp, #28
 80053dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053de:	2a00      	cmp	r2, #0
 80053e0:	d001      	beq.n	80053e6 <HAL_SPI_Transmit+0x124>
 80053e2:	2f01      	cmp	r7, #1
 80053e4:	d10a      	bne.n	80053fc <HAL_SPI_Transmit+0x13a>
      if (hspi->TxXferCount > 1U)
 80053e6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80053e8:	2a01      	cmp	r2, #1
 80053ea:	d91c      	bls.n	8005426 <HAL_SPI_Transmit+0x164>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053ec:	882a      	ldrh	r2, [r5, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053ee:	3502      	adds	r5, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053f0:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 80053f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053f4:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80053f6:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053fc:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 80053fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0b4      	beq.n	800536e <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005404:	6822      	ldr	r2, [r4, #0]
 8005406:	6893      	ldr	r3, [r2, #8]
 8005408:	422b      	tst	r3, r5
 800540a:	d01c      	beq.n	8005446 <HAL_SPI_Transmit+0x184>
        if (hspi->TxXferCount > 1U)
 800540c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800540e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005410:	2901      	cmp	r1, #1
 8005412:	d910      	bls.n	8005436 <HAL_SPI_Transmit+0x174>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005414:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005416:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005418:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800541a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800541c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800541e:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8005420:	b29b      	uxth	r3, r3
 8005422:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005424:	e7eb      	b.n	80053fe <HAL_SPI_Transmit+0x13c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005426:	782a      	ldrb	r2, [r5, #0]
 8005428:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 800542a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800542c:	3301      	adds	r3, #1
 800542e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005430:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005432:	3b01      	subs	r3, #1
 8005434:	e7e0      	b.n	80053f8 <HAL_SPI_Transmit+0x136>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800543a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800543c:	3301      	adds	r3, #1
 800543e:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005440:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005442:	3b01      	subs	r3, #1
 8005444:	e7ec      	b.n	8005420 <HAL_SPI_Transmit+0x15e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005446:	f7fe fcd3 	bl	8003df0 <HAL_GetTick>
 800544a:	9b02      	ldr	r3, [sp, #8]
 800544c:	1ac0      	subs	r0, r0, r3
 800544e:	9b01      	ldr	r3, [sp, #4]
 8005450:	4283      	cmp	r3, r0
 8005452:	d8d4      	bhi.n	80053fe <HAL_SPI_Transmit+0x13c>
 8005454:	3301      	adds	r3, #1
 8005456:	d0d2      	beq.n	80053fe <HAL_SPI_Transmit+0x13c>
 8005458:	e7b7      	b.n	80053ca <HAL_SPI_Transmit+0x108>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800545a:	2320      	movs	r3, #32
 800545c:	6623      	str	r3, [r4, #96]	; 0x60
 800545e:	e78e      	b.n	800537e <HAL_SPI_Transmit+0xbc>

08005460 <HAL_SPI_TransmitReceive>:
{
 8005460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005462:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8005464:	0003      	movs	r3, r0
{
 8005466:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hspi);
 8005468:	335c      	adds	r3, #92	; 0x5c
 800546a:	781a      	ldrb	r2, [r3, #0]
{
 800546c:	0004      	movs	r4, r0
 800546e:	000f      	movs	r7, r1
  __HAL_LOCK(hspi);
 8005470:	2502      	movs	r5, #2
 8005472:	2a01      	cmp	r2, #1
 8005474:	d100      	bne.n	8005478 <HAL_SPI_TransmitReceive+0x18>
 8005476:	e0ac      	b.n	80055d2 <HAL_SPI_TransmitReceive+0x172>
 8005478:	2201      	movs	r2, #1
 800547a:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800547c:	f7fe fcb8 	bl	8003df0 <HAL_GetTick>
  tmp_state           = hspi->State;
 8005480:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8005482:	9000      	str	r0, [sp, #0]
  tmp_state           = hspi->State;
 8005484:	335d      	adds	r3, #93	; 0x5d
 8005486:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005488:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 800548a:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800548c:	2b01      	cmp	r3, #1
 800548e:	d00b      	beq.n	80054a8 <HAL_SPI_TransmitReceive+0x48>
 8005490:	2282      	movs	r2, #130	; 0x82
 8005492:	0052      	lsls	r2, r2, #1
 8005494:	4291      	cmp	r1, r2
 8005496:	d000      	beq.n	800549a <HAL_SPI_TransmitReceive+0x3a>
 8005498:	e094      	b.n	80055c4 <HAL_SPI_TransmitReceive+0x164>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800549a:	68a2      	ldr	r2, [r4, #8]
 800549c:	2a00      	cmp	r2, #0
 800549e:	d000      	beq.n	80054a2 <HAL_SPI_TransmitReceive+0x42>
 80054a0:	e090      	b.n	80055c4 <HAL_SPI_TransmitReceive+0x164>
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d000      	beq.n	80054a8 <HAL_SPI_TransmitReceive+0x48>
 80054a6:	e08d      	b.n	80055c4 <HAL_SPI_TransmitReceive+0x164>
    errorcode = HAL_ERROR;
 80054a8:	2501      	movs	r5, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054aa:	2f00      	cmp	r7, #0
 80054ac:	d100      	bne.n	80054b0 <HAL_SPI_TransmitReceive+0x50>
 80054ae:	e089      	b.n	80055c4 <HAL_SPI_TransmitReceive+0x164>
 80054b0:	9b01      	ldr	r3, [sp, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d100      	bne.n	80054b8 <HAL_SPI_TransmitReceive+0x58>
 80054b6:	e085      	b.n	80055c4 <HAL_SPI_TransmitReceive+0x164>
 80054b8:	2e00      	cmp	r6, #0
 80054ba:	d100      	bne.n	80054be <HAL_SPI_TransmitReceive+0x5e>
 80054bc:	e082      	b.n	80055c4 <HAL_SPI_TransmitReceive+0x164>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054be:	0023      	movs	r3, r4
 80054c0:	335d      	adds	r3, #93	; 0x5d
 80054c2:	781a      	ldrb	r2, [r3, #0]
 80054c4:	2a04      	cmp	r2, #4
 80054c6:	d001      	beq.n	80054cc <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054c8:	2205      	movs	r2, #5
 80054ca:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054cc:	9a01      	ldr	r2, [sp, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054ce:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054d0:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80054d2:	0022      	movs	r2, r4
 80054d4:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054d6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 80054d8:	87d6      	strh	r6, [r2, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80054da:	1da2      	adds	r2, r4, #6
 80054dc:	87d6      	strh	r6, [r2, #62]	; 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80054de:	22e0      	movs	r2, #224	; 0xe0
 80054e0:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 80054e2:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80054e4:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80054e6:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80054e8:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80054ea:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80054ec:	00d2      	lsls	r2, r2, #3
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	4290      	cmp	r0, r2
 80054f2:	d801      	bhi.n	80054f8 <HAL_SPI_TransmitReceive+0x98>
 80054f4:	2e01      	cmp	r6, #1
 80054f6:	d931      	bls.n	800555c <HAL_SPI_TransmitReceive+0xfc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	4d71      	ldr	r5, [pc, #452]	; (80056c0 <HAL_SPI_TransmitReceive+0x260>)
 80054fc:	402a      	ands	r2, r5
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054fe:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005500:	2240      	movs	r2, #64	; 0x40
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	681d      	ldr	r5, [r3, #0]
 8005506:	4215      	tst	r5, r2
 8005508:	d102      	bne.n	8005510 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 800550a:	681d      	ldr	r5, [r3, #0]
 800550c:	432a      	orrs	r2, r5
 800550e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005510:	22e0      	movs	r2, #224	; 0xe0
 8005512:	00d2      	lsls	r2, r2, #3
 8005514:	4290      	cmp	r0, r2
 8005516:	d95e      	bls.n	80055d6 <HAL_SPI_TransmitReceive+0x176>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005518:	2900      	cmp	r1, #0
 800551a:	d001      	beq.n	8005520 <HAL_SPI_TransmitReceive+0xc0>
 800551c:	2e01      	cmp	r6, #1
 800551e:	d107      	bne.n	8005530 <HAL_SPI_TransmitReceive+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005520:	883a      	ldrh	r2, [r7, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005522:	3702      	adds	r7, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005524:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005526:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005528:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800552a:	3b01      	subs	r3, #1
 800552c:	b29b      	uxth	r3, r3
 800552e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005530:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005532:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005534:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005536:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005538:	2b00      	cmp	r3, #0
 800553a:	d114      	bne.n	8005566 <HAL_SPI_TransmitReceive+0x106>
 800553c:	0023      	movs	r3, r4
 800553e:	3308      	adds	r3, #8
 8005540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10f      	bne.n	8005566 <HAL_SPI_TransmitReceive+0x106>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005546:	9a00      	ldr	r2, [sp, #0]
 8005548:	9908      	ldr	r1, [sp, #32]
 800554a:	0020      	movs	r0, r4
 800554c:	f7ff fe20 	bl	8005190 <SPI_EndRxTxTransaction>
 8005550:	1e05      	subs	r5, r0, #0
 8005552:	d037      	beq.n	80055c4 <HAL_SPI_TransmitReceive+0x164>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005554:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8005556:	2501      	movs	r5, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005558:	6623      	str	r3, [r4, #96]	; 0x60
 800555a:	e033      	b.n	80055c4 <HAL_SPI_TransmitReceive+0x164>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800555c:	2280      	movs	r2, #128	; 0x80
 800555e:	685d      	ldr	r5, [r3, #4]
 8005560:	0152      	lsls	r2, r2, #5
 8005562:	432a      	orrs	r2, r5
 8005564:	e7cb      	b.n	80054fe <HAL_SPI_TransmitReceive+0x9e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005566:	6822      	ldr	r2, [r4, #0]
 8005568:	6893      	ldr	r3, [r2, #8]
 800556a:	423b      	tst	r3, r7
 800556c:	d00e      	beq.n	800558c <HAL_SPI_TransmitReceive+0x12c>
 800556e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00b      	beq.n	800558c <HAL_SPI_TransmitReceive+0x12c>
 8005574:	2d01      	cmp	r5, #1
 8005576:	d109      	bne.n	800558c <HAL_SPI_TransmitReceive+0x12c>
        txallowed = 0U;
 8005578:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800557a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800557c:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800557e:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005580:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005582:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005584:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005586:	3b01      	subs	r3, #1
 8005588:	b29b      	uxth	r3, r3
 800558a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800558c:	6893      	ldr	r3, [r2, #8]
 800558e:	4233      	tst	r3, r6
 8005590:	d00e      	beq.n	80055b0 <HAL_SPI_TransmitReceive+0x150>
 8005592:	0021      	movs	r1, r4
 8005594:	3108      	adds	r1, #8
 8005596:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 8005598:	2b00      	cmp	r3, #0
 800559a:	d009      	beq.n	80055b0 <HAL_SPI_TransmitReceive+0x150>
        txallowed = 1U;
 800559c:	0035      	movs	r5, r6
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800559e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055a0:	68d2      	ldr	r2, [r2, #12]
 80055a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055a4:	3302      	adds	r3, #2
 80055a6:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80055a8:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 80055aa:	3b01      	subs	r3, #1
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	87cb      	strh	r3, [r1, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80055b0:	f7fe fc1e 	bl	8003df0 <HAL_GetTick>
 80055b4:	9b00      	ldr	r3, [sp, #0]
 80055b6:	1ac0      	subs	r0, r0, r3
 80055b8:	9b08      	ldr	r3, [sp, #32]
 80055ba:	4283      	cmp	r3, r0
 80055bc:	d8bb      	bhi.n	8005536 <HAL_SPI_TransmitReceive+0xd6>
 80055be:	3301      	adds	r3, #1
 80055c0:	d0b9      	beq.n	8005536 <HAL_SPI_TransmitReceive+0xd6>
        errorcode = HAL_TIMEOUT;
 80055c2:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 80055c4:	0023      	movs	r3, r4
 80055c6:	2201      	movs	r2, #1
 80055c8:	335d      	adds	r3, #93	; 0x5d
 80055ca:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80055cc:	2300      	movs	r3, #0
 80055ce:	345c      	adds	r4, #92	; 0x5c
 80055d0:	7023      	strb	r3, [r4, #0]
}
 80055d2:	0028      	movs	r0, r5
 80055d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055d6:	2900      	cmp	r1, #0
 80055d8:	d001      	beq.n	80055de <HAL_SPI_TransmitReceive+0x17e>
 80055da:	2e01      	cmp	r6, #1
 80055dc:	d10a      	bne.n	80055f4 <HAL_SPI_TransmitReceive+0x194>
      if (hspi->TxXferCount > 1U)
 80055de:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80055e0:	2a01      	cmp	r2, #1
 80055e2:	d951      	bls.n	8005688 <HAL_SPI_TransmitReceive+0x228>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055e4:	883a      	ldrh	r2, [r7, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055e6:	3702      	adds	r7, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055e8:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 80055ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055ec:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80055ee:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80055f4:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055f6:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055f8:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d105      	bne.n	800560c <HAL_SPI_TransmitReceive+0x1ac>
 8005600:	0023      	movs	r3, r4
 8005602:	3308      	adds	r3, #8
 8005604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005606:	2b00      	cmp	r3, #0
 8005608:	d100      	bne.n	800560c <HAL_SPI_TransmitReceive+0x1ac>
 800560a:	e79c      	b.n	8005546 <HAL_SPI_TransmitReceive+0xe6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800560c:	6822      	ldr	r2, [r4, #0]
 800560e:	6893      	ldr	r3, [r2, #8]
 8005610:	423b      	tst	r3, r7
 8005612:	d011      	beq.n	8005638 <HAL_SPI_TransmitReceive+0x1d8>
 8005614:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00e      	beq.n	8005638 <HAL_SPI_TransmitReceive+0x1d8>
 800561a:	2d01      	cmp	r5, #1
 800561c:	d10c      	bne.n	8005638 <HAL_SPI_TransmitReceive+0x1d8>
        if (hspi->TxXferCount > 1U)
 800561e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8005620:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005622:	2901      	cmp	r1, #1
 8005624:	d938      	bls.n	8005698 <HAL_SPI_TransmitReceive+0x238>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005626:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005628:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800562a:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800562c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800562e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005630:	3b02      	subs	r3, #2
        txallowed = 0U;
 8005632:	2500      	movs	r5, #0
          hspi->TxXferCount--;
 8005634:	b29b      	uxth	r3, r3
 8005636:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005638:	6821      	ldr	r1, [r4, #0]
 800563a:	688b      	ldr	r3, [r1, #8]
 800563c:	4233      	tst	r3, r6
 800563e:	d019      	beq.n	8005674 <HAL_SPI_TransmitReceive+0x214>
 8005640:	0023      	movs	r3, r4
 8005642:	3308      	adds	r3, #8
 8005644:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8005646:	2a00      	cmp	r2, #0
 8005648:	d014      	beq.n	8005674 <HAL_SPI_TransmitReceive+0x214>
        if (hspi->RxXferCount > 1U)
 800564a:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 800564c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800564e:	2801      	cmp	r0, #1
 8005650:	d92a      	bls.n	80056a8 <HAL_SPI_TransmitReceive+0x248>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005652:	68c8      	ldr	r0, [r1, #12]
        txallowed = 1U;
 8005654:	0035      	movs	r5, r6
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005656:	8010      	strh	r0, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005658:	3202      	adds	r2, #2
 800565a:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800565c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800565e:	3a02      	subs	r2, #2
 8005660:	b292      	uxth	r2, r2
 8005662:	87da      	strh	r2, [r3, #62]	; 0x3e
          if (hspi->RxXferCount <= 1U)
 8005664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005666:	2b01      	cmp	r3, #1
 8005668:	d804      	bhi.n	8005674 <HAL_SPI_TransmitReceive+0x214>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800566a:	2380      	movs	r3, #128	; 0x80
 800566c:	684a      	ldr	r2, [r1, #4]
 800566e:	015b      	lsls	r3, r3, #5
 8005670:	4313      	orrs	r3, r2
 8005672:	604b      	str	r3, [r1, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005674:	f7fe fbbc 	bl	8003df0 <HAL_GetTick>
 8005678:	9b00      	ldr	r3, [sp, #0]
 800567a:	1ac0      	subs	r0, r0, r3
 800567c:	9b08      	ldr	r3, [sp, #32]
 800567e:	4283      	cmp	r3, r0
 8005680:	d8bb      	bhi.n	80055fa <HAL_SPI_TransmitReceive+0x19a>
 8005682:	3301      	adds	r3, #1
 8005684:	d0b9      	beq.n	80055fa <HAL_SPI_TransmitReceive+0x19a>
 8005686:	e79c      	b.n	80055c2 <HAL_SPI_TransmitReceive+0x162>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005688:	783a      	ldrb	r2, [r7, #0]
 800568a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800568c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800568e:	3301      	adds	r3, #1
 8005690:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005692:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005694:	3b01      	subs	r3, #1
 8005696:	e7ab      	b.n	80055f0 <HAL_SPI_TransmitReceive+0x190>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800569c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800569e:	3301      	adds	r3, #1
 80056a0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80056a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80056a4:	3b01      	subs	r3, #1
 80056a6:	e7c4      	b.n	8005632 <HAL_SPI_TransmitReceive+0x1d2>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80056a8:	7b09      	ldrb	r1, [r1, #12]
        txallowed = 1U;
 80056aa:	0035      	movs	r5, r6
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80056ac:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 80056ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80056b0:	3201      	adds	r2, #1
 80056b2:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80056b4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80056b6:	3a01      	subs	r2, #1
 80056b8:	b292      	uxth	r2, r2
 80056ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056bc:	e7da      	b.n	8005674 <HAL_SPI_TransmitReceive+0x214>
 80056be:	46c0      	nop			; (mov r8, r8)
 80056c0:	ffffefff 	.word	0xffffefff

080056c4 <HAL_SPI_GetState>:
  return hspi->State;
 80056c4:	305d      	adds	r0, #93	; 0x5d
 80056c6:	7800      	ldrb	r0, [r0, #0]
 80056c8:	b2c0      	uxtb	r0, r0
}
 80056ca:	4770      	bx	lr

080056cc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056cc:	2201      	movs	r2, #1
 80056ce:	6a03      	ldr	r3, [r0, #32]
{
 80056d0:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056d2:	4393      	bics	r3, r2
 80056d4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056d6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056d8:	4a19      	ldr	r2, [pc, #100]	; (8005740 <TIM_OC1_SetConfig+0x74>)
  tmpcr2 =  TIMx->CR2;
 80056da:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80056dc:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056de:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056e0:	680a      	ldr	r2, [r1, #0]
 80056e2:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056e4:	2202      	movs	r2, #2
 80056e6:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056e8:	688a      	ldr	r2, [r1, #8]
 80056ea:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056ec:	4a15      	ldr	r2, [pc, #84]	; (8005744 <TIM_OC1_SetConfig+0x78>)
 80056ee:	4290      	cmp	r0, r2
 80056f0:	d008      	beq.n	8005704 <TIM_OC1_SetConfig+0x38>
 80056f2:	4e15      	ldr	r6, [pc, #84]	; (8005748 <TIM_OC1_SetConfig+0x7c>)
 80056f4:	42b0      	cmp	r0, r6
 80056f6:	d005      	beq.n	8005704 <TIM_OC1_SetConfig+0x38>
 80056f8:	4e14      	ldr	r6, [pc, #80]	; (800574c <TIM_OC1_SetConfig+0x80>)
 80056fa:	42b0      	cmp	r0, r6
 80056fc:	d002      	beq.n	8005704 <TIM_OC1_SetConfig+0x38>
 80056fe:	4e14      	ldr	r6, [pc, #80]	; (8005750 <TIM_OC1_SetConfig+0x84>)
 8005700:	42b0      	cmp	r0, r6
 8005702:	d116      	bne.n	8005732 <TIM_OC1_SetConfig+0x66>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005704:	2608      	movs	r6, #8
 8005706:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005708:	68ce      	ldr	r6, [r1, #12]
 800570a:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800570c:	2604      	movs	r6, #4
 800570e:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005710:	4290      	cmp	r0, r2
 8005712:	d008      	beq.n	8005726 <TIM_OC1_SetConfig+0x5a>
 8005714:	4a0c      	ldr	r2, [pc, #48]	; (8005748 <TIM_OC1_SetConfig+0x7c>)
 8005716:	4290      	cmp	r0, r2
 8005718:	d005      	beq.n	8005726 <TIM_OC1_SetConfig+0x5a>
 800571a:	4a0c      	ldr	r2, [pc, #48]	; (800574c <TIM_OC1_SetConfig+0x80>)
 800571c:	4290      	cmp	r0, r2
 800571e:	d002      	beq.n	8005726 <TIM_OC1_SetConfig+0x5a>
 8005720:	4a0b      	ldr	r2, [pc, #44]	; (8005750 <TIM_OC1_SetConfig+0x84>)
 8005722:	4290      	cmp	r0, r2
 8005724:	d105      	bne.n	8005732 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005726:	4a0b      	ldr	r2, [pc, #44]	; (8005754 <TIM_OC1_SetConfig+0x88>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005728:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800572a:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 800572c:	694c      	ldr	r4, [r1, #20]
 800572e:	4334      	orrs	r4, r6
 8005730:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005732:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005734:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005736:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8005738:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573a:	6203      	str	r3, [r0, #32]
}
 800573c:	bd70      	pop	{r4, r5, r6, pc}
 800573e:	46c0      	nop			; (mov r8, r8)
 8005740:	fffeff8c 	.word	0xfffeff8c
 8005744:	40012c00 	.word	0x40012c00
 8005748:	40014000 	.word	0x40014000
 800574c:	40014400 	.word	0x40014400
 8005750:	40014800 	.word	0x40014800
 8005754:	fffffcff 	.word	0xfffffcff

08005758 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005758:	6a03      	ldr	r3, [r0, #32]
 800575a:	4a18      	ldr	r2, [pc, #96]	; (80057bc <TIM_OC3_SetConfig+0x64>)
{
 800575c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800575e:	4013      	ands	r3, r2
 8005760:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005762:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005764:	4d16      	ldr	r5, [pc, #88]	; (80057c0 <TIM_OC3_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 8005766:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8005768:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800576a:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800576c:	680d      	ldr	r5, [r1, #0]
 800576e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005770:	4d14      	ldr	r5, [pc, #80]	; (80057c4 <TIM_OC3_SetConfig+0x6c>)
 8005772:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005774:	688d      	ldr	r5, [r1, #8]
 8005776:	022d      	lsls	r5, r5, #8
 8005778:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800577a:	4d13      	ldr	r5, [pc, #76]	; (80057c8 <TIM_OC3_SetConfig+0x70>)
 800577c:	42a8      	cmp	r0, r5
 800577e:	d10e      	bne.n	800579e <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005780:	4d12      	ldr	r5, [pc, #72]	; (80057cc <TIM_OC3_SetConfig+0x74>)
 8005782:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005784:	68cb      	ldr	r3, [r1, #12]
 8005786:	021b      	lsls	r3, r3, #8
 8005788:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800578a:	4d11      	ldr	r5, [pc, #68]	; (80057d0 <TIM_OC3_SetConfig+0x78>)
 800578c:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800578e:	4d11      	ldr	r5, [pc, #68]	; (80057d4 <TIM_OC3_SetConfig+0x7c>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005790:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005792:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005794:	698a      	ldr	r2, [r1, #24]
 8005796:	4332      	orrs	r2, r6
 8005798:	0112      	lsls	r2, r2, #4
 800579a:	432a      	orrs	r2, r5
 800579c:	e008      	b.n	80057b0 <TIM_OC3_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800579e:	4d0e      	ldr	r5, [pc, #56]	; (80057d8 <TIM_OC3_SetConfig+0x80>)
 80057a0:	42a8      	cmp	r0, r5
 80057a2:	d0f4      	beq.n	800578e <TIM_OC3_SetConfig+0x36>
 80057a4:	4d0d      	ldr	r5, [pc, #52]	; (80057dc <TIM_OC3_SetConfig+0x84>)
 80057a6:	42a8      	cmp	r0, r5
 80057a8:	d0f1      	beq.n	800578e <TIM_OC3_SetConfig+0x36>
 80057aa:	4d0d      	ldr	r5, [pc, #52]	; (80057e0 <TIM_OC3_SetConfig+0x88>)
 80057ac:	42a8      	cmp	r0, r5
 80057ae:	d0ee      	beq.n	800578e <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057b0:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057b2:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80057b4:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80057b6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b8:	6203      	str	r3, [r0, #32]
}
 80057ba:	bd70      	pop	{r4, r5, r6, pc}
 80057bc:	fffffeff 	.word	0xfffffeff
 80057c0:	fffeff8c 	.word	0xfffeff8c
 80057c4:	fffffdff 	.word	0xfffffdff
 80057c8:	40012c00 	.word	0x40012c00
 80057cc:	fffff7ff 	.word	0xfffff7ff
 80057d0:	fffffbff 	.word	0xfffffbff
 80057d4:	ffffcfff 	.word	0xffffcfff
 80057d8:	40014000 	.word	0x40014000
 80057dc:	40014400 	.word	0x40014400
 80057e0:	40014800 	.word	0x40014800

080057e4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057e4:	6a03      	ldr	r3, [r0, #32]
 80057e6:	4a14      	ldr	r2, [pc, #80]	; (8005838 <TIM_OC4_SetConfig+0x54>)
{
 80057e8:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057ea:	4013      	ands	r3, r2
 80057ec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ee:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057f0:	4c12      	ldr	r4, [pc, #72]	; (800583c <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 80057f2:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80057f4:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057f6:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057f8:	680c      	ldr	r4, [r1, #0]
 80057fa:	0224      	lsls	r4, r4, #8
 80057fc:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057fe:	4c10      	ldr	r4, [pc, #64]	; (8005840 <TIM_OC4_SetConfig+0x5c>)
 8005800:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005802:	688c      	ldr	r4, [r1, #8]
 8005804:	0324      	lsls	r4, r4, #12
 8005806:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005808:	4c0e      	ldr	r4, [pc, #56]	; (8005844 <TIM_OC4_SetConfig+0x60>)
 800580a:	42a0      	cmp	r0, r4
 800580c:	d008      	beq.n	8005820 <TIM_OC4_SetConfig+0x3c>
 800580e:	4c0e      	ldr	r4, [pc, #56]	; (8005848 <TIM_OC4_SetConfig+0x64>)
 8005810:	42a0      	cmp	r0, r4
 8005812:	d005      	beq.n	8005820 <TIM_OC4_SetConfig+0x3c>
 8005814:	4c0d      	ldr	r4, [pc, #52]	; (800584c <TIM_OC4_SetConfig+0x68>)
 8005816:	42a0      	cmp	r0, r4
 8005818:	d002      	beq.n	8005820 <TIM_OC4_SetConfig+0x3c>
 800581a:	4c0d      	ldr	r4, [pc, #52]	; (8005850 <TIM_OC4_SetConfig+0x6c>)
 800581c:	42a0      	cmp	r0, r4
 800581e:	d104      	bne.n	800582a <TIM_OC4_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005820:	4c0c      	ldr	r4, [pc, #48]	; (8005854 <TIM_OC4_SetConfig+0x70>)
 8005822:	4023      	ands	r3, r4

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005824:	694c      	ldr	r4, [r1, #20]
 8005826:	01a4      	lsls	r4, r4, #6
 8005828:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582a:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800582c:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800582e:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005830:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005832:	6202      	str	r2, [r0, #32]
}
 8005834:	bd30      	pop	{r4, r5, pc}
 8005836:	46c0      	nop			; (mov r8, r8)
 8005838:	ffffefff 	.word	0xffffefff
 800583c:	feff8cff 	.word	0xfeff8cff
 8005840:	ffffdfff 	.word	0xffffdfff
 8005844:	40012c00 	.word	0x40012c00
 8005848:	40014000 	.word	0x40014000
 800584c:	40014400 	.word	0x40014400
 8005850:	40014800 	.word	0x40014800
 8005854:	ffffbfff 	.word	0xffffbfff

08005858 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005858:	6a03      	ldr	r3, [r0, #32]
 800585a:	4a13      	ldr	r2, [pc, #76]	; (80058a8 <TIM_OC5_SetConfig+0x50>)
{
 800585c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800585e:	4013      	ands	r3, r2
 8005860:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005862:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005864:	4e11      	ldr	r6, [pc, #68]	; (80058ac <TIM_OC5_SetConfig+0x54>)
  tmpcr2 =  TIMx->CR2;
 8005866:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8005868:	6d45      	ldr	r5, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800586a:	4035      	ands	r5, r6
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800586c:	680e      	ldr	r6, [r1, #0]
 800586e:	4335      	orrs	r5, r6

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005870:	4e0f      	ldr	r6, [pc, #60]	; (80058b0 <TIM_OC5_SetConfig+0x58>)
 8005872:	4034      	ands	r4, r6
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005874:	688e      	ldr	r6, [r1, #8]
 8005876:	0436      	lsls	r6, r6, #16
 8005878:	4334      	orrs	r4, r6

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800587a:	4e0e      	ldr	r6, [pc, #56]	; (80058b4 <TIM_OC5_SetConfig+0x5c>)
 800587c:	42b0      	cmp	r0, r6
 800587e:	d008      	beq.n	8005892 <TIM_OC5_SetConfig+0x3a>
 8005880:	4e0d      	ldr	r6, [pc, #52]	; (80058b8 <TIM_OC5_SetConfig+0x60>)
 8005882:	42b0      	cmp	r0, r6
 8005884:	d005      	beq.n	8005892 <TIM_OC5_SetConfig+0x3a>
 8005886:	4e0d      	ldr	r6, [pc, #52]	; (80058bc <TIM_OC5_SetConfig+0x64>)
 8005888:	42b0      	cmp	r0, r6
 800588a:	d002      	beq.n	8005892 <TIM_OC5_SetConfig+0x3a>
 800588c:	4e0c      	ldr	r6, [pc, #48]	; (80058c0 <TIM_OC5_SetConfig+0x68>)
 800588e:	42b0      	cmp	r0, r6
 8005890:	d103      	bne.n	800589a <TIM_OC5_SetConfig+0x42>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005892:	4013      	ands	r3, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005894:	694a      	ldr	r2, [r1, #20]
 8005896:	0212      	lsls	r2, r2, #8
 8005898:	4313      	orrs	r3, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800589a:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800589c:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 800589e:	6545      	str	r5, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 80058a0:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058a2:	6204      	str	r4, [r0, #32]
}
 80058a4:	bd70      	pop	{r4, r5, r6, pc}
 80058a6:	46c0      	nop			; (mov r8, r8)
 80058a8:	fffeffff 	.word	0xfffeffff
 80058ac:	fffeff8f 	.word	0xfffeff8f
 80058b0:	fffdffff 	.word	0xfffdffff
 80058b4:	40012c00 	.word	0x40012c00
 80058b8:	40014000 	.word	0x40014000
 80058bc:	40014400 	.word	0x40014400
 80058c0:	40014800 	.word	0x40014800

080058c4 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058c4:	6a03      	ldr	r3, [r0, #32]
 80058c6:	4a14      	ldr	r2, [pc, #80]	; (8005918 <TIM_OC6_SetConfig+0x54>)
{
 80058c8:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058ca:	4013      	ands	r3, r2
 80058cc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ce:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058d0:	4c12      	ldr	r4, [pc, #72]	; (800591c <TIM_OC6_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 80058d2:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 80058d4:	6d45      	ldr	r5, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058d6:	4025      	ands	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058d8:	680c      	ldr	r4, [r1, #0]
 80058da:	0224      	lsls	r4, r4, #8
 80058dc:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058de:	4c10      	ldr	r4, [pc, #64]	; (8005920 <TIM_OC6_SetConfig+0x5c>)
 80058e0:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80058e2:	688c      	ldr	r4, [r1, #8]
 80058e4:	0524      	lsls	r4, r4, #20
 80058e6:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e8:	4c0e      	ldr	r4, [pc, #56]	; (8005924 <TIM_OC6_SetConfig+0x60>)
 80058ea:	42a0      	cmp	r0, r4
 80058ec:	d008      	beq.n	8005900 <TIM_OC6_SetConfig+0x3c>
 80058ee:	4c0e      	ldr	r4, [pc, #56]	; (8005928 <TIM_OC6_SetConfig+0x64>)
 80058f0:	42a0      	cmp	r0, r4
 80058f2:	d005      	beq.n	8005900 <TIM_OC6_SetConfig+0x3c>
 80058f4:	4c0d      	ldr	r4, [pc, #52]	; (800592c <TIM_OC6_SetConfig+0x68>)
 80058f6:	42a0      	cmp	r0, r4
 80058f8:	d002      	beq.n	8005900 <TIM_OC6_SetConfig+0x3c>
 80058fa:	4c0d      	ldr	r4, [pc, #52]	; (8005930 <TIM_OC6_SetConfig+0x6c>)
 80058fc:	42a0      	cmp	r0, r4
 80058fe:	d104      	bne.n	800590a <TIM_OC6_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005900:	4c0c      	ldr	r4, [pc, #48]	; (8005934 <TIM_OC6_SetConfig+0x70>)
 8005902:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005904:	694c      	ldr	r4, [r1, #20]
 8005906:	02a4      	lsls	r4, r4, #10
 8005908:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590a:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800590c:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 800590e:	6545      	str	r5, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8005910:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005912:	6202      	str	r2, [r0, #32]
}
 8005914:	bd30      	pop	{r4, r5, pc}
 8005916:	46c0      	nop			; (mov r8, r8)
 8005918:	ffefffff 	.word	0xffefffff
 800591c:	feff8fff 	.word	0xfeff8fff
 8005920:	ffdfffff 	.word	0xffdfffff
 8005924:	40012c00 	.word	0x40012c00
 8005928:	40014000 	.word	0x40014000
 800592c:	40014400 	.word	0x40014400
 8005930:	40014800 	.word	0x40014800
 8005934:	fffbffff 	.word	0xfffbffff

08005938 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005938:	2201      	movs	r2, #1
 800593a:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800593c:	4807      	ldr	r0, [pc, #28]	; (800595c <HAL_TIM_Base_Start_IT+0x24>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800593e:	68d9      	ldr	r1, [r3, #12]
 8005940:	4311      	orrs	r1, r2
 8005942:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005944:	6899      	ldr	r1, [r3, #8]
 8005946:	4001      	ands	r1, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005948:	2906      	cmp	r1, #6
 800594a:	d005      	beq.n	8005958 <HAL_TIM_Base_Start_IT+0x20>
 800594c:	3807      	subs	r0, #7
 800594e:	4281      	cmp	r1, r0
 8005950:	d002      	beq.n	8005958 <HAL_TIM_Base_Start_IT+0x20>
    __HAL_TIM_ENABLE(htim);
 8005952:	6819      	ldr	r1, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	601a      	str	r2, [r3, #0]
}
 8005958:	2000      	movs	r0, #0
 800595a:	4770      	bx	lr
 800595c:	00010007 	.word	0x00010007

08005960 <HAL_TIM_PWM_MspInit>:
 8005960:	4770      	bx	lr

08005962 <HAL_TIM_IC_MspInit>:
 8005962:	4770      	bx	lr

08005964 <HAL_TIM_OC_DelayElapsedCallback>:
 8005964:	4770      	bx	lr

08005966 <HAL_TIM_IC_CaptureCallback>:
 8005966:	4770      	bx	lr

08005968 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005968:	4770      	bx	lr

0800596a <HAL_TIM_TriggerCallback>:
 800596a:	4770      	bx	lr

0800596c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800596c:	2202      	movs	r2, #2
 800596e:	6803      	ldr	r3, [r0, #0]
{
 8005970:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005972:	6919      	ldr	r1, [r3, #16]
{
 8005974:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005976:	4211      	tst	r1, r2
 8005978:	d00e      	beq.n	8005998 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800597a:	68d9      	ldr	r1, [r3, #12]
 800597c:	4211      	tst	r1, r2
 800597e:	d00b      	beq.n	8005998 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005980:	3a05      	subs	r2, #5
 8005982:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005984:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005986:	3204      	adds	r2, #4
 8005988:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800598a:	079b      	lsls	r3, r3, #30
 800598c:	d100      	bne.n	8005990 <HAL_TIM_IRQHandler+0x24>
 800598e:	e086      	b.n	8005a9e <HAL_TIM_IRQHandler+0x132>
          HAL_TIM_IC_CaptureCallback(htim);
 8005990:	f7ff ffe9 	bl	8005966 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005994:	2300      	movs	r3, #0
 8005996:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005998:	2204      	movs	r2, #4
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	6919      	ldr	r1, [r3, #16]
 800599e:	4211      	tst	r1, r2
 80059a0:	d011      	beq.n	80059c6 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059a2:	68d9      	ldr	r1, [r3, #12]
 80059a4:	4211      	tst	r1, r2
 80059a6:	d00e      	beq.n	80059c6 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059a8:	3a09      	subs	r2, #9
 80059aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059ac:	3207      	adds	r2, #7
 80059ae:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059b0:	699a      	ldr	r2, [r3, #24]
 80059b2:	23c0      	movs	r3, #192	; 0xc0
 80059b4:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80059b6:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059b8:	421a      	tst	r2, r3
 80059ba:	d100      	bne.n	80059be <HAL_TIM_IRQHandler+0x52>
 80059bc:	e075      	b.n	8005aaa <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_IC_CaptureCallback(htim);
 80059be:	f7ff ffd2 	bl	8005966 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c2:	2300      	movs	r3, #0
 80059c4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059c6:	2208      	movs	r2, #8
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	6919      	ldr	r1, [r3, #16]
 80059cc:	4211      	tst	r1, r2
 80059ce:	d00e      	beq.n	80059ee <HAL_TIM_IRQHandler+0x82>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059d0:	68d9      	ldr	r1, [r3, #12]
 80059d2:	4211      	tst	r1, r2
 80059d4:	d00b      	beq.n	80059ee <HAL_TIM_IRQHandler+0x82>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059d6:	3a11      	subs	r2, #17
 80059d8:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059da:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059dc:	320d      	adds	r2, #13
 80059de:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80059e0:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059e2:	079b      	lsls	r3, r3, #30
 80059e4:	d067      	beq.n	8005ab6 <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 80059e6:	f7ff ffbe 	bl	8005966 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ea:	2300      	movs	r3, #0
 80059ec:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059ee:	2210      	movs	r2, #16
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	6919      	ldr	r1, [r3, #16]
 80059f4:	4211      	tst	r1, r2
 80059f6:	d010      	beq.n	8005a1a <HAL_TIM_IRQHandler+0xae>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059f8:	68d9      	ldr	r1, [r3, #12]
 80059fa:	4211      	tst	r1, r2
 80059fc:	d00d      	beq.n	8005a1a <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059fe:	3a21      	subs	r2, #33	; 0x21
 8005a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a02:	3219      	adds	r2, #25
 8005a04:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a06:	69da      	ldr	r2, [r3, #28]
 8005a08:	23c0      	movs	r3, #192	; 0xc0
 8005a0a:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8005a0c:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a0e:	421a      	tst	r2, r3
 8005a10:	d057      	beq.n	8005ac2 <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_IC_CaptureCallback(htim);
 8005a12:	f7ff ffa8 	bl	8005966 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a16:	2300      	movs	r3, #0
 8005a18:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	6919      	ldr	r1, [r3, #16]
 8005a20:	4211      	tst	r1, r2
 8005a22:	d007      	beq.n	8005a34 <HAL_TIM_IRQHandler+0xc8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a24:	68d9      	ldr	r1, [r3, #12]
 8005a26:	4211      	tst	r1, r2
 8005a28:	d004      	beq.n	8005a34 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a2a:	3a03      	subs	r2, #3
 8005a2c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a2e:	0020      	movs	r0, r4
 8005a30:	f7fd f9dc 	bl	8002dec <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a34:	2280      	movs	r2, #128	; 0x80
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	6919      	ldr	r1, [r3, #16]
 8005a3a:	4211      	tst	r1, r2
 8005a3c:	d008      	beq.n	8005a50 <HAL_TIM_IRQHandler+0xe4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a3e:	68d9      	ldr	r1, [r3, #12]
 8005a40:	4211      	tst	r1, r2
 8005a42:	d005      	beq.n	8005a50 <HAL_TIM_IRQHandler+0xe4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a44:	3a02      	subs	r2, #2
 8005a46:	3aff      	subs	r2, #255	; 0xff
 8005a48:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005a4a:	0020      	movs	r0, r4
 8005a4c:	f000 fb7b 	bl	8006146 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a50:	6823      	ldr	r3, [r4, #0]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	05d2      	lsls	r2, r2, #23
 8005a56:	d507      	bpl.n	8005a68 <HAL_TIM_IRQHandler+0xfc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	0612      	lsls	r2, r2, #24
 8005a5c:	d504      	bpl.n	8005a68 <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a5e:	4a1c      	ldr	r2, [pc, #112]	; (8005ad0 <HAL_TIM_IRQHandler+0x164>)
      HAL_TIMEx_Break2Callback(htim);
 8005a60:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a62:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005a64:	f000 fb70 	bl	8006148 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a68:	2240      	movs	r2, #64	; 0x40
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	6919      	ldr	r1, [r3, #16]
 8005a6e:	4211      	tst	r1, r2
 8005a70:	d007      	beq.n	8005a82 <HAL_TIM_IRQHandler+0x116>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a72:	68d9      	ldr	r1, [r3, #12]
 8005a74:	4211      	tst	r1, r2
 8005a76:	d004      	beq.n	8005a82 <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a78:	3a81      	subs	r2, #129	; 0x81
 8005a7a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005a7c:	0020      	movs	r0, r4
 8005a7e:	f7ff ff74 	bl	800596a <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a82:	2220      	movs	r2, #32
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	6919      	ldr	r1, [r3, #16]
 8005a88:	4211      	tst	r1, r2
 8005a8a:	d007      	beq.n	8005a9c <HAL_TIM_IRQHandler+0x130>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a8c:	68d9      	ldr	r1, [r3, #12]
 8005a8e:	4211      	tst	r1, r2
 8005a90:	d004      	beq.n	8005a9c <HAL_TIM_IRQHandler+0x130>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a92:	3a41      	subs	r2, #65	; 0x41
 8005a94:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005a96:	0020      	movs	r0, r4
 8005a98:	f000 fb54 	bl	8006144 <HAL_TIMEx_CommutCallback>
}
 8005a9c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a9e:	f7ff ff61 	bl	8005964 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa2:	0020      	movs	r0, r4
 8005aa4:	f7ff ff60 	bl	8005968 <HAL_TIM_PWM_PulseFinishedCallback>
 8005aa8:	e774      	b.n	8005994 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aaa:	f7ff ff5b 	bl	8005964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aae:	0020      	movs	r0, r4
 8005ab0:	f7ff ff5a 	bl	8005968 <HAL_TIM_PWM_PulseFinishedCallback>
 8005ab4:	e785      	b.n	80059c2 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab6:	f7ff ff55 	bl	8005964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aba:	0020      	movs	r0, r4
 8005abc:	f7ff ff54 	bl	8005968 <HAL_TIM_PWM_PulseFinishedCallback>
 8005ac0:	e793      	b.n	80059ea <HAL_TIM_IRQHandler+0x7e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac2:	f7ff ff4f 	bl	8005964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac6:	0020      	movs	r0, r4
 8005ac8:	f7ff ff4e 	bl	8005968 <HAL_TIM_PWM_PulseFinishedCallback>
 8005acc:	e7a3      	b.n	8005a16 <HAL_TIM_IRQHandler+0xaa>
 8005ace:	46c0      	nop			; (mov r8, r8)
 8005ad0:	fffffeff 	.word	0xfffffeff

08005ad4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ad4:	4a1c      	ldr	r2, [pc, #112]	; (8005b48 <TIM_Base_SetConfig+0x74>)
{
 8005ad6:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8005ad8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ada:	4290      	cmp	r0, r2
 8005adc:	d002      	beq.n	8005ae4 <TIM_Base_SetConfig+0x10>
 8005ade:	4c1b      	ldr	r4, [pc, #108]	; (8005b4c <TIM_Base_SetConfig+0x78>)
 8005ae0:	42a0      	cmp	r0, r4
 8005ae2:	d108      	bne.n	8005af6 <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ae4:	2470      	movs	r4, #112	; 0x70
 8005ae6:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8005ae8:	684c      	ldr	r4, [r1, #4]
 8005aea:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aec:	4290      	cmp	r0, r2
 8005aee:	d00e      	beq.n	8005b0e <TIM_Base_SetConfig+0x3a>
 8005af0:	4c16      	ldr	r4, [pc, #88]	; (8005b4c <TIM_Base_SetConfig+0x78>)
 8005af2:	42a0      	cmp	r0, r4
 8005af4:	d00b      	beq.n	8005b0e <TIM_Base_SetConfig+0x3a>
 8005af6:	4c16      	ldr	r4, [pc, #88]	; (8005b50 <TIM_Base_SetConfig+0x7c>)
 8005af8:	42a0      	cmp	r0, r4
 8005afa:	d008      	beq.n	8005b0e <TIM_Base_SetConfig+0x3a>
 8005afc:	4c15      	ldr	r4, [pc, #84]	; (8005b54 <TIM_Base_SetConfig+0x80>)
 8005afe:	42a0      	cmp	r0, r4
 8005b00:	d005      	beq.n	8005b0e <TIM_Base_SetConfig+0x3a>
 8005b02:	4c15      	ldr	r4, [pc, #84]	; (8005b58 <TIM_Base_SetConfig+0x84>)
 8005b04:	42a0      	cmp	r0, r4
 8005b06:	d002      	beq.n	8005b0e <TIM_Base_SetConfig+0x3a>
 8005b08:	4c14      	ldr	r4, [pc, #80]	; (8005b5c <TIM_Base_SetConfig+0x88>)
 8005b0a:	42a0      	cmp	r0, r4
 8005b0c:	d103      	bne.n	8005b16 <TIM_Base_SetConfig+0x42>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b0e:	4c14      	ldr	r4, [pc, #80]	; (8005b60 <TIM_Base_SetConfig+0x8c>)
 8005b10:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b12:	68cc      	ldr	r4, [r1, #12]
 8005b14:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b16:	2480      	movs	r4, #128	; 0x80
 8005b18:	43a3      	bics	r3, r4
 8005b1a:	694c      	ldr	r4, [r1, #20]
 8005b1c:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8005b1e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b20:	688b      	ldr	r3, [r1, #8]
 8005b22:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005b24:	680b      	ldr	r3, [r1, #0]
 8005b26:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b28:	4290      	cmp	r0, r2
 8005b2a:	d008      	beq.n	8005b3e <TIM_Base_SetConfig+0x6a>
 8005b2c:	4b09      	ldr	r3, [pc, #36]	; (8005b54 <TIM_Base_SetConfig+0x80>)
 8005b2e:	4298      	cmp	r0, r3
 8005b30:	d005      	beq.n	8005b3e <TIM_Base_SetConfig+0x6a>
 8005b32:	4b09      	ldr	r3, [pc, #36]	; (8005b58 <TIM_Base_SetConfig+0x84>)
 8005b34:	4298      	cmp	r0, r3
 8005b36:	d002      	beq.n	8005b3e <TIM_Base_SetConfig+0x6a>
 8005b38:	4b08      	ldr	r3, [pc, #32]	; (8005b5c <TIM_Base_SetConfig+0x88>)
 8005b3a:	4298      	cmp	r0, r3
 8005b3c:	d101      	bne.n	8005b42 <TIM_Base_SetConfig+0x6e>
    TIMx->RCR = Structure->RepetitionCounter;
 8005b3e:	690b      	ldr	r3, [r1, #16]
 8005b40:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005b42:	2301      	movs	r3, #1
 8005b44:	6143      	str	r3, [r0, #20]
}
 8005b46:	bd10      	pop	{r4, pc}
 8005b48:	40012c00 	.word	0x40012c00
 8005b4c:	40000400 	.word	0x40000400
 8005b50:	40002000 	.word	0x40002000
 8005b54:	40014000 	.word	0x40014000
 8005b58:	40014400 	.word	0x40014400
 8005b5c:	40014800 	.word	0x40014800
 8005b60:	fffffcff 	.word	0xfffffcff

08005b64 <HAL_TIM_Base_Init>:
{
 8005b64:	b570      	push	{r4, r5, r6, lr}
 8005b66:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005b68:	2001      	movs	r0, #1
  if (htim == NULL)
 8005b6a:	2c00      	cmp	r4, #0
 8005b6c:	d014      	beq.n	8005b98 <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005b6e:	0025      	movs	r5, r4
 8005b70:	353d      	adds	r5, #61	; 0x3d
 8005b72:	782b      	ldrb	r3, [r5, #0]
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d105      	bne.n	8005b86 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8005b7a:	0022      	movs	r2, r4
 8005b7c:	323c      	adds	r2, #60	; 0x3c
 8005b7e:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8005b80:	0020      	movs	r0, r4
 8005b82:	f7fd ff07 	bl	8003994 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005b86:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b88:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005b8a:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b8c:	1d21      	adds	r1, r4, #4
 8005b8e:	f7ff ffa1 	bl	8005ad4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005b92:	2301      	movs	r3, #1
  return HAL_OK;
 8005b94:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005b96:	702b      	strb	r3, [r5, #0]
}
 8005b98:	bd70      	pop	{r4, r5, r6, pc}

08005b9a <HAL_TIM_PWM_Init>:
{
 8005b9a:	b570      	push	{r4, r5, r6, lr}
 8005b9c:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005b9e:	2001      	movs	r0, #1
  if (htim == NULL)
 8005ba0:	2c00      	cmp	r4, #0
 8005ba2:	d014      	beq.n	8005bce <HAL_TIM_PWM_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005ba4:	0025      	movs	r5, r4
 8005ba6:	353d      	adds	r5, #61	; 0x3d
 8005ba8:	782b      	ldrb	r3, [r5, #0]
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d105      	bne.n	8005bbc <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8005bb0:	0022      	movs	r2, r4
 8005bb2:	323c      	adds	r2, #60	; 0x3c
 8005bb4:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 8005bb6:	0020      	movs	r0, r4
 8005bb8:	f7ff fed2 	bl	8005960 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005bbc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bbe:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc0:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bc2:	1d21      	adds	r1, r4, #4
 8005bc4:	f7ff ff86 	bl	8005ad4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005bc8:	2301      	movs	r3, #1
  return HAL_OK;
 8005bca:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005bcc:	702b      	strb	r3, [r5, #0]
}
 8005bce:	bd70      	pop	{r4, r5, r6, pc}

08005bd0 <HAL_TIM_IC_Init>:
{
 8005bd0:	b570      	push	{r4, r5, r6, lr}
 8005bd2:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005bd4:	2001      	movs	r0, #1
  if (htim == NULL)
 8005bd6:	2c00      	cmp	r4, #0
 8005bd8:	d014      	beq.n	8005c04 <HAL_TIM_IC_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005bda:	0025      	movs	r5, r4
 8005bdc:	353d      	adds	r5, #61	; 0x3d
 8005bde:	782b      	ldrb	r3, [r5, #0]
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d105      	bne.n	8005bf2 <HAL_TIM_IC_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8005be6:	0022      	movs	r2, r4
 8005be8:	323c      	adds	r2, #60	; 0x3c
 8005bea:	7013      	strb	r3, [r2, #0]
    HAL_TIM_IC_MspInit(htim);
 8005bec:	0020      	movs	r0, r4
 8005bee:	f7ff feb8 	bl	8005962 <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf2:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bf4:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf6:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bf8:	1d21      	adds	r1, r4, #4
 8005bfa:	f7ff ff6b 	bl	8005ad4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005bfe:	2301      	movs	r3, #1
  return HAL_OK;
 8005c00:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005c02:	702b      	strb	r3, [r5, #0]
}
 8005c04:	bd70      	pop	{r4, r5, r6, pc}
	...

08005c08 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c08:	2210      	movs	r2, #16
 8005c0a:	6a03      	ldr	r3, [r0, #32]
{
 8005c0c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c0e:	4393      	bics	r3, r2
 8005c10:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005c12:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c14:	4d16      	ldr	r5, [pc, #88]	; (8005c70 <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 8005c16:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005c18:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c1a:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c1c:	680d      	ldr	r5, [r1, #0]
 8005c1e:	022d      	lsls	r5, r5, #8
 8005c20:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 8005c22:	2520      	movs	r5, #32
 8005c24:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c26:	688d      	ldr	r5, [r1, #8]
 8005c28:	012d      	lsls	r5, r5, #4
 8005c2a:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c2c:	4d11      	ldr	r5, [pc, #68]	; (8005c74 <TIM_OC2_SetConfig+0x6c>)
 8005c2e:	42a8      	cmp	r0, r5
 8005c30:	d10f      	bne.n	8005c52 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c32:	2580      	movs	r5, #128	; 0x80
 8005c34:	43aa      	bics	r2, r5
 8005c36:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c38:	68ca      	ldr	r2, [r1, #12]
 8005c3a:	0112      	lsls	r2, r2, #4
 8005c3c:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c3e:	2540      	movs	r5, #64	; 0x40
 8005c40:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c42:	4d0d      	ldr	r5, [pc, #52]	; (8005c78 <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c44:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c46:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c48:	698b      	ldr	r3, [r1, #24]
 8005c4a:	4333      	orrs	r3, r6
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	432b      	orrs	r3, r5
 8005c50:	e008      	b.n	8005c64 <TIM_OC2_SetConfig+0x5c>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c52:	4d0a      	ldr	r5, [pc, #40]	; (8005c7c <TIM_OC2_SetConfig+0x74>)
 8005c54:	42a8      	cmp	r0, r5
 8005c56:	d0f4      	beq.n	8005c42 <TIM_OC2_SetConfig+0x3a>
 8005c58:	4d09      	ldr	r5, [pc, #36]	; (8005c80 <TIM_OC2_SetConfig+0x78>)
 8005c5a:	42a8      	cmp	r0, r5
 8005c5c:	d0f1      	beq.n	8005c42 <TIM_OC2_SetConfig+0x3a>
 8005c5e:	4d09      	ldr	r5, [pc, #36]	; (8005c84 <TIM_OC2_SetConfig+0x7c>)
 8005c60:	42a8      	cmp	r0, r5
 8005c62:	d0ee      	beq.n	8005c42 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8005c64:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8005c66:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005c68:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005c6a:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005c6c:	6202      	str	r2, [r0, #32]
}
 8005c6e:	bd70      	pop	{r4, r5, r6, pc}
 8005c70:	feff8cff 	.word	0xfeff8cff
 8005c74:	40012c00 	.word	0x40012c00
 8005c78:	fffff3ff 	.word	0xfffff3ff
 8005c7c:	40014000 	.word	0x40014000
 8005c80:	40014400 	.word	0x40014400
 8005c84:	40014800 	.word	0x40014800

08005c88 <HAL_TIM_PWM_ConfigChannel>:
{
 8005c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8005c8a:	0007      	movs	r7, r0
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	373c      	adds	r7, #60	; 0x3c
{
 8005c90:	0016      	movs	r6, r2
  __HAL_LOCK(htim);
 8005c92:	783a      	ldrb	r2, [r7, #0]
{
 8005c94:	0004      	movs	r4, r0
 8005c96:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8005c98:	0018      	movs	r0, r3
 8005c9a:	2a01      	cmp	r2, #1
 8005c9c:	d011      	beq.n	8005cc2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	703a      	strb	r2, [r7, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca2:	0022      	movs	r2, r4
 8005ca4:	323d      	adds	r2, #61	; 0x3d
 8005ca6:	9201      	str	r2, [sp, #4]
 8005ca8:	7013      	strb	r3, [r2, #0]
  switch (Channel)
 8005caa:	2e08      	cmp	r6, #8
 8005cac:	d043      	beq.n	8005d36 <HAL_TIM_PWM_ConfigChannel+0xae>
 8005cae:	d809      	bhi.n	8005cc4 <HAL_TIM_PWM_ConfigChannel+0x3c>
 8005cb0:	2e00      	cmp	r6, #0
 8005cb2:	d01e      	beq.n	8005cf2 <HAL_TIM_PWM_ConfigChannel+0x6a>
 8005cb4:	2e04      	cmp	r6, #4
 8005cb6:	d02d      	beq.n	8005d14 <HAL_TIM_PWM_ConfigChannel+0x8c>
  htim->State = HAL_TIM_STATE_READY;
 8005cb8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005cba:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005cbc:	9a01      	ldr	r2, [sp, #4]
 8005cbe:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(htim);
 8005cc0:	7038      	strb	r0, [r7, #0]
}
 8005cc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8005cc4:	2e10      	cmp	r6, #16
 8005cc6:	d046      	beq.n	8005d56 <HAL_TIM_PWM_ConfigChannel+0xce>
 8005cc8:	2e14      	cmp	r6, #20
 8005cca:	d055      	beq.n	8005d78 <HAL_TIM_PWM_ConfigChannel+0xf0>
 8005ccc:	2e0c      	cmp	r6, #12
 8005cce:	d1f3      	bne.n	8005cb8 <HAL_TIM_PWM_ConfigChannel+0x30>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cd0:	6820      	ldr	r0, [r4, #0]
 8005cd2:	f7ff fd87 	bl	80057e4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cd6:	2280      	movs	r2, #128	; 0x80
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	0112      	lsls	r2, r2, #4
 8005cdc:	69d9      	ldr	r1, [r3, #28]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ce2:	69da      	ldr	r2, [r3, #28]
 8005ce4:	492d      	ldr	r1, [pc, #180]	; (8005d9c <HAL_TIM_PWM_ConfigChannel+0x114>)
 8005ce6:	400a      	ands	r2, r1
 8005ce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cea:	692a      	ldr	r2, [r5, #16]
 8005cec:	69d9      	ldr	r1, [r3, #28]
 8005cee:	0212      	lsls	r2, r2, #8
 8005cf0:	e02e      	b.n	8005d50 <HAL_TIM_PWM_ConfigChannel+0xc8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cf2:	6820      	ldr	r0, [r4, #0]
 8005cf4:	f7ff fcea 	bl	80056cc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cf8:	2208      	movs	r2, #8
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	6999      	ldr	r1, [r3, #24]
 8005cfe:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d00:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d04:	699a      	ldr	r2, [r3, #24]
 8005d06:	438a      	bics	r2, r1
 8005d08:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d0a:	699a      	ldr	r2, [r3, #24]
 8005d0c:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	619a      	str	r2, [r3, #24]
      break;
 8005d12:	e7d1      	b.n	8005cb8 <HAL_TIM_PWM_ConfigChannel+0x30>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d14:	6820      	ldr	r0, [r4, #0]
 8005d16:	f7ff ff77 	bl	8005c08 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d1a:	2280      	movs	r2, #128	; 0x80
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	0112      	lsls	r2, r2, #4
 8005d20:	6999      	ldr	r1, [r3, #24]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d26:	699a      	ldr	r2, [r3, #24]
 8005d28:	491c      	ldr	r1, [pc, #112]	; (8005d9c <HAL_TIM_PWM_ConfigChannel+0x114>)
 8005d2a:	400a      	ands	r2, r1
 8005d2c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d2e:	692a      	ldr	r2, [r5, #16]
 8005d30:	6999      	ldr	r1, [r3, #24]
 8005d32:	0212      	lsls	r2, r2, #8
 8005d34:	e7eb      	b.n	8005d0e <HAL_TIM_PWM_ConfigChannel+0x86>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d36:	6820      	ldr	r0, [r4, #0]
 8005d38:	f7ff fd0e 	bl	8005758 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d3c:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d3e:	6823      	ldr	r3, [r4, #0]
 8005d40:	69da      	ldr	r2, [r3, #28]
 8005d42:	4316      	orrs	r6, r2
 8005d44:	61de      	str	r6, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d46:	69da      	ldr	r2, [r3, #28]
 8005d48:	438a      	bics	r2, r1
 8005d4a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d4c:	69da      	ldr	r2, [r3, #28]
 8005d4e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d50:	430a      	orrs	r2, r1
 8005d52:	61da      	str	r2, [r3, #28]
      break;
 8005d54:	e7b0      	b.n	8005cb8 <HAL_TIM_PWM_ConfigChannel+0x30>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d56:	6820      	ldr	r0, [r4, #0]
 8005d58:	f7ff fd7e 	bl	8005858 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d5c:	2208      	movs	r2, #8
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d62:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d64:	2104      	movs	r1, #4
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d6a:	438a      	bics	r2, r1
 8005d6c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d70:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d72:	430a      	orrs	r2, r1
 8005d74:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d76:	e79f      	b.n	8005cb8 <HAL_TIM_PWM_ConfigChannel+0x30>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d78:	6820      	ldr	r0, [r4, #0]
 8005d7a:	f7ff fda3 	bl	80058c4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d7e:	2280      	movs	r2, #128	; 0x80
 8005d80:	6823      	ldr	r3, [r4, #0]
 8005d82:	0112      	lsls	r2, r2, #4
 8005d84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d86:	430a      	orrs	r2, r1
 8005d88:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d8c:	4903      	ldr	r1, [pc, #12]	; (8005d9c <HAL_TIM_PWM_ConfigChannel+0x114>)
 8005d8e:	400a      	ands	r2, r1
 8005d90:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d92:	692a      	ldr	r2, [r5, #16]
 8005d94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d96:	0212      	lsls	r2, r2, #8
 8005d98:	e7eb      	b.n	8005d72 <HAL_TIM_PWM_ConfigChannel+0xea>
 8005d9a:	46c0      	nop			; (mov r8, r8)
 8005d9c:	fffffbff 	.word	0xfffffbff

08005da0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005da0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005da2:	2401      	movs	r4, #1
 8005da4:	6a05      	ldr	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005da6:	4f0f      	ldr	r7, [pc, #60]	; (8005de4 <TIM_TI1_SetConfig+0x44>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005da8:	43a5      	bics	r5, r4
 8005daa:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dac:	6986      	ldr	r6, [r0, #24]
  tmpccer = TIMx->CCER;
 8005dae:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005db0:	42b8      	cmp	r0, r7
 8005db2:	d005      	beq.n	8005dc0 <TIM_TI1_SetConfig+0x20>
 8005db4:	4f0c      	ldr	r7, [pc, #48]	; (8005de8 <TIM_TI1_SetConfig+0x48>)
 8005db6:	42b8      	cmp	r0, r7
 8005db8:	d002      	beq.n	8005dc0 <TIM_TI1_SetConfig+0x20>
 8005dba:	4f0c      	ldr	r7, [pc, #48]	; (8005dec <TIM_TI1_SetConfig+0x4c>)
 8005dbc:	42b8      	cmp	r0, r7
 8005dbe:	d10f      	bne.n	8005de0 <TIM_TI1_SetConfig+0x40>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005dc0:	2403      	movs	r4, #3
 8005dc2:	43a6      	bics	r6, r4
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dc4:	24f0      	movs	r4, #240	; 0xf0
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005dc6:	4332      	orrs	r2, r6
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dc8:	43a2      	bics	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	340f      	adds	r4, #15
 8005dce:	4023      	ands	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dd0:	3cf5      	subs	r4, #245	; 0xf5
 8005dd2:	43a5      	bics	r5, r4
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005dd4:	4021      	ands	r1, r4
 8005dd6:	4329      	orrs	r1, r5
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005dd8:	431a      	orrs	r2, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dda:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005ddc:	6201      	str	r1, [r0, #32]
}
 8005dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005de0:	0022      	movs	r2, r4
 8005de2:	e7ef      	b.n	8005dc4 <TIM_TI1_SetConfig+0x24>
 8005de4:	40012c00 	.word	0x40012c00
 8005de8:	40000400 	.word	0x40000400
 8005dec:	40014000 	.word	0x40014000

08005df0 <HAL_TIM_IC_ConfigChannel>:
{
 8005df0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005df2:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8005df4:	0001      	movs	r1, r0
 8005df6:	2302      	movs	r3, #2
 8005df8:	313c      	adds	r1, #60	; 0x3c
 8005dfa:	780e      	ldrb	r6, [r1, #0]
{
 8005dfc:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8005dfe:	0018      	movs	r0, r3
 8005e00:	2e01      	cmp	r6, #1
 8005e02:	d01a      	beq.n	8005e3a <HAL_TIM_IC_ConfigChannel+0x4a>
 8005e04:	3801      	subs	r0, #1
 8005e06:	7008      	strb	r0, [r1, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005e08:	704b      	strb	r3, [r1, #1]
  if (Channel == TIM_CHANNEL_1)
 8005e0a:	2a00      	cmp	r2, #0
 8005e0c:	d116      	bne.n	8005e3c <HAL_TIM_IC_ConfigChannel+0x4c>
    TIM_TI1_SetConfig(htim->Instance,
 8005e0e:	68eb      	ldr	r3, [r5, #12]
 8005e10:	686a      	ldr	r2, [r5, #4]
 8005e12:	6829      	ldr	r1, [r5, #0]
 8005e14:	6820      	ldr	r0, [r4, #0]
 8005e16:	f7ff ffc3 	bl	8005da0 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005e1a:	210c      	movs	r1, #12
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	699a      	ldr	r2, [r3, #24]
 8005e20:	438a      	bics	r2, r1
 8005e22:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005e24:	699a      	ldr	r2, [r3, #24]
 8005e26:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8005e2c:	0023      	movs	r3, r4
 8005e2e:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8005e30:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005e32:	333d      	adds	r3, #61	; 0x3d
  __HAL_UNLOCK(htim);
 8005e34:	343c      	adds	r4, #60	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8005e36:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(htim);
 8005e38:	7020      	strb	r0, [r4, #0]
}
 8005e3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e3c:	6829      	ldr	r1, [r5, #0]
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	9101      	str	r1, [sp, #4]
 8005e42:	686e      	ldr	r6, [r5, #4]
 8005e44:	68e8      	ldr	r0, [r5, #12]
  else if (Channel == TIM_CHANNEL_2)
 8005e46:	2a04      	cmp	r2, #4
 8005e48:	d11e      	bne.n	8005e88 <HAL_TIM_IC_ConfigChannel+0x98>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e4a:	2710      	movs	r7, #16
 8005e4c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005e4e:	4930      	ldr	r1, [pc, #192]	; (8005f10 <HAL_TIM_IC_ConfigChannel+0x120>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e50:	43ba      	bics	r2, r7
 8005e52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e54:	699f      	ldr	r7, [r3, #24]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005e56:	0236      	lsls	r6, r6, #8
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005e58:	400f      	ands	r7, r1
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005e5a:	433e      	orrs	r6, r7

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e5c:	4f2d      	ldr	r7, [pc, #180]	; (8005f14 <HAL_TIM_IC_ConfigChannel+0x124>)
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005e5e:	0700      	lsls	r0, r0, #28
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e60:	403e      	ands	r6, r7
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005e62:	0c00      	lsrs	r0, r0, #16
 8005e64:	4330      	orrs	r0, r6

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e66:	26a0      	movs	r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e68:	9901      	ldr	r1, [sp, #4]
  tmpccer = TIMx->CCER;
 8005e6a:	6a1a      	ldr	r2, [r3, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e6c:	0109      	lsls	r1, r1, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e6e:	43b2      	bics	r2, r6
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e70:	4031      	ands	r1, r6
 8005e72:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e74:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e76:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005e78:	699a      	ldr	r2, [r3, #24]
 8005e7a:	4927      	ldr	r1, [pc, #156]	; (8005f18 <HAL_TIM_IC_ConfigChannel+0x128>)
 8005e7c:	400a      	ands	r2, r1
 8005e7e:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005e80:	68aa      	ldr	r2, [r5, #8]
 8005e82:	6999      	ldr	r1, [r3, #24]
 8005e84:	0212      	lsls	r2, r2, #8
 8005e86:	e7cf      	b.n	8005e28 <HAL_TIM_IC_ConfigChannel+0x38>
 8005e88:	68ad      	ldr	r5, [r5, #8]
  else if (Channel == TIM_CHANNEL_3)
 8005e8a:	2a08      	cmp	r2, #8
 8005e8c:	d120      	bne.n	8005ed0 <HAL_TIM_IC_ConfigChannel+0xe0>
  TIMx->CCER &= ~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e8e:	2103      	movs	r1, #3
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e90:	6a1a      	ldr	r2, [r3, #32]
 8005e92:	4f22      	ldr	r7, [pc, #136]	; (8005f1c <HAL_TIM_IC_ConfigChannel+0x12c>)
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005e94:	0100      	lsls	r0, r0, #4
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e96:	403a      	ands	r2, r7
 8005e98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e9a:	69df      	ldr	r7, [r3, #28]
  tmpccer = TIMx->CCER;
 8005e9c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e9e:	438f      	bics	r7, r1
  tmpccmr2 |= TIM_ICSelection;
 8005ea0:	433e      	orrs	r6, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005ea2:	27f0      	movs	r7, #240	; 0xf0
 8005ea4:	43be      	bics	r6, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005ea6:	370f      	adds	r7, #15
 8005ea8:	4038      	ands	r0, r7
 8005eaa:	4306      	orrs	r6, r0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005eac:	481c      	ldr	r0, [pc, #112]	; (8005f20 <HAL_TIM_IC_ConfigChannel+0x130>)
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005eae:	9901      	ldr	r1, [sp, #4]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005eb0:	4002      	ands	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005eb2:	20a0      	movs	r0, #160	; 0xa0
 8005eb4:	0209      	lsls	r1, r1, #8
 8005eb6:	0100      	lsls	r0, r0, #4
 8005eb8:	4001      	ands	r1, r0
 8005eba:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ebc:	61de      	str	r6, [r3, #28]
  TIMx->CCER = tmpccer;
 8005ebe:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005ec0:	210c      	movs	r1, #12
 8005ec2:	69da      	ldr	r2, [r3, #28]
 8005ec4:	438a      	bics	r2, r1
 8005ec6:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005ec8:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005eca:	4315      	orrs	r5, r2
 8005ecc:	61dd      	str	r5, [r3, #28]
 8005ece:	e7ad      	b.n	8005e2c <HAL_TIM_IC_ConfigChannel+0x3c>
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ed0:	6a1a      	ldr	r2, [r3, #32]
 8005ed2:	4f14      	ldr	r7, [pc, #80]	; (8005f24 <HAL_TIM_IC_ConfigChannel+0x134>)
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005ed4:	490e      	ldr	r1, [pc, #56]	; (8005f10 <HAL_TIM_IC_ConfigChannel+0x120>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ed6:	403a      	ands	r2, r7
 8005ed8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005eda:	69df      	ldr	r7, [r3, #28]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005edc:	0236      	lsls	r6, r6, #8
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005ede:	400f      	ands	r7, r1
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005ee0:	433e      	orrs	r6, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005ee2:	4f0c      	ldr	r7, [pc, #48]	; (8005f14 <HAL_TIM_IC_ConfigChannel+0x124>)
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005ee4:	0700      	lsls	r0, r0, #28
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005ee6:	403e      	ands	r6, r7
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005ee8:	0c00      	lsrs	r0, r0, #16
  tmpccer = TIMx->CCER;
 8005eea:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005eec:	4330      	orrs	r0, r6

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005eee:	4e0e      	ldr	r6, [pc, #56]	; (8005f28 <HAL_TIM_IC_ConfigChannel+0x138>)
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005ef0:	9901      	ldr	r1, [sp, #4]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005ef2:	4032      	ands	r2, r6
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005ef4:	26a0      	movs	r6, #160	; 0xa0
 8005ef6:	0309      	lsls	r1, r1, #12
 8005ef8:	0236      	lsls	r6, r6, #8
 8005efa:	4031      	ands	r1, r6
 8005efc:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005efe:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f00:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005f02:	69da      	ldr	r2, [r3, #28]
 8005f04:	4904      	ldr	r1, [pc, #16]	; (8005f18 <HAL_TIM_IC_ConfigChannel+0x128>)
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005f06:	022d      	lsls	r5, r5, #8
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005f08:	400a      	ands	r2, r1
 8005f0a:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005f0c:	69da      	ldr	r2, [r3, #28]
 8005f0e:	e7dc      	b.n	8005eca <HAL_TIM_IC_ConfigChannel+0xda>
 8005f10:	fffffcff 	.word	0xfffffcff
 8005f14:	ffff0fff 	.word	0xffff0fff
 8005f18:	fffff3ff 	.word	0xfffff3ff
 8005f1c:	fffffeff 	.word	0xfffffeff
 8005f20:	fffff5ff 	.word	0xfffff5ff
 8005f24:	ffffefff 	.word	0xffffefff
 8005f28:	ffff5fff 	.word	0xffff5fff

08005f2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f2c:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f2e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f30:	4d03      	ldr	r5, [pc, #12]	; (8005f40 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f32:	430a      	orrs	r2, r1
 8005f34:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f36:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f3c:	6083      	str	r3, [r0, #8]
}
 8005f3e:	bd30      	pop	{r4, r5, pc}
 8005f40:	ffff00ff 	.word	0xffff00ff

08005f44 <HAL_TIM_ConfigClockSource>:
{
 8005f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8005f46:	0005      	movs	r5, r0
 8005f48:	2302      	movs	r3, #2
 8005f4a:	353c      	adds	r5, #60	; 0x3c
 8005f4c:	782a      	ldrb	r2, [r5, #0]
{
 8005f4e:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8005f50:	0018      	movs	r0, r3
 8005f52:	2a01      	cmp	r2, #1
 8005f54:	d016      	beq.n	8005f84 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8005f56:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8005f58:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 8005f5a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005f5c:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8005f5e:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005f60:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8005f62:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f64:	4a3f      	ldr	r2, [pc, #252]	; (8006064 <HAL_TIM_ConfigClockSource+0x120>)
 8005f66:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8005f68:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8005f6a:	680b      	ldr	r3, [r1, #0]
 8005f6c:	2b40      	cmp	r3, #64	; 0x40
 8005f6e:	d063      	beq.n	8006038 <HAL_TIM_ConfigClockSource+0xf4>
 8005f70:	d814      	bhi.n	8005f9c <HAL_TIM_ConfigClockSource+0x58>
 8005f72:	2b10      	cmp	r3, #16
 8005f74:	d00b      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0x4a>
 8005f76:	d806      	bhi.n	8005f86 <HAL_TIM_ConfigClockSource+0x42>
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d008      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8005f7c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005f7e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005f80:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8005f82:	7028      	strb	r0, [r5, #0]
}
 8005f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8005f86:	2b20      	cmp	r3, #32
 8005f88:	d001      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0x4a>
 8005f8a:	2b30      	cmp	r3, #48	; 0x30
 8005f8c:	d1f6      	bne.n	8005f7c <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f8e:	4a36      	ldr	r2, [pc, #216]	; (8006068 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = TIMx->SMCR;
 8005f90:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f92:	4011      	ands	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f94:	2207      	movs	r2, #7
 8005f96:	4313      	orrs	r3, r2
 8005f98:	430b      	orrs	r3, r1
 8005f9a:	e019      	b.n	8005fd0 <HAL_TIM_ConfigClockSource+0x8c>
  switch (sClockSourceConfig->ClockSource)
 8005f9c:	2b60      	cmp	r3, #96	; 0x60
 8005f9e:	d034      	beq.n	800600a <HAL_TIM_ConfigClockSource+0xc6>
 8005fa0:	d818      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x90>
 8005fa2:	2b50      	cmp	r3, #80	; 0x50
 8005fa4:	d1ea      	bne.n	8005f7c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fa6:	684a      	ldr	r2, [r1, #4]
 8005fa8:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8005faa:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fac:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fae:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fb0:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fb2:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fb4:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fb6:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fb8:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fba:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fbc:	240a      	movs	r4, #10
 8005fbe:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8005fc0:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8005fc2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005fc4:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005fc6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fc8:	4a27      	ldr	r2, [pc, #156]	; (8006068 <HAL_TIM_ConfigClockSource+0x124>)
 8005fca:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fcc:	2357      	movs	r3, #87	; 0x57
 8005fce:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8005fd0:	6083      	str	r3, [r0, #8]
 8005fd2:	e7d3      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8005fd4:	2b70      	cmp	r3, #112	; 0x70
 8005fd6:	d00d      	beq.n	8005ff4 <HAL_TIM_ConfigClockSource+0xb0>
 8005fd8:	2280      	movs	r2, #128	; 0x80
 8005fda:	0192      	lsls	r2, r2, #6
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d1cd      	bne.n	8005f7c <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8005fe0:	68cb      	ldr	r3, [r1, #12]
 8005fe2:	684a      	ldr	r2, [r1, #4]
 8005fe4:	6889      	ldr	r1, [r1, #8]
 8005fe6:	f7ff ffa1 	bl	8005f2c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fea:	2380      	movs	r3, #128	; 0x80
 8005fec:	6822      	ldr	r2, [r4, #0]
 8005fee:	01db      	lsls	r3, r3, #7
 8005ff0:	6891      	ldr	r1, [r2, #8]
 8005ff2:	e007      	b.n	8006004 <HAL_TIM_ConfigClockSource+0xc0>
      TIM_ETR_SetConfig(htim->Instance,
 8005ff4:	68cb      	ldr	r3, [r1, #12]
 8005ff6:	684a      	ldr	r2, [r1, #4]
 8005ff8:	6889      	ldr	r1, [r1, #8]
 8005ffa:	f7ff ff97 	bl	8005f2c <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ffe:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8006000:	6822      	ldr	r2, [r4, #0]
 8006002:	6891      	ldr	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006004:	430b      	orrs	r3, r1
 8006006:	6093      	str	r3, [r2, #8]
      break;
 8006008:	e7b8      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x38>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800600a:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800600c:	684b      	ldr	r3, [r1, #4]
 800600e:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006010:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006012:	4f16      	ldr	r7, [pc, #88]	; (800606c <HAL_TIM_ConfigClockSource+0x128>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006014:	43a1      	bics	r1, r4
 8006016:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006018:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800601a:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800601c:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800601e:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006020:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8006022:	6a01      	ldr	r1, [r0, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006024:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006026:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8006028:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 800602a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800602c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800602e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006030:	4a0d      	ldr	r2, [pc, #52]	; (8006068 <HAL_TIM_ConfigClockSource+0x124>)
 8006032:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006034:	2367      	movs	r3, #103	; 0x67
 8006036:	e7ca      	b.n	8005fce <HAL_TIM_ConfigClockSource+0x8a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006038:	684a      	ldr	r2, [r1, #4]
 800603a:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 800603c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800603e:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006040:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006042:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006044:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006046:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006048:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800604a:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800604c:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800604e:	240a      	movs	r4, #10
 8006050:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8006052:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8006054:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006056:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006058:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800605a:	4a03      	ldr	r2, [pc, #12]	; (8006068 <HAL_TIM_ConfigClockSource+0x124>)
 800605c:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800605e:	2347      	movs	r3, #71	; 0x47
 8006060:	e7b5      	b.n	8005fce <HAL_TIM_ConfigClockSource+0x8a>
 8006062:	46c0      	nop			; (mov r8, r8)
 8006064:	ffce0088 	.word	0xffce0088
 8006068:	ffcfff8f 	.word	0xffcfff8f
 800606c:	ffff0fff 	.word	0xffff0fff

08006070 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006070:	231f      	movs	r3, #31
{
 8006072:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006074:	2401      	movs	r4, #1
 8006076:	4019      	ands	r1, r3
 8006078:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800607a:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 800607c:	6a03      	ldr	r3, [r0, #32]
 800607e:	43a3      	bics	r3, r4
 8006080:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006082:	6a03      	ldr	r3, [r0, #32]
 8006084:	431a      	orrs	r2, r3
 8006086:	6202      	str	r2, [r0, #32]
}
 8006088:	bd10      	pop	{r4, pc}
	...

0800608c <HAL_TIM_PWM_Start>:
{
 800608c:	b510      	push	{r4, lr}
 800608e:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006090:	2201      	movs	r2, #1
 8006092:	6800      	ldr	r0, [r0, #0]
 8006094:	f7ff ffec 	bl	8006070 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	4a10      	ldr	r2, [pc, #64]	; (80060dc <HAL_TIM_PWM_Start+0x50>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d016      	beq.n	80060ce <HAL_TIM_PWM_Start+0x42>
 80060a0:	4a0f      	ldr	r2, [pc, #60]	; (80060e0 <HAL_TIM_PWM_Start+0x54>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d013      	beq.n	80060ce <HAL_TIM_PWM_Start+0x42>
 80060a6:	4a0f      	ldr	r2, [pc, #60]	; (80060e4 <HAL_TIM_PWM_Start+0x58>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d010      	beq.n	80060ce <HAL_TIM_PWM_Start+0x42>
 80060ac:	4a0e      	ldr	r2, [pc, #56]	; (80060e8 <HAL_TIM_PWM_Start+0x5c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d00d      	beq.n	80060ce <HAL_TIM_PWM_Start+0x42>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	490d      	ldr	r1, [pc, #52]	; (80060ec <HAL_TIM_PWM_Start+0x60>)
 80060b6:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b8:	2a06      	cmp	r2, #6
 80060ba:	d006      	beq.n	80060ca <HAL_TIM_PWM_Start+0x3e>
 80060bc:	3907      	subs	r1, #7
 80060be:	428a      	cmp	r2, r1
 80060c0:	d003      	beq.n	80060ca <HAL_TIM_PWM_Start+0x3e>
    __HAL_TIM_ENABLE(htim);
 80060c2:	2201      	movs	r2, #1
 80060c4:	6819      	ldr	r1, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	601a      	str	r2, [r3, #0]
}
 80060ca:	2000      	movs	r0, #0
 80060cc:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 80060ce:	2280      	movs	r2, #128	; 0x80
 80060d0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80060d2:	0212      	lsls	r2, r2, #8
 80060d4:	430a      	orrs	r2, r1
 80060d6:	645a      	str	r2, [r3, #68]	; 0x44
 80060d8:	e7eb      	b.n	80060b2 <HAL_TIM_PWM_Start+0x26>
 80060da:	46c0      	nop			; (mov r8, r8)
 80060dc:	40012c00 	.word	0x40012c00
 80060e0:	40014000 	.word	0x40014000
 80060e4:	40014400 	.word	0x40014400
 80060e8:	40014800 	.word	0x40014800
 80060ec:	00010007 	.word	0x00010007

080060f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060f0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060f2:	0004      	movs	r4, r0
 80060f4:	2202      	movs	r2, #2
 80060f6:	343c      	adds	r4, #60	; 0x3c
 80060f8:	7825      	ldrb	r5, [r4, #0]
{
 80060fa:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80060fc:	0010      	movs	r0, r2
 80060fe:	2d01      	cmp	r5, #1
 8006100:	d01a      	beq.n	8006138 <HAL_TIMEx_MasterConfigSynchronization+0x48>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006102:	001d      	movs	r5, r3
 8006104:	353d      	adds	r5, #61	; 0x3d
 8006106:	702a      	strb	r2, [r5, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006108:	4e0c      	ldr	r6, [pc, #48]	; (800613c <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
  tmpcr2 = htim->Instance->CR2;
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800610e:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006110:	42b2      	cmp	r2, r6
 8006112:	d103      	bne.n	800611c <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006114:	4e0a      	ldr	r6, [pc, #40]	; (8006140 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8006116:	4033      	ands	r3, r6
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006118:	684e      	ldr	r6, [r1, #4]
 800611a:	4333      	orrs	r3, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800611c:	2670      	movs	r6, #112	; 0x70
 800611e:	43b3      	bics	r3, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006120:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006122:	6889      	ldr	r1, [r1, #8]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006124:	4333      	orrs	r3, r6
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006126:	2680      	movs	r6, #128	; 0x80
 8006128:	43b0      	bics	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800612a:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800612c:	4301      	orrs	r1, r0

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800612e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8006130:	2000      	movs	r0, #0
  htim->Instance->SMCR = tmpsmcr;
 8006132:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8006134:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8006136:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8006138:	bd70      	pop	{r4, r5, r6, pc}
 800613a:	46c0      	nop			; (mov r8, r8)
 800613c:	40012c00 	.word	0x40012c00
 8006140:	ff0fffff 	.word	0xff0fffff

08006144 <HAL_TIMEx_CommutCallback>:
 8006144:	4770      	bx	lr

08006146 <HAL_TIMEx_BreakCallback>:
 8006146:	4770      	bx	lr

08006148 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006148:	4770      	bx	lr
	...

0800614c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800614c:	b570      	push	{r4, r5, r6, lr}
 800614e:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006150:	6902      	ldr	r2, [r0, #16]
 8006152:	6883      	ldr	r3, [r0, #8]
 8006154:	69c1      	ldr	r1, [r0, #28]
 8006156:	4313      	orrs	r3, r2
 8006158:	6942      	ldr	r2, [r0, #20]
  tmpreg |= (uint32_t)huart->FifoMode;
 800615a:	6e65      	ldr	r5, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800615c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800615e:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006160:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006162:	6810      	ldr	r0, [r2, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 8006164:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006166:	4d9f      	ldr	r5, [pc, #636]	; (80063e4 <UART_SetConfig+0x298>)
 8006168:	4028      	ands	r0, r5
 800616a:	4303      	orrs	r3, r0
 800616c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800616e:	6853      	ldr	r3, [r2, #4]
 8006170:	489d      	ldr	r0, [pc, #628]	; (80063e8 <UART_SetConfig+0x29c>)
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006172:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006174:	4003      	ands	r3, r0
 8006176:	68e0      	ldr	r0, [r4, #12]
 8006178:	4303      	orrs	r3, r0
 800617a:	6053      	str	r3, [r2, #4]
    tmpreg |= huart->Init.OneBitSampling;
 800617c:	69a3      	ldr	r3, [r4, #24]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800617e:	6890      	ldr	r0, [r2, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8006180:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006182:	4d9a      	ldr	r5, [pc, #616]	; (80063ec <UART_SetConfig+0x2a0>)
 8006184:	4028      	ands	r0, r5

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006186:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006188:	4303      	orrs	r3, r0
 800618a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800618c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800618e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006190:	43a8      	bics	r0, r5
 8006192:	4318      	orrs	r0, r3
 8006194:	62d0      	str	r0, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006196:	4896      	ldr	r0, [pc, #600]	; (80063f0 <UART_SetConfig+0x2a4>)
 8006198:	4282      	cmp	r2, r0
 800619a:	d113      	bne.n	80061c4 <UART_SetConfig+0x78>
 800619c:	2003      	movs	r0, #3
 800619e:	4a95      	ldr	r2, [pc, #596]	; (80063f4 <UART_SetConfig+0x2a8>)
 80061a0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80061a2:	4002      	ands	r2, r0
 80061a4:	4894      	ldr	r0, [pc, #592]	; (80063f8 <UART_SetConfig+0x2ac>)
 80061a6:	5c80      	ldrb	r0, [r0, r2]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061a8:	2280      	movs	r2, #128	; 0x80
 80061aa:	0212      	lsls	r2, r2, #8
 80061ac:	4291      	cmp	r1, r2
 80061ae:	d100      	bne.n	80061b2 <UART_SetConfig+0x66>
 80061b0:	e1b7      	b.n	8006522 <UART_SetConfig+0x3d6>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80061b2:	2808      	cmp	r0, #8
 80061b4:	d817      	bhi.n	80061e6 <UART_SetConfig+0x9a>
 80061b6:	f7f9 ffb5 	bl	8000124 <__gnu_thumb1_case_uqi>
 80061ba:	1684      	.short	0x1684
 80061bc:	16f216be 	.word	0x16f216be
 80061c0:	1616      	.short	0x1616
 80061c2:	f5          	.byte	0xf5
 80061c3:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061c4:	488d      	ldr	r0, [pc, #564]	; (80063fc <UART_SetConfig+0x2b0>)
 80061c6:	4282      	cmp	r2, r0
 80061c8:	d105      	bne.n	80061d6 <UART_SetConfig+0x8a>
 80061ca:	200c      	movs	r0, #12
 80061cc:	4a89      	ldr	r2, [pc, #548]	; (80063f4 <UART_SetConfig+0x2a8>)
 80061ce:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80061d0:	4002      	ands	r2, r0
 80061d2:	488b      	ldr	r0, [pc, #556]	; (8006400 <UART_SetConfig+0x2b4>)
 80061d4:	e7e7      	b.n	80061a6 <UART_SetConfig+0x5a>
 80061d6:	4b8b      	ldr	r3, [pc, #556]	; (8006404 <UART_SetConfig+0x2b8>)
 80061d8:	429a      	cmp	r2, r3
 80061da:	d100      	bne.n	80061de <UART_SetConfig+0x92>
 80061dc:	e150      	b.n	8006480 <UART_SetConfig+0x334>
 80061de:	4b8a      	ldr	r3, [pc, #552]	; (8006408 <UART_SetConfig+0x2bc>)
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d100      	bne.n	80061e6 <UART_SetConfig+0x9a>
 80061e4:	e14c      	b.n	8006480 <UART_SetConfig+0x334>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 80061e6:	2001      	movs	r0, #1
 80061e8:	e191      	b.n	800650e <UART_SetConfig+0x3c2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d02f      	beq.n	800624e <UART_SetConfig+0x102>
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d019      	beq.n	8006226 <UART_SetConfig+0xda>
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d019      	beq.n	800622a <UART_SetConfig+0xde>
 80061f6:	2b03      	cmp	r3, #3
 80061f8:	d019      	beq.n	800622e <UART_SetConfig+0xe2>
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d019      	beq.n	8006232 <UART_SetConfig+0xe6>
 80061fe:	2b05      	cmp	r3, #5
 8006200:	d019      	beq.n	8006236 <UART_SetConfig+0xea>
 8006202:	2b06      	cmp	r3, #6
 8006204:	d019      	beq.n	800623a <UART_SetConfig+0xee>
 8006206:	2b07      	cmp	r3, #7
 8006208:	d019      	beq.n	800623e <UART_SetConfig+0xf2>
 800620a:	2b08      	cmp	r3, #8
 800620c:	d019      	beq.n	8006242 <UART_SetConfig+0xf6>
 800620e:	2b09      	cmp	r3, #9
 8006210:	d019      	beq.n	8006246 <UART_SetConfig+0xfa>
 8006212:	2b0a      	cmp	r3, #10
 8006214:	d019      	beq.n	800624a <UART_SetConfig+0xfe>
 8006216:	2b0b      	cmp	r3, #11
 8006218:	d119      	bne.n	800624e <UART_SetConfig+0x102>
 800621a:	487c      	ldr	r0, [pc, #496]	; (800640c <UART_SetConfig+0x2c0>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800621c:	6863      	ldr	r3, [r4, #4]
 800621e:	6861      	ldr	r1, [r4, #4]
 8006220:	085b      	lsrs	r3, r3, #1
 8006222:	1818      	adds	r0, r3, r0
 8006224:	e160      	b.n	80064e8 <UART_SetConfig+0x39c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006226:	487a      	ldr	r0, [pc, #488]	; (8006410 <UART_SetConfig+0x2c4>)
 8006228:	e7f8      	b.n	800621c <UART_SetConfig+0xd0>
 800622a:	487a      	ldr	r0, [pc, #488]	; (8006414 <UART_SetConfig+0x2c8>)
 800622c:	e7f6      	b.n	800621c <UART_SetConfig+0xd0>
 800622e:	487a      	ldr	r0, [pc, #488]	; (8006418 <UART_SetConfig+0x2cc>)
 8006230:	e7f4      	b.n	800621c <UART_SetConfig+0xd0>
 8006232:	487a      	ldr	r0, [pc, #488]	; (800641c <UART_SetConfig+0x2d0>)
 8006234:	e7f2      	b.n	800621c <UART_SetConfig+0xd0>
 8006236:	487a      	ldr	r0, [pc, #488]	; (8006420 <UART_SetConfig+0x2d4>)
 8006238:	e7f0      	b.n	800621c <UART_SetConfig+0xd0>
 800623a:	487a      	ldr	r0, [pc, #488]	; (8006424 <UART_SetConfig+0x2d8>)
 800623c:	e7ee      	b.n	800621c <UART_SetConfig+0xd0>
 800623e:	487a      	ldr	r0, [pc, #488]	; (8006428 <UART_SetConfig+0x2dc>)
 8006240:	e7ec      	b.n	800621c <UART_SetConfig+0xd0>
 8006242:	487a      	ldr	r0, [pc, #488]	; (800642c <UART_SetConfig+0x2e0>)
 8006244:	e7ea      	b.n	800621c <UART_SetConfig+0xd0>
 8006246:	487a      	ldr	r0, [pc, #488]	; (8006430 <UART_SetConfig+0x2e4>)
 8006248:	e7e8      	b.n	800621c <UART_SetConfig+0xd0>
 800624a:	487a      	ldr	r0, [pc, #488]	; (8006434 <UART_SetConfig+0x2e8>)
 800624c:	e7e6      	b.n	800621c <UART_SetConfig+0xd0>
 800624e:	487a      	ldr	r0, [pc, #488]	; (8006438 <UART_SetConfig+0x2ec>)
 8006250:	e7e4      	b.n	800621c <UART_SetConfig+0xd0>
        pclk = HAL_RCC_GetSysClockFreq();
 8006252:	f7fe fc95 	bl	8004b80 <HAL_RCC_GetSysClockFreq>
 8006256:	e11a      	b.n	800648e <UART_SetConfig+0x342>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006258:	2b00      	cmp	r3, #0
 800625a:	d018      	beq.n	800628e <UART_SetConfig+0x142>
 800625c:	2b01      	cmp	r3, #1
 800625e:	d019      	beq.n	8006294 <UART_SetConfig+0x148>
 8006260:	2b02      	cmp	r3, #2
 8006262:	d01a      	beq.n	800629a <UART_SetConfig+0x14e>
 8006264:	2b03      	cmp	r3, #3
 8006266:	d01b      	beq.n	80062a0 <UART_SetConfig+0x154>
 8006268:	2b04      	cmp	r3, #4
 800626a:	d01b      	beq.n	80062a4 <UART_SetConfig+0x158>
 800626c:	2b05      	cmp	r3, #5
 800626e:	d01c      	beq.n	80062aa <UART_SetConfig+0x15e>
 8006270:	2b06      	cmp	r3, #6
 8006272:	d01c      	beq.n	80062ae <UART_SetConfig+0x162>
 8006274:	2080      	movs	r0, #128	; 0x80
 8006276:	2b07      	cmp	r3, #7
 8006278:	d01b      	beq.n	80062b2 <UART_SetConfig+0x166>
 800627a:	2b08      	cmp	r3, #8
 800627c:	d01b      	beq.n	80062b6 <UART_SetConfig+0x16a>
 800627e:	2b09      	cmp	r3, #9
 8006280:	d01b      	beq.n	80062ba <UART_SetConfig+0x16e>
 8006282:	2b0a      	cmp	r3, #10
 8006284:	d01b      	beq.n	80062be <UART_SetConfig+0x172>
 8006286:	2b0b      	cmp	r3, #11
 8006288:	d102      	bne.n	8006290 <UART_SetConfig+0x144>
 800628a:	0040      	lsls	r0, r0, #1
 800628c:	e7c6      	b.n	800621c <UART_SetConfig+0xd0>
 800628e:	2080      	movs	r0, #128	; 0x80
 8006290:	0240      	lsls	r0, r0, #9
 8006292:	e7c3      	b.n	800621c <UART_SetConfig+0xd0>
 8006294:	2080      	movs	r0, #128	; 0x80
 8006296:	0200      	lsls	r0, r0, #8
 8006298:	e7c0      	b.n	800621c <UART_SetConfig+0xd0>
 800629a:	2080      	movs	r0, #128	; 0x80
 800629c:	01c0      	lsls	r0, r0, #7
 800629e:	e7bd      	b.n	800621c <UART_SetConfig+0xd0>
 80062a0:	4866      	ldr	r0, [pc, #408]	; (800643c <UART_SetConfig+0x2f0>)
 80062a2:	e7bb      	b.n	800621c <UART_SetConfig+0xd0>
 80062a4:	2080      	movs	r0, #128	; 0x80
 80062a6:	0180      	lsls	r0, r0, #6
 80062a8:	e7b8      	b.n	800621c <UART_SetConfig+0xd0>
 80062aa:	4865      	ldr	r0, [pc, #404]	; (8006440 <UART_SetConfig+0x2f4>)
 80062ac:	e7b6      	b.n	800621c <UART_SetConfig+0xd0>
 80062ae:	4865      	ldr	r0, [pc, #404]	; (8006444 <UART_SetConfig+0x2f8>)
 80062b0:	e7b4      	b.n	800621c <UART_SetConfig+0xd0>
 80062b2:	0140      	lsls	r0, r0, #5
 80062b4:	e7b2      	b.n	800621c <UART_SetConfig+0xd0>
 80062b6:	0100      	lsls	r0, r0, #4
 80062b8:	e7b0      	b.n	800621c <UART_SetConfig+0xd0>
 80062ba:	00c0      	lsls	r0, r0, #3
 80062bc:	e7ae      	b.n	800621c <UART_SetConfig+0xd0>
 80062be:	0080      	lsls	r0, r0, #2
 80062c0:	e7ac      	b.n	800621c <UART_SetConfig+0xd0>
        pclk = HAL_RCC_GetPCLK1Freq();
 80062c2:	f7fe fd51 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062c8:	2101      	movs	r1, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d021      	beq.n	8006312 <UART_SetConfig+0x1c6>
 80062ce:	1849      	adds	r1, r1, r1
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d01e      	beq.n	8006312 <UART_SetConfig+0x1c6>
 80062d4:	3102      	adds	r1, #2
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d01b      	beq.n	8006312 <UART_SetConfig+0x1c6>
 80062da:	3102      	adds	r1, #2
 80062dc:	2b03      	cmp	r3, #3
 80062de:	d018      	beq.n	8006312 <UART_SetConfig+0x1c6>
 80062e0:	3102      	adds	r1, #2
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d015      	beq.n	8006312 <UART_SetConfig+0x1c6>
 80062e6:	3102      	adds	r1, #2
 80062e8:	2b05      	cmp	r3, #5
 80062ea:	d012      	beq.n	8006312 <UART_SetConfig+0x1c6>
 80062ec:	3102      	adds	r1, #2
 80062ee:	2b06      	cmp	r3, #6
 80062f0:	d00f      	beq.n	8006312 <UART_SetConfig+0x1c6>
 80062f2:	3104      	adds	r1, #4
 80062f4:	2b07      	cmp	r3, #7
 80062f6:	d00c      	beq.n	8006312 <UART_SetConfig+0x1c6>
 80062f8:	3110      	adds	r1, #16
 80062fa:	2b08      	cmp	r3, #8
 80062fc:	d009      	beq.n	8006312 <UART_SetConfig+0x1c6>
 80062fe:	3120      	adds	r1, #32
 8006300:	2b09      	cmp	r3, #9
 8006302:	d006      	beq.n	8006312 <UART_SetConfig+0x1c6>
 8006304:	3140      	adds	r1, #64	; 0x40
 8006306:	2b0a      	cmp	r3, #10
 8006308:	d003      	beq.n	8006312 <UART_SetConfig+0x1c6>
 800630a:	397f      	subs	r1, #127	; 0x7f
 800630c:	2b0b      	cmp	r3, #11
 800630e:	d100      	bne.n	8006312 <UART_SetConfig+0x1c6>
 8006310:	31ff      	adds	r1, #255	; 0xff
 8006312:	6865      	ldr	r5, [r4, #4]
 8006314:	f7f9 ff24 	bl	8000160 <__udivsi3>
 8006318:	0029      	movs	r1, r5
 800631a:	086b      	lsrs	r3, r5, #1
 800631c:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800631e:	f7f9 ff1f 	bl	8000160 <__udivsi3>
 8006322:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006324:	0003      	movs	r3, r0
 8006326:	4a48      	ldr	r2, [pc, #288]	; (8006448 <UART_SetConfig+0x2fc>)
 8006328:	3b10      	subs	r3, #16
 800632a:	4293      	cmp	r3, r2
 800632c:	d900      	bls.n	8006330 <UART_SetConfig+0x1e4>
 800632e:	e75a      	b.n	80061e6 <UART_SetConfig+0x9a>
      huart->Instance->BRR = usartdiv;
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	60d8      	str	r0, [r3, #12]
 8006334:	e0ea      	b.n	800650c <UART_SetConfig+0x3c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006336:	2b00      	cmp	r3, #0
 8006338:	d02f      	beq.n	800639a <UART_SetConfig+0x24e>
 800633a:	2b01      	cmp	r3, #1
 800633c:	d019      	beq.n	8006372 <UART_SetConfig+0x226>
 800633e:	2b02      	cmp	r3, #2
 8006340:	d019      	beq.n	8006376 <UART_SetConfig+0x22a>
 8006342:	2b03      	cmp	r3, #3
 8006344:	d019      	beq.n	800637a <UART_SetConfig+0x22e>
 8006346:	2b04      	cmp	r3, #4
 8006348:	d019      	beq.n	800637e <UART_SetConfig+0x232>
 800634a:	2b05      	cmp	r3, #5
 800634c:	d019      	beq.n	8006382 <UART_SetConfig+0x236>
 800634e:	2b06      	cmp	r3, #6
 8006350:	d019      	beq.n	8006386 <UART_SetConfig+0x23a>
 8006352:	2b07      	cmp	r3, #7
 8006354:	d019      	beq.n	800638a <UART_SetConfig+0x23e>
 8006356:	2b08      	cmp	r3, #8
 8006358:	d019      	beq.n	800638e <UART_SetConfig+0x242>
 800635a:	2b09      	cmp	r3, #9
 800635c:	d019      	beq.n	8006392 <UART_SetConfig+0x246>
 800635e:	2b0a      	cmp	r3, #10
 8006360:	d019      	beq.n	8006396 <UART_SetConfig+0x24a>
 8006362:	2b0b      	cmp	r3, #11
 8006364:	d119      	bne.n	800639a <UART_SetConfig+0x24e>
 8006366:	4839      	ldr	r0, [pc, #228]	; (800644c <UART_SetConfig+0x300>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006368:	6863      	ldr	r3, [r4, #4]
 800636a:	6861      	ldr	r1, [r4, #4]
 800636c:	085b      	lsrs	r3, r3, #1
 800636e:	1818      	adds	r0, r3, r0
 8006370:	e7d5      	b.n	800631e <UART_SetConfig+0x1d2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006372:	4828      	ldr	r0, [pc, #160]	; (8006414 <UART_SetConfig+0x2c8>)
 8006374:	e7f8      	b.n	8006368 <UART_SetConfig+0x21c>
 8006376:	4829      	ldr	r0, [pc, #164]	; (800641c <UART_SetConfig+0x2d0>)
 8006378:	e7f6      	b.n	8006368 <UART_SetConfig+0x21c>
 800637a:	482a      	ldr	r0, [pc, #168]	; (8006424 <UART_SetConfig+0x2d8>)
 800637c:	e7f4      	b.n	8006368 <UART_SetConfig+0x21c>
 800637e:	482a      	ldr	r0, [pc, #168]	; (8006428 <UART_SetConfig+0x2dc>)
 8006380:	e7f2      	b.n	8006368 <UART_SetConfig+0x21c>
 8006382:	4833      	ldr	r0, [pc, #204]	; (8006450 <UART_SetConfig+0x304>)
 8006384:	e7f0      	b.n	8006368 <UART_SetConfig+0x21c>
 8006386:	4833      	ldr	r0, [pc, #204]	; (8006454 <UART_SetConfig+0x308>)
 8006388:	e7ee      	b.n	8006368 <UART_SetConfig+0x21c>
 800638a:	4828      	ldr	r0, [pc, #160]	; (800642c <UART_SetConfig+0x2e0>)
 800638c:	e7ec      	b.n	8006368 <UART_SetConfig+0x21c>
 800638e:	4828      	ldr	r0, [pc, #160]	; (8006430 <UART_SetConfig+0x2e4>)
 8006390:	e7ea      	b.n	8006368 <UART_SetConfig+0x21c>
 8006392:	4828      	ldr	r0, [pc, #160]	; (8006434 <UART_SetConfig+0x2e8>)
 8006394:	e7e8      	b.n	8006368 <UART_SetConfig+0x21c>
 8006396:	481d      	ldr	r0, [pc, #116]	; (800640c <UART_SetConfig+0x2c0>)
 8006398:	e7e6      	b.n	8006368 <UART_SetConfig+0x21c>
 800639a:	481d      	ldr	r0, [pc, #116]	; (8006410 <UART_SetConfig+0x2c4>)
 800639c:	e7e4      	b.n	8006368 <UART_SetConfig+0x21c>
        pclk = HAL_RCC_GetSysClockFreq();
 800639e:	f7fe fbef 	bl	8004b80 <HAL_RCC_GetSysClockFreq>
 80063a2:	e790      	b.n	80062c6 <UART_SetConfig+0x17a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d018      	beq.n	80063da <UART_SetConfig+0x28e>
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d018      	beq.n	80063de <UART_SetConfig+0x292>
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d053      	beq.n	8006458 <UART_SetConfig+0x30c>
 80063b0:	2b03      	cmp	r3, #3
 80063b2:	d054      	beq.n	800645e <UART_SetConfig+0x312>
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d054      	beq.n	8006462 <UART_SetConfig+0x316>
 80063b8:	2b05      	cmp	r3, #5
 80063ba:	d055      	beq.n	8006468 <UART_SetConfig+0x31c>
 80063bc:	2b06      	cmp	r3, #6
 80063be:	d055      	beq.n	800646c <UART_SetConfig+0x320>
 80063c0:	2080      	movs	r0, #128	; 0x80
 80063c2:	2b07      	cmp	r3, #7
 80063c4:	d054      	beq.n	8006470 <UART_SetConfig+0x324>
 80063c6:	2b08      	cmp	r3, #8
 80063c8:	d054      	beq.n	8006474 <UART_SetConfig+0x328>
 80063ca:	2b09      	cmp	r3, #9
 80063cc:	d054      	beq.n	8006478 <UART_SetConfig+0x32c>
 80063ce:	2b0a      	cmp	r3, #10
 80063d0:	d054      	beq.n	800647c <UART_SetConfig+0x330>
 80063d2:	2b0b      	cmp	r3, #11
 80063d4:	d0c8      	beq.n	8006368 <UART_SetConfig+0x21c>
 80063d6:	0200      	lsls	r0, r0, #8
 80063d8:	e7c6      	b.n	8006368 <UART_SetConfig+0x21c>
 80063da:	2080      	movs	r0, #128	; 0x80
 80063dc:	e7fb      	b.n	80063d6 <UART_SetConfig+0x28a>
 80063de:	2080      	movs	r0, #128	; 0x80
 80063e0:	01c0      	lsls	r0, r0, #7
 80063e2:	e7c1      	b.n	8006368 <UART_SetConfig+0x21c>
 80063e4:	cfff69f3 	.word	0xcfff69f3
 80063e8:	ffffcfff 	.word	0xffffcfff
 80063ec:	11fff4ff 	.word	0x11fff4ff
 80063f0:	40013800 	.word	0x40013800
 80063f4:	40021000 	.word	0x40021000
 80063f8:	08010e8c 	.word	0x08010e8c
 80063fc:	40004400 	.word	0x40004400
 8006400:	08010e90 	.word	0x08010e90
 8006404:	40004800 	.word	0x40004800
 8006408:	40004c00 	.word	0x40004c00
 800640c:	0001e848 	.word	0x0001e848
 8006410:	00f42400 	.word	0x00f42400
 8006414:	007a1200 	.word	0x007a1200
 8006418:	00516154 	.word	0x00516154
 800641c:	003d0900 	.word	0x003d0900
 8006420:	0030d400 	.word	0x0030d400
 8006424:	0028b0aa 	.word	0x0028b0aa
 8006428:	001e8480 	.word	0x001e8480
 800642c:	000f4240 	.word	0x000f4240
 8006430:	0007a120 	.word	0x0007a120
 8006434:	0003d090 	.word	0x0003d090
 8006438:	01e84800 	.word	0x01e84800
 800643c:	00002aaa 	.word	0x00002aaa
 8006440:	00001998 	.word	0x00001998
 8006444:	00001554 	.word	0x00001554
 8006448:	0000ffef 	.word	0x0000ffef
 800644c:	0000f424 	.word	0x0000f424
 8006450:	00186a00 	.word	0x00186a00
 8006454:	00145855 	.word	0x00145855
 8006458:	2080      	movs	r0, #128	; 0x80
 800645a:	0180      	lsls	r0, r0, #6
 800645c:	e784      	b.n	8006368 <UART_SetConfig+0x21c>
 800645e:	4838      	ldr	r0, [pc, #224]	; (8006540 <UART_SetConfig+0x3f4>)
 8006460:	e782      	b.n	8006368 <UART_SetConfig+0x21c>
 8006462:	2080      	movs	r0, #128	; 0x80
 8006464:	0140      	lsls	r0, r0, #5
 8006466:	e77f      	b.n	8006368 <UART_SetConfig+0x21c>
 8006468:	4836      	ldr	r0, [pc, #216]	; (8006544 <UART_SetConfig+0x3f8>)
 800646a:	e77d      	b.n	8006368 <UART_SetConfig+0x21c>
 800646c:	4836      	ldr	r0, [pc, #216]	; (8006548 <UART_SetConfig+0x3fc>)
 800646e:	e77b      	b.n	8006368 <UART_SetConfig+0x21c>
 8006470:	0100      	lsls	r0, r0, #4
 8006472:	e779      	b.n	8006368 <UART_SetConfig+0x21c>
 8006474:	00c0      	lsls	r0, r0, #3
 8006476:	e777      	b.n	8006368 <UART_SetConfig+0x21c>
 8006478:	0080      	lsls	r0, r0, #2
 800647a:	e775      	b.n	8006368 <UART_SetConfig+0x21c>
 800647c:	0040      	lsls	r0, r0, #1
 800647e:	e773      	b.n	8006368 <UART_SetConfig+0x21c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006480:	2380      	movs	r3, #128	; 0x80
 8006482:	021b      	lsls	r3, r3, #8
 8006484:	4299      	cmp	r1, r3
 8006486:	d000      	beq.n	800648a <UART_SetConfig+0x33e>
 8006488:	e71b      	b.n	80062c2 <UART_SetConfig+0x176>
        pclk = HAL_RCC_GetPCLK1Freq();
 800648a:	f7fe fc6d 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800648e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006490:	2101      	movs	r1, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d021      	beq.n	80064da <UART_SetConfig+0x38e>
 8006496:	1849      	adds	r1, r1, r1
 8006498:	2b01      	cmp	r3, #1
 800649a:	d01e      	beq.n	80064da <UART_SetConfig+0x38e>
 800649c:	3102      	adds	r1, #2
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d01b      	beq.n	80064da <UART_SetConfig+0x38e>
 80064a2:	3102      	adds	r1, #2
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	d018      	beq.n	80064da <UART_SetConfig+0x38e>
 80064a8:	3102      	adds	r1, #2
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d015      	beq.n	80064da <UART_SetConfig+0x38e>
 80064ae:	3102      	adds	r1, #2
 80064b0:	2b05      	cmp	r3, #5
 80064b2:	d012      	beq.n	80064da <UART_SetConfig+0x38e>
 80064b4:	3102      	adds	r1, #2
 80064b6:	2b06      	cmp	r3, #6
 80064b8:	d00f      	beq.n	80064da <UART_SetConfig+0x38e>
 80064ba:	3104      	adds	r1, #4
 80064bc:	2b07      	cmp	r3, #7
 80064be:	d00c      	beq.n	80064da <UART_SetConfig+0x38e>
 80064c0:	3110      	adds	r1, #16
 80064c2:	2b08      	cmp	r3, #8
 80064c4:	d009      	beq.n	80064da <UART_SetConfig+0x38e>
 80064c6:	3120      	adds	r1, #32
 80064c8:	2b09      	cmp	r3, #9
 80064ca:	d006      	beq.n	80064da <UART_SetConfig+0x38e>
 80064cc:	3140      	adds	r1, #64	; 0x40
 80064ce:	2b0a      	cmp	r3, #10
 80064d0:	d003      	beq.n	80064da <UART_SetConfig+0x38e>
 80064d2:	397f      	subs	r1, #127	; 0x7f
 80064d4:	2b0b      	cmp	r3, #11
 80064d6:	d100      	bne.n	80064da <UART_SetConfig+0x38e>
 80064d8:	31ff      	adds	r1, #255	; 0xff
 80064da:	f7f9 fe41 	bl	8000160 <__udivsi3>
 80064de:	6865      	ldr	r5, [r4, #4]
 80064e0:	0040      	lsls	r0, r0, #1
 80064e2:	0029      	movs	r1, r5
 80064e4:	086b      	lsrs	r3, r5, #1
 80064e6:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064e8:	f7f9 fe3a 	bl	8000160 <__udivsi3>
 80064ec:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064ee:	0003      	movs	r3, r0
 80064f0:	4a16      	ldr	r2, [pc, #88]	; (800654c <UART_SetConfig+0x400>)
 80064f2:	3b10      	subs	r3, #16
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d900      	bls.n	80064fa <UART_SetConfig+0x3ae>
 80064f8:	e675      	b.n	80061e6 <UART_SetConfig+0x9a>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064fa:	230f      	movs	r3, #15
 80064fc:	0002      	movs	r2, r0
 80064fe:	439a      	bics	r2, r3
 8006500:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006502:	0700      	lsls	r0, r0, #28
      huart->Instance->BRR = brrtemp;
 8006504:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006506:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 8006508:	4318      	orrs	r0, r3
 800650a:	60d0      	str	r0, [r2, #12]
 800650c:	2000      	movs	r0, #0
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800650e:	0022      	movs	r2, r4
 8006510:	2301      	movs	r3, #1
 8006512:	326a      	adds	r2, #106	; 0x6a
 8006514:	8013      	strh	r3, [r2, #0]
  huart->NbRxDataToProcess = 1;
 8006516:	3a02      	subs	r2, #2
 8006518:	8013      	strh	r3, [r2, #0]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800651a:	2300      	movs	r3, #0
 800651c:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 800651e:	6723      	str	r3, [r4, #112]	; 0x70

  return ret;
}
 8006520:	bd70      	pop	{r4, r5, r6, pc}
    switch (clocksource)
 8006522:	2808      	cmp	r0, #8
 8006524:	d900      	bls.n	8006528 <UART_SetConfig+0x3dc>
 8006526:	e65e      	b.n	80061e6 <UART_SetConfig+0x9a>
 8006528:	f7f9 fe06 	bl	8000138 <__gnu_thumb1_case_shi>
 800652c:	fe5dffaf 	.word	0xfe5dffaf
 8006530:	fe5dfe5f 	.word	0xfe5dfe5f
 8006534:	fe5dfe93 	.word	0xfe5dfe93
 8006538:	fe5dfe5d 	.word	0xfe5dfe5d
 800653c:	fe96      	.short	0xfe96
 800653e:	46c0      	nop			; (mov r8, r8)
 8006540:	00001555 	.word	0x00001555
 8006544:	00000ccc 	.word	0x00000ccc
 8006548:	00000aaa 	.word	0x00000aaa
 800654c:	0000ffef 	.word	0x0000ffef

08006550 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006550:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8006552:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006554:	07da      	lsls	r2, r3, #31
 8006556:	d506      	bpl.n	8006566 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006558:	6801      	ldr	r1, [r0, #0]
 800655a:	4c28      	ldr	r4, [pc, #160]	; (80065fc <UART_AdvFeatureConfig+0xac>)
 800655c:	684a      	ldr	r2, [r1, #4]
 800655e:	4022      	ands	r2, r4
 8006560:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006562:	4322      	orrs	r2, r4
 8006564:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006566:	079a      	lsls	r2, r3, #30
 8006568:	d506      	bpl.n	8006578 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800656a:	6801      	ldr	r1, [r0, #0]
 800656c:	4c24      	ldr	r4, [pc, #144]	; (8006600 <UART_AdvFeatureConfig+0xb0>)
 800656e:	684a      	ldr	r2, [r1, #4]
 8006570:	4022      	ands	r2, r4
 8006572:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006574:	4322      	orrs	r2, r4
 8006576:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006578:	075a      	lsls	r2, r3, #29
 800657a:	d506      	bpl.n	800658a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800657c:	6801      	ldr	r1, [r0, #0]
 800657e:	4c21      	ldr	r4, [pc, #132]	; (8006604 <UART_AdvFeatureConfig+0xb4>)
 8006580:	684a      	ldr	r2, [r1, #4]
 8006582:	4022      	ands	r2, r4
 8006584:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006586:	4322      	orrs	r2, r4
 8006588:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800658a:	071a      	lsls	r2, r3, #28
 800658c:	d506      	bpl.n	800659c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800658e:	6801      	ldr	r1, [r0, #0]
 8006590:	4c1d      	ldr	r4, [pc, #116]	; (8006608 <UART_AdvFeatureConfig+0xb8>)
 8006592:	684a      	ldr	r2, [r1, #4]
 8006594:	4022      	ands	r2, r4
 8006596:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006598:	4322      	orrs	r2, r4
 800659a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800659c:	06da      	lsls	r2, r3, #27
 800659e:	d506      	bpl.n	80065ae <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065a0:	6801      	ldr	r1, [r0, #0]
 80065a2:	4c1a      	ldr	r4, [pc, #104]	; (800660c <UART_AdvFeatureConfig+0xbc>)
 80065a4:	688a      	ldr	r2, [r1, #8]
 80065a6:	4022      	ands	r2, r4
 80065a8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80065aa:	4322      	orrs	r2, r4
 80065ac:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065ae:	069a      	lsls	r2, r3, #26
 80065b0:	d506      	bpl.n	80065c0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065b2:	6801      	ldr	r1, [r0, #0]
 80065b4:	4c16      	ldr	r4, [pc, #88]	; (8006610 <UART_AdvFeatureConfig+0xc0>)
 80065b6:	688a      	ldr	r2, [r1, #8]
 80065b8:	4022      	ands	r2, r4
 80065ba:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80065bc:	4322      	orrs	r2, r4
 80065be:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065c0:	065a      	lsls	r2, r3, #25
 80065c2:	d510      	bpl.n	80065e6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065c4:	6801      	ldr	r1, [r0, #0]
 80065c6:	4d13      	ldr	r5, [pc, #76]	; (8006614 <UART_AdvFeatureConfig+0xc4>)
 80065c8:	684a      	ldr	r2, [r1, #4]
 80065ca:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80065cc:	402a      	ands	r2, r5
 80065ce:	4322      	orrs	r2, r4
 80065d0:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065d2:	2280      	movs	r2, #128	; 0x80
 80065d4:	0352      	lsls	r2, r2, #13
 80065d6:	4294      	cmp	r4, r2
 80065d8:	d105      	bne.n	80065e6 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065da:	684a      	ldr	r2, [r1, #4]
 80065dc:	4c0e      	ldr	r4, [pc, #56]	; (8006618 <UART_AdvFeatureConfig+0xc8>)
 80065de:	4022      	ands	r2, r4
 80065e0:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80065e2:	4322      	orrs	r2, r4
 80065e4:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065e6:	061b      	lsls	r3, r3, #24
 80065e8:	d506      	bpl.n	80065f8 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065ea:	6802      	ldr	r2, [r0, #0]
 80065ec:	490b      	ldr	r1, [pc, #44]	; (800661c <UART_AdvFeatureConfig+0xcc>)
 80065ee:	6853      	ldr	r3, [r2, #4]
 80065f0:	400b      	ands	r3, r1
 80065f2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80065f4:	430b      	orrs	r3, r1
 80065f6:	6053      	str	r3, [r2, #4]
  }
}
 80065f8:	bd30      	pop	{r4, r5, pc}
 80065fa:	46c0      	nop			; (mov r8, r8)
 80065fc:	fffdffff 	.word	0xfffdffff
 8006600:	fffeffff 	.word	0xfffeffff
 8006604:	fffbffff 	.word	0xfffbffff
 8006608:	ffff7fff 	.word	0xffff7fff
 800660c:	ffffefff 	.word	0xffffefff
 8006610:	ffffdfff 	.word	0xffffdfff
 8006614:	ffefffff 	.word	0xffefffff
 8006618:	ff9fffff 	.word	0xff9fffff
 800661c:	fff7ffff 	.word	0xfff7ffff

08006620 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006622:	0004      	movs	r4, r0
 8006624:	000e      	movs	r6, r1
 8006626:	0015      	movs	r5, r2
 8006628:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800662a:	6822      	ldr	r2, [r4, #0]
 800662c:	69d3      	ldr	r3, [r2, #28]
 800662e:	4033      	ands	r3, r6
 8006630:	1b9b      	subs	r3, r3, r6
 8006632:	4259      	negs	r1, r3
 8006634:	414b      	adcs	r3, r1
 8006636:	42ab      	cmp	r3, r5
 8006638:	d001      	beq.n	800663e <UART_WaitOnFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800663a:	2000      	movs	r0, #0
 800663c:	e01e      	b.n	800667c <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800663e:	9b06      	ldr	r3, [sp, #24]
 8006640:	3301      	adds	r3, #1
 8006642:	d0f3      	beq.n	800662c <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006644:	f7fd fbd4 	bl	8003df0 <HAL_GetTick>
 8006648:	9b06      	ldr	r3, [sp, #24]
 800664a:	1bc0      	subs	r0, r0, r7
 800664c:	4283      	cmp	r3, r0
 800664e:	d301      	bcc.n	8006654 <UART_WaitOnFlagUntilTimeout+0x34>
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1ea      	bne.n	800662a <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006654:	0022      	movs	r2, r4
 8006656:	ca08      	ldmia	r2!, {r3}
 8006658:	4809      	ldr	r0, [pc, #36]	; (8006680 <UART_WaitOnFlagUntilTimeout+0x60>)
 800665a:	6819      	ldr	r1, [r3, #0]
 800665c:	4001      	ands	r1, r0
 800665e:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006660:	6899      	ldr	r1, [r3, #8]
 8006662:	30a3      	adds	r0, #163	; 0xa3
 8006664:	30ff      	adds	r0, #255	; 0xff
 8006666:	4381      	bics	r1, r0
 8006668:	6099      	str	r1, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800666a:	2320      	movs	r3, #32
 800666c:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800666e:	0022      	movs	r2, r4
 8006670:	3208      	adds	r2, #8
 8006672:	67d3      	str	r3, [r2, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8006674:	2300      	movs	r3, #0
 8006676:	347c      	adds	r4, #124	; 0x7c
 8006678:	7023      	strb	r3, [r4, #0]
 800667a:	3002      	adds	r0, #2
}
 800667c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800667e:	46c0      	nop			; (mov r8, r8)
 8006680:	fffffe5f 	.word	0xfffffe5f

08006684 <HAL_UART_Transmit>:
{
 8006684:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8006686:	1d07      	adds	r7, r0, #4
{
 8006688:	b087      	sub	sp, #28
 800668a:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 800668c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
{
 800668e:	0004      	movs	r4, r0
 8006690:	000d      	movs	r5, r1
 8006692:	0016      	movs	r6, r2
    return HAL_BUSY;
 8006694:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8006696:	2b20      	cmp	r3, #32
 8006698:	d14a      	bne.n	8006730 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 800669a:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800669c:	2900      	cmp	r1, #0
 800669e:	d047      	beq.n	8006730 <HAL_UART_Transmit+0xac>
 80066a0:	2a00      	cmp	r2, #0
 80066a2:	d045      	beq.n	8006730 <HAL_UART_Transmit+0xac>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066a4:	2380      	movs	r3, #128	; 0x80
 80066a6:	68a2      	ldr	r2, [r4, #8]
 80066a8:	015b      	lsls	r3, r3, #5
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d104      	bne.n	80066b8 <HAL_UART_Transmit+0x34>
 80066ae:	6923      	ldr	r3, [r4, #16]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <HAL_UART_Transmit+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 80066b4:	4201      	tst	r1, r0
 80066b6:	d13b      	bne.n	8006730 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80066b8:	0023      	movs	r3, r4
 80066ba:	337c      	adds	r3, #124	; 0x7c
 80066bc:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80066be:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80066c0:	2a01      	cmp	r2, #1
 80066c2:	d035      	beq.n	8006730 <HAL_UART_Transmit+0xac>
 80066c4:	2201      	movs	r2, #1
 80066c6:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c8:	2200      	movs	r2, #0
 80066ca:	60da      	str	r2, [r3, #12]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066cc:	2321      	movs	r3, #33	; 0x21
 80066ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    tickstart = HAL_GetTick();
 80066d0:	f7fd fb8e 	bl	8003df0 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80066d4:	0023      	movs	r3, r4
 80066d6:	3354      	adds	r3, #84	; 0x54
 80066d8:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 80066da:	3302      	adds	r3, #2
 80066dc:	801e      	strh	r6, [r3, #0]
 80066de:	9303      	str	r3, [sp, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066e0:	2380      	movs	r3, #128	; 0x80
 80066e2:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80066e4:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066e6:	015b      	lsls	r3, r3, #5
      pdata16bits = NULL;
 80066e8:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d104      	bne.n	80066f8 <HAL_UART_Transmit+0x74>
 80066ee:	6923      	ldr	r3, [r4, #16]
 80066f0:	42b3      	cmp	r3, r6
 80066f2:	d101      	bne.n	80066f8 <HAL_UART_Transmit+0x74>
 80066f4:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80066f6:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 80066f8:	0023      	movs	r3, r4
 80066fa:	3356      	adds	r3, #86	; 0x56
 80066fc:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066fe:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 8006700:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 8006706:	2a00      	cmp	r2, #0
 8006708:	d10a      	bne.n	8006720 <HAL_UART_Transmit+0x9c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800670a:	2140      	movs	r1, #64	; 0x40
 800670c:	0020      	movs	r0, r4
 800670e:	f7ff ff87 	bl	8006620 <UART_WaitOnFlagUntilTimeout>
 8006712:	2800      	cmp	r0, #0
 8006714:	d10b      	bne.n	800672e <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_READY;
 8006716:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8006718:	347c      	adds	r4, #124	; 0x7c
    huart->gState = HAL_UART_STATE_READY;
 800671a:	67fb      	str	r3, [r7, #124]	; 0x7c
    __HAL_UNLOCK(huart);
 800671c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800671e:	e007      	b.n	8006730 <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006720:	2200      	movs	r2, #0
 8006722:	2180      	movs	r1, #128	; 0x80
 8006724:	0020      	movs	r0, r4
 8006726:	f7ff ff7b 	bl	8006620 <UART_WaitOnFlagUntilTimeout>
 800672a:	2800      	cmp	r0, #0
 800672c:	d002      	beq.n	8006734 <HAL_UART_Transmit+0xb0>
        return HAL_TIMEOUT;
 800672e:	2003      	movs	r0, #3
}
 8006730:	b007      	add	sp, #28
 8006732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006734:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8006736:	2d00      	cmp	r5, #0
 8006738:	d10b      	bne.n	8006752 <HAL_UART_Transmit+0xce>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800673a:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 800673c:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800673e:	05db      	lsls	r3, r3, #23
 8006740:	0ddb      	lsrs	r3, r3, #23
 8006742:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8006744:	9b03      	ldr	r3, [sp, #12]
 8006746:	9a03      	ldr	r2, [sp, #12]
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	3b01      	subs	r3, #1
 800674c:	b29b      	uxth	r3, r3
 800674e:	8013      	strh	r3, [r2, #0]
 8006750:	e7d2      	b.n	80066f8 <HAL_UART_Transmit+0x74>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006752:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8006754:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006756:	6293      	str	r3, [r2, #40]	; 0x28
 8006758:	e7f4      	b.n	8006744 <HAL_UART_Transmit+0xc0>
	...

0800675c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800675c:	0003      	movs	r3, r0
{
 800675e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006760:	2600      	movs	r6, #0
{
 8006762:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006764:	3388      	adds	r3, #136	; 0x88
 8006766:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8006768:	f7fd fb42 	bl	8003df0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800676c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800676e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	071b      	lsls	r3, r3, #28
 8006774:	d417      	bmi.n	80067a6 <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	075b      	lsls	r3, r3, #29
 800677c:	d50a      	bpl.n	8006794 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800677e:	2180      	movs	r1, #128	; 0x80
 8006780:	4b0f      	ldr	r3, [pc, #60]	; (80067c0 <UART_CheckIdleState+0x64>)
 8006782:	2200      	movs	r2, #0
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	03c9      	lsls	r1, r1, #15
 8006788:	002b      	movs	r3, r5
 800678a:	0020      	movs	r0, r4
 800678c:	f7ff ff48 	bl	8006620 <UART_WaitOnFlagUntilTimeout>
 8006790:	2800      	cmp	r0, #0
 8006792:	d113      	bne.n	80067bc <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8006794:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8006796:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8006798:	1d22      	adds	r2, r4, #4
 800679a:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800679c:	347c      	adds	r4, #124	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800679e:	3204      	adds	r2, #4
 80067a0:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 80067a2:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80067a4:	e00b      	b.n	80067be <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067a6:	2180      	movs	r1, #128	; 0x80
 80067a8:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <UART_CheckIdleState+0x64>)
 80067aa:	0032      	movs	r2, r6
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	0389      	lsls	r1, r1, #14
 80067b0:	0003      	movs	r3, r0
 80067b2:	0020      	movs	r0, r4
 80067b4:	f7ff ff34 	bl	8006620 <UART_WaitOnFlagUntilTimeout>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	d0dc      	beq.n	8006776 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80067bc:	2003      	movs	r0, #3
}
 80067be:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80067c0:	01ffffff 	.word	0x01ffffff

080067c4 <HAL_UART_Init>:
{
 80067c4:	b570      	push	{r4, r5, r6, lr}
 80067c6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80067c8:	d101      	bne.n	80067ce <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80067ca:	2001      	movs	r0, #1
}
 80067cc:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80067ce:	1d05      	adds	r5, r0, #4
 80067d0:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d104      	bne.n	80067e0 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 80067d6:	0002      	movs	r2, r0
 80067d8:	327c      	adds	r2, #124	; 0x7c
 80067da:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80067dc:	f7fd f942 	bl	8003a64 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80067e0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80067e2:	2101      	movs	r1, #1
 80067e4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80067e6:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80067e8:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067ea:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80067ec:	438b      	bics	r3, r1
 80067ee:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067f0:	f7ff fcac 	bl	800614c <UART_SetConfig>
 80067f4:	2801      	cmp	r0, #1
 80067f6:	d0e8      	beq.n	80067ca <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d002      	beq.n	8006804 <HAL_UART_Init+0x40>
    UART_AdvFeatureConfig(huart);
 80067fe:	0020      	movs	r0, r4
 8006800:	f7ff fea6 	bl	8006550 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006804:	6823      	ldr	r3, [r4, #0]
 8006806:	4908      	ldr	r1, [pc, #32]	; (8006828 <HAL_UART_Init+0x64>)
 8006808:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800680a:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800680c:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800680e:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006810:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006812:	689a      	ldr	r2, [r3, #8]
 8006814:	438a      	bics	r2, r1
 8006816:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006818:	2201      	movs	r2, #1
 800681a:	6819      	ldr	r1, [r3, #0]
 800681c:	430a      	orrs	r2, r1
 800681e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8006820:	f7ff ff9c 	bl	800675c <UART_CheckIdleState>
 8006824:	e7d2      	b.n	80067cc <HAL_UART_Init+0x8>
 8006826:	46c0      	nop			; (mov r8, r8)
 8006828:	ffffb7ff 	.word	0xffffb7ff

0800682c <UARTEx_SetNbDataToProcess>:
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800682c:	2301      	movs	r3, #1
{
 800682e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006830:	b087      	sub	sp, #28
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006832:	aa02      	add	r2, sp, #8
 8006834:	7013      	strb	r3, [r2, #0]
 8006836:	7053      	strb	r3, [r2, #1]
 8006838:	7093      	strb	r3, [r2, #2]
 800683a:	2203      	movs	r2, #3
 800683c:	a902      	add	r1, sp, #8
 800683e:	70ca      	strb	r2, [r1, #3]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006840:	2502      	movs	r5, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006842:	2200      	movs	r2, #0
 8006844:	2607      	movs	r6, #7
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006846:	ac04      	add	r4, sp, #16
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006848:	718a      	strb	r2, [r1, #6]
 800684a:	71ca      	strb	r2, [r1, #7]
 800684c:	710e      	strb	r6, [r1, #4]
 800684e:	714b      	strb	r3, [r1, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006850:	70a5      	strb	r5, [r4, #2]
 8006852:	2104      	movs	r1, #4
 8006854:	0007      	movs	r7, r0
 8006856:	0005      	movs	r5, r0
 8006858:	3208      	adds	r2, #8
 800685a:	7022      	strb	r2, [r4, #0]
 800685c:	7122      	strb	r2, [r4, #4]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800685e:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006860:	7061      	strb	r1, [r4, #1]
 8006862:	70e1      	strb	r1, [r4, #3]
 8006864:	7163      	strb	r3, [r4, #5]
 8006866:	71a3      	strb	r3, [r4, #6]
 8006868:	71e3      	strb	r3, [r4, #7]
 800686a:	376a      	adds	r7, #106	; 0x6a
 800686c:	3568      	adds	r5, #104	; 0x68
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800686e:	2a00      	cmp	r2, #0
 8006870:	d103      	bne.n	800687a <UARTEx_SetNbDataToProcess+0x4e>
  {
    huart->NbTxDataToProcess = 1U;
 8006872:	803b      	strh	r3, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 8006874:	802b      	strh	r3, [r5, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006876:	b007      	add	sp, #28
 8006878:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800687a:	6803      	ldr	r3, [r0, #0]
 800687c:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800687e:	689b      	ldr	r3, [r3, #8]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006880:	9201      	str	r2, [sp, #4]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006882:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006884:	aa02      	add	r2, sp, #8
 8006886:	5cd0      	ldrb	r0, [r2, r3]
 8006888:	5ce1      	ldrb	r1, [r4, r3]
 800688a:	00c0      	lsls	r0, r0, #3
 800688c:	f7f9 fcf2 	bl	8000274 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006890:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006892:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006894:	0e5b      	lsrs	r3, r3, #25
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006896:	401e      	ands	r6, r3
 8006898:	ab02      	add	r3, sp, #8
 800689a:	5d98      	ldrb	r0, [r3, r6]
 800689c:	5da1      	ldrb	r1, [r4, r6]
 800689e:	00c0      	lsls	r0, r0, #3
 80068a0:	f7f9 fce8 	bl	8000274 <__divsi3>
 80068a4:	8028      	strh	r0, [r5, #0]
}
 80068a6:	e7e6      	b.n	8006876 <UARTEx_SetNbDataToProcess+0x4a>

080068a8 <HAL_UARTEx_EnableFifoMode>:
{
 80068a8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80068aa:	0004      	movs	r4, r0
 80068ac:	347c      	adds	r4, #124	; 0x7c
 80068ae:	7822      	ldrb	r2, [r4, #0]
 80068b0:	2302      	movs	r3, #2
 80068b2:	2a01      	cmp	r2, #1
 80068b4:	d014      	beq.n	80068e0 <HAL_UARTEx_EnableFifoMode+0x38>
 80068b6:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80068b8:	1d05      	adds	r5, r0, #4
 80068ba:	3322      	adds	r3, #34	; 0x22
  __HAL_LOCK(huart);
 80068bc:	7026      	strb	r6, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80068be:	67eb      	str	r3, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068c0:	6803      	ldr	r3, [r0, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80068c4:	6819      	ldr	r1, [r3, #0]
 80068c6:	43b1      	bics	r1, r6
 80068c8:	6019      	str	r1, [r3, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80068ca:	2180      	movs	r1, #128	; 0x80
 80068cc:	0589      	lsls	r1, r1, #22
 80068ce:	430a      	orrs	r2, r1
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80068d0:	6641      	str	r1, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068d2:	601a      	str	r2, [r3, #0]
  UARTEx_SetNbDataToProcess(huart);
 80068d4:	f7ff ffaa 	bl	800682c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80068d8:	2320      	movs	r3, #32
 80068da:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 80068dc:	2300      	movs	r3, #0
 80068de:	7023      	strb	r3, [r4, #0]
}
 80068e0:	0018      	movs	r0, r3
 80068e2:	bd70      	pop	{r4, r5, r6, pc}

080068e4 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80068e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 80068e6:	0005      	movs	r5, r0
 80068e8:	357c      	adds	r5, #124	; 0x7c
 80068ea:	782b      	ldrb	r3, [r5, #0]
{
 80068ec:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 80068ee:	2002      	movs	r0, #2
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d017      	beq.n	8006924 <HAL_UARTEx_SetTxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 80068f4:	2324      	movs	r3, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068f6:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(huart);
 80068f8:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80068fa:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 80068fc:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80068fe:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006900:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006902:	6813      	ldr	r3, [r2, #0]
 8006904:	4383      	bics	r3, r0
 8006906:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006908:	6893      	ldr	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800690a:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800690c:	00db      	lsls	r3, r3, #3
 800690e:	08db      	lsrs	r3, r3, #3
 8006910:	4319      	orrs	r1, r3
 8006912:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006914:	f7ff ff8a 	bl	800682c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006918:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 800691a:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800691c:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800691e:	2320      	movs	r3, #32
 8006920:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8006922:	7028      	strb	r0, [r5, #0]
}
 8006924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006928 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 800692a:	0005      	movs	r5, r0
 800692c:	357c      	adds	r5, #124	; 0x7c
 800692e:	782b      	ldrb	r3, [r5, #0]
{
 8006930:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 8006932:	2002      	movs	r0, #2
 8006934:	2b01      	cmp	r3, #1
 8006936:	d017      	beq.n	8006968 <HAL_UARTEx_SetRxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 8006938:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 800693a:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800693c:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 800693e:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006940:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006942:	6823      	ldr	r3, [r4, #0]
 8006944:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	4382      	bics	r2, r0
 800694a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800694c:	689a      	ldr	r2, [r3, #8]
 800694e:	4807      	ldr	r0, [pc, #28]	; (800696c <HAL_UARTEx_SetRxFifoThreshold+0x44>)
 8006950:	4002      	ands	r2, r0
 8006952:	4311      	orrs	r1, r2
 8006954:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006956:	0020      	movs	r0, r4
 8006958:	f7ff ff68 	bl	800682c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800695c:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 800695e:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006960:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006962:	2320      	movs	r3, #32
 8006964:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8006966:	7028      	strb	r0, [r5, #0]
}
 8006968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800696a:	46c0      	nop			; (mov r8, r8)
 800696c:	f1ffffff 	.word	0xf1ffffff

08006970 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result 
  */
int32_t MX_FATFS_Init(void) 
{
 8006970:	b510      	push	{r4, lr}
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 8006972:	4906      	ldr	r1, [pc, #24]	; (800698c <MX_FATFS_Init+0x1c>)
 8006974:	4806      	ldr	r0, [pc, #24]	; (8006990 <MX_FATFS_Init+0x20>)
 8006976:	f000 f8a1 	bl	8006abc <FATFS_LinkDriver>
 800697a:	2800      	cmp	r0, #0
 800697c:	d103      	bne.n	8006986 <MX_FATFS_Init+0x16>
  {
    return APP_ERROR;
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800697e:	2201      	movs	r2, #1
 8006980:	4b04      	ldr	r3, [pc, #16]	; (8006994 <MX_FATFS_Init+0x24>)
 8006982:	701a      	strb	r2, [r3, #0]
    return APP_OK;
  }
  /* USER CODE END FATFS_Init */
}
 8006984:	bd10      	pop	{r4, pc}
    return APP_ERROR;
 8006986:	2001      	movs	r0, #1
 8006988:	4240      	negs	r0, r0
 800698a:	e7fb      	b.n	8006984 <MX_FATFS_Init+0x14>
 800698c:	20004c9c 	.word	0x20004c9c
 8006990:	08010ea0 	.word	0x08010ea0
 8006994:	200014e4 	.word	0x200014e4

08006998 <MX_FATFS_Process>:
  /* USER CODE BEGIN FATFS_Process */
  int32_t process_res = APP_OK;  
    
  return process_res;
  /* USER CODE END FATFS_Process */
}  
 8006998:	2000      	movs	r0, #0
 800699a:	4770      	bx	lr

0800699c <SD_CheckStatus.isra.0>:
  SD_ioctl,
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 800699c:	b570      	push	{r4, r5, r6, lr}
{
  Stat = STA_NOINIT;
 800699e:	2501      	movs	r5, #1
 80069a0:	4c05      	ldr	r4, [pc, #20]	; (80069b8 <SD_CheckStatus.isra.0+0x1c>)
 80069a2:	7025      	strb	r5, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80069a4:	f7fc feb4 	bl	8003710 <BSP_SD_GetCardState>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d102      	bne.n	80069b2 <SD_CheckStatus.isra.0+0x16>
  {
    Stat &= ~STA_NOINIT;
 80069ac:	7823      	ldrb	r3, [r4, #0]
 80069ae:	43ab      	bics	r3, r5
 80069b0:	7023      	strb	r3, [r4, #0]
  }

  return Stat;
 80069b2:	7820      	ldrb	r0, [r4, #0]
 80069b4:	b2c0      	uxtb	r0, r0
}
 80069b6:	bd70      	pop	{r4, r5, r6, pc}
 80069b8:	20000010 	.word	0x20000010

080069bc <SD_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
  /* USER CODE BEGIN SDinitialize */
  Stat = STA_NOINIT;
 80069bc:	2301      	movs	r3, #1
{
 80069be:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80069c0:	4c05      	ldr	r4, [pc, #20]	; (80069d8 <SD_initialize+0x1c>)
 80069c2:	7023      	strb	r3, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80069c4:	f7fc fb1e 	bl	8003004 <BSP_SD_Init>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	d102      	bne.n	80069d2 <SD_initialize+0x16>
  {
    Stat = SD_CheckStatus(lun);
 80069cc:	f7ff ffe6 	bl	800699c <SD_CheckStatus.isra.0>
 80069d0:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80069d2:	7820      	ldrb	r0, [r4, #0]
 80069d4:	b2c0      	uxtb	r0, r0
  /* USER CODE END SDinitialize */
}
 80069d6:	bd10      	pop	{r4, pc}
 80069d8:	20000010 	.word	0x20000010

080069dc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80069dc:	b510      	push	{r4, lr}
  return SD_CheckStatus(lun);
 80069de:	f7ff ffdd 	bl	800699c <SD_CheckStatus.isra.0>
}
 80069e2:	bd10      	pop	{r4, pc}

080069e4 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80069e4:	0008      	movs	r0, r1
 80069e6:	b510      	push	{r4, lr}
 80069e8:	0011      	movs	r1, r2
 80069ea:	001a      	movs	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80069ec:	4b05      	ldr	r3, [pc, #20]	; (8006a04 <SD_read+0x20>)
 80069ee:	f7fc fd91 	bl	8003514 <BSP_SD_ReadBlocks>
 80069f2:	0003      	movs	r3, r0
  DRESULT res = RES_ERROR;
 80069f4:	2001      	movs	r0, #1
  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d103      	bne.n	8006a02 <SD_read+0x1e>
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
  /* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80069fa:	f7fc fe89 	bl	8003710 <BSP_SD_GetCardState>
 80069fe:	2800      	cmp	r0, #0
 8006a00:	d1fb      	bne.n	80069fa <SD_read+0x16>
}
 8006a02:	bd10      	pop	{r4, pc}
 8006a04:	05f5e100 	.word	0x05f5e100

08006a08 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006a08:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006a0a:	4b11      	ldr	r3, [pc, #68]	; (8006a50 <SD_ioctl+0x48>)
{
 8006a0c:	0014      	movs	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006a0e:	781a      	ldrb	r2, [r3, #0]
{
 8006a10:	b090      	sub	sp, #64	; 0x40
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006a12:	2003      	movs	r0, #3
 8006a14:	07d3      	lsls	r3, r2, #31
 8006a16:	d413      	bmi.n	8006a40 <SD_ioctl+0x38>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
     res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8006a18:	3001      	adds	r0, #1
  switch (cmd)
 8006a1a:	2903      	cmp	r1, #3
 8006a1c:	d810      	bhi.n	8006a40 <SD_ioctl+0x38>
 8006a1e:	0008      	movs	r0, r1
 8006a20:	f7f9 fb80 	bl	8000124 <__gnu_thumb1_case_uqi>
 8006a24:	1008020d 	.word	0x1008020d
    BSP_SD_GetCardInfo(&CardInfo);
 8006a28:	4668      	mov	r0, sp
 8006a2a:	f7fc fbad 	bl	8003188 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006a2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006a30:	6023      	str	r3, [r4, #0]
 8006a32:	e004      	b.n	8006a3e <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8006a34:	4668      	mov	r0, sp
 8006a36:	f7fc fba7 	bl	8003188 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006a3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a3c:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8006a3e:	2000      	movs	r0, #0
  }

  return res;
}
 8006a40:	b010      	add	sp, #64	; 0x40
 8006a42:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8006a44:	4668      	mov	r0, sp
 8006a46:	f7fc fb9f 	bl	8003188 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006a4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a4c:	0a5b      	lsrs	r3, r3, #9
 8006a4e:	e7ef      	b.n	8006a30 <SD_ioctl+0x28>
 8006a50:	20000010 	.word	0x20000010

08006a54 <SD_write>:
{
 8006a54:	0008      	movs	r0, r1
 8006a56:	b510      	push	{r4, lr}
 8006a58:	0011      	movs	r1, r2
 8006a5a:	001a      	movs	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8006a5c:	4b05      	ldr	r3, [pc, #20]	; (8006a74 <SD_write+0x20>)
 8006a5e:	f7fc fdcb 	bl	80035f8 <BSP_SD_WriteBlocks>
 8006a62:	0003      	movs	r3, r0
  DRESULT res = RES_ERROR;
 8006a64:	2001      	movs	r0, #1
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d103      	bne.n	8006a72 <SD_write+0x1e>
    while(BSP_SD_GetCardState() != MSD_OK)
 8006a6a:	f7fc fe51 	bl	8003710 <BSP_SD_GetCardState>
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	d1fb      	bne.n	8006a6a <SD_write+0x16>
}
 8006a72:	bd10      	pop	{r4, pc}
 8006a74:	05f5e100 	.word	0x05f5e100

08006a78 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006a78:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8006a7a:	4b0f      	ldr	r3, [pc, #60]	; (8006ab8 <FATFS_LinkDriverEx+0x40>)
  uint8_t ret = 1;
 8006a7c:	2501      	movs	r5, #1
  if(disk.nbr < _VOLUMES)
 8006a7e:	7a5c      	ldrb	r4, [r3, #9]
 8006a80:	b2e4      	uxtb	r4, r4
 8006a82:	2c00      	cmp	r4, #0
 8006a84:	d115      	bne.n	8006ab2 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006a86:	7a5d      	ldrb	r5, [r3, #9]
 8006a88:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8006a8a:	7a5d      	ldrb	r5, [r3, #9]
 8006a8c:	00ad      	lsls	r5, r5, #2
 8006a8e:	195d      	adds	r5, r3, r5
 8006a90:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8006a92:	7a58      	ldrb	r0, [r3, #9]
    DiskNum = disk.nbr++;
    path[0] = DiskNum + '0';
    path[1] = ':';
    path[2] = '/';
    path[3] = 0;
 8006a94:	0025      	movs	r5, r4
    disk.lun[disk.nbr] = lun;
 8006a96:	1818      	adds	r0, r3, r0
 8006a98:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8006a9a:	7a5a      	ldrb	r2, [r3, #9]
 8006a9c:	b2d2      	uxtb	r2, r2
 8006a9e:	1c50      	adds	r0, r2, #1
 8006aa0:	b2c0      	uxtb	r0, r0
 8006aa2:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 8006aa4:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8006aa6:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8006aa8:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8006aaa:	3b0b      	subs	r3, #11
    path[0] = DiskNum + '0';
 8006aac:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8006aae:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8006ab0:	70cc      	strb	r4, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8006ab2:	0028      	movs	r0, r5
 8006ab4:	bd30      	pop	{r4, r5, pc}
 8006ab6:	46c0      	nop			; (mov r8, r8)
 8006ab8:	200014e8 	.word	0x200014e8

08006abc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006abc:	b510      	push	{r4, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f7ff ffda 	bl	8006a78 <FATFS_LinkDriverEx>
}
 8006ac4:	bd10      	pop	{r4, pc}

08006ac6 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 8006ac6:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	d103      	bne.n	8006ad4 <lv_disp_get_scr_act+0xe>
 8006acc:	f005 f9a4 	bl	800be18 <lv_disp_get_default>
    if(!disp) {
        LV_LOG_WARN("lv_scr_act: no display registered to get its top layer");
        return NULL;
 8006ad0:	1e03      	subs	r3, r0, #0
    if(!disp) {
 8006ad2:	d000      	beq.n	8006ad6 <lv_disp_get_scr_act+0x10>
    }

    return disp->act_scr;
 8006ad4:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8006ad6:	0018      	movs	r0, r3
 8006ad8:	bd10      	pop	{r4, pc}

08006ada <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 8006ada:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 8006adc:	2800      	cmp	r0, #0
 8006ade:	d103      	bne.n	8006ae8 <lv_disp_get_layer_top+0xe>
 8006ae0:	f005 f99a 	bl	800be18 <lv_disp_get_default>
    if(!disp) {
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
 8006ae4:	1e03      	subs	r3, r0, #0
    if(!disp) {
 8006ae6:	d000      	beq.n	8006aea <lv_disp_get_layer_top+0x10>
    }

    return disp->top_layer;
 8006ae8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
}
 8006aea:	0018      	movs	r0, r3
 8006aec:	bd10      	pop	{r4, pc}

08006aee <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 8006aee:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d103      	bne.n	8006afc <lv_disp_get_layer_sys+0xe>
 8006af4:	f005 f990 	bl	800be18 <lv_disp_get_default>
    if(!disp) {
        LV_LOG_WARN("lv_layer_sys: no display registered to get its top layer");
        return NULL;
 8006af8:	1e03      	subs	r3, r0, #0
    if(!disp) {
 8006afa:	d000      	beq.n	8006afe <lv_disp_get_layer_sys+0x10>
    }

    return disp->sys_layer;
 8006afc:	6c03      	ldr	r3, [r0, #64]	; 0x40
}
 8006afe:	0018      	movs	r0, r3
 8006b00:	bd10      	pop	{r4, pc}

08006b02 <obj_to_foreground>:

    if(group->focus_cb) group->focus_cb(group);
}

static void obj_to_foreground(lv_obj_t * obj)
{
 8006b02:	b570      	push	{r4, r5, r6, lr}
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
 8006b04:	2400      	movs	r4, #0
    while(i != NULL) {
        if(i->top != 0) last_top = i;
 8006b06:	2520      	movs	r5, #32
    while(i != NULL) {
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	d105      	bne.n	8006b18 <obj_to_foreground+0x16>
        i = lv_obj_get_parent(i);
    }

    if(last_top != NULL) {
 8006b0c:	2c00      	cmp	r4, #0
 8006b0e:	d002      	beq.n	8006b16 <obj_to_foreground+0x14>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
 8006b10:	0020      	movs	r0, r4
 8006b12:	f000 fa4a 	bl	8006faa <lv_obj_move_foreground>
    }
}
 8006b16:	bd70      	pop	{r4, r5, r6, pc}
        if(i->top != 0) last_top = i;
 8006b18:	0003      	movs	r3, r0
 8006b1a:	3330      	adds	r3, #48	; 0x30
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	422b      	tst	r3, r5
 8006b20:	d000      	beq.n	8006b24 <obj_to_foreground+0x22>
 8006b22:	0004      	movs	r4, r0
        i = lv_obj_get_parent(i);
 8006b24:	f000 fe5d 	bl	80077e2 <lv_obj_get_parent>
 8006b28:	e7ee      	b.n	8006b08 <obj_to_foreground+0x6>

08006b2a <focus_next_core.part.0>:
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8006b2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b2c:	0005      	movs	r5, r0
    bool can_begin           = true;
 8006b2e:	2701      	movs	r7, #1
    lv_obj_t ** obj_sentinel = NULL;
 8006b30:	2600      	movs	r6, #0
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8006b32:	b085      	sub	sp, #20
    lv_obj_t ** obj_next     = group->obj_focus;
 8006b34:	68c4      	ldr	r4, [r0, #12]
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8006b36:	9102      	str	r1, [sp, #8]
 8006b38:	9203      	str	r2, [sp, #12]
        if(obj_next == NULL) {
 8006b3a:	2c00      	cmp	r4, #0
 8006b3c:	d14e      	bne.n	8006bdc <focus_next_core.part.0+0xb2>
            if(group->wrap || obj_sentinel == NULL) {
 8006b3e:	002b      	movs	r3, r5
 8006b40:	2210      	movs	r2, #16
 8006b42:	3358      	adds	r3, #88	; 0x58
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	4213      	tst	r3, r2
 8006b48:	d103      	bne.n	8006b52 <focus_next_core.part.0+0x28>
 8006b4a:	2e00      	cmp	r6, #0
 8006b4c:	d053      	beq.n	8006bf6 <focus_next_core.part.0+0xcc>
}
 8006b4e:	b005      	add	sp, #20
 8006b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if(!can_begin) return;
 8006b52:	2f00      	cmp	r7, #0
 8006b54:	d0fb      	beq.n	8006b4e <focus_next_core.part.0+0x24>
                obj_next  = begin(&group->obj_ll);
 8006b56:	0028      	movs	r0, r5
 8006b58:	9b02      	ldr	r3, [sp, #8]
 8006b5a:	4798      	blx	r3
        if(obj_sentinel == NULL) {
 8006b5c:	2700      	movs	r7, #0
                obj_next  = begin(&group->obj_ll);
 8006b5e:	0004      	movs	r4, r0
        if(obj_sentinel == NULL) {
 8006b60:	42be      	cmp	r6, r7
 8006b62:	d145      	bne.n	8006bf0 <focus_next_core.part.0+0xc6>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 8006b64:	2c00      	cmp	r4, #0
 8006b66:	d0f2      	beq.n	8006b4e <focus_next_core.part.0+0x24>
 8006b68:	0026      	movs	r6, r4
 8006b6a:	2700      	movs	r7, #0
        if(!lv_obj_get_hidden(*obj_next)) break;
 8006b6c:	6820      	ldr	r0, [r4, #0]
 8006b6e:	f000 fedd 	bl	800792c <lv_obj_get_hidden>
 8006b72:	9001      	str	r0, [sp, #4]
 8006b74:	2800      	cmp	r0, #0
 8006b76:	d1e0      	bne.n	8006b3a <focus_next_core.part.0+0x10>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 8006b78:	68eb      	ldr	r3, [r5, #12]
 8006b7a:	42a3      	cmp	r3, r4
 8006b7c:	d0e7      	beq.n	8006b4e <focus_next_core.part.0+0x24>
    if(group->obj_focus) {
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d010      	beq.n	8006ba4 <focus_next_core.part.0+0x7a>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8006b82:	6818      	ldr	r0, [r3, #0]
 8006b84:	9a01      	ldr	r2, [sp, #4]
 8006b86:	69c3      	ldr	r3, [r0, #28]
 8006b88:	2110      	movs	r1, #16
 8006b8a:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 8006b8c:	68eb      	ldr	r3, [r5, #12]
 8006b8e:	9a01      	ldr	r2, [sp, #4]
 8006b90:	210d      	movs	r1, #13
 8006b92:	6818      	ldr	r0, [r3, #0]
 8006b94:	f000 f97a 	bl	8006e8c <lv_event_send>
        if(res != LV_RES_OK) return;
 8006b98:	2801      	cmp	r0, #1
 8006b9a:	d1d8      	bne.n	8006b4e <focus_next_core.part.0+0x24>
        lv_obj_invalidate(*group->obj_focus);
 8006b9c:	68eb      	ldr	r3, [r5, #12]
 8006b9e:	6818      	ldr	r0, [r3, #0]
 8006ba0:	f000 f9b4 	bl	8006f0c <lv_obj_invalidate>
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8006ba4:	6820      	ldr	r0, [r4, #0]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	69c3      	ldr	r3, [r0, #28]
 8006baa:	210f      	movs	r1, #15
    group->obj_focus = obj_next;
 8006bac:	60ec      	str	r4, [r5, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8006bae:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 8006bb0:	68eb      	ldr	r3, [r5, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	210c      	movs	r1, #12
 8006bb6:	6818      	ldr	r0, [r3, #0]
 8006bb8:	f000 f968 	bl	8006e8c <lv_event_send>
    if(res != LV_RES_OK) return;
 8006bbc:	2801      	cmp	r0, #1
 8006bbe:	d1c6      	bne.n	8006b4e <focus_next_core.part.0+0x24>
    obj_to_foreground(*group->obj_focus);
 8006bc0:	68eb      	ldr	r3, [r5, #12]
 8006bc2:	6818      	ldr	r0, [r3, #0]
 8006bc4:	f7ff ff9d 	bl	8006b02 <obj_to_foreground>
    lv_obj_invalidate(*group->obj_focus);
 8006bc8:	68eb      	ldr	r3, [r5, #12]
 8006bca:	6818      	ldr	r0, [r3, #0]
 8006bcc:	f000 f99e 	bl	8006f0c <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 8006bd0:	69ab      	ldr	r3, [r5, #24]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d0bb      	beq.n	8006b4e <focus_next_core.part.0+0x24>
 8006bd6:	0028      	movs	r0, r5
 8006bd8:	4798      	blx	r3
 8006bda:	e7b8      	b.n	8006b4e <focus_next_core.part.0+0x24>
        if(obj_sentinel == NULL) {
 8006bdc:	2e00      	cmp	r6, #0
 8006bde:	d100      	bne.n	8006be2 <focus_next_core.part.0+0xb8>
 8006be0:	0026      	movs	r6, r4
            obj_next = move(&group->obj_ll, obj_next);
 8006be2:	0021      	movs	r1, r4
 8006be4:	0028      	movs	r0, r5
 8006be6:	9b03      	ldr	r3, [sp, #12]
 8006be8:	4798      	blx	r3
 8006bea:	0004      	movs	r4, r0
            if(obj_next == obj_sentinel) return;
 8006bec:	42b0      	cmp	r0, r6
 8006bee:	d0ae      	beq.n	8006b4e <focus_next_core.part.0+0x24>
        if(obj_next == NULL) continue;
 8006bf0:	2c00      	cmp	r4, #0
 8006bf2:	d1bb      	bne.n	8006b6c <focus_next_core.part.0+0x42>
 8006bf4:	e7a3      	b.n	8006b3e <focus_next_core.part.0+0x14>
                if(!can_begin) return;
 8006bf6:	2f00      	cmp	r7, #0
 8006bf8:	d0a9      	beq.n	8006b4e <focus_next_core.part.0+0x24>
                obj_next  = begin(&group->obj_ll);
 8006bfa:	0028      	movs	r0, r5
 8006bfc:	9b02      	ldr	r3, [sp, #8]
 8006bfe:	4798      	blx	r3
 8006c00:	0004      	movs	r4, r0
 8006c02:	e7af      	b.n	8006b64 <focus_next_core.part.0+0x3a>

08006c04 <lv_group_init>:
{
 8006c04:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8006c06:	215c      	movs	r1, #92	; 0x5c
 8006c08:	4801      	ldr	r0, [pc, #4]	; (8006c10 <lv_group_init+0xc>)
 8006c0a:	f005 fc64 	bl	800c4d6 <lv_ll_init>
}
 8006c0e:	bd10      	pop	{r4, pc}
 8006c10:	20005460 	.word	0x20005460

08006c14 <lv_group_focus_next>:
    if(group->frozen) return;
 8006c14:	0003      	movs	r3, r0
 8006c16:	3358      	adds	r3, #88	; 0x58
 8006c18:	781b      	ldrb	r3, [r3, #0]
{
 8006c1a:	b510      	push	{r4, lr}
    if(group->frozen) return;
 8006c1c:	07db      	lsls	r3, r3, #31
 8006c1e:	d403      	bmi.n	8006c28 <lv_group_focus_next+0x14>
 8006c20:	4a02      	ldr	r2, [pc, #8]	; (8006c2c <lv_group_focus_next+0x18>)
 8006c22:	4903      	ldr	r1, [pc, #12]	; (8006c30 <lv_group_focus_next+0x1c>)
 8006c24:	f7ff ff81 	bl	8006b2a <focus_next_core.part.0>
}
 8006c28:	bd10      	pop	{r4, pc}
 8006c2a:	46c0      	nop			; (mov r8, r8)
 8006c2c:	0800c57b 	.word	0x0800c57b
 8006c30:	0800c56b 	.word	0x0800c56b

08006c34 <lv_group_focus_prev>:
    if(group->frozen) return;
 8006c34:	0003      	movs	r3, r0
 8006c36:	3358      	adds	r3, #88	; 0x58
 8006c38:	781b      	ldrb	r3, [r3, #0]
{
 8006c3a:	b510      	push	{r4, lr}
    if(group->frozen) return;
 8006c3c:	07db      	lsls	r3, r3, #31
 8006c3e:	d403      	bmi.n	8006c48 <lv_group_focus_prev+0x14>
 8006c40:	4a02      	ldr	r2, [pc, #8]	; (8006c4c <lv_group_focus_prev+0x18>)
 8006c42:	4903      	ldr	r1, [pc, #12]	; (8006c50 <lv_group_focus_prev+0x1c>)
 8006c44:	f7ff ff71 	bl	8006b2a <focus_next_core.part.0>
}
 8006c48:	bd10      	pop	{r4, pc}
 8006c4a:	46c0      	nop			; (mov r8, r8)
 8006c4c:	0800c597 	.word	0x0800c597
 8006c50:	0800c573 	.word	0x0800c573

08006c54 <lv_group_refocus>:
{
 8006c54:	b570      	push	{r4, r5, r6, lr}
    uint8_t temp_wrap = g->wrap;
 8006c56:	0004      	movs	r4, r0
    g->wrap           = 1;
 8006c58:	2310      	movs	r3, #16
    uint8_t temp_wrap = g->wrap;
 8006c5a:	3458      	adds	r4, #88	; 0x58
 8006c5c:	7822      	ldrb	r2, [r4, #0]
 8006c5e:	06d5      	lsls	r5, r2, #27
    g->wrap           = 1;
 8006c60:	4313      	orrs	r3, r2
    uint8_t temp_wrap = g->wrap;
 8006c62:	0fed      	lsrs	r5, r5, #31
    g->wrap           = 1;
 8006c64:	7023      	strb	r3, [r4, #0]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8006c66:	071b      	lsls	r3, r3, #28
 8006c68:	d408      	bmi.n	8006c7c <lv_group_refocus+0x28>
        lv_group_focus_next(g);
 8006c6a:	f7ff ffd3 	bl	8006c14 <lv_group_focus_next>
    g->wrap = temp_wrap;
 8006c6e:	2210      	movs	r2, #16
 8006c70:	7823      	ldrb	r3, [r4, #0]
 8006c72:	012d      	lsls	r5, r5, #4
 8006c74:	4393      	bics	r3, r2
 8006c76:	432b      	orrs	r3, r5
 8006c78:	7023      	strb	r3, [r4, #0]
}
 8006c7a:	bd70      	pop	{r4, r5, r6, pc}
        lv_group_focus_prev(g);
 8006c7c:	f7ff ffda 	bl	8006c34 <lv_group_focus_prev>
 8006c80:	e7f5      	b.n	8006c6e <lv_group_refocus+0x1a>

08006c82 <lv_group_add_obj>:
{
 8006c82:	b570      	push	{r4, r5, r6, lr}
 8006c84:	0004      	movs	r4, r0
 8006c86:	000d      	movs	r5, r1
    if(group == NULL) return;
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	d026      	beq.n	8006cda <lv_group_add_obj+0x58>
    LV_LL_READ(group->obj_ll, obj_i)
 8006c8c:	f005 fc6d 	bl	800c56a <lv_ll_get_head>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	d111      	bne.n	8006cb8 <lv_group_add_obj+0x36>
    if(obj->group_p) {
 8006c94:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d007      	beq.n	8006caa <lv_group_add_obj+0x28>
        if(lv_obj_is_focused(obj)) {
 8006c9a:	0028      	movs	r0, r5
 8006c9c:	f000 feb6 	bl	8007a0c <lv_obj_is_focused>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	d002      	beq.n	8006caa <lv_group_add_obj+0x28>
            lv_group_refocus(obj->group_p);
 8006ca4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8006ca6:	f7ff ffd5 	bl	8006c54 <lv_group_refocus>
    obj->group_p     = group;
 8006caa:	62ec      	str	r4, [r5, #44]	; 0x2c
    lv_obj_t ** next = lv_ll_ins_tail(&group->obj_ll);
 8006cac:	0020      	movs	r0, r4
 8006cae:	f005 fc3c 	bl	800c52a <lv_ll_ins_tail>
 8006cb2:	1e06      	subs	r6, r0, #0
    lv_mem_assert(next);
 8006cb4:	d108      	bne.n	8006cc8 <lv_group_add_obj+0x46>
 8006cb6:	e7fe      	b.n	8006cb6 <lv_group_add_obj+0x34>
        if((*obj_i) == obj) {
 8006cb8:	6803      	ldr	r3, [r0, #0]
 8006cba:	42ab      	cmp	r3, r5
 8006cbc:	d00d      	beq.n	8006cda <lv_group_add_obj+0x58>
    LV_LL_READ(group->obj_ll, obj_i)
 8006cbe:	0001      	movs	r1, r0
 8006cc0:	0020      	movs	r0, r4
 8006cc2:	f005 fc5a 	bl	800c57a <lv_ll_get_next>
 8006cc6:	e7e3      	b.n	8006c90 <lv_group_add_obj+0xe>
    *next = obj;
 8006cc8:	6005      	str	r5, [r0, #0]
    if(lv_ll_get_head(&group->obj_ll) == next) {
 8006cca:	0020      	movs	r0, r4
 8006ccc:	f005 fc4d 	bl	800c56a <lv_ll_get_head>
 8006cd0:	4286      	cmp	r6, r0
 8006cd2:	d102      	bne.n	8006cda <lv_group_add_obj+0x58>
        lv_group_refocus(group);
 8006cd4:	0020      	movs	r0, r4
 8006cd6:	f7ff ffbd 	bl	8006c54 <lv_group_refocus>
}
 8006cda:	bd70      	pop	{r4, r5, r6, pc}

08006cdc <lv_group_mod_style>:
{
 8006cdc:	b570      	push	{r4, r5, r6, lr}
    lv_style_copy(&group->style_tmp, style);
 8006cde:	0005      	movs	r5, r0
{
 8006ce0:	0004      	movs	r4, r0
    lv_style_copy(&group->style_tmp, style);
 8006ce2:	351c      	adds	r5, #28
 8006ce4:	0028      	movs	r0, r5
 8006ce6:	f001 f9f3 	bl	80080d0 <lv_style_copy>
    if(group->editing) {
 8006cea:	0023      	movs	r3, r4
 8006cec:	3358      	adds	r3, #88	; 0x58
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	079b      	lsls	r3, r3, #30
 8006cf2:	d507      	bpl.n	8006d04 <lv_group_mod_style+0x28>
        if(group->style_mod_edit_cb) group->style_mod_edit_cb(group, &group->style_tmp);
 8006cf4:	6963      	ldr	r3, [r4, #20]
        if(group->style_mod_cb) group->style_mod_cb(group, &group->style_tmp);
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d002      	beq.n	8006d00 <lv_group_mod_style+0x24>
 8006cfa:	0029      	movs	r1, r5
 8006cfc:	0020      	movs	r0, r4
 8006cfe:	4798      	blx	r3
}
 8006d00:	0028      	movs	r0, r5
 8006d02:	bd70      	pop	{r4, r5, r6, pc}
        if(group->style_mod_cb) group->style_mod_cb(group, &group->style_tmp);
 8006d04:	6923      	ldr	r3, [r4, #16]
 8006d06:	e7f6      	b.n	8006cf6 <lv_group_mod_style+0x1a>

08006d08 <lv_group_get_focused>:
    if(!group) return NULL;
 8006d08:	1e03      	subs	r3, r0, #0
 8006d0a:	d003      	beq.n	8006d14 <lv_group_get_focused+0xc>
    if(group->obj_focus == NULL) return NULL;
 8006d0c:	68c2      	ldr	r2, [r0, #12]
    if(!group) return NULL;
 8006d0e:	1e13      	subs	r3, r2, #0
    if(group->obj_focus == NULL) return NULL;
 8006d10:	d000      	beq.n	8006d14 <lv_group_get_focused+0xc>
    return *group->obj_focus;
 8006d12:	6813      	ldr	r3, [r2, #0]
}
 8006d14:	0018      	movs	r0, r3
 8006d16:	4770      	bx	lr

08006d18 <lv_indev_reset.part.1>:
}
/**
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 */
void lv_indev_reset(lv_indev_t * indev)
 8006d18:	b510      	push	{r4, lr}
{
    if(indev)
        indev->proc.reset_query = 1;
    else {
        lv_indev_t * i = lv_indev_get_next(NULL);
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	f005 f8d8 	bl	800bed0 <lv_indev_get_next>
        while(i) {
            i->proc.reset_query = 1;
 8006d20:	2402      	movs	r4, #2
        while(i) {
 8006d22:	2800      	cmp	r0, #0
 8006d24:	d100      	bne.n	8006d28 <lv_indev_reset.part.1+0x10>

            i = lv_indev_get_next(i);
        }
    }
}
 8006d26:	bd10      	pop	{r4, pc}
            i->proc.reset_query = 1;
 8006d28:	0002      	movs	r2, r0
 8006d2a:	324c      	adds	r2, #76	; 0x4c
 8006d2c:	7813      	ldrb	r3, [r2, #0]
 8006d2e:	4323      	orrs	r3, r4
 8006d30:	7013      	strb	r3, [r2, #0]
            i = lv_indev_get_next(i);
 8006d32:	f005 f8cd 	bl	800bed0 <lv_indev_get_next>
 8006d36:	e7f4      	b.n	8006d22 <lv_indev_reset.part.1+0xa>

08006d38 <lv_indev_init>:
{
 8006d38:	b510      	push	{r4, lr}
 8006d3a:	f7ff ffed 	bl	8006d18 <lv_indev_reset.part.1>
}
 8006d3e:	bd10      	pop	{r4, pc}

08006d40 <lv_indev_get_act>:
    return indev_act;
 8006d40:	4b01      	ldr	r3, [pc, #4]	; (8006d48 <lv_indev_get_act+0x8>)
 8006d42:	6818      	ldr	r0, [r3, #0]
}
 8006d44:	4770      	bx	lr
 8006d46:	46c0      	nop			; (mov r8, r8)
 8006d48:	200014f4 	.word	0x200014f4

08006d4c <refresh_children_position>:
 * @param obj pointer to an object which children will be repositioned
 * @param x_diff x coordinate shift
 * @param y_diff y coordinate shift
 */
static void refresh_children_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)
{
 8006d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_obj_t * i;
    LV_LL_READ(obj->child_ll, i)
 8006d4e:	1d05      	adds	r5, r0, #4
 8006d50:	0028      	movs	r0, r5
{
 8006d52:	000e      	movs	r6, r1
 8006d54:	0017      	movs	r7, r2
    LV_LL_READ(obj->child_ll, i)
 8006d56:	f005 fc08 	bl	800c56a <lv_ll_get_head>
 8006d5a:	1e04      	subs	r4, r0, #0
 8006d5c:	d100      	bne.n	8006d60 <refresh_children_position+0x14>
        i->coords.x2 += x_diff;
        i->coords.y2 += y_diff;

        refresh_children_position(i, x_diff, y_diff);
    }
}
 8006d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        i->coords.x1 += x_diff;
 8006d60:	8a23      	ldrh	r3, [r4, #16]
 8006d62:	b2b2      	uxth	r2, r6
        i->coords.y1 += y_diff;
 8006d64:	8a61      	ldrh	r1, [r4, #18]
        i->coords.x1 += x_diff;
 8006d66:	18d3      	adds	r3, r2, r3
 8006d68:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
 8006d6a:	b2bb      	uxth	r3, r7
 8006d6c:	1859      	adds	r1, r3, r1
 8006d6e:	8261      	strh	r1, [r4, #18]
        i->coords.x2 += x_diff;
 8006d70:	8aa1      	ldrh	r1, [r4, #20]
        refresh_children_position(i, x_diff, y_diff);
 8006d72:	0020      	movs	r0, r4
        i->coords.x2 += x_diff;
 8006d74:	1852      	adds	r2, r2, r1
 8006d76:	82a2      	strh	r2, [r4, #20]
        i->coords.y2 += y_diff;
 8006d78:	8ae2      	ldrh	r2, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
 8006d7a:	0031      	movs	r1, r6
        i->coords.y2 += y_diff;
 8006d7c:	189b      	adds	r3, r3, r2
 8006d7e:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
 8006d80:	003a      	movs	r2, r7
 8006d82:	f7ff ffe3 	bl	8006d4c <refresh_children_position>
    LV_LL_READ(obj->child_ll, i)
 8006d86:	0021      	movs	r1, r4
 8006d88:	0028      	movs	r0, r5
 8006d8a:	f005 fbf6 	bl	800c57a <lv_ll_get_next>
 8006d8e:	e7e4      	b.n	8006d5a <refresh_children_position+0xe>

08006d90 <lv_init>:
{
 8006d90:	b510      	push	{r4, lr}
    if(lv_initialized) {
 8006d92:	4c12      	ldr	r4, [pc, #72]	; (8006ddc <lv_init+0x4c>)
 8006d94:	7823      	ldrb	r3, [r4, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d11f      	bne.n	8006dda <lv_init+0x4a>
    lv_mem_init();
 8006d9a:	f005 fd2d 	bl	800c7f8 <lv_mem_init>
    lv_task_core_init();
 8006d9e:	f005 fdcb 	bl	800c938 <lv_task_core_init>
    lv_fs_init();
 8006da2:	f005 fabb 	bl	800c31c <lv_fs_init>
    lv_anim_core_init();
 8006da6:	f005 f953 	bl	800c050 <lv_anim_core_init>
    lv_group_init();
 8006daa:	f7ff ff2b 	bl	8006c04 <lv_group_init>
    lv_style_init();
 8006dae:	f001 f995 	bl	80080dc <lv_style_init>
    lv_refr_init();
 8006db2:	f000 ff5d 	bl	8007c70 <lv_refr_init>
    lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8006db6:	21b6      	movs	r1, #182	; 0xb6
 8006db8:	4809      	ldr	r0, [pc, #36]	; (8006de0 <lv_init+0x50>)
 8006dba:	0049      	lsls	r1, r1, #1
 8006dbc:	f005 fb8b 	bl	800c4d6 <lv_ll_init>
    lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8006dc0:	215c      	movs	r1, #92	; 0x5c
 8006dc2:	4808      	ldr	r0, [pc, #32]	; (8006de4 <lv_init+0x54>)
 8006dc4:	f005 fb87 	bl	800c4d6 <lv_ll_init>
    lv_indev_init();
 8006dc8:	f7ff ffb6 	bl	8006d38 <lv_indev_init>
    lv_img_decoder_init();
 8006dcc:	f004 fe5a 	bl	800ba84 <lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 8006dd0:	2001      	movs	r0, #1
 8006dd2:	f004 fb75 	bl	800b4c0 <lv_img_cache_set_size>
    lv_initialized = true;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	7023      	strb	r3, [r4, #0]
}
 8006dda:	bd10      	pop	{r4, pc}
 8006ddc:	20001500 	.word	0x20001500
 8006de0:	20005428 	.word	0x20005428
 8006de4:	20005418 	.word	0x20005418

08006de8 <lv_obj_set_click>:
    obj->click = (en == true ? 1 : 0);
 8006de8:	2201      	movs	r2, #1
 8006dea:	000b      	movs	r3, r1
 8006dec:	3030      	adds	r0, #48	; 0x30
 8006dee:	7801      	ldrb	r1, [r0, #0]
 8006df0:	4013      	ands	r3, r2
 8006df2:	4391      	bics	r1, r2
 8006df4:	4319      	orrs	r1, r3
 8006df6:	7001      	strb	r1, [r0, #0]
}
 8006df8:	4770      	bx	lr
	...

08006dfc <lv_event_send_func>:
{
 8006dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dfe:	b089      	sub	sp, #36	; 0x24
 8006e00:	9302      	str	r3, [sp, #8]
    event_temp_data.deleted = false;
 8006e02:	2300      	movs	r3, #0
    if(event_temp_data_head) {
 8006e04:	4e1f      	ldr	r6, [pc, #124]	; (8006e84 <lv_event_send_func+0x88>)
    event_temp_data.obj     = obj;
 8006e06:	ad05      	add	r5, sp, #20
    event_temp_data.deleted = false;
 8006e08:	712b      	strb	r3, [r5, #4]
    event_temp_data.prev    = NULL;
 8006e0a:	60ab      	str	r3, [r5, #8]
    if(event_temp_data_head) {
 8006e0c:	6833      	ldr	r3, [r6, #0]
{
 8006e0e:	9001      	str	r0, [sp, #4]
 8006e10:	000c      	movs	r4, r1
 8006e12:	9200      	str	r2, [sp, #0]
    event_temp_data.obj     = obj;
 8006e14:	9105      	str	r1, [sp, #20]
    if(event_temp_data_head) {
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d000      	beq.n	8006e1c <lv_event_send_func+0x20>
        event_temp_data.prev = event_temp_data_head;
 8006e1a:	60ab      	str	r3, [r5, #8]
    const void * event_act_data_save = event_act_data;
 8006e1c:	4f1a      	ldr	r7, [pc, #104]	; (8006e88 <lv_event_send_func+0x8c>)
    event_temp_data_head = &event_temp_data;
 8006e1e:	6035      	str	r5, [r6, #0]
    const void * event_act_data_save = event_act_data;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	9303      	str	r3, [sp, #12]
    event_act_data                   = data;
 8006e24:	9b02      	ldr	r3, [sp, #8]
 8006e26:	603b      	str	r3, [r7, #0]
    lv_indev_t * indev_act = lv_indev_get_act();
 8006e28:	f7ff ff8a 	bl	8006d40 <lv_indev_get_act>
    if(indev_act) {
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d004      	beq.n	8006e3a <lv_event_send_func+0x3e>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
 8006e30:	6883      	ldr	r3, [r0, #8]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d001      	beq.n	8006e3a <lv_event_send_func+0x3e>
 8006e36:	9900      	ldr	r1, [sp, #0]
 8006e38:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
 8006e3a:	9b01      	ldr	r3, [sp, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d002      	beq.n	8006e46 <lv_event_send_func+0x4a>
 8006e40:	9900      	ldr	r1, [sp, #0]
 8006e42:	0020      	movs	r0, r4
 8006e44:	4798      	blx	r3
        return LV_RES_INV;
 8006e46:	2000      	movs	r0, #0
    event_act_data = event_act_data_save;
 8006e48:	9b03      	ldr	r3, [sp, #12]
 8006e4a:	603b      	str	r3, [r7, #0]
    event_temp_data_head = event_temp_data_head->prev;
 8006e4c:	6833      	ldr	r3, [r6, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	6033      	str	r3, [r6, #0]
    if(event_temp_data.deleted) {
 8006e52:	792b      	ldrb	r3, [r5, #4]
 8006e54:	4283      	cmp	r3, r0
 8006e56:	d113      	bne.n	8006e80 <lv_event_send_func+0x84>
    return LV_RES_OK;
 8006e58:	3001      	adds	r0, #1
    if(obj) {
 8006e5a:	2c00      	cmp	r4, #0
 8006e5c:	d010      	beq.n	8006e80 <lv_event_send_func+0x84>
        if(obj->parent_event && obj->par) {
 8006e5e:	0023      	movs	r3, r4
 8006e60:	3330      	adds	r3, #48	; 0x30
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	2b7f      	cmp	r3, #127	; 0x7f
 8006e66:	d90b      	bls.n	8006e80 <lv_event_send_func+0x84>
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d008      	beq.n	8006e80 <lv_event_send_func+0x84>
            lv_res_t res = lv_event_send(obj->par, event, data);
 8006e6e:	9a02      	ldr	r2, [sp, #8]
 8006e70:	0018      	movs	r0, r3
 8006e72:	9900      	ldr	r1, [sp, #0]
 8006e74:	f000 f80a 	bl	8006e8c <lv_event_send>
            if(res != LV_RES_OK) {
 8006e78:	3801      	subs	r0, #1
 8006e7a:	4242      	negs	r2, r0
 8006e7c:	4142      	adcs	r2, r0
        return LV_RES_INV;
 8006e7e:	b2d0      	uxtb	r0, r2
}
 8006e80:	b009      	add	sp, #36	; 0x24
 8006e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e84:	200014fc 	.word	0x200014fc
 8006e88:	200014f8 	.word	0x200014f8

08006e8c <lv_event_send>:
{
 8006e8c:	b510      	push	{r4, lr}
 8006e8e:	0013      	movs	r3, r2
 8006e90:	0004      	movs	r4, r0
    if(obj == NULL) return LV_RES_OK;
 8006e92:	2001      	movs	r0, #1
 8006e94:	2c00      	cmp	r4, #0
 8006e96:	d004      	beq.n	8006ea2 <lv_event_send+0x16>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 8006e98:	000a      	movs	r2, r1
 8006e9a:	69a0      	ldr	r0, [r4, #24]
 8006e9c:	0021      	movs	r1, r4
 8006e9e:	f7ff ffad 	bl	8006dfc <lv_event_send_func>
}
 8006ea2:	bd10      	pop	{r4, pc}

08006ea4 <lv_obj_set_signal_cb>:
    obj->signal_cb = signal_cb;
 8006ea4:	61c1      	str	r1, [r0, #28]
}
 8006ea6:	4770      	bx	lr

08006ea8 <lv_obj_set_design_cb>:
    obj->design_cb = design_cb;
 8006ea8:	6201      	str	r1, [r0, #32]
}
 8006eaa:	4770      	bx	lr

08006eac <lv_obj_allocate_ext_attr>:
{
 8006eac:	b510      	push	{r4, lr}
 8006eae:	0004      	movs	r4, r0
    obj->ext_attr = lv_mem_realloc(obj->ext_attr, ext_size);
 8006eb0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006eb2:	f005 fd13 	bl	800c8dc <lv_mem_realloc>
 8006eb6:	6260      	str	r0, [r4, #36]	; 0x24
}
 8006eb8:	bd10      	pop	{r4, pc}
	...

08006ebc <lv_obj_get_disp>:
{
 8006ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(obj->par == NULL)
 8006ebe:	6803      	ldr	r3, [r0, #0]
{
 8006ec0:	0005      	movs	r5, r0
    if(obj->par == NULL)
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d108      	bne.n	8006ed8 <lv_obj_get_disp+0x1c>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 8006ec6:	4e10      	ldr	r6, [pc, #64]	; (8006f08 <lv_obj_get_disp+0x4c>)
 8006ec8:	0030      	movs	r0, r6
 8006eca:	f005 fb4e 	bl	800c56a <lv_ll_get_head>
 8006ece:	1e04      	subs	r4, r0, #0
 8006ed0:	d106      	bne.n	8006ee0 <lv_obj_get_disp+0x24>
}
 8006ed2:	0020      	movs	r0, r4
 8006ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while(par != NULL);
 8006ed6:	001d      	movs	r5, r3
    return obj->par;
 8006ed8:	682b      	ldr	r3, [r5, #0]
    } while(par != NULL);
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1fb      	bne.n	8006ed6 <lv_obj_get_disp+0x1a>
 8006ede:	e7f2      	b.n	8006ec6 <lv_obj_get_disp+0xa>
        LV_LL_READ(d->scr_ll, s)
 8006ee0:	0027      	movs	r7, r4
 8006ee2:	372c      	adds	r7, #44	; 0x2c
 8006ee4:	0038      	movs	r0, r7
 8006ee6:	f005 fb40 	bl	800c56a <lv_ll_get_head>
 8006eea:	2800      	cmp	r0, #0
 8006eec:	d104      	bne.n	8006ef8 <lv_obj_get_disp+0x3c>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 8006eee:	0021      	movs	r1, r4
 8006ef0:	0030      	movs	r0, r6
 8006ef2:	f005 fb42 	bl	800c57a <lv_ll_get_next>
 8006ef6:	e7ea      	b.n	8006ece <lv_obj_get_disp+0x12>
            if(s == scr) return d;
 8006ef8:	4285      	cmp	r5, r0
 8006efa:	d0ea      	beq.n	8006ed2 <lv_obj_get_disp+0x16>
        LV_LL_READ(d->scr_ll, s)
 8006efc:	0001      	movs	r1, r0
 8006efe:	0038      	movs	r0, r7
 8006f00:	f005 fb3b 	bl	800c57a <lv_ll_get_next>
 8006f04:	e7f1      	b.n	8006eea <lv_obj_get_disp+0x2e>
 8006f06:	46c0      	nop			; (mov r8, r8)
 8006f08:	20005428 	.word	0x20005428

08006f0c <lv_obj_invalidate>:
    return obj->hidden == 0 ? false : true;
 8006f0c:	0003      	movs	r3, r0
 8006f0e:	3330      	adds	r3, #48	; 0x30
 8006f10:	781b      	ldrb	r3, [r3, #0]
{
 8006f12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f14:	0006      	movs	r6, r0
 8006f16:	0004      	movs	r4, r0
    if(lv_obj_get_hidden(obj)) return;
 8006f18:	06db      	lsls	r3, r3, #27
 8006f1a:	d501      	bpl.n	8006f20 <lv_obj_invalidate+0x14>
}
 8006f1c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    } while(par != NULL);
 8006f1e:	001c      	movs	r4, r3
    return obj->par;
 8006f20:	6823      	ldr	r3, [r4, #0]
    } while(par != NULL);
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1fb      	bne.n	8006f1e <lv_obj_invalidate+0x12>
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 8006f26:	0020      	movs	r0, r4
 8006f28:	f7ff ffc8 	bl	8006ebc <lv_obj_get_disp>
 8006f2c:	0005      	movs	r5, r0
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 8006f2e:	f7ff fdca 	bl	8006ac6 <lv_disp_get_scr_act>
 8006f32:	4284      	cmp	r4, r0
 8006f34:	d11f      	bne.n	8006f76 <lv_obj_invalidate+0x6a>
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    memcpy(dest, src, sizeof(lv_area_t));
 8006f36:	0031      	movs	r1, r6
 8006f38:	2208      	movs	r2, #8
 8006f3a:	3110      	adds	r1, #16
 8006f3c:	4668      	mov	r0, sp
        lv_coord_t ext_size = obj->ext_draw_pad;
 8006f3e:	2334      	movs	r3, #52	; 0x34
 8006f40:	5ef7      	ldrsh	r7, [r6, r3]
    return obj->par;
 8006f42:	6834      	ldr	r4, [r6, #0]
 8006f44:	f007 f922 	bl	800e18c <memcpy>
        area_trunc.x1 -= ext_size;
 8006f48:	466a      	mov	r2, sp
 8006f4a:	4669      	mov	r1, sp
    return obj->hidden == 0 ? false : true;
 8006f4c:	2610      	movs	r6, #16
        area_trunc.x1 -= ext_size;
 8006f4e:	8812      	ldrh	r2, [r2, #0]
 8006f50:	b2bb      	uxth	r3, r7
 8006f52:	1ad2      	subs	r2, r2, r3
 8006f54:	800a      	strh	r2, [r1, #0]
        area_trunc.y1 -= ext_size;
 8006f56:	884a      	ldrh	r2, [r1, #2]
 8006f58:	1ad2      	subs	r2, r2, r3
 8006f5a:	804a      	strh	r2, [r1, #2]
        area_trunc.x2 += ext_size;
 8006f5c:	888a      	ldrh	r2, [r1, #4]
 8006f5e:	189a      	adds	r2, r3, r2
 8006f60:	808a      	strh	r2, [r1, #4]
        area_trunc.y2 += ext_size;
 8006f62:	88ca      	ldrh	r2, [r1, #6]
 8006f64:	189b      	adds	r3, r3, r2
 8006f66:	80cb      	strh	r3, [r1, #6]
        while(par != NULL) {
 8006f68:	2c00      	cmp	r4, #0
 8006f6a:	d10f      	bne.n	8006f8c <lv_obj_invalidate+0x80>
        if(union_ok) lv_inv_area(disp, &area_trunc);
 8006f6c:	4669      	mov	r1, sp
 8006f6e:	0028      	movs	r0, r5
 8006f70:	f000 fe7f 	bl	8007c72 <lv_inv_area>
 8006f74:	e7d2      	b.n	8006f1c <lv_obj_invalidate+0x10>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 8006f76:	0028      	movs	r0, r5
 8006f78:	f7ff fdaf 	bl	8006ada <lv_disp_get_layer_top>
 8006f7c:	4284      	cmp	r4, r0
 8006f7e:	d0da      	beq.n	8006f36 <lv_obj_invalidate+0x2a>
       obj_scr == lv_disp_get_layer_sys(disp)) {
 8006f80:	0028      	movs	r0, r5
 8006f82:	f7ff fdb4 	bl	8006aee <lv_disp_get_layer_sys>
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 8006f86:	4284      	cmp	r4, r0
 8006f88:	d1c8      	bne.n	8006f1c <lv_obj_invalidate+0x10>
 8006f8a:	e7d4      	b.n	8006f36 <lv_obj_invalidate+0x2a>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 8006f8c:	0022      	movs	r2, r4
 8006f8e:	4669      	mov	r1, sp
 8006f90:	3210      	adds	r2, #16
 8006f92:	4668      	mov	r0, sp
 8006f94:	f005 f8f3 	bl	800c17e <lv_area_intersect>
            if(union_ok == false) break;       /*If no common parts with parent break;*/
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	d0bf      	beq.n	8006f1c <lv_obj_invalidate+0x10>
    return obj->hidden == 0 ? false : true;
 8006f9c:	0023      	movs	r3, r4
 8006f9e:	3330      	adds	r3, #48	; 0x30
 8006fa0:	781b      	ldrb	r3, [r3, #0]
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
 8006fa2:	4233      	tst	r3, r6
 8006fa4:	d1ba      	bne.n	8006f1c <lv_obj_invalidate+0x10>
    return obj->par;
 8006fa6:	6824      	ldr	r4, [r4, #0]
 8006fa8:	e7de      	b.n	8006f68 <lv_obj_invalidate+0x5c>

08006faa <lv_obj_move_foreground>:
{
 8006faa:	b570      	push	{r4, r5, r6, lr}
    return obj->par;
 8006fac:	6804      	ldr	r4, [r0, #0]
{
 8006fae:	0005      	movs	r5, r0
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 8006fb0:	1d26      	adds	r6, r4, #4
 8006fb2:	0030      	movs	r0, r6
 8006fb4:	f005 fad9 	bl	800c56a <lv_ll_get_head>
 8006fb8:	4285      	cmp	r5, r0
 8006fba:	d010      	beq.n	8006fde <lv_obj_move_foreground+0x34>
    lv_obj_invalidate(parent);
 8006fbc:	0020      	movs	r0, r4
 8006fbe:	f7ff ffa5 	bl	8006f0c <lv_obj_invalidate>
    lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	002a      	movs	r2, r5
 8006fc6:	0031      	movs	r1, r6
 8006fc8:	0030      	movs	r0, r6
 8006fca:	f005 fb5b 	bl	800c684 <lv_ll_chg_list>
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 8006fce:	002a      	movs	r2, r5
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	0020      	movs	r0, r4
 8006fd4:	69e3      	ldr	r3, [r4, #28]
 8006fd6:	4798      	blx	r3
    lv_obj_invalidate(parent);
 8006fd8:	0020      	movs	r0, r4
 8006fda:	f7ff ff97 	bl	8006f0c <lv_obj_invalidate>
}
 8006fde:	bd70      	pop	{r4, r5, r6, pc}

08006fe0 <lv_obj_set_pos>:
{
 8006fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_obj_t * par = obj->par;
 8006fe2:	6807      	ldr	r7, [r0, #0]
    diff.x = x - obj->coords.x1;
 8006fe4:	8a06      	ldrh	r6, [r0, #16]
 8006fe6:	8a3b      	ldrh	r3, [r7, #16]
{
 8006fe8:	b085      	sub	sp, #20
    diff.x = x - obj->coords.x1;
 8006fea:	1b9e      	subs	r6, r3, r6
 8006fec:	1876      	adds	r6, r6, r1
 8006fee:	b2b6      	uxth	r6, r6
 8006ff0:	b233      	sxth	r3, r6
 8006ff2:	9300      	str	r3, [sp, #0]
    diff.y = y - obj->coords.y1;
 8006ff4:	8a7b      	ldrh	r3, [r7, #18]
 8006ff6:	8a45      	ldrh	r5, [r0, #18]
{
 8006ff8:	0004      	movs	r4, r0
    diff.y = y - obj->coords.y1;
 8006ffa:	1b5d      	subs	r5, r3, r5
 8006ffc:	18ad      	adds	r5, r5, r2
 8006ffe:	b2ad      	uxth	r5, r5
 8007000:	b22b      	sxth	r3, r5
 8007002:	9301      	str	r3, [sp, #4]
    if(diff.x == 0 && diff.y == 0) return;
 8007004:	9b00      	ldr	r3, [sp, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d102      	bne.n	8007010 <lv_obj_set_pos+0x30>
 800700a:	9b01      	ldr	r3, [sp, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d026      	beq.n	800705e <lv_obj_set_pos+0x7e>
    lv_obj_invalidate(obj);
 8007010:	0020      	movs	r0, r4
 8007012:	f7ff ff7b 	bl	8006f0c <lv_obj_invalidate>
 8007016:	0021      	movs	r1, r4
 8007018:	2208      	movs	r2, #8
 800701a:	3110      	adds	r1, #16
 800701c:	a802      	add	r0, sp, #8
 800701e:	f007 f8b5 	bl	800e18c <memcpy>
    obj->coords.x1 += diff.x;
 8007022:	8a23      	ldrh	r3, [r4, #16]
    obj->coords.x2 += diff.x;
 8007024:	8aa1      	ldrh	r1, [r4, #20]
    obj->coords.x1 += diff.x;
 8007026:	18f3      	adds	r3, r6, r3
    obj->coords.y2 += diff.y;
 8007028:	8ae2      	ldrh	r2, [r4, #22]
    obj->coords.x1 += diff.x;
 800702a:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
 800702c:	8a63      	ldrh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
 800702e:	1876      	adds	r6, r6, r1
    obj->coords.y1 += diff.y;
 8007030:	18eb      	adds	r3, r5, r3
    obj->coords.y2 += diff.y;
 8007032:	18ad      	adds	r5, r5, r2
    obj->coords.y1 += diff.y;
 8007034:	8263      	strh	r3, [r4, #18]
    refresh_children_position(obj, diff.x, diff.y);
 8007036:	9a01      	ldr	r2, [sp, #4]
 8007038:	9900      	ldr	r1, [sp, #0]
 800703a:	0020      	movs	r0, r4
    obj->coords.x2 += diff.x;
 800703c:	82a6      	strh	r6, [r4, #20]
    obj->coords.y2 += diff.y;
 800703e:	82e5      	strh	r5, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
 8007040:	f7ff fe84 	bl	8006d4c <refresh_children_position>
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 8007044:	aa02      	add	r2, sp, #8
 8007046:	2102      	movs	r1, #2
 8007048:	69e3      	ldr	r3, [r4, #28]
 800704a:	0020      	movs	r0, r4
 800704c:	4798      	blx	r3
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	0022      	movs	r2, r4
 8007052:	2101      	movs	r1, #1
 8007054:	0038      	movs	r0, r7
 8007056:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8007058:	0020      	movs	r0, r4
 800705a:	f7ff ff57 	bl	8006f0c <lv_obj_invalidate>
}
 800705e:	b005      	add	sp, #20
 8007060:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007062 <lv_obj_set_x>:
{
 8007062:	b510      	push	{r4, lr}
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8007064:	6803      	ldr	r3, [r0, #0]
 8007066:	8a42      	ldrh	r2, [r0, #18]
 8007068:	8a5b      	ldrh	r3, [r3, #18]
 800706a:	1ad2      	subs	r2, r2, r3
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
 800706c:	b212      	sxth	r2, r2
 800706e:	f7ff ffb7 	bl	8006fe0 <lv_obj_set_pos>
}
 8007072:	bd10      	pop	{r4, pc}

08007074 <lv_obj_set_y>:
{
 8007074:	b510      	push	{r4, lr}
 8007076:	000a      	movs	r2, r1
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8007078:	6801      	ldr	r1, [r0, #0]
 800707a:	8a03      	ldrh	r3, [r0, #16]
 800707c:	8a09      	ldrh	r1, [r1, #16]
 800707e:	1a59      	subs	r1, r3, r1
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 8007080:	b209      	sxth	r1, r1
 8007082:	f7ff ffad 	bl	8006fe0 <lv_obj_set_pos>
}
 8007086:	bd10      	pop	{r4, pc}

08007088 <lv_obj_align>:
{
 8007088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800708a:	0005      	movs	r5, r0
 800708c:	b085      	sub	sp, #20
 800708e:	9302      	str	r3, [sp, #8]
 8007090:	ab0a      	add	r3, sp, #40	; 0x28
 8007092:	0016      	movs	r6, r2
 8007094:	2200      	movs	r2, #0
 8007096:	5e9b      	ldrsh	r3, [r3, r2]
    return obj->par;
 8007098:	6800      	ldr	r0, [r0, #0]
{
 800709a:	9303      	str	r3, [sp, #12]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800709c:	8a47      	ldrh	r7, [r0, #18]
{
 800709e:	000c      	movs	r4, r1
    rel_x             = obj->coords.x1 - parent->coords.x1;
 80070a0:	8a2a      	ldrh	r2, [r5, #16]
 80070a2:	8a01      	ldrh	r1, [r0, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 80070a4:	8a6b      	ldrh	r3, [r5, #18]
 80070a6:	9701      	str	r7, [sp, #4]
    if(base == NULL) {
 80070a8:	2c00      	cmp	r4, #0
 80070aa:	d100      	bne.n	80070ae <lv_obj_align+0x26>
 80070ac:	0004      	movs	r4, r0
    switch(align) {
 80070ae:	2e14      	cmp	r6, #20
 80070b0:	d817      	bhi.n	80070e2 <lv_obj_align+0x5a>
 80070b2:	0030      	movs	r0, r6
 80070b4:	f7f9 f84a 	bl	800014c <__gnu_thumb1_case_uhi>
 80070b8:	011e001b 	.word	0x011e001b
 80070bc:	0050003d 	.word	0x0050003d
 80070c0:	005e0057 	.word	0x005e0057
 80070c4:	007b0074 	.word	0x007b0074
 80070c8:	00c600ae 	.word	0x00c600ae
 80070cc:	00df00ca 	.word	0x00df00ca
 80070d0:	00e900e6 	.word	0x00e900e6
 80070d4:	010600ff 	.word	0x010600ff
 80070d8:	010e010a 	.word	0x010e010a
 80070dc:	01180112 	.word	0x01180112
 80070e0:	011b      	.short	0x011b
    rel_x             = obj->coords.x1 - parent->coords.x1;
 80070e2:	1a52      	subs	r2, r2, r1
 80070e4:	b217      	sxth	r7, r2
    rel_y             = obj->coords.y1 - parent->coords.y1;
 80070e6:	9a01      	ldr	r2, [sp, #4]
 80070e8:	1a9a      	subs	r2, r3, r2
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 80070ea:	b212      	sxth	r2, r2
            break;
 80070ec:	e071      	b.n	80071d2 <lv_obj_align+0x14a>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 80070ee:	8aa0      	ldrh	r0, [r4, #20]
 80070f0:	8a27      	ldrh	r7, [r4, #16]
 80070f2:	3001      	adds	r0, #1
 80070f4:	1bc0      	subs	r0, r0, r7
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80070f6:	b200      	sxth	r0, r0
 80070f8:	0fc7      	lsrs	r7, r0, #31
 80070fa:	1838      	adds	r0, r7, r0
 80070fc:	8aaf      	ldrh	r7, [r5, #20]
 80070fe:	1040      	asrs	r0, r0, #1
 8007100:	3701      	adds	r7, #1
 8007102:	1aba      	subs	r2, r7, r2
 8007104:	b212      	sxth	r2, r2
 8007106:	0fd7      	lsrs	r7, r2, #31
 8007108:	18ba      	adds	r2, r7, r2
 800710a:	1052      	asrs	r2, r2, #1
 800710c:	1a82      	subs	r2, r0, r2
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 800710e:	8ae0      	ldrh	r0, [r4, #22]
            new_x = -lv_obj_get_width(obj);
 8007110:	b217      	sxth	r7, r2
 8007112:	8a62      	ldrh	r2, [r4, #18]
 8007114:	3001      	adds	r0, #1
 8007116:	1a80      	subs	r0, r0, r2
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8007118:	b200      	sxth	r0, r0
 800711a:	0fc2      	lsrs	r2, r0, #31
 800711c:	1810      	adds	r0, r2, r0
 800711e:	8aea      	ldrh	r2, [r5, #22]
 8007120:	1040      	asrs	r0, r0, #1
 8007122:	3201      	adds	r2, #1
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	b21b      	sxth	r3, r3
 8007128:	0fda      	lsrs	r2, r3, #31
 800712a:	18d2      	adds	r2, r2, r3
 800712c:	1052      	asrs	r2, r2, #1
 800712e:	1a82      	subs	r2, r0, r2
 8007130:	e7db      	b.n	80070ea <lv_obj_align+0x62>
    return area_p->x2 - area_p->x1 + 1;
 8007132:	8aa3      	ldrh	r3, [r4, #20]
 8007134:	8a20      	ldrh	r0, [r4, #16]
 8007136:	3301      	adds	r3, #1
 8007138:	1a1b      	subs	r3, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800713a:	b21b      	sxth	r3, r3
 800713c:	0fd8      	lsrs	r0, r3, #31
 800713e:	18c3      	adds	r3, r0, r3
 8007140:	8aa8      	ldrh	r0, [r5, #20]
 8007142:	105b      	asrs	r3, r3, #1
 8007144:	3001      	adds	r0, #1
 8007146:	1a82      	subs	r2, r0, r2
 8007148:	b212      	sxth	r2, r2
 800714a:	0fd0      	lsrs	r0, r2, #31
 800714c:	1882      	adds	r2, r0, r2
 800714e:	1052      	asrs	r2, r2, #1
 8007150:	1a9a      	subs	r2, r3, r2
            new_x = -lv_obj_get_width(obj);
 8007152:	b217      	sxth	r7, r2
            new_y = 0;
 8007154:	2200      	movs	r2, #0
            break;
 8007156:	e03c      	b.n	80071d2 <lv_obj_align+0x14a>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8007158:	8aab      	ldrh	r3, [r5, #20]
 800715a:	1a9b      	subs	r3, r3, r2
 800715c:	8aa2      	ldrh	r2, [r4, #20]
 800715e:	1ad2      	subs	r2, r2, r3
 8007160:	8a23      	ldrh	r3, [r4, #16]
 8007162:	1ad2      	subs	r2, r2, r3
 8007164:	e7f5      	b.n	8007152 <lv_obj_align+0xca>
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8007166:	8aea      	ldrh	r2, [r5, #22]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	8ae2      	ldrh	r2, [r4, #22]
 800716c:	1ad2      	subs	r2, r2, r3
    return area_p->y2 - area_p->y1 + 1;
 800716e:	8a60      	ldrh	r0, [r4, #18]
 8007170:	1a12      	subs	r2, r2, r0
 8007172:	e02c      	b.n	80071ce <lv_obj_align+0x146>
    return area_p->x2 - area_p->x1 + 1;
 8007174:	8aa0      	ldrh	r0, [r4, #20]
 8007176:	8a27      	ldrh	r7, [r4, #16]
 8007178:	3001      	adds	r0, #1
 800717a:	1bc0      	subs	r0, r0, r7
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800717c:	b200      	sxth	r0, r0
 800717e:	0fc7      	lsrs	r7, r0, #31
 8007180:	1838      	adds	r0, r7, r0
 8007182:	8aaf      	ldrh	r7, [r5, #20]
 8007184:	1040      	asrs	r0, r0, #1
 8007186:	3701      	adds	r7, #1
 8007188:	1aba      	subs	r2, r7, r2
 800718a:	b212      	sxth	r2, r2
 800718c:	0fd7      	lsrs	r7, r2, #31
 800718e:	18ba      	adds	r2, r7, r2
 8007190:	1052      	asrs	r2, r2, #1
 8007192:	1a82      	subs	r2, r0, r2
 8007194:	b217      	sxth	r7, r2
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8007196:	8aea      	ldrh	r2, [r5, #22]
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	8ae2      	ldrh	r2, [r4, #22]
 800719c:	1ad2      	subs	r2, r2, r3
 800719e:	e087      	b.n	80072b0 <lv_obj_align+0x228>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80071a0:	8aa8      	ldrh	r0, [r5, #20]
 80071a2:	1a80      	subs	r0, r0, r2
 80071a4:	8aa2      	ldrh	r2, [r4, #20]
 80071a6:	1a12      	subs	r2, r2, r0
 80071a8:	8a20      	ldrh	r0, [r4, #16]
 80071aa:	1a12      	subs	r2, r2, r0
 80071ac:	e7f2      	b.n	8007194 <lv_obj_align+0x10c>
    return area_p->y2 - area_p->y1 + 1;
 80071ae:	8ae0      	ldrh	r0, [r4, #22]
 80071b0:	8a62      	ldrh	r2, [r4, #18]
 80071b2:	3001      	adds	r0, #1
 80071b4:	1a80      	subs	r0, r0, r2
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80071b6:	b200      	sxth	r0, r0
 80071b8:	0fc2      	lsrs	r2, r0, #31
 80071ba:	1810      	adds	r0, r2, r0
 80071bc:	8aea      	ldrh	r2, [r5, #22]
 80071be:	1040      	asrs	r0, r0, #1
 80071c0:	3201      	adds	r2, #1
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	b21b      	sxth	r3, r3
 80071c6:	0fda      	lsrs	r2, r3, #31
 80071c8:	18d3      	adds	r3, r2, r3
 80071ca:	105b      	asrs	r3, r3, #1
 80071cc:	1ac2      	subs	r2, r0, r3
            new_x = 0;
 80071ce:	2700      	movs	r7, #0
 80071d0:	b212      	sxth	r2, r2
    new_x -= par_abs_x;
 80071d2:	9b02      	ldr	r3, [sp, #8]
    new_y -= par_abs_y;
 80071d4:	9801      	ldr	r0, [sp, #4]
    new_x -= par_abs_x;
 80071d6:	1a59      	subs	r1, r3, r1
 80071d8:	8a23      	ldrh	r3, [r4, #16]
 80071da:	1859      	adds	r1, r3, r1
    new_y -= par_abs_y;
 80071dc:	9b03      	ldr	r3, [sp, #12]
    new_x -= par_abs_x;
 80071de:	19c9      	adds	r1, r1, r7
    new_y -= par_abs_y;
 80071e0:	8a67      	ldrh	r7, [r4, #18]
 80071e2:	1a18      	subs	r0, r3, r0
 80071e4:	183f      	adds	r7, r7, r0
 80071e6:	18ba      	adds	r2, r7, r2
    lv_obj_set_pos(obj, new_x, new_y);
 80071e8:	0028      	movs	r0, r5
 80071ea:	b212      	sxth	r2, r2
 80071ec:	b209      	sxth	r1, r1
 80071ee:	f7ff fef7 	bl	8006fe0 <lv_obj_set_pos>
    obj->realign.align       = align;
 80071f2:	002b      	movs	r3, r5
 80071f4:	3340      	adds	r3, #64	; 0x40
 80071f6:	701e      	strb	r6, [r3, #0]
    obj->realign.xofs        = x_mod;
 80071f8:	466b      	mov	r3, sp
 80071fa:	891b      	ldrh	r3, [r3, #8]
    obj->realign.origo_align = 0;
 80071fc:	2202      	movs	r2, #2
    obj->realign.xofs        = x_mod;
 80071fe:	87ab      	strh	r3, [r5, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 8007200:	466b      	mov	r3, sp
 8007202:	899b      	ldrh	r3, [r3, #12]
    obj->realign.base        = base;
 8007204:	63ac      	str	r4, [r5, #56]	; 0x38
    obj->realign.yofs        = y_mod;
 8007206:	87eb      	strh	r3, [r5, #62]	; 0x3e
    obj->realign.origo_align = 0;
 8007208:	3541      	adds	r5, #65	; 0x41
 800720a:	782b      	ldrb	r3, [r5, #0]
 800720c:	4393      	bics	r3, r2
 800720e:	702b      	strb	r3, [r5, #0]
}
 8007210:	b005      	add	sp, #20
 8007212:	bdf0      	pop	{r4, r5, r6, r7, pc}
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8007214:	8aa8      	ldrh	r0, [r5, #20]
 8007216:	1a80      	subs	r0, r0, r2
 8007218:	8aa2      	ldrh	r2, [r4, #20]
 800721a:	1a12      	subs	r2, r2, r0
    return area_p->x2 - area_p->x1 + 1;
 800721c:	8a20      	ldrh	r0, [r4, #16]
 800721e:	1a12      	subs	r2, r2, r0
 8007220:	b217      	sxth	r7, r2
    return area_p->y2 - area_p->y1 + 1;
 8007222:	8ae2      	ldrh	r2, [r4, #22]
 8007224:	8a60      	ldrh	r0, [r4, #18]
 8007226:	3201      	adds	r2, #1
 8007228:	1a12      	subs	r2, r2, r0
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800722a:	b212      	sxth	r2, r2
 800722c:	0fd0      	lsrs	r0, r2, #31
 800722e:	1882      	adds	r2, r0, r2
 8007230:	8ae8      	ldrh	r0, [r5, #22]
 8007232:	1052      	asrs	r2, r2, #1
 8007234:	3001      	adds	r0, #1
 8007236:	1ac3      	subs	r3, r0, r3
 8007238:	b21b      	sxth	r3, r3
 800723a:	0fd8      	lsrs	r0, r3, #31
 800723c:	18c3      	adds	r3, r0, r3
 800723e:	105b      	asrs	r3, r3, #1
 8007240:	1ad2      	subs	r2, r2, r3
 8007242:	e752      	b.n	80070ea <lv_obj_align+0x62>
 8007244:	8aea      	ldrh	r2, [r5, #22]
 8007246:	1ad2      	subs	r2, r2, r3
            new_y = -lv_obj_get_height(obj);
 8007248:	43d2      	mvns	r2, r2
 800724a:	e7c0      	b.n	80071ce <lv_obj_align+0x146>
    return area_p->x2 - area_p->x1 + 1;
 800724c:	8aa0      	ldrh	r0, [r4, #20]
 800724e:	8a27      	ldrh	r7, [r4, #16]
 8007250:	3001      	adds	r0, #1
 8007252:	1bc0      	subs	r0, r0, r7
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8007254:	b200      	sxth	r0, r0
 8007256:	0fc7      	lsrs	r7, r0, #31
 8007258:	1838      	adds	r0, r7, r0
 800725a:	8aaf      	ldrh	r7, [r5, #20]
 800725c:	1040      	asrs	r0, r0, #1
 800725e:	3701      	adds	r7, #1
 8007260:	1aba      	subs	r2, r7, r2
 8007262:	b212      	sxth	r2, r2
 8007264:	0fd7      	lsrs	r7, r2, #31
 8007266:	18ba      	adds	r2, r7, r2
 8007268:	1052      	asrs	r2, r2, #1
 800726a:	1a82      	subs	r2, r0, r2
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800726c:	b217      	sxth	r7, r2
    return area_p->y2 - area_p->y1 + 1;
 800726e:	8aea      	ldrh	r2, [r5, #22]
 8007270:	1ad2      	subs	r2, r2, r3
            new_y = -lv_obj_get_height(obj);
 8007272:	43d2      	mvns	r2, r2
 8007274:	e739      	b.n	80070ea <lv_obj_align+0x62>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8007276:	8aa8      	ldrh	r0, [r5, #20]
 8007278:	1a80      	subs	r0, r0, r2
 800727a:	8aa2      	ldrh	r2, [r4, #20]
 800727c:	1a12      	subs	r2, r2, r0
 800727e:	8a20      	ldrh	r0, [r4, #16]
 8007280:	1a12      	subs	r2, r2, r0
 8007282:	e7f3      	b.n	800726c <lv_obj_align+0x1e4>
 8007284:	8ae2      	ldrh	r2, [r4, #22]
 8007286:	3201      	adds	r2, #1
 8007288:	e771      	b.n	800716e <lv_obj_align+0xe6>
    return area_p->x2 - area_p->x1 + 1;
 800728a:	8aa3      	ldrh	r3, [r4, #20]
 800728c:	8a20      	ldrh	r0, [r4, #16]
 800728e:	3301      	adds	r3, #1
 8007290:	1a1b      	subs	r3, r3, r0
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8007292:	b21b      	sxth	r3, r3
 8007294:	0fd8      	lsrs	r0, r3, #31
 8007296:	18c3      	adds	r3, r0, r3
 8007298:	8aa8      	ldrh	r0, [r5, #20]
 800729a:	105b      	asrs	r3, r3, #1
 800729c:	3001      	adds	r0, #1
 800729e:	1a82      	subs	r2, r0, r2
 80072a0:	b212      	sxth	r2, r2
 80072a2:	0fd0      	lsrs	r0, r2, #31
 80072a4:	1882      	adds	r2, r0, r2
 80072a6:	1052      	asrs	r2, r2, #1
 80072a8:	1a9a      	subs	r2, r3, r2
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80072aa:	b217      	sxth	r7, r2
    return area_p->y2 - area_p->y1 + 1;
 80072ac:	8ae2      	ldrh	r2, [r4, #22]
 80072ae:	3201      	adds	r2, #1
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 80072b0:	8a60      	ldrh	r0, [r4, #18]
 80072b2:	1a12      	subs	r2, r2, r0
 80072b4:	e719      	b.n	80070ea <lv_obj_align+0x62>
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80072b6:	8aab      	ldrh	r3, [r5, #20]
 80072b8:	1a9b      	subs	r3, r3, r2
 80072ba:	8aa2      	ldrh	r2, [r4, #20]
 80072bc:	1ad2      	subs	r2, r2, r3
 80072be:	8a23      	ldrh	r3, [r4, #16]
 80072c0:	1ad2      	subs	r2, r2, r3
 80072c2:	e7f2      	b.n	80072aa <lv_obj_align+0x222>
    return area_p->x2 - area_p->x1 + 1;
 80072c4:	8aab      	ldrh	r3, [r5, #20]
 80072c6:	1a9a      	subs	r2, r3, r2
            new_x = -lv_obj_get_width(obj);
 80072c8:	43d2      	mvns	r2, r2
 80072ca:	e742      	b.n	8007152 <lv_obj_align+0xca>
 80072cc:	8aa8      	ldrh	r0, [r5, #20]
 80072ce:	1a82      	subs	r2, r0, r2
            new_x = -lv_obj_get_width(obj);
 80072d0:	43d2      	mvns	r2, r2
 80072d2:	e71c      	b.n	800710e <lv_obj_align+0x86>
 80072d4:	8aa8      	ldrh	r0, [r5, #20]
 80072d6:	1a82      	subs	r2, r0, r2
            new_x = -lv_obj_get_width(obj);
 80072d8:	43d2      	mvns	r2, r2
 80072da:	e75b      	b.n	8007194 <lv_obj_align+0x10c>
 80072dc:	8aa3      	ldrh	r3, [r4, #20]
 80072de:	8a22      	ldrh	r2, [r4, #16]
 80072e0:	3301      	adds	r3, #1
 80072e2:	1a9b      	subs	r3, r3, r2
 80072e4:	b21f      	sxth	r7, r3
 80072e6:	e735      	b.n	8007154 <lv_obj_align+0xcc>
 80072e8:	8aa2      	ldrh	r2, [r4, #20]
 80072ea:	3201      	adds	r2, #1
 80072ec:	e796      	b.n	800721c <lv_obj_align+0x194>
 80072ee:	8aa2      	ldrh	r2, [r4, #20]
 80072f0:	3201      	adds	r2, #1
 80072f2:	e759      	b.n	80071a8 <lv_obj_align+0x120>
            new_y = 0;
 80072f4:	2200      	movs	r2, #0
            new_x = 0;
 80072f6:	0017      	movs	r7, r2
 80072f8:	e76b      	b.n	80071d2 <lv_obj_align+0x14a>

080072fa <lv_obj_align_origo>:
{
 80072fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072fc:	0005      	movs	r5, r0
 80072fe:	b087      	sub	sp, #28
 8007300:	9304      	str	r3, [sp, #16]
 8007302:	ab0c      	add	r3, sp, #48	; 0x30
 8007304:	0016      	movs	r6, r2
 8007306:	2200      	movs	r2, #0
 8007308:	5e9b      	ldrsh	r3, [r3, r2]
    return obj->par;
 800730a:	6807      	ldr	r7, [r0, #0]
{
 800730c:	9305      	str	r3, [sp, #20]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800730e:	8a3b      	ldrh	r3, [r7, #16]
 8007310:	8a00      	ldrh	r0, [r0, #16]
 8007312:	9301      	str	r3, [sp, #4]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8007314:	8a6b      	ldrh	r3, [r5, #18]
{
 8007316:	000c      	movs	r4, r1
 8007318:	8aa9      	ldrh	r1, [r5, #20]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800731a:	9303      	str	r3, [sp, #12]
 800731c:	3101      	adds	r1, #1
 800731e:	8a7b      	ldrh	r3, [r7, #18]
 8007320:	1a09      	subs	r1, r1, r0
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 8007322:	b209      	sxth	r1, r1
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8007324:	9302      	str	r3, [sp, #8]
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 8007326:	0fcb      	lsrs	r3, r1, #31
 8007328:	1859      	adds	r1, r3, r1
    return area_p->y2 - area_p->y1 + 1;
 800732a:	8aeb      	ldrh	r3, [r5, #22]
 800732c:	9a03      	ldr	r2, [sp, #12]
 800732e:	3301      	adds	r3, #1
 8007330:	1a9b      	subs	r3, r3, r2
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 8007332:	b21b      	sxth	r3, r3
 8007334:	0fda      	lsrs	r2, r3, #31
 8007336:	4694      	mov	ip, r2
 8007338:	4463      	add	r3, ip
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 800733a:	1049      	asrs	r1, r1, #1
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 800733c:	105b      	asrs	r3, r3, #1
    if(base == NULL) {
 800733e:	2c00      	cmp	r4, #0
 8007340:	d100      	bne.n	8007344 <lv_obj_align_origo+0x4a>
 8007342:	003c      	movs	r4, r7
    switch(align) {
 8007344:	2e14      	cmp	r6, #20
 8007346:	d80d      	bhi.n	8007364 <lv_obj_align_origo+0x6a>
 8007348:	0030      	movs	r0, r6
 800734a:	f7f8 feeb 	bl	8000124 <__gnu_thumb1_case_uqi>
 800734e:	6412      	.short	0x6412
 8007350:	53686a25 	.word	0x53686a25
 8007354:	64716678 	.word	0x64716678
 8007358:	53686a25 	.word	0x53686a25
 800735c:	68666478 	.word	0x68666478
 8007360:	716a      	.short	0x716a
 8007362:	78          	.byte	0x78
 8007363:	00          	.byte	0x00
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8007364:	9b01      	ldr	r3, [sp, #4]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8007366:	9a03      	ldr	r2, [sp, #12]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8007368:	1ac1      	subs	r1, r0, r3
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800736a:	9b02      	ldr	r3, [sp, #8]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800736c:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	e01d      	b.n	80073ae <lv_obj_align_origo+0xb4>
    return area_p->x2 - area_p->x1 + 1;
 8007372:	8aa2      	ldrh	r2, [r4, #20]
 8007374:	8a20      	ldrh	r0, [r4, #16]
 8007376:	3201      	adds	r2, #1
 8007378:	1a12      	subs	r2, r2, r0
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 800737a:	b212      	sxth	r2, r2
 800737c:	0fd0      	lsrs	r0, r2, #31
 800737e:	1882      	adds	r2, r0, r2
 8007380:	1052      	asrs	r2, r2, #1
 8007382:	1a51      	subs	r1, r2, r1
    return area_p->y2 - area_p->y1 + 1;
 8007384:	8ae0      	ldrh	r0, [r4, #22]
 8007386:	8a62      	ldrh	r2, [r4, #18]
 8007388:	3001      	adds	r0, #1
 800738a:	1a80      	subs	r0, r0, r2
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800738c:	b200      	sxth	r0, r0
 800738e:	0fc2      	lsrs	r2, r0, #31
 8007390:	1812      	adds	r2, r2, r0
            new_x = lv_obj_get_width(base) - obj_w_half;
 8007392:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8007394:	1052      	asrs	r2, r2, #1
 8007396:	e7ea      	b.n	800736e <lv_obj_align_origo+0x74>
    return area_p->x2 - area_p->x1 + 1;
 8007398:	8aa2      	ldrh	r2, [r4, #20]
 800739a:	8a20      	ldrh	r0, [r4, #16]
 800739c:	3201      	adds	r2, #1
 800739e:	1a12      	subs	r2, r2, r0
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 80073a0:	b212      	sxth	r2, r2
 80073a2:	0fd0      	lsrs	r0, r2, #31
 80073a4:	1882      	adds	r2, r0, r2
 80073a6:	1052      	asrs	r2, r2, #1
 80073a8:	1a51      	subs	r1, r2, r1
            new_x = lv_obj_get_width(base) - obj_w_half;
 80073aa:	b209      	sxth	r1, r1
            new_y = -obj_h_half;
 80073ac:	425b      	negs	r3, r3
    new_x -= par_abs_x;
 80073ae:	9a04      	ldr	r2, [sp, #16]
 80073b0:	9801      	ldr	r0, [sp, #4]
            new_y = lv_obj_get_height(base) - obj_h_half;
 80073b2:	b21b      	sxth	r3, r3
    new_x -= par_abs_x;
 80073b4:	1a10      	subs	r0, r2, r0
 80073b6:	8a22      	ldrh	r2, [r4, #16]
 80073b8:	1810      	adds	r0, r2, r0
 80073ba:	1841      	adds	r1, r0, r1
    new_y -= par_abs_y;
 80073bc:	9a05      	ldr	r2, [sp, #20]
 80073be:	9802      	ldr	r0, [sp, #8]
    lv_obj_set_pos(obj, new_x, new_y);
 80073c0:	b209      	sxth	r1, r1
    new_y -= par_abs_y;
 80073c2:	1a10      	subs	r0, r2, r0
 80073c4:	8a62      	ldrh	r2, [r4, #18]
 80073c6:	1812      	adds	r2, r2, r0
 80073c8:	18d2      	adds	r2, r2, r3
    lv_obj_set_pos(obj, new_x, new_y);
 80073ca:	0028      	movs	r0, r5
 80073cc:	b212      	sxth	r2, r2
 80073ce:	f7ff fe07 	bl	8006fe0 <lv_obj_set_pos>
    obj->realign.align       = align;
 80073d2:	002b      	movs	r3, r5
 80073d4:	3340      	adds	r3, #64	; 0x40
 80073d6:	701e      	strb	r6, [r3, #0]
    obj->realign.xofs        = x_mod;
 80073d8:	466b      	mov	r3, sp
 80073da:	8a1b      	ldrh	r3, [r3, #16]
    obj->realign.base        = base;
 80073dc:	63ac      	str	r4, [r5, #56]	; 0x38
    obj->realign.xofs        = x_mod;
 80073de:	87ab      	strh	r3, [r5, #60]	; 0x3c
    obj->realign.yofs        = y_mod;
 80073e0:	466b      	mov	r3, sp
 80073e2:	8a9b      	ldrh	r3, [r3, #20]
 80073e4:	87eb      	strh	r3, [r5, #62]	; 0x3e
    obj->realign.origo_align = 1;
 80073e6:	2302      	movs	r3, #2
 80073e8:	3541      	adds	r5, #65	; 0x41
 80073ea:	782a      	ldrb	r2, [r5, #0]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	702b      	strb	r3, [r5, #0]
}
 80073f0:	b007      	add	sp, #28
 80073f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073f4:	8aa2      	ldrh	r2, [r4, #20]
 80073f6:	8a20      	ldrh	r0, [r4, #16]
 80073f8:	3201      	adds	r2, #1
 80073fa:	1a12      	subs	r2, r2, r0
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 80073fc:	b212      	sxth	r2, r2
 80073fe:	0fd0      	lsrs	r0, r2, #31
 8007400:	1882      	adds	r2, r0, r2
 8007402:	1052      	asrs	r2, r2, #1
 8007404:	1a51      	subs	r1, r2, r1
            new_y = lv_obj_get_height(base) - obj_h_half;
 8007406:	2201      	movs	r2, #1
            new_x = -obj_w_half;
 8007408:	b209      	sxth	r1, r1
            new_y = lv_obj_get_height(base) - obj_h_half;
 800740a:	1ad2      	subs	r2, r2, r3
 800740c:	8ae3      	ldrh	r3, [r4, #22]
 800740e:	189b      	adds	r3, r3, r2
 8007410:	8a62      	ldrh	r2, [r4, #18]
 8007412:	1a9b      	subs	r3, r3, r2
 8007414:	e7cb      	b.n	80073ae <lv_obj_align_origo+0xb4>
            new_x = -obj_w_half;
 8007416:	4249      	negs	r1, r1
 8007418:	e7c7      	b.n	80073aa <lv_obj_align_origo+0xb0>
            new_x = -obj_w_half;
 800741a:	4249      	negs	r1, r1
 800741c:	e7b2      	b.n	8007384 <lv_obj_align_origo+0x8a>
            new_x = -obj_w_half;
 800741e:	4249      	negs	r1, r1
 8007420:	e7f1      	b.n	8007406 <lv_obj_align_origo+0x10c>
            new_x = lv_obj_get_width(base) - obj_w_half;
 8007422:	2001      	movs	r0, #1
 8007424:	1a40      	subs	r0, r0, r1
 8007426:	8aa1      	ldrh	r1, [r4, #20]
 8007428:	1809      	adds	r1, r1, r0
 800742a:	8a20      	ldrh	r0, [r4, #16]
 800742c:	1a09      	subs	r1, r1, r0
 800742e:	e7bc      	b.n	80073aa <lv_obj_align_origo+0xb0>
            new_x = lv_obj_get_width(base) - obj_w_half;
 8007430:	2001      	movs	r0, #1
 8007432:	1a40      	subs	r0, r0, r1
 8007434:	8aa1      	ldrh	r1, [r4, #20]
 8007436:	1809      	adds	r1, r1, r0
 8007438:	8a20      	ldrh	r0, [r4, #16]
 800743a:	1a09      	subs	r1, r1, r0
 800743c:	e7a2      	b.n	8007384 <lv_obj_align_origo+0x8a>
            new_x = lv_obj_get_width(base) - obj_w_half;
 800743e:	2201      	movs	r2, #1
 8007440:	8aa0      	ldrh	r0, [r4, #20]
 8007442:	1a51      	subs	r1, r2, r1
 8007444:	1841      	adds	r1, r0, r1
 8007446:	8a20      	ldrh	r0, [r4, #16]
 8007448:	1a09      	subs	r1, r1, r0
 800744a:	b209      	sxth	r1, r1
 800744c:	e7dd      	b.n	800740a <lv_obj_align_origo+0x110>

0800744e <lv_obj_realign>:
    if(obj->realign.origo_align)
 800744e:	0003      	movs	r3, r0
 8007450:	3341      	adds	r3, #65	; 0x41
{
 8007452:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if(obj->realign.origo_align)
 8007454:	781c      	ldrb	r4, [r3, #0]
 8007456:	223c      	movs	r2, #60	; 0x3c
 8007458:	5e83      	ldrsh	r3, [r0, r2]
 800745a:	0002      	movs	r2, r0
 800745c:	253e      	movs	r5, #62	; 0x3e
 800745e:	5f41      	ldrsh	r1, [r0, r5]
 8007460:	3240      	adds	r2, #64	; 0x40
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8007462:	7812      	ldrb	r2, [r2, #0]
 8007464:	9100      	str	r1, [sp, #0]
 8007466:	6b81      	ldr	r1, [r0, #56]	; 0x38
    if(obj->realign.origo_align)
 8007468:	07a4      	lsls	r4, r4, #30
 800746a:	d502      	bpl.n	8007472 <lv_obj_realign+0x24>
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800746c:	f7ff ff45 	bl	80072fa <lv_obj_align_origo>
}
 8007470:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8007472:	f7ff fe09 	bl	8007088 <lv_obj_align>
}
 8007476:	e7fb      	b.n	8007470 <lv_obj_realign+0x22>

08007478 <lv_obj_create>:
{
 8007478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747a:	0005      	movs	r5, r0
 800747c:	000e      	movs	r6, r1
    if(parent == NULL) {
 800747e:	2800      	cmp	r0, #0
 8007480:	d000      	beq.n	8007484 <lv_obj_create+0xc>
 8007482:	e0ee      	b.n	8007662 <lv_obj_create+0x1ea>
        lv_disp_t * disp = lv_disp_get_default();
 8007484:	f004 fcc8 	bl	800be18 <lv_disp_get_default>
        if(!disp) {
 8007488:	2800      	cmp	r0, #0
 800748a:	d100      	bne.n	800748e <lv_obj_create+0x16>
 800748c:	e131      	b.n	80076f2 <lv_obj_create+0x27a>
        new_obj = lv_ll_ins_head(&disp->scr_ll);
 800748e:	302c      	adds	r0, #44	; 0x2c
 8007490:	f005 f82b 	bl	800c4ea <lv_ll_ins_head>
 8007494:	1e04      	subs	r4, r0, #0
        lv_mem_assert(new_obj);
 8007496:	d100      	bne.n	800749a <lv_obj_create+0x22>
 8007498:	e7fe      	b.n	8007498 <lv_obj_create+0x20>
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 800749a:	2144      	movs	r1, #68	; 0x44
        new_obj->par = NULL; /*Screens has no a parent*/
 800749c:	c020      	stmia	r0!, {r5}
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 800749e:	f005 f81a 	bl	800c4d6 <lv_ll_init>
        new_obj->coords.x1    = 0;
 80074a2:	8225      	strh	r5, [r4, #16]
        new_obj->coords.y1    = 0;
 80074a4:	8265      	strh	r5, [r4, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 80074a6:	0028      	movs	r0, r5
 80074a8:	f004 fcbc 	bl	800be24 <lv_disp_get_hor_res>
 80074ac:	3801      	subs	r0, #1
 80074ae:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 80074b0:	0028      	movs	r0, r5
 80074b2:	f004 fcc9 	bl	800be48 <lv_disp_get_ver_res>
        new_obj->realign.align        = LV_ALIGN_CENTER;
 80074b6:	0023      	movs	r3, r4
        new_obj->realign.auto_realign = 0;
 80074b8:	0022      	movs	r2, r4
 80074ba:	2101      	movs	r1, #1
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 80074bc:	3801      	subs	r0, #1
        new_obj->realign.align        = LV_ALIGN_CENTER;
 80074be:	3340      	adds	r3, #64	; 0x40
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 80074c0:	82e0      	strh	r0, [r4, #22]
        new_obj->ext_draw_pad = 0;
 80074c2:	86a5      	strh	r5, [r4, #52]	; 0x34
        new_obj->realign.auto_realign = 0;
 80074c4:	3241      	adds	r2, #65	; 0x41
        new_obj->realign.align        = LV_ALIGN_CENTER;
 80074c6:	701d      	strb	r5, [r3, #0]
        new_obj->realign.xofs         = 0;
 80074c8:	87a5      	strh	r5, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 80074ca:	87e5      	strh	r5, [r4, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 80074cc:	63a5      	str	r5, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 80074ce:	7813      	ldrb	r3, [r2, #0]
 80074d0:	438b      	bics	r3, r1
 80074d2:	7013      	strb	r3, [r2, #0]
        lv_theme_t * th = lv_theme_get_current();
 80074d4:	f006 fbe8 	bl	800dca8 <lv_theme_get_current>
            new_obj->style_p = &lv_style_scr;
 80074d8:	4b87      	ldr	r3, [pc, #540]	; (80076f8 <lv_obj_create+0x280>)
        if(th) {
 80074da:	2800      	cmp	r0, #0
 80074dc:	d000      	beq.n	80074e0 <lv_obj_create+0x68>
            new_obj->style_p = th->style.scr;
 80074de:	6803      	ldr	r3, [r0, #0]
            new_obj->style_p = &lv_style_scr;
 80074e0:	62a3      	str	r3, [r4, #40]	; 0x28
    obj->signal_cb = signal_cb;
 80074e2:	4b86      	ldr	r3, [pc, #536]	; (80076fc <lv_obj_create+0x284>)
        new_obj->event_cb = NULL;
 80074e4:	2200      	movs	r2, #0
    obj->signal_cb = signal_cb;
 80074e6:	61e3      	str	r3, [r4, #28]
    obj->design_cb = design_cb;
 80074e8:	4b85      	ldr	r3, [pc, #532]	; (8007700 <lv_obj_create+0x288>)
        new_obj->opa_scale    = LV_OPA_COVER;
 80074ea:	21ff      	movs	r1, #255	; 0xff
    obj->design_cb = design_cb;
 80074ec:	6223      	str	r3, [r4, #32]
        new_obj->protect      = LV_PROTECT_NONE;
 80074ee:	0023      	movs	r3, r4
        new_obj->reserved     = 0;
 80074f0:	2003      	movs	r0, #3
        new_obj->protect      = LV_PROTECT_NONE;
 80074f2:	3332      	adds	r3, #50	; 0x32
        new_obj->event_cb = NULL;
 80074f4:	61a2      	str	r2, [r4, #24]
        new_obj->group_p = NULL;
 80074f6:	62e2      	str	r2, [r4, #44]	; 0x2c
        new_obj->parent_event = 0;
 80074f8:	3b02      	subs	r3, #2
        new_obj->protect      = LV_PROTECT_NONE;
 80074fa:	709a      	strb	r2, [r3, #2]
        new_obj->opa_scale    = LV_OPA_COVER;
 80074fc:	70d9      	strb	r1, [r3, #3]
        new_obj->reserved     = 0;
 80074fe:	7859      	ldrb	r1, [r3, #1]
        new_obj->parent_event = 0;
 8007500:	701a      	strb	r2, [r3, #0]
        new_obj->reserved     = 0;
 8007502:	4001      	ands	r1, r0
 8007504:	7059      	strb	r1, [r3, #1]
        new_obj->ext_attr = NULL;
 8007506:	6262      	str	r2, [r4, #36]	; 0x24
    if(copy != NULL) {
 8007508:	2e00      	cmp	r6, #0
 800750a:	d100      	bne.n	800750e <lv_obj_create+0x96>
 800750c:	e0ed      	b.n	80076ea <lv_obj_create+0x272>
    memcpy(dest, src, sizeof(lv_area_t));
 800750e:	0031      	movs	r1, r6
 8007510:	0020      	movs	r0, r4
 8007512:	2208      	movs	r2, #8
 8007514:	3110      	adds	r1, #16
 8007516:	3010      	adds	r0, #16
 8007518:	f006 fe38 	bl	800e18c <memcpy>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 800751c:	2234      	movs	r2, #52	; 0x34
 800751e:	5eb3      	ldrsh	r3, [r6, r2]
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 8007520:	0021      	movs	r1, r4
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 8007522:	86a3      	strh	r3, [r4, #52]	; 0x34
        new_obj->realign.align        = copy->realign.align;
 8007524:	0033      	movs	r3, r6
 8007526:	3340      	adds	r3, #64	; 0x40
 8007528:	781a      	ldrb	r2, [r3, #0]
 800752a:	0023      	movs	r3, r4
 800752c:	3340      	adds	r3, #64	; 0x40
 800752e:	701a      	strb	r2, [r3, #0]
        new_obj->realign.xofs         = copy->realign.xofs;
 8007530:	223c      	movs	r2, #60	; 0x3c
 8007532:	5eb3      	ldrsh	r3, [r6, r2]
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 8007534:	3141      	adds	r1, #65	; 0x41
        new_obj->realign.xofs         = copy->realign.xofs;
 8007536:	87a3      	strh	r3, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = copy->realign.yofs;
 8007538:	223e      	movs	r2, #62	; 0x3e
 800753a:	5eb3      	ldrsh	r3, [r6, r2]
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 800753c:	2201      	movs	r2, #1
        new_obj->realign.yofs         = copy->realign.yofs;
 800753e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        new_obj->realign.base         = copy->realign.base;
 8007540:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8007542:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 8007544:	0033      	movs	r3, r6
 8007546:	3341      	adds	r3, #65	; 0x41
 8007548:	7818      	ldrb	r0, [r3, #0]
 800754a:	2301      	movs	r3, #1
 800754c:	4018      	ands	r0, r3
 800754e:	780b      	ldrb	r3, [r1, #0]
 8007550:	4393      	bics	r3, r2
 8007552:	4303      	orrs	r3, r0
 8007554:	700b      	strb	r3, [r1, #0]
        new_obj->click        = copy->click;
 8007556:	0031      	movs	r1, r6
        new_obj->event_cb = copy->event_cb;
 8007558:	69b3      	ldr	r3, [r6, #24]
        new_obj->click        = copy->click;
 800755a:	3130      	adds	r1, #48	; 0x30
        new_obj->event_cb = copy->event_cb;
 800755c:	61a3      	str	r3, [r4, #24]
        new_obj->click        = copy->click;
 800755e:	0023      	movs	r3, r4
 8007560:	7808      	ldrb	r0, [r1, #0]
 8007562:	3330      	adds	r3, #48	; 0x30
 8007564:	07c0      	lsls	r0, r0, #31
 8007566:	0fc7      	lsrs	r7, r0, #31
 8007568:	7818      	ldrb	r0, [r3, #0]
 800756a:	4390      	bics	r0, r2
 800756c:	4338      	orrs	r0, r7
 800756e:	7018      	strb	r0, [r3, #0]
        new_obj->drag         = copy->drag;
 8007570:	7808      	ldrb	r0, [r1, #0]
 8007572:	781f      	ldrb	r7, [r3, #0]
 8007574:	40d0      	lsrs	r0, r2
 8007576:	4010      	ands	r0, r2
 8007578:	4090      	lsls	r0, r2
 800757a:	1892      	adds	r2, r2, r2
 800757c:	4397      	bics	r7, r2
 800757e:	4338      	orrs	r0, r7
 8007580:	7018      	strb	r0, [r3, #0]
        new_obj->drag_dir     = copy->drag_dir;
 8007582:	0030      	movs	r0, r6
 8007584:	3031      	adds	r0, #49	; 0x31
 8007586:	7807      	ldrb	r7, [r0, #0]
 8007588:	7858      	ldrb	r0, [r3, #1]
 800758a:	3201      	adds	r2, #1
 800758c:	4390      	bics	r0, r2
 800758e:	4017      	ands	r7, r2
 8007590:	4307      	orrs	r7, r0
 8007592:	705f      	strb	r7, [r3, #1]
        new_obj->drag_throw   = copy->drag_throw;
 8007594:	7808      	ldrb	r0, [r1, #0]
 8007596:	781f      	ldrb	r7, [r3, #0]
 8007598:	3a02      	subs	r2, #2
 800759a:	0880      	lsrs	r0, r0, #2
 800759c:	4010      	ands	r0, r2
 800759e:	3203      	adds	r2, #3
 80075a0:	4397      	bics	r7, r2
 80075a2:	0080      	lsls	r0, r0, #2
 80075a4:	4338      	orrs	r0, r7
 80075a6:	7018      	strb	r0, [r3, #0]
        new_obj->drag_parent  = copy->drag_parent;
 80075a8:	7808      	ldrb	r0, [r1, #0]
 80075aa:	781f      	ldrb	r7, [r3, #0]
 80075ac:	3a03      	subs	r2, #3
 80075ae:	08c0      	lsrs	r0, r0, #3
 80075b0:	4010      	ands	r0, r2
 80075b2:	3207      	adds	r2, #7
 80075b4:	4397      	bics	r7, r2
 80075b6:	00c0      	lsls	r0, r0, #3
 80075b8:	4338      	orrs	r0, r7
 80075ba:	7018      	strb	r0, [r3, #0]
        new_obj->hidden       = copy->hidden;
 80075bc:	7808      	ldrb	r0, [r1, #0]
 80075be:	781f      	ldrb	r7, [r3, #0]
 80075c0:	3a07      	subs	r2, #7
 80075c2:	0900      	lsrs	r0, r0, #4
 80075c4:	4010      	ands	r0, r2
 80075c6:	320f      	adds	r2, #15
 80075c8:	4397      	bics	r7, r2
 80075ca:	0100      	lsls	r0, r0, #4
 80075cc:	4338      	orrs	r0, r7
 80075ce:	7018      	strb	r0, [r3, #0]
        new_obj->top          = copy->top;
 80075d0:	7808      	ldrb	r0, [r1, #0]
 80075d2:	781f      	ldrb	r7, [r3, #0]
 80075d4:	3a0f      	subs	r2, #15
 80075d6:	0940      	lsrs	r0, r0, #5
 80075d8:	4010      	ands	r0, r2
 80075da:	321f      	adds	r2, #31
 80075dc:	4397      	bics	r7, r2
 80075de:	0140      	lsls	r0, r0, #5
 80075e0:	4338      	orrs	r0, r7
 80075e2:	7018      	strb	r0, [r3, #0]
        new_obj->parent_event = copy->parent_event;
 80075e4:	7808      	ldrb	r0, [r1, #0]
 80075e6:	325f      	adds	r2, #95	; 0x5f
 80075e8:	09c0      	lsrs	r0, r0, #7
 80075ea:	01c7      	lsls	r7, r0, #7
 80075ec:	7818      	ldrb	r0, [r3, #0]
 80075ee:	4010      	ands	r0, r2
 80075f0:	4338      	orrs	r0, r7
 80075f2:	7018      	strb	r0, [r3, #0]
        new_obj->opa_scale_en = copy->opa_scale_en;
 80075f4:	7809      	ldrb	r1, [r1, #0]
 80075f6:	3a7e      	subs	r2, #126	; 0x7e
 80075f8:	0989      	lsrs	r1, r1, #6
 80075fa:	400a      	ands	r2, r1
 80075fc:	b2c1      	uxtb	r1, r0
 80075fe:	2040      	movs	r0, #64	; 0x40
 8007600:	0192      	lsls	r2, r2, #6
 8007602:	4381      	bics	r1, r0
 8007604:	430a      	orrs	r2, r1
 8007606:	701a      	strb	r2, [r3, #0]
        new_obj->protect      = copy->protect;
 8007608:	0033      	movs	r3, r6
 800760a:	3332      	adds	r3, #50	; 0x32
 800760c:	781a      	ldrb	r2, [r3, #0]
 800760e:	0023      	movs	r3, r4
 8007610:	3332      	adds	r3, #50	; 0x32
 8007612:	701a      	strb	r2, [r3, #0]
        new_obj->opa_scale    = copy->opa_scale;
 8007614:	0033      	movs	r3, r6
 8007616:	3333      	adds	r3, #51	; 0x33
 8007618:	781a      	ldrb	r2, [r3, #0]
 800761a:	0023      	movs	r3, r4
 800761c:	3333      	adds	r3, #51	; 0x33
 800761e:	701a      	strb	r2, [r3, #0]
        new_obj->style_p = copy->style_p;
 8007620:	6ab3      	ldr	r3, [r6, #40]	; 0x28
        if(copy->group_p != NULL) {
 8007622:	6af0      	ldr	r0, [r6, #44]	; 0x2c
        new_obj->style_p = copy->style_p;
 8007624:	62a3      	str	r3, [r4, #40]	; 0x28
        if(copy->group_p != NULL) {
 8007626:	2800      	cmp	r0, #0
 8007628:	d002      	beq.n	8007630 <lv_obj_create+0x1b8>
            lv_group_add_obj(copy->group_p, new_obj);
 800762a:	0021      	movs	r1, r4
 800762c:	f7ff fb29 	bl	8006c82 <lv_group_add_obj>
    return obj->par;
 8007630:	6833      	ldr	r3, [r6, #0]
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
 8007632:	2b00      	cmp	r3, #0
 8007634:	d054      	beq.n	80076e0 <lv_obj_create+0x268>
 8007636:	2d00      	cmp	r5, #0
 8007638:	d052      	beq.n	80076e0 <lv_obj_create+0x268>
    rel_y             = obj->coords.y1 - parent->coords.y1;
 800763a:	8a59      	ldrh	r1, [r3, #18]
 800763c:	8a72      	ldrh	r2, [r6, #18]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 800763e:	8a1b      	ldrh	r3, [r3, #16]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 8007640:	1a52      	subs	r2, r2, r1
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8007642:	8a31      	ldrh	r1, [r6, #16]
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 8007644:	b212      	sxth	r2, r2
    rel_x             = obj->coords.x1 - parent->coords.x1;
 8007646:	1ac9      	subs	r1, r1, r3
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 8007648:	b209      	sxth	r1, r1
 800764a:	0020      	movs	r0, r4
 800764c:	f7ff fcc8 	bl	8006fe0 <lv_obj_set_pos>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 8007650:	69eb      	ldr	r3, [r5, #28]
 8007652:	0022      	movs	r2, r4
 8007654:	2101      	movs	r1, #1
 8007656:	0028      	movs	r0, r5
 8007658:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
 800765a:	0020      	movs	r0, r4
 800765c:	f7ff fc56 	bl	8006f0c <lv_obj_invalidate>
 8007660:	e045      	b.n	80076ee <lv_obj_create+0x276>
        new_obj = lv_ll_ins_head(&parent->child_ll);
 8007662:	3004      	adds	r0, #4
 8007664:	f004 ff41 	bl	800c4ea <lv_ll_ins_head>
 8007668:	1e04      	subs	r4, r0, #0
        lv_mem_assert(new_obj);
 800766a:	d100      	bne.n	800766e <lv_obj_create+0x1f6>
 800766c:	e7fe      	b.n	800766c <lv_obj_create+0x1f4>
        new_obj->par = parent; /*Set the parent*/
 800766e:	c020      	stmia	r0!, {r5}
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8007670:	2144      	movs	r1, #68	; 0x44
 8007672:	f004 ff30 	bl	800c4d6 <lv_ll_init>
        new_obj->coords.x1    = parent->coords.x1;
 8007676:	2210      	movs	r2, #16
 8007678:	5eab      	ldrsh	r3, [r5, r2]
        new_obj->realign.auto_realign = 0;
 800767a:	2101      	movs	r1, #1
        new_obj->coords.x1    = parent->coords.x1;
 800767c:	8223      	strh	r3, [r4, #16]
        new_obj->coords.y1    = parent->coords.y1;
 800767e:	2212      	movs	r2, #18
 8007680:	5eab      	ldrsh	r3, [r5, r2]
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8007682:	0022      	movs	r2, r4
        new_obj->coords.y1    = parent->coords.y1;
 8007684:	8263      	strh	r3, [r4, #18]
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 8007686:	8a2b      	ldrh	r3, [r5, #16]
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8007688:	3240      	adds	r2, #64	; 0x40
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 800768a:	3319      	adds	r3, #25
 800768c:	82a3      	strh	r3, [r4, #20]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 800768e:	8a6b      	ldrh	r3, [r5, #18]
 8007690:	3310      	adds	r3, #16
 8007692:	82e3      	strh	r3, [r4, #22]
        new_obj->ext_draw_pad = 0;
 8007694:	2300      	movs	r3, #0
 8007696:	86a3      	strh	r3, [r4, #52]	; 0x34
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8007698:	7013      	strb	r3, [r2, #0]
        new_obj->realign.xofs         = 0;
 800769a:	87a3      	strh	r3, [r4, #60]	; 0x3c
        new_obj->realign.yofs         = 0;
 800769c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        new_obj->realign.base         = NULL;
 800769e:	63a3      	str	r3, [r4, #56]	; 0x38
        new_obj->realign.auto_realign = 0;
 80076a0:	7853      	ldrb	r3, [r2, #1]
 80076a2:	438b      	bics	r3, r1
 80076a4:	7053      	strb	r3, [r2, #1]
        lv_theme_t * th = lv_theme_get_current();
 80076a6:	f006 faff 	bl	800dca8 <lv_theme_get_current>
            new_obj->style_p = &lv_style_plain_color;
 80076aa:	4b16      	ldr	r3, [pc, #88]	; (8007704 <lv_obj_create+0x28c>)
        if(th) {
 80076ac:	2800      	cmp	r0, #0
 80076ae:	d000      	beq.n	80076b2 <lv_obj_create+0x23a>
            new_obj->style_p = th->style.panel;
 80076b0:	6883      	ldr	r3, [r0, #8]
            new_obj->style_p = &lv_style_plain_color;
 80076b2:	62a3      	str	r3, [r4, #40]	; 0x28
    obj->signal_cb = signal_cb;
 80076b4:	4b11      	ldr	r3, [pc, #68]	; (80076fc <lv_obj_create+0x284>)
        new_obj->click        = 1;
 80076b6:	0022      	movs	r2, r4
    obj->signal_cb = signal_cb;
 80076b8:	61e3      	str	r3, [r4, #28]
    obj->design_cb = design_cb;
 80076ba:	4b11      	ldr	r3, [pc, #68]	; (8007700 <lv_obj_create+0x288>)
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 80076bc:	2103      	movs	r1, #3
    obj->design_cb = design_cb;
 80076be:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
 80076c0:	2300      	movs	r3, #0
        new_obj->click        = 1;
 80076c2:	3230      	adds	r2, #48	; 0x30
        new_obj->event_cb = NULL;
 80076c4:	61a3      	str	r3, [r4, #24]
        new_obj->group_p = NULL;
 80076c6:	62e3      	str	r3, [r4, #44]	; 0x2c
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 80076c8:	7850      	ldrb	r0, [r2, #1]
 80076ca:	4301      	orrs	r1, r0
 80076cc:	7051      	strb	r1, [r2, #1]
        new_obj->protect      = LV_PROTECT_NONE;
 80076ce:	0021      	movs	r1, r4
        new_obj->opa_scale    = LV_OPA_COVER;
 80076d0:	20ff      	movs	r0, #255	; 0xff
        new_obj->protect      = LV_PROTECT_NONE;
 80076d2:	3132      	adds	r1, #50	; 0x32
 80076d4:	700b      	strb	r3, [r1, #0]
        new_obj->opa_scale    = LV_OPA_COVER;
 80076d6:	7048      	strb	r0, [r1, #1]
        new_obj->parent_event = 0;
 80076d8:	2101      	movs	r1, #1
 80076da:	7011      	strb	r1, [r2, #0]
        new_obj->ext_attr = NULL;
 80076dc:	6263      	str	r3, [r4, #36]	; 0x24
 80076de:	e713      	b.n	8007508 <lv_obj_create+0x90>
            lv_obj_set_pos(new_obj, 0, 0);
 80076e0:	2200      	movs	r2, #0
 80076e2:	0020      	movs	r0, r4
 80076e4:	0011      	movs	r1, r2
 80076e6:	f7ff fc7b 	bl	8006fe0 <lv_obj_set_pos>
    if(parent != NULL) {
 80076ea:	2d00      	cmp	r5, #0
 80076ec:	d1b0      	bne.n	8007650 <lv_obj_create+0x1d8>
}
 80076ee:	0020      	movs	r0, r4
 80076f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NULL;
 80076f2:	0004      	movs	r4, r0
 80076f4:	e7fb      	b.n	80076ee <lv_obj_create+0x276>
 80076f6:	46c0      	nop			; (mov r8, r8)
 80076f8:	20005358 	.word	0x20005358
 80076fc:	080078dd 	.word	0x080078dd
 8007700:	08007955 	.word	0x08007955
 8007704:	200053d0 	.word	0x200053d0

08007708 <lv_obj_set_size>:
    return area_p->x2 - area_p->x1 + 1;
 8007708:	8a83      	ldrh	r3, [r0, #20]
{
 800770a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800770c:	0015      	movs	r5, r2
 800770e:	8a02      	ldrh	r2, [r0, #16]
 8007710:	3301      	adds	r3, #1
 8007712:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 8007714:	b21b      	sxth	r3, r3
{
 8007716:	0004      	movs	r4, r0
 8007718:	000e      	movs	r6, r1
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 800771a:	4299      	cmp	r1, r3
 800771c:	d106      	bne.n	800772c <lv_obj_set_size+0x24>
    return area_p->y2 - area_p->y1 + 1;
 800771e:	8ac3      	ldrh	r3, [r0, #22]
 8007720:	8a42      	ldrh	r2, [r0, #18]
 8007722:	3301      	adds	r3, #1
 8007724:	1a9b      	subs	r3, r3, r2
 8007726:	b21b      	sxth	r3, r3
 8007728:	429d      	cmp	r5, r3
 800772a:	d02d      	beq.n	8007788 <lv_obj_set_size+0x80>
    lv_obj_invalidate(obj);
 800772c:	0020      	movs	r0, r4
 800772e:	f7ff fbed 	bl	8006f0c <lv_obj_invalidate>
    memcpy(dest, src, sizeof(lv_area_t));
 8007732:	0021      	movs	r1, r4
 8007734:	2208      	movs	r2, #8
 8007736:	3110      	adds	r1, #16
 8007738:	4668      	mov	r0, sp
 800773a:	f006 fd27 	bl	800e18c <memcpy>
    obj->coords.x2 = obj->coords.x1 + w - 1;
 800773e:	8a23      	ldrh	r3, [r4, #16]
 8007740:	3e01      	subs	r6, #1
 8007742:	199e      	adds	r6, r3, r6
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8007744:	8a63      	ldrh	r3, [r4, #18]
 8007746:	3d01      	subs	r5, #1
 8007748:	195d      	adds	r5, r3, r5
    obj->coords.x2 = obj->coords.x1 + w - 1;
 800774a:	82a6      	strh	r6, [r4, #20]
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800774c:	82e5      	strh	r5, [r4, #22]
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 800774e:	466a      	mov	r2, sp
 8007750:	2102      	movs	r1, #2
 8007752:	0020      	movs	r0, r4
 8007754:	69e3      	ldr	r3, [r4, #28]
 8007756:	4798      	blx	r3
    return obj->par;
 8007758:	6820      	ldr	r0, [r4, #0]
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 800775a:	2800      	cmp	r0, #0
 800775c:	d003      	beq.n	8007766 <lv_obj_set_size+0x5e>
 800775e:	69c3      	ldr	r3, [r0, #28]
 8007760:	0022      	movs	r2, r4
 8007762:	2101      	movs	r1, #1
 8007764:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
 8007766:	1d26      	adds	r6, r4, #4
 8007768:	0030      	movs	r0, r6
 800776a:	f004 fefe 	bl	800c56a <lv_ll_get_head>
 800776e:	1e05      	subs	r5, r0, #0
 8007770:	d10b      	bne.n	800778a <lv_obj_set_size+0x82>
    lv_obj_invalidate(obj);
 8007772:	0020      	movs	r0, r4
 8007774:	f7ff fbca 	bl	8006f0c <lv_obj_invalidate>
    if(obj->realign.auto_realign) lv_obj_realign(obj);
 8007778:	0023      	movs	r3, r4
 800777a:	3341      	adds	r3, #65	; 0x41
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	07db      	lsls	r3, r3, #31
 8007780:	d502      	bpl.n	8007788 <lv_obj_set_size+0x80>
 8007782:	0020      	movs	r0, r4
 8007784:	f7ff fe63 	bl	800744e <lv_obj_realign>
}
 8007788:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 800778a:	2200      	movs	r2, #0
 800778c:	2103      	movs	r1, #3
 800778e:	0028      	movs	r0, r5
 8007790:	69eb      	ldr	r3, [r5, #28]
 8007792:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
 8007794:	0029      	movs	r1, r5
 8007796:	0030      	movs	r0, r6
 8007798:	f004 feef 	bl	800c57a <lv_ll_get_next>
 800779c:	e7e7      	b.n	800776e <lv_obj_set_size+0x66>

0800779e <lv_obj_set_height>:
{
 800779e:	b510      	push	{r4, lr}
    return area_p->x2 - area_p->x1 + 1;
 80077a0:	8a83      	ldrh	r3, [r0, #20]
 80077a2:	000a      	movs	r2, r1
 80077a4:	8a01      	ldrh	r1, [r0, #16]
 80077a6:	3301      	adds	r3, #1
 80077a8:	1a59      	subs	r1, r3, r1
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
 80077aa:	b209      	sxth	r1, r1
 80077ac:	f7ff ffac 	bl	8007708 <lv_obj_set_size>
}
 80077b0:	bd10      	pop	{r4, pc}

080077b2 <lv_obj_refresh_style>:
{
 80077b2:	b510      	push	{r4, lr}
 80077b4:	0004      	movs	r4, r0
    lv_obj_invalidate(obj);
 80077b6:	f7ff fba9 	bl	8006f0c <lv_obj_invalidate>
    obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 80077ba:	2200      	movs	r2, #0
 80077bc:	2104      	movs	r1, #4
 80077be:	69e3      	ldr	r3, [r4, #28]
 80077c0:	0020      	movs	r0, r4
 80077c2:	4798      	blx	r3
    lv_obj_invalidate(obj);
 80077c4:	0020      	movs	r0, r4
 80077c6:	f7ff fba1 	bl	8006f0c <lv_obj_invalidate>
}
 80077ca:	bd10      	pop	{r4, pc}

080077cc <lv_obj_refresh_ext_draw_pad>:
    obj->ext_draw_pad = 0;
 80077cc:	2200      	movs	r2, #0
{
 80077ce:	b510      	push	{r4, lr}
 80077d0:	0004      	movs	r4, r0
    obj->ext_draw_pad = 0;
 80077d2:	8682      	strh	r2, [r0, #52]	; 0x34
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 80077d4:	2105      	movs	r1, #5
 80077d6:	69c3      	ldr	r3, [r0, #28]
 80077d8:	4798      	blx	r3
    lv_obj_invalidate(obj);
 80077da:	0020      	movs	r0, r4
 80077dc:	f7ff fb96 	bl	8006f0c <lv_obj_invalidate>
}
 80077e0:	bd10      	pop	{r4, pc}

080077e2 <lv_obj_get_parent>:
    return obj->par;
 80077e2:	6800      	ldr	r0, [r0, #0]
}
 80077e4:	4770      	bx	lr

080077e6 <lv_obj_get_child>:
{
 80077e6:	b510      	push	{r4, lr}
 80077e8:	3004      	adds	r0, #4
    if(child == NULL) {
 80077ea:	2900      	cmp	r1, #0
 80077ec:	d102      	bne.n	80077f4 <lv_obj_get_child+0xe>
        result = lv_ll_get_head(&obj->child_ll);
 80077ee:	f004 febc 	bl	800c56a <lv_ll_get_head>
}
 80077f2:	bd10      	pop	{r4, pc}
        result = lv_ll_get_next(&obj->child_ll, child);
 80077f4:	f004 fec1 	bl	800c57a <lv_ll_get_next>
    return result;
 80077f8:	e7fb      	b.n	80077f2 <lv_obj_get_child+0xc>

080077fa <refresh_children_style>:
 * Recursively refresh the style of the children. Go deeper until a not NULL style is found
 * because the NULL styles are inherited from the parent
 * @param obj pointer to an object
 */
static void refresh_children_style(lv_obj_t * obj)
{
 80077fa:	b570      	push	{r4, r5, r6, lr}
 80077fc:	0005      	movs	r5, r0
        result = lv_ll_get_head(&obj->child_ll);
 80077fe:	3004      	adds	r0, #4
 8007800:	f004 feb3 	bl	800c56a <lv_ll_get_head>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
    while(child != NULL) {
        if(child->style_p == NULL) {
            refresh_children_style(child); /*Check children too*/
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
        } else if(child->style_p->glass) {
 8007804:	2601      	movs	r6, #1
        result = lv_ll_get_head(&obj->child_ll);
 8007806:	0004      	movs	r4, r0
    while(child != NULL) {
 8007808:	2c00      	cmp	r4, #0
 800780a:	d100      	bne.n	800780e <refresh_children_style+0x14>
            /*Children with 'glass' parent might be effected if their style == NULL*/
            refresh_children_style(child);
        }
        child = lv_obj_get_child(obj, child);
    }
}
 800780c:	bd70      	pop	{r4, r5, r6, pc}
        if(child->style_p == NULL) {
 800780e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10b      	bne.n	800782c <refresh_children_style+0x32>
            refresh_children_style(child); /*Check children too*/
 8007814:	0020      	movs	r0, r4
 8007816:	f7ff fff0 	bl	80077fa <refresh_children_style>
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
 800781a:	0020      	movs	r0, r4
 800781c:	f7ff ffc9 	bl	80077b2 <lv_obj_refresh_style>
        child = lv_obj_get_child(obj, child);
 8007820:	0021      	movs	r1, r4
 8007822:	0028      	movs	r0, r5
 8007824:	f7ff ffdf 	bl	80077e6 <lv_obj_get_child>
 8007828:	0004      	movs	r4, r0
 800782a:	e7ed      	b.n	8007808 <refresh_children_style+0xe>
        } else if(child->style_p->glass) {
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	4233      	tst	r3, r6
 8007830:	d0f6      	beq.n	8007820 <refresh_children_style+0x26>
            refresh_children_style(child);
 8007832:	0020      	movs	r0, r4
 8007834:	f7ff ffe1 	bl	80077fa <refresh_children_style>
 8007838:	e7f2      	b.n	8007820 <refresh_children_style+0x26>

0800783a <lv_obj_set_style>:
{
 800783a:	b510      	push	{r4, lr}
 800783c:	0004      	movs	r4, r0
    obj->style_p = style;
 800783e:	6281      	str	r1, [r0, #40]	; 0x28
    refresh_children_style(obj);
 8007840:	f7ff ffdb 	bl	80077fa <refresh_children_style>
    lv_obj_refresh_style(obj);
 8007844:	0020      	movs	r0, r4
 8007846:	f7ff ffb4 	bl	80077b2 <lv_obj_refresh_style>
}
 800784a:	bd10      	pop	{r4, pc}

0800784c <lv_obj_get_coords>:
{
 800784c:	000b      	movs	r3, r1
    memcpy(dest, src, sizeof(lv_area_t));
 800784e:	0001      	movs	r1, r0
 8007850:	b510      	push	{r4, lr}
 8007852:	3110      	adds	r1, #16
 8007854:	2208      	movs	r2, #8
 8007856:	0018      	movs	r0, r3
 8007858:	f006 fc98 	bl	800e18c <memcpy>
}
 800785c:	bd10      	pop	{r4, pc}

0800785e <lv_obj_get_width>:
    return area_p->x2 - area_p->x1 + 1;
 800785e:	8a83      	ldrh	r3, [r0, #20]
 8007860:	8a00      	ldrh	r0, [r0, #16]
 8007862:	3301      	adds	r3, #1
 8007864:	1a18      	subs	r0, r3, r0
    return lv_area_get_width(&obj->coords);
 8007866:	b200      	sxth	r0, r0
}
 8007868:	4770      	bx	lr

0800786a <lv_obj_get_height>:
    return area_p->y2 - area_p->y1 + 1;
 800786a:	8ac3      	ldrh	r3, [r0, #22]
 800786c:	8a40      	ldrh	r0, [r0, #18]
 800786e:	3301      	adds	r3, #1
 8007870:	1a18      	subs	r0, r3, r0
    return lv_area_get_height(&obj->coords);
 8007872:	b200      	sxth	r0, r0
}
 8007874:	4770      	bx	lr
	...

08007878 <lv_obj_get_style>:
{
 8007878:	b570      	push	{r4, r5, r6, lr}
    const lv_style_t * style_act = obj->style_p;
 800787a:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 800787c:	0006      	movs	r6, r0
    if(style_act == NULL) {
 800787e:	2c00      	cmp	r4, #0
 8007880:	d114      	bne.n	80078ac <lv_obj_get_style+0x34>
                if(par->style_p->glass == 0) {
 8007882:	2201      	movs	r2, #1
        lv_obj_t * par = obj->par;
 8007884:	6805      	ldr	r5, [r0, #0]
        while(par) {
 8007886:	2d00      	cmp	r5, #0
 8007888:	d010      	beq.n	80078ac <lv_obj_get_style+0x34>
            if(par->style_p) {
 800788a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800788c:	2b00      	cmp	r3, #0
 800788e:	d020      	beq.n	80078d2 <lv_obj_get_style+0x5a>
                if(par->style_p->glass == 0) {
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	4213      	tst	r3, r2
 8007894:	d11d      	bne.n	80078d2 <lv_obj_get_style+0x5a>
    return obj->group_p;
 8007896:	6aec      	ldr	r4, [r5, #44]	; 0x2c
                    if(lv_group_get_focused(g) == par) {
 8007898:	0020      	movs	r0, r4
 800789a:	f7ff fa35 	bl	8006d08 <lv_group_get_focused>
 800789e:	4285      	cmp	r5, r0
 80078a0:	d115      	bne.n	80078ce <lv_obj_get_style+0x56>
                        style_act = lv_group_mod_style(g, par->style_p);
 80078a2:	0020      	movs	r0, r4
 80078a4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80078a6:	f7ff fa19 	bl	8006cdc <lv_group_mod_style>
 80078aa:	0004      	movs	r4, r0
    if(obj->group_p) {
 80078ac:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80078ae:	2800      	cmp	r0, #0
 80078b0:	d008      	beq.n	80078c4 <lv_obj_get_style+0x4c>
        if(lv_group_get_focused(obj->group_p) == obj) {
 80078b2:	f7ff fa29 	bl	8006d08 <lv_group_get_focused>
 80078b6:	4286      	cmp	r6, r0
 80078b8:	d104      	bne.n	80078c4 <lv_obj_get_style+0x4c>
            style_act = lv_group_mod_style(obj->group_p, style_act);
 80078ba:	0021      	movs	r1, r4
 80078bc:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80078be:	f7ff fa0d 	bl	8006cdc <lv_group_mod_style>
 80078c2:	0004      	movs	r4, r0
    if(style_act == NULL) style_act = &lv_style_plain;
 80078c4:	2c00      	cmp	r4, #0
 80078c6:	d100      	bne.n	80078ca <lv_obj_get_style+0x52>
 80078c8:	4c03      	ldr	r4, [pc, #12]	; (80078d8 <lv_obj_get_style+0x60>)
}
 80078ca:	0020      	movs	r0, r4
 80078cc:	bd70      	pop	{r4, r5, r6, pc}
                        style_act = par->style_p;
 80078ce:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80078d0:	e7ec      	b.n	80078ac <lv_obj_get_style+0x34>
            par = par->par;
 80078d2:	682d      	ldr	r5, [r5, #0]
 80078d4:	e7d7      	b.n	8007886 <lv_obj_get_style+0xe>
 80078d6:	46c0      	nop			; (mov r8, r8)
 80078d8:	200052e0 	.word	0x200052e0

080078dc <lv_obj_signal>:
{
 80078dc:	b570      	push	{r4, r5, r6, lr}
 80078de:	000d      	movs	r5, r1
 80078e0:	0004      	movs	r4, r0
 80078e2:	0016      	movs	r6, r2
    const lv_style_t * style = lv_obj_get_style(obj);
 80078e4:	f7ff ffc8 	bl	8007878 <lv_obj_get_style>
    if(sign == LV_SIGNAL_CHILD_CHG) {
 80078e8:	2d01      	cmp	r5, #1
 80078ea:	d104      	bne.n	80078f6 <lv_obj_signal+0x1a>
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 80078ec:	0028      	movs	r0, r5
    return (obj->protect & prot) == 0 ? false : true;
 80078ee:	3432      	adds	r4, #50	; 0x32
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 80078f0:	7823      	ldrb	r3, [r4, #0]
 80078f2:	4398      	bics	r0, r3
}
 80078f4:	bd70      	pop	{r4, r5, r6, pc}
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 80078f6:	2d05      	cmp	r5, #5
 80078f8:	d108      	bne.n	800790c <lv_obj_signal+0x30>
        if(style->body.shadow.width > obj->ext_draw_pad) obj->ext_draw_pad = style->body.shadow.width;
 80078fa:	2212      	movs	r2, #18
 80078fc:	5e83      	ldrsh	r3, [r0, r2]
 80078fe:	2134      	movs	r1, #52	; 0x34
 8007900:	5e62      	ldrsh	r2, [r4, r1]
    lv_res_t res = LV_RES_OK;
 8007902:	2001      	movs	r0, #1
        if(style->body.shadow.width > obj->ext_draw_pad) obj->ext_draw_pad = style->body.shadow.width;
 8007904:	429a      	cmp	r2, r3
 8007906:	daf5      	bge.n	80078f4 <lv_obj_signal+0x18>
 8007908:	86a3      	strh	r3, [r4, #52]	; 0x34
 800790a:	e7f3      	b.n	80078f4 <lv_obj_signal+0x18>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 800790c:	2d04      	cmp	r5, #4
 800790e:	d104      	bne.n	800791a <lv_obj_signal+0x3e>
        lv_obj_refresh_ext_draw_pad(obj);
 8007910:	0020      	movs	r0, r4
 8007912:	f7ff ff5b 	bl	80077cc <lv_obj_refresh_ext_draw_pad>
    lv_res_t res = LV_RES_OK;
 8007916:	2001      	movs	r0, #1
 8007918:	e7ec      	b.n	80078f4 <lv_obj_signal+0x18>
 800791a:	2001      	movs	r0, #1
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800791c:	2d06      	cmp	r5, #6
 800791e:	d1e9      	bne.n	80078f4 <lv_obj_signal+0x18>
        buf->type[0]        = "lv_obj";
 8007920:	4b01      	ldr	r3, [pc, #4]	; (8007928 <lv_obj_signal+0x4c>)
 8007922:	6033      	str	r3, [r6, #0]
 8007924:	e7e6      	b.n	80078f4 <lv_obj_signal+0x18>
 8007926:	46c0      	nop			; (mov r8, r8)
 8007928:	08010eb4 	.word	0x08010eb4

0800792c <lv_obj_get_hidden>:
    return obj->hidden == 0 ? false : true;
 800792c:	3030      	adds	r0, #48	; 0x30
 800792e:	7800      	ldrb	r0, [r0, #0]
 8007930:	06c0      	lsls	r0, r0, #27
 8007932:	0fc0      	lsrs	r0, r0, #31
}
 8007934:	4770      	bx	lr

08007936 <lv_obj_get_opa_scale>:
        if(parent->opa_scale_en) return parent->opa_scale;
 8007936:	2340      	movs	r3, #64	; 0x40
    while(parent) {
 8007938:	2800      	cmp	r0, #0
 800793a:	d101      	bne.n	8007940 <lv_obj_get_opa_scale+0xa>
    return LV_OPA_COVER;
 800793c:	30ff      	adds	r0, #255	; 0xff
 800793e:	e006      	b.n	800794e <lv_obj_get_opa_scale+0x18>
        if(parent->opa_scale_en) return parent->opa_scale;
 8007940:	0002      	movs	r2, r0
 8007942:	3230      	adds	r2, #48	; 0x30
 8007944:	7812      	ldrb	r2, [r2, #0]
 8007946:	421a      	tst	r2, r3
 8007948:	d002      	beq.n	8007950 <lv_obj_get_opa_scale+0x1a>
 800794a:	3033      	adds	r0, #51	; 0x33
 800794c:	7800      	ldrb	r0, [r0, #0]
}
 800794e:	4770      	bx	lr
    return obj->par;
 8007950:	6800      	ldr	r0, [r0, #0]
 8007952:	e7f1      	b.n	8007938 <lv_obj_get_opa_scale+0x2>

08007954 <lv_obj_design>:
{
 8007954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007956:	0004      	movs	r4, r0
 8007958:	000e      	movs	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
 800795a:	2a02      	cmp	r2, #2
 800795c:	d13c      	bne.n	80079d8 <lv_obj_design+0x84>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 800795e:	0005      	movs	r5, r0
 8007960:	3510      	adds	r5, #16
 8007962:	0029      	movs	r1, r5
 8007964:	0030      	movs	r0, r6
 8007966:	f004 fc84 	bl	800c272 <lv_area_is_in>
 800796a:	2800      	cmp	r0, #0
 800796c:	d031      	beq.n	80079d2 <lv_obj_design+0x7e>
        const lv_style_t * style = lv_obj_get_style(obj);
 800796e:	0020      	movs	r0, r4
 8007970:	f7ff ff82 	bl	8007878 <lv_obj_get_style>
        if(style->body.opa < LV_OPA_MAX) return false;
 8007974:	7a03      	ldrb	r3, [r0, #8]
 8007976:	2bfa      	cmp	r3, #250	; 0xfa
 8007978:	d92b      	bls.n	80079d2 <lv_obj_design+0x7e>
        lv_coord_t r = style->body.radius;
 800797a:	2306      	movs	r3, #6
 800797c:	5ec4      	ldrsh	r4, [r0, r3]
        if(r == LV_RADIUS_CIRCLE) return false;
 800797e:	4b1f      	ldr	r3, [pc, #124]	; (80079fc <lv_obj_design+0xa8>)
 8007980:	429c      	cmp	r4, r3
 8007982:	d026      	beq.n	80079d2 <lv_obj_design+0x7e>
    memcpy(dest, src, sizeof(lv_area_t));
 8007984:	2208      	movs	r2, #8
 8007986:	0029      	movs	r1, r5
 8007988:	4668      	mov	r0, sp
 800798a:	f006 fbff 	bl	800e18c <memcpy>
        area_tmp.x1 += r;
 800798e:	466b      	mov	r3, sp
 8007990:	466a      	mov	r2, sp
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	b2a4      	uxth	r4, r4
 8007996:	18e3      	adds	r3, r4, r3
 8007998:	8013      	strh	r3, [r2, #0]
        area_tmp.x2 -= r;
 800799a:	8893      	ldrh	r3, [r2, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 800799c:	4669      	mov	r1, sp
        area_tmp.x2 -= r;
 800799e:	1b1b      	subs	r3, r3, r4
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 80079a0:	0030      	movs	r0, r6
        area_tmp.x2 -= r;
 80079a2:	8093      	strh	r3, [r2, #4]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 80079a4:	f004 fc65 	bl	800c272 <lv_area_is_in>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	d012      	beq.n	80079d2 <lv_obj_design+0x7e>
 80079ac:	0029      	movs	r1, r5
 80079ae:	2208      	movs	r2, #8
 80079b0:	4668      	mov	r0, sp
 80079b2:	f006 fbeb 	bl	800e18c <memcpy>
        area_tmp.y1 += r;
 80079b6:	466b      	mov	r3, sp
 80079b8:	466a      	mov	r2, sp
 80079ba:	885b      	ldrh	r3, [r3, #2]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 80079bc:	4669      	mov	r1, sp
        area_tmp.y1 += r;
 80079be:	18e3      	adds	r3, r4, r3
 80079c0:	8053      	strh	r3, [r2, #2]
        area_tmp.y2 -= r;
 80079c2:	88d3      	ldrh	r3, [r2, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 80079c4:	0030      	movs	r0, r6
        area_tmp.y2 -= r;
 80079c6:	1b1c      	subs	r4, r3, r4
 80079c8:	80d4      	strh	r4, [r2, #6]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 80079ca:	f004 fc52 	bl	800c272 <lv_area_is_in>
 80079ce:	1e05      	subs	r5, r0, #0
 80079d0:	d100      	bne.n	80079d4 <lv_obj_design+0x80>
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 80079d2:	2500      	movs	r5, #0
}
 80079d4:	0028      	movs	r0, r5
 80079d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    return true;
 80079d8:	2501      	movs	r5, #1
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 80079da:	2a00      	cmp	r2, #0
 80079dc:	d1fa      	bne.n	80079d4 <lv_obj_design+0x80>
        const lv_style_t * style = lv_obj_get_style(obj);
 80079de:	f7ff ff4b 	bl	8007878 <lv_obj_get_style>
 80079e2:	0007      	movs	r7, r0
        lv_draw_rect(&obj->coords, mask_p, style, lv_obj_get_opa_scale(obj));
 80079e4:	0020      	movs	r0, r4
 80079e6:	f7ff ffa6 	bl	8007936 <lv_obj_get_opa_scale>
 80079ea:	0003      	movs	r3, r0
 80079ec:	0020      	movs	r0, r4
 80079ee:	003a      	movs	r2, r7
 80079f0:	3010      	adds	r0, #16
 80079f2:	0031      	movs	r1, r6
 80079f4:	f001 fe18 	bl	8009628 <lv_draw_rect>
 80079f8:	e7ec      	b.n	80079d4 <lv_obj_design+0x80>
 80079fa:	46c0      	nop			; (mov r8, r8)
 80079fc:	00007c18 	.word	0x00007c18

08007a00 <lv_obj_get_signal_cb>:
    return obj->signal_cb;
 8007a00:	69c0      	ldr	r0, [r0, #28]
}
 8007a02:	4770      	bx	lr

08007a04 <lv_obj_get_ext_attr>:
    return obj->ext_attr;
 8007a04:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8007a06:	4770      	bx	lr

08007a08 <lv_obj_get_group>:
    return obj->group_p;
 8007a08:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
 8007a0a:	4770      	bx	lr

08007a0c <lv_obj_is_focused>:
    if(obj->group_p) {
 8007a0c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 8007a0e:	b510      	push	{r4, lr}
 8007a10:	0004      	movs	r4, r0
    return false;
 8007a12:	1e18      	subs	r0, r3, #0
    if(obj->group_p) {
 8007a14:	d005      	beq.n	8007a22 <lv_obj_is_focused+0x16>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 8007a16:	f7ff f977 	bl	8006d08 <lv_group_get_focused>
 8007a1a:	1a20      	subs	r0, r4, r0
 8007a1c:	4244      	negs	r4, r0
 8007a1e:	4160      	adcs	r0, r4
 8007a20:	b2c0      	uxtb	r0, r0
}
 8007a22:	bd10      	pop	{r4, pc}

08007a24 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
 8007a24:	b570      	push	{r4, r5, r6, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007a26:	4d13      	ldr	r5, [pc, #76]	; (8007a74 <lv_refr_vdb_flush+0x50>)
 8007a28:	6828      	ldr	r0, [r5, #0]
 8007a2a:	f004 fa33 	bl	800be94 <lv_disp_get_buf>
 8007a2e:	0004      	movs	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
 8007a30:	6828      	ldr	r0, [r5, #0]
 8007a32:	f004 fa31 	bl	800be98 <lv_disp_is_double_buf>
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d002      	beq.n	8007a40 <lv_refr_vdb_flush+0x1c>
        while(vdb->flushing)
 8007a3a:	69a3      	ldr	r3, [r4, #24]
 8007a3c:	07db      	lsls	r3, r3, #31
 8007a3e:	d4fc      	bmi.n	8007a3a <lv_refr_vdb_flush+0x16>
            ;
    }

    vdb->flushing = 1;
 8007a40:	2301      	movs	r3, #1
 8007a42:	7e22      	ldrb	r2, [r4, #24]
    return disp_refr;
 8007a44:	6828      	ldr	r0, [r5, #0]
    vdb->flushing = 1;
 8007a46:	4313      	orrs	r3, r2
 8007a48:	7623      	strb	r3, [r4, #24]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
 8007a4a:	68c3      	ldr	r3, [r0, #12]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d003      	beq.n	8007a58 <lv_refr_vdb_flush+0x34>
 8007a50:	0021      	movs	r1, r4
 8007a52:	68a2      	ldr	r2, [r4, #8]
 8007a54:	3110      	adds	r1, #16
 8007a56:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
 8007a58:	6823      	ldr	r3, [r4, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d006      	beq.n	8007a6c <lv_refr_vdb_flush+0x48>
 8007a5e:	6862      	ldr	r2, [r4, #4]
 8007a60:	2a00      	cmp	r2, #0
 8007a62:	d003      	beq.n	8007a6c <lv_refr_vdb_flush+0x48>
        if(vdb->buf_act == vdb->buf1)
 8007a64:	68a1      	ldr	r1, [r4, #8]
 8007a66:	428b      	cmp	r3, r1
 8007a68:	d101      	bne.n	8007a6e <lv_refr_vdb_flush+0x4a>
            vdb->buf_act = vdb->buf2;
 8007a6a:	60a2      	str	r2, [r4, #8]
        else
            vdb->buf_act = vdb->buf1;
    }
}
 8007a6c:	bd70      	pop	{r4, r5, r6, pc}
            vdb->buf_act = vdb->buf1;
 8007a6e:	60a3      	str	r3, [r4, #8]
}
 8007a70:	e7fc      	b.n	8007a6c <lv_refr_vdb_flush+0x48>
 8007a72:	46c0      	nop			; (mov r8, r8)
 8007a74:	20001504 	.word	0x20001504

08007a78 <lv_refr_get_top_obj>:
{
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	000c      	movs	r4, r1
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8007a7c:	3110      	adds	r1, #16
{
 8007a7e:	0006      	movs	r6, r0
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8007a80:	f004 fbf7 	bl	800c272 <lv_area_is_in>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d101      	bne.n	8007a8c <lv_refr_get_top_obj+0x14>
    lv_obj_t * found_p = NULL;
 8007a88:	2000      	movs	r0, #0
}
 8007a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 8007a8c:	0023      	movs	r3, r4
 8007a8e:	3330      	adds	r3, #48	; 0x30
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	06db      	lsls	r3, r3, #27
 8007a94:	d4f8      	bmi.n	8007a88 <lv_refr_get_top_obj+0x10>
        LV_LL_READ(obj->child_ll, i)
 8007a96:	1d27      	adds	r7, r4, #4
 8007a98:	0038      	movs	r0, r7
 8007a9a:	f004 fd66 	bl	800c56a <lv_ll_get_head>
 8007a9e:	1e05      	subs	r5, r0, #0
 8007aa0:	d113      	bne.n	8007aca <lv_refr_get_top_obj+0x52>
            const lv_style_t * style = lv_obj_get_style(obj);
 8007aa2:	0020      	movs	r0, r4
 8007aa4:	f7ff fee8 	bl	8007878 <lv_obj_get_style>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 8007aa8:	7a03      	ldrb	r3, [r0, #8]
 8007aaa:	2bff      	cmp	r3, #255	; 0xff
 8007aac:	d1ec      	bne.n	8007a88 <lv_refr_get_top_obj+0x10>
 8007aae:	2202      	movs	r2, #2
 8007ab0:	0031      	movs	r1, r6
 8007ab2:	0020      	movs	r0, r4
 8007ab4:	6a23      	ldr	r3, [r4, #32]
 8007ab6:	4798      	blx	r3
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d0e5      	beq.n	8007a88 <lv_refr_get_top_obj+0x10>
               lv_obj_get_opa_scale(obj) == LV_OPA_COVER) {
 8007abc:	0020      	movs	r0, r4
 8007abe:	f7ff ff3a 	bl	8007936 <lv_obj_get_opa_scale>
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 8007ac2:	28ff      	cmp	r0, #255	; 0xff
 8007ac4:	d1e0      	bne.n	8007a88 <lv_refr_get_top_obj+0x10>
 8007ac6:	0020      	movs	r0, r4
    return found_p;
 8007ac8:	e7df      	b.n	8007a8a <lv_refr_get_top_obj+0x12>
            found_p = lv_refr_get_top_obj(area_p, i);
 8007aca:	0029      	movs	r1, r5
 8007acc:	0030      	movs	r0, r6
 8007ace:	f7ff ffd3 	bl	8007a78 <lv_refr_get_top_obj>
            if(found_p != NULL) {
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	d1d9      	bne.n	8007a8a <lv_refr_get_top_obj+0x12>
        LV_LL_READ(obj->child_ll, i)
 8007ad6:	0029      	movs	r1, r5
 8007ad8:	0038      	movs	r0, r7
 8007ada:	f004 fd4e 	bl	800c57a <lv_ll_get_next>
 8007ade:	e7de      	b.n	8007a9e <lv_refr_get_top_obj+0x26>

08007ae0 <lv_refr_obj>:
    if(obj->hidden != 0) return;
 8007ae0:	0003      	movs	r3, r0
 8007ae2:	3330      	adds	r3, #48	; 0x30
 8007ae4:	781a      	ldrb	r2, [r3, #0]
 8007ae6:	2310      	movs	r3, #16
{
 8007ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(obj->hidden != 0) return;
 8007aea:	401a      	ands	r2, r3
{
 8007aec:	b08d      	sub	sp, #52	; 0x34
 8007aee:	0005      	movs	r5, r0
 8007af0:	000f      	movs	r7, r1
    if(obj->hidden != 0) return;
 8007af2:	9201      	str	r2, [sp, #4]
 8007af4:	2a00      	cmp	r2, #0
 8007af6:	d134      	bne.n	8007b62 <lv_refr_obj+0x82>
    lv_obj_get_coords(obj, &obj_area);
 8007af8:	ac06      	add	r4, sp, #24
    lv_coord_t ext_size = obj->ext_draw_pad;
 8007afa:	2334      	movs	r3, #52	; 0x34
 8007afc:	5ec6      	ldrsh	r6, [r0, r3]
    lv_obj_get_coords(obj, &obj_area);
 8007afe:	0021      	movs	r1, r4
 8007b00:	f7ff fea4 	bl	800784c <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 8007b04:	8823      	ldrh	r3, [r4, #0]
 8007b06:	b2b6      	uxth	r6, r6
 8007b08:	1b9b      	subs	r3, r3, r6
 8007b0a:	8023      	strh	r3, [r4, #0]
    obj_area.y1 -= ext_size;
 8007b0c:	8863      	ldrh	r3, [r4, #2]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8007b0e:	0022      	movs	r2, r4
    obj_area.y1 -= ext_size;
 8007b10:	1b9b      	subs	r3, r3, r6
 8007b12:	8063      	strh	r3, [r4, #2]
    obj_area.x2 += ext_size;
 8007b14:	88a3      	ldrh	r3, [r4, #4]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8007b16:	0039      	movs	r1, r7
    obj_area.x2 += ext_size;
 8007b18:	18f3      	adds	r3, r6, r3
 8007b1a:	80a3      	strh	r3, [r4, #4]
    obj_area.y2 += ext_size;
 8007b1c:	88e3      	ldrh	r3, [r4, #6]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8007b1e:	a804      	add	r0, sp, #16
    obj_area.y2 += ext_size;
 8007b20:	18f6      	adds	r6, r6, r3
 8007b22:	80e6      	strh	r6, [r4, #6]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8007b24:	f004 fb2b 	bl	800c17e <lv_area_intersect>
    if(union_ok != false) {
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	d01a      	beq.n	8007b62 <lv_refr_obj+0x82>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 8007b2c:	9a01      	ldr	r2, [sp, #4]
 8007b2e:	a904      	add	r1, sp, #16
 8007b30:	6a2b      	ldr	r3, [r5, #32]
 8007b32:	0028      	movs	r0, r5
 8007b34:	4798      	blx	r3
        lv_obj_get_coords(obj, &obj_area);
 8007b36:	0021      	movs	r1, r4
 8007b38:	0028      	movs	r0, r5
 8007b3a:	f7ff fe87 	bl	800784c <lv_obj_get_coords>
        union_ok = lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 8007b3e:	0022      	movs	r2, r4
 8007b40:	0039      	movs	r1, r7
 8007b42:	a802      	add	r0, sp, #8
 8007b44:	f004 fb1b 	bl	800c17e <lv_area_intersect>
        if(union_ok != false) {
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	d005      	beq.n	8007b58 <lv_refr_obj+0x78>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 8007b4c:	1d2f      	adds	r7, r5, #4
 8007b4e:	0038      	movs	r0, r7
 8007b50:	f004 fd0f 	bl	800c572 <lv_ll_get_tail>
 8007b54:	1e06      	subs	r6, r0, #0
 8007b56:	d106      	bne.n	8007b66 <lv_refr_obj+0x86>
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 8007b58:	6a2b      	ldr	r3, [r5, #32]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	a904      	add	r1, sp, #16
 8007b5e:	0028      	movs	r0, r5
 8007b60:	4798      	blx	r3
}
 8007b62:	b00d      	add	sp, #52	; 0x34
 8007b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_get_coords(child_p, &child_area);
 8007b66:	ac0a      	add	r4, sp, #40	; 0x28
 8007b68:	0021      	movs	r1, r4
 8007b6a:	0030      	movs	r0, r6
 8007b6c:	f7ff fe6e 	bl	800784c <lv_obj_get_coords>
                child_area.x1 -= ext_size;
 8007b70:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
 8007b72:	8822      	ldrh	r2, [r4, #0]
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007b74:	a902      	add	r1, sp, #8
                child_area.x1 -= ext_size;
 8007b76:	1ad2      	subs	r2, r2, r3
 8007b78:	8022      	strh	r2, [r4, #0]
                child_area.y1 -= ext_size;
 8007b7a:	8862      	ldrh	r2, [r4, #2]
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007b7c:	a808      	add	r0, sp, #32
                child_area.y1 -= ext_size;
 8007b7e:	1ad2      	subs	r2, r2, r3
 8007b80:	8062      	strh	r2, [r4, #2]
                child_area.x2 += ext_size;
 8007b82:	88a2      	ldrh	r2, [r4, #4]
 8007b84:	189a      	adds	r2, r3, r2
 8007b86:	80a2      	strh	r2, [r4, #4]
                child_area.y2 += ext_size;
 8007b88:	88e2      	ldrh	r2, [r4, #6]
 8007b8a:	189b      	adds	r3, r3, r2
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007b8c:	0022      	movs	r2, r4
                child_area.y2 += ext_size;
 8007b8e:	80e3      	strh	r3, [r4, #6]
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007b90:	f004 faf5 	bl	800c17e <lv_area_intersect>
                if(union_ok) {
 8007b94:	2800      	cmp	r0, #0
 8007b96:	d003      	beq.n	8007ba0 <lv_refr_obj+0xc0>
                    lv_refr_obj(child_p, &mask_child);
 8007b98:	a908      	add	r1, sp, #32
 8007b9a:	0030      	movs	r0, r6
 8007b9c:	f7ff ffa0 	bl	8007ae0 <lv_refr_obj>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 8007ba0:	0031      	movs	r1, r6
 8007ba2:	0038      	movs	r0, r7
 8007ba4:	f004 fcf7 	bl	800c596 <lv_ll_get_prev>
 8007ba8:	e7d4      	b.n	8007b54 <lv_refr_obj+0x74>
	...

08007bac <lv_refr_obj_and_children>:
{
 8007bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bae:	0005      	movs	r5, r0
 8007bb0:	000e      	movs	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	d104      	bne.n	8007bc0 <lv_refr_obj_and_children+0x14>
 8007bb6:	4b12      	ldr	r3, [pc, #72]	; (8007c00 <lv_refr_obj_and_children+0x54>)
 8007bb8:	6818      	ldr	r0, [r3, #0]
 8007bba:	f7fe ff84 	bl	8006ac6 <lv_disp_get_scr_act>
 8007bbe:	0005      	movs	r5, r0
    lv_refr_obj(top_p, mask_p);
 8007bc0:	0028      	movs	r0, r5
 8007bc2:	0031      	movs	r1, r6
 8007bc4:	f7ff ff8c 	bl	8007ae0 <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
 8007bc8:	0028      	movs	r0, r5
 8007bca:	f7ff fe0a 	bl	80077e2 <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
 8007bce:	1e04      	subs	r4, r0, #0
    while(par != NULL) {
 8007bd0:	d100      	bne.n	8007bd4 <lv_refr_obj_and_children+0x28>
}
 8007bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * i = lv_ll_get_prev(&(par->child_ll), border_p);
 8007bd4:	1d27      	adds	r7, r4, #4
            i = lv_ll_get_prev(&(par->child_ll), i);
 8007bd6:	0029      	movs	r1, r5
 8007bd8:	0038      	movs	r0, r7
 8007bda:	f004 fcdc 	bl	800c596 <lv_ll_get_prev>
 8007bde:	1e05      	subs	r5, r0, #0
        while(i != NULL) {
 8007be0:	d109      	bne.n	8007bf6 <lv_refr_obj_and_children+0x4a>
        par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
 8007be2:	2201      	movs	r2, #1
 8007be4:	0031      	movs	r1, r6
 8007be6:	6a23      	ldr	r3, [r4, #32]
 8007be8:	0020      	movs	r0, r4
 8007bea:	4798      	blx	r3
        par = lv_obj_get_parent(par);
 8007bec:	0020      	movs	r0, r4
 8007bee:	f7ff fdf8 	bl	80077e2 <lv_obj_get_parent>
 8007bf2:	0025      	movs	r5, r4
 8007bf4:	e7eb      	b.n	8007bce <lv_refr_obj_and_children+0x22>
            lv_refr_obj(i, mask_p);
 8007bf6:	0031      	movs	r1, r6
 8007bf8:	0028      	movs	r0, r5
 8007bfa:	f7ff ff71 	bl	8007ae0 <lv_refr_obj>
 8007bfe:	e7ea      	b.n	8007bd6 <lv_refr_obj_and_children+0x2a>
 8007c00:	20001504 	.word	0x20001504

08007c04 <lv_refr_area_part>:
{
 8007c04:	b573      	push	{r0, r1, r4, r5, r6, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007c06:	4c19      	ldr	r4, [pc, #100]	; (8007c6c <lv_refr_area_part+0x68>)
{
 8007c08:	0006      	movs	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007c0a:	6820      	ldr	r0, [r4, #0]
 8007c0c:	f004 f942 	bl	800be94 <lv_disp_get_buf>
 8007c10:	0005      	movs	r5, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
 8007c12:	6820      	ldr	r0, [r4, #0]
 8007c14:	f004 f940 	bl	800be98 <lv_disp_is_double_buf>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d102      	bne.n	8007c22 <lv_refr_area_part+0x1e>
        while(vdb->flushing)
 8007c1c:	69ab      	ldr	r3, [r5, #24]
 8007c1e:	07db      	lsls	r3, r3, #31
 8007c20:	d4fc      	bmi.n	8007c1c <lv_refr_area_part+0x18>
    lv_area_intersect(&start_mask, area_p, &vdb->area);
 8007c22:	002a      	movs	r2, r5
 8007c24:	0031      	movs	r1, r6
 8007c26:	3210      	adds	r2, #16
 8007c28:	4668      	mov	r0, sp
 8007c2a:	f004 faa8 	bl	800c17e <lv_area_intersect>
    top_p = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 8007c2e:	6820      	ldr	r0, [r4, #0]
 8007c30:	f7fe ff49 	bl	8006ac6 <lv_disp_get_scr_act>
 8007c34:	0001      	movs	r1, r0
 8007c36:	4668      	mov	r0, sp
 8007c38:	f7ff ff1e 	bl	8007a78 <lv_refr_get_top_obj>
    lv_refr_obj_and_children(top_p, &start_mask);
 8007c3c:	4669      	mov	r1, sp
 8007c3e:	f7ff ffb5 	bl	8007bac <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 8007c42:	6820      	ldr	r0, [r4, #0]
 8007c44:	f7fe ff49 	bl	8006ada <lv_disp_get_layer_top>
 8007c48:	4669      	mov	r1, sp
 8007c4a:	f7ff ffaf 	bl	8007bac <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 8007c4e:	6820      	ldr	r0, [r4, #0]
 8007c50:	f7fe ff4d 	bl	8006aee <lv_disp_get_layer_sys>
 8007c54:	4669      	mov	r1, sp
 8007c56:	f7ff ffa9 	bl	8007bac <lv_refr_obj_and_children>
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
 8007c5a:	6820      	ldr	r0, [r4, #0]
 8007c5c:	f004 f925 	bl	800beaa <lv_disp_is_true_double_buf>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d101      	bne.n	8007c68 <lv_refr_area_part+0x64>
        lv_refr_vdb_flush();
 8007c64:	f7ff fede 	bl	8007a24 <lv_refr_vdb_flush>
}
 8007c68:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8007c6a:	46c0      	nop			; (mov r8, r8)
 8007c6c:	20001504 	.word	0x20001504

08007c70 <lv_refr_init>:
}
 8007c70:	4770      	bx	lr

08007c72 <lv_inv_area>:
{
 8007c72:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007c74:	0004      	movs	r4, r0
 8007c76:	000d      	movs	r5, r1
    if(!disp) disp = lv_disp_get_default();
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	d103      	bne.n	8007c84 <lv_inv_area+0x12>
 8007c7c:	f004 f8cc 	bl	800be18 <lv_disp_get_default>
 8007c80:	1e04      	subs	r4, r0, #0
    if(!disp) return;
 8007c82:	d007      	beq.n	8007c94 <lv_inv_area+0x22>
    if(area_p == NULL) {
 8007c84:	2d00      	cmp	r5, #0
 8007c86:	d106      	bne.n	8007c96 <lv_inv_area+0x24>
        disp->inv_p = 0;
 8007c88:	22b2      	movs	r2, #178	; 0xb2
 8007c8a:	0052      	lsls	r2, r2, #1
 8007c8c:	5aa3      	ldrh	r3, [r4, r2]
 8007c8e:	0a9b      	lsrs	r3, r3, #10
 8007c90:	029b      	lsls	r3, r3, #10
 8007c92:	52a3      	strh	r3, [r4, r2]
}
 8007c94:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    scr_area.x1 = 0;
 8007c96:	466a      	mov	r2, sp
 8007c98:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8007c9a:	0020      	movs	r0, r4
    scr_area.x1 = 0;
 8007c9c:	8013      	strh	r3, [r2, #0]
    scr_area.y1 = 0;
 8007c9e:	8053      	strh	r3, [r2, #2]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8007ca0:	f004 f8c0 	bl	800be24 <lv_disp_get_hor_res>
 8007ca4:	466b      	mov	r3, sp
 8007ca6:	3801      	subs	r0, #1
 8007ca8:	8098      	strh	r0, [r3, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 8007caa:	0020      	movs	r0, r4
 8007cac:	f004 f8cc 	bl	800be48 <lv_disp_get_ver_res>
 8007cb0:	466b      	mov	r3, sp
 8007cb2:	3801      	subs	r0, #1
 8007cb4:	80d8      	strh	r0, [r3, #6]
    suc = lv_area_intersect(&com_area, area_p, &scr_area);
 8007cb6:	466a      	mov	r2, sp
 8007cb8:	0029      	movs	r1, r5
 8007cba:	a802      	add	r0, sp, #8
 8007cbc:	f004 fa5f 	bl	800c17e <lv_area_intersect>
    if(suc != false) {
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	d0e7      	beq.n	8007c94 <lv_inv_area+0x22>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
 8007cc4:	6923      	ldr	r3, [r4, #16]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d002      	beq.n	8007cd0 <lv_inv_area+0x5e>
 8007cca:	a902      	add	r1, sp, #8
 8007ccc:	0020      	movs	r0, r4
 8007cce:	4798      	blx	r3
        for(i = 0; i < disp->inv_p; i++) {
 8007cd0:	26b2      	movs	r6, #178	; 0xb2
{
 8007cd2:	2500      	movs	r5, #0
        for(i = 0; i < disp->inv_p; i++) {
 8007cd4:	0076      	lsls	r6, r6, #1
 8007cd6:	5ba0      	ldrh	r0, [r4, r6]
 8007cd8:	1c03      	adds	r3, r0, #0
 8007cda:	0580      	lsls	r0, r0, #22
 8007cdc:	0d80      	lsrs	r0, r0, #22
 8007cde:	4285      	cmp	r5, r0
 8007ce0:	db15      	blt.n	8007d0e <lv_inv_area+0x9c>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
 8007ce2:	281f      	cmp	r0, #31
 8007ce4:	dc1e      	bgt.n	8007d24 <lv_inv_area+0xb2>
 8007ce6:	2208      	movs	r2, #8
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 8007ce8:	00c0      	lsls	r0, r0, #3
 8007cea:	3044      	adds	r0, #68	; 0x44
 8007cec:	1820      	adds	r0, r4, r0
 8007cee:	a902      	add	r1, sp, #8
 8007cf0:	f006 fa4c 	bl	800e18c <memcpy>
        disp->inv_p++;
 8007cf4:	21b2      	movs	r1, #178	; 0xb2
 8007cf6:	2080      	movs	r0, #128	; 0x80
 8007cf8:	0049      	lsls	r1, r1, #1
 8007cfa:	5a63      	ldrh	r3, [r4, r1]
 8007cfc:	03c0      	lsls	r0, r0, #15
 8007cfe:	059a      	lsls	r2, r3, #22
 8007d00:	1812      	adds	r2, r2, r0
 8007d02:	0a9b      	lsrs	r3, r3, #10
 8007d04:	0d92      	lsrs	r2, r2, #22
 8007d06:	029b      	lsls	r3, r3, #10
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	5263      	strh	r3, [r4, r1]
 8007d0c:	e7c2      	b.n	8007c94 <lv_inv_area+0x22>
            if(lv_area_is_in(&com_area, &disp->inv_areas[i]) != false) return;
 8007d0e:	00e9      	lsls	r1, r5, #3
 8007d10:	3144      	adds	r1, #68	; 0x44
 8007d12:	1861      	adds	r1, r4, r1
 8007d14:	a802      	add	r0, sp, #8
 8007d16:	f004 faac 	bl	800c272 <lv_area_is_in>
 8007d1a:	2800      	cmp	r0, #0
 8007d1c:	d1ba      	bne.n	8007c94 <lv_inv_area+0x22>
        for(i = 0; i < disp->inv_p; i++) {
 8007d1e:	3501      	adds	r5, #1
 8007d20:	b2ad      	uxth	r5, r5
 8007d22:	e7d8      	b.n	8007cd6 <lv_inv_area+0x64>
 8007d24:	0020      	movs	r0, r4
            disp->inv_p = 0;
 8007d26:	0a9b      	lsrs	r3, r3, #10
 8007d28:	029b      	lsls	r3, r3, #10
 8007d2a:	53a3      	strh	r3, [r4, r6]
 8007d2c:	2208      	movs	r2, #8
 8007d2e:	4669      	mov	r1, sp
 8007d30:	3044      	adds	r0, #68	; 0x44
 8007d32:	e7dd      	b.n	8007cf0 <lv_inv_area+0x7e>

08007d34 <lv_refr_get_disp_refreshing>:
    return disp_refr;
 8007d34:	4b01      	ldr	r3, [pc, #4]	; (8007d3c <lv_refr_get_disp_refreshing+0x8>)
 8007d36:	6818      	ldr	r0, [r3, #0]
}
 8007d38:	4770      	bx	lr
 8007d3a:	46c0      	nop			; (mov r8, r8)
 8007d3c:	20001504 	.word	0x20001504

08007d40 <lv_disp_refr_task>:
{
 8007d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d42:	0004      	movs	r4, r0
 8007d44:	b08b      	sub	sp, #44	; 0x2c
    uint32_t start = lv_tick_get();
 8007d46:	f004 f8d1 	bl	800beec <lv_tick_get>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8007d4a:	2700      	movs	r7, #0
    disp_refr = task->user_data;
 8007d4c:	68e2      	ldr	r2, [r4, #12]
 8007d4e:	4bc2      	ldr	r3, [pc, #776]	; (8008058 <lv_disp_refr_task+0x318>)
    uint32_t start = lv_tick_get();
 8007d50:	9006      	str	r0, [sp, #24]
    disp_refr = task->user_data;
 8007d52:	601a      	str	r2, [r3, #0]
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8007d54:	22b2      	movs	r2, #178	; 0xb2
 8007d56:	4bc0      	ldr	r3, [pc, #768]	; (8008058 <lv_disp_refr_task+0x318>)
 8007d58:	0052      	lsls	r2, r2, #1
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	5a9a      	ldrh	r2, [r3, r2]
 8007d5e:	0592      	lsls	r2, r2, #22
 8007d60:	0d92      	lsrs	r2, r2, #22
 8007d62:	4297      	cmp	r7, r2
 8007d64:	d334      	bcc.n	8007dd0 <lv_disp_refr_task+0x90>
    px_num = 0;
 8007d66:	2300      	movs	r3, #0
 8007d68:	4abc      	ldr	r2, [pc, #752]	; (800805c <lv_disp_refr_task+0x31c>)
 8007d6a:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8007d6c:	9302      	str	r3, [sp, #8]
 8007d6e:	23b2      	movs	r3, #178	; 0xb2
 8007d70:	4db9      	ldr	r5, [pc, #740]	; (8008058 <lv_disp_refr_task+0x318>)
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	682c      	ldr	r4, [r5, #0]
 8007d76:	9902      	ldr	r1, [sp, #8]
 8007d78:	5ae3      	ldrh	r3, [r4, r3]
 8007d7a:	059b      	lsls	r3, r3, #22
 8007d7c:	0d9a      	lsrs	r2, r3, #22
 8007d7e:	4291      	cmp	r1, r2
 8007d80:	d200      	bcs.n	8007d84 <lv_disp_refr_task+0x44>
 8007d82:	e072      	b.n	8007e6a <lv_disp_refr_task+0x12a>
    if(disp_refr->inv_p != 0) {
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d01f      	beq.n	8007dc8 <lv_disp_refr_task+0x88>
        if(lv_disp_is_true_double_buf(disp_refr)) {
 8007d88:	0020      	movs	r0, r4
 8007d8a:	f004 f88e 	bl	800beaa <lv_disp_is_true_double_buf>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	d000      	beq.n	8007d94 <lv_disp_refr_task+0x54>
 8007d92:	e133      	b.n	8007ffc <lv_disp_refr_task+0x2bc>
        memset(disp_refr->inv_areas, 0, sizeof(disp_refr->inv_areas));
 8007d94:	4bb0      	ldr	r3, [pc, #704]	; (8008058 <lv_disp_refr_task+0x318>)
 8007d96:	2280      	movs	r2, #128	; 0x80
 8007d98:	681c      	ldr	r4, [r3, #0]
 8007d9a:	0052      	lsls	r2, r2, #1
 8007d9c:	0020      	movs	r0, r4
 8007d9e:	2100      	movs	r1, #0
 8007da0:	3044      	adds	r0, #68	; 0x44
 8007da2:	f006 f9fc 	bl	800e19e <memset>
        memset(disp_refr->inv_area_joined, 0, sizeof(disp_refr->inv_area_joined));
 8007da6:	0020      	movs	r0, r4
 8007da8:	3045      	adds	r0, #69	; 0x45
 8007daa:	2220      	movs	r2, #32
 8007dac:	30ff      	adds	r0, #255	; 0xff
 8007dae:	2100      	movs	r1, #0
 8007db0:	f006 f9f5 	bl	800e19e <memset>
        disp_refr->inv_p = 0;
 8007db4:	22b2      	movs	r2, #178	; 0xb2
 8007db6:	0052      	lsls	r2, r2, #1
 8007db8:	5aa3      	ldrh	r3, [r4, r2]
 8007dba:	0a9b      	lsrs	r3, r3, #10
 8007dbc:	029b      	lsls	r3, r3, #10
 8007dbe:	52a3      	strh	r3, [r4, r2]
        if(disp_refr->driver.monitor_cb) {
 8007dc0:	69a5      	ldr	r5, [r4, #24]
 8007dc2:	2d00      	cmp	r5, #0
 8007dc4:	d000      	beq.n	8007dc8 <lv_disp_refr_task+0x88>
 8007dc6:	e178      	b.n	80080ba <lv_disp_refr_task+0x37a>
    lv_draw_free_buf();
 8007dc8:	f000 fda2 	bl	8008910 <lv_draw_free_buf>
}
 8007dcc:	b00b      	add	sp, #44	; 0x2c
 8007dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 8007dd0:	19db      	adds	r3, r3, r7
 8007dd2:	3345      	adds	r3, #69	; 0x45
 8007dd4:	33ff      	adds	r3, #255	; 0xff
 8007dd6:	781c      	ldrb	r4, [r3, #0]
 8007dd8:	2c00      	cmp	r4, #0
 8007dda:	d10a      	bne.n	8007df2 <lv_disp_refr_task+0xb2>
 8007ddc:	00fe      	lsls	r6, r7, #3
 8007dde:	3644      	adds	r6, #68	; 0x44
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8007de0:	23b2      	movs	r3, #178	; 0xb2
 8007de2:	4d9d      	ldr	r5, [pc, #628]	; (8008058 <lv_disp_refr_task+0x318>)
 8007de4:	005b      	lsls	r3, r3, #1
 8007de6:	6828      	ldr	r0, [r5, #0]
 8007de8:	5ac3      	ldrh	r3, [r0, r3]
 8007dea:	059b      	lsls	r3, r3, #22
 8007dec:	0d9b      	lsrs	r3, r3, #22
 8007dee:	429c      	cmp	r4, r3
 8007df0:	d301      	bcc.n	8007df6 <lv_disp_refr_task+0xb6>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8007df2:	3701      	adds	r7, #1
 8007df4:	e7ae      	b.n	8007d54 <lv_disp_refr_task+0x14>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 8007df6:	1903      	adds	r3, r0, r4
 8007df8:	3345      	adds	r3, #69	; 0x45
 8007dfa:	33ff      	adds	r3, #255	; 0xff
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d131      	bne.n	8007e66 <lv_disp_refr_task+0x126>
 8007e02:	42a7      	cmp	r7, r4
 8007e04:	d02f      	beq.n	8007e66 <lv_disp_refr_task+0x126>
 8007e06:	00e3      	lsls	r3, r4, #3
 8007e08:	3344      	adds	r3, #68	; 0x44
            if(lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 8007e0a:	18c1      	adds	r1, r0, r3
 8007e0c:	1980      	adds	r0, r0, r6
 8007e0e:	9301      	str	r3, [sp, #4]
 8007e10:	f004 fa10 	bl	800c234 <lv_area_is_on>
 8007e14:	2800      	cmp	r0, #0
 8007e16:	d026      	beq.n	8007e66 <lv_disp_refr_task+0x126>
            lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 8007e18:	9b01      	ldr	r3, [sp, #4]
 8007e1a:	6829      	ldr	r1, [r5, #0]
 8007e1c:	a808      	add	r0, sp, #32
 8007e1e:	18ca      	adds	r2, r1, r3
 8007e20:	1989      	adds	r1, r1, r6
 8007e22:	f004 f9e1 	bl	800c1e8 <lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8007e26:	a808      	add	r0, sp, #32
 8007e28:	f004 f99b 	bl	800c162 <lv_area_get_size>
 8007e2c:	682b      	ldr	r3, [r5, #0]
 8007e2e:	9002      	str	r0, [sp, #8]
 8007e30:	1998      	adds	r0, r3, r6
 8007e32:	f004 f996 	bl	800c162 <lv_area_get_size>
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 8007e36:	682a      	ldr	r2, [r5, #0]
 8007e38:	9b01      	ldr	r3, [sp, #4]
 8007e3a:	4694      	mov	ip, r2
 8007e3c:	4463      	add	r3, ip
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8007e3e:	9003      	str	r0, [sp, #12]
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 8007e40:	0018      	movs	r0, r3
 8007e42:	f004 f98e 	bl	800c162 <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8007e46:	9b03      	ldr	r3, [sp, #12]
 8007e48:	9a02      	ldr	r2, [sp, #8]
 8007e4a:	181b      	adds	r3, r3, r0
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d20a      	bcs.n	8007e66 <lv_disp_refr_task+0x126>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 8007e50:	682d      	ldr	r5, [r5, #0]
 8007e52:	2208      	movs	r2, #8
 8007e54:	19a8      	adds	r0, r5, r6
 8007e56:	a908      	add	r1, sp, #32
 8007e58:	f006 f998 	bl	800e18c <memcpy>
                disp_refr->inv_area_joined[join_from] = 1;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	192d      	adds	r5, r5, r4
 8007e60:	3545      	adds	r5, #69	; 0x45
 8007e62:	35ff      	adds	r5, #255	; 0xff
 8007e64:	702b      	strb	r3, [r5, #0]
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8007e66:	3401      	adds	r4, #1
 8007e68:	e7ba      	b.n	8007de0 <lv_disp_refr_task+0xa0>
        if(disp_refr->inv_area_joined[i] == 0) {
 8007e6a:	9b02      	ldr	r3, [sp, #8]
 8007e6c:	18e3      	adds	r3, r4, r3
 8007e6e:	3345      	adds	r3, #69	; 0x45
 8007e70:	33ff      	adds	r3, #255	; 0xff
 8007e72:	781e      	ldrb	r6, [r3, #0]
 8007e74:	2e00      	cmp	r6, #0
 8007e76:	d175      	bne.n	8007f64 <lv_disp_refr_task+0x224>
 8007e78:	9b02      	ldr	r3, [sp, #8]
    if(lv_disp_is_true_double_buf(disp_refr)) {
 8007e7a:	0020      	movs	r0, r4
 8007e7c:	00db      	lsls	r3, r3, #3
 8007e7e:	9304      	str	r3, [sp, #16]
 8007e80:	3344      	adds	r3, #68	; 0x44
 8007e82:	9305      	str	r3, [sp, #20]
            lv_refr_area(&disp_refr->inv_areas[i]);
 8007e84:	18e3      	adds	r3, r4, r3
 8007e86:	9301      	str	r3, [sp, #4]
    if(lv_disp_is_true_double_buf(disp_refr)) {
 8007e88:	f004 f80f 	bl	800beaa <lv_disp_is_true_double_buf>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d013      	beq.n	8007eb8 <lv_disp_refr_task+0x178>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007e90:	6828      	ldr	r0, [r5, #0]
 8007e92:	f003 ffff 	bl	800be94 <lv_disp_get_buf>
 8007e96:	0004      	movs	r4, r0
        vdb->area.x1        = 0;
 8007e98:	8206      	strh	r6, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 8007e9a:	6828      	ldr	r0, [r5, #0]
 8007e9c:	f003 ffc2 	bl	800be24 <lv_disp_get_hor_res>
 8007ea0:	3801      	subs	r0, #1
 8007ea2:	82a0      	strh	r0, [r4, #20]
        vdb->area.y1        = 0;
 8007ea4:	8266      	strh	r6, [r4, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 8007ea6:	6828      	ldr	r0, [r5, #0]
 8007ea8:	f003 ffce 	bl	800be48 <lv_disp_get_ver_res>
 8007eac:	3801      	subs	r0, #1
 8007eae:	82e0      	strh	r0, [r4, #22]
            lv_refr_area_part(area_p);
 8007eb0:	9801      	ldr	r0, [sp, #4]
 8007eb2:	f7ff fea7 	bl	8007c04 <lv_refr_area_part>
 8007eb6:	e048      	b.n	8007f4a <lv_disp_refr_task+0x20a>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007eb8:	6828      	ldr	r0, [r5, #0]
 8007eba:	f003 ffeb 	bl	800be94 <lv_disp_get_buf>
    return area_p->x2 - area_p->x1 + 1;
 8007ebe:	9b01      	ldr	r3, [sp, #4]
 8007ec0:	9a01      	ldr	r2, [sp, #4]
 8007ec2:	889b      	ldrh	r3, [r3, #4]
 8007ec4:	8812      	ldrh	r2, [r2, #0]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	1a9b      	subs	r3, r3, r2
 8007eca:	b21b      	sxth	r3, r3
 8007ecc:	9307      	str	r3, [sp, #28]
 8007ece:	9b01      	ldr	r3, [sp, #4]
 8007ed0:	0006      	movs	r6, r0
 8007ed2:	2206      	movs	r2, #6
 8007ed4:	5e9b      	ldrsh	r3, [r3, r2]
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 8007ed6:	6828      	ldr	r0, [r5, #0]
 8007ed8:	9303      	str	r3, [sp, #12]
    return area_p->y2 - area_p->y1 + 1;
 8007eda:	1c5f      	adds	r7, r3, #1
 8007edc:	9b01      	ldr	r3, [sp, #4]
 8007ede:	885b      	ldrh	r3, [r3, #2]
 8007ee0:	1aff      	subs	r7, r7, r3
 8007ee2:	f003 ffb1 	bl	800be48 <lv_disp_get_ver_res>
        lv_coord_t y2 =
 8007ee6:	9b03      	ldr	r3, [sp, #12]
 8007ee8:	b23f      	sxth	r7, r7
 8007eea:	4283      	cmp	r3, r0
 8007eec:	db3d      	blt.n	8007f6a <lv_disp_refr_task+0x22a>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 8007eee:	6828      	ldr	r0, [r5, #0]
 8007ef0:	f003 ffaa 	bl	800be48 <lv_disp_get_ver_res>
 8007ef4:	3801      	subs	r0, #1
 8007ef6:	b203      	sxth	r3, r0
        int32_t max_row = (uint32_t)vdb->size / w;
 8007ef8:	9907      	ldr	r1, [sp, #28]
 8007efa:	68f0      	ldr	r0, [r6, #12]
        lv_coord_t y2 =
 8007efc:	9303      	str	r3, [sp, #12]
        int32_t max_row = (uint32_t)vdb->size / w;
 8007efe:	f7f8 f92f 	bl	8000160 <__udivsi3>
 8007f02:	4287      	cmp	r7, r0
 8007f04:	dd00      	ble.n	8007f08 <lv_disp_refr_task+0x1c8>
 8007f06:	0007      	movs	r7, r0
        if(disp_refr->driver.rounder_cb) {
 8007f08:	4b53      	ldr	r3, [pc, #332]	; (8008058 <lv_disp_refr_task+0x318>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d035      	beq.n	8007f7e <lv_disp_refr_task+0x23e>
            tmp.x1 = 0;
 8007f12:	2300      	movs	r3, #0
 8007f14:	aa08      	add	r2, sp, #32
            lv_coord_t y_tmp = max_row - 1;
 8007f16:	1e7d      	subs	r5, r7, #1
            tmp.x1 = 0;
 8007f18:	8013      	strh	r3, [r2, #0]
            tmp.x2 = 0;
 8007f1a:	8093      	strh	r3, [r2, #4]
            tmp.y1 = 0;
 8007f1c:	8053      	strh	r3, [r2, #2]
            lv_coord_t y_tmp = max_row - 1;
 8007f1e:	b22d      	sxth	r5, r5
                tmp.y2 = y_tmp;
 8007f20:	ab08      	add	r3, sp, #32
 8007f22:	80dd      	strh	r5, [r3, #6]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 8007f24:	4b4c      	ldr	r3, [pc, #304]	; (8008058 <lv_disp_refr_task+0x318>)
 8007f26:	a908      	add	r1, sp, #32
 8007f28:	6818      	ldr	r0, [r3, #0]
 8007f2a:	6903      	ldr	r3, [r0, #16]
 8007f2c:	4798      	blx	r3
 8007f2e:	ab08      	add	r3, sp, #32
 8007f30:	2206      	movs	r2, #6
 8007f32:	5e9a      	ldrsh	r2, [r3, r2]
 8007f34:	ab08      	add	r3, sp, #32
 8007f36:	885b      	ldrh	r3, [r3, #2]
 8007f38:	3201      	adds	r2, #1
 8007f3a:	1ad3      	subs	r3, r2, r3
                if(lv_area_get_height(&tmp) <= max_row) break;
 8007f3c:	b21b      	sxth	r3, r3
 8007f3e:	42bb      	cmp	r3, r7
 8007f40:	dd1a      	ble.n	8007f78 <lv_disp_refr_task+0x238>
 8007f42:	3d01      	subs	r5, #1
 8007f44:	b22d      	sxth	r5, r5
            } while(y_tmp != 0);
 8007f46:	2d00      	cmp	r5, #0
 8007f48:	d1ea      	bne.n	8007f20 <lv_disp_refr_task+0x1e0>
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 8007f4a:	4b43      	ldr	r3, [pc, #268]	; (8008058 <lv_disp_refr_task+0x318>)
 8007f4c:	6818      	ldr	r0, [r3, #0]
 8007f4e:	6983      	ldr	r3, [r0, #24]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d007      	beq.n	8007f64 <lv_disp_refr_task+0x224>
 8007f54:	9b05      	ldr	r3, [sp, #20]
 8007f56:	18c0      	adds	r0, r0, r3
 8007f58:	f004 f903 	bl	800c162 <lv_area_get_size>
 8007f5c:	4b3f      	ldr	r3, [pc, #252]	; (800805c <lv_disp_refr_task+0x31c>)
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	1810      	adds	r0, r2, r0
 8007f62:	6018      	str	r0, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8007f64:	9b02      	ldr	r3, [sp, #8]
 8007f66:	3301      	adds	r3, #1
 8007f68:	e700      	b.n	8007d6c <lv_disp_refr_task+0x2c>
        lv_coord_t y2 =
 8007f6a:	9b02      	ldr	r3, [sp, #8]
 8007f6c:	3308      	adds	r3, #8
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	18e3      	adds	r3, r4, r3
 8007f72:	220a      	movs	r2, #10
 8007f74:	5e9b      	ldrsh	r3, [r3, r2]
 8007f76:	e7bf      	b.n	8007ef8 <lv_disp_refr_task+0x1b8>
            if(y_tmp == 0) {
 8007f78:	2d00      	cmp	r5, #0
 8007f7a:	d0e6      	beq.n	8007f4a <lv_disp_refr_task+0x20a>
                max_row = tmp.y2 + 1;
 8007f7c:	0017      	movs	r7, r2
 8007f7e:	9b04      	ldr	r3, [sp, #16]
 8007f80:	18e4      	adds	r4, r4, r3
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8007f82:	0023      	movs	r3, r4
 8007f84:	3308      	adds	r3, #8
 8007f86:	253e      	movs	r5, #62	; 0x3e
 8007f88:	5f5d      	ldrsh	r5, [r3, r5]
        lv_coord_t row_last = 0;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	9304      	str	r3, [sp, #16]
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8007f8e:	19eb      	adds	r3, r5, r7
 8007f90:	9a03      	ldr	r2, [sp, #12]
 8007f92:	3b01      	subs	r3, #1
 8007f94:	4293      	cmp	r3, r2
 8007f96:	dd10      	ble.n	8007fba <lv_disp_refr_task+0x27a>
        if(y2 != row_last) {
 8007f98:	0013      	movs	r3, r2
 8007f9a:	9a04      	ldr	r2, [sp, #16]
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d0d4      	beq.n	8007f4a <lv_disp_refr_task+0x20a>
            vdb->area.x1 = area_p->x1;
 8007fa0:	1da3      	adds	r3, r4, #6
 8007fa2:	223e      	movs	r2, #62	; 0x3e
 8007fa4:	5e9b      	ldrsh	r3, [r3, r2]
            vdb->area.x2 = area_p->x2;
 8007fa6:	3448      	adds	r4, #72	; 0x48
            vdb->area.x1 = area_p->x1;
 8007fa8:	8233      	strh	r3, [r6, #16]
            vdb->area.x2 = area_p->x2;
 8007faa:	2200      	movs	r2, #0
 8007fac:	5ea3      	ldrsh	r3, [r4, r2]
            vdb->area.y1 = row;
 8007fae:	8275      	strh	r5, [r6, #18]
            vdb->area.x2 = area_p->x2;
 8007fb0:	82b3      	strh	r3, [r6, #20]
            vdb->area.y2 = y2;
 8007fb2:	466b      	mov	r3, sp
 8007fb4:	899b      	ldrh	r3, [r3, #12]
 8007fb6:	82f3      	strh	r3, [r6, #22]
 8007fb8:	e77a      	b.n	8007eb0 <lv_disp_refr_task+0x170>
            vdb->area.x1 = area_p->x1;
 8007fba:	1da3      	adds	r3, r4, #6
 8007fbc:	223e      	movs	r2, #62	; 0x3e
 8007fbe:	5e9b      	ldrsh	r3, [r3, r2]
 8007fc0:	8233      	strh	r3, [r6, #16]
            vdb->area.x2 = area_p->x2;
 8007fc2:	0023      	movs	r3, r4
 8007fc4:	3348      	adds	r3, #72	; 0x48
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	5e9b      	ldrsh	r3, [r3, r2]
            vdb->area.y1 = row;
 8007fca:	8275      	strh	r5, [r6, #18]
            vdb->area.x2 = area_p->x2;
 8007fcc:	82b3      	strh	r3, [r6, #20]
            vdb->area.y2 = row + max_row - 1;
 8007fce:	b2bb      	uxth	r3, r7
 8007fd0:	9304      	str	r3, [sp, #16]
 8007fd2:	b2ad      	uxth	r5, r5
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	18eb      	adds	r3, r5, r3
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
 8007fd8:	9a03      	ldr	r2, [sp, #12]
 8007fda:	b21b      	sxth	r3, r3
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	db0a      	blt.n	8007ff6 <lv_disp_refr_task+0x2b6>
 8007fe0:	82f3      	strh	r3, [r6, #22]
            row_last = vdb->area.y2;
 8007fe2:	2216      	movs	r2, #22
 8007fe4:	5eb3      	ldrsh	r3, [r6, r2]
            lv_refr_area_part(area_p);
 8007fe6:	9801      	ldr	r0, [sp, #4]
            row_last = vdb->area.y2;
 8007fe8:	9304      	str	r3, [sp, #16]
            lv_refr_area_part(area_p);
 8007fea:	f7ff fe0b 	bl	8007c04 <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8007fee:	b2bb      	uxth	r3, r7
 8007ff0:	195d      	adds	r5, r3, r5
 8007ff2:	b22d      	sxth	r5, r5
 8007ff4:	e7cb      	b.n	8007f8e <lv_disp_refr_task+0x24e>
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
 8007ff6:	466b      	mov	r3, sp
 8007ff8:	899b      	ldrh	r3, [r3, #12]
 8007ffa:	e7f1      	b.n	8007fe0 <lv_disp_refr_task+0x2a0>
            lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007ffc:	6828      	ldr	r0, [r5, #0]
 8007ffe:	f003 ff49 	bl	800be94 <lv_disp_get_buf>
 8008002:	0004      	movs	r4, r0
            lv_refr_vdb_flush();
 8008004:	f7ff fd0e 	bl	8007a24 <lv_refr_vdb_flush>
            while(vdb->flushing)
 8008008:	69a3      	ldr	r3, [r4, #24]
 800800a:	07db      	lsls	r3, r3, #31
 800800c:	d4fc      	bmi.n	8008008 <lv_disp_refr_task+0x2c8>
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 800800e:	68a3      	ldr	r3, [r4, #8]
 8008010:	9303      	str	r3, [sp, #12]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 8008012:	6823      	ldr	r3, [r4, #0]
 8008014:	9301      	str	r3, [sp, #4]
 8008016:	9a01      	ldr	r2, [sp, #4]
 8008018:	9b03      	ldr	r3, [sp, #12]
 800801a:	4293      	cmp	r3, r2
 800801c:	d101      	bne.n	8008022 <lv_disp_refr_task+0x2e2>
 800801e:	6863      	ldr	r3, [r4, #4]
 8008020:	9301      	str	r3, [sp, #4]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 8008022:	6828      	ldr	r0, [r5, #0]
 8008024:	f003 fefe 	bl	800be24 <lv_disp_get_hor_res>
            for(a = 0; a < disp_refr->inv_p; a++) {
 8008028:	2500      	movs	r5, #0
                        start_offs += hres * sizeof(lv_color_t);
 800802a:	0043      	lsls	r3, r0, #1
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 800802c:	9005      	str	r0, [sp, #20]
                        start_offs += hres * sizeof(lv_color_t);
 800802e:	9304      	str	r3, [sp, #16]
            for(a = 0; a < disp_refr->inv_p; a++) {
 8008030:	4b09      	ldr	r3, [pc, #36]	; (8008058 <lv_disp_refr_task+0x318>)
 8008032:	6819      	ldr	r1, [r3, #0]
 8008034:	23b2      	movs	r3, #178	; 0xb2
 8008036:	005b      	lsls	r3, r3, #1
 8008038:	5acb      	ldrh	r3, [r1, r3]
 800803a:	059b      	lsls	r3, r3, #22
 800803c:	0d9b      	lsrs	r3, r3, #22
 800803e:	429d      	cmp	r5, r3
 8008040:	db00      	blt.n	8008044 <lv_disp_refr_task+0x304>
 8008042:	e6a7      	b.n	8007d94 <lv_disp_refr_task+0x54>
                if(disp_refr->inv_area_joined[a] == 0) {
 8008044:	194b      	adds	r3, r1, r5
 8008046:	3345      	adds	r3, #69	; 0x45
 8008048:	33ff      	adds	r3, #255	; 0xff
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d007      	beq.n	8008060 <lv_disp_refr_task+0x320>
            for(a = 0; a < disp_refr->inv_p; a++) {
 8008050:	3501      	adds	r5, #1
 8008052:	b2ad      	uxth	r5, r5
 8008054:	e7ec      	b.n	8008030 <lv_disp_refr_task+0x2f0>
 8008056:	46c0      	nop			; (mov r8, r8)
 8008058:	20001504 	.word	0x20001504
 800805c:	20001508 	.word	0x20001508
 8008060:	00eb      	lsls	r3, r5, #3
 8008062:	18cb      	adds	r3, r1, r3
 8008064:	9302      	str	r3, [sp, #8]
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 8008066:	3308      	adds	r3, #8
 8008068:	263e      	movs	r6, #62	; 0x3e
 800806a:	5f9e      	ldrsh	r6, [r3, r6]
 800806c:	9b02      	ldr	r3, [sp, #8]
 800806e:	9c05      	ldr	r4, [sp, #20]
 8008070:	3306      	adds	r3, #6
 8008072:	223e      	movs	r2, #62	; 0x3e
 8008074:	5e9b      	ldrsh	r3, [r3, r2]
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 8008076:	002a      	movs	r2, r5
 8008078:	3208      	adds	r2, #8
    return area_p->x2 - area_p->x1 + 1;
 800807a:	00d2      	lsls	r2, r2, #3
 800807c:	188a      	adds	r2, r1, r2
 800807e:	2101      	movs	r1, #1
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 8008080:	4374      	muls	r4, r6
 8008082:	1ac9      	subs	r1, r1, r3
 8008084:	18e4      	adds	r4, r4, r3
 8008086:	8913      	ldrh	r3, [r2, #8]
                    uint32_t start_offs =
 8008088:	0064      	lsls	r4, r4, #1
 800808a:	185b      	adds	r3, r3, r1
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 800808c:	b21b      	sxth	r3, r3
 800808e:	005b      	lsls	r3, r3, #1
 8008090:	9307      	str	r3, [sp, #28]
 8008092:	9b03      	ldr	r3, [sp, #12]
 8008094:	191f      	adds	r7, r3, r4
 8008096:	9b01      	ldr	r3, [sp, #4]
 8008098:	18e4      	adds	r4, r4, r3
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 800809a:	9b02      	ldr	r3, [sp, #8]
 800809c:	334a      	adds	r3, #74	; 0x4a
 800809e:	2200      	movs	r2, #0
 80080a0:	5e9b      	ldrsh	r3, [r3, r2]
 80080a2:	42b3      	cmp	r3, r6
 80080a4:	dbd4      	blt.n	8008050 <lv_disp_refr_task+0x310>
                        memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
 80080a6:	0038      	movs	r0, r7
 80080a8:	9a07      	ldr	r2, [sp, #28]
 80080aa:	0021      	movs	r1, r4
 80080ac:	f006 f86e 	bl	800e18c <memcpy>
 80080b0:	9b04      	ldr	r3, [sp, #16]
 80080b2:	3601      	adds	r6, #1
 80080b4:	b236      	sxth	r6, r6
 80080b6:	18ff      	adds	r7, r7, r3
 80080b8:	e7ee      	b.n	8008098 <lv_disp_refr_task+0x358>
            disp_refr->driver.monitor_cb(&disp_refr->driver, lv_tick_elaps(start), px_num);
 80080ba:	9806      	ldr	r0, [sp, #24]
 80080bc:	f003 ff24 	bl	800bf08 <lv_tick_elaps>
 80080c0:	4b02      	ldr	r3, [pc, #8]	; (80080cc <lv_disp_refr_task+0x38c>)
 80080c2:	0001      	movs	r1, r0
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	0020      	movs	r0, r4
 80080c8:	47a8      	blx	r5
 80080ca:	e67d      	b.n	8007dc8 <lv_disp_refr_task+0x88>
 80080cc:	20001508 	.word	0x20001508

080080d0 <lv_style_copy>:
 * Copy a style to an other
 * @param dest pointer to the destination style
 * @param src pointer to the source style
 */
void lv_style_copy(lv_style_t * dest, const lv_style_t * src)
{
 80080d0:	b510      	push	{r4, lr}
    memcpy(dest, src, sizeof(lv_style_t));
 80080d2:	223c      	movs	r2, #60	; 0x3c
 80080d4:	f006 f85a 	bl	800e18c <memcpy>
}
 80080d8:	bd10      	pop	{r4, pc}
	...

080080dc <lv_style_init>:
{
 80080dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    lv_style_scr.glass               = 0;
 80080de:	2201      	movs	r2, #1
 80080e0:	49f0      	ldr	r1, [pc, #960]	; (80084a4 <lv_style_init+0x3c8>)
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 80080e2:	241f      	movs	r4, #31
    lv_style_scr.glass               = 0;
 80080e4:	780b      	ldrb	r3, [r1, #0]
    lv_style_scr.body.radius         = 0;
 80080e6:	2700      	movs	r7, #0
    lv_style_scr.glass               = 0;
 80080e8:	4393      	bics	r3, r2
 80080ea:	700b      	strb	r3, [r1, #0]
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 80080ec:	4bee      	ldr	r3, [pc, #952]	; (80084a8 <lv_style_init+0x3cc>)
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 80080ee:	48ef      	ldr	r0, [pc, #956]	; (80084ac <lv_style_init+0x3d0>)
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 80080f0:	881b      	ldrh	r3, [r3, #0]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 80080f2:	2506      	movs	r5, #6
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	466b      	mov	r3, sp
 80080f8:	881b      	ldrh	r3, [r3, #0]
    lv_style_scr.body.opa            = LV_OPA_COVER;
 80080fa:	32fe      	adds	r2, #254	; 0xfe
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 80080fc:	804b      	strh	r3, [r1, #2]
    lv_style_scr.body.grad_color     = LV_COLOR_WHITE;
 80080fe:	466b      	mov	r3, sp
 8008100:	881b      	ldrh	r3, [r3, #0]
    lv_style_scr.body.opa            = LV_OPA_COVER;
 8008102:	720a      	strb	r2, [r1, #8]
    lv_style_scr.body.grad_color     = LV_COLOR_WHITE;
 8008104:	808b      	strh	r3, [r1, #4]
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
 8008106:	2301      	movs	r3, #1
 8008108:	83cb      	strh	r3, [r1, #30]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 800810a:	7a8b      	ldrb	r3, [r1, #10]
    lv_style_scr.body.radius         = 0;
 800810c:	80cf      	strh	r7, [r1, #6]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 800810e:	43a3      	bics	r3, r4
 8008110:	728b      	strb	r3, [r1, #10]
 8008112:	894b      	ldrh	r3, [r1, #10]
    lv_style_scr.body.padding.left   = 0;
 8008114:	834f      	strh	r7, [r1, #26]
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8008116:	4003      	ands	r3, r0
 8008118:	814b      	strh	r3, [r1, #10]
 800811a:	003b      	movs	r3, r7
    lv_style_scr.body.border.part  = LV_BORDER_FULL;
 800811c:	330f      	adds	r3, #15
 800811e:	738b      	strb	r3, [r1, #14]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 8008120:	4be1      	ldr	r3, [pc, #900]	; (80084a8 <lv_style_init+0x3cc>)
    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8008122:	72cf      	strb	r7, [r1, #11]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 8008124:	885b      	ldrh	r3, [r3, #2]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8008126:	1c48      	adds	r0, r1, #1
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 8008128:	9301      	str	r3, [sp, #4]
 800812a:	466b      	mov	r3, sp
 800812c:	889b      	ldrh	r3, [r3, #4]
    lv_style_scr.body.padding.right  = 0;
 800812e:	838f      	strh	r7, [r1, #28]
    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 8008130:	820b      	strh	r3, [r1, #16]
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
 8008132:	2301      	movs	r3, #1
 8008134:	750b      	strb	r3, [r1, #20]
    lv_style_scr.text.opa          = LV_OPA_COVER;
 8008136:	000b      	movs	r3, r1
 8008138:	332c      	adds	r3, #44	; 0x2c
    lv_style_scr.body.padding.top    = 0;
 800813a:	82cf      	strh	r7, [r1, #22]
    lv_style_scr.body.padding.bottom = 0;
 800813c:	830f      	strh	r7, [r1, #24]
    lv_style_scr.body.border.opa   = LV_OPA_COVER;
 800813e:	73ca      	strb	r2, [r1, #15]
    lv_style_scr.body.border.width = 0;
 8008140:	818f      	strh	r7, [r1, #12]
    lv_style_scr.body.shadow.width = 0;
 8008142:	824f      	strh	r7, [r1, #18]
    lv_style_scr.text.opa          = LV_OPA_COVER;
 8008144:	701a      	strb	r2, [r3, #0]
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 8008146:	7fc3      	ldrb	r3, [r0, #31]
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
 8008148:	261e      	movs	r6, #30
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 800814a:	43a3      	bics	r3, r4
 800814c:	432b      	orrs	r3, r5
 800814e:	77c3      	strb	r3, [r0, #31]
 8008150:	8c0d      	ldrh	r5, [r1, #32]
 8008152:	4bd6      	ldr	r3, [pc, #856]	; (80084ac <lv_style_init+0x3d0>)
 8008154:	1c88      	adds	r0, r1, #2
 8008156:	401d      	ands	r5, r3
 8008158:	23c0      	movs	r3, #192	; 0xc0
 800815a:	005b      	lsls	r3, r3, #1
 800815c:	432b      	orrs	r3, r5
 800815e:	2507      	movs	r5, #7
 8008160:	840b      	strh	r3, [r1, #32]
 8008162:	0a1b      	lsrs	r3, r3, #8
 8008164:	402b      	ands	r3, r5
 8008166:	3529      	adds	r5, #41	; 0x29
 8008168:	432b      	orrs	r3, r5
 800816a:	77c3      	strb	r3, [r0, #31]
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 800816c:	1cc8      	adds	r0, r1, #3
 800816e:	7fc3      	ldrb	r3, [r0, #31]
 8008170:	3d15      	subs	r5, #21
 8008172:	43a3      	bics	r3, r4
 8008174:	432b      	orrs	r3, r5
 8008176:	77c3      	strb	r3, [r0, #31]
 8008178:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 800817a:	48cc      	ldr	r0, [pc, #816]	; (80084ac <lv_style_init+0x3d0>)
 800817c:	3d14      	subs	r5, #20
 800817e:	4003      	ands	r3, r0
 8008180:	2094      	movs	r0, #148	; 0x94
 8008182:	00c0      	lsls	r0, r0, #3
 8008184:	4303      	orrs	r3, r0
 8008186:	844b      	strh	r3, [r1, #34]	; 0x22
 8008188:	0a1b      	lsrs	r3, r3, #8
 800818a:	402b      	ands	r3, r5
 800818c:	3549      	adds	r5, #73	; 0x49
 800818e:	1d08      	adds	r0, r1, #4
 8008190:	432b      	orrs	r3, r5
 8008192:	77c3      	strb	r3, [r0, #31]
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
 8008194:	4bc6      	ldr	r3, [pc, #792]	; (80084b0 <lv_style_init+0x3d4>)
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 8008196:	0008      	movs	r0, r1
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
 8008198:	624b      	str	r3, [r1, #36]	; 0x24
    lv_style_scr.text.line_space   = 2;
 800819a:	2302      	movs	r3, #2
 800819c:	854b      	strh	r3, [r1, #42]	; 0x2a
    lv_style_scr.image.opa     = LV_OPA_COVER;
 800819e:	000b      	movs	r3, r1
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 80081a0:	3030      	adds	r0, #48	; 0x30
    lv_style_scr.image.opa     = LV_OPA_COVER;
 80081a2:	3333      	adds	r3, #51	; 0x33
 80081a4:	701a      	strb	r2, [r3, #0]
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 80081a6:	7803      	ldrb	r3, [r0, #0]
 80081a8:	3d4c      	subs	r5, #76	; 0x4c
 80081aa:	43a3      	bics	r3, r4
 80081ac:	432b      	orrs	r3, r5
 80081ae:	7003      	strb	r3, [r0, #0]
 80081b0:	8e0b      	ldrh	r3, [r1, #48]	; 0x30
 80081b2:	4dbe      	ldr	r5, [pc, #760]	; (80084ac <lv_style_init+0x3d0>)
    lv_style_scr.text.letter_space = 0;
 80081b4:	850f      	strh	r7, [r1, #40]	; 0x28
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 80081b6:	402b      	ands	r3, r5
 80081b8:	2580      	movs	r5, #128	; 0x80
 80081ba:	006d      	lsls	r5, r5, #1
 80081bc:	432b      	orrs	r3, r5
 80081be:	860b      	strh	r3, [r1, #48]	; 0x30
 80081c0:	3df9      	subs	r5, #249	; 0xf9
 80081c2:	0a1b      	lsrs	r3, r3, #8
 80081c4:	402b      	ands	r3, r5
 80081c6:	3519      	adds	r5, #25
 80081c8:	432b      	orrs	r3, r5
 80081ca:	7043      	strb	r3, [r0, #1]
    lv_style_scr.image.intense = LV_OPA_TRANSP;
 80081cc:	000b      	movs	r3, r1
 80081ce:	3332      	adds	r3, #50	; 0x32
 80081d0:	701f      	strb	r7, [r3, #0]
    lv_style_scr.line.opa     = LV_OPA_COVER;
 80081d2:	000b      	movs	r3, r1
 80081d4:	3338      	adds	r3, #56	; 0x38
 80081d6:	701a      	strb	r2, [r3, #0]
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
 80081d8:	000a      	movs	r2, r1
 80081da:	2004      	movs	r0, #4
 80081dc:	3234      	adds	r2, #52	; 0x34
 80081de:	7813      	ldrb	r3, [r2, #0]
 80081e0:	43a3      	bics	r3, r4
 80081e2:	4303      	orrs	r3, r0
 80081e4:	7013      	strb	r3, [r2, #0]
 80081e6:	8e8b      	ldrh	r3, [r1, #52]	; 0x34
 80081e8:	48b0      	ldr	r0, [pc, #704]	; (80084ac <lv_style_init+0x3d0>)
 80081ea:	4003      	ands	r3, r0
 80081ec:	2080      	movs	r0, #128	; 0x80
 80081ee:	0040      	lsls	r0, r0, #1
 80081f0:	4303      	orrs	r3, r0
 80081f2:	868b      	strh	r3, [r1, #52]	; 0x34
 80081f4:	38f9      	subs	r0, #249	; 0xf9
 80081f6:	0a1b      	lsrs	r3, r3, #8
 80081f8:	4003      	ands	r3, r0
 80081fa:	432b      	orrs	r3, r5
 80081fc:	7053      	strb	r3, [r2, #1]
    lv_style_scr.line.rounded = 0;
 80081fe:	000a      	movs	r2, r1
    lv_style_scr.line.width   = 2;
 8008200:	2302      	movs	r3, #2
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
 8008202:	0028      	movs	r0, r5
    lv_style_scr.line.rounded = 0;
 8008204:	3239      	adds	r2, #57	; 0x39
    lv_style_scr.line.width   = 2;
 8008206:	86cb      	strh	r3, [r1, #54]	; 0x36
    lv_style_scr.line.rounded = 0;
 8008208:	7813      	ldrb	r3, [r2, #0]
 800820a:	381f      	subs	r0, #31
 800820c:	4383      	bics	r3, r0
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 800820e:	48a9      	ldr	r0, [pc, #676]	; (80084b4 <lv_style_init+0x3d8>)
    lv_style_scr.line.rounded = 0;
 8008210:	7013      	strb	r3, [r2, #0]
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 8008212:	f7ff ff5d 	bl	80080d0 <lv_style_copy>
    lv_style_plain.body.padding.left   = LV_DPI / 20;
 8008216:	2201      	movs	r2, #1
 8008218:	4ba6      	ldr	r3, [pc, #664]	; (80084b4 <lv_style_init+0x3d8>)
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 800821a:	4da7      	ldr	r5, [pc, #668]	; (80084b8 <lv_style_init+0x3dc>)
    lv_style_plain.body.padding.left   = LV_DPI / 20;
 800821c:	835a      	strh	r2, [r3, #26]
    lv_style_plain.body.padding.right  = LV_DPI / 20;
 800821e:	2201      	movs	r2, #1
 8008220:	839a      	strh	r2, [r3, #28]
    lv_style_plain.body.padding.top    = LV_DPI / 20;
 8008222:	2201      	movs	r2, #1
 8008224:	82da      	strh	r2, [r3, #22]
    lv_style_plain.body.padding.bottom = LV_DPI / 20;
 8008226:	2201      	movs	r2, #1
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 8008228:	0019      	movs	r1, r3
 800822a:	0028      	movs	r0, r5
    lv_style_plain.body.padding.bottom = LV_DPI / 20;
 800822c:	831a      	strh	r2, [r3, #24]
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 800822e:	f7ff ff4f 	bl	80080d0 <lv_style_copy>
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 8008232:	221e      	movs	r2, #30
 8008234:	1c68      	adds	r0, r5, #1
 8008236:	7fc3      	ldrb	r3, [r0, #31]
 8008238:	2107      	movs	r1, #7
 800823a:	43a3      	bics	r3, r4
 800823c:	4313      	orrs	r3, r2
 800823e:	77c3      	strb	r3, [r0, #31]
 8008240:	8c2b      	ldrh	r3, [r5, #32]
 8008242:	4a9a      	ldr	r2, [pc, #616]	; (80084ac <lv_style_init+0x3d0>)
 8008244:	1ca8      	adds	r0, r5, #2
 8008246:	4013      	ands	r3, r2
 8008248:	22f0      	movs	r2, #240	; 0xf0
 800824a:	00d2      	lsls	r2, r2, #3
 800824c:	4313      	orrs	r3, r2
 800824e:	842b      	strh	r3, [r5, #32]
 8008250:	0a1b      	lsrs	r3, r3, #8
 8008252:	400b      	ands	r3, r1
 8008254:	3917      	subs	r1, #23
 8008256:	430b      	orrs	r3, r1
 8008258:	77c3      	strb	r3, [r0, #31]
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
 800825a:	0028      	movs	r0, r5
 800825c:	3030      	adds	r0, #48	; 0x30
 800825e:	7803      	ldrb	r3, [r0, #0]
 8008260:	43a3      	bics	r3, r4
 8008262:	4333      	orrs	r3, r6
 8008264:	7003      	strb	r3, [r0, #0]
 8008266:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8008268:	4e90      	ldr	r6, [pc, #576]	; (80084ac <lv_style_init+0x3d0>)
 800826a:	4033      	ands	r3, r6
 800826c:	2607      	movs	r6, #7
 800826e:	4313      	orrs	r3, r2
 8008270:	862b      	strh	r3, [r5, #48]	; 0x30
 8008272:	0a1b      	lsrs	r3, r3, #8
 8008274:	4033      	ands	r3, r6
 8008276:	430b      	orrs	r3, r1
 8008278:	7043      	strb	r3, [r0, #1]
    lv_style_plain_color.line.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 800827a:	002b      	movs	r3, r5
 800827c:	3334      	adds	r3, #52	; 0x34
 800827e:	7818      	ldrb	r0, [r3, #0]
 8008280:	3617      	adds	r6, #23
 8008282:	43a0      	bics	r0, r4
 8008284:	4330      	orrs	r0, r6
 8008286:	7018      	strb	r0, [r3, #0]
 8008288:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 800828a:	4e88      	ldr	r6, [pc, #544]	; (80084ac <lv_style_init+0x3d0>)
 800828c:	4030      	ands	r0, r6
 800828e:	4302      	orrs	r2, r0
 8008290:	2007      	movs	r0, #7
 8008292:	86aa      	strh	r2, [r5, #52]	; 0x34
 8008294:	0a12      	lsrs	r2, r2, #8
 8008296:	4002      	ands	r2, r0
 8008298:	430a      	orrs	r2, r1
 800829a:	705a      	strb	r2, [r3, #1]
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 800829c:	221b      	movs	r2, #27
 800829e:	78ab      	ldrb	r3, [r5, #2]
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 80082a0:	4984      	ldr	r1, [pc, #528]	; (80084b4 <lv_style_init+0x3d8>)
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 80082a2:	43a3      	bics	r3, r4
 80082a4:	4313      	orrs	r3, r2
 80082a6:	2294      	movs	r2, #148	; 0x94
 80082a8:	70ab      	strb	r3, [r5, #2]
 80082aa:	886b      	ldrh	r3, [r5, #2]
 80082ac:	00d2      	lsls	r2, r2, #3
 80082ae:	4033      	ands	r3, r6
 80082b0:	4313      	orrs	r3, r2
 80082b2:	0002      	movs	r2, r0
 80082b4:	806b      	strh	r3, [r5, #2]
 80082b6:	0a1b      	lsrs	r3, r3, #8
 80082b8:	3249      	adds	r2, #73	; 0x49
 80082ba:	4003      	ands	r3, r0
 80082bc:	4313      	orrs	r3, r2
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 80082be:	4e7f      	ldr	r6, [pc, #508]	; (80084bc <lv_style_init+0x3e0>)
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 80082c0:	70eb      	strb	r3, [r5, #3]
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 80082c2:	886b      	ldrh	r3, [r5, #2]
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 80082c4:	0030      	movs	r0, r6
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 80082c6:	80ab      	strh	r3, [r5, #4]
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 80082c8:	f7ff ff02 	bl	80080d0 <lv_style_copy>
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 80082cc:	2104      	movs	r1, #4
 80082ce:	1c72      	adds	r2, r6, #1
 80082d0:	7fd3      	ldrb	r3, [r2, #31]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 80082d2:	4d7b      	ldr	r5, [pc, #492]	; (80084c0 <lv_style_init+0x3e4>)
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 80082d4:	43a3      	bics	r3, r4
 80082d6:	430b      	orrs	r3, r1
 80082d8:	77d3      	strb	r3, [r2, #31]
 80082da:	8c33      	ldrh	r3, [r6, #32]
 80082dc:	4973      	ldr	r1, [pc, #460]	; (80084ac <lv_style_init+0x3d0>)
 80082de:	1cb2      	adds	r2, r6, #2
 80082e0:	400b      	ands	r3, r1
 80082e2:	2180      	movs	r1, #128	; 0x80
 80082e4:	0049      	lsls	r1, r1, #1
 80082e6:	430b      	orrs	r3, r1
 80082e8:	8433      	strh	r3, [r6, #32]
 80082ea:	39f9      	subs	r1, #249	; 0xf9
 80082ec:	0a1b      	lsrs	r3, r3, #8
 80082ee:	400b      	ands	r3, r1
 80082f0:	3119      	adds	r1, #25
 80082f2:	430b      	orrs	r3, r1
 80082f4:	77d3      	strb	r3, [r2, #31]
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 80082f6:	0032      	movs	r2, r6
 80082f8:	3230      	adds	r2, #48	; 0x30
 80082fa:	7813      	ldrb	r3, [r2, #0]
 80082fc:	391c      	subs	r1, #28
 80082fe:	43a3      	bics	r3, r4
 8008300:	430b      	orrs	r3, r1
 8008302:	7013      	strb	r3, [r2, #0]
 8008304:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 8008306:	4969      	ldr	r1, [pc, #420]	; (80084ac <lv_style_init+0x3d0>)
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8008308:	0028      	movs	r0, r5
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 800830a:	400b      	ands	r3, r1
 800830c:	2180      	movs	r1, #128	; 0x80
 800830e:	0049      	lsls	r1, r1, #1
 8008310:	430b      	orrs	r3, r1
 8008312:	8633      	strh	r3, [r6, #48]	; 0x30
 8008314:	39f9      	subs	r1, #249	; 0xf9
 8008316:	0a1b      	lsrs	r3, r3, #8
 8008318:	400b      	ands	r3, r1
 800831a:	3119      	adds	r1, #25
 800831c:	430b      	orrs	r3, r1
 800831e:	7053      	strb	r3, [r2, #1]
    lv_style_pretty.line.color        = lv_color_make(0x20, 0x20, 0x20);
 8008320:	0032      	movs	r2, r6
 8008322:	3234      	adds	r2, #52	; 0x34
 8008324:	7813      	ldrb	r3, [r2, #0]
 8008326:	391c      	subs	r1, #28
 8008328:	43a3      	bics	r3, r4
 800832a:	430b      	orrs	r3, r1
 800832c:	7013      	strb	r3, [r2, #0]
 800832e:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
 8008330:	495e      	ldr	r1, [pc, #376]	; (80084ac <lv_style_init+0x3d0>)
 8008332:	400b      	ands	r3, r1
 8008334:	2180      	movs	r1, #128	; 0x80
 8008336:	0049      	lsls	r1, r1, #1
 8008338:	430b      	orrs	r3, r1
 800833a:	86b3      	strh	r3, [r6, #52]	; 0x34
 800833c:	39f9      	subs	r1, #249	; 0xf9
 800833e:	0a1b      	lsrs	r3, r3, #8
 8008340:	400b      	ands	r3, r1
 8008342:	3119      	adds	r1, #25
 8008344:	430b      	orrs	r3, r1
 8008346:	7053      	strb	r3, [r2, #1]
    lv_style_pretty.body.main_color   = LV_COLOR_WHITE;
 8008348:	466b      	mov	r3, sp
 800834a:	881b      	ldrh	r3, [r3, #0]
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
 800834c:	2208      	movs	r2, #8
    lv_style_pretty.body.main_color   = LV_COLOR_WHITE;
 800834e:	8073      	strh	r3, [r6, #2]
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
 8008350:	4b55      	ldr	r3, [pc, #340]	; (80084a8 <lv_style_init+0x3cc>)
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8008352:	0031      	movs	r1, r6
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
 8008354:	889b      	ldrh	r3, [r3, #4]
 8008356:	80b3      	strh	r3, [r6, #4]
    lv_style_pretty.body.radius       = LV_DPI / 15;
 8008358:	2301      	movs	r3, #1
 800835a:	80f3      	strh	r3, [r6, #6]
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
 800835c:	7ab3      	ldrb	r3, [r6, #10]
 800835e:	43a3      	bics	r3, r4
 8008360:	4313      	orrs	r3, r2
 8008362:	72b3      	strb	r3, [r6, #10]
 8008364:	8972      	ldrh	r2, [r6, #10]
 8008366:	4b51      	ldr	r3, [pc, #324]	; (80084ac <lv_style_init+0x3d0>)
 8008368:	401a      	ands	r2, r3
 800836a:	2380      	movs	r3, #128	; 0x80
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4313      	orrs	r3, r2
 8008370:	2207      	movs	r2, #7
 8008372:	8173      	strh	r3, [r6, #10]
 8008374:	0a1b      	lsrs	r3, r3, #8
 8008376:	4013      	ands	r3, r2
 8008378:	3239      	adds	r2, #57	; 0x39
 800837a:	4313      	orrs	r3, r2
 800837c:	72f3      	strb	r3, [r6, #11]
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 800837e:	2301      	movs	r3, #1
 8008380:	81b3      	strh	r3, [r6, #12]
    lv_style_pretty.body.border.opa   = LV_OPA_30;
 8008382:	234c      	movs	r3, #76	; 0x4c
 8008384:	73f3      	strb	r3, [r6, #15]
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8008386:	f7ff fea3 	bl	80080d0 <lv_style_copy>
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
 800838a:	201c      	movs	r0, #28
 800838c:	1c69      	adds	r1, r5, #1
 800838e:	7fcb      	ldrb	r3, [r1, #31]
 8008390:	4a46      	ldr	r2, [pc, #280]	; (80084ac <lv_style_init+0x3d0>)
 8008392:	43a3      	bics	r3, r4
 8008394:	4303      	orrs	r3, r0
 8008396:	77cb      	strb	r3, [r1, #31]
 8008398:	8c2b      	ldrh	r3, [r5, #32]
 800839a:	2607      	movs	r6, #7
 800839c:	4013      	ands	r3, r2
 800839e:	22e0      	movs	r2, #224	; 0xe0
 80083a0:	00d2      	lsls	r2, r2, #3
 80083a2:	4313      	orrs	r3, r2
 80083a4:	842b      	strh	r3, [r5, #32]
 80083a6:	0a1b      	lsrs	r3, r3, #8
 80083a8:	4033      	ands	r3, r6
 80083aa:	3e27      	subs	r6, #39	; 0x27
 80083ac:	1ca9      	adds	r1, r5, #2
 80083ae:	4333      	orrs	r3, r6
 80083b0:	77cb      	strb	r3, [r1, #31]
    lv_style_pretty_color.image.color       = lv_color_make(0xe0, 0xe0, 0xe0);
 80083b2:	002b      	movs	r3, r5
 80083b4:	3330      	adds	r3, #48	; 0x30
 80083b6:	7819      	ldrb	r1, [r3, #0]
 80083b8:	43a1      	bics	r1, r4
 80083ba:	4308      	orrs	r0, r1
 80083bc:	7018      	strb	r0, [r3, #0]
 80083be:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 80083c0:	483a      	ldr	r0, [pc, #232]	; (80084ac <lv_style_init+0x3d0>)
 80083c2:	4001      	ands	r1, r0
 80083c4:	430a      	orrs	r2, r1
 80083c6:	2107      	movs	r1, #7
 80083c8:	862a      	strh	r2, [r5, #48]	; 0x30
 80083ca:	0a12      	lsrs	r2, r2, #8
 80083cc:	400a      	ands	r2, r1
 80083ce:	4332      	orrs	r2, r6
 80083d0:	705a      	strb	r2, [r3, #1]
    lv_style_pretty_color.line.color        = lv_color_make(0xc0, 0xc0, 0xc0);
 80083d2:	002a      	movs	r2, r5
 80083d4:	3234      	adds	r2, #52	; 0x34
 80083d6:	7813      	ldrb	r3, [r2, #0]
 80083d8:	3111      	adds	r1, #17
 80083da:	43a3      	bics	r3, r4
 80083dc:	430b      	orrs	r3, r1
 80083de:	7013      	strb	r3, [r2, #0]
 80083e0:	23c0      	movs	r3, #192	; 0xc0
 80083e2:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80083e4:	00db      	lsls	r3, r3, #3
 80083e6:	4001      	ands	r1, r0
 80083e8:	430b      	orrs	r3, r1
 80083ea:	2107      	movs	r1, #7
 80083ec:	86ab      	strh	r3, [r5, #52]	; 0x34
 80083ee:	0a1b      	lsrs	r3, r3, #8
 80083f0:	400b      	ands	r3, r1
 80083f2:	3947      	subs	r1, #71	; 0x47
 80083f4:	430b      	orrs	r3, r1
 80083f6:	7053      	strb	r3, [r2, #1]
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
 80083f8:	2218      	movs	r2, #24
 80083fa:	78ab      	ldrb	r3, [r5, #2]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 80083fc:	4e31      	ldr	r6, [pc, #196]	; (80084c4 <lv_style_init+0x3e8>)
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
 80083fe:	43a3      	bics	r3, r4
 8008400:	4313      	orrs	r3, r2
 8008402:	70ab      	strb	r3, [r5, #2]
 8008404:	2398      	movs	r3, #152	; 0x98
 8008406:	886a      	ldrh	r2, [r5, #2]
 8008408:	00db      	lsls	r3, r3, #3
 800840a:	4002      	ands	r2, r0
 800840c:	4313      	orrs	r3, r2
 800840e:	2207      	movs	r2, #7
 8008410:	806b      	strh	r3, [r5, #2]
 8008412:	0a1b      	lsrs	r3, r3, #8
 8008414:	4013      	ands	r3, r2
 8008416:	3261      	adds	r2, #97	; 0x61
 8008418:	4313      	orrs	r3, r2
 800841a:	70eb      	strb	r3, [r5, #3]
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 800841c:	2311      	movs	r3, #17
 800841e:	792a      	ldrb	r2, [r5, #4]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 8008420:	4924      	ldr	r1, [pc, #144]	; (80084b4 <lv_style_init+0x3d8>)
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 8008422:	43a2      	bics	r2, r4
 8008424:	4313      	orrs	r3, r2
 8008426:	712b      	strb	r3, [r5, #4]
 8008428:	23b0      	movs	r3, #176	; 0xb0
 800842a:	88aa      	ldrh	r2, [r5, #4]
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	4002      	ands	r2, r0
 8008430:	4313      	orrs	r3, r2
 8008432:	2207      	movs	r2, #7
 8008434:	80ab      	strh	r3, [r5, #4]
 8008436:	0a1b      	lsrs	r3, r3, #8
 8008438:	4013      	ands	r3, r2
 800843a:	3221      	adds	r2, #33	; 0x21
 800843c:	4313      	orrs	r3, r2
 800843e:	716b      	strb	r3, [r5, #5]
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 8008440:	7aab      	ldrb	r3, [r5, #10]
 8008442:	3a20      	subs	r2, #32
 8008444:	43a3      	bics	r3, r4
 8008446:	4313      	orrs	r3, r2
 8008448:	72ab      	strb	r3, [r5, #10]
 800844a:	23b0      	movs	r3, #176	; 0xb0
 800844c:	896a      	ldrh	r2, [r5, #10]
 800844e:	005b      	lsls	r3, r3, #1
 8008450:	4002      	ands	r2, r0
 8008452:	4313      	orrs	r3, r2
 8008454:	2207      	movs	r2, #7
 8008456:	816b      	strh	r3, [r5, #10]
 8008458:	0a1b      	lsrs	r3, r3, #8
 800845a:	4013      	ands	r3, r2
 800845c:	3209      	adds	r2, #9
 800845e:	4313      	orrs	r3, r2
 8008460:	72eb      	strb	r3, [r5, #11]
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 8008462:	0030      	movs	r0, r6
 8008464:	f7ff fe34 	bl	80080d0 <lv_style_copy>
    lv_style_transp.glass             = 1;
 8008468:	2201      	movs	r2, #1
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 800846a:	4d17      	ldr	r5, [pc, #92]	; (80084c8 <lv_style_init+0x3ec>)
    lv_style_transp.glass             = 1;
 800846c:	7833      	ldrb	r3, [r6, #0]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 800846e:	0031      	movs	r1, r6
    lv_style_transp.glass             = 1;
 8008470:	4313      	orrs	r3, r2
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 8008472:	0028      	movs	r0, r5
    lv_style_transp.glass             = 1;
 8008474:	7033      	strb	r3, [r6, #0]
    lv_style_transp.body.border.width = 0;
 8008476:	81b7      	strh	r7, [r6, #12]
    lv_style_transp.body.opa          = LV_OPA_TRANSP;
 8008478:	7237      	strb	r7, [r6, #8]
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 800847a:	f7ff fe29 	bl	80080d0 <lv_style_copy>
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 800847e:	4e13      	ldr	r6, [pc, #76]	; (80084cc <lv_style_init+0x3f0>)
 8008480:	0029      	movs	r1, r5
 8008482:	0030      	movs	r0, r6
    lv_style_transp_fit.body.padding.left   = 0;
 8008484:	836f      	strh	r7, [r5, #26]
    lv_style_transp_fit.body.padding.right  = 0;
 8008486:	83af      	strh	r7, [r5, #28]
    lv_style_transp_fit.body.padding.top    = 0;
 8008488:	82ef      	strh	r7, [r5, #22]
    lv_style_transp_fit.body.padding.bottom = 0;
 800848a:	832f      	strh	r7, [r5, #24]
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 800848c:	f7ff fe20 	bl	80080d0 <lv_style_copy>
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 8008490:	4d0f      	ldr	r5, [pc, #60]	; (80084d0 <lv_style_init+0x3f4>)
 8008492:	4908      	ldr	r1, [pc, #32]	; (80084b4 <lv_style_init+0x3d8>)
 8008494:	0028      	movs	r0, r5
    lv_style_transp_tight.body.padding.inner = 0;
 8008496:	83f7      	strh	r7, [r6, #30]
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 8008498:	f7ff fe1a 	bl	80080d0 <lv_style_copy>
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 800849c:	231a      	movs	r3, #26
 800849e:	78aa      	ldrb	r2, [r5, #2]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 80084a0:	2008      	movs	r0, #8
 80084a2:	e017      	b.n	80084d4 <lv_style_init+0x3f8>
 80084a4:	20005358 	.word	0x20005358
 80084a8:	08010cd8 	.word	0x08010cd8
 80084ac:	fffff81f 	.word	0xfffff81f
 80084b0:	20000030 	.word	0x20000030
 80084b4:	200052e0 	.word	0x200052e0
 80084b8:	200053d0 	.word	0x200053d0
 80084bc:	200051f0 	.word	0x200051f0
 80084c0:	20005100 	.word	0x20005100
 80084c4:	2000513c 	.word	0x2000513c
 80084c8:	200052a4 	.word	0x200052a4
 80084cc:	2000522c 	.word	0x2000522c
 80084d0:	20005178 	.word	0x20005178
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 80084d4:	43a2      	bics	r2, r4
 80084d6:	4313      	orrs	r3, r2
 80084d8:	70ab      	strb	r3, [r5, #2]
 80084da:	886a      	ldrh	r2, [r5, #2]
 80084dc:	4bf1      	ldr	r3, [pc, #964]	; (80088a4 <lv_style_init+0x7c8>)
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 80084de:	1c69      	adds	r1, r5, #1
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 80084e0:	401a      	ands	r2, r3
 80084e2:	23a0      	movs	r3, #160	; 0xa0
 80084e4:	00db      	lsls	r3, r3, #3
 80084e6:	4313      	orrs	r3, r2
 80084e8:	2207      	movs	r2, #7
 80084ea:	806b      	strh	r3, [r5, #2]
 80084ec:	0a1b      	lsrs	r3, r3, #8
 80084ee:	4013      	ands	r3, r2
 80084f0:	3269      	adds	r2, #105	; 0x69
 80084f2:	4313      	orrs	r3, r2
 80084f4:	70eb      	strb	r3, [r5, #3]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 80084f6:	230b      	movs	r3, #11
 80084f8:	792a      	ldrb	r2, [r5, #4]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 80084fa:	4240      	negs	r0, r0
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 80084fc:	43a2      	bics	r2, r4
 80084fe:	4313      	orrs	r3, r2
 8008500:	712b      	strb	r3, [r5, #4]
 8008502:	88aa      	ldrh	r2, [r5, #4]
 8008504:	4be7      	ldr	r3, [pc, #924]	; (80088a4 <lv_style_init+0x7c8>)
    lv_style_btn_rel.body.shadow.width   = 0;
 8008506:	826f      	strh	r7, [r5, #18]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 8008508:	401a      	ands	r2, r3
 800850a:	23e0      	movs	r3, #224	; 0xe0
 800850c:	005b      	lsls	r3, r3, #1
 800850e:	4313      	orrs	r3, r2
 8008510:	2207      	movs	r2, #7
 8008512:	80ab      	strh	r3, [r5, #4]
 8008514:	0a1b      	lsrs	r3, r3, #8
 8008516:	4013      	ands	r3, r2
 8008518:	3211      	adds	r2, #17
 800851a:	4313      	orrs	r3, r2
 800851c:	716b      	strb	r3, [r5, #5]
    lv_style_btn_rel.body.radius         = LV_DPI / 15;
 800851e:	2301      	movs	r3, #1
 8008520:	80eb      	strh	r3, [r5, #6]
    lv_style_btn_rel.body.padding.left   = LV_DPI / 4;
 8008522:	2306      	movs	r3, #6
 8008524:	836b      	strh	r3, [r5, #26]
    lv_style_btn_rel.body.padding.right  = LV_DPI / 4;
 8008526:	2306      	movs	r3, #6
 8008528:	83ab      	strh	r3, [r5, #28]
    lv_style_btn_rel.body.padding.top    = LV_DPI / 6;
 800852a:	2304      	movs	r3, #4
 800852c:	82eb      	strh	r3, [r5, #22]
    lv_style_btn_rel.body.padding.bottom = LV_DPI / 6;
 800852e:	2304      	movs	r3, #4
 8008530:	832b      	strh	r3, [r5, #24]
    lv_style_btn_rel.body.padding.inner  = LV_DPI / 10;
 8008532:	2302      	movs	r3, #2
 8008534:	83eb      	strh	r3, [r5, #30]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 8008536:	2305      	movs	r3, #5
 8008538:	7aaa      	ldrb	r2, [r5, #10]
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 800853a:	27c0      	movs	r7, #192	; 0xc0
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 800853c:	43a2      	bics	r2, r4
 800853e:	4313      	orrs	r3, r2
 8008540:	72ab      	strb	r3, [r5, #10]
 8008542:	896a      	ldrh	r2, [r5, #10]
 8008544:	4bd7      	ldr	r3, [pc, #860]	; (80088a4 <lv_style_init+0x7c8>)
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 8008546:	00bf      	lsls	r7, r7, #2
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 8008548:	401a      	ands	r2, r3
 800854a:	23c0      	movs	r3, #192	; 0xc0
 800854c:	4313      	orrs	r3, r2
 800854e:	816b      	strh	r3, [r5, #10]
 8008550:	2308      	movs	r3, #8
 8008552:	72eb      	strb	r3, [r5, #11]
    lv_style_btn_rel.body.border.width   = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 8008554:	2301      	movs	r3, #1
 8008556:	81ab      	strh	r3, [r5, #12]
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
 8008558:	23b2      	movs	r3, #178	; 0xb2
 800855a:	73eb      	strb	r3, [r5, #15]
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 800855c:	466b      	mov	r3, sp
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 800855e:	22fc      	movs	r2, #252	; 0xfc
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 8008560:	889b      	ldrh	r3, [r3, #4]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 8008562:	00d2      	lsls	r2, r2, #3
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 8008564:	822b      	strh	r3, [r5, #16]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 8008566:	7fcb      	ldrb	r3, [r1, #31]
 8008568:	4323      	orrs	r3, r4
 800856a:	77cb      	strb	r3, [r1, #31]
 800856c:	8c2b      	ldrh	r3, [r5, #32]
 800856e:	1ca9      	adds	r1, r5, #2
 8008570:	4313      	orrs	r3, r2
 8008572:	842b      	strh	r3, [r5, #32]
 8008574:	0a1b      	lsrs	r3, r3, #8
 8008576:	4303      	orrs	r3, r0
 8008578:	77cb      	strb	r3, [r1, #31]
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);
 800857a:	002b      	movs	r3, r5
 800857c:	3330      	adds	r3, #48	; 0x30
 800857e:	7819      	ldrb	r1, [r3, #0]
 8008580:	4321      	orrs	r1, r4
 8008582:	7019      	strb	r1, [r3, #0]
 8008584:	8e29      	ldrh	r1, [r5, #48]	; 0x30
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 8008586:	4ec8      	ldr	r6, [pc, #800]	; (80088a8 <lv_style_init+0x7cc>)
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);
 8008588:	430a      	orrs	r2, r1
 800858a:	862a      	strh	r2, [r5, #48]	; 0x30
 800858c:	0a12      	lsrs	r2, r2, #8
 800858e:	4302      	orrs	r2, r0
 8008590:	705a      	strb	r2, [r3, #1]
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 8008592:	0029      	movs	r1, r5
 8008594:	0030      	movs	r0, r6
 8008596:	f7ff fd9b 	bl	80080d0 <lv_style_copy>
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 800859a:	2212      	movs	r2, #18
 800859c:	78b3      	ldrb	r3, [r6, #2]
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800859e:	2118      	movs	r1, #24
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 80085a0:	43a3      	bics	r3, r4
 80085a2:	4313      	orrs	r3, r2
 80085a4:	70b3      	strb	r3, [r6, #2]
 80085a6:	8873      	ldrh	r3, [r6, #2]
 80085a8:	4abe      	ldr	r2, [pc, #760]	; (80088a4 <lv_style_init+0x7c8>)
 80085aa:	4013      	ands	r3, r2
 80085ac:	2207      	movs	r2, #7
 80085ae:	433b      	orrs	r3, r7
 80085b0:	8073      	strh	r3, [r6, #2]
 80085b2:	0a1b      	lsrs	r3, r3, #8
 80085b4:	4013      	ands	r3, r2
 80085b6:	3229      	adds	r2, #41	; 0x29
 80085b8:	4313      	orrs	r3, r2
 80085ba:	70f3      	strb	r3, [r6, #3]
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
 80085bc:	7933      	ldrb	r3, [r6, #4]
 80085be:	3a29      	subs	r2, #41	; 0x29
 80085c0:	43a3      	bics	r3, r4
 80085c2:	4313      	orrs	r3, r2
 80085c4:	7133      	strb	r3, [r6, #4]
 80085c6:	88b2      	ldrh	r2, [r6, #4]
 80085c8:	4bb6      	ldr	r3, [pc, #728]	; (80088a4 <lv_style_init+0x7c8>)
 80085ca:	401a      	ands	r2, r3
 80085cc:	2390      	movs	r3, #144	; 0x90
 80085ce:	005b      	lsls	r3, r3, #1
 80085d0:	4313      	orrs	r3, r2
 80085d2:	2207      	movs	r2, #7
 80085d4:	80b3      	strh	r3, [r6, #4]
 80085d6:	0a1b      	lsrs	r3, r3, #8
 80085d8:	4013      	ands	r3, r2
 80085da:	3209      	adds	r2, #9
 80085dc:	4313      	orrs	r3, r2
 80085de:	7173      	strb	r3, [r6, #5]
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 80085e0:	1c72      	adds	r2, r6, #1
 80085e2:	7fd3      	ldrb	r3, [r2, #31]
 80085e4:	43a3      	bics	r3, r4
 80085e6:	430b      	orrs	r3, r1
 80085e8:	77d3      	strb	r3, [r2, #31]
 80085ea:	8c33      	ldrh	r3, [r6, #32]
 80085ec:	49ad      	ldr	r1, [pc, #692]	; (80088a4 <lv_style_init+0x7c8>)
 80085ee:	1cb2      	adds	r2, r6, #2
 80085f0:	400b      	ands	r3, r1
 80085f2:	21b4      	movs	r1, #180	; 0xb4
 80085f4:	00c9      	lsls	r1, r1, #3
 80085f6:	430b      	orrs	r3, r1
 80085f8:	2107      	movs	r1, #7
 80085fa:	8433      	strh	r3, [r6, #32]
 80085fc:	0a1b      	lsrs	r3, r3, #8
 80085fe:	400b      	ands	r3, r1
 8008600:	3967      	subs	r1, #103	; 0x67
 8008602:	430b      	orrs	r3, r1
 8008604:	77d3      	strb	r3, [r2, #31]
    lv_style_btn_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 8008606:	0032      	movs	r2, r6
 8008608:	3230      	adds	r2, #48	; 0x30
 800860a:	7813      	ldrb	r3, [r2, #0]
 800860c:	3178      	adds	r1, #120	; 0x78
 800860e:	43a3      	bics	r3, r4
 8008610:	430b      	orrs	r3, r1
 8008612:	7013      	strb	r3, [r2, #0]
 8008614:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 8008616:	49a3      	ldr	r1, [pc, #652]	; (80088a4 <lv_style_init+0x7c8>)
 8008618:	400b      	ands	r3, r1
 800861a:	21b4      	movs	r1, #180	; 0xb4
 800861c:	00c9      	lsls	r1, r1, #3
 800861e:	430b      	orrs	r3, r1
 8008620:	2107      	movs	r1, #7
 8008622:	8633      	strh	r3, [r6, #48]	; 0x30
 8008624:	0a1b      	lsrs	r3, r3, #8
 8008626:	400b      	ands	r3, r1
 8008628:	3967      	subs	r1, #103	; 0x67
 800862a:	430b      	orrs	r3, r1
 800862c:	7053      	strb	r3, [r2, #1]
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800862e:	0032      	movs	r2, r6
 8008630:	3234      	adds	r2, #52	; 0x34
 8008632:	7813      	ldrb	r3, [r2, #0]
 8008634:	3178      	adds	r1, #120	; 0x78
 8008636:	43a3      	bics	r3, r4
 8008638:	430b      	orrs	r3, r1
 800863a:	7013      	strb	r3, [r2, #0]
 800863c:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
 800863e:	4999      	ldr	r1, [pc, #612]	; (80088a4 <lv_style_init+0x7c8>)
 8008640:	400b      	ands	r3, r1
 8008642:	21b4      	movs	r1, #180	; 0xb4
 8008644:	00c9      	lsls	r1, r1, #3
 8008646:	430b      	orrs	r3, r1
 8008648:	2107      	movs	r1, #7
 800864a:	86b3      	strh	r3, [r6, #52]	; 0x34
 800864c:	0a1b      	lsrs	r3, r3, #8
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
 800864e:	4e97      	ldr	r6, [pc, #604]	; (80088ac <lv_style_init+0x7d0>)
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8008650:	400b      	ands	r3, r1
 8008652:	3967      	subs	r1, #103	; 0x67
 8008654:	430b      	orrs	r3, r1
 8008656:	7053      	strb	r3, [r2, #1]
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
 8008658:	0029      	movs	r1, r5
 800865a:	0030      	movs	r0, r6
 800865c:	f7ff fd38 	bl	80080d0 <lv_style_copy>
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 8008660:	2204      	movs	r2, #4
 8008662:	78b3      	ldrb	r3, [r6, #2]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8008664:	1c70      	adds	r0, r6, #1
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 8008666:	43a3      	bics	r3, r4
 8008668:	4313      	orrs	r3, r2
 800866a:	70b3      	strb	r3, [r6, #2]
 800866c:	8872      	ldrh	r2, [r6, #2]
 800866e:	4b8d      	ldr	r3, [pc, #564]	; (80088a4 <lv_style_init+0x7c8>)
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8008670:	2107      	movs	r1, #7
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 8008672:	401a      	ands	r2, r3
 8008674:	2380      	movs	r3, #128	; 0x80
 8008676:	4313      	orrs	r3, r2
 8008678:	8073      	strh	r3, [r6, #2]
 800867a:	2308      	movs	r3, #8
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 800867c:	2212      	movs	r2, #18
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 800867e:	70f3      	strb	r3, [r6, #3]
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 8008680:	7933      	ldrb	r3, [r6, #4]
 8008682:	43a3      	bics	r3, r4
 8008684:	4313      	orrs	r3, r2
 8008686:	7133      	strb	r3, [r6, #4]
 8008688:	88b3      	ldrh	r3, [r6, #4]
 800868a:	4a86      	ldr	r2, [pc, #536]	; (80088a4 <lv_style_init+0x7c8>)
 800868c:	4013      	ands	r3, r2
 800868e:	431f      	orrs	r7, r3
 8008690:	2307      	movs	r3, #7
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 8008692:	2201      	movs	r2, #1
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 8008694:	80b7      	strh	r7, [r6, #4]
 8008696:	0a3f      	lsrs	r7, r7, #8
 8008698:	401f      	ands	r7, r3
 800869a:	3329      	adds	r3, #41	; 0x29
 800869c:	431f      	orrs	r7, r3
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 800869e:	7ab3      	ldrb	r3, [r6, #10]
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 80086a0:	7177      	strb	r7, [r6, #5]
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 80086a2:	43a3      	bics	r3, r4
 80086a4:	4313      	orrs	r3, r2
 80086a6:	72b3      	strb	r3, [r6, #10]
 80086a8:	8973      	ldrh	r3, [r6, #10]
 80086aa:	4a7e      	ldr	r2, [pc, #504]	; (80088a4 <lv_style_init+0x7c8>)
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
 80086ac:	271e      	movs	r7, #30
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 80086ae:	4013      	ands	r3, r2
 80086b0:	2220      	movs	r2, #32
 80086b2:	4313      	orrs	r3, r2
 80086b4:	8173      	strh	r3, [r6, #10]
 80086b6:	2300      	movs	r3, #0
 80086b8:	72f3      	strb	r3, [r6, #11]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 80086ba:	7fc3      	ldrb	r3, [r0, #31]
 80086bc:	3a02      	subs	r2, #2
 80086be:	43a3      	bics	r3, r4
 80086c0:	4313      	orrs	r3, r2
 80086c2:	77c3      	strb	r3, [r0, #31]
 80086c4:	8c33      	ldrh	r3, [r6, #32]
 80086c6:	4a77      	ldr	r2, [pc, #476]	; (80088a4 <lv_style_init+0x7c8>)
 80086c8:	1cb0      	adds	r0, r6, #2
 80086ca:	4013      	ands	r3, r2
 80086cc:	22dc      	movs	r2, #220	; 0xdc
 80086ce:	00d2      	lsls	r2, r2, #3
 80086d0:	4313      	orrs	r3, r2
 80086d2:	8433      	strh	r3, [r6, #32]
 80086d4:	0a1b      	lsrs	r3, r3, #8
 80086d6:	400b      	ands	r3, r1
 80086d8:	393f      	subs	r1, #63	; 0x3f
 80086da:	430b      	orrs	r3, r1
 80086dc:	77c3      	strb	r3, [r0, #31]
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
 80086de:	0030      	movs	r0, r6
 80086e0:	3030      	adds	r0, #48	; 0x30
 80086e2:	7803      	ldrb	r3, [r0, #0]
 80086e4:	43a3      	bics	r3, r4
 80086e6:	433b      	orrs	r3, r7
 80086e8:	7003      	strb	r3, [r0, #0]
 80086ea:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 80086ec:	4f6d      	ldr	r7, [pc, #436]	; (80088a4 <lv_style_init+0x7c8>)
 80086ee:	403b      	ands	r3, r7
 80086f0:	2707      	movs	r7, #7
 80086f2:	4313      	orrs	r3, r2
 80086f4:	8633      	strh	r3, [r6, #48]	; 0x30
 80086f6:	0a1b      	lsrs	r3, r3, #8
 80086f8:	403b      	ands	r3, r7
 80086fa:	430b      	orrs	r3, r1
 80086fc:	7043      	strb	r3, [r0, #1]
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 80086fe:	0033      	movs	r3, r6
 8008700:	3334      	adds	r3, #52	; 0x34
 8008702:	7818      	ldrb	r0, [r3, #0]
 8008704:	3717      	adds	r7, #23
 8008706:	43a0      	bics	r0, r4
 8008708:	4338      	orrs	r0, r7
 800870a:	7018      	strb	r0, [r3, #0]
 800870c:	8eb0      	ldrh	r0, [r6, #52]	; 0x34
 800870e:	4f65      	ldr	r7, [pc, #404]	; (80088a4 <lv_style_init+0x7c8>)
 8008710:	4038      	ands	r0, r7
 8008712:	4302      	orrs	r2, r0
 8008714:	2007      	movs	r0, #7
 8008716:	86b2      	strh	r2, [r6, #52]	; 0x34
 8008718:	0a12      	lsrs	r2, r2, #8
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 800871a:	4f65      	ldr	r7, [pc, #404]	; (80088b0 <lv_style_init+0x7d4>)
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 800871c:	4002      	ands	r2, r0
 800871e:	430a      	orrs	r2, r1
 8008720:	705a      	strb	r2, [r3, #1]
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 8008722:	0031      	movs	r1, r6
 8008724:	0038      	movs	r0, r7
 8008726:	f7ff fcd3 	bl	80080d0 <lv_style_copy>
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 800872a:	2204      	movs	r2, #4
 800872c:	78bb      	ldrb	r3, [r7, #2]
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 800872e:	260e      	movs	r6, #14
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 8008730:	43a3      	bics	r3, r4
 8008732:	4313      	orrs	r3, r2
 8008734:	70bb      	strb	r3, [r7, #2]
 8008736:	887a      	ldrh	r2, [r7, #2]
 8008738:	4b5a      	ldr	r3, [pc, #360]	; (80088a4 <lv_style_init+0x7c8>)
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800873a:	2118      	movs	r1, #24
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 800873c:	401a      	ands	r2, r3
 800873e:	23a0      	movs	r3, #160	; 0xa0
 8008740:	4313      	orrs	r3, r2
 8008742:	807b      	strh	r3, [r7, #2]
 8008744:	2300      	movs	r3, #0
 8008746:	70fb      	strb	r3, [r7, #3]
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 8008748:	793b      	ldrb	r3, [r7, #4]
 800874a:	43a3      	bics	r3, r4
 800874c:	4333      	orrs	r3, r6
 800874e:	713b      	strb	r3, [r7, #4]
 8008750:	88ba      	ldrh	r2, [r7, #4]
 8008752:	4b54      	ldr	r3, [pc, #336]	; (80088a4 <lv_style_init+0x7c8>)
 8008754:	401a      	ands	r2, r3
 8008756:	2398      	movs	r3, #152	; 0x98
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4313      	orrs	r3, r2
 800875c:	2207      	movs	r2, #7
 800875e:	80bb      	strh	r3, [r7, #4]
 8008760:	0a1b      	lsrs	r3, r3, #8
 8008762:	4013      	ands	r3, r2
 8008764:	3221      	adds	r2, #33	; 0x21
 8008766:	4313      	orrs	r3, r2
 8008768:	717b      	strb	r3, [r7, #5]
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 800876a:	1c7a      	adds	r2, r7, #1
 800876c:	7fd3      	ldrb	r3, [r2, #31]
 800876e:	43a3      	bics	r3, r4
 8008770:	430b      	orrs	r3, r1
 8008772:	77d3      	strb	r3, [r2, #31]
 8008774:	8c3b      	ldrh	r3, [r7, #32]
 8008776:	494b      	ldr	r1, [pc, #300]	; (80088a4 <lv_style_init+0x7c8>)
 8008778:	1cba      	adds	r2, r7, #2
 800877a:	400b      	ands	r3, r1
 800877c:	21b4      	movs	r1, #180	; 0xb4
 800877e:	00c9      	lsls	r1, r1, #3
 8008780:	430b      	orrs	r3, r1
 8008782:	2107      	movs	r1, #7
 8008784:	843b      	strh	r3, [r7, #32]
 8008786:	0a1b      	lsrs	r3, r3, #8
 8008788:	400b      	ands	r3, r1
 800878a:	3967      	subs	r1, #103	; 0x67
 800878c:	430b      	orrs	r3, r1
 800878e:	77d3      	strb	r3, [r2, #31]
    lv_style_btn_tgl_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 8008790:	003a      	movs	r2, r7
 8008792:	3230      	adds	r2, #48	; 0x30
 8008794:	7813      	ldrb	r3, [r2, #0]
 8008796:	3178      	adds	r1, #120	; 0x78
 8008798:	43a3      	bics	r3, r4
 800879a:	430b      	orrs	r3, r1
 800879c:	7013      	strb	r3, [r2, #0]
 800879e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80087a0:	4940      	ldr	r1, [pc, #256]	; (80088a4 <lv_style_init+0x7c8>)
 80087a2:	400b      	ands	r3, r1
 80087a4:	21b4      	movs	r1, #180	; 0xb4
 80087a6:	00c9      	lsls	r1, r1, #3
 80087a8:	430b      	orrs	r3, r1
 80087aa:	2107      	movs	r1, #7
 80087ac:	863b      	strh	r3, [r7, #48]	; 0x30
 80087ae:	0a1b      	lsrs	r3, r3, #8
 80087b0:	400b      	ands	r3, r1
 80087b2:	3967      	subs	r1, #103	; 0x67
 80087b4:	430b      	orrs	r3, r1
 80087b6:	7053      	strb	r3, [r2, #1]
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 80087b8:	003a      	movs	r2, r7
 80087ba:	3234      	adds	r2, #52	; 0x34
 80087bc:	7813      	ldrb	r3, [r2, #0]
 80087be:	3178      	adds	r1, #120	; 0x78
 80087c0:	43a3      	bics	r3, r4
 80087c2:	430b      	orrs	r3, r1
 80087c4:	7013      	strb	r3, [r2, #0]
 80087c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80087c8:	4936      	ldr	r1, [pc, #216]	; (80088a4 <lv_style_init+0x7c8>)
 80087ca:	400b      	ands	r3, r1
 80087cc:	21b4      	movs	r1, #180	; 0xb4
 80087ce:	00c9      	lsls	r1, r1, #3
 80087d0:	430b      	orrs	r3, r1
 80087d2:	2107      	movs	r1, #7
 80087d4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80087d6:	0a1b      	lsrs	r3, r3, #8
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 80087d8:	4f36      	ldr	r7, [pc, #216]	; (80088b4 <lv_style_init+0x7d8>)
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 80087da:	400b      	ands	r3, r1
 80087dc:	3967      	subs	r1, #103	; 0x67
 80087de:	430b      	orrs	r3, r1
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 80087e0:	0038      	movs	r0, r7
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 80087e2:	7053      	strb	r3, [r2, #1]
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 80087e4:	0029      	movs	r1, r5
 80087e6:	f7ff fc73 	bl	80080d0 <lv_style_copy>
    lv_style_btn_ina.body.main_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 80087ea:	221b      	movs	r2, #27
 80087ec:	78bb      	ldrb	r3, [r7, #2]
 80087ee:	2107      	movs	r1, #7
 80087f0:	43a3      	bics	r3, r4
 80087f2:	4313      	orrs	r3, r2
 80087f4:	70bb      	strb	r3, [r7, #2]
 80087f6:	887b      	ldrh	r3, [r7, #2]
 80087f8:	4a2a      	ldr	r2, [pc, #168]	; (80088a4 <lv_style_init+0x7c8>)
    lv_style_btn_ina.body.grad_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 80087fa:	201b      	movs	r0, #27
    lv_style_btn_ina.body.main_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 80087fc:	4013      	ands	r3, r2
 80087fe:	22d8      	movs	r2, #216	; 0xd8
 8008800:	00d2      	lsls	r2, r2, #3
 8008802:	4313      	orrs	r3, r2
 8008804:	807b      	strh	r3, [r7, #2]
 8008806:	0a1b      	lsrs	r3, r3, #8
 8008808:	400b      	ands	r3, r1
 800880a:	392f      	subs	r1, #47	; 0x2f
 800880c:	430b      	orrs	r3, r1
 800880e:	70fb      	strb	r3, [r7, #3]
    lv_style_btn_ina.body.grad_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 8008810:	793b      	ldrb	r3, [r7, #4]
 8008812:	43a3      	bics	r3, r4
 8008814:	4303      	orrs	r3, r0
 8008816:	713b      	strb	r3, [r7, #4]
 8008818:	88bb      	ldrh	r3, [r7, #4]
 800881a:	4822      	ldr	r0, [pc, #136]	; (80088a4 <lv_style_init+0x7c8>)
 800881c:	4003      	ands	r3, r0
 800881e:	431a      	orrs	r2, r3
 8008820:	2307      	movs	r3, #7
 8008822:	80ba      	strh	r2, [r7, #4]
 8008824:	0a12      	lsrs	r2, r2, #8
 8008826:	401a      	ands	r2, r3
 8008828:	430a      	orrs	r2, r1
 800882a:	717a      	strb	r2, [r7, #5]
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
 800882c:	2212      	movs	r2, #18
 800882e:	7abb      	ldrb	r3, [r7, #10]
    lv_style_btn_ina.text.color        = lv_color_make(0x70, 0x70, 0x70);
 8008830:	1c79      	adds	r1, r7, #1
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
 8008832:	43a3      	bics	r3, r4
 8008834:	4313      	orrs	r3, r2
 8008836:	72bb      	strb	r3, [r7, #10]
 8008838:	2390      	movs	r3, #144	; 0x90
 800883a:	897a      	ldrh	r2, [r7, #10]
 800883c:	00db      	lsls	r3, r3, #3
 800883e:	4002      	ands	r2, r0
 8008840:	4313      	orrs	r3, r2
 8008842:	2207      	movs	r2, #7
 8008844:	817b      	strh	r3, [r7, #10]
 8008846:	0a1b      	lsrs	r3, r3, #8
 8008848:	4013      	ands	r3, r2
 800884a:	3a77      	subs	r2, #119	; 0x77
 800884c:	4313      	orrs	r3, r2
 800884e:	72fb      	strb	r3, [r7, #11]
    lv_style_btn_ina.text.color        = lv_color_make(0x70, 0x70, 0x70);
 8008850:	7fcb      	ldrb	r3, [r1, #31]
 8008852:	22e0      	movs	r2, #224	; 0xe0
 8008854:	43a3      	bics	r3, r4
 8008856:	4333      	orrs	r3, r6
 8008858:	77cb      	strb	r3, [r1, #31]
 800885a:	8c3b      	ldrh	r3, [r7, #32]
 800885c:	0092      	lsls	r2, r2, #2
 800885e:	4003      	ands	r3, r0
 8008860:	2007      	movs	r0, #7
 8008862:	4313      	orrs	r3, r2
 8008864:	843b      	strh	r3, [r7, #32]
 8008866:	0a1b      	lsrs	r3, r3, #8
 8008868:	4003      	ands	r3, r0
 800886a:	3069      	adds	r0, #105	; 0x69
 800886c:	1cb9      	adds	r1, r7, #2
 800886e:	4303      	orrs	r3, r0
 8008870:	77cb      	strb	r3, [r1, #31]
    lv_style_btn_ina.image.color       = lv_color_make(0x70, 0x70, 0x70);
 8008872:	0039      	movs	r1, r7
 8008874:	3130      	adds	r1, #48	; 0x30
 8008876:	780b      	ldrb	r3, [r1, #0]
 8008878:	480a      	ldr	r0, [pc, #40]	; (80088a4 <lv_style_init+0x7c8>)
 800887a:	43a3      	bics	r3, r4
 800887c:	4333      	orrs	r3, r6
 800887e:	700b      	strb	r3, [r1, #0]
 8008880:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008882:	4003      	ands	r3, r0
 8008884:	2007      	movs	r0, #7
 8008886:	4313      	orrs	r3, r2
 8008888:	863b      	strh	r3, [r7, #48]	; 0x30
 800888a:	0a1b      	lsrs	r3, r3, #8
 800888c:	4003      	ands	r3, r0
 800888e:	3069      	adds	r0, #105	; 0x69
 8008890:	4303      	orrs	r3, r0
 8008892:	704b      	strb	r3, [r1, #1]
    lv_style_btn_ina.line.color        = lv_color_make(0x70, 0x70, 0x70);
 8008894:	003b      	movs	r3, r7
 8008896:	3334      	adds	r3, #52	; 0x34
 8008898:	7819      	ldrb	r1, [r3, #0]
 800889a:	4802      	ldr	r0, [pc, #8]	; (80088a4 <lv_style_init+0x7c8>)
 800889c:	43a1      	bics	r1, r4
 800889e:	430e      	orrs	r6, r1
 80088a0:	e00a      	b.n	80088b8 <lv_style_init+0x7dc>
 80088a2:	46c0      	nop			; (mov r8, r8)
 80088a4:	fffff81f 	.word	0xfffff81f
 80088a8:	200051b4 	.word	0x200051b4
 80088ac:	2000531c 	.word	0x2000531c
 80088b0:	20005394 	.word	0x20005394
 80088b4:	20005268 	.word	0x20005268
 80088b8:	701e      	strb	r6, [r3, #0]
 80088ba:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80088bc:	4001      	ands	r1, r0
 80088be:	430a      	orrs	r2, r1
 80088c0:	2107      	movs	r1, #7
 80088c2:	86ba      	strh	r2, [r7, #52]	; 0x34
 80088c4:	0a12      	lsrs	r2, r2, #8
 80088c6:	400a      	ands	r2, r1
 80088c8:	3169      	adds	r1, #105	; 0x69
 80088ca:	430a      	orrs	r2, r1
 80088cc:	705a      	strb	r2, [r3, #1]
}
 80088ce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

080088d0 <lv_draw_get_buf>:
 * Be careful to not use the buffer while other processes are using it.
 * @param size the required size
 */
void * lv_draw_get_buf(uint32_t size)
{
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 80088d0:	4b0d      	ldr	r3, [pc, #52]	; (8008908 <lv_draw_get_buf+0x38>)
{
 80088d2:	b510      	push	{r4, lr}
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 80088d4:	681a      	ldr	r2, [r3, #0]
{
 80088d6:	0001      	movs	r1, r0
 80088d8:	4c0c      	ldr	r4, [pc, #48]	; (800890c <lv_draw_get_buf+0x3c>)
    if(size <= draw_buf_size) return LV_GC_ROOT(_lv_draw_buf);
 80088da:	4282      	cmp	r2, r0
 80088dc:	d301      	bcc.n	80088e2 <lv_draw_get_buf+0x12>
 80088de:	6820      	ldr	r0, [r4, #0]
    }

    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
    lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
    return LV_GC_ROOT(_lv_draw_buf);
}
 80088e0:	bd10      	pop	{r4, pc}
    draw_buf_size = size;
 80088e2:	6018      	str	r0, [r3, #0]
    if(LV_GC_ROOT(_lv_draw_buf) == NULL) {
 80088e4:	6820      	ldr	r0, [r4, #0]
 80088e6:	2800      	cmp	r0, #0
 80088e8:	d106      	bne.n	80088f8 <lv_draw_get_buf+0x28>
        LV_GC_ROOT(_lv_draw_buf) = lv_mem_alloc(size);
 80088ea:	0008      	movs	r0, r1
 80088ec:	f003 ff98 	bl	800c820 <lv_mem_alloc>
 80088f0:	6020      	str	r0, [r4, #0]
        lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 80088f2:	2800      	cmp	r0, #0
 80088f4:	d1f4      	bne.n	80088e0 <lv_draw_get_buf+0x10>
 80088f6:	e7fe      	b.n	80088f6 <lv_draw_get_buf+0x26>
    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
 80088f8:	f003 fff0 	bl	800c8dc <lv_mem_realloc>
    lv_mem_assert(LV_GC_ROOT(_lv_draw_buf));
 80088fc:	2800      	cmp	r0, #0
 80088fe:	d001      	beq.n	8008904 <lv_draw_get_buf+0x34>
    LV_GC_ROOT(_lv_draw_buf) = lv_mem_realloc(LV_GC_ROOT(_lv_draw_buf), size);
 8008900:	6020      	str	r0, [r4, #0]
 8008902:	e7ed      	b.n	80088e0 <lv_draw_get_buf+0x10>
 8008904:	e7fe      	b.n	8008904 <lv_draw_get_buf+0x34>
 8008906:	46c0      	nop			; (mov r8, r8)
 8008908:	2000150c 	.word	0x2000150c
 800890c:	20005424 	.word	0x20005424

08008910 <lv_draw_free_buf>:

/**
 * Free the draw buffer
 */
void lv_draw_free_buf(void)
{
 8008910:	b510      	push	{r4, lr}
    if(LV_GC_ROOT(_lv_draw_buf)) {
 8008912:	4c05      	ldr	r4, [pc, #20]	; (8008928 <lv_draw_free_buf+0x18>)
 8008914:	6820      	ldr	r0, [r4, #0]
 8008916:	2800      	cmp	r0, #0
 8008918:	d005      	beq.n	8008926 <lv_draw_free_buf+0x16>
        lv_mem_free(LV_GC_ROOT(_lv_draw_buf));
 800891a:	f003 ffb5 	bl	800c888 <lv_mem_free>
        LV_GC_ROOT(_lv_draw_buf) = NULL;
 800891e:	2300      	movs	r3, #0
        draw_buf_size = 0;
 8008920:	4a02      	ldr	r2, [pc, #8]	; (800892c <lv_draw_free_buf+0x1c>)
        LV_GC_ROOT(_lv_draw_buf) = NULL;
 8008922:	6023      	str	r3, [r4, #0]
        draw_buf_size = 0;
 8008924:	6013      	str	r3, [r2, #0]
    }
}
 8008926:	bd10      	pop	{r4, pc}
 8008928:	20005424 	.word	0x20005424
 800892c:	2000150c 	.word	0x2000150c

08008930 <lv_draw_aa_get_opa>:
 * @param px_id position of  of a pixel which opacity should be get [0..seg-1]
 * @param base_opa the base opacity
 * @return the opacity of the given pixel
 */
lv_opa_t lv_draw_aa_get_opa(lv_coord_t seg, lv_coord_t px_id, lv_opa_t base_opa)
{
 8008930:	0003      	movs	r3, r0
    static const lv_opa_t seg8[8] = {16, 48, 80, 112, 143, 175, 207, 239};

    static const lv_opa_t * seg_map[] = {seg1, seg2, seg3, seg4, seg5, seg6, seg7, seg8};

    if(seg == 0)
        return LV_OPA_TRANSP;
 8008932:	2000      	movs	r0, #0
{
 8008934:	b510      	push	{r4, lr}
    if(seg == 0)
 8008936:	4283      	cmp	r3, r0
 8008938:	d008      	beq.n	800894c <lv_draw_aa_get_opa+0x1c>
    else if(seg < 8)
 800893a:	2b07      	cmp	r3, #7
 800893c:	dc07      	bgt.n	800894e <lv_draw_aa_get_opa+0x1e>
        return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 800893e:	4808      	ldr	r0, [pc, #32]	; (8008960 <lv_draw_aa_get_opa+0x30>)
 8008940:	3b01      	subs	r3, #1
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	581b      	ldr	r3, [r3, r0]
 8008946:	5c58      	ldrb	r0, [r3, r1]
 8008948:	4350      	muls	r0, r2
 800894a:	0a00      	lsrs	r0, r0, #8
    else {
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
    }
}
 800894c:	bd10      	pop	{r4, pc}
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 800894e:	0049      	lsls	r1, r1, #1
 8008950:	3101      	adds	r1, #1
 8008952:	434a      	muls	r2, r1
 8008954:	0059      	lsls	r1, r3, #1
 8008956:	0010      	movs	r0, r2
 8008958:	f7f7 fc8c 	bl	8000274 <__divsi3>
 800895c:	b2c0      	uxtb	r0, r0
 800895e:	e7f5      	b.n	800894c <lv_draw_aa_get_opa+0x1c>
 8008960:	08010ee0 	.word	0x08010ee0

08008964 <lv_color_mix>:
static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8008964:	23ff      	movs	r3, #255	; 0xff
{
 8008966:	b5f0      	push	{r4, r5, r6, r7, lr}
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8008968:	261f      	movs	r6, #31
 800896a:	b297      	uxth	r7, r2
 800896c:	0404      	lsls	r4, r0, #16
 800896e:	1a9a      	subs	r2, r3, r2
 8008970:	040b      	lsls	r3, r1, #16
 8008972:	b292      	uxth	r2, r2
 8008974:	0ee4      	lsrs	r4, r4, #27
 8008976:	0edb      	lsrs	r3, r3, #27
 8008978:	437c      	muls	r4, r7
 800897a:	4353      	muls	r3, r2
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
    ret.ch.green_h = g_out >> 3;
    ret.ch.green_l = g_out & 0x7;
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800897c:	0545      	lsls	r5, r0, #21
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800897e:	18e4      	adds	r4, r4, r3
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8008980:	054b      	lsls	r3, r1, #21
 8008982:	0ead      	lsrs	r5, r5, #26
 8008984:	0e9b      	lsrs	r3, r3, #26
 8008986:	437d      	muls	r5, r7
 8008988:	4353      	muls	r3, r2
 800898a:	18ed      	adds	r5, r5, r3
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800898c:	06c3      	lsls	r3, r0, #27
 800898e:	06c8      	lsls	r0, r1, #27
 8008990:	0edb      	lsrs	r3, r3, #27
 8008992:	0ec0      	lsrs	r0, r0, #27
 8008994:	437b      	muls	r3, r7
 8008996:	4350      	muls	r0, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8008998:	04ad      	lsls	r5, r5, #18
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800899a:	1818      	adds	r0, r3, r0
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800899c:	0a24      	lsrs	r4, r4, #8
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800899e:	0a00      	lsrs	r0, r0, #8
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 80089a0:	0ead      	lsrs	r5, r5, #26
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 80089a2:	4034      	ands	r4, r6
    return ret;
 80089a4:	016d      	lsls	r5, r5, #5
 80089a6:	4030      	ands	r0, r6
 80089a8:	4328      	orrs	r0, r5
 80089aa:	02e4      	lsls	r4, r4, #11
 80089ac:	4320      	orrs	r0, r4
}
 80089ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089b0 <sw_color_fill>:
 * @param color fill color
 * @param opa opacity (0, LV_OPA_TRANSP: transparent ... 255, LV_OPA_COVER, fully cover)
 */
static void sw_color_fill(lv_color_t * mem, lv_coord_t mem_width, const lv_area_t * fill_area, lv_color_t color,
                          lv_opa_t opa)
{
 80089b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089b2:	b08b      	sub	sp, #44	; 0x2c
 80089b4:	0016      	movs	r6, r2
 80089b6:	466a      	mov	r2, sp
 80089b8:	8393      	strh	r3, [r2, #28]
 80089ba:	ab10      	add	r3, sp, #64	; 0x40
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	9009      	str	r0, [sp, #36]	; 0x24
 80089c0:	9308      	str	r3, [sp, #32]
 80089c2:	9106      	str	r1, [sp, #24]
    /*Set all row in vdb to the given color*/
    lv_coord_t row;
    lv_coord_t col;

    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 80089c4:	f7ff f9b6 	bl	8007d34 <lv_refr_get_disp_refreshing>
    if(disp->driver.set_px_cb) {
 80089c8:	6943      	ldr	r3, [r0, #20]
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 80089ca:	0007      	movs	r7, r0
    if(disp->driver.set_px_cb) {
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d024      	beq.n	8008a1a <sw_color_fill+0x6a>
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 80089d0:	2300      	movs	r3, #0
 80089d2:	5ef2      	ldrsh	r2, [r6, r3]
 80089d4:	9205      	str	r2, [sp, #20]
 80089d6:	2204      	movs	r2, #4
 80089d8:	5eb3      	ldrsh	r3, [r6, r2]
 80089da:	9a05      	ldr	r2, [sp, #20]
 80089dc:	4293      	cmp	r3, r2
 80089de:	da01      	bge.n	80089e4 <sw_color_fill+0x34>
                }
                mem += mem_width;
            }
        }
    }
}
 80089e0:	b00b      	add	sp, #44	; 0x2c
 80089e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 80089e4:	2302      	movs	r3, #2
 80089e6:	5ef5      	ldrsh	r5, [r6, r3]
 80089e8:	2206      	movs	r2, #6
 80089ea:	5eb3      	ldrsh	r3, [r6, r2]
 80089ec:	42ab      	cmp	r3, r5
 80089ee:	da04      	bge.n	80089fa <sw_color_fill+0x4a>
 80089f0:	9c05      	ldr	r4, [sp, #20]
 80089f2:	3401      	adds	r4, #1
 80089f4:	b223      	sxth	r3, r4
 80089f6:	9305      	str	r3, [sp, #20]
 80089f8:	e7ed      	b.n	80089d6 <sw_color_fill+0x26>
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
 80089fa:	466a      	mov	r2, sp
 80089fc:	9b08      	ldr	r3, [sp, #32]
 80089fe:	0038      	movs	r0, r7
 8008a00:	9302      	str	r3, [sp, #8]
 8008a02:	8b92      	ldrh	r2, [r2, #28]
 8008a04:	ab01      	add	r3, sp, #4
 8008a06:	801a      	strh	r2, [r3, #0]
 8008a08:	9500      	str	r5, [sp, #0]
 8008a0a:	9b05      	ldr	r3, [sp, #20]
 8008a0c:	9a06      	ldr	r2, [sp, #24]
 8008a0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a10:	697c      	ldr	r4, [r7, #20]
 8008a12:	3501      	adds	r5, #1
 8008a14:	47a0      	blx	r4
 8008a16:	b22d      	sxth	r5, r5
 8008a18:	e7e6      	b.n	80089e8 <sw_color_fill+0x38>
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
 8008a1a:	2302      	movs	r3, #2
 8008a1c:	5ef4      	ldrsh	r4, [r6, r3]
 8008a1e:	9f06      	ldr	r7, [sp, #24]
 8008a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a22:	4367      	muls	r7, r4
 8008a24:	007f      	lsls	r7, r7, #1
 8008a26:	19df      	adds	r7, r3, r7
        if(opa == LV_OPA_COVER) {
 8008a28:	9b08      	ldr	r3, [sp, #32]
 8008a2a:	2bff      	cmp	r3, #255	; 0xff
 8008a2c:	d127      	bne.n	8008a7e <sw_color_fill+0xce>
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8008a2e:	2300      	movs	r3, #0
 8008a30:	5ef2      	ldrsh	r2, [r6, r3]
 8008a32:	0013      	movs	r3, r2
 8008a34:	2104      	movs	r1, #4
 8008a36:	5e75      	ldrsh	r5, [r6, r1]
 8008a38:	42ab      	cmp	r3, r5
 8008a3a:	dd19      	ble.n	8008a70 <sw_color_fill+0xc0>
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 8008a3c:	1aad      	subs	r5, r5, r2
            lv_color_t * mem_first = &mem[fill_area->x1];
 8008a3e:	0053      	lsls	r3, r2, #1
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 8008a40:	3501      	adds	r5, #1
            lv_color_t * mem_first = &mem[fill_area->x1];
 8008a42:	18fb      	adds	r3, r7, r3
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 8008a44:	006d      	lsls	r5, r5, #1
            lv_color_t * mem_first = &mem[fill_area->x1];
 8008a46:	9305      	str	r3, [sp, #20]
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 8008a48:	b22b      	sxth	r3, r5
 8008a4a:	9307      	str	r3, [sp, #28]
            mem += mem_width;
 8008a4c:	9b06      	ldr	r3, [sp, #24]
 8008a4e:	005d      	lsls	r5, r3, #1
 8008a50:	3401      	adds	r4, #1
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 8008a52:	2206      	movs	r2, #6
 8008a54:	5eb3      	ldrsh	r3, [r6, r2]
 8008a56:	b224      	sxth	r4, r4
                mem += mem_width;
 8008a58:	197f      	adds	r7, r7, r5
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 8008a5a:	42a3      	cmp	r3, r4
 8008a5c:	dbc0      	blt.n	80089e0 <sw_color_fill+0x30>
                memcpy(&mem[fill_area->x1], mem_first, copy_size);
 8008a5e:	2300      	movs	r3, #0
 8008a60:	5ef0      	ldrsh	r0, [r6, r3]
 8008a62:	9a07      	ldr	r2, [sp, #28]
 8008a64:	0040      	lsls	r0, r0, #1
 8008a66:	1838      	adds	r0, r7, r0
 8008a68:	9905      	ldr	r1, [sp, #20]
 8008a6a:	f005 fb8f 	bl	800e18c <memcpy>
 8008a6e:	e7ef      	b.n	8008a50 <sw_color_fill+0xa0>
                mem[col] = color;
 8008a70:	4668      	mov	r0, sp
 8008a72:	8b80      	ldrh	r0, [r0, #28]
 8008a74:	0059      	lsls	r1, r3, #1
 8008a76:	3301      	adds	r3, #1
 8008a78:	53c8      	strh	r0, [r1, r7]
 8008a7a:	b21b      	sxth	r3, r3
 8008a7c:	e7da      	b.n	8008a34 <sw_color_fill+0x84>
            lv_color_t bg_tmp  = LV_COLOR_BLACK;
 8008a7e:	466b      	mov	r3, sp
 8008a80:	2100      	movs	r1, #0
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
 8008a82:	9a08      	ldr	r2, [sp, #32]
 8008a84:	8b98      	ldrh	r0, [r3, #28]
            lv_color_t bg_tmp  = LV_COLOR_BLACK;
 8008a86:	8499      	strh	r1, [r3, #36]	; 0x24
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
 8008a88:	f7ff ff6c 	bl	8008964 <lv_color_mix>
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	5eb3      	ldrsh	r3, [r6, r2]
 8008a90:	9305      	str	r3, [sp, #20]
                mem += mem_width;
 8008a92:	9b06      	ldr	r3, [sp, #24]
 8008a94:	005b      	lsls	r3, r3, #1
 8008a96:	9306      	str	r3, [sp, #24]
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 8008a98:	2206      	movs	r2, #6
 8008a9a:	5eb3      	ldrsh	r3, [r6, r2]
 8008a9c:	9a05      	ldr	r2, [sp, #20]
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	db9e      	blt.n	80089e0 <sw_color_fill+0x30>
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	5ef4      	ldrsh	r4, [r6, r3]
 8008aa6:	2204      	movs	r2, #4
 8008aa8:	5eb3      	ldrsh	r3, [r6, r2]
 8008aaa:	42a3      	cmp	r3, r4
 8008aac:	da06      	bge.n	8008abc <sw_color_fill+0x10c>
                mem += mem_width;
 8008aae:	9b06      	ldr	r3, [sp, #24]
 8008ab0:	18ff      	adds	r7, r7, r3
 8008ab2:	9b05      	ldr	r3, [sp, #20]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	b21b      	sxth	r3, r3
 8008ab8:	9305      	str	r3, [sp, #20]
 8008aba:	e7ed      	b.n	8008a98 <sw_color_fill+0xe8>
                        if(mem[col].full != bg_tmp.full) {
 8008abc:	466b      	mov	r3, sp
 8008abe:	0065      	lsls	r5, r4, #1
 8008ac0:	197d      	adds	r5, r7, r5
 8008ac2:	8829      	ldrh	r1, [r5, #0]
 8008ac4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008ac6:	4299      	cmp	r1, r3
 8008ac8:	d005      	beq.n	8008ad6 <sw_color_fill+0x126>
                            bg_tmp  = mem[col];
 8008aca:	466b      	mov	r3, sp
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
 8008acc:	9a08      	ldr	r2, [sp, #32]
 8008ace:	8b98      	ldrh	r0, [r3, #28]
                            bg_tmp  = mem[col];
 8008ad0:	8499      	strh	r1, [r3, #36]	; 0x24
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
 8008ad2:	f7ff ff47 	bl	8008964 <lv_color_mix>
 8008ad6:	3401      	adds	r4, #1
                        mem[col] = opa_tmp;
 8008ad8:	8028      	strh	r0, [r5, #0]
 8008ada:	b224      	sxth	r4, r4
 8008adc:	e7e3      	b.n	8008aa6 <sw_color_fill+0xf6>

08008ade <lv_draw_px>:
{
 8008ade:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ae0:	b087      	sub	sp, #28
 8008ae2:	1c1e      	adds	r6, r3, #0
 8008ae4:	ab0c      	add	r3, sp, #48	; 0x30
 8008ae6:	781d      	ldrb	r5, [r3, #0]
 8008ae8:	0004      	movs	r4, r0
 8008aea:	9105      	str	r1, [sp, #20]
    if(opa < LV_OPA_MIN) return;
 8008aec:	2d0f      	cmp	r5, #15
 8008aee:	d92d      	bls.n	8008b4c <lv_draw_px+0x6e>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8008af0:	2dfb      	cmp	r5, #251	; 0xfb
 8008af2:	d900      	bls.n	8008af6 <lv_draw_px+0x18>
 8008af4:	25ff      	movs	r5, #255	; 0xff
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
 8008af6:	2100      	movs	r1, #0
 8008af8:	5e53      	ldrsh	r3, [r2, r1]
 8008afa:	42a3      	cmp	r3, r4
 8008afc:	dc26      	bgt.n	8008b4c <lv_draw_px+0x6e>
 8008afe:	2104      	movs	r1, #4
 8008b00:	5e53      	ldrsh	r3, [r2, r1]
 8008b02:	42a3      	cmp	r3, r4
 8008b04:	db22      	blt.n	8008b4c <lv_draw_px+0x6e>
 8008b06:	2102      	movs	r1, #2
 8008b08:	5e53      	ldrsh	r3, [r2, r1]
 8008b0a:	9905      	ldr	r1, [sp, #20]
 8008b0c:	428b      	cmp	r3, r1
 8008b0e:	dc1d      	bgt.n	8008b4c <lv_draw_px+0x6e>
 8008b10:	2306      	movs	r3, #6
 8008b12:	5ed3      	ldrsh	r3, [r2, r3]
 8008b14:	428b      	cmp	r3, r1
 8008b16:	db19      	blt.n	8008b4c <lv_draw_px+0x6e>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 8008b18:	f7ff f90c 	bl	8007d34 <lv_refr_get_disp_refreshing>
 8008b1c:	0007      	movs	r7, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8008b1e:	f003 f9b9 	bl	800be94 <lv_disp_get_buf>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 8008b22:	8a82      	ldrh	r2, [r0, #20]
 8008b24:	8a03      	ldrh	r3, [r0, #16]
 8008b26:	3201      	adds	r2, #1
 8008b28:	1ad2      	subs	r2, r2, r3
    y -= vdb->area.y1;
 8008b2a:	8a41      	ldrh	r1, [r0, #18]
    x -= vdb->area.x1;
 8008b2c:	1ae3      	subs	r3, r4, r3
    y -= vdb->area.y1;
 8008b2e:	9c05      	ldr	r4, [sp, #20]
 8008b30:	b212      	sxth	r2, r2
 8008b32:	1a61      	subs	r1, r4, r1
    if(disp->driver.set_px_cb) {
 8008b34:	697c      	ldr	r4, [r7, #20]
    x -= vdb->area.x1;
 8008b36:	b21b      	sxth	r3, r3
    y -= vdb->area.y1;
 8008b38:	b209      	sxth	r1, r1
    if(disp->driver.set_px_cb) {
 8008b3a:	2c00      	cmp	r4, #0
 8008b3c:	d008      	beq.n	8008b50 <lv_draw_px+0x72>
        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, x, y, color, opa);
 8008b3e:	9502      	str	r5, [sp, #8]
 8008b40:	ad01      	add	r5, sp, #4
 8008b42:	802e      	strh	r6, [r5, #0]
 8008b44:	9100      	str	r1, [sp, #0]
 8008b46:	6881      	ldr	r1, [r0, #8]
 8008b48:	0038      	movs	r0, r7
 8008b4a:	47a0      	blx	r4
}
 8008b4c:	b007      	add	sp, #28
 8008b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vdb_px_p += y * vdb_width + x;
 8008b50:	4351      	muls	r1, r2
        lv_color_t * vdb_px_p = vdb->buf_act;
 8008b52:	6884      	ldr	r4, [r0, #8]
        vdb_px_p += y * vdb_width + x;
 8008b54:	18c9      	adds	r1, r1, r3
 8008b56:	0049      	lsls	r1, r1, #1
 8008b58:	1864      	adds	r4, r4, r1
            if(opa == LV_OPA_COVER) {
 8008b5a:	2dff      	cmp	r5, #255	; 0xff
 8008b5c:	d101      	bne.n	8008b62 <lv_draw_px+0x84>
                *vdb_px_p = color;
 8008b5e:	8026      	strh	r6, [r4, #0]
 8008b60:	e7f4      	b.n	8008b4c <lv_draw_px+0x6e>
                *vdb_px_p = lv_color_mix(color, *vdb_px_p, opa);
 8008b62:	002a      	movs	r2, r5
 8008b64:	8821      	ldrh	r1, [r4, #0]
 8008b66:	1c30      	adds	r0, r6, #0
 8008b68:	f7ff fefc 	bl	8008964 <lv_color_mix>
 8008b6c:	8020      	strh	r0, [r4, #0]
 8008b6e:	e7ed      	b.n	8008b4c <lv_draw_px+0x6e>

08008b70 <lv_draw_fill>:
{
 8008b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b72:	b08d      	sub	sp, #52	; 0x34
 8008b74:	466c      	mov	r4, sp
 8008b76:	001f      	movs	r7, r3
 8008b78:	8222      	strh	r2, [r4, #16]
    if(opa < LV_OPA_MIN) return;
 8008b7a:	2b0f      	cmp	r3, #15
 8008b7c:	d957      	bls.n	8008c2e <lv_draw_fill+0xbe>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8008b7e:	2bfb      	cmp	r3, #251	; 0xfb
 8008b80:	d900      	bls.n	8008b84 <lv_draw_fill+0x14>
 8008b82:	27ff      	movs	r7, #255	; 0xff
 8008b84:	466b      	mov	r3, sp
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 8008b86:	ad08      	add	r5, sp, #32
 8008b88:	8a1b      	ldrh	r3, [r3, #16]
 8008b8a:	000a      	movs	r2, r1
 8008b8c:	0001      	movs	r1, r0
 8008b8e:	0028      	movs	r0, r5
 8008b90:	9305      	str	r3, [sp, #20]
 8008b92:	f003 faf4 	bl	800c17e <lv_area_intersect>
    if(union_ok == false) {
 8008b96:	2800      	cmp	r0, #0
 8008b98:	d049      	beq.n	8008c2e <lv_draw_fill+0xbe>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 8008b9a:	f7ff f8cb 	bl	8007d34 <lv_refr_get_disp_refreshing>
 8008b9e:	0006      	movs	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8008ba0:	f003 f978 	bl	800be94 <lv_disp_get_buf>
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 8008ba4:	4669      	mov	r1, sp
 8008ba6:	8a02      	ldrh	r2, [r0, #16]
 8008ba8:	882c      	ldrh	r4, [r5, #0]
 8008baa:	4694      	mov	ip, r2
 8008bac:	1aa4      	subs	r4, r4, r2
 8008bae:	b2a2      	uxth	r2, r4
 8008bb0:	9203      	str	r2, [sp, #12]
 8008bb2:	8989      	ldrh	r1, [r1, #12]
 8008bb4:	aa0a      	add	r2, sp, #40	; 0x28
 8008bb6:	8011      	strh	r1, [r2, #0]
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 8008bb8:	8869      	ldrh	r1, [r5, #2]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8008bba:	0003      	movs	r3, r0
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 8008bbc:	8a40      	ldrh	r0, [r0, #18]
 8008bbe:	1a09      	subs	r1, r1, r0
 8008bc0:	b289      	uxth	r1, r1
 8008bc2:	9106      	str	r1, [sp, #24]
 8008bc4:	4669      	mov	r1, sp
 8008bc6:	2418      	movs	r4, #24
 8008bc8:	5f09      	ldrsh	r1, [r1, r4]
 8008bca:	9102      	str	r1, [sp, #8]
 8008bcc:	4669      	mov	r1, sp
 8008bce:	8909      	ldrh	r1, [r1, #8]
 8008bd0:	8051      	strh	r1, [r2, #2]
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 8008bd2:	4661      	mov	r1, ip
 8008bd4:	88ac      	ldrh	r4, [r5, #4]
 8008bd6:	1a64      	subs	r4, r4, r1
 8008bd8:	b2a4      	uxth	r4, r4
 8008bda:	8094      	strh	r4, [r2, #4]
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 8008bdc:	88e9      	ldrh	r1, [r5, #6]
 8008bde:	8a9d      	ldrh	r5, [r3, #20]
 8008be0:	1a09      	subs	r1, r1, r0
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8008be2:	6898      	ldr	r0, [r3, #8]
 8008be4:	4663      	mov	r3, ip
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 8008be6:	b289      	uxth	r1, r1
 8008be8:	9107      	str	r1, [sp, #28]
 8008bea:	4669      	mov	r1, sp
 8008bec:	3501      	adds	r5, #1
 8008bee:	1aed      	subs	r5, r5, r3
 8008bf0:	9b03      	ldr	r3, [sp, #12]
 8008bf2:	3401      	adds	r4, #1
 8008bf4:	8b89      	ldrh	r1, [r1, #28]
 8008bf6:	1ae4      	subs	r4, r4, r3
 8008bf8:	b224      	sxth	r4, r4
 8008bfa:	80d1      	strh	r1, [r2, #6]
 8008bfc:	b229      	sxth	r1, r5
    if(w < VFILL_HW_ACC_SIZE_LIMIT) {
 8008bfe:	2c31      	cmp	r4, #49	; 0x31
 8008c00:	dc03      	bgt.n	8008c0a <lv_draw_fill+0x9a>
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 8008c02:	466b      	mov	r3, sp
 8008c04:	9700      	str	r7, [sp, #0]
 8008c06:	8a1b      	ldrh	r3, [r3, #16]
 8008c08:	e055      	b.n	8008cb6 <lv_draw_fill+0x146>
    vdb_buf_tmp += vdb_width * vdb_rel_a.y1;
 8008c0a:	9b02      	ldr	r3, [sp, #8]
 8008c0c:	005b      	lsls	r3, r3, #1
 8008c0e:	434b      	muls	r3, r1
 8008c10:	18c3      	adds	r3, r0, r3
 8008c12:	9303      	str	r3, [sp, #12]
    else if(opa == LV_OPA_COVER) {
 8008c14:	2fff      	cmp	r7, #255	; 0xff
 8008c16:	d151      	bne.n	8008cbc <lv_draw_fill+0x14c>
        if(disp->driver.gpu_fill_cb) {
 8008c18:	6a37      	ldr	r7, [r6, #32]
 8008c1a:	2f00      	cmp	r7, #0
 8008c1c:	d009      	beq.n	8008c32 <lv_draw_fill+0xc2>
            disp->driver.gpu_fill_cb(&disp->driver, vdb->buf_act, vdb_width, &vdb_rel_a, color);
 8008c1e:	466b      	mov	r3, sp
 8008c20:	8a1c      	ldrh	r4, [r3, #16]
 8008c22:	801c      	strh	r4, [r3, #0]
 8008c24:	0013      	movs	r3, r2
 8008c26:	000a      	movs	r2, r1
 8008c28:	0001      	movs	r1, r0
 8008c2a:	0030      	movs	r0, r6
 8008c2c:	47b8      	blx	r7
}
 8008c2e:	b00d      	add	sp, #52	; 0x34
 8008c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 8008c32:	9b07      	ldr	r3, [sp, #28]
 8008c34:	9a06      	ldr	r2, [sp, #24]
 8008c36:	3301      	adds	r3, #1
 8008c38:	1a9b      	subs	r3, r3, r2
        else if(lv_area_get_height(&vdb_rel_a) > VFILL_HW_ACC_SIZE_LIMIT && disp->driver.gpu_blend_cb) {
 8008c3a:	b21b      	sxth	r3, r3
 8008c3c:	2b32      	cmp	r3, #50	; 0x32
 8008c3e:	dd35      	ble.n	8008cac <lv_draw_fill+0x13c>
 8008c40:	69f3      	ldr	r3, [r6, #28]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d032      	beq.n	8008cac <lv_draw_fill+0x13c>
            if(color_array_tmp[0].full != color.full || last_width != w) {
 8008c46:	4b38      	ldr	r3, [pc, #224]	; (8008d28 <lv_draw_fill+0x1b8>)
 8008c48:	9a05      	ldr	r2, [sp, #20]
 8008c4a:	881b      	ldrh	r3, [r3, #0]
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d104      	bne.n	8008c5a <lv_draw_fill+0xea>
 8008c50:	4b36      	ldr	r3, [pc, #216]	; (8008d2c <lv_draw_fill+0x1bc>)
 8008c52:	2200      	movs	r2, #0
 8008c54:	5e9b      	ldrsh	r3, [r3, r2]
 8008c56:	42a3      	cmp	r3, r4
 8008c58:	d004      	beq.n	8008c64 <lv_draw_fill+0xf4>
                    color_array_tmp[i].full = color.full;
 8008c5a:	4b33      	ldr	r3, [pc, #204]	; (8008d28 <lv_draw_fill+0x1b8>)
                for(i = 0; i < w; i++) {
 8008c5c:	42a7      	cmp	r7, r4
 8008c5e:	db1e      	blt.n	8008c9e <lv_draw_fill+0x12e>
                last_width = w;
 8008c60:	4b32      	ldr	r3, [pc, #200]	; (8008d2c <lv_draw_fill+0x1bc>)
 8008c62:	801c      	strh	r4, [r3, #0]
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 8008c64:	27ff      	movs	r7, #255	; 0xff
                vdb_buf_tmp += vdb_width;
 8008c66:	004b      	lsls	r3, r1, #1
 8008c68:	9304      	str	r3, [sp, #16]
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 8008c6a:	ab0a      	add	r3, sp, #40	; 0x28
 8008c6c:	2106      	movs	r1, #6
 8008c6e:	5e5a      	ldrsh	r2, [r3, r1]
 8008c70:	9902      	ldr	r1, [sp, #8]
 8008c72:	428a      	cmp	r2, r1
 8008c74:	dbdb      	blt.n	8008c2e <lv_draw_fill+0xbe>
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 8008c76:	2100      	movs	r1, #0
 8008c78:	5e59      	ldrsh	r1, [r3, r1]
 8008c7a:	9b03      	ldr	r3, [sp, #12]
 8008c7c:	9700      	str	r7, [sp, #0]
 8008c7e:	0049      	lsls	r1, r1, #1
 8008c80:	1859      	adds	r1, r3, r1
 8008c82:	4a29      	ldr	r2, [pc, #164]	; (8008d28 <lv_draw_fill+0x1b8>)
 8008c84:	0023      	movs	r3, r4
 8008c86:	0030      	movs	r0, r6
 8008c88:	69f5      	ldr	r5, [r6, #28]
 8008c8a:	47a8      	blx	r5
                vdb_buf_tmp += vdb_width;
 8008c8c:	9a03      	ldr	r2, [sp, #12]
 8008c8e:	9b04      	ldr	r3, [sp, #16]
 8008c90:	18d3      	adds	r3, r2, r3
 8008c92:	9303      	str	r3, [sp, #12]
 8008c94:	9b02      	ldr	r3, [sp, #8]
 8008c96:	3301      	adds	r3, #1
 8008c98:	b21b      	sxth	r3, r3
 8008c9a:	9302      	str	r3, [sp, #8]
 8008c9c:	e7e5      	b.n	8008c6a <lv_draw_fill+0xfa>
                    color_array_tmp[i].full = color.full;
 8008c9e:	4668      	mov	r0, sp
 8008ca0:	8a80      	ldrh	r0, [r0, #20]
 8008ca2:	007a      	lsls	r2, r7, #1
                for(i = 0; i < w; i++) {
 8008ca4:	3701      	adds	r7, #1
                    color_array_tmp[i].full = color.full;
 8008ca6:	52d0      	strh	r0, [r2, r3]
                for(i = 0; i < w; i++) {
 8008ca8:	b2bf      	uxth	r7, r7
 8008caa:	e7d7      	b.n	8008c5c <lv_draw_fill+0xec>
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 8008cac:	23ff      	movs	r3, #255	; 0xff
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	466b      	mov	r3, sp
 8008cb2:	8a1b      	ldrh	r3, [r3, #16]
 8008cb4:	aa0a      	add	r2, sp, #40	; 0x28
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 8008cb6:	f7ff fe7b 	bl	80089b0 <sw_color_fill>
 8008cba:	e7b8      	b.n	8008c2e <lv_draw_fill+0xbe>
        if(disp->driver.gpu_blend_cb) {
 8008cbc:	69f3      	ldr	r3, [r6, #28]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d09f      	beq.n	8008c02 <lv_draw_fill+0x92>
            if(color_array_tmp[0].full != color.full || last_width != w) {
 8008cc2:	4b19      	ldr	r3, [pc, #100]	; (8008d28 <lv_draw_fill+0x1b8>)
 8008cc4:	9805      	ldr	r0, [sp, #20]
 8008cc6:	881a      	ldrh	r2, [r3, #0]
 8008cc8:	2300      	movs	r3, #0
 8008cca:	4282      	cmp	r2, r0
 8008ccc:	d104      	bne.n	8008cd8 <lv_draw_fill+0x168>
 8008cce:	4a17      	ldr	r2, [pc, #92]	; (8008d2c <lv_draw_fill+0x1bc>)
 8008cd0:	2000      	movs	r0, #0
 8008cd2:	5e12      	ldrsh	r2, [r2, r0]
 8008cd4:	42a2      	cmp	r2, r4
 8008cd6:	d004      	beq.n	8008ce2 <lv_draw_fill+0x172>
                    color_array_tmp[i].full = color.full;
 8008cd8:	4a13      	ldr	r2, [pc, #76]	; (8008d28 <lv_draw_fill+0x1b8>)
                for(i = 0; i < w; i++) {
 8008cda:	42a3      	cmp	r3, r4
 8008cdc:	db1d      	blt.n	8008d1a <lv_draw_fill+0x1aa>
                last_width = w;
 8008cde:	4b13      	ldr	r3, [pc, #76]	; (8008d2c <lv_draw_fill+0x1bc>)
 8008ce0:	801c      	strh	r4, [r3, #0]
                vdb_buf_tmp += vdb_width;
 8008ce2:	004b      	lsls	r3, r1, #1
 8008ce4:	9304      	str	r3, [sp, #16]
            for(row = vdb_rel_a.y1; row <= vdb_rel_a.y2; row++) {
 8008ce6:	ab0a      	add	r3, sp, #40	; 0x28
 8008ce8:	2106      	movs	r1, #6
 8008cea:	5e5a      	ldrsh	r2, [r3, r1]
 8008cec:	9902      	ldr	r1, [sp, #8]
 8008cee:	428a      	cmp	r2, r1
 8008cf0:	db9d      	blt.n	8008c2e <lv_draw_fill+0xbe>
                disp->driver.gpu_blend_cb(&disp->driver, &vdb_buf_tmp[vdb_rel_a.x1], color_array_tmp, w, opa);
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	5e59      	ldrsh	r1, [r3, r1]
 8008cf6:	9b03      	ldr	r3, [sp, #12]
 8008cf8:	9700      	str	r7, [sp, #0]
 8008cfa:	0049      	lsls	r1, r1, #1
 8008cfc:	1859      	adds	r1, r3, r1
 8008cfe:	4a0a      	ldr	r2, [pc, #40]	; (8008d28 <lv_draw_fill+0x1b8>)
 8008d00:	0023      	movs	r3, r4
 8008d02:	0030      	movs	r0, r6
 8008d04:	69f5      	ldr	r5, [r6, #28]
 8008d06:	47a8      	blx	r5
                vdb_buf_tmp += vdb_width;
 8008d08:	9a03      	ldr	r2, [sp, #12]
 8008d0a:	9b04      	ldr	r3, [sp, #16]
 8008d0c:	18d3      	adds	r3, r2, r3
 8008d0e:	9303      	str	r3, [sp, #12]
 8008d10:	9b02      	ldr	r3, [sp, #8]
 8008d12:	3301      	adds	r3, #1
 8008d14:	b21b      	sxth	r3, r3
 8008d16:	9302      	str	r3, [sp, #8]
 8008d18:	e7e5      	b.n	8008ce6 <lv_draw_fill+0x176>
                    color_array_tmp[i].full = color.full;
 8008d1a:	466d      	mov	r5, sp
 8008d1c:	8aad      	ldrh	r5, [r5, #20]
 8008d1e:	0058      	lsls	r0, r3, #1
                for(i = 0; i < w; i++) {
 8008d20:	3301      	adds	r3, #1
                    color_array_tmp[i].full = color.full;
 8008d22:	5285      	strh	r5, [r0, r2]
                for(i = 0; i < w; i++) {
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	e7d8      	b.n	8008cda <lv_draw_fill+0x16a>
 8008d28:	20001510 	.word	0x20001510
 8008d2c:	20000012 	.word	0x20000012

08008d30 <lv_draw_letter>:
{
 8008d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d32:	b09f      	sub	sp, #124	; 0x7c
 8008d34:	9105      	str	r1, [sp, #20]
 8008d36:	0015      	movs	r5, r2
 8008d38:	2146      	movs	r1, #70	; 0x46
 8008d3a:	466a      	mov	r2, sp
 8008d3c:	001e      	movs	r6, r3
 8008d3e:	ab24      	add	r3, sp, #144	; 0x90
 8008d40:	881b      	ldrh	r3, [r3, #0]
 8008d42:	1852      	adds	r2, r2, r1
 8008d44:	8013      	strh	r3, [r2, #0]
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8008d46:	24ff      	movs	r4, #255	; 0xff
 8008d48:	2200      	movs	r2, #0
{
 8008d4a:	ab25      	add	r3, sp, #148	; 0x94
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	0007      	movs	r7, r0
 8008d50:	9306      	str	r3, [sp, #24]
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8008d52:	ab16      	add	r3, sp, #88	; 0x58
 8008d54:	701a      	strb	r2, [r3, #0]
 8008d56:	705c      	strb	r4, [r3, #1]
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8008d58:	ab17      	add	r3, sp, #92	; 0x5c
 8008d5a:	701a      	strb	r2, [r3, #0]
 8008d5c:	3255      	adds	r2, #85	; 0x55
 8008d5e:	705a      	strb	r2, [r3, #1]
 8008d60:	3255      	adds	r2, #85	; 0x55
 8008d62:	709a      	strb	r2, [r3, #2]
 8008d64:	70dc      	strb	r4, [r3, #3]
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8008d66:	3a9a      	subs	r2, #154	; 0x9a
 8008d68:	49c5      	ldr	r1, [pc, #788]	; (8009080 <lv_draw_letter+0x350>)
 8008d6a:	a81a      	add	r0, sp, #104	; 0x68
 8008d6c:	f005 fa0e 	bl	800e18c <memcpy>
    if(opa < LV_OPA_MIN) return;
 8008d70:	9b06      	ldr	r3, [sp, #24]
 8008d72:	2b0f      	cmp	r3, #15
 8008d74:	d800      	bhi.n	8008d78 <lv_draw_letter+0x48>
 8008d76:	e0dc      	b.n	8008f32 <lv_draw_letter+0x202>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8008d78:	2bfb      	cmp	r3, #251	; 0xfb
 8008d7a:	d900      	bls.n	8008d7e <lv_draw_letter+0x4e>
 8008d7c:	9406      	str	r4, [sp, #24]
    if(font_p == NULL) {
 8008d7e:	2d00      	cmp	r5, #0
 8008d80:	d100      	bne.n	8008d84 <lv_draw_letter+0x54>
 8008d82:	e0d6      	b.n	8008f32 <lv_draw_letter+0x202>
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 8008d84:	ac18      	add	r4, sp, #96	; 0x60
 8008d86:	2300      	movs	r3, #0
 8008d88:	0032      	movs	r2, r6
 8008d8a:	0021      	movs	r1, r4
 8008d8c:	0028      	movs	r0, r5
 8008d8e:	f002 fe9b 	bl	800bac8 <lv_font_get_glyph_dsc>
    if(g_ret == false) return;
 8008d92:	2800      	cmp	r0, #0
 8008d94:	d100      	bne.n	8008d98 <lv_draw_letter+0x68>
 8008d96:	e0cc      	b.n	8008f32 <lv_draw_letter+0x202>
    switch(g.bpp) {
 8008d98:	79a0      	ldrb	r0, [r4, #6]
 8008d9a:	3801      	subs	r0, #1
 8008d9c:	2807      	cmp	r0, #7
 8008d9e:	d900      	bls.n	8008da2 <lv_draw_letter+0x72>
 8008da0:	e0c7      	b.n	8008f32 <lv_draw_letter+0x202>
 8008da2:	f7f7 f9bf 	bl	8000124 <__gnu_thumb1_case_uqi>
 8008da6:	d004      	.short	0xd004
 8008da8:	c6c6c8c6 	.word	0xc6c6c8c6
 8008dac:	ccc6      	.short	0xccc6
            bitmask_init  = 0x80;
 8008dae:	2380      	movs	r3, #128	; 0x80
 8008db0:	930b      	str	r3, [sp, #44]	; 0x2c
            bpp_opa_table = bpp1_opa_table;
 8008db2:	ab16      	add	r3, sp, #88	; 0x58
            bpp_opa_table = bpp2_opa_table;
 8008db4:	930a      	str	r3, [sp, #40]	; 0x28
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8008db6:	2200      	movs	r2, #0
 8008db8:	5ebb      	ldrsh	r3, [r7, r2]
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 8008dba:	0031      	movs	r1, r6
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8008dbc:	9307      	str	r3, [sp, #28]
 8008dbe:	2304      	movs	r3, #4
 8008dc0:	56e3      	ldrsb	r3, [r4, r3]
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 8008dc2:	0028      	movs	r0, r5
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8008dc4:	9308      	str	r3, [sp, #32]
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	5ebb      	ldrsh	r3, [r7, r2]
 8008dca:	2705      	movs	r7, #5
 8008dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8008dce:	7a2b      	ldrb	r3, [r5, #8]
 8008dd0:	930d      	str	r3, [sp, #52]	; 0x34
 8008dd2:	7a6b      	ldrb	r3, [r5, #9]
 8008dd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8008dd6:	78e3      	ldrb	r3, [r4, #3]
 8008dd8:	9310      	str	r3, [sp, #64]	; 0x40
 8008dda:	57e7      	ldrsb	r7, [r4, r7]
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 8008ddc:	f002 fe70 	bl	800bac0 <lv_font_get_glyph_bitmap>
 8008de0:	900c      	str	r0, [sp, #48]	; 0x30
    if(map_p == NULL) return;
 8008de2:	2800      	cmp	r0, #0
 8008de4:	d100      	bne.n	8008de8 <lv_draw_letter+0xb8>
 8008de6:	e0a4      	b.n	8008f32 <lv_draw_letter+0x202>
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8008de8:	9a08      	ldr	r2, [sp, #32]
 8008dea:	9b07      	ldr	r3, [sp, #28]
 8008dec:	4694      	mov	ip, r2
 8008dee:	4463      	add	r3, ip
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	930e      	str	r3, [sp, #56]	; 0x38
 8008df4:	466b      	mov	r3, sp
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 8008df6:	9a05      	ldr	r2, [sp, #20]
    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 8008df8:	2538      	movs	r5, #56	; 0x38
 8008dfa:	5f5d      	ldrsh	r5, [r3, r5]
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 8008dfc:	78a3      	ldrb	r3, [r4, #2]
 8008dfe:	2100      	movs	r1, #0
 8008e00:	5e52      	ldrsh	r2, [r2, r1]
 8008e02:	195b      	adds	r3, r3, r5
 8008e04:	4293      	cmp	r3, r2
 8008e06:	da00      	bge.n	8008e0a <lv_draw_letter+0xda>
 8008e08:	e093      	b.n	8008f32 <lv_draw_letter+0x202>
 8008e0a:	9b05      	ldr	r3, [sp, #20]
 8008e0c:	2204      	movs	r2, #4
 8008e0e:	5e9b      	ldrsh	r3, [r3, r2]
 8008e10:	42ab      	cmp	r3, r5
 8008e12:	da00      	bge.n	8008e16 <lv_draw_letter+0xe6>
 8008e14:	e08d      	b.n	8008f32 <lv_draw_letter+0x202>
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 8008e16:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 8008e18:	9a05      	ldr	r2, [sp, #20]
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 8008e1a:	19df      	adds	r7, r3, r7
 8008e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e1e:	1bdf      	subs	r7, r3, r7
 8008e20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e22:	18ff      	adds	r7, r7, r3
 8008e24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e26:	1aff      	subs	r7, r7, r3
 8008e28:	b2bb      	uxth	r3, r7
 8008e2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e2c:	466b      	mov	r3, sp
 8008e2e:	263c      	movs	r6, #60	; 0x3c
 8008e30:	5f9e      	ldrsh	r6, [r3, r6]
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 8008e32:	78e3      	ldrb	r3, [r4, #3]
 8008e34:	2102      	movs	r1, #2
 8008e36:	5e52      	ldrsh	r2, [r2, r1]
 8008e38:	199b      	adds	r3, r3, r6
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	db79      	blt.n	8008f32 <lv_draw_letter+0x202>
 8008e3e:	9b05      	ldr	r3, [sp, #20]
 8008e40:	2206      	movs	r2, #6
 8008e42:	5e9b      	ldrsh	r3, [r3, r2]
 8008e44:	42b3      	cmp	r3, r6
 8008e46:	db74      	blt.n	8008f32 <lv_draw_letter+0x202>
    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 8008e48:	f7fe ff74 	bl	8007d34 <lv_refr_get_disp_refreshing>
 8008e4c:	9012      	str	r0, [sp, #72]	; 0x48
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8008e4e:	f003 f821 	bl	800be94 <lv_disp_get_buf>
 8008e52:	2210      	movs	r2, #16
 8008e54:	5e83      	ldrsh	r3, [r0, r2]
 8008e56:	0007      	movs	r7, r0
 8008e58:	469c      	mov	ip, r3
    return area_p->x2 - area_p->x1 + 1;
 8008e5a:	4662      	mov	r2, ip
 8008e5c:	8a83      	ldrh	r3, [r0, #20]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	1a9b      	subs	r3, r3, r2
 8008e62:	b21b      	sxth	r3, r3
 8008e64:	9310      	str	r3, [sp, #64]	; 0x40
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8008e66:	6883      	ldr	r3, [r0, #8]
 8008e68:	930d      	str	r3, [sp, #52]	; 0x34
    uint8_t width_byte_scr = g.box_w >> 3; /*Width in bytes (on the screen finally) (e.g. w = 11 -> 2 bytes wide)*/
 8008e6a:	78a0      	ldrb	r0, [r4, #2]
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
 8008e6c:	79a3      	ldrb	r3, [r4, #6]
 8008e6e:	0002      	movs	r2, r0
 8008e70:	435a      	muls	r2, r3
 8008e72:	9213      	str	r2, [sp, #76]	; 0x4c
    lv_coord_t col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
 8008e74:	9a05      	ldr	r2, [sp, #20]
 8008e76:	2100      	movs	r1, #0
 8008e78:	5e52      	ldrsh	r2, [r2, r1]
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	4295      	cmp	r5, r2
 8008e7e:	da02      	bge.n	8008e86 <lv_draw_letter+0x156>
 8008e80:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008e82:	1a51      	subs	r1, r2, r1
 8008e84:	b289      	uxth	r1, r1
 8008e86:	b20a      	sxth	r2, r1
 8008e88:	9208      	str	r2, [sp, #32]
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 8008e8a:	9a05      	ldr	r2, [sp, #20]
 8008e8c:	2404      	movs	r4, #4
 8008e8e:	5f12      	ldrsh	r2, [r2, r4]
 8008e90:	182c      	adds	r4, r5, r0
 8008e92:	4294      	cmp	r4, r2
 8008e94:	dc5b      	bgt.n	8008f4e <lv_draw_letter+0x21e>
 8008e96:	b202      	sxth	r2, r0
 8008e98:	9209      	str	r2, [sp, #36]	; 0x24
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 8008e9a:	9a05      	ldr	r2, [sp, #20]
 8008e9c:	2002      	movs	r0, #2
 8008e9e:	5e12      	ldrsh	r2, [r2, r0]
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	4296      	cmp	r6, r2
 8008ea4:	da02      	bge.n	8008eac <lv_draw_letter+0x17c>
 8008ea6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008ea8:	1a12      	subs	r2, r2, r0
 8008eaa:	b290      	uxth	r0, r2
 8008eac:	b202      	sxth	r2, r0
 8008eae:	9207      	str	r2, [sp, #28]
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 8008eb0:	aa18      	add	r2, sp, #96	; 0x60
 8008eb2:	78d0      	ldrb	r0, [r2, #3]
 8008eb4:	9a05      	ldr	r2, [sp, #20]
 8008eb6:	2406      	movs	r4, #6
 8008eb8:	5f12      	ldrsh	r2, [r2, r4]
 8008eba:	1984      	adds	r4, r0, r6
 8008ebc:	4294      	cmp	r4, r2
 8008ebe:	dc4b      	bgt.n	8008f58 <lv_draw_letter+0x228>
 8008ec0:	b202      	sxth	r2, r0
 8008ec2:	9214      	str	r2, [sp, #80]	; 0x50
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 8008ec4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008ec6:	9a07      	ldr	r2, [sp, #28]
 8008ec8:	9808      	ldr	r0, [sp, #32]
 8008eca:	4354      	muls	r4, r2
 8008ecc:	9a08      	ldr	r2, [sp, #32]
 8008ece:	4353      	muls	r3, r2
    map_p += bit_ofs >> 3;
 8008ed0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 8008ed2:	18e4      	adds	r4, r4, r3
    map_p += bit_ofs >> 3;
 8008ed4:	08e3      	lsrs	r3, r4, #3
 8008ed6:	18d3      	adds	r3, r2, r3
 8008ed8:	9305      	str	r3, [sp, #20]
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 8008eda:	2307      	movs	r3, #7
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 8008edc:	9a08      	ldr	r2, [sp, #32]
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 8008ede:	401c      	ands	r4, r3
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 8008ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ee2:	1a9b      	subs	r3, r3, r2
 8008ee4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	005b      	lsls	r3, r3, #1
 8008eea:	930c      	str	r3, [sp, #48]	; 0x30
 8008eec:	0003      	movs	r3, r0
 8008eee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	4283      	cmp	r3, r0
 8008ef4:	dc02      	bgt.n	8008efc <lv_draw_letter+0x1cc>
 8008ef6:	1a41      	subs	r1, r0, r1
 8008ef8:	b28a      	uxth	r2, r1
 8008efa:	0052      	lsls	r2, r2, #1
 8008efc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008efe:	189b      	adds	r3, r3, r2
 8008f00:	9315      	str	r3, [sp, #84]	; 0x54
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 8008f02:	2212      	movs	r2, #18
 8008f04:	5ebb      	ldrsh	r3, [r7, r2]
 8008f06:	1af6      	subs	r6, r6, r3
 8008f08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f0a:	435e      	muls	r6, r3
 8008f0c:	4663      	mov	r3, ip
 8008f0e:	1975      	adds	r5, r6, r5
 8008f10:	1aed      	subs	r5, r5, r3
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 8008f12:	9e07      	ldr	r6, [sp, #28]
 8008f14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f16:	435e      	muls	r6, r3
 8008f18:	9b08      	ldr	r3, [sp, #32]
 8008f1a:	18f6      	adds	r6, r6, r3
 8008f1c:	19ad      	adds	r5, r5, r6
 8008f1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f20:	006d      	lsls	r5, r5, #1
 8008f22:	195b      	adds	r3, r3, r5
 8008f24:	9313      	str	r3, [sp, #76]	; 0x4c
 8008f26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    for(row = row_start; row < row_end; row++) {
 8008f28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f2a:	930c      	str	r3, [sp, #48]	; 0x30
 8008f2c:	9b07      	ldr	r3, [sp, #28]
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	db17      	blt.n	8008f62 <lv_draw_letter+0x232>
}
 8008f32:	b01f      	add	sp, #124	; 0x7c
 8008f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
            bitmask_init  = 0xF0;
 8008f36:	23f0      	movs	r3, #240	; 0xf0
 8008f38:	930b      	str	r3, [sp, #44]	; 0x2c
            bpp_opa_table = bpp4_opa_table;
 8008f3a:	ab1a      	add	r3, sp, #104	; 0x68
 8008f3c:	e73a      	b.n	8008db4 <lv_draw_letter+0x84>
            bitmask_init  = 0xFF;
 8008f3e:	23ff      	movs	r3, #255	; 0xff
 8008f40:	930b      	str	r3, [sp, #44]	; 0x2c
            bpp_opa_table = NULL;
 8008f42:	2300      	movs	r3, #0
 8008f44:	e736      	b.n	8008db4 <lv_draw_letter+0x84>
            bitmask_init  = 0xC0;
 8008f46:	23c0      	movs	r3, #192	; 0xc0
 8008f48:	930b      	str	r3, [sp, #44]	; 0x2c
            bpp_opa_table = bpp2_opa_table;
 8008f4a:	ab17      	add	r3, sp, #92	; 0x5c
 8008f4c:	e732      	b.n	8008db4 <lv_draw_letter+0x84>
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 8008f4e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008f50:	3201      	adds	r2, #1
 8008f52:	1a12      	subs	r2, r2, r0
 8008f54:	b212      	sxth	r2, r2
 8008f56:	e79f      	b.n	8008e98 <lv_draw_letter+0x168>
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 8008f58:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008f5a:	3201      	adds	r2, #1
 8008f5c:	1a12      	subs	r2, r2, r0
 8008f5e:	b212      	sxth	r2, r2
 8008f60:	e7af      	b.n	8008ec2 <lv_draw_letter+0x192>
        bitmask = bitmask_init >> col_bit;
 8008f62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        for(col = col_start; col < col_end; col++) {
 8008f64:	9e08      	ldr	r6, [sp, #32]
        bitmask = bitmask_init >> col_bit;
 8008f66:	4123      	asrs	r3, r4
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	930d      	str	r3, [sp, #52]	; 0x34
        for(col = col_start; col < col_end; col++) {
 8008f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f6e:	a918      	add	r1, sp, #96	; 0x60
 8008f70:	429e      	cmp	r6, r3
 8008f72:	db16      	blt.n	8008fa2 <lv_draw_letter+0x272>
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
 8008f74:	788a      	ldrb	r2, [r1, #2]
 8008f76:	1ad2      	subs	r2, r2, r3
 8008f78:	9b08      	ldr	r3, [sp, #32]
 8008f7a:	18d2      	adds	r2, r2, r3
 8008f7c:	798b      	ldrb	r3, [r1, #6]
 8008f7e:	4353      	muls	r3, r2
 8008f80:	18e4      	adds	r4, r4, r3
        map_p += (col_bit >> 3);
 8008f82:	9a05      	ldr	r2, [sp, #20]
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
 8008f84:	b2a4      	uxth	r4, r4
        map_p += (col_bit >> 3);
 8008f86:	08e3      	lsrs	r3, r4, #3
 8008f88:	18d3      	adds	r3, r2, r3
 8008f8a:	9305      	str	r3, [sp, #20]
        col_bit = col_bit & 0x7;
 8008f8c:	2307      	movs	r3, #7
 8008f8e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008f90:	401c      	ands	r4, r3
 8008f92:	4694      	mov	ip, r2
 8008f94:	9b07      	ldr	r3, [sp, #28]
 8008f96:	3301      	adds	r3, #1
 8008f98:	b21b      	sxth	r3, r3
 8008f9a:	9307      	str	r3, [sp, #28]
 8008f9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f9e:	4463      	add	r3, ip
 8008fa0:	e7c0      	b.n	8008f24 <lv_draw_letter+0x1f4>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - g.bpp);
 8008fa2:	9b05      	ldr	r3, [sp, #20]
 8008fa4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	7989      	ldrb	r1, [r1, #6]
 8008faa:	4013      	ands	r3, r2
 8008fac:	2208      	movs	r2, #8
 8008fae:	1b12      	subs	r2, r2, r4
 8008fb0:	1a52      	subs	r2, r2, r1
 8008fb2:	4113      	asrs	r3, r2
 8008fb4:	b2da      	uxtb	r2, r3
            if(letter_px != 0) {
 8008fb6:	2a00      	cmp	r2, #0
 8008fb8:	d022      	beq.n	8009000 <lv_draw_letter+0x2d0>
                if(opa == LV_OPA_COVER) {
 8008fba:	9806      	ldr	r0, [sp, #24]
 8008fbc:	28ff      	cmp	r0, #255	; 0xff
 8008fbe:	d131      	bne.n	8009024 <lv_draw_letter+0x2f4>
                    px_opa = g.bpp == 8 ? letter_px : bpp_opa_table[letter_px];
 8008fc0:	2908      	cmp	r1, #8
 8008fc2:	d002      	beq.n	8008fca <lv_draw_letter+0x29a>
 8008fc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fc6:	4003      	ands	r3, r0
 8008fc8:	5cd2      	ldrb	r2, [r2, r3]
                if(disp->driver.set_px_cb) {
 8008fca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fcc:	695b      	ldr	r3, [r3, #20]
 8008fce:	1e1d      	subs	r5, r3, #0
 8008fd0:	d033      	beq.n	800903a <lv_draw_letter+0x30a>
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 8008fd2:	8a3b      	ldrh	r3, [r7, #16]
 8008fd4:	990e      	ldr	r1, [sp, #56]	; 0x38
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8008fd6:	2046      	movs	r0, #70	; 0x46
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 8008fd8:	1acb      	subs	r3, r1, r3
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8008fda:	4669      	mov	r1, sp
 8008fdc:	9202      	str	r2, [sp, #8]
 8008fde:	1809      	adds	r1, r1, r0
 8008fe0:	8809      	ldrh	r1, [r1, #0]
 8008fe2:	aa01      	add	r2, sp, #4
 8008fe4:	8011      	strh	r1, [r2, #0]
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 8008fe6:	8a7a      	ldrh	r2, [r7, #18]
 8008fe8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008fea:	199b      	adds	r3, r3, r6
 8008fec:	1a8a      	subs	r2, r1, r2
 8008fee:	9907      	ldr	r1, [sp, #28]
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8008ff0:	b21b      	sxth	r3, r3
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 8008ff2:	1852      	adds	r2, r2, r1
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8008ff4:	b212      	sxth	r2, r2
 8008ff6:	9200      	str	r2, [sp, #0]
 8008ff8:	68b9      	ldr	r1, [r7, #8]
 8008ffa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ffc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008ffe:	47a8      	blx	r5
            if(col_bit < 8 - g.bpp) {
 8009000:	2208      	movs	r2, #8
            vdb_buf_tmp++;
 8009002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009004:	3302      	adds	r3, #2
 8009006:	930c      	str	r3, [sp, #48]	; 0x30
            if(col_bit < 8 - g.bpp) {
 8009008:	ab18      	add	r3, sp, #96	; 0x60
 800900a:	799b      	ldrb	r3, [r3, #6]
 800900c:	1ad2      	subs	r2, r2, r3
 800900e:	4294      	cmp	r4, r2
 8009010:	da2e      	bge.n	8009070 <lv_draw_letter+0x340>
                bitmask = bitmask >> g.bpp;
 8009012:	9a0d      	ldr	r2, [sp, #52]	; 0x34
                col_bit += g.bpp;
 8009014:	18e4      	adds	r4, r4, r3
                bitmask = bitmask >> g.bpp;
 8009016:	411a      	asrs	r2, r3
 8009018:	b2d3      	uxtb	r3, r2
                col_bit += g.bpp;
 800901a:	b2a4      	uxth	r4, r4
                bitmask = bitmask >> g.bpp;
 800901c:	930d      	str	r3, [sp, #52]	; 0x34
 800901e:	3601      	adds	r6, #1
 8009020:	b236      	sxth	r6, r6
 8009022:	e7a3      	b.n	8008f6c <lv_draw_letter+0x23c>
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 8009024:	2908      	cmp	r1, #8
 8009026:	d103      	bne.n	8009030 <lv_draw_letter+0x300>
 8009028:	9b06      	ldr	r3, [sp, #24]
 800902a:	435a      	muls	r2, r3
 800902c:	0a12      	lsrs	r2, r2, #8
 800902e:	e7cc      	b.n	8008fca <lv_draw_letter+0x29a>
                                        : (uint16_t)((uint16_t)bpp_opa_table[letter_px] * opa) >> 8;
 8009030:	22ff      	movs	r2, #255	; 0xff
 8009032:	4013      	ands	r3, r2
 8009034:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009036:	5cd2      	ldrb	r2, [r2, r3]
 8009038:	e7f6      	b.n	8009028 <lv_draw_letter+0x2f8>
                } else if(vdb_buf_tmp->full != color.full) {
 800903a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800903c:	2046      	movs	r0, #70	; 0x46
 800903e:	8819      	ldrh	r1, [r3, #0]
 8009040:	466b      	mov	r3, sp
 8009042:	181b      	adds	r3, r3, r0
 8009044:	881b      	ldrh	r3, [r3, #0]
 8009046:	4299      	cmp	r1, r3
 8009048:	d0da      	beq.n	8009000 <lv_draw_letter+0x2d0>
                    if(px_opa > LV_OPA_MAX)
 800904a:	2afb      	cmp	r2, #251	; 0xfb
 800904c:	d905      	bls.n	800905a <lv_draw_letter+0x32a>
                        *vdb_buf_tmp = color;
 800904e:	466b      	mov	r3, sp
 8009050:	181b      	adds	r3, r3, r0
 8009052:	881b      	ldrh	r3, [r3, #0]
 8009054:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009056:	8013      	strh	r3, [r2, #0]
 8009058:	e7d2      	b.n	8009000 <lv_draw_letter+0x2d0>
                    else if(px_opa > LV_OPA_MIN) {
 800905a:	2a10      	cmp	r2, #16
 800905c:	d9d0      	bls.n	8009000 <lv_draw_letter+0x2d0>
                            *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
 800905e:	2046      	movs	r0, #70	; 0x46
 8009060:	466b      	mov	r3, sp
 8009062:	181b      	adds	r3, r3, r0
 8009064:	8818      	ldrh	r0, [r3, #0]
 8009066:	f7ff fc7d 	bl	8008964 <lv_color_mix>
 800906a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800906c:	8018      	strh	r0, [r3, #0]
 800906e:	e7c7      	b.n	8009000 <lv_draw_letter+0x2d0>
                map_p++;
 8009070:	9b05      	ldr	r3, [sp, #20]
                col_bit = 0;
 8009072:	2400      	movs	r4, #0
                map_p++;
 8009074:	3301      	adds	r3, #1
 8009076:	9305      	str	r3, [sp, #20]
                bitmask = bitmask_init;
 8009078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800907a:	930d      	str	r3, [sp, #52]	; 0x34
 800907c:	e7cf      	b.n	800901e <lv_draw_letter+0x2ee>
 800907e:	46c0      	nop			; (mov r8, r8)
 8009080:	08010cde 	.word	0x08010cde

08009084 <lv_img_color_format_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_color_format_get_px_size(lv_img_cf_t cf)
{
 8009084:	1f03      	subs	r3, r0, #4
 8009086:	b2db      	uxtb	r3, r3
 8009088:	2000      	movs	r0, #0
 800908a:	2b0a      	cmp	r3, #10
 800908c:	d801      	bhi.n	8009092 <lv_img_color_format_get_px_size+0xe>
 800908e:	4a01      	ldr	r2, [pc, #4]	; (8009094 <lv_img_color_format_get_px_size+0x10>)
 8009090:	5cd0      	ldrb	r0, [r2, r3]
        case LV_IMG_CF_ALPHA_8BIT: px_size = 8; break;
        default: px_size = 0; break;
    }

    return px_size;
}
 8009092:	4770      	bx	lr
 8009094:	08010f00 	.word	0x08010f00

08009098 <lv_img_src_get_type>:
 */
lv_img_src_t lv_img_src_get_type(const void * src)
{
    lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;

    if(src == NULL) return img_src_type;
 8009098:	2303      	movs	r3, #3
 800909a:	2800      	cmp	r0, #0
 800909c:	d007      	beq.n	80090ae <lv_img_src_get_type+0x16>
    const uint8_t * u8_p = src;

    /*The first byte shows the type of the image source*/
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800909e:	7802      	ldrb	r2, [r0, #0]
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 80090a0:	3b02      	subs	r3, #2
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 80090a2:	0011      	movs	r1, r2
 80090a4:	3920      	subs	r1, #32
 80090a6:	295f      	cmp	r1, #95	; 0x5f
 80090a8:	d901      	bls.n	80090ae <lv_img_src_get_type+0x16>
    } else if(u8_p[0] >= 0x80) {
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
    } else {
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 80090aa:	09d3      	lsrs	r3, r2, #7
 80090ac:	005b      	lsls	r3, r3, #1
    if(LV_IMG_SRC_UNKNOWN == img_src_type) {
        LV_LOG_WARN("lv_img_src_get_type: unknown image type");
    }

    return img_src_type;
}
 80090ae:	0018      	movs	r0, r3
 80090b0:	4770      	bx	lr
	...

080090b4 <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 80090b4:	0003      	movs	r3, r0
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 80090b6:	3830      	subs	r0, #48	; 0x30
 80090b8:	b2c0      	uxtb	r0, r0
 80090ba:	2809      	cmp	r0, #9
 80090bc:	d90a      	bls.n	80090d4 <hex_char_to_num+0x20>
        result = hex - '0';
    } else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 80090be:	2b60      	cmp	r3, #96	; 0x60
 80090c0:	d901      	bls.n	80090c6 <hex_char_to_num+0x12>
 80090c2:	3b20      	subs	r3, #32
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	3b41      	subs	r3, #65	; 0x41
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	2000      	movs	r0, #0
 80090cc:	2b05      	cmp	r3, #5
 80090ce:	d801      	bhi.n	80090d4 <hex_char_to_num+0x20>
 80090d0:	4a01      	ldr	r2, [pc, #4]	; (80090d8 <hex_char_to_num+0x24>)
 80090d2:	5cd0      	ldrb	r0, [r2, r3]
            default: result = 0; break;
        }
    }

    return result;
}
 80090d4:	4770      	bx	lr
 80090d6:	46c0      	nop			; (mov r8, r8)
 80090d8:	08010f0b 	.word	0x08010f0b

080090dc <lv_draw_label>:
{
 80090dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090de:	0017      	movs	r7, r2
 80090e0:	b0ad      	sub	sp, #180	; 0xb4
 80090e2:	9312      	str	r3, [sp, #72]	; 0x48
 80090e4:	ab32      	add	r3, sp, #200	; 0xc8
 80090e6:	cb04      	ldmia	r3!, {r2}
 80090e8:	9005      	str	r0, [sp, #20]
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	910c      	str	r1, [sp, #48]	; 0x30
 80090ee:	9306      	str	r3, [sp, #24]
 80090f0:	ab35      	add	r3, sp, #212	; 0xd4
 80090f2:	881b      	ldrh	r3, [r3, #0]
 80090f4:	9209      	str	r2, [sp, #36]	; 0x24
 80090f6:	9313      	str	r3, [sp, #76]	; 0x4c
 80090f8:	ab36      	add	r3, sp, #216	; 0xd8
 80090fa:	881b      	ldrh	r3, [r3, #0]
 80090fc:	9d37      	ldr	r5, [sp, #220]	; 0xdc
 80090fe:	9314      	str	r3, [sp, #80]	; 0x50
    const lv_font_t * font = style->text.font;
 8009100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009102:	9308      	str	r3, [sp, #32]
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 8009104:	9b06      	ldr	r3, [sp, #24]
 8009106:	079b      	lsls	r3, r3, #30
 8009108:	d500      	bpl.n	800910c <lv_draw_label+0x30>
 800910a:	e092      	b.n	8009232 <lv_draw_label+0x156>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 800910c:	8883      	ldrh	r3, [r0, #4]
 800910e:	8802      	ldrh	r2, [r0, #0]
 8009110:	3301      	adds	r3, #1
 8009112:	1a9b      	subs	r3, r3, r2
 8009114:	b21b      	sxth	r3, r3
        w = p.x;
 8009116:	930a      	str	r3, [sp, #40]	; 0x28
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 8009118:	9b08      	ldr	r3, [sp, #32]
 800911a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800911c:	7a1b      	ldrb	r3, [r3, #8]
 800911e:	189b      	adds	r3, r3, r2
 8009120:	b29b      	uxth	r3, r3
 8009122:	930b      	str	r3, [sp, #44]	; 0x2c
 8009124:	466b      	mov	r3, sp
 8009126:	222c      	movs	r2, #44	; 0x2c
 8009128:	5e9b      	ldrsh	r3, [r3, r2]
    pos.x = coords->x1;
 800912a:	9a05      	ldr	r2, [sp, #20]
    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 800912c:	930d      	str	r3, [sp, #52]	; 0x34
    pos.x = coords->x1;
 800912e:	8812      	ldrh	r2, [r2, #0]
 8009130:	ab19      	add	r3, sp, #100	; 0x64
 8009132:	801a      	strh	r2, [r3, #0]
    pos.y = coords->y1;
 8009134:	9a05      	ldr	r2, [sp, #20]
 8009136:	2102      	movs	r1, #2
 8009138:	5e52      	ldrsh	r2, [r2, r1]
    if(offset != NULL) {
 800913a:	9934      	ldr	r1, [sp, #208]	; 0xd0
    pos.y = coords->y1;
 800913c:	805a      	strh	r2, [r3, #2]
    if(offset != NULL) {
 800913e:	2900      	cmp	r1, #0
 8009140:	d100      	bne.n	8009144 <lv_draw_label+0x68>
 8009142:	e1f0      	b.n	8009526 <lv_draw_label+0x44a>
        x_ofs = offset->x;
 8009144:	2000      	movs	r0, #0
 8009146:	5e09      	ldrsh	r1, [r1, r0]
    uint32_t line_start     = 0;
 8009148:	002c      	movs	r4, r5
        x_ofs = offset->x;
 800914a:	910f      	str	r1, [sp, #60]	; 0x3c
        y_ofs = offset->y;
 800914c:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800914e:	2002      	movs	r0, #2
 8009150:	5e09      	ldrsh	r1, [r1, r0]
        pos.y += y_ofs;
 8009152:	1850      	adds	r0, r2, r1
 8009154:	8058      	strh	r0, [r3, #2]
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 8009156:	2d00      	cmp	r5, #0
 8009158:	d01e      	beq.n	8009198 <lv_draw_label+0xbc>
 800915a:	2900      	cmp	r1, #0
 800915c:	d000      	beq.n	8009160 <lv_draw_label+0x84>
 800915e:	e1e8      	b.n	8009532 <lv_draw_label+0x456>
 8009160:	2a00      	cmp	r2, #0
 8009162:	db00      	blt.n	8009166 <lv_draw_label+0x8a>
 8009164:	e1e5      	b.n	8009532 <lv_draw_label+0x456>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 8009166:	68ab      	ldr	r3, [r5, #8]
 8009168:	990d      	ldr	r1, [sp, #52]	; 0x34
 800916a:	1a9a      	subs	r2, r3, r2
 800916c:	17d3      	asrs	r3, r2, #31
 800916e:	18d2      	adds	r2, r2, r3
 8009170:	405a      	eors	r2, r3
 8009172:	2380      	movs	r3, #128	; 0x80
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	1a5b      	subs	r3, r3, r1
 8009178:	005b      	lsls	r3, r3, #1
 800917a:	429a      	cmp	r2, r3
 800917c:	dd02      	ble.n	8009184 <lv_draw_label+0xa8>
            hint->line_start = -1;
 800917e:	2301      	movs	r3, #1
 8009180:	425b      	negs	r3, r3
 8009182:	602b      	str	r3, [r5, #0]
    uint32_t line_start     = 0;
 8009184:	2400      	movs	r4, #0
        last_line_start = hint->line_start;
 8009186:	682b      	ldr	r3, [r5, #0]
    if(hint && last_line_start >= 0) {
 8009188:	42a3      	cmp	r3, r4
 800918a:	db05      	blt.n	8009198 <lv_draw_label+0xbc>
        pos.y += hint->y;
 800918c:	aa19      	add	r2, sp, #100	; 0x64
        line_start = last_line_start;
 800918e:	001c      	movs	r4, r3
        pos.y += hint->y;
 8009190:	6869      	ldr	r1, [r5, #4]
 8009192:	8853      	ldrh	r3, [r2, #2]
 8009194:	18cb      	adds	r3, r1, r3
 8009196:	8053      	strh	r3, [r2, #2]
    uint32_t line_end = line_start + lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8009198:	2328      	movs	r3, #40	; 0x28
 800919a:	5efa      	ldrsh	r2, [r7, r3]
 800919c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800919e:	9908      	ldr	r1, [sp, #32]
 80091a0:	1918      	adds	r0, r3, r4
 80091a2:	9b06      	ldr	r3, [sp, #24]
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091a8:	f003 fe1c 	bl	800cde4 <lv_txt_get_next_line>
 80091ac:	1903      	adds	r3, r0, r4
 80091ae:	9307      	str	r3, [sp, #28]
    while(pos.y + line_height < mask->y1) {
 80091b0:	ae19      	add	r6, sp, #100	; 0x64
 80091b2:	2202      	movs	r2, #2
 80091b4:	5eb3      	ldrsh	r3, [r6, r2]
 80091b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091b8:	189b      	adds	r3, r3, r2
 80091ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091bc:	2102      	movs	r1, #2
 80091be:	5e52      	ldrsh	r2, [r2, r1]
 80091c0:	4293      	cmp	r3, r2
 80091c2:	db48      	blt.n	8009256 <lv_draw_label+0x17a>
 80091c4:	2304      	movs	r3, #4
 80091c6:	9a06      	ldr	r2, [sp, #24]
 80091c8:	401a      	ands	r2, r3
 80091ca:	9211      	str	r2, [sp, #68]	; 0x44
    if(flag & LV_TXT_FLAG_CENTER) {
 80091cc:	d100      	bne.n	80091d0 <lv_draw_label+0xf4>
 80091ce:	e06e      	b.n	80092ae <lv_draw_label+0x1d2>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 80091d0:	2228      	movs	r2, #40	; 0x28
 80091d2:	5ebb      	ldrsh	r3, [r7, r2]
 80091d4:	9a07      	ldr	r2, [sp, #28]
 80091d6:	1b11      	subs	r1, r2, r4
 80091d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091da:	b289      	uxth	r1, r1
 80091dc:	1910      	adds	r0, r2, r4
 80091de:	9a06      	ldr	r2, [sp, #24]
 80091e0:	9200      	str	r2, [sp, #0]
 80091e2:	9a08      	ldr	r2, [sp, #32]
 80091e4:	f003 fe84 	bl	800cef0 <lv_txt_get_width>
 80091e8:	9b05      	ldr	r3, [sp, #20]
 80091ea:	9a05      	ldr	r2, [sp, #20]
 80091ec:	889b      	ldrh	r3, [r3, #4]
 80091ee:	8812      	ldrh	r2, [r2, #0]
 80091f0:	3301      	adds	r3, #1
 80091f2:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 80091f4:	b21b      	sxth	r3, r3
 80091f6:	1a18      	subs	r0, r3, r0
 80091f8:	0fc3      	lsrs	r3, r0, #31
 80091fa:	1818      	adds	r0, r3, r0
 80091fc:	1040      	asrs	r0, r0, #1
        pos.x += lv_area_get_width(coords) - line_width;
 80091fe:	8833      	ldrh	r3, [r6, #0]
 8009200:	18c0      	adds	r0, r0, r3
 8009202:	8030      	strh	r0, [r6, #0]
 8009204:	003b      	movs	r3, r7
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 8009206:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009208:	332c      	adds	r3, #44	; 0x2c
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	2aff      	cmp	r2, #255	; 0xff
 800920e:	d166      	bne.n	80092de <lv_draw_label+0x202>
    lv_style_copy(&sel_style, &lv_style_plain_color);
 8009210:	ad1d      	add	r5, sp, #116	; 0x74
 8009212:	49ca      	ldr	r1, [pc, #808]	; (800953c <lv_draw_label+0x460>)
 8009214:	0028      	movs	r0, r5
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 8009216:	930e      	str	r3, [sp, #56]	; 0x38
    lv_style_copy(&sel_style, &lv_style_plain_color);
 8009218:	f7fe ff5a 	bl	80080d0 <lv_style_copy>
    sel_style.body.main_color = sel_style.body.grad_color = style->text.sel_color;
 800921c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800921e:	80ab      	strh	r3, [r5, #4]
 8009220:	806b      	strh	r3, [r5, #2]
    uint16_t par_start = 0;
 8009222:	2300      	movs	r3, #0
 8009224:	930d      	str	r3, [sp, #52]	; 0x34
    while(txt[line_start] != '\0') {
 8009226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009228:	5d1b      	ldrb	r3, [r3, r4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d15b      	bne.n	80092e6 <lv_draw_label+0x20a>
}
 800922e:	b02d      	add	sp, #180	; 0xb4
 8009230:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_txt_get_size(&p, txt, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX,
 8009232:	2228      	movs	r2, #40	; 0x28
 8009234:	5ebb      	ldrsh	r3, [r7, r2]
 8009236:	9a06      	ldr	r2, [sp, #24]
 8009238:	ac1d      	add	r4, sp, #116	; 0x74
 800923a:	9202      	str	r2, [sp, #8]
 800923c:	4ac0      	ldr	r2, [pc, #768]	; (8009540 <lv_draw_label+0x464>)
 800923e:	0020      	movs	r0, r4
 8009240:	9201      	str	r2, [sp, #4]
 8009242:	212a      	movs	r1, #42	; 0x2a
 8009244:	5e7a      	ldrsh	r2, [r7, r1]
 8009246:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009248:	9200      	str	r2, [sp, #0]
 800924a:	9a08      	ldr	r2, [sp, #32]
 800924c:	f003 fe9a 	bl	800cf84 <lv_txt_get_size>
        w = p.x;
 8009250:	2200      	movs	r2, #0
 8009252:	5ea3      	ldrsh	r3, [r4, r2]
 8009254:	e75f      	b.n	8009116 <lv_draw_label+0x3a>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8009256:	9a07      	ldr	r2, [sp, #28]
 8009258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800925a:	4694      	mov	ip, r2
 800925c:	4463      	add	r3, ip
 800925e:	930e      	str	r3, [sp, #56]	; 0x38
 8009260:	2328      	movs	r3, #40	; 0x28
 8009262:	5efa      	ldrsh	r2, [r7, r3]
 8009264:	9b06      	ldr	r3, [sp, #24]
 8009266:	9908      	ldr	r1, [sp, #32]
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800926c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800926e:	f003 fdb9 	bl	800cde4 <lv_txt_get_next_line>
 8009272:	9b07      	ldr	r3, [sp, #28]
        pos.y += line_height;
 8009274:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8009276:	18c0      	adds	r0, r0, r3
        pos.y += line_height;
 8009278:	8873      	ldrh	r3, [r6, #2]
 800927a:	18d3      	adds	r3, r2, r3
 800927c:	b21b      	sxth	r3, r3
 800927e:	8073      	strh	r3, [r6, #2]
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 8009280:	2d00      	cmp	r5, #0
 8009282:	d00d      	beq.n	80092a0 <lv_draw_label+0x1c4>
 8009284:	4aaf      	ldr	r2, [pc, #700]	; (8009544 <lv_draw_label+0x468>)
 8009286:	4293      	cmp	r3, r2
 8009288:	db0a      	blt.n	80092a0 <lv_draw_label+0x1c4>
 800928a:	682a      	ldr	r2, [r5, #0]
 800928c:	2a00      	cmp	r2, #0
 800928e:	da07      	bge.n	80092a0 <lv_draw_label+0x1c4>
            hint->line_start = line_start;
 8009290:	9a07      	ldr	r2, [sp, #28]
 8009292:	602a      	str	r2, [r5, #0]
            hint->y          = pos.y - coords->y1;
 8009294:	9a05      	ldr	r2, [sp, #20]
 8009296:	2102      	movs	r1, #2
 8009298:	5e52      	ldrsh	r2, [r2, r1]
 800929a:	1a9b      	subs	r3, r3, r2
 800929c:	606b      	str	r3, [r5, #4]
            hint->coord_y    = coords->y1;
 800929e:	60aa      	str	r2, [r5, #8]
        if(txt[line_start] == '\0') return;
 80092a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092a2:	9c07      	ldr	r4, [sp, #28]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d0c1      	beq.n	800922e <lv_draw_label+0x152>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 80092aa:	9007      	str	r0, [sp, #28]
 80092ac:	e780      	b.n	80091b0 <lv_draw_label+0xd4>
    else if(flag & LV_TXT_FLAG_RIGHT) {
 80092ae:	9b06      	ldr	r3, [sp, #24]
 80092b0:	071b      	lsls	r3, r3, #28
 80092b2:	d5a7      	bpl.n	8009204 <lv_draw_label+0x128>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 80092b4:	2228      	movs	r2, #40	; 0x28
 80092b6:	5ebb      	ldrsh	r3, [r7, r2]
 80092b8:	9a07      	ldr	r2, [sp, #28]
 80092ba:	1b11      	subs	r1, r2, r4
 80092bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092be:	b289      	uxth	r1, r1
 80092c0:	1910      	adds	r0, r2, r4
 80092c2:	9a06      	ldr	r2, [sp, #24]
 80092c4:	9200      	str	r2, [sp, #0]
 80092c6:	9a08      	ldr	r2, [sp, #32]
 80092c8:	f003 fe12 	bl	800cef0 <lv_txt_get_width>
 80092cc:	9b05      	ldr	r3, [sp, #20]
 80092ce:	9a05      	ldr	r2, [sp, #20]
 80092d0:	889b      	ldrh	r3, [r3, #4]
 80092d2:	8812      	ldrh	r2, [r2, #0]
 80092d4:	3301      	adds	r3, #1
 80092d6:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 80092d8:	b21b      	sxth	r3, r3
 80092da:	1a18      	subs	r0, r3, r0
 80092dc:	e78f      	b.n	80091fe <lv_draw_label+0x122>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 80092de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80092e0:	4353      	muls	r3, r2
 80092e2:	0a1b      	lsrs	r3, r3, #8
 80092e4:	e794      	b.n	8009210 <lv_draw_label+0x134>
        if(offset != NULL) {
 80092e6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d004      	beq.n	80092f6 <lv_draw_label+0x21a>
            pos.x += x_ofs;
 80092ec:	aa19      	add	r2, sp, #100	; 0x64
 80092ee:	8813      	ldrh	r3, [r2, #0]
 80092f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80092f2:	185b      	adds	r3, r3, r1
 80092f4:	8013      	strh	r3, [r2, #0]
        i         = line_start;
 80092f6:	941a      	str	r4, [sp, #104]	; 0x68
                        cmd_state = CMD_STATE_WAIT;
 80092f8:	2400      	movs	r4, #0
 80092fa:	e019      	b.n	8009330 <lv_draw_label+0x254>
            letter      = lv_txt_encoded_next(txt, &i);
 80092fc:	4d92      	ldr	r5, [pc, #584]	; (8009548 <lv_draw_label+0x46c>)
 80092fe:	a91a      	add	r1, sp, #104	; 0x68
 8009300:	682b      	ldr	r3, [r5, #0]
 8009302:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009304:	4798      	blx	r3
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8009306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009308:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800930a:	2100      	movs	r1, #0
            letter      = lv_txt_encoded_next(txt, &i);
 800930c:	0006      	movs	r6, r0
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800930e:	1898      	adds	r0, r3, r2
 8009310:	682b      	ldr	r3, [r5, #0]
 8009312:	4798      	blx	r3
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8009314:	2101      	movs	r1, #1
 8009316:	9b06      	ldr	r3, [sp, #24]
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8009318:	0002      	movs	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800931a:	420b      	tst	r3, r1
 800931c:	d100      	bne.n	8009320 <lv_draw_label+0x244>
 800931e:	e09b      	b.n	8009458 <lv_draw_label+0x37c>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8009320:	2e23      	cmp	r6, #35	; 0x23
 8009322:	d150      	bne.n	80093c6 <lv_draw_label+0x2ea>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 8009324:	2c00      	cmp	r4, #0
 8009326:	d143      	bne.n	80093b0 <lv_draw_label+0x2d4>
                        cmd_state = CMD_STATE_PAR;
 8009328:	000c      	movs	r4, r1
                        par_start = i;
 800932a:	ab14      	add	r3, sp, #80	; 0x50
 800932c:	8b1b      	ldrh	r3, [r3, #24]
 800932e:	930d      	str	r3, [sp, #52]	; 0x34
        while(i < line_end) {
 8009330:	9b07      	ldr	r3, [sp, #28]
 8009332:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009334:	4293      	cmp	r3, r2
 8009336:	d8e1      	bhi.n	80092fc <lv_draw_label+0x220>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8009338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800933a:	9a07      	ldr	r2, [sp, #28]
 800933c:	9908      	ldr	r1, [sp, #32]
 800933e:	189d      	adds	r5, r3, r2
 8009340:	2328      	movs	r3, #40	; 0x28
 8009342:	5efa      	ldrsh	r2, [r7, r3]
 8009344:	9b06      	ldr	r3, [sp, #24]
 8009346:	0028      	movs	r0, r5
 8009348:	9300      	str	r3, [sp, #0]
 800934a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800934c:	f003 fd4a 	bl	800cde4 <lv_txt_get_next_line>
 8009350:	9b07      	ldr	r3, [sp, #28]
        pos.x = coords->x1;
 8009352:	ac19      	add	r4, sp, #100	; 0x64
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8009354:	18c6      	adds	r6, r0, r3
        pos.x = coords->x1;
 8009356:	9b05      	ldr	r3, [sp, #20]
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8009358:	0001      	movs	r1, r0
        pos.x = coords->x1;
 800935a:	881b      	ldrh	r3, [r3, #0]
 800935c:	8023      	strh	r3, [r4, #0]
        if(flag & LV_TXT_FLAG_CENTER) {
 800935e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009360:	2b00      	cmp	r3, #0
 8009362:	d100      	bne.n	8009366 <lv_draw_label+0x28a>
 8009364:	e0ca      	b.n	80094fc <lv_draw_label+0x420>
            line_width =
 8009366:	2228      	movs	r2, #40	; 0x28
 8009368:	5ebb      	ldrsh	r3, [r7, r2]
 800936a:	9a06      	ldr	r2, [sp, #24]
 800936c:	0028      	movs	r0, r5
 800936e:	9200      	str	r2, [sp, #0]
 8009370:	9a08      	ldr	r2, [sp, #32]
 8009372:	f003 fdbd 	bl	800cef0 <lv_txt_get_width>
 8009376:	9b05      	ldr	r3, [sp, #20]
 8009378:	9a05      	ldr	r2, [sp, #20]
 800937a:	889b      	ldrh	r3, [r3, #4]
 800937c:	8812      	ldrh	r2, [r2, #0]
 800937e:	3301      	adds	r3, #1
 8009380:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8009382:	b21b      	sxth	r3, r3
 8009384:	1a18      	subs	r0, r3, r0
 8009386:	0fc3      	lsrs	r3, r0, #31
 8009388:	1818      	adds	r0, r3, r0
 800938a:	1040      	asrs	r0, r0, #1
            pos.x += lv_area_get_width(coords) - line_width;
 800938c:	8823      	ldrh	r3, [r4, #0]
 800938e:	18c0      	adds	r0, r0, r3
 8009390:	8020      	strh	r0, [r4, #0]
        pos.y += line_height;
 8009392:	aa19      	add	r2, sp, #100	; 0x64
 8009394:	8853      	ldrh	r3, [r2, #2]
 8009396:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009398:	9c07      	ldr	r4, [sp, #28]
 800939a:	18cb      	adds	r3, r1, r3
 800939c:	b21b      	sxth	r3, r3
 800939e:	8053      	strh	r3, [r2, #2]
        if(pos.y > mask->y2) return;
 80093a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093a2:	2106      	movs	r1, #6
 80093a4:	5e52      	ldrsh	r2, [r2, r1]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	da00      	bge.n	80093ac <lv_draw_label+0x2d0>
 80093aa:	e740      	b.n	800922e <lv_draw_label+0x152>
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 80093ac:	9607      	str	r6, [sp, #28]
 80093ae:	e73a      	b.n	8009226 <lv_draw_label+0x14a>
                    } else if(cmd_state == CMD_STATE_PAR) { /*Other start char in parameter escaped cmd. char */
 80093b0:	2c01      	cmp	r4, #1
 80093b2:	d100      	bne.n	80093b6 <lv_draw_label+0x2da>
 80093b4:	e0bf      	b.n	8009536 <lv_draw_label+0x45a>
                    } else if(cmd_state == CMD_STATE_IN) { /*Command end */
 80093b6:	2c02      	cmp	r4, #2
 80093b8:	d09e      	beq.n	80092f8 <lv_draw_label+0x21c>
            lv_color_t color = style->text.color;
 80093ba:	4669      	mov	r1, sp
 80093bc:	2048      	movs	r0, #72	; 0x48
 80093be:	8c3b      	ldrh	r3, [r7, #32]
 80093c0:	1809      	adds	r1, r1, r0
 80093c2:	800b      	strh	r3, [r1, #0]
 80093c4:	e052      	b.n	800946c <lv_draw_label+0x390>
                if(cmd_state == CMD_STATE_PAR) {
 80093c6:	2c01      	cmp	r4, #1
 80093c8:	d146      	bne.n	8009458 <lv_draw_label+0x37c>
                    if(letter == ' ') {
 80093ca:	2e20      	cmp	r6, #32
 80093cc:	d1b0      	bne.n	8009330 <lv_draw_label+0x254>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 80093ce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80093d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093d2:	1a9b      	subs	r3, r3, r2
 80093d4:	2b07      	cmp	r3, #7
 80093d6:	d13d      	bne.n	8009454 <lv_draw_label+0x378>
                            memcpy(buf, &txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 80093d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093da:	ae1b      	add	r6, sp, #108	; 0x6c
 80093dc:	1899      	adds	r1, r3, r2
 80093de:	0030      	movs	r0, r6
 80093e0:	2206      	movs	r2, #6
 80093e2:	f004 fed3 	bl	800e18c <memcpy>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 80093e6:	7830      	ldrb	r0, [r6, #0]
 80093e8:	f7ff fe64 	bl	80090b4 <hex_char_to_num>
 80093ec:	0004      	movs	r4, r0
 80093ee:	7870      	ldrb	r0, [r6, #1]
 80093f0:	f7ff fe60 	bl	80090b4 <hex_char_to_num>
 80093f4:	0124      	lsls	r4, r4, #4
 80093f6:	1824      	adds	r4, r4, r0
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 80093f8:	78b0      	ldrb	r0, [r6, #2]
 80093fa:	f7ff fe5b 	bl	80090b4 <hex_char_to_num>
 80093fe:	0005      	movs	r5, r0
 8009400:	78f0      	ldrb	r0, [r6, #3]
 8009402:	f7ff fe57 	bl	80090b4 <hex_char_to_num>
 8009406:	012d      	lsls	r5, r5, #4
 8009408:	182d      	adds	r5, r5, r0
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800940a:	7930      	ldrb	r0, [r6, #4]
 800940c:	f7ff fe52 	bl	80090b4 <hex_char_to_num>
 8009410:	9010      	str	r0, [sp, #64]	; 0x40
 8009412:	7970      	ldrb	r0, [r6, #5]
 8009414:	f7ff fe4e 	bl	80090b4 <hex_char_to_num>
 8009418:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800941a:	2258      	movs	r2, #88	; 0x58
 800941c:	011e      	lsls	r6, r3, #4
 800941e:	1836      	adds	r6, r6, r0
 8009420:	08f6      	lsrs	r6, r6, #3
 8009422:	231f      	movs	r3, #31
 8009424:	0030      	movs	r0, r6
 8009426:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8009428:	4018      	ands	r0, r3
 800942a:	439e      	bics	r6, r3
 800942c:	466b      	mov	r3, sp
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{b8 >> 3, g8 >> 2, r8 >> 3}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
    lv_color_t color;
    color.ch.blue  = (uint16_t)(b8 >> 3);
    color.ch.green = (uint16_t)(g8 >> 2);
 800942e:	b2ed      	uxtb	r5, r5
 8009430:	08ad      	lsrs	r5, r5, #2
 8009432:	4306      	orrs	r6, r0
 8009434:	0168      	lsls	r0, r5, #5
 8009436:	4d45      	ldr	r5, [pc, #276]	; (800954c <lv_draw_label+0x470>)
    color.ch.red   = (uint16_t)(r8 >> 3);
 8009438:	b2e4      	uxtb	r4, r4
 800943a:	4035      	ands	r5, r6
 800943c:	4305      	orrs	r5, r0
 800943e:	08e4      	lsrs	r4, r4, #3
 8009440:	02e0      	lsls	r0, r4, #11
 8009442:	056c      	lsls	r4, r5, #21
 8009444:	0d64      	lsrs	r4, r4, #21
 8009446:	4304      	orrs	r4, r0
 8009448:	189b      	adds	r3, r3, r2
 800944a:	801c      	strh	r4, [r3, #0]
 800944c:	b2a3      	uxth	r3, r4
                            recolor.full = style->text.color.full;
 800944e:	9310      	str	r3, [sp, #64]	; 0x40
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 8009450:	2402      	movs	r4, #2
 8009452:	e76d      	b.n	8009330 <lv_draw_label+0x254>
                            recolor.full = style->text.color.full;
 8009454:	8c3b      	ldrh	r3, [r7, #32]
 8009456:	e7fa      	b.n	800944e <lv_draw_label+0x372>
            if(cmd_state == CMD_STATE_IN) color = recolor;
 8009458:	2140      	movs	r1, #64	; 0x40
 800945a:	466b      	mov	r3, sp
 800945c:	2048      	movs	r0, #72	; 0x48
 800945e:	185b      	adds	r3, r3, r1
 8009460:	4669      	mov	r1, sp
 8009462:	881b      	ldrh	r3, [r3, #0]
 8009464:	1809      	adds	r1, r1, r0
 8009466:	800b      	strh	r3, [r1, #0]
 8009468:	2c02      	cmp	r4, #2
 800946a:	d1a6      	bne.n	80093ba <lv_draw_label+0x2de>
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800946c:	0031      	movs	r1, r6
 800946e:	9808      	ldr	r0, [sp, #32]
 8009470:	f002 fb2e 	bl	800bad0 <lv_font_get_glyph_width>
 8009474:	b203      	sxth	r3, r0
 8009476:	9315      	str	r3, [sp, #84]	; 0x54
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8009478:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800947a:	4b35      	ldr	r3, [pc, #212]	; (8009550 <lv_draw_label+0x474>)
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800947c:	0005      	movs	r5, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800947e:	429a      	cmp	r2, r3
 8009480:	d023      	beq.n	80094ca <lv_draw_label+0x3ee>
 8009482:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009484:	429a      	cmp	r2, r3
 8009486:	d020      	beq.n	80094ca <lv_draw_label+0x3ee>
                int char_ind = lv_encoded_get_char_id(txt, i);
 8009488:	4b32      	ldr	r3, [pc, #200]	; (8009554 <lv_draw_label+0x478>)
 800948a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009490:	4798      	blx	r3
                if(char_ind > sel_start && char_ind <= sel_end) {
 8009492:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009494:	4298      	cmp	r0, r3
 8009496:	dd18      	ble.n	80094ca <lv_draw_label+0x3ee>
 8009498:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800949a:	4298      	cmp	r0, r3
 800949c:	dc15      	bgt.n	80094ca <lv_draw_label+0x3ee>
                    sel_coords.x1 = pos.x;
 800949e:	ab19      	add	r3, sp, #100	; 0x64
 80094a0:	2200      	movs	r2, #0
 80094a2:	5e99      	ldrsh	r1, [r3, r2]
 80094a4:	a81b      	add	r0, sp, #108	; 0x6c
 80094a6:	8001      	strh	r1, [r0, #0]
                    sel_coords.y1 = pos.y;
 80094a8:	2202      	movs	r2, #2
 80094aa:	5e9b      	ldrsh	r3, [r3, r2]
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 80094ac:	3901      	subs	r1, #1
                    sel_coords.y1 = pos.y;
 80094ae:	8043      	strh	r3, [r0, #2]
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 80094b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
                    sel_coords.y2 = pos.y + line_height - 1;
 80094b2:	3b01      	subs	r3, #1
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 80094b4:	1852      	adds	r2, r2, r1
 80094b6:	18aa      	adds	r2, r5, r2
 80094b8:	8082      	strh	r2, [r0, #4]
                    sel_coords.y2 = pos.y + line_height - 1;
 80094ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 80094bc:	990c      	ldr	r1, [sp, #48]	; 0x30
                    sel_coords.y2 = pos.y + line_height - 1;
 80094be:	18d3      	adds	r3, r2, r3
 80094c0:	80c3      	strh	r3, [r0, #6]
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 80094c2:	aa1d      	add	r2, sp, #116	; 0x74
 80094c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094c6:	f000 f8af 	bl	8009628 <lv_draw_rect>
            lv_draw_letter(&pos, mask, font, letter, color, opa);
 80094ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094cc:	2148      	movs	r1, #72	; 0x48
 80094ce:	9301      	str	r3, [sp, #4]
 80094d0:	466b      	mov	r3, sp
 80094d2:	185a      	adds	r2, r3, r1
 80094d4:	8812      	ldrh	r2, [r2, #0]
 80094d6:	a819      	add	r0, sp, #100	; 0x64
 80094d8:	801a      	strh	r2, [r3, #0]
 80094da:	9a08      	ldr	r2, [sp, #32]
 80094dc:	0033      	movs	r3, r6
 80094de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80094e0:	f7ff fc26 	bl	8008d30 <lv_draw_letter>
            if(letter_w > 0) {
 80094e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	dc00      	bgt.n	80094ec <lv_draw_label+0x410>
 80094ea:	e721      	b.n	8009330 <lv_draw_label+0x254>
                pos.x += letter_w + style->text.letter_space;
 80094ec:	ab14      	add	r3, sp, #80	; 0x50
 80094ee:	8a9b      	ldrh	r3, [r3, #20]
 80094f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80094f2:	189b      	adds	r3, r3, r2
 80094f4:	18ed      	adds	r5, r5, r3
 80094f6:	ab14      	add	r3, sp, #80	; 0x50
 80094f8:	829d      	strh	r5, [r3, #20]
 80094fa:	e719      	b.n	8009330 <lv_draw_label+0x254>
        else if(flag & LV_TXT_FLAG_RIGHT) {
 80094fc:	9b06      	ldr	r3, [sp, #24]
 80094fe:	071b      	lsls	r3, r3, #28
 8009500:	d400      	bmi.n	8009504 <lv_draw_label+0x428>
 8009502:	e746      	b.n	8009392 <lv_draw_label+0x2b6>
            line_width =
 8009504:	2228      	movs	r2, #40	; 0x28
 8009506:	5ebb      	ldrsh	r3, [r7, r2]
 8009508:	9a06      	ldr	r2, [sp, #24]
 800950a:	0028      	movs	r0, r5
 800950c:	9200      	str	r2, [sp, #0]
 800950e:	9a08      	ldr	r2, [sp, #32]
 8009510:	f003 fcee 	bl	800cef0 <lv_txt_get_width>
 8009514:	9b05      	ldr	r3, [sp, #20]
 8009516:	9a05      	ldr	r2, [sp, #20]
 8009518:	889b      	ldrh	r3, [r3, #4]
 800951a:	8812      	ldrh	r2, [r2, #0]
 800951c:	3301      	adds	r3, #1
 800951e:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 8009520:	b21b      	sxth	r3, r3
 8009522:	1a18      	subs	r0, r3, r0
 8009524:	e732      	b.n	800938c <lv_draw_label+0x2b0>
    lv_coord_t x_ofs = 0;
 8009526:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8009528:	930f      	str	r3, [sp, #60]	; 0x3c
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800952a:	2d00      	cmp	r5, #0
 800952c:	d000      	beq.n	8009530 <lv_draw_label+0x454>
 800952e:	e617      	b.n	8009160 <lv_draw_label+0x84>
    lv_coord_t x_ofs = 0;
 8009530:	950f      	str	r5, [sp, #60]	; 0x3c
    uint32_t line_start     = 0;
 8009532:	2400      	movs	r4, #0
 8009534:	e630      	b.n	8009198 <lv_draw_label+0xbc>
                        cmd_state = CMD_STATE_WAIT;
 8009536:	2400      	movs	r4, #0
 8009538:	e73f      	b.n	80093ba <lv_draw_label+0x2de>
 800953a:	46c0      	nop			; (mov r8, r8)
 800953c:	200053d0 	.word	0x200053d0
 8009540:	00007c18 	.word	0x00007c18
 8009544:	fffffc00 	.word	0xfffffc00
 8009548:	20000048 	.word	0x20000048
 800954c:	fffff81f 	.word	0xfffff81f
 8009550:	0000ffff 	.word	0x0000ffff
 8009554:	20000040 	.word	0x20000040

08009558 <lv_color_mix>:
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8009558:	23ff      	movs	r3, #255	; 0xff
{
 800955a:	b5f0      	push	{r4, r5, r6, r7, lr}
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 800955c:	261f      	movs	r6, #31
 800955e:	b297      	uxth	r7, r2
 8009560:	0404      	lsls	r4, r0, #16
 8009562:	1a9a      	subs	r2, r3, r2
 8009564:	040b      	lsls	r3, r1, #16
 8009566:	b292      	uxth	r2, r2
 8009568:	0ee4      	lsrs	r4, r4, #27
 800956a:	0edb      	lsrs	r3, r3, #27
 800956c:	437c      	muls	r4, r7
 800956e:	4353      	muls	r3, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8009570:	0545      	lsls	r5, r0, #21
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8009572:	18e4      	adds	r4, r4, r3
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8009574:	054b      	lsls	r3, r1, #21
 8009576:	0ead      	lsrs	r5, r5, #26
 8009578:	0e9b      	lsrs	r3, r3, #26
 800957a:	437d      	muls	r5, r7
 800957c:	4353      	muls	r3, r2
 800957e:	18ed      	adds	r5, r5, r3
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8009580:	06c3      	lsls	r3, r0, #27
 8009582:	06c8      	lsls	r0, r1, #27
 8009584:	0edb      	lsrs	r3, r3, #27
 8009586:	0ec0      	lsrs	r0, r0, #27
 8009588:	437b      	muls	r3, r7
 800958a:	4350      	muls	r0, r2
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 800958c:	04ad      	lsls	r5, r5, #18
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 800958e:	1818      	adds	r0, r3, r0
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8009590:	0a24      	lsrs	r4, r4, #8
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8009592:	0a00      	lsrs	r0, r0, #8
    return ret;
 8009594:	0ead      	lsrs	r5, r5, #26
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8009596:	4034      	ands	r4, r6
    return ret;
 8009598:	016d      	lsls	r5, r5, #5
 800959a:	4030      	ands	r0, r6
 800959c:	4328      	orrs	r0, r5
 800959e:	02e4      	lsls	r4, r4, #11
 80095a0:	4320      	orrs	r0, r4
}
 80095a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080095a4 <lv_draw_cont_radius_corr>:
}

#endif

static uint16_t lv_draw_cont_radius_corr(uint16_t r, lv_coord_t w, lv_coord_t h)
{
 80095a4:	b570      	push	{r4, r5, r6, lr}
 80095a6:	000e      	movs	r6, r1
 80095a8:	0015      	movs	r5, r2
 80095aa:	0004      	movs	r4, r0
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 80095ac:	f7fe fbc2 	bl	8007d34 <lv_refr_get_disp_refreshing>
 80095b0:	f002 fc5c 	bl	800be6c <lv_disp_get_antialiasing>

    if(r >= (w >> 1)) {
 80095b4:	1076      	asrs	r6, r6, #1
 80095b6:	42b4      	cmp	r4, r6
 80095b8:	db04      	blt.n	80095c4 <lv_draw_cont_radius_corr+0x20>
        r = (w >> 1);
 80095ba:	b2b4      	uxth	r4, r6
        if(r != 0) r--;
 80095bc:	2c00      	cmp	r4, #0
 80095be:	d001      	beq.n	80095c4 <lv_draw_cont_radius_corr+0x20>
 80095c0:	3c01      	subs	r4, #1
 80095c2:	b2a4      	uxth	r4, r4
    }
    if(r >= (h >> 1)) {
 80095c4:	106d      	asrs	r5, r5, #1
 80095c6:	42ac      	cmp	r4, r5
 80095c8:	db04      	blt.n	80095d4 <lv_draw_cont_radius_corr+0x30>
        r = (h >> 1);
 80095ca:	b2ac      	uxth	r4, r5
        if(r != 0) r--;
 80095cc:	2c00      	cmp	r4, #0
 80095ce:	d005      	beq.n	80095dc <lv_draw_cont_radius_corr+0x38>
 80095d0:	3c01      	subs	r4, #1
 80095d2:	b2a4      	uxth	r4, r4
    }

    if(r > 0) r -= aa;
 80095d4:	2c00      	cmp	r4, #0
 80095d6:	d001      	beq.n	80095dc <lv_draw_cont_radius_corr+0x38>
 80095d8:	1a24      	subs	r4, r4, r0
 80095da:	b2a4      	uxth	r4, r4

    return r;
}
 80095dc:	0020      	movs	r0, r4
 80095de:	bd70      	pop	{r4, r5, r6, pc}

080095e0 <antialias_get_opa_circ>:
 * @param px_id index of pixel on the line segment
 * @param line_opa opacity of the lien (it will be the max opacity)
 * @return the desired opacity of the pixel
 */
static lv_opa_t antialias_get_opa_circ(lv_coord_t seg, lv_coord_t px_id, lv_opa_t opa)
{
 80095e0:	b510      	push	{r4, lr}
 80095e2:	0003      	movs	r3, r0
 80095e4:	0014      	movs	r4, r2
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 1
    if(seg == 1) return 170;
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 2
    if(seg == 2) return (opa_map2[px_id] * opa) >> 8;
 80095e6:	2802      	cmp	r0, #2
 80095e8:	d104      	bne.n	80095f4 <antialias_get_opa_circ+0x14>
 80095ea:	4b0b      	ldr	r3, [pc, #44]	; (8009618 <antialias_get_opa_circ+0x38>)
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 3
    if(seg == 3) return (opa_map3[px_id] * opa) >> 8;
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 4
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 80095ec:	5c58      	ldrb	r0, [r3, r1]
#endif

    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 80095ee:	4360      	muls	r0, r4
 80095f0:	0a00      	lsrs	r0, r0, #8
}
 80095f2:	bd10      	pop	{r4, pc}
    if(seg == 3) return (opa_map3[px_id] * opa) >> 8;
 80095f4:	2803      	cmp	r0, #3
 80095f6:	d101      	bne.n	80095fc <antialias_get_opa_circ+0x1c>
 80095f8:	4b08      	ldr	r3, [pc, #32]	; (800961c <antialias_get_opa_circ+0x3c>)
 80095fa:	e7f7      	b.n	80095ec <antialias_get_opa_circ+0xc>
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 80095fc:	2804      	cmp	r0, #4
 80095fe:	d101      	bne.n	8009604 <antialias_get_opa_circ+0x24>
 8009600:	4b07      	ldr	r3, [pc, #28]	; (8009620 <antialias_get_opa_circ+0x40>)
 8009602:	e7f3      	b.n	80095ec <antialias_get_opa_circ+0xc>
    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
 8009604:	2007      	movs	r0, #7
 8009606:	4348      	muls	r0, r1
 8009608:	1e59      	subs	r1, r3, #1
 800960a:	f7f6 fda9 	bl	8000160 <__udivsi3>
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 800960e:	4b05      	ldr	r3, [pc, #20]	; (8009624 <antialias_get_opa_circ+0x44>)
 8009610:	b2c0      	uxtb	r0, r0
 8009612:	5c18      	ldrb	r0, [r3, r0]
 8009614:	e7eb      	b.n	80095ee <antialias_get_opa_circ+0xe>
 8009616:	46c0      	nop			; (mov r8, r8)
 8009618:	08010f11 	.word	0x08010f11
 800961c:	08010f13 	.word	0x08010f13
 8009620:	08010f16 	.word	0x08010f16
 8009624:	08010f1a 	.word	0x08010f1a

08009628 <lv_draw_rect>:
{
 8009628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800962a:	b0ab      	sub	sp, #172	; 0xac
 800962c:	9204      	str	r2, [sp, #16]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 800962e:	88c2      	ldrh	r2, [r0, #6]
 8009630:	930b      	str	r3, [sp, #44]	; 0x2c
 8009632:	8843      	ldrh	r3, [r0, #2]
 8009634:	3201      	adds	r2, #1
 8009636:	1ad2      	subs	r2, r2, r3
 8009638:	b212      	sxth	r2, r2
 800963a:	0007      	movs	r7, r0
 800963c:	9103      	str	r1, [sp, #12]
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800963e:	2a00      	cmp	r2, #0
 8009640:	dc01      	bgt.n	8009646 <lv_draw_rect+0x1e>
 8009642:	f000 fe72 	bl	800a32a <lv_draw_rect+0xd02>
    return area_p->x2 - area_p->x1 + 1;
 8009646:	8881      	ldrh	r1, [r0, #4]
 8009648:	8803      	ldrh	r3, [r0, #0]
 800964a:	3101      	adds	r1, #1
 800964c:	1ac9      	subs	r1, r1, r3
 800964e:	b209      	sxth	r1, r1
 8009650:	2900      	cmp	r1, #0
 8009652:	dc01      	bgt.n	8009658 <lv_draw_rect+0x30>
 8009654:	f000 fe69 	bl	800a32a <lv_draw_rect+0xd02>
    if(style->body.shadow.width != 0) {
 8009658:	9b04      	ldr	r3, [sp, #16]
 800965a:	2012      	movs	r0, #18
 800965c:	5e1b      	ldrsh	r3, [r3, r0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d100      	bne.n	8009664 <lv_draw_rect+0x3c>
 8009662:	e2cb      	b.n	8009bfc <lv_draw_rect+0x5d4>
    radius            = lv_draw_cont_radius_corr(radius, width, height);
 8009664:	9b04      	ldr	r3, [sp, #16]
    memcpy(dest, src, sizeof(lv_area_t));
 8009666:	ac20      	add	r4, sp, #128	; 0x80
 8009668:	88d8      	ldrh	r0, [r3, #6]
 800966a:	f7ff ff9b 	bl	80095a4 <lv_draw_cont_radius_corr>
 800966e:	0005      	movs	r5, r0
 8009670:	0039      	movs	r1, r7
 8009672:	2208      	movs	r2, #8
 8009674:	0020      	movs	r0, r4
 8009676:	f004 fd89 	bl	800e18c <memcpy>
    area_tmp.x1 += radius;
 800967a:	8823      	ldrh	r3, [r4, #0]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800967c:	0021      	movs	r1, r4
    area_tmp.x1 += radius;
 800967e:	18eb      	adds	r3, r5, r3
 8009680:	8023      	strh	r3, [r4, #0]
    area_tmp.x2 -= radius;
 8009682:	88a3      	ldrh	r3, [r4, #4]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 8009684:	9803      	ldr	r0, [sp, #12]
    area_tmp.x2 -= radius;
 8009686:	1b5b      	subs	r3, r3, r5
 8009688:	80a3      	strh	r3, [r4, #4]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800968a:	f002 fdf2 	bl	800c272 <lv_area_is_in>
 800968e:	2800      	cmp	r0, #0
 8009690:	d000      	beq.n	8009694 <lv_draw_rect+0x6c>
 8009692:	e2b3      	b.n	8009bfc <lv_draw_rect+0x5d4>
 8009694:	2208      	movs	r2, #8
 8009696:	0039      	movs	r1, r7
 8009698:	0020      	movs	r0, r4
 800969a:	f004 fd77 	bl	800e18c <memcpy>
    area_tmp.y1 += radius;
 800969e:	8863      	ldrh	r3, [r4, #2]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 80096a0:	0021      	movs	r1, r4
    area_tmp.y1 += radius;
 80096a2:	18eb      	adds	r3, r5, r3
 80096a4:	8063      	strh	r3, [r4, #2]
    area_tmp.y2 -= radius;
 80096a6:	88e3      	ldrh	r3, [r4, #6]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 80096a8:	9803      	ldr	r0, [sp, #12]
    area_tmp.y2 -= radius;
 80096aa:	1b5d      	subs	r5, r3, r5
 80096ac:	80e5      	strh	r5, [r4, #6]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 80096ae:	f002 fde0 	bl	800c272 <lv_area_is_in>
 80096b2:	1e06      	subs	r6, r0, #0
 80096b4:	d000      	beq.n	80096b8 <lv_draw_rect+0x90>
 80096b6:	e2a1      	b.n	8009bfc <lv_draw_rect+0x5d4>
    if(style->body.shadow.type == LV_SHADOW_FULL) {
 80096b8:	9b04      	ldr	r3, [sp, #16]
 80096ba:	7d1b      	ldrb	r3, [r3, #20]
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d000      	beq.n	80096c2 <lv_draw_rect+0x9a>
 80096c0:	e219      	b.n	8009af6 <lv_draw_rect+0x4ce>
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 80096c2:	f7fe fb37 	bl	8007d34 <lv_refr_get_disp_refreshing>
 80096c6:	f002 fbd1 	bl	800be6c <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 80096ca:	9b04      	ldr	r3, [sp, #16]
    return area_p->x2 - area_p->x1 + 1;
 80096cc:	88b9      	ldrh	r1, [r7, #4]
 80096ce:	2212      	movs	r2, #18
 80096d0:	5e9b      	ldrsh	r3, [r3, r2]
    return area_p->y2 - area_p->y1 + 1;
 80096d2:	88fa      	ldrh	r2, [r7, #6]
 80096d4:	9307      	str	r3, [sp, #28]
 80096d6:	887b      	ldrh	r3, [r7, #2]
 80096d8:	3201      	adds	r2, #1
 80096da:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 80096dc:	883b      	ldrh	r3, [r7, #0]
 80096de:	3101      	adds	r1, #1
 80096e0:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 80096e2:	9b04      	ldr	r3, [sp, #16]
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 80096e4:	0004      	movs	r4, r0
    radius = lv_draw_cont_radius_corr(radius, width, height);
 80096e6:	b212      	sxth	r2, r2
 80096e8:	b209      	sxth	r1, r1
 80096ea:	88d8      	ldrh	r0, [r3, #6]
 80096ec:	f7ff ff5a 	bl	80095a4 <lv_draw_cont_radius_corr>
    radius += aa;
 80096f0:	b2a3      	uxth	r3, r4
 80096f2:	18c0      	adds	r0, r0, r3
 80096f4:	9305      	str	r3, [sp, #20]
 80096f6:	b283      	uxth	r3, r0
 80096f8:	9308      	str	r3, [sp, #32]
 80096fa:	466b      	mov	r3, sp
 80096fc:	2220      	movs	r2, #32
 80096fe:	5e9b      	ldrsh	r3, [r3, r2]
 8009700:	930e      	str	r3, [sp, #56]	; 0x38
    int16_t filter_width = 2 * swidth + 1;
 8009702:	466b      	mov	r3, sp
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8009704:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    int16_t filter_width = 2 * swidth + 1;
 8009706:	8b9b      	ldrh	r3, [r3, #28]
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8009708:	4694      	mov	ip, r2
    int16_t filter_width = 2 * swidth + 1;
 800970a:	9314      	str	r3, [sp, #80]	; 0x50
 800970c:	005b      	lsls	r3, r3, #1
 800970e:	3301      	adds	r3, #1
 8009710:	b21b      	sxth	r3, r3
 8009712:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8009714:	9b07      	ldr	r3, [sp, #28]
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 8009716:	9a09      	ldr	r2, [sp, #36]	; 0x24
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8009718:	4463      	add	r3, ip
 800971a:	930f      	str	r3, [sp, #60]	; 0x3c
 800971c:	1d18      	adds	r0, r3, #4
 800971e:	2303      	movs	r3, #3
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 8009720:	18d4      	adds	r4, r2, r3
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 8009722:	4398      	bics	r0, r3
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 8009724:	439c      	bics	r4, r3
    curve_x_size *= sizeof(lv_coord_t);
 8009726:	0045      	lsls	r5, r0, #1
    line_1d_blur_size *= sizeof(uint32_t);
 8009728:	00a4      	lsls	r4, r4, #2
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 800972a:	1964      	adds	r4, r4, r5
 800972c:	1900      	adds	r0, r0, r4
 800972e:	f7ff f8cf 	bl	80088d0 <lv_draw_get_buf>
    uint32_t * line_1d_blur = (uint32_t *)&draw_buf[curve_x_size];
 8009732:	1943      	adds	r3, r0, r5
 8009734:	9310      	str	r3, [sp, #64]	; 0x40
    memset(curve_x, 0, curve_x_size);
 8009736:	002a      	movs	r2, r5
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 8009738:	1903      	adds	r3, r0, r4
    memset(curve_x, 0, curve_x_size);
 800973a:	0031      	movs	r1, r6
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 800973c:	9311      	str	r3, [sp, #68]	; 0x44
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 800973e:	9006      	str	r0, [sp, #24]
    memset(curve_x, 0, curve_x_size);
 8009740:	f004 fd2d 	bl	800e19e <memset>
    lv_circ_init(&circ, &circ_tmp, radius);
 8009744:	210a      	movs	r1, #10
 8009746:	ab1c      	add	r3, sp, #112	; 0x70
 8009748:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800974a:	18c9      	adds	r1, r1, r3
 800974c:	a81f      	add	r0, sp, #124	; 0x7c
 800974e:	f002 fdaf 	bl	800c2b0 <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 8009752:	ac1f      	add	r4, sp, #124	; 0x7c
 8009754:	0020      	movs	r0, r4
 8009756:	f002 fdb2 	bl	800c2be <lv_circ_cont>
 800975a:	2800      	cmp	r0, #0
 800975c:	d156      	bne.n	800980c <lv_draw_rect+0x1e4>
 800975e:	9b04      	ldr	r3, [sp, #16]
 8009760:	7a1c      	ldrb	r4, [r3, #8]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8009762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009764:	2bff      	cmp	r3, #255	; 0xff
 8009766:	d001      	beq.n	800976c <lv_draw_rect+0x144>
 8009768:	435c      	muls	r4, r3
 800976a:	0a24      	lsrs	r4, r4, #8
                             (filter_width * filter_width);
 800976c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800976e:	2600      	movs	r6, #0
 8009770:	001a      	movs	r2, r3
 8009772:	435b      	muls	r3, r3
 8009774:	0065      	lsls	r5, r4, #1
 8009776:	930a      	str	r3, [sp, #40]	; 0x28
 8009778:	0213      	lsls	r3, r2, #8
 800977a:	435d      	muls	r5, r3
 800977c:	0264      	lsls	r4, r4, #9
 800977e:	4264      	negs	r4, r4
    for(line = 0; line < filter_width; line++) {
 8009780:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009782:	b233      	sxth	r3, r6
 8009784:	429a      	cmp	r2, r3
 8009786:	dc56      	bgt.n	8009836 <lv_draw_rect+0x20e>
    ofs_rb.x = coords->x2 - radius - aa;
 8009788:	88bb      	ldrh	r3, [r7, #4]
 800978a:	9a08      	ldr	r2, [sp, #32]
 800978c:	1a9b      	subs	r3, r3, r2
 800978e:	9a05      	ldr	r2, [sp, #20]
 8009790:	1a9b      	subs	r3, r3, r2
 8009792:	b29b      	uxth	r3, r3
 8009794:	9315      	str	r3, [sp, #84]	; 0x54
 8009796:	2254      	movs	r2, #84	; 0x54
 8009798:	466b      	mov	r3, sp
 800979a:	189b      	adds	r3, r3, r2
 800979c:	2200      	movs	r2, #0
 800979e:	5e9b      	ldrsh	r3, [r3, r2]
    ofs_rb.y = coords->y2 - radius - aa;
 80097a0:	9a08      	ldr	r2, [sp, #32]
    ofs_rb.x = coords->x2 - radius - aa;
 80097a2:	9319      	str	r3, [sp, #100]	; 0x64
    ofs_rb.y = coords->y2 - radius - aa;
 80097a4:	88fb      	ldrh	r3, [r7, #6]
 80097a6:	1a9b      	subs	r3, r3, r2
 80097a8:	9a05      	ldr	r2, [sp, #20]
 80097aa:	1a9b      	subs	r3, r3, r2
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	930a      	str	r3, [sp, #40]	; 0x28
 80097b0:	466b      	mov	r3, sp
 80097b2:	2228      	movs	r2, #40	; 0x28
 80097b4:	5e9b      	ldrsh	r3, [r3, r2]
    ofs_rt.y = coords->y1 + radius + aa;
 80097b6:	9a05      	ldr	r2, [sp, #20]
    ofs_rb.y = coords->y2 - radius - aa;
 80097b8:	9316      	str	r3, [sp, #88]	; 0x58
    ofs_rt.y = coords->y1 + radius + aa;
 80097ba:	887b      	ldrh	r3, [r7, #2]
 80097bc:	18d3      	adds	r3, r2, r3
 80097be:	9a08      	ldr	r2, [sp, #32]
 80097c0:	18d3      	adds	r3, r2, r3
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	930c      	str	r3, [sp, #48]	; 0x30
 80097c6:	466b      	mov	r3, sp
 80097c8:	2230      	movs	r2, #48	; 0x30
 80097ca:	5e9b      	ldrsh	r3, [r3, r2]
    ofs_lb.x = coords->x1 + radius + aa;
 80097cc:	9a05      	ldr	r2, [sp, #20]
    ofs_rt.y = coords->y1 + radius + aa;
 80097ce:	9317      	str	r3, [sp, #92]	; 0x5c
    ofs_lb.x = coords->x1 + radius + aa;
 80097d0:	883b      	ldrh	r3, [r7, #0]
 80097d2:	18d3      	adds	r3, r2, r3
 80097d4:	9a08      	ldr	r2, [sp, #32]
 80097d6:	18d3      	adds	r3, r2, r3
 80097d8:	b29b      	uxth	r3, r3
 80097da:	9318      	str	r3, [sp, #96]	; 0x60
 80097dc:	2260      	movs	r2, #96	; 0x60
 80097de:	466b      	mov	r3, sp
 80097e0:	189b      	adds	r3, r3, r2
 80097e2:	2200      	movs	r2, #0
 80097e4:	5e9b      	ldrsh	r3, [r3, r2]
 80097e6:	931a      	str	r3, [sp, #104]	; 0x68
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
 80097e8:	2300      	movs	r3, #0
 80097ea:	9309      	str	r3, [sp, #36]	; 0x24
 80097ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097f0:	4293      	cmp	r3, r2
 80097f2:	da00      	bge.n	80097f6 <lv_draw_rect+0x1ce>
 80097f4:	e202      	b.n	8009bfc <lv_draw_rect+0x5d4>
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 80097f6:	9b06      	ldr	r3, [sp, #24]
 80097f8:	0050      	lsls	r0, r2, #1
 80097fa:	1818      	adds	r0, r3, r0
 80097fc:	2300      	movs	r3, #0
 80097fe:	9305      	str	r3, [sp, #20]
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8009800:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009802:	425e      	negs	r6, r3
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 8009804:	9b07      	ldr	r3, [sp, #28]
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 8009806:	b236      	sxth	r6, r6
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 8009808:	425c      	negs	r4, r3
 800980a:	e0e8      	b.n	80099de <lv_draw_rect+0x3b6>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 800980c:	2300      	movs	r3, #0
 800980e:	5ee2      	ldrsh	r2, [r4, r3]
 8009810:	2102      	movs	r1, #2
 8009812:	5e63      	ldrsh	r3, [r4, r1]
 8009814:	9906      	ldr	r1, [sp, #24]
 8009816:	005b      	lsls	r3, r3, #1
 8009818:	525a      	strh	r2, [r3, r1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 800981a:	2302      	movs	r3, #2
 800981c:	5ee2      	ldrsh	r2, [r4, r3]
 800981e:	2100      	movs	r1, #0
 8009820:	5e63      	ldrsh	r3, [r4, r1]
 8009822:	9906      	ldr	r1, [sp, #24]
 8009824:	005b      	lsls	r3, r3, #1
 8009826:	525a      	strh	r2, [r3, r1]
        lv_circ_next(&circ, &circ_tmp);
 8009828:	210a      	movs	r1, #10
 800982a:	ab1c      	add	r3, sp, #112	; 0x70
 800982c:	18c9      	adds	r1, r1, r3
 800982e:	0020      	movs	r0, r4
 8009830:	f002 fd4f 	bl	800c2d2 <lv_circ_next>
 8009834:	e78d      	b.n	8009752 <lv_draw_rect+0x12a>
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2) << SHADOW_OPA_EXTRA_PRECISION) /
 8009836:	0028      	movs	r0, r5
 8009838:	990a      	ldr	r1, [sp, #40]	; 0x28
 800983a:	f7f6 fc91 	bl	8000160 <__udivsi3>
 800983e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009840:	00b2      	lsls	r2, r6, #2
 8009842:	5098      	str	r0, [r3, r2]
 8009844:	3601      	adds	r6, #1
 8009846:	192d      	adds	r5, r5, r4
 8009848:	e79a      	b.n	8009780 <lv_draw_rect+0x158>
                if(line + line_rel < 0) { /*Below the radius, here is the blur of the edge */
 800984a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800984c:	18d3      	adds	r3, r2, r3
 800984e:	d400      	bmi.n	8009852 <lv_draw_rect+0x22a>
 8009850:	e0aa      	b.n	80099a8 <lv_draw_rect+0x380>
                    col_rel = radius - curve_x[line] - col;
 8009852:	8803      	ldrh	r3, [r0, #0]
 8009854:	9d08      	ldr	r5, [sp, #32]
 8009856:	1aeb      	subs	r3, r5, r3
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 8009858:	9d05      	ldr	r5, [sp, #20]
 800985a:	1b5b      	subs	r3, r3, r5
 800985c:	b21b      	sxth	r3, r3
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 800985e:	42a3      	cmp	r3, r4
 8009860:	db00      	blt.n	8009864 <lv_draw_rect+0x23c>
 8009862:	e0aa      	b.n	80099ba <lv_draw_rect+0x392>
                    if(line_rel == -swidth)
 8009864:	1b12      	subs	r2, r2, r4
 8009866:	4253      	negs	r3, r2
 8009868:	4153      	adcs	r3, r2
 800986a:	b2db      	uxtb	r3, r3
            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 800986c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800986e:	9d05      	ldr	r5, [sp, #20]
 8009870:	0a09      	lsrs	r1, r1, #8
 8009872:	5551      	strb	r1, [r2, r5]
 8009874:	002a      	movs	r2, r5
 8009876:	3201      	adds	r2, #1
            if(line_ready) {
 8009878:	2b00      	cmp	r3, #0
 800987a:	d100      	bne.n	800987e <lv_draw_rect+0x256>
 800987c:	e0ad      	b.n	80099da <lv_draw_rect+0x3b2>
                col++; /*To make this line to the last one ( drawing will go to '< col')*/
 800987e:	b293      	uxth	r3, r2
 8009880:	9305      	str	r3, [sp, #20]
        point_rt.y = ofs_rt.y - line;
 8009882:	466a      	mov	r2, sp
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 8009884:	8801      	ldrh	r1, [r0, #0]
        point_rt.y = ofs_rt.y - line;
 8009886:	2030      	movs	r0, #48	; 0x30
 8009888:	5e12      	ldrsh	r2, [r2, r0]
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 800988a:	9b15      	ldr	r3, [sp, #84]	; 0x54
        point_rt.y = ofs_rt.y - line;
 800988c:	920d      	str	r2, [sp, #52]	; 0x34
        point_rb.y = ofs_rb.y + line;
 800988e:	466a      	mov	r2, sp
 8009890:	2628      	movs	r6, #40	; 0x28
 8009892:	5f96      	ldrsh	r6, [r2, r6]
        point_lt.x = ofs_lt.x - curve_x[line] - 1;
 8009894:	9a18      	ldr	r2, [sp, #96]	; 0x60
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 8009896:	3301      	adds	r3, #1
        point_lt.x = ofs_lt.x - curve_x[line] - 1;
 8009898:	3a01      	subs	r2, #1
 800989a:	1a52      	subs	r2, r2, r1
 800989c:	b292      	uxth	r2, r2
 800989e:	9213      	str	r2, [sp, #76]	; 0x4c
 80098a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 80098a2:	18cb      	adds	r3, r1, r3
 80098a4:	1c55      	adds	r5, r2, #1
        for(d = 1; d < col; d++) {
 80098a6:	2201      	movs	r2, #1
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	b21c      	sxth	r4, r3
        for(d = 1; d < col; d++) {
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	931c      	str	r3, [sp, #112]	; 0x70
 80098b0:	224c      	movs	r2, #76	; 0x4c
 80098b2:	466b      	mov	r3, sp
 80098b4:	189b      	adds	r3, r3, r2
 80098b6:	2200      	movs	r2, #0
 80098b8:	5e9b      	ldrsh	r3, [r3, r2]
 80098ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80098bc:	9312      	str	r3, [sp, #72]	; 0x48
 80098be:	b2a3      	uxth	r3, r4
 80098c0:	931b      	str	r3, [sp, #108]	; 0x6c
 80098c2:	189b      	adds	r3, r3, r2
 80098c4:	9a05      	ldr	r2, [sp, #20]
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d900      	bls.n	80098ce <lv_draw_rect+0x2a6>
 80098cc:	e094      	b.n	80099f8 <lv_draw_rect+0x3d0>
        if(line == 0) lv_draw_shadow_full_straight(coords, mask, style, line_2d_blur);
 80098ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d15c      	bne.n	800998e <lv_draw_rect+0x366>
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 80098d4:	f7fe fa2e 	bl	8007d34 <lv_refr_get_disp_refreshing>
 80098d8:	f002 fac8 	bl	800be6c <lv_disp_get_antialiasing>
    lv_coord_t swidth = style->body.shadow.width;
 80098dc:	9b04      	ldr	r3, [sp, #16]
 80098de:	88b9      	ldrh	r1, [r7, #4]
 80098e0:	2212      	movs	r2, #18
 80098e2:	5e9b      	ldrsh	r3, [r3, r2]
    return area_p->y2 - area_p->y1 + 1;
 80098e4:	88fa      	ldrh	r2, [r7, #6]
 80098e6:	9313      	str	r3, [sp, #76]	; 0x4c
 80098e8:	887b      	ldrh	r3, [r7, #2]
 80098ea:	3201      	adds	r2, #1
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 80098ec:	0004      	movs	r4, r0
 80098ee:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 80098f0:	883b      	ldrh	r3, [r7, #0]
 80098f2:	3101      	adds	r1, #1
 80098f4:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 80098f6:	9b04      	ldr	r3, [sp, #16]
 80098f8:	b212      	sxth	r2, r2
 80098fa:	b209      	sxth	r1, r1
 80098fc:	88d8      	ldrh	r0, [r3, #6]
 80098fe:	f7ff fe51 	bl	80095a4 <lv_draw_cont_radius_corr>
    right_area.x1 = coords->x2 + 1 - aa;
 8009902:	88ba      	ldrh	r2, [r7, #4]
    radius += aa;
 8009904:	b2a3      	uxth	r3, r4
    right_area.x1 = coords->x2 + 1 - aa;
 8009906:	9205      	str	r2, [sp, #20]
 8009908:	3201      	adds	r2, #1
 800990a:	1ad2      	subs	r2, r2, r3
 800990c:	a922      	add	r1, sp, #136	; 0x88
 800990e:	b212      	sxth	r2, r2
 8009910:	800a      	strh	r2, [r1, #0]
    right_area.y1 = coords->y1 + radius + aa;
 8009912:	887c      	ldrh	r4, [r7, #2]
    radius += aa;
 8009914:	18c0      	adds	r0, r0, r3
 8009916:	b280      	uxth	r0, r0
    right_area.y1 = coords->y1 + radius + aa;
 8009918:	191d      	adds	r5, r3, r4
 800991a:	1945      	adds	r5, r0, r5
 800991c:	b22d      	sxth	r5, r5
 800991e:	804d      	strh	r5, [r1, #2]
    right_area.x2 = right_area.x1;
 8009920:	808a      	strh	r2, [r1, #4]
    right_area.y2 = coords->y2 - radius - aa;
 8009922:	88fa      	ldrh	r2, [r7, #6]
    right_area.y1 = coords->y1 + radius + aa;
 8009924:	46ac      	mov	ip, r5
    right_area.y2 = coords->y2 - radius - aa;
 8009926:	1a15      	subs	r5, r2, r0
 8009928:	1aed      	subs	r5, r5, r3
 800992a:	b22d      	sxth	r5, r5
 800992c:	9512      	str	r5, [sp, #72]	; 0x48
 800992e:	920d      	str	r2, [sp, #52]	; 0x34
 8009930:	2548      	movs	r5, #72	; 0x48
 8009932:	466a      	mov	r2, sp
 8009934:	1952      	adds	r2, r2, r5
 8009936:	8815      	ldrh	r5, [r2, #0]
    left_area.y1 = coords->y1 + radius + aa;
 8009938:	4662      	mov	r2, ip
    right_area.y2 = coords->y2 - radius - aa;
 800993a:	80cd      	strh	r5, [r1, #6]
    left_area.x1 = coords->x1 - 1 + aa;
 800993c:	8839      	ldrh	r1, [r7, #0]
 800993e:	ad24      	add	r5, sp, #144	; 0x90
 8009940:	1e4e      	subs	r6, r1, #1
 8009942:	199e      	adds	r6, r3, r6
 8009944:	b236      	sxth	r6, r6
 8009946:	802e      	strh	r6, [r5, #0]
    left_area.y1 = coords->y1 + radius + aa;
 8009948:	806a      	strh	r2, [r5, #2]
    left_area.x2 = left_area.x1;
 800994a:	80ae      	strh	r6, [r5, #4]
    left_area.y2 = coords->y2 - radius - aa;
 800994c:	466a      	mov	r2, sp
 800994e:	2648      	movs	r6, #72	; 0x48
 8009950:	1992      	adds	r2, r2, r6
 8009952:	8812      	ldrh	r2, [r2, #0]
    top_area.x1 = coords->x1 + radius + aa;
 8009954:	1859      	adds	r1, r3, r1
    left_area.y2 = coords->y2 - radius - aa;
 8009956:	80ea      	strh	r2, [r5, #6]
    top_area.x2 = coords->x2 - radius - aa;
 8009958:	9a05      	ldr	r2, [sp, #20]
    top_area.x1 = coords->x1 + radius + aa;
 800995a:	1841      	adds	r1, r0, r1
    top_area.x2 = coords->x2 - radius - aa;
 800995c:	1a10      	subs	r0, r2, r0
    bottom_area.y1 = coords->y2 + 1 - aa;
 800995e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    top_area.y1 = coords->y1 - 1 + aa;
 8009960:	3c01      	subs	r4, #1
 8009962:	191c      	adds	r4, r3, r4
    bottom_area.y1 = coords->y2 + 1 - aa;
 8009964:	3201      	adds	r2, #1
    top_area.x1 = coords->x1 + radius + aa;
 8009966:	ad26      	add	r5, sp, #152	; 0x98
    top_area.y1 = coords->y1 - 1 + aa;
 8009968:	b224      	sxth	r4, r4
    top_area.x2 = coords->x2 - radius - aa;
 800996a:	1ac0      	subs	r0, r0, r3
    bottom_area.y1 = coords->y2 + 1 - aa;
 800996c:	1ad3      	subs	r3, r2, r3
    top_area.x1 = coords->x1 + radius + aa;
 800996e:	b209      	sxth	r1, r1
    top_area.x2 = coords->x2 - radius - aa;
 8009970:	b200      	sxth	r0, r0
    bottom_area.y1 = coords->y2 + 1 - aa;
 8009972:	b21b      	sxth	r3, r3
    top_area.y1 = coords->y1 - 1 + aa;
 8009974:	806c      	strh	r4, [r5, #2]
    top_area.y2 = top_area.y1;
 8009976:	80ec      	strh	r4, [r5, #6]
    bottom_area.x1 = coords->x1 + radius + aa;
 8009978:	ac28      	add	r4, sp, #160	; 0xa0
 800997a:	8021      	strh	r1, [r4, #0]
    bottom_area.y1 = coords->y2 + 1 - aa;
 800997c:	8063      	strh	r3, [r4, #2]
    bottom_area.x2 = coords->x2 - radius - aa;
 800997e:	80a0      	strh	r0, [r4, #4]
    bottom_area.y2 = bottom_area.y1;
 8009980:	80e3      	strh	r3, [r4, #6]
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 8009982:	2401      	movs	r4, #1
    top_area.x1 = coords->x1 + radius + aa;
 8009984:	8029      	strh	r1, [r5, #0]
    top_area.x2 = coords->x2 - radius - aa;
 8009986:	80a8      	strh	r0, [r5, #4]
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 8009988:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800998a:	42a3      	cmp	r3, r4
 800998c:	da76      	bge.n	8009a7c <lv_draw_rect+0x454>
 800998e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009990:	3301      	adds	r3, #1
 8009992:	b21b      	sxth	r3, r3
 8009994:	9309      	str	r3, [sp, #36]	; 0x24
 8009996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009998:	3301      	adds	r3, #1
 800999a:	b29b      	uxth	r3, r3
 800999c:	930a      	str	r3, [sp, #40]	; 0x28
 800999e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099a0:	3b01      	subs	r3, #1
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	930c      	str	r3, [sp, #48]	; 0x30
 80099a6:	e721      	b.n	80097ec <lv_draw_rect+0x1c4>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 80099a8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80099aa:	429d      	cmp	r5, r3
 80099ac:	db22      	blt.n	80099f4 <lv_draw_rect+0x3cc>
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 80099ae:	9d06      	ldr	r5, [sp, #24]
 80099b0:	005b      	lsls	r3, r3, #1
 80099b2:	5b5b      	ldrh	r3, [r3, r5]
 80099b4:	8805      	ldrh	r5, [r0, #0]
 80099b6:	1b5b      	subs	r3, r3, r5
 80099b8:	e74e      	b.n	8009858 <lv_draw_rect+0x230>
                } else if(col_rel > swidth)
 80099ba:	9d07      	ldr	r5, [sp, #28]
 80099bc:	429d      	cmp	r5, r3
 80099be:	da06      	bge.n	80099ce <lv_draw_rect+0x3a6>
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
 80099c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	930d      	str	r3, [sp, #52]	; 0x34
 80099c6:	3201      	adds	r2, #1
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 80099c8:	18c9      	adds	r1, r1, r3
 80099ca:	b212      	sxth	r2, r2
 80099cc:	e00e      	b.n	80099ec <lv_draw_rect+0x3c4>
 80099ce:	9d07      	ldr	r5, [sp, #28]
 80099d0:	1aeb      	subs	r3, r5, r3
 80099d2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	595b      	ldr	r3, [r3, r5]
 80099d8:	e7f5      	b.n	80099c6 <lv_draw_rect+0x39e>
        for(col = 0; col <= radius + swidth; col++) { /*Check all pixels in a 1D blur line (from the origo to last
 80099da:	b293      	uxth	r3, r2
 80099dc:	9305      	str	r3, [sp, #20]
 80099de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099e0:	9a05      	ldr	r2, [sp, #20]
 80099e2:	4293      	cmp	r3, r2
 80099e4:	da00      	bge.n	80099e8 <lv_draw_rect+0x3c0>
 80099e6:	e74c      	b.n	8009882 <lv_draw_rect+0x25a>
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 80099e8:	0032      	movs	r2, r6
            uint32_t px_opa_sum = 0;
 80099ea:	2100      	movs	r1, #0
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 80099ec:	9b07      	ldr	r3, [sp, #28]
 80099ee:	4293      	cmp	r3, r2
 80099f0:	db00      	blt.n	80099f4 <lv_draw_rect+0x3cc>
 80099f2:	e72a      	b.n	800984a <lv_draw_rect+0x222>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 80099f4:	2300      	movs	r3, #0
 80099f6:	e739      	b.n	800986c <lv_draw_rect+0x244>
            if(point_lt.x < ofs_lt.x && point_lt.y < ofs_lt.y) {
 80099f8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80099fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80099fc:	4293      	cmp	r3, r2
 80099fe:	dd18      	ble.n	8009a32 <lv_draw_rect+0x40a>
 8009a00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a04:	4293      	cmp	r3, r2
 8009a06:	dd08      	ble.n	8009a1a <lv_draw_rect+0x3f2>
                lv_draw_px(point_lt.x, point_lt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8009a08:	782b      	ldrb	r3, [r5, #0]
 8009a0a:	9a03      	ldr	r2, [sp, #12]
 8009a0c:	9300      	str	r3, [sp, #0]
 8009a0e:	9b04      	ldr	r3, [sp, #16]
 8009a10:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009a12:	8a1b      	ldrh	r3, [r3, #16]
 8009a14:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009a16:	f7ff f862 	bl	8008ade <lv_draw_px>
            if(point_lb.x < ofs_lb.x && point_lb.y > ofs_lb.y) {
 8009a1a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009a1c:	42b3      	cmp	r3, r6
 8009a1e:	da08      	bge.n	8009a32 <lv_draw_rect+0x40a>
                lv_draw_px(point_lb.x, point_lb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8009a20:	782b      	ldrb	r3, [r5, #0]
 8009a22:	9a03      	ldr	r2, [sp, #12]
 8009a24:	9300      	str	r3, [sp, #0]
 8009a26:	9b04      	ldr	r3, [sp, #16]
 8009a28:	0031      	movs	r1, r6
 8009a2a:	8a1b      	ldrh	r3, [r3, #16]
 8009a2c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009a2e:	f7ff f856 	bl	8008ade <lv_draw_px>
            if(point_rt.x > ofs_rt.x && point_rt.y < ofs_rt.y) {
 8009a32:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a34:	42a3      	cmp	r3, r4
 8009a36:	da18      	bge.n	8009a6a <lv_draw_rect+0x442>
 8009a38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	dd08      	ble.n	8009a52 <lv_draw_rect+0x42a>
                lv_draw_px(point_rt.x, point_rt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8009a40:	782b      	ldrb	r3, [r5, #0]
 8009a42:	9a03      	ldr	r2, [sp, #12]
 8009a44:	9300      	str	r3, [sp, #0]
 8009a46:	9b04      	ldr	r3, [sp, #16]
 8009a48:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009a4a:	8a1b      	ldrh	r3, [r3, #16]
 8009a4c:	0020      	movs	r0, r4
 8009a4e:	f7ff f846 	bl	8008ade <lv_draw_px>
            if(point_rb.x > ofs_rb.x && point_rb.y > ofs_rb.y) {
 8009a52:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009a54:	42b3      	cmp	r3, r6
 8009a56:	da08      	bge.n	8009a6a <lv_draw_rect+0x442>
                lv_draw_px(point_rb.x, point_rb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 8009a58:	782b      	ldrb	r3, [r5, #0]
 8009a5a:	9a03      	ldr	r2, [sp, #12]
 8009a5c:	9300      	str	r3, [sp, #0]
 8009a5e:	9b04      	ldr	r3, [sp, #16]
 8009a60:	0031      	movs	r1, r6
 8009a62:	8a1b      	ldrh	r3, [r3, #16]
 8009a64:	0020      	movs	r0, r4
 8009a66:	f7ff f83a 	bl	8008ade <lv_draw_px>
 8009a6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
            point_rt.x++;
 8009a6c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	3401      	adds	r4, #1
 8009a74:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a76:	3501      	adds	r5, #1
 8009a78:	b224      	sxth	r4, r4
 8009a7a:	e719      	b.n	80098b0 <lv_draw_rect+0x288>
        opa_act = map[d];
 8009a7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 8009a7e:	9a04      	ldr	r2, [sp, #16]
        opa_act = map[d];
 8009a80:	5d1e      	ldrb	r6, [r3, r4]
        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 8009a82:	ad22      	add	r5, sp, #136	; 0x88
 8009a84:	0028      	movs	r0, r5
 8009a86:	0033      	movs	r3, r6
 8009a88:	8a12      	ldrh	r2, [r2, #16]
 8009a8a:	9903      	ldr	r1, [sp, #12]
 8009a8c:	f7ff f870 	bl	8008b70 <lv_draw_fill>
        right_area.x1++;
 8009a90:	882b      	ldrh	r3, [r5, #0]
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 8009a92:	9a04      	ldr	r2, [sp, #16]
        right_area.x1++;
 8009a94:	3301      	adds	r3, #1
 8009a96:	802b      	strh	r3, [r5, #0]
        right_area.x2++;
 8009a98:	88ab      	ldrh	r3, [r5, #4]
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 8009a9a:	9903      	ldr	r1, [sp, #12]
        right_area.x2++;
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	80ab      	strh	r3, [r5, #4]
        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 8009aa0:	ad24      	add	r5, sp, #144	; 0x90
 8009aa2:	0028      	movs	r0, r5
 8009aa4:	0033      	movs	r3, r6
 8009aa6:	8a12      	ldrh	r2, [r2, #16]
 8009aa8:	f7ff f862 	bl	8008b70 <lv_draw_fill>
        left_area.x1--;
 8009aac:	882b      	ldrh	r3, [r5, #0]
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 8009aae:	9a04      	ldr	r2, [sp, #16]
        left_area.x1--;
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	802b      	strh	r3, [r5, #0]
        left_area.x2--;
 8009ab4:	88ab      	ldrh	r3, [r5, #4]
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 8009ab6:	9903      	ldr	r1, [sp, #12]
        left_area.x2--;
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	80ab      	strh	r3, [r5, #4]
        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 8009abc:	ad26      	add	r5, sp, #152	; 0x98
 8009abe:	0028      	movs	r0, r5
 8009ac0:	0033      	movs	r3, r6
 8009ac2:	8a12      	ldrh	r2, [r2, #16]
 8009ac4:	f7ff f854 	bl	8008b70 <lv_draw_fill>
        top_area.y1--;
 8009ac8:	886b      	ldrh	r3, [r5, #2]
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 8009aca:	9a04      	ldr	r2, [sp, #16]
        top_area.y1--;
 8009acc:	3b01      	subs	r3, #1
 8009ace:	806b      	strh	r3, [r5, #2]
        top_area.y2--;
 8009ad0:	88eb      	ldrh	r3, [r5, #6]
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 8009ad2:	9903      	ldr	r1, [sp, #12]
        top_area.y2--;
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	80eb      	strh	r3, [r5, #6]
        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 8009ad8:	ad28      	add	r5, sp, #160	; 0xa0
 8009ada:	0033      	movs	r3, r6
 8009adc:	8a12      	ldrh	r2, [r2, #16]
 8009ade:	0028      	movs	r0, r5
 8009ae0:	f7ff f846 	bl	8008b70 <lv_draw_fill>
        bottom_area.y1++;
 8009ae4:	886b      	ldrh	r3, [r5, #2]
 8009ae6:	3401      	adds	r4, #1
 8009ae8:	3301      	adds	r3, #1
 8009aea:	806b      	strh	r3, [r5, #2]
        bottom_area.y2++;
 8009aec:	88eb      	ldrh	r3, [r5, #6]
 8009aee:	b224      	sxth	r4, r4
 8009af0:	3301      	adds	r3, #1
 8009af2:	80eb      	strh	r3, [r5, #6]
 8009af4:	e748      	b.n	8009988 <lv_draw_rect+0x360>
    } else if(style->body.shadow.type == LV_SHADOW_BOTTOM) {
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d000      	beq.n	8009afc <lv_draw_rect+0x4d4>
 8009afa:	e07f      	b.n	8009bfc <lv_draw_rect+0x5d4>
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009afc:	f7fe f91a 	bl	8007d34 <lv_refr_get_disp_refreshing>
 8009b00:	f002 f9b4 	bl	800be6c <lv_disp_get_antialiasing>
 8009b04:	0006      	movs	r6, r0
    lv_coord_t swidth = style->body.shadow.width;
 8009b06:	9b04      	ldr	r3, [sp, #16]
    return area_p->y2 - area_p->y1 + 1;
 8009b08:	88fa      	ldrh	r2, [r7, #6]
 8009b0a:	2512      	movs	r5, #18
 8009b0c:	5f5d      	ldrsh	r5, [r3, r5]
 8009b0e:	887b      	ldrh	r3, [r7, #2]
    return area_p->x2 - area_p->x1 + 1;
 8009b10:	88b9      	ldrh	r1, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8009b12:	3201      	adds	r2, #1
 8009b14:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 8009b16:	883b      	ldrh	r3, [r7, #0]
 8009b18:	3101      	adds	r1, #1
 8009b1a:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009b1c:	9b04      	ldr	r3, [sp, #16]
 8009b1e:	b209      	sxth	r1, r1
 8009b20:	b212      	sxth	r2, r2
 8009b22:	88d8      	ldrh	r0, [r3, #6]
 8009b24:	f7ff fd3e 	bl	80095a4 <lv_draw_cont_radius_corr>
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 8009b28:	b2b3      	uxth	r3, r6
 8009b2a:	9308      	str	r3, [sp, #32]
 8009b2c:	2303      	movs	r3, #3
 8009b2e:	9c08      	ldr	r4, [sp, #32]
 8009b30:	435c      	muls	r4, r3
 8009b32:	1904      	adds	r4, r0, r4
 8009b34:	b2a4      	uxth	r4, r4
 8009b36:	b222      	sxth	r2, r4
 8009b38:	9209      	str	r2, [sp, #36]	; 0x24
    swidth += aa;
 8009b3a:	9a08      	ldr	r2, [sp, #32]
 8009b3c:	1955      	adds	r5, r2, r5
 8009b3e:	b2a8      	uxth	r0, r5
 8009b40:	b202      	sxth	r2, r0
 8009b42:	9205      	str	r2, [sp, #20]
    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 8009b44:	9a09      	ldr	r2, [sp, #36]	; 0x24
    lv_opa_t line_1d_blur_size = (swidth + 3) & ~0x3;     /*Round to 4*/
 8009b46:	18c0      	adds	r0, r0, r3
    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 8009b48:	1d15      	adds	r5, r2, #4
 8009b4a:	439d      	bics	r5, r3
    lv_opa_t line_1d_blur_size = (swidth + 3) & ~0x3;     /*Round to 4*/
 8009b4c:	4398      	bics	r0, r3
    curve_x_size *= sizeof(lv_coord_t);
 8009b4e:	006d      	lsls	r5, r5, #1
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 8009b50:	b2c0      	uxtb	r0, r0
 8009b52:	1940      	adds	r0, r0, r5
 8009b54:	f7fe febc 	bl	80088d0 <lv_draw_get_buf>
    lv_circ_init(&circ, &circ_tmp, radius);
 8009b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
    lv_opa_t * line_1d_blur = (lv_opa_t *)&draw_buf[curve_x_size];
 8009b5a:	1943      	adds	r3, r0, r5
    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 8009b5c:	9006      	str	r0, [sp, #24]
    lv_circ_init(&circ, &circ_tmp, radius);
 8009b5e:	a924      	add	r1, sp, #144	; 0x90
 8009b60:	a826      	add	r0, sp, #152	; 0x98
    lv_opa_t * line_1d_blur = (lv_opa_t *)&draw_buf[curve_x_size];
 8009b62:	9307      	str	r3, [sp, #28]
    lv_circ_init(&circ, &circ_tmp, radius);
 8009b64:	f002 fba4 	bl	800c2b0 <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 8009b68:	ad26      	add	r5, sp, #152	; 0x98
 8009b6a:	0028      	movs	r0, r5
 8009b6c:	f002 fba7 	bl	800c2be <lv_circ_cont>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d001      	beq.n	8009b78 <lv_draw_rect+0x550>
 8009b74:	f000 fbdb 	bl	800a32e <lv_draw_rect+0xd06>
 8009b78:	9b04      	ldr	r3, [sp, #16]
 8009b7a:	7a1d      	ldrb	r5, [r3, #8]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8009b7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b7e:	2bff      	cmp	r3, #255	; 0xff
 8009b80:	d001      	beq.n	8009b86 <lv_draw_rect+0x55e>
 8009b82:	435d      	muls	r5, r3
 8009b84:	0a2d      	lsrs	r5, r5, #8
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
 8009b86:	2600      	movs	r6, #0
 8009b88:	9b05      	ldr	r3, [sp, #20]
 8009b8a:	436b      	muls	r3, r5
 8009b8c:	930a      	str	r3, [sp, #40]	; 0x28
    for(col = 0; col < swidth; col++) {
 8009b8e:	9a05      	ldr	r2, [sp, #20]
 8009b90:	b233      	sxth	r3, r6
 8009b92:	429a      	cmp	r2, r3
 8009b94:	dd01      	ble.n	8009b9a <lv_draw_rect+0x572>
 8009b96:	f000 fbde 	bl	800a356 <lv_draw_rect+0xd2e>
    ofs_l.x = coords->x1 + radius;
 8009b9a:	883b      	ldrh	r3, [r7, #0]
 8009b9c:	18e3      	adds	r3, r4, r3
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	930a      	str	r3, [sp, #40]	; 0x28
 8009ba2:	466b      	mov	r3, sp
 8009ba4:	2228      	movs	r2, #40	; 0x28
 8009ba6:	5e9b      	ldrsh	r3, [r3, r2]
 8009ba8:	9a08      	ldr	r2, [sp, #32]
 8009baa:	9310      	str	r3, [sp, #64]	; 0x40
 8009bac:	88fb      	ldrh	r3, [r7, #6]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	1a9b      	subs	r3, r3, r2
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	930c      	str	r3, [sp, #48]	; 0x30
    ofs_l.y = coords->y2 - radius + 1 - aa;
 8009bb6:	1b1b      	subs	r3, r3, r4
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	9311      	str	r3, [sp, #68]	; 0x44
    ofs_r.x = coords->x2 - radius;
 8009bbc:	88b8      	ldrh	r0, [r7, #4]
 8009bbe:	1b04      	subs	r4, r0, r4
 8009bc0:	b2a3      	uxth	r3, r4
 8009bc2:	930d      	str	r3, [sp, #52]	; 0x34
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	9308      	str	r3, [sp, #32]
 8009bc8:	466b      	mov	r3, sp
 8009bca:	2120      	movs	r1, #32
 8009bcc:	5e59      	ldrsh	r1, [r3, r1]
    for(col = 0; col <= radius; col++) {
 8009bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bd0:	428b      	cmp	r3, r1
 8009bd2:	db01      	blt.n	8009bd8 <lv_draw_rect+0x5b0>
 8009bd4:	f000 fbcc 	bl	800a370 <lv_draw_rect+0xd48>
    area_mid.x1 = ofs_l.x + 1;
 8009bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bda:	aa28      	add	r2, sp, #160	; 0xa0
 8009bdc:	3301      	adds	r3, #1
 8009bde:	8013      	strh	r3, [r2, #0]
    area_mid.x2 = ofs_r.x - 1;
 8009be0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    area_mid.y1 = ofs_l.y + radius;
 8009be2:	466b      	mov	r3, sp
    area_mid.x2 = ofs_r.x - 1;
 8009be4:	3c01      	subs	r4, #1
 8009be6:	8094      	strh	r4, [r2, #4]
    for(d = 0; d < swidth; d++) {
 8009be8:	2400      	movs	r4, #0
    area_mid.y1 = ofs_l.y + radius;
 8009bea:	2130      	movs	r1, #48	; 0x30
 8009bec:	5e5b      	ldrsh	r3, [r3, r1]
 8009bee:	8053      	strh	r3, [r2, #2]
    area_mid.y2 = area_mid.y1;
 8009bf0:	80d3      	strh	r3, [r2, #6]
    for(d = 0; d < swidth; d++) {
 8009bf2:	9b05      	ldr	r3, [sp, #20]
 8009bf4:	429c      	cmp	r4, r3
 8009bf6:	da01      	bge.n	8009bfc <lv_draw_rect+0x5d4>
 8009bf8:	f000 fc00 	bl	800a3fc <lv_draw_rect+0xdd4>
    if(lv_area_is_on(coords, mask) == false) return;
 8009bfc:	9903      	ldr	r1, [sp, #12]
 8009bfe:	0038      	movs	r0, r7
 8009c00:	f002 fb18 	bl	800c234 <lv_area_is_on>
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d100      	bne.n	8009c0a <lv_draw_rect+0x5e2>
 8009c08:	e38f      	b.n	800a32a <lv_draw_rect+0xd02>
    if(style->body.opa > LV_OPA_MIN) {
 8009c0a:	9b04      	ldr	r3, [sp, #16]
 8009c0c:	7a1b      	ldrb	r3, [r3, #8]
 8009c0e:	2b10      	cmp	r3, #16
 8009c10:	d800      	bhi.n	8009c14 <lv_draw_rect+0x5ec>
 8009c12:	e1e7      	b.n	8009fe4 <lv_draw_rect+0x9bc>
    uint16_t radius = style->body.radius;
 8009c14:	9b04      	ldr	r3, [sp, #16]
 8009c16:	88dc      	ldrh	r4, [r3, #6]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009c18:	f7fe f88c 	bl	8007d34 <lv_refr_get_disp_refreshing>
 8009c1c:	f002 f926 	bl	800be6c <lv_disp_get_antialiasing>
    lv_color_t mcolor = style->body.main_color;
 8009c20:	9b04      	ldr	r3, [sp, #16]
    return area_p->y2 - area_p->y1 + 1;
 8009c22:	887a      	ldrh	r2, [r7, #2]
 8009c24:	885b      	ldrh	r3, [r3, #2]
    return area_p->x2 - area_p->x1 + 1;
 8009c26:	88b9      	ldrh	r1, [r7, #4]
 8009c28:	9305      	str	r3, [sp, #20]
    lv_color_t gcolor = style->body.grad_color;
 8009c2a:	9b04      	ldr	r3, [sp, #16]
 8009c2c:	3101      	adds	r1, #1
 8009c2e:	889b      	ldrh	r3, [r3, #4]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009c30:	0005      	movs	r5, r0
    lv_color_t gcolor = style->body.grad_color;
 8009c32:	9307      	str	r3, [sp, #28]
    return area_p->y2 - area_p->y1 + 1;
 8009c34:	88fb      	ldrh	r3, [r7, #6]
 8009c36:	3301      	adds	r3, #1
 8009c38:	1a9b      	subs	r3, r3, r2
 8009c3a:	b21e      	sxth	r6, r3
    return area_p->x2 - area_p->x1 + 1;
 8009c3c:	883b      	ldrh	r3, [r7, #0]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8009c3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c40:	1ac9      	subs	r1, r1, r3
 8009c42:	9b04      	ldr	r3, [sp, #16]
 8009c44:	b209      	sxth	r1, r1
 8009c46:	7a1b      	ldrb	r3, [r3, #8]
 8009c48:	2aff      	cmp	r2, #255	; 0xff
 8009c4a:	d001      	beq.n	8009c50 <lv_draw_rect+0x628>
 8009c4c:	f000 fbe9 	bl	800a422 <lv_draw_rect+0xdfa>
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009c50:	0032      	movs	r2, r6
 8009c52:	0020      	movs	r0, r4
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8009c54:	9306      	str	r3, [sp, #24]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009c56:	f7ff fca5 	bl	80095a4 <lv_draw_cont_radius_corr>
    if(radius > height / 2) return;
 8009c5a:	0ff3      	lsrs	r3, r6, #31
 8009c5c:	199b      	adds	r3, r3, r6
 8009c5e:	105b      	asrs	r3, r3, #1
 8009c60:	4298      	cmp	r0, r3
 8009c62:	dc29      	bgt.n	8009cb8 <lv_draw_rect+0x690>
    work_area.x1 = coords->x1;
 8009c64:	883b      	ldrh	r3, [r7, #0]
 8009c66:	aa28      	add	r2, sp, #160	; 0xa0
 8009c68:	8013      	strh	r3, [r2, #0]
    work_area.x2 = coords->x2;
 8009c6a:	88bb      	ldrh	r3, [r7, #4]
 8009c6c:	9904      	ldr	r1, [sp, #16]
 8009c6e:	8093      	strh	r3, [r2, #4]
 8009c70:	887b      	ldrh	r3, [r7, #2]
 8009c72:	88fc      	ldrh	r4, [r7, #6]
 8009c74:	9308      	str	r3, [sp, #32]
 8009c76:	2306      	movs	r3, #6
 8009c78:	5ec9      	ldrsh	r1, [r1, r3]
    if(mcolor.full == gcolor.full) {
 8009c7a:	9b05      	ldr	r3, [sp, #20]
 8009c7c:	469c      	mov	ip, r3
 8009c7e:	9b07      	ldr	r3, [sp, #28]
 8009c80:	459c      	cmp	ip, r3
 8009c82:	d001      	beq.n	8009c88 <lv_draw_rect+0x660>
 8009c84:	f000 fbd7 	bl	800a436 <lv_draw_rect+0xe0e>
        work_area.y1 = coords->y1 + radius;
 8009c88:	9b08      	ldr	r3, [sp, #32]
        work_area.y2 = coords->y2 - radius;
 8009c8a:	1a24      	subs	r4, r4, r0
        work_area.y1 = coords->y1 + radius;
 8009c8c:	18c3      	adds	r3, r0, r3
 8009c8e:	b29b      	uxth	r3, r3
        work_area.y2 = coords->y2 - radius;
 8009c90:	b2a4      	uxth	r4, r4
        work_area.y1 = coords->y1 + radius;
 8009c92:	8053      	strh	r3, [r2, #2]
        work_area.y2 = coords->y2 - radius;
 8009c94:	80d4      	strh	r4, [r2, #6]
        if(style->body.radius != 0) {
 8009c96:	2900      	cmp	r1, #0
 8009c98:	d007      	beq.n	8009caa <lv_draw_rect+0x682>
            if(aa) {
 8009c9a:	2d00      	cmp	r5, #0
 8009c9c:	d101      	bne.n	8009ca2 <lv_draw_rect+0x67a>
 8009c9e:	f000 fbc5 	bl	800a42c <lv_draw_rect+0xe04>
                work_area.y1 += 2;
 8009ca2:	3302      	adds	r3, #2
 8009ca4:	8053      	strh	r3, [r2, #2]
                work_area.y2 -= 2;
 8009ca6:	3c02      	subs	r4, #2
                work_area.y2 -= 1;
 8009ca8:	80d4      	strh	r4, [r2, #6]
        lv_draw_fill(&work_area, mask, mcolor, opa);
 8009caa:	466a      	mov	r2, sp
 8009cac:	9b06      	ldr	r3, [sp, #24]
 8009cae:	8a92      	ldrh	r2, [r2, #20]
 8009cb0:	9903      	ldr	r1, [sp, #12]
 8009cb2:	a828      	add	r0, sp, #160	; 0xa0
 8009cb4:	f7fe ff5c 	bl	8008b70 <lv_draw_fill>
        if(style->body.radius != 0) {
 8009cb8:	9b04      	ldr	r3, [sp, #16]
 8009cba:	2406      	movs	r4, #6
 8009cbc:	5f1c      	ldrsh	r4, [r3, r4]
 8009cbe:	2c00      	cmp	r4, #0
 8009cc0:	d100      	bne.n	8009cc4 <lv_draw_rect+0x69c>
 8009cc2:	e18f      	b.n	8009fe4 <lv_draw_rect+0x9bc>
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009cc4:	f7fe f836 	bl	8007d34 <lv_refr_get_disp_refreshing>
 8009cc8:	f002 f8d0 	bl	800be6c <lv_disp_get_antialiasing>
    lv_color_t mcolor = style->body.main_color;
 8009ccc:	9b04      	ldr	r3, [sp, #16]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8009cce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    lv_color_t mcolor = style->body.main_color;
 8009cd0:	885b      	ldrh	r3, [r3, #2]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009cd2:	9018      	str	r0, [sp, #96]	; 0x60
    lv_color_t mcolor = style->body.main_color;
 8009cd4:	9305      	str	r3, [sp, #20]
    lv_color_t gcolor = style->body.grad_color;
 8009cd6:	9b04      	ldr	r3, [sp, #16]
    uint16_t radius = style->body.radius;
 8009cd8:	b2a4      	uxth	r4, r4
    lv_color_t gcolor = style->body.grad_color;
 8009cda:	889b      	ldrh	r3, [r3, #4]
 8009cdc:	9306      	str	r3, [sp, #24]
 8009cde:	9b04      	ldr	r3, [sp, #16]
 8009ce0:	7a1b      	ldrb	r3, [r3, #8]
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8009ce2:	2aff      	cmp	r2, #255	; 0xff
 8009ce4:	d001      	beq.n	8009cea <lv_draw_rect+0x6c2>
 8009ce6:	f000 fbdb 	bl	800a4a0 <lv_draw_rect+0xe78>
 8009cea:	9307      	str	r3, [sp, #28]
    return area_p->y2 - area_p->y1 + 1;
 8009cec:	88fb      	ldrh	r3, [r7, #6]
 8009cee:	887a      	ldrh	r2, [r7, #2]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	1a9b      	subs	r3, r3, r2
 8009cf4:	b21b      	sxth	r3, r3
    return area_p->x2 - area_p->x1 + 1;
 8009cf6:	88b9      	ldrh	r1, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8009cf8:	9308      	str	r3, [sp, #32]
    return area_p->x2 - area_p->x1 + 1;
 8009cfa:	883b      	ldrh	r3, [r7, #0]
 8009cfc:	3101      	adds	r1, #1
 8009cfe:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009d00:	b209      	sxth	r1, r1
 8009d02:	9a08      	ldr	r2, [sp, #32]
 8009d04:	0020      	movs	r0, r4
 8009d06:	f7ff fc4d 	bl	80095a4 <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + aa;
 8009d0a:	2260      	movs	r2, #96	; 0x60
 8009d0c:	466b      	mov	r3, sp
 8009d0e:	189b      	adds	r3, r3, r2
 8009d10:	881b      	ldrh	r3, [r3, #0]
 8009d12:	883e      	ldrh	r6, [r7, #0]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 8009d14:	900c      	str	r0, [sp, #48]	; 0x30
    lt_origo.x = coords->x1 + radius + aa;
 8009d16:	199e      	adds	r6, r3, r6
 8009d18:	1986      	adds	r6, r0, r6
 8009d1a:	b2b2      	uxth	r2, r6
 8009d1c:	9209      	str	r2, [sp, #36]	; 0x24
    lt_origo.y = coords->y1 + radius + aa;
 8009d1e:	887c      	ldrh	r4, [r7, #2]
 8009d20:	191c      	adds	r4, r3, r4
 8009d22:	1904      	adds	r4, r0, r4
 8009d24:	b2a2      	uxth	r2, r4
 8009d26:	920d      	str	r2, [sp, #52]	; 0x34
 8009d28:	466a      	mov	r2, sp
 8009d2a:	2134      	movs	r1, #52	; 0x34
 8009d2c:	5e52      	ldrsh	r2, [r2, r1]
    lv_circ_init(&cir, &cir_tmp, radius);
 8009d2e:	ac20      	add	r4, sp, #128	; 0x80
    lt_origo.y = coords->y1 + radius + aa;
 8009d30:	9219      	str	r2, [sp, #100]	; 0x64
    lb_origo.y = coords->y2 - radius - aa;
 8009d32:	88fa      	ldrh	r2, [r7, #6]
 8009d34:	1a12      	subs	r2, r2, r0
 8009d36:	1ad2      	subs	r2, r2, r3
 8009d38:	b292      	uxth	r2, r2
 8009d3a:	920e      	str	r2, [sp, #56]	; 0x38
 8009d3c:	466a      	mov	r2, sp
 8009d3e:	2138      	movs	r1, #56	; 0x38
 8009d40:	5e52      	ldrsh	r2, [r2, r1]
    lv_circ_init(&cir, &cir_tmp, radius);
 8009d42:	a91f      	add	r1, sp, #124	; 0x7c
    lb_origo.y = coords->y2 - radius - aa;
 8009d44:	921a      	str	r2, [sp, #104]	; 0x68
    rt_origo.x = coords->x2 - radius - aa;
 8009d46:	88bd      	ldrh	r5, [r7, #4]
 8009d48:	1a2d      	subs	r5, r5, r0
 8009d4a:	1aeb      	subs	r3, r5, r3
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	930a      	str	r3, [sp, #40]	; 0x28
    lv_circ_init(&cir, &cir_tmp, radius);
 8009d50:	466b      	mov	r3, sp
 8009d52:	2230      	movs	r2, #48	; 0x30
 8009d54:	5e9b      	ldrsh	r3, [r3, r2]
 8009d56:	0020      	movs	r0, r4
 8009d58:	001a      	movs	r2, r3
 8009d5a:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d5c:	f002 faa8 	bl	800c2b0 <lv_circ_init>
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8009d60:	8862      	ldrh	r2, [r4, #2]
 8009d62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d64:	8821      	ldrh	r1, [r4, #0]
 8009d66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d68:	189a      	adds	r2, r3, r2
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 8009d6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8009d6c:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 8009d6e:	185b      	adds	r3, r3, r1
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8009d70:	1a41      	subs	r1, r0, r1
 8009d72:	b21b      	sxth	r3, r3
 8009d74:	b209      	sxth	r1, r1
 8009d76:	9200      	str	r2, [sp, #0]
 8009d78:	a826      	add	r0, sp, #152	; 0x98
 8009d7a:	f002 f9e9 	bl	800c150 <lv_area_set>
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8009d7e:	8822      	ldrh	r2, [r4, #0]
 8009d80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d82:	8861      	ldrh	r1, [r4, #2]
 8009d84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d86:	189a      	adds	r2, r3, r2
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 8009d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8009d8a:	b212      	sxth	r2, r2
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 8009d8c:	185b      	adds	r3, r3, r1
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8009d8e:	1a41      	subs	r1, r0, r1
 8009d90:	b21b      	sxth	r3, r3
 8009d92:	b209      	sxth	r1, r1
 8009d94:	9200      	str	r2, [sp, #0]
 8009d96:	a828      	add	r0, sp, #160	; 0xa0
 8009d98:	f002 f9da 	bl	800c150 <lv_area_set>
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8009d9c:	8862      	ldrh	r2, [r4, #2]
 8009d9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009da0:	8821      	ldrh	r1, [r4, #0]
 8009da2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009da4:	1a9a      	subs	r2, r3, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 8009da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8009da8:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 8009daa:	185b      	adds	r3, r3, r1
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8009dac:	1a41      	subs	r1, r0, r1
 8009dae:	b21b      	sxth	r3, r3
 8009db0:	b209      	sxth	r1, r1
 8009db2:	9200      	str	r2, [sp, #0]
 8009db4:	a824      	add	r0, sp, #144	; 0x90
 8009db6:	f002 f9cb 	bl	800c150 <lv_area_set>
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8009dba:	8822      	ldrh	r2, [r4, #0]
 8009dbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dbe:	8861      	ldrh	r1, [r4, #2]
 8009dc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dc2:	1a9a      	subs	r2, r3, r2
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 8009dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8009dc6:	b212      	sxth	r2, r2
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 8009dc8:	185b      	adds	r3, r3, r1
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8009dca:	1a41      	subs	r1, r0, r1
 8009dcc:	b21b      	sxth	r3, r3
 8009dce:	b209      	sxth	r1, r1
 8009dd0:	9200      	str	r2, [sp, #0]
 8009dd2:	a822      	add	r0, sp, #136	; 0x88
 8009dd4:	f002 f9bc 	bl	800c150 <lv_area_set>
    lv_coord_t out_y_seg_start = 0;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	9310      	str	r3, [sp, #64]	; 0x40
    while(lv_circ_cont(&cir)) {
 8009ddc:	ac20      	add	r4, sp, #128	; 0x80
 8009dde:	0020      	movs	r0, r4
 8009de0:	f002 fa6d 	bl	800c2be <lv_circ_cont>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	d000      	beq.n	8009dea <lv_draw_rect+0x7c2>
 8009de8:	e35f      	b.n	800a4aa <lv_draw_rect+0xe82>
    if(mcolor.full == gcolor.full)
 8009dea:	9b05      	ldr	r3, [sp, #20]
 8009dec:	9a06      	ldr	r2, [sp, #24]
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d001      	beq.n	8009df6 <lv_draw_rect+0x7ce>
 8009df2:	f000 fd10 	bl	800a816 <lv_draw_rect+0x11ee>
        act_color = mcolor;
 8009df6:	466b      	mov	r3, sp
 8009df8:	8a9a      	ldrh	r2, [r3, #20]
    lv_draw_fill(&edge_top_area, mask, act_color, opa);
 8009dfa:	ac22      	add	r4, sp, #136	; 0x88
 8009dfc:	9b07      	ldr	r3, [sp, #28]
 8009dfe:	9903      	ldr	r1, [sp, #12]
 8009e00:	0020      	movs	r0, r4
 8009e02:	f7fe feb5 	bl	8008b70 <lv_draw_fill>
    if(edge_top_area.y1 != mid_top_area.y1) {
 8009e06:	ab24      	add	r3, sp, #144	; 0x90
 8009e08:	2202      	movs	r2, #2
 8009e0a:	5e9b      	ldrsh	r3, [r3, r2]
 8009e0c:	2102      	movs	r1, #2
 8009e0e:	5e62      	ldrsh	r2, [r4, r1]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d00c      	beq.n	8009e2e <lv_draw_rect+0x806>
        if(mcolor.full == gcolor.full)
 8009e14:	9a05      	ldr	r2, [sp, #20]
 8009e16:	9906      	ldr	r1, [sp, #24]
 8009e18:	428a      	cmp	r2, r1
 8009e1a:	d001      	beq.n	8009e20 <lv_draw_rect+0x7f8>
 8009e1c:	f000 fd0f 	bl	800a83e <lv_draw_rect+0x1216>
            act_color = mcolor;
 8009e20:	466b      	mov	r3, sp
 8009e22:	8a9a      	ldrh	r2, [r3, #20]
        lv_draw_fill(&mid_top_area, mask, act_color, opa);
 8009e24:	9b07      	ldr	r3, [sp, #28]
 8009e26:	9903      	ldr	r1, [sp, #12]
 8009e28:	a824      	add	r0, sp, #144	; 0x90
 8009e2a:	f7fe fea1 	bl	8008b70 <lv_draw_fill>
    if(mcolor.full == gcolor.full)
 8009e2e:	9b05      	ldr	r3, [sp, #20]
 8009e30:	9a06      	ldr	r2, [sp, #24]
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d001      	beq.n	8009e3a <lv_draw_rect+0x812>
 8009e36:	f000 fd13 	bl	800a860 <lv_draw_rect+0x1238>
        act_color = mcolor;
 8009e3a:	466b      	mov	r3, sp
 8009e3c:	8a9a      	ldrh	r2, [r3, #20]
    lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 8009e3e:	ac26      	add	r4, sp, #152	; 0x98
 8009e40:	9b07      	ldr	r3, [sp, #28]
 8009e42:	9903      	ldr	r1, [sp, #12]
 8009e44:	0020      	movs	r0, r4
 8009e46:	f7fe fe93 	bl	8008b70 <lv_draw_fill>
    if(edge_bot_area.y1 != mid_bot_area.y1) {
 8009e4a:	ab28      	add	r3, sp, #160	; 0xa0
 8009e4c:	2202      	movs	r2, #2
 8009e4e:	5e9b      	ldrsh	r3, [r3, r2]
 8009e50:	2102      	movs	r1, #2
 8009e52:	5e62      	ldrsh	r2, [r4, r1]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d00c      	beq.n	8009e72 <lv_draw_rect+0x84a>
        if(mcolor.full == gcolor.full)
 8009e58:	9a05      	ldr	r2, [sp, #20]
 8009e5a:	9906      	ldr	r1, [sp, #24]
 8009e5c:	428a      	cmp	r2, r1
 8009e5e:	d001      	beq.n	8009e64 <lv_draw_rect+0x83c>
 8009e60:	f000 fd12 	bl	800a888 <lv_draw_rect+0x1260>
            act_color = mcolor;
 8009e64:	466b      	mov	r3, sp
 8009e66:	8a9a      	ldrh	r2, [r3, #20]
        lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 8009e68:	9b07      	ldr	r3, [sp, #28]
 8009e6a:	9903      	ldr	r1, [sp, #12]
 8009e6c:	a828      	add	r0, sp, #160	; 0xa0
 8009e6e:	f7fe fe7f 	bl	8008b70 <lv_draw_fill>
    if(aa) {
 8009e72:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d100      	bne.n	8009e7a <lv_draw_rect+0x852>
 8009e78:	e0b4      	b.n	8009fe4 <lv_draw_rect+0x9bc>
        edge_top_area.x1 = coords->x1 + radius + 2;
 8009e7a:	883b      	ldrh	r3, [r7, #0]
 8009e7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e7e:	3302      	adds	r3, #2
 8009e80:	ac22      	add	r4, sp, #136	; 0x88
 8009e82:	18d3      	adds	r3, r2, r3
 8009e84:	8023      	strh	r3, [r4, #0]
        edge_top_area.x2 = coords->x2 - radius - 2;
 8009e86:	88bb      	ldrh	r3, [r7, #4]
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 8009e88:	0020      	movs	r0, r4
        edge_top_area.x2 = coords->x2 - radius - 2;
 8009e8a:	3b02      	subs	r3, #2
 8009e8c:	1a9b      	subs	r3, r3, r2
 8009e8e:	80a3      	strh	r3, [r4, #4]
        edge_top_area.y1 = coords->y1;
 8009e90:	2202      	movs	r2, #2
 8009e92:	5ebb      	ldrsh	r3, [r7, r2]
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 8009e94:	9a04      	ldr	r2, [sp, #16]
        edge_top_area.y1 = coords->y1;
 8009e96:	8063      	strh	r3, [r4, #2]
        edge_top_area.y2 = coords->y1;
 8009e98:	80e3      	strh	r3, [r4, #6]
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 8009e9a:	8852      	ldrh	r2, [r2, #2]
 8009e9c:	9b07      	ldr	r3, [sp, #28]
 8009e9e:	9903      	ldr	r1, [sp, #12]
 8009ea0:	f7fe fe66 	bl	8008b70 <lv_draw_fill>
        edge_top_area.y1 = coords->y2;
 8009ea4:	2206      	movs	r2, #6
 8009ea6:	5ebb      	ldrsh	r3, [r7, r2]
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 8009ea8:	9a04      	ldr	r2, [sp, #16]
        edge_top_area.y1 = coords->y2;
 8009eaa:	8063      	strh	r3, [r4, #2]
        edge_top_area.y2 = coords->y2;
 8009eac:	80e3      	strh	r3, [r4, #6]
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 8009eae:	0020      	movs	r0, r4
 8009eb0:	9b07      	ldr	r3, [sp, #28]
 8009eb2:	8892      	ldrh	r2, [r2, #4]
 8009eb4:	9903      	ldr	r1, [sp, #12]
 8009eb6:	f7fe fe5b 	bl	8008b70 <lv_draw_fill>
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8009eba:	2240      	movs	r2, #64	; 0x40
 8009ebc:	466b      	mov	r3, sp
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 8009ebe:	25ff      	movs	r5, #255	; 0xff
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8009ec0:	189b      	adds	r3, r3, r2
 8009ec2:	881b      	ldrh	r3, [r3, #0]
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 8009ec4:	9908      	ldr	r1, [sp, #32]
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8009ec6:	9313      	str	r3, [sp, #76]	; 0x4c
        out_y_seg_end       = cir.y;
 8009ec8:	ab20      	add	r3, sp, #128	; 0x80
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8009eca:	885b      	ldrh	r3, [r3, #2]
 8009ecc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009ece:	1a9b      	subs	r3, r3, r2
 8009ed0:	b21b      	sxth	r3, r3
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 8009ed2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8009ed4:	9316      	str	r3, [sp, #88]	; 0x58
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 8009ed6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ed8:	1a98      	subs	r0, r3, r2
 8009eda:	4368      	muls	r0, r5
 8009edc:	f7f6 f940 	bl	8000160 <__udivsi3>
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 8009ee0:	466b      	mov	r3, sp
        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 8009ee2:	b2c4      	uxtb	r4, r0
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 8009ee4:	0022      	movs	r2, r4
 8009ee6:	8a99      	ldrh	r1, [r3, #20]
 8009ee8:	8b18      	ldrh	r0, [r3, #24]
 8009eea:	f7ff fb35 	bl	8009558 <lv_color_mix>
 8009eee:	2248      	movs	r2, #72	; 0x48
 8009ef0:	466b      	mov	r3, sp
 8009ef2:	189b      	adds	r3, r3, r2
 8009ef4:	8018      	strh	r0, [r3, #0]
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 8009ef6:	466b      	mov	r3, sp
 8009ef8:	0022      	movs	r2, r4
 8009efa:	8b19      	ldrh	r1, [r3, #24]
 8009efc:	8a98      	ldrh	r0, [r3, #20]
 8009efe:	f7ff fb2b 	bl	8009558 <lv_color_mix>
 8009f02:	2244      	movs	r2, #68	; 0x44
 8009f04:	466b      	mov	r3, sp
        for(i = 0; i < seg_size; i++) {
 8009f06:	2400      	movs	r4, #0
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 8009f08:	189b      	adds	r3, r3, r2
 8009f0a:	8018      	strh	r0, [r3, #0]
 8009f0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f10:	1a9b      	subs	r3, r3, r2
 8009f12:	435d      	muls	r5, r3
 8009f14:	9517      	str	r5, [sp, #92]	; 0x5c
        for(i = 0; i < seg_size; i++) {
 8009f16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009f18:	42a3      	cmp	r3, r4
 8009f1a:	dd01      	ble.n	8009f20 <lv_draw_rect+0x8f8>
 8009f1c:	f000 fcc5 	bl	800a8aa <lv_draw_rect+0x1282>
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 8009f20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f24:	1a9b      	subs	r3, r3, r2
 8009f26:	17da      	asrs	r2, r3, #31
 8009f28:	189b      	adds	r3, r3, r2
 8009f2a:	4053      	eors	r3, r2
 8009f2c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d158      	bne.n	8009fe4 <lv_draw_rect+0x9bc>
            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 8009f32:	20ff      	movs	r0, #255	; 0xff
 8009f34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f36:	9908      	ldr	r1, [sp, #32]
 8009f38:	4358      	muls	r0, r3
 8009f3a:	f7f6 f911 	bl	8000160 <__udivsi3>
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 8009f3e:	466b      	mov	r3, sp
            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 8009f40:	b2c4      	uxtb	r4, r0
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 8009f42:	0022      	movs	r2, r4
 8009f44:	8a99      	ldrh	r1, [r3, #20]
 8009f46:	8b18      	ldrh	r0, [r3, #24]
 8009f48:	f7ff fb06 	bl	8009558 <lv_color_mix>
 8009f4c:	2244      	movs	r2, #68	; 0x44
 8009f4e:	466b      	mov	r3, sp
 8009f50:	189b      	adds	r3, r3, r2
 8009f52:	8018      	strh	r0, [r3, #0]
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8009f54:	466b      	mov	r3, sp
 8009f56:	0022      	movs	r2, r4
 8009f58:	8b19      	ldrh	r1, [r3, #24]
 8009f5a:	8a98      	ldrh	r0, [r3, #20]
 8009f5c:	f7ff fafc 	bl	8009558 <lv_color_mix>
 8009f60:	2248      	movs	r2, #72	; 0x48
 8009f62:	466b      	mov	r3, sp
 8009f64:	189b      	adds	r3, r3, r2
 8009f66:	8018      	strh	r0, [r3, #0]
            lv_opa_t aa_opa = opa >> 1;
 8009f68:	9b07      	ldr	r3, [sp, #28]
 8009f6a:	085b      	lsrs	r3, r3, #1
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	9305      	str	r3, [sp, #20]
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom,
 8009f70:	466b      	mov	r3, sp
 8009f72:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
 8009f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f76:	191d      	adds	r5, r3, r4
 8009f78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f7a:	b22d      	sxth	r5, r5
 8009f7c:	191b      	adds	r3, r3, r4
 8009f7e:	b21b      	sxth	r3, r3
 8009f80:	9306      	str	r3, [sp, #24]
 8009f82:	9b05      	ldr	r3, [sp, #20]
 8009f84:	9906      	ldr	r1, [sp, #24]
 8009f86:	9300      	str	r3, [sp, #0]
 8009f88:	466b      	mov	r3, sp
 8009f8a:	189b      	adds	r3, r3, r2
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	9a03      	ldr	r2, [sp, #12]
 8009f90:	0028      	movs	r0, r5
 8009f92:	f7fe fda4 	bl	8008ade <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask, aa_color_hor_bottom,
 8009f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f98:	2248      	movs	r2, #72	; 0x48
 8009f9a:	1b1e      	subs	r6, r3, r4
 8009f9c:	9b05      	ldr	r3, [sp, #20]
 8009f9e:	b236      	sxth	r6, r6
 8009fa0:	9300      	str	r3, [sp, #0]
 8009fa2:	466b      	mov	r3, sp
 8009fa4:	189b      	adds	r3, r3, r2
 8009fa6:	881b      	ldrh	r3, [r3, #0]
 8009fa8:	9a03      	ldr	r2, [sp, #12]
 8009faa:	9906      	ldr	r1, [sp, #24]
 8009fac:	0030      	movs	r0, r6
 8009fae:	f7fe fd96 	bl	8008ade <lv_draw_px>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask, aa_color_hor_top,
 8009fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fb4:	2244      	movs	r2, #68	; 0x44
 8009fb6:	1b1c      	subs	r4, r3, r4
 8009fb8:	9b05      	ldr	r3, [sp, #20]
 8009fba:	b224      	sxth	r4, r4
 8009fbc:	9300      	str	r3, [sp, #0]
 8009fbe:	466b      	mov	r3, sp
 8009fc0:	189b      	adds	r3, r3, r2
 8009fc2:	881b      	ldrh	r3, [r3, #0]
 8009fc4:	9a03      	ldr	r2, [sp, #12]
 8009fc6:	0021      	movs	r1, r4
 8009fc8:	0030      	movs	r0, r6
 8009fca:	f7fe fd88 	bl	8008ade <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask, aa_color_hor_top,
 8009fce:	9b05      	ldr	r3, [sp, #20]
 8009fd0:	2244      	movs	r2, #68	; 0x44
 8009fd2:	9300      	str	r3, [sp, #0]
 8009fd4:	466b      	mov	r3, sp
 8009fd6:	189b      	adds	r3, r3, r2
 8009fd8:	881b      	ldrh	r3, [r3, #0]
 8009fda:	9a03      	ldr	r2, [sp, #12]
 8009fdc:	0021      	movs	r1, r4
 8009fde:	0028      	movs	r0, r5
 8009fe0:	f7fe fd7d 	bl	8008ade <lv_draw_px>
    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE &&
 8009fe4:	9b04      	ldr	r3, [sp, #16]
 8009fe6:	220c      	movs	r2, #12
 8009fe8:	5e9b      	ldrsh	r3, [r3, r2]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d100      	bne.n	8009ff0 <lv_draw_rect+0x9c8>
 8009fee:	e19c      	b.n	800a32a <lv_draw_rect+0xd02>
 8009ff0:	9b04      	ldr	r3, [sp, #16]
 8009ff2:	7b9b      	ldrb	r3, [r3, #14]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d100      	bne.n	8009ffa <lv_draw_rect+0x9d2>
 8009ff8:	e197      	b.n	800a32a <lv_draw_rect+0xd02>
 8009ffa:	9b04      	ldr	r3, [sp, #16]
 8009ffc:	7bdb      	ldrb	r3, [r3, #15]
 8009ffe:	2b0f      	cmp	r3, #15
 800a000:	d800      	bhi.n	800a004 <lv_draw_rect+0x9dc>
 800a002:	e192      	b.n	800a32a <lv_draw_rect+0xd02>
    uint16_t radius = style->body.radius;
 800a004:	9b04      	ldr	r3, [sp, #16]
 800a006:	88dd      	ldrh	r5, [r3, #6]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800a008:	f7fd fe94 	bl	8007d34 <lv_refr_get_disp_refreshing>
 800a00c:	f001 ff2e 	bl	800be6c <lv_disp_get_antialiasing>
 800a010:	88b9      	ldrh	r1, [r7, #4]
 800a012:	883b      	ldrh	r3, [r7, #0]
 800a014:	3101      	adds	r1, #1
    return area_p->y2 - area_p->y1 + 1;
 800a016:	88fa      	ldrh	r2, [r7, #6]
    return area_p->x2 - area_p->x1 + 1;
 800a018:	1ac9      	subs	r1, r1, r3
    return area_p->y2 - area_p->y1 + 1;
 800a01a:	887b      	ldrh	r3, [r7, #2]
 800a01c:	3201      	adds	r2, #1
 800a01e:	1ad2      	subs	r2, r2, r3
    lv_coord_t bwidth = style->body.border.width;
 800a020:	9b04      	ldr	r3, [sp, #16]
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800a022:	9008      	str	r0, [sp, #32]
    lv_coord_t bwidth = style->body.border.width;
 800a024:	200c      	movs	r0, #12
 800a026:	5e1b      	ldrsh	r3, [r3, r0]
 800a028:	9804      	ldr	r0, [sp, #16]
    return area_p->x2 - area_p->x1 + 1;
 800a02a:	b209      	sxth	r1, r1
 800a02c:	7bc4      	ldrb	r4, [r0, #15]
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800a02e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    return area_p->y2 - area_p->y1 + 1;
 800a030:	b212      	sxth	r2, r2
 800a032:	28ff      	cmp	r0, #255	; 0xff
 800a034:	d001      	beq.n	800a03a <lv_draw_rect+0xa12>
 800a036:	f000 fcda 	bl	800a9ee <lv_draw_rect+0x13c6>
 800a03a:	9405      	str	r4, [sp, #20]
    bwidth--;
 800a03c:	b29e      	uxth	r6, r3
    lv_border_part_t part = style->body.border.part;
 800a03e:	9804      	ldr	r0, [sp, #16]
    bwidth--;
 800a040:	1e73      	subs	r3, r6, #1
 800a042:	b29b      	uxth	r3, r3
    lv_border_part_t part = style->body.border.part;
 800a044:	7b84      	ldrb	r4, [r0, #14]
    lv_color_t color      = style->body.border.color;
 800a046:	8940      	ldrh	r0, [r0, #10]
    bwidth--;
 800a048:	9307      	str	r3, [sp, #28]
 800a04a:	466b      	mov	r3, sp
    lv_color_t color      = style->body.border.color;
 800a04c:	9006      	str	r0, [sp, #24]
    bwidth--;
 800a04e:	201c      	movs	r0, #28
 800a050:	5e1b      	ldrsh	r3, [r3, r0]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a052:	0028      	movs	r0, r5
    bwidth--;
 800a054:	9309      	str	r3, [sp, #36]	; 0x24
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a056:	f7ff faa5 	bl	80095a4 <lv_draw_cont_radius_corr>
    if(radius < bwidth) {
 800a05a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a05c:	0005      	movs	r5, r0
    if(radius < bwidth) {
 800a05e:	4298      	cmp	r0, r3
 800a060:	db01      	blt.n	800a066 <lv_draw_rect+0xa3e>
 800a062:	f000 fcca 	bl	800a9fa <lv_draw_rect+0x13d2>
        length_corr = bwidth - radius - aa;
 800a066:	9b07      	ldr	r3, [sp, #28]
 800a068:	9a08      	ldr	r2, [sp, #32]
 800a06a:	1a1b      	subs	r3, r3, r0
 800a06c:	1a9b      	subs	r3, r3, r2
 800a06e:	b21b      	sxth	r3, r3
    lv_coord_t length_corr = 0;
 800a070:	930a      	str	r3, [sp, #40]	; 0x28
    if(style->body.radius == 0) {
 800a072:	9b04      	ldr	r3, [sp, #16]
 800a074:	2206      	movs	r2, #6
 800a076:	5e9a      	ldrsh	r2, [r3, r2]
 800a078:	2302      	movs	r3, #2
 800a07a:	2a00      	cmp	r2, #0
 800a07c:	d001      	beq.n	800a082 <lv_draw_rect+0xa5a>
 800a07e:	f000 fcc3 	bl	800aa08 <lv_draw_rect+0x13e0>
 800a082:	4023      	ands	r3, r4
 800a084:	1e1d      	subs	r5, r3, #0
        if(part & LV_BORDER_TOP) {
 800a086:	d010      	beq.n	800a0aa <lv_draw_rect+0xa82>
            work_area.x1 = coords->x1;
 800a088:	883b      	ldrh	r3, [r7, #0]
 800a08a:	a828      	add	r0, sp, #160	; 0xa0
 800a08c:	8003      	strh	r3, [r0, #0]
            work_area.x2 = coords->x2;
 800a08e:	88bb      	ldrh	r3, [r7, #4]
            lv_draw_fill(&work_area, mask, color, opa);
 800a090:	9903      	ldr	r1, [sp, #12]
            work_area.x2 = coords->x2;
 800a092:	8083      	strh	r3, [r0, #4]
            work_area.y1 = coords->y1;
 800a094:	2202      	movs	r2, #2
 800a096:	5ebb      	ldrsh	r3, [r7, r2]
            work_area.y2 = coords->y1 + bwidth;
 800a098:	9a07      	ldr	r2, [sp, #28]
            work_area.y1 = coords->y1;
 800a09a:	8043      	strh	r3, [r0, #2]
            work_area.y2 = coords->y1 + bwidth;
 800a09c:	18d3      	adds	r3, r2, r3
            lv_draw_fill(&work_area, mask, color, opa);
 800a09e:	466a      	mov	r2, sp
            work_area.y2 = coords->y1 + bwidth;
 800a0a0:	80c3      	strh	r3, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800a0a2:	8b12      	ldrh	r2, [r2, #24]
 800a0a4:	9b05      	ldr	r3, [sp, #20]
 800a0a6:	f7fe fd63 	bl	8008b70 <lv_draw_fill>
        if(part & LV_BORDER_RIGHT) {
 800a0aa:	0723      	lsls	r3, r4, #28
 800a0ac:	d51a      	bpl.n	800a0e4 <lv_draw_rect+0xabc>
            work_area.x1 = coords->x2 - bwidth;
 800a0ae:	2204      	movs	r2, #4
 800a0b0:	5ebb      	ldrsh	r3, [r7, r2]
 800a0b2:	9a07      	ldr	r2, [sp, #28]
 800a0b4:	a828      	add	r0, sp, #160	; 0xa0
 800a0b6:	1a9a      	subs	r2, r3, r2
            work_area.x2 = coords->x2;
 800a0b8:	8083      	strh	r3, [r0, #4]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800a0ba:	002b      	movs	r3, r5
 800a0bc:	1e59      	subs	r1, r3, #1
 800a0be:	418b      	sbcs	r3, r1
            work_area.x1 = coords->x2 - bwidth;
 800a0c0:	8002      	strh	r2, [r0, #0]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800a0c2:	887a      	ldrh	r2, [r7, #2]
 800a0c4:	425b      	negs	r3, r3
 800a0c6:	4033      	ands	r3, r6
 800a0c8:	18d3      	adds	r3, r2, r3
 800a0ca:	8043      	strh	r3, [r0, #2]
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800a0cc:	07e3      	lsls	r3, r4, #31
 800a0ce:	88fa      	ldrh	r2, [r7, #6]
 800a0d0:	17db      	asrs	r3, r3, #31
 800a0d2:	4033      	ands	r3, r6
 800a0d4:	1ad3      	subs	r3, r2, r3
            lv_draw_fill(&work_area, mask, color, opa);
 800a0d6:	466a      	mov	r2, sp
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800a0d8:	80c3      	strh	r3, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800a0da:	8b12      	ldrh	r2, [r2, #24]
 800a0dc:	9b05      	ldr	r3, [sp, #20]
 800a0de:	9903      	ldr	r1, [sp, #12]
 800a0e0:	f7fe fd46 	bl	8008b70 <lv_draw_fill>
        if(part & LV_BORDER_LEFT) {
 800a0e4:	0763      	lsls	r3, r4, #29
 800a0e6:	d519      	bpl.n	800a11c <lv_draw_rect+0xaf4>
            work_area.x1 = coords->x1;
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	5ebb      	ldrsh	r3, [r7, r2]
            work_area.x2 = coords->x1 + bwidth;
 800a0ec:	9a07      	ldr	r2, [sp, #28]
            work_area.x1 = coords->x1;
 800a0ee:	a828      	add	r0, sp, #160	; 0xa0
 800a0f0:	8003      	strh	r3, [r0, #0]
            work_area.x2 = coords->x1 + bwidth;
 800a0f2:	18d3      	adds	r3, r2, r3
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800a0f4:	1e6a      	subs	r2, r5, #1
 800a0f6:	4195      	sbcs	r5, r2
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800a0f8:	07e2      	lsls	r2, r4, #31
 800a0fa:	17d2      	asrs	r2, r2, #31
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800a0fc:	426d      	negs	r5, r5
 800a0fe:	4035      	ands	r5, r6
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800a100:	4016      	ands	r6, r2
            lv_draw_fill(&work_area, mask, color, opa);
 800a102:	466a      	mov	r2, sp
            work_area.x2 = coords->x1 + bwidth;
 800a104:	8083      	strh	r3, [r0, #4]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800a106:	887b      	ldrh	r3, [r7, #2]
            lv_draw_fill(&work_area, mask, color, opa);
 800a108:	8b12      	ldrh	r2, [r2, #24]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800a10a:	195d      	adds	r5, r3, r5
 800a10c:	8045      	strh	r5, [r0, #2]
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800a10e:	88fb      	ldrh	r3, [r7, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800a110:	9903      	ldr	r1, [sp, #12]
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800a112:	1b9b      	subs	r3, r3, r6
 800a114:	80c3      	strh	r3, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800a116:	9b05      	ldr	r3, [sp, #20]
 800a118:	f7fe fd2a 	bl	8008b70 <lv_draw_fill>
        if(part & LV_BORDER_BOTTOM) {
 800a11c:	07e3      	lsls	r3, r4, #31
 800a11e:	d510      	bpl.n	800a142 <lv_draw_rect+0xb1a>
            work_area.x1 = coords->x1;
 800a120:	883b      	ldrh	r3, [r7, #0]
 800a122:	a828      	add	r0, sp, #160	; 0xa0
 800a124:	8003      	strh	r3, [r0, #0]
            work_area.x2 = coords->x2;
 800a126:	88bb      	ldrh	r3, [r7, #4]
 800a128:	8083      	strh	r3, [r0, #4]
            work_area.y1 = coords->y2 - bwidth;
 800a12a:	2206      	movs	r2, #6
 800a12c:	5ebb      	ldrsh	r3, [r7, r2]
 800a12e:	9a07      	ldr	r2, [sp, #28]
            work_area.y2 = coords->y2;
 800a130:	80c3      	strh	r3, [r0, #6]
            work_area.y1 = coords->y2 - bwidth;
 800a132:	1a9a      	subs	r2, r3, r2
 800a134:	8042      	strh	r2, [r0, #2]
            lv_draw_fill(&work_area, mask, color, opa);
 800a136:	466a      	mov	r2, sp
 800a138:	9b05      	ldr	r3, [sp, #20]
 800a13a:	8b12      	ldrh	r2, [r2, #24]
 800a13c:	9903      	ldr	r1, [sp, #12]
 800a13e:	f7fe fd17 	bl	8008b70 <lv_draw_fill>
        if(style->body.radius != 0) {
 800a142:	9b04      	ldr	r3, [sp, #16]
 800a144:	2506      	movs	r5, #6
 800a146:	5f5d      	ldrsh	r5, [r3, r5]
 800a148:	2d00      	cmp	r5, #0
 800a14a:	d100      	bne.n	800a14e <lv_draw_rect+0xb26>
 800a14c:	e0ed      	b.n	800a32a <lv_draw_rect+0xd02>
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800a14e:	f7fd fdf1 	bl	8007d34 <lv_refr_get_disp_refreshing>
 800a152:	f001 fe8b 	bl	800be6c <lv_disp_get_antialiasing>
    lv_color_t color      = style->body.border.color;
 800a156:	466a      	mov	r2, sp
    lv_coord_t bwidth     = style->body.border.width;
 800a158:	9b04      	ldr	r3, [sp, #16]
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800a15a:	9014      	str	r0, [sp, #80]	; 0x50
    lv_coord_t bwidth     = style->body.border.width;
 800a15c:	240c      	movs	r4, #12
 800a15e:	5f1c      	ldrsh	r4, [r3, r4]
    lv_color_t color      = style->body.border.color;
 800a160:	9b04      	ldr	r3, [sp, #16]
    uint16_t radius       = style->body.radius;
 800a162:	b2ad      	uxth	r5, r5
    lv_color_t color      = style->body.border.color;
 800a164:	895b      	ldrh	r3, [r3, #10]
 800a166:	8713      	strh	r3, [r2, #56]	; 0x38
    lv_border_part_t part = style->body.border.part;
 800a168:	9b04      	ldr	r3, [sp, #16]
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800a16a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    lv_border_part_t part = style->body.border.part;
 800a16c:	7b9b      	ldrb	r3, [r3, #14]
 800a16e:	9305      	str	r3, [sp, #20]
 800a170:	9b04      	ldr	r3, [sp, #16]
 800a172:	7bdb      	ldrb	r3, [r3, #15]
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800a174:	2aff      	cmp	r2, #255	; 0xff
 800a176:	d001      	beq.n	800a17c <lv_draw_rect+0xb54>
 800a178:	f000 fd76 	bl	800ac68 <lv_draw_rect+0x1640>
 800a17c:	930b      	str	r3, [sp, #44]	; 0x2c
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800a17e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    bwidth--;
 800a180:	b2a4      	uxth	r4, r4
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800a182:	2b00      	cmp	r3, #0
 800a184:	d001      	beq.n	800a18a <lv_draw_rect+0xb62>
 800a186:	f000 fd74 	bl	800ac72 <lv_draw_rect+0x164a>
    bwidth--;
 800a18a:	3c01      	subs	r4, #1
 800a18c:	88fa      	ldrh	r2, [r7, #6]
 800a18e:	887b      	ldrh	r3, [r7, #2]
    return area_p->x2 - area_p->x1 + 1;
 800a190:	88b9      	ldrh	r1, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 800a192:	3201      	adds	r2, #1
 800a194:	1ad2      	subs	r2, r2, r3
    return area_p->x2 - area_p->x1 + 1;
 800a196:	883b      	ldrh	r3, [r7, #0]
 800a198:	3101      	adds	r1, #1
 800a19a:	1ac9      	subs	r1, r1, r3
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a19c:	b209      	sxth	r1, r1
 800a19e:	b212      	sxth	r2, r2
 800a1a0:	0028      	movs	r0, r5
 800a1a2:	f7ff f9ff 	bl	80095a4 <lv_draw_cont_radius_corr>
    lt_origo.x = coords->x1 + radius + aa;
 800a1a6:	2250      	movs	r2, #80	; 0x50
 800a1a8:	466b      	mov	r3, sp
 800a1aa:	189b      	adds	r3, r3, r2
 800a1ac:	881b      	ldrh	r3, [r3, #0]
 800a1ae:	883a      	ldrh	r2, [r7, #0]
    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a1b0:	0005      	movs	r5, r0
    lt_origo.x = coords->x1 + radius + aa;
 800a1b2:	189a      	adds	r2, r3, r2
 800a1b4:	1882      	adds	r2, r0, r2
 800a1b6:	b292      	uxth	r2, r2
 800a1b8:	9208      	str	r2, [sp, #32]
    lt_origo.y = coords->y1 + radius + aa;
 800a1ba:	887a      	ldrh	r2, [r7, #2]
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800a1bc:	b2a4      	uxth	r4, r4
    lt_origo.y = coords->y1 + radius + aa;
 800a1be:	189a      	adds	r2, r3, r2
 800a1c0:	1882      	adds	r2, r0, r2
 800a1c2:	b292      	uxth	r2, r2
 800a1c4:	9206      	str	r2, [sp, #24]
 800a1c6:	466a      	mov	r2, sp
 800a1c8:	2118      	movs	r1, #24
 800a1ca:	5e52      	ldrsh	r2, [r2, r1]
    lv_coord_t radius_in = radius - bwidth;
 800a1cc:	1b2c      	subs	r4, r5, r4
    lt_origo.y = coords->y1 + radius + aa;
 800a1ce:	9215      	str	r2, [sp, #84]	; 0x54
    lb_origo.y = coords->y2 - radius - aa;
 800a1d0:	88fa      	ldrh	r2, [r7, #6]
 800a1d2:	1a12      	subs	r2, r2, r0
 800a1d4:	1ad2      	subs	r2, r2, r3
 800a1d6:	b292      	uxth	r2, r2
 800a1d8:	9207      	str	r2, [sp, #28]
 800a1da:	466a      	mov	r2, sp
 800a1dc:	211c      	movs	r1, #28
 800a1de:	5e52      	ldrsh	r2, [r2, r1]
    lv_circ_init(&cir_out, &tmp_out, radius);
 800a1e0:	a920      	add	r1, sp, #128	; 0x80
    lb_origo.y = coords->y2 - radius - aa;
 800a1e2:	9216      	str	r2, [sp, #88]	; 0x58
    rt_origo.x = coords->x2 - radius - aa;
 800a1e4:	88ba      	ldrh	r2, [r7, #4]
 800a1e6:	1a12      	subs	r2, r2, r0
 800a1e8:	1ad3      	subs	r3, r2, r3
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	9309      	str	r3, [sp, #36]	; 0x24
    lv_circ_init(&cir_out, &tmp_out, radius);
 800a1ee:	b203      	sxth	r3, r0
 800a1f0:	001a      	movs	r2, r3
 800a1f2:	a824      	add	r0, sp, #144	; 0x90
 800a1f4:	930c      	str	r3, [sp, #48]	; 0x30
 800a1f6:	f002 f85b 	bl	800c2b0 <lv_circ_init>
    lv_coord_t radius_in = radius - bwidth;
 800a1fa:	b223      	sxth	r3, r4
 800a1fc:	930a      	str	r3, [sp, #40]	; 0x28
    lv_circ_init(&cir_in, &tmp_in, radius_in);
 800a1fe:	466b      	mov	r3, sp
 800a200:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a204:	2b00      	cmp	r3, #0
 800a206:	da00      	bge.n	800a20a <lv_draw_rect+0xbe2>
 800a208:	2200      	movs	r2, #0
 800a20a:	b212      	sxth	r2, r2
 800a20c:	a922      	add	r1, sp, #136	; 0x88
 800a20e:	a826      	add	r0, sp, #152	; 0x98
 800a210:	f002 f84e 	bl	800c2b0 <lv_circ_init>
    lv_coord_t in_y_seg_start = 0;
 800a214:	2300      	movs	r3, #0
 800a216:	9311      	str	r3, [sp, #68]	; 0x44
    lv_coord_t out_y_seg_start = 0;
 800a218:	9313      	str	r3, [sp, #76]	; 0x4c
    while(cir_out.y <= cir_out.x) {
 800a21a:	ab24      	add	r3, sp, #144	; 0x90
 800a21c:	2102      	movs	r1, #2
 800a21e:	5e5a      	ldrsh	r2, [r3, r1]
 800a220:	9210      	str	r2, [sp, #64]	; 0x40
 800a222:	2200      	movs	r2, #0
 800a224:	5e9a      	ldrsh	r2, [r3, r2]
 800a226:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a228:	429a      	cmp	r2, r3
 800a22a:	db01      	blt.n	800a230 <lv_draw_rect+0xc08>
 800a22c:	f000 fd24 	bl	800ac78 <lv_draw_rect+0x1650>
    if(aa) {
 800a230:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a232:	2b00      	cmp	r3, #0
 800a234:	d100      	bne.n	800a238 <lv_draw_rect+0xc10>
 800a236:	e078      	b.n	800a32a <lv_draw_rect+0xd02>
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a238:	466b      	mov	r3, sp
 800a23a:	224c      	movs	r2, #76	; 0x4c
 800a23c:	189b      	adds	r3, r3, r2
 800a23e:	881d      	ldrh	r5, [r3, #0]
 800a240:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a242:	1b5b      	subs	r3, r3, r5
 800a244:	b21b      	sxth	r3, r3
 800a246:	930e      	str	r3, [sp, #56]	; 0x38
        for(i = 0; i < seg_size; i++) {
 800a248:	2300      	movs	r3, #0
 800a24a:	930d      	str	r3, [sp, #52]	; 0x34
 800a24c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a24e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a250:	4293      	cmp	r3, r2
 800a252:	dd01      	ble.n	800a258 <lv_draw_rect+0xc30>
 800a254:	f000 ffa6 	bl	800b1a4 <lv_draw_rect+0x1b7c>
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 800a258:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a25a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a25c:	1a9b      	subs	r3, r3, r2
 800a25e:	17da      	asrs	r2, r3, #31
 800a260:	189b      	adds	r3, r3, r2
 800a262:	4053      	eors	r3, r2
 800a264:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a266:	4293      	cmp	r3, r2
 800a268:	d14e      	bne.n	800a308 <lv_draw_rect+0xce0>
            lv_opa_t aa_opa = opa >> 1;
 800a26a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800a26c:	9a05      	ldr	r2, [sp, #20]
            lv_opa_t aa_opa = opa >> 1;
 800a26e:	085c      	lsrs	r4, r3, #1
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800a270:	2309      	movs	r3, #9
            lv_opa_t aa_opa = opa >> 1;
 800a272:	b2e4      	uxtb	r4, r4
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800a274:	4013      	ands	r3, r2
 800a276:	2b09      	cmp	r3, #9
 800a278:	d10d      	bne.n	800a296 <lv_draw_rect+0xc6e>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask,
 800a27a:	466b      	mov	r3, sp
 800a27c:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 800a27e:	9b07      	ldr	r3, [sp, #28]
 800a280:	9400      	str	r4, [sp, #0]
 800a282:	1819      	adds	r1, r3, r0
 800a284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a286:	b209      	sxth	r1, r1
 800a288:	1818      	adds	r0, r3, r0
 800a28a:	9b04      	ldr	r3, [sp, #16]
 800a28c:	b200      	sxth	r0, r0
 800a28e:	895b      	ldrh	r3, [r3, #10]
 800a290:	9a03      	ldr	r2, [sp, #12]
 800a292:	f7fe fc24 	bl	8008ade <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800a296:	2305      	movs	r3, #5
 800a298:	9a05      	ldr	r2, [sp, #20]
 800a29a:	4013      	ands	r3, r2
 800a29c:	2b05      	cmp	r3, #5
 800a29e:	d10d      	bne.n	800a2bc <lv_draw_rect+0xc94>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask,
 800a2a0:	466b      	mov	r3, sp
 800a2a2:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 800a2a4:	9b07      	ldr	r3, [sp, #28]
 800a2a6:	9400      	str	r4, [sp, #0]
 800a2a8:	1819      	adds	r1, r3, r0
 800a2aa:	9b08      	ldr	r3, [sp, #32]
 800a2ac:	b209      	sxth	r1, r1
 800a2ae:	1a18      	subs	r0, r3, r0
 800a2b0:	9b04      	ldr	r3, [sp, #16]
 800a2b2:	b200      	sxth	r0, r0
 800a2b4:	895b      	ldrh	r3, [r3, #10]
 800a2b6:	9a03      	ldr	r2, [sp, #12]
 800a2b8:	f7fe fc11 	bl	8008ade <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800a2bc:	2306      	movs	r3, #6
 800a2be:	9a05      	ldr	r2, [sp, #20]
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	2b06      	cmp	r3, #6
 800a2c4:	d10d      	bne.n	800a2e2 <lv_draw_rect+0xcba>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask,
 800a2c6:	466b      	mov	r3, sp
 800a2c8:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 800a2ca:	9b06      	ldr	r3, [sp, #24]
 800a2cc:	9400      	str	r4, [sp, #0]
 800a2ce:	1a19      	subs	r1, r3, r0
 800a2d0:	9b08      	ldr	r3, [sp, #32]
 800a2d2:	b209      	sxth	r1, r1
 800a2d4:	1a18      	subs	r0, r3, r0
 800a2d6:	9b04      	ldr	r3, [sp, #16]
 800a2d8:	b200      	sxth	r0, r0
 800a2da:	895b      	ldrh	r3, [r3, #10]
 800a2dc:	9a03      	ldr	r2, [sp, #12]
 800a2de:	f7fe fbfe 	bl	8008ade <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800a2e2:	230a      	movs	r3, #10
 800a2e4:	9a05      	ldr	r2, [sp, #20]
 800a2e6:	4013      	ands	r3, r2
 800a2e8:	2b0a      	cmp	r3, #10
 800a2ea:	d10d      	bne.n	800a308 <lv_draw_rect+0xce0>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask,
 800a2ec:	466b      	mov	r3, sp
 800a2ee:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 800a2f0:	9b06      	ldr	r3, [sp, #24]
 800a2f2:	9400      	str	r4, [sp, #0]
 800a2f4:	1a19      	subs	r1, r3, r0
 800a2f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2f8:	b209      	sxth	r1, r1
 800a2fa:	1818      	adds	r0, r3, r0
 800a2fc:	9b04      	ldr	r3, [sp, #16]
 800a2fe:	b200      	sxth	r0, r0
 800a300:	895b      	ldrh	r3, [r3, #10]
 800a302:	9a03      	ldr	r2, [sp, #12]
 800a304:	f7fe fbeb 	bl	8008ade <lv_draw_px>
        seg_size     = in_y_seg_end - in_y_seg_start;
 800a308:	466b      	mov	r3, sp
 800a30a:	2244      	movs	r2, #68	; 0x44
 800a30c:	189b      	adds	r3, r3, r2
 800a30e:	881d      	ldrh	r5, [r3, #0]
        in_y_seg_end = cir_in.y;
 800a310:	ab26      	add	r3, sp, #152	; 0x98
        seg_size     = in_y_seg_end - in_y_seg_start;
 800a312:	885b      	ldrh	r3, [r3, #2]
 800a314:	1b5b      	subs	r3, r3, r5
 800a316:	b21b      	sxth	r3, r3
 800a318:	930d      	str	r3, [sp, #52]	; 0x34
 800a31a:	2300      	movs	r3, #0
        for(i = 0; i < seg_size; i++) {
 800a31c:	001c      	movs	r4, r3
        seg_size     = in_y_seg_end - in_y_seg_start;
 800a31e:	930c      	str	r3, [sp, #48]	; 0x30
        for(i = 0; i < seg_size; i++) {
 800a320:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a322:	42a3      	cmp	r3, r4
 800a324:	dd01      	ble.n	800a32a <lv_draw_rect+0xd02>
 800a326:	f000 ffda 	bl	800b2de <lv_draw_rect+0x1cb6>
}
 800a32a:	b02b      	add	sp, #172	; 0xac
 800a32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 800a32e:	2300      	movs	r3, #0
 800a330:	5eea      	ldrsh	r2, [r5, r3]
 800a332:	2102      	movs	r1, #2
 800a334:	5e6b      	ldrsh	r3, [r5, r1]
 800a336:	9906      	ldr	r1, [sp, #24]
 800a338:	005b      	lsls	r3, r3, #1
 800a33a:	525a      	strh	r2, [r3, r1]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 800a33c:	2302      	movs	r3, #2
 800a33e:	5eea      	ldrsh	r2, [r5, r3]
 800a340:	2100      	movs	r1, #0
 800a342:	5e6b      	ldrsh	r3, [r5, r1]
 800a344:	9906      	ldr	r1, [sp, #24]
 800a346:	005b      	lsls	r3, r3, #1
 800a348:	525a      	strh	r2, [r3, r1]
        lv_circ_next(&circ, &circ_tmp);
 800a34a:	0028      	movs	r0, r5
 800a34c:	a924      	add	r1, sp, #144	; 0x90
 800a34e:	f001 ffc0 	bl	800c2d2 <lv_circ_next>
 800a352:	f7ff fc09 	bl	8009b68 <lv_draw_rect+0x540>
        line_1d_blur[col] = (uint32_t)((uint32_t)(swidth - col) * opa / 2) / (swidth);
 800a356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a358:	9905      	ldr	r1, [sp, #20]
 800a35a:	0858      	lsrs	r0, r3, #1
 800a35c:	f7f5 ff00 	bl	8000160 <__udivsi3>
 800a360:	9b07      	ldr	r3, [sp, #28]
 800a362:	5598      	strb	r0, [r3, r6]
 800a364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a366:	3601      	adds	r6, #1
 800a368:	1b5b      	subs	r3, r3, r5
 800a36a:	930a      	str	r3, [sp, #40]	; 0x28
 800a36c:	f7ff fc0f 	bl	8009b8e <lv_draw_rect+0x566>
 800a370:	466b      	mov	r3, sp
 800a372:	8c18      	ldrh	r0, [r3, #32]
 800a374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        point_l.y = ofs_l.y + curve_x[col];
 800a376:	9a06      	ldr	r2, [sp, #24]
 800a378:	1a1b      	subs	r3, r3, r0
 800a37a:	b21b      	sxth	r3, r3
 800a37c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a37e:	004b      	lsls	r3, r1, #1
 800a380:	5ad2      	ldrh	r2, [r2, r3]
 800a382:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800a384:	18a4      	adds	r4, r4, r2
 800a386:	b2a4      	uxth	r4, r4
 800a388:	9412      	str	r4, [sp, #72]	; 0x48
 800a38a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a38c:	1820      	adds	r0, r4, r0
 800a38e:	b200      	sxth	r0, r0
 800a390:	900e      	str	r0, [sp, #56]	; 0x38
        int16_t diff = col == 0 ? 0 : curve_x[col - 1] - curve_x[col];
 800a392:	1e0c      	subs	r4, r1, #0
 800a394:	d005      	beq.n	800a3a2 <lv_draw_rect+0xd7a>
 800a396:	9906      	ldr	r1, [sp, #24]
 800a398:	18cb      	adds	r3, r1, r3
 800a39a:	3b02      	subs	r3, #2
 800a39c:	881c      	ldrh	r4, [r3, #0]
 800a39e:	1aa4      	subs	r4, r4, r2
 800a3a0:	b2a4      	uxth	r4, r4
 800a3a2:	2600      	movs	r6, #0
 800a3a4:	b224      	sxth	r4, r4
 800a3a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
        for(d = 0; d < swidth; d++) {
 800a3a8:	9a05      	ldr	r2, [sp, #20]
 800a3aa:	199b      	adds	r3, r3, r6
 800a3ac:	b21b      	sxth	r3, r3
 800a3ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3b0:	b2b3      	uxth	r3, r6
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	db03      	blt.n	800a3be <lv_draw_rect+0xd96>
 800a3b6:	9b08      	ldr	r3, [sp, #32]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	f7ff fc04 	bl	8009bc6 <lv_draw_rect+0x59e>
                px_opa = line_1d_blur[d];
 800a3be:	9a07      	ldr	r2, [sp, #28]
 800a3c0:	5cd5      	ldrb	r5, [r2, r3]
            if(diff == 0) {
 800a3c2:	2c00      	cmp	r4, #0
 800a3c4:	d115      	bne.n	800a3f2 <lv_draw_rect+0xdca>
            lv_draw_px(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 800a3c6:	9b04      	ldr	r3, [sp, #16]
 800a3c8:	9500      	str	r5, [sp, #0]
 800a3ca:	8a1b      	ldrh	r3, [r3, #16]
 800a3cc:	9a03      	ldr	r2, [sp, #12]
 800a3ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a3d0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800a3d2:	f7fe fb84 	bl	8008ade <lv_draw_px>
            if(point_r.x > ofs_l.x) {
 800a3d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	da07      	bge.n	800a3ee <lv_draw_rect+0xdc6>
                lv_draw_px(point_r.x, point_r.y, mask, style->body.shadow.color, px_opa);
 800a3de:	9b04      	ldr	r3, [sp, #16]
 800a3e0:	9500      	str	r5, [sp, #0]
 800a3e2:	8a1b      	ldrh	r3, [r3, #16]
 800a3e4:	9a03      	ldr	r2, [sp, #12]
 800a3e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a3e8:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a3ea:	f7fe fb78 	bl	8008ade <lv_draw_px>
 800a3ee:	3601      	adds	r6, #1
 800a3f0:	e7d9      	b.n	800a3a6 <lv_draw_rect+0xd7e>
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
 800a3f2:	1b1b      	subs	r3, r3, r4
 800a3f4:	5cd3      	ldrb	r3, [r2, r3]
 800a3f6:	18ed      	adds	r5, r5, r3
 800a3f8:	086d      	lsrs	r5, r5, #1
 800a3fa:	e7e4      	b.n	800a3c6 <lv_draw_rect+0xd9e>
        lv_draw_fill(&area_mid, mask, style->body.shadow.color, line_1d_blur[d]);
 800a3fc:	9b07      	ldr	r3, [sp, #28]
 800a3fe:	9a04      	ldr	r2, [sp, #16]
 800a400:	ad28      	add	r5, sp, #160	; 0xa0
 800a402:	5d1b      	ldrb	r3, [r3, r4]
 800a404:	8a12      	ldrh	r2, [r2, #16]
 800a406:	9903      	ldr	r1, [sp, #12]
 800a408:	0028      	movs	r0, r5
 800a40a:	f7fe fbb1 	bl	8008b70 <lv_draw_fill>
        area_mid.y1++;
 800a40e:	886b      	ldrh	r3, [r5, #2]
    for(d = 0; d < swidth; d++) {
 800a410:	3401      	adds	r4, #1
        area_mid.y1++;
 800a412:	3301      	adds	r3, #1
 800a414:	806b      	strh	r3, [r5, #2]
        area_mid.y2++;
 800a416:	88eb      	ldrh	r3, [r5, #6]
    for(d = 0; d < swidth; d++) {
 800a418:	b2a4      	uxth	r4, r4
        area_mid.y2++;
 800a41a:	3301      	adds	r3, #1
 800a41c:	80eb      	strh	r3, [r5, #6]
 800a41e:	f7ff fbe8 	bl	8009bf2 <lv_draw_rect+0x5ca>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800a422:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a424:	4353      	muls	r3, r2
 800a426:	0a1b      	lsrs	r3, r3, #8
 800a428:	f7ff fc12 	bl	8009c50 <lv_draw_rect+0x628>
                work_area.y1 += 1;
 800a42c:	3301      	adds	r3, #1
 800a42e:	8053      	strh	r3, [r2, #2]
                work_area.y2 -= 1;
 800a430:	3c01      	subs	r4, #1
 800a432:	f7ff fc39 	bl	8009ca8 <lv_draw_rect+0x680>
        lv_coord_t row_start = coords->y1 + radius;
 800a436:	9b08      	ldr	r3, [sp, #32]
        lv_coord_t row_end   = coords->y2 - radius;
 800a438:	1a24      	subs	r4, r4, r0
        lv_coord_t row_start = coords->y1 + radius;
 800a43a:	18c3      	adds	r3, r0, r3
 800a43c:	b29b      	uxth	r3, r3
        lv_coord_t row_end   = coords->y2 - radius;
 800a43e:	b2a4      	uxth	r4, r4
        if(style->body.radius != 0) {
 800a440:	2900      	cmp	r1, #0
 800a442:	d123      	bne.n	800a48c <lv_draw_rect+0xe64>
        lv_coord_t row_start = coords->y1 + radius;
 800a444:	b21b      	sxth	r3, r3
                row_end -= 1;
 800a446:	b224      	sxth	r4, r4
 800a448:	1c1d      	adds	r5, r3, #0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	da00      	bge.n	800a450 <lv_draw_rect+0xe28>
 800a44e:	2500      	movs	r5, #0
 800a450:	b22d      	sxth	r5, r5
        for(row = row_start; row <= row_end; row++) {
 800a452:	42a5      	cmp	r5, r4
 800a454:	dd01      	ble.n	800a45a <lv_draw_rect+0xe32>
 800a456:	f7ff fc2f 	bl	8009cb8 <lv_draw_rect+0x690>
            work_area.y1 = row;
 800a45a:	ab1c      	add	r3, sp, #112	; 0x70
 800a45c:	865d      	strh	r5, [r3, #50]	; 0x32
            work_area.y2 = row;
 800a45e:	86dd      	strh	r5, [r3, #54]	; 0x36
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800a460:	2306      	movs	r3, #6
 800a462:	5ef8      	ldrsh	r0, [r7, r3]
 800a464:	23ff      	movs	r3, #255	; 0xff
 800a466:	1b40      	subs	r0, r0, r5
 800a468:	4358      	muls	r0, r3
 800a46a:	0031      	movs	r1, r6
 800a46c:	f7f5 fe78 	bl	8000160 <__udivsi3>
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 800a470:	466b      	mov	r3, sp
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 800a472:	b2c2      	uxtb	r2, r0
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 800a474:	8b99      	ldrh	r1, [r3, #28]
 800a476:	8a98      	ldrh	r0, [r3, #20]
 800a478:	f7ff f86e 	bl	8009558 <lv_color_mix>
            lv_draw_fill(&work_area, mask, act_color, opa);
 800a47c:	9b06      	ldr	r3, [sp, #24]
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 800a47e:	1c02      	adds	r2, r0, #0
            lv_draw_fill(&work_area, mask, act_color, opa);
 800a480:	9903      	ldr	r1, [sp, #12]
 800a482:	a828      	add	r0, sp, #160	; 0xa0
 800a484:	f7fe fb74 	bl	8008b70 <lv_draw_fill>
 800a488:	3501      	adds	r5, #1
 800a48a:	e7e1      	b.n	800a450 <lv_draw_rect+0xe28>
            if(aa) {
 800a48c:	2d00      	cmp	r5, #0
 800a48e:	d003      	beq.n	800a498 <lv_draw_rect+0xe70>
                row_start += 2;
 800a490:	3302      	adds	r3, #2
 800a492:	b21b      	sxth	r3, r3
                row_end -= 2;
 800a494:	3c02      	subs	r4, #2
 800a496:	e7d6      	b.n	800a446 <lv_draw_rect+0xe1e>
                row_start += 1;
 800a498:	3301      	adds	r3, #1
 800a49a:	b21b      	sxth	r3, r3
                row_end -= 1;
 800a49c:	3c01      	subs	r4, #1
 800a49e:	e7d2      	b.n	800a446 <lv_draw_rect+0xe1e>
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800a4a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a4a2:	4353      	muls	r3, r2
 800a4a4:	0a1b      	lsrs	r3, r3, #8
 800a4a6:	f7ff fc20 	bl	8009cea <lv_draw_rect+0x6c2>
        if(aa) {
 800a4aa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d03f      	beq.n	800a530 <lv_draw_rect+0xf08>
            if(out_x_last != cir.x) {
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	5ea3      	ldrsh	r3, [r4, r2]
 800a4b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d03a      	beq.n	800a530 <lv_draw_rect+0xf08>
                out_y_seg_end       = cir.y;
 800a4ba:	2202      	movs	r2, #2
 800a4bc:	5ea3      	ldrsh	r3, [r4, r2]
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a4be:	2240      	movs	r2, #64	; 0x40
                out_y_seg_end       = cir.y;
 800a4c0:	931b      	str	r3, [sp, #108]	; 0x6c
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a4c2:	466b      	mov	r3, sp
 800a4c4:	189b      	adds	r3, r3, r2
 800a4c6:	881b      	ldrh	r3, [r3, #0]
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800a4c8:	9908      	ldr	r1, [sp, #32]
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a4ca:	9313      	str	r3, [sp, #76]	; 0x4c
 800a4cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a4ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a4d0:	1a9b      	subs	r3, r3, r2
 800a4d2:	b21b      	sxth	r3, r3
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800a4d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a4d6:	9315      	str	r3, [sp, #84]	; 0x54
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800a4d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4da:	1a98      	subs	r0, r3, r2
 800a4dc:	23ff      	movs	r3, #255	; 0xff
 800a4de:	4358      	muls	r0, r3
 800a4e0:	f7f5 fe3e 	bl	8000160 <__udivsi3>
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800a4e4:	466b      	mov	r3, sp
                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800a4e6:	b2c4      	uxtb	r4, r0
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800a4e8:	0022      	movs	r2, r4
 800a4ea:	8a99      	ldrh	r1, [r3, #20]
 800a4ec:	8b18      	ldrh	r0, [r3, #24]
 800a4ee:	f7ff f833 	bl	8009558 <lv_color_mix>
 800a4f2:	2244      	movs	r2, #68	; 0x44
 800a4f4:	466b      	mov	r3, sp
 800a4f6:	189b      	adds	r3, r3, r2
 800a4f8:	8018      	strh	r0, [r3, #0]
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800a4fa:	466b      	mov	r3, sp
 800a4fc:	0022      	movs	r2, r4
 800a4fe:	8b19      	ldrh	r1, [r3, #24]
 800a500:	8a98      	ldrh	r0, [r3, #20]
 800a502:	f7ff f829 	bl	8009558 <lv_color_mix>
 800a506:	2248      	movs	r2, #72	; 0x48
 800a508:	466b      	mov	r3, sp
 800a50a:	189b      	adds	r3, r3, r2
 800a50c:	8018      	strh	r0, [r3, #0]
 800a50e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a510:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                for(i = 0; i < seg_size; i++) {
 800a512:	2400      	movs	r4, #0
 800a514:	1a9b      	subs	r3, r3, r2
 800a516:	22ff      	movs	r2, #255	; 0xff
 800a518:	435a      	muls	r2, r3
 800a51a:	9217      	str	r2, [sp, #92]	; 0x5c
 800a51c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a51e:	42a3      	cmp	r3, r4
 800a520:	dd00      	ble.n	800a524 <lv_draw_rect+0xefc>
 800a522:	e095      	b.n	800a650 <lv_draw_rect+0x1028>
                out_x_last      = cir.x;
 800a524:	ab20      	add	r3, sp, #128	; 0x80
 800a526:	2200      	movs	r2, #0
 800a528:	5e9b      	ldrsh	r3, [r3, r2]
 800a52a:	930f      	str	r3, [sp, #60]	; 0x3c
                out_y_seg_start = out_y_seg_end;
 800a52c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a52e:	9310      	str	r3, [sp, #64]	; 0x40
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 800a530:	ab26      	add	r3, sp, #152	; 0x98
 800a532:	2202      	movs	r2, #2
 800a534:	5e9b      	ldrsh	r3, [r3, r2]
 800a536:	9311      	str	r3, [sp, #68]	; 0x44
 800a538:	ab20      	add	r3, sp, #128	; 0x80
 800a53a:	2202      	movs	r2, #2
 800a53c:	5e9c      	ldrsh	r4, [r3, r2]
 800a53e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a540:	18a6      	adds	r6, r4, r2
        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 800a542:	aa28      	add	r2, sp, #160	; 0xa0
 800a544:	2102      	movs	r1, #2
 800a546:	5e52      	ldrsh	r2, [r2, r1]
 800a548:	9212      	str	r2, [sp, #72]	; 0x48
 800a54a:	2200      	movs	r2, #0
 800a54c:	5e9b      	ldrsh	r3, [r3, r2]
 800a54e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a550:	18d2      	adds	r2, r2, r3
 800a552:	9213      	str	r2, [sp, #76]	; 0x4c
        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 800a554:	aa24      	add	r2, sp, #144	; 0x90
 800a556:	2502      	movs	r5, #2
 800a558:	5f55      	ldrsh	r5, [r2, r5]
 800a55a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a55c:	1b14      	subs	r4, r2, r4
        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 800a55e:	aa22      	add	r2, sp, #136	; 0x88
 800a560:	2102      	movs	r1, #2
 800a562:	5e51      	ldrsh	r1, [r2, r1]
 800a564:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a566:	1ad3      	subs	r3, r2, r3
 800a568:	4299      	cmp	r1, r3
 800a56a:	d001      	beq.n	800a570 <lv_draw_rect+0xf48>
 800a56c:	f000 ff65 	bl	800b43a <lv_draw_rect+0x1e12>
        if(mid_top_refr != 0) {
 800a570:	42a5      	cmp	r5, r4
 800a572:	d00b      	beq.n	800a58c <lv_draw_rect+0xf64>
            if(mcolor.full == gcolor.full)
 800a574:	9b05      	ldr	r3, [sp, #20]
 800a576:	9a06      	ldr	r2, [sp, #24]
 800a578:	4293      	cmp	r3, r2
 800a57a:	d000      	beq.n	800a57e <lv_draw_rect+0xf56>
 800a57c:	e112      	b.n	800a7a4 <lv_draw_rect+0x117c>
                act_color = mcolor;
 800a57e:	466b      	mov	r3, sp
 800a580:	8a9a      	ldrh	r2, [r3, #20]
            lv_draw_fill(&mid_top_area, mask, act_color, opa);
 800a582:	9b07      	ldr	r3, [sp, #28]
 800a584:	9903      	ldr	r1, [sp, #12]
 800a586:	a824      	add	r0, sp, #144	; 0x90
 800a588:	f7fe faf2 	bl	8008b70 <lv_draw_fill>
        if(mid_bot_refr != 0) {
 800a58c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a58e:	42b3      	cmp	r3, r6
 800a590:	d00b      	beq.n	800a5aa <lv_draw_rect+0xf82>
            if(mcolor.full == gcolor.full)
 800a592:	9b05      	ldr	r3, [sp, #20]
 800a594:	9a06      	ldr	r2, [sp, #24]
 800a596:	4293      	cmp	r3, r2
 800a598:	d000      	beq.n	800a59c <lv_draw_rect+0xf74>
 800a59a:	e116      	b.n	800a7ca <lv_draw_rect+0x11a2>
                act_color = mcolor;
 800a59c:	466b      	mov	r3, sp
 800a59e:	8a9a      	ldrh	r2, [r3, #20]
            lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 800a5a0:	9b07      	ldr	r3, [sp, #28]
 800a5a2:	9903      	ldr	r1, [sp, #12]
 800a5a4:	a826      	add	r0, sp, #152	; 0x98
 800a5a6:	f7fe fae3 	bl	8008b70 <lv_draw_fill>
        if(edge_bot_refr != 0) {
 800a5aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d00b      	beq.n	800a5ca <lv_draw_rect+0xfa2>
            if(mcolor.full == gcolor.full)
 800a5b2:	9b05      	ldr	r3, [sp, #20]
 800a5b4:	9a06      	ldr	r2, [sp, #24]
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d000      	beq.n	800a5bc <lv_draw_rect+0xf94>
 800a5ba:	e119      	b.n	800a7f0 <lv_draw_rect+0x11c8>
                act_color = mcolor;
 800a5bc:	466b      	mov	r3, sp
 800a5be:	8a9a      	ldrh	r2, [r3, #20]
            lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 800a5c0:	9b07      	ldr	r3, [sp, #28]
 800a5c2:	9903      	ldr	r1, [sp, #12]
 800a5c4:	a828      	add	r0, sp, #160	; 0xa0
 800a5c6:	f7fe fad3 	bl	8008b70 <lv_draw_fill>
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800a5ca:	ac20      	add	r4, sp, #128	; 0x80
 800a5cc:	8862      	ldrh	r2, [r4, #2]
 800a5ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5d0:	8821      	ldrh	r1, [r4, #0]
 800a5d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5d4:	189a      	adds	r2, r3, r2
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800a5d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800a5d8:	b212      	sxth	r2, r2
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800a5da:	185b      	adds	r3, r3, r1
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800a5dc:	1a41      	subs	r1, r0, r1
 800a5de:	9200      	str	r2, [sp, #0]
 800a5e0:	a826      	add	r0, sp, #152	; 0x98
 800a5e2:	b21b      	sxth	r3, r3
 800a5e4:	b209      	sxth	r1, r1
 800a5e6:	f001 fdb3 	bl	800c150 <lv_area_set>
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800a5ea:	8822      	ldrh	r2, [r4, #0]
 800a5ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5ee:	8861      	ldrh	r1, [r4, #2]
 800a5f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5f2:	189a      	adds	r2, r3, r2
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800a5f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800a5f6:	b212      	sxth	r2, r2
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800a5f8:	185b      	adds	r3, r3, r1
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800a5fa:	1a41      	subs	r1, r0, r1
 800a5fc:	9200      	str	r2, [sp, #0]
 800a5fe:	a828      	add	r0, sp, #160	; 0xa0
 800a600:	b21b      	sxth	r3, r3
 800a602:	b209      	sxth	r1, r1
 800a604:	f001 fda4 	bl	800c150 <lv_area_set>
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800a608:	8862      	ldrh	r2, [r4, #2]
 800a60a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a60c:	8821      	ldrh	r1, [r4, #0]
 800a60e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a610:	1a9a      	subs	r2, r3, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800a612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800a614:	b212      	sxth	r2, r2
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800a616:	185b      	adds	r3, r3, r1
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800a618:	1a41      	subs	r1, r0, r1
 800a61a:	9200      	str	r2, [sp, #0]
 800a61c:	a824      	add	r0, sp, #144	; 0x90
 800a61e:	b21b      	sxth	r3, r3
 800a620:	b209      	sxth	r1, r1
 800a622:	f001 fd95 	bl	800c150 <lv_area_set>
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800a626:	8822      	ldrh	r2, [r4, #0]
 800a628:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a62a:	8861      	ldrh	r1, [r4, #2]
 800a62c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a62e:	1a9a      	subs	r2, r3, r2
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800a630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800a632:	b212      	sxth	r2, r2
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800a634:	185b      	adds	r3, r3, r1
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800a636:	1a41      	subs	r1, r0, r1
 800a638:	b21b      	sxth	r3, r3
 800a63a:	a822      	add	r0, sp, #136	; 0x88
 800a63c:	b209      	sxth	r1, r1
 800a63e:	9200      	str	r2, [sp, #0]
 800a640:	f001 fd86 	bl	800c150 <lv_area_set>
        lv_circ_next(&cir, &cir_tmp);
 800a644:	a91f      	add	r1, sp, #124	; 0x7c
 800a646:	0020      	movs	r0, r4
 800a648:	f001 fe43 	bl	800c2d2 <lv_circ_next>
 800a64c:	f7ff fbc6 	bl	8009ddc <lv_draw_rect+0x7b4>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800a650:	9b15      	ldr	r3, [sp, #84]	; 0x54
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800a652:	9a07      	ldr	r2, [sp, #28]
 800a654:	0021      	movs	r1, r4
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800a656:	2b01      	cmp	r3, #1
 800a658:	d100      	bne.n	800a65c <lv_draw_rect+0x1034>
 800a65a:	e09b      	b.n	800a794 <lv_draw_rect+0x116c>
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800a65c:	0018      	movs	r0, r3
 800a65e:	f7fe ffbf 	bl	80095e0 <antialias_get_opa_circ>
 800a662:	9010      	str	r0, [sp, #64]	; 0x40
 800a664:	b2a3      	uxth	r3, r4
 800a666:	9314      	str	r3, [sp, #80]	; 0x50
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800a668:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a66a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a66c:	189c      	adds	r4, r3, r2
 800a66e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a670:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a672:	191c      	adds	r4, r3, r4
 800a674:	466b      	mov	r3, sp
 800a676:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a678:	1c55      	adds	r5, r2, #1
 800a67a:	9316      	str	r3, [sp, #88]	; 0x58
 800a67c:	195d      	adds	r5, r3, r5
 800a67e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a680:	2248      	movs	r2, #72	; 0x48
 800a682:	9300      	str	r3, [sp, #0]
 800a684:	466b      	mov	r3, sp
 800a686:	b224      	sxth	r4, r4
 800a688:	b22d      	sxth	r5, r5
 800a68a:	189b      	adds	r3, r3, r2
 800a68c:	0029      	movs	r1, r5
 800a68e:	0020      	movs	r0, r4
 800a690:	881b      	ldrh	r3, [r3, #0]
 800a692:	9a03      	ldr	r2, [sp, #12]
 800a694:	f7fe fa23 	bl	8008ade <lv_draw_px>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800a698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a69a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a69c:	0029      	movs	r1, r5
 800a69e:	1a9e      	subs	r6, r3, r2
 800a6a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a6a2:	2248      	movs	r2, #72	; 0x48
 800a6a4:	1af6      	subs	r6, r6, r3
 800a6a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6a8:	b236      	sxth	r6, r6
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	466b      	mov	r3, sp
 800a6ae:	189b      	adds	r3, r3, r2
 800a6b0:	0030      	movs	r0, r6
 800a6b2:	881b      	ldrh	r3, [r3, #0]
 800a6b4:	9a03      	ldr	r2, [sp, #12]
 800a6b6:	f7fe fa12 	bl	8008ade <lv_draw_px>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800a6ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6bc:	2244      	movs	r2, #68	; 0x44
 800a6be:	1e5d      	subs	r5, r3, #1
 800a6c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a6c2:	0030      	movs	r0, r6
 800a6c4:	1aed      	subs	r5, r5, r3
 800a6c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6c8:	b22d      	sxth	r5, r5
 800a6ca:	9300      	str	r3, [sp, #0]
 800a6cc:	466b      	mov	r3, sp
 800a6ce:	189b      	adds	r3, r3, r2
 800a6d0:	0029      	movs	r1, r5
 800a6d2:	881b      	ldrh	r3, [r3, #0]
 800a6d4:	9a03      	ldr	r2, [sp, #12]
 800a6d6:	f7fe fa02 	bl	8008ade <lv_draw_px>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800a6da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6dc:	2244      	movs	r2, #68	; 0x44
 800a6de:	9300      	str	r3, [sp, #0]
 800a6e0:	466b      	mov	r3, sp
 800a6e2:	189b      	adds	r3, r3, r2
 800a6e4:	881b      	ldrh	r3, [r3, #0]
 800a6e6:	9a03      	ldr	r2, [sp, #12]
 800a6e8:	0029      	movs	r1, r5
 800a6ea:	0020      	movs	r0, r4
 800a6ec:	f7fe f9f7 	bl	8008ade <lv_draw_px>
                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800a6f0:	9908      	ldr	r1, [sp, #32]
 800a6f2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a6f4:	f7f5 fd34 	bl	8000160 <__udivsi3>
 800a6f8:	b2c3      	uxtb	r3, r0
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800a6fa:	001a      	movs	r2, r3
                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800a6fc:	931c      	str	r3, [sp, #112]	; 0x70
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800a6fe:	466b      	mov	r3, sp
 800a700:	8b19      	ldrh	r1, [r3, #24]
 800a702:	8a98      	ldrh	r0, [r3, #20]
 800a704:	f7fe ff28 	bl	8009558 <lv_color_mix>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a70a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a70c:	3301      	adds	r3, #1
 800a70e:	18d3      	adds	r3, r2, r3
 800a710:	b21b      	sxth	r3, r3
 800a712:	931d      	str	r3, [sp, #116]	; 0x74
 800a714:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a716:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800a718:	1c04      	adds	r4, r0, #0
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800a71a:	189e      	adds	r6, r3, r2
 800a71c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a71e:	9a03      	ldr	r2, [sp, #12]
 800a720:	199e      	adds	r6, r3, r6
 800a722:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a724:	b236      	sxth	r6, r6
 800a726:	0031      	movs	r1, r6
 800a728:	9300      	str	r3, [sp, #0]
 800a72a:	1c03      	adds	r3, r0, #0
 800a72c:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a72e:	f7fe f9d6 	bl	8008ade <lv_draw_px>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800a732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a734:	0031      	movs	r1, r6
 800a736:	1e5d      	subs	r5, r3, #1
 800a738:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a73a:	9a03      	ldr	r2, [sp, #12]
 800a73c:	1aed      	subs	r5, r5, r3
 800a73e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a740:	b22d      	sxth	r5, r5
 800a742:	9300      	str	r3, [sp, #0]
 800a744:	0028      	movs	r0, r5
 800a746:	1c23      	adds	r3, r4, #0
 800a748:	f7fe f9c9 	bl	8008ade <lv_draw_px>
                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800a74c:	466b      	mov	r3, sp
 800a74e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a750:	8a99      	ldrh	r1, [r3, #20]
 800a752:	8b18      	ldrh	r0, [r3, #24]
 800a754:	f7fe ff00 	bl	8009558 <lv_color_mix>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800a758:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a75a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800a75c:	1c04      	adds	r4, r0, #0
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800a75e:	1a9e      	subs	r6, r3, r2
 800a760:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a762:	9a03      	ldr	r2, [sp, #12]
 800a764:	1af6      	subs	r6, r6, r3
 800a766:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a768:	b236      	sxth	r6, r6
 800a76a:	9300      	str	r3, [sp, #0]
 800a76c:	0031      	movs	r1, r6
 800a76e:	1c03      	adds	r3, r0, #0
 800a770:	0028      	movs	r0, r5
 800a772:	f7fe f9b4 	bl	8008ade <lv_draw_px>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800a776:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a778:	9a03      	ldr	r2, [sp, #12]
 800a77a:	9300      	str	r3, [sp, #0]
 800a77c:	0031      	movs	r1, r6
 800a77e:	1c23      	adds	r3, r4, #0
 800a780:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a782:	f7fe f9ac 	bl	8008ade <lv_draw_px>
 800a786:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a788:	33ff      	adds	r3, #255	; 0xff
 800a78a:	9317      	str	r3, [sp, #92]	; 0x5c
                for(i = 0; i < seg_size; i++) {
 800a78c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a78e:	1c5c      	adds	r4, r3, #1
 800a790:	b224      	sxth	r4, r4
 800a792:	e6c3      	b.n	800a51c <lv_draw_rect+0xef4>
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800a794:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a796:	f7fe f8cb 	bl	8008930 <lv_draw_aa_get_opa>
 800a79a:	9b07      	ldr	r3, [sp, #28]
 800a79c:	1a18      	subs	r0, r3, r0
 800a79e:	b2c3      	uxtb	r3, r0
 800a7a0:	9310      	str	r3, [sp, #64]	; 0x40
 800a7a2:	e75f      	b.n	800a664 <lv_draw_rect+0x103c>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800a7a4:	2306      	movs	r3, #6
 800a7a6:	5ef8      	ldrsh	r0, [r7, r3]
 800a7a8:	ab24      	add	r3, sp, #144	; 0x90
 800a7aa:	2202      	movs	r2, #2
 800a7ac:	5e9b      	ldrsh	r3, [r3, r2]
 800a7ae:	9908      	ldr	r1, [sp, #32]
 800a7b0:	1ac0      	subs	r0, r0, r3
 800a7b2:	23ff      	movs	r3, #255	; 0xff
 800a7b4:	4358      	muls	r0, r3
 800a7b6:	f7f5 fcd3 	bl	8000160 <__udivsi3>
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800a7ba:	466b      	mov	r3, sp
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800a7bc:	b2c2      	uxtb	r2, r0
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800a7be:	8b19      	ldrh	r1, [r3, #24]
 800a7c0:	8a98      	ldrh	r0, [r3, #20]
 800a7c2:	f7fe fec9 	bl	8009558 <lv_color_mix>
 800a7c6:	1c02      	adds	r2, r0, #0
 800a7c8:	e6db      	b.n	800a582 <lv_draw_rect+0xf5a>
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800a7ca:	2306      	movs	r3, #6
 800a7cc:	5ef8      	ldrsh	r0, [r7, r3]
 800a7ce:	ab26      	add	r3, sp, #152	; 0x98
 800a7d0:	2202      	movs	r2, #2
 800a7d2:	5e9b      	ldrsh	r3, [r3, r2]
 800a7d4:	9908      	ldr	r1, [sp, #32]
 800a7d6:	1ac0      	subs	r0, r0, r3
 800a7d8:	23ff      	movs	r3, #255	; 0xff
 800a7da:	4358      	muls	r0, r3
 800a7dc:	f7f5 fcc0 	bl	8000160 <__udivsi3>
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800a7e0:	466b      	mov	r3, sp
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800a7e2:	b2c2      	uxtb	r2, r0
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800a7e4:	8b19      	ldrh	r1, [r3, #24]
 800a7e6:	8a98      	ldrh	r0, [r3, #20]
 800a7e8:	f7fe feb6 	bl	8009558 <lv_color_mix>
 800a7ec:	1c02      	adds	r2, r0, #0
 800a7ee:	e6d7      	b.n	800a5a0 <lv_draw_rect+0xf78>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800a7f0:	2306      	movs	r3, #6
 800a7f2:	5ef8      	ldrsh	r0, [r7, r3]
 800a7f4:	ab28      	add	r3, sp, #160	; 0xa0
 800a7f6:	2202      	movs	r2, #2
 800a7f8:	5e9b      	ldrsh	r3, [r3, r2]
 800a7fa:	9908      	ldr	r1, [sp, #32]
 800a7fc:	1ac0      	subs	r0, r0, r3
 800a7fe:	23ff      	movs	r3, #255	; 0xff
 800a800:	4358      	muls	r0, r3
 800a802:	f7f5 fcad 	bl	8000160 <__udivsi3>
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800a806:	466b      	mov	r3, sp
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800a808:	b2c2      	uxtb	r2, r0
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800a80a:	8b19      	ldrh	r1, [r3, #24]
 800a80c:	8a98      	ldrh	r0, [r3, #20]
 800a80e:	f7fe fea3 	bl	8009558 <lv_color_mix>
 800a812:	1c02      	adds	r2, r0, #0
 800a814:	e6d4      	b.n	800a5c0 <lv_draw_rect+0xf98>
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800a816:	2306      	movs	r3, #6
 800a818:	5ef8      	ldrsh	r0, [r7, r3]
 800a81a:	ab22      	add	r3, sp, #136	; 0x88
 800a81c:	2202      	movs	r2, #2
 800a81e:	5e9b      	ldrsh	r3, [r3, r2]
 800a820:	9908      	ldr	r1, [sp, #32]
 800a822:	1ac3      	subs	r3, r0, r3
 800a824:	20ff      	movs	r0, #255	; 0xff
 800a826:	4358      	muls	r0, r3
 800a828:	f7f5 fc9a 	bl	8000160 <__udivsi3>
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800a82c:	466b      	mov	r3, sp
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800a82e:	b2c2      	uxtb	r2, r0
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800a830:	8b19      	ldrh	r1, [r3, #24]
 800a832:	8a98      	ldrh	r0, [r3, #20]
 800a834:	f7fe fe90 	bl	8009558 <lv_color_mix>
 800a838:	1c02      	adds	r2, r0, #0
 800a83a:	f7ff fade 	bl	8009dfa <lv_draw_rect+0x7d2>
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800a83e:	2206      	movs	r2, #6
 800a840:	5eb8      	ldrsh	r0, [r7, r2]
 800a842:	9908      	ldr	r1, [sp, #32]
 800a844:	1ac3      	subs	r3, r0, r3
 800a846:	20ff      	movs	r0, #255	; 0xff
 800a848:	4358      	muls	r0, r3
 800a84a:	f7f5 fc89 	bl	8000160 <__udivsi3>
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800a84e:	466b      	mov	r3, sp
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800a850:	b2c2      	uxtb	r2, r0
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800a852:	8b19      	ldrh	r1, [r3, #24]
 800a854:	8a98      	ldrh	r0, [r3, #20]
 800a856:	f7fe fe7f 	bl	8009558 <lv_color_mix>
 800a85a:	1c02      	adds	r2, r0, #0
 800a85c:	f7ff fae2 	bl	8009e24 <lv_draw_rect+0x7fc>
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800a860:	2306      	movs	r3, #6
 800a862:	5ef8      	ldrsh	r0, [r7, r3]
 800a864:	ab26      	add	r3, sp, #152	; 0x98
 800a866:	2202      	movs	r2, #2
 800a868:	5e9b      	ldrsh	r3, [r3, r2]
 800a86a:	9908      	ldr	r1, [sp, #32]
 800a86c:	1ac3      	subs	r3, r0, r3
 800a86e:	20ff      	movs	r0, #255	; 0xff
 800a870:	4358      	muls	r0, r3
 800a872:	f7f5 fc75 	bl	8000160 <__udivsi3>
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800a876:	466b      	mov	r3, sp
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800a878:	b2c2      	uxtb	r2, r0
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800a87a:	8b19      	ldrh	r1, [r3, #24]
 800a87c:	8a98      	ldrh	r0, [r3, #20]
 800a87e:	f7fe fe6b 	bl	8009558 <lv_color_mix>
 800a882:	1c02      	adds	r2, r0, #0
 800a884:	f7ff fadb 	bl	8009e3e <lv_draw_rect+0x816>
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800a888:	2206      	movs	r2, #6
 800a88a:	5eb8      	ldrsh	r0, [r7, r2]
 800a88c:	9908      	ldr	r1, [sp, #32]
 800a88e:	1ac3      	subs	r3, r0, r3
 800a890:	20ff      	movs	r0, #255	; 0xff
 800a892:	4358      	muls	r0, r3
 800a894:	f7f5 fc64 	bl	8000160 <__udivsi3>
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800a898:	466b      	mov	r3, sp
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800a89a:	b2c2      	uxtb	r2, r0
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800a89c:	8b19      	ldrh	r1, [r3, #24]
 800a89e:	8a98      	ldrh	r0, [r3, #20]
 800a8a0:	f7fe fe5a 	bl	8009558 <lv_color_mix>
 800a8a4:	1c02      	adds	r2, r0, #0
 800a8a6:	f7ff fadf 	bl	8009e68 <lv_draw_rect+0x840>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800a8aa:	0021      	movs	r1, r4
 800a8ac:	9a07      	ldr	r2, [sp, #28]
 800a8ae:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a8b0:	f7fe f83e 	bl	8008930 <lv_draw_aa_get_opa>
 800a8b4:	9b07      	ldr	r3, [sp, #28]
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800a8b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800a8b8:	1a18      	subs	r0, r3, r0
 800a8ba:	b2c3      	uxtb	r3, r0
 800a8bc:	930c      	str	r3, [sp, #48]	; 0x30
 800a8be:	b2a3      	uxth	r3, r4
 800a8c0:	9314      	str	r3, [sp, #80]	; 0x50
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800a8c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8c4:	189c      	adds	r4, r3, r2
 800a8c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8ca:	191c      	adds	r4, r3, r4
 800a8cc:	466b      	mov	r3, sp
 800a8ce:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a8d0:	1c55      	adds	r5, r2, #1
 800a8d2:	9315      	str	r3, [sp, #84]	; 0x54
 800a8d4:	195d      	adds	r5, r3, r5
 800a8d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8d8:	2244      	movs	r2, #68	; 0x44
 800a8da:	9300      	str	r3, [sp, #0]
 800a8dc:	466b      	mov	r3, sp
 800a8de:	b224      	sxth	r4, r4
 800a8e0:	b22d      	sxth	r5, r5
 800a8e2:	189b      	adds	r3, r3, r2
 800a8e4:	0029      	movs	r1, r5
 800a8e6:	0020      	movs	r0, r4
 800a8e8:	881b      	ldrh	r3, [r3, #0]
 800a8ea:	9a03      	ldr	r2, [sp, #12]
 800a8ec:	f7fe f8f7 	bl	8008ade <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800a8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a8f4:	0029      	movs	r1, r5
 800a8f6:	1a9e      	subs	r6, r3, r2
 800a8f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8fa:	2244      	movs	r2, #68	; 0x44
 800a8fc:	1af6      	subs	r6, r6, r3
 800a8fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a900:	b236      	sxth	r6, r6
 800a902:	9300      	str	r3, [sp, #0]
 800a904:	466b      	mov	r3, sp
 800a906:	189b      	adds	r3, r3, r2
 800a908:	0030      	movs	r0, r6
 800a90a:	881b      	ldrh	r3, [r3, #0]
 800a90c:	9a03      	ldr	r2, [sp, #12]
 800a90e:	f7fe f8e6 	bl	8008ade <lv_draw_px>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800a912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a914:	2248      	movs	r2, #72	; 0x48
 800a916:	1e5d      	subs	r5, r3, #1
 800a918:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a91a:	0030      	movs	r0, r6
 800a91c:	1aed      	subs	r5, r5, r3
 800a91e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a920:	b22d      	sxth	r5, r5
 800a922:	9300      	str	r3, [sp, #0]
 800a924:	466b      	mov	r3, sp
 800a926:	189b      	adds	r3, r3, r2
 800a928:	0029      	movs	r1, r5
 800a92a:	881b      	ldrh	r3, [r3, #0]
 800a92c:	9a03      	ldr	r2, [sp, #12]
 800a92e:	f7fe f8d6 	bl	8008ade <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800a932:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a934:	2248      	movs	r2, #72	; 0x48
 800a936:	9300      	str	r3, [sp, #0]
 800a938:	466b      	mov	r3, sp
 800a93a:	189b      	adds	r3, r3, r2
 800a93c:	881b      	ldrh	r3, [r3, #0]
 800a93e:	9a03      	ldr	r2, [sp, #12]
 800a940:	0029      	movs	r1, r5
 800a942:	0020      	movs	r0, r4
 800a944:	f7fe f8cb 	bl	8008ade <lv_draw_px>
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800a948:	9908      	ldr	r1, [sp, #32]
 800a94a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a94c:	f7f5 fc08 	bl	8000160 <__udivsi3>
 800a950:	b2c3      	uxtb	r3, r0
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800a952:	001a      	movs	r2, r3
            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800a954:	9318      	str	r3, [sp, #96]	; 0x60
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800a956:	466b      	mov	r3, sp
 800a958:	8b19      	ldrh	r1, [r3, #24]
 800a95a:	8a98      	ldrh	r0, [r3, #20]
 800a95c:	f7fe fdfc 	bl	8009558 <lv_color_mix>
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 800a960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a962:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a964:	3301      	adds	r3, #1
 800a966:	18d3      	adds	r3, r2, r3
 800a968:	b21b      	sxth	r3, r3
 800a96a:	9319      	str	r3, [sp, #100]	; 0x64
 800a96c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a96e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800a970:	1c04      	adds	r4, r0, #0
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 800a972:	189e      	adds	r6, r3, r2
 800a974:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a976:	9a03      	ldr	r2, [sp, #12]
 800a978:	199e      	adds	r6, r3, r6
 800a97a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a97c:	b236      	sxth	r6, r6
 800a97e:	0031      	movs	r1, r6
 800a980:	9300      	str	r3, [sp, #0]
 800a982:	1c03      	adds	r3, r0, #0
 800a984:	9819      	ldr	r0, [sp, #100]	; 0x64
 800a986:	f7fe f8aa 	bl	8008ade <lv_draw_px>
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, aa_color_ver,
 800a98a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a98c:	0031      	movs	r1, r6
 800a98e:	1e5d      	subs	r5, r3, #1
 800a990:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a992:	9a03      	ldr	r2, [sp, #12]
 800a994:	1aed      	subs	r5, r5, r3
 800a996:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a998:	b22d      	sxth	r5, r5
 800a99a:	9300      	str	r3, [sp, #0]
 800a99c:	0028      	movs	r0, r5
 800a99e:	1c23      	adds	r3, r4, #0
 800a9a0:	f7fe f89d 	bl	8008ade <lv_draw_px>
            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800a9a4:	466b      	mov	r3, sp
 800a9a6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a9a8:	8a99      	ldrh	r1, [r3, #20]
 800a9aa:	8b18      	ldrh	r0, [r3, #24]
 800a9ac:	f7fe fdd4 	bl	8009558 <lv_color_mix>
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 800a9b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800a9b4:	1c04      	adds	r4, r0, #0
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 800a9b6:	1a9e      	subs	r6, r3, r2
 800a9b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9ba:	9a03      	ldr	r2, [sp, #12]
 800a9bc:	1af6      	subs	r6, r6, r3
 800a9be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9c0:	b236      	sxth	r6, r6
 800a9c2:	9300      	str	r3, [sp, #0]
 800a9c4:	0031      	movs	r1, r6
 800a9c6:	1c03      	adds	r3, r0, #0
 800a9c8:	0028      	movs	r0, r5
 800a9ca:	f7fe f888 	bl	8008ade <lv_draw_px>
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, aa_color_ver,
 800a9ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9d0:	9a03      	ldr	r2, [sp, #12]
 800a9d2:	9300      	str	r3, [sp, #0]
 800a9d4:	0031      	movs	r1, r6
 800a9d6:	1c23      	adds	r3, r4, #0
 800a9d8:	9819      	ldr	r0, [sp, #100]	; 0x64
 800a9da:	f7fe f880 	bl	8008ade <lv_draw_px>
 800a9de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9e0:	33ff      	adds	r3, #255	; 0xff
 800a9e2:	9317      	str	r3, [sp, #92]	; 0x5c
        for(i = 0; i < seg_size; i++) {
 800a9e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9e6:	1c5c      	adds	r4, r3, #1
 800a9e8:	b224      	sxth	r4, r4
 800a9ea:	f7ff fa94 	bl	8009f16 <lv_draw_rect+0x8ee>
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800a9ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a9f0:	4344      	muls	r4, r0
 800a9f2:	0a20      	lsrs	r0, r4, #8
 800a9f4:	9005      	str	r0, [sp, #20]
 800a9f6:	f7ff fb21 	bl	800a03c <lv_draw_rect+0xa14>
        corner_size = radius + aa;
 800a9fa:	9b08      	ldr	r3, [sp, #32]
 800a9fc:	18c3      	adds	r3, r0, r3
 800a9fe:	b21b      	sxth	r3, r3
 800aa00:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t length_corr = 0;
 800aa02:	2300      	movs	r3, #0
 800aa04:	f7ff fb34 	bl	800a070 <lv_draw_rect+0xa48>
 800aa08:	4023      	ands	r3, r4
    corner_size++;
 800aa0a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800aa0c:	9309      	str	r3, [sp, #36]	; 0x24
    if(part & LV_BORDER_TOP)
 800aa0e:	9909      	ldr	r1, [sp, #36]	; 0x24
    corner_size++;
 800aa10:	3601      	adds	r6, #1
 800aa12:	b2b6      	uxth	r6, r6
 800aa14:	887b      	ldrh	r3, [r7, #2]
 800aa16:	aa28      	add	r2, sp, #160	; 0xa0
    if(part & LV_BORDER_TOP)
 800aa18:	2900      	cmp	r1, #0
 800aa1a:	d100      	bne.n	800aa1e <lv_draw_rect+0x13f6>
 800aa1c:	e120      	b.n	800ac60 <lv_draw_rect+0x1638>
        work_area.y1 = coords->y1 + corner_size;
 800aa1e:	18f3      	adds	r3, r6, r3
        work_area.y1 = coords->y1 + radius;
 800aa20:	8053      	strh	r3, [r2, #2]
 800aa22:	2301      	movs	r3, #1
 800aa24:	4023      	ands	r3, r4
 800aa26:	930c      	str	r3, [sp, #48]	; 0x30
    if(part & LV_BORDER_BOTTOM)
 800aa28:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aa2a:	88fb      	ldrh	r3, [r7, #6]
 800aa2c:	aa28      	add	r2, sp, #160	; 0xa0
 800aa2e:	2900      	cmp	r1, #0
 800aa30:	d100      	bne.n	800aa34 <lv_draw_rect+0x140c>
 800aa32:	e117      	b.n	800ac64 <lv_draw_rect+0x163c>
        work_area.y2 = coords->y2 - corner_size;
 800aa34:	1b9b      	subs	r3, r3, r6
        work_area.y2 = coords->y2 - radius;
 800aa36:	80d3      	strh	r3, [r2, #6]
    if(part & LV_BORDER_LEFT) {
 800aa38:	0763      	lsls	r3, r4, #29
 800aa3a:	d50c      	bpl.n	800aa56 <lv_draw_rect+0x142e>
        work_area.x1 = coords->x1;
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	5ebb      	ldrsh	r3, [r7, r2]
        work_area.x2 = work_area.x1 + bwidth;
 800aa40:	9a07      	ldr	r2, [sp, #28]
        work_area.x1 = coords->x1;
 800aa42:	a828      	add	r0, sp, #160	; 0xa0
 800aa44:	8003      	strh	r3, [r0, #0]
        work_area.x2 = work_area.x1 + bwidth;
 800aa46:	18d3      	adds	r3, r2, r3
        lv_draw_fill(&work_area, mask, color, opa);
 800aa48:	466a      	mov	r2, sp
        work_area.x2 = work_area.x1 + bwidth;
 800aa4a:	8083      	strh	r3, [r0, #4]
        lv_draw_fill(&work_area, mask, color, opa);
 800aa4c:	8b12      	ldrh	r2, [r2, #24]
 800aa4e:	9b05      	ldr	r3, [sp, #20]
 800aa50:	9903      	ldr	r1, [sp, #12]
 800aa52:	f7fe f88d 	bl	8008b70 <lv_draw_fill>
    if(part & LV_BORDER_RIGHT) {
 800aa56:	0723      	lsls	r3, r4, #28
 800aa58:	d50c      	bpl.n	800aa74 <lv_draw_rect+0x144c>
        work_area.x2 = coords->x2;
 800aa5a:	2204      	movs	r2, #4
 800aa5c:	5ebb      	ldrsh	r3, [r7, r2]
        work_area.x1 = work_area.x2 - bwidth;
 800aa5e:	9a07      	ldr	r2, [sp, #28]
        work_area.x2 = coords->x2;
 800aa60:	a828      	add	r0, sp, #160	; 0xa0
 800aa62:	8083      	strh	r3, [r0, #4]
        work_area.x1 = work_area.x2 - bwidth;
 800aa64:	1a9b      	subs	r3, r3, r2
        lv_draw_fill(&work_area, mask, color, opa);
 800aa66:	466a      	mov	r2, sp
        work_area.x1 = work_area.x2 - bwidth;
 800aa68:	8003      	strh	r3, [r0, #0]
        lv_draw_fill(&work_area, mask, color, opa);
 800aa6a:	8b12      	ldrh	r2, [r2, #24]
 800aa6c:	9b05      	ldr	r3, [sp, #20]
 800aa6e:	9903      	ldr	r1, [sp, #12]
 800aa70:	f7fe f87e 	bl	8008b70 <lv_draw_fill>
    work_area.x1 = coords->x1 + corner_size - length_corr;
 800aa74:	466b      	mov	r3, sp
 800aa76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa78:	883a      	ldrh	r2, [r7, #0]
 800aa7a:	1af1      	subs	r1, r6, r3
 800aa7c:	a828      	add	r0, sp, #160	; 0xa0
 800aa7e:	1852      	adds	r2, r2, r1
 800aa80:	8002      	strh	r2, [r0, #0]
    work_area.x2 = coords->x2 - corner_size + length_corr;
 800aa82:	88ba      	ldrh	r2, [r7, #4]
 800aa84:	189b      	adds	r3, r3, r2
 800aa86:	1b9e      	subs	r6, r3, r6
    if(part & LV_BORDER_TOP) {
 800aa88:	9b09      	ldr	r3, [sp, #36]	; 0x24
    work_area.x2 = coords->x2 - corner_size + length_corr;
 800aa8a:	8086      	strh	r6, [r0, #4]
    if(part & LV_BORDER_TOP) {
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d00b      	beq.n	800aaa8 <lv_draw_rect+0x1480>
        work_area.y1 = coords->y1;
 800aa90:	2202      	movs	r2, #2
 800aa92:	5ebb      	ldrsh	r3, [r7, r2]
        work_area.y2 = coords->y1 + bwidth;
 800aa94:	9a07      	ldr	r2, [sp, #28]
        work_area.y1 = coords->y1;
 800aa96:	8043      	strh	r3, [r0, #2]
        work_area.y2 = coords->y1 + bwidth;
 800aa98:	18d3      	adds	r3, r2, r3
        lv_draw_fill(&work_area, mask, color, opa);
 800aa9a:	466a      	mov	r2, sp
        work_area.y2 = coords->y1 + bwidth;
 800aa9c:	80c3      	strh	r3, [r0, #6]
        lv_draw_fill(&work_area, mask, color, opa);
 800aa9e:	8b12      	ldrh	r2, [r2, #24]
 800aaa0:	9b05      	ldr	r3, [sp, #20]
 800aaa2:	9903      	ldr	r1, [sp, #12]
 800aaa4:	f7fe f864 	bl	8008b70 <lv_draw_fill>
    if(part & LV_BORDER_BOTTOM) {
 800aaa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00c      	beq.n	800aac8 <lv_draw_rect+0x14a0>
        work_area.y2 = coords->y2;
 800aaae:	2206      	movs	r2, #6
 800aab0:	5ebb      	ldrsh	r3, [r7, r2]
        work_area.y1 = work_area.y2 - bwidth;
 800aab2:	9a07      	ldr	r2, [sp, #28]
        work_area.y2 = coords->y2;
 800aab4:	a828      	add	r0, sp, #160	; 0xa0
 800aab6:	80c3      	strh	r3, [r0, #6]
        work_area.y1 = work_area.y2 - bwidth;
 800aab8:	1a9b      	subs	r3, r3, r2
        lv_draw_fill(&work_area, mask, color, opa);
 800aaba:	466a      	mov	r2, sp
        work_area.y1 = work_area.y2 - bwidth;
 800aabc:	8043      	strh	r3, [r0, #2]
        lv_draw_fill(&work_area, mask, color, opa);
 800aabe:	8b12      	ldrh	r2, [r2, #24]
 800aac0:	9b05      	ldr	r3, [sp, #20]
 800aac2:	9903      	ldr	r1, [sp, #12]
 800aac4:	f7fe f854 	bl	8008b70 <lv_draw_fill>
    if(length_corr != 0) {
 800aac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d06b      	beq.n	800aba6 <lv_draw_rect+0x157e>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800aace:	2306      	movs	r3, #6
 800aad0:	4023      	ands	r3, r4
 800aad2:	2b06      	cmp	r3, #6
 800aad4:	d116      	bne.n	800ab04 <lv_draw_rect+0x14dc>
            work_area.x1 = coords->x1;
 800aad6:	2300      	movs	r3, #0
 800aad8:	5efa      	ldrsh	r2, [r7, r3]
            work_area.x2 = coords->x1 + radius + aa;
 800aada:	466b      	mov	r3, sp
 800aadc:	8c1b      	ldrh	r3, [r3, #32]
            work_area.x1 = coords->x1;
 800aade:	a828      	add	r0, sp, #160	; 0xa0
 800aae0:	8002      	strh	r2, [r0, #0]
            work_area.x2 = coords->x1 + radius + aa;
 800aae2:	189a      	adds	r2, r3, r2
 800aae4:	18aa      	adds	r2, r5, r2
 800aae6:	8082      	strh	r2, [r0, #4]
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800aae8:	887a      	ldrh	r2, [r7, #2]
 800aaea:	1c51      	adds	r1, r2, #1
 800aaec:	185b      	adds	r3, r3, r1
 800aaee:	18eb      	adds	r3, r5, r3
 800aaf0:	8043      	strh	r3, [r0, #2]
            work_area.y2 = coords->y1 + bwidth;
 800aaf2:	9b07      	ldr	r3, [sp, #28]
            lv_draw_fill(&work_area, mask, color, opa);
 800aaf4:	9903      	ldr	r1, [sp, #12]
            work_area.y2 = coords->y1 + bwidth;
 800aaf6:	189a      	adds	r2, r3, r2
 800aaf8:	80c2      	strh	r2, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800aafa:	466a      	mov	r2, sp
 800aafc:	9b05      	ldr	r3, [sp, #20]
 800aafe:	8b12      	ldrh	r2, [r2, #24]
 800ab00:	f7fe f836 	bl	8008b70 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800ab04:	230a      	movs	r3, #10
 800ab06:	4023      	ands	r3, r4
 800ab08:	2b0a      	cmp	r3, #10
 800ab0a:	d116      	bne.n	800ab3a <lv_draw_rect+0x1512>
            work_area.x1 = coords->x2 - radius - aa;
 800ab0c:	2304      	movs	r3, #4
 800ab0e:	5ef9      	ldrsh	r1, [r7, r3]
 800ab10:	466b      	mov	r3, sp
 800ab12:	8c1b      	ldrh	r3, [r3, #32]
 800ab14:	1b4a      	subs	r2, r1, r5
 800ab16:	a828      	add	r0, sp, #160	; 0xa0
 800ab18:	1ad2      	subs	r2, r2, r3
            work_area.x2 = coords->x2;
 800ab1a:	8081      	strh	r1, [r0, #4]
            work_area.x1 = coords->x2 - radius - aa;
 800ab1c:	8002      	strh	r2, [r0, #0]
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800ab1e:	887a      	ldrh	r2, [r7, #2]
 800ab20:	1c51      	adds	r1, r2, #1
 800ab22:	185b      	adds	r3, r3, r1
 800ab24:	18eb      	adds	r3, r5, r3
 800ab26:	8043      	strh	r3, [r0, #2]
            work_area.y2 = coords->y1 + bwidth;
 800ab28:	9b07      	ldr	r3, [sp, #28]
            lv_draw_fill(&work_area, mask, color, opa);
 800ab2a:	9903      	ldr	r1, [sp, #12]
            work_area.y2 = coords->y1 + bwidth;
 800ab2c:	189a      	adds	r2, r3, r2
 800ab2e:	80c2      	strh	r2, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800ab30:	466a      	mov	r2, sp
 800ab32:	9b05      	ldr	r3, [sp, #20]
 800ab34:	8b12      	ldrh	r2, [r2, #24]
 800ab36:	f7fe f81b 	bl	8008b70 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800ab3a:	2305      	movs	r3, #5
 800ab3c:	4023      	ands	r3, r4
 800ab3e:	2b05      	cmp	r3, #5
 800ab40:	d116      	bne.n	800ab70 <lv_draw_rect+0x1548>
            work_area.x1 = coords->x1;
 800ab42:	2300      	movs	r3, #0
 800ab44:	5efa      	ldrsh	r2, [r7, r3]
            work_area.x2 = coords->x1 + radius + aa;
 800ab46:	466b      	mov	r3, sp
 800ab48:	8c19      	ldrh	r1, [r3, #32]
            work_area.x1 = coords->x1;
 800ab4a:	a828      	add	r0, sp, #160	; 0xa0
 800ab4c:	8002      	strh	r2, [r0, #0]
            work_area.x2 = coords->x1 + radius + aa;
 800ab4e:	188a      	adds	r2, r1, r2
 800ab50:	18aa      	adds	r2, r5, r2
 800ab52:	8082      	strh	r2, [r0, #4]
            work_area.y1 = coords->y2 - bwidth;
 800ab54:	88fb      	ldrh	r3, [r7, #6]
 800ab56:	9a07      	ldr	r2, [sp, #28]
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800ab58:	43c9      	mvns	r1, r1
            work_area.y1 = coords->y2 - bwidth;
 800ab5a:	1a9a      	subs	r2, r3, r2
 800ab5c:	8042      	strh	r2, [r0, #2]
            lv_draw_fill(&work_area, mask, color, opa);
 800ab5e:	466a      	mov	r2, sp
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800ab60:	185b      	adds	r3, r3, r1
 800ab62:	1b5b      	subs	r3, r3, r5
 800ab64:	80c3      	strh	r3, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800ab66:	8b12      	ldrh	r2, [r2, #24]
 800ab68:	9b05      	ldr	r3, [sp, #20]
 800ab6a:	9903      	ldr	r1, [sp, #12]
 800ab6c:	f7fe f800 	bl	8008b70 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800ab70:	2309      	movs	r3, #9
 800ab72:	4023      	ands	r3, r4
 800ab74:	2b09      	cmp	r3, #9
 800ab76:	d116      	bne.n	800aba6 <lv_draw_rect+0x157e>
            work_area.x1 = coords->x2 - radius - aa;
 800ab78:	2304      	movs	r3, #4
 800ab7a:	5efe      	ldrsh	r6, [r7, r3]
 800ab7c:	466b      	mov	r3, sp
 800ab7e:	8c19      	ldrh	r1, [r3, #32]
 800ab80:	1b73      	subs	r3, r6, r5
 800ab82:	1a5b      	subs	r3, r3, r1
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800ab84:	43c9      	mvns	r1, r1
            work_area.x1 = coords->x2 - radius - aa;
 800ab86:	a828      	add	r0, sp, #160	; 0xa0
 800ab88:	8003      	strh	r3, [r0, #0]
            work_area.x2 = coords->x2;
 800ab8a:	8086      	strh	r6, [r0, #4]
            work_area.y1 = coords->y2 - bwidth;
 800ab8c:	88fa      	ldrh	r2, [r7, #6]
 800ab8e:	9b07      	ldr	r3, [sp, #28]
 800ab90:	1ad3      	subs	r3, r2, r3
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800ab92:	1852      	adds	r2, r2, r1
 800ab94:	1b55      	subs	r5, r2, r5
            lv_draw_fill(&work_area, mask, color, opa);
 800ab96:	466a      	mov	r2, sp
            work_area.y1 = coords->y2 - bwidth;
 800ab98:	8043      	strh	r3, [r0, #2]
            lv_draw_fill(&work_area, mask, color, opa);
 800ab9a:	8b12      	ldrh	r2, [r2, #24]
 800ab9c:	9b05      	ldr	r3, [sp, #20]
 800ab9e:	9903      	ldr	r1, [sp, #12]
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800aba0:	80c5      	strh	r5, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800aba2:	f7fd ffe5 	bl	8008b70 <lv_draw_fill>
    if(style->body.radius == 0) {
 800aba6:	9b04      	ldr	r3, [sp, #16]
 800aba8:	2206      	movs	r2, #6
 800abaa:	5e9b      	ldrsh	r3, [r3, r2]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d001      	beq.n	800abb4 <lv_draw_rect+0x158c>
 800abb0:	f7ff fac7 	bl	800a142 <lv_draw_rect+0xb1a>
        if(part & (LV_BORDER_TOP | LV_BORDER_LEFT)) {
 800abb4:	3306      	adds	r3, #6
 800abb6:	421c      	tst	r4, r3
 800abb8:	d012      	beq.n	800abe0 <lv_draw_rect+0x15b8>
            work_area.x1 = coords->x1;
 800abba:	2300      	movs	r3, #0
 800abbc:	5efa      	ldrsh	r2, [r7, r3]
            work_area.x2 = coords->x1 + aa;
 800abbe:	466b      	mov	r3, sp
 800abc0:	8c1b      	ldrh	r3, [r3, #32]
            work_area.x1 = coords->x1;
 800abc2:	a828      	add	r0, sp, #160	; 0xa0
 800abc4:	8002      	strh	r2, [r0, #0]
            work_area.x2 = coords->x1 + aa;
 800abc6:	189a      	adds	r2, r3, r2
 800abc8:	8082      	strh	r2, [r0, #4]
            work_area.y1 = coords->y1;
 800abca:	2102      	movs	r1, #2
 800abcc:	5e7a      	ldrsh	r2, [r7, r1]
            lv_draw_fill(&work_area, mask, color, opa);
 800abce:	9903      	ldr	r1, [sp, #12]
            work_area.y2 = coords->y1 + aa;
 800abd0:	189b      	adds	r3, r3, r2
            work_area.y1 = coords->y1;
 800abd2:	8042      	strh	r2, [r0, #2]
            lv_draw_fill(&work_area, mask, color, opa);
 800abd4:	466a      	mov	r2, sp
            work_area.y2 = coords->y1 + aa;
 800abd6:	80c3      	strh	r3, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800abd8:	8b12      	ldrh	r2, [r2, #24]
 800abda:	9b05      	ldr	r3, [sp, #20]
 800abdc:	f7fd ffc8 	bl	8008b70 <lv_draw_fill>
        if(part & (LV_BORDER_TOP | LV_BORDER_RIGHT)) {
 800abe0:	230a      	movs	r3, #10
 800abe2:	421c      	tst	r4, r3
 800abe4:	d012      	beq.n	800ac0c <lv_draw_rect+0x15e4>
            work_area.x1 = coords->x2 - aa;
 800abe6:	2304      	movs	r3, #4
 800abe8:	5efa      	ldrsh	r2, [r7, r3]
 800abea:	466b      	mov	r3, sp
 800abec:	8c1b      	ldrh	r3, [r3, #32]
 800abee:	a828      	add	r0, sp, #160	; 0xa0
 800abf0:	1ad1      	subs	r1, r2, r3
 800abf2:	8001      	strh	r1, [r0, #0]
            work_area.x2 = coords->x2;
 800abf4:	8082      	strh	r2, [r0, #4]
            work_area.y1 = coords->y1;
 800abf6:	2102      	movs	r1, #2
 800abf8:	5e7a      	ldrsh	r2, [r7, r1]
            lv_draw_fill(&work_area, mask, color, opa);
 800abfa:	9903      	ldr	r1, [sp, #12]
            work_area.y2 = coords->y1 + aa;
 800abfc:	189b      	adds	r3, r3, r2
            work_area.y1 = coords->y1;
 800abfe:	8042      	strh	r2, [r0, #2]
            lv_draw_fill(&work_area, mask, color, opa);
 800ac00:	466a      	mov	r2, sp
            work_area.y2 = coords->y1 + aa;
 800ac02:	80c3      	strh	r3, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800ac04:	8b12      	ldrh	r2, [r2, #24]
 800ac06:	9b05      	ldr	r3, [sp, #20]
 800ac08:	f7fd ffb2 	bl	8008b70 <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_LEFT)) {
 800ac0c:	2305      	movs	r3, #5
 800ac0e:	421c      	tst	r4, r3
 800ac10:	d012      	beq.n	800ac38 <lv_draw_rect+0x1610>
            work_area.x1 = coords->x1;
 800ac12:	2300      	movs	r3, #0
 800ac14:	5efa      	ldrsh	r2, [r7, r3]
            work_area.x2 = coords->x1 + aa;
 800ac16:	466b      	mov	r3, sp
 800ac18:	8c1b      	ldrh	r3, [r3, #32]
            work_area.x1 = coords->x1;
 800ac1a:	a828      	add	r0, sp, #160	; 0xa0
 800ac1c:	8002      	strh	r2, [r0, #0]
            work_area.x2 = coords->x1 + aa;
 800ac1e:	189a      	adds	r2, r3, r2
 800ac20:	8082      	strh	r2, [r0, #4]
            work_area.y1 = coords->y2 - aa;
 800ac22:	2106      	movs	r1, #6
 800ac24:	5e7a      	ldrsh	r2, [r7, r1]
            lv_draw_fill(&work_area, mask, color, opa);
 800ac26:	9903      	ldr	r1, [sp, #12]
            work_area.y1 = coords->y2 - aa;
 800ac28:	1ad3      	subs	r3, r2, r3
            work_area.y2 = coords->y2;
 800ac2a:	80c2      	strh	r2, [r0, #6]
            lv_draw_fill(&work_area, mask, color, opa);
 800ac2c:	466a      	mov	r2, sp
            work_area.y1 = coords->y2 - aa;
 800ac2e:	8043      	strh	r3, [r0, #2]
            lv_draw_fill(&work_area, mask, color, opa);
 800ac30:	8b12      	ldrh	r2, [r2, #24]
 800ac32:	9b05      	ldr	r3, [sp, #20]
 800ac34:	f7fd ff9c 	bl	8008b70 <lv_draw_fill>
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_RIGHT)) {
 800ac38:	2309      	movs	r3, #9
 800ac3a:	421c      	tst	r4, r3
 800ac3c:	d101      	bne.n	800ac42 <lv_draw_rect+0x161a>
 800ac3e:	f7ff fa80 	bl	800a142 <lv_draw_rect+0xb1a>
            work_area.x1 = coords->x2 - aa;
 800ac42:	2304      	movs	r3, #4
 800ac44:	5efa      	ldrsh	r2, [r7, r3]
 800ac46:	466b      	mov	r3, sp
 800ac48:	8c1b      	ldrh	r3, [r3, #32]
 800ac4a:	a828      	add	r0, sp, #160	; 0xa0
 800ac4c:	1ad1      	subs	r1, r2, r3
 800ac4e:	8001      	strh	r1, [r0, #0]
            work_area.x2 = coords->x2;
 800ac50:	8082      	strh	r2, [r0, #4]
            work_area.y1 = coords->y2 - aa;
 800ac52:	2106      	movs	r1, #6
 800ac54:	5e7a      	ldrsh	r2, [r7, r1]
 800ac56:	1ad3      	subs	r3, r2, r3
 800ac58:	8043      	strh	r3, [r0, #2]
            work_area.y2 = coords->y2;
 800ac5a:	80c2      	strh	r2, [r0, #6]
 800ac5c:	f7ff fa6b 	bl	800a136 <lv_draw_rect+0xb0e>
        work_area.y1 = coords->y1 + radius;
 800ac60:	18eb      	adds	r3, r5, r3
 800ac62:	e6dd      	b.n	800aa20 <lv_draw_rect+0x13f8>
        work_area.y2 = coords->y2 - radius;
 800ac64:	1b5b      	subs	r3, r3, r5
 800ac66:	e6e6      	b.n	800aa36 <lv_draw_rect+0x140e>
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800ac68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac6a:	4353      	muls	r3, r2
 800ac6c:	0a1b      	lsrs	r3, r3, #8
 800ac6e:	f7ff fa85 	bl	800a17c <lv_draw_rect+0xb54>
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800ac72:	3c02      	subs	r4, #2
 800ac74:	f7ff fa8a 	bl	800a18c <lv_draw_rect+0xb64>
        if(cir_in.y < cir_in.x) {
 800ac78:	a926      	add	r1, sp, #152	; 0x98
 800ac7a:	2000      	movs	r0, #0
 800ac7c:	5e0b      	ldrsh	r3, [r1, r0]
 800ac7e:	2002      	movs	r0, #2
 800ac80:	5e09      	ldrsh	r1, [r1, r0]
 800ac82:	4299      	cmp	r1, r3
 800ac84:	db00      	blt.n	800ac88 <lv_draw_rect+0x1660>
 800ac86:	e121      	b.n	800aecc <lv_draw_rect+0x18a4>
            act_w1 = cir_out.x - cir_in.x;
 800ac88:	1ad3      	subs	r3, r2, r3
 800ac8a:	b21b      	sxth	r3, r3
 800ac8c:	930f      	str	r3, [sp, #60]	; 0x3c
            act_w2 = act_w1 - 1;
 800ac8e:	9312      	str	r3, [sp, #72]	; 0x48
        if(aa) {
 800ac90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d036      	beq.n	800ad04 <lv_draw_rect+0x16dc>
            if(out_x_last != cir_out.x) {
 800ac96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d014      	beq.n	800acc6 <lv_draw_rect+0x169e>
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800ac9c:	224c      	movs	r2, #76	; 0x4c
 800ac9e:	466b      	mov	r3, sp
                for(i = 0; i < seg_size; i++) {
 800aca0:	2500      	movs	r5, #0
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800aca2:	189b      	adds	r3, r3, r2
 800aca4:	881b      	ldrh	r3, [r3, #0]
 800aca6:	930d      	str	r3, [sp, #52]	; 0x34
 800aca8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800acaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800acac:	1a9b      	subs	r3, r3, r2
 800acae:	b21b      	sxth	r3, r3
 800acb0:	9313      	str	r3, [sp, #76]	; 0x4c
                for(i = 0; i < seg_size; i++) {
 800acb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800acb4:	42ab      	cmp	r3, r5
 800acb6:	dd00      	ble.n	800acba <lv_draw_rect+0x1692>
 800acb8:	e110      	b.n	800aedc <lv_draw_rect+0x18b4>
                out_x_last      = cir_out.x;
 800acba:	ab24      	add	r3, sp, #144	; 0x90
 800acbc:	2200      	movs	r2, #0
 800acbe:	5e9b      	ldrsh	r3, [r3, r2]
 800acc0:	930c      	str	r3, [sp, #48]	; 0x30
 800acc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800acc4:	9313      	str	r3, [sp, #76]	; 0x4c
            if(in_x_last != cir_in.x) {
 800acc6:	ab26      	add	r3, sp, #152	; 0x98
 800acc8:	2200      	movs	r2, #0
 800acca:	5e9b      	ldrsh	r3, [r3, r2]
 800accc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acce:	4293      	cmp	r3, r2
 800acd0:	d018      	beq.n	800ad04 <lv_draw_rect+0x16dc>
                in_y_seg_end        = cir_out.y;
 800acd2:	ab24      	add	r3, sp, #144	; 0x90
 800acd4:	2202      	movs	r2, #2
 800acd6:	5e9b      	ldrsh	r3, [r3, r2]
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800acd8:	2244      	movs	r2, #68	; 0x44
                in_y_seg_end        = cir_out.y;
 800acda:	9317      	str	r3, [sp, #92]	; 0x5c
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800acdc:	466b      	mov	r3, sp
 800acde:	189b      	adds	r3, r3, r2
 800ace0:	881e      	ldrh	r6, [r3, #0]
 800ace2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ace4:	1b9b      	subs	r3, r3, r6
 800ace6:	b21b      	sxth	r3, r3
 800ace8:	930d      	str	r3, [sp, #52]	; 0x34
 800acea:	2300      	movs	r3, #0
                for(i = 0; i < seg_size; i++) {
 800acec:	001c      	movs	r4, r3
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800acee:	9310      	str	r3, [sp, #64]	; 0x40
                for(i = 0; i < seg_size; i++) {
 800acf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acf2:	42a3      	cmp	r3, r4
 800acf4:	dd00      	ble.n	800acf8 <lv_draw_rect+0x16d0>
 800acf6:	e19d      	b.n	800b034 <lv_draw_rect+0x1a0c>
                in_x_last      = cir_in.x;
 800acf8:	ab26      	add	r3, sp, #152	; 0x98
 800acfa:	2200      	movs	r2, #0
 800acfc:	5e9b      	ldrsh	r3, [r3, r2]
 800acfe:	930a      	str	r3, [sp, #40]	; 0x28
                in_y_seg_start = in_y_seg_end;
 800ad00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad02:	9311      	str	r3, [sp, #68]	; 0x44
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800ad04:	2209      	movs	r2, #9
 800ad06:	9b05      	ldr	r3, [sp, #20]
 800ad08:	4013      	ands	r3, r2
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d12b      	bne.n	800ad66 <lv_draw_rect+0x173e>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 800ad0e:	ad24      	add	r5, sp, #144	; 0x90
 800ad10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad12:	882b      	ldrh	r3, [r5, #0]
 800ad14:	ac28      	add	r4, sp, #160	; 0xa0
 800ad16:	18d3      	adds	r3, r2, r3
 800ad18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	1a9a      	subs	r2, r3, r2
 800ad1e:	8022      	strh	r2, [r4, #0]
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT1_X(cir_out);
 800ad20:	80a3      	strh	r3, [r4, #4]
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800ad22:	886b      	ldrh	r3, [r5, #2]
 800ad24:	9a07      	ldr	r2, [sp, #28]
            lv_draw_fill(&circ_area, mask, color, opa);
 800ad26:	9903      	ldr	r1, [sp, #12]
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800ad28:	18d3      	adds	r3, r2, r3
            lv_draw_fill(&circ_area, mask, color, opa);
 800ad2a:	466a      	mov	r2, sp
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800ad2c:	b21b      	sxth	r3, r3
 800ad2e:	8063      	strh	r3, [r4, #2]
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800ad30:	80e3      	strh	r3, [r4, #6]
            lv_draw_fill(&circ_area, mask, color, opa);
 800ad32:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800ad34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad36:	0020      	movs	r0, r4
 800ad38:	f7fd ff1a 	bl	8008b70 <lv_draw_fill>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800ad3c:	886b      	ldrh	r3, [r5, #2]
 800ad3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
            lv_draw_fill(&circ_area, mask, color, opa);
 800ad40:	9903      	ldr	r1, [sp, #12]
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800ad42:	18d3      	adds	r3, r2, r3
 800ad44:	b21b      	sxth	r3, r3
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800ad46:	9a07      	ldr	r2, [sp, #28]
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800ad48:	8023      	strh	r3, [r4, #0]
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800ad4a:	80a3      	strh	r3, [r4, #4]
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800ad4c:	882b      	ldrh	r3, [r5, #0]
            lv_draw_fill(&circ_area, mask, color, opa);
 800ad4e:	0020      	movs	r0, r4
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800ad50:	18d3      	adds	r3, r2, r3
 800ad52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	1a9a      	subs	r2, r3, r2
 800ad58:	8062      	strh	r2, [r4, #2]
            lv_draw_fill(&circ_area, mask, color, opa);
 800ad5a:	466a      	mov	r2, sp
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out);
 800ad5c:	80e3      	strh	r3, [r4, #6]
            lv_draw_fill(&circ_area, mask, color, opa);
 800ad5e:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800ad60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad62:	f7fd ff05 	bl	8008b70 <lv_draw_fill>
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800ad66:	2205      	movs	r2, #5
 800ad68:	9b05      	ldr	r3, [sp, #20]
 800ad6a:	4013      	ands	r3, r2
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d12b      	bne.n	800adc8 <lv_draw_rect+0x17a0>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800ad70:	ad24      	add	r5, sp, #144	; 0x90
 800ad72:	886b      	ldrh	r3, [r5, #2]
 800ad74:	9a08      	ldr	r2, [sp, #32]
 800ad76:	ac28      	add	r4, sp, #160	; 0xa0
 800ad78:	1ad3      	subs	r3, r2, r3
 800ad7a:	b21b      	sxth	r3, r3
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800ad7c:	9a07      	ldr	r2, [sp, #28]
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800ad7e:	8023      	strh	r3, [r4, #0]
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800ad80:	80a3      	strh	r3, [r4, #4]
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800ad82:	882b      	ldrh	r3, [r5, #0]
            lv_draw_fill(&circ_area, mask, color, opa);
 800ad84:	9903      	ldr	r1, [sp, #12]
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800ad86:	18d3      	adds	r3, r2, r3
 800ad88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	1a9a      	subs	r2, r3, r2
 800ad8e:	8062      	strh	r2, [r4, #2]
            lv_draw_fill(&circ_area, mask, color, opa);
 800ad90:	466a      	mov	r2, sp
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out);
 800ad92:	80e3      	strh	r3, [r4, #6]
            lv_draw_fill(&circ_area, mask, color, opa);
 800ad94:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800ad96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad98:	0020      	movs	r0, r4
 800ad9a:	f7fd fee9 	bl	8008b70 <lv_draw_fill>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800ad9e:	9a08      	ldr	r2, [sp, #32]
 800ada0:	882b      	ldrh	r3, [r5, #0]
            lv_draw_fill(&circ_area, mask, color, opa);
 800ada2:	9903      	ldr	r1, [sp, #12]
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800ada4:	1ad3      	subs	r3, r2, r3
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 800ada6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	8023      	strh	r3, [r4, #0]
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 800adac:	189b      	adds	r3, r3, r2
 800adae:	80a3      	strh	r3, [r4, #4]
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800adb0:	886b      	ldrh	r3, [r5, #2]
 800adb2:	9a07      	ldr	r2, [sp, #28]
            lv_draw_fill(&circ_area, mask, color, opa);
 800adb4:	0020      	movs	r0, r4
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800adb6:	18d3      	adds	r3, r2, r3
            lv_draw_fill(&circ_area, mask, color, opa);
 800adb8:	466a      	mov	r2, sp
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800adba:	b21b      	sxth	r3, r3
 800adbc:	8063      	strh	r3, [r4, #2]
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800adbe:	80e3      	strh	r3, [r4, #6]
            lv_draw_fill(&circ_area, mask, color, opa);
 800adc0:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800adc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adc4:	f7fd fed4 	bl	8008b70 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800adc8:	2306      	movs	r3, #6
 800adca:	9a05      	ldr	r2, [sp, #20]
 800adcc:	4013      	ands	r3, r2
 800adce:	2b06      	cmp	r3, #6
 800add0:	d132      	bne.n	800ae38 <lv_draw_rect+0x1810>
            if(lb_origo.y + LV_CIRC_OCT4_Y(cir_out) > lt_origo.y + LV_CIRC_OCT5_Y(cir_out)) {
 800add2:	aa24      	add	r2, sp, #144	; 0x90
 800add4:	2102      	movs	r1, #2
 800add6:	5e53      	ldrsh	r3, [r2, r1]
 800add8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800adda:	18c8      	adds	r0, r1, r3
 800addc:	9915      	ldr	r1, [sp, #84]	; 0x54
 800adde:	1ac9      	subs	r1, r1, r3
 800ade0:	4288      	cmp	r0, r1
 800ade2:	dd13      	ble.n	800ae0c <lv_draw_rect+0x17e4>
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 800ade4:	9908      	ldr	r1, [sp, #32]
 800ade6:	8812      	ldrh	r2, [r2, #0]
 800ade8:	a828      	add	r0, sp, #160	; 0xa0
 800adea:	1a8a      	subs	r2, r1, r2
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 800adec:	9912      	ldr	r1, [sp, #72]	; 0x48
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 800adee:	b292      	uxth	r2, r2
 800adf0:	8002      	strh	r2, [r0, #0]
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 800adf2:	1852      	adds	r2, r2, r1
 800adf4:	8082      	strh	r2, [r0, #4]
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800adf6:	9a06      	ldr	r2, [sp, #24]
                lv_draw_fill(&circ_area, mask, color, opa);
 800adf8:	9903      	ldr	r1, [sp, #12]
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800adfa:	1ad3      	subs	r3, r2, r3
                lv_draw_fill(&circ_area, mask, color, opa);
 800adfc:	466a      	mov	r2, sp
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800adfe:	b21b      	sxth	r3, r3
 800ae00:	8043      	strh	r3, [r0, #2]
                circ_area.y2 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800ae02:	80c3      	strh	r3, [r0, #6]
                lv_draw_fill(&circ_area, mask, color, opa);
 800ae04:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800ae06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae08:	f7fd feb2 	bl	8008b70 <lv_draw_fill>
            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800ae0c:	aa24      	add	r2, sp, #144	; 0x90
 800ae0e:	8853      	ldrh	r3, [r2, #2]
 800ae10:	9908      	ldr	r1, [sp, #32]
 800ae12:	a828      	add	r0, sp, #160	; 0xa0
 800ae14:	1acb      	subs	r3, r1, r3
 800ae16:	b21b      	sxth	r3, r3
 800ae18:	8003      	strh	r3, [r0, #0]
            circ_area.x2 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800ae1a:	8083      	strh	r3, [r0, #4]
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800ae1c:	8813      	ldrh	r3, [r2, #0]
 800ae1e:	9a06      	ldr	r2, [sp, #24]
            lv_draw_fill(&circ_area, mask, color, opa);
 800ae20:	9903      	ldr	r1, [sp, #12]
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800ae22:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800ae24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	8043      	strh	r3, [r0, #2]
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800ae2a:	189b      	adds	r3, r3, r2
            lv_draw_fill(&circ_area, mask, color, opa);
 800ae2c:	466a      	mov	r2, sp
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800ae2e:	80c3      	strh	r3, [r0, #6]
            lv_draw_fill(&circ_area, mask, color, opa);
 800ae30:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800ae32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae34:	f7fd fe9c 	bl	8008b70 <lv_draw_fill>
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800ae38:	230a      	movs	r3, #10
 800ae3a:	9a05      	ldr	r2, [sp, #20]
 800ae3c:	4013      	ands	r3, r2
 800ae3e:	2b0a      	cmp	r3, #10
 800ae40:	d132      	bne.n	800aea8 <lv_draw_rect+0x1880>
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800ae42:	ad24      	add	r5, sp, #144	; 0x90
 800ae44:	886b      	ldrh	r3, [r5, #2]
 800ae46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae48:	ac28      	add	r4, sp, #160	; 0xa0
 800ae4a:	18d3      	adds	r3, r2, r3
 800ae4c:	b21b      	sxth	r3, r3
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800ae4e:	9a06      	ldr	r2, [sp, #24]
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800ae50:	8023      	strh	r3, [r4, #0]
            circ_area.x2 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800ae52:	80a3      	strh	r3, [r4, #4]
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800ae54:	882b      	ldrh	r3, [r5, #0]
            lv_draw_fill(&circ_area, mask, color, opa);
 800ae56:	9903      	ldr	r1, [sp, #12]
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800ae58:	1ad3      	subs	r3, r2, r3
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800ae5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	8063      	strh	r3, [r4, #2]
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800ae60:	189b      	adds	r3, r3, r2
            lv_draw_fill(&circ_area, mask, color, opa);
 800ae62:	466a      	mov	r2, sp
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800ae64:	80e3      	strh	r3, [r4, #6]
            lv_draw_fill(&circ_area, mask, color, opa);
 800ae66:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800ae68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae6a:	0020      	movs	r0, r4
 800ae6c:	f7fd fe80 	bl	8008b70 <lv_draw_fill>
            if(rb_origo.y + LV_CIRC_OCT1_Y(cir_out) > rt_origo.y + LV_CIRC_OCT8_Y(cir_out)) {
 800ae70:	2202      	movs	r2, #2
 800ae72:	5eab      	ldrsh	r3, [r5, r2]
 800ae74:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ae76:	18d1      	adds	r1, r2, r3
 800ae78:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ae7a:	1ad2      	subs	r2, r2, r3
 800ae7c:	4291      	cmp	r1, r2
 800ae7e:	dd13      	ble.n	800aea8 <lv_draw_rect+0x1880>
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 800ae80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae82:	8829      	ldrh	r1, [r5, #0]
                lv_draw_fill(&circ_area, mask, color, opa);
 800ae84:	0020      	movs	r0, r4
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 800ae86:	1851      	adds	r1, r2, r1
 800ae88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae8a:	b289      	uxth	r1, r1
 800ae8c:	1a8a      	subs	r2, r1, r2
 800ae8e:	8022      	strh	r2, [r4, #0]
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800ae90:	9a06      	ldr	r2, [sp, #24]
                circ_area.x2 = rt_origo.x + LV_CIRC_OCT8_X(cir_out);
 800ae92:	80a1      	strh	r1, [r4, #4]
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800ae94:	1ad3      	subs	r3, r2, r3
                lv_draw_fill(&circ_area, mask, color, opa);
 800ae96:	466a      	mov	r2, sp
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800ae98:	b21b      	sxth	r3, r3
 800ae9a:	8063      	strh	r3, [r4, #2]
                circ_area.y2 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800ae9c:	80e3      	strh	r3, [r4, #6]
                lv_draw_fill(&circ_area, mask, color, opa);
 800ae9e:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800aea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aea2:	9903      	ldr	r1, [sp, #12]
 800aea4:	f7fd fe64 	bl	8008b70 <lv_draw_fill>
        lv_circ_next(&cir_out, &tmp_out);
 800aea8:	a920      	add	r1, sp, #128	; 0x80
 800aeaa:	a824      	add	r0, sp, #144	; 0x90
 800aeac:	f001 fa11 	bl	800c2d2 <lv_circ_next>
        if(cir_in.y < cir_in.x) {
 800aeb0:	a826      	add	r0, sp, #152	; 0x98
 800aeb2:	2302      	movs	r3, #2
 800aeb4:	5ec2      	ldrsh	r2, [r0, r3]
 800aeb6:	2100      	movs	r1, #0
 800aeb8:	5e43      	ldrsh	r3, [r0, r1]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	db01      	blt.n	800aec2 <lv_draw_rect+0x189a>
 800aebe:	f7ff f9ac 	bl	800a21a <lv_draw_rect+0xbf2>
            lv_circ_next(&cir_in, &tmp_in);
 800aec2:	a922      	add	r1, sp, #136	; 0x88
 800aec4:	f001 fa05 	bl	800c2d2 <lv_circ_next>
 800aec8:	f7ff f9a7 	bl	800a21a <lv_draw_rect+0xbf2>
            act_w1 = cir_out.x - cir_out.y;
 800aecc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aece:	1ad3      	subs	r3, r2, r3
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	b219      	sxth	r1, r3
            act_w2 = act_w1 - 1;
 800aed4:	3b01      	subs	r3, #1
            act_w1 = cir_out.x - cir_out.y;
 800aed6:	910f      	str	r1, [sp, #60]	; 0x3c
            act_w2 = act_w1 - 1;
 800aed8:	b21b      	sxth	r3, r3
 800aeda:	e6d8      	b.n	800ac8e <lv_draw_rect+0x1666>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800aedc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800aede:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aee0:	0029      	movs	r1, r5
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d100      	bne.n	800aee8 <lv_draw_rect+0x18c0>
 800aee6:	e09e      	b.n	800b026 <lv_draw_rect+0x19fe>
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800aee8:	0018      	movs	r0, r3
 800aeea:	f7fe fb79 	bl	80095e0 <antialias_get_opa_circ>
 800aeee:	0004      	movs	r4, r0
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800aef0:	2209      	movs	r2, #9
 800aef2:	9b05      	ldr	r3, [sp, #20]
 800aef4:	4013      	ands	r3, r2
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d120      	bne.n	800af3c <lv_draw_rect+0x1914>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800aefa:	466b      	mov	r3, sp
 800aefc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aefe:	8e1f      	ldrh	r7, [r3, #48]	; 0x30
 800af00:	9b07      	ldr	r3, [sp, #28]
 800af02:	b2ae      	uxth	r6, r5
 800af04:	1899      	adds	r1, r3, r2
 800af06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af08:	9400      	str	r4, [sp, #0]
 800af0a:	1c58      	adds	r0, r3, #1
 800af0c:	9b04      	ldr	r3, [sp, #16]
 800af0e:	1871      	adds	r1, r6, r1
 800af10:	1838      	adds	r0, r7, r0
 800af12:	b209      	sxth	r1, r1
 800af14:	b200      	sxth	r0, r0
 800af16:	895b      	ldrh	r3, [r3, #10]
 800af18:	9a03      	ldr	r2, [sp, #12]
 800af1a:	f7fd fde0 	bl	8008ade <lv_draw_px>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800af1e:	9b07      	ldr	r3, [sp, #28]
 800af20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af22:	1c59      	adds	r1, r3, #1
 800af24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af26:	1879      	adds	r1, r7, r1
 800af28:	1898      	adds	r0, r3, r2
 800af2a:	9b04      	ldr	r3, [sp, #16]
 800af2c:	1830      	adds	r0, r6, r0
 800af2e:	9400      	str	r4, [sp, #0]
 800af30:	b209      	sxth	r1, r1
 800af32:	b200      	sxth	r0, r0
 800af34:	895b      	ldrh	r3, [r3, #10]
 800af36:	9a03      	ldr	r2, [sp, #12]
 800af38:	f7fd fdd1 	bl	8008ade <lv_draw_px>
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800af3c:	2205      	movs	r2, #5
 800af3e:	9b05      	ldr	r3, [sp, #20]
 800af40:	4013      	ands	r3, r2
 800af42:	4293      	cmp	r3, r2
 800af44:	d120      	bne.n	800af88 <lv_draw_rect+0x1960>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800af46:	466b      	mov	r3, sp
 800af48:	8e1f      	ldrh	r7, [r3, #48]	; 0x30
 800af4a:	9b07      	ldr	r3, [sp, #28]
 800af4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af4e:	1c59      	adds	r1, r3, #1
 800af50:	9b08      	ldr	r3, [sp, #32]
 800af52:	b2ae      	uxth	r6, r5
 800af54:	1a98      	subs	r0, r3, r2
 800af56:	9b04      	ldr	r3, [sp, #16]
 800af58:	9400      	str	r4, [sp, #0]
 800af5a:	1879      	adds	r1, r7, r1
 800af5c:	1b80      	subs	r0, r0, r6
 800af5e:	b209      	sxth	r1, r1
 800af60:	b200      	sxth	r0, r0
 800af62:	895b      	ldrh	r3, [r3, #10]
 800af64:	9a03      	ldr	r2, [sp, #12]
 800af66:	f7fd fdba 	bl	8008ade <lv_draw_px>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800af6a:	9b07      	ldr	r3, [sp, #28]
 800af6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af6e:	9400      	str	r4, [sp, #0]
 800af70:	1899      	adds	r1, r3, r2
 800af72:	9b08      	ldr	r3, [sp, #32]
 800af74:	1871      	adds	r1, r6, r1
 800af76:	1e58      	subs	r0, r3, #1
 800af78:	9b04      	ldr	r3, [sp, #16]
 800af7a:	1bc0      	subs	r0, r0, r7
 800af7c:	b209      	sxth	r1, r1
 800af7e:	b200      	sxth	r0, r0
 800af80:	895b      	ldrh	r3, [r3, #10]
 800af82:	9a03      	ldr	r2, [sp, #12]
 800af84:	f7fd fdab 	bl	8008ade <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800af88:	2306      	movs	r3, #6
 800af8a:	9a05      	ldr	r2, [sp, #20]
 800af8c:	4013      	ands	r3, r2
 800af8e:	2b06      	cmp	r3, #6
 800af90:	d120      	bne.n	800afd4 <lv_draw_rect+0x19ac>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800af92:	466b      	mov	r3, sp
 800af94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af96:	8e1f      	ldrh	r7, [r3, #48]	; 0x30
 800af98:	9b06      	ldr	r3, [sp, #24]
 800af9a:	b2ae      	uxth	r6, r5
 800af9c:	1a99      	subs	r1, r3, r2
 800af9e:	9b08      	ldr	r3, [sp, #32]
 800afa0:	9400      	str	r4, [sp, #0]
 800afa2:	1e58      	subs	r0, r3, #1
 800afa4:	9b04      	ldr	r3, [sp, #16]
 800afa6:	1b89      	subs	r1, r1, r6
 800afa8:	1bc0      	subs	r0, r0, r7
 800afaa:	b209      	sxth	r1, r1
 800afac:	b200      	sxth	r0, r0
 800afae:	895b      	ldrh	r3, [r3, #10]
 800afb0:	9a03      	ldr	r2, [sp, #12]
 800afb2:	f7fd fd94 	bl	8008ade <lv_draw_px>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800afb6:	9b06      	ldr	r3, [sp, #24]
 800afb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800afba:	1e59      	subs	r1, r3, #1
 800afbc:	9b08      	ldr	r3, [sp, #32]
 800afbe:	1bc9      	subs	r1, r1, r7
 800afc0:	1a98      	subs	r0, r3, r2
 800afc2:	9b04      	ldr	r3, [sp, #16]
 800afc4:	1b80      	subs	r0, r0, r6
 800afc6:	9400      	str	r4, [sp, #0]
 800afc8:	b209      	sxth	r1, r1
 800afca:	b200      	sxth	r0, r0
 800afcc:	895b      	ldrh	r3, [r3, #10]
 800afce:	9a03      	ldr	r2, [sp, #12]
 800afd0:	f7fd fd85 	bl	8008ade <lv_draw_px>
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800afd4:	230a      	movs	r3, #10
 800afd6:	9a05      	ldr	r2, [sp, #20]
 800afd8:	4013      	ands	r3, r2
 800afda:	2b0a      	cmp	r3, #10
 800afdc:	d120      	bne.n	800b020 <lv_draw_rect+0x19f8>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800afde:	466b      	mov	r3, sp
 800afe0:	8e1e      	ldrh	r6, [r3, #48]	; 0x30
 800afe2:	9b06      	ldr	r3, [sp, #24]
 800afe4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800afe6:	1e59      	subs	r1, r3, #1
 800afe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afea:	b2af      	uxth	r7, r5
 800afec:	1898      	adds	r0, r3, r2
 800afee:	9b04      	ldr	r3, [sp, #16]
 800aff0:	9400      	str	r4, [sp, #0]
 800aff2:	1b89      	subs	r1, r1, r6
 800aff4:	1838      	adds	r0, r7, r0
 800aff6:	b209      	sxth	r1, r1
 800aff8:	b200      	sxth	r0, r0
 800affa:	895b      	ldrh	r3, [r3, #10]
 800affc:	9a03      	ldr	r2, [sp, #12]
 800affe:	f7fd fd6e 	bl	8008ade <lv_draw_px>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800b002:	9b06      	ldr	r3, [sp, #24]
 800b004:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b006:	9400      	str	r4, [sp, #0]
 800b008:	1a99      	subs	r1, r3, r2
 800b00a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b00c:	1bc9      	subs	r1, r1, r7
 800b00e:	1c58      	adds	r0, r3, #1
 800b010:	9b04      	ldr	r3, [sp, #16]
 800b012:	1830      	adds	r0, r6, r0
 800b014:	b209      	sxth	r1, r1
 800b016:	b200      	sxth	r0, r0
 800b018:	895b      	ldrh	r3, [r3, #10]
 800b01a:	9a03      	ldr	r2, [sp, #12]
 800b01c:	f7fd fd5f 	bl	8008ade <lv_draw_px>
 800b020:	3501      	adds	r5, #1
 800b022:	b22d      	sxth	r5, r5
 800b024:	e645      	b.n	800acb2 <lv_draw_rect+0x168a>
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800b026:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800b028:	f7fd fc82 	bl	8008930 <lv_draw_aa_get_opa>
 800b02c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b02e:	1a1c      	subs	r4, r3, r0
 800b030:	b2e4      	uxtb	r4, r4
 800b032:	e75d      	b.n	800aef0 <lv_draw_rect+0x18c8>
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800b034:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 800b036:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b038:	0021      	movs	r1, r4
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	d100      	bne.n	800b040 <lv_draw_rect+0x1a18>
 800b03e:	e0ac      	b.n	800b19a <lv_draw_rect+0x1b72>
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 800b040:	0018      	movs	r0, r3
 800b042:	f7fe facd 	bl	80095e0 <antialias_get_opa_circ>
 800b046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b048:	1a1d      	subs	r5, r3, r0
 800b04a:	b2ed      	uxtb	r5, r5
 800b04c:	2209      	movs	r2, #9
 800b04e:	9b05      	ldr	r3, [sp, #20]
 800b050:	4013      	ands	r3, r2
 800b052:	9318      	str	r3, [sp, #96]	; 0x60
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b054:	4293      	cmp	r3, r2
 800b056:	d10e      	bne.n	800b076 <lv_draw_rect+0x1a4e>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b058:	9b07      	ldr	r3, [sp, #28]
 800b05a:	9500      	str	r5, [sp, #0]
 800b05c:	1999      	adds	r1, r3, r6
 800b05e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b060:	1909      	adds	r1, r1, r4
 800b062:	1e58      	subs	r0, r3, #1
 800b064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b066:	b209      	sxth	r1, r1
 800b068:	18c0      	adds	r0, r0, r3
 800b06a:	9b04      	ldr	r3, [sp, #16]
 800b06c:	b200      	sxth	r0, r0
 800b06e:	895b      	ldrh	r3, [r3, #10]
 800b070:	9a03      	ldr	r2, [sp, #12]
 800b072:	f7fd fd34 	bl	8008ade <lv_draw_px>
 800b076:	2205      	movs	r2, #5
 800b078:	9b05      	ldr	r3, [sp, #20]
 800b07a:	4013      	ands	r3, r2
 800b07c:	9319      	str	r3, [sp, #100]	; 0x64
                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b07e:	4293      	cmp	r3, r2
 800b080:	d10e      	bne.n	800b0a0 <lv_draw_rect+0x1a78>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 800b082:	9b07      	ldr	r3, [sp, #28]
 800b084:	9500      	str	r5, [sp, #0]
 800b086:	1e59      	subs	r1, r3, #1
 800b088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b08a:	9a03      	ldr	r2, [sp, #12]
 800b08c:	18c9      	adds	r1, r1, r3
 800b08e:	9b08      	ldr	r3, [sp, #32]
 800b090:	b209      	sxth	r1, r1
 800b092:	1b98      	subs	r0, r3, r6
 800b094:	9b04      	ldr	r3, [sp, #16]
 800b096:	1b00      	subs	r0, r0, r4
 800b098:	b200      	sxth	r0, r0
 800b09a:	895b      	ldrh	r3, [r3, #10]
 800b09c:	f7fd fd1f 	bl	8008ade <lv_draw_px>
 800b0a0:	2306      	movs	r3, #6
 800b0a2:	9a05      	ldr	r2, [sp, #20]
 800b0a4:	401a      	ands	r2, r3
 800b0a6:	921a      	str	r2, [sp, #104]	; 0x68
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b0a8:	2a06      	cmp	r2, #6
 800b0aa:	d10e      	bne.n	800b0ca <lv_draw_rect+0x1aa2>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800b0ac:	9b06      	ldr	r3, [sp, #24]
 800b0ae:	9500      	str	r5, [sp, #0]
 800b0b0:	1b99      	subs	r1, r3, r6
 800b0b2:	9b08      	ldr	r3, [sp, #32]
 800b0b4:	1b09      	subs	r1, r1, r4
 800b0b6:	1c58      	adds	r0, r3, #1
 800b0b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0ba:	b209      	sxth	r1, r1
 800b0bc:	1ac0      	subs	r0, r0, r3
 800b0be:	9b04      	ldr	r3, [sp, #16]
 800b0c0:	b200      	sxth	r0, r0
 800b0c2:	895b      	ldrh	r3, [r3, #10]
 800b0c4:	9a03      	ldr	r2, [sp, #12]
 800b0c6:	f7fd fd0a 	bl	8008ade <lv_draw_px>
 800b0ca:	270a      	movs	r7, #10
 800b0cc:	9b05      	ldr	r3, [sp, #20]
 800b0ce:	401f      	ands	r7, r3
                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b0d0:	2f0a      	cmp	r7, #10
 800b0d2:	d10e      	bne.n	800b0f2 <lv_draw_rect+0x1aca>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 800b0d4:	9b06      	ldr	r3, [sp, #24]
 800b0d6:	9500      	str	r5, [sp, #0]
 800b0d8:	1c59      	adds	r1, r3, #1
 800b0da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0dc:	9a03      	ldr	r2, [sp, #12]
 800b0de:	1ac9      	subs	r1, r1, r3
 800b0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0e2:	b209      	sxth	r1, r1
 800b0e4:	1998      	adds	r0, r3, r6
 800b0e6:	9b04      	ldr	r3, [sp, #16]
 800b0e8:	1900      	adds	r0, r0, r4
 800b0ea:	b200      	sxth	r0, r0
 800b0ec:	895b      	ldrh	r3, [r3, #10]
 800b0ee:	f7fd fcf6 	bl	8008ade <lv_draw_px>
                    if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 800b0f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b0f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0f6:	189b      	adds	r3, r3, r2
 800b0f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0fa:	3a01      	subs	r2, #1
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d046      	beq.n	800b18e <lv_draw_rect+0x1b66>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b100:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b102:	2b09      	cmp	r3, #9
 800b104:	d10e      	bne.n	800b124 <lv_draw_rect+0x1afc>
                            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1,
 800b106:	9b07      	ldr	r3, [sp, #28]
 800b108:	9500      	str	r5, [sp, #0]
 800b10a:	1e59      	subs	r1, r3, #1
 800b10c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b10e:	9a03      	ldr	r2, [sp, #12]
 800b110:	18c9      	adds	r1, r1, r3
 800b112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b114:	b209      	sxth	r1, r1
 800b116:	1998      	adds	r0, r3, r6
 800b118:	9b04      	ldr	r3, [sp, #16]
 800b11a:	1900      	adds	r0, r0, r4
 800b11c:	b200      	sxth	r0, r0
 800b11e:	895b      	ldrh	r3, [r3, #10]
 800b120:	f7fd fcdd 	bl	8008ade <lv_draw_px>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b124:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b126:	2b05      	cmp	r3, #5
 800b128:	d10e      	bne.n	800b148 <lv_draw_rect+0x1b20>
                            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i,
 800b12a:	9b07      	ldr	r3, [sp, #28]
 800b12c:	9500      	str	r5, [sp, #0]
 800b12e:	1999      	adds	r1, r3, r6
 800b130:	9b08      	ldr	r3, [sp, #32]
 800b132:	1909      	adds	r1, r1, r4
 800b134:	1c58      	adds	r0, r3, #1
 800b136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b138:	b209      	sxth	r1, r1
 800b13a:	1ac0      	subs	r0, r0, r3
 800b13c:	9b04      	ldr	r3, [sp, #16]
 800b13e:	b200      	sxth	r0, r0
 800b140:	895b      	ldrh	r3, [r3, #10]
 800b142:	9a03      	ldr	r2, [sp, #12]
 800b144:	f7fd fccb 	bl	8008ade <lv_draw_px>
                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b148:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b14a:	2b06      	cmp	r3, #6
 800b14c:	d10e      	bne.n	800b16c <lv_draw_rect+0x1b44>
                            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1,
 800b14e:	9b06      	ldr	r3, [sp, #24]
 800b150:	9500      	str	r5, [sp, #0]
 800b152:	1c59      	adds	r1, r3, #1
 800b154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b156:	9a03      	ldr	r2, [sp, #12]
 800b158:	1ac9      	subs	r1, r1, r3
 800b15a:	9b08      	ldr	r3, [sp, #32]
 800b15c:	b209      	sxth	r1, r1
 800b15e:	1b98      	subs	r0, r3, r6
 800b160:	9b04      	ldr	r3, [sp, #16]
 800b162:	1b00      	subs	r0, r0, r4
 800b164:	b200      	sxth	r0, r0
 800b166:	895b      	ldrh	r3, [r3, #10]
 800b168:	f7fd fcb9 	bl	8008ade <lv_draw_px>
                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b16c:	2f0a      	cmp	r7, #10
 800b16e:	d10e      	bne.n	800b18e <lv_draw_rect+0x1b66>
                            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i,
 800b170:	9b06      	ldr	r3, [sp, #24]
 800b172:	9500      	str	r5, [sp, #0]
 800b174:	1b99      	subs	r1, r3, r6
 800b176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b178:	1b09      	subs	r1, r1, r4
 800b17a:	1e58      	subs	r0, r3, #1
 800b17c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b17e:	b209      	sxth	r1, r1
 800b180:	18c0      	adds	r0, r0, r3
 800b182:	9b04      	ldr	r3, [sp, #16]
 800b184:	b200      	sxth	r0, r0
 800b186:	895b      	ldrh	r3, [r3, #10]
 800b188:	9a03      	ldr	r2, [sp, #12]
 800b18a:	f7fd fca8 	bl	8008ade <lv_draw_px>
 800b18e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b190:	3401      	adds	r4, #1
 800b192:	3301      	adds	r3, #1
 800b194:	b224      	sxth	r4, r4
 800b196:	9310      	str	r3, [sp, #64]	; 0x40
 800b198:	e5aa      	b.n	800acf0 <lv_draw_rect+0x16c8>
                        aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800b19a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b19c:	f7fd fbc8 	bl	8008930 <lv_draw_aa_get_opa>
 800b1a0:	0005      	movs	r5, r0
 800b1a2:	e753      	b.n	800b04c <lv_draw_rect+0x1a24>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800b1a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b1a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b1a8:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b1aa:	f7fd fbc1 	bl	8008930 <lv_draw_aa_get_opa>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b1ae:	2209      	movs	r2, #9
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800b1b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1b2:	1a1c      	subs	r4, r3, r0
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b1b4:	9b05      	ldr	r3, [sp, #20]
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800b1b6:	b2e4      	uxtb	r4, r4
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b1b8:	4013      	ands	r3, r2
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d11e      	bne.n	800b1fc <lv_draw_rect+0x1bd4>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b1be:	466b      	mov	r3, sp
 800b1c0:	8e1f      	ldrh	r7, [r3, #48]	; 0x30
 800b1c2:	8e9e      	ldrh	r6, [r3, #52]	; 0x34
 800b1c4:	9b07      	ldr	r3, [sp, #28]
 800b1c6:	9400      	str	r4, [sp, #0]
 800b1c8:	1959      	adds	r1, r3, r5
 800b1ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1cc:	1871      	adds	r1, r6, r1
 800b1ce:	1c58      	adds	r0, r3, #1
 800b1d0:	9b04      	ldr	r3, [sp, #16]
 800b1d2:	1838      	adds	r0, r7, r0
 800b1d4:	b209      	sxth	r1, r1
 800b1d6:	b200      	sxth	r0, r0
 800b1d8:	895b      	ldrh	r3, [r3, #10]
 800b1da:	9a03      	ldr	r2, [sp, #12]
 800b1dc:	f7fd fc7f 	bl	8008ade <lv_draw_px>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800b1e0:	9b07      	ldr	r3, [sp, #28]
 800b1e2:	9400      	str	r4, [sp, #0]
 800b1e4:	1c59      	adds	r1, r3, #1
 800b1e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1e8:	1879      	adds	r1, r7, r1
 800b1ea:	1958      	adds	r0, r3, r5
 800b1ec:	9b04      	ldr	r3, [sp, #16]
 800b1ee:	1830      	adds	r0, r6, r0
 800b1f0:	b209      	sxth	r1, r1
 800b1f2:	b200      	sxth	r0, r0
 800b1f4:	895b      	ldrh	r3, [r3, #10]
 800b1f6:	9a03      	ldr	r2, [sp, #12]
 800b1f8:	f7fd fc71 	bl	8008ade <lv_draw_px>
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b1fc:	2205      	movs	r2, #5
 800b1fe:	9b05      	ldr	r3, [sp, #20]
 800b200:	4013      	ands	r3, r2
 800b202:	4293      	cmp	r3, r2
 800b204:	d11e      	bne.n	800b244 <lv_draw_rect+0x1c1c>
 800b206:	466b      	mov	r3, sp
 800b208:	8e9e      	ldrh	r6, [r3, #52]	; 0x34
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800b20a:	8e1f      	ldrh	r7, [r3, #48]	; 0x30
 800b20c:	9b07      	ldr	r3, [sp, #28]
 800b20e:	9400      	str	r4, [sp, #0]
 800b210:	1c59      	adds	r1, r3, #1
 800b212:	9b08      	ldr	r3, [sp, #32]
 800b214:	1879      	adds	r1, r7, r1
 800b216:	1b58      	subs	r0, r3, r5
 800b218:	9b04      	ldr	r3, [sp, #16]
 800b21a:	1b80      	subs	r0, r0, r6
 800b21c:	b209      	sxth	r1, r1
 800b21e:	b200      	sxth	r0, r0
 800b220:	895b      	ldrh	r3, [r3, #10]
 800b222:	9a03      	ldr	r2, [sp, #12]
 800b224:	f7fd fc5b 	bl	8008ade <lv_draw_px>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800b228:	9b07      	ldr	r3, [sp, #28]
 800b22a:	9400      	str	r4, [sp, #0]
 800b22c:	1959      	adds	r1, r3, r5
 800b22e:	9b08      	ldr	r3, [sp, #32]
 800b230:	1871      	adds	r1, r6, r1
 800b232:	1e58      	subs	r0, r3, #1
 800b234:	9b04      	ldr	r3, [sp, #16]
 800b236:	1bc0      	subs	r0, r0, r7
 800b238:	b209      	sxth	r1, r1
 800b23a:	b200      	sxth	r0, r0
 800b23c:	895b      	ldrh	r3, [r3, #10]
 800b23e:	9a03      	ldr	r2, [sp, #12]
 800b240:	f7fd fc4d 	bl	8008ade <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b244:	2306      	movs	r3, #6
 800b246:	9a05      	ldr	r2, [sp, #20]
 800b248:	4013      	ands	r3, r2
 800b24a:	2b06      	cmp	r3, #6
 800b24c:	d11e      	bne.n	800b28c <lv_draw_rect+0x1c64>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800b24e:	466b      	mov	r3, sp
 800b250:	8e1f      	ldrh	r7, [r3, #48]	; 0x30
 800b252:	8e9e      	ldrh	r6, [r3, #52]	; 0x34
 800b254:	9b06      	ldr	r3, [sp, #24]
 800b256:	9400      	str	r4, [sp, #0]
 800b258:	1b59      	subs	r1, r3, r5
 800b25a:	9b08      	ldr	r3, [sp, #32]
 800b25c:	1b89      	subs	r1, r1, r6
 800b25e:	1e58      	subs	r0, r3, #1
 800b260:	9b04      	ldr	r3, [sp, #16]
 800b262:	1bc0      	subs	r0, r0, r7
 800b264:	b209      	sxth	r1, r1
 800b266:	b200      	sxth	r0, r0
 800b268:	895b      	ldrh	r3, [r3, #10]
 800b26a:	9a03      	ldr	r2, [sp, #12]
 800b26c:	f7fd fc37 	bl	8008ade <lv_draw_px>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800b270:	9b06      	ldr	r3, [sp, #24]
 800b272:	9400      	str	r4, [sp, #0]
 800b274:	1e59      	subs	r1, r3, #1
 800b276:	9b08      	ldr	r3, [sp, #32]
 800b278:	1bc9      	subs	r1, r1, r7
 800b27a:	1b58      	subs	r0, r3, r5
 800b27c:	9b04      	ldr	r3, [sp, #16]
 800b27e:	1b80      	subs	r0, r0, r6
 800b280:	b209      	sxth	r1, r1
 800b282:	b200      	sxth	r0, r0
 800b284:	895b      	ldrh	r3, [r3, #10]
 800b286:	9a03      	ldr	r2, [sp, #12]
 800b288:	f7fd fc29 	bl	8008ade <lv_draw_px>
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b28c:	230a      	movs	r3, #10
 800b28e:	9a05      	ldr	r2, [sp, #20]
 800b290:	4013      	ands	r3, r2
 800b292:	2b0a      	cmp	r3, #10
 800b294:	d11e      	bne.n	800b2d4 <lv_draw_rect+0x1cac>
 800b296:	466b      	mov	r3, sp
 800b298:	8e9f      	ldrh	r7, [r3, #52]	; 0x34
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800b29a:	8e1e      	ldrh	r6, [r3, #48]	; 0x30
 800b29c:	9b06      	ldr	r3, [sp, #24]
 800b29e:	9400      	str	r4, [sp, #0]
 800b2a0:	1e59      	subs	r1, r3, #1
 800b2a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2a4:	1b89      	subs	r1, r1, r6
 800b2a6:	1958      	adds	r0, r3, r5
 800b2a8:	9b04      	ldr	r3, [sp, #16]
 800b2aa:	1838      	adds	r0, r7, r0
 800b2ac:	b209      	sxth	r1, r1
 800b2ae:	b200      	sxth	r0, r0
 800b2b0:	895b      	ldrh	r3, [r3, #10]
 800b2b2:	9a03      	ldr	r2, [sp, #12]
 800b2b4:	f7fd fc13 	bl	8008ade <lv_draw_px>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800b2b8:	9b06      	ldr	r3, [sp, #24]
 800b2ba:	9400      	str	r4, [sp, #0]
 800b2bc:	1b59      	subs	r1, r3, r5
 800b2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c0:	1bc9      	subs	r1, r1, r7
 800b2c2:	1c58      	adds	r0, r3, #1
 800b2c4:	9b04      	ldr	r3, [sp, #16]
 800b2c6:	1830      	adds	r0, r6, r0
 800b2c8:	b209      	sxth	r1, r1
 800b2ca:	b200      	sxth	r0, r0
 800b2cc:	895b      	ldrh	r3, [r3, #10]
 800b2ce:	9a03      	ldr	r2, [sp, #12]
 800b2d0:	f7fd fc05 	bl	8008ade <lv_draw_px>
 800b2d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	b21b      	sxth	r3, r3
 800b2da:	f7fe ffb6 	bl	800a24a <lv_draw_rect+0xc22>
            lv_opa_t aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800b2de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2e0:	0021      	movs	r1, r4
 800b2e2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b2e4:	f7fd fb24 	bl	8008930 <lv_draw_aa_get_opa>
 800b2e8:	2209      	movs	r2, #9
 800b2ea:	9b05      	ldr	r3, [sp, #20]
 800b2ec:	0006      	movs	r6, r0
 800b2ee:	4013      	ands	r3, r2
 800b2f0:	930e      	str	r3, [sp, #56]	; 0x38
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d10e      	bne.n	800b314 <lv_draw_rect+0x1cec>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b2f6:	9b07      	ldr	r3, [sp, #28]
 800b2f8:	9600      	str	r6, [sp, #0]
 800b2fa:	1959      	adds	r1, r3, r5
 800b2fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2fe:	1909      	adds	r1, r1, r4
 800b300:	1e58      	subs	r0, r3, #1
 800b302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b304:	b209      	sxth	r1, r1
 800b306:	18c0      	adds	r0, r0, r3
 800b308:	9b04      	ldr	r3, [sp, #16]
 800b30a:	b200      	sxth	r0, r0
 800b30c:	895b      	ldrh	r3, [r3, #10]
 800b30e:	9a03      	ldr	r2, [sp, #12]
 800b310:	f7fd fbe5 	bl	8008ade <lv_draw_px>
 800b314:	2205      	movs	r2, #5
 800b316:	9b05      	ldr	r3, [sp, #20]
 800b318:	4013      	ands	r3, r2
 800b31a:	930f      	str	r3, [sp, #60]	; 0x3c
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d10e      	bne.n	800b33e <lv_draw_rect+0x1d16>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 800b320:	9b07      	ldr	r3, [sp, #28]
 800b322:	9600      	str	r6, [sp, #0]
 800b324:	1e59      	subs	r1, r3, #1
 800b326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b328:	9a03      	ldr	r2, [sp, #12]
 800b32a:	18c9      	adds	r1, r1, r3
 800b32c:	9b08      	ldr	r3, [sp, #32]
 800b32e:	b209      	sxth	r1, r1
 800b330:	1b58      	subs	r0, r3, r5
 800b332:	9b04      	ldr	r3, [sp, #16]
 800b334:	1b00      	subs	r0, r0, r4
 800b336:	b200      	sxth	r0, r0
 800b338:	895b      	ldrh	r3, [r3, #10]
 800b33a:	f7fd fbd0 	bl	8008ade <lv_draw_px>
 800b33e:	2306      	movs	r3, #6
 800b340:	9a05      	ldr	r2, [sp, #20]
 800b342:	401a      	ands	r2, r3
 800b344:	9210      	str	r2, [sp, #64]	; 0x40
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b346:	2a06      	cmp	r2, #6
 800b348:	d10e      	bne.n	800b368 <lv_draw_rect+0x1d40>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800b34a:	9b06      	ldr	r3, [sp, #24]
 800b34c:	9600      	str	r6, [sp, #0]
 800b34e:	1b59      	subs	r1, r3, r5
 800b350:	9b08      	ldr	r3, [sp, #32]
 800b352:	1b09      	subs	r1, r1, r4
 800b354:	1c58      	adds	r0, r3, #1
 800b356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b358:	b209      	sxth	r1, r1
 800b35a:	1ac0      	subs	r0, r0, r3
 800b35c:	9b04      	ldr	r3, [sp, #16]
 800b35e:	b200      	sxth	r0, r0
 800b360:	895b      	ldrh	r3, [r3, #10]
 800b362:	9a03      	ldr	r2, [sp, #12]
 800b364:	f7fd fbbb 	bl	8008ade <lv_draw_px>
 800b368:	270a      	movs	r7, #10
 800b36a:	9b05      	ldr	r3, [sp, #20]
 800b36c:	401f      	ands	r7, r3
            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b36e:	2f0a      	cmp	r7, #10
 800b370:	d10e      	bne.n	800b390 <lv_draw_rect+0x1d68>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 800b372:	9b06      	ldr	r3, [sp, #24]
 800b374:	9600      	str	r6, [sp, #0]
 800b376:	1c59      	adds	r1, r3, #1
 800b378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b37a:	9a03      	ldr	r2, [sp, #12]
 800b37c:	1ac9      	subs	r1, r1, r3
 800b37e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b380:	b209      	sxth	r1, r1
 800b382:	1958      	adds	r0, r3, r5
 800b384:	9b04      	ldr	r3, [sp, #16]
 800b386:	1900      	adds	r0, r0, r4
 800b388:	b200      	sxth	r0, r0
 800b38a:	895b      	ldrh	r3, [r3, #10]
 800b38c:	f7fd fba7 	bl	8008ade <lv_draw_px>
            if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 800b390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b392:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b394:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b396:	3b01      	subs	r3, #1
 800b398:	1852      	adds	r2, r2, r1
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d046      	beq.n	800b42c <lv_draw_rect+0x1e04>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b39e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3a0:	2b09      	cmp	r3, #9
 800b3a2:	d10e      	bne.n	800b3c2 <lv_draw_rect+0x1d9a>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1, mask,
 800b3a4:	9b07      	ldr	r3, [sp, #28]
 800b3a6:	9600      	str	r6, [sp, #0]
 800b3a8:	1e59      	subs	r1, r3, #1
 800b3aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3ac:	9a03      	ldr	r2, [sp, #12]
 800b3ae:	18c9      	adds	r1, r1, r3
 800b3b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3b2:	b209      	sxth	r1, r1
 800b3b4:	1958      	adds	r0, r3, r5
 800b3b6:	9b04      	ldr	r3, [sp, #16]
 800b3b8:	1900      	adds	r0, r0, r4
 800b3ba:	b200      	sxth	r0, r0
 800b3bc:	895b      	ldrh	r3, [r3, #10]
 800b3be:	f7fd fb8e 	bl	8008ade <lv_draw_px>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b3c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3c4:	2b05      	cmp	r3, #5
 800b3c6:	d10e      	bne.n	800b3e6 <lv_draw_rect+0x1dbe>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800b3c8:	9b07      	ldr	r3, [sp, #28]
 800b3ca:	9600      	str	r6, [sp, #0]
 800b3cc:	1959      	adds	r1, r3, r5
 800b3ce:	9b08      	ldr	r3, [sp, #32]
 800b3d0:	1909      	adds	r1, r1, r4
 800b3d2:	1c58      	adds	r0, r3, #1
 800b3d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3d6:	b209      	sxth	r1, r1
 800b3d8:	1ac0      	subs	r0, r0, r3
 800b3da:	9b04      	ldr	r3, [sp, #16]
 800b3dc:	b200      	sxth	r0, r0
 800b3de:	895b      	ldrh	r3, [r3, #10]
 800b3e0:	9a03      	ldr	r2, [sp, #12]
 800b3e2:	f7fd fb7c 	bl	8008ade <lv_draw_px>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b3e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3e8:	2b06      	cmp	r3, #6
 800b3ea:	d10e      	bne.n	800b40a <lv_draw_rect+0x1de2>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1, mask,
 800b3ec:	9b06      	ldr	r3, [sp, #24]
 800b3ee:	9600      	str	r6, [sp, #0]
 800b3f0:	1c59      	adds	r1, r3, #1
 800b3f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3f4:	9a03      	ldr	r2, [sp, #12]
 800b3f6:	1ac9      	subs	r1, r1, r3
 800b3f8:	9b08      	ldr	r3, [sp, #32]
 800b3fa:	b209      	sxth	r1, r1
 800b3fc:	1b58      	subs	r0, r3, r5
 800b3fe:	9b04      	ldr	r3, [sp, #16]
 800b400:	1b00      	subs	r0, r0, r4
 800b402:	b200      	sxth	r0, r0
 800b404:	895b      	ldrh	r3, [r3, #10]
 800b406:	f7fd fb6a 	bl	8008ade <lv_draw_px>
                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b40a:	2f0a      	cmp	r7, #10
 800b40c:	d10e      	bne.n	800b42c <lv_draw_rect+0x1e04>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800b40e:	9b06      	ldr	r3, [sp, #24]
 800b410:	9600      	str	r6, [sp, #0]
 800b412:	1b59      	subs	r1, r3, r5
 800b414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b416:	1b09      	subs	r1, r1, r4
 800b418:	1e58      	subs	r0, r3, #1
 800b41a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b41c:	b209      	sxth	r1, r1
 800b41e:	18c0      	adds	r0, r0, r3
 800b420:	9b04      	ldr	r3, [sp, #16]
 800b422:	b200      	sxth	r0, r0
 800b424:	895b      	ldrh	r3, [r3, #10]
 800b426:	9a03      	ldr	r2, [sp, #12]
 800b428:	f7fd fb59 	bl	8008ade <lv_draw_px>
 800b42c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b42e:	3401      	adds	r4, #1
 800b430:	3301      	adds	r3, #1
 800b432:	b224      	sxth	r4, r4
 800b434:	930c      	str	r3, [sp, #48]	; 0x30
 800b436:	f7fe ff73 	bl	800a320 <lv_draw_rect+0xcf8>
                act_color = mcolor;
 800b43a:	466b      	mov	r3, sp
            if(mcolor.full == gcolor.full)
 800b43c:	9806      	ldr	r0, [sp, #24]
                act_color = mcolor;
 800b43e:	8a9a      	ldrh	r2, [r3, #20]
            if(mcolor.full == gcolor.full)
 800b440:	9b05      	ldr	r3, [sp, #20]
 800b442:	4283      	cmp	r3, r0
 800b444:	d00e      	beq.n	800b464 <lv_draw_rect+0x1e3c>
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800b446:	2306      	movs	r3, #6
 800b448:	5ef8      	ldrsh	r0, [r7, r3]
 800b44a:	23ff      	movs	r3, #255	; 0xff
 800b44c:	1a40      	subs	r0, r0, r1
 800b44e:	4358      	muls	r0, r3
 800b450:	9908      	ldr	r1, [sp, #32]
 800b452:	f7f4 fe85 	bl	8000160 <__udivsi3>
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800b456:	466b      	mov	r3, sp
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800b458:	b2c2      	uxtb	r2, r0
                act_color = lv_color_mix(mcolor, gcolor, mix);
 800b45a:	8b19      	ldrh	r1, [r3, #24]
 800b45c:	8a98      	ldrh	r0, [r3, #20]
 800b45e:	f7fe f87b 	bl	8009558 <lv_color_mix>
 800b462:	1c02      	adds	r2, r0, #0
            lv_draw_fill(&edge_top_area, mask, act_color, opa);
 800b464:	9b07      	ldr	r3, [sp, #28]
 800b466:	9903      	ldr	r1, [sp, #12]
 800b468:	a822      	add	r0, sp, #136	; 0x88
 800b46a:	f7fd fb81 	bl	8008b70 <lv_draw_fill>
 800b46e:	f7ff f87f 	bl	800a570 <lv_draw_rect+0xf48>
	...

0800b474 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 800b474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b476:	0006      	movs	r6, r0

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 800b478:	2400      	movs	r4, #0
        if(cache[i].dec_dsc.src == src || src == NULL) {
 800b47a:	2728      	movs	r7, #40	; 0x28
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800b47c:	4b0e      	ldr	r3, [pc, #56]	; (800b4b8 <lv_img_cache_invalidate_src+0x44>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	9301      	str	r3, [sp, #4]
    for(i = 0; i < entry_cnt; i++) {
 800b482:	4b0e      	ldr	r3, [pc, #56]	; (800b4bc <lv_img_cache_invalidate_src+0x48>)
 800b484:	881b      	ldrh	r3, [r3, #0]
 800b486:	42a3      	cmp	r3, r4
 800b488:	d800      	bhi.n	800b48c <lv_img_cache_invalidate_src+0x18>

            memset(&cache[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
        }
    }
}
 800b48a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        if(cache[i].dec_dsc.src == src || src == NULL) {
 800b48c:	003d      	movs	r5, r7
 800b48e:	4365      	muls	r5, r4
 800b490:	9b01      	ldr	r3, [sp, #4]
 800b492:	195d      	adds	r5, r3, r5
 800b494:	686b      	ldr	r3, [r5, #4]
 800b496:	42b3      	cmp	r3, r6
 800b498:	d001      	beq.n	800b49e <lv_img_cache_invalidate_src+0x2a>
 800b49a:	2e00      	cmp	r6, #0
 800b49c:	d109      	bne.n	800b4b2 <lv_img_cache_invalidate_src+0x3e>
            if(cache[i].dec_dsc.src != NULL) {
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d002      	beq.n	800b4a8 <lv_img_cache_invalidate_src+0x34>
                lv_img_decoder_close(&cache[i].dec_dsc);
 800b4a2:	0028      	movs	r0, r5
 800b4a4:	f000 fad4 	bl	800ba50 <lv_img_decoder_close>
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
 800b4a8:	003a      	movs	r2, r7
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	0028      	movs	r0, r5
 800b4ae:	f002 fe76 	bl	800e19e <memset>
    for(i = 0; i < entry_cnt; i++) {
 800b4b2:	3401      	adds	r4, #1
 800b4b4:	b2a4      	uxth	r4, r4
 800b4b6:	e7e4      	b.n	800b482 <lv_img_cache_invalidate_src+0xe>
 800b4b8:	20005450 	.word	0x20005450
 800b4bc:	20001650 	.word	0x20001650

0800b4c0 <lv_img_cache_set_size>:
{
 800b4c0:	b570      	push	{r4, r5, r6, lr}
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 800b4c2:	4d14      	ldr	r5, [pc, #80]	; (800b514 <lv_img_cache_set_size+0x54>)
{
 800b4c4:	0004      	movs	r4, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 800b4c6:	682b      	ldr	r3, [r5, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d005      	beq.n	800b4d8 <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	f7ff ffd1 	bl	800b474 <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 800b4d2:	6828      	ldr	r0, [r5, #0]
 800b4d4:	f001 f9d8 	bl	800c888 <lv_mem_free>
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 800b4d8:	2628      	movs	r6, #40	; 0x28
 800b4da:	4366      	muls	r6, r4
 800b4dc:	0030      	movs	r0, r6
 800b4de:	f001 f99f 	bl	800c820 <lv_mem_alloc>
 800b4e2:	6028      	str	r0, [r5, #0]
    lv_mem_assert(LV_GC_ROOT(_lv_img_cache_array));
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	d100      	bne.n	800b4ea <lv_img_cache_set_size+0x2a>
 800b4e8:	e7fe      	b.n	800b4e8 <lv_img_cache_set_size+0x28>
    entry_cnt = new_entry_cnt;
 800b4ea:	4b0b      	ldr	r3, [pc, #44]	; (800b518 <lv_img_cache_set_size+0x58>)
 800b4ec:	801c      	strh	r4, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
 800b4ee:	2400      	movs	r4, #0
 800b4f0:	42a6      	cmp	r6, r4
 800b4f2:	d100      	bne.n	800b4f6 <lv_img_cache_set_size+0x36>
}
 800b4f4:	bd70      	pop	{r4, r5, r6, pc}
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 800b4f6:	682b      	ldr	r3, [r5, #0]
 800b4f8:	2224      	movs	r2, #36	; 0x24
 800b4fa:	1918      	adds	r0, r3, r4
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	f002 fe4e 	bl	800e19e <memset>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i], 0, sizeof(lv_img_cache_entry_t));
 800b502:	682b      	ldr	r3, [r5, #0]
 800b504:	2228      	movs	r2, #40	; 0x28
 800b506:	1918      	adds	r0, r3, r4
 800b508:	2100      	movs	r1, #0
 800b50a:	f002 fe48 	bl	800e19e <memset>
 800b50e:	3428      	adds	r4, #40	; 0x28
 800b510:	e7ee      	b.n	800b4f0 <lv_img_cache_set_size+0x30>
 800b512:	46c0      	nop			; (mov r8, r8)
 800b514:	20005450 	.word	0x20005450
 800b518:	20001650 	.word	0x20001650

0800b51c <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 800b51c:	b570      	push	{r4, r5, r6, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b51e:	6a0c      	ldr	r4, [r1, #32]
{
 800b520:	000d      	movs	r5, r1
    if(user_data) {
 800b522:	2c00      	cmp	r4, #0
 800b524:	d011      	beq.n	800b54a <lv_img_decoder_built_in_close+0x2e>
#if LV_USE_FILESYSTEM
        if(user_data->f) {
 800b526:	6820      	ldr	r0, [r4, #0]
 800b528:	2800      	cmp	r0, #0
 800b52a:	d004      	beq.n	800b536 <lv_img_decoder_built_in_close+0x1a>
            lv_fs_close(user_data->f);
 800b52c:	f000 fefe 	bl	800c32c <lv_fs_close>
            lv_mem_free(user_data->f);
 800b530:	6820      	ldr	r0, [r4, #0]
 800b532:	f001 f9a9 	bl	800c888 <lv_mem_free>
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
 800b536:	6860      	ldr	r0, [r4, #4]
 800b538:	2800      	cmp	r0, #0
 800b53a:	d001      	beq.n	800b540 <lv_img_decoder_built_in_close+0x24>
 800b53c:	f001 f9a4 	bl	800c888 <lv_mem_free>

        lv_mem_free(user_data);
 800b540:	0020      	movs	r0, r4
 800b542:	f001 f9a1 	bl	800c888 <lv_mem_free>

        dsc->user_data = NULL;
 800b546:	2300      	movs	r3, #0
 800b548:	622b      	str	r3, [r5, #32]
    }
}
 800b54a:	bd70      	pop	{r4, r5, r6, pc}

0800b54c <lv_img_decoder_built_in_open>:
{
 800b54c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800b54e:	7b0b      	ldrb	r3, [r1, #12]
{
 800b550:	b085      	sub	sp, #20
 800b552:	0005      	movs	r5, r0
 800b554:	000c      	movs	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800b556:	2b01      	cmp	r3, #1
 800b558:	d12a      	bne.n	800b5b0 <lv_img_decoder_built_in_open+0x64>
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 800b55a:	6848      	ldr	r0, [r1, #4]
 800b55c:	f000 ff80 	bl	800c460 <lv_fs_get_ext>
 800b560:	494b      	ldr	r1, [pc, #300]	; (800b690 <lv_img_decoder_built_in_open+0x144>)
 800b562:	f7f4 fdcd 	bl	8000100 <strcmp>
 800b566:	2800      	cmp	r0, #0
 800b568:	d000      	beq.n	800b56c <lv_img_decoder_built_in_open+0x20>
 800b56a:	e08e      	b.n	800b68a <lv_img_decoder_built_in_open+0x13e>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 800b56c:	2202      	movs	r2, #2
 800b56e:	6861      	ldr	r1, [r4, #4]
 800b570:	a802      	add	r0, sp, #8
 800b572:	f000 ff33 	bl	800c3dc <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 800b576:	2800      	cmp	r0, #0
 800b578:	d000      	beq.n	800b57c <lv_img_decoder_built_in_open+0x30>
 800b57a:	e086      	b.n	800b68a <lv_img_decoder_built_in_open+0x13e>
        if(dsc->user_data == NULL) {
 800b57c:	6a26      	ldr	r6, [r4, #32]
 800b57e:	2e00      	cmp	r6, #0
 800b580:	d10a      	bne.n	800b598 <lv_img_decoder_built_in_open+0x4c>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800b582:	3008      	adds	r0, #8
 800b584:	f001 f94c 	bl	800c820 <lv_mem_alloc>
 800b588:	6220      	str	r0, [r4, #32]
            if(dsc->user_data == NULL) {
 800b58a:	2800      	cmp	r0, #0
 800b58c:	d100      	bne.n	800b590 <lv_img_decoder_built_in_open+0x44>
 800b58e:	e7fe      	b.n	800b58e <lv_img_decoder_built_in_open+0x42>
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 800b590:	2208      	movs	r2, #8
 800b592:	0031      	movs	r1, r6
 800b594:	f002 fe03 	bl	800e19e <memset>
        user_data->f                               = lv_mem_alloc(sizeof(f));
 800b598:	2008      	movs	r0, #8
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b59a:	6a26      	ldr	r6, [r4, #32]
        user_data->f                               = lv_mem_alloc(sizeof(f));
 800b59c:	f001 f940 	bl	800c820 <lv_mem_alloc>
 800b5a0:	6030      	str	r0, [r6, #0]
        if(user_data->f == NULL) {
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	d100      	bne.n	800b5a8 <lv_img_decoder_built_in_open+0x5c>
 800b5a6:	e7fe      	b.n	800b5a6 <lv_img_decoder_built_in_open+0x5a>
        memcpy(user_data->f, &f, sizeof(f));
 800b5a8:	2208      	movs	r2, #8
 800b5aa:	a902      	add	r1, sp, #8
 800b5ac:	f002 fdee 	bl	800e18c <memcpy>
    lv_img_cf_t cf = dsc->header.cf;
 800b5b0:	7c20      	ldrb	r0, [r4, #16]
 800b5b2:	06c0      	lsls	r0, r0, #27
 800b5b4:	0ec0      	lsrs	r0, r0, #27
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800b5b6:	1f03      	subs	r3, r0, #4
 800b5b8:	2b02      	cmp	r3, #2
 800b5ba:	d808      	bhi.n	800b5ce <lv_img_decoder_built_in_open+0x82>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800b5bc:	7b23      	ldrb	r3, [r4, #12]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d132      	bne.n	800b628 <lv_img_decoder_built_in_open+0xdc>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 800b5c2:	6863      	ldr	r3, [r4, #4]
 800b5c4:	689b      	ldr	r3, [r3, #8]
            return LV_RES_OK;
 800b5c6:	2001      	movs	r0, #1
            dsc->img_data = NULL;
 800b5c8:	6163      	str	r3, [r4, #20]
}
 800b5ca:	b005      	add	sp, #20
 800b5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 800b5ce:	1fc3      	subs	r3, r0, #7
 800b5d0:	2b03      	cmp	r3, #3
 800b5d2:	d853      	bhi.n	800b67c <lv_img_decoder_built_in_open+0x130>
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 800b5d4:	f7fd fd56 	bl	8009084 <lv_img_color_format_get_px_size>
        if(dsc->user_data == NULL) {
 800b5d8:	6a26      	ldr	r6, [r4, #32]
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 800b5da:	0005      	movs	r5, r0
        if(dsc->user_data == NULL) {
 800b5dc:	2e00      	cmp	r6, #0
 800b5de:	d10a      	bne.n	800b5f6 <lv_img_decoder_built_in_open+0xaa>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800b5e0:	2008      	movs	r0, #8
 800b5e2:	f001 f91d 	bl	800c820 <lv_mem_alloc>
 800b5e6:	6220      	str	r0, [r4, #32]
            if(dsc->user_data == NULL) {
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	d100      	bne.n	800b5ee <lv_img_decoder_built_in_open+0xa2>
 800b5ec:	e7fe      	b.n	800b5ec <lv_img_decoder_built_in_open+0xa0>
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 800b5ee:	2208      	movs	r2, #8
 800b5f0:	0031      	movs	r1, r6
 800b5f2:	f002 fdd4 	bl	800e19e <memset>
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800b5f6:	2702      	movs	r7, #2
 800b5f8:	40af      	lsls	r7, r5
 800b5fa:	0038      	movs	r0, r7
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b5fc:	6a26      	ldr	r6, [r4, #32]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800b5fe:	f001 f90f 	bl	800c820 <lv_mem_alloc>
 800b602:	6070      	str	r0, [r6, #4]
        if(user_data->palette == NULL) {
 800b604:	2800      	cmp	r0, #0
 800b606:	d103      	bne.n	800b610 <lv_img_decoder_built_in_open+0xc4>
            lv_mem_assert(user_data->f);
 800b608:	6833      	ldr	r3, [r6, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d100      	bne.n	800b610 <lv_img_decoder_built_in_open+0xc4>
 800b60e:	e7fe      	b.n	800b60e <lv_img_decoder_built_in_open+0xc2>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800b610:	7b23      	ldrb	r3, [r4, #12]
 800b612:	2b01      	cmp	r3, #1
 800b614:	d10a      	bne.n	800b62c <lv_img_decoder_built_in_open+0xe0>
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
 800b616:	2104      	movs	r1, #4
 800b618:	6830      	ldr	r0, [r6, #0]
 800b61a:	f000 feba 	bl	800c392 <lv_fs_seek>
            lv_fs_read(user_data->f, user_data->palette, palette_size * sizeof(lv_color_t), NULL);
 800b61e:	ce03      	ldmia	r6!, {r0, r1}
 800b620:	2300      	movs	r3, #0
 800b622:	003a      	movs	r2, r7
 800b624:	f000 fe97 	bl	800c356 <lv_fs_read>
            dsc->img_data = NULL;
 800b628:	2300      	movs	r3, #0
 800b62a:	e7cc      	b.n	800b5c6 <lv_img_decoder_built_in_open+0x7a>
 800b62c:	2204      	movs	r2, #4
 800b62e:	40aa      	lsls	r2, r5
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 800b630:	6863      	ldr	r3, [r4, #4]
    color.ch.red   = (uint16_t)(r8 >> 3);
 800b632:	271f      	movs	r7, #31
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	189a      	adds	r2, r3, r2
 800b638:	9201      	str	r2, [sp, #4]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800b63a:	2207      	movs	r2, #7
 800b63c:	4694      	mov	ip, r2
            for(i = 0; i < palette_size; i++) {
 800b63e:	9a01      	ldr	r2, [sp, #4]
 800b640:	429a      	cmp	r2, r3
 800b642:	d0f1      	beq.n	800b628 <lv_img_decoder_built_in_open+0xdc>
    color.ch.blue  = (uint16_t)(b8 >> 3);
 800b644:	781e      	ldrb	r6, [r3, #0]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800b646:	7805      	ldrb	r5, [r0, #0]
 800b648:	08f6      	lsrs	r6, r6, #3
 800b64a:	43bd      	bics	r5, r7
 800b64c:	4335      	orrs	r5, r6
    color.ch.green = (uint16_t)(g8 >> 2);
 800b64e:	7859      	ldrb	r1, [r3, #1]
    color.ch.red   = (uint16_t)(r8 >> 3);
 800b650:	789a      	ldrb	r2, [r3, #2]
 800b652:	7005      	strb	r5, [r0, #0]
 800b654:	253f      	movs	r5, #63	; 0x3f
    color.ch.green = (uint16_t)(g8 >> 2);
 800b656:	0889      	lsrs	r1, r1, #2
 800b658:	4029      	ands	r1, r5
 800b65a:	4e0e      	ldr	r6, [pc, #56]	; (800b694 <lv_img_decoder_built_in_open+0x148>)
 800b65c:	8805      	ldrh	r5, [r0, #0]
 800b65e:	0149      	lsls	r1, r1, #5
 800b660:	4035      	ands	r5, r6
 800b662:	4329      	orrs	r1, r5
 800b664:	4665      	mov	r5, ip
    color.ch.red   = (uint16_t)(r8 >> 3);
 800b666:	08d2      	lsrs	r2, r2, #3
 800b668:	8001      	strh	r1, [r0, #0]
 800b66a:	403a      	ands	r2, r7
 800b66c:	0a09      	lsrs	r1, r1, #8
 800b66e:	00d2      	lsls	r2, r2, #3
 800b670:	4029      	ands	r1, r5
 800b672:	430a      	orrs	r2, r1
 800b674:	7042      	strb	r2, [r0, #1]
 800b676:	3304      	adds	r3, #4
 800b678:	3002      	adds	r0, #2
 800b67a:	e7e0      	b.n	800b63e <lv_img_decoder_built_in_open+0xf2>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 800b67c:	380b      	subs	r0, #11
 800b67e:	2803      	cmp	r0, #3
 800b680:	d9d2      	bls.n	800b628 <lv_img_decoder_built_in_open+0xdc>
        lv_img_decoder_built_in_close(decoder, dsc);
 800b682:	0021      	movs	r1, r4
 800b684:	0028      	movs	r0, r5
 800b686:	f7ff ff49 	bl	800b51c <lv_img_decoder_built_in_close>
        return LV_RES_INV;
 800b68a:	2000      	movs	r0, #0
 800b68c:	e79d      	b.n	800b5ca <lv_img_decoder_built_in_open+0x7e>
 800b68e:	46c0      	nop			; (mov r8, r8)
 800b690:	08010f22 	.word	0x08010f22
 800b694:	fffff81f 	.word	0xfffff81f

0800b698 <lv_img_decoder_built_in_info>:
{
 800b698:	b530      	push	{r4, r5, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800b69a:	0008      	movs	r0, r1
{
 800b69c:	b085      	sub	sp, #20
 800b69e:	000d      	movs	r5, r1
 800b6a0:	0014      	movs	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800b6a2:	f7fd fcf9 	bl	8009098 <lv_img_src_get_type>
 800b6a6:	1e03      	subs	r3, r0, #0
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800b6a8:	d11d      	bne.n	800b6e6 <lv_img_decoder_built_in_info+0x4e>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 800b6aa:	782a      	ldrb	r2, [r5, #0]
 800b6ac:	06d2      	lsls	r2, r2, #27
 800b6ae:	0ed2      	lsrs	r2, r2, #27
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800b6b0:	1f11      	subs	r1, r2, #4
 800b6b2:	290a      	cmp	r1, #10
 800b6b4:	d815      	bhi.n	800b6e2 <lv_img_decoder_built_in_info+0x4a>
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 800b6b6:	6820      	ldr	r0, [r4, #0]
 800b6b8:	4923      	ldr	r1, [pc, #140]	; (800b748 <lv_img_decoder_built_in_info+0xb0>)
 800b6ba:	682b      	ldr	r3, [r5, #0]
 800b6bc:	4001      	ands	r1, r0
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800b6be:	201f      	movs	r0, #31
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 800b6c0:	02db      	lsls	r3, r3, #11
 800b6c2:	0d5b      	lsrs	r3, r3, #21
 800b6c4:	029b      	lsls	r3, r3, #10
 800b6c6:	430b      	orrs	r3, r1
 800b6c8:	6023      	str	r3, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800b6ca:	886b      	ldrh	r3, [r5, #2]
 800b6cc:	095b      	lsrs	r3, r3, #5
 800b6ce:	0159      	lsls	r1, r3, #5
 800b6d0:	8863      	ldrh	r3, [r4, #2]
 800b6d2:	4003      	ands	r3, r0
 800b6d4:	430b      	orrs	r3, r1
 800b6d6:	8063      	strh	r3, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800b6d8:	7823      	ldrb	r3, [r4, #0]
 800b6da:	4383      	bics	r3, r0
 800b6dc:	431a      	orrs	r2, r3
 800b6de:	7022      	strb	r2, [r4, #0]
    return LV_RES_OK;
 800b6e0:	381e      	subs	r0, #30
}
 800b6e2:	b005      	add	sp, #20
 800b6e4:	bd30      	pop	{r4, r5, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 800b6e6:	2801      	cmp	r0, #1
 800b6e8:	d11a      	bne.n	800b720 <lv_img_decoder_built_in_info+0x88>
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
 800b6ea:	2202      	movs	r2, #2
 800b6ec:	0029      	movs	r1, r5
 800b6ee:	a802      	add	r0, sp, #8
 800b6f0:	f000 fe74 	bl	800c3dc <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	d108      	bne.n	800b70a <lv_img_decoder_built_in_info+0x72>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
 800b6f8:	ab01      	add	r3, sp, #4
 800b6fa:	2204      	movs	r2, #4
 800b6fc:	0021      	movs	r1, r4
 800b6fe:	a802      	add	r0, sp, #8
 800b700:	f000 fe29 	bl	800c356 <lv_fs_read>
            lv_fs_close(&file);
 800b704:	a802      	add	r0, sp, #8
 800b706:	f000 fe11 	bl	800c32c <lv_fs_close>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800b70a:	221f      	movs	r2, #31
 800b70c:	2000      	movs	r0, #0
 800b70e:	7823      	ldrb	r3, [r4, #0]
 800b710:	06db      	lsls	r3, r3, #27
 800b712:	0edb      	lsrs	r3, r3, #27
 800b714:	331c      	adds	r3, #28
 800b716:	4013      	ands	r3, r2
 800b718:	3a15      	subs	r2, #21
 800b71a:	429a      	cmp	r2, r3
 800b71c:	4140      	adcs	r0, r0
 800b71e:	e7e0      	b.n	800b6e2 <lv_img_decoder_built_in_info+0x4a>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800b720:	2000      	movs	r0, #0
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 800b722:	2b02      	cmp	r3, #2
 800b724:	d1dd      	bne.n	800b6e2 <lv_img_decoder_built_in_info+0x4a>
        header->w = 1;
 800b726:	6823      	ldr	r3, [r4, #0]
 800b728:	4a07      	ldr	r2, [pc, #28]	; (800b748 <lv_img_decoder_built_in_info+0xb0>)
    return LV_RES_OK;
 800b72a:	3001      	adds	r0, #1
        header->w = 1;
 800b72c:	401a      	ands	r2, r3
 800b72e:	2380      	movs	r3, #128	; 0x80
 800b730:	00db      	lsls	r3, r3, #3
 800b732:	4313      	orrs	r3, r2
        header->h = 1;
 800b734:	2220      	movs	r2, #32
        header->w = 1;
 800b736:	6023      	str	r3, [r4, #0]
        header->h = 1;
 800b738:	8062      	strh	r2, [r4, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800b73a:	32c0      	adds	r2, #192	; 0xc0
 800b73c:	4013      	ands	r3, r2
 800b73e:	3ad5      	subs	r2, #213	; 0xd5
 800b740:	4313      	orrs	r3, r2
 800b742:	7023      	strb	r3, [r4, #0]
 800b744:	e7cd      	b.n	800b6e2 <lv_img_decoder_built_in_info+0x4a>
 800b746:	46c0      	nop			; (mov r8, r8)
 800b748:	ffe003ff 	.word	0xffe003ff

0800b74c <lv_img_decoder_built_in_read_line>:
{
 800b74c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b74e:	b0b5      	sub	sp, #212	; 0xd4
 800b750:	001f      	movs	r7, r3
 800b752:	ab3a      	add	r3, sp, #232	; 0xe8
 800b754:	0014      	movs	r4, r2
 800b756:	2200      	movs	r2, #0
 800b758:	5e9b      	ldrsh	r3, [r3, r2]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800b75a:	7c08      	ldrb	r0, [r1, #16]
{
 800b75c:	9302      	str	r3, [sp, #8]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800b75e:	231f      	movs	r3, #31
 800b760:	4003      	ands	r3, r0
 800b762:	1f1a      	subs	r2, r3, #4
{
 800b764:	9101      	str	r1, [sp, #4]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800b766:	2a02      	cmp	r2, #2
 800b768:	d82e      	bhi.n	800b7c8 <lv_img_decoder_built_in_read_line+0x7c>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800b76a:	7b0b      	ldrb	r3, [r1, #12]
    lv_res_t res = LV_RES_INV;
 800b76c:	2500      	movs	r5, #0
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d127      	bne.n	800b7c2 <lv_img_decoder_built_in_read_line+0x76>

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b772:	6a0b      	ldr	r3, [r1, #32]
    lv_fs_res_t res;
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800b774:	06c0      	lsls	r0, r0, #27
 800b776:	0ec0      	lsrs	r0, r0, #27
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b778:	9303      	str	r3, [sp, #12]
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800b77a:	f7fd fc83 	bl	8009084 <lv_img_color_format_get_px_size>

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800b77e:	9b01      	ldr	r3, [sp, #4]
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800b780:	0006      	movs	r6, r0
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800b782:	6919      	ldr	r1, [r3, #16]
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(user_data->f, pos);
 800b784:	9b03      	ldr	r3, [sp, #12]
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800b786:	02c9      	lsls	r1, r1, #11
 800b788:	0d49      	lsrs	r1, r1, #21
 800b78a:	4379      	muls	r1, r7
 800b78c:	1909      	adds	r1, r1, r4
 800b78e:	4341      	muls	r1, r0
 800b790:	10c9      	asrs	r1, r1, #3
    pos += 4; /*Skip the header*/
 800b792:	3104      	adds	r1, #4
    res = lv_fs_seek(user_data->f, pos);
 800b794:	6818      	ldr	r0, [r3, #0]
 800b796:	f000 fdfc 	bl	800c392 <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 800b79a:	42a8      	cmp	r0, r5
 800b79c:	d111      	bne.n	800b7c2 <lv_img_decoder_built_in_read_line+0x76>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
    }
    uint32_t btr = len * (px_size >> 3);
 800b79e:	9b02      	ldr	r3, [sp, #8]
 800b7a0:	08f6      	lsrs	r6, r6, #3
 800b7a2:	b2f6      	uxtb	r6, r6
 800b7a4:	4373      	muls	r3, r6
 800b7a6:	001e      	movs	r6, r3
    uint32_t br  = 0;
    lv_fs_read(user_data->f, buf, btr, &br);
 800b7a8:	9803      	ldr	r0, [sp, #12]
 800b7aa:	ab0c      	add	r3, sp, #48	; 0x30
 800b7ac:	0032      	movs	r2, r6
 800b7ae:	993b      	ldr	r1, [sp, #236]	; 0xec
 800b7b0:	6800      	ldr	r0, [r0, #0]
    uint32_t br  = 0;
 800b7b2:	950c      	str	r5, [sp, #48]	; 0x30
    lv_fs_read(user_data->f, buf, btr, &br);
 800b7b4:	f000 fdcf 	bl	800c356 <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 800b7b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7ba:	1b9e      	subs	r6, r3, r6
 800b7bc:	4275      	negs	r5, r6
 800b7be:	4175      	adcs	r5, r6
        return LV_RES_INV;
 800b7c0:	b2ed      	uxtb	r5, r5
}
 800b7c2:	0028      	movs	r0, r5
 800b7c4:	b035      	add	sp, #212	; 0xd4
 800b7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 800b7c8:	001a      	movs	r2, r3
 800b7ca:	3a0b      	subs	r2, #11
 800b7cc:	2600      	movs	r6, #0
 800b7ce:	2a03      	cmp	r2, #3
 800b7d0:	d900      	bls.n	800b7d4 <lv_img_decoder_built_in_read_line+0x88>
 800b7d2:	e0ac      	b.n	800b92e <lv_img_decoder_built_in_read_line+0x1e2>
static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800b7d4:	22ff      	movs	r2, #255	; 0xff
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800b7d6:	2155      	movs	r1, #85	; 0x55
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800b7d8:	ab06      	add	r3, sp, #24
 800b7da:	705a      	strb	r2, [r3, #1]
 800b7dc:	701e      	strb	r6, [r3, #0]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800b7de:	ab07      	add	r3, sp, #28
 800b7e0:	7059      	strb	r1, [r3, #1]
 800b7e2:	1849      	adds	r1, r1, r1
 800b7e4:	7099      	strb	r1, [r3, #2]
 800b7e6:	70da      	strb	r2, [r3, #3]
 800b7e8:	701e      	strb	r6, [r3, #0]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800b7ea:	3aef      	subs	r2, #239	; 0xef
 800b7ec:	4997      	ldr	r1, [pc, #604]	; (800ba4c <lv_img_decoder_built_in_read_line+0x300>)
 800b7ee:	a808      	add	r0, sp, #32
 800b7f0:	f002 fccc 	bl	800e18c <memcpy>
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255};

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->style->image.color;
 800b7f4:	9b01      	ldr	r3, [sp, #4]
 800b7f6:	689b      	ldr	r3, [r3, #8]
 800b7f8:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800b7fa:	9303      	str	r3, [sp, #12]
 800b7fc:	9b3b      	ldr	r3, [sp, #236]	; 0xec
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800b7fe:	0a11      	lsrs	r1, r2, #8
    for(i = 0; i < len; i++) {
 800b800:	9802      	ldr	r0, [sp, #8]
 800b802:	42b0      	cmp	r0, r6
 800b804:	dc18      	bgt.n	800b838 <lv_img_decoder_built_in_read_line+0xec>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 800b806:	9b01      	ldr	r3, [sp, #4]
 800b808:	7c18      	ldrb	r0, [r3, #16]
 800b80a:	06c0      	lsls	r0, r0, #27
 800b80c:	0ec0      	lsrs	r0, r0, #27
 800b80e:	f7fd fc39 	bl	8009084 <lv_img_color_format_get_px_size>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800b812:	2301      	movs	r3, #1
 800b814:	4083      	lsls	r3, r0
 800b816:	3b01      	subs	r3, #1
 800b818:	b29b      	uxth	r3, r3
 800b81a:	9304      	str	r3, [sp, #16]

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
 800b81c:	9b01      	ldr	r3, [sp, #4]
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 800b81e:	9003      	str	r0, [sp, #12]
    switch(dsc->header.cf) {
 800b820:	7c18      	ldrb	r0, [r3, #16]
 800b822:	06c0      	lsls	r0, r0, #27
 800b824:	0ec0      	lsrs	r0, r0, #27
 800b826:	380b      	subs	r0, #11
 800b828:	2803      	cmp	r0, #3
 800b82a:	d854      	bhi.n	800b8d6 <lv_img_decoder_built_in_read_line+0x18a>
 800b82c:	691d      	ldr	r5, [r3, #16]
            ofs += w * y + (x >> 1); /*First pixel*/
            pos       = 4 - ((x & 0x1) * 4);
            opa_table = alpha4_opa_table;
            break;
        case LV_IMG_CF_ALPHA_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800b82e:	02ed      	lsls	r5, r5, #11
    switch(dsc->header.cf) {
 800b830:	f7f4 fc78 	bl	8000124 <__gnu_thumb1_case_uqi>
 800b834:	493a2b08 	.word	0x493a2b08
 800b838:	3601      	adds	r6, #1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 800b83a:	701a      	strb	r2, [r3, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800b83c:	7059      	strb	r1, [r3, #1]
 800b83e:	b236      	sxth	r6, r6
 800b840:	3303      	adds	r3, #3
 800b842:	e7dd      	b.n	800b800 <lv_img_decoder_built_in_read_line+0xb4>
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800b844:	0d6b      	lsrs	r3, r5, #21
 800b846:	10da      	asrs	r2, r3, #3
            if(dsc->header.w & 0x7) w++;
 800b848:	1c55      	adds	r5, r2, #1
 800b84a:	075b      	lsls	r3, r3, #29
 800b84c:	d100      	bne.n	800b850 <lv_img_decoder_built_in_read_line+0x104>
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800b84e:	b215      	sxth	r5, r2
            pos       = 7 - (x & 0x7);
 800b850:	2607      	movs	r6, #7
            ofs += w * y + (x >> 3); /*First pixel*/
 800b852:	436f      	muls	r7, r5
 800b854:	10e1      	asrs	r1, r4, #3
            pos       = 7 - (x & 0x7);
 800b856:	43a6      	bics	r6, r4
            ofs += w * y + (x >> 3); /*First pixel*/
 800b858:	1879      	adds	r1, r7, r1
            opa_table = alpha1_opa_table;
 800b85a:	ac06      	add	r4, sp, #24
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800b85c:	9b01      	ldr	r3, [sp, #4]
 800b85e:	7b1b      	ldrb	r3, [r3, #12]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d13c      	bne.n	800b8de <lv_img_decoder_built_in_read_line+0x192>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
 800b864:	9b01      	ldr	r3, [sp, #4]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	689b      	ldr	r3, [r3, #8]
 800b86a:	1859      	adds	r1, r3, r1
 800b86c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 800b86e:	2708      	movs	r7, #8
 800b870:	1c98      	adds	r0, r3, #2
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800b872:	231f      	movs	r3, #31
        data_tmp = fs_buf;
 800b874:	2200      	movs	r2, #0
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800b876:	469c      	mov	ip, r3
            pos = 8 - px_size;
 800b878:	9b03      	ldr	r3, [sp, #12]
 800b87a:	1aff      	subs	r7, r7, r3
 800b87c:	b27b      	sxtb	r3, r7
 800b87e:	9305      	str	r3, [sp, #20]
    for(i = 0; i < len; i++) {
 800b880:	9b02      	ldr	r3, [sp, #8]
 800b882:	4293      	cmp	r3, r2
 800b884:	dc39      	bgt.n	800b8fa <lv_img_decoder_built_in_read_line+0x1ae>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 800b886:	2501      	movs	r5, #1
 800b888:	e79b      	b.n	800b7c2 <lv_img_decoder_built_in_read_line+0x76>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800b88a:	0d6b      	lsrs	r3, r5, #21
 800b88c:	109a      	asrs	r2, r3, #2
            if(dsc->header.w & 0x3) w++;
 800b88e:	1c55      	adds	r5, r2, #1
 800b890:	079b      	lsls	r3, r3, #30
 800b892:	d100      	bne.n	800b896 <lv_img_decoder_built_in_read_line+0x14a>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800b894:	b215      	sxth	r5, r2
            pos       = 6 - ((x & 0x3) * 2);
 800b896:	2603      	movs	r6, #3
            ofs += w * y + (x >> 2); /*First pixel*/
 800b898:	436f      	muls	r7, r5
 800b89a:	10a1      	asrs	r1, r4, #2
            pos       = 6 - ((x & 0x3) * 2);
 800b89c:	b2a4      	uxth	r4, r4
 800b89e:	43a6      	bics	r6, r4
            ofs += w * y + (x >> 2); /*First pixel*/
 800b8a0:	1879      	adds	r1, r7, r1
            pos       = 6 - ((x & 0x3) * 2);
 800b8a2:	0076      	lsls	r6, r6, #1
            opa_table = alpha2_opa_table;
 800b8a4:	ac07      	add	r4, sp, #28
 800b8a6:	e7d9      	b.n	800b85c <lv_img_decoder_built_in_read_line+0x110>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800b8a8:	0d6b      	lsrs	r3, r5, #21
 800b8aa:	105a      	asrs	r2, r3, #1
            if(dsc->header.w & 0x1) w++;
 800b8ac:	1c55      	adds	r5, r2, #1
 800b8ae:	07db      	lsls	r3, r3, #31
 800b8b0:	d400      	bmi.n	800b8b4 <lv_img_decoder_built_in_read_line+0x168>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800b8b2:	b215      	sxth	r5, r2
            ofs += w * y + (x >> 1); /*First pixel*/
 800b8b4:	436f      	muls	r7, r5
 800b8b6:	1061      	asrs	r1, r4, #1
 800b8b8:	1879      	adds	r1, r7, r1
            pos       = 4 - ((x & 0x1) * 4);
 800b8ba:	2600      	movs	r6, #0
 800b8bc:	07e3      	lsls	r3, r4, #31
 800b8be:	d400      	bmi.n	800b8c2 <lv_img_decoder_built_in_read_line+0x176>
 800b8c0:	2604      	movs	r6, #4
            opa_table = alpha4_opa_table;
 800b8c2:	ac08      	add	r4, sp, #32
 800b8c4:	e7ca      	b.n	800b85c <lv_img_decoder_built_in_read_line+0x110>
            pos = 0;
 800b8c6:	2600      	movs	r6, #0
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800b8c8:	0d6d      	lsrs	r5, r5, #21
 800b8ca:	b2a9      	uxth	r1, r5
            ofs += w * y + x;  /*First pixel*/
 800b8cc:	4379      	muls	r1, r7
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800b8ce:	b22d      	sxth	r5, r5
            ofs += w * y + x;  /*First pixel*/
 800b8d0:	1909      	adds	r1, r1, r4
    const lv_opa_t * opa_table = NULL;
 800b8d2:	0034      	movs	r4, r6
 800b8d4:	e7c2      	b.n	800b85c <lv_img_decoder_built_in_read_line+0x110>
    int8_t pos   = 0;
 800b8d6:	2600      	movs	r6, #0
    uint32_t ofs = 0;
 800b8d8:	0031      	movs	r1, r6
    lv_coord_t w = 0;
 800b8da:	0035      	movs	r5, r6
 800b8dc:	e7f9      	b.n	800b8d2 <lv_img_decoder_built_in_read_line+0x186>
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b8de:	9b01      	ldr	r3, [sp, #4]
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 800b8e0:	3104      	adds	r1, #4
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b8e2:	6a1f      	ldr	r7, [r3, #32]
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 800b8e4:	6838      	ldr	r0, [r7, #0]
 800b8e6:	f000 fd54 	bl	800c392 <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 800b8ea:	a90c      	add	r1, sp, #48	; 0x30
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	002a      	movs	r2, r5
 800b8f0:	6838      	ldr	r0, [r7, #0]
 800b8f2:	f000 fd30 	bl	800c356 <lv_fs_read>
        data_tmp = fs_buf;
 800b8f6:	a90c      	add	r1, sp, #48	; 0x30
 800b8f8:	e7b8      	b.n	800b86c <lv_img_decoder_built_in_read_line+0x120>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800b8fa:	9b04      	ldr	r3, [sp, #16]
 800b8fc:	780d      	ldrb	r5, [r1, #0]
 800b8fe:	40b3      	lsls	r3, r6
 800b900:	402b      	ands	r3, r5
 800b902:	4133      	asrs	r3, r6
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800b904:	4667      	mov	r7, ip
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800b906:	9d01      	ldr	r5, [sp, #4]
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	7c2d      	ldrb	r5, [r5, #16]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800b90c:	403d      	ands	r5, r7
 800b90e:	2d0e      	cmp	r5, #14
 800b910:	d10b      	bne.n	800b92a <lv_img_decoder_built_in_read_line+0x1de>
 800b912:	7003      	strb	r3, [r0, #0]
        pos -= px_size;
 800b914:	9b03      	ldr	r3, [sp, #12]
 800b916:	1af6      	subs	r6, r6, r3
 800b918:	b276      	sxtb	r6, r6
        if(pos < 0) {
 800b91a:	2e00      	cmp	r6, #0
 800b91c:	da01      	bge.n	800b922 <lv_img_decoder_built_in_read_line+0x1d6>
            pos = 8 - px_size;
 800b91e:	9e05      	ldr	r6, [sp, #20]
            data_tmp++;
 800b920:	3101      	adds	r1, #1
 800b922:	3201      	adds	r2, #1
 800b924:	b212      	sxth	r2, r2
 800b926:	3003      	adds	r0, #3
 800b928:	e7aa      	b.n	800b880 <lv_img_decoder_built_in_read_line+0x134>
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800b92a:	5ce3      	ldrb	r3, [r4, r3]
 800b92c:	e7f1      	b.n	800b912 <lv_img_decoder_built_in_read_line+0x1c6>
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 800b92e:	3b07      	subs	r3, #7
    lv_res_t res = LV_RES_INV;
 800b930:	0035      	movs	r5, r6
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 800b932:	2b03      	cmp	r3, #3
 800b934:	d900      	bls.n	800b938 <lv_img_decoder_built_in_read_line+0x1ec>
 800b936:	e744      	b.n	800b7c2 <lv_img_decoder_built_in_read_line+0x76>
static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800b938:	06c0      	lsls	r0, r0, #27
 800b93a:	0ec0      	lsrs	r0, r0, #27
 800b93c:	f7fd fba2 	bl	8009084 <lv_img_color_format_get_px_size>
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800b940:	2301      	movs	r3, #1
 800b942:	4083      	lsls	r3, r0
 800b944:	3b01      	subs	r3, #1
 800b946:	b29b      	uxth	r3, r3
 800b948:	9304      	str	r3, [sp, #16]

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
 800b94a:	9b01      	ldr	r3, [sp, #4]
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800b94c:	9003      	str	r0, [sp, #12]
    switch(dsc->header.cf) {
 800b94e:	7c18      	ldrb	r0, [r3, #16]
 800b950:	06c0      	lsls	r0, r0, #27
 800b952:	0ec0      	lsrs	r0, r0, #27
 800b954:	3807      	subs	r0, #7
 800b956:	2803      	cmp	r0, #3
 800b958:	d868      	bhi.n	800ba2c <lv_img_decoder_built_in_read_line+0x2e0>
 800b95a:	691d      	ldr	r5, [r3, #16]
            ofs += w * y + (x >> 1); /*First pixel*/
            ofs += 64;               /*Skip the palette*/
            pos = 4 - ((x & 0x1) * 4);
            break;
        case LV_IMG_CF_INDEXED_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800b95c:	02ed      	lsls	r5, r5, #11
    switch(dsc->header.cf) {
 800b95e:	f7f4 fbe1 	bl	8000124 <__gnu_thumb1_case_uqi>
 800b962:	3a02      	.short	0x3a02
 800b964:	5b4a      	.short	0x5b4a
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800b966:	0d6b      	lsrs	r3, r5, #21
 800b968:	10da      	asrs	r2, r3, #3
            if(dsc->header.w & 0x7) w++;
 800b96a:	1c55      	adds	r5, r2, #1
 800b96c:	075b      	lsls	r3, r3, #29
 800b96e:	d100      	bne.n	800b972 <lv_img_decoder_built_in_read_line+0x226>
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800b970:	b215      	sxth	r5, r2
            ofs += w * y + (x >> 3); /*First pixel*/
 800b972:	003e      	movs	r6, r7
            pos = 7 - (x & 0x7);
 800b974:	2707      	movs	r7, #7
            ofs += w * y + (x >> 3); /*First pixel*/
 800b976:	436e      	muls	r6, r5
 800b978:	10e1      	asrs	r1, r4, #3
 800b97a:	1876      	adds	r6, r6, r1
            ofs += 8;                /*Skip the palette*/
 800b97c:	3608      	adds	r6, #8
            pos = 7 - (x & 0x7);
 800b97e:	43a7      	bics	r7, r4
            ofs += 1024;       /*Skip the palette*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800b980:	9b01      	ldr	r3, [sp, #4]
 800b982:	6a1c      	ldr	r4, [r3, #32]

#if LV_USE_FILESYSTEM
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800b984:	7b1b      	ldrb	r3, [r3, #12]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d153      	bne.n	800ba32 <lv_img_decoder_built_in_read_line+0x2e6>
        const lv_img_dsc_t * img_dsc = dsc->src;
        data_tmp                     = img_dsc->data + ofs;
 800b98a:	9b01      	ldr	r3, [sp, #4]
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	6899      	ldr	r1, [r3, #8]
 800b990:	198e      	adds	r6, r1, r6
    uint8_t val_act;
    lv_coord_t i;
    lv_color_t * cbuf = (lv_color_t *)buf;
    for(i = 0; i < len; i++) {
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
        cbuf[i] = user_data->palette[val_act];
 800b992:	23ff      	movs	r3, #255	; 0xff

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 800b994:	2208      	movs	r2, #8
        data_tmp = fs_buf;
 800b996:	2100      	movs	r1, #0
        cbuf[i] = user_data->palette[val_act];
 800b998:	469c      	mov	ip, r3
            pos = 8 - px_size;
 800b99a:	9b03      	ldr	r3, [sp, #12]
 800b99c:	1ad2      	subs	r2, r2, r3
 800b99e:	b252      	sxtb	r2, r2
    for(i = 0; i < len; i++) {
 800b9a0:	9802      	ldr	r0, [sp, #8]
 800b9a2:	b20b      	sxth	r3, r1
 800b9a4:	4298      	cmp	r0, r3
 800b9a6:	dc00      	bgt.n	800b9aa <lv_img_decoder_built_in_read_line+0x25e>
 800b9a8:	e76d      	b.n	800b886 <lv_img_decoder_built_in_read_line+0x13a>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800b9aa:	9b04      	ldr	r3, [sp, #16]
 800b9ac:	7835      	ldrb	r5, [r6, #0]
 800b9ae:	40bb      	lsls	r3, r7
 800b9b0:	402b      	ands	r3, r5
 800b9b2:	413b      	asrs	r3, r7
        cbuf[i] = user_data->palette[val_act];
 800b9b4:	4665      	mov	r5, ip
 800b9b6:	402b      	ands	r3, r5
 800b9b8:	6865      	ldr	r5, [r4, #4]
 800b9ba:	005b      	lsls	r3, r3, #1
 800b9bc:	5b5b      	ldrh	r3, [r3, r5]
 800b9be:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800b9c0:	0048      	lsls	r0, r1, #1
 800b9c2:	522b      	strh	r3, [r5, r0]
        pos -= px_size;
 800b9c4:	9b03      	ldr	r3, [sp, #12]
 800b9c6:	1aff      	subs	r7, r7, r3
 800b9c8:	b27f      	sxtb	r7, r7
        if(pos < 0) {
 800b9ca:	2f00      	cmp	r7, #0
 800b9cc:	da01      	bge.n	800b9d2 <lv_img_decoder_built_in_read_line+0x286>
            pos = 8 - px_size;
 800b9ce:	0017      	movs	r7, r2
            data_tmp++;
 800b9d0:	3601      	adds	r6, #1
 800b9d2:	3101      	adds	r1, #1
 800b9d4:	e7e4      	b.n	800b9a0 <lv_img_decoder_built_in_read_line+0x254>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800b9d6:	0d6b      	lsrs	r3, r5, #21
 800b9d8:	109a      	asrs	r2, r3, #2
            if(dsc->header.w & 0x3) w++;
 800b9da:	1c55      	adds	r5, r2, #1
 800b9dc:	079b      	lsls	r3, r3, #30
 800b9de:	d100      	bne.n	800b9e2 <lv_img_decoder_built_in_read_line+0x296>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800b9e0:	b215      	sxth	r5, r2
            ofs += w * y + (x >> 2); /*First pixel*/
 800b9e2:	003e      	movs	r6, r7
            pos = 6 - ((x & 0x3) * 2);
 800b9e4:	2703      	movs	r7, #3
            ofs += w * y + (x >> 2); /*First pixel*/
 800b9e6:	436e      	muls	r6, r5
 800b9e8:	10a1      	asrs	r1, r4, #2
            pos = 6 - ((x & 0x3) * 2);
 800b9ea:	b2a4      	uxth	r4, r4
            ofs += w * y + (x >> 2); /*First pixel*/
 800b9ec:	1876      	adds	r6, r6, r1
            pos = 6 - ((x & 0x3) * 2);
 800b9ee:	43a7      	bics	r7, r4
            ofs += 16;               /*Skip the palette*/
 800b9f0:	3610      	adds	r6, #16
            pos = 6 - ((x & 0x3) * 2);
 800b9f2:	007f      	lsls	r7, r7, #1
 800b9f4:	e7c4      	b.n	800b980 <lv_img_decoder_built_in_read_line+0x234>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800b9f6:	0d6b      	lsrs	r3, r5, #21
 800b9f8:	105a      	asrs	r2, r3, #1
            if(dsc->header.w & 0x1) w++;
 800b9fa:	1c55      	adds	r5, r2, #1
 800b9fc:	07db      	lsls	r3, r3, #31
 800b9fe:	d400      	bmi.n	800ba02 <lv_img_decoder_built_in_read_line+0x2b6>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800ba00:	b215      	sxth	r5, r2
            ofs += w * y + (x >> 1); /*First pixel*/
 800ba02:	003e      	movs	r6, r7
            pos = 4 - ((x & 0x1) * 4);
 800ba04:	2701      	movs	r7, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 800ba06:	1061      	asrs	r1, r4, #1
            pos = 4 - ((x & 0x1) * 4);
 800ba08:	403c      	ands	r4, r7
 800ba0a:	4267      	negs	r7, r4
 800ba0c:	4167      	adcs	r7, r4
            ofs += w * y + (x >> 1); /*First pixel*/
 800ba0e:	436e      	muls	r6, r5
 800ba10:	1876      	adds	r6, r6, r1
            ofs += 64;               /*Skip the palette*/
 800ba12:	3640      	adds	r6, #64	; 0x40
            pos = 4 - ((x & 0x1) * 4);
 800ba14:	00bf      	lsls	r7, r7, #2
 800ba16:	e7b3      	b.n	800b980 <lv_img_decoder_built_in_read_line+0x234>
            ofs += 1024;       /*Skip the palette*/
 800ba18:	2380      	movs	r3, #128	; 0x80
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800ba1a:	0d6d      	lsrs	r5, r5, #21
 800ba1c:	b2ae      	uxth	r6, r5
            ofs += w * y + x;  /*First pixel*/
 800ba1e:	437e      	muls	r6, r7
            ofs += 1024;       /*Skip the palette*/
 800ba20:	00db      	lsls	r3, r3, #3
            ofs += w * y + x;  /*First pixel*/
 800ba22:	1936      	adds	r6, r6, r4
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800ba24:	b22d      	sxth	r5, r5
            ofs += 1024;       /*Skip the palette*/
 800ba26:	18f6      	adds	r6, r6, r3
            pos = 0;
 800ba28:	2700      	movs	r7, #0
 800ba2a:	e7a9      	b.n	800b980 <lv_img_decoder_built_in_read_line+0x234>
    int8_t pos   = 0;
 800ba2c:	0037      	movs	r7, r6
    lv_coord_t w = 0;
 800ba2e:	0035      	movs	r5, r6
 800ba30:	e7a6      	b.n	800b980 <lv_img_decoder_built_in_read_line+0x234>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 800ba32:	1d31      	adds	r1, r6, #4
 800ba34:	6820      	ldr	r0, [r4, #0]
 800ba36:	f000 fcac 	bl	800c392 <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	002a      	movs	r2, r5
 800ba3e:	a90c      	add	r1, sp, #48	; 0x30
 800ba40:	6820      	ldr	r0, [r4, #0]
 800ba42:	f000 fc88 	bl	800c356 <lv_fs_read>
        data_tmp = fs_buf;
 800ba46:	ae0c      	add	r6, sp, #48	; 0x30
 800ba48:	e7a3      	b.n	800b992 <lv_img_decoder_built_in_read_line+0x246>
 800ba4a:	46c0      	nop			; (mov r8, r8)
 800ba4c:	08010cee 	.word	0x08010cee

0800ba50 <lv_img_decoder_close>:
{
 800ba50:	0001      	movs	r1, r0
    if(dsc->decoder) {
 800ba52:	6800      	ldr	r0, [r0, #0]
{
 800ba54:	b510      	push	{r4, lr}
    if(dsc->decoder) {
 800ba56:	2800      	cmp	r0, #0
 800ba58:	d003      	beq.n	800ba62 <lv_img_decoder_close+0x12>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 800ba5a:	68c2      	ldr	r2, [r0, #12]
 800ba5c:	2a00      	cmp	r2, #0
 800ba5e:	d000      	beq.n	800ba62 <lv_img_decoder_close+0x12>
 800ba60:	4790      	blx	r2
}
 800ba62:	bd10      	pop	{r4, pc}

0800ba64 <lv_img_decoder_create>:
{
 800ba64:	b510      	push	{r4, lr}
    decoder = lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 800ba66:	4806      	ldr	r0, [pc, #24]	; (800ba80 <lv_img_decoder_create+0x1c>)
 800ba68:	f000 fd3f 	bl	800c4ea <lv_ll_ins_head>
 800ba6c:	1e04      	subs	r4, r0, #0
    lv_mem_assert(decoder);
 800ba6e:	d100      	bne.n	800ba72 <lv_img_decoder_create+0xe>
 800ba70:	e7fe      	b.n	800ba70 <lv_img_decoder_create+0xc>
    memset(decoder, 0, sizeof(lv_img_decoder_t));
 800ba72:	2210      	movs	r2, #16
 800ba74:	2100      	movs	r1, #0
 800ba76:	f002 fb92 	bl	800e19e <memset>
}
 800ba7a:	0020      	movs	r0, r4
 800ba7c:	bd10      	pop	{r4, pc}
 800ba7e:	46c0      	nop			; (mov r8, r8)
 800ba80:	20005434 	.word	0x20005434

0800ba84 <lv_img_decoder_init>:
{
 800ba84:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 800ba86:	2110      	movs	r1, #16
 800ba88:	4808      	ldr	r0, [pc, #32]	; (800baac <lv_img_decoder_init+0x28>)
 800ba8a:	f000 fd24 	bl	800c4d6 <lv_ll_init>
    decoder = lv_img_decoder_create();
 800ba8e:	f7ff ffe9 	bl	800ba64 <lv_img_decoder_create>
    if(decoder == NULL) {
 800ba92:	2800      	cmp	r0, #0
 800ba94:	d100      	bne.n	800ba98 <lv_img_decoder_init+0x14>
 800ba96:	e7fe      	b.n	800ba96 <lv_img_decoder_init+0x12>
    decoder->info_cb = info_cb;
 800ba98:	4b05      	ldr	r3, [pc, #20]	; (800bab0 <lv_img_decoder_init+0x2c>)
 800ba9a:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
 800ba9c:	4b05      	ldr	r3, [pc, #20]	; (800bab4 <lv_img_decoder_init+0x30>)
 800ba9e:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
 800baa0:	4b05      	ldr	r3, [pc, #20]	; (800bab8 <lv_img_decoder_init+0x34>)
 800baa2:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
 800baa4:	4b05      	ldr	r3, [pc, #20]	; (800babc <lv_img_decoder_init+0x38>)
 800baa6:	60c3      	str	r3, [r0, #12]
}
 800baa8:	bd10      	pop	{r4, pc}
 800baaa:	46c0      	nop			; (mov r8, r8)
 800baac:	20005434 	.word	0x20005434
 800bab0:	0800b699 	.word	0x0800b699
 800bab4:	0800b54d 	.word	0x0800b54d
 800bab8:	0800b74d 	.word	0x0800b74d
 800babc:	0800b51d 	.word	0x0800b51d

0800bac0 <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
 800bac0:	b510      	push	{r4, lr}
    return font_p->get_glyph_bitmap(font_p, letter);
 800bac2:	6843      	ldr	r3, [r0, #4]
 800bac4:	4798      	blx	r3
}
 800bac6:	bd10      	pop	{r4, pc}

0800bac8 <lv_font_get_glyph_dsc>:
 * @param letter an UNICODE letter code
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter, uint32_t letter_next)
{
 800bac8:	b510      	push	{r4, lr}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 800baca:	6804      	ldr	r4, [r0, #0]
 800bacc:	47a0      	blx	r4
}
 800bace:	bd10      	pop	{r4, pc}

0800bad0 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 800bad0:	b507      	push	{r0, r1, r2, lr}
 800bad2:	0013      	movs	r3, r2
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 800bad4:	000a      	movs	r2, r1
 800bad6:	4669      	mov	r1, sp
 800bad8:	f7ff fff6 	bl	800bac8 <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
    else return 0;
 800badc:	2300      	movs	r3, #0
    if(ret) return g.adv_w;
 800bade:	4298      	cmp	r0, r3
 800bae0:	d001      	beq.n	800bae6 <lv_font_get_glyph_width+0x16>
 800bae2:	466b      	mov	r3, sp
 800bae4:	881b      	ldrh	r3, [r3, #0]
}
 800bae6:	0018      	movs	r0, r3
 800bae8:	bd0e      	pop	{r1, r2, r3, pc}

0800baea <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 800baea:	7803      	ldrb	r3, [r0, #0]
 800baec:	780a      	ldrb	r2, [r1, #0]
 800baee:	4293      	cmp	r3, r2
 800baf0:	d001      	beq.n	800baf6 <kern_pair_8_compare+0xc>
 800baf2:	1a98      	subs	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];

}
 800baf4:	4770      	bx	lr
    else return (int32_t) ref8_p[1] - element8_p[1];
 800baf6:	7840      	ldrb	r0, [r0, #1]
 800baf8:	784b      	ldrb	r3, [r1, #1]
 800bafa:	1ac0      	subs	r0, r0, r3
 800bafc:	e7fa      	b.n	800baf4 <kern_pair_8_compare+0xa>

0800bafe <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 800bafe:	8803      	ldrh	r3, [r0, #0]
 800bb00:	880a      	ldrh	r2, [r1, #0]
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d001      	beq.n	800bb0a <kern_pair_16_compare+0xc>
 800bb06:	1a98      	subs	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
}
 800bb08:	4770      	bx	lr
    else return (int32_t) ref16_p[1] - element16_p[1];
 800bb0a:	8840      	ldrh	r0, [r0, #2]
 800bb0c:	884b      	ldrh	r3, [r1, #2]
 800bb0e:	1ac0      	subs	r0, r0, r3
 800bb10:	e7fa      	b.n	800bb08 <kern_pair_16_compare+0xa>

0800bb12 <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return (*(uint16_t *)ref) - (*(uint16_t *)element);
 800bb12:	8800      	ldrh	r0, [r0, #0]
 800bb14:	880b      	ldrh	r3, [r1, #0]
 800bb16:	1ac0      	subs	r0, r0, r3
}
 800bb18:	4770      	bx	lr
	...

0800bb1c <get_glyph_dsc_id.isra.0.part.1>:
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800bb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800bb1e:	6804      	ldr	r4, [r0, #0]
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800bb20:	b085      	sub	sp, #20
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800bb22:	6963      	ldr	r3, [r4, #20]
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 800bb24:	000d      	movs	r5, r1
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800bb26:	428b      	cmp	r3, r1
 800bb28:	d009      	beq.n	800bb3e <get_glyph_dsc_id.isra.0.part.1+0x22>
 800bb2a:	2300      	movs	r3, #0
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800bb2c:	2014      	movs	r0, #20
    for(i = 0; i < fdsc->cmap_num; i++) {
 800bb2e:	8a62      	ldrh	r2, [r4, #18]
 800bb30:	0592      	lsls	r2, r2, #22
 800bb32:	0d92      	lsrs	r2, r2, #22
 800bb34:	4293      	cmp	r3, r2
 800bb36:	db05      	blt.n	800bb44 <get_glyph_dsc_id.isra.0.part.1+0x28>
    fdsc->last_letter = letter;
 800bb38:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 800bb3a:	2000      	movs	r0, #0
 800bb3c:	e016      	b.n	800bb6c <get_glyph_dsc_id.isra.0.part.1+0x50>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800bb3e:	69a0      	ldr	r0, [r4, #24]
}
 800bb40:	b005      	add	sp, #20
 800bb42:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800bb44:	0006      	movs	r6, r0
 800bb46:	435e      	muls	r6, r3
 800bb48:	68a2      	ldr	r2, [r4, #8]
 800bb4a:	1991      	adds	r1, r2, r6
 800bb4c:	680a      	ldr	r2, [r1, #0]
 800bb4e:	1aaa      	subs	r2, r5, r2
 800bb50:	9203      	str	r2, [sp, #12]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800bb52:	888f      	ldrh	r7, [r1, #4]
 800bb54:	42ba      	cmp	r2, r7
 800bb56:	d902      	bls.n	800bb5e <get_glyph_dsc_id.isra.0.part.1+0x42>
    for(i = 0; i < fdsc->cmap_num; i++) {
 800bb58:	3301      	adds	r3, #1
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	e7e7      	b.n	800bb2e <get_glyph_dsc_id.isra.0.part.1+0x12>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 800bb5e:	2003      	movs	r0, #3
 800bb60:	7c8b      	ldrb	r3, [r1, #18]
 800bb62:	4003      	ands	r3, r0
 800bb64:	d104      	bne.n	800bb70 <get_glyph_dsc_id.isra.0.part.1+0x54>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 800bb66:	88c8      	ldrh	r0, [r1, #6]
 800bb68:	1880      	adds	r0, r0, r2
        fdsc->last_letter = letter;
 800bb6a:	6165      	str	r5, [r4, #20]
    fdsc->last_glyph_id = 0;
 800bb6c:	61a0      	str	r0, [r4, #24]
 800bb6e:	e7e7      	b.n	800bb40 <get_glyph_dsc_id.isra.0.part.1+0x24>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 800bb70:	2b01      	cmp	r3, #1
 800bb72:	d104      	bne.n	800bb7e <get_glyph_dsc_id.isra.0.part.1+0x62>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 800bb74:	68cb      	ldr	r3, [r1, #12]
 800bb76:	5c98      	ldrb	r0, [r3, r2]
 800bb78:	88cb      	ldrh	r3, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800bb7a:	18c0      	adds	r0, r0, r3
 800bb7c:	e7f5      	b.n	800bb6a <get_glyph_dsc_id.isra.0.part.1+0x4e>
 800bb7e:	4811      	ldr	r0, [pc, #68]	; (800bbc4 <get_glyph_dsc_id.isra.0.part.1+0xa8>)
 800bb80:	8a0a      	ldrh	r2, [r1, #16]
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 800bb82:	9000      	str	r0, [sp, #0]
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 800bb84:	2b02      	cmp	r3, #2
 800bb86:	d10e      	bne.n	800bba6 <get_glyph_dsc_id.isra.0.part.1+0x8a>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 800bb88:	6889      	ldr	r1, [r1, #8]
 800bb8a:	a803      	add	r0, sp, #12
 800bb8c:	f001 fa5a 	bl	800d044 <lv_utils_bsearch>
            if(p) {
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d101      	bne.n	800bb98 <get_glyph_dsc_id.isra.0.part.1+0x7c>
        uint32_t glyph_id = 0;
 800bb94:	2000      	movs	r0, #0
 800bb96:	e7e8      	b.n	800bb6a <get_glyph_dsc_id.isra.0.part.1+0x4e>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 800bb98:	68a3      	ldr	r3, [r4, #8]
 800bb9a:	199e      	adds	r6, r3, r6
 800bb9c:	68b3      	ldr	r3, [r6, #8]
 800bb9e:	1ac0      	subs	r0, r0, r3
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 800bba0:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800bba2:	88f3      	ldrh	r3, [r6, #6]
 800bba4:	e7e9      	b.n	800bb7a <get_glyph_dsc_id.isra.0.part.1+0x5e>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 800bba6:	2302      	movs	r3, #2
 800bba8:	6889      	ldr	r1, [r1, #8]
 800bbaa:	a803      	add	r0, sp, #12
 800bbac:	f001 fa4a 	bl	800d044 <lv_utils_bsearch>
            if(p) {
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	d0ef      	beq.n	800bb94 <get_glyph_dsc_id.isra.0.part.1+0x78>
                uint32_t ofs = (lv_uintptr_t)p - (lv_uintptr_t) fdsc->cmaps[i].unicode_list;
 800bbb4:	68a3      	ldr	r3, [r4, #8]
 800bbb6:	199e      	adds	r6, r3, r6
 800bbb8:	68b3      	ldr	r3, [r6, #8]
 800bbba:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800bbbc:	68f3      	ldr	r3, [r6, #12]
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 800bbbe:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800bbc0:	5c18      	ldrb	r0, [r3, r0]
 800bbc2:	e7ee      	b.n	800bba2 <get_glyph_dsc_id.isra.0.part.1+0x86>
 800bbc4:	0800bb13 	.word	0x0800bb13

0800bbc8 <lv_font_get_bitmap_fmt_txt>:
{
 800bbc8:	b510      	push	{r4, lr}
    if(letter == '\0') return 0;
 800bbca:	2900      	cmp	r1, #0
 800bbcc:	d101      	bne.n	800bbd2 <lv_font_get_bitmap_fmt_txt+0xa>
    if(!gid) return false;
 800bbce:	2000      	movs	r0, #0
}
 800bbd0:	bd10      	pop	{r4, pc}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800bbd2:	68c4      	ldr	r4, [r0, #12]
 800bbd4:	300c      	adds	r0, #12
 800bbd6:	f7ff ffa1 	bl	800bb1c <get_glyph_dsc_id.isra.0.part.1>
    if(!gid) return false;
 800bbda:	2800      	cmp	r0, #0
 800bbdc:	d0f7      	beq.n	800bbce <lv_font_get_bitmap_fmt_txt+0x6>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800bbde:	6863      	ldr	r3, [r4, #4]
 800bbe0:	00c0      	lsls	r0, r0, #3
 800bbe2:	1818      	adds	r0, r3, r0
    if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	d0f2      	beq.n	800bbce <lv_font_get_bitmap_fmt_txt+0x6>
 800bbe8:	6800      	ldr	r0, [r0, #0]
 800bbea:	6823      	ldr	r3, [r4, #0]
 800bbec:	0300      	lsls	r0, r0, #12
 800bbee:	0b00      	lsrs	r0, r0, #12
 800bbf0:	1818      	adds	r0, r3, r0
 800bbf2:	e7ed      	b.n	800bbd0 <lv_font_get_bitmap_fmt_txt+0x8>

0800bbf4 <lv_font_get_glyph_dsc_fmt_txt>:
{
 800bbf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbf6:	b087      	sub	sp, #28
 800bbf8:	0005      	movs	r5, r0
 800bbfa:	000f      	movs	r7, r1
 800bbfc:	9303      	str	r3, [sp, #12]
    if(letter == '\0') return 0;
 800bbfe:	2a00      	cmp	r2, #0
 800bc00:	d102      	bne.n	800bc08 <lv_font_get_glyph_dsc_fmt_txt+0x14>
    if(!gid) return false;
 800bc02:	2000      	movs	r0, #0
}
 800bc04:	b007      	add	sp, #28
 800bc06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc08:	0006      	movs	r6, r0
 800bc0a:	360c      	adds	r6, #12
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800bc0c:	68c4      	ldr	r4, [r0, #12]
 800bc0e:	0011      	movs	r1, r2
 800bc10:	0030      	movs	r0, r6
 800bc12:	f7ff ff83 	bl	800bb1c <get_glyph_dsc_id.isra.0.part.1>
 800bc16:	9002      	str	r0, [sp, #8]
    if(!gid) return false;
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	d0f2      	beq.n	800bc02 <lv_font_get_glyph_dsc_fmt_txt+0xe>
    if(fdsc->kern_dsc) {
 800bc1c:	68e3      	ldr	r3, [r4, #12]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d11b      	bne.n	800bc5a <lv_font_get_glyph_dsc_fmt_txt+0x66>
    int8_t kvalue = 0;
 800bc22:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800bc24:	9a02      	ldr	r2, [sp, #8]
 800bc26:	6861      	ldr	r1, [r4, #4]
 800bc28:	00d2      	lsls	r2, r2, #3
 800bc2a:	188a      	adds	r2, r1, r2
    uint32_t adv_w = gdsc->adv_w + ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 800bc2c:	8a21      	ldrh	r1, [r4, #16]
    return true;
 800bc2e:	2001      	movs	r0, #1
    uint32_t adv_w = gdsc->adv_w + ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 800bc30:	434b      	muls	r3, r1
 800bc32:	8851      	ldrh	r1, [r2, #2]
 800bc34:	111b      	asrs	r3, r3, #4
 800bc36:	0909      	lsrs	r1, r1, #4
 800bc38:	185b      	adds	r3, r3, r1
    adv_w  = (adv_w + (1 << 3)) >> 4;
 800bc3a:	3308      	adds	r3, #8
 800bc3c:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
 800bc3e:	803b      	strh	r3, [r7, #0]
    dsc_out->box_h = gdsc->box_h;
 800bc40:	7953      	ldrb	r3, [r2, #5]
 800bc42:	70fb      	strb	r3, [r7, #3]
    dsc_out->box_w = gdsc->box_w;
 800bc44:	7913      	ldrb	r3, [r2, #4]
 800bc46:	70bb      	strb	r3, [r7, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 800bc48:	7993      	ldrb	r3, [r2, #6]
 800bc4a:	713b      	strb	r3, [r7, #4]
    dsc_out->ofs_y = gdsc->ofs_y;
 800bc4c:	79d3      	ldrb	r3, [r2, #7]
 800bc4e:	717b      	strb	r3, [r7, #5]
    dsc_out->bpp   = fdsc->bpp;
 800bc50:	7ce3      	ldrb	r3, [r4, #19]
 800bc52:	06db      	lsls	r3, r3, #27
 800bc54:	0f5b      	lsrs	r3, r3, #29
 800bc56:	71bb      	strb	r3, [r7, #6]
    return true;
 800bc58:	e7d4      	b.n	800bc04 <lv_font_get_glyph_dsc_fmt_txt+0x10>
    if(letter == '\0') return 0;
 800bc5a:	9b03      	ldr	r3, [sp, #12]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d0e0      	beq.n	800bc22 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
 800bc60:	0019      	movs	r1, r3
 800bc62:	0030      	movs	r0, r6
 800bc64:	f7ff ff5a 	bl	800bb1c <get_glyph_dsc_id.isra.0.part.1>
        if(gid_next) {
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	d0da      	beq.n	800bc22 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
 800bc6c:	68eb      	ldr	r3, [r5, #12]
    if(fdsc->kern_classes == 0) {
 800bc6e:	7cda      	ldrb	r2, [r3, #19]
 800bc70:	68dd      	ldr	r5, [r3, #12]
 800bc72:	0693      	lsls	r3, r2, #26
 800bc74:	d432      	bmi.n	800bcdc <lv_font_get_glyph_dsc_fmt_txt+0xe8>
        if(kdsc->glyph_ids_size == 0) {
 800bc76:	2203      	movs	r2, #3
 800bc78:	7aeb      	ldrb	r3, [r5, #11]
 800bc7a:	4013      	ands	r3, r2
 800bc7c:	d118      	bne.n	800bcb0 <lv_font_get_glyph_dsc_fmt_txt+0xbc>
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 800bc7e:	ab05      	add	r3, sp, #20
 800bc80:	469c      	mov	ip, r3
 800bc82:	9b02      	ldr	r3, [sp, #8]
 800bc84:	0200      	lsls	r0, r0, #8
 800bc86:	18c0      	adds	r0, r0, r3
 800bc88:	4663      	mov	r3, ip
            const uint8_t * g_ids = kdsc->glyph_ids;
 800bc8a:	682e      	ldr	r6, [r5, #0]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 800bc8c:	8018      	strh	r0, [r3, #0]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 800bc8e:	68ab      	ldr	r3, [r5, #8]
 800bc90:	0031      	movs	r1, r6
 800bc92:	021a      	lsls	r2, r3, #8
 800bc94:	4b1a      	ldr	r3, [pc, #104]	; (800bd00 <lv_font_get_glyph_dsc_fmt_txt+0x10c>)
 800bc96:	0a12      	lsrs	r2, r2, #8
 800bc98:	9300      	str	r3, [sp, #0]
 800bc9a:	4660      	mov	r0, ip
 800bc9c:	2302      	movs	r3, #2
 800bc9e:	f001 f9d1 	bl	800d044 <lv_utils_bsearch>
    int8_t value = 0;
 800bca2:	1e03      	subs	r3, r0, #0
            if(kid_p) {
 800bca4:	d0be      	beq.n	800bc24 <lv_font_get_glyph_dsc_fmt_txt+0x30>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 800bca6:	1b80      	subs	r0, r0, r6
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
 800bca8:	0840      	lsrs	r0, r0, #1
                value = kdsc->values[ofs];
 800bcaa:	686b      	ldr	r3, [r5, #4]
 800bcac:	561b      	ldrsb	r3, [r3, r0]
 800bcae:	e7b9      	b.n	800bc24 <lv_font_get_glyph_dsc_fmt_txt+0x30>
        } else if(kdsc->glyph_ids_size == 1) {
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d1b6      	bne.n	800bc22 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 800bcb4:	9b02      	ldr	r3, [sp, #8]
 800bcb6:	0200      	lsls	r0, r0, #8
 800bcb8:	18c0      	adds	r0, r0, r3
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800bcba:	68ab      	ldr	r3, [r5, #8]
            const uint16_t * g_ids = kdsc->glyph_ids;
 800bcbc:	682e      	ldr	r6, [r5, #0]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800bcbe:	021a      	lsls	r2, r3, #8
 800bcc0:	4b10      	ldr	r3, [pc, #64]	; (800bd04 <lv_font_get_glyph_dsc_fmt_txt+0x110>)
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 800bcc2:	9005      	str	r0, [sp, #20]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800bcc4:	9300      	str	r3, [sp, #0]
 800bcc6:	0a12      	lsrs	r2, r2, #8
 800bcc8:	2304      	movs	r3, #4
 800bcca:	0031      	movs	r1, r6
 800bccc:	a805      	add	r0, sp, #20
 800bcce:	f001 f9b9 	bl	800d044 <lv_utils_bsearch>
    int8_t value = 0;
 800bcd2:	1e03      	subs	r3, r0, #0
            if(kid_p) {
 800bcd4:	d0a6      	beq.n	800bc24 <lv_font_get_glyph_dsc_fmt_txt+0x30>
                uint32_t ofs = (lv_uintptr_t)kid_p - (lv_uintptr_t)g_ids;
 800bcd6:	1b80      	subs	r0, r0, r6
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
 800bcd8:	0900      	lsrs	r0, r0, #4
 800bcda:	e7e6      	b.n	800bcaa <lv_font_get_glyph_dsc_fmt_txt+0xb6>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 800bcdc:	686b      	ldr	r3, [r5, #4]
 800bcde:	9a02      	ldr	r2, [sp, #8]
 800bce0:	5c9a      	ldrb	r2, [r3, r2]
        if(left_class > 0 && right_class > 0) {
 800bce2:	2a00      	cmp	r2, #0
 800bce4:	d09d      	beq.n	800bc22 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
        uint8_t right_class = kdsc->left_class_mapping[gid_right];
 800bce6:	5c19      	ldrb	r1, [r3, r0]
        if(left_class > 0 && right_class > 0) {
 800bce8:	2900      	cmp	r1, #0
 800bcea:	d09a      	beq.n	800bc22 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
            value = kdsc->class_pair_values[(left_class-1)* kdsc->right_class_cnt + (right_class-1)];
 800bcec:	7b6b      	ldrb	r3, [r5, #13]
 800bcee:	3a01      	subs	r2, #1
 800bcf0:	435a      	muls	r2, r3
 800bcf2:	682b      	ldr	r3, [r5, #0]
 800bcf4:	185b      	adds	r3, r3, r1
 800bcf6:	189b      	adds	r3, r3, r2
 800bcf8:	3b01      	subs	r3, #1
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	b25b      	sxtb	r3, r3
 800bcfe:	e791      	b.n	800bc24 <lv_font_get_glyph_dsc_fmt_txt+0x30>
 800bd00:	0800baeb 	.word	0x0800baeb
 800bd04:	0800baff 	.word	0x0800baff

0800bd08 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 800bd08:	b510      	push	{r4, lr}
    memset(driver, 0, sizeof(lv_disp_drv_t));
 800bd0a:	2228      	movs	r2, #40	; 0x28
 800bd0c:	2100      	movs	r1, #0
{
 800bd0e:	0004      	movs	r4, r0
    memset(driver, 0, sizeof(lv_disp_drv_t));
 800bd10:	f002 fa45 	bl	800e19e <memset>

    driver->flush_cb         = NULL;
    driver->hor_res          = LV_HOR_RES_MAX;
 800bd14:	23a0      	movs	r3, #160	; 0xa0
    driver->flush_cb         = NULL;
 800bd16:	2200      	movs	r2, #0
    driver->hor_res          = LV_HOR_RES_MAX;
 800bd18:	8023      	strh	r3, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
 800bd1a:	3b20      	subs	r3, #32
 800bd1c:	8063      	strh	r3, [r4, #2]
    driver->buffer           = NULL;
    driver->rotated          = 0;
    driver->color_chroma_key = LV_COLOR_TRANSP;
 800bd1e:	1d63      	adds	r3, r4, #5
 800bd20:	77da      	strb	r2, [r3, #31]
 800bd22:	23fc      	movs	r3, #252	; 0xfc
 800bd24:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 800bd26:	00db      	lsls	r3, r3, #3
 800bd28:	430b      	orrs	r3, r1
 800bd2a:	84a3      	strh	r3, [r4, #36]	; 0x24
 800bd2c:	055b      	lsls	r3, r3, #21
 800bd2e:	1da1      	adds	r1, r4, #6
 800bd30:	0f5b      	lsrs	r3, r3, #29
 800bd32:	77cb      	strb	r3, [r1, #31]

#if LV_ANTIALIAS
    driver->antialiasing = true;
 800bd34:	2301      	movs	r3, #1
#if LV_COLOR_SCREEN_TRANSP
    driver->screen_transp = 1;
#endif

#if LV_USE_GPU
    driver->gpu_blend_cb = NULL;
 800bd36:	61e2      	str	r2, [r4, #28]
    driver->antialiasing = true;
 800bd38:	7223      	strb	r3, [r4, #8]
    driver->gpu_fill_cb  = NULL;
 800bd3a:	6222      	str	r2, [r4, #32]

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
 800bd3c:	6162      	str	r2, [r4, #20]
}
 800bd3e:	bd10      	pop	{r4, pc}

0800bd40 <lv_disp_buf_init>:
 *             It lets LittlevGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 800bd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd42:	0004      	movs	r4, r0
 800bd44:	000d      	movs	r5, r1
 800bd46:	0017      	movs	r7, r2
 800bd48:	001e      	movs	r6, r3
    memset(disp_buf, 0, sizeof(lv_disp_buf_t));
 800bd4a:	221c      	movs	r2, #28
 800bd4c:	2100      	movs	r1, #0
 800bd4e:	f002 fa26 	bl	800e19e <memset>

    disp_buf->buf1    = buf1;
 800bd52:	6025      	str	r5, [r4, #0]
    disp_buf->buf2    = buf2;
 800bd54:	6067      	str	r7, [r4, #4]
    disp_buf->buf_act = disp_buf->buf1;
 800bd56:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
 800bd58:	60e6      	str	r6, [r4, #12]
}
 800bd5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd5c <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 800bd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd5e:	0005      	movs	r5, r0
    lv_disp_t * disp = lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 800bd60:	4829      	ldr	r0, [pc, #164]	; (800be08 <lv_disp_drv_register+0xac>)
 800bd62:	f000 fbc2 	bl	800c4ea <lv_ll_ins_head>
 800bd66:	1e04      	subs	r4, r0, #0
    if(!disp) {
 800bd68:	d100      	bne.n	800bd6c <lv_disp_drv_register+0x10>
 800bd6a:	e7fe      	b.n	800bd6a <lv_disp_drv_register+0xe>
        lv_mem_assert(disp);
        return NULL;
    }

    memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
 800bd6c:	0029      	movs	r1, r5
 800bd6e:	2228      	movs	r2, #40	; 0x28
 800bd70:	f002 fa0c 	bl	800e18c <memcpy>
    memset(&disp->inv_area_joined, 0, sizeof(disp->inv_area_joined));
 800bd74:	0020      	movs	r0, r4
 800bd76:	3045      	adds	r0, #69	; 0x45
 800bd78:	2220      	movs	r2, #32
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	30ff      	adds	r0, #255	; 0xff
 800bd7e:	f002 fa0e 	bl	800e19e <memset>
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
 800bd82:	2280      	movs	r2, #128	; 0x80
 800bd84:	0020      	movs	r0, r4
 800bd86:	0052      	lsls	r2, r2, #1
 800bd88:	2100      	movs	r1, #0
 800bd8a:	3044      	adds	r0, #68	; 0x44
 800bd8c:	f002 fa07 	bl	800e19e <memset>
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 800bd90:	0020      	movs	r0, r4
 800bd92:	2144      	movs	r1, #68	; 0x44
 800bd94:	302c      	adds	r0, #44	; 0x2c
 800bd96:	f000 fb9e 	bl	800c4d6 <lv_ll_init>

    if(disp_def == NULL) disp_def = disp;
 800bd9a:	4d1c      	ldr	r5, [pc, #112]	; (800be0c <lv_disp_drv_register+0xb0>)
 800bd9c:	682b      	ldr	r3, [r5, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d100      	bne.n	800bda4 <lv_disp_drv_register+0x48>
 800bda2:	602c      	str	r4, [r5, #0]

    lv_disp_t * disp_def_tmp = disp_def;
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
                                        new display*/

    disp->inv_p = 0;
 800bda4:	22b2      	movs	r2, #178	; 0xb2

    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800bda6:	2100      	movs	r1, #0
    disp->inv_p = 0;
 800bda8:	0052      	lsls	r2, r2, #1
 800bdaa:	5aa3      	ldrh	r3, [r4, r2]
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800bdac:	0008      	movs	r0, r1
    disp->inv_p = 0;
 800bdae:	0a9b      	lsrs	r3, r3, #10
 800bdb0:	029b      	lsls	r3, r3, #10
 800bdb2:	52a3      	strh	r3, [r4, r2]
    lv_disp_t * disp_def_tmp = disp_def;
 800bdb4:	682e      	ldr	r6, [r5, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 800bdb6:	602c      	str	r4, [r5, #0]
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800bdb8:	f7fb fb5e 	bl	8007478 <lv_obj_create>
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800bdbc:	2100      	movs	r1, #0
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800bdbe:	63a0      	str	r0, [r4, #56]	; 0x38
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800bdc0:	0008      	movs	r0, r1
 800bdc2:	f7fb fb59 	bl	8007478 <lv_obj_create>
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800bdc6:	2100      	movs	r1, #0
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800bdc8:	63e0      	str	r0, [r4, #60]	; 0x3c
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800bdca:	0008      	movs	r0, r1
 800bdcc:	f7fb fb54 	bl	8007478 <lv_obj_create>
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 800bdd0:	4f0f      	ldr	r7, [pc, #60]	; (800be10 <lv_disp_drv_register+0xb4>)
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800bdd2:	6420      	str	r0, [r4, #64]	; 0x40
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 800bdd4:	0039      	movs	r1, r7
 800bdd6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800bdd8:	f7fb fd2f 	bl	800783a <lv_obj_set_style>
    lv_obj_set_style(disp->sys_layer, &lv_style_transp);
 800bddc:	0039      	movs	r1, r7
 800bdde:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800bde0:	f7fb fd2b 	bl	800783a <lv_obj_set_style>

    lv_obj_invalidate(disp->act_scr);
 800bde4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800bde6:	f7fb f891 	bl	8006f0c <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/

    /*Create a refresh task*/
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 800bdea:	0023      	movs	r3, r4
 800bdec:	2203      	movs	r2, #3
 800bdee:	211e      	movs	r1, #30
 800bdf0:	4808      	ldr	r0, [pc, #32]	; (800be14 <lv_disp_drv_register+0xb8>)
    disp_def = disp_def_tmp; /*Revert the default display*/
 800bdf2:	602e      	str	r6, [r5, #0]
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 800bdf4:	f000 fed8 	bl	800cba8 <lv_task_create>
 800bdf8:	62a0      	str	r0, [r4, #40]	; 0x28
    lv_mem_assert(disp->refr_task);
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	d100      	bne.n	800be00 <lv_disp_drv_register+0xa4>
 800bdfe:	e7fe      	b.n	800bdfe <lv_disp_drv_register+0xa2>
    if(disp->refr_task == NULL) return NULL;

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 800be00:	f000 fee5 	bl	800cbce <lv_task_ready>

    return disp;
}
 800be04:	0020      	movs	r0, r4
 800be06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be08:	20005428 	.word	0x20005428
 800be0c:	20001654 	.word	0x20001654
 800be10:	2000513c 	.word	0x2000513c
 800be14:	08007d41 	.word	0x08007d41

0800be18 <lv_disp_get_default>:
 * Get the default display
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
 800be18:	4b01      	ldr	r3, [pc, #4]	; (800be20 <lv_disp_get_default+0x8>)
 800be1a:	6818      	ldr	r0, [r3, #0]
}
 800be1c:	4770      	bx	lr
 800be1e:	46c0      	nop			; (mov r8, r8)
 800be20:	20001654 	.word	0x20001654

0800be24 <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
 800be24:	1e03      	subs	r3, r0, #0
    if(disp == NULL) disp = lv_disp_get_default();
 800be26:	d104      	bne.n	800be32 <lv_disp_get_hor_res+0xe>
    return disp_def;
 800be28:	4b06      	ldr	r3, [pc, #24]	; (800be44 <lv_disp_get_hor_res+0x20>)

    if(disp == NULL)
        return LV_HOR_RES_MAX;
 800be2a:	20a0      	movs	r0, #160	; 0xa0
    return disp_def;
 800be2c:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL)
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d004      	beq.n	800be3c <lv_disp_get_hor_res+0x18>
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 800be32:	7a1a      	ldrb	r2, [r3, #8]
 800be34:	0792      	lsls	r2, r2, #30
 800be36:	d402      	bmi.n	800be3e <lv_disp_get_hor_res+0x1a>
 800be38:	2000      	movs	r0, #0
 800be3a:	5e18      	ldrsh	r0, [r3, r0]
}
 800be3c:	4770      	bx	lr
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 800be3e:	2002      	movs	r0, #2
 800be40:	5e18      	ldrsh	r0, [r3, r0]
 800be42:	e7fb      	b.n	800be3c <lv_disp_get_hor_res+0x18>
 800be44:	20001654 	.word	0x20001654

0800be48 <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
 800be48:	1e03      	subs	r3, r0, #0
    if(disp == NULL) disp = lv_disp_get_default();
 800be4a:	d104      	bne.n	800be56 <lv_disp_get_ver_res+0xe>
    return disp_def;
 800be4c:	4b06      	ldr	r3, [pc, #24]	; (800be68 <lv_disp_get_ver_res+0x20>)

    if(disp == NULL)
        return LV_VER_RES_MAX;
 800be4e:	2080      	movs	r0, #128	; 0x80
    return disp_def;
 800be50:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL)
 800be52:	2b00      	cmp	r3, #0
 800be54:	d004      	beq.n	800be60 <lv_disp_get_ver_res+0x18>
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
 800be56:	7a1a      	ldrb	r2, [r3, #8]
 800be58:	0792      	lsls	r2, r2, #30
 800be5a:	d402      	bmi.n	800be62 <lv_disp_get_ver_res+0x1a>
 800be5c:	2002      	movs	r0, #2
 800be5e:	5e18      	ldrsh	r0, [r3, r0]
}
 800be60:	4770      	bx	lr
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
 800be62:	2000      	movs	r0, #0
 800be64:	5e18      	ldrsh	r0, [r3, r0]
 800be66:	e7fb      	b.n	800be60 <lv_disp_get_ver_res+0x18>
 800be68:	20001654 	.word	0x20001654

0800be6c <lv_disp_get_antialiasing>:
 * Get if anti-aliasing is enabled for a display or not
 * @param disp pointer to a display (NULL to use the default display)
 * @return true: anti-aliasing is enabled; false: disabled
 */
bool lv_disp_get_antialiasing(lv_disp_t * disp)
{
 800be6c:	1e03      	subs	r3, r0, #0
#if LV_ANTIALIAS == 0
    return false;
#else
    if(disp == NULL) disp = lv_disp_get_default();
 800be6e:	d104      	bne.n	800be7a <lv_disp_get_antialiasing+0xe>
    if(disp == NULL) return false;
 800be70:	2000      	movs	r0, #0
    return disp_def;
 800be72:	4b04      	ldr	r3, [pc, #16]	; (800be84 <lv_disp_get_antialiasing+0x18>)
 800be74:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL) return false;
 800be76:	4283      	cmp	r3, r0
 800be78:	d002      	beq.n	800be80 <lv_disp_get_antialiasing+0x14>

    return disp->driver.antialiasing ? true : false;
 800be7a:	7a18      	ldrb	r0, [r3, #8]
 800be7c:	2301      	movs	r3, #1
 800be7e:	4018      	ands	r0, r3
#endif
}
 800be80:	4770      	bx	lr
 800be82:	46c0      	nop			; (mov r8, r8)
 800be84:	20001654 	.word	0x20001654

0800be88 <lv_disp_flush_ready>:
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
    disp_drv->buffer->flushing = 0;
 800be88:	2101      	movs	r1, #1
 800be8a:	6842      	ldr	r2, [r0, #4]
 800be8c:	7e13      	ldrb	r3, [r2, #24]
 800be8e:	438b      	bics	r3, r1
 800be90:	7613      	strb	r3, [r2, #24]
#if LV_COLOR_SCREEN_TRANSP
    if(disp_drv->screen_transp) {
        memset(disp_drv->buffer->buf_act, 0x00, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif
}
 800be92:	4770      	bx	lr

0800be94 <lv_disp_get_buf>:
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
 800be94:	6840      	ldr	r0, [r0, #4]
}
 800be96:	4770      	bx	lr

0800be98 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 800be98:	6843      	ldr	r3, [r0, #4]
        return true;
    else
        return false;
 800be9a:	6818      	ldr	r0, [r3, #0]
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 800be9c:	2800      	cmp	r0, #0
 800be9e:	d003      	beq.n	800bea8 <lv_disp_is_double_buf+0x10>
 800bea0:	6858      	ldr	r0, [r3, #4]
 800bea2:	1e43      	subs	r3, r0, #1
 800bea4:	4198      	sbcs	r0, r3
 800bea6:	b2c0      	uxtb	r0, r0
}
 800bea8:	4770      	bx	lr

0800beaa <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
 800beaa:	b510      	push	{r4, lr}
 800beac:	0004      	movs	r4, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 800beae:	f7ff fff3 	bl	800be98 <lv_disp_is_double_buf>
 800beb2:	2800      	cmp	r0, #0
 800beb4:	d00a      	beq.n	800becc <lv_disp_is_true_double_buf+0x22>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
 800beb6:	2200      	movs	r2, #0
 800beb8:	5ea3      	ldrsh	r3, [r4, r2]
 800beba:	2202      	movs	r2, #2
 800bebc:	5ea0      	ldrsh	r0, [r4, r2]
 800bebe:	4358      	muls	r0, r3
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 800bec0:	6863      	ldr	r3, [r4, #4]
 800bec2:	68db      	ldr	r3, [r3, #12]
 800bec4:	1ac0      	subs	r0, r0, r3
 800bec6:	4243      	negs	r3, r0
 800bec8:	4158      	adcs	r0, r3
 800beca:	b2c0      	uxtb	r0, r0
        return true;
    } else {
        return false;
    }
}
 800becc:	bd10      	pop	{r4, pc}
	...

0800bed0 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 800bed0:	0001      	movs	r1, r0
 800bed2:	b510      	push	{r4, lr}
 800bed4:	4804      	ldr	r0, [pc, #16]	; (800bee8 <lv_indev_get_next+0x18>)
    if(indev == NULL)
 800bed6:	2900      	cmp	r1, #0
 800bed8:	d102      	bne.n	800bee0 <lv_indev_get_next+0x10>
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 800beda:	f000 fb46 	bl	800c56a <lv_ll_get_head>
    else
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
}
 800bede:	bd10      	pop	{r4, pc}
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 800bee0:	f000 fb4b 	bl	800c57a <lv_ll_get_next>
 800bee4:	e7fb      	b.n	800bede <lv_indev_get_next+0xe>
 800bee6:	46c0      	nop			; (mov r8, r8)
 800bee8:	20005418 	.word	0x20005418

0800beec <lv_tick_get>:
uint32_t lv_tick_get(void)
{
#if LV_TICK_CUSTOM == 0
    uint32_t result;
    do {
        tick_irq_flag = 1;
 800beec:	2101      	movs	r1, #1
 800beee:	4b04      	ldr	r3, [pc, #16]	; (800bf00 <lv_tick_get+0x14>)
 800bef0:	7019      	strb	r1, [r3, #0]
        result        = sys_time;
    } while(!tick_irq_flag); /*'lv_tick_inc()' clears this flag which can be in an interrupt.
 800bef2:	781a      	ldrb	r2, [r3, #0]
 800bef4:	2a00      	cmp	r2, #0
 800bef6:	d0fb      	beq.n	800bef0 <lv_tick_get+0x4>
        result        = sys_time;
 800bef8:	4b02      	ldr	r3, [pc, #8]	; (800bf04 <lv_tick_get+0x18>)
                                Continue until make a non interrupted cycle */

    return result;
 800befa:	6818      	ldr	r0, [r3, #0]
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 800befc:	4770      	bx	lr
 800befe:	46c0      	nop			; (mov r8, r8)
 800bf00:	2000165c 	.word	0x2000165c
 800bf04:	20001658 	.word	0x20001658

0800bf08 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 800bf08:	b510      	push	{r4, lr}
 800bf0a:	0004      	movs	r4, r0
    uint32_t act_time = lv_tick_get();
 800bf0c:	f7ff ffee 	bl	800beec <lv_tick_get>
    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
        prev_tick = act_time - prev_tick;
    } else {
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
 800bf10:	1b00      	subs	r0, r0, r4
    }

    return prev_tick;
}
 800bf12:	bd10      	pop	{r4, pc}

0800bf14 <lv_anim_path_linear>:
 * Calculate the current value of an animation applying linear characteristic
 * @param a pointer to an animation
 * @return the current value to set
 */
lv_anim_value_t lv_anim_path_linear(const lv_anim_t * a)
{
 800bf14:	b510      	push	{r4, lr}
 800bf16:	0004      	movs	r4, r0
    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
 800bf18:	8b01      	ldrh	r1, [r0, #24]
 800bf1a:	231a      	movs	r3, #26
 800bf1c:	5ec0      	ldrsh	r0, [r0, r3]
 800bf1e:	4281      	cmp	r1, r0
 800bf20:	d00a      	beq.n	800bf38 <lv_anim_path_linear+0x24>
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
    } else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
 800bf22:	0280      	lsls	r0, r0, #10
 800bf24:	f7f4 f9a6 	bl	8000274 <__divsi3>
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
 800bf28:	6923      	ldr	r3, [r4, #16]
 800bf2a:	6962      	ldr	r2, [r4, #20]
 800bf2c:	1ad2      	subs	r2, r2, r3
 800bf2e:	4350      	muls	r0, r2
    new_value = new_value >> LV_ANIM_RES_SHIFT;
 800bf30:	1280      	asrs	r0, r0, #10
    new_value += a->start;
 800bf32:	1818      	adds	r0, r3, r0

    return (lv_anim_value_t)new_value;
 800bf34:	b200      	sxth	r0, r0
}
 800bf36:	bd10      	pop	{r4, pc}
 800bf38:	2080      	movs	r0, #128	; 0x80
 800bf3a:	00c0      	lsls	r0, r0, #3
 800bf3c:	e7f4      	b.n	800bf28 <lv_anim_path_linear+0x14>
	...

0800bf40 <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(lv_task_t * param)
{
 800bf40:	b5f0      	push	{r4, r5, r6, r7, lr}
    (void)param;

    lv_anim_t * a;
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800bf42:	4d40      	ldr	r5, [pc, #256]	; (800c044 <anim_task+0x104>)
{
 800bf44:	b08d      	sub	sp, #52	; 0x34
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800bf46:	0028      	movs	r0, r5
 800bf48:	f000 fb0f 	bl	800c56a <lv_ll_get_head>
    {
        a->has_run = 0;
 800bf4c:	2408      	movs	r4, #8
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800bf4e:	2800      	cmp	r0, #0
 800bf50:	d10e      	bne.n	800bf70 <anim_task+0x30>
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
 800bf52:	4f3d      	ldr	r7, [pc, #244]	; (800c048 <anim_task+0x108>)
 800bf54:	6838      	ldr	r0, [r7, #0]
 800bf56:	f7ff ffd7 	bl	800bf08 <lv_tick_elaps>
 800bf5a:	9001      	str	r0, [sp, #4]
        }

        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed)
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800bf5c:	0028      	movs	r0, r5
 800bf5e:	f000 fb04 	bl	800c56a <lv_ll_get_head>
        else
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800bf62:	1e04      	subs	r4, r0, #0
    while(a != NULL) {
 800bf64:	d10d      	bne.n	800bf82 <anim_task+0x42>
    }

    last_task_run = lv_tick_get();
 800bf66:	f7ff ffc1 	bl	800beec <lv_tick_get>
 800bf6a:	6038      	str	r0, [r7, #0]
}
 800bf6c:	b00d      	add	sp, #52	; 0x34
 800bf6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        a->has_run = 0;
 800bf70:	1c42      	adds	r2, r0, #1
 800bf72:	7fd3      	ldrb	r3, [r2, #31]
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800bf74:	0001      	movs	r1, r0
        a->has_run = 0;
 800bf76:	43a3      	bics	r3, r4
 800bf78:	77d3      	strb	r3, [r2, #31]
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800bf7a:	0028      	movs	r0, r5
 800bf7c:	f000 fafd 	bl	800c57a <lv_ll_get_next>
 800bf80:	e7e5      	b.n	800bf4e <anim_task+0xe>
        anim_list_changed = false;
 800bf82:	2300      	movs	r3, #0
 800bf84:	4a31      	ldr	r2, [pc, #196]	; (800c04c <anim_task+0x10c>)
        if(!a->has_run) {
 800bf86:	1c66      	adds	r6, r4, #1
        anim_list_changed = false;
 800bf88:	7013      	strb	r3, [r2, #0]
        if(!a->has_run) {
 800bf8a:	2208      	movs	r2, #8
 800bf8c:	7ff3      	ldrb	r3, [r6, #31]
 800bf8e:	4213      	tst	r3, r2
 800bf90:	d13a      	bne.n	800c008 <anim_task+0xc8>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
 800bf92:	4313      	orrs	r3, r2
 800bf94:	77f3      	strb	r3, [r6, #31]
            a->act_time += elaps;
 800bf96:	8b63      	ldrh	r3, [r4, #26]
 800bf98:	9a01      	ldr	r2, [sp, #4]
 800bf9a:	189b      	adds	r3, r3, r2
 800bf9c:	b21b      	sxth	r3, r3
 800bf9e:	8363      	strh	r3, [r4, #26]
            if(a->act_time >= 0) {
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	db31      	blt.n	800c008 <anim_task+0xc8>
                if(a->act_time > a->time) a->act_time = a->time;
 800bfa4:	8b22      	ldrh	r2, [r4, #24]
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	dd00      	ble.n	800bfac <anim_task+0x6c>
 800bfaa:	8362      	strh	r2, [r4, #26]
                new_value = a->path_cb(a);
 800bfac:	68a3      	ldr	r3, [r4, #8]
 800bfae:	0020      	movs	r0, r4
 800bfb0:	4798      	blx	r3
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 800bfb2:	6863      	ldr	r3, [r4, #4]
                new_value = a->path_cb(a);
 800bfb4:	0001      	movs	r1, r0
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d001      	beq.n	800bfbe <anim_task+0x7e>
 800bfba:	6820      	ldr	r0, [r4, #0]
 800bfbc:	4798      	blx	r3
                if(a->act_time >= a->time) {
 800bfbe:	231a      	movs	r3, #26
 800bfc0:	5ee2      	ldrsh	r2, [r4, r3]
 800bfc2:	8b23      	ldrh	r3, [r4, #24]
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	db1b      	blt.n	800c000 <anim_task+0xc0>
{

    /*Delete the animation if
     * - no repeat and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready */
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 800bfc8:	2203      	movs	r2, #3
 800bfca:	7ff3      	ldrb	r3, [r6, #31]
 800bfcc:	4213      	tst	r3, r2
 800bfce:	d003      	beq.n	800bfd8 <anim_task+0x98>
 800bfd0:	3204      	adds	r2, #4
 800bfd2:	401a      	ands	r2, r3
 800bfd4:	2a05      	cmp	r2, #5
 800bfd6:	d11c      	bne.n	800c012 <anim_task+0xd2>

        /*Create copy from the animation and delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        lv_anim_t a_tmp;
        memcpy(&a_tmp, a, sizeof(lv_anim_t));
 800bfd8:	2224      	movs	r2, #36	; 0x24
 800bfda:	0021      	movs	r1, r4
 800bfdc:	a803      	add	r0, sp, #12
 800bfde:	f002 f8d5 	bl	800e18c <memcpy>
        lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 800bfe2:	0021      	movs	r1, r4
 800bfe4:	0028      	movs	r0, r5
 800bfe6:	f000 fb15 	bl	800c614 <lv_ll_rem>
        lv_mem_free(a);
 800bfea:	0020      	movs	r0, r4
 800bfec:	f000 fc4c 	bl	800c888 <lv_mem_free>
        anim_list_changed = true;
 800bff0:	2301      	movs	r3, #1
 800bff2:	4a16      	ldr	r2, [pc, #88]	; (800c04c <anim_task+0x10c>)
 800bff4:	7013      	strb	r3, [r2, #0]

        /* Call the callback function at the end*/
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 800bff6:	9b06      	ldr	r3, [sp, #24]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d001      	beq.n	800c000 <anim_task+0xc0>
 800bffc:	a803      	add	r0, sp, #12
 800bffe:	4798      	blx	r3
        if(anim_list_changed)
 800c000:	4b12      	ldr	r3, [pc, #72]	; (800c04c <anim_task+0x10c>)
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d1a9      	bne.n	800bf5c <anim_task+0x1c>
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800c008:	0021      	movs	r1, r4
 800c00a:	0028      	movs	r0, r5
 800c00c:	f000 fab5 	bl	800c57a <lv_ll_get_next>
 800c010:	e7a7      	b.n	800bf62 <anim_task+0x22>
    }
    /*If the animation is not deleted then restart it*/
    else {
        a->act_time = -a->repeat_pause; /*Restart the animation*/
 800c012:	8be2      	ldrh	r2, [r4, #30]
 800c014:	4252      	negs	r2, r2
 800c016:	8362      	strh	r2, [r4, #26]
        /*Swap the start and end values in play back mode*/
        if(a->playback != 0) {
 800c018:	07da      	lsls	r2, r3, #31
 800c01a:	d5f1      	bpl.n	800c000 <anim_task+0xc0>
            /*If now turning back use the 'playback_pause*/
            if(a->playback_now == 0) a->act_time = -a->playback_pause;
 800c01c:	2204      	movs	r2, #4
 800c01e:	4013      	ands	r3, r2
 800c020:	1e19      	subs	r1, r3, #0
 800c022:	d102      	bne.n	800c02a <anim_task+0xea>
 800c024:	8ba2      	ldrh	r2, [r4, #28]
 800c026:	4252      	negs	r2, r2
 800c028:	8362      	strh	r2, [r4, #26]

            /*Toggle the play back state*/
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 800c02a:	424b      	negs	r3, r1
 800c02c:	414b      	adcs	r3, r1
 800c02e:	2104      	movs	r1, #4
 800c030:	7ff2      	ldrb	r2, [r6, #31]
 800c032:	009b      	lsls	r3, r3, #2
 800c034:	438a      	bics	r2, r1
 800c036:	4313      	orrs	r3, r2
 800c038:	77f3      	strb	r3, [r6, #31]
            /*Swap the start and end values*/
            int32_t tmp;
            tmp      = a->start;
 800c03a:	6923      	ldr	r3, [r4, #16]
            a->start = a->end;
 800c03c:	6962      	ldr	r2, [r4, #20]
            a->end   = tmp;
 800c03e:	6163      	str	r3, [r4, #20]
            a->start = a->end;
 800c040:	6122      	str	r2, [r4, #16]
 800c042:	e7dd      	b.n	800c000 <anim_task+0xc0>
 800c044:	20005454 	.word	0x20005454
 800c048:	20001660 	.word	0x20001660
 800c04c:	2000165d 	.word	0x2000165d

0800c050 <lv_anim_core_init>:
{
 800c050:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 800c052:	2124      	movs	r1, #36	; 0x24
 800c054:	4806      	ldr	r0, [pc, #24]	; (800c070 <lv_anim_core_init+0x20>)
 800c056:	f000 fa3e 	bl	800c4d6 <lv_ll_init>
    last_task_run = lv_tick_get();
 800c05a:	f7ff ff47 	bl	800beec <lv_tick_get>
 800c05e:	4b05      	ldr	r3, [pc, #20]	; (800c074 <lv_anim_core_init+0x24>)
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800c060:	2203      	movs	r2, #3
    last_task_run = lv_tick_get();
 800c062:	6018      	str	r0, [r3, #0]
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800c064:	211e      	movs	r1, #30
 800c066:	2300      	movs	r3, #0
 800c068:	4803      	ldr	r0, [pc, #12]	; (800c078 <lv_anim_core_init+0x28>)
 800c06a:	f000 fd9d 	bl	800cba8 <lv_task_create>
}
 800c06e:	bd10      	pop	{r4, pc}
 800c070:	20005454 	.word	0x20005454
 800c074:	20001660 	.word	0x20001660
 800c078:	0800bf41 	.word	0x0800bf41

0800c07c <lv_anim_del>:
{
 800c07c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800c07e:	4d13      	ldr	r5, [pc, #76]	; (800c0cc <lv_anim_del+0x50>)
{
 800c080:	9001      	str	r0, [sp, #4]
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800c082:	0028      	movs	r0, r5
{
 800c084:	000f      	movs	r7, r1
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800c086:	f000 fa70 	bl	800c56a <lv_ll_get_head>
    bool del = false;
 800c08a:	2600      	movs	r6, #0
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800c08c:	0004      	movs	r4, r0
    while(a != NULL) {
 800c08e:	2c00      	cmp	r4, #0
 800c090:	d101      	bne.n	800c096 <lv_anim_del+0x1a>
}
 800c092:	0030      	movs	r0, r6
 800c094:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800c096:	0021      	movs	r1, r4
 800c098:	0028      	movs	r0, r5
 800c09a:	f000 fa6e 	bl	800c57a <lv_ll_get_next>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 800c09e:	6823      	ldr	r3, [r4, #0]
 800c0a0:	9a01      	ldr	r2, [sp, #4]
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800c0a2:	9000      	str	r0, [sp, #0]
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d10f      	bne.n	800c0c8 <lv_anim_del+0x4c>
 800c0a8:	6863      	ldr	r3, [r4, #4]
 800c0aa:	42bb      	cmp	r3, r7
 800c0ac:	d001      	beq.n	800c0b2 <lv_anim_del+0x36>
 800c0ae:	2f00      	cmp	r7, #0
 800c0b0:	d10a      	bne.n	800c0c8 <lv_anim_del+0x4c>
            lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 800c0b2:	0021      	movs	r1, r4
 800c0b4:	0028      	movs	r0, r5
 800c0b6:	f000 faad 	bl	800c614 <lv_ll_rem>
            lv_mem_free(a);
 800c0ba:	0020      	movs	r0, r4
 800c0bc:	f000 fbe4 	bl	800c888 <lv_mem_free>
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 800c0c0:	2201      	movs	r2, #1
            del = true;
 800c0c2:	2601      	movs	r6, #1
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 800c0c4:	4b02      	ldr	r3, [pc, #8]	; (800c0d0 <lv_anim_del+0x54>)
 800c0c6:	701a      	strb	r2, [r3, #0]
            del = true;
 800c0c8:	9c00      	ldr	r4, [sp, #0]
 800c0ca:	e7e0      	b.n	800c08e <lv_anim_del+0x12>
 800c0cc:	20005454 	.word	0x20005454
 800c0d0:	2000165d 	.word	0x2000165d

0800c0d4 <lv_anim_create>:
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 800c0d4:	6841      	ldr	r1, [r0, #4]
{
 800c0d6:	b570      	push	{r4, r5, r6, lr}
 800c0d8:	0005      	movs	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 800c0da:	2900      	cmp	r1, #0
 800c0dc:	d002      	beq.n	800c0e4 <lv_anim_create+0x10>
 800c0de:	6800      	ldr	r0, [r0, #0]
 800c0e0:	f7ff ffcc 	bl	800c07c <lv_anim_del>
    lv_anim_t * new_anim = lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 800c0e4:	480c      	ldr	r0, [pc, #48]	; (800c118 <lv_anim_create+0x44>)
 800c0e6:	f000 fa00 	bl	800c4ea <lv_ll_ins_head>
 800c0ea:	1e04      	subs	r4, r0, #0
    lv_mem_assert(new_anim);
 800c0ec:	d100      	bne.n	800c0f0 <lv_anim_create+0x1c>
 800c0ee:	e7fe      	b.n	800c0ee <lv_anim_create+0x1a>
    a->playback_now = 0;
 800c0f0:	2104      	movs	r1, #4
 800c0f2:	1c6a      	adds	r2, r5, #1
 800c0f4:	7fd3      	ldrb	r3, [r2, #31]
 800c0f6:	438b      	bics	r3, r1
 800c0f8:	77d3      	strb	r3, [r2, #31]
    memcpy(new_anim, a, sizeof(lv_anim_t));
 800c0fa:	0029      	movs	r1, r5
 800c0fc:	2224      	movs	r2, #36	; 0x24
 800c0fe:	f002 f845 	bl	800e18c <memcpy>
    if(new_anim->exec_cb) new_anim->exec_cb(new_anim->var, new_anim->start);
 800c102:	6863      	ldr	r3, [r4, #4]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d003      	beq.n	800c110 <lv_anim_create+0x3c>
 800c108:	2210      	movs	r2, #16
 800c10a:	5ea1      	ldrsh	r1, [r4, r2]
 800c10c:	6820      	ldr	r0, [r4, #0]
 800c10e:	4798      	blx	r3
    anim_list_changed = true;
 800c110:	2201      	movs	r2, #1
 800c112:	4b02      	ldr	r3, [pc, #8]	; (800c11c <lv_anim_create+0x48>)
 800c114:	701a      	strb	r2, [r3, #0]
}
 800c116:	bd70      	pop	{r4, r5, r6, pc}
 800c118:	20005454 	.word	0x20005454
 800c11c:	2000165d 	.word	0x2000165d

0800c120 <lv_anim_speed_to_time>:
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
 800c120:	1a89      	subs	r1, r1, r2
 800c122:	17ca      	asrs	r2, r1, #31
{
 800c124:	0003      	movs	r3, r0
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
 800c126:	1888      	adds	r0, r1, r2
 800c128:	4050      	eors	r0, r2
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 800c12a:	22fa      	movs	r2, #250	; 0xfa
 800c12c:	0092      	lsls	r2, r2, #2
 800c12e:	4350      	muls	r0, r2
 800c130:	0019      	movs	r1, r3
{
 800c132:	b510      	push	{r4, lr}
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 800c134:	f7f4 f89e 	bl	8000274 <__divsi3>
    if(time > UINT16_MAX) time = UINT16_MAX;
 800c138:	4a04      	ldr	r2, [pc, #16]	; (800c14c <lv_anim_speed_to_time+0x2c>)
 800c13a:	0013      	movs	r3, r2
 800c13c:	4290      	cmp	r0, r2
 800c13e:	dc02      	bgt.n	800c146 <lv_anim_speed_to_time+0x26>
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 800c140:	1e03      	subs	r3, r0, #0
    if(time == 0) {
 800c142:	d100      	bne.n	800c146 <lv_anim_speed_to_time+0x26>
        time++;
 800c144:	3301      	adds	r3, #1
    return time;
 800c146:	b298      	uxth	r0, r3
}
 800c148:	bd10      	pop	{r4, pc}
 800c14a:	46c0      	nop			; (mov r8, r8)
 800c14c:	0000ffff 	.word	0x0000ffff

0800c150 <lv_area_set>:
 * @param y1 top coordinate of the area
 * @param x2 right coordinate of the area
 * @param y2 bottom coordinate of the area
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
 800c150:	b530      	push	{r4, r5, lr}
 800c152:	ac03      	add	r4, sp, #12
 800c154:	2500      	movs	r5, #0
 800c156:	5f64      	ldrsh	r4, [r4, r5]
    area_p->x1 = x1;
 800c158:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 800c15a:	8042      	strh	r2, [r0, #2]
    area_p->x2 = x2;
 800c15c:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 800c15e:	80c4      	strh	r4, [r0, #6]
}
 800c160:	bd30      	pop	{r4, r5, pc}

0800c162 <lv_area_get_size>:
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 800c162:	2304      	movs	r3, #4
 800c164:	5ec2      	ldrsh	r2, [r0, r3]
 800c166:	2100      	movs	r1, #0
 800c168:	5e43      	ldrsh	r3, [r0, r1]
 800c16a:	1ad2      	subs	r2, r2, r3
 800c16c:	2106      	movs	r1, #6
 800c16e:	5e43      	ldrsh	r3, [r0, r1]
 800c170:	2102      	movs	r1, #2
 800c172:	5e40      	ldrsh	r0, [r0, r1]
 800c174:	3201      	adds	r2, #1
 800c176:	1a18      	subs	r0, r3, r0
 800c178:	3001      	adds	r0, #1
 800c17a:	4350      	muls	r0, r2

    return size;
}
 800c17c:	4770      	bx	lr

0800c17e <lv_area_intersect>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 800c17e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800c180:	8813      	ldrh	r3, [r2, #0]
 800c182:	880d      	ldrh	r5, [r1, #0]
 800c184:	1c1c      	adds	r4, r3, #0
 800c186:	b22e      	sxth	r6, r5
 800c188:	b21b      	sxth	r3, r3
 800c18a:	42b3      	cmp	r3, r6
 800c18c:	da00      	bge.n	800c190 <lv_area_intersect+0x12>
 800c18e:	1c2c      	adds	r4, r5, #0
 800c190:	8004      	strh	r4, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800c192:	8853      	ldrh	r3, [r2, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800c194:	b225      	sxth	r5, r4
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800c196:	884c      	ldrh	r4, [r1, #2]
 800c198:	1c1e      	adds	r6, r3, #0
 800c19a:	b227      	sxth	r7, r4
 800c19c:	b21b      	sxth	r3, r3
 800c19e:	42bb      	cmp	r3, r7
 800c1a0:	da00      	bge.n	800c1a4 <lv_area_intersect+0x26>
 800c1a2:	1c26      	adds	r6, r4, #0
 800c1a4:	8046      	strh	r6, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800c1a6:	8893      	ldrh	r3, [r2, #4]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800c1a8:	b234      	sxth	r4, r6
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800c1aa:	888e      	ldrh	r6, [r1, #4]
 800c1ac:	1c1f      	adds	r7, r3, #0
 800c1ae:	b21b      	sxth	r3, r3
 800c1b0:	9301      	str	r3, [sp, #4]
 800c1b2:	b233      	sxth	r3, r6
 800c1b4:	469c      	mov	ip, r3
 800c1b6:	9b01      	ldr	r3, [sp, #4]
 800c1b8:	4563      	cmp	r3, ip
 800c1ba:	dd00      	ble.n	800c1be <lv_area_intersect+0x40>
 800c1bc:	1c37      	adds	r7, r6, #0
 800c1be:	8087      	strh	r7, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800c1c0:	88d3      	ldrh	r3, [r2, #6]
 800c1c2:	88c9      	ldrh	r1, [r1, #6]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800c1c4:	b23e      	sxth	r6, r7
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800c1c6:	1c1a      	adds	r2, r3, #0
 800c1c8:	b20f      	sxth	r7, r1
 800c1ca:	b21b      	sxth	r3, r3
 800c1cc:	42bb      	cmp	r3, r7
 800c1ce:	dd00      	ble.n	800c1d2 <lv_area_intersect+0x54>
 800c1d0:	1c0a      	adds	r2, r1, #0
 800c1d2:	80c2      	strh	r2, [r0, #6]
 800c1d4:	b213      	sxth	r3, r2

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
        union_ok = false;
 800c1d6:	2000      	movs	r0, #0
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 800c1d8:	42b5      	cmp	r5, r6
 800c1da:	dc04      	bgt.n	800c1e6 <lv_area_intersect+0x68>
 800c1dc:	0fe0      	lsrs	r0, r4, #31
 800c1de:	17da      	asrs	r2, r3, #31
 800c1e0:	42a3      	cmp	r3, r4
 800c1e2:	4150      	adcs	r0, r2
 800c1e4:	b2c0      	uxtb	r0, r0
    }

    return union_ok;
}
 800c1e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800c1e8 <lv_area_join>:
 * @param res_p pointer to an area, the result will be stored here
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 800c1e8:	b570      	push	{r4, r5, r6, lr}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 800c1ea:	8813      	ldrh	r3, [r2, #0]
 800c1ec:	880d      	ldrh	r5, [r1, #0]
 800c1ee:	1c1c      	adds	r4, r3, #0
 800c1f0:	b22e      	sxth	r6, r5
 800c1f2:	b21b      	sxth	r3, r3
 800c1f4:	42b3      	cmp	r3, r6
 800c1f6:	dd00      	ble.n	800c1fa <lv_area_join+0x12>
 800c1f8:	1c2c      	adds	r4, r5, #0
 800c1fa:	8004      	strh	r4, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 800c1fc:	8853      	ldrh	r3, [r2, #2]
 800c1fe:	884d      	ldrh	r5, [r1, #2]
 800c200:	1c1c      	adds	r4, r3, #0
 800c202:	b22e      	sxth	r6, r5
 800c204:	b21b      	sxth	r3, r3
 800c206:	42b3      	cmp	r3, r6
 800c208:	dd00      	ble.n	800c20c <lv_area_join+0x24>
 800c20a:	1c2c      	adds	r4, r5, #0
 800c20c:	8044      	strh	r4, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 800c20e:	8893      	ldrh	r3, [r2, #4]
 800c210:	888d      	ldrh	r5, [r1, #4]
 800c212:	1c1c      	adds	r4, r3, #0
 800c214:	b22e      	sxth	r6, r5
 800c216:	b21b      	sxth	r3, r3
 800c218:	42b3      	cmp	r3, r6
 800c21a:	da00      	bge.n	800c21e <lv_area_join+0x36>
 800c21c:	1c2c      	adds	r4, r5, #0
 800c21e:	8084      	strh	r4, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 800c220:	88d3      	ldrh	r3, [r2, #6]
 800c222:	88c9      	ldrh	r1, [r1, #6]
 800c224:	1c1a      	adds	r2, r3, #0
 800c226:	b20c      	sxth	r4, r1
 800c228:	b21b      	sxth	r3, r3
 800c22a:	42a3      	cmp	r3, r4
 800c22c:	da00      	bge.n	800c230 <lv_area_join+0x48>
 800c22e:	1c0a      	adds	r2, r1, #0
 800c230:	80c2      	strh	r2, [r0, #6]
}
 800c232:	bd70      	pop	{r4, r5, r6, pc}

0800c234 <lv_area_is_on>:
 * @param a1_p pointer to an area.
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 800c234:	b530      	push	{r4, r5, lr}
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 800c236:	2304      	movs	r3, #4
 800c238:	5eca      	ldrsh	r2, [r1, r3]
 800c23a:	2300      	movs	r3, #0
 800c23c:	5ec4      	ldrsh	r4, [r0, r3]
        return true;
    } else {
        return false;
 800c23e:	2300      	movs	r3, #0
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 800c240:	4294      	cmp	r4, r2
 800c242:	dc14      	bgt.n	800c26e <lv_area_is_on+0x3a>
 800c244:	2204      	movs	r2, #4
 800c246:	5e84      	ldrsh	r4, [r0, r2]
 800c248:	2500      	movs	r5, #0
 800c24a:	5f4a      	ldrsh	r2, [r1, r5]
 800c24c:	4294      	cmp	r4, r2
 800c24e:	db0e      	blt.n	800c26e <lv_area_is_on+0x3a>
 800c250:	2202      	movs	r2, #2
 800c252:	5e84      	ldrsh	r4, [r0, r2]
 800c254:	2506      	movs	r5, #6
 800c256:	5f4a      	ldrsh	r2, [r1, r5]
 800c258:	4294      	cmp	r4, r2
 800c25a:	dc08      	bgt.n	800c26e <lv_area_is_on+0x3a>
 800c25c:	2306      	movs	r3, #6
 800c25e:	5ec4      	ldrsh	r4, [r0, r3]
 800c260:	2302      	movs	r3, #2
 800c262:	5eca      	ldrsh	r2, [r1, r3]
 800c264:	17e3      	asrs	r3, r4, #31
 800c266:	0fd0      	lsrs	r0, r2, #31
 800c268:	4294      	cmp	r4, r2
 800c26a:	4143      	adcs	r3, r0
 800c26c:	b2db      	uxtb	r3, r3
    }
}
 800c26e:	0018      	movs	r0, r3
 800c270:	bd30      	pop	{r4, r5, pc}

0800c272 <lv_area_is_in>:
 * @param ain_p pointer to an area which could be in 'aholder_p'
 * @param aholder pointer to an area which could involve 'ain_p'
 * @return
 */
bool lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p)
{
 800c272:	b530      	push	{r4, r5, lr}
    bool is_in = false;

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800c274:	2300      	movs	r3, #0
 800c276:	5eca      	ldrsh	r2, [r1, r3]
 800c278:	2300      	movs	r3, #0
 800c27a:	5ec4      	ldrsh	r4, [r0, r3]
    bool is_in = false;
 800c27c:	2300      	movs	r3, #0
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800c27e:	4294      	cmp	r4, r2
 800c280:	db14      	blt.n	800c2ac <lv_area_is_in+0x3a>
 800c282:	2202      	movs	r2, #2
 800c284:	5e84      	ldrsh	r4, [r0, r2]
 800c286:	2502      	movs	r5, #2
 800c288:	5f4a      	ldrsh	r2, [r1, r5]
 800c28a:	4294      	cmp	r4, r2
 800c28c:	db0e      	blt.n	800c2ac <lv_area_is_in+0x3a>
 800c28e:	2204      	movs	r2, #4
 800c290:	5e84      	ldrsh	r4, [r0, r2]
 800c292:	2504      	movs	r5, #4
 800c294:	5f4a      	ldrsh	r2, [r1, r5]
 800c296:	4294      	cmp	r4, r2
 800c298:	dc08      	bgt.n	800c2ac <lv_area_is_in+0x3a>
 800c29a:	2306      	movs	r3, #6
 800c29c:	5ec2      	ldrsh	r2, [r0, r3]
 800c29e:	2306      	movs	r3, #6
 800c2a0:	5ec9      	ldrsh	r1, [r1, r3]
 800c2a2:	0fd3      	lsrs	r3, r2, #31
 800c2a4:	17c8      	asrs	r0, r1, #31
 800c2a6:	4291      	cmp	r1, r2
 800c2a8:	4143      	adcs	r3, r0
 800c2aa:	b2db      	uxtb	r3, r3
       ain_p->y2 <= aholder_p->y2) {
        is_in = true;
    }

    return is_in;
}
 800c2ac:	0018      	movs	r0, r3
 800c2ae:	bd30      	pop	{r4, r5, pc}

0800c2b0 <lv_circ_init>:
 * @param radius radius of the circle
 */
void lv_circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
    c->x = radius;
    c->y = 0;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	8043      	strh	r3, [r0, #2]
    *tmp = 1 - radius;
 800c2b4:	3301      	adds	r3, #1
    c->x = radius;
 800c2b6:	8002      	strh	r2, [r0, #0]
    *tmp = 1 - radius;
 800c2b8:	1a9a      	subs	r2, r3, r2
 800c2ba:	800a      	strh	r2, [r1, #0]
}
 800c2bc:	4770      	bx	lr

0800c2be <lv_circ_cont>:
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
bool lv_circ_cont(lv_point_t * c)
{
    return c->y <= c->x ? true : false;
 800c2be:	2202      	movs	r2, #2
 800c2c0:	5e83      	ldrsh	r3, [r0, r2]
 800c2c2:	2100      	movs	r1, #0
 800c2c4:	5e42      	ldrsh	r2, [r0, r1]
 800c2c6:	0fd8      	lsrs	r0, r3, #31
 800c2c8:	17d1      	asrs	r1, r2, #31
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	4148      	adcs	r0, r1
 800c2ce:	b2c0      	uxtb	r0, r0
}
 800c2d0:	4770      	bx	lr

0800c2d2 <lv_circ_next>:
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
void lv_circ_next(lv_point_t * c, lv_coord_t * tmp)
{
    c->y++;
 800c2d2:	8843      	ldrh	r3, [r0, #2]
{
 800c2d4:	b530      	push	{r4, r5, lr}
    c->y++;
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	b21a      	sxth	r2, r3
 800c2dc:	8042      	strh	r2, [r0, #2]

    if(*tmp <= 0) {
 800c2de:	2500      	movs	r5, #0
 800c2e0:	5f4c      	ldrsh	r4, [r1, r5]
 800c2e2:	2c00      	cmp	r4, #0
 800c2e4:	dc04      	bgt.n	800c2f0 <lv_circ_next+0x1e>
        (*tmp) += 2 * c->y + 1; /*Change in decision criterion for y -> y+1*/
 800c2e6:	005b      	lsls	r3, r3, #1
 800c2e8:	3401      	adds	r4, #1
 800c2ea:	191b      	adds	r3, r3, r4
 800c2ec:	800b      	strh	r3, [r1, #0]
    } else {
        c->x--;
        (*tmp) += 2 * (c->y - c->x) + 1; /*Change for y -> y+1, x -> x-1*/
    }
}
 800c2ee:	bd30      	pop	{r4, r5, pc}
        c->x--;
 800c2f0:	8803      	ldrh	r3, [r0, #0]
 800c2f2:	3b01      	subs	r3, #1
 800c2f4:	b21b      	sxth	r3, r3
 800c2f6:	8003      	strh	r3, [r0, #0]
        (*tmp) += 2 * (c->y - c->x) + 1; /*Change for y -> y+1, x -> x-1*/
 800c2f8:	1ad2      	subs	r2, r2, r3
 800c2fa:	880b      	ldrh	r3, [r1, #0]
 800c2fc:	0052      	lsls	r2, r2, #1
 800c2fe:	3301      	adds	r3, #1
 800c300:	18d2      	adds	r2, r2, r3
 800c302:	800a      	strh	r2, [r1, #0]
}
 800c304:	e7f3      	b.n	800c2ee <lv_circ_next+0x1c>

0800c306 <lv_fs_get_real_path>:

    path++; /*Ignore the driver letter*/

    while(*path != '\0') {
        if(*path == ':' || *path == '\\' || *path == '/') {
            path++;
 800c306:	3001      	adds	r0, #1
    while(*path != '\0') {
 800c308:	7803      	ldrb	r3, [r0, #0]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d005      	beq.n	800c31a <lv_fs_get_real_path+0x14>
        if(*path == ':' || *path == '\\' || *path == '/') {
 800c30e:	2b3a      	cmp	r3, #58	; 0x3a
 800c310:	d0f9      	beq.n	800c306 <lv_fs_get_real_path>
 800c312:	2b5c      	cmp	r3, #92	; 0x5c
 800c314:	d0f7      	beq.n	800c306 <lv_fs_get_real_path>
 800c316:	2b2f      	cmp	r3, #47	; 0x2f
 800c318:	d0f5      	beq.n	800c306 <lv_fs_get_real_path>
            break;
        }
    }

    return path;
}
 800c31a:	4770      	bx	lr

0800c31c <lv_fs_init>:
{
 800c31c:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
 800c31e:	2144      	movs	r1, #68	; 0x44
 800c320:	4801      	ldr	r0, [pc, #4]	; (800c328 <lv_fs_init+0xc>)
 800c322:	f000 f8d8 	bl	800c4d6 <lv_ll_init>
}
 800c326:	bd10      	pop	{r4, pc}
 800c328:	20005440 	.word	0x20005440

0800c32c <lv_fs_close>:
{
 800c32c:	b570      	push	{r4, r5, r6, lr}
 800c32e:	0004      	movs	r4, r0
    if(file_p->drv == NULL) {
 800c330:	6840      	ldr	r0, [r0, #4]
        return LV_FS_RES_INV_PARAM;
 800c332:	250b      	movs	r5, #11
    if(file_p->drv == NULL) {
 800c334:	2800      	cmp	r0, #0
 800c336:	d00c      	beq.n	800c352 <lv_fs_close+0x26>
    if(file_p->drv->close_cb == NULL) {
 800c338:	6903      	ldr	r3, [r0, #16]
        return LV_FS_RES_NOT_IMP;
 800c33a:	3d02      	subs	r5, #2
    if(file_p->drv->close_cb == NULL) {
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d008      	beq.n	800c352 <lv_fs_close+0x26>
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 800c340:	6821      	ldr	r1, [r4, #0]
 800c342:	4798      	blx	r3
 800c344:	0005      	movs	r5, r0
    lv_mem_free(file_p->file_d); /*Clean up*/
 800c346:	6820      	ldr	r0, [r4, #0]
 800c348:	f000 fa9e 	bl	800c888 <lv_mem_free>
    file_p->file_d = NULL;
 800c34c:	2300      	movs	r3, #0
 800c34e:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
 800c350:	6063      	str	r3, [r4, #4]
}
 800c352:	0028      	movs	r0, r5
 800c354:	bd70      	pop	{r4, r5, r6, pc}

0800c356 <lv_fs_read>:
{
 800c356:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c358:	0006      	movs	r6, r0
 800c35a:	1e1c      	subs	r4, r3, #0
    if(br != NULL) *br = 0;
 800c35c:	d001      	beq.n	800c362 <lv_fs_read+0xc>
 800c35e:	2300      	movs	r3, #0
 800c360:	6023      	str	r3, [r4, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 800c362:	6870      	ldr	r0, [r6, #4]
 800c364:	230b      	movs	r3, #11
 800c366:	2800      	cmp	r0, #0
 800c368:	d010      	beq.n	800c38c <lv_fs_read+0x36>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 800c36a:	6985      	ldr	r5, [r0, #24]
 800c36c:	3b02      	subs	r3, #2
 800c36e:	2d00      	cmp	r5, #0
 800c370:	d00c      	beq.n	800c38c <lv_fs_read+0x36>
    uint32_t br_tmp = 0;
 800c372:	2300      	movs	r3, #0
 800c374:	9303      	str	r3, [sp, #12]
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 800c376:	ab03      	add	r3, sp, #12
 800c378:	9300      	str	r3, [sp, #0]
 800c37a:	0013      	movs	r3, r2
 800c37c:	000a      	movs	r2, r1
 800c37e:	6831      	ldr	r1, [r6, #0]
 800c380:	47a8      	blx	r5
 800c382:	0003      	movs	r3, r0
    if(br != NULL) *br = br_tmp;
 800c384:	2c00      	cmp	r4, #0
 800c386:	d001      	beq.n	800c38c <lv_fs_read+0x36>
 800c388:	9a03      	ldr	r2, [sp, #12]
 800c38a:	6022      	str	r2, [r4, #0]
}
 800c38c:	0018      	movs	r0, r3
 800c38e:	b004      	add	sp, #16
 800c390:	bd70      	pop	{r4, r5, r6, pc}

0800c392 <lv_fs_seek>:
{
 800c392:	b570      	push	{r4, r5, r6, lr}
 800c394:	0005      	movs	r5, r0
    if(file_p->drv == NULL) {
 800c396:	6840      	ldr	r0, [r0, #4]
{
 800c398:	000a      	movs	r2, r1
        return LV_FS_RES_INV_PARAM;
 800c39a:	230b      	movs	r3, #11
    if(file_p->drv == NULL) {
 800c39c:	2800      	cmp	r0, #0
 800c39e:	d006      	beq.n	800c3ae <lv_fs_seek+0x1c>
    if(file_p->drv->seek_cb == NULL) {
 800c3a0:	6a04      	ldr	r4, [r0, #32]
        return LV_FS_RES_NOT_IMP;
 800c3a2:	3b02      	subs	r3, #2
    if(file_p->drv->seek_cb == NULL) {
 800c3a4:	2c00      	cmp	r4, #0
 800c3a6:	d002      	beq.n	800c3ae <lv_fs_seek+0x1c>
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 800c3a8:	6829      	ldr	r1, [r5, #0]
 800c3aa:	47a0      	blx	r4
 800c3ac:	0003      	movs	r3, r0
}
 800c3ae:	0018      	movs	r0, r3
 800c3b0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c3b4 <lv_fs_get_drv>:
{
 800c3b4:	b570      	push	{r4, r5, r6, lr}
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 800c3b6:	4c08      	ldr	r4, [pc, #32]	; (800c3d8 <lv_fs_get_drv+0x24>)
{
 800c3b8:	0005      	movs	r5, r0
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 800c3ba:	0020      	movs	r0, r4
 800c3bc:	f000 f8d5 	bl	800c56a <lv_ll_get_head>
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	d100      	bne.n	800c3c6 <lv_fs_get_drv+0x12>
}
 800c3c4:	bd70      	pop	{r4, r5, r6, pc}
        if(drv->letter == letter) {
 800c3c6:	7803      	ldrb	r3, [r0, #0]
 800c3c8:	42ab      	cmp	r3, r5
 800c3ca:	d0fb      	beq.n	800c3c4 <lv_fs_get_drv+0x10>
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 800c3cc:	0001      	movs	r1, r0
 800c3ce:	0020      	movs	r0, r4
 800c3d0:	f000 f8d3 	bl	800c57a <lv_ll_get_next>
 800c3d4:	e7f4      	b.n	800c3c0 <lv_fs_get_drv+0xc>
 800c3d6:	46c0      	nop			; (mov r8, r8)
 800c3d8:	20005440 	.word	0x20005440

0800c3dc <lv_fs_open>:
    file_p->drv    = NULL;
 800c3dc:	2300      	movs	r3, #0
{
 800c3de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3e0:	b085      	sub	sp, #20
 800c3e2:	0004      	movs	r4, r0
 800c3e4:	000f      	movs	r7, r1
 800c3e6:	9203      	str	r2, [sp, #12]
    file_p->drv    = NULL;
 800c3e8:	6043      	str	r3, [r0, #4]
    file_p->file_d = NULL;
 800c3ea:	6003      	str	r3, [r0, #0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 800c3ec:	4299      	cmp	r1, r3
 800c3ee:	d035      	beq.n	800c45c <lv_fs_open+0x80>
    file_p->drv = lv_fs_get_drv(letter);
 800c3f0:	7808      	ldrb	r0, [r1, #0]
 800c3f2:	f7ff ffdf 	bl	800c3b4 <lv_fs_get_drv>
 800c3f6:	6060      	str	r0, [r4, #4]
    if(file_p->drv == NULL) {
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	d104      	bne.n	800c406 <lv_fs_open+0x2a>
        return LV_FS_RES_NOT_EX;
 800c3fc:	2503      	movs	r5, #3
        file_p->file_d = NULL;
 800c3fe:	6020      	str	r0, [r4, #0]
}
 800c400:	0028      	movs	r0, r5
 800c402:	b005      	add	sp, #20
 800c404:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(file_p->drv->ready_cb != NULL) {
 800c406:	6883      	ldr	r3, [r0, #8]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d006      	beq.n	800c41a <lv_fs_open+0x3e>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
 800c40c:	4798      	blx	r3
 800c40e:	2800      	cmp	r0, #0
 800c410:	d103      	bne.n	800c41a <lv_fs_open+0x3e>
            file_p->drv    = NULL;
 800c412:	6060      	str	r0, [r4, #4]
            file_p->file_d = NULL;
 800c414:	6020      	str	r0, [r4, #0]
            return LV_FS_RES_HW_ERR;
 800c416:	2501      	movs	r5, #1
 800c418:	e7f2      	b.n	800c400 <lv_fs_open+0x24>
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
 800c41a:	6863      	ldr	r3, [r4, #4]
 800c41c:	8858      	ldrh	r0, [r3, #2]
 800c41e:	f000 f9ff 	bl	800c820 <lv_mem_alloc>
 800c422:	1e06      	subs	r6, r0, #0
 800c424:	6020      	str	r0, [r4, #0]
    lv_mem_assert(file_p->file_d);
 800c426:	d100      	bne.n	800c42a <lv_fs_open+0x4e>
 800c428:	e7fe      	b.n	800c428 <lv_fs_open+0x4c>
    if(file_p->drv->open_cb == NULL) {
 800c42a:	6863      	ldr	r3, [r4, #4]
        return LV_FS_RES_NOT_IMP;
 800c42c:	2509      	movs	r5, #9
    if(file_p->drv->open_cb == NULL) {
 800c42e:	9301      	str	r3, [sp, #4]
 800c430:	68db      	ldr	r3, [r3, #12]
 800c432:	9302      	str	r3, [sp, #8]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d0e3      	beq.n	800c400 <lv_fs_open+0x24>
    const char * real_path = lv_fs_get_real_path(path);
 800c438:	0038      	movs	r0, r7
 800c43a:	f7ff ff64 	bl	800c306 <lv_fs_get_real_path>
    lv_fs_res_t res        = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
 800c43e:	9d02      	ldr	r5, [sp, #8]
    const char * real_path = lv_fs_get_real_path(path);
 800c440:	0002      	movs	r2, r0
    lv_fs_res_t res        = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
 800c442:	9b03      	ldr	r3, [sp, #12]
 800c444:	0031      	movs	r1, r6
 800c446:	9801      	ldr	r0, [sp, #4]
 800c448:	47a8      	blx	r5
 800c44a:	1e05      	subs	r5, r0, #0
    if(res != LV_FS_RES_OK) {
 800c44c:	d0d8      	beq.n	800c400 <lv_fs_open+0x24>
        lv_mem_free(file_p->file_d);
 800c44e:	6820      	ldr	r0, [r4, #0]
 800c450:	f000 fa1a 	bl	800c888 <lv_mem_free>
        file_p->file_d = NULL;
 800c454:	2300      	movs	r3, #0
 800c456:	6023      	str	r3, [r4, #0]
        file_p->drv    = NULL;
 800c458:	6063      	str	r3, [r4, #4]
 800c45a:	e7d1      	b.n	800c400 <lv_fs_open+0x24>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
 800c45c:	250b      	movs	r5, #11
 800c45e:	e7cf      	b.n	800c400 <lv_fs_open+0x24>

0800c460 <lv_fs_get_ext>:
{
 800c460:	b510      	push	{r4, lr}
 800c462:	0004      	movs	r4, r0
    for(i = strlen(fn); i > 0; i--) {
 800c464:	f7f3 fe56 	bl	8000114 <strlen>
 800c468:	b280      	uxth	r0, r0
 800c46a:	2800      	cmp	r0, #0
 800c46c:	d101      	bne.n	800c472 <lv_fs_get_ext+0x12>
            return ""; /*No extension if a '\' or '/' found*/
 800c46e:	4807      	ldr	r0, [pc, #28]	; (800c48c <lv_fs_get_ext+0x2c>)
 800c470:	e004      	b.n	800c47c <lv_fs_get_ext+0x1c>
        if(fn[i] == '.') {
 800c472:	5c23      	ldrb	r3, [r4, r0]
 800c474:	2b2e      	cmp	r3, #46	; 0x2e
 800c476:	d102      	bne.n	800c47e <lv_fs_get_ext+0x1e>
            return &fn[i + 1];
 800c478:	3001      	adds	r0, #1
 800c47a:	1820      	adds	r0, r4, r0
}
 800c47c:	bd10      	pop	{r4, pc}
        } else if(fn[i] == '/' || fn[i] == '\\') {
 800c47e:	2b2f      	cmp	r3, #47	; 0x2f
 800c480:	d0f5      	beq.n	800c46e <lv_fs_get_ext+0xe>
 800c482:	2b5c      	cmp	r3, #92	; 0x5c
 800c484:	d0f3      	beq.n	800c46e <lv_fs_get_ext+0xe>
    for(i = strlen(fn); i > 0; i--) {
 800c486:	3801      	subs	r0, #1
 800c488:	e7ee      	b.n	800c468 <lv_fs_get_ext+0x8>
 800c48a:	46c0      	nop			; (mov r8, r8)
 800c48c:	08010e29 	.word	0x08010e29

0800c490 <node_set_next.isra.0>:
 * Set the 'next node pointer' of a node
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
 800c490:	b507      	push	{r0, r1, r2, lr}
 800c492:	1e0b      	subs	r3, r1, #0
 800c494:	9201      	str	r2, [sp, #4]
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 800c496:	d009      	beq.n	800c4ac <node_set_next.isra.0+0x1c>
 800c498:	6800      	ldr	r0, [r0, #0]

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
    if(next)
 800c49a:	0011      	movs	r1, r2
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 800c49c:	3004      	adds	r0, #4
 800c49e:	1818      	adds	r0, r3, r0
 800c4a0:	2204      	movs	r2, #4
    if(next)
 800c4a2:	2900      	cmp	r1, #0
 800c4a4:	d003      	beq.n	800c4ae <node_set_next.isra.0+0x1e>
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 800c4a6:	a901      	add	r1, sp, #4
 800c4a8:	f001 fe70 	bl	800e18c <memcpy>
    else
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
}
 800c4ac:	bd07      	pop	{r0, r1, r2, pc}
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 800c4ae:	f001 fe76 	bl	800e19e <memset>
 800c4b2:	e7fb      	b.n	800c4ac <node_set_next.isra.0+0x1c>

0800c4b4 <node_set_prev.isra.2>:
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
 800c4b4:	b507      	push	{r0, r1, r2, lr}
 800c4b6:	1e0b      	subs	r3, r1, #0
 800c4b8:	9201      	str	r2, [sp, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 800c4ba:	d008      	beq.n	800c4ce <node_set_prev.isra.2+0x1a>
 800c4bc:	6800      	ldr	r0, [r0, #0]
    if(prev)
 800c4be:	0011      	movs	r1, r2
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 800c4c0:	1818      	adds	r0, r3, r0
 800c4c2:	2204      	movs	r2, #4
    if(prev)
 800c4c4:	2900      	cmp	r1, #0
 800c4c6:	d003      	beq.n	800c4d0 <node_set_prev.isra.2+0x1c>
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 800c4c8:	a901      	add	r1, sp, #4
 800c4ca:	f001 fe5f 	bl	800e18c <memcpy>
}
 800c4ce:	bd07      	pop	{r0, r1, r2, pc}
        memset(act + LL_PREV_P_OFFSET(ll_p), 0, node_p_size);
 800c4d0:	f001 fe65 	bl	800e19e <memset>
 800c4d4:	e7fb      	b.n	800c4ce <node_set_prev.isra.2+0x1a>

0800c4d6 <lv_ll_init>:
    ll_p->head = NULL;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
 800c4da:	6083      	str	r3, [r0, #8]
    if(node_size & 0x3) {
 800c4dc:	3303      	adds	r3, #3
 800c4de:	4219      	tst	r1, r3
 800c4e0:	d001      	beq.n	800c4e6 <lv_ll_init+0x10>
        node_size = node_size & (~0x3);
 800c4e2:	4399      	bics	r1, r3
        node_size += 4;
 800c4e4:	3104      	adds	r1, #4
    ll_p->n_size = node_size;
 800c4e6:	6001      	str	r1, [r0, #0]
}
 800c4e8:	4770      	bx	lr

0800c4ea <lv_ll_ins_head>:
{
 800c4ea:	b570      	push	{r4, r5, r6, lr}
 800c4ec:	0004      	movs	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800c4ee:	6800      	ldr	r0, [r0, #0]
 800c4f0:	3008      	adds	r0, #8
 800c4f2:	f000 f995 	bl	800c820 <lv_mem_alloc>
 800c4f6:	1e05      	subs	r5, r0, #0
    if(n_new != NULL) {
 800c4f8:	d015      	beq.n	800c526 <lv_ll_ins_head+0x3c>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 800c4fa:	0001      	movs	r1, r0
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	0020      	movs	r0, r4
 800c500:	f7ff ffd8 	bl	800c4b4 <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 800c504:	0029      	movs	r1, r5
 800c506:	6862      	ldr	r2, [r4, #4]
 800c508:	0020      	movs	r0, r4
 800c50a:	f7ff ffc1 	bl	800c490 <node_set_next.isra.0>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 800c50e:	6861      	ldr	r1, [r4, #4]
 800c510:	2900      	cmp	r1, #0
 800c512:	d003      	beq.n	800c51c <lv_ll_ins_head+0x32>
            node_set_prev(ll_p, ll_p->head, n_new);
 800c514:	002a      	movs	r2, r5
 800c516:	0020      	movs	r0, r4
 800c518:	f7ff ffcc 	bl	800c4b4 <node_set_prev.isra.2>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 800c51c:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 800c51e:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 800c520:	2b00      	cmp	r3, #0
 800c522:	d100      	bne.n	800c526 <lv_ll_ins_head+0x3c>
            ll_p->tail = n_new;
 800c524:	60a5      	str	r5, [r4, #8]
}
 800c526:	0028      	movs	r0, r5
 800c528:	bd70      	pop	{r4, r5, r6, pc}

0800c52a <lv_ll_ins_tail>:
{
 800c52a:	b570      	push	{r4, r5, r6, lr}
 800c52c:	0004      	movs	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800c52e:	6800      	ldr	r0, [r0, #0]
 800c530:	3008      	adds	r0, #8
 800c532:	f000 f975 	bl	800c820 <lv_mem_alloc>
 800c536:	1e05      	subs	r5, r0, #0
    if(n_new == NULL) return NULL;
 800c538:	d015      	beq.n	800c566 <lv_ll_ins_tail+0x3c>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 800c53a:	0001      	movs	r1, r0
 800c53c:	2200      	movs	r2, #0
 800c53e:	0020      	movs	r0, r4
 800c540:	f7ff ffa6 	bl	800c490 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
 800c544:	0029      	movs	r1, r5
 800c546:	68a2      	ldr	r2, [r4, #8]
 800c548:	0020      	movs	r0, r4
 800c54a:	f7ff ffb3 	bl	800c4b4 <node_set_prev.isra.2>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 800c54e:	68a1      	ldr	r1, [r4, #8]
 800c550:	2900      	cmp	r1, #0
 800c552:	d003      	beq.n	800c55c <lv_ll_ins_tail+0x32>
            node_set_next(ll_p, ll_p->tail, n_new);
 800c554:	002a      	movs	r2, r5
 800c556:	0020      	movs	r0, r4
 800c558:	f7ff ff9a 	bl	800c490 <node_set_next.isra.0>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800c55c:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 800c55e:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800c560:	2b00      	cmp	r3, #0
 800c562:	d100      	bne.n	800c566 <lv_ll_ins_tail+0x3c>
            ll_p->head = n_new;
 800c564:	6065      	str	r5, [r4, #4]
}
 800c566:	0028      	movs	r0, r5
 800c568:	bd70      	pop	{r4, r5, r6, pc}

0800c56a <lv_ll_get_head>:
    if(ll_p != NULL) {
 800c56a:	2800      	cmp	r0, #0
 800c56c:	d000      	beq.n	800c570 <lv_ll_get_head+0x6>
        head = ll_p->head;
 800c56e:	6840      	ldr	r0, [r0, #4]
}
 800c570:	4770      	bx	lr

0800c572 <lv_ll_get_tail>:
    if(ll_p != NULL) {
 800c572:	2800      	cmp	r0, #0
 800c574:	d000      	beq.n	800c578 <lv_ll_get_tail+0x6>
        tail = ll_p->tail;
 800c576:	6880      	ldr	r0, [r0, #8]
}
 800c578:	4770      	bx	lr

0800c57a <lv_ll_get_next>:
    void * next = NULL;
 800c57a:	2300      	movs	r3, #0
{
 800c57c:	b507      	push	{r0, r1, r2, lr}
    void * next = NULL;
 800c57e:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
 800c580:	4298      	cmp	r0, r3
 800c582:	d006      	beq.n	800c592 <lv_ll_get_next+0x18>
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 800c584:	6803      	ldr	r3, [r0, #0]
 800c586:	2204      	movs	r2, #4
 800c588:	3304      	adds	r3, #4
 800c58a:	18c9      	adds	r1, r1, r3
 800c58c:	a801      	add	r0, sp, #4
 800c58e:	f001 fdfd 	bl	800e18c <memcpy>
}
 800c592:	9801      	ldr	r0, [sp, #4]
 800c594:	bd0e      	pop	{r1, r2, r3, pc}

0800c596 <lv_ll_get_prev>:
    void * prev = NULL;
 800c596:	2300      	movs	r3, #0
{
 800c598:	b507      	push	{r0, r1, r2, lr}
    void * prev = NULL;
 800c59a:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
 800c59c:	4298      	cmp	r0, r3
 800c59e:	d005      	beq.n	800c5ac <lv_ll_get_prev+0x16>
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 800c5a0:	6803      	ldr	r3, [r0, #0]
 800c5a2:	2204      	movs	r2, #4
 800c5a4:	18c9      	adds	r1, r1, r3
 800c5a6:	a801      	add	r0, sp, #4
 800c5a8:	f001 fdf0 	bl	800e18c <memcpy>
}
 800c5ac:	9801      	ldr	r0, [sp, #4]
 800c5ae:	bd0e      	pop	{r1, r2, r3, pc}

0800c5b0 <lv_ll_ins_prev>:
{
 800c5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b2:	0005      	movs	r5, r0
 800c5b4:	000c      	movs	r4, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	d02a      	beq.n	800c610 <lv_ll_ins_prev+0x60>
 800c5ba:	2900      	cmp	r1, #0
 800c5bc:	d005      	beq.n	800c5ca <lv_ll_ins_prev+0x1a>
    if(lv_ll_get_head(ll_p) == n_act) {
 800c5be:	6843      	ldr	r3, [r0, #4]
 800c5c0:	4299      	cmp	r1, r3
 800c5c2:	d104      	bne.n	800c5ce <lv_ll_ins_prev+0x1e>
        n_new = lv_ll_ins_head(ll_p);
 800c5c4:	f7ff ff91 	bl	800c4ea <lv_ll_ins_head>
 800c5c8:	0004      	movs	r4, r0
}
 800c5ca:	0020      	movs	r0, r4
 800c5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800c5ce:	6800      	ldr	r0, [r0, #0]
 800c5d0:	3008      	adds	r0, #8
 800c5d2:	f000 f925 	bl	800c820 <lv_mem_alloc>
 800c5d6:	1e06      	subs	r6, r0, #0
        if(n_new == NULL) return NULL;
 800c5d8:	d018      	beq.n	800c60c <lv_ll_ins_prev+0x5c>
        n_prev = lv_ll_get_prev(ll_p, n_act);
 800c5da:	0021      	movs	r1, r4
 800c5dc:	0028      	movs	r0, r5
 800c5de:	f7ff ffda 	bl	800c596 <lv_ll_get_prev>
 800c5e2:	0007      	movs	r7, r0
        node_set_next(ll_p, n_prev, n_new);
 800c5e4:	0001      	movs	r1, r0
 800c5e6:	0032      	movs	r2, r6
 800c5e8:	0028      	movs	r0, r5
 800c5ea:	f7ff ff51 	bl	800c490 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, n_prev);
 800c5ee:	003a      	movs	r2, r7
 800c5f0:	0031      	movs	r1, r6
 800c5f2:	0028      	movs	r0, r5
 800c5f4:	f7ff ff5e 	bl	800c4b4 <node_set_prev.isra.2>
        node_set_prev(ll_p, n_act, n_new);
 800c5f8:	0032      	movs	r2, r6
 800c5fa:	0021      	movs	r1, r4
 800c5fc:	0028      	movs	r0, r5
 800c5fe:	f7ff ff59 	bl	800c4b4 <node_set_prev.isra.2>
        node_set_next(ll_p, n_new, n_act);
 800c602:	0022      	movs	r2, r4
 800c604:	0031      	movs	r1, r6
 800c606:	0028      	movs	r0, r5
 800c608:	f7ff ff42 	bl	800c490 <node_set_next.isra.0>
        if(n_new == NULL) return NULL;
 800c60c:	0034      	movs	r4, r6
 800c60e:	e7dc      	b.n	800c5ca <lv_ll_ins_prev+0x1a>
    if(NULL == ll_p || NULL == n_act) return NULL;
 800c610:	0004      	movs	r4, r0
 800c612:	e7da      	b.n	800c5ca <lv_ll_ins_prev+0x1a>

0800c614 <lv_ll_rem>:
{
 800c614:	b570      	push	{r4, r5, r6, lr}
 800c616:	0004      	movs	r4, r0
 800c618:	000d      	movs	r5, r1
    if(ll_p != NULL) {
 800c61a:	2800      	cmp	r0, #0
 800c61c:	d01b      	beq.n	800c656 <lv_ll_rem+0x42>
    if(lv_ll_get_head(ll_p) == node_p) {
 800c61e:	6843      	ldr	r3, [r0, #4]
 800c620:	4299      	cmp	r1, r3
 800c622:	d109      	bne.n	800c638 <lv_ll_rem+0x24>
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 800c624:	0029      	movs	r1, r5
 800c626:	0020      	movs	r0, r4
 800c628:	f7ff ffa7 	bl	800c57a <lv_ll_get_next>
            node_set_prev(ll_p, ll_p->head, NULL);
 800c62c:	2200      	movs	r2, #0
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 800c62e:	1e01      	subs	r1, r0, #0
 800c630:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
 800c632:	d123      	bne.n	800c67c <lv_ll_rem+0x68>
            ll_p->tail = NULL;
 800c634:	60a0      	str	r0, [r4, #8]
}
 800c636:	bd70      	pop	{r4, r5, r6, pc}
    } else if(lv_ll_get_tail(ll_p) == node_p) {
 800c638:	6883      	ldr	r3, [r0, #8]
 800c63a:	4299      	cmp	r1, r3
 800c63c:	d10d      	bne.n	800c65a <lv_ll_rem+0x46>
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
 800c63e:	f7ff ffaa 	bl	800c596 <lv_ll_get_prev>
 800c642:	1e01      	subs	r1, r0, #0
 800c644:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
 800c646:	d101      	bne.n	800c64c <lv_ll_rem+0x38>
            ll_p->head = NULL;
 800c648:	6060      	str	r0, [r4, #4]
 800c64a:	e7f4      	b.n	800c636 <lv_ll_rem+0x22>
            node_set_next(ll_p, ll_p->tail, NULL);
 800c64c:	2200      	movs	r2, #0
 800c64e:	0020      	movs	r0, r4
 800c650:	f7ff ff1e 	bl	800c490 <node_set_next.isra.0>
 800c654:	e7ef      	b.n	800c636 <lv_ll_rem+0x22>
    if(lv_ll_get_head(ll_p) == node_p) {
 800c656:	2900      	cmp	r1, #0
 800c658:	d0e4      	beq.n	800c624 <lv_ll_rem+0x10>
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
 800c65a:	0029      	movs	r1, r5
 800c65c:	0020      	movs	r0, r4
 800c65e:	f7ff ff9a 	bl	800c596 <lv_ll_get_prev>
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 800c662:	0029      	movs	r1, r5
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
 800c664:	0006      	movs	r6, r0
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 800c666:	0020      	movs	r0, r4
 800c668:	f7ff ff87 	bl	800c57a <lv_ll_get_next>
 800c66c:	0005      	movs	r5, r0
        node_set_next(ll_p, n_prev, n_next);
 800c66e:	0002      	movs	r2, r0
 800c670:	0031      	movs	r1, r6
 800c672:	0020      	movs	r0, r4
 800c674:	f7ff ff0c 	bl	800c490 <node_set_next.isra.0>
        node_set_prev(ll_p, n_next, n_prev);
 800c678:	0032      	movs	r2, r6
 800c67a:	0029      	movs	r1, r5
 800c67c:	0020      	movs	r0, r4
 800c67e:	f7ff ff19 	bl	800c4b4 <node_set_prev.isra.2>
}
 800c682:	e7d8      	b.n	800c636 <lv_ll_rem+0x22>

0800c684 <lv_ll_chg_list>:
{
 800c684:	b570      	push	{r4, r5, r6, lr}
 800c686:	000c      	movs	r4, r1
    lv_ll_rem(ll_ori_p, node);
 800c688:	0011      	movs	r1, r2
{
 800c68a:	001e      	movs	r6, r3
 800c68c:	0015      	movs	r5, r2
    lv_ll_rem(ll_ori_p, node);
 800c68e:	f7ff ffc1 	bl	800c614 <lv_ll_rem>
    if(head) {
 800c692:	2e00      	cmp	r6, #0
 800c694:	d016      	beq.n	800c6c4 <lv_ll_chg_list+0x40>
        node_set_prev(ll_new_p, node, NULL);
 800c696:	2200      	movs	r2, #0
 800c698:	0029      	movs	r1, r5
 800c69a:	0020      	movs	r0, r4
 800c69c:	f7ff ff0a 	bl	800c4b4 <node_set_prev.isra.2>
        node_set_next(ll_new_p, node, ll_new_p->head);
 800c6a0:	0029      	movs	r1, r5
 800c6a2:	6862      	ldr	r2, [r4, #4]
 800c6a4:	0020      	movs	r0, r4
 800c6a6:	f7ff fef3 	bl	800c490 <node_set_next.isra.0>
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 800c6aa:	6861      	ldr	r1, [r4, #4]
 800c6ac:	2900      	cmp	r1, #0
 800c6ae:	d003      	beq.n	800c6b8 <lv_ll_chg_list+0x34>
            node_set_prev(ll_new_p, ll_new_p->head, node);
 800c6b0:	002a      	movs	r2, r5
 800c6b2:	0020      	movs	r0, r4
 800c6b4:	f7ff fefe 	bl	800c4b4 <node_set_prev.isra.2>
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 800c6b8:	68a3      	ldr	r3, [r4, #8]
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
 800c6ba:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d100      	bne.n	800c6c2 <lv_ll_chg_list+0x3e>
            ll_new_p->tail = node;
 800c6c0:	60a5      	str	r5, [r4, #8]
}
 800c6c2:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
 800c6c4:	68a2      	ldr	r2, [r4, #8]
 800c6c6:	0029      	movs	r1, r5
 800c6c8:	0020      	movs	r0, r4
 800c6ca:	f7ff fef3 	bl	800c4b4 <node_set_prev.isra.2>
        node_set_next(ll_new_p, node, NULL);
 800c6ce:	0029      	movs	r1, r5
 800c6d0:	0032      	movs	r2, r6
 800c6d2:	0020      	movs	r0, r4
 800c6d4:	f7ff fedc 	bl	800c490 <node_set_next.isra.0>
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
 800c6d8:	68a1      	ldr	r1, [r4, #8]
 800c6da:	2900      	cmp	r1, #0
 800c6dc:	d003      	beq.n	800c6e6 <lv_ll_chg_list+0x62>
            node_set_next(ll_new_p, ll_new_p->tail, node);
 800c6de:	002a      	movs	r2, r5
 800c6e0:	0020      	movs	r0, r4
 800c6e2:	f7ff fed5 	bl	800c490 <node_set_next.isra.0>
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 800c6e6:	6863      	ldr	r3, [r4, #4]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
 800c6e8:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d1e9      	bne.n	800c6c2 <lv_ll_chg_list+0x3e>
            ll_new_p->head = node;
 800c6ee:	6065      	str	r5, [r4, #4]
}
 800c6f0:	e7e7      	b.n	800c6c2 <lv_ll_chg_list+0x3e>

0800c6f2 <lv_ll_move_before>:
{
 800c6f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6f4:	0004      	movs	r4, r0
 800c6f6:	000d      	movs	r5, r1
 800c6f8:	0016      	movs	r6, r2
    if(n_act == n_after) return; /*Can't move before itself*/
 800c6fa:	4291      	cmp	r1, r2
 800c6fc:	d007      	beq.n	800c70e <lv_ll_move_before+0x1c>
    if(n_after != NULL)
 800c6fe:	2a00      	cmp	r2, #0
 800c700:	d006      	beq.n	800c710 <lv_ll_move_before+0x1e>
        n_before = lv_ll_get_prev(ll_p, n_after);
 800c702:	0011      	movs	r1, r2
 800c704:	f7ff ff47 	bl	800c596 <lv_ll_get_prev>
 800c708:	0007      	movs	r7, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
 800c70a:	4285      	cmp	r5, r0
 800c70c:	d122      	bne.n	800c754 <lv_ll_move_before+0x62>
}
 800c70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ll_p != NULL) {
 800c710:	2800      	cmp	r0, #0
 800c712:	d000      	beq.n	800c716 <lv_ll_move_before+0x24>
        tail = ll_p->tail;
 800c714:	6886      	ldr	r6, [r0, #8]
    if(n_act == n_before) return; /*Already before `n_after`*/
 800c716:	42b5      	cmp	r5, r6
 800c718:	d0f9      	beq.n	800c70e <lv_ll_move_before+0x1c>
    lv_ll_rem(ll_p, n_act);
 800c71a:	0029      	movs	r1, r5
 800c71c:	0020      	movs	r0, r4
 800c71e:	f7ff ff79 	bl	800c614 <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
 800c722:	002a      	movs	r2, r5
 800c724:	0031      	movs	r1, r6
 800c726:	0020      	movs	r0, r4
 800c728:	f7ff feb2 	bl	800c490 <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
 800c72c:	0032      	movs	r2, r6
 800c72e:	0029      	movs	r1, r5
 800c730:	0020      	movs	r0, r4
 800c732:	f7ff febf 	bl	800c4b4 <node_set_prev.isra.2>
    node_set_prev(ll_p, n_after, n_act);
 800c736:	002a      	movs	r2, r5
 800c738:	2100      	movs	r1, #0
 800c73a:	0020      	movs	r0, r4
 800c73c:	f7ff feba 	bl	800c4b4 <node_set_prev.isra.2>
    node_set_next(ll_p, n_act, n_after);
 800c740:	2200      	movs	r2, #0
 800c742:	0029      	movs	r1, r5
 800c744:	0020      	movs	r0, r4
 800c746:	f7ff fea3 	bl	800c490 <node_set_next.isra.0>
    if(n_after == NULL) ll_p->tail = n_act;
 800c74a:	60a5      	str	r5, [r4, #8]
    if(n_before == NULL) ll_p->head = n_act;
 800c74c:	2e00      	cmp	r6, #0
 800c74e:	d1de      	bne.n	800c70e <lv_ll_move_before+0x1c>
 800c750:	6065      	str	r5, [r4, #4]
 800c752:	e7dc      	b.n	800c70e <lv_ll_move_before+0x1c>
    lv_ll_rem(ll_p, n_act);
 800c754:	0029      	movs	r1, r5
 800c756:	0020      	movs	r0, r4
 800c758:	f7ff ff5c 	bl	800c614 <lv_ll_rem>
    node_set_next(ll_p, n_before, n_act);
 800c75c:	002a      	movs	r2, r5
 800c75e:	0039      	movs	r1, r7
 800c760:	0020      	movs	r0, r4
 800c762:	f7ff fe95 	bl	800c490 <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
 800c766:	003a      	movs	r2, r7
 800c768:	0029      	movs	r1, r5
 800c76a:	0020      	movs	r0, r4
 800c76c:	f7ff fea2 	bl	800c4b4 <node_set_prev.isra.2>
    node_set_prev(ll_p, n_after, n_act);
 800c770:	0031      	movs	r1, r6
 800c772:	002a      	movs	r2, r5
 800c774:	0020      	movs	r0, r4
 800c776:	f7ff fe9d 	bl	800c4b4 <node_set_prev.isra.2>
    node_set_next(ll_p, n_act, n_after);
 800c77a:	0032      	movs	r2, r6
 800c77c:	0029      	movs	r1, r5
 800c77e:	0020      	movs	r0, r4
 800c780:	f7ff fe86 	bl	800c490 <node_set_next.isra.0>
 800c784:	003e      	movs	r6, r7
 800c786:	e7e1      	b.n	800c74c <lv_ll_move_before+0x5a>

0800c788 <ent_get_next>:
 * Give the next entry after 'act_e'
 * @param act_e pointer to an entry
 * @return pointer to an entry after 'act_e'
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
 800c788:	4908      	ldr	r1, [pc, #32]	; (800c7ac <ent_get_next+0x24>)
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
 800c78a:	2800      	cmp	r0, #0
 800c78c:	d101      	bne.n	800c792 <ent_get_next+0xa>
        next_e = (lv_mem_ent_t *)work_mem;
 800c78e:	6808      	ldr	r0, [r1, #0]

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
    }

    return next_e;
}
 800c790:	4770      	bx	lr
        uint8_t * data = &act_e->first_data;
 800c792:	1d03      	adds	r3, r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 800c794:	6800      	ldr	r0, [r0, #0]
 800c796:	0840      	lsrs	r0, r0, #1
 800c798:	1818      	adds	r0, r3, r0
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 800c79a:	680b      	ldr	r3, [r1, #0]
 800c79c:	21c0      	movs	r1, #192	; 0xc0
 800c79e:	0189      	lsls	r1, r1, #6
 800c7a0:	1d02      	adds	r2, r0, #4
 800c7a2:	185b      	adds	r3, r3, r1
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	419b      	sbcs	r3, r3
 800c7a8:	4018      	ands	r0, r3
 800c7aa:	e7f1      	b.n	800c790 <ent_get_next+0x8>
 800c7ac:	20001664 	.word	0x20001664

0800c7b0 <ent_trunc>:
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
 800c7b0:	2303      	movs	r3, #3
{
 800c7b2:	b530      	push	{r4, r5, lr}
    if(size & 0x3) {
 800c7b4:	4219      	tst	r1, r3
 800c7b6:	d001      	beq.n	800c7bc <ent_trunc+0xc>
        size = size & (~0x3);
 800c7b8:	4399      	bics	r1, r3
        size += 4;
 800c7ba:	3104      	adds	r1, #4
    }
#endif

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 800c7bc:	6803      	ldr	r3, [r0, #0]
 800c7be:	1d0a      	adds	r2, r1, #4
 800c7c0:	085b      	lsrs	r3, r3, #1
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d015      	beq.n	800c7f2 <ent_trunc+0x42>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
 800c7c6:	4299      	cmp	r1, r3
 800c7c8:	d00c      	beq.n	800c7e4 <ent_trunc+0x34>
        uint8_t * e_data             = &e->first_data;
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
 800c7ca:	2401      	movs	r4, #1
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 800c7cc:	3b04      	subs	r3, #4
 800c7ce:	1a5b      	subs	r3, r3, r1
 800c7d0:	40a3      	lsls	r3, r4
        uint8_t * e_data             = &e->first_data;
 800c7d2:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
 800c7d4:	1852      	adds	r2, r2, r1
        after_new_e->header.s.used   = 0;
 800c7d6:	7815      	ldrb	r5, [r2, #0]
 800c7d8:	43a5      	bics	r5, r4
 800c7da:	7015      	strb	r5, [r2, #0]
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 800c7dc:	6815      	ldr	r5, [r2, #0]
 800c7de:	402c      	ands	r4, r5
 800c7e0:	4323      	orrs	r3, r4
 800c7e2:	6013      	str	r3, [r2, #0]
    }

    /* Set the new size for the original entry */
    e->header.s.d_size = size;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	6802      	ldr	r2, [r0, #0]
 800c7e8:	0049      	lsls	r1, r1, #1
 800c7ea:	4013      	ands	r3, r2
 800c7ec:	4319      	orrs	r1, r3
 800c7ee:	6001      	str	r1, [r0, #0]
}
 800c7f0:	bd30      	pop	{r4, r5, pc}
 800c7f2:	0019      	movs	r1, r3
 800c7f4:	e7f6      	b.n	800c7e4 <ent_trunc+0x34>
	...

0800c7f8 <lv_mem_init>:
    full->header.s.used = 0;
 800c7f8:	2101      	movs	r1, #1
    work_mem = (uint8_t *)work_mem_int;
 800c7fa:	4b06      	ldr	r3, [pc, #24]	; (800c814 <lv_mem_init+0x1c>)
 800c7fc:	4a06      	ldr	r2, [pc, #24]	; (800c818 <lv_mem_init+0x20>)
    full->header.s.used = 0;
 800c7fe:	7818      	ldrb	r0, [r3, #0]
    work_mem = (uint8_t *)work_mem_int;
 800c800:	6013      	str	r3, [r2, #0]
    full->header.s.used = 0;
 800c802:	4388      	bics	r0, r1
 800c804:	7018      	strb	r0, [r3, #0]
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
 800c806:	681a      	ldr	r2, [r3, #0]
 800c808:	4011      	ands	r1, r2
 800c80a:	4a04      	ldr	r2, [pc, #16]	; (800c81c <lv_mem_init+0x24>)
 800c80c:	430a      	orrs	r2, r1
 800c80e:	601a      	str	r2, [r3, #0]
}
 800c810:	4770      	bx	lr
 800c812:	46c0      	nop			; (mov r8, r8)
 800c814:	20001668 	.word	0x20001668
 800c818:	20001664 	.word	0x20001664
 800c81c:	00005ff8 	.word	0x00005ff8

0800c820 <lv_mem_alloc>:
{
 800c820:	b570      	push	{r4, r5, r6, lr}
 800c822:	1e05      	subs	r5, r0, #0
        return &zero_mem;
 800c824:	4c11      	ldr	r4, [pc, #68]	; (800c86c <lv_mem_alloc+0x4c>)
    if(size == 0) {
 800c826:	d01e      	beq.n	800c866 <lv_mem_alloc+0x46>
    if(size & 0x3) {
 800c828:	2303      	movs	r3, #3
 800c82a:	4218      	tst	r0, r3
 800c82c:	d001      	beq.n	800c832 <lv_mem_alloc+0x12>
        size = size & (~0x3);
 800c82e:	439d      	bics	r5, r3
        size += 4;
 800c830:	3504      	adds	r5, #4
    lv_mem_ent_t * e = NULL;
 800c832:	2400      	movs	r4, #0
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 800c834:	2601      	movs	r6, #1
        e = ent_get_next(e);
 800c836:	0020      	movs	r0, r4
 800c838:	f7ff ffa6 	bl	800c788 <ent_get_next>
 800c83c:	1e04      	subs	r4, r0, #0
        if(e != NULL) {
 800c83e:	d012      	beq.n	800c866 <lv_mem_alloc+0x46>
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 800c840:	7803      	ldrb	r3, [r0, #0]
 800c842:	4233      	tst	r3, r6
 800c844:	d1f7      	bne.n	800c836 <lv_mem_alloc+0x16>
 800c846:	6803      	ldr	r3, [r0, #0]
 800c848:	085b      	lsrs	r3, r3, #1
 800c84a:	429d      	cmp	r5, r3
 800c84c:	d8f3      	bhi.n	800c836 <lv_mem_alloc+0x16>
        ent_trunc(e, size),
 800c84e:	0029      	movs	r1, r5
 800c850:	f7ff ffae 	bl	800c7b0 <ent_trunc>
            e->header.s.used = 1;
 800c854:	7823      	ldrb	r3, [r4, #0]
    if(alloc != NULL) memset(alloc, 0xaa, size);
 800c856:	002a      	movs	r2, r5
            e->header.s.used = 1;
 800c858:	431e      	orrs	r6, r3
 800c85a:	7026      	strb	r6, [r4, #0]
        alloc = &e->first_data;
 800c85c:	3404      	adds	r4, #4
    if(alloc != NULL) memset(alloc, 0xaa, size);
 800c85e:	21aa      	movs	r1, #170	; 0xaa
 800c860:	0020      	movs	r0, r4
 800c862:	f001 fc9c 	bl	800e19e <memset>
}
 800c866:	0020      	movs	r0, r4
 800c868:	bd70      	pop	{r4, r5, r6, pc}
 800c86a:	46c0      	nop			; (mov r8, r8)
 800c86c:	20004668 	.word	0x20004668

0800c870 <lv_mem_get_size>:
{
 800c870:	1e03      	subs	r3, r0, #0
    if(data == NULL) return 0;
 800c872:	d006      	beq.n	800c882 <lv_mem_get_size+0x12>
    if(data == &zero_mem) return 0;
 800c874:	4a03      	ldr	r2, [pc, #12]	; (800c884 <lv_mem_get_size+0x14>)
    if(data == NULL) return 0;
 800c876:	2000      	movs	r0, #0
    if(data == &zero_mem) return 0;
 800c878:	4293      	cmp	r3, r2
 800c87a:	d002      	beq.n	800c882 <lv_mem_get_size+0x12>
    return e->header.s.d_size;
 800c87c:	3b04      	subs	r3, #4
 800c87e:	6818      	ldr	r0, [r3, #0]
 800c880:	0840      	lsrs	r0, r0, #1
}
 800c882:	4770      	bx	lr
 800c884:	20004668 	.word	0x20004668

0800c888 <lv_mem_free>:
    if(data == &zero_mem) return;
 800c888:	4b13      	ldr	r3, [pc, #76]	; (800c8d8 <lv_mem_free+0x50>)
{
 800c88a:	b570      	push	{r4, r5, r6, lr}
 800c88c:	0004      	movs	r4, r0
    if(data == &zero_mem) return;
 800c88e:	4298      	cmp	r0, r3
 800c890:	d012      	beq.n	800c8b8 <lv_mem_free+0x30>
    if(data == NULL) return;
 800c892:	2800      	cmp	r0, #0
 800c894:	d010      	beq.n	800c8b8 <lv_mem_free+0x30>
    memset((void *)data, 0xbb, lv_mem_get_size(data));
 800c896:	f7ff ffeb 	bl	800c870 <lv_mem_get_size>
    e->header.s.used = 0;
 800c89a:	2501      	movs	r5, #1
    memset((void *)data, 0xbb, lv_mem_get_size(data));
 800c89c:	0002      	movs	r2, r0
 800c89e:	21bb      	movs	r1, #187	; 0xbb
 800c8a0:	0020      	movs	r0, r4
    e->header.s.used = 0;
 800c8a2:	3c04      	subs	r4, #4
    memset((void *)data, 0xbb, lv_mem_get_size(data));
 800c8a4:	f001 fc7b 	bl	800e19e <memset>
    e_next = ent_get_next(e);
 800c8a8:	0020      	movs	r0, r4
    e->header.s.used = 0;
 800c8aa:	7823      	ldrb	r3, [r4, #0]
 800c8ac:	43ab      	bics	r3, r5
 800c8ae:	7023      	strb	r3, [r4, #0]
        e_next = ent_get_next(e_next);
 800c8b0:	f7ff ff6a 	bl	800c788 <ent_get_next>
    while(e_next != NULL) {
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	d100      	bne.n	800c8ba <lv_mem_free+0x32>
}
 800c8b8:	bd70      	pop	{r4, r5, r6, pc}
        if(e_next->header.s.used == 0) {
 800c8ba:	7803      	ldrb	r3, [r0, #0]
 800c8bc:	422b      	tst	r3, r5
 800c8be:	d1fb      	bne.n	800c8b8 <lv_mem_free+0x30>
            e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
 800c8c0:	6822      	ldr	r2, [r4, #0]
 800c8c2:	6801      	ldr	r1, [r0, #0]
 800c8c4:	0853      	lsrs	r3, r2, #1
 800c8c6:	3304      	adds	r3, #4
 800c8c8:	0849      	lsrs	r1, r1, #1
 800c8ca:	185b      	adds	r3, r3, r1
 800c8cc:	005b      	lsls	r3, r3, #1
 800c8ce:	402a      	ands	r2, r5
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	6023      	str	r3, [r4, #0]
 800c8d4:	e7ec      	b.n	800c8b0 <lv_mem_free+0x28>
 800c8d6:	46c0      	nop			; (mov r8, r8)
 800c8d8:	20004668 	.word	0x20004668

0800c8dc <lv_mem_realloc>:
{
 800c8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8de:	0004      	movs	r4, r0
 800c8e0:	000e      	movs	r6, r1
    if(data_p != NULL) {
 800c8e2:	2800      	cmp	r0, #0
 800c8e4:	d004      	beq.n	800c8f0 <lv_mem_realloc+0x14>
        if(e->header.s.used == 0) {
 800c8e6:	1f03      	subs	r3, r0, #4
 800c8e8:	781b      	ldrb	r3, [r3, #0]
            data_p = NULL;
 800c8ea:	07db      	lsls	r3, r3, #31
 800c8ec:	17db      	asrs	r3, r3, #31
 800c8ee:	401c      	ands	r4, r3
    uint32_t old_size = lv_mem_get_size(data_p);
 800c8f0:	0020      	movs	r0, r4
 800c8f2:	f7ff ffbd 	bl	800c870 <lv_mem_get_size>
 800c8f6:	0027      	movs	r7, r4
 800c8f8:	0005      	movs	r5, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 800c8fa:	42b0      	cmp	r0, r6
 800c8fc:	d004      	beq.n	800c908 <lv_mem_realloc+0x2c>
    if(new_size < old_size) {
 800c8fe:	d905      	bls.n	800c90c <lv_mem_realloc+0x30>
        lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data_p - sizeof(lv_mem_header_t));
 800c900:	1f20      	subs	r0, r4, #4
        ent_trunc(e, new_size);
 800c902:	0031      	movs	r1, r6
 800c904:	f7ff ff54 	bl	800c7b0 <ent_trunc>
}
 800c908:	0038      	movs	r0, r7
 800c90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    new_p = lv_mem_alloc(new_size);
 800c90c:	0030      	movs	r0, r6
 800c90e:	f7ff ff87 	bl	800c820 <lv_mem_alloc>
 800c912:	1e07      	subs	r7, r0, #0
    if(new_p != NULL && data_p != NULL) {
 800c914:	d0f8      	beq.n	800c908 <lv_mem_realloc+0x2c>
 800c916:	2c00      	cmp	r4, #0
 800c918:	d0f6      	beq.n	800c908 <lv_mem_realloc+0x2c>
        if(old_size != 0) {
 800c91a:	2d00      	cmp	r5, #0
 800c91c:	d0f4      	beq.n	800c908 <lv_mem_realloc+0x2c>
            memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 800c91e:	002a      	movs	r2, r5
 800c920:	42b5      	cmp	r5, r6
 800c922:	d900      	bls.n	800c926 <lv_mem_realloc+0x4a>
 800c924:	0032      	movs	r2, r6
 800c926:	0021      	movs	r1, r4
 800c928:	0038      	movs	r0, r7
 800c92a:	f001 fc2f 	bl	800e18c <memcpy>
            lv_mem_free(data_p);
 800c92e:	0020      	movs	r0, r4
 800c930:	f7ff ffaa 	bl	800c888 <lv_mem_free>
 800c934:	e7e8      	b.n	800c908 <lv_mem_realloc+0x2c>
	...

0800c938 <lv_task_core_init>:

/**
 * Init the lv_task module
 */
void lv_task_core_init(void)
{
 800c938:	b510      	push	{r4, lr}
    lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 800c93a:	2114      	movs	r1, #20
 800c93c:	4803      	ldr	r0, [pc, #12]	; (800c94c <lv_task_core_init+0x14>)
 800c93e:	f7ff fdca 	bl	800c4d6 <lv_ll_init>
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
 800c942:	2201      	movs	r2, #1
 800c944:	4b02      	ldr	r3, [pc, #8]	; (800c950 <lv_task_core_init+0x18>)
 800c946:	701a      	strb	r2, [r3, #0]
}
 800c948:	bd10      	pop	{r4, pc}
 800c94a:	46c0      	nop			; (mov r8, r8)
 800c94c:	2000540c 	.word	0x2000540c
 800c950:	2000467c 	.word	0x2000467c

0800c954 <lv_task_create_basic>:
{
 800c954:	b570      	push	{r4, r5, r6, lr}
    tmp = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800c956:	4c1c      	ldr	r4, [pc, #112]	; (800c9c8 <lv_task_create_basic+0x74>)
 800c958:	0020      	movs	r0, r4
 800c95a:	f7ff fe06 	bl	800c56a <lv_ll_get_head>
 800c95e:	1e01      	subs	r1, r0, #0
    if(NULL == tmp) {
 800c960:	d105      	bne.n	800c96e <lv_task_create_basic+0x1a>
        new_task = lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 800c962:	0020      	movs	r0, r4
 800c964:	f7ff fdc1 	bl	800c4ea <lv_ll_ins_head>
 800c968:	1e04      	subs	r4, r0, #0
        lv_mem_assert(new_task);
 800c96a:	d114      	bne.n	800c996 <lv_task_create_basic+0x42>
 800c96c:	e7fe      	b.n	800c96c <lv_task_create_basic+0x18>
            if(tmp->prio <= DEF_PRIO) {
 800c96e:	7c0b      	ldrb	r3, [r1, #16]
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 800c970:	0020      	movs	r0, r4
            if(tmp->prio <= DEF_PRIO) {
 800c972:	075b      	lsls	r3, r3, #29
 800c974:	0f5b      	lsrs	r3, r3, #29
 800c976:	2b03      	cmp	r3, #3
 800c978:	dc04      	bgt.n	800c984 <lv_task_create_basic+0x30>
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 800c97a:	f7ff fe19 	bl	800c5b0 <lv_ll_ins_prev>
 800c97e:	1e04      	subs	r4, r0, #0
                lv_mem_assert(new_task);
 800c980:	d109      	bne.n	800c996 <lv_task_create_basic+0x42>
 800c982:	e7fe      	b.n	800c982 <lv_task_create_basic+0x2e>
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 800c984:	f7ff fdf9 	bl	800c57a <lv_ll_get_next>
 800c988:	1e01      	subs	r1, r0, #0
        } while(tmp != NULL);
 800c98a:	d1f0      	bne.n	800c96e <lv_task_create_basic+0x1a>
            new_task = lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 800c98c:	0020      	movs	r0, r4
 800c98e:	f7ff fdcc 	bl	800c52a <lv_ll_ins_tail>
 800c992:	1e04      	subs	r4, r0, #0
            lv_mem_assert(new_task);
 800c994:	d016      	beq.n	800c9c4 <lv_task_create_basic+0x70>
    new_task->period  = DEF_PERIOD;
 800c996:	23fa      	movs	r3, #250	; 0xfa
    new_task->prio    = DEF_PRIO;
 800c998:	2207      	movs	r2, #7
    new_task->period  = DEF_PERIOD;
 800c99a:	005b      	lsls	r3, r3, #1
 800c99c:	6023      	str	r3, [r4, #0]
    new_task->prio    = DEF_PRIO;
 800c99e:	7c23      	ldrb	r3, [r4, #16]
    new_task->task_cb = NULL;
 800c9a0:	2500      	movs	r5, #0
    new_task->prio    = DEF_PRIO;
 800c9a2:	4393      	bics	r3, r2
 800c9a4:	001a      	movs	r2, r3
    new_task->once     = 0;
 800c9a6:	2303      	movs	r3, #3
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	2208      	movs	r2, #8
 800c9ac:	4393      	bics	r3, r2
    new_task->task_cb = NULL;
 800c9ae:	60a5      	str	r5, [r4, #8]
    new_task->once     = 0;
 800c9b0:	7423      	strb	r3, [r4, #16]
    new_task->last_run = lv_tick_get();
 800c9b2:	f7ff fa9b 	bl	800beec <lv_tick_get>
    task_created = true;
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	4b04      	ldr	r3, [pc, #16]	; (800c9cc <lv_task_create_basic+0x78>)
    new_task->last_run = lv_tick_get();
 800c9ba:	6060      	str	r0, [r4, #4]
    new_task->user_data = NULL;
 800c9bc:	60e5      	str	r5, [r4, #12]
}
 800c9be:	0020      	movs	r0, r4
    task_created = true;
 800c9c0:	701a      	strb	r2, [r3, #0]
}
 800c9c2:	bd70      	pop	{r4, r5, r6, pc}
 800c9c4:	e7fe      	b.n	800c9c4 <lv_task_create_basic+0x70>
 800c9c6:	46c0      	nop			; (mov r8, r8)
 800c9c8:	2000540c 	.word	0x2000540c
 800c9cc:	2000467d 	.word	0x2000467d

0800c9d0 <lv_task_del>:
{
 800c9d0:	b510      	push	{r4, lr}
 800c9d2:	0004      	movs	r4, r0
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
 800c9d4:	0001      	movs	r1, r0
 800c9d6:	4807      	ldr	r0, [pc, #28]	; (800c9f4 <lv_task_del+0x24>)
 800c9d8:	f7ff fe1c 	bl	800c614 <lv_ll_rem>
    lv_mem_free(task);
 800c9dc:	0020      	movs	r0, r4
 800c9de:	f7ff ff53 	bl	800c888 <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 800c9e2:	4b05      	ldr	r3, [pc, #20]	; (800c9f8 <lv_task_del+0x28>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	429c      	cmp	r4, r3
 800c9e8:	d102      	bne.n	800c9f0 <lv_task_del+0x20>
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	4b03      	ldr	r3, [pc, #12]	; (800c9fc <lv_task_del+0x2c>)
 800c9ee:	701a      	strb	r2, [r3, #0]
}
 800c9f0:	bd10      	pop	{r4, pc}
 800c9f2:	46c0      	nop			; (mov r8, r8)
 800c9f4:	2000540c 	.word	0x2000540c
 800c9f8:	2000544c 	.word	0x2000544c
 800c9fc:	2000467e 	.word	0x2000467e

0800ca00 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
 800ca00:	b570      	push	{r4, r5, r6, lr}
 800ca02:	0004      	movs	r4, r0
    bool exec = false;

    /*Execute if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
 800ca04:	6840      	ldr	r0, [r0, #4]
 800ca06:	f7ff fa7f 	bl	800bf08 <lv_tick_elaps>
    if(elp >= task->period) {
 800ca0a:	6823      	ldr	r3, [r4, #0]
    bool exec = false;
 800ca0c:	2500      	movs	r5, #0
    if(elp >= task->period) {
 800ca0e:	4298      	cmp	r0, r3
 800ca10:	d315      	bcc.n	800ca3e <lv_task_exec+0x3e>
        task->last_run = lv_tick_get();
 800ca12:	f7ff fa6b 	bl	800beec <lv_tick_get>
        task_deleted   = false;
        task_created   = false;
 800ca16:	4b0b      	ldr	r3, [pc, #44]	; (800ca44 <lv_task_exec+0x44>)
        task_deleted   = false;
 800ca18:	4e0b      	ldr	r6, [pc, #44]	; (800ca48 <lv_task_exec+0x48>)
        task_created   = false;
 800ca1a:	701d      	strb	r5, [r3, #0]
        if(task->task_cb) task->task_cb(task);
 800ca1c:	68a3      	ldr	r3, [r4, #8]
        task->last_run = lv_tick_get();
 800ca1e:	6060      	str	r0, [r4, #4]
        task_deleted   = false;
 800ca20:	7035      	strb	r5, [r6, #0]
        if(task->task_cb) task->task_cb(task);
 800ca22:	42ab      	cmp	r3, r5
 800ca24:	d001      	beq.n	800ca2a <lv_task_exec+0x2a>
 800ca26:	0020      	movs	r0, r4
 800ca28:	4798      	blx	r3

        /*Delete if it was a one shot lv_task*/
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
 800ca2a:	7835      	ldrb	r5, [r6, #0]
 800ca2c:	2d00      	cmp	r5, #0
 800ca2e:	d106      	bne.n	800ca3e <lv_task_exec+0x3e>
            if(task->once != 0) {
 800ca30:	7c23      	ldrb	r3, [r4, #16]
                lv_task_del(task);
            }
        }
        exec = true;
 800ca32:	3501      	adds	r5, #1
            if(task->once != 0) {
 800ca34:	071b      	lsls	r3, r3, #28
 800ca36:	d502      	bpl.n	800ca3e <lv_task_exec+0x3e>
                lv_task_del(task);
 800ca38:	0020      	movs	r0, r4
 800ca3a:	f7ff ffc9 	bl	800c9d0 <lv_task_del>
    }

    return exec;
}
 800ca3e:	0028      	movs	r0, r5
 800ca40:	bd70      	pop	{r4, r5, r6, pc}
 800ca42:	46c0      	nop			; (mov r8, r8)
 800ca44:	2000467d 	.word	0x2000467d
 800ca48:	2000467e 	.word	0x2000467e

0800ca4c <lv_task_handler>:
{
 800ca4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(task_handler_mutex) return;
 800ca4e:	4f38      	ldr	r7, [pc, #224]	; (800cb30 <lv_task_handler+0xe4>)
 800ca50:	783c      	ldrb	r4, [r7, #0]
 800ca52:	2c00      	cmp	r4, #0
 800ca54:	d107      	bne.n	800ca66 <lv_task_handler+0x1a>
    task_handler_mutex = true;
 800ca56:	2301      	movs	r3, #1
 800ca58:	703b      	strb	r3, [r7, #0]
    if(lv_task_run == false) {
 800ca5a:	4b36      	ldr	r3, [pc, #216]	; (800cb34 <lv_task_handler+0xe8>)
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d102      	bne.n	800ca68 <lv_task_handler+0x1c>
        task_handler_mutex = false; /*Release mutex*/
 800ca62:	2300      	movs	r3, #0
 800ca64:	703b      	strb	r3, [r7, #0]
}
 800ca66:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    handler_start = lv_tick_get();
 800ca68:	f7ff fa40 	bl	800beec <lv_tick_get>
 800ca6c:	4e32      	ldr	r6, [pc, #200]	; (800cb38 <lv_task_handler+0xec>)
 800ca6e:	6030      	str	r0, [r6, #0]
        task_deleted             = false;
 800ca70:	2300      	movs	r3, #0
 800ca72:	4a32      	ldr	r2, [pc, #200]	; (800cb3c <lv_task_handler+0xf0>)
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800ca74:	4832      	ldr	r0, [pc, #200]	; (800cb40 <lv_task_handler+0xf4>)
        task_deleted             = false;
 800ca76:	7013      	strb	r3, [r2, #0]
        task_created             = false;
 800ca78:	4a32      	ldr	r2, [pc, #200]	; (800cb44 <lv_task_handler+0xf8>)
 800ca7a:	7013      	strb	r3, [r2, #0]
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 800ca7c:	f7ff fd75 	bl	800c56a <lv_ll_get_head>
 800ca80:	4b31      	ldr	r3, [pc, #196]	; (800cb48 <lv_task_handler+0xfc>)
 800ca82:	6018      	str	r0, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 800ca84:	4d30      	ldr	r5, [pc, #192]	; (800cb48 <lv_task_handler+0xfc>)
 800ca86:	6829      	ldr	r1, [r5, #0]
 800ca88:	2900      	cmp	r1, #0
 800ca8a:	d123      	bne.n	800cad4 <lv_task_handler+0x88>
    busy_time += lv_tick_elaps(handler_start);
 800ca8c:	6830      	ldr	r0, [r6, #0]
 800ca8e:	f7ff fa3b 	bl	800bf08 <lv_tick_elaps>
 800ca92:	4c2e      	ldr	r4, [pc, #184]	; (800cb4c <lv_task_handler+0x100>)
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 800ca94:	4e2e      	ldr	r6, [pc, #184]	; (800cb50 <lv_task_handler+0x104>)
    busy_time += lv_tick_elaps(handler_start);
 800ca96:	6823      	ldr	r3, [r4, #0]
 800ca98:	1818      	adds	r0, r3, r0
 800ca9a:	6020      	str	r0, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 800ca9c:	6830      	ldr	r0, [r6, #0]
 800ca9e:	f7ff fa33 	bl	800bf08 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 800caa2:	23f4      	movs	r3, #244	; 0xf4
 800caa4:	33ff      	adds	r3, #255	; 0xff
 800caa6:	4298      	cmp	r0, r3
 800caa8:	d9db      	bls.n	800ca62 <lv_task_handler+0x16>
        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
 800caaa:	2564      	movs	r5, #100	; 0x64
 800caac:	21fa      	movs	r1, #250	; 0xfa
 800caae:	6820      	ldr	r0, [r4, #0]
 800cab0:	0049      	lsls	r1, r1, #1
 800cab2:	4368      	muls	r0, r5
 800cab4:	f7f3 fb54 	bl	8000160 <__udivsi3>
 800cab8:	b2c0      	uxtb	r0, r0
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
 800caba:	2300      	movs	r3, #0
 800cabc:	42a8      	cmp	r0, r5
 800cabe:	d801      	bhi.n	800cac4 <lv_task_handler+0x78>
 800cac0:	1a2d      	subs	r5, r5, r0
 800cac2:	b2eb      	uxtb	r3, r5
 800cac4:	4a23      	ldr	r2, [pc, #140]	; (800cb54 <lv_task_handler+0x108>)
 800cac6:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 800cac8:	2300      	movs	r3, #0
 800caca:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
 800cacc:	f7ff fa0e 	bl	800beec <lv_tick_get>
 800cad0:	6030      	str	r0, [r6, #0]
 800cad2:	e7c6      	b.n	800ca62 <lv_task_handler+0x16>
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 800cad4:	481a      	ldr	r0, [pc, #104]	; (800cb40 <lv_task_handler+0xf4>)
 800cad6:	f7ff fd50 	bl	800c57a <lv_ll_get_next>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
 800cada:	2207      	movs	r2, #7
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 800cadc:	9001      	str	r0, [sp, #4]
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
 800cade:	6828      	ldr	r0, [r5, #0]
 800cae0:	7c03      	ldrb	r3, [r0, #16]
 800cae2:	401a      	ands	r2, r3
 800cae4:	d0d2      	beq.n	800ca8c <lv_task_handler+0x40>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 800cae6:	4284      	cmp	r4, r0
 800cae8:	d103      	bne.n	800caf2 <lv_task_handler+0xa6>
                LV_GC_ROOT(_lv_task_act) = next;
 800caea:	9b01      	ldr	r3, [sp, #4]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
 800caec:	2400      	movs	r4, #0
                LV_GC_ROOT(_lv_task_act) = next;
 800caee:	602b      	str	r3, [r5, #0]
                continue; /*Load the next task*/
 800caf0:	e7c8      	b.n	800ca84 <lv_task_handler+0x38>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
 800caf2:	2a05      	cmp	r2, #5
 800caf4:	d10d      	bne.n	800cb12 <lv_task_handler+0xc6>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 800caf6:	f7ff ff83 	bl	800ca00 <lv_task_exec>
            if(task_deleted) break; /*If a task was deleted then this or the next item might be corrupted*/
 800cafa:	4b10      	ldr	r3, [pc, #64]	; (800cb3c <lv_task_handler+0xf0>)
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d1c4      	bne.n	800ca8c <lv_task_handler+0x40>
            if(task_created) break; /*If a task was created then this or the next item might be corrupted*/
 800cb02:	4b10      	ldr	r3, [pc, #64]	; (800cb44 <lv_task_handler+0xf8>)
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d1c0      	bne.n	800ca8c <lv_task_handler+0x40>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
 800cb0a:	4b0f      	ldr	r3, [pc, #60]	; (800cb48 <lv_task_handler+0xfc>)
 800cb0c:	9a01      	ldr	r2, [sp, #4]
 800cb0e:	601a      	str	r2, [r3, #0]
 800cb10:	e7b8      	b.n	800ca84 <lv_task_handler+0x38>
            else if(task_interrupter) {
 800cb12:	2c00      	cmp	r4, #0
 800cb14:	d006      	beq.n	800cb24 <lv_task_handler+0xd8>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
 800cb16:	7c22      	ldrb	r2, [r4, #16]
 800cb18:	075b      	lsls	r3, r3, #29
 800cb1a:	0752      	lsls	r2, r2, #29
 800cb1c:	0f5b      	lsrs	r3, r3, #29
 800cb1e:	0f52      	lsrs	r2, r2, #29
 800cb20:	4293      	cmp	r3, r2
 800cb22:	ddea      	ble.n	800cafa <lv_task_handler+0xae>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 800cb24:	f7ff ff6c 	bl	800ca00 <lv_task_exec>
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	d0e6      	beq.n	800cafa <lv_task_handler+0xae>
                    task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
 800cb2c:	682c      	ldr	r4, [r5, #0]
                    break;
 800cb2e:	e79f      	b.n	800ca70 <lv_task_handler+0x24>
 800cb30:	2000467f 	.word	0x2000467f
 800cb34:	2000467c 	.word	0x2000467c
 800cb38:	20004670 	.word	0x20004670
 800cb3c:	2000467e 	.word	0x2000467e
 800cb40:	2000540c 	.word	0x2000540c
 800cb44:	2000467d 	.word	0x2000467d
 800cb48:	2000544c 	.word	0x2000544c
 800cb4c:	2000466c 	.word	0x2000466c
 800cb50:	20004678 	.word	0x20004678
 800cb54:	20004674 	.word	0x20004674

0800cb58 <lv_task_set_prio>:
    if(task->prio == prio) return;
 800cb58:	7c03      	ldrb	r3, [r0, #16]
{
 800cb5a:	b570      	push	{r4, r5, r6, lr}
    if(task->prio == prio) return;
 800cb5c:	075b      	lsls	r3, r3, #29
{
 800cb5e:	0004      	movs	r4, r0
 800cb60:	000d      	movs	r5, r1
    if(task->prio == prio) return;
 800cb62:	0f5b      	lsrs	r3, r3, #29
 800cb64:	428b      	cmp	r3, r1
 800cb66:	d017      	beq.n	800cb98 <lv_task_set_prio+0x40>
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 800cb68:	4e0e      	ldr	r6, [pc, #56]	; (800cba4 <lv_task_set_prio+0x4c>)
 800cb6a:	0030      	movs	r0, r6
 800cb6c:	f7ff fcfd 	bl	800c56a <lv_ll_get_head>
 800cb70:	1e02      	subs	r2, r0, #0
 800cb72:	d006      	beq.n	800cb82 <lv_task_set_prio+0x2a>
        if(i->prio <= prio) {
 800cb74:	7c13      	ldrb	r3, [r2, #16]
 800cb76:	075b      	lsls	r3, r3, #29
 800cb78:	0f5b      	lsrs	r3, r3, #29
 800cb7a:	429d      	cmp	r5, r3
 800cb7c:	db0d      	blt.n	800cb9a <lv_task_set_prio+0x42>
            if(i != task) lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 800cb7e:	42a2      	cmp	r2, r4
 800cb80:	d003      	beq.n	800cb8a <lv_task_set_prio+0x32>
        lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 800cb82:	0021      	movs	r1, r4
 800cb84:	0030      	movs	r0, r6
 800cb86:	f7ff fdb4 	bl	800c6f2 <lv_ll_move_before>
    task->prio = prio;
 800cb8a:	2307      	movs	r3, #7
 800cb8c:	002a      	movs	r2, r5
 800cb8e:	7c25      	ldrb	r5, [r4, #16]
 800cb90:	401a      	ands	r2, r3
 800cb92:	439d      	bics	r5, r3
 800cb94:	4315      	orrs	r5, r2
 800cb96:	7425      	strb	r5, [r4, #16]
}
 800cb98:	bd70      	pop	{r4, r5, r6, pc}
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 800cb9a:	0011      	movs	r1, r2
 800cb9c:	0030      	movs	r0, r6
 800cb9e:	f7ff fcec 	bl	800c57a <lv_ll_get_next>
 800cba2:	e7e5      	b.n	800cb70 <lv_task_set_prio+0x18>
 800cba4:	2000540c 	.word	0x2000540c

0800cba8 <lv_task_create>:
{
 800cba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbaa:	0007      	movs	r7, r0
 800cbac:	000e      	movs	r6, r1
 800cbae:	0015      	movs	r5, r2
 800cbb0:	9301      	str	r3, [sp, #4]
    lv_task_t * new_task = lv_task_create_basic();
 800cbb2:	f7ff fecf 	bl	800c954 <lv_task_create_basic>
 800cbb6:	1e04      	subs	r4, r0, #0
    lv_mem_assert(new_task);
 800cbb8:	d100      	bne.n	800cbbc <lv_task_create+0x14>
 800cbba:	e7fe      	b.n	800cbba <lv_task_create+0x12>
    task->task_cb = task_cb;
 800cbbc:	6087      	str	r7, [r0, #8]
    task->period = period;
 800cbbe:	6006      	str	r6, [r0, #0]
    lv_task_set_prio(new_task, prio);
 800cbc0:	0029      	movs	r1, r5
 800cbc2:	f7ff ffc9 	bl	800cb58 <lv_task_set_prio>
    new_task->user_data = user_data;
 800cbc6:	9b01      	ldr	r3, [sp, #4]
}
 800cbc8:	0020      	movs	r0, r4
    new_task->user_data = user_data;
 800cbca:	60e3      	str	r3, [r4, #12]
}
 800cbcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800cbce <lv_task_ready>:
{
 800cbce:	b510      	push	{r4, lr}
 800cbd0:	0004      	movs	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
 800cbd2:	f7ff f98b 	bl	800beec <lv_tick_get>
 800cbd6:	6823      	ldr	r3, [r4, #0]
 800cbd8:	43db      	mvns	r3, r3
 800cbda:	1818      	adds	r0, r3, r0
 800cbdc:	6060      	str	r0, [r4, #4]
}
 800cbde:	bd10      	pop	{r4, pc}

0800cbe0 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
 800cbe0:	7803      	ldrb	r3, [r0, #0]
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
        return 4;
    return 1; /*If the char was invalid step tell it's 1 byte long*/
 800cbe2:	2001      	movs	r0, #1
    if((str[0] & 0x80) == 0)
 800cbe4:	b25a      	sxtb	r2, r3
 800cbe6:	2a00      	cmp	r2, #0
 800cbe8:	da11      	bge.n	800cc0e <lv_txt_utf8_size+0x2e>
    else if((str[0] & 0xE0) == 0xC0)
 800cbea:	221f      	movs	r2, #31
 800cbec:	0019      	movs	r1, r3
        return 2;
 800cbee:	1800      	adds	r0, r0, r0
    else if((str[0] & 0xE0) == 0xC0)
 800cbf0:	4391      	bics	r1, r2
 800cbf2:	29c0      	cmp	r1, #192	; 0xc0
 800cbf4:	d00b      	beq.n	800cc0e <lv_txt_utf8_size+0x2e>
    else if((str[0] & 0xF0) == 0xE0)
 800cbf6:	220f      	movs	r2, #15
 800cbf8:	0019      	movs	r1, r3
        return 3;
 800cbfa:	3001      	adds	r0, #1
    else if((str[0] & 0xF0) == 0xE0)
 800cbfc:	4391      	bics	r1, r2
 800cbfe:	29e0      	cmp	r1, #224	; 0xe0
 800cc00:	d005      	beq.n	800cc0e <lv_txt_utf8_size+0x2e>
    else if((str[0] & 0xF8) == 0xF0)
 800cc02:	2207      	movs	r2, #7
    return 1; /*If the char was invalid step tell it's 1 byte long*/
 800cc04:	3802      	subs	r0, #2
    else if((str[0] & 0xF8) == 0xF0)
 800cc06:	4393      	bics	r3, r2
 800cc08:	2bf0      	cmp	r3, #240	; 0xf0
 800cc0a:	d100      	bne.n	800cc0e <lv_txt_utf8_size+0x2e>
        return 4;
 800cc0c:	3003      	adds	r0, #3
}
 800cc0e:	4770      	bx	lr

0800cc10 <lv_txt_utf8_next>:
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 800cc10:	2300      	movs	r3, #0
{
 800cc12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t i_tmp = 0;
 800cc14:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 800cc16:	4299      	cmp	r1, r3
 800cc18:	d100      	bne.n	800cc1c <lv_txt_utf8_next+0xc>
 800cc1a:	a901      	add	r1, sp, #4

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 800cc1c:	680a      	ldr	r2, [r1, #0]
 800cc1e:	5c84      	ldrb	r4, [r0, r2]
 800cc20:	1c53      	adds	r3, r2, #1
 800cc22:	b265      	sxtb	r5, r4
 800cc24:	2d00      	cmp	r5, #0
 800cc26:	db02      	blt.n	800cc2e <lv_txt_utf8_next+0x1e>
        result = txt[*i];
 800cc28:	0020      	movs	r0, r4
        (*i)++;
 800cc2a:	600b      	str	r3, [r1, #0]
        } else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 800cc2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if((txt[*i] & 0xE0) == 0xC0) {
 800cc2e:	251f      	movs	r5, #31
 800cc30:	0026      	movs	r6, r4
 800cc32:	43ae      	bics	r6, r5
 800cc34:	0035      	movs	r5, r6
 800cc36:	2ec0      	cmp	r6, #192	; 0xc0
 800cc38:	d111      	bne.n	800cc5e <lv_txt_utf8_next+0x4e>
            (*i)++;
 800cc3a:	600b      	str	r3, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800cc3c:	5cc3      	ldrb	r3, [r0, r3]
 800cc3e:	3d81      	subs	r5, #129	; 0x81
 800cc40:	0018      	movs	r0, r3
 800cc42:	43a8      	bics	r0, r5
 800cc44:	2880      	cmp	r0, #128	; 0x80
 800cc46:	d001      	beq.n	800cc4c <lv_txt_utf8_next+0x3c>
    uint32_t result = 0;
 800cc48:	2000      	movs	r0, #0
 800cc4a:	e7ef      	b.n	800cc2c <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 800cc4c:	01a0      	lsls	r0, r4, #6
 800cc4e:	24f8      	movs	r4, #248	; 0xf8
 800cc50:	00e4      	lsls	r4, r4, #3
 800cc52:	4004      	ands	r4, r0
            result += (txt[*i] & 0x3F);
 800cc54:	402b      	ands	r3, r5
 800cc56:	1918      	adds	r0, r3, r4
            (*i)++;
 800cc58:	3202      	adds	r2, #2
            (*i)++;
 800cc5a:	600a      	str	r2, [r1, #0]
 800cc5c:	e7e6      	b.n	800cc2c <lv_txt_utf8_next+0x1c>
        else if((txt[*i] & 0xF0) == 0xE0) {
 800cc5e:	250f      	movs	r5, #15
 800cc60:	0026      	movs	r6, r4
 800cc62:	43ae      	bics	r6, r5
 800cc64:	2ee0      	cmp	r6, #224	; 0xe0
 800cc66:	d119      	bne.n	800cc9c <lv_txt_utf8_next+0x8c>
            (*i)++;
 800cc68:	600b      	str	r3, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800cc6a:	5cc3      	ldrb	r3, [r0, r3]
 800cc6c:	263f      	movs	r6, #63	; 0x3f
 800cc6e:	001d      	movs	r5, r3
 800cc70:	43b5      	bics	r5, r6
 800cc72:	2d80      	cmp	r5, #128	; 0x80
 800cc74:	d1e8      	bne.n	800cc48 <lv_txt_utf8_next+0x38>
            (*i)++;
 800cc76:	1c95      	adds	r5, r2, #2
 800cc78:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800cc7a:	5d45      	ldrb	r5, [r0, r5]
 800cc7c:	0028      	movs	r0, r5
 800cc7e:	43b0      	bics	r0, r6
 800cc80:	2880      	cmp	r0, #128	; 0x80
 800cc82:	d1e1      	bne.n	800cc48 <lv_txt_utf8_next+0x38>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 800cc84:	0720      	lsls	r0, r4, #28
            result += (txt[*i] & 0x3F);
 800cc86:	002c      	movs	r4, r5
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 800cc88:	0c00      	lsrs	r0, r0, #16
            result += (txt[*i] & 0x3F);
 800cc8a:	4034      	ands	r4, r6
 800cc8c:	1904      	adds	r4, r0, r4
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 800cc8e:	0198      	lsls	r0, r3, #6
 800cc90:	23fc      	movs	r3, #252	; 0xfc
 800cc92:	011b      	lsls	r3, r3, #4
 800cc94:	4018      	ands	r0, r3
            result += (txt[*i] & 0x3F);
 800cc96:	1900      	adds	r0, r0, r4
            (*i)++;
 800cc98:	3203      	adds	r2, #3
 800cc9a:	e7de      	b.n	800cc5a <lv_txt_utf8_next+0x4a>
        else if((txt[*i] & 0xF8) == 0xF0) {
 800cc9c:	2507      	movs	r5, #7
 800cc9e:	0026      	movs	r6, r4
            (*i)++;
 800cca0:	600b      	str	r3, [r1, #0]
        else if((txt[*i] & 0xF8) == 0xF0) {
 800cca2:	43ae      	bics	r6, r5
 800cca4:	2ef0      	cmp	r6, #240	; 0xf0
 800cca6:	d1cf      	bne.n	800cc48 <lv_txt_utf8_next+0x38>
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800cca8:	5cc7      	ldrb	r7, [r0, r3]
 800ccaa:	263f      	movs	r6, #63	; 0x3f
 800ccac:	003b      	movs	r3, r7
 800ccae:	43b3      	bics	r3, r6
 800ccb0:	2b80      	cmp	r3, #128	; 0x80
 800ccb2:	d1c9      	bne.n	800cc48 <lv_txt_utf8_next+0x38>
            (*i)++;
 800ccb4:	1c93      	adds	r3, r2, #2
 800ccb6:	600b      	str	r3, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800ccb8:	5cc3      	ldrb	r3, [r0, r3]
 800ccba:	001d      	movs	r5, r3
 800ccbc:	43b5      	bics	r5, r6
 800ccbe:	2d80      	cmp	r5, #128	; 0x80
 800ccc0:	d1c2      	bne.n	800cc48 <lv_txt_utf8_next+0x38>
            (*i)++;
 800ccc2:	1cd5      	adds	r5, r2, #3
 800ccc4:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 800ccc6:	5d45      	ldrb	r5, [r0, r5]
 800ccc8:	0028      	movs	r0, r5
 800ccca:	43b0      	bics	r0, r6
 800cccc:	2880      	cmp	r0, #128	; 0x80
 800ccce:	d1bb      	bne.n	800cc48 <lv_txt_utf8_next+0x38>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 800ccd0:	20e0      	movs	r0, #224	; 0xe0
 800ccd2:	04a4      	lsls	r4, r4, #18
 800ccd4:	0340      	lsls	r0, r0, #13
 800ccd6:	4004      	ands	r4, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 800ccd8:	20fc      	movs	r0, #252	; 0xfc
 800ccda:	033f      	lsls	r7, r7, #12
 800ccdc:	0280      	lsls	r0, r0, #10
 800ccde:	4038      	ands	r0, r7
 800cce0:	4304      	orrs	r4, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 800cce2:	20fc      	movs	r0, #252	; 0xfc
 800cce4:	019b      	lsls	r3, r3, #6
 800cce6:	0100      	lsls	r0, r0, #4
 800cce8:	4018      	ands	r0, r3
            result += txt[*i] & 0x3F;
 800ccea:	4035      	ands	r5, r6
 800ccec:	1940      	adds	r0, r0, r5
 800ccee:	1900      	adds	r0, r0, r4
            (*i)++;
 800ccf0:	3204      	adds	r2, #4
 800ccf2:	e7b2      	b.n	800cc5a <lv_txt_utf8_next+0x4a>

0800ccf4 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 800ccf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
 800ccf6:	2400      	movs	r4, #0
{
 800ccf8:	0007      	movs	r7, r0
 800ccfa:	000e      	movs	r6, r1
    for(i = 0; i < utf8_id; i++) {
 800ccfc:	0025      	movs	r5, r4
 800ccfe:	42b5      	cmp	r5, r6
 800cd00:	d101      	bne.n	800cd06 <lv_txt_utf8_get_byte_id+0x12>
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
    }

    return byte_cnt;
}
 800cd02:	0020      	movs	r0, r4
 800cd04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 800cd06:	4b03      	ldr	r3, [pc, #12]	; (800cd14 <lv_txt_utf8_get_byte_id+0x20>)
 800cd08:	1938      	adds	r0, r7, r4
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4798      	blx	r3
    for(i = 0; i < utf8_id; i++) {
 800cd0e:	3501      	adds	r5, #1
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 800cd10:	1824      	adds	r4, r4, r0
 800cd12:	e7f4      	b.n	800ccfe <lv_txt_utf8_get_byte_id+0xa>
 800cd14:	20000050 	.word	0x20000050

0800cd18 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 800cd18:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t i        = 0;
 800cd1a:	2400      	movs	r4, #0
{
 800cd1c:	0006      	movs	r6, r0
 800cd1e:	000d      	movs	r5, r1
    uint32_t i        = 0;
 800cd20:	9401      	str	r4, [sp, #4]
    uint32_t char_cnt = 0;

    while(i < byte_id) {
 800cd22:	9b01      	ldr	r3, [sp, #4]
 800cd24:	42ab      	cmp	r3, r5
 800cd26:	d301      	bcc.n	800cd2c <lv_txt_utf8_get_char_id+0x14>
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
        char_cnt++;
    }

    return char_cnt;
}
 800cd28:	0020      	movs	r0, r4
 800cd2a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 800cd2c:	4b03      	ldr	r3, [pc, #12]	; (800cd3c <lv_txt_utf8_get_char_id+0x24>)
 800cd2e:	a901      	add	r1, sp, #4
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	0030      	movs	r0, r6
 800cd34:	4798      	blx	r3
        char_cnt++;
 800cd36:	3401      	adds	r4, #1
 800cd38:	e7f3      	b.n	800cd22 <lv_txt_utf8_get_char_id+0xa>
 800cd3a:	46c0      	nop			; (mov r8, r8)
 800cd3c:	20000048 	.word	0x20000048

0800cd40 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 800cd40:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t len = 0;
    uint32_t i   = 0;
 800cd42:	2400      	movs	r4, #0
{
 800cd44:	0005      	movs	r5, r0
    uint32_t i   = 0;
 800cd46:	9401      	str	r4, [sp, #4]

    while(txt[i] != '\0') {
 800cd48:	9b01      	ldr	r3, [sp, #4]
 800cd4a:	5ceb      	ldrb	r3, [r5, r3]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d101      	bne.n	800cd54 <lv_txt_utf8_get_length+0x14>
        lv_txt_encoded_next(txt, &i);
        len++;
    }

    return len;
}
 800cd50:	0020      	movs	r0, r4
 800cd52:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        lv_txt_encoded_next(txt, &i);
 800cd54:	4b03      	ldr	r3, [pc, #12]	; (800cd64 <lv_txt_utf8_get_length+0x24>)
 800cd56:	a901      	add	r1, sp, #4
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	0028      	movs	r0, r5
 800cd5c:	4798      	blx	r3
        len++;
 800cd5e:	3401      	adds	r4, #1
 800cd60:	e7f2      	b.n	800cd48 <lv_txt_utf8_get_length+0x8>
 800cd62:	46c0      	nop			; (mov r8, r8)
 800cd64:	20000048 	.word	0x20000048

0800cd68 <lv_txt_utf8_prev>:
{
 800cd68:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd6a:	0006      	movs	r6, r0
 800cd6c:	000d      	movs	r5, r1
    (*i)--;
 800cd6e:	2404      	movs	r4, #4
 800cd70:	680b      	ldr	r3, [r1, #0]
 800cd72:	3b01      	subs	r3, #1
 800cd74:	600b      	str	r3, [r1, #0]
        c_size = lv_txt_encoded_size(&txt[*i]);
 800cd76:	682b      	ldr	r3, [r5, #0]
 800cd78:	18f0      	adds	r0, r6, r3
 800cd7a:	4b0b      	ldr	r3, [pc, #44]	; (800cda8 <lv_txt_utf8_prev+0x40>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	4798      	blx	r3
 800cd80:	682b      	ldr	r3, [r5, #0]
        if(c_size == 0) {
 800cd82:	2800      	cmp	r0, #0
 800cd84:	d109      	bne.n	800cd9a <lv_txt_utf8_prev+0x32>
            if(*i != 0)
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d005      	beq.n	800cd96 <lv_txt_utf8_prev+0x2e>
 800cd8a:	3c01      	subs	r4, #1
                (*i)--;
 800cd8c:	3b01      	subs	r3, #1
 800cd8e:	b2e4      	uxtb	r4, r4
 800cd90:	602b      	str	r3, [r5, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 800cd92:	2c00      	cmp	r4, #0
 800cd94:	d1ef      	bne.n	800cd76 <lv_txt_utf8_prev+0xe>
 800cd96:	2000      	movs	r0, #0
}
 800cd98:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    uint32_t i_tmp  = *i;
 800cd9a:	9301      	str	r3, [sp, #4]
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 800cd9c:	4b03      	ldr	r3, [pc, #12]	; (800cdac <lv_txt_utf8_prev+0x44>)
 800cd9e:	a901      	add	r1, sp, #4
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	0030      	movs	r0, r6
 800cda4:	4798      	blx	r3
 800cda6:	e7f7      	b.n	800cd98 <lv_txt_utf8_prev+0x30>
 800cda8:	20000050 	.word	0x20000050
 800cdac:	20000048 	.word	0x20000048

0800cdb0 <lv_txt_is_cmd>:
{
 800cdb0:	0002      	movs	r2, r0
    bool ret = false;
 800cdb2:	2000      	movs	r0, #0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800cdb4:	2923      	cmp	r1, #35	; 0x23
 800cdb6:	d104      	bne.n	800cdc2 <lv_txt_is_cmd+0x12>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 800cdb8:	7813      	ldrb	r3, [r2, #0]
 800cdba:	4283      	cmp	r3, r0
 800cdbc:	d10a      	bne.n	800cdd4 <lv_txt_is_cmd+0x24>
            *state = LV_TXT_CMD_STATE_PAR;
 800cdbe:	3001      	adds	r0, #1
            *state = LV_TXT_CMD_STATE_WAIT;
 800cdc0:	7010      	strb	r0, [r2, #0]
    if(*state == LV_TXT_CMD_STATE_PAR) {
 800cdc2:	7813      	ldrb	r3, [r2, #0]
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d104      	bne.n	800cdd2 <lv_txt_is_cmd+0x22>
        ret = true;
 800cdc8:	0018      	movs	r0, r3
        if(c == ' ') {
 800cdca:	2920      	cmp	r1, #32
 800cdcc:	d101      	bne.n	800cdd2 <lv_txt_is_cmd+0x22>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 800cdce:	3301      	adds	r3, #1
 800cdd0:	7013      	strb	r3, [r2, #0]
}
 800cdd2:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_PAR) {
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d0f3      	beq.n	800cdc0 <lv_txt_is_cmd+0x10>
        else if(*state == LV_TXT_CMD_STATE_IN) {
 800cdd8:	2b02      	cmp	r3, #2
 800cdda:	d1f2      	bne.n	800cdc2 <lv_txt_is_cmd+0x12>
            *state = LV_TXT_CMD_STATE_WAIT;
 800cddc:	7010      	strb	r0, [r2, #0]
            ret    = true;
 800cdde:	2001      	movs	r0, #1
 800cde0:	e7ef      	b.n	800cdc2 <lv_txt_is_cmd+0x12>
	...

0800cde4 <lv_txt_get_next_line>:
{
 800cde4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cde6:	b08b      	sub	sp, #44	; 0x2c
 800cde8:	9303      	str	r3, [sp, #12]
 800cdea:	ab10      	add	r3, sp, #64	; 0x40
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	1e05      	subs	r5, r0, #0
 800cdf0:	9101      	str	r1, [sp, #4]
 800cdf2:	9205      	str	r2, [sp, #20]
 800cdf4:	9304      	str	r3, [sp, #16]
    if(txt == NULL) return 0;
 800cdf6:	d03a      	beq.n	800ce6e <lv_txt_get_next_line+0x8a>
 800cdf8:	1e08      	subs	r0, r1, #0
    if(font == NULL) return 0;
 800cdfa:	d038      	beq.n	800ce6e <lv_txt_get_next_line+0x8a>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800cdfc:	9b04      	ldr	r3, [sp, #16]
 800cdfe:	079b      	lsls	r3, r3, #30
 800ce00:	d501      	bpl.n	800ce06 <lv_txt_get_next_line+0x22>
 800ce02:	4b37      	ldr	r3, [pc, #220]	; (800cee0 <lv_txt_get_next_line+0xfc>)
 800ce04:	9303      	str	r3, [sp, #12]
    uint32_t i                   = 0;
 800ce06:	2400      	movs	r4, #0
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800ce08:	ab06      	add	r3, sp, #24
 800ce0a:	71dc      	strb	r4, [r3, #7]
    letter_next = lv_txt_encoded_next(txt, &i_next);
 800ce0c:	4b35      	ldr	r3, [pc, #212]	; (800cee4 <lv_txt_get_next_line+0x100>)
    uint32_t i                   = 0;
 800ce0e:	9408      	str	r4, [sp, #32]
    letter_next = lv_txt_encoded_next(txt, &i_next);
 800ce10:	681b      	ldr	r3, [r3, #0]
    uint32_t i_next              = 0;
 800ce12:	9409      	str	r4, [sp, #36]	; 0x24
    letter_next = lv_txt_encoded_next(txt, &i_next);
 800ce14:	a909      	add	r1, sp, #36	; 0x24
 800ce16:	0028      	movs	r0, r5
 800ce18:	4798      	blx	r3
    uint32_t last_break          = NO_BREAK_FOUND;
 800ce1a:	2301      	movs	r3, #1
    letter_next = lv_txt_encoded_next(txt, &i_next);
 800ce1c:	0006      	movs	r6, r0
    uint32_t last_break          = NO_BREAK_FOUND;
 800ce1e:	425b      	negs	r3, r3
 800ce20:	9300      	str	r3, [sp, #0]
    while(txt[i] != '\0') {
 800ce22:	9808      	ldr	r0, [sp, #32]
 800ce24:	5c2b      	ldrb	r3, [r5, r0]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d101      	bne.n	800ce2e <lv_txt_get_next_line+0x4a>
    return i;
 800ce2a:	b280      	uxth	r0, r0
 800ce2c:	e01f      	b.n	800ce6e <lv_txt_get_next_line+0x8a>
        i           = i_next;
 800ce2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
        letter_next = lv_txt_encoded_next(txt, &i_next);
 800ce30:	a909      	add	r1, sp, #36	; 0x24
        i           = i_next;
 800ce32:	9308      	str	r3, [sp, #32]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 800ce34:	4b2b      	ldr	r3, [pc, #172]	; (800cee4 <lv_txt_get_next_line+0x100>)
 800ce36:	0028      	movs	r0, r5
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4798      	blx	r3
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	9b04      	ldr	r3, [sp, #16]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 800ce40:	0007      	movs	r7, r0
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800ce42:	4213      	tst	r3, r2
 800ce44:	d104      	bne.n	800ce50 <lv_txt_get_next_line+0x6c>
        if(letter == '\n' || letter == '\r') {
 800ce46:	2e0a      	cmp	r6, #10
 800ce48:	d10b      	bne.n	800ce62 <lv_txt_get_next_line+0x7e>
                return i;
 800ce4a:	ab06      	add	r3, sp, #24
 800ce4c:	8918      	ldrh	r0, [r3, #8]
 800ce4e:	e00e      	b.n	800ce6e <lv_txt_get_next_line+0x8a>
            if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 800ce50:	ab06      	add	r3, sp, #24
 800ce52:	0031      	movs	r1, r6
 800ce54:	1dd8      	adds	r0, r3, #7
 800ce56:	f7ff ffab 	bl	800cdb0 <lv_txt_is_cmd>
 800ce5a:	2800      	cmp	r0, #0
 800ce5c:	d0f3      	beq.n	800ce46 <lv_txt_get_next_line+0x62>
        letter_next = lv_txt_encoded_next(txt, &i_next);
 800ce5e:	003e      	movs	r6, r7
 800ce60:	e7df      	b.n	800ce22 <lv_txt_get_next_line+0x3e>
        if(letter == '\n' || letter == '\r') {
 800ce62:	2e0d      	cmp	r6, #13
 800ce64:	d105      	bne.n	800ce72 <lv_txt_get_next_line+0x8e>
            if(letter == '\r' && letter_next == '\n')
 800ce66:	2f0a      	cmp	r7, #10
 800ce68:	d1ef      	bne.n	800ce4a <lv_txt_get_next_line+0x66>
                return i_next;
 800ce6a:	ab06      	add	r3, sp, #24
 800ce6c:	8998      	ldrh	r0, [r3, #12]
}
 800ce6e:	b00b      	add	sp, #44	; 0x2c
 800ce70:	bdf0      	pop	{r4, r5, r6, r7, pc}
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800ce72:	003a      	movs	r2, r7
 800ce74:	0031      	movs	r1, r6
 800ce76:	9801      	ldr	r0, [sp, #4]
 800ce78:	f7fe fe2a 	bl	800bad0 <lv_font_get_glyph_width>
            cur_w += letter_w;
 800ce7c:	1904      	adds	r4, r0, r4
 800ce7e:	b2a3      	uxth	r3, r4
 800ce80:	9302      	str	r3, [sp, #8]
 800ce82:	466b      	mov	r3, sp
 800ce84:	891b      	ldrh	r3, [r3, #8]
            if(cur_w > max_width) {
 800ce86:	9a03      	ldr	r2, [sp, #12]
            cur_w += letter_w;
 800ce88:	b21c      	sxth	r4, r3
            if(cur_w > max_width) {
 800ce8a:	42a2      	cmp	r2, r4
 800ce8c:	db0c      	blt.n	800cea8 <lv_txt_get_next_line+0xc4>
 800ce8e:	2200      	movs	r2, #0
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 800ce90:	4915      	ldr	r1, [pc, #84]	; (800cee8 <lv_txt_get_next_line+0x104>)
 800ce92:	5c8b      	ldrb	r3, [r1, r2]
 800ce94:	469c      	mov	ip, r3
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d11a      	bne.n	800ced0 <lv_txt_get_next_line+0xec>
        if(letter_w > 0) {
 800ce9a:	2800      	cmp	r0, #0
 800ce9c:	d0df      	beq.n	800ce5e <lv_txt_get_next_line+0x7a>
            cur_w += letter_space;
 800ce9e:	9b05      	ldr	r3, [sp, #20]
 800cea0:	9a02      	ldr	r2, [sp, #8]
 800cea2:	18d3      	adds	r3, r2, r3
 800cea4:	b21c      	sxth	r4, r3
 800cea6:	e7da      	b.n	800ce5e <lv_txt_get_next_line+0x7a>
                if(last_break != NO_BREAK_FOUND) {
 800cea8:	9b00      	ldr	r3, [sp, #0]
 800ceaa:	3301      	adds	r3, #1
 800ceac:	d00a      	beq.n	800cec4 <lv_txt_get_next_line+0xe0>
                    i = last_break;
 800ceae:	9b00      	ldr	r3, [sp, #0]
 800ceb0:	9308      	str	r3, [sp, #32]
                if(i == 0) lv_txt_encoded_next(txt, &i);
 800ceb2:	9b08      	ldr	r3, [sp, #32]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d1c8      	bne.n	800ce4a <lv_txt_get_next_line+0x66>
 800ceb8:	4b0a      	ldr	r3, [pc, #40]	; (800cee4 <lv_txt_get_next_line+0x100>)
 800ceba:	a908      	add	r1, sp, #32
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	0028      	movs	r0, r5
 800cec0:	4798      	blx	r3
 800cec2:	e7c2      	b.n	800ce4a <lv_txt_get_next_line+0x66>
                    lv_txt_encoded_prev(txt, &i);
 800cec4:	4b09      	ldr	r3, [pc, #36]	; (800ceec <lv_txt_get_next_line+0x108>)
 800cec6:	a908      	add	r1, sp, #32
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	0028      	movs	r0, r5
 800cecc:	4798      	blx	r3
 800cece:	e7f0      	b.n	800ceb2 <lv_txt_get_next_line+0xce>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 800ced0:	4566      	cmp	r6, ip
 800ced2:	d002      	beq.n	800ceda <lv_txt_get_next_line+0xf6>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 800ced4:	3201      	adds	r2, #1
 800ced6:	b2d2      	uxtb	r2, r2
 800ced8:	e7db      	b.n	800ce92 <lv_txt_get_next_line+0xae>
                last_break = i; /*Save the first char index after break*/
 800ceda:	9b08      	ldr	r3, [sp, #32]
 800cedc:	9300      	str	r3, [sp, #0]
 800cede:	e7dc      	b.n	800ce9a <lv_txt_get_next_line+0xb6>
 800cee0:	00007c18 	.word	0x00007c18
 800cee4:	20000048 	.word	0x20000048
 800cee8:	08013ce0 	.word	0x08013ce0
 800ceec:	2000004c 	.word	0x2000004c

0800cef0 <lv_txt_get_width>:
{
 800cef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cef2:	b087      	sub	sp, #28
 800cef4:	9302      	str	r3, [sp, #8]
 800cef6:	ab0c      	add	r3, sp, #48	; 0x30
 800cef8:	781b      	ldrb	r3, [r3, #0]
 800cefa:	1e05      	subs	r5, r0, #0
 800cefc:	9100      	str	r1, [sp, #0]
 800cefe:	9201      	str	r2, [sp, #4]
 800cf00:	9303      	str	r3, [sp, #12]
    if(txt == NULL) return 0;
 800cf02:	d103      	bne.n	800cf0c <lv_txt_get_width+0x1c>
 800cf04:	2400      	movs	r4, #0
}
 800cf06:	0020      	movs	r0, r4
 800cf08:	b007      	add	sp, #28
 800cf0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(font == NULL) return 0;
 800cf0c:	9b01      	ldr	r3, [sp, #4]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d0f8      	beq.n	800cf04 <lv_txt_get_width+0x14>
    uint32_t i                   = 0;
 800cf12:	2400      	movs	r4, #0
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800cf14:	ab04      	add	r3, sp, #16
 800cf16:	70dc      	strb	r4, [r3, #3]
    if(length != 0) {
 800cf18:	9b00      	ldr	r3, [sp, #0]
    uint32_t i                   = 0;
 800cf1a:	9405      	str	r4, [sp, #20]
    if(length != 0) {
 800cf1c:	42a3      	cmp	r3, r4
 800cf1e:	d0f1      	beq.n	800cf04 <lv_txt_get_width+0x14>
        while(i < length) {
 800cf20:	9b00      	ldr	r3, [sp, #0]
 800cf22:	9a05      	ldr	r2, [sp, #20]
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d805      	bhi.n	800cf34 <lv_txt_get_width+0x44>
        if(width > 0) {
 800cf28:	2c00      	cmp	r4, #0
 800cf2a:	ddec      	ble.n	800cf06 <lv_txt_get_width+0x16>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 800cf2c:	9b02      	ldr	r3, [sp, #8]
 800cf2e:	1ae4      	subs	r4, r4, r3
 800cf30:	b224      	sxth	r4, r4
 800cf32:	e7e8      	b.n	800cf06 <lv_txt_get_width+0x16>
            letter      = lv_txt_encoded_next(txt, &i);
 800cf34:	4f12      	ldr	r7, [pc, #72]	; (800cf80 <lv_txt_get_width+0x90>)
 800cf36:	a905      	add	r1, sp, #20
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	0028      	movs	r0, r5
 800cf3c:	4798      	blx	r3
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800cf3e:	9b05      	ldr	r3, [sp, #20]
            letter      = lv_txt_encoded_next(txt, &i);
 800cf40:	0006      	movs	r6, r0
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800cf42:	2100      	movs	r1, #0
 800cf44:	18e8      	adds	r0, r5, r3
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	4798      	blx	r3
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	9b03      	ldr	r3, [sp, #12]
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800cf4e:	0007      	movs	r7, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800cf50:	4213      	tst	r3, r2
 800cf52:	d10c      	bne.n	800cf6e <lv_txt_get_width+0x7e>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 800cf54:	003a      	movs	r2, r7
 800cf56:	0031      	movs	r1, r6
 800cf58:	9801      	ldr	r0, [sp, #4]
 800cf5a:	f7fe fdb9 	bl	800bad0 <lv_font_get_glyph_width>
            if(char_width > 0) {
 800cf5e:	b203      	sxth	r3, r0
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	dddd      	ble.n	800cf20 <lv_txt_get_width+0x30>
                width += letter_space;
 800cf64:	9b02      	ldr	r3, [sp, #8]
 800cf66:	18e4      	adds	r4, r4, r3
 800cf68:	1904      	adds	r4, r0, r4
 800cf6a:	b224      	sxth	r4, r4
 800cf6c:	e7d8      	b.n	800cf20 <lv_txt_get_width+0x30>
                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 800cf6e:	ab04      	add	r3, sp, #16
 800cf70:	0031      	movs	r1, r6
 800cf72:	1cd8      	adds	r0, r3, #3
 800cf74:	f7ff ff1c 	bl	800cdb0 <lv_txt_is_cmd>
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	d1d1      	bne.n	800cf20 <lv_txt_get_width+0x30>
 800cf7c:	e7ea      	b.n	800cf54 <lv_txt_get_width+0x64>
 800cf7e:	46c0      	nop			; (mov r8, r8)
 800cf80:	20000048 	.word	0x20000048

0800cf84 <lv_txt_get_size>:
{
 800cf84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf86:	b089      	sub	sp, #36	; 0x24
 800cf88:	9306      	str	r3, [sp, #24]
 800cf8a:	ab0e      	add	r3, sp, #56	; 0x38
 800cf8c:	0016      	movs	r6, r2
 800cf8e:	2200      	movs	r2, #0
 800cf90:	5e9b      	ldrsh	r3, [r3, r2]
 800cf92:	0004      	movs	r4, r0
 800cf94:	9303      	str	r3, [sp, #12]
 800cf96:	ab0f      	add	r3, sp, #60	; 0x3c
 800cf98:	2200      	movs	r2, #0
 800cf9a:	5e9b      	ldrsh	r3, [r3, r2]
 800cf9c:	9105      	str	r1, [sp, #20]
 800cf9e:	9307      	str	r3, [sp, #28]
 800cfa0:	ab10      	add	r3, sp, #64	; 0x40
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	9304      	str	r3, [sp, #16]
    size_res->x = 0;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	8003      	strh	r3, [r0, #0]
    size_res->y = 0;
 800cfaa:	8043      	strh	r3, [r0, #2]
    if(text == NULL) return;
 800cfac:	2900      	cmp	r1, #0
 800cfae:	d023      	beq.n	800cff8 <lv_txt_get_size+0x74>
    if(font == NULL) return;
 800cfb0:	2e00      	cmp	r6, #0
 800cfb2:	d021      	beq.n	800cff8 <lv_txt_get_size+0x74>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 800cfb4:	9b04      	ldr	r3, [sp, #16]
 800cfb6:	079b      	lsls	r3, r3, #30
 800cfb8:	d501      	bpl.n	800cfbe <lv_txt_get_size+0x3a>
 800cfba:	4b21      	ldr	r3, [pc, #132]	; (800d040 <lv_txt_get_size+0xbc>)
 800cfbc:	9307      	str	r3, [sp, #28]
    uint32_t line_start     = 0;
 800cfbe:	2700      	movs	r7, #0
 800cfc0:	7a33      	ldrb	r3, [r6, #8]
 800cfc2:	9302      	str	r3, [sp, #8]
    while(text[line_start] != '\0') {
 800cfc4:	9b05      	ldr	r3, [sp, #20]
 800cfc6:	19dd      	adds	r5, r3, r7
 800cfc8:	782b      	ldrb	r3, [r5, #0]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d116      	bne.n	800cffc <lv_txt_get_size+0x78>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 800cfce:	2f00      	cmp	r7, #0
 800cfd0:	d00b      	beq.n	800cfea <lv_txt_get_size+0x66>
 800cfd2:	3d01      	subs	r5, #1
 800cfd4:	782b      	ldrb	r3, [r5, #0]
 800cfd6:	2b0a      	cmp	r3, #10
 800cfd8:	d001      	beq.n	800cfde <lv_txt_get_size+0x5a>
 800cfda:	2b0d      	cmp	r3, #13
 800cfdc:	d105      	bne.n	800cfea <lv_txt_get_size+0x66>
        size_res->y += letter_height + line_space;
 800cfde:	9b02      	ldr	r3, [sp, #8]
 800cfe0:	9a03      	ldr	r2, [sp, #12]
 800cfe2:	189a      	adds	r2, r3, r2
 800cfe4:	8863      	ldrh	r3, [r4, #2]
 800cfe6:	189b      	adds	r3, r3, r2
 800cfe8:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
 800cfea:	2202      	movs	r2, #2
 800cfec:	5ea3      	ldrsh	r3, [r4, r2]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d123      	bne.n	800d03a <lv_txt_get_size+0xb6>
        size_res->y = letter_height;
 800cff2:	466b      	mov	r3, sp
 800cff4:	891b      	ldrh	r3, [r3, #8]
        size_res->y -= line_space;
 800cff6:	8063      	strh	r3, [r4, #2]
}
 800cff8:	b009      	add	sp, #36	; 0x24
 800cffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 800cffc:	9b04      	ldr	r3, [sp, #16]
 800cffe:	9a06      	ldr	r2, [sp, #24]
 800d000:	9300      	str	r3, [sp, #0]
 800d002:	0031      	movs	r1, r6
 800d004:	9b07      	ldr	r3, [sp, #28]
 800d006:	0028      	movs	r0, r5
 800d008:	f7ff feec 	bl	800cde4 <lv_txt_get_next_line>
        size_res->y += line_space;
 800d00c:	9b02      	ldr	r3, [sp, #8]
 800d00e:	9a03      	ldr	r2, [sp, #12]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 800d010:	0001      	movs	r1, r0
        size_res->y += line_space;
 800d012:	189a      	adds	r2, r3, r2
 800d014:	8863      	ldrh	r3, [r4, #2]
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 800d016:	183f      	adds	r7, r7, r0
        size_res->y += line_space;
 800d018:	189b      	adds	r3, r3, r2
 800d01a:	8063      	strh	r3, [r4, #2]
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 800d01c:	9b04      	ldr	r3, [sp, #16]
 800d01e:	0032      	movs	r2, r6
 800d020:	9300      	str	r3, [sp, #0]
 800d022:	0028      	movs	r0, r5
 800d024:	9b06      	ldr	r3, [sp, #24]
 800d026:	f7ff ff63 	bl	800cef0 <lv_txt_get_width>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 800d02a:	8823      	ldrh	r3, [r4, #0]
 800d02c:	1c1a      	adds	r2, r3, #0
 800d02e:	b21b      	sxth	r3, r3
 800d030:	4283      	cmp	r3, r0
 800d032:	da00      	bge.n	800d036 <lv_txt_get_size+0xb2>
 800d034:	1c02      	adds	r2, r0, #0
 800d036:	8022      	strh	r2, [r4, #0]
 800d038:	e7c4      	b.n	800cfc4 <lv_txt_get_size+0x40>
        size_res->y -= line_space;
 800d03a:	9a03      	ldr	r2, [sp, #12]
 800d03c:	1a9b      	subs	r3, r3, r2
 800d03e:	e7da      	b.n	800cff6 <lv_txt_get_size+0x72>
 800d040:	00007c18 	.word	0x00007c18

0800d044 <lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                        int32_t (*cmp)(const void * pRef, const void * pElement))
{
 800d044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d046:	000f      	movs	r7, r1
 800d048:	0015      	movs	r5, r2
 800d04a:	9001      	str	r0, [sp, #4]
 800d04c:	9300      	str	r3, [sp, #0]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 800d04e:	2d00      	cmp	r5, #0
 800d050:	d101      	bne.n	800d056 <lv_utils_bsearch+0x12>
            middle = base;
        } else {
            return (char *)middle;
        }
    }
    return NULL;
 800d052:	0028      	movs	r0, r5
}
 800d054:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        middle += (n / 2) * size;
 800d056:	9c00      	ldr	r4, [sp, #0]
 800d058:	086e      	lsrs	r6, r5, #1
 800d05a:	4374      	muls	r4, r6
 800d05c:	193c      	adds	r4, r7, r4
        if((c = (*cmp)(key, middle)) > 0) {
 800d05e:	0021      	movs	r1, r4
 800d060:	9801      	ldr	r0, [sp, #4]
 800d062:	9b08      	ldr	r3, [sp, #32]
 800d064:	4798      	blx	r3
 800d066:	2800      	cmp	r0, #0
 800d068:	dd06      	ble.n	800d078 <lv_utils_bsearch+0x34>
 800d06a:	2301      	movs	r3, #1
 800d06c:	43ab      	bics	r3, r5
            n    = (n / 2) - ((n & 1) == 0);
 800d06e:	1af6      	subs	r6, r6, r3
            base = (middle += size);
 800d070:	9b00      	ldr	r3, [sp, #0]
 800d072:	18e7      	adds	r7, r4, r3
 800d074:	0035      	movs	r5, r6
 800d076:	e7ea      	b.n	800d04e <lv_utils_bsearch+0xa>
        } else if(c < 0) {
 800d078:	2800      	cmp	r0, #0
 800d07a:	d1fb      	bne.n	800d074 <lv_utils_bsearch+0x30>
        middle += (n / 2) * size;
 800d07c:	0020      	movs	r0, r4
 800d07e:	e7e9      	b.n	800d054 <lv_utils_bsearch+0x10>

0800d080 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
 800d080:	b570      	push	{r4, r5, r6, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800d082:	f7fa fcbf 	bl	8007a04 <lv_obj_get_ext_attr>
 800d086:	2502      	movs	r5, #2
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 800d088:	7c43      	ldrb	r3, [r0, #17]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800d08a:	0004      	movs	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 800d08c:	422b      	tst	r3, r5
 800d08e:	d004      	beq.n	800d09a <lv_label_dot_tmp_free+0x1a>
 800d090:	6840      	ldr	r0, [r0, #4]
 800d092:	2800      	cmp	r0, #0
 800d094:	d001      	beq.n	800d09a <lv_label_dot_tmp_free+0x1a>
        lv_mem_free(ext->dot.tmp_ptr);
 800d096:	f7ff fbf7 	bl	800c888 <lv_mem_free>
    }
    ext->dot_tmp_alloc = false;
 800d09a:	7c63      	ldrb	r3, [r4, #17]
 800d09c:	43ab      	bics	r3, r5
 800d09e:	7463      	strb	r3, [r4, #17]
    ext->dot.tmp_ptr   = NULL;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	6063      	str	r3, [r4, #4]
}
 800d0a4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d0a8 <lv_label_revert_dots>:
{
 800d0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0aa:	0005      	movs	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800d0ac:	f7fa fcaa 	bl	8007a04 <lv_obj_get_ext_attr>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 800d0b0:	2307      	movs	r3, #7
 800d0b2:	7c07      	ldrb	r7, [r0, #16]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800d0b4:	0004      	movs	r4, r0
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 800d0b6:	401f      	ands	r7, r3
 800d0b8:	2f02      	cmp	r7, #2
 800d0ba:	d120      	bne.n	800d0fe <lv_label_revert_dots+0x56>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 800d0bc:	8901      	ldrh	r1, [r0, #8]
 800d0be:	4b13      	ldr	r3, [pc, #76]	; (800d10c <lv_label_revert_dots+0x64>)
 800d0c0:	4299      	cmp	r1, r3
 800d0c2:	d01c      	beq.n	800d0fe <lv_label_revert_dots+0x56>
    uint32_t byte_i   = lv_txt_encoded_get_byte_id(ext->text, letter_i);
 800d0c4:	4b12      	ldr	r3, [pc, #72]	; (800d110 <lv_label_revert_dots+0x68>)
    uint32_t letter_i = ext->dot_end - LV_LABEL_DOT_NUM;
 800d0c6:	3903      	subs	r1, #3
    uint32_t byte_i   = lv_txt_encoded_get_byte_id(ext->text, letter_i);
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	6800      	ldr	r0, [r0, #0]
 800d0cc:	4798      	blx	r3
 800d0ce:	0006      	movs	r6, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800d0d0:	0028      	movs	r0, r5
 800d0d2:	f7fa fc97 	bl	8007a04 <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc) {
 800d0d6:	7c43      	ldrb	r3, [r0, #17]
        return ext->dot.tmp;
 800d0d8:	1d01      	adds	r1, r0, #4
    if(ext->dot_tmp_alloc) {
 800d0da:	423b      	tst	r3, r7
 800d0dc:	d000      	beq.n	800d0e0 <lv_label_revert_dots+0x38>
        return ext->dot.tmp_ptr;
 800d0de:	6841      	ldr	r1, [r0, #4]
    uint8_t i      = 0;
 800d0e0:	2300      	movs	r3, #0
    while(ext->text[byte_i + i] != '\0') {
 800d0e2:	6820      	ldr	r0, [r4, #0]
 800d0e4:	18f2      	adds	r2, r6, r3
 800d0e6:	1882      	adds	r2, r0, r2
 800d0e8:	7810      	ldrb	r0, [r2, #0]
 800d0ea:	2800      	cmp	r0, #0
 800d0ec:	d108      	bne.n	800d100 <lv_label_revert_dots+0x58>
    ext->text[byte_i + i] = dot_tmp[i];
 800d0ee:	5ccb      	ldrb	r3, [r1, r3]
    lv_label_dot_tmp_free(label);
 800d0f0:	0028      	movs	r0, r5
    ext->text[byte_i + i] = dot_tmp[i];
 800d0f2:	7013      	strb	r3, [r2, #0]
    lv_label_dot_tmp_free(label);
 800d0f4:	f7ff ffc4 	bl	800d080 <lv_label_dot_tmp_free>
    ext->dot_end = LV_LABEL_DOT_END_INV;
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	425b      	negs	r3, r3
 800d0fc:	8123      	strh	r3, [r4, #8]
}
 800d0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->text[byte_i + i] = dot_tmp[i];
 800d100:	5cc8      	ldrb	r0, [r1, r3]
        i++;
 800d102:	3301      	adds	r3, #1
        ext->text[byte_i + i] = dot_tmp[i];
 800d104:	7010      	strb	r0, [r2, #0]
        i++;
 800d106:	b2db      	uxtb	r3, r3
 800d108:	e7eb      	b.n	800d0e2 <lv_label_revert_dots+0x3a>
 800d10a:	46c0      	nop			; (mov r8, r8)
 800d10c:	0000ffff 	.word	0x0000ffff
 800d110:	20000044 	.word	0x20000044

0800d114 <lv_label_set_offset_y>:
{
 800d114:	b570      	push	{r4, r5, r6, lr}
 800d116:	000d      	movs	r5, r1
 800d118:	0004      	movs	r4, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800d11a:	f7fa fc73 	bl	8007a04 <lv_obj_get_ext_attr>
    ext->offset.y        = y;
 800d11e:	8185      	strh	r5, [r0, #12]
    lv_obj_invalidate(label);
 800d120:	0020      	movs	r0, r4
 800d122:	f7f9 fef3 	bl	8006f0c <lv_obj_invalidate>
}
 800d126:	bd70      	pop	{r4, r5, r6, pc}

0800d128 <lv_label_set_offset_x>:
{
 800d128:	b570      	push	{r4, r5, r6, lr}
 800d12a:	000d      	movs	r5, r1
 800d12c:	0004      	movs	r4, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800d12e:	f7fa fc69 	bl	8007a04 <lv_obj_get_ext_attr>
    ext->offset.x        = x;
 800d132:	8145      	strh	r5, [r0, #10]
    lv_obj_invalidate(label);
 800d134:	0020      	movs	r0, r4
 800d136:	f7f9 fee9 	bl	8006f0c <lv_obj_invalidate>
}
 800d13a:	bd70      	pop	{r4, r5, r6, pc}

0800d13c <lv_label_set_dot_tmp>:
{
 800d13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d13e:	0007      	movs	r7, r0
 800d140:	0015      	movs	r5, r2
 800d142:	000e      	movs	r6, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800d144:	f7fa fc5e 	bl	8007a04 <lv_obj_get_ext_attr>
 800d148:	0004      	movs	r4, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
 800d14a:	0038      	movs	r0, r7
 800d14c:	f7ff ff98 	bl	800d080 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 800d150:	2d04      	cmp	r5, #4
 800d152:	d913      	bls.n	800d17c <lv_label_set_dot_tmp+0x40>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
 800d154:	1c68      	adds	r0, r5, #1
 800d156:	f7ff fb63 	bl	800c820 <lv_mem_alloc>
 800d15a:	6060      	str	r0, [r4, #4]
            return false;
 800d15c:	1e03      	subs	r3, r0, #0
        if(ext->dot.tmp_ptr == NULL) {
 800d15e:	d00b      	beq.n	800d178 <lv_label_set_dot_tmp+0x3c>
        memcpy(ext->dot.tmp_ptr, data, len);
 800d160:	002a      	movs	r2, r5
 800d162:	0031      	movs	r1, r6
 800d164:	f001 f812 	bl	800e18c <memcpy>
        ext->dot.tmp_ptr[len] = '\0';
 800d168:	2300      	movs	r3, #0
 800d16a:	6862      	ldr	r2, [r4, #4]
 800d16c:	5553      	strb	r3, [r2, r5]
        ext->dot_tmp_alloc    = true;
 800d16e:	7c62      	ldrb	r2, [r4, #17]
 800d170:	3302      	adds	r3, #2
 800d172:	4313      	orrs	r3, r2
 800d174:	7463      	strb	r3, [r4, #17]
    return true;
 800d176:	2301      	movs	r3, #1
}
 800d178:	0018      	movs	r0, r3
 800d17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->dot_tmp_alloc = false;
 800d17c:	2202      	movs	r2, #2
 800d17e:	7c63      	ldrb	r3, [r4, #17]
        memcpy(ext->dot.tmp, data, len);
 800d180:	1d20      	adds	r0, r4, #4
        ext->dot_tmp_alloc = false;
 800d182:	4393      	bics	r3, r2
 800d184:	7463      	strb	r3, [r4, #17]
        memcpy(ext->dot.tmp, data, len);
 800d186:	002a      	movs	r2, r5
 800d188:	0031      	movs	r1, r6
 800d18a:	f000 ffff 	bl	800e18c <memcpy>
 800d18e:	e7f2      	b.n	800d176 <lv_label_set_dot_tmp+0x3a>

0800d190 <lv_label_design>:
{
 800d190:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d192:	b093      	sub	sp, #76	; 0x4c
 800d194:	9007      	str	r0, [sp, #28]
 800d196:	9108      	str	r1, [sp, #32]
        return false;
 800d198:	2000      	movs	r0, #0
    if(mode == LV_DESIGN_COVER_CHK)
 800d19a:	2a02      	cmp	r2, #2
 800d19c:	d100      	bne.n	800d1a0 <lv_label_design+0x10>
 800d19e:	e0e4      	b.n	800d36a <lv_label_design+0x1da>
    return true;
 800d1a0:	3001      	adds	r0, #1
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 800d1a2:	2a00      	cmp	r2, #0
 800d1a4:	d000      	beq.n	800d1a8 <lv_label_design+0x18>
 800d1a6:	e0e0      	b.n	800d36a <lv_label_design+0x1da>
        const lv_style_t * style = lv_obj_get_style(label);
 800d1a8:	9807      	ldr	r0, [sp, #28]
 800d1aa:	f7fa fb65 	bl	8007878 <lv_obj_get_style>
 800d1ae:	0004      	movs	r4, r0
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
 800d1b0:	9807      	ldr	r0, [sp, #28]
 800d1b2:	f7fa fbc0 	bl	8007936 <lv_obj_get_opa_scale>
        lv_obj_get_coords(label, &coords);
 800d1b6:	a90e      	add	r1, sp, #56	; 0x38
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
 800d1b8:	9009      	str	r0, [sp, #36]	; 0x24
        lv_obj_get_coords(label, &coords);
 800d1ba:	9807      	ldr	r0, [sp, #28]
 800d1bc:	f7fa fb46 	bl	800784c <lv_obj_get_coords>
        lv_group_t * g = lv_obj_get_group(label);
 800d1c0:	9807      	ldr	r0, [sp, #28]
 800d1c2:	f7fa fc21 	bl	8007a08 <lv_obj_get_group>
        if(lv_group_get_focused(g) == label) {
 800d1c6:	f7f9 fd9f 	bl	8006d08 <lv_group_get_focused>
 800d1ca:	9b07      	ldr	r3, [sp, #28]
 800d1cc:	4283      	cmp	r3, r0
 800d1ce:	d105      	bne.n	800d1dc <lv_label_design+0x4c>
            lv_draw_rect(&coords, mask, style, opa_scale);
 800d1d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1d2:	0022      	movs	r2, r4
 800d1d4:	9908      	ldr	r1, [sp, #32]
 800d1d6:	a80e      	add	r0, sp, #56	; 0x38
 800d1d8:	f7fc fa26 	bl	8009628 <lv_draw_rect>
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800d1dc:	9807      	ldr	r0, [sp, #28]
 800d1de:	f7fa fc11 	bl	8007a04 <lv_obj_get_ext_attr>
        if(ext->body_draw) {
 800d1e2:	7c43      	ldrb	r3, [r0, #17]
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800d1e4:	0005      	movs	r5, r0
        if(ext->body_draw) {
 800d1e6:	07db      	lsls	r3, r3, #31
 800d1e8:	d51d      	bpl.n	800d226 <lv_label_design+0x96>
            lv_obj_get_coords(label, &bg);
 800d1ea:	ae10      	add	r6, sp, #64	; 0x40
 800d1ec:	0031      	movs	r1, r6
 800d1ee:	9807      	ldr	r0, [sp, #28]
 800d1f0:	f7fa fb2c 	bl	800784c <lv_obj_get_coords>
            bg.x1 -= style->body.padding.left;
 800d1f4:	8b62      	ldrh	r2, [r4, #26]
 800d1f6:	8833      	ldrh	r3, [r6, #0]
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 800d1f8:	9807      	ldr	r0, [sp, #28]
            bg.x1 -= style->body.padding.left;
 800d1fa:	1a9b      	subs	r3, r3, r2
 800d1fc:	8033      	strh	r3, [r6, #0]
            bg.x2 += style->body.padding.right;
 800d1fe:	8ba2      	ldrh	r2, [r4, #28]
 800d200:	88b3      	ldrh	r3, [r6, #4]
 800d202:	189b      	adds	r3, r3, r2
 800d204:	80b3      	strh	r3, [r6, #4]
            bg.y1 -= style->body.padding.top;
 800d206:	8ae2      	ldrh	r2, [r4, #22]
 800d208:	8873      	ldrh	r3, [r6, #2]
 800d20a:	1a9b      	subs	r3, r3, r2
 800d20c:	8073      	strh	r3, [r6, #2]
            bg.y2 += style->body.padding.bottom;
 800d20e:	8b22      	ldrh	r2, [r4, #24]
 800d210:	88f3      	ldrh	r3, [r6, #6]
 800d212:	189b      	adds	r3, r3, r2
 800d214:	80f3      	strh	r3, [r6, #6]
            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 800d216:	f7fa fb8e 	bl	8007936 <lv_obj_get_opa_scale>
 800d21a:	0022      	movs	r2, r4
 800d21c:	0003      	movs	r3, r0
 800d21e:	9908      	ldr	r1, [sp, #32]
 800d220:	0030      	movs	r0, r6
 800d222:	f7fc fa01 	bl	8009628 <lv_draw_rect>
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 800d226:	7c2b      	ldrb	r3, [r5, #16]
 800d228:	065f      	lsls	r7, r3, #25
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800d22a:	b25a      	sxtb	r2, r3
        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 800d22c:	0fff      	lsrs	r7, r7, #31
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800d22e:	2a00      	cmp	r2, #0
 800d230:	da01      	bge.n	800d236 <lv_label_design+0xa6>
 800d232:	2202      	movs	r2, #2
 800d234:	4317      	orrs	r7, r2
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 800d236:	2230      	movs	r2, #48	; 0x30
 800d238:	2104      	movs	r1, #4
 800d23a:	401a      	ands	r2, r3
 800d23c:	2a10      	cmp	r2, #16
 800d23e:	d002      	beq.n	800d246 <lv_label_design+0xb6>
        if(ext->align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
 800d240:	2a20      	cmp	r2, #32
 800d242:	d101      	bne.n	800d248 <lv_label_design+0xb8>
 800d244:	2108      	movs	r1, #8
 800d246:	430f      	orrs	r7, r1
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
 800d248:	2107      	movs	r1, #7
 800d24a:	400b      	ands	r3, r1
 800d24c:	3b03      	subs	r3, #3
 800d24e:	2b01      	cmp	r3, #1
 800d250:	d81a      	bhi.n	800d288 <lv_label_design+0xf8>
 800d252:	23e0      	movs	r3, #224	; 0xe0
 800d254:	3a10      	subs	r2, #16
 800d256:	421a      	tst	r2, r3
 800d258:	d116      	bne.n	800d288 <lv_label_design+0xf8>
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 800d25a:	2228      	movs	r2, #40	; 0x28
 800d25c:	5ea3      	ldrsh	r3, [r4, r2]
 800d25e:	4a44      	ldr	r2, [pc, #272]	; (800d370 <lv_label_design+0x1e0>)
 800d260:	9702      	str	r7, [sp, #8]
 800d262:	9201      	str	r2, [sp, #4]
 800d264:	212a      	movs	r1, #42	; 0x2a
 800d266:	5e62      	ldrsh	r2, [r4, r1]
 800d268:	ae10      	add	r6, sp, #64	; 0x40
 800d26a:	9200      	str	r2, [sp, #0]
 800d26c:	0030      	movs	r0, r6
 800d26e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d270:	6829      	ldr	r1, [r5, #0]
 800d272:	f7ff fe87 	bl	800cf84 <lv_txt_get_size>
            if(size.x > lv_obj_get_width(label)) {
 800d276:	9807      	ldr	r0, [sp, #28]
 800d278:	2300      	movs	r3, #0
 800d27a:	5ef6      	ldrsh	r6, [r6, r3]
 800d27c:	f7fa faef 	bl	800785e <lv_obj_get_width>
 800d280:	4286      	cmp	r6, r0
 800d282:	dd01      	ble.n	800d288 <lv_label_design+0xf8>
                flag &= ~LV_TXT_FLAG_CENTER;
 800d284:	230c      	movs	r3, #12
 800d286:	439f      	bics	r7, r3
        lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ext->offset,
 800d288:	2300      	movs	r3, #0
 800d28a:	9305      	str	r3, [sp, #20]
 800d28c:	002b      	movs	r3, r5
 800d28e:	4e39      	ldr	r6, [pc, #228]	; (800d374 <lv_label_design+0x1e4>)
 800d290:	330a      	adds	r3, #10
 800d292:	9604      	str	r6, [sp, #16]
 800d294:	9603      	str	r6, [sp, #12]
 800d296:	9302      	str	r3, [sp, #8]
 800d298:	9701      	str	r7, [sp, #4]
 800d29a:	682b      	ldr	r3, [r5, #0]
 800d29c:	0022      	movs	r2, r4
 800d29e:	9300      	str	r3, [sp, #0]
 800d2a0:	9908      	ldr	r1, [sp, #32]
 800d2a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2a4:	a80e      	add	r0, sp, #56	; 0x38
 800d2a6:	f7fb ff19 	bl	80090dc <lv_draw_label>
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 800d2aa:	2207      	movs	r2, #7
 800d2ac:	7c2b      	ldrb	r3, [r5, #16]
 800d2ae:	960a      	str	r6, [sp, #40]	; 0x28
 800d2b0:	4013      	ands	r3, r2
 800d2b2:	2b04      	cmp	r3, #4
 800d2b4:	d158      	bne.n	800d368 <lv_label_design+0x1d8>
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 800d2b6:	2228      	movs	r2, #40	; 0x28
 800d2b8:	5ea3      	ldrsh	r3, [r4, r2]
 800d2ba:	4a2d      	ldr	r2, [pc, #180]	; (800d370 <lv_label_design+0x1e0>)
 800d2bc:	9702      	str	r7, [sp, #8]
 800d2be:	9201      	str	r2, [sp, #4]
 800d2c0:	212a      	movs	r1, #42	; 0x2a
 800d2c2:	5e62      	ldrsh	r2, [r4, r1]
 800d2c4:	ae0d      	add	r6, sp, #52	; 0x34
 800d2c6:	9200      	str	r2, [sp, #0]
 800d2c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d2ca:	6829      	ldr	r1, [r5, #0]
 800d2cc:	0030      	movs	r0, r6
 800d2ce:	f7ff fe59 	bl	800cf84 <lv_txt_get_size>
            if(size.x > lv_obj_get_width(label)) {
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	5eb3      	ldrsh	r3, [r6, r2]
 800d2d6:	9807      	ldr	r0, [sp, #28]
 800d2d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800d2da:	f7fa fac0 	bl	800785e <lv_obj_get_width>
 800d2de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2e0:	4283      	cmp	r3, r0
 800d2e2:	dd1e      	ble.n	800d322 <lv_label_design+0x192>
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800d2e4:	2220      	movs	r2, #32
                ofs.x = ext->offset.x + size.x +
 800d2e6:	8968      	ldrh	r0, [r5, #10]
 800d2e8:	8836      	ldrh	r6, [r6, #0]
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800d2ea:	0011      	movs	r1, r2
                ofs.x = ext->offset.x + size.x +
 800d2ec:	1986      	adds	r6, r0, r6
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800d2ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d2f0:	f7fe fbee 	bl	800bad0 <lv_font_get_glyph_width>
 800d2f4:	2203      	movs	r2, #3
 800d2f6:	4350      	muls	r0, r2
                ofs.x = ext->offset.x + size.x +
 800d2f8:	b2b6      	uxth	r6, r6
 800d2fa:	ab10      	add	r3, sp, #64	; 0x40
 800d2fc:	1836      	adds	r6, r6, r0
 800d2fe:	801e      	strh	r6, [r3, #0]
                ofs.y = ext->offset.y;
 800d300:	89aa      	ldrh	r2, [r5, #12]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 800d302:	9908      	ldr	r1, [sp, #32]
                ofs.y = ext->offset.y;
 800d304:	805a      	strh	r2, [r3, #2]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 800d306:	2200      	movs	r2, #0
 800d308:	9205      	str	r2, [sp, #20]
 800d30a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d30c:	9302      	str	r3, [sp, #8]
 800d30e:	9204      	str	r2, [sp, #16]
 800d310:	9203      	str	r2, [sp, #12]
 800d312:	9701      	str	r7, [sp, #4]
 800d314:	682b      	ldr	r3, [r5, #0]
 800d316:	0022      	movs	r2, r4
 800d318:	9300      	str	r3, [sp, #0]
 800d31a:	a80e      	add	r0, sp, #56	; 0x38
 800d31c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d31e:	f7fb fedd 	bl	80090dc <lv_draw_label>
            if(size.y > lv_obj_get_height(label)) {
 800d322:	ae0d      	add	r6, sp, #52	; 0x34
 800d324:	2202      	movs	r2, #2
 800d326:	5eb3      	ldrsh	r3, [r6, r2]
 800d328:	9807      	ldr	r0, [sp, #28]
 800d32a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d32c:	f7fa fa9d 	bl	800786a <lv_obj_get_height>
 800d330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d332:	4283      	cmp	r3, r0
 800d334:	dd18      	ble.n	800d368 <lv_label_design+0x1d8>
                ofs.x = ext->offset.x;
 800d336:	896b      	ldrh	r3, [r5, #10]
 800d338:	aa10      	add	r2, sp, #64	; 0x40
 800d33a:	8013      	strh	r3, [r2, #0]
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
 800d33c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d33e:	8871      	ldrh	r1, [r6, #2]
 800d340:	7a1b      	ldrb	r3, [r3, #8]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 800d342:	a80e      	add	r0, sp, #56	; 0x38
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
 800d344:	185b      	adds	r3, r3, r1
 800d346:	89a9      	ldrh	r1, [r5, #12]
 800d348:	185b      	adds	r3, r3, r1
 800d34a:	8053      	strh	r3, [r2, #2]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 800d34c:	2300      	movs	r3, #0
 800d34e:	9305      	str	r3, [sp, #20]
 800d350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d352:	9202      	str	r2, [sp, #8]
 800d354:	9304      	str	r3, [sp, #16]
 800d356:	9303      	str	r3, [sp, #12]
 800d358:	9701      	str	r7, [sp, #4]
 800d35a:	682b      	ldr	r3, [r5, #0]
 800d35c:	0022      	movs	r2, r4
 800d35e:	9300      	str	r3, [sp, #0]
 800d360:	9908      	ldr	r1, [sp, #32]
 800d362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d364:	f7fb feba 	bl	80090dc <lv_draw_label>
 800d368:	2001      	movs	r0, #1
}
 800d36a:	b013      	add	sp, #76	; 0x4c
 800d36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d36e:	46c0      	nop			; (mov r8, r8)
 800d370:	00007c18 	.word	0x00007c18
 800d374:	0000ffff 	.word	0x0000ffff

0800d378 <lv_label_set_align>:
{
 800d378:	b570      	push	{r4, r5, r6, lr}
 800d37a:	0004      	movs	r4, r0
 800d37c:	000d      	movs	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800d37e:	f7fa fb41 	bl	8007a04 <lv_obj_get_ext_attr>
    if(ext->align == align) return;
 800d382:	7c03      	ldrb	r3, [r0, #16]
 800d384:	069a      	lsls	r2, r3, #26
 800d386:	0f92      	lsrs	r2, r2, #30
 800d388:	42aa      	cmp	r2, r5
 800d38a:	d009      	beq.n	800d3a0 <lv_label_set_align+0x28>
    ext->align = align;
 800d38c:	2203      	movs	r2, #3
 800d38e:	4015      	ands	r5, r2
 800d390:	322d      	adds	r2, #45	; 0x2d
 800d392:	012d      	lsls	r5, r5, #4
 800d394:	4393      	bics	r3, r2
 800d396:	432b      	orrs	r3, r5
 800d398:	7403      	strb	r3, [r0, #16]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
 800d39a:	0020      	movs	r0, r4
 800d39c:	f7f9 fdb6 	bl	8006f0c <lv_obj_invalidate>
}
 800d3a0:	bd70      	pop	{r4, r5, r6, pc}

0800d3a2 <lv_label_set_body_draw>:
{
 800d3a2:	b570      	push	{r4, r5, r6, lr}
 800d3a4:	0004      	movs	r4, r0
 800d3a6:	000d      	movs	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800d3a8:	f7fa fb2c 	bl	8007a04 <lv_obj_get_ext_attr>
    if(ext->body_draw == en) return;
 800d3ac:	7c43      	ldrb	r3, [r0, #17]
 800d3ae:	07da      	lsls	r2, r3, #31
 800d3b0:	0fd2      	lsrs	r2, r2, #31
 800d3b2:	42aa      	cmp	r2, r5
 800d3b4:	d00a      	beq.n	800d3cc <lv_label_set_body_draw+0x2a>
    ext->body_draw = en == false ? 0 : 1;
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	4015      	ands	r5, r2
 800d3ba:	4393      	bics	r3, r2
 800d3bc:	432b      	orrs	r3, r5
 800d3be:	7443      	strb	r3, [r0, #17]
    lv_obj_refresh_ext_draw_pad(label);
 800d3c0:	0020      	movs	r0, r4
 800d3c2:	f7fa fa03 	bl	80077cc <lv_obj_refresh_ext_draw_pad>
    lv_obj_invalidate(label);
 800d3c6:	0020      	movs	r0, r4
 800d3c8:	f7f9 fda0 	bl	8006f0c <lv_obj_invalidate>
}
 800d3cc:	bd70      	pop	{r4, r5, r6, pc}

0800d3ce <lv_label_get_text>:
{
 800d3ce:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800d3d0:	f7fa fb18 	bl	8007a04 <lv_obj_get_ext_attr>
    return ext->text;
 800d3d4:	6800      	ldr	r0, [r0, #0]
}
 800d3d6:	bd10      	pop	{r4, pc}

0800d3d8 <lv_label_get_long_mode>:
{
 800d3d8:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800d3da:	f7fa fb13 	bl	8007a04 <lv_obj_get_ext_attr>
    return ext->long_mode;
 800d3de:	7c00      	ldrb	r0, [r0, #16]
 800d3e0:	0740      	lsls	r0, r0, #29
 800d3e2:	0f40      	lsrs	r0, r0, #29
}
 800d3e4:	bd10      	pop	{r4, pc}

0800d3e6 <lv_label_get_align>:
{
 800d3e6:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800d3e8:	f7fa fb0c 	bl	8007a04 <lv_obj_get_ext_attr>
    return ext->align;
 800d3ec:	7c00      	ldrb	r0, [r0, #16]
 800d3ee:	0680      	lsls	r0, r0, #26
 800d3f0:	0f80      	lsrs	r0, r0, #30
}
 800d3f2:	bd10      	pop	{r4, pc}

0800d3f4 <lv_label_get_recolor>:
{
 800d3f4:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800d3f6:	f7fa fb05 	bl	8007a04 <lv_obj_get_ext_attr>
    return ext->recolor == 0 ? false : true;
 800d3fa:	7c00      	ldrb	r0, [r0, #16]
 800d3fc:	0640      	lsls	r0, r0, #25
 800d3fe:	0fc0      	lsrs	r0, r0, #31
}
 800d400:	bd10      	pop	{r4, pc}

0800d402 <lv_label_get_body_draw>:
{
 800d402:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800d404:	f7fa fafe 	bl	8007a04 <lv_obj_get_ext_attr>
    return ext->body_draw == 0 ? false : true;
 800d408:	2301      	movs	r3, #1
 800d40a:	7c40      	ldrb	r0, [r0, #17]
 800d40c:	4018      	ands	r0, r3
}
 800d40e:	bd10      	pop	{r4, pc}

0800d410 <lv_label_get_letter_on>:
{
 800d410:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d412:	b08f      	sub	sp, #60	; 0x3c
 800d414:	0005      	movs	r5, r0
 800d416:	910b      	str	r1, [sp, #44]	; 0x2c
    const char * txt         = lv_label_get_text(label);
 800d418:	f7ff ffd9 	bl	800d3ce <lv_label_get_text>
 800d41c:	9005      	str	r0, [sp, #20]
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
 800d41e:	0028      	movs	r0, r5
 800d420:	f7fa faf0 	bl	8007a04 <lv_obj_get_ext_attr>
 800d424:	9008      	str	r0, [sp, #32]
    lv_coord_t max_w         = lv_obj_get_width(label);
 800d426:	0028      	movs	r0, r5
 800d428:	f7fa fa19 	bl	800785e <lv_obj_get_width>
 800d42c:	9009      	str	r0, [sp, #36]	; 0x24
    const lv_style_t * style = lv_obj_get_style(label);
 800d42e:	0028      	movs	r0, r5
 800d430:	f7fa fa22 	bl	8007878 <lv_obj_get_style>
    const lv_font_t * font   = style->text.font;
 800d434:	6a43      	ldr	r3, [r0, #36]	; 0x24
    const lv_style_t * style = lv_obj_get_style(label);
 800d436:	9006      	str	r0, [sp, #24]
    const lv_font_t * font   = style->text.font;
 800d438:	9307      	str	r3, [sp, #28]
 800d43a:	7a1b      	ldrb	r3, [r3, #8]
 800d43c:	930a      	str	r3, [sp, #40]	; 0x28
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 800d43e:	9b08      	ldr	r3, [sp, #32]
 800d440:	7c1b      	ldrb	r3, [r3, #16]
 800d442:	065a      	lsls	r2, r3, #25
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
 800d444:	0fd2      	lsrs	r2, r2, #31
 800d446:	9203      	str	r2, [sp, #12]
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800d448:	b25a      	sxtb	r2, r3
 800d44a:	2a00      	cmp	r2, #0
 800d44c:	da03      	bge.n	800d456 <lv_label_get_letter_on+0x46>
 800d44e:	2202      	movs	r2, #2
 800d450:	9903      	ldr	r1, [sp, #12]
 800d452:	4311      	orrs	r1, r2
 800d454:	9103      	str	r1, [sp, #12]
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 800d456:	2230      	movs	r2, #48	; 0x30
 800d458:	401a      	ands	r2, r3
 800d45a:	2a10      	cmp	r2, #16
 800d45c:	d103      	bne.n	800d466 <lv_label_get_letter_on+0x56>
 800d45e:	9903      	ldr	r1, [sp, #12]
 800d460:	3a0c      	subs	r2, #12
 800d462:	4311      	orrs	r1, r2
 800d464:	9103      	str	r1, [sp, #12]
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 800d466:	075b      	lsls	r3, r3, #29
 800d468:	d101      	bne.n	800d46e <lv_label_get_letter_on+0x5e>
        max_w = LV_COORD_MAX;
 800d46a:	4b45      	ldr	r3, [pc, #276]	; (800d580 <lv_label_get_letter_on+0x170>)
 800d46c:	9309      	str	r3, [sp, #36]	; 0x24
 800d46e:	2600      	movs	r6, #0
 800d470:	0034      	movs	r4, r6
    while(txt[line_start] != '\0') {
 800d472:	9b05      	ldr	r3, [sp, #20]
 800d474:	191f      	adds	r7, r3, r4
 800d476:	783b      	ldrb	r3, [r7, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d154      	bne.n	800d526 <lv_label_get_letter_on+0x116>
 800d47c:	9404      	str	r4, [sp, #16]
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 800d47e:	2230      	movs	r2, #48	; 0x30
 800d480:	9b08      	ldr	r3, [sp, #32]
    lv_coord_t x = 0;
 800d482:	2600      	movs	r6, #0
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 800d484:	7c1b      	ldrb	r3, [r3, #16]
 800d486:	4013      	ands	r3, r2
 800d488:	2b10      	cmp	r3, #16
 800d48a:	d117      	bne.n	800d4bc <lv_label_get_letter_on+0xac>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, style->text.letter_space, flag);
 800d48c:	9b06      	ldr	r3, [sp, #24]
 800d48e:	0038      	movs	r0, r7
 800d490:	2228      	movs	r2, #40	; 0x28
 800d492:	5e9b      	ldrsh	r3, [r3, r2]
 800d494:	9a04      	ldr	r2, [sp, #16]
 800d496:	1b11      	subs	r1, r2, r4
 800d498:	9a03      	ldr	r2, [sp, #12]
 800d49a:	b289      	uxth	r1, r1
 800d49c:	9200      	str	r2, [sp, #0]
 800d49e:	9a07      	ldr	r2, [sp, #28]
 800d4a0:	f7ff fd26 	bl	800cef0 <lv_txt_get_width>
 800d4a4:	0007      	movs	r7, r0
        x += lv_obj_get_width(label) / 2 - line_w / 2;
 800d4a6:	0028      	movs	r0, r5
 800d4a8:	f7fa f9d9 	bl	800785e <lv_obj_get_width>
 800d4ac:	0fc6      	lsrs	r6, r0, #31
 800d4ae:	1830      	adds	r0, r6, r0
 800d4b0:	0ffe      	lsrs	r6, r7, #31
 800d4b2:	19f6      	adds	r6, r6, r7
 800d4b4:	1040      	asrs	r0, r0, #1
 800d4b6:	1076      	asrs	r6, r6, #1
 800d4b8:	1b86      	subs	r6, r0, r6
 800d4ba:	b236      	sxth	r6, r6
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 800d4bc:	230b      	movs	r3, #11
 800d4be:	2200      	movs	r2, #0
 800d4c0:	a90a      	add	r1, sp, #40	; 0x28
 800d4c2:	185b      	adds	r3, r3, r1
 800d4c4:	701a      	strb	r2, [r3, #0]
    if(new_line_start > 0) {
 800d4c6:	9b04      	ldr	r3, [sp, #16]
    uint32_t i         = line_start;
 800d4c8:	940d      	str	r4, [sp, #52]	; 0x34
    if(new_line_start > 0) {
 800d4ca:	4293      	cmp	r3, r2
 800d4cc:	d023      	beq.n	800d516 <lv_label_get_letter_on+0x106>
        while(i <= new_line_start - 1) {
 800d4ce:	9b04      	ldr	r3, [sp, #16]
 800d4d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d4d2:	3b01      	subs	r3, #1
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	d31e      	bcc.n	800d516 <lv_label_get_letter_on+0x106>
            letter = lv_txt_encoded_next(txt, &i);
 800d4d8:	4d2a      	ldr	r5, [pc, #168]	; (800d584 <lv_label_get_letter_on+0x174>)
 800d4da:	a90d      	add	r1, sp, #52	; 0x34
 800d4dc:	682b      	ldr	r3, [r5, #0]
 800d4de:	9805      	ldr	r0, [sp, #20]
 800d4e0:	4798      	blx	r3
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800d4e2:	9b05      	ldr	r3, [sp, #20]
 800d4e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
            letter = lv_txt_encoded_next(txt, &i);
 800d4e6:	0007      	movs	r7, r0
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800d4e8:	2100      	movs	r1, #0
 800d4ea:	1898      	adds	r0, r3, r2
 800d4ec:	682b      	ldr	r3, [r5, #0]
 800d4ee:	4798      	blx	r3
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	9b03      	ldr	r3, [sp, #12]
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 800d4f4:	0005      	movs	r5, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800d4f6:	4213      	tst	r3, r2
 800d4f8:	d130      	bne.n	800d55c <lv_label_get_letter_on+0x14c>
            x += lv_font_get_glyph_width(font, letter, letter_next);
 800d4fa:	002a      	movs	r2, r5
 800d4fc:	0039      	movs	r1, r7
 800d4fe:	9807      	ldr	r0, [sp, #28]
 800d500:	f7fe fae6 	bl	800bad0 <lv_font_get_glyph_width>
            if(pos->x < x) {
 800d504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            x += lv_font_get_glyph_width(font, letter, letter_next);
 800d506:	1986      	adds	r6, r0, r6
 800d508:	b2b6      	uxth	r6, r6
            if(pos->x < x) {
 800d50a:	2200      	movs	r2, #0
 800d50c:	5e9a      	ldrsh	r2, [r3, r2]
 800d50e:	b233      	sxth	r3, r6
 800d510:	429a      	cmp	r2, r3
 800d512:	da2e      	bge.n	800d572 <lv_label_get_letter_on+0x162>
                i = i_current;
 800d514:	940d      	str	r4, [sp, #52]	; 0x34
    return lv_encoded_get_char_id(txt, i);
 800d516:	4b1c      	ldr	r3, [pc, #112]	; (800d588 <lv_label_get_letter_on+0x178>)
 800d518:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	9805      	ldr	r0, [sp, #20]
 800d51e:	4798      	blx	r3
 800d520:	b280      	uxth	r0, r0
}
 800d522:	b00f      	add	sp, #60	; 0x3c
 800d524:	bdf0      	pop	{r4, r5, r6, r7, pc}
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 800d526:	9b06      	ldr	r3, [sp, #24]
 800d528:	9907      	ldr	r1, [sp, #28]
 800d52a:	2228      	movs	r2, #40	; 0x28
 800d52c:	5e9a      	ldrsh	r2, [r3, r2]
 800d52e:	9b03      	ldr	r3, [sp, #12]
 800d530:	0038      	movs	r0, r7
 800d532:	9300      	str	r3, [sp, #0]
 800d534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d536:	f7ff fc55 	bl	800cde4 <lv_txt_get_next_line>
 800d53a:	1903      	adds	r3, r0, r4
 800d53c:	9304      	str	r3, [sp, #16]
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 800d53e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d540:	2202      	movs	r2, #2
 800d542:	5e9a      	ldrsh	r2, [r3, r2]
 800d544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d546:	18f3      	adds	r3, r6, r3
 800d548:	429a      	cmp	r2, r3
 800d54a:	dd98      	ble.n	800d47e <lv_label_get_letter_on+0x6e>
        y += letter_height + style->text.line_space;
 800d54c:	9b06      	ldr	r3, [sp, #24]
 800d54e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 800d552:	9c04      	ldr	r4, [sp, #16]
        y += letter_height + style->text.line_space;
 800d554:	189b      	adds	r3, r3, r2
 800d556:	199e      	adds	r6, r3, r6
 800d558:	b236      	sxth	r6, r6
 800d55a:	e78a      	b.n	800d472 <lv_label_get_letter_on+0x62>
                if(lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 800d55c:	200b      	movs	r0, #11
 800d55e:	9b05      	ldr	r3, [sp, #20]
 800d560:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d562:	5c99      	ldrb	r1, [r3, r2]
 800d564:	ab0a      	add	r3, sp, #40	; 0x28
 800d566:	18c0      	adds	r0, r0, r3
 800d568:	f7ff fc22 	bl	800cdb0 <lv_txt_is_cmd>
 800d56c:	2800      	cmp	r0, #0
 800d56e:	d1ae      	bne.n	800d4ce <lv_label_get_letter_on+0xbe>
 800d570:	e7c3      	b.n	800d4fa <lv_label_get_letter_on+0xea>
            x += style->text.letter_space;
 800d572:	9b06      	ldr	r3, [sp, #24]
            i_current = i;
 800d574:	9c0d      	ldr	r4, [sp, #52]	; 0x34
            x += style->text.letter_space;
 800d576:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 800d578:	1836      	adds	r6, r6, r0
 800d57a:	b236      	sxth	r6, r6
 800d57c:	e7a7      	b.n	800d4ce <lv_label_get_letter_on+0xbe>
 800d57e:	46c0      	nop			; (mov r8, r8)
 800d580:	00007c18 	.word	0x00007c18
 800d584:	20000048 	.word	0x20000048
 800d588:	20000040 	.word	0x20000040

0800d58c <lv_label_refr_text>:
{
 800d58c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d58e:	b095      	sub	sp, #84	; 0x54
 800d590:	9005      	str	r0, [sp, #20]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800d592:	f7fa fa37 	bl	8007a04 <lv_obj_get_ext_attr>
    if(ext->text == NULL) return;
 800d596:	6803      	ldr	r3, [r0, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800d598:	0005      	movs	r5, r0
    if(ext->text == NULL) return;
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d030      	beq.n	800d600 <lv_label_refr_text+0x74>
    lv_coord_t max_w         = lv_obj_get_width(label);
 800d59e:	9805      	ldr	r0, [sp, #20]
 800d5a0:	f7fa f95d 	bl	800785e <lv_obj_get_width>
 800d5a4:	0004      	movs	r4, r0
    const lv_style_t * style = lv_obj_get_style(label);
 800d5a6:	9805      	ldr	r0, [sp, #20]
 800d5a8:	f7fa f966 	bl	8007878 <lv_obj_get_style>
    const lv_font_t * font   = style->text.font;
 800d5ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
    const lv_style_t * style = lv_obj_get_style(label);
 800d5ae:	0007      	movs	r7, r0
    const lv_font_t * font   = style->text.font;
 800d5b0:	9306      	str	r3, [sp, #24]
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 800d5b2:	7c2b      	ldrb	r3, [r5, #16]
 800d5b4:	075a      	lsls	r2, r3, #29
 800d5b6:	d100      	bne.n	800d5ba <lv_label_refr_text+0x2e>
        max_w = LV_COORD_MAX;
 800d5b8:	4cbd      	ldr	r4, [pc, #756]	; (800d8b0 <lv_label_refr_text+0x324>)
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 800d5ba:	065a      	lsls	r2, r3, #25
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800d5bc:	b25b      	sxtb	r3, r3
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 800d5be:	0fd2      	lsrs	r2, r2, #31
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	da01      	bge.n	800d5c8 <lv_label_refr_text+0x3c>
 800d5c4:	2302      	movs	r3, #2
 800d5c6:	431a      	orrs	r2, r3
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 800d5c8:	2128      	movs	r1, #40	; 0x28
 800d5ca:	5e7b      	ldrsh	r3, [r7, r1]
 800d5cc:	9401      	str	r4, [sp, #4]
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 800d5ce:	2407      	movs	r4, #7
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 800d5d0:	9202      	str	r2, [sp, #8]
 800d5d2:	212a      	movs	r1, #42	; 0x2a
 800d5d4:	5e7a      	ldrsh	r2, [r7, r1]
 800d5d6:	a809      	add	r0, sp, #36	; 0x24
 800d5d8:	9200      	str	r2, [sp, #0]
 800d5da:	6829      	ldr	r1, [r5, #0]
 800d5dc:	9a06      	ldr	r2, [sp, #24]
 800d5de:	f7ff fcd1 	bl	800cf84 <lv_txt_get_size>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 800d5e2:	7c28      	ldrb	r0, [r5, #16]
 800d5e4:	4004      	ands	r4, r0
 800d5e6:	d10d      	bne.n	800d604 <lv_label_refr_text+0x78>
        lv_obj_set_size(label, size.x, size.y);
 800d5e8:	ab04      	add	r3, sp, #16
 800d5ea:	2216      	movs	r2, #22
 800d5ec:	5e9a      	ldrsh	r2, [r3, r2]
 800d5ee:	ab04      	add	r3, sp, #16
 800d5f0:	2114      	movs	r1, #20
 800d5f2:	5e59      	ldrsh	r1, [r3, r1]
 800d5f4:	9805      	ldr	r0, [sp, #20]
 800d5f6:	f7fa f887 	bl	8007708 <lv_obj_set_size>
    lv_obj_invalidate(label);
 800d5fa:	9805      	ldr	r0, [sp, #20]
 800d5fc:	f7f9 fc86 	bl	8006f0c <lv_obj_invalidate>
}
 800d600:	b015      	add	sp, #84	; 0x54
 800d602:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
 800d604:	2c03      	cmp	r4, #3
 800d606:	d174      	bne.n	800d6f2 <lv_label_refr_text+0x166>
        anim.repeat   = 1;
 800d608:	221d      	movs	r2, #29
        anim.var      = label;
 800d60a:	9b05      	ldr	r3, [sp, #20]
 800d60c:	ae0b      	add	r6, sp, #44	; 0x2c
 800d60e:	930b      	str	r3, [sp, #44]	; 0x2c
        anim.repeat   = 1;
 800d610:	ab04      	add	r3, sp, #16
 800d612:	18d2      	adds	r2, r2, r3
        anim.playback = 1;
 800d614:	2302      	movs	r3, #2
        anim.repeat   = 1;
 800d616:	7fd1      	ldrb	r1, [r2, #31]
        anim.playback = 1;
 800d618:	430b      	orrs	r3, r1
 800d61a:	2101      	movs	r1, #1
 800d61c:	430b      	orrs	r3, r1
 800d61e:	77d3      	strb	r3, [r2, #31]
        anim.start    = 0;
 800d620:	2300      	movs	r3, #0
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800d622:	2220      	movs	r2, #32
        anim.start    = 0;
 800d624:	6133      	str	r3, [r6, #16]
        anim.ready_cb = NULL;
 800d626:	60f3      	str	r3, [r6, #12]
        anim.path_cb  = lv_anim_path_linear;
 800d628:	4ba2      	ldr	r3, [pc, #648]	; (800d8b4 <lv_label_refr_text+0x328>)
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800d62a:	0011      	movs	r1, r2
 800d62c:	6a78      	ldr	r0, [r7, #36]	; 0x24
        anim.path_cb  = lv_anim_path_linear;
 800d62e:	60b3      	str	r3, [r6, #8]
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800d630:	f7fe fa4e 	bl	800bad0 <lv_font_get_glyph_width>
 800d634:	2228      	movs	r2, #40	; 0x28
 800d636:	5ebb      	ldrsh	r3, [r7, r2]
             ext->anim_speed) *
 800d638:	89e9      	ldrh	r1, [r5, #14]
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800d63a:	181b      	adds	r3, r3, r0
 800d63c:	20fa      	movs	r0, #250	; 0xfa
 800d63e:	0080      	lsls	r0, r0, #2
 800d640:	4358      	muls	r0, r3
 800d642:	f7f2 fe17 	bl	8000274 <__divsi3>
        anim.playback_pause =
 800d646:	4360      	muls	r0, r4
 800d648:	b280      	uxth	r0, r0
 800d64a:	83b0      	strh	r0, [r6, #28]
        anim.repeat_pause = anim.playback_pause;
 800d64c:	83f0      	strh	r0, [r6, #30]
        anim.act_time     = -anim.playback_pause;
 800d64e:	4240      	negs	r0, r0
 800d650:	8370      	strh	r0, [r6, #26]
        if(size.x > lv_obj_get_width(label)) {
 800d652:	ab04      	add	r3, sp, #16
 800d654:	9805      	ldr	r0, [sp, #20]
 800d656:	2714      	movs	r7, #20
 800d658:	5fdf      	ldrsh	r7, [r3, r7]
 800d65a:	f7fa f900 	bl	800785e <lv_obj_get_width>
 800d65e:	4c96      	ldr	r4, [pc, #600]	; (800d8b8 <lv_label_refr_text+0x32c>)
 800d660:	4287      	cmp	r7, r0
 800d662:	dd37      	ble.n	800d6d4 <lv_label_refr_text+0x148>
            anim.end     = lv_obj_get_width(label) - size.x;
 800d664:	9805      	ldr	r0, [sp, #20]
 800d666:	f7fa f8fa 	bl	800785e <lv_obj_get_width>
 800d66a:	ab04      	add	r3, sp, #16
 800d66c:	2214      	movs	r2, #20
 800d66e:	5e9a      	ldrsh	r2, [r3, r2]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 800d670:	6074      	str	r4, [r6, #4]
            anim.end     = lv_obj_get_width(label) - size.x;
 800d672:	1a82      	subs	r2, r0, r2
 800d674:	6172      	str	r2, [r6, #20]
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800d676:	2310      	movs	r3, #16
 800d678:	5ef1      	ldrsh	r1, [r6, r3]
 800d67a:	b212      	sxth	r2, r2
 800d67c:	89e8      	ldrh	r0, [r5, #14]
 800d67e:	f7fe fd4f 	bl	800c120 <lv_anim_speed_to_time>
 800d682:	8330      	strh	r0, [r6, #24]
            lv_anim_create(&anim);
 800d684:	0030      	movs	r0, r6
 800d686:	f7fe fd25 	bl	800c0d4 <lv_anim_create>
            hor_anim = true;
 800d68a:	2401      	movs	r4, #1
        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 800d68c:	ab04      	add	r3, sp, #16
 800d68e:	2216      	movs	r2, #22
 800d690:	5e9b      	ldrsh	r3, [r3, r2]
 800d692:	9805      	ldr	r0, [sp, #20]
 800d694:	9307      	str	r3, [sp, #28]
 800d696:	f7fa f8e8 	bl	800786a <lv_obj_get_height>
 800d69a:	9b07      	ldr	r3, [sp, #28]
 800d69c:	4f87      	ldr	r7, [pc, #540]	; (800d8bc <lv_label_refr_text+0x330>)
 800d69e:	4283      	cmp	r3, r0
 800d6a0:	dd20      	ble.n	800d6e4 <lv_label_refr_text+0x158>
 800d6a2:	2c00      	cmp	r4, #0
 800d6a4:	d11e      	bne.n	800d6e4 <lv_label_refr_text+0x158>
            anim.end     = lv_obj_get_height(label) - size.y - (lv_font_get_line_height(font));
 800d6a6:	9805      	ldr	r0, [sp, #20]
 800d6a8:	f7fa f8df 	bl	800786a <lv_obj_get_height>
 800d6ac:	ab04      	add	r3, sp, #16
 800d6ae:	2216      	movs	r2, #22
 800d6b0:	5e9a      	ldrsh	r2, [r3, r2]
 800d6b2:	9b06      	ldr	r3, [sp, #24]
 800d6b4:	1a82      	subs	r2, r0, r2
 800d6b6:	7a18      	ldrb	r0, [r3, #8]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 800d6b8:	6077      	str	r7, [r6, #4]
            anim.end     = lv_obj_get_height(label) - size.y - (lv_font_get_line_height(font));
 800d6ba:	1a12      	subs	r2, r2, r0
 800d6bc:	6172      	str	r2, [r6, #20]
            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800d6be:	2310      	movs	r3, #16
 800d6c0:	5ef1      	ldrsh	r1, [r6, r3]
 800d6c2:	b212      	sxth	r2, r2
 800d6c4:	89e8      	ldrh	r0, [r5, #14]
 800d6c6:	f7fe fd2b 	bl	800c120 <lv_anim_speed_to_time>
 800d6ca:	8330      	strh	r0, [r6, #24]
            lv_anim_create(&anim);
 800d6cc:	0030      	movs	r0, r6
            lv_anim_create(&anim);
 800d6ce:	f7fe fd01 	bl	800c0d4 <lv_anim_create>
 800d6d2:	e792      	b.n	800d5fa <lv_label_refr_text+0x6e>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 800d6d4:	0021      	movs	r1, r4
 800d6d6:	9805      	ldr	r0, [sp, #20]
 800d6d8:	f7fe fcd0 	bl	800c07c <lv_anim_del>
            ext->offset.x = 0;
 800d6dc:	2300      	movs	r3, #0
        bool hor_anim = false;
 800d6de:	2400      	movs	r4, #0
            ext->offset.x = 0;
 800d6e0:	816b      	strh	r3, [r5, #10]
 800d6e2:	e7d3      	b.n	800d68c <lv_label_refr_text+0x100>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 800d6e4:	0039      	movs	r1, r7
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 800d6e6:	9805      	ldr	r0, [sp, #20]
 800d6e8:	f7fe fcc8 	bl	800c07c <lv_anim_del>
            ext->offset.y = 0;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	81ab      	strh	r3, [r5, #12]
 800d6f0:	e783      	b.n	800d5fa <lv_label_refr_text+0x6e>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 800d6f2:	2c04      	cmp	r4, #4
 800d6f4:	d168      	bne.n	800d7c8 <lv_label_refr_text+0x23c>
        anim.repeat   = 1;
 800d6f6:	221d      	movs	r2, #29
        anim.var      = label;
 800d6f8:	9b05      	ldr	r3, [sp, #20]
        anim.start    = 0;
 800d6fa:	2600      	movs	r6, #0
        anim.var      = label;
 800d6fc:	930b      	str	r3, [sp, #44]	; 0x2c
        anim.repeat   = 1;
 800d6fe:	ab04      	add	r3, sp, #16
 800d700:	18d2      	adds	r2, r2, r3
        anim.playback = 0;
 800d702:	2302      	movs	r3, #2
        anim.repeat   = 1;
 800d704:	7fd1      	ldrb	r1, [r2, #31]
        anim.var      = label;
 800d706:	ac0b      	add	r4, sp, #44	; 0x2c
        anim.playback = 0;
 800d708:	430b      	orrs	r3, r1
 800d70a:	2101      	movs	r1, #1
 800d70c:	438b      	bics	r3, r1
 800d70e:	77d3      	strb	r3, [r2, #31]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800d710:	2220      	movs	r2, #32
 800d712:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d714:	0011      	movs	r1, r2
        anim.start    = 0;
 800d716:	6126      	str	r6, [r4, #16]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800d718:	f7fe f9da 	bl	800bad0 <lv_font_get_glyph_width>
 800d71c:	2228      	movs	r2, #40	; 0x28
 800d71e:	5ebb      	ldrsh	r3, [r7, r2]
                          ext->anim_speed) *
 800d720:	89e9      	ldrh	r1, [r5, #14]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800d722:	181b      	adds	r3, r3, r0
 800d724:	4866      	ldr	r0, [pc, #408]	; (800d8c0 <lv_label_refr_text+0x334>)
 800d726:	4358      	muls	r0, r3
 800d728:	f7f2 fda4 	bl	8000274 <__divsi3>
 800d72c:	2303      	movs	r3, #3
 800d72e:	4358      	muls	r0, r3
        anim.path_cb        = lv_anim_path_linear;
 800d730:	4b60      	ldr	r3, [pc, #384]	; (800d8b4 <lv_label_refr_text+0x328>)
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 800d732:	8360      	strh	r0, [r4, #26]
        anim.path_cb        = lv_anim_path_linear;
 800d734:	60a3      	str	r3, [r4, #8]
        if(size.x > lv_obj_get_width(label)) {
 800d736:	9805      	ldr	r0, [sp, #20]
 800d738:	ab04      	add	r3, sp, #16
 800d73a:	2714      	movs	r7, #20
 800d73c:	5fdf      	ldrsh	r7, [r3, r7]
        anim.ready_cb       = NULL;
 800d73e:	60e6      	str	r6, [r4, #12]
        anim.playback_pause = 0;
 800d740:	83a6      	strh	r6, [r4, #28]
        anim.repeat_pause   = 0;
 800d742:	83e6      	strh	r6, [r4, #30]
        if(size.x > lv_obj_get_width(label)) {
 800d744:	f7fa f88b 	bl	800785e <lv_obj_get_width>
 800d748:	4287      	cmp	r7, r0
 800d74a:	dd36      	ble.n	800d7ba <lv_label_refr_text+0x22e>
            anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800d74c:	2220      	movs	r2, #32
 800d74e:	9806      	ldr	r0, [sp, #24]
 800d750:	0011      	movs	r1, r2
 800d752:	f7fe f9bd 	bl	800bad0 <lv_font_get_glyph_width>
 800d756:	ab04      	add	r3, sp, #16
 800d758:	0082      	lsls	r2, r0, #2
 800d75a:	1a80      	subs	r0, r0, r2
 800d75c:	2214      	movs	r2, #20
 800d75e:	5e9a      	ldrsh	r2, [r3, r2]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 800d760:	4b55      	ldr	r3, [pc, #340]	; (800d8b8 <lv_label_refr_text+0x32c>)
            anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800d762:	1a82      	subs	r2, r0, r2
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 800d764:	6063      	str	r3, [r4, #4]
            anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 800d766:	6162      	str	r2, [r4, #20]
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800d768:	2310      	movs	r3, #16
 800d76a:	5ee1      	ldrsh	r1, [r4, r3]
 800d76c:	b212      	sxth	r2, r2
 800d76e:	89e8      	ldrh	r0, [r5, #14]
 800d770:	f7fe fcd6 	bl	800c120 <lv_anim_speed_to_time>
 800d774:	8320      	strh	r0, [r4, #24]
            lv_anim_create(&anim);
 800d776:	0020      	movs	r0, r4
 800d778:	f7fe fcac 	bl	800c0d4 <lv_anim_create>
            hor_anim = true;
 800d77c:	2701      	movs	r7, #1
        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 800d77e:	ae09      	add	r6, sp, #36	; 0x24
 800d780:	2202      	movs	r2, #2
 800d782:	5eb3      	ldrsh	r3, [r6, r2]
 800d784:	9805      	ldr	r0, [sp, #20]
 800d786:	9307      	str	r3, [sp, #28]
 800d788:	f7fa f86f 	bl	800786a <lv_obj_get_height>
 800d78c:	9b07      	ldr	r3, [sp, #28]
 800d78e:	494b      	ldr	r1, [pc, #300]	; (800d8bc <lv_label_refr_text+0x330>)
 800d790:	4283      	cmp	r3, r0
 800d792:	dda8      	ble.n	800d6e6 <lv_label_refr_text+0x15a>
 800d794:	2f00      	cmp	r7, #0
 800d796:	d1a6      	bne.n	800d6e6 <lv_label_refr_text+0x15a>
            anim.end     = -size.y - (lv_font_get_line_height(font));
 800d798:	2302      	movs	r3, #2
 800d79a:	5ef2      	ldrsh	r2, [r6, r3]
 800d79c:	9b06      	ldr	r3, [sp, #24]
 800d79e:	4252      	negs	r2, r2
 800d7a0:	7a1b      	ldrb	r3, [r3, #8]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 800d7a2:	6061      	str	r1, [r4, #4]
            anim.end     = -size.y - (lv_font_get_line_height(font));
 800d7a4:	1ad2      	subs	r2, r2, r3
 800d7a6:	6162      	str	r2, [r4, #20]
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 800d7a8:	2310      	movs	r3, #16
 800d7aa:	5ee1      	ldrsh	r1, [r4, r3]
 800d7ac:	b212      	sxth	r2, r2
 800d7ae:	89e8      	ldrh	r0, [r5, #14]
 800d7b0:	f7fe fcb6 	bl	800c120 <lv_anim_speed_to_time>
 800d7b4:	8320      	strh	r0, [r4, #24]
            lv_anim_create(&anim);
 800d7b6:	0020      	movs	r0, r4
 800d7b8:	e789      	b.n	800d6ce <lv_label_refr_text+0x142>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 800d7ba:	493f      	ldr	r1, [pc, #252]	; (800d8b8 <lv_label_refr_text+0x32c>)
 800d7bc:	9805      	ldr	r0, [sp, #20]
 800d7be:	f7fe fc5d 	bl	800c07c <lv_anim_del>
        bool hor_anim = false;
 800d7c2:	0037      	movs	r7, r6
            ext->offset.x = 0;
 800d7c4:	816e      	strh	r6, [r5, #10]
 800d7c6:	e7da      	b.n	800d77e <lv_label_refr_text+0x1f2>
    } else if(ext->long_mode == LV_LABEL_LONG_DOT) {
 800d7c8:	2c02      	cmp	r4, #2
 800d7ca:	d166      	bne.n	800d89a <lv_label_refr_text+0x30e>
        if(size.y <= lv_obj_get_height(label)) { /*No dots are required, the text is short enough*/
 800d7cc:	ab04      	add	r3, sp, #16
 800d7ce:	9805      	ldr	r0, [sp, #20]
 800d7d0:	2416      	movs	r4, #22
 800d7d2:	5f1c      	ldrsh	r4, [r3, r4]
 800d7d4:	f7fa f849 	bl	800786a <lv_obj_get_height>
 800d7d8:	4284      	cmp	r4, r0
 800d7da:	dc03      	bgt.n	800d7e4 <lv_label_refr_text+0x258>
            ext->dot_end = LV_LABEL_DOT_END_INV;
 800d7dc:	2301      	movs	r3, #1
 800d7de:	425b      	negs	r3, r3
 800d7e0:	812b      	strh	r3, [r5, #8]
 800d7e2:	e70a      	b.n	800d5fa <lv_label_refr_text+0x6e>
        } else if(lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) { /*Don't turn to dots all the characters*/
 800d7e4:	4b37      	ldr	r3, [pc, #220]	; (800d8c4 <lv_label_refr_text+0x338>)
 800d7e6:	6828      	ldr	r0, [r5, #0]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	4798      	blx	r3
 800d7ec:	2803      	cmp	r0, #3
 800d7ee:	d9f5      	bls.n	800d7dc <lv_label_refr_text+0x250>
            p.x = lv_obj_get_width(label) -
 800d7f0:	9805      	ldr	r0, [sp, #20]
 800d7f2:	f7fa f834 	bl	800785e <lv_obj_get_width>
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 800d7f6:	222e      	movs	r2, #46	; 0x2e
            p.x = lv_obj_get_width(label) -
 800d7f8:	0004      	movs	r4, r0
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 800d7fa:	0011      	movs	r1, r2
 800d7fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d7fe:	f7fe f967 	bl	800bad0 <lv_font_get_glyph_width>
 800d802:	2228      	movs	r2, #40	; 0x28
 800d804:	5ebb      	ldrsh	r3, [r7, r2]
 800d806:	1818      	adds	r0, r3, r0
            p.x = lv_obj_get_width(label) -
 800d808:	0083      	lsls	r3, r0, #2
 800d80a:	1ac0      	subs	r0, r0, r3
 800d80c:	1904      	adds	r4, r0, r4
 800d80e:	ab04      	add	r3, sp, #16
            p.y = lv_obj_get_height(label);
 800d810:	9805      	ldr	r0, [sp, #20]
            p.x = lv_obj_get_width(label) -
 800d812:	831c      	strh	r4, [r3, #24]
            p.y = lv_obj_get_height(label);
 800d814:	f7fa f829 	bl	800786a <lv_obj_get_height>
                   (lv_font_get_line_height(style->text.font) + style->text.line_space); /*Round down to the last line*/
 800d818:	232a      	movs	r3, #42	; 0x2a
 800d81a:	5efe      	ldrsh	r6, [r7, r3]
 800d81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
            p.y = lv_obj_get_height(label);
 800d81e:	0004      	movs	r4, r0
                   (lv_font_get_line_height(style->text.font) + style->text.line_space); /*Round down to the last line*/
 800d820:	7a19      	ldrb	r1, [r3, #8]
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 800d822:	2704      	movs	r7, #4
                   (lv_font_get_line_height(style->text.font) + style->text.line_space); /*Round down to the last line*/
 800d824:	1989      	adds	r1, r1, r6
            p.y -= p.y %
 800d826:	f7f2 fe0b 	bl	8000440 <__aeabi_idivmod>
 800d82a:	1a64      	subs	r4, r4, r1
            p.y -= style->text.line_space;                                               /*Trim the last line space*/
 800d82c:	1ba6      	subs	r6, r4, r6
 800d82e:	ab04      	add	r3, sp, #16
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 800d830:	a90a      	add	r1, sp, #40	; 0x28
 800d832:	9805      	ldr	r0, [sp, #20]
            p.y -= style->text.line_space;                                               /*Trim the last line space*/
 800d834:	835e      	strh	r6, [r3, #26]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 800d836:	f7ff fdeb 	bl	800d410 <lv_label_get_letter_on>
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 800d83a:	4b23      	ldr	r3, [pc, #140]	; (800d8c8 <lv_label_refr_text+0x33c>)
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 800d83c:	9006      	str	r0, [sp, #24]
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 800d83e:	0001      	movs	r1, r0
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	6828      	ldr	r0, [r5, #0]
 800d844:	4798      	blx	r3
            uint8_t len          = 0;
 800d846:	2600      	movs	r6, #0
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 800d848:	0004      	movs	r4, r0
 800d84a:	900b      	str	r0, [sp, #44]	; 0x2c
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 800d84c:	682b      	ldr	r3, [r5, #0]
 800d84e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d850:	3f01      	subs	r7, #1
 800d852:	1898      	adds	r0, r3, r2
 800d854:	4b1d      	ldr	r3, [pc, #116]	; (800d8cc <lv_label_refr_text+0x340>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	4798      	blx	r3
 800d85a:	1983      	adds	r3, r0, r6
 800d85c:	b2de      	uxtb	r6, r3
                lv_txt_encoded_next(ext->text, &byte_id);
 800d85e:	4b1c      	ldr	r3, [pc, #112]	; (800d8d0 <lv_label_refr_text+0x344>)
 800d860:	a90b      	add	r1, sp, #44	; 0x2c
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	6828      	ldr	r0, [r5, #0]
 800d866:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 800d868:	2f00      	cmp	r7, #0
 800d86a:	d1ef      	bne.n	800d84c <lv_label_refr_text+0x2c0>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
 800d86c:	682b      	ldr	r3, [r5, #0]
 800d86e:	b2b2      	uxth	r2, r6
 800d870:	1919      	adds	r1, r3, r4
 800d872:	9805      	ldr	r0, [sp, #20]
 800d874:	f7ff fc62 	bl	800d13c <lv_label_set_dot_tmp>
 800d878:	2800      	cmp	r0, #0
 800d87a:	d100      	bne.n	800d87e <lv_label_refr_text+0x2f2>
 800d87c:	e6bd      	b.n	800d5fa <lv_label_refr_text+0x6e>
                    ext->text[byte_id_ori + i] = '.';
 800d87e:	222e      	movs	r2, #46	; 0x2e
 800d880:	1ce3      	adds	r3, r4, #3
 800d882:	6829      	ldr	r1, [r5, #0]
 800d884:	550a      	strb	r2, [r1, r4]
 800d886:	3401      	adds	r4, #1
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 800d888:	42a3      	cmp	r3, r4
 800d88a:	d1fa      	bne.n	800d882 <lv_label_refr_text+0x2f6>
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 800d88c:	2200      	movs	r2, #0
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 800d88e:	9e06      	ldr	r6, [sp, #24]
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 800d890:	6829      	ldr	r1, [r5, #0]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 800d892:	3603      	adds	r6, #3
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 800d894:	54ca      	strb	r2, [r1, r3]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 800d896:	812e      	strh	r6, [r5, #8]
 800d898:	e6af      	b.n	800d5fa <lv_label_refr_text+0x6e>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
 800d89a:	2c01      	cmp	r4, #1
 800d89c:	d000      	beq.n	800d8a0 <lv_label_refr_text+0x314>
 800d89e:	e6ac      	b.n	800d5fa <lv_label_refr_text+0x6e>
        lv_obj_set_height(label, size.y);
 800d8a0:	ab04      	add	r3, sp, #16
 800d8a2:	2116      	movs	r1, #22
 800d8a4:	5e59      	ldrsh	r1, [r3, r1]
 800d8a6:	9805      	ldr	r0, [sp, #20]
 800d8a8:	f7f9 ff79 	bl	800779e <lv_obj_set_height>
 800d8ac:	e6a5      	b.n	800d5fa <lv_label_refr_text+0x6e>
 800d8ae:	46c0      	nop			; (mov r8, r8)
 800d8b0:	00007c18 	.word	0x00007c18
 800d8b4:	0800bf15 	.word	0x0800bf15
 800d8b8:	0800d129 	.word	0x0800d129
 800d8bc:	0800d115 	.word	0x0800d115
 800d8c0:	fffffc18 	.word	0xfffffc18
 800d8c4:	20000054 	.word	0x20000054
 800d8c8:	20000044 	.word	0x20000044
 800d8cc:	20000050 	.word	0x20000050
 800d8d0:	20000048 	.word	0x20000048

0800d8d4 <lv_label_signal>:
    res = ancestor_signal(label, sign, param);
 800d8d4:	4b3a      	ldr	r3, [pc, #232]	; (800d9c0 <lv_label_signal+0xec>)
{
 800d8d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    res = ancestor_signal(label, sign, param);
 800d8d8:	681b      	ldr	r3, [r3, #0]
{
 800d8da:	0004      	movs	r4, r0
 800d8dc:	000e      	movs	r6, r1
 800d8de:	0015      	movs	r5, r2
    res = ancestor_signal(label, sign, param);
 800d8e0:	4798      	blx	r3
 800d8e2:	9001      	str	r0, [sp, #4]
    if(res != LV_RES_OK) return res;
 800d8e4:	2801      	cmp	r0, #1
 800d8e6:	d110      	bne.n	800d90a <lv_label_signal+0x36>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800d8e8:	0020      	movs	r0, r4
 800d8ea:	f7fa f88b 	bl	8007a04 <lv_obj_get_ext_attr>
 800d8ee:	0007      	movs	r7, r0
    if(sign == LV_SIGNAL_CLEANUP) {
 800d8f0:	2e00      	cmp	r6, #0
 800d8f2:	d10c      	bne.n	800d90e <lv_label_signal+0x3a>
        if(ext->static_txt == 0) {
 800d8f4:	2308      	movs	r3, #8
 800d8f6:	7c05      	ldrb	r5, [r0, #16]
 800d8f8:	401d      	ands	r5, r3
 800d8fa:	d103      	bne.n	800d904 <lv_label_signal+0x30>
            lv_mem_free(ext->text);
 800d8fc:	6800      	ldr	r0, [r0, #0]
 800d8fe:	f7fe ffc3 	bl	800c888 <lv_mem_free>
            ext->text = NULL;
 800d902:	603d      	str	r5, [r7, #0]
        lv_label_dot_tmp_free(label);
 800d904:	0020      	movs	r0, r4
 800d906:	f7ff fbbb 	bl	800d080 <lv_label_dot_tmp_free>
}
 800d90a:	9801      	ldr	r0, [sp, #4]
 800d90c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 800d90e:	2e04      	cmp	r6, #4
 800d910:	d106      	bne.n	800d920 <lv_label_signal+0x4c>
        lv_label_revert_dots(label);
 800d912:	0020      	movs	r0, r4
 800d914:	f7ff fbc8 	bl	800d0a8 <lv_label_revert_dots>
        lv_label_refr_text(label);
 800d918:	0020      	movs	r0, r4
 800d91a:	f7ff fe37 	bl	800d58c <lv_label_refr_text>
 800d91e:	e7f4      	b.n	800d90a <lv_label_signal+0x36>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 800d920:	2e02      	cmp	r6, #2
 800d922:	d118      	bne.n	800d956 <lv_label_signal+0x82>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return area_p->x2 - area_p->x1 + 1;
 800d924:	8aa2      	ldrh	r2, [r4, #20]
 800d926:	8a23      	ldrh	r3, [r4, #16]
 800d928:	3201      	adds	r2, #1
 800d92a:	1ad2      	subs	r2, r2, r3
 800d92c:	88ab      	ldrh	r3, [r5, #4]
 800d92e:	8829      	ldrh	r1, [r5, #0]
 800d930:	3301      	adds	r3, #1
 800d932:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
 800d934:	b292      	uxth	r2, r2
 800d936:	b29b      	uxth	r3, r3
 800d938:	429a      	cmp	r2, r3
 800d93a:	d1ea      	bne.n	800d912 <lv_label_signal+0x3e>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return area_p->y2 - area_p->y1 + 1;
 800d93c:	8ae2      	ldrh	r2, [r4, #22]
 800d93e:	8a63      	ldrh	r3, [r4, #18]
 800d940:	3201      	adds	r2, #1
 800d942:	1ad2      	subs	r2, r2, r3
 800d944:	88eb      	ldrh	r3, [r5, #6]
 800d946:	8869      	ldrh	r1, [r5, #2]
 800d948:	3301      	adds	r3, #1
 800d94a:	1a5b      	subs	r3, r3, r1
 800d94c:	b292      	uxth	r2, r2
 800d94e:	b29b      	uxth	r3, r3
 800d950:	429a      	cmp	r2, r3
 800d952:	d1de      	bne.n	800d912 <lv_label_signal+0x3e>
 800d954:	e7d9      	b.n	800d90a <lv_label_signal+0x36>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 800d956:	2e05      	cmp	r6, #5
 800d958:	d122      	bne.n	800d9a0 <lv_label_signal+0xcc>
        if(ext->body_draw) {
 800d95a:	7c43      	ldrb	r3, [r0, #17]
 800d95c:	9a01      	ldr	r2, [sp, #4]
 800d95e:	421a      	tst	r2, r3
 800d960:	d0d3      	beq.n	800d90a <lv_label_signal+0x36>
 * @return pointer to the label's style
 */
static inline const lv_style_t * lv_label_get_style(const lv_obj_t * label, lv_label_style_t type)
{
    (void)type; /*Unused*/
    return lv_obj_get_style(label);
 800d962:	0020      	movs	r0, r4
 800d964:	f7f9 ff88 	bl	8007878 <lv_obj_get_style>
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.right);
 800d968:	8b42      	ldrh	r2, [r0, #26]
 800d96a:	8b81      	ldrh	r1, [r0, #28]
 800d96c:	1c13      	adds	r3, r2, #0
 800d96e:	b20d      	sxth	r5, r1
 800d970:	b212      	sxth	r2, r2
 800d972:	42aa      	cmp	r2, r5
 800d974:	da00      	bge.n	800d978 <lv_label_signal+0xa4>
 800d976:	1c0b      	adds	r3, r1, #0
 800d978:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 800d97a:	b21d      	sxth	r5, r3
 800d97c:	b211      	sxth	r1, r2
 800d97e:	428d      	cmp	r5, r1
 800d980:	da00      	bge.n	800d984 <lv_label_signal+0xb0>
 800d982:	1c13      	adds	r3, r2, #0
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.top);
 800d984:	8ac2      	ldrh	r2, [r0, #22]
 800d986:	b21d      	sxth	r5, r3
 800d988:	b211      	sxth	r1, r2
 800d98a:	428d      	cmp	r5, r1
 800d98c:	da00      	bge.n	800d990 <lv_label_signal+0xbc>
 800d98e:	1c13      	adds	r3, r2, #0
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.bottom);
 800d990:	8b02      	ldrh	r2, [r0, #24]
 800d992:	b218      	sxth	r0, r3
 800d994:	b211      	sxth	r1, r2
 800d996:	4288      	cmp	r0, r1
 800d998:	da00      	bge.n	800d99c <lv_label_signal+0xc8>
 800d99a:	1c13      	adds	r3, r2, #0
 800d99c:	86a3      	strh	r3, [r4, #52]	; 0x34
 800d99e:	e7b4      	b.n	800d90a <lv_label_signal+0x36>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 800d9a0:	2e06      	cmp	r6, #6
 800d9a2:	d1b2      	bne.n	800d90a <lv_label_signal+0x36>
 800d9a4:	2300      	movs	r3, #0
            if(buf->type[i] == NULL) break;
 800d9a6:	0099      	lsls	r1, r3, #2
 800d9a8:	5869      	ldr	r1, [r5, r1]
 800d9aa:	b2da      	uxtb	r2, r3
 800d9ac:	2900      	cmp	r1, #0
 800d9ae:	d003      	beq.n	800d9b8 <lv_label_signal+0xe4>
 800d9b0:	3301      	adds	r3, #1
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 800d9b2:	2b07      	cmp	r3, #7
 800d9b4:	d1f7      	bne.n	800d9a6 <lv_label_signal+0xd2>
 800d9b6:	001a      	movs	r2, r3
        buf->type[i] = "lv_label";
 800d9b8:	4b02      	ldr	r3, [pc, #8]	; (800d9c4 <lv_label_signal+0xf0>)
 800d9ba:	0092      	lsls	r2, r2, #2
 800d9bc:	5153      	str	r3, [r2, r5]
 800d9be:	e7a4      	b.n	800d90a <lv_label_signal+0x36>
 800d9c0:	20004680 	.word	0x20004680
 800d9c4:	08013ced 	.word	0x08013ced

0800d9c8 <lv_label_set_text>:
{
 800d9c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d9ca:	0007      	movs	r7, r0
 800d9cc:	000d      	movs	r5, r1
    lv_obj_invalidate(label);
 800d9ce:	f7f9 fa9d 	bl	8006f0c <lv_obj_invalidate>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800d9d2:	0038      	movs	r0, r7
 800d9d4:	f7fa f816 	bl	8007a04 <lv_obj_get_ext_attr>
 800d9d8:	0004      	movs	r4, r0
    if(text == NULL) {
 800d9da:	2d00      	cmp	r5, #0
 800d9dc:	d103      	bne.n	800d9e6 <lv_label_set_text+0x1e>
        lv_label_refr_text(label);
 800d9de:	0038      	movs	r0, r7
 800d9e0:	f7ff fdd4 	bl	800d58c <lv_label_refr_text>
}
 800d9e4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    if(ext->text == text) {
 800d9e6:	6803      	ldr	r3, [r0, #0]
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 800d9e8:	0028      	movs	r0, r5
    if(ext->text == text) {
 800d9ea:	9300      	str	r3, [sp, #0]
 800d9ec:	429d      	cmp	r5, r3
 800d9ee:	d109      	bne.n	800da04 <lv_label_set_text+0x3c>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 800d9f0:	f7f2 fb90 	bl	8000114 <strlen>
 800d9f4:	1c41      	adds	r1, r0, #1
 800d9f6:	0028      	movs	r0, r5
 800d9f8:	f7fe ff70 	bl	800c8dc <lv_mem_realloc>
 800d9fc:	6020      	str	r0, [r4, #0]
        lv_mem_assert(ext->text);
 800d9fe:	2800      	cmp	r0, #0
 800da00:	d1ed      	bne.n	800d9de <lv_label_set_text+0x16>
 800da02:	e7fe      	b.n	800da02 <lv_label_set_text+0x3a>
        uint32_t len = strlen(text) + 1;
 800da04:	f7f2 fb86 	bl	8000114 <strlen>
 800da08:	1c43      	adds	r3, r0, #1
 800da0a:	9301      	str	r3, [sp, #4]
        if(ext->text != NULL && ext->static_txt == 0) {
 800da0c:	9b00      	ldr	r3, [sp, #0]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d007      	beq.n	800da22 <lv_label_set_text+0x5a>
 800da12:	2308      	movs	r3, #8
 800da14:	7c26      	ldrb	r6, [r4, #16]
 800da16:	401e      	ands	r6, r3
 800da18:	d103      	bne.n	800da22 <lv_label_set_text+0x5a>
            lv_mem_free(ext->text);
 800da1a:	9800      	ldr	r0, [sp, #0]
 800da1c:	f7fe ff34 	bl	800c888 <lv_mem_free>
            ext->text = NULL;
 800da20:	6026      	str	r6, [r4, #0]
        ext->text = lv_mem_alloc(len);
 800da22:	9801      	ldr	r0, [sp, #4]
 800da24:	f7fe fefc 	bl	800c820 <lv_mem_alloc>
 800da28:	6020      	str	r0, [r4, #0]
        lv_mem_assert(ext->text);
 800da2a:	2800      	cmp	r0, #0
 800da2c:	d100      	bne.n	800da30 <lv_label_set_text+0x68>
 800da2e:	e7fe      	b.n	800da2e <lv_label_set_text+0x66>
        strcpy(ext->text, text);
 800da30:	0029      	movs	r1, r5
 800da32:	f000 fc01 	bl	800e238 <strcpy>
        ext->static_txt = 0; /*Now the text is dynamically allocated*/
 800da36:	2208      	movs	r2, #8
 800da38:	7c23      	ldrb	r3, [r4, #16]
 800da3a:	4393      	bics	r3, r2
 800da3c:	7423      	strb	r3, [r4, #16]
 800da3e:	e7ce      	b.n	800d9de <lv_label_set_text+0x16>

0800da40 <lv_label_set_static_text>:
{
 800da40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da42:	0006      	movs	r6, r0
 800da44:	000f      	movs	r7, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800da46:	f7f9 ffdd 	bl	8007a04 <lv_obj_get_ext_attr>
    if(ext->static_txt == 0 && ext->text != NULL) {
 800da4a:	2308      	movs	r3, #8
 800da4c:	7c05      	ldrb	r5, [r0, #16]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800da4e:	0004      	movs	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
 800da50:	401d      	ands	r5, r3
 800da52:	d105      	bne.n	800da60 <lv_label_set_static_text+0x20>
 800da54:	6800      	ldr	r0, [r0, #0]
 800da56:	2800      	cmp	r0, #0
 800da58:	d002      	beq.n	800da60 <lv_label_set_static_text+0x20>
        lv_mem_free(ext->text);
 800da5a:	f7fe ff15 	bl	800c888 <lv_mem_free>
        ext->text = NULL;
 800da5e:	6025      	str	r5, [r4, #0]
    if(text != NULL) {
 800da60:	2f00      	cmp	r7, #0
 800da62:	d004      	beq.n	800da6e <lv_label_set_static_text+0x2e>
        ext->static_txt = 1;
 800da64:	2308      	movs	r3, #8
 800da66:	7c22      	ldrb	r2, [r4, #16]
        ext->text       = (char *)text;
 800da68:	6027      	str	r7, [r4, #0]
        ext->static_txt = 1;
 800da6a:	4313      	orrs	r3, r2
 800da6c:	7423      	strb	r3, [r4, #16]
    lv_label_refr_text(label);
 800da6e:	0030      	movs	r0, r6
 800da70:	f7ff fd8c 	bl	800d58c <lv_label_refr_text>
}
 800da74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800da78 <lv_label_set_long_mode>:
{
 800da78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da7a:	0005      	movs	r5, r0
 800da7c:	000f      	movs	r7, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800da7e:	f7f9 ffc1 	bl	8007a04 <lv_obj_get_ext_attr>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
 800da82:	491a      	ldr	r1, [pc, #104]	; (800daec <lv_label_set_long_mode+0x74>)
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800da84:	0004      	movs	r4, r0
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
 800da86:	0028      	movs	r0, r5
 800da88:	f7fe faf8 	bl	800c07c <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_y);
 800da8c:	4918      	ldr	r1, [pc, #96]	; (800daf0 <lv_label_set_long_mode+0x78>)
 800da8e:	0028      	movs	r0, r5
 800da90:	f7fe faf4 	bl	800c07c <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 800da94:	4917      	ldr	r1, [pc, #92]	; (800daf4 <lv_label_set_long_mode+0x7c>)
 800da96:	0028      	movs	r0, r5
 800da98:	f7fe faf0 	bl	800c07c <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 800da9c:	4916      	ldr	r1, [pc, #88]	; (800daf8 <lv_label_set_long_mode+0x80>)
 800da9e:	0028      	movs	r0, r5
 800daa0:	f7fe faec 	bl	800c07c <lv_anim_del>
    ext->offset.x = 0;
 800daa4:	2300      	movs	r3, #0
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
 800daa6:	1efa      	subs	r2, r7, #3
    ext->offset.x = 0;
 800daa8:	8163      	strh	r3, [r4, #10]
    ext->offset.y = 0;
 800daaa:	81a3      	strh	r3, [r4, #12]
 800daac:	7c23      	ldrb	r3, [r4, #16]
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
 800daae:	2a02      	cmp	r2, #2
 800dab0:	d818      	bhi.n	800dae4 <lv_label_set_long_mode+0x6c>
        ext->expand = 1;
 800dab2:	2280      	movs	r2, #128	; 0x80
 800dab4:	4252      	negs	r2, r2
 800dab6:	4313      	orrs	r3, r2
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 800dab8:	2607      	movs	r6, #7
        ext->expand = 0;
 800daba:	7423      	strb	r3, [r4, #16]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 800dabc:	7c23      	ldrb	r3, [r4, #16]
 800dabe:	4033      	ands	r3, r6
 800dac0:	2b02      	cmp	r3, #2
 800dac2:	d106      	bne.n	800dad2 <lv_label_set_long_mode+0x5a>
 800dac4:	8922      	ldrh	r2, [r4, #8]
 800dac6:	4b0d      	ldr	r3, [pc, #52]	; (800dafc <lv_label_set_long_mode+0x84>)
 800dac8:	429a      	cmp	r2, r3
 800daca:	d002      	beq.n	800dad2 <lv_label_set_long_mode+0x5a>
        lv_label_revert_dots(label);
 800dacc:	0028      	movs	r0, r5
 800dace:	f7ff faeb 	bl	800d0a8 <lv_label_revert_dots>
    ext->long_mode = long_mode;
 800dad2:	7c21      	ldrb	r1, [r4, #16]
 800dad4:	4037      	ands	r7, r6
 800dad6:	43b1      	bics	r1, r6
 800dad8:	4339      	orrs	r1, r7
    lv_label_refr_text(label);
 800dada:	0028      	movs	r0, r5
    ext->long_mode = long_mode;
 800dadc:	7421      	strb	r1, [r4, #16]
    lv_label_refr_text(label);
 800dade:	f7ff fd55 	bl	800d58c <lv_label_refr_text>
}
 800dae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->expand = 0;
 800dae4:	227f      	movs	r2, #127	; 0x7f
 800dae6:	4013      	ands	r3, r2
 800dae8:	e7e6      	b.n	800dab8 <lv_label_set_long_mode+0x40>
 800daea:	46c0      	nop			; (mov r8, r8)
 800daec:	08007063 	.word	0x08007063
 800daf0:	08007075 	.word	0x08007075
 800daf4:	0800d129 	.word	0x0800d129
 800daf8:	0800d115 	.word	0x0800d115
 800dafc:	0000ffff 	.word	0x0000ffff

0800db00 <lv_label_set_recolor>:
{
 800db00:	b570      	push	{r4, r5, r6, lr}
 800db02:	0004      	movs	r4, r0
 800db04:	000d      	movs	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 800db06:	f7f9 ff7d 	bl	8007a04 <lv_obj_get_ext_attr>
    if(ext->recolor == en) return;
 800db0a:	7c03      	ldrb	r3, [r0, #16]
 800db0c:	065a      	lsls	r2, r3, #25
 800db0e:	0fd2      	lsrs	r2, r2, #31
 800db10:	42aa      	cmp	r2, r5
 800db12:	d009      	beq.n	800db28 <lv_label_set_recolor+0x28>
    ext->recolor = en == false ? 0 : 1;
 800db14:	2201      	movs	r2, #1
 800db16:	4015      	ands	r5, r2
 800db18:	323f      	adds	r2, #63	; 0x3f
 800db1a:	01ad      	lsls	r5, r5, #6
 800db1c:	4393      	bics	r3, r2
 800db1e:	432b      	orrs	r3, r5
 800db20:	7403      	strb	r3, [r0, #16]
    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
 800db22:	0020      	movs	r0, r4
 800db24:	f7ff fd32 	bl	800d58c <lv_label_refr_text>
}
 800db28:	bd70      	pop	{r4, r5, r6, pc}
	...

0800db2c <lv_label_create>:
{
 800db2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db2e:	000e      	movs	r6, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
 800db30:	f7f9 fca2 	bl	8007478 <lv_obj_create>
 800db34:	1e04      	subs	r4, r0, #0
    lv_mem_assert(new_label);
 800db36:	d100      	bne.n	800db3a <lv_label_create+0xe>
 800db38:	e7fe      	b.n	800db38 <lv_label_create+0xc>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
 800db3a:	4d57      	ldr	r5, [pc, #348]	; (800dc98 <lv_label_create+0x16c>)
 800db3c:	682b      	ldr	r3, [r5, #0]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d102      	bne.n	800db48 <lv_label_create+0x1c>
 800db42:	f7f9 ff5d 	bl	8007a00 <lv_obj_get_signal_cb>
 800db46:	6028      	str	r0, [r5, #0]
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
 800db48:	2114      	movs	r1, #20
 800db4a:	0020      	movs	r0, r4
 800db4c:	f7f9 f9ae 	bl	8006eac <lv_obj_allocate_ext_attr>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
 800db50:	0020      	movs	r0, r4
 800db52:	f7f9 ff57 	bl	8007a04 <lv_obj_get_ext_attr>
 800db56:	1e05      	subs	r5, r0, #0
    lv_mem_assert(ext);
 800db58:	d100      	bne.n	800db5c <lv_label_create+0x30>
 800db5a:	e7fe      	b.n	800db5a <lv_label_create+0x2e>
    ext->text       = NULL;
 800db5c:	2200      	movs	r2, #0
    ext->recolor    = 0;
 800db5e:	2108      	movs	r1, #8
    ext->static_txt = 0;
 800db60:	7c03      	ldrb	r3, [r0, #16]
    ext->text       = NULL;
 800db62:	6002      	str	r2, [r0, #0]
    ext->recolor    = 0;
 800db64:	438b      	bics	r3, r1
    ext->body_draw  = 0;
 800db66:	7c41      	ldrb	r1, [r0, #17]
    ext->dot_end    = LV_LABEL_DOT_END_INV;
 800db68:	2001      	movs	r0, #1
 800db6a:	4240      	negs	r0, r0
 800db6c:	8128      	strh	r0, [r5, #8]
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
 800db6e:	3089      	adds	r0, #137	; 0x89
 800db70:	4003      	ands	r3, r0
 800db72:	742b      	strb	r3, [r5, #16]
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 800db74:	2319      	movs	r3, #25
 800db76:	81eb      	strh	r3, [r5, #14]
    ext->dot_tmp_alloc = 0;
 800db78:	33e3      	adds	r3, #227	; 0xe3
 800db7a:	400b      	ands	r3, r1
    lv_obj_set_design_cb(new_label, lv_label_design);
 800db7c:	0020      	movs	r0, r4
 800db7e:	4947      	ldr	r1, [pc, #284]	; (800dc9c <lv_label_create+0x170>)
    ext->offset.x = 0;
 800db80:	816a      	strh	r2, [r5, #10]
    ext->offset.y = 0;
 800db82:	81aa      	strh	r2, [r5, #12]
    ext->dot.tmp_ptr   = NULL;
 800db84:	606a      	str	r2, [r5, #4]
    ext->dot_tmp_alloc = 0;
 800db86:	746b      	strb	r3, [r5, #17]
    lv_obj_set_design_cb(new_label, lv_label_design);
 800db88:	f7f9 f98e 	bl	8006ea8 <lv_obj_set_design_cb>
    lv_obj_set_signal_cb(new_label, lv_label_signal);
 800db8c:	4944      	ldr	r1, [pc, #272]	; (800dca0 <lv_label_create+0x174>)
 800db8e:	0020      	movs	r0, r4
 800db90:	f7f9 f988 	bl	8006ea4 <lv_obj_set_signal_cb>
    if(copy == NULL) {
 800db94:	2e00      	cmp	r6, #0
 800db96:	d111      	bne.n	800dbbc <lv_label_create+0x90>
        lv_obj_set_click(new_label, false);
 800db98:	0031      	movs	r1, r6
 800db9a:	0020      	movs	r0, r4
 800db9c:	f7f9 f924 	bl	8006de8 <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
 800dba0:	0031      	movs	r1, r6
 800dba2:	0020      	movs	r0, r4
 800dba4:	f7ff ff68 	bl	800da78 <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
 800dba8:	493e      	ldr	r1, [pc, #248]	; (800dca4 <lv_label_create+0x178>)
 800dbaa:	0020      	movs	r0, r4
 800dbac:	f7ff ff0c 	bl	800d9c8 <lv_label_set_text>
    lv_obj_set_style(label, style);
 800dbb0:	0031      	movs	r1, r6
 800dbb2:	0020      	movs	r0, r4
 800dbb4:	f7f9 fe41 	bl	800783a <lv_obj_set_style>
}
 800dbb8:	0020      	movs	r0, r4
 800dbba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 800dbbc:	0030      	movs	r0, r6
 800dbbe:	f7f9 ff21 	bl	8007a04 <lv_obj_get_ext_attr>
 800dbc2:	0007      	movs	r7, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
 800dbc4:	0030      	movs	r0, r6
 800dbc6:	f7ff fc07 	bl	800d3d8 <lv_label_get_long_mode>
 800dbca:	0001      	movs	r1, r0
 800dbcc:	0020      	movs	r0, r4
 800dbce:	f7ff ff53 	bl	800da78 <lv_label_set_long_mode>
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
 800dbd2:	0030      	movs	r0, r6
 800dbd4:	f7ff fc0e 	bl	800d3f4 <lv_label_get_recolor>
 800dbd8:	0001      	movs	r1, r0
 800dbda:	0020      	movs	r0, r4
 800dbdc:	f7ff ff90 	bl	800db00 <lv_label_set_recolor>
        lv_label_set_body_draw(new_label, lv_label_get_body_draw(copy));
 800dbe0:	0030      	movs	r0, r6
 800dbe2:	f7ff fc0e 	bl	800d402 <lv_label_get_body_draw>
 800dbe6:	0001      	movs	r1, r0
 800dbe8:	0020      	movs	r0, r4
 800dbea:	f7ff fbda 	bl	800d3a2 <lv_label_set_body_draw>
        lv_label_set_align(new_label, lv_label_get_align(copy));
 800dbee:	0030      	movs	r0, r6
 800dbf0:	f7ff fbf9 	bl	800d3e6 <lv_label_get_align>
 800dbf4:	0001      	movs	r1, r0
 800dbf6:	0020      	movs	r0, r4
 800dbf8:	f7ff fbbe 	bl	800d378 <lv_label_set_align>
        if(copy_ext->static_txt == 0)
 800dbfc:	2208      	movs	r2, #8
 800dbfe:	7c3b      	ldrb	r3, [r7, #16]
            lv_label_set_text(new_label, lv_label_get_text(copy));
 800dc00:	0030      	movs	r0, r6
        if(copy_ext->static_txt == 0)
 800dc02:	4213      	tst	r3, r2
 800dc04:	d116      	bne.n	800dc34 <lv_label_create+0x108>
            lv_label_set_text(new_label, lv_label_get_text(copy));
 800dc06:	f7ff fbe2 	bl	800d3ce <lv_label_get_text>
 800dc0a:	0001      	movs	r1, r0
 800dc0c:	0020      	movs	r0, r4
 800dc0e:	f7ff fedb 	bl	800d9c8 <lv_label_set_text>
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
 800dc12:	2207      	movs	r2, #7
 800dc14:	7c3b      	ldrb	r3, [r7, #16]
 800dc16:	4013      	ands	r3, r2
 800dc18:	2b02      	cmp	r3, #2
 800dc1a:	d11c      	bne.n	800dc56 <lv_label_create+0x12a>
            ext->text = lv_mem_realloc(ext->text, lv_mem_get_size(copy_ext->text));
 800dc1c:	6838      	ldr	r0, [r7, #0]
 800dc1e:	682e      	ldr	r6, [r5, #0]
 800dc20:	f7fe fe26 	bl	800c870 <lv_mem_get_size>
 800dc24:	0001      	movs	r1, r0
 800dc26:	0030      	movs	r0, r6
 800dc28:	f7fe fe58 	bl	800c8dc <lv_mem_realloc>
 800dc2c:	1e06      	subs	r6, r0, #0
 800dc2e:	6028      	str	r0, [r5, #0]
            lv_mem_assert(ext->text);
 800dc30:	d107      	bne.n	800dc42 <lv_label_create+0x116>
 800dc32:	e7fe      	b.n	800dc32 <lv_label_create+0x106>
            lv_label_set_static_text(new_label, lv_label_get_text(copy));
 800dc34:	f7ff fbcb 	bl	800d3ce <lv_label_get_text>
 800dc38:	0001      	movs	r1, r0
 800dc3a:	0020      	movs	r0, r4
 800dc3c:	f7ff ff00 	bl	800da40 <lv_label_set_static_text>
 800dc40:	e7e7      	b.n	800dc12 <lv_label_create+0xe6>
            memcpy(ext->text, copy_ext->text, lv_mem_get_size(copy_ext->text));
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	0018      	movs	r0, r3
 800dc46:	9301      	str	r3, [sp, #4]
 800dc48:	f7fe fe12 	bl	800c870 <lv_mem_get_size>
 800dc4c:	9901      	ldr	r1, [sp, #4]
 800dc4e:	0002      	movs	r2, r0
 800dc50:	0030      	movs	r0, r6
 800dc52:	f000 fa9b 	bl	800e18c <memcpy>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
 800dc56:	7c7b      	ldrb	r3, [r7, #17]
 800dc58:	079b      	lsls	r3, r3, #30
 800dc5a:	d517      	bpl.n	800dc8c <lv_label_create+0x160>
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	2800      	cmp	r0, #0
 800dc60:	d014      	beq.n	800dc8c <lv_label_create+0x160>
            int len = strlen(copy_ext->dot.tmp_ptr);
 800dc62:	f7f2 fa57 	bl	8000114 <strlen>
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
 800dc66:	6869      	ldr	r1, [r5, #4]
 800dc68:	b282      	uxth	r2, r0
 800dc6a:	0020      	movs	r0, r4
 800dc6c:	f7ff fa66 	bl	800d13c <lv_label_set_dot_tmp>
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
 800dc70:	2202      	movs	r2, #2
 800dc72:	2102      	movs	r1, #2
 800dc74:	7c7b      	ldrb	r3, [r7, #17]
        lv_obj_refresh_style(new_label);
 800dc76:	0020      	movs	r0, r4
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
 800dc78:	401a      	ands	r2, r3
 800dc7a:	7c6b      	ldrb	r3, [r5, #17]
 800dc7c:	438b      	bics	r3, r1
 800dc7e:	4313      	orrs	r3, r2
 800dc80:	746b      	strb	r3, [r5, #17]
        ext->dot_end       = copy_ext->dot_end;
 800dc82:	893b      	ldrh	r3, [r7, #8]
 800dc84:	812b      	strh	r3, [r5, #8]
        lv_obj_refresh_style(new_label);
 800dc86:	f7f9 fd94 	bl	80077b2 <lv_obj_refresh_style>
 800dc8a:	e795      	b.n	800dbb8 <lv_label_create+0x8c>
            memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
 800dc8c:	1d28      	adds	r0, r5, #4
 800dc8e:	1d39      	adds	r1, r7, #4
 800dc90:	2204      	movs	r2, #4
 800dc92:	f000 fa7b 	bl	800e18c <memcpy>
 800dc96:	e7eb      	b.n	800dc70 <lv_label_create+0x144>
 800dc98:	20004680 	.word	0x20004680
 800dc9c:	0800d191 	.word	0x0800d191
 800dca0:	0800d8d5 	.word	0x0800d8d5
 800dca4:	08013ce8 	.word	0x08013ce8

0800dca8 <lv_theme_get_current>:
 * @return pointer to the current system theme. NULL if not set.
 */
lv_theme_t * lv_theme_get_current(void)
{
#if LV_THEME_LIVE_UPDATE == 0
    return current_theme;
 800dca8:	4b01      	ldr	r3, [pc, #4]	; (800dcb0 <lv_theme_get_current+0x8>)
 800dcaa:	6818      	ldr	r0, [r3, #0]
    if(!inited)
        return NULL;
    else
        return &current_theme;
#endif
}
 800dcac:	4770      	bx	lr
 800dcae:	46c0      	nop			; (mov r8, r8)
 800dcb0:	20004684 	.word	0x20004684

0800dcb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800dcb4:	480d      	ldr	r0, [pc, #52]	; (800dcec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800dcb6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800dcb8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800dcba:	e003      	b.n	800dcc4 <LoopCopyDataInit>

0800dcbc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800dcbc:	4b0c      	ldr	r3, [pc, #48]	; (800dcf0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800dcbe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800dcc0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800dcc2:	3104      	adds	r1, #4

0800dcc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800dcc4:	480b      	ldr	r0, [pc, #44]	; (800dcf4 <LoopForever+0xa>)
  ldr r3, =_edata
 800dcc6:	4b0c      	ldr	r3, [pc, #48]	; (800dcf8 <LoopForever+0xe>)
  adds r2, r0, r1
 800dcc8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800dcca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800dccc:	d3f6      	bcc.n	800dcbc <CopyDataInit>
  ldr r2, =_sbss
 800dcce:	4a0b      	ldr	r2, [pc, #44]	; (800dcfc <LoopForever+0x12>)
  b LoopFillZerobss
 800dcd0:	e002      	b.n	800dcd8 <LoopFillZerobss>

0800dcd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800dcd2:	2300      	movs	r3, #0
  str  r3, [r2]
 800dcd4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800dcd6:	3204      	adds	r2, #4

0800dcd8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800dcd8:	4b09      	ldr	r3, [pc, #36]	; (800dd00 <LoopForever+0x16>)
  cmp r2, r3
 800dcda:	429a      	cmp	r2, r3
  bcc FillZerobss
 800dcdc:	d3f9      	bcc.n	800dcd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800dcde:	f7f6 f85f 	bl	8003da0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800dce2:	f000 f817 	bl	800dd14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800dce6:	f7f4 fdf9 	bl	80028dc <main>

0800dcea <LoopForever>:

LoopForever:
    b LoopForever
 800dcea:	e7fe      	b.n	800dcea <LoopForever>
  ldr   r0, =_estack
 800dcec:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 800dcf0:	08013f70 	.word	0x08013f70
  ldr r0, =_sdata
 800dcf4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800dcf8:	200006c8 	.word	0x200006c8
  ldr r2, =_sbss
 800dcfc:	200006c8 	.word	0x200006c8
  ldr r3, = _ebss
 800dd00:	20005488 	.word	0x20005488

0800dd04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800dd04:	e7fe      	b.n	800dd04 <ADC1_IRQHandler>
	...

0800dd08 <__errno>:
 800dd08:	4b01      	ldr	r3, [pc, #4]	; (800dd10 <__errno+0x8>)
 800dd0a:	6818      	ldr	r0, [r3, #0]
 800dd0c:	4770      	bx	lr
 800dd0e:	46c0      	nop			; (mov r8, r8)
 800dd10:	20000058 	.word	0x20000058

0800dd14 <__libc_init_array>:
 800dd14:	b570      	push	{r4, r5, r6, lr}
 800dd16:	2600      	movs	r6, #0
 800dd18:	4d0c      	ldr	r5, [pc, #48]	; (800dd4c <__libc_init_array+0x38>)
 800dd1a:	4c0d      	ldr	r4, [pc, #52]	; (800dd50 <__libc_init_array+0x3c>)
 800dd1c:	1b64      	subs	r4, r4, r5
 800dd1e:	10a4      	asrs	r4, r4, #2
 800dd20:	42a6      	cmp	r6, r4
 800dd22:	d109      	bne.n	800dd38 <__libc_init_array+0x24>
 800dd24:	2600      	movs	r6, #0
 800dd26:	f002 ffcb 	bl	8010cc0 <_init>
 800dd2a:	4d0a      	ldr	r5, [pc, #40]	; (800dd54 <__libc_init_array+0x40>)
 800dd2c:	4c0a      	ldr	r4, [pc, #40]	; (800dd58 <__libc_init_array+0x44>)
 800dd2e:	1b64      	subs	r4, r4, r5
 800dd30:	10a4      	asrs	r4, r4, #2
 800dd32:	42a6      	cmp	r6, r4
 800dd34:	d105      	bne.n	800dd42 <__libc_init_array+0x2e>
 800dd36:	bd70      	pop	{r4, r5, r6, pc}
 800dd38:	00b3      	lsls	r3, r6, #2
 800dd3a:	58eb      	ldr	r3, [r5, r3]
 800dd3c:	4798      	blx	r3
 800dd3e:	3601      	adds	r6, #1
 800dd40:	e7ee      	b.n	800dd20 <__libc_init_array+0xc>
 800dd42:	00b3      	lsls	r3, r6, #2
 800dd44:	58eb      	ldr	r3, [r5, r3]
 800dd46:	4798      	blx	r3
 800dd48:	3601      	adds	r6, #1
 800dd4a:	e7f2      	b.n	800dd32 <__libc_init_array+0x1e>
 800dd4c:	08013f68 	.word	0x08013f68
 800dd50:	08013f68 	.word	0x08013f68
 800dd54:	08013f68 	.word	0x08013f68
 800dd58:	08013f6c 	.word	0x08013f6c

0800dd5c <malloc>:
 800dd5c:	b510      	push	{r4, lr}
 800dd5e:	4b03      	ldr	r3, [pc, #12]	; (800dd6c <malloc+0x10>)
 800dd60:	0001      	movs	r1, r0
 800dd62:	6818      	ldr	r0, [r3, #0]
 800dd64:	f000 f80e 	bl	800dd84 <_malloc_r>
 800dd68:	bd10      	pop	{r4, pc}
 800dd6a:	46c0      	nop			; (mov r8, r8)
 800dd6c:	20000058 	.word	0x20000058

0800dd70 <free>:
 800dd70:	b510      	push	{r4, lr}
 800dd72:	4b03      	ldr	r3, [pc, #12]	; (800dd80 <free+0x10>)
 800dd74:	0001      	movs	r1, r0
 800dd76:	6818      	ldr	r0, [r3, #0]
 800dd78:	f002 f99c 	bl	80100b4 <_free_r>
 800dd7c:	bd10      	pop	{r4, pc}
 800dd7e:	46c0      	nop			; (mov r8, r8)
 800dd80:	20000058 	.word	0x20000058

0800dd84 <_malloc_r>:
 800dd84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd86:	000d      	movs	r5, r1
 800dd88:	b085      	sub	sp, #20
 800dd8a:	350b      	adds	r5, #11
 800dd8c:	9001      	str	r0, [sp, #4]
 800dd8e:	2d16      	cmp	r5, #22
 800dd90:	d908      	bls.n	800dda4 <_malloc_r+0x20>
 800dd92:	2307      	movs	r3, #7
 800dd94:	439d      	bics	r5, r3
 800dd96:	d506      	bpl.n	800dda6 <_malloc_r+0x22>
 800dd98:	230c      	movs	r3, #12
 800dd9a:	9a01      	ldr	r2, [sp, #4]
 800dd9c:	6013      	str	r3, [r2, #0]
 800dd9e:	2000      	movs	r0, #0
 800dda0:	b005      	add	sp, #20
 800dda2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dda4:	2510      	movs	r5, #16
 800dda6:	428d      	cmp	r5, r1
 800dda8:	d3f6      	bcc.n	800dd98 <_malloc_r+0x14>
 800ddaa:	9801      	ldr	r0, [sp, #4]
 800ddac:	f000 fa00 	bl	800e1b0 <__malloc_lock>
 800ddb0:	23f8      	movs	r3, #248	; 0xf8
 800ddb2:	33ff      	adds	r3, #255	; 0xff
 800ddb4:	48ba      	ldr	r0, [pc, #744]	; (800e0a0 <_malloc_r+0x31c>)
 800ddb6:	429d      	cmp	r5, r3
 800ddb8:	d81f      	bhi.n	800ddfa <_malloc_r+0x76>
 800ddba:	002a      	movs	r2, r5
 800ddbc:	3208      	adds	r2, #8
 800ddbe:	1882      	adds	r2, r0, r2
 800ddc0:	0011      	movs	r1, r2
 800ddc2:	6854      	ldr	r4, [r2, #4]
 800ddc4:	3908      	subs	r1, #8
 800ddc6:	08eb      	lsrs	r3, r5, #3
 800ddc8:	428c      	cmp	r4, r1
 800ddca:	d103      	bne.n	800ddd4 <_malloc_r+0x50>
 800ddcc:	68d4      	ldr	r4, [r2, #12]
 800ddce:	3302      	adds	r3, #2
 800ddd0:	42a2      	cmp	r2, r4
 800ddd2:	d029      	beq.n	800de28 <_malloc_r+0xa4>
 800ddd4:	2303      	movs	r3, #3
 800ddd6:	6862      	ldr	r2, [r4, #4]
 800ddd8:	68a1      	ldr	r1, [r4, #8]
 800ddda:	439a      	bics	r2, r3
 800dddc:	0013      	movs	r3, r2
 800ddde:	68e2      	ldr	r2, [r4, #12]
 800dde0:	18e3      	adds	r3, r4, r3
 800dde2:	60ca      	str	r2, [r1, #12]
 800dde4:	6091      	str	r1, [r2, #8]
 800dde6:	2201      	movs	r2, #1
 800dde8:	6859      	ldr	r1, [r3, #4]
 800ddea:	430a      	orrs	r2, r1
 800ddec:	605a      	str	r2, [r3, #4]
 800ddee:	9801      	ldr	r0, [sp, #4]
 800ddf0:	f000 f9e6 	bl	800e1c0 <__malloc_unlock>
 800ddf4:	0020      	movs	r0, r4
 800ddf6:	3008      	adds	r0, #8
 800ddf8:	e7d2      	b.n	800dda0 <_malloc_r+0x1c>
 800ddfa:	0a6a      	lsrs	r2, r5, #9
 800ddfc:	233f      	movs	r3, #63	; 0x3f
 800ddfe:	2a00      	cmp	r2, #0
 800de00:	d003      	beq.n	800de0a <_malloc_r+0x86>
 800de02:	2a04      	cmp	r2, #4
 800de04:	d828      	bhi.n	800de58 <_malloc_r+0xd4>
 800de06:	09ab      	lsrs	r3, r5, #6
 800de08:	3338      	adds	r3, #56	; 0x38
 800de0a:	2203      	movs	r2, #3
 800de0c:	4694      	mov	ip, r2
 800de0e:	00d9      	lsls	r1, r3, #3
 800de10:	1809      	adds	r1, r1, r0
 800de12:	68cc      	ldr	r4, [r1, #12]
 800de14:	428c      	cmp	r4, r1
 800de16:	d006      	beq.n	800de26 <_malloc_r+0xa2>
 800de18:	4666      	mov	r6, ip
 800de1a:	6862      	ldr	r2, [r4, #4]
 800de1c:	43b2      	bics	r2, r6
 800de1e:	1b57      	subs	r7, r2, r5
 800de20:	2f0f      	cmp	r7, #15
 800de22:	dd31      	ble.n	800de88 <_malloc_r+0x104>
 800de24:	3b01      	subs	r3, #1
 800de26:	3301      	adds	r3, #1
 800de28:	0001      	movs	r1, r0
 800de2a:	6904      	ldr	r4, [r0, #16]
 800de2c:	3108      	adds	r1, #8
 800de2e:	428c      	cmp	r4, r1
 800de30:	d04e      	beq.n	800ded0 <_malloc_r+0x14c>
 800de32:	2203      	movs	r2, #3
 800de34:	6866      	ldr	r6, [r4, #4]
 800de36:	4396      	bics	r6, r2
 800de38:	0032      	movs	r2, r6
 800de3a:	1b76      	subs	r6, r6, r5
 800de3c:	2e0f      	cmp	r6, #15
 800de3e:	dd31      	ble.n	800dea4 <_malloc_r+0x120>
 800de40:	2701      	movs	r7, #1
 800de42:	1963      	adds	r3, r4, r5
 800de44:	433d      	orrs	r5, r7
 800de46:	4337      	orrs	r7, r6
 800de48:	6065      	str	r5, [r4, #4]
 800de4a:	6143      	str	r3, [r0, #20]
 800de4c:	6103      	str	r3, [r0, #16]
 800de4e:	60d9      	str	r1, [r3, #12]
 800de50:	6099      	str	r1, [r3, #8]
 800de52:	605f      	str	r7, [r3, #4]
 800de54:	50a6      	str	r6, [r4, r2]
 800de56:	e7ca      	b.n	800ddee <_malloc_r+0x6a>
 800de58:	2a14      	cmp	r2, #20
 800de5a:	d802      	bhi.n	800de62 <_malloc_r+0xde>
 800de5c:	0013      	movs	r3, r2
 800de5e:	335b      	adds	r3, #91	; 0x5b
 800de60:	e7d3      	b.n	800de0a <_malloc_r+0x86>
 800de62:	2a54      	cmp	r2, #84	; 0x54
 800de64:	d802      	bhi.n	800de6c <_malloc_r+0xe8>
 800de66:	0b2b      	lsrs	r3, r5, #12
 800de68:	336e      	adds	r3, #110	; 0x6e
 800de6a:	e7ce      	b.n	800de0a <_malloc_r+0x86>
 800de6c:	23aa      	movs	r3, #170	; 0xaa
 800de6e:	005b      	lsls	r3, r3, #1
 800de70:	429a      	cmp	r2, r3
 800de72:	d802      	bhi.n	800de7a <_malloc_r+0xf6>
 800de74:	0beb      	lsrs	r3, r5, #15
 800de76:	3377      	adds	r3, #119	; 0x77
 800de78:	e7c7      	b.n	800de0a <_malloc_r+0x86>
 800de7a:	498a      	ldr	r1, [pc, #552]	; (800e0a4 <_malloc_r+0x320>)
 800de7c:	237e      	movs	r3, #126	; 0x7e
 800de7e:	428a      	cmp	r2, r1
 800de80:	d8c3      	bhi.n	800de0a <_malloc_r+0x86>
 800de82:	0cab      	lsrs	r3, r5, #18
 800de84:	337c      	adds	r3, #124	; 0x7c
 800de86:	e7c0      	b.n	800de0a <_malloc_r+0x86>
 800de88:	68e6      	ldr	r6, [r4, #12]
 800de8a:	2f00      	cmp	r7, #0
 800de8c:	db08      	blt.n	800dea0 <_malloc_r+0x11c>
 800de8e:	68a3      	ldr	r3, [r4, #8]
 800de90:	60de      	str	r6, [r3, #12]
 800de92:	60b3      	str	r3, [r6, #8]
 800de94:	2301      	movs	r3, #1
 800de96:	18a2      	adds	r2, r4, r2
 800de98:	6851      	ldr	r1, [r2, #4]
 800de9a:	430b      	orrs	r3, r1
 800de9c:	6053      	str	r3, [r2, #4]
 800de9e:	e7a6      	b.n	800ddee <_malloc_r+0x6a>
 800dea0:	0034      	movs	r4, r6
 800dea2:	e7b7      	b.n	800de14 <_malloc_r+0x90>
 800dea4:	6141      	str	r1, [r0, #20]
 800dea6:	6101      	str	r1, [r0, #16]
 800dea8:	2e00      	cmp	r6, #0
 800deaa:	daf3      	bge.n	800de94 <_malloc_r+0x110>
 800deac:	497e      	ldr	r1, [pc, #504]	; (800e0a8 <_malloc_r+0x324>)
 800deae:	428a      	cmp	r2, r1
 800deb0:	d842      	bhi.n	800df38 <_malloc_r+0x1b4>
 800deb2:	08d2      	lsrs	r2, r2, #3
 800deb4:	39ff      	subs	r1, #255	; 0xff
 800deb6:	1096      	asrs	r6, r2, #2
 800deb8:	39ff      	subs	r1, #255	; 0xff
 800deba:	40b1      	lsls	r1, r6
 800debc:	6846      	ldr	r6, [r0, #4]
 800debe:	00d2      	lsls	r2, r2, #3
 800dec0:	4331      	orrs	r1, r6
 800dec2:	6041      	str	r1, [r0, #4]
 800dec4:	1810      	adds	r0, r2, r0
 800dec6:	6882      	ldr	r2, [r0, #8]
 800dec8:	60e0      	str	r0, [r4, #12]
 800deca:	60a2      	str	r2, [r4, #8]
 800decc:	6084      	str	r4, [r0, #8]
 800dece:	60d4      	str	r4, [r2, #12]
 800ded0:	2201      	movs	r2, #1
 800ded2:	1099      	asrs	r1, r3, #2
 800ded4:	408a      	lsls	r2, r1
 800ded6:	4972      	ldr	r1, [pc, #456]	; (800e0a0 <_malloc_r+0x31c>)
 800ded8:	6848      	ldr	r0, [r1, #4]
 800deda:	4282      	cmp	r2, r0
 800dedc:	d900      	bls.n	800dee0 <_malloc_r+0x15c>
 800dede:	e097      	b.n	800e010 <_malloc_r+0x28c>
 800dee0:	4210      	tst	r0, r2
 800dee2:	d105      	bne.n	800def0 <_malloc_r+0x16c>
 800dee4:	2403      	movs	r4, #3
 800dee6:	43a3      	bics	r3, r4
 800dee8:	0052      	lsls	r2, r2, #1
 800deea:	3304      	adds	r3, #4
 800deec:	4210      	tst	r0, r2
 800deee:	d0fb      	beq.n	800dee8 <_malloc_r+0x164>
 800def0:	469c      	mov	ip, r3
 800def2:	00d8      	lsls	r0, r3, #3
 800def4:	1808      	adds	r0, r1, r0
 800def6:	9002      	str	r0, [sp, #8]
 800def8:	9c02      	ldr	r4, [sp, #8]
 800defa:	68e4      	ldr	r4, [r4, #12]
 800defc:	9e02      	ldr	r6, [sp, #8]
 800defe:	42b4      	cmp	r4, r6
 800df00:	d158      	bne.n	800dfb4 <_malloc_r+0x230>
 800df02:	0034      	movs	r4, r6
 800df04:	3408      	adds	r4, #8
 800df06:	9402      	str	r4, [sp, #8]
 800df08:	2401      	movs	r4, #1
 800df0a:	44a4      	add	ip, r4
 800df0c:	4664      	mov	r4, ip
 800df0e:	2603      	movs	r6, #3
 800df10:	4234      	tst	r4, r6
 800df12:	d1f1      	bne.n	800def8 <_malloc_r+0x174>
 800df14:	2403      	movs	r4, #3
 800df16:	4223      	tst	r3, r4
 800df18:	d174      	bne.n	800e004 <_malloc_r+0x280>
 800df1a:	684b      	ldr	r3, [r1, #4]
 800df1c:	4393      	bics	r3, r2
 800df1e:	604b      	str	r3, [r1, #4]
 800df20:	6848      	ldr	r0, [r1, #4]
 800df22:	0052      	lsls	r2, r2, #1
 800df24:	4282      	cmp	r2, r0
 800df26:	d873      	bhi.n	800e010 <_malloc_r+0x28c>
 800df28:	2a00      	cmp	r2, #0
 800df2a:	d071      	beq.n	800e010 <_malloc_r+0x28c>
 800df2c:	4663      	mov	r3, ip
 800df2e:	4210      	tst	r0, r2
 800df30:	d1de      	bne.n	800def0 <_malloc_r+0x16c>
 800df32:	3304      	adds	r3, #4
 800df34:	0052      	lsls	r2, r2, #1
 800df36:	e7fa      	b.n	800df2e <_malloc_r+0x1aa>
 800df38:	0a56      	lsrs	r6, r2, #9
 800df3a:	2e04      	cmp	r6, #4
 800df3c:	d816      	bhi.n	800df6c <_malloc_r+0x1e8>
 800df3e:	0991      	lsrs	r1, r2, #6
 800df40:	3138      	adds	r1, #56	; 0x38
 800df42:	00cf      	lsls	r7, r1, #3
 800df44:	183e      	adds	r6, r7, r0
 800df46:	2703      	movs	r7, #3
 800df48:	9602      	str	r6, [sp, #8]
 800df4a:	46bc      	mov	ip, r7
 800df4c:	68b6      	ldr	r6, [r6, #8]
 800df4e:	9f02      	ldr	r7, [sp, #8]
 800df50:	42b7      	cmp	r7, r6
 800df52:	d127      	bne.n	800dfa4 <_malloc_r+0x220>
 800df54:	2201      	movs	r2, #1
 800df56:	1089      	asrs	r1, r1, #2
 800df58:	408a      	lsls	r2, r1
 800df5a:	6841      	ldr	r1, [r0, #4]
 800df5c:	430a      	orrs	r2, r1
 800df5e:	6042      	str	r2, [r0, #4]
 800df60:	9a02      	ldr	r2, [sp, #8]
 800df62:	60a6      	str	r6, [r4, #8]
 800df64:	60e2      	str	r2, [r4, #12]
 800df66:	6094      	str	r4, [r2, #8]
 800df68:	60f4      	str	r4, [r6, #12]
 800df6a:	e7b1      	b.n	800ded0 <_malloc_r+0x14c>
 800df6c:	2e14      	cmp	r6, #20
 800df6e:	d802      	bhi.n	800df76 <_malloc_r+0x1f2>
 800df70:	0031      	movs	r1, r6
 800df72:	315b      	adds	r1, #91	; 0x5b
 800df74:	e7e5      	b.n	800df42 <_malloc_r+0x1be>
 800df76:	2e54      	cmp	r6, #84	; 0x54
 800df78:	d802      	bhi.n	800df80 <_malloc_r+0x1fc>
 800df7a:	0b11      	lsrs	r1, r2, #12
 800df7c:	316e      	adds	r1, #110	; 0x6e
 800df7e:	e7e0      	b.n	800df42 <_malloc_r+0x1be>
 800df80:	21aa      	movs	r1, #170	; 0xaa
 800df82:	0049      	lsls	r1, r1, #1
 800df84:	428e      	cmp	r6, r1
 800df86:	d802      	bhi.n	800df8e <_malloc_r+0x20a>
 800df88:	0bd1      	lsrs	r1, r2, #15
 800df8a:	3177      	adds	r1, #119	; 0x77
 800df8c:	e7d9      	b.n	800df42 <_malloc_r+0x1be>
 800df8e:	4f45      	ldr	r7, [pc, #276]	; (800e0a4 <_malloc_r+0x320>)
 800df90:	217e      	movs	r1, #126	; 0x7e
 800df92:	42be      	cmp	r6, r7
 800df94:	d8d5      	bhi.n	800df42 <_malloc_r+0x1be>
 800df96:	0c91      	lsrs	r1, r2, #18
 800df98:	317c      	adds	r1, #124	; 0x7c
 800df9a:	e7d2      	b.n	800df42 <_malloc_r+0x1be>
 800df9c:	68b6      	ldr	r6, [r6, #8]
 800df9e:	9902      	ldr	r1, [sp, #8]
 800dfa0:	42b1      	cmp	r1, r6
 800dfa2:	d004      	beq.n	800dfae <_malloc_r+0x22a>
 800dfa4:	4660      	mov	r0, ip
 800dfa6:	6871      	ldr	r1, [r6, #4]
 800dfa8:	4381      	bics	r1, r0
 800dfaa:	428a      	cmp	r2, r1
 800dfac:	d3f6      	bcc.n	800df9c <_malloc_r+0x218>
 800dfae:	68f2      	ldr	r2, [r6, #12]
 800dfb0:	9202      	str	r2, [sp, #8]
 800dfb2:	e7d5      	b.n	800df60 <_malloc_r+0x1dc>
 800dfb4:	2603      	movs	r6, #3
 800dfb6:	6867      	ldr	r7, [r4, #4]
 800dfb8:	43b7      	bics	r7, r6
 800dfba:	9703      	str	r7, [sp, #12]
 800dfbc:	1b7e      	subs	r6, r7, r5
 800dfbe:	2e0f      	cmp	r6, #15
 800dfc0:	dd11      	ble.n	800dfe6 <_malloc_r+0x262>
 800dfc2:	2201      	movs	r2, #1
 800dfc4:	1963      	adds	r3, r4, r5
 800dfc6:	4315      	orrs	r5, r2
 800dfc8:	6065      	str	r5, [r4, #4]
 800dfca:	68e0      	ldr	r0, [r4, #12]
 800dfcc:	68a5      	ldr	r5, [r4, #8]
 800dfce:	3108      	adds	r1, #8
 800dfd0:	60e8      	str	r0, [r5, #12]
 800dfd2:	4332      	orrs	r2, r6
 800dfd4:	6085      	str	r5, [r0, #8]
 800dfd6:	60cb      	str	r3, [r1, #12]
 800dfd8:	608b      	str	r3, [r1, #8]
 800dfda:	60d9      	str	r1, [r3, #12]
 800dfdc:	6099      	str	r1, [r3, #8]
 800dfde:	605a      	str	r2, [r3, #4]
 800dfe0:	003b      	movs	r3, r7
 800dfe2:	50e6      	str	r6, [r4, r3]
 800dfe4:	e703      	b.n	800ddee <_malloc_r+0x6a>
 800dfe6:	68e7      	ldr	r7, [r4, #12]
 800dfe8:	2e00      	cmp	r6, #0
 800dfea:	db09      	blt.n	800e000 <_malloc_r+0x27c>
 800dfec:	2201      	movs	r2, #1
 800dfee:	9b03      	ldr	r3, [sp, #12]
 800dff0:	18e3      	adds	r3, r4, r3
 800dff2:	6859      	ldr	r1, [r3, #4]
 800dff4:	430a      	orrs	r2, r1
 800dff6:	605a      	str	r2, [r3, #4]
 800dff8:	68a3      	ldr	r3, [r4, #8]
 800dffa:	60df      	str	r7, [r3, #12]
 800dffc:	60bb      	str	r3, [r7, #8]
 800dffe:	e6f6      	b.n	800ddee <_malloc_r+0x6a>
 800e000:	003c      	movs	r4, r7
 800e002:	e77b      	b.n	800defc <_malloc_r+0x178>
 800e004:	3808      	subs	r0, #8
 800e006:	6884      	ldr	r4, [r0, #8]
 800e008:	3b01      	subs	r3, #1
 800e00a:	42a0      	cmp	r0, r4
 800e00c:	d082      	beq.n	800df14 <_malloc_r+0x190>
 800e00e:	e787      	b.n	800df20 <_malloc_r+0x19c>
 800e010:	2303      	movs	r3, #3
 800e012:	688f      	ldr	r7, [r1, #8]
 800e014:	687a      	ldr	r2, [r7, #4]
 800e016:	439a      	bics	r2, r3
 800e018:	9202      	str	r2, [sp, #8]
 800e01a:	4295      	cmp	r5, r2
 800e01c:	d803      	bhi.n	800e026 <_malloc_r+0x2a2>
 800e01e:	1b52      	subs	r2, r2, r5
 800e020:	2a0f      	cmp	r2, #15
 800e022:	dd00      	ble.n	800e026 <_malloc_r+0x2a2>
 800e024:	e09f      	b.n	800e166 <_malloc_r+0x3e2>
 800e026:	9b02      	ldr	r3, [sp, #8]
 800e028:	18fb      	adds	r3, r7, r3
 800e02a:	9303      	str	r3, [sp, #12]
 800e02c:	4b1f      	ldr	r3, [pc, #124]	; (800e0ac <_malloc_r+0x328>)
 800e02e:	681e      	ldr	r6, [r3, #0]
 800e030:	4b1f      	ldr	r3, [pc, #124]	; (800e0b0 <_malloc_r+0x32c>)
 800e032:	3610      	adds	r6, #16
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	1976      	adds	r6, r6, r5
 800e038:	3301      	adds	r3, #1
 800e03a:	d005      	beq.n	800e048 <_malloc_r+0x2c4>
 800e03c:	4b1d      	ldr	r3, [pc, #116]	; (800e0b4 <_malloc_r+0x330>)
 800e03e:	3b01      	subs	r3, #1
 800e040:	199e      	adds	r6, r3, r6
 800e042:	4b1c      	ldr	r3, [pc, #112]	; (800e0b4 <_malloc_r+0x330>)
 800e044:	425b      	negs	r3, r3
 800e046:	401e      	ands	r6, r3
 800e048:	0031      	movs	r1, r6
 800e04a:	9801      	ldr	r0, [sp, #4]
 800e04c:	f000 f8c0 	bl	800e1d0 <_sbrk_r>
 800e050:	0004      	movs	r4, r0
 800e052:	1c43      	adds	r3, r0, #1
 800e054:	d05f      	beq.n	800e116 <_malloc_r+0x392>
 800e056:	9b03      	ldr	r3, [sp, #12]
 800e058:	4283      	cmp	r3, r0
 800e05a:	d902      	bls.n	800e062 <_malloc_r+0x2de>
 800e05c:	4b10      	ldr	r3, [pc, #64]	; (800e0a0 <_malloc_r+0x31c>)
 800e05e:	429f      	cmp	r7, r3
 800e060:	d159      	bne.n	800e116 <_malloc_r+0x392>
 800e062:	4b15      	ldr	r3, [pc, #84]	; (800e0b8 <_malloc_r+0x334>)
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	18b1      	adds	r1, r6, r2
 800e068:	6019      	str	r1, [r3, #0]
 800e06a:	4b12      	ldr	r3, [pc, #72]	; (800e0b4 <_malloc_r+0x330>)
 800e06c:	1e5a      	subs	r2, r3, #1
 800e06e:	9b03      	ldr	r3, [sp, #12]
 800e070:	42a3      	cmp	r3, r4
 800e072:	d127      	bne.n	800e0c4 <_malloc_r+0x340>
 800e074:	4213      	tst	r3, r2
 800e076:	d125      	bne.n	800e0c4 <_malloc_r+0x340>
 800e078:	9a02      	ldr	r2, [sp, #8]
 800e07a:	4b09      	ldr	r3, [pc, #36]	; (800e0a0 <_malloc_r+0x31c>)
 800e07c:	1992      	adds	r2, r2, r6
 800e07e:	2601      	movs	r6, #1
 800e080:	689b      	ldr	r3, [r3, #8]
 800e082:	4316      	orrs	r6, r2
 800e084:	605e      	str	r6, [r3, #4]
 800e086:	4b0c      	ldr	r3, [pc, #48]	; (800e0b8 <_malloc_r+0x334>)
 800e088:	4a0c      	ldr	r2, [pc, #48]	; (800e0bc <_malloc_r+0x338>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	6811      	ldr	r1, [r2, #0]
 800e08e:	428b      	cmp	r3, r1
 800e090:	d900      	bls.n	800e094 <_malloc_r+0x310>
 800e092:	6013      	str	r3, [r2, #0]
 800e094:	4a0a      	ldr	r2, [pc, #40]	; (800e0c0 <_malloc_r+0x33c>)
 800e096:	6811      	ldr	r1, [r2, #0]
 800e098:	428b      	cmp	r3, r1
 800e09a:	d93c      	bls.n	800e116 <_malloc_r+0x392>
 800e09c:	6013      	str	r3, [r2, #0]
 800e09e:	e03a      	b.n	800e116 <_malloc_r+0x392>
 800e0a0:	2000014c 	.word	0x2000014c
 800e0a4:	00000554 	.word	0x00000554
 800e0a8:	000001ff 	.word	0x000001ff
 800e0ac:	200046b8 	.word	0x200046b8
 800e0b0:	20000554 	.word	0x20000554
 800e0b4:	00000080 	.word	0x00000080
 800e0b8:	20004688 	.word	0x20004688
 800e0bc:	200046b0 	.word	0x200046b0
 800e0c0:	200046b4 	.word	0x200046b4
 800e0c4:	4b2d      	ldr	r3, [pc, #180]	; (800e17c <_malloc_r+0x3f8>)
 800e0c6:	6818      	ldr	r0, [r3, #0]
 800e0c8:	3001      	adds	r0, #1
 800e0ca:	d132      	bne.n	800e132 <_malloc_r+0x3ae>
 800e0cc:	601c      	str	r4, [r3, #0]
 800e0ce:	2007      	movs	r0, #7
 800e0d0:	4020      	ands	r0, r4
 800e0d2:	d002      	beq.n	800e0da <_malloc_r+0x356>
 800e0d4:	2308      	movs	r3, #8
 800e0d6:	1a18      	subs	r0, r3, r0
 800e0d8:	1824      	adds	r4, r4, r0
 800e0da:	4b29      	ldr	r3, [pc, #164]	; (800e180 <_malloc_r+0x3fc>)
 800e0dc:	19a6      	adds	r6, r4, r6
 800e0de:	1818      	adds	r0, r3, r0
 800e0e0:	4016      	ands	r6, r2
 800e0e2:	1b86      	subs	r6, r0, r6
 800e0e4:	0031      	movs	r1, r6
 800e0e6:	9801      	ldr	r0, [sp, #4]
 800e0e8:	f000 f872 	bl	800e1d0 <_sbrk_r>
 800e0ec:	1c43      	adds	r3, r0, #1
 800e0ee:	d101      	bne.n	800e0f4 <_malloc_r+0x370>
 800e0f0:	0020      	movs	r0, r4
 800e0f2:	2600      	movs	r6, #0
 800e0f4:	4a23      	ldr	r2, [pc, #140]	; (800e184 <_malloc_r+0x400>)
 800e0f6:	1b00      	subs	r0, r0, r4
 800e0f8:	6813      	ldr	r3, [r2, #0]
 800e0fa:	199b      	adds	r3, r3, r6
 800e0fc:	6013      	str	r3, [r2, #0]
 800e0fe:	2301      	movs	r3, #1
 800e100:	4a21      	ldr	r2, [pc, #132]	; (800e188 <_malloc_r+0x404>)
 800e102:	1986      	adds	r6, r0, r6
 800e104:	431e      	orrs	r6, r3
 800e106:	6094      	str	r4, [r2, #8]
 800e108:	6066      	str	r6, [r4, #4]
 800e10a:	4297      	cmp	r7, r2
 800e10c:	d0bb      	beq.n	800e086 <_malloc_r+0x302>
 800e10e:	9a02      	ldr	r2, [sp, #8]
 800e110:	2a0f      	cmp	r2, #15
 800e112:	d814      	bhi.n	800e13e <_malloc_r+0x3ba>
 800e114:	6063      	str	r3, [r4, #4]
 800e116:	2203      	movs	r2, #3
 800e118:	4b1b      	ldr	r3, [pc, #108]	; (800e188 <_malloc_r+0x404>)
 800e11a:	689b      	ldr	r3, [r3, #8]
 800e11c:	685b      	ldr	r3, [r3, #4]
 800e11e:	4393      	bics	r3, r2
 800e120:	1b5a      	subs	r2, r3, r5
 800e122:	429d      	cmp	r5, r3
 800e124:	d801      	bhi.n	800e12a <_malloc_r+0x3a6>
 800e126:	2a0f      	cmp	r2, #15
 800e128:	dc1d      	bgt.n	800e166 <_malloc_r+0x3e2>
 800e12a:	9801      	ldr	r0, [sp, #4]
 800e12c:	f000 f848 	bl	800e1c0 <__malloc_unlock>
 800e130:	e635      	b.n	800dd9e <_malloc_r+0x1a>
 800e132:	9b03      	ldr	r3, [sp, #12]
 800e134:	1ae3      	subs	r3, r4, r3
 800e136:	185b      	adds	r3, r3, r1
 800e138:	4912      	ldr	r1, [pc, #72]	; (800e184 <_malloc_r+0x400>)
 800e13a:	600b      	str	r3, [r1, #0]
 800e13c:	e7c7      	b.n	800e0ce <_malloc_r+0x34a>
 800e13e:	2207      	movs	r2, #7
 800e140:	9e02      	ldr	r6, [sp, #8]
 800e142:	3e0c      	subs	r6, #12
 800e144:	4396      	bics	r6, r2
 800e146:	687a      	ldr	r2, [r7, #4]
 800e148:	4013      	ands	r3, r2
 800e14a:	2205      	movs	r2, #5
 800e14c:	4333      	orrs	r3, r6
 800e14e:	607b      	str	r3, [r7, #4]
 800e150:	19bb      	adds	r3, r7, r6
 800e152:	605a      	str	r2, [r3, #4]
 800e154:	609a      	str	r2, [r3, #8]
 800e156:	2e0f      	cmp	r6, #15
 800e158:	d995      	bls.n	800e086 <_malloc_r+0x302>
 800e15a:	0039      	movs	r1, r7
 800e15c:	9801      	ldr	r0, [sp, #4]
 800e15e:	3108      	adds	r1, #8
 800e160:	f001 ffa8 	bl	80100b4 <_free_r>
 800e164:	e78f      	b.n	800e086 <_malloc_r+0x302>
 800e166:	2301      	movs	r3, #1
 800e168:	0018      	movs	r0, r3
 800e16a:	4907      	ldr	r1, [pc, #28]	; (800e188 <_malloc_r+0x404>)
 800e16c:	4328      	orrs	r0, r5
 800e16e:	688c      	ldr	r4, [r1, #8]
 800e170:	4313      	orrs	r3, r2
 800e172:	1965      	adds	r5, r4, r5
 800e174:	6060      	str	r0, [r4, #4]
 800e176:	608d      	str	r5, [r1, #8]
 800e178:	606b      	str	r3, [r5, #4]
 800e17a:	e638      	b.n	800ddee <_malloc_r+0x6a>
 800e17c:	20000554 	.word	0x20000554
 800e180:	00000080 	.word	0x00000080
 800e184:	20004688 	.word	0x20004688
 800e188:	2000014c 	.word	0x2000014c

0800e18c <memcpy>:
 800e18c:	2300      	movs	r3, #0
 800e18e:	b510      	push	{r4, lr}
 800e190:	429a      	cmp	r2, r3
 800e192:	d100      	bne.n	800e196 <memcpy+0xa>
 800e194:	bd10      	pop	{r4, pc}
 800e196:	5ccc      	ldrb	r4, [r1, r3]
 800e198:	54c4      	strb	r4, [r0, r3]
 800e19a:	3301      	adds	r3, #1
 800e19c:	e7f8      	b.n	800e190 <memcpy+0x4>

0800e19e <memset>:
 800e19e:	0003      	movs	r3, r0
 800e1a0:	1882      	adds	r2, r0, r2
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d100      	bne.n	800e1a8 <memset+0xa>
 800e1a6:	4770      	bx	lr
 800e1a8:	7019      	strb	r1, [r3, #0]
 800e1aa:	3301      	adds	r3, #1
 800e1ac:	e7f9      	b.n	800e1a2 <memset+0x4>
	...

0800e1b0 <__malloc_lock>:
 800e1b0:	b510      	push	{r4, lr}
 800e1b2:	4802      	ldr	r0, [pc, #8]	; (800e1bc <__malloc_lock+0xc>)
 800e1b4:	f002 f83e 	bl	8010234 <__retarget_lock_acquire_recursive>
 800e1b8:	bd10      	pop	{r4, pc}
 800e1ba:	46c0      	nop			; (mov r8, r8)
 800e1bc:	2000547c 	.word	0x2000547c

0800e1c0 <__malloc_unlock>:
 800e1c0:	b510      	push	{r4, lr}
 800e1c2:	4802      	ldr	r0, [pc, #8]	; (800e1cc <__malloc_unlock+0xc>)
 800e1c4:	f002 f837 	bl	8010236 <__retarget_lock_release_recursive>
 800e1c8:	bd10      	pop	{r4, pc}
 800e1ca:	46c0      	nop			; (mov r8, r8)
 800e1cc:	2000547c 	.word	0x2000547c

0800e1d0 <_sbrk_r>:
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	b570      	push	{r4, r5, r6, lr}
 800e1d4:	4c06      	ldr	r4, [pc, #24]	; (800e1f0 <_sbrk_r+0x20>)
 800e1d6:	0005      	movs	r5, r0
 800e1d8:	0008      	movs	r0, r1
 800e1da:	6023      	str	r3, [r4, #0]
 800e1dc:	f7f5 fdc6 	bl	8003d6c <_sbrk>
 800e1e0:	1c43      	adds	r3, r0, #1
 800e1e2:	d103      	bne.n	800e1ec <_sbrk_r+0x1c>
 800e1e4:	6823      	ldr	r3, [r4, #0]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d000      	beq.n	800e1ec <_sbrk_r+0x1c>
 800e1ea:	602b      	str	r3, [r5, #0]
 800e1ec:	bd70      	pop	{r4, r5, r6, pc}
 800e1ee:	46c0      	nop			; (mov r8, r8)
 800e1f0:	20005484 	.word	0x20005484

0800e1f4 <sprintf>:
 800e1f4:	b40e      	push	{r1, r2, r3}
 800e1f6:	b510      	push	{r4, lr}
 800e1f8:	b09d      	sub	sp, #116	; 0x74
 800e1fa:	a902      	add	r1, sp, #8
 800e1fc:	9002      	str	r0, [sp, #8]
 800e1fe:	6108      	str	r0, [r1, #16]
 800e200:	480b      	ldr	r0, [pc, #44]	; (800e230 <sprintf+0x3c>)
 800e202:	2482      	movs	r4, #130	; 0x82
 800e204:	6088      	str	r0, [r1, #8]
 800e206:	6148      	str	r0, [r1, #20]
 800e208:	2001      	movs	r0, #1
 800e20a:	4240      	negs	r0, r0
 800e20c:	ab1f      	add	r3, sp, #124	; 0x7c
 800e20e:	81c8      	strh	r0, [r1, #14]
 800e210:	4808      	ldr	r0, [pc, #32]	; (800e234 <sprintf+0x40>)
 800e212:	cb04      	ldmia	r3!, {r2}
 800e214:	00a4      	lsls	r4, r4, #2
 800e216:	6800      	ldr	r0, [r0, #0]
 800e218:	9301      	str	r3, [sp, #4]
 800e21a:	818c      	strh	r4, [r1, #12]
 800e21c:	f000 f814 	bl	800e248 <_svfprintf_r>
 800e220:	2300      	movs	r3, #0
 800e222:	9a02      	ldr	r2, [sp, #8]
 800e224:	7013      	strb	r3, [r2, #0]
 800e226:	b01d      	add	sp, #116	; 0x74
 800e228:	bc10      	pop	{r4}
 800e22a:	bc08      	pop	{r3}
 800e22c:	b003      	add	sp, #12
 800e22e:	4718      	bx	r3
 800e230:	7fffffff 	.word	0x7fffffff
 800e234:	20000058 	.word	0x20000058

0800e238 <strcpy>:
 800e238:	1c03      	adds	r3, r0, #0
 800e23a:	780a      	ldrb	r2, [r1, #0]
 800e23c:	3101      	adds	r1, #1
 800e23e:	701a      	strb	r2, [r3, #0]
 800e240:	3301      	adds	r3, #1
 800e242:	2a00      	cmp	r2, #0
 800e244:	d1f9      	bne.n	800e23a <strcpy+0x2>
 800e246:	4770      	bx	lr

0800e248 <_svfprintf_r>:
 800e248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e24a:	b0c5      	sub	sp, #276	; 0x114
 800e24c:	9109      	str	r1, [sp, #36]	; 0x24
 800e24e:	0014      	movs	r4, r2
 800e250:	001d      	movs	r5, r3
 800e252:	900a      	str	r0, [sp, #40]	; 0x28
 800e254:	f001 ffe2 	bl	801021c <_localeconv_r>
 800e258:	6803      	ldr	r3, [r0, #0]
 800e25a:	0018      	movs	r0, r3
 800e25c:	9318      	str	r3, [sp, #96]	; 0x60
 800e25e:	f7f1 ff59 	bl	8000114 <strlen>
 800e262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e264:	9012      	str	r0, [sp, #72]	; 0x48
 800e266:	899b      	ldrh	r3, [r3, #12]
 800e268:	061b      	lsls	r3, r3, #24
 800e26a:	d518      	bpl.n	800e29e <_svfprintf_r+0x56>
 800e26c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e26e:	691b      	ldr	r3, [r3, #16]
 800e270:	930b      	str	r3, [sp, #44]	; 0x2c
 800e272:	2b00      	cmp	r3, #0
 800e274:	d113      	bne.n	800e29e <_svfprintf_r+0x56>
 800e276:	2140      	movs	r1, #64	; 0x40
 800e278:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e27a:	f7ff fd83 	bl	800dd84 <_malloc_r>
 800e27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e280:	6018      	str	r0, [r3, #0]
 800e282:	6118      	str	r0, [r3, #16]
 800e284:	2800      	cmp	r0, #0
 800e286:	d107      	bne.n	800e298 <_svfprintf_r+0x50>
 800e288:	230c      	movs	r3, #12
 800e28a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e28c:	6013      	str	r3, [r2, #0]
 800e28e:	3b0d      	subs	r3, #13
 800e290:	9313      	str	r3, [sp, #76]	; 0x4c
 800e292:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800e294:	b045      	add	sp, #276	; 0x114
 800e296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e298:	2340      	movs	r3, #64	; 0x40
 800e29a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e29c:	6153      	str	r3, [r2, #20]
 800e29e:	2300      	movs	r3, #0
 800e2a0:	af34      	add	r7, sp, #208	; 0xd0
 800e2a2:	9727      	str	r7, [sp, #156]	; 0x9c
 800e2a4:	9329      	str	r3, [sp, #164]	; 0xa4
 800e2a6:	9328      	str	r3, [sp, #160]	; 0xa0
 800e2a8:	9411      	str	r4, [sp, #68]	; 0x44
 800e2aa:	930e      	str	r3, [sp, #56]	; 0x38
 800e2ac:	9316      	str	r3, [sp, #88]	; 0x58
 800e2ae:	9317      	str	r3, [sp, #92]	; 0x5c
 800e2b0:	931a      	str	r3, [sp, #104]	; 0x68
 800e2b2:	9319      	str	r3, [sp, #100]	; 0x64
 800e2b4:	9313      	str	r3, [sp, #76]	; 0x4c
 800e2b6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800e2b8:	7823      	ldrb	r3, [r4, #0]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d002      	beq.n	800e2c4 <_svfprintf_r+0x7c>
 800e2be:	2b25      	cmp	r3, #37	; 0x25
 800e2c0:	d000      	beq.n	800e2c4 <_svfprintf_r+0x7c>
 800e2c2:	e091      	b.n	800e3e8 <_svfprintf_r+0x1a0>
 800e2c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e2c6:	1ae6      	subs	r6, r4, r3
 800e2c8:	d018      	beq.n	800e2fc <_svfprintf_r+0xb4>
 800e2ca:	603b      	str	r3, [r7, #0]
 800e2cc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800e2ce:	607e      	str	r6, [r7, #4]
 800e2d0:	199b      	adds	r3, r3, r6
 800e2d2:	9329      	str	r3, [sp, #164]	; 0xa4
 800e2d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e2d6:	3708      	adds	r7, #8
 800e2d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e2da:	3301      	adds	r3, #1
 800e2dc:	9328      	str	r3, [sp, #160]	; 0xa0
 800e2de:	2b07      	cmp	r3, #7
 800e2e0:	dd09      	ble.n	800e2f6 <_svfprintf_r+0xae>
 800e2e2:	aa27      	add	r2, sp, #156	; 0x9c
 800e2e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e2e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e2e8:	f002 fa94 	bl	8010814 <__ssprint_r>
 800e2ec:	2800      	cmp	r0, #0
 800e2ee:	d001      	beq.n	800e2f4 <_svfprintf_r+0xac>
 800e2f0:	f000 ffa8 	bl	800f244 <_svfprintf_r+0xffc>
 800e2f4:	af34      	add	r7, sp, #208	; 0xd0
 800e2f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e2f8:	199b      	adds	r3, r3, r6
 800e2fa:	9313      	str	r3, [sp, #76]	; 0x4c
 800e2fc:	7823      	ldrb	r3, [r4, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d101      	bne.n	800e306 <_svfprintf_r+0xbe>
 800e302:	f000 ffbe 	bl	800f282 <_svfprintf_r+0x103a>
 800e306:	221f      	movs	r2, #31
 800e308:	2300      	movs	r3, #0
 800e30a:	a918      	add	r1, sp, #96	; 0x60
 800e30c:	1852      	adds	r2, r2, r1
 800e30e:	2101      	movs	r1, #1
 800e310:	7013      	strb	r3, [r2, #0]
 800e312:	001e      	movs	r6, r3
 800e314:	001a      	movs	r2, r3
 800e316:	4249      	negs	r1, r1
 800e318:	3401      	adds	r4, #1
 800e31a:	910b      	str	r1, [sp, #44]	; 0x2c
 800e31c:	9314      	str	r3, [sp, #80]	; 0x50
 800e31e:	1c61      	adds	r1, r4, #1
 800e320:	9111      	str	r1, [sp, #68]	; 0x44
 800e322:	7821      	ldrb	r1, [r4, #0]
 800e324:	910d      	str	r1, [sp, #52]	; 0x34
 800e326:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e328:	3820      	subs	r0, #32
 800e32a:	2858      	cmp	r0, #88	; 0x58
 800e32c:	d901      	bls.n	800e332 <_svfprintf_r+0xea>
 800e32e:	f000 fca7 	bl	800ec80 <_svfprintf_r+0xa38>
 800e332:	f7f1 ff0b 	bl	800014c <__gnu_thumb1_case_uhi>
 800e336:	00cc      	.short	0x00cc
 800e338:	04a504a5 	.word	0x04a504a5
 800e33c:	04a500d1 	.word	0x04a500d1
 800e340:	04a504a5 	.word	0x04a504a5
 800e344:	04a504a5 	.word	0x04a504a5
 800e348:	00d404a5 	.word	0x00d404a5
 800e34c:	04a5005b 	.word	0x04a5005b
 800e350:	00de00dc 	.word	0x00de00dc
 800e354:	010304a5 	.word	0x010304a5
 800e358:	01050105 	.word	0x01050105
 800e35c:	01050105 	.word	0x01050105
 800e360:	01050105 	.word	0x01050105
 800e364:	01050105 	.word	0x01050105
 800e368:	04a50105 	.word	0x04a50105
 800e36c:	04a504a5 	.word	0x04a504a5
 800e370:	04a504a5 	.word	0x04a504a5
 800e374:	04a504a5 	.word	0x04a504a5
 800e378:	04a504a5 	.word	0x04a504a5
 800e37c:	013504a5 	.word	0x013504a5
 800e380:	04a5014d 	.word	0x04a5014d
 800e384:	04a5014d 	.word	0x04a5014d
 800e388:	04a504a5 	.word	0x04a504a5
 800e38c:	011704a5 	.word	0x011704a5
 800e390:	04a504a5 	.word	0x04a504a5
 800e394:	04a503ad 	.word	0x04a503ad
 800e398:	04a504a5 	.word	0x04a504a5
 800e39c:	04a504a5 	.word	0x04a504a5
 800e3a0:	04a50407 	.word	0x04a50407
 800e3a4:	00a304a5 	.word	0x00a304a5
 800e3a8:	04a504a5 	.word	0x04a504a5
 800e3ac:	04a504a5 	.word	0x04a504a5
 800e3b0:	04a504a5 	.word	0x04a504a5
 800e3b4:	04a504a5 	.word	0x04a504a5
 800e3b8:	04a504a5 	.word	0x04a504a5
 800e3bc:	005f0126 	.word	0x005f0126
 800e3c0:	014d014d 	.word	0x014d014d
 800e3c4:	0119014d 	.word	0x0119014d
 800e3c8:	04a5005f 	.word	0x04a5005f
 800e3cc:	011b04a5 	.word	0x011b04a5
 800e3d0:	038e04a5 	.word	0x038e04a5
 800e3d4:	03d903af 	.word	0x03d903af
 800e3d8:	04a50122 	.word	0x04a50122
 800e3dc:	04a503ea 	.word	0x04a503ea
 800e3e0:	04a50409 	.word	0x04a50409
 800e3e4:	043004a5 	.word	0x043004a5
 800e3e8:	3401      	adds	r4, #1
 800e3ea:	e765      	b.n	800e2b8 <_svfprintf_r+0x70>
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	222b      	movs	r2, #43	; 0x2b
 800e3f0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800e3f2:	e794      	b.n	800e31e <_svfprintf_r+0xd6>
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d003      	beq.n	800e400 <_svfprintf_r+0x1b8>
 800e3f8:	231f      	movs	r3, #31
 800e3fa:	a918      	add	r1, sp, #96	; 0x60
 800e3fc:	185b      	adds	r3, r3, r1
 800e3fe:	701a      	strb	r2, [r3, #0]
 800e400:	06b3      	lsls	r3, r6, #26
 800e402:	d400      	bmi.n	800e406 <_svfprintf_r+0x1be>
 800e404:	e0d5      	b.n	800e5b2 <_svfprintf_r+0x36a>
 800e406:	2307      	movs	r3, #7
 800e408:	3507      	adds	r5, #7
 800e40a:	439d      	bics	r5, r3
 800e40c:	002b      	movs	r3, r5
 800e40e:	3308      	adds	r3, #8
 800e410:	930f      	str	r3, [sp, #60]	; 0x3c
 800e412:	682b      	ldr	r3, [r5, #0]
 800e414:	686c      	ldr	r4, [r5, #4]
 800e416:	9306      	str	r3, [sp, #24]
 800e418:	9407      	str	r4, [sp, #28]
 800e41a:	9a07      	ldr	r2, [sp, #28]
 800e41c:	2301      	movs	r3, #1
 800e41e:	2a00      	cmp	r2, #0
 800e420:	da0c      	bge.n	800e43c <_svfprintf_r+0x1f4>
 800e422:	9906      	ldr	r1, [sp, #24]
 800e424:	9a07      	ldr	r2, [sp, #28]
 800e426:	2400      	movs	r4, #0
 800e428:	424b      	negs	r3, r1
 800e42a:	4194      	sbcs	r4, r2
 800e42c:	9306      	str	r3, [sp, #24]
 800e42e:	9407      	str	r4, [sp, #28]
 800e430:	231f      	movs	r3, #31
 800e432:	222d      	movs	r2, #45	; 0x2d
 800e434:	a918      	add	r1, sp, #96	; 0x60
 800e436:	185b      	adds	r3, r3, r1
 800e438:	701a      	strb	r2, [r3, #0]
 800e43a:	2301      	movs	r3, #1
 800e43c:	9907      	ldr	r1, [sp, #28]
 800e43e:	9a06      	ldr	r2, [sp, #24]
 800e440:	430a      	orrs	r2, r1
 800e442:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e444:	3101      	adds	r1, #1
 800e446:	d101      	bne.n	800e44c <_svfprintf_r+0x204>
 800e448:	f000 ff3f 	bl	800f2ca <_svfprintf_r+0x1082>
 800e44c:	2180      	movs	r1, #128	; 0x80
 800e44e:	0035      	movs	r5, r6
 800e450:	438d      	bics	r5, r1
 800e452:	2a00      	cmp	r2, #0
 800e454:	d001      	beq.n	800e45a <_svfprintf_r+0x212>
 800e456:	f000 ff3d 	bl	800f2d4 <_svfprintf_r+0x108c>
 800e45a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e45c:	2a00      	cmp	r2, #0
 800e45e:	d101      	bne.n	800e464 <_svfprintf_r+0x21c>
 800e460:	f000 fc04 	bl	800ec6c <_svfprintf_r+0xa24>
 800e464:	2b01      	cmp	r3, #1
 800e466:	d100      	bne.n	800e46a <_svfprintf_r+0x222>
 800e468:	e3b7      	b.n	800ebda <_svfprintf_r+0x992>
 800e46a:	2b02      	cmp	r3, #2
 800e46c:	d100      	bne.n	800e470 <_svfprintf_r+0x228>
 800e46e:	e3df      	b.n	800ec30 <_svfprintf_r+0x9e8>
 800e470:	2300      	movs	r3, #0
 800e472:	2400      	movs	r4, #0
 800e474:	9306      	str	r3, [sp, #24]
 800e476:	9407      	str	r4, [sp, #28]
 800e478:	f000 ff32 	bl	800f2e0 <_svfprintf_r+0x1098>
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d003      	beq.n	800e488 <_svfprintf_r+0x240>
 800e480:	231f      	movs	r3, #31
 800e482:	a918      	add	r1, sp, #96	; 0x60
 800e484:	185b      	adds	r3, r3, r1
 800e486:	701a      	strb	r2, [r3, #0]
 800e488:	4b8c      	ldr	r3, [pc, #560]	; (800e6bc <_svfprintf_r+0x474>)
 800e48a:	931a      	str	r3, [sp, #104]	; 0x68
 800e48c:	2320      	movs	r3, #32
 800e48e:	4033      	ands	r3, r6
 800e490:	d100      	bne.n	800e494 <_svfprintf_r+0x24c>
 800e492:	e388      	b.n	800eba6 <_svfprintf_r+0x95e>
 800e494:	2307      	movs	r3, #7
 800e496:	3507      	adds	r5, #7
 800e498:	439d      	bics	r5, r3
 800e49a:	002b      	movs	r3, r5
 800e49c:	3308      	adds	r3, #8
 800e49e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e4a0:	682b      	ldr	r3, [r5, #0]
 800e4a2:	686c      	ldr	r4, [r5, #4]
 800e4a4:	9306      	str	r3, [sp, #24]
 800e4a6:	9407      	str	r4, [sp, #28]
 800e4a8:	2302      	movs	r3, #2
 800e4aa:	07f2      	lsls	r2, r6, #31
 800e4ac:	d400      	bmi.n	800e4b0 <_svfprintf_r+0x268>
 800e4ae:	e2ff      	b.n	800eab0 <_svfprintf_r+0x868>
 800e4b0:	9a06      	ldr	r2, [sp, #24]
 800e4b2:	9907      	ldr	r1, [sp, #28]
 800e4b4:	430a      	orrs	r2, r1
 800e4b6:	d100      	bne.n	800e4ba <_svfprintf_r+0x272>
 800e4b8:	e2fa      	b.n	800eab0 <_svfprintf_r+0x868>
 800e4ba:	2130      	movs	r1, #48	; 0x30
 800e4bc:	aa20      	add	r2, sp, #128	; 0x80
 800e4be:	7011      	strb	r1, [r2, #0]
 800e4c0:	2034      	movs	r0, #52	; 0x34
 800e4c2:	4669      	mov	r1, sp
 800e4c4:	1809      	adds	r1, r1, r0
 800e4c6:	7809      	ldrb	r1, [r1, #0]
 800e4c8:	431e      	orrs	r6, r3
 800e4ca:	7051      	strb	r1, [r2, #1]
 800e4cc:	e2f0      	b.n	800eab0 <_svfprintf_r+0x868>
 800e4ce:	2a00      	cmp	r2, #0
 800e4d0:	d18e      	bne.n	800e3f0 <_svfprintf_r+0x1a8>
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	2220      	movs	r2, #32
 800e4d6:	e78b      	b.n	800e3f0 <_svfprintf_r+0x1a8>
 800e4d8:	2101      	movs	r1, #1
 800e4da:	430e      	orrs	r6, r1
 800e4dc:	e788      	b.n	800e3f0 <_svfprintf_r+0x1a8>
 800e4de:	6829      	ldr	r1, [r5, #0]
 800e4e0:	3504      	adds	r5, #4
 800e4e2:	9114      	str	r1, [sp, #80]	; 0x50
 800e4e4:	2900      	cmp	r1, #0
 800e4e6:	db00      	blt.n	800e4ea <_svfprintf_r+0x2a2>
 800e4e8:	e782      	b.n	800e3f0 <_svfprintf_r+0x1a8>
 800e4ea:	4249      	negs	r1, r1
 800e4ec:	9114      	str	r1, [sp, #80]	; 0x50
 800e4ee:	2104      	movs	r1, #4
 800e4f0:	e7f3      	b.n	800e4da <_svfprintf_r+0x292>
 800e4f2:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e4f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e4f6:	7800      	ldrb	r0, [r0, #0]
 800e4f8:	3101      	adds	r1, #1
 800e4fa:	900d      	str	r0, [sp, #52]	; 0x34
 800e4fc:	282a      	cmp	r0, #42	; 0x2a
 800e4fe:	d009      	beq.n	800e514 <_svfprintf_r+0x2cc>
 800e500:	2000      	movs	r0, #0
 800e502:	900b      	str	r0, [sp, #44]	; 0x2c
 800e504:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e506:	0008      	movs	r0, r1
 800e508:	3c30      	subs	r4, #48	; 0x30
 800e50a:	46a4      	mov	ip, r4
 800e50c:	2c09      	cmp	r4, #9
 800e50e:	d90c      	bls.n	800e52a <_svfprintf_r+0x2e2>
 800e510:	9011      	str	r0, [sp, #68]	; 0x44
 800e512:	e708      	b.n	800e326 <_svfprintf_r+0xde>
 800e514:	682c      	ldr	r4, [r5, #0]
 800e516:	1d28      	adds	r0, r5, #4
 800e518:	940b      	str	r4, [sp, #44]	; 0x2c
 800e51a:	2c00      	cmp	r4, #0
 800e51c:	da02      	bge.n	800e524 <_svfprintf_r+0x2dc>
 800e51e:	2401      	movs	r4, #1
 800e520:	4264      	negs	r4, r4
 800e522:	940b      	str	r4, [sp, #44]	; 0x2c
 800e524:	0005      	movs	r5, r0
 800e526:	9111      	str	r1, [sp, #68]	; 0x44
 800e528:	e762      	b.n	800e3f0 <_svfprintf_r+0x1a8>
 800e52a:	240a      	movs	r4, #10
 800e52c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e52e:	4360      	muls	r0, r4
 800e530:	4460      	add	r0, ip
 800e532:	900b      	str	r0, [sp, #44]	; 0x2c
 800e534:	7808      	ldrb	r0, [r1, #0]
 800e536:	3101      	adds	r1, #1
 800e538:	900d      	str	r0, [sp, #52]	; 0x34
 800e53a:	e7e3      	b.n	800e504 <_svfprintf_r+0x2bc>
 800e53c:	2180      	movs	r1, #128	; 0x80
 800e53e:	e7cc      	b.n	800e4da <_svfprintf_r+0x292>
 800e540:	2100      	movs	r1, #0
 800e542:	9114      	str	r1, [sp, #80]	; 0x50
 800e544:	200a      	movs	r0, #10
 800e546:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e548:	4341      	muls	r1, r0
 800e54a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e54c:	3830      	subs	r0, #48	; 0x30
 800e54e:	1841      	adds	r1, r0, r1
 800e550:	9114      	str	r1, [sp, #80]	; 0x50
 800e552:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e554:	1c48      	adds	r0, r1, #1
 800e556:	7809      	ldrb	r1, [r1, #0]
 800e558:	9011      	str	r0, [sp, #68]	; 0x44
 800e55a:	910d      	str	r1, [sp, #52]	; 0x34
 800e55c:	3930      	subs	r1, #48	; 0x30
 800e55e:	2909      	cmp	r1, #9
 800e560:	d9f0      	bls.n	800e544 <_svfprintf_r+0x2fc>
 800e562:	e7d5      	b.n	800e510 <_svfprintf_r+0x2c8>
 800e564:	2108      	movs	r1, #8
 800e566:	e7b8      	b.n	800e4da <_svfprintf_r+0x292>
 800e568:	2140      	movs	r1, #64	; 0x40
 800e56a:	e7b6      	b.n	800e4da <_svfprintf_r+0x292>
 800e56c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e56e:	7809      	ldrb	r1, [r1, #0]
 800e570:	296c      	cmp	r1, #108	; 0x6c
 800e572:	d104      	bne.n	800e57e <_svfprintf_r+0x336>
 800e574:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e576:	3101      	adds	r1, #1
 800e578:	9111      	str	r1, [sp, #68]	; 0x44
 800e57a:	2120      	movs	r1, #32
 800e57c:	e7ad      	b.n	800e4da <_svfprintf_r+0x292>
 800e57e:	2110      	movs	r1, #16
 800e580:	e7ab      	b.n	800e4da <_svfprintf_r+0x292>
 800e582:	1d2b      	adds	r3, r5, #4
 800e584:	682a      	ldr	r2, [r5, #0]
 800e586:	930f      	str	r3, [sp, #60]	; 0x3c
 800e588:	ab2a      	add	r3, sp, #168	; 0xa8
 800e58a:	701a      	strb	r2, [r3, #0]
 800e58c:	221f      	movs	r2, #31
 800e58e:	2400      	movs	r4, #0
 800e590:	a918      	add	r1, sp, #96	; 0x60
 800e592:	1852      	adds	r2, r2, r1
 800e594:	7014      	strb	r4, [r2, #0]
 800e596:	2201      	movs	r2, #1
 800e598:	9410      	str	r4, [sp, #64]	; 0x40
 800e59a:	920b      	str	r2, [sp, #44]	; 0x2c
 800e59c:	930c      	str	r3, [sp, #48]	; 0x30
 800e59e:	e134      	b.n	800e80a <_svfprintf_r+0x5c2>
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d003      	beq.n	800e5ac <_svfprintf_r+0x364>
 800e5a4:	231f      	movs	r3, #31
 800e5a6:	a918      	add	r1, sp, #96	; 0x60
 800e5a8:	185b      	adds	r3, r3, r1
 800e5aa:	701a      	strb	r2, [r3, #0]
 800e5ac:	2310      	movs	r3, #16
 800e5ae:	431e      	orrs	r6, r3
 800e5b0:	e726      	b.n	800e400 <_svfprintf_r+0x1b8>
 800e5b2:	1d2a      	adds	r2, r5, #4
 800e5b4:	06f3      	lsls	r3, r6, #27
 800e5b6:	d505      	bpl.n	800e5c4 <_svfprintf_r+0x37c>
 800e5b8:	682b      	ldr	r3, [r5, #0]
 800e5ba:	920f      	str	r2, [sp, #60]	; 0x3c
 800e5bc:	9306      	str	r3, [sp, #24]
 800e5be:	17db      	asrs	r3, r3, #31
 800e5c0:	9307      	str	r3, [sp, #28]
 800e5c2:	e72a      	b.n	800e41a <_svfprintf_r+0x1d2>
 800e5c4:	682b      	ldr	r3, [r5, #0]
 800e5c6:	920f      	str	r2, [sp, #60]	; 0x3c
 800e5c8:	0671      	lsls	r1, r6, #25
 800e5ca:	d5f7      	bpl.n	800e5bc <_svfprintf_r+0x374>
 800e5cc:	b21b      	sxth	r3, r3
 800e5ce:	e7f5      	b.n	800e5bc <_svfprintf_r+0x374>
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d003      	beq.n	800e5dc <_svfprintf_r+0x394>
 800e5d4:	231f      	movs	r3, #31
 800e5d6:	a918      	add	r1, sp, #96	; 0x60
 800e5d8:	185b      	adds	r3, r3, r1
 800e5da:	701a      	strb	r2, [r3, #0]
 800e5dc:	2307      	movs	r3, #7
 800e5de:	3507      	adds	r5, #7
 800e5e0:	439d      	bics	r5, r3
 800e5e2:	002b      	movs	r3, r5
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	3308      	adds	r3, #8
 800e5e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800e5ea:	682b      	ldr	r3, [r5, #0]
 800e5ec:	4252      	negs	r2, r2
 800e5ee:	9316      	str	r3, [sp, #88]	; 0x58
 800e5f0:	686b      	ldr	r3, [r5, #4]
 800e5f2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800e5f4:	9317      	str	r3, [sp, #92]	; 0x5c
 800e5f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e5f8:	0028      	movs	r0, r5
 800e5fa:	005c      	lsls	r4, r3, #1
 800e5fc:	0864      	lsrs	r4, r4, #1
 800e5fe:	4b30      	ldr	r3, [pc, #192]	; (800e6c0 <_svfprintf_r+0x478>)
 800e600:	0021      	movs	r1, r4
 800e602:	f7f3 fd1b 	bl	800203c <__aeabi_dcmpun>
 800e606:	2800      	cmp	r0, #0
 800e608:	d001      	beq.n	800e60e <_svfprintf_r+0x3c6>
 800e60a:	f000 fe44 	bl	800f296 <_svfprintf_r+0x104e>
 800e60e:	2201      	movs	r2, #1
 800e610:	4b2b      	ldr	r3, [pc, #172]	; (800e6c0 <_svfprintf_r+0x478>)
 800e612:	4252      	negs	r2, r2
 800e614:	0028      	movs	r0, r5
 800e616:	0021      	movs	r1, r4
 800e618:	f7f1 ff38 	bl	800048c <__aeabi_dcmple>
 800e61c:	2800      	cmp	r0, #0
 800e61e:	d001      	beq.n	800e624 <_svfprintf_r+0x3dc>
 800e620:	f000 fe39 	bl	800f296 <_svfprintf_r+0x104e>
 800e624:	2200      	movs	r2, #0
 800e626:	2300      	movs	r3, #0
 800e628:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e62a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800e62c:	f7f1 ff24 	bl	8000478 <__aeabi_dcmplt>
 800e630:	2800      	cmp	r0, #0
 800e632:	d004      	beq.n	800e63e <_svfprintf_r+0x3f6>
 800e634:	231f      	movs	r3, #31
 800e636:	222d      	movs	r2, #45	; 0x2d
 800e638:	a918      	add	r1, sp, #96	; 0x60
 800e63a:	185b      	adds	r3, r3, r1
 800e63c:	701a      	strb	r2, [r3, #0]
 800e63e:	4b21      	ldr	r3, [pc, #132]	; (800e6c4 <_svfprintf_r+0x47c>)
 800e640:	930c      	str	r3, [sp, #48]	; 0x30
 800e642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e644:	2b47      	cmp	r3, #71	; 0x47
 800e646:	dc01      	bgt.n	800e64c <_svfprintf_r+0x404>
 800e648:	4b1f      	ldr	r3, [pc, #124]	; (800e6c8 <_svfprintf_r+0x480>)
 800e64a:	930c      	str	r3, [sp, #48]	; 0x30
 800e64c:	2380      	movs	r3, #128	; 0x80
 800e64e:	2400      	movs	r4, #0
 800e650:	439e      	bics	r6, r3
 800e652:	3b7d      	subs	r3, #125	; 0x7d
 800e654:	930b      	str	r3, [sp, #44]	; 0x2c
 800e656:	9410      	str	r4, [sp, #64]	; 0x40
 800e658:	e0d7      	b.n	800e80a <_svfprintf_r+0x5c2>
 800e65a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e65c:	3301      	adds	r3, #1
 800e65e:	d024      	beq.n	800e6aa <_svfprintf_r+0x462>
 800e660:	2320      	movs	r3, #32
 800e662:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e664:	439a      	bics	r2, r3
 800e666:	2a47      	cmp	r2, #71	; 0x47
 800e668:	d102      	bne.n	800e670 <_svfprintf_r+0x428>
 800e66a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d01f      	beq.n	800e6b0 <_svfprintf_r+0x468>
 800e670:	2380      	movs	r3, #128	; 0x80
 800e672:	005b      	lsls	r3, r3, #1
 800e674:	4333      	orrs	r3, r6
 800e676:	931c      	str	r3, [sp, #112]	; 0x70
 800e678:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800e67a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e67c:	9310      	str	r3, [sp, #64]	; 0x40
 800e67e:	2c00      	cmp	r4, #0
 800e680:	da18      	bge.n	800e6b4 <_svfprintf_r+0x46c>
 800e682:	2280      	movs	r2, #128	; 0x80
 800e684:	0612      	lsls	r2, r2, #24
 800e686:	0023      	movs	r3, r4
 800e688:	4694      	mov	ip, r2
 800e68a:	4463      	add	r3, ip
 800e68c:	9315      	str	r3, [sp, #84]	; 0x54
 800e68e:	232d      	movs	r3, #45	; 0x2d
 800e690:	931b      	str	r3, [sp, #108]	; 0x6c
 800e692:	2320      	movs	r3, #32
 800e694:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e696:	439c      	bics	r4, r3
 800e698:	2c46      	cmp	r4, #70	; 0x46
 800e69a:	d017      	beq.n	800e6cc <_svfprintf_r+0x484>
 800e69c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e69e:	2c45      	cmp	r4, #69	; 0x45
 800e6a0:	d101      	bne.n	800e6a6 <_svfprintf_r+0x45e>
 800e6a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6a4:	1c5d      	adds	r5, r3, #1
 800e6a6:	2302      	movs	r3, #2
 800e6a8:	e012      	b.n	800e6d0 <_svfprintf_r+0x488>
 800e6aa:	2306      	movs	r3, #6
 800e6ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800e6ae:	e7df      	b.n	800e670 <_svfprintf_r+0x428>
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	e7fb      	b.n	800e6ac <_svfprintf_r+0x464>
 800e6b4:	9415      	str	r4, [sp, #84]	; 0x54
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	e7ea      	b.n	800e690 <_svfprintf_r+0x448>
 800e6ba:	46c0      	nop			; (mov r8, r8)
 800e6bc:	08013d06 	.word	0x08013d06
 800e6c0:	7fefffff 	.word	0x7fefffff
 800e6c4:	08013cfa 	.word	0x08013cfa
 800e6c8:	08013cf6 	.word	0x08013cf6
 800e6cc:	2303      	movs	r3, #3
 800e6ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e6d0:	aa25      	add	r2, sp, #148	; 0x94
 800e6d2:	9204      	str	r2, [sp, #16]
 800e6d4:	aa22      	add	r2, sp, #136	; 0x88
 800e6d6:	9203      	str	r2, [sp, #12]
 800e6d8:	aa21      	add	r2, sp, #132	; 0x84
 800e6da:	9202      	str	r2, [sp, #8]
 800e6dc:	9300      	str	r3, [sp, #0]
 800e6de:	9501      	str	r5, [sp, #4]
 800e6e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e6e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e6e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e6e6:	f000 fea9 	bl	800f43c <_dtoa_r>
 800e6ea:	900c      	str	r0, [sp, #48]	; 0x30
 800e6ec:	2c47      	cmp	r4, #71	; 0x47
 800e6ee:	d103      	bne.n	800e6f8 <_svfprintf_r+0x4b0>
 800e6f0:	07f3      	lsls	r3, r6, #31
 800e6f2:	d401      	bmi.n	800e6f8 <_svfprintf_r+0x4b0>
 800e6f4:	f000 fde3 	bl	800f2be <_svfprintf_r+0x1076>
 800e6f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e6fa:	195b      	adds	r3, r3, r5
 800e6fc:	930e      	str	r3, [sp, #56]	; 0x38
 800e6fe:	2c46      	cmp	r4, #70	; 0x46
 800e700:	d113      	bne.n	800e72a <_svfprintf_r+0x4e2>
 800e702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e704:	781b      	ldrb	r3, [r3, #0]
 800e706:	2b30      	cmp	r3, #48	; 0x30
 800e708:	d10a      	bne.n	800e720 <_svfprintf_r+0x4d8>
 800e70a:	2200      	movs	r2, #0
 800e70c:	2300      	movs	r3, #0
 800e70e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e710:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e712:	f7f1 feab 	bl	800046c <__aeabi_dcmpeq>
 800e716:	2800      	cmp	r0, #0
 800e718:	d102      	bne.n	800e720 <_svfprintf_r+0x4d8>
 800e71a:	2301      	movs	r3, #1
 800e71c:	1b5d      	subs	r5, r3, r5
 800e71e:	9521      	str	r5, [sp, #132]	; 0x84
 800e720:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e722:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e724:	4694      	mov	ip, r2
 800e726:	4463      	add	r3, ip
 800e728:	930e      	str	r3, [sp, #56]	; 0x38
 800e72a:	2200      	movs	r2, #0
 800e72c:	2300      	movs	r3, #0
 800e72e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e730:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e732:	f7f1 fe9b 	bl	800046c <__aeabi_dcmpeq>
 800e736:	2230      	movs	r2, #48	; 0x30
 800e738:	2800      	cmp	r0, #0
 800e73a:	d100      	bne.n	800e73e <_svfprintf_r+0x4f6>
 800e73c:	e13d      	b.n	800e9ba <_svfprintf_r+0x772>
 800e73e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e740:	9325      	str	r3, [sp, #148]	; 0x94
 800e742:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800e744:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e746:	1a9b      	subs	r3, r3, r2
 800e748:	930e      	str	r3, [sp, #56]	; 0x38
 800e74a:	2c47      	cmp	r4, #71	; 0x47
 800e74c:	d000      	beq.n	800e750 <_svfprintf_r+0x508>
 800e74e:	e139      	b.n	800e9c4 <_svfprintf_r+0x77c>
 800e750:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e752:	1cda      	adds	r2, r3, #3
 800e754:	db03      	blt.n	800e75e <_svfprintf_r+0x516>
 800e756:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e758:	429a      	cmp	r2, r3
 800e75a:	db00      	blt.n	800e75e <_svfprintf_r+0x516>
 800e75c:	e162      	b.n	800ea24 <_svfprintf_r+0x7dc>
 800e75e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e760:	3b02      	subs	r3, #2
 800e762:	930d      	str	r3, [sp, #52]	; 0x34
 800e764:	4669      	mov	r1, sp
 800e766:	2034      	movs	r0, #52	; 0x34
 800e768:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e76a:	1809      	adds	r1, r1, r0
 800e76c:	7809      	ldrb	r1, [r1, #0]
 800e76e:	1e54      	subs	r4, r2, #1
 800e770:	ab23      	add	r3, sp, #140	; 0x8c
 800e772:	9421      	str	r4, [sp, #132]	; 0x84
 800e774:	7019      	strb	r1, [r3, #0]
 800e776:	2c00      	cmp	r4, #0
 800e778:	db00      	blt.n	800e77c <_svfprintf_r+0x534>
 800e77a:	e13a      	b.n	800e9f2 <_svfprintf_r+0x7aa>
 800e77c:	2401      	movs	r4, #1
 800e77e:	1aa4      	subs	r4, r4, r2
 800e780:	222d      	movs	r2, #45	; 0x2d
 800e782:	705a      	strb	r2, [r3, #1]
 800e784:	2c09      	cmp	r4, #9
 800e786:	dc00      	bgt.n	800e78a <_svfprintf_r+0x542>
 800e788:	e13c      	b.n	800ea04 <_svfprintf_r+0x7bc>
 800e78a:	253b      	movs	r5, #59	; 0x3b
 800e78c:	ab18      	add	r3, sp, #96	; 0x60
 800e78e:	18ed      	adds	r5, r5, r3
 800e790:	1e6b      	subs	r3, r5, #1
 800e792:	0020      	movs	r0, r4
 800e794:	210a      	movs	r1, #10
 800e796:	930b      	str	r3, [sp, #44]	; 0x2c
 800e798:	f7f1 fe52 	bl	8000440 <__aeabi_idivmod>
 800e79c:	1e6b      	subs	r3, r5, #1
 800e79e:	3130      	adds	r1, #48	; 0x30
 800e7a0:	7019      	strb	r1, [r3, #0]
 800e7a2:	0020      	movs	r0, r4
 800e7a4:	210a      	movs	r1, #10
 800e7a6:	f7f1 fd65 	bl	8000274 <__divsi3>
 800e7aa:	0004      	movs	r4, r0
 800e7ac:	2809      	cmp	r0, #9
 800e7ae:	dd00      	ble.n	800e7b2 <_svfprintf_r+0x56a>
 800e7b0:	e121      	b.n	800e9f6 <_svfprintf_r+0x7ae>
 800e7b2:	232e      	movs	r3, #46	; 0x2e
 800e7b4:	213b      	movs	r1, #59	; 0x3b
 800e7b6:	aa18      	add	r2, sp, #96	; 0x60
 800e7b8:	3d02      	subs	r5, #2
 800e7ba:	3430      	adds	r4, #48	; 0x30
 800e7bc:	702c      	strb	r4, [r5, #0]
 800e7be:	189b      	adds	r3, r3, r2
 800e7c0:	1889      	adds	r1, r1, r2
 800e7c2:	001a      	movs	r2, r3
 800e7c4:	428d      	cmp	r5, r1
 800e7c6:	d200      	bcs.n	800e7ca <_svfprintf_r+0x582>
 800e7c8:	e117      	b.n	800e9fa <_svfprintf_r+0x7b2>
 800e7ca:	ab23      	add	r3, sp, #140	; 0x8c
 800e7cc:	1ad3      	subs	r3, r2, r3
 800e7ce:	9319      	str	r3, [sp, #100]	; 0x64
 800e7d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e7d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7d4:	4694      	mov	ip, r2
 800e7d6:	4463      	add	r3, ip
 800e7d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e7da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	dc03      	bgt.n	800e7e8 <_svfprintf_r+0x5a0>
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	401e      	ands	r6, r3
 800e7e4:	9610      	str	r6, [sp, #64]	; 0x40
 800e7e6:	d006      	beq.n	800e7f6 <_svfprintf_r+0x5ae>
 800e7e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e7ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e7ec:	4694      	mov	ip, r2
 800e7ee:	4463      	add	r3, ip
 800e7f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	9310      	str	r3, [sp, #64]	; 0x40
 800e7f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d004      	beq.n	800e806 <_svfprintf_r+0x5be>
 800e7fc:	231f      	movs	r3, #31
 800e7fe:	222d      	movs	r2, #45	; 0x2d
 800e800:	a918      	add	r1, sp, #96	; 0x60
 800e802:	185b      	adds	r3, r3, r1
 800e804:	701a      	strb	r2, [r3, #0]
 800e806:	2400      	movs	r4, #0
 800e808:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800e80a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e80c:	9415      	str	r4, [sp, #84]	; 0x54
 800e80e:	429c      	cmp	r4, r3
 800e810:	da00      	bge.n	800e814 <_svfprintf_r+0x5cc>
 800e812:	9315      	str	r3, [sp, #84]	; 0x54
 800e814:	231f      	movs	r3, #31
 800e816:	aa18      	add	r2, sp, #96	; 0x60
 800e818:	189b      	adds	r3, r3, r2
 800e81a:	781b      	ldrb	r3, [r3, #0]
 800e81c:	1e5a      	subs	r2, r3, #1
 800e81e:	4193      	sbcs	r3, r2
 800e820:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e822:	18d3      	adds	r3, r2, r3
 800e824:	9315      	str	r3, [sp, #84]	; 0x54
 800e826:	2302      	movs	r3, #2
 800e828:	4033      	ands	r3, r6
 800e82a:	931b      	str	r3, [sp, #108]	; 0x6c
 800e82c:	d002      	beq.n	800e834 <_svfprintf_r+0x5ec>
 800e82e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e830:	3302      	adds	r3, #2
 800e832:	9315      	str	r3, [sp, #84]	; 0x54
 800e834:	2384      	movs	r3, #132	; 0x84
 800e836:	4033      	ands	r3, r6
 800e838:	931c      	str	r3, [sp, #112]	; 0x70
 800e83a:	d11e      	bne.n	800e87a <_svfprintf_r+0x632>
 800e83c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e83e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e840:	1a9d      	subs	r5, r3, r2
 800e842:	2d00      	cmp	r5, #0
 800e844:	dd19      	ble.n	800e87a <_svfprintf_r+0x632>
 800e846:	4bcc      	ldr	r3, [pc, #816]	; (800eb78 <_svfprintf_r+0x930>)
 800e848:	603b      	str	r3, [r7, #0]
 800e84a:	2d10      	cmp	r5, #16
 800e84c:	dd00      	ble.n	800e850 <_svfprintf_r+0x608>
 800e84e:	e230      	b.n	800ecb2 <_svfprintf_r+0xa6a>
 800e850:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800e852:	607d      	str	r5, [r7, #4]
 800e854:	195d      	adds	r5, r3, r5
 800e856:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e858:	9529      	str	r5, [sp, #164]	; 0xa4
 800e85a:	931d      	str	r3, [sp, #116]	; 0x74
 800e85c:	3301      	adds	r3, #1
 800e85e:	9328      	str	r3, [sp, #160]	; 0xa0
 800e860:	3708      	adds	r7, #8
 800e862:	2b07      	cmp	r3, #7
 800e864:	dd09      	ble.n	800e87a <_svfprintf_r+0x632>
 800e866:	aa27      	add	r2, sp, #156	; 0x9c
 800e868:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e86a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e86c:	f001 ffd2 	bl	8010814 <__ssprint_r>
 800e870:	2800      	cmp	r0, #0
 800e872:	d001      	beq.n	800e878 <_svfprintf_r+0x630>
 800e874:	f000 fce6 	bl	800f244 <_svfprintf_r+0xffc>
 800e878:	af34      	add	r7, sp, #208	; 0xd0
 800e87a:	231f      	movs	r3, #31
 800e87c:	aa18      	add	r2, sp, #96	; 0x60
 800e87e:	189b      	adds	r3, r3, r2
 800e880:	781a      	ldrb	r2, [r3, #0]
 800e882:	2a00      	cmp	r2, #0
 800e884:	d016      	beq.n	800e8b4 <_svfprintf_r+0x66c>
 800e886:	603b      	str	r3, [r7, #0]
 800e888:	2301      	movs	r3, #1
 800e88a:	607b      	str	r3, [r7, #4]
 800e88c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800e88e:	3708      	adds	r7, #8
 800e890:	3301      	adds	r3, #1
 800e892:	9329      	str	r3, [sp, #164]	; 0xa4
 800e894:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e896:	931d      	str	r3, [sp, #116]	; 0x74
 800e898:	3301      	adds	r3, #1
 800e89a:	9328      	str	r3, [sp, #160]	; 0xa0
 800e89c:	2b07      	cmp	r3, #7
 800e89e:	dd09      	ble.n	800e8b4 <_svfprintf_r+0x66c>
 800e8a0:	aa27      	add	r2, sp, #156	; 0x9c
 800e8a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e8a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e8a6:	f001 ffb5 	bl	8010814 <__ssprint_r>
 800e8aa:	2800      	cmp	r0, #0
 800e8ac:	d001      	beq.n	800e8b2 <_svfprintf_r+0x66a>
 800e8ae:	f000 fcc9 	bl	800f244 <_svfprintf_r+0xffc>
 800e8b2:	af34      	add	r7, sp, #208	; 0xd0
 800e8b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d017      	beq.n	800e8ea <_svfprintf_r+0x6a2>
 800e8ba:	ab20      	add	r3, sp, #128	; 0x80
 800e8bc:	603b      	str	r3, [r7, #0]
 800e8be:	2302      	movs	r3, #2
 800e8c0:	607b      	str	r3, [r7, #4]
 800e8c2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800e8c4:	3708      	adds	r7, #8
 800e8c6:	3302      	adds	r3, #2
 800e8c8:	9329      	str	r3, [sp, #164]	; 0xa4
 800e8ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e8cc:	931b      	str	r3, [sp, #108]	; 0x6c
 800e8ce:	3301      	adds	r3, #1
 800e8d0:	9328      	str	r3, [sp, #160]	; 0xa0
 800e8d2:	2b07      	cmp	r3, #7
 800e8d4:	dd09      	ble.n	800e8ea <_svfprintf_r+0x6a2>
 800e8d6:	aa27      	add	r2, sp, #156	; 0x9c
 800e8d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e8da:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e8dc:	f001 ff9a 	bl	8010814 <__ssprint_r>
 800e8e0:	2800      	cmp	r0, #0
 800e8e2:	d001      	beq.n	800e8e8 <_svfprintf_r+0x6a0>
 800e8e4:	f000 fcae 	bl	800f244 <_svfprintf_r+0xffc>
 800e8e8:	af34      	add	r7, sp, #208	; 0xd0
 800e8ea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e8ec:	2b80      	cmp	r3, #128	; 0x80
 800e8ee:	d11e      	bne.n	800e92e <_svfprintf_r+0x6e6>
 800e8f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e8f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e8f4:	1a9d      	subs	r5, r3, r2
 800e8f6:	2d00      	cmp	r5, #0
 800e8f8:	dd19      	ble.n	800e92e <_svfprintf_r+0x6e6>
 800e8fa:	4ba0      	ldr	r3, [pc, #640]	; (800eb7c <_svfprintf_r+0x934>)
 800e8fc:	603b      	str	r3, [r7, #0]
 800e8fe:	2d10      	cmp	r5, #16
 800e900:	dd00      	ble.n	800e904 <_svfprintf_r+0x6bc>
 800e902:	e1ed      	b.n	800ece0 <_svfprintf_r+0xa98>
 800e904:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800e906:	607d      	str	r5, [r7, #4]
 800e908:	195d      	adds	r5, r3, r5
 800e90a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e90c:	9529      	str	r5, [sp, #164]	; 0xa4
 800e90e:	931b      	str	r3, [sp, #108]	; 0x6c
 800e910:	3301      	adds	r3, #1
 800e912:	9328      	str	r3, [sp, #160]	; 0xa0
 800e914:	3708      	adds	r7, #8
 800e916:	2b07      	cmp	r3, #7
 800e918:	dd09      	ble.n	800e92e <_svfprintf_r+0x6e6>
 800e91a:	aa27      	add	r2, sp, #156	; 0x9c
 800e91c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e91e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e920:	f001 ff78 	bl	8010814 <__ssprint_r>
 800e924:	2800      	cmp	r0, #0
 800e926:	d001      	beq.n	800e92c <_svfprintf_r+0x6e4>
 800e928:	f000 fc8c 	bl	800f244 <_svfprintf_r+0xffc>
 800e92c:	af34      	add	r7, sp, #208	; 0xd0
 800e92e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e930:	2510      	movs	r5, #16
 800e932:	1ae4      	subs	r4, r4, r3
 800e934:	2c00      	cmp	r4, #0
 800e936:	dd00      	ble.n	800e93a <_svfprintf_r+0x6f2>
 800e938:	e1fe      	b.n	800ed38 <_svfprintf_r+0xaf0>
 800e93a:	05f3      	lsls	r3, r6, #23
 800e93c:	d500      	bpl.n	800e940 <_svfprintf_r+0x6f8>
 800e93e:	e215      	b.n	800ed6c <_svfprintf_r+0xb24>
 800e940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e942:	603b      	str	r3, [r7, #0]
 800e944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e946:	607b      	str	r3, [r7, #4]
 800e948:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800e94a:	3708      	adds	r7, #8
 800e94c:	930c      	str	r3, [sp, #48]	; 0x30
 800e94e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e952:	4694      	mov	ip, r2
 800e954:	4463      	add	r3, ip
 800e956:	9329      	str	r3, [sp, #164]	; 0xa4
 800e958:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e95a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e95c:	3301      	adds	r3, #1
 800e95e:	9328      	str	r3, [sp, #160]	; 0xa0
 800e960:	2b07      	cmp	r3, #7
 800e962:	dd09      	ble.n	800e978 <_svfprintf_r+0x730>
 800e964:	aa27      	add	r2, sp, #156	; 0x9c
 800e966:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e968:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e96a:	f001 ff53 	bl	8010814 <__ssprint_r>
 800e96e:	2800      	cmp	r0, #0
 800e970:	d001      	beq.n	800e976 <_svfprintf_r+0x72e>
 800e972:	f000 fc67 	bl	800f244 <_svfprintf_r+0xffc>
 800e976:	af34      	add	r7, sp, #208	; 0xd0
 800e978:	0773      	lsls	r3, r6, #29
 800e97a:	d501      	bpl.n	800e980 <_svfprintf_r+0x738>
 800e97c:	f000 fc41 	bl	800f202 <_svfprintf_r+0xfba>
 800e980:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e982:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e984:	4299      	cmp	r1, r3
 800e986:	da00      	bge.n	800e98a <_svfprintf_r+0x742>
 800e988:	0019      	movs	r1, r3
 800e98a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e98c:	185b      	adds	r3, r3, r1
 800e98e:	9313      	str	r3, [sp, #76]	; 0x4c
 800e990:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800e992:	930b      	str	r3, [sp, #44]	; 0x2c
 800e994:	2b00      	cmp	r3, #0
 800e996:	d008      	beq.n	800e9aa <_svfprintf_r+0x762>
 800e998:	aa27      	add	r2, sp, #156	; 0x9c
 800e99a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e99c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e99e:	f001 ff39 	bl	8010814 <__ssprint_r>
 800e9a2:	2800      	cmp	r0, #0
 800e9a4:	d001      	beq.n	800e9aa <_svfprintf_r+0x762>
 800e9a6:	f000 fc4d 	bl	800f244 <_svfprintf_r+0xffc>
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e9ae:	9328      	str	r3, [sp, #160]	; 0xa0
 800e9b0:	af34      	add	r7, sp, #208	; 0xd0
 800e9b2:	e480      	b.n	800e2b6 <_svfprintf_r+0x6e>
 800e9b4:	1c59      	adds	r1, r3, #1
 800e9b6:	9125      	str	r1, [sp, #148]	; 0x94
 800e9b8:	701a      	strb	r2, [r3, #0]
 800e9ba:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800e9bc:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e9be:	4299      	cmp	r1, r3
 800e9c0:	d8f8      	bhi.n	800e9b4 <_svfprintf_r+0x76c>
 800e9c2:	e6be      	b.n	800e742 <_svfprintf_r+0x4fa>
 800e9c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e9c6:	2b65      	cmp	r3, #101	; 0x65
 800e9c8:	dc00      	bgt.n	800e9cc <_svfprintf_r+0x784>
 800e9ca:	e6cb      	b.n	800e764 <_svfprintf_r+0x51c>
 800e9cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e9ce:	2b66      	cmp	r3, #102	; 0x66
 800e9d0:	d128      	bne.n	800ea24 <_svfprintf_r+0x7dc>
 800e9d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	dd1c      	ble.n	800ea12 <_svfprintf_r+0x7ca>
 800e9d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e9da:	2a00      	cmp	r2, #0
 800e9dc:	d101      	bne.n	800e9e2 <_svfprintf_r+0x79a>
 800e9de:	07f2      	lsls	r2, r6, #31
 800e9e0:	d503      	bpl.n	800e9ea <_svfprintf_r+0x7a2>
 800e9e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e9e4:	189b      	adds	r3, r3, r2
 800e9e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e9e8:	189b      	adds	r3, r3, r2
 800e9ea:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e9ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800e9ee:	9210      	str	r2, [sp, #64]	; 0x40
 800e9f0:	e701      	b.n	800e7f6 <_svfprintf_r+0x5ae>
 800e9f2:	222b      	movs	r2, #43	; 0x2b
 800e9f4:	e6c5      	b.n	800e782 <_svfprintf_r+0x53a>
 800e9f6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e9f8:	e6ca      	b.n	800e790 <_svfprintf_r+0x548>
 800e9fa:	782a      	ldrb	r2, [r5, #0]
 800e9fc:	3501      	adds	r5, #1
 800e9fe:	701a      	strb	r2, [r3, #0]
 800ea00:	3301      	adds	r3, #1
 800ea02:	e6de      	b.n	800e7c2 <_svfprintf_r+0x57a>
 800ea04:	2230      	movs	r2, #48	; 0x30
 800ea06:	ab23      	add	r3, sp, #140	; 0x8c
 800ea08:	18a4      	adds	r4, r4, r2
 800ea0a:	709a      	strb	r2, [r3, #2]
 800ea0c:	70dc      	strb	r4, [r3, #3]
 800ea0e:	aa24      	add	r2, sp, #144	; 0x90
 800ea10:	e6db      	b.n	800e7ca <_svfprintf_r+0x582>
 800ea12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d102      	bne.n	800ea1e <_svfprintf_r+0x7d6>
 800ea18:	3301      	adds	r3, #1
 800ea1a:	421e      	tst	r6, r3
 800ea1c:	d0e5      	beq.n	800e9ea <_svfprintf_r+0x7a2>
 800ea1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ea20:	3301      	adds	r3, #1
 800ea22:	e7e0      	b.n	800e9e6 <_svfprintf_r+0x79e>
 800ea24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ea26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	db06      	blt.n	800ea3a <_svfprintf_r+0x7f2>
 800ea2c:	07f3      	lsls	r3, r6, #31
 800ea2e:	d50e      	bpl.n	800ea4e <_svfprintf_r+0x806>
 800ea30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ea32:	18d3      	adds	r3, r2, r3
 800ea34:	2267      	movs	r2, #103	; 0x67
 800ea36:	920d      	str	r2, [sp, #52]	; 0x34
 800ea38:	e7d7      	b.n	800e9ea <_svfprintf_r+0x7a2>
 800ea3a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ea3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea3e:	185b      	adds	r3, r3, r1
 800ea40:	2167      	movs	r1, #103	; 0x67
 800ea42:	910d      	str	r1, [sp, #52]	; 0x34
 800ea44:	2a00      	cmp	r2, #0
 800ea46:	dcd0      	bgt.n	800e9ea <_svfprintf_r+0x7a2>
 800ea48:	1a9b      	subs	r3, r3, r2
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	e7cd      	b.n	800e9ea <_svfprintf_r+0x7a2>
 800ea4e:	0013      	movs	r3, r2
 800ea50:	e7f0      	b.n	800ea34 <_svfprintf_r+0x7ec>
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d003      	beq.n	800ea5e <_svfprintf_r+0x816>
 800ea56:	231f      	movs	r3, #31
 800ea58:	a918      	add	r1, sp, #96	; 0x60
 800ea5a:	185b      	adds	r3, r3, r1
 800ea5c:	701a      	strb	r2, [r3, #0]
 800ea5e:	1d2b      	adds	r3, r5, #4
 800ea60:	06b2      	lsls	r2, r6, #26
 800ea62:	d506      	bpl.n	800ea72 <_svfprintf_r+0x82a>
 800ea64:	682a      	ldr	r2, [r5, #0]
 800ea66:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ea68:	6011      	str	r1, [r2, #0]
 800ea6a:	17c9      	asrs	r1, r1, #31
 800ea6c:	6051      	str	r1, [r2, #4]
 800ea6e:	001d      	movs	r5, r3
 800ea70:	e421      	b.n	800e2b6 <_svfprintf_r+0x6e>
 800ea72:	06f2      	lsls	r2, r6, #27
 800ea74:	d503      	bpl.n	800ea7e <_svfprintf_r+0x836>
 800ea76:	682a      	ldr	r2, [r5, #0]
 800ea78:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ea7a:	6011      	str	r1, [r2, #0]
 800ea7c:	e7f7      	b.n	800ea6e <_svfprintf_r+0x826>
 800ea7e:	0672      	lsls	r2, r6, #25
 800ea80:	d5f9      	bpl.n	800ea76 <_svfprintf_r+0x82e>
 800ea82:	4669      	mov	r1, sp
 800ea84:	204c      	movs	r0, #76	; 0x4c
 800ea86:	1809      	adds	r1, r1, r0
 800ea88:	682a      	ldr	r2, [r5, #0]
 800ea8a:	8809      	ldrh	r1, [r1, #0]
 800ea8c:	8011      	strh	r1, [r2, #0]
 800ea8e:	e7ee      	b.n	800ea6e <_svfprintf_r+0x826>
 800ea90:	2310      	movs	r3, #16
 800ea92:	431e      	orrs	r6, r3
 800ea94:	2120      	movs	r1, #32
 800ea96:	4031      	ands	r1, r6
 800ea98:	d010      	beq.n	800eabc <_svfprintf_r+0x874>
 800ea9a:	2307      	movs	r3, #7
 800ea9c:	3507      	adds	r5, #7
 800ea9e:	439d      	bics	r5, r3
 800eaa0:	002b      	movs	r3, r5
 800eaa2:	3308      	adds	r3, #8
 800eaa4:	930f      	str	r3, [sp, #60]	; 0x3c
 800eaa6:	682b      	ldr	r3, [r5, #0]
 800eaa8:	686c      	ldr	r4, [r5, #4]
 800eaaa:	9306      	str	r3, [sp, #24]
 800eaac:	9407      	str	r4, [sp, #28]
 800eaae:	2300      	movs	r3, #0
 800eab0:	221f      	movs	r2, #31
 800eab2:	2100      	movs	r1, #0
 800eab4:	a818      	add	r0, sp, #96	; 0x60
 800eab6:	1812      	adds	r2, r2, r0
 800eab8:	7011      	strb	r1, [r2, #0]
 800eaba:	e4bf      	b.n	800e43c <_svfprintf_r+0x1f4>
 800eabc:	2210      	movs	r2, #16
 800eabe:	1d28      	adds	r0, r5, #4
 800eac0:	4032      	ands	r2, r6
 800eac2:	d004      	beq.n	800eace <_svfprintf_r+0x886>
 800eac4:	682b      	ldr	r3, [r5, #0]
 800eac6:	900f      	str	r0, [sp, #60]	; 0x3c
 800eac8:	9306      	str	r3, [sp, #24]
 800eaca:	9107      	str	r1, [sp, #28]
 800eacc:	e7ef      	b.n	800eaae <_svfprintf_r+0x866>
 800eace:	2340      	movs	r3, #64	; 0x40
 800ead0:	900f      	str	r0, [sp, #60]	; 0x3c
 800ead2:	4033      	ands	r3, r6
 800ead4:	d004      	beq.n	800eae0 <_svfprintf_r+0x898>
 800ead6:	682b      	ldr	r3, [r5, #0]
 800ead8:	9207      	str	r2, [sp, #28]
 800eada:	b29b      	uxth	r3, r3
 800eadc:	9306      	str	r3, [sp, #24]
 800eade:	e7e6      	b.n	800eaae <_svfprintf_r+0x866>
 800eae0:	682a      	ldr	r2, [r5, #0]
 800eae2:	9307      	str	r3, [sp, #28]
 800eae4:	9206      	str	r2, [sp, #24]
 800eae6:	e7e3      	b.n	800eab0 <_svfprintf_r+0x868>
 800eae8:	1d2b      	adds	r3, r5, #4
 800eaea:	930f      	str	r3, [sp, #60]	; 0x3c
 800eaec:	682b      	ldr	r3, [r5, #0]
 800eaee:	2078      	movs	r0, #120	; 0x78
 800eaf0:	2130      	movs	r1, #48	; 0x30
 800eaf2:	9306      	str	r3, [sp, #24]
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	aa20      	add	r2, sp, #128	; 0x80
 800eaf8:	7011      	strb	r1, [r2, #0]
 800eafa:	7050      	strb	r0, [r2, #1]
 800eafc:	4a20      	ldr	r2, [pc, #128]	; (800eb80 <_svfprintf_r+0x938>)
 800eafe:	9307      	str	r3, [sp, #28]
 800eb00:	3302      	adds	r3, #2
 800eb02:	431e      	orrs	r6, r3
 800eb04:	921a      	str	r2, [sp, #104]	; 0x68
 800eb06:	900d      	str	r0, [sp, #52]	; 0x34
 800eb08:	e7d2      	b.n	800eab0 <_svfprintf_r+0x868>
 800eb0a:	1d2b      	adds	r3, r5, #4
 800eb0c:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb0e:	682b      	ldr	r3, [r5, #0]
 800eb10:	2400      	movs	r4, #0
 800eb12:	930c      	str	r3, [sp, #48]	; 0x30
 800eb14:	231f      	movs	r3, #31
 800eb16:	aa18      	add	r2, sp, #96	; 0x60
 800eb18:	189b      	adds	r3, r3, r2
 800eb1a:	701c      	strb	r4, [r3, #0]
 800eb1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb1e:	3301      	adds	r3, #1
 800eb20:	d00b      	beq.n	800eb3a <_svfprintf_r+0x8f2>
 800eb22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eb24:	0021      	movs	r1, r4
 800eb26:	980c      	ldr	r0, [sp, #48]	; 0x30
 800eb28:	f001 fb86 	bl	8010238 <memchr>
 800eb2c:	42a0      	cmp	r0, r4
 800eb2e:	d100      	bne.n	800eb32 <_svfprintf_r+0x8ea>
 800eb30:	e0bd      	b.n	800ecae <_svfprintf_r+0xa66>
 800eb32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb34:	1ac3      	subs	r3, r0, r3
 800eb36:	930b      	str	r3, [sp, #44]	; 0x2c
 800eb38:	e58d      	b.n	800e656 <_svfprintf_r+0x40e>
 800eb3a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800eb3c:	f7f1 faea 	bl	8000114 <strlen>
 800eb40:	900b      	str	r0, [sp, #44]	; 0x2c
 800eb42:	e588      	b.n	800e656 <_svfprintf_r+0x40e>
 800eb44:	2310      	movs	r3, #16
 800eb46:	431e      	orrs	r6, r3
 800eb48:	2320      	movs	r3, #32
 800eb4a:	4033      	ands	r3, r6
 800eb4c:	d00b      	beq.n	800eb66 <_svfprintf_r+0x91e>
 800eb4e:	2307      	movs	r3, #7
 800eb50:	3507      	adds	r5, #7
 800eb52:	439d      	bics	r5, r3
 800eb54:	002b      	movs	r3, r5
 800eb56:	3308      	adds	r3, #8
 800eb58:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb5a:	682b      	ldr	r3, [r5, #0]
 800eb5c:	686c      	ldr	r4, [r5, #4]
 800eb5e:	9306      	str	r3, [sp, #24]
 800eb60:	9407      	str	r4, [sp, #28]
 800eb62:	2301      	movs	r3, #1
 800eb64:	e7a4      	b.n	800eab0 <_svfprintf_r+0x868>
 800eb66:	2210      	movs	r2, #16
 800eb68:	1d29      	adds	r1, r5, #4
 800eb6a:	4032      	ands	r2, r6
 800eb6c:	d00a      	beq.n	800eb84 <_svfprintf_r+0x93c>
 800eb6e:	910f      	str	r1, [sp, #60]	; 0x3c
 800eb70:	682a      	ldr	r2, [r5, #0]
 800eb72:	9307      	str	r3, [sp, #28]
 800eb74:	9206      	str	r2, [sp, #24]
 800eb76:	e7f4      	b.n	800eb62 <_svfprintf_r+0x91a>
 800eb78:	08013d2a 	.word	0x08013d2a
 800eb7c:	08013d3a 	.word	0x08013d3a
 800eb80:	08013d17 	.word	0x08013d17
 800eb84:	2340      	movs	r3, #64	; 0x40
 800eb86:	910f      	str	r1, [sp, #60]	; 0x3c
 800eb88:	4033      	ands	r3, r6
 800eb8a:	d0f1      	beq.n	800eb70 <_svfprintf_r+0x928>
 800eb8c:	682b      	ldr	r3, [r5, #0]
 800eb8e:	9207      	str	r2, [sp, #28]
 800eb90:	b29b      	uxth	r3, r3
 800eb92:	9306      	str	r3, [sp, #24]
 800eb94:	e7e5      	b.n	800eb62 <_svfprintf_r+0x91a>
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d003      	beq.n	800eba2 <_svfprintf_r+0x95a>
 800eb9a:	231f      	movs	r3, #31
 800eb9c:	a918      	add	r1, sp, #96	; 0x60
 800eb9e:	185b      	adds	r3, r3, r1
 800eba0:	701a      	strb	r2, [r3, #0]
 800eba2:	4baa      	ldr	r3, [pc, #680]	; (800ee4c <_svfprintf_r+0xc04>)
 800eba4:	e471      	b.n	800e48a <_svfprintf_r+0x242>
 800eba6:	2210      	movs	r2, #16
 800eba8:	1d29      	adds	r1, r5, #4
 800ebaa:	4032      	ands	r2, r6
 800ebac:	d004      	beq.n	800ebb8 <_svfprintf_r+0x970>
 800ebae:	910f      	str	r1, [sp, #60]	; 0x3c
 800ebb0:	682a      	ldr	r2, [r5, #0]
 800ebb2:	9307      	str	r3, [sp, #28]
 800ebb4:	9206      	str	r2, [sp, #24]
 800ebb6:	e477      	b.n	800e4a8 <_svfprintf_r+0x260>
 800ebb8:	2340      	movs	r3, #64	; 0x40
 800ebba:	910f      	str	r1, [sp, #60]	; 0x3c
 800ebbc:	4033      	ands	r3, r6
 800ebbe:	d0f7      	beq.n	800ebb0 <_svfprintf_r+0x968>
 800ebc0:	682b      	ldr	r3, [r5, #0]
 800ebc2:	9207      	str	r2, [sp, #28]
 800ebc4:	b29b      	uxth	r3, r3
 800ebc6:	9306      	str	r3, [sp, #24]
 800ebc8:	e46e      	b.n	800e4a8 <_svfprintf_r+0x260>
 800ebca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ebcc:	e38a      	b.n	800f2e4 <_svfprintf_r+0x109c>
 800ebce:	9b07      	ldr	r3, [sp, #28]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d10a      	bne.n	800ebea <_svfprintf_r+0x9a2>
 800ebd4:	9b06      	ldr	r3, [sp, #24]
 800ebd6:	2b09      	cmp	r3, #9
 800ebd8:	d807      	bhi.n	800ebea <_svfprintf_r+0x9a2>
 800ebda:	9b06      	ldr	r3, [sp, #24]
 800ebdc:	aa2c      	add	r2, sp, #176	; 0xb0
 800ebde:	3330      	adds	r3, #48	; 0x30
 800ebe0:	77d3      	strb	r3, [r2, #31]
 800ebe2:	236f      	movs	r3, #111	; 0x6f
 800ebe4:	aa18      	add	r2, sp, #96	; 0x60
 800ebe6:	189b      	adds	r3, r3, r2
 800ebe8:	e39a      	b.n	800f320 <_svfprintf_r+0x10d8>
 800ebea:	ab34      	add	r3, sp, #208	; 0xd0
 800ebec:	930c      	str	r3, [sp, #48]	; 0x30
 800ebee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ebf0:	9806      	ldr	r0, [sp, #24]
 800ebf2:	9907      	ldr	r1, [sp, #28]
 800ebf4:	3b01      	subs	r3, #1
 800ebf6:	930c      	str	r3, [sp, #48]	; 0x30
 800ebf8:	220a      	movs	r2, #10
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	f7f1 fc64 	bl	80004c8 <__aeabi_uldivmod>
 800ec00:	9806      	ldr	r0, [sp, #24]
 800ec02:	9907      	ldr	r1, [sp, #28]
 800ec04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec06:	3230      	adds	r2, #48	; 0x30
 800ec08:	701a      	strb	r2, [r3, #0]
 800ec0a:	220a      	movs	r2, #10
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	f7f1 fc5b 	bl	80004c8 <__aeabi_uldivmod>
 800ec12:	9006      	str	r0, [sp, #24]
 800ec14:	9107      	str	r1, [sp, #28]
 800ec16:	9b06      	ldr	r3, [sp, #24]
 800ec18:	9a07      	ldr	r2, [sp, #28]
 800ec1a:	4313      	orrs	r3, r2
 800ec1c:	d1e7      	bne.n	800ebee <_svfprintf_r+0x9a6>
 800ec1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ec20:	ab34      	add	r3, sp, #208	; 0xd0
 800ec22:	1a9b      	subs	r3, r3, r2
 800ec24:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ec26:	930b      	str	r3, [sp, #44]	; 0x2c
 800ec28:	2300      	movs	r3, #0
 800ec2a:	002e      	movs	r6, r5
 800ec2c:	9310      	str	r3, [sp, #64]	; 0x40
 800ec2e:	e5ec      	b.n	800e80a <_svfprintf_r+0x5c2>
 800ec30:	2300      	movs	r3, #0
 800ec32:	2400      	movs	r4, #0
 800ec34:	9306      	str	r3, [sp, #24]
 800ec36:	9407      	str	r4, [sp, #28]
 800ec38:	200f      	movs	r0, #15
 800ec3a:	ab34      	add	r3, sp, #208	; 0xd0
 800ec3c:	930c      	str	r3, [sp, #48]	; 0x30
 800ec3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec40:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ec42:	3b01      	subs	r3, #1
 800ec44:	930c      	str	r3, [sp, #48]	; 0x30
 800ec46:	9b06      	ldr	r3, [sp, #24]
 800ec48:	4003      	ands	r3, r0
 800ec4a:	5cd3      	ldrb	r3, [r2, r3]
 800ec4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ec4e:	7013      	strb	r3, [r2, #0]
 800ec50:	9b07      	ldr	r3, [sp, #28]
 800ec52:	0719      	lsls	r1, r3, #28
 800ec54:	9b06      	ldr	r3, [sp, #24]
 800ec56:	091a      	lsrs	r2, r3, #4
 800ec58:	9b07      	ldr	r3, [sp, #28]
 800ec5a:	4311      	orrs	r1, r2
 800ec5c:	091b      	lsrs	r3, r3, #4
 800ec5e:	9307      	str	r3, [sp, #28]
 800ec60:	000b      	movs	r3, r1
 800ec62:	9a07      	ldr	r2, [sp, #28]
 800ec64:	9106      	str	r1, [sp, #24]
 800ec66:	4313      	orrs	r3, r2
 800ec68:	d1e9      	bne.n	800ec3e <_svfprintf_r+0x9f6>
 800ec6a:	e7d8      	b.n	800ec1e <_svfprintf_r+0x9d6>
 800ec6c:	aa34      	add	r2, sp, #208	; 0xd0
 800ec6e:	920c      	str	r2, [sp, #48]	; 0x30
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d1d4      	bne.n	800ec1e <_svfprintf_r+0x9d6>
 800ec74:	07f3      	lsls	r3, r6, #31
 800ec76:	d5d2      	bpl.n	800ec1e <_svfprintf_r+0x9d6>
 800ec78:	2230      	movs	r2, #48	; 0x30
 800ec7a:	ab2c      	add	r3, sp, #176	; 0xb0
 800ec7c:	77da      	strb	r2, [r3, #31]
 800ec7e:	e7b0      	b.n	800ebe2 <_svfprintf_r+0x99a>
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d003      	beq.n	800ec8c <_svfprintf_r+0xa44>
 800ec84:	231f      	movs	r3, #31
 800ec86:	a918      	add	r1, sp, #96	; 0x60
 800ec88:	185b      	adds	r3, r3, r1
 800ec8a:	701a      	strb	r2, [r3, #0]
 800ec8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d100      	bne.n	800ec94 <_svfprintf_r+0xa4c>
 800ec92:	e2f6      	b.n	800f282 <_svfprintf_r+0x103a>
 800ec94:	2134      	movs	r1, #52	; 0x34
 800ec96:	466a      	mov	r2, sp
 800ec98:	1852      	adds	r2, r2, r1
 800ec9a:	7812      	ldrb	r2, [r2, #0]
 800ec9c:	ab2a      	add	r3, sp, #168	; 0xa8
 800ec9e:	701a      	strb	r2, [r3, #0]
 800eca0:	221f      	movs	r2, #31
 800eca2:	2400      	movs	r4, #0
 800eca4:	a918      	add	r1, sp, #96	; 0x60
 800eca6:	1852      	adds	r2, r2, r1
 800eca8:	7014      	strb	r4, [r2, #0]
 800ecaa:	950f      	str	r5, [sp, #60]	; 0x3c
 800ecac:	e473      	b.n	800e596 <_svfprintf_r+0x34e>
 800ecae:	0004      	movs	r4, r0
 800ecb0:	e4d1      	b.n	800e656 <_svfprintf_r+0x40e>
 800ecb2:	2310      	movs	r3, #16
 800ecb4:	607b      	str	r3, [r7, #4]
 800ecb6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ecb8:	3708      	adds	r7, #8
 800ecba:	3310      	adds	r3, #16
 800ecbc:	9329      	str	r3, [sp, #164]	; 0xa4
 800ecbe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ecc0:	931d      	str	r3, [sp, #116]	; 0x74
 800ecc2:	3301      	adds	r3, #1
 800ecc4:	9328      	str	r3, [sp, #160]	; 0xa0
 800ecc6:	2b07      	cmp	r3, #7
 800ecc8:	dd08      	ble.n	800ecdc <_svfprintf_r+0xa94>
 800ecca:	aa27      	add	r2, sp, #156	; 0x9c
 800eccc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ecce:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ecd0:	f001 fda0 	bl	8010814 <__ssprint_r>
 800ecd4:	2800      	cmp	r0, #0
 800ecd6:	d000      	beq.n	800ecda <_svfprintf_r+0xa92>
 800ecd8:	e2b4      	b.n	800f244 <_svfprintf_r+0xffc>
 800ecda:	af34      	add	r7, sp, #208	; 0xd0
 800ecdc:	3d10      	subs	r5, #16
 800ecde:	e5b2      	b.n	800e846 <_svfprintf_r+0x5fe>
 800ece0:	2310      	movs	r3, #16
 800ece2:	607b      	str	r3, [r7, #4]
 800ece4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ece6:	3708      	adds	r7, #8
 800ece8:	3310      	adds	r3, #16
 800ecea:	9329      	str	r3, [sp, #164]	; 0xa4
 800ecec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ecee:	931b      	str	r3, [sp, #108]	; 0x6c
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	9328      	str	r3, [sp, #160]	; 0xa0
 800ecf4:	2b07      	cmp	r3, #7
 800ecf6:	dd08      	ble.n	800ed0a <_svfprintf_r+0xac2>
 800ecf8:	aa27      	add	r2, sp, #156	; 0x9c
 800ecfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ecfc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ecfe:	f001 fd89 	bl	8010814 <__ssprint_r>
 800ed02:	2800      	cmp	r0, #0
 800ed04:	d000      	beq.n	800ed08 <_svfprintf_r+0xac0>
 800ed06:	e29d      	b.n	800f244 <_svfprintf_r+0xffc>
 800ed08:	af34      	add	r7, sp, #208	; 0xd0
 800ed0a:	3d10      	subs	r5, #16
 800ed0c:	e5f5      	b.n	800e8fa <_svfprintf_r+0x6b2>
 800ed0e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ed10:	607d      	str	r5, [r7, #4]
 800ed12:	3310      	adds	r3, #16
 800ed14:	9329      	str	r3, [sp, #164]	; 0xa4
 800ed16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ed18:	3708      	adds	r7, #8
 800ed1a:	931b      	str	r3, [sp, #108]	; 0x6c
 800ed1c:	3301      	adds	r3, #1
 800ed1e:	9328      	str	r3, [sp, #160]	; 0xa0
 800ed20:	2b07      	cmp	r3, #7
 800ed22:	dd08      	ble.n	800ed36 <_svfprintf_r+0xaee>
 800ed24:	aa27      	add	r2, sp, #156	; 0x9c
 800ed26:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed28:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ed2a:	f001 fd73 	bl	8010814 <__ssprint_r>
 800ed2e:	2800      	cmp	r0, #0
 800ed30:	d000      	beq.n	800ed34 <_svfprintf_r+0xaec>
 800ed32:	e287      	b.n	800f244 <_svfprintf_r+0xffc>
 800ed34:	af34      	add	r7, sp, #208	; 0xd0
 800ed36:	3c10      	subs	r4, #16
 800ed38:	4b45      	ldr	r3, [pc, #276]	; (800ee50 <_svfprintf_r+0xc08>)
 800ed3a:	603b      	str	r3, [r7, #0]
 800ed3c:	2c10      	cmp	r4, #16
 800ed3e:	dce6      	bgt.n	800ed0e <_svfprintf_r+0xac6>
 800ed40:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ed42:	607c      	str	r4, [r7, #4]
 800ed44:	191c      	adds	r4, r3, r4
 800ed46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ed48:	9429      	str	r4, [sp, #164]	; 0xa4
 800ed4a:	931b      	str	r3, [sp, #108]	; 0x6c
 800ed4c:	3301      	adds	r3, #1
 800ed4e:	9328      	str	r3, [sp, #160]	; 0xa0
 800ed50:	3708      	adds	r7, #8
 800ed52:	2b07      	cmp	r3, #7
 800ed54:	dc00      	bgt.n	800ed58 <_svfprintf_r+0xb10>
 800ed56:	e5f0      	b.n	800e93a <_svfprintf_r+0x6f2>
 800ed58:	aa27      	add	r2, sp, #156	; 0x9c
 800ed5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ed5e:	f001 fd59 	bl	8010814 <__ssprint_r>
 800ed62:	2800      	cmp	r0, #0
 800ed64:	d000      	beq.n	800ed68 <_svfprintf_r+0xb20>
 800ed66:	e26d      	b.n	800f244 <_svfprintf_r+0xffc>
 800ed68:	af34      	add	r7, sp, #208	; 0xd0
 800ed6a:	e5e6      	b.n	800e93a <_svfprintf_r+0x6f2>
 800ed6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed6e:	2b65      	cmp	r3, #101	; 0x65
 800ed70:	dc00      	bgt.n	800ed74 <_svfprintf_r+0xb2c>
 800ed72:	e1b0      	b.n	800f0d6 <_svfprintf_r+0xe8e>
 800ed74:	2200      	movs	r2, #0
 800ed76:	2300      	movs	r3, #0
 800ed78:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ed7a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800ed7c:	f7f1 fb76 	bl	800046c <__aeabi_dcmpeq>
 800ed80:	2800      	cmp	r0, #0
 800ed82:	d069      	beq.n	800ee58 <_svfprintf_r+0xc10>
 800ed84:	4b33      	ldr	r3, [pc, #204]	; (800ee54 <_svfprintf_r+0xc0c>)
 800ed86:	603b      	str	r3, [r7, #0]
 800ed88:	2301      	movs	r3, #1
 800ed8a:	607b      	str	r3, [r7, #4]
 800ed8c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ed8e:	3708      	adds	r7, #8
 800ed90:	3301      	adds	r3, #1
 800ed92:	9329      	str	r3, [sp, #164]	; 0xa4
 800ed94:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ed96:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed98:	3301      	adds	r3, #1
 800ed9a:	9328      	str	r3, [sp, #160]	; 0xa0
 800ed9c:	2b07      	cmp	r3, #7
 800ed9e:	dd08      	ble.n	800edb2 <_svfprintf_r+0xb6a>
 800eda0:	aa27      	add	r2, sp, #156	; 0x9c
 800eda2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eda4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eda6:	f001 fd35 	bl	8010814 <__ssprint_r>
 800edaa:	2800      	cmp	r0, #0
 800edac:	d000      	beq.n	800edb0 <_svfprintf_r+0xb68>
 800edae:	e249      	b.n	800f244 <_svfprintf_r+0xffc>
 800edb0:	af34      	add	r7, sp, #208	; 0xd0
 800edb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800edb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800edb6:	4293      	cmp	r3, r2
 800edb8:	db02      	blt.n	800edc0 <_svfprintf_r+0xb78>
 800edba:	07f3      	lsls	r3, r6, #31
 800edbc:	d400      	bmi.n	800edc0 <_svfprintf_r+0xb78>
 800edbe:	e5db      	b.n	800e978 <_svfprintf_r+0x730>
 800edc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800edc2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800edc4:	4694      	mov	ip, r2
 800edc6:	603b      	str	r3, [r7, #0]
 800edc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800edca:	607b      	str	r3, [r7, #4]
 800edcc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800edce:	3708      	adds	r7, #8
 800edd0:	4463      	add	r3, ip
 800edd2:	9329      	str	r3, [sp, #164]	; 0xa4
 800edd4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800edd6:	930b      	str	r3, [sp, #44]	; 0x2c
 800edd8:	3301      	adds	r3, #1
 800edda:	9328      	str	r3, [sp, #160]	; 0xa0
 800eddc:	2b07      	cmp	r3, #7
 800edde:	dd08      	ble.n	800edf2 <_svfprintf_r+0xbaa>
 800ede0:	aa27      	add	r2, sp, #156	; 0x9c
 800ede2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ede4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ede6:	f001 fd15 	bl	8010814 <__ssprint_r>
 800edea:	2800      	cmp	r0, #0
 800edec:	d000      	beq.n	800edf0 <_svfprintf_r+0xba8>
 800edee:	e229      	b.n	800f244 <_svfprintf_r+0xffc>
 800edf0:	af34      	add	r7, sp, #208	; 0xd0
 800edf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800edf4:	2510      	movs	r5, #16
 800edf6:	1e5c      	subs	r4, r3, #1
 800edf8:	2c00      	cmp	r4, #0
 800edfa:	dc00      	bgt.n	800edfe <_svfprintf_r+0xbb6>
 800edfc:	e5bc      	b.n	800e978 <_svfprintf_r+0x730>
 800edfe:	4b14      	ldr	r3, [pc, #80]	; (800ee50 <_svfprintf_r+0xc08>)
 800ee00:	603b      	str	r3, [r7, #0]
 800ee02:	2c10      	cmp	r4, #16
 800ee04:	dc0b      	bgt.n	800ee1e <_svfprintf_r+0xbd6>
 800ee06:	607c      	str	r4, [r7, #4]
 800ee08:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ee0a:	191c      	adds	r4, r3, r4
 800ee0c:	9429      	str	r4, [sp, #164]	; 0xa4
 800ee0e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ee10:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee12:	3301      	adds	r3, #1
 800ee14:	9328      	str	r3, [sp, #160]	; 0xa0
 800ee16:	2b07      	cmp	r3, #7
 800ee18:	dc00      	bgt.n	800ee1c <_svfprintf_r+0xbd4>
 800ee1a:	e086      	b.n	800ef2a <_svfprintf_r+0xce2>
 800ee1c:	e5a2      	b.n	800e964 <_svfprintf_r+0x71c>
 800ee1e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ee20:	607d      	str	r5, [r7, #4]
 800ee22:	3310      	adds	r3, #16
 800ee24:	9329      	str	r3, [sp, #164]	; 0xa4
 800ee26:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ee28:	3708      	adds	r7, #8
 800ee2a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee2c:	3301      	adds	r3, #1
 800ee2e:	9328      	str	r3, [sp, #160]	; 0xa0
 800ee30:	2b07      	cmp	r3, #7
 800ee32:	dd08      	ble.n	800ee46 <_svfprintf_r+0xbfe>
 800ee34:	aa27      	add	r2, sp, #156	; 0x9c
 800ee36:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ee38:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ee3a:	f001 fceb 	bl	8010814 <__ssprint_r>
 800ee3e:	2800      	cmp	r0, #0
 800ee40:	d000      	beq.n	800ee44 <_svfprintf_r+0xbfc>
 800ee42:	e1ff      	b.n	800f244 <_svfprintf_r+0xffc>
 800ee44:	af34      	add	r7, sp, #208	; 0xd0
 800ee46:	3c10      	subs	r4, #16
 800ee48:	e7d9      	b.n	800edfe <_svfprintf_r+0xbb6>
 800ee4a:	46c0      	nop			; (mov r8, r8)
 800ee4c:	08013d17 	.word	0x08013d17
 800ee50:	08013d3a 	.word	0x08013d3a
 800ee54:	08013d28 	.word	0x08013d28
 800ee58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	dc7e      	bgt.n	800ef5c <_svfprintf_r+0xd14>
 800ee5e:	4bcf      	ldr	r3, [pc, #828]	; (800f19c <_svfprintf_r+0xf54>)
 800ee60:	603b      	str	r3, [r7, #0]
 800ee62:	2301      	movs	r3, #1
 800ee64:	607b      	str	r3, [r7, #4]
 800ee66:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ee68:	3708      	adds	r7, #8
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	9329      	str	r3, [sp, #164]	; 0xa4
 800ee6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ee70:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee72:	3301      	adds	r3, #1
 800ee74:	9328      	str	r3, [sp, #160]	; 0xa0
 800ee76:	2b07      	cmp	r3, #7
 800ee78:	dd08      	ble.n	800ee8c <_svfprintf_r+0xc44>
 800ee7a:	aa27      	add	r2, sp, #156	; 0x9c
 800ee7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ee7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ee80:	f001 fcc8 	bl	8010814 <__ssprint_r>
 800ee84:	2800      	cmp	r0, #0
 800ee86:	d000      	beq.n	800ee8a <_svfprintf_r+0xc42>
 800ee88:	e1dc      	b.n	800f244 <_svfprintf_r+0xffc>
 800ee8a:	af34      	add	r7, sp, #208	; 0xd0
 800ee8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d105      	bne.n	800ee9e <_svfprintf_r+0xc56>
 800ee92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d102      	bne.n	800ee9e <_svfprintf_r+0xc56>
 800ee98:	07f3      	lsls	r3, r6, #31
 800ee9a:	d400      	bmi.n	800ee9e <_svfprintf_r+0xc56>
 800ee9c:	e56c      	b.n	800e978 <_svfprintf_r+0x730>
 800ee9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eea0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800eea2:	4694      	mov	ip, r2
 800eea4:	603b      	str	r3, [r7, #0]
 800eea6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eea8:	607b      	str	r3, [r7, #4]
 800eeaa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800eeac:	3708      	adds	r7, #8
 800eeae:	4463      	add	r3, ip
 800eeb0:	9329      	str	r3, [sp, #164]	; 0xa4
 800eeb2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800eeb4:	930b      	str	r3, [sp, #44]	; 0x2c
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	9328      	str	r3, [sp, #160]	; 0xa0
 800eeba:	2b07      	cmp	r3, #7
 800eebc:	dd08      	ble.n	800eed0 <_svfprintf_r+0xc88>
 800eebe:	aa27      	add	r2, sp, #156	; 0x9c
 800eec0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eec2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eec4:	f001 fca6 	bl	8010814 <__ssprint_r>
 800eec8:	2800      	cmp	r0, #0
 800eeca:	d000      	beq.n	800eece <_svfprintf_r+0xc86>
 800eecc:	e1ba      	b.n	800f244 <_svfprintf_r+0xffc>
 800eece:	af34      	add	r7, sp, #208	; 0xd0
 800eed0:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800eed2:	2c00      	cmp	r4, #0
 800eed4:	da19      	bge.n	800ef0a <_svfprintf_r+0xcc2>
 800eed6:	2510      	movs	r5, #16
 800eed8:	4264      	negs	r4, r4
 800eeda:	4ab1      	ldr	r2, [pc, #708]	; (800f1a0 <_svfprintf_r+0xf58>)
 800eedc:	603a      	str	r2, [r7, #0]
 800eede:	2c10      	cmp	r4, #16
 800eee0:	dc25      	bgt.n	800ef2e <_svfprintf_r+0xce6>
 800eee2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800eee4:	607c      	str	r4, [r7, #4]
 800eee6:	191c      	adds	r4, r3, r4
 800eee8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800eeea:	9429      	str	r4, [sp, #164]	; 0xa4
 800eeec:	1c5a      	adds	r2, r3, #1
 800eeee:	3708      	adds	r7, #8
 800eef0:	930b      	str	r3, [sp, #44]	; 0x2c
 800eef2:	9228      	str	r2, [sp, #160]	; 0xa0
 800eef4:	2a07      	cmp	r2, #7
 800eef6:	dd08      	ble.n	800ef0a <_svfprintf_r+0xcc2>
 800eef8:	aa27      	add	r2, sp, #156	; 0x9c
 800eefa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eefc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eefe:	f001 fc89 	bl	8010814 <__ssprint_r>
 800ef02:	2800      	cmp	r0, #0
 800ef04:	d000      	beq.n	800ef08 <_svfprintf_r+0xcc0>
 800ef06:	e19d      	b.n	800f244 <_svfprintf_r+0xffc>
 800ef08:	af34      	add	r7, sp, #208	; 0xd0
 800ef0a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ef0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef0e:	468c      	mov	ip, r1
 800ef10:	603b      	str	r3, [r7, #0]
 800ef12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef14:	607b      	str	r3, [r7, #4]
 800ef16:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ef18:	4463      	add	r3, ip
 800ef1a:	9329      	str	r3, [sp, #164]	; 0xa4
 800ef1c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ef1e:	1c5a      	adds	r2, r3, #1
 800ef20:	930b      	str	r3, [sp, #44]	; 0x2c
 800ef22:	9228      	str	r2, [sp, #160]	; 0xa0
 800ef24:	2a07      	cmp	r2, #7
 800ef26:	dd00      	ble.n	800ef2a <_svfprintf_r+0xce2>
 800ef28:	e51c      	b.n	800e964 <_svfprintf_r+0x71c>
 800ef2a:	3708      	adds	r7, #8
 800ef2c:	e524      	b.n	800e978 <_svfprintf_r+0x730>
 800ef2e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ef30:	607d      	str	r5, [r7, #4]
 800ef32:	001a      	movs	r2, r3
 800ef34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ef36:	3210      	adds	r2, #16
 800ef38:	9229      	str	r2, [sp, #164]	; 0xa4
 800ef3a:	1c5a      	adds	r2, r3, #1
 800ef3c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ef3e:	9228      	str	r2, [sp, #160]	; 0xa0
 800ef40:	3708      	adds	r7, #8
 800ef42:	2a07      	cmp	r2, #7
 800ef44:	dd08      	ble.n	800ef58 <_svfprintf_r+0xd10>
 800ef46:	aa27      	add	r2, sp, #156	; 0x9c
 800ef48:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ef4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ef4c:	f001 fc62 	bl	8010814 <__ssprint_r>
 800ef50:	2800      	cmp	r0, #0
 800ef52:	d000      	beq.n	800ef56 <_svfprintf_r+0xd0e>
 800ef54:	e176      	b.n	800f244 <_svfprintf_r+0xffc>
 800ef56:	af34      	add	r7, sp, #208	; 0xd0
 800ef58:	3c10      	subs	r4, #16
 800ef5a:	e7be      	b.n	800eeda <_svfprintf_r+0xc92>
 800ef5c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800ef5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ef60:	4294      	cmp	r4, r2
 800ef62:	dd00      	ble.n	800ef66 <_svfprintf_r+0xd1e>
 800ef64:	0014      	movs	r4, r2
 800ef66:	2c00      	cmp	r4, #0
 800ef68:	dd15      	ble.n	800ef96 <_svfprintf_r+0xd4e>
 800ef6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef6c:	607c      	str	r4, [r7, #4]
 800ef6e:	603b      	str	r3, [r7, #0]
 800ef70:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ef72:	3708      	adds	r7, #8
 800ef74:	191b      	adds	r3, r3, r4
 800ef76:	9329      	str	r3, [sp, #164]	; 0xa4
 800ef78:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ef7a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ef7c:	3301      	adds	r3, #1
 800ef7e:	9328      	str	r3, [sp, #160]	; 0xa0
 800ef80:	2b07      	cmp	r3, #7
 800ef82:	dd08      	ble.n	800ef96 <_svfprintf_r+0xd4e>
 800ef84:	aa27      	add	r2, sp, #156	; 0x9c
 800ef86:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ef88:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ef8a:	f001 fc43 	bl	8010814 <__ssprint_r>
 800ef8e:	2800      	cmp	r0, #0
 800ef90:	d000      	beq.n	800ef94 <_svfprintf_r+0xd4c>
 800ef92:	e157      	b.n	800f244 <_svfprintf_r+0xffc>
 800ef94:	af34      	add	r7, sp, #208	; 0xd0
 800ef96:	43e3      	mvns	r3, r4
 800ef98:	17db      	asrs	r3, r3, #31
 800ef9a:	401c      	ands	r4, r3
 800ef9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ef9e:	2510      	movs	r5, #16
 800efa0:	1b1c      	subs	r4, r3, r4
 800efa2:	2c00      	cmp	r4, #0
 800efa4:	dc7d      	bgt.n	800f0a2 <_svfprintf_r+0xe5a>
 800efa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800efa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800efaa:	4293      	cmp	r3, r2
 800efac:	db01      	blt.n	800efb2 <_svfprintf_r+0xd6a>
 800efae:	07f3      	lsls	r3, r6, #31
 800efb0:	d518      	bpl.n	800efe4 <_svfprintf_r+0xd9c>
 800efb2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800efb4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800efb6:	4694      	mov	ip, r2
 800efb8:	603b      	str	r3, [r7, #0]
 800efba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800efbc:	607b      	str	r3, [r7, #4]
 800efbe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800efc0:	3708      	adds	r7, #8
 800efc2:	4463      	add	r3, ip
 800efc4:	9329      	str	r3, [sp, #164]	; 0xa4
 800efc6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800efc8:	930b      	str	r3, [sp, #44]	; 0x2c
 800efca:	3301      	adds	r3, #1
 800efcc:	9328      	str	r3, [sp, #160]	; 0xa0
 800efce:	2b07      	cmp	r3, #7
 800efd0:	dd08      	ble.n	800efe4 <_svfprintf_r+0xd9c>
 800efd2:	aa27      	add	r2, sp, #156	; 0x9c
 800efd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800efd6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800efd8:	f001 fc1c 	bl	8010814 <__ssprint_r>
 800efdc:	2800      	cmp	r0, #0
 800efde:	d000      	beq.n	800efe2 <_svfprintf_r+0xd9a>
 800efe0:	e130      	b.n	800f244 <_svfprintf_r+0xffc>
 800efe2:	af34      	add	r7, sp, #208	; 0xd0
 800efe4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800efe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800efe8:	9921      	ldr	r1, [sp, #132]	; 0x84
 800efea:	1a9b      	subs	r3, r3, r2
 800efec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800efee:	1a54      	subs	r4, r2, r1
 800eff0:	429c      	cmp	r4, r3
 800eff2:	dd00      	ble.n	800eff6 <_svfprintf_r+0xdae>
 800eff4:	001c      	movs	r4, r3
 800eff6:	2c00      	cmp	r4, #0
 800eff8:	dd18      	ble.n	800f02c <_svfprintf_r+0xde4>
 800effa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800effc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800effe:	4694      	mov	ip, r2
 800f000:	4463      	add	r3, ip
 800f002:	603b      	str	r3, [r7, #0]
 800f004:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800f006:	607c      	str	r4, [r7, #4]
 800f008:	191b      	adds	r3, r3, r4
 800f00a:	9329      	str	r3, [sp, #164]	; 0xa4
 800f00c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800f00e:	3708      	adds	r7, #8
 800f010:	930b      	str	r3, [sp, #44]	; 0x2c
 800f012:	3301      	adds	r3, #1
 800f014:	9328      	str	r3, [sp, #160]	; 0xa0
 800f016:	2b07      	cmp	r3, #7
 800f018:	dd08      	ble.n	800f02c <_svfprintf_r+0xde4>
 800f01a:	aa27      	add	r2, sp, #156	; 0x9c
 800f01c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f01e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f020:	f001 fbf8 	bl	8010814 <__ssprint_r>
 800f024:	2800      	cmp	r0, #0
 800f026:	d000      	beq.n	800f02a <_svfprintf_r+0xde2>
 800f028:	e10c      	b.n	800f244 <_svfprintf_r+0xffc>
 800f02a:	af34      	add	r7, sp, #208	; 0xd0
 800f02c:	43e3      	mvns	r3, r4
 800f02e:	17db      	asrs	r3, r3, #31
 800f030:	401c      	ands	r4, r3
 800f032:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f034:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f036:	2510      	movs	r5, #16
 800f038:	1a9b      	subs	r3, r3, r2
 800f03a:	1b1c      	subs	r4, r3, r4
 800f03c:	2c00      	cmp	r4, #0
 800f03e:	dc00      	bgt.n	800f042 <_svfprintf_r+0xdfa>
 800f040:	e49a      	b.n	800e978 <_svfprintf_r+0x730>
 800f042:	4b57      	ldr	r3, [pc, #348]	; (800f1a0 <_svfprintf_r+0xf58>)
 800f044:	603b      	str	r3, [r7, #0]
 800f046:	2c10      	cmp	r4, #16
 800f048:	dc00      	bgt.n	800f04c <_svfprintf_r+0xe04>
 800f04a:	e6dc      	b.n	800ee06 <_svfprintf_r+0xbbe>
 800f04c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800f04e:	607d      	str	r5, [r7, #4]
 800f050:	3310      	adds	r3, #16
 800f052:	9329      	str	r3, [sp, #164]	; 0xa4
 800f054:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800f056:	3708      	adds	r7, #8
 800f058:	930b      	str	r3, [sp, #44]	; 0x2c
 800f05a:	3301      	adds	r3, #1
 800f05c:	9328      	str	r3, [sp, #160]	; 0xa0
 800f05e:	2b07      	cmp	r3, #7
 800f060:	dd08      	ble.n	800f074 <_svfprintf_r+0xe2c>
 800f062:	aa27      	add	r2, sp, #156	; 0x9c
 800f064:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f066:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f068:	f001 fbd4 	bl	8010814 <__ssprint_r>
 800f06c:	2800      	cmp	r0, #0
 800f06e:	d000      	beq.n	800f072 <_svfprintf_r+0xe2a>
 800f070:	e0e8      	b.n	800f244 <_svfprintf_r+0xffc>
 800f072:	af34      	add	r7, sp, #208	; 0xd0
 800f074:	3c10      	subs	r4, #16
 800f076:	e7e4      	b.n	800f042 <_svfprintf_r+0xdfa>
 800f078:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800f07a:	607d      	str	r5, [r7, #4]
 800f07c:	3310      	adds	r3, #16
 800f07e:	9329      	str	r3, [sp, #164]	; 0xa4
 800f080:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800f082:	3708      	adds	r7, #8
 800f084:	930b      	str	r3, [sp, #44]	; 0x2c
 800f086:	3301      	adds	r3, #1
 800f088:	9328      	str	r3, [sp, #160]	; 0xa0
 800f08a:	2b07      	cmp	r3, #7
 800f08c:	dd08      	ble.n	800f0a0 <_svfprintf_r+0xe58>
 800f08e:	aa27      	add	r2, sp, #156	; 0x9c
 800f090:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f092:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f094:	f001 fbbe 	bl	8010814 <__ssprint_r>
 800f098:	2800      	cmp	r0, #0
 800f09a:	d000      	beq.n	800f09e <_svfprintf_r+0xe56>
 800f09c:	e0d2      	b.n	800f244 <_svfprintf_r+0xffc>
 800f09e:	af34      	add	r7, sp, #208	; 0xd0
 800f0a0:	3c10      	subs	r4, #16
 800f0a2:	4b3f      	ldr	r3, [pc, #252]	; (800f1a0 <_svfprintf_r+0xf58>)
 800f0a4:	603b      	str	r3, [r7, #0]
 800f0a6:	2c10      	cmp	r4, #16
 800f0a8:	dce6      	bgt.n	800f078 <_svfprintf_r+0xe30>
 800f0aa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800f0ac:	607c      	str	r4, [r7, #4]
 800f0ae:	191c      	adds	r4, r3, r4
 800f0b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800f0b2:	9429      	str	r4, [sp, #164]	; 0xa4
 800f0b4:	930b      	str	r3, [sp, #44]	; 0x2c
 800f0b6:	3301      	adds	r3, #1
 800f0b8:	9328      	str	r3, [sp, #160]	; 0xa0
 800f0ba:	3708      	adds	r7, #8
 800f0bc:	2b07      	cmp	r3, #7
 800f0be:	dc00      	bgt.n	800f0c2 <_svfprintf_r+0xe7a>
 800f0c0:	e771      	b.n	800efa6 <_svfprintf_r+0xd5e>
 800f0c2:	aa27      	add	r2, sp, #156	; 0x9c
 800f0c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f0c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f0c8:	f001 fba4 	bl	8010814 <__ssprint_r>
 800f0cc:	2800      	cmp	r0, #0
 800f0ce:	d000      	beq.n	800f0d2 <_svfprintf_r+0xe8a>
 800f0d0:	e0b8      	b.n	800f244 <_svfprintf_r+0xffc>
 800f0d2:	af34      	add	r7, sp, #208	; 0xd0
 800f0d4:	e767      	b.n	800efa6 <_svfprintf_r+0xd5e>
 800f0d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	dc03      	bgt.n	800f0e4 <_svfprintf_r+0xe9c>
 800f0dc:	2301      	movs	r3, #1
 800f0de:	421e      	tst	r6, r3
 800f0e0:	d100      	bne.n	800f0e4 <_svfprintf_r+0xe9c>
 800f0e2:	e087      	b.n	800f1f4 <_svfprintf_r+0xfac>
 800f0e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f0e6:	603b      	str	r3, [r7, #0]
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	607b      	str	r3, [r7, #4]
 800f0ec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800f0ee:	3708      	adds	r7, #8
 800f0f0:	3301      	adds	r3, #1
 800f0f2:	9329      	str	r3, [sp, #164]	; 0xa4
 800f0f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800f0f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800f0f8:	3301      	adds	r3, #1
 800f0fa:	9328      	str	r3, [sp, #160]	; 0xa0
 800f0fc:	2b07      	cmp	r3, #7
 800f0fe:	dd08      	ble.n	800f112 <_svfprintf_r+0xeca>
 800f100:	aa27      	add	r2, sp, #156	; 0x9c
 800f102:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f104:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f106:	f001 fb85 	bl	8010814 <__ssprint_r>
 800f10a:	2800      	cmp	r0, #0
 800f10c:	d000      	beq.n	800f110 <_svfprintf_r+0xec8>
 800f10e:	e099      	b.n	800f244 <_svfprintf_r+0xffc>
 800f110:	af34      	add	r7, sp, #208	; 0xd0
 800f112:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f114:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f116:	4694      	mov	ip, r2
 800f118:	603b      	str	r3, [r7, #0]
 800f11a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f11c:	607b      	str	r3, [r7, #4]
 800f11e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800f120:	3708      	adds	r7, #8
 800f122:	4463      	add	r3, ip
 800f124:	9329      	str	r3, [sp, #164]	; 0xa4
 800f126:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800f128:	930b      	str	r3, [sp, #44]	; 0x2c
 800f12a:	3301      	adds	r3, #1
 800f12c:	9328      	str	r3, [sp, #160]	; 0xa0
 800f12e:	2b07      	cmp	r3, #7
 800f130:	dd08      	ble.n	800f144 <_svfprintf_r+0xefc>
 800f132:	aa27      	add	r2, sp, #156	; 0x9c
 800f134:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f136:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f138:	f001 fb6c 	bl	8010814 <__ssprint_r>
 800f13c:	2800      	cmp	r0, #0
 800f13e:	d000      	beq.n	800f142 <_svfprintf_r+0xefa>
 800f140:	e080      	b.n	800f244 <_svfprintf_r+0xffc>
 800f142:	af34      	add	r7, sp, #208	; 0xd0
 800f144:	2300      	movs	r3, #0
 800f146:	2200      	movs	r2, #0
 800f148:	9816      	ldr	r0, [sp, #88]	; 0x58
 800f14a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800f14c:	f7f1 f98e 	bl	800046c <__aeabi_dcmpeq>
 800f150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f152:	1e5d      	subs	r5, r3, #1
 800f154:	2800      	cmp	r0, #0
 800f156:	d125      	bne.n	800f1a4 <_svfprintf_r+0xf5c>
 800f158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f15a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f15c:	3301      	adds	r3, #1
 800f15e:	603b      	str	r3, [r7, #0]
 800f160:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800f162:	607d      	str	r5, [r7, #4]
 800f164:	3b01      	subs	r3, #1
 800f166:	189b      	adds	r3, r3, r2
 800f168:	9329      	str	r3, [sp, #164]	; 0xa4
 800f16a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800f16c:	3708      	adds	r7, #8
 800f16e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f170:	3301      	adds	r3, #1
 800f172:	9328      	str	r3, [sp, #160]	; 0xa0
 800f174:	2b07      	cmp	r3, #7
 800f176:	dd07      	ble.n	800f188 <_svfprintf_r+0xf40>
 800f178:	aa27      	add	r2, sp, #156	; 0x9c
 800f17a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f17c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f17e:	f001 fb49 	bl	8010814 <__ssprint_r>
 800f182:	2800      	cmp	r0, #0
 800f184:	d15e      	bne.n	800f244 <_svfprintf_r+0xffc>
 800f186:	af34      	add	r7, sp, #208	; 0xd0
 800f188:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f18a:	ab23      	add	r3, sp, #140	; 0x8c
 800f18c:	4694      	mov	ip, r2
 800f18e:	603b      	str	r3, [r7, #0]
 800f190:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f192:	607b      	str	r3, [r7, #4]
 800f194:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800f196:	4463      	add	r3, ip
 800f198:	9329      	str	r3, [sp, #164]	; 0xa4
 800f19a:	e638      	b.n	800ee0e <_svfprintf_r+0xbc6>
 800f19c:	08013d28 	.word	0x08013d28
 800f1a0:	08013d3a 	.word	0x08013d3a
 800f1a4:	2410      	movs	r4, #16
 800f1a6:	2d00      	cmp	r5, #0
 800f1a8:	ddee      	ble.n	800f188 <_svfprintf_r+0xf40>
 800f1aa:	4b5e      	ldr	r3, [pc, #376]	; (800f324 <_svfprintf_r+0x10dc>)
 800f1ac:	603b      	str	r3, [r7, #0]
 800f1ae:	2d10      	cmp	r5, #16
 800f1b0:	dc0b      	bgt.n	800f1ca <_svfprintf_r+0xf82>
 800f1b2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800f1b4:	607d      	str	r5, [r7, #4]
 800f1b6:	195d      	adds	r5, r3, r5
 800f1b8:	9529      	str	r5, [sp, #164]	; 0xa4
 800f1ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800f1bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800f1be:	3301      	adds	r3, #1
 800f1c0:	9328      	str	r3, [sp, #160]	; 0xa0
 800f1c2:	2b07      	cmp	r3, #7
 800f1c4:	dcd8      	bgt.n	800f178 <_svfprintf_r+0xf30>
 800f1c6:	3708      	adds	r7, #8
 800f1c8:	e7de      	b.n	800f188 <_svfprintf_r+0xf40>
 800f1ca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800f1cc:	607c      	str	r4, [r7, #4]
 800f1ce:	3310      	adds	r3, #16
 800f1d0:	9329      	str	r3, [sp, #164]	; 0xa4
 800f1d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800f1d4:	3708      	adds	r7, #8
 800f1d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800f1d8:	3301      	adds	r3, #1
 800f1da:	9328      	str	r3, [sp, #160]	; 0xa0
 800f1dc:	2b07      	cmp	r3, #7
 800f1de:	dd07      	ble.n	800f1f0 <_svfprintf_r+0xfa8>
 800f1e0:	aa27      	add	r2, sp, #156	; 0x9c
 800f1e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f1e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f1e6:	f001 fb15 	bl	8010814 <__ssprint_r>
 800f1ea:	2800      	cmp	r0, #0
 800f1ec:	d12a      	bne.n	800f244 <_svfprintf_r+0xffc>
 800f1ee:	af34      	add	r7, sp, #208	; 0xd0
 800f1f0:	3d10      	subs	r5, #16
 800f1f2:	e7da      	b.n	800f1aa <_svfprintf_r+0xf62>
 800f1f4:	607b      	str	r3, [r7, #4]
 800f1f6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800f1f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f1fa:	3301      	adds	r3, #1
 800f1fc:	603a      	str	r2, [r7, #0]
 800f1fe:	9329      	str	r3, [sp, #164]	; 0xa4
 800f200:	e7db      	b.n	800f1ba <_svfprintf_r+0xf72>
 800f202:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f204:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f206:	2510      	movs	r5, #16
 800f208:	1a9c      	subs	r4, r3, r2
 800f20a:	2c00      	cmp	r4, #0
 800f20c:	dc01      	bgt.n	800f212 <_svfprintf_r+0xfca>
 800f20e:	f7ff fbb7 	bl	800e980 <_svfprintf_r+0x738>
 800f212:	4b45      	ldr	r3, [pc, #276]	; (800f328 <_svfprintf_r+0x10e0>)
 800f214:	603b      	str	r3, [r7, #0]
 800f216:	2c10      	cmp	r4, #16
 800f218:	dc1e      	bgt.n	800f258 <_svfprintf_r+0x1010>
 800f21a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800f21c:	607c      	str	r4, [r7, #4]
 800f21e:	191c      	adds	r4, r3, r4
 800f220:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800f222:	9429      	str	r4, [sp, #164]	; 0xa4
 800f224:	930b      	str	r3, [sp, #44]	; 0x2c
 800f226:	3301      	adds	r3, #1
 800f228:	9328      	str	r3, [sp, #160]	; 0xa0
 800f22a:	2b07      	cmp	r3, #7
 800f22c:	dc01      	bgt.n	800f232 <_svfprintf_r+0xfea>
 800f22e:	f7ff fba7 	bl	800e980 <_svfprintf_r+0x738>
 800f232:	aa27      	add	r2, sp, #156	; 0x9c
 800f234:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f236:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f238:	f001 faec 	bl	8010814 <__ssprint_r>
 800f23c:	2800      	cmp	r0, #0
 800f23e:	d101      	bne.n	800f244 <_svfprintf_r+0xffc>
 800f240:	f7ff fb9e 	bl	800e980 <_svfprintf_r+0x738>
 800f244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f246:	899b      	ldrh	r3, [r3, #12]
 800f248:	065b      	lsls	r3, r3, #25
 800f24a:	d401      	bmi.n	800f250 <_svfprintf_r+0x1008>
 800f24c:	f7ff f821 	bl	800e292 <_svfprintf_r+0x4a>
 800f250:	2301      	movs	r3, #1
 800f252:	425b      	negs	r3, r3
 800f254:	f7ff f81c 	bl	800e290 <_svfprintf_r+0x48>
 800f258:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800f25a:	607d      	str	r5, [r7, #4]
 800f25c:	3310      	adds	r3, #16
 800f25e:	9329      	str	r3, [sp, #164]	; 0xa4
 800f260:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800f262:	3708      	adds	r7, #8
 800f264:	930b      	str	r3, [sp, #44]	; 0x2c
 800f266:	3301      	adds	r3, #1
 800f268:	9328      	str	r3, [sp, #160]	; 0xa0
 800f26a:	2b07      	cmp	r3, #7
 800f26c:	dd07      	ble.n	800f27e <_svfprintf_r+0x1036>
 800f26e:	aa27      	add	r2, sp, #156	; 0x9c
 800f270:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f272:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f274:	f001 face 	bl	8010814 <__ssprint_r>
 800f278:	2800      	cmp	r0, #0
 800f27a:	d1e3      	bne.n	800f244 <_svfprintf_r+0xffc>
 800f27c:	af34      	add	r7, sp, #208	; 0xd0
 800f27e:	3c10      	subs	r4, #16
 800f280:	e7c7      	b.n	800f212 <_svfprintf_r+0xfca>
 800f282:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800f284:	9306      	str	r3, [sp, #24]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d0dc      	beq.n	800f244 <_svfprintf_r+0xffc>
 800f28a:	aa27      	add	r2, sp, #156	; 0x9c
 800f28c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f28e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f290:	f001 fac0 	bl	8010814 <__ssprint_r>
 800f294:	e7d6      	b.n	800f244 <_svfprintf_r+0xffc>
 800f296:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f298:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f29a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800f29c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800f29e:	f7f2 fecd 	bl	800203c <__aeabi_dcmpun>
 800f2a2:	2800      	cmp	r0, #0
 800f2a4:	d101      	bne.n	800f2aa <_svfprintf_r+0x1062>
 800f2a6:	f7ff f9d8 	bl	800e65a <_svfprintf_r+0x412>
 800f2aa:	4b20      	ldr	r3, [pc, #128]	; (800f32c <_svfprintf_r+0x10e4>)
 800f2ac:	930c      	str	r3, [sp, #48]	; 0x30
 800f2ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f2b0:	2b47      	cmp	r3, #71	; 0x47
 800f2b2:	dd01      	ble.n	800f2b8 <_svfprintf_r+0x1070>
 800f2b4:	f7ff f9ca 	bl	800e64c <_svfprintf_r+0x404>
 800f2b8:	4b1d      	ldr	r3, [pc, #116]	; (800f330 <_svfprintf_r+0x10e8>)
 800f2ba:	f7ff f9c6 	bl	800e64a <_svfprintf_r+0x402>
 800f2be:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800f2c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f2c2:	1a9b      	subs	r3, r3, r2
 800f2c4:	930e      	str	r3, [sp, #56]	; 0x38
 800f2c6:	f7ff fa43 	bl	800e750 <_svfprintf_r+0x508>
 800f2ca:	0035      	movs	r5, r6
 800f2cc:	2a00      	cmp	r2, #0
 800f2ce:	d101      	bne.n	800f2d4 <_svfprintf_r+0x108c>
 800f2d0:	f7ff f8c8 	bl	800e464 <_svfprintf_r+0x21c>
 800f2d4:	2b01      	cmp	r3, #1
 800f2d6:	d100      	bne.n	800f2da <_svfprintf_r+0x1092>
 800f2d8:	e479      	b.n	800ebce <_svfprintf_r+0x986>
 800f2da:	2b02      	cmp	r3, #2
 800f2dc:	d100      	bne.n	800f2e0 <_svfprintf_r+0x1098>
 800f2de:	e4ab      	b.n	800ec38 <_svfprintf_r+0x9f0>
 800f2e0:	2607      	movs	r6, #7
 800f2e2:	ab34      	add	r3, sp, #208	; 0xd0
 800f2e4:	1e5a      	subs	r2, r3, #1
 800f2e6:	920c      	str	r2, [sp, #48]	; 0x30
 800f2e8:	9a06      	ldr	r2, [sp, #24]
 800f2ea:	1e59      	subs	r1, r3, #1
 800f2ec:	4032      	ands	r2, r6
 800f2ee:	3230      	adds	r2, #48	; 0x30
 800f2f0:	700a      	strb	r2, [r1, #0]
 800f2f2:	9907      	ldr	r1, [sp, #28]
 800f2f4:	074c      	lsls	r4, r1, #29
 800f2f6:	9906      	ldr	r1, [sp, #24]
 800f2f8:	08c8      	lsrs	r0, r1, #3
 800f2fa:	9907      	ldr	r1, [sp, #28]
 800f2fc:	4304      	orrs	r4, r0
 800f2fe:	08c9      	lsrs	r1, r1, #3
 800f300:	9107      	str	r1, [sp, #28]
 800f302:	0021      	movs	r1, r4
 800f304:	9807      	ldr	r0, [sp, #28]
 800f306:	9406      	str	r4, [sp, #24]
 800f308:	4301      	orrs	r1, r0
 800f30a:	d000      	beq.n	800f30e <_svfprintf_r+0x10c6>
 800f30c:	e45d      	b.n	800ebca <_svfprintf_r+0x982>
 800f30e:	07e9      	lsls	r1, r5, #31
 800f310:	d400      	bmi.n	800f314 <_svfprintf_r+0x10cc>
 800f312:	e484      	b.n	800ec1e <_svfprintf_r+0x9d6>
 800f314:	2a30      	cmp	r2, #48	; 0x30
 800f316:	d100      	bne.n	800f31a <_svfprintf_r+0x10d2>
 800f318:	e481      	b.n	800ec1e <_svfprintf_r+0x9d6>
 800f31a:	2230      	movs	r2, #48	; 0x30
 800f31c:	3b02      	subs	r3, #2
 800f31e:	701a      	strb	r2, [r3, #0]
 800f320:	930c      	str	r3, [sp, #48]	; 0x30
 800f322:	e47c      	b.n	800ec1e <_svfprintf_r+0x9d6>
 800f324:	08013d3a 	.word	0x08013d3a
 800f328:	08013d2a 	.word	0x08013d2a
 800f32c:	08013d02 	.word	0x08013d02
 800f330:	08013cfe 	.word	0x08013cfe

0800f334 <quorem>:
 800f334:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f336:	6903      	ldr	r3, [r0, #16]
 800f338:	690c      	ldr	r4, [r1, #16]
 800f33a:	b089      	sub	sp, #36	; 0x24
 800f33c:	0007      	movs	r7, r0
 800f33e:	9105      	str	r1, [sp, #20]
 800f340:	2600      	movs	r6, #0
 800f342:	429c      	cmp	r4, r3
 800f344:	dc6d      	bgt.n	800f422 <quorem+0xee>
 800f346:	000b      	movs	r3, r1
 800f348:	3c01      	subs	r4, #1
 800f34a:	3314      	adds	r3, #20
 800f34c:	00a5      	lsls	r5, r4, #2
 800f34e:	9303      	str	r3, [sp, #12]
 800f350:	195b      	adds	r3, r3, r5
 800f352:	9304      	str	r3, [sp, #16]
 800f354:	0003      	movs	r3, r0
 800f356:	3314      	adds	r3, #20
 800f358:	9302      	str	r3, [sp, #8]
 800f35a:	195d      	adds	r5, r3, r5
 800f35c:	9b04      	ldr	r3, [sp, #16]
 800f35e:	6828      	ldr	r0, [r5, #0]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	1c59      	adds	r1, r3, #1
 800f364:	9301      	str	r3, [sp, #4]
 800f366:	f7f0 fefb 	bl	8000160 <__udivsi3>
 800f36a:	9001      	str	r0, [sp, #4]
 800f36c:	42b0      	cmp	r0, r6
 800f36e:	d02d      	beq.n	800f3cc <quorem+0x98>
 800f370:	9b03      	ldr	r3, [sp, #12]
 800f372:	9802      	ldr	r0, [sp, #8]
 800f374:	469c      	mov	ip, r3
 800f376:	9606      	str	r6, [sp, #24]
 800f378:	4662      	mov	r2, ip
 800f37a:	ca08      	ldmia	r2!, {r3}
 800f37c:	4694      	mov	ip, r2
 800f37e:	9a01      	ldr	r2, [sp, #4]
 800f380:	b299      	uxth	r1, r3
 800f382:	4351      	muls	r1, r2
 800f384:	0c1b      	lsrs	r3, r3, #16
 800f386:	4353      	muls	r3, r2
 800f388:	1989      	adds	r1, r1, r6
 800f38a:	0c0a      	lsrs	r2, r1, #16
 800f38c:	189b      	adds	r3, r3, r2
 800f38e:	9307      	str	r3, [sp, #28]
 800f390:	8802      	ldrh	r2, [r0, #0]
 800f392:	0c1e      	lsrs	r6, r3, #16
 800f394:	9b06      	ldr	r3, [sp, #24]
 800f396:	b289      	uxth	r1, r1
 800f398:	18d2      	adds	r2, r2, r3
 800f39a:	6803      	ldr	r3, [r0, #0]
 800f39c:	1a52      	subs	r2, r2, r1
 800f39e:	0c19      	lsrs	r1, r3, #16
 800f3a0:	466b      	mov	r3, sp
 800f3a2:	8b9b      	ldrh	r3, [r3, #28]
 800f3a4:	1acb      	subs	r3, r1, r3
 800f3a6:	1411      	asrs	r1, r2, #16
 800f3a8:	185b      	adds	r3, r3, r1
 800f3aa:	1419      	asrs	r1, r3, #16
 800f3ac:	b292      	uxth	r2, r2
 800f3ae:	041b      	lsls	r3, r3, #16
 800f3b0:	431a      	orrs	r2, r3
 800f3b2:	9b04      	ldr	r3, [sp, #16]
 800f3b4:	9106      	str	r1, [sp, #24]
 800f3b6:	c004      	stmia	r0!, {r2}
 800f3b8:	4563      	cmp	r3, ip
 800f3ba:	d2dd      	bcs.n	800f378 <quorem+0x44>
 800f3bc:	682b      	ldr	r3, [r5, #0]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d104      	bne.n	800f3cc <quorem+0x98>
 800f3c2:	9b02      	ldr	r3, [sp, #8]
 800f3c4:	3d04      	subs	r5, #4
 800f3c6:	42ab      	cmp	r3, r5
 800f3c8:	d32e      	bcc.n	800f428 <quorem+0xf4>
 800f3ca:	613c      	str	r4, [r7, #16]
 800f3cc:	9905      	ldr	r1, [sp, #20]
 800f3ce:	0038      	movs	r0, r7
 800f3d0:	f001 f94f 	bl	8010672 <__mcmp>
 800f3d4:	2800      	cmp	r0, #0
 800f3d6:	db23      	blt.n	800f420 <quorem+0xec>
 800f3d8:	2500      	movs	r5, #0
 800f3da:	9b01      	ldr	r3, [sp, #4]
 800f3dc:	9802      	ldr	r0, [sp, #8]
 800f3de:	3301      	adds	r3, #1
 800f3e0:	9903      	ldr	r1, [sp, #12]
 800f3e2:	9301      	str	r3, [sp, #4]
 800f3e4:	c908      	ldmia	r1!, {r3}
 800f3e6:	8802      	ldrh	r2, [r0, #0]
 800f3e8:	1955      	adds	r5, r2, r5
 800f3ea:	b29a      	uxth	r2, r3
 800f3ec:	1aaa      	subs	r2, r5, r2
 800f3ee:	6805      	ldr	r5, [r0, #0]
 800f3f0:	0c1b      	lsrs	r3, r3, #16
 800f3f2:	0c2d      	lsrs	r5, r5, #16
 800f3f4:	1aeb      	subs	r3, r5, r3
 800f3f6:	1415      	asrs	r5, r2, #16
 800f3f8:	195b      	adds	r3, r3, r5
 800f3fa:	141d      	asrs	r5, r3, #16
 800f3fc:	b292      	uxth	r2, r2
 800f3fe:	041b      	lsls	r3, r3, #16
 800f400:	4313      	orrs	r3, r2
 800f402:	c008      	stmia	r0!, {r3}
 800f404:	9b04      	ldr	r3, [sp, #16]
 800f406:	428b      	cmp	r3, r1
 800f408:	d2ec      	bcs.n	800f3e4 <quorem+0xb0>
 800f40a:	9a02      	ldr	r2, [sp, #8]
 800f40c:	00a3      	lsls	r3, r4, #2
 800f40e:	18d3      	adds	r3, r2, r3
 800f410:	681a      	ldr	r2, [r3, #0]
 800f412:	2a00      	cmp	r2, #0
 800f414:	d104      	bne.n	800f420 <quorem+0xec>
 800f416:	9a02      	ldr	r2, [sp, #8]
 800f418:	3b04      	subs	r3, #4
 800f41a:	429a      	cmp	r2, r3
 800f41c:	d309      	bcc.n	800f432 <quorem+0xfe>
 800f41e:	613c      	str	r4, [r7, #16]
 800f420:	9e01      	ldr	r6, [sp, #4]
 800f422:	0030      	movs	r0, r6
 800f424:	b009      	add	sp, #36	; 0x24
 800f426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f428:	682b      	ldr	r3, [r5, #0]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d1cd      	bne.n	800f3ca <quorem+0x96>
 800f42e:	3c01      	subs	r4, #1
 800f430:	e7c7      	b.n	800f3c2 <quorem+0x8e>
 800f432:	681a      	ldr	r2, [r3, #0]
 800f434:	2a00      	cmp	r2, #0
 800f436:	d1f2      	bne.n	800f41e <quorem+0xea>
 800f438:	3c01      	subs	r4, #1
 800f43a:	e7ec      	b.n	800f416 <quorem+0xe2>

0800f43c <_dtoa_r>:
 800f43c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f43e:	0016      	movs	r6, r2
 800f440:	001f      	movs	r7, r3
 800f442:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f444:	b09d      	sub	sp, #116	; 0x74
 800f446:	9004      	str	r0, [sp, #16]
 800f448:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800f44a:	9606      	str	r6, [sp, #24]
 800f44c:	9707      	str	r7, [sp, #28]
 800f44e:	2c00      	cmp	r4, #0
 800f450:	d108      	bne.n	800f464 <_dtoa_r+0x28>
 800f452:	2010      	movs	r0, #16
 800f454:	f7fe fc82 	bl	800dd5c <malloc>
 800f458:	9b04      	ldr	r3, [sp, #16]
 800f45a:	6258      	str	r0, [r3, #36]	; 0x24
 800f45c:	6044      	str	r4, [r0, #4]
 800f45e:	6084      	str	r4, [r0, #8]
 800f460:	6004      	str	r4, [r0, #0]
 800f462:	60c4      	str	r4, [r0, #12]
 800f464:	9b04      	ldr	r3, [sp, #16]
 800f466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f468:	6819      	ldr	r1, [r3, #0]
 800f46a:	2900      	cmp	r1, #0
 800f46c:	d00b      	beq.n	800f486 <_dtoa_r+0x4a>
 800f46e:	685a      	ldr	r2, [r3, #4]
 800f470:	2301      	movs	r3, #1
 800f472:	4093      	lsls	r3, r2
 800f474:	604a      	str	r2, [r1, #4]
 800f476:	608b      	str	r3, [r1, #8]
 800f478:	9804      	ldr	r0, [sp, #16]
 800f47a:	f000 ff20 	bl	80102be <_Bfree>
 800f47e:	2200      	movs	r2, #0
 800f480:	9b04      	ldr	r3, [sp, #16]
 800f482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f484:	601a      	str	r2, [r3, #0]
 800f486:	9b07      	ldr	r3, [sp, #28]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	da1f      	bge.n	800f4cc <_dtoa_r+0x90>
 800f48c:	2301      	movs	r3, #1
 800f48e:	602b      	str	r3, [r5, #0]
 800f490:	007b      	lsls	r3, r7, #1
 800f492:	085b      	lsrs	r3, r3, #1
 800f494:	9307      	str	r3, [sp, #28]
 800f496:	9c07      	ldr	r4, [sp, #28]
 800f498:	4bb7      	ldr	r3, [pc, #732]	; (800f778 <_dtoa_r+0x33c>)
 800f49a:	0022      	movs	r2, r4
 800f49c:	9319      	str	r3, [sp, #100]	; 0x64
 800f49e:	401a      	ands	r2, r3
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d116      	bne.n	800f4d2 <_dtoa_r+0x96>
 800f4a4:	4bb5      	ldr	r3, [pc, #724]	; (800f77c <_dtoa_r+0x340>)
 800f4a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f4a8:	6013      	str	r3, [r2, #0]
 800f4aa:	9b06      	ldr	r3, [sp, #24]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d103      	bne.n	800f4b8 <_dtoa_r+0x7c>
 800f4b0:	0324      	lsls	r4, r4, #12
 800f4b2:	d101      	bne.n	800f4b8 <_dtoa_r+0x7c>
 800f4b4:	f000 fd91 	bl	800ffda <_dtoa_r+0xb9e>
 800f4b8:	4bb1      	ldr	r3, [pc, #708]	; (800f780 <_dtoa_r+0x344>)
 800f4ba:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f4bc:	930a      	str	r3, [sp, #40]	; 0x28
 800f4be:	4bb1      	ldr	r3, [pc, #708]	; (800f784 <_dtoa_r+0x348>)
 800f4c0:	2a00      	cmp	r2, #0
 800f4c2:	d001      	beq.n	800f4c8 <_dtoa_r+0x8c>
 800f4c4:	f000 fd8f 	bl	800ffe6 <_dtoa_r+0xbaa>
 800f4c8:	f000 fd8f 	bl	800ffea <_dtoa_r+0xbae>
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	602b      	str	r3, [r5, #0]
 800f4d0:	e7e1      	b.n	800f496 <_dtoa_r+0x5a>
 800f4d2:	9e06      	ldr	r6, [sp, #24]
 800f4d4:	9f07      	ldr	r7, [sp, #28]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	2300      	movs	r3, #0
 800f4da:	0030      	movs	r0, r6
 800f4dc:	0039      	movs	r1, r7
 800f4de:	f7f0 ffc5 	bl	800046c <__aeabi_dcmpeq>
 800f4e2:	1e05      	subs	r5, r0, #0
 800f4e4:	d00e      	beq.n	800f504 <_dtoa_r+0xc8>
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f4ea:	6013      	str	r3, [r2, #0]
 800f4ec:	4ba6      	ldr	r3, [pc, #664]	; (800f788 <_dtoa_r+0x34c>)
 800f4ee:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f4f0:	930a      	str	r3, [sp, #40]	; 0x28
 800f4f2:	2a00      	cmp	r2, #0
 800f4f4:	d101      	bne.n	800f4fa <_dtoa_r+0xbe>
 800f4f6:	f000 fd78 	bl	800ffea <_dtoa_r+0xbae>
 800f4fa:	4aa4      	ldr	r2, [pc, #656]	; (800f78c <_dtoa_r+0x350>)
 800f4fc:	9926      	ldr	r1, [sp, #152]	; 0x98
 800f4fe:	600a      	str	r2, [r1, #0]
 800f500:	f000 fd73 	bl	800ffea <_dtoa_r+0xbae>
 800f504:	ab1a      	add	r3, sp, #104	; 0x68
 800f506:	9301      	str	r3, [sp, #4]
 800f508:	ab1b      	add	r3, sp, #108	; 0x6c
 800f50a:	9300      	str	r3, [sp, #0]
 800f50c:	0032      	movs	r2, r6
 800f50e:	003b      	movs	r3, r7
 800f510:	9804      	ldr	r0, [sp, #16]
 800f512:	f001 f92b 	bl	801076c <__d2b>
 800f516:	0063      	lsls	r3, r4, #1
 800f518:	9005      	str	r0, [sp, #20]
 800f51a:	0d5b      	lsrs	r3, r3, #21
 800f51c:	d100      	bne.n	800f520 <_dtoa_r+0xe4>
 800f51e:	e07f      	b.n	800f620 <_dtoa_r+0x1e4>
 800f520:	033a      	lsls	r2, r7, #12
 800f522:	4c9b      	ldr	r4, [pc, #620]	; (800f790 <_dtoa_r+0x354>)
 800f524:	0b12      	lsrs	r2, r2, #12
 800f526:	4314      	orrs	r4, r2
 800f528:	0021      	movs	r1, r4
 800f52a:	4a9a      	ldr	r2, [pc, #616]	; (800f794 <_dtoa_r+0x358>)
 800f52c:	0030      	movs	r0, r6
 800f52e:	9518      	str	r5, [sp, #96]	; 0x60
 800f530:	189e      	adds	r6, r3, r2
 800f532:	2200      	movs	r2, #0
 800f534:	4b98      	ldr	r3, [pc, #608]	; (800f798 <_dtoa_r+0x35c>)
 800f536:	f7f2 fa6b 	bl	8001a10 <__aeabi_dsub>
 800f53a:	4a98      	ldr	r2, [pc, #608]	; (800f79c <_dtoa_r+0x360>)
 800f53c:	4b98      	ldr	r3, [pc, #608]	; (800f7a0 <_dtoa_r+0x364>)
 800f53e:	f7f1 ffe7 	bl	8001510 <__aeabi_dmul>
 800f542:	4a98      	ldr	r2, [pc, #608]	; (800f7a4 <_dtoa_r+0x368>)
 800f544:	4b98      	ldr	r3, [pc, #608]	; (800f7a8 <_dtoa_r+0x36c>)
 800f546:	f7f1 f89f 	bl	8000688 <__aeabi_dadd>
 800f54a:	0004      	movs	r4, r0
 800f54c:	0030      	movs	r0, r6
 800f54e:	000d      	movs	r5, r1
 800f550:	f7f2 fdc8 	bl	80020e4 <__aeabi_i2d>
 800f554:	4a95      	ldr	r2, [pc, #596]	; (800f7ac <_dtoa_r+0x370>)
 800f556:	4b96      	ldr	r3, [pc, #600]	; (800f7b0 <_dtoa_r+0x374>)
 800f558:	f7f1 ffda 	bl	8001510 <__aeabi_dmul>
 800f55c:	0002      	movs	r2, r0
 800f55e:	000b      	movs	r3, r1
 800f560:	0020      	movs	r0, r4
 800f562:	0029      	movs	r1, r5
 800f564:	f7f1 f890 	bl	8000688 <__aeabi_dadd>
 800f568:	0004      	movs	r4, r0
 800f56a:	000d      	movs	r5, r1
 800f56c:	f7f2 fd86 	bl	800207c <__aeabi_d2iz>
 800f570:	2200      	movs	r2, #0
 800f572:	9003      	str	r0, [sp, #12]
 800f574:	2300      	movs	r3, #0
 800f576:	0020      	movs	r0, r4
 800f578:	0029      	movs	r1, r5
 800f57a:	f7f0 ff7d 	bl	8000478 <__aeabi_dcmplt>
 800f57e:	2800      	cmp	r0, #0
 800f580:	d00e      	beq.n	800f5a0 <_dtoa_r+0x164>
 800f582:	9803      	ldr	r0, [sp, #12]
 800f584:	f7f2 fdae 	bl	80020e4 <__aeabi_i2d>
 800f588:	000b      	movs	r3, r1
 800f58a:	0002      	movs	r2, r0
 800f58c:	0029      	movs	r1, r5
 800f58e:	0020      	movs	r0, r4
 800f590:	f7f0 ff6c 	bl	800046c <__aeabi_dcmpeq>
 800f594:	0003      	movs	r3, r0
 800f596:	4258      	negs	r0, r3
 800f598:	4158      	adcs	r0, r3
 800f59a:	9b03      	ldr	r3, [sp, #12]
 800f59c:	1a1b      	subs	r3, r3, r0
 800f59e:	9303      	str	r3, [sp, #12]
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	9316      	str	r3, [sp, #88]	; 0x58
 800f5a4:	9b03      	ldr	r3, [sp, #12]
 800f5a6:	2b16      	cmp	r3, #22
 800f5a8:	d80f      	bhi.n	800f5ca <_dtoa_r+0x18e>
 800f5aa:	4982      	ldr	r1, [pc, #520]	; (800f7b4 <_dtoa_r+0x378>)
 800f5ac:	00db      	lsls	r3, r3, #3
 800f5ae:	18c9      	adds	r1, r1, r3
 800f5b0:	6808      	ldr	r0, [r1, #0]
 800f5b2:	6849      	ldr	r1, [r1, #4]
 800f5b4:	9a06      	ldr	r2, [sp, #24]
 800f5b6:	9b07      	ldr	r3, [sp, #28]
 800f5b8:	f7f0 ff72 	bl	80004a0 <__aeabi_dcmpgt>
 800f5bc:	2800      	cmp	r0, #0
 800f5be:	d04b      	beq.n	800f658 <_dtoa_r+0x21c>
 800f5c0:	9b03      	ldr	r3, [sp, #12]
 800f5c2:	3b01      	subs	r3, #1
 800f5c4:	9303      	str	r3, [sp, #12]
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	9316      	str	r3, [sp, #88]	; 0x58
 800f5ca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f5cc:	1b9e      	subs	r6, r3, r6
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800f5d2:	0033      	movs	r3, r6
 800f5d4:	3b01      	subs	r3, #1
 800f5d6:	930c      	str	r3, [sp, #48]	; 0x30
 800f5d8:	d504      	bpl.n	800f5e4 <_dtoa_r+0x1a8>
 800f5da:	2301      	movs	r3, #1
 800f5dc:	1b9b      	subs	r3, r3, r6
 800f5de:	930b      	str	r3, [sp, #44]	; 0x2c
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	930c      	str	r3, [sp, #48]	; 0x30
 800f5e4:	9b03      	ldr	r3, [sp, #12]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	db38      	blt.n	800f65c <_dtoa_r+0x220>
 800f5ea:	9a03      	ldr	r2, [sp, #12]
 800f5ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5ee:	4694      	mov	ip, r2
 800f5f0:	4463      	add	r3, ip
 800f5f2:	930c      	str	r3, [sp, #48]	; 0x30
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	920f      	str	r2, [sp, #60]	; 0x3c
 800f5f8:	9308      	str	r3, [sp, #32]
 800f5fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f5fc:	2501      	movs	r5, #1
 800f5fe:	2b09      	cmp	r3, #9
 800f600:	d900      	bls.n	800f604 <_dtoa_r+0x1c8>
 800f602:	e091      	b.n	800f728 <_dtoa_r+0x2ec>
 800f604:	2b05      	cmp	r3, #5
 800f606:	dd02      	ble.n	800f60e <_dtoa_r+0x1d2>
 800f608:	2500      	movs	r5, #0
 800f60a:	3b04      	subs	r3, #4
 800f60c:	9322      	str	r3, [sp, #136]	; 0x88
 800f60e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f610:	1e98      	subs	r0, r3, #2
 800f612:	2803      	cmp	r0, #3
 800f614:	d900      	bls.n	800f618 <_dtoa_r+0x1dc>
 800f616:	e091      	b.n	800f73c <_dtoa_r+0x300>
 800f618:	f7f0 fd84 	bl	8000124 <__gnu_thumb1_case_uqi>
 800f61c:	76298482 	.word	0x76298482
 800f620:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f622:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f624:	189e      	adds	r6, r3, r2
 800f626:	4b64      	ldr	r3, [pc, #400]	; (800f7b8 <_dtoa_r+0x37c>)
 800f628:	18f2      	adds	r2, r6, r3
 800f62a:	2a20      	cmp	r2, #32
 800f62c:	dd0f      	ble.n	800f64e <_dtoa_r+0x212>
 800f62e:	4b63      	ldr	r3, [pc, #396]	; (800f7bc <_dtoa_r+0x380>)
 800f630:	9806      	ldr	r0, [sp, #24]
 800f632:	18f3      	adds	r3, r6, r3
 800f634:	40d8      	lsrs	r0, r3
 800f636:	2340      	movs	r3, #64	; 0x40
 800f638:	1a9b      	subs	r3, r3, r2
 800f63a:	409c      	lsls	r4, r3
 800f63c:	4320      	orrs	r0, r4
 800f63e:	f7f2 fd93 	bl	8002168 <__aeabi_ui2d>
 800f642:	2301      	movs	r3, #1
 800f644:	4c5e      	ldr	r4, [pc, #376]	; (800f7c0 <_dtoa_r+0x384>)
 800f646:	3e01      	subs	r6, #1
 800f648:	1909      	adds	r1, r1, r4
 800f64a:	9318      	str	r3, [sp, #96]	; 0x60
 800f64c:	e771      	b.n	800f532 <_dtoa_r+0xf6>
 800f64e:	2320      	movs	r3, #32
 800f650:	9806      	ldr	r0, [sp, #24]
 800f652:	1a9b      	subs	r3, r3, r2
 800f654:	4098      	lsls	r0, r3
 800f656:	e7f2      	b.n	800f63e <_dtoa_r+0x202>
 800f658:	9016      	str	r0, [sp, #88]	; 0x58
 800f65a:	e7b6      	b.n	800f5ca <_dtoa_r+0x18e>
 800f65c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f65e:	9a03      	ldr	r2, [sp, #12]
 800f660:	1a9b      	subs	r3, r3, r2
 800f662:	930b      	str	r3, [sp, #44]	; 0x2c
 800f664:	4253      	negs	r3, r2
 800f666:	9308      	str	r3, [sp, #32]
 800f668:	2300      	movs	r3, #0
 800f66a:	930f      	str	r3, [sp, #60]	; 0x3c
 800f66c:	e7c5      	b.n	800f5fa <_dtoa_r+0x1be>
 800f66e:	2301      	movs	r3, #1
 800f670:	930e      	str	r3, [sp, #56]	; 0x38
 800f672:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f674:	2b00      	cmp	r3, #0
 800f676:	dd65      	ble.n	800f744 <_dtoa_r+0x308>
 800f678:	001f      	movs	r7, r3
 800f67a:	930d      	str	r3, [sp, #52]	; 0x34
 800f67c:	9a04      	ldr	r2, [sp, #16]
 800f67e:	6a54      	ldr	r4, [r2, #36]	; 0x24
 800f680:	2200      	movs	r2, #0
 800f682:	6062      	str	r2, [r4, #4]
 800f684:	3204      	adds	r2, #4
 800f686:	0011      	movs	r1, r2
 800f688:	3114      	adds	r1, #20
 800f68a:	4299      	cmp	r1, r3
 800f68c:	d95f      	bls.n	800f74e <_dtoa_r+0x312>
 800f68e:	6861      	ldr	r1, [r4, #4]
 800f690:	9804      	ldr	r0, [sp, #16]
 800f692:	f000 fddc 	bl	801024e <_Balloc>
 800f696:	9b04      	ldr	r3, [sp, #16]
 800f698:	6020      	str	r0, [r4, #0]
 800f69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	930a      	str	r3, [sp, #40]	; 0x28
 800f6a0:	2f0e      	cmp	r7, #14
 800f6a2:	d900      	bls.n	800f6a6 <_dtoa_r+0x26a>
 800f6a4:	e105      	b.n	800f8b2 <_dtoa_r+0x476>
 800f6a6:	2d00      	cmp	r5, #0
 800f6a8:	d100      	bne.n	800f6ac <_dtoa_r+0x270>
 800f6aa:	e102      	b.n	800f8b2 <_dtoa_r+0x476>
 800f6ac:	9b06      	ldr	r3, [sp, #24]
 800f6ae:	9c07      	ldr	r4, [sp, #28]
 800f6b0:	9314      	str	r3, [sp, #80]	; 0x50
 800f6b2:	9415      	str	r4, [sp, #84]	; 0x54
 800f6b4:	9b03      	ldr	r3, [sp, #12]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	dc00      	bgt.n	800f6bc <_dtoa_r+0x280>
 800f6ba:	e085      	b.n	800f7c8 <_dtoa_r+0x38c>
 800f6bc:	001a      	movs	r2, r3
 800f6be:	210f      	movs	r1, #15
 800f6c0:	4b3c      	ldr	r3, [pc, #240]	; (800f7b4 <_dtoa_r+0x378>)
 800f6c2:	400a      	ands	r2, r1
 800f6c4:	00d2      	lsls	r2, r2, #3
 800f6c6:	189b      	adds	r3, r3, r2
 800f6c8:	685c      	ldr	r4, [r3, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	9310      	str	r3, [sp, #64]	; 0x40
 800f6ce:	9411      	str	r4, [sp, #68]	; 0x44
 800f6d0:	9b03      	ldr	r3, [sp, #12]
 800f6d2:	2402      	movs	r4, #2
 800f6d4:	111d      	asrs	r5, r3, #4
 800f6d6:	06eb      	lsls	r3, r5, #27
 800f6d8:	d50a      	bpl.n	800f6f0 <_dtoa_r+0x2b4>
 800f6da:	4b3a      	ldr	r3, [pc, #232]	; (800f7c4 <_dtoa_r+0x388>)
 800f6dc:	400d      	ands	r5, r1
 800f6de:	6a1a      	ldr	r2, [r3, #32]
 800f6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6e2:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f6e4:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f6e6:	f7f1 fadf 	bl	8000ca8 <__aeabi_ddiv>
 800f6ea:	9006      	str	r0, [sp, #24]
 800f6ec:	9107      	str	r1, [sp, #28]
 800f6ee:	3401      	adds	r4, #1
 800f6f0:	4e34      	ldr	r6, [pc, #208]	; (800f7c4 <_dtoa_r+0x388>)
 800f6f2:	2d00      	cmp	r5, #0
 800f6f4:	d130      	bne.n	800f758 <_dtoa_r+0x31c>
 800f6f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f6f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f6fa:	9806      	ldr	r0, [sp, #24]
 800f6fc:	9907      	ldr	r1, [sp, #28]
 800f6fe:	f7f1 fad3 	bl	8000ca8 <__aeabi_ddiv>
 800f702:	9006      	str	r0, [sp, #24]
 800f704:	9107      	str	r1, [sp, #28]
 800f706:	e07a      	b.n	800f7fe <_dtoa_r+0x3c2>
 800f708:	2301      	movs	r3, #1
 800f70a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800f70c:	930e      	str	r3, [sp, #56]	; 0x38
 800f70e:	4694      	mov	ip, r2
 800f710:	9b03      	ldr	r3, [sp, #12]
 800f712:	4463      	add	r3, ip
 800f714:	1c5f      	adds	r7, r3, #1
 800f716:	930d      	str	r3, [sp, #52]	; 0x34
 800f718:	1e3b      	subs	r3, r7, #0
 800f71a:	dcaf      	bgt.n	800f67c <_dtoa_r+0x240>
 800f71c:	2301      	movs	r3, #1
 800f71e:	e7ad      	b.n	800f67c <_dtoa_r+0x240>
 800f720:	2300      	movs	r3, #0
 800f722:	e7a5      	b.n	800f670 <_dtoa_r+0x234>
 800f724:	2300      	movs	r3, #0
 800f726:	e7f0      	b.n	800f70a <_dtoa_r+0x2ce>
 800f728:	2300      	movs	r3, #0
 800f72a:	950e      	str	r5, [sp, #56]	; 0x38
 800f72c:	9322      	str	r3, [sp, #136]	; 0x88
 800f72e:	3b01      	subs	r3, #1
 800f730:	2200      	movs	r2, #0
 800f732:	930d      	str	r3, [sp, #52]	; 0x34
 800f734:	001f      	movs	r7, r3
 800f736:	3313      	adds	r3, #19
 800f738:	9223      	str	r2, [sp, #140]	; 0x8c
 800f73a:	e79f      	b.n	800f67c <_dtoa_r+0x240>
 800f73c:	2301      	movs	r3, #1
 800f73e:	930e      	str	r3, [sp, #56]	; 0x38
 800f740:	3b02      	subs	r3, #2
 800f742:	e7f5      	b.n	800f730 <_dtoa_r+0x2f4>
 800f744:	2301      	movs	r3, #1
 800f746:	930d      	str	r3, [sp, #52]	; 0x34
 800f748:	001f      	movs	r7, r3
 800f74a:	001a      	movs	r2, r3
 800f74c:	e7f4      	b.n	800f738 <_dtoa_r+0x2fc>
 800f74e:	6861      	ldr	r1, [r4, #4]
 800f750:	0052      	lsls	r2, r2, #1
 800f752:	3101      	adds	r1, #1
 800f754:	6061      	str	r1, [r4, #4]
 800f756:	e796      	b.n	800f686 <_dtoa_r+0x24a>
 800f758:	2301      	movs	r3, #1
 800f75a:	421d      	tst	r5, r3
 800f75c:	d008      	beq.n	800f770 <_dtoa_r+0x334>
 800f75e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f760:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f762:	18e4      	adds	r4, r4, r3
 800f764:	6832      	ldr	r2, [r6, #0]
 800f766:	6873      	ldr	r3, [r6, #4]
 800f768:	f7f1 fed2 	bl	8001510 <__aeabi_dmul>
 800f76c:	9010      	str	r0, [sp, #64]	; 0x40
 800f76e:	9111      	str	r1, [sp, #68]	; 0x44
 800f770:	106d      	asrs	r5, r5, #1
 800f772:	3608      	adds	r6, #8
 800f774:	e7bd      	b.n	800f6f2 <_dtoa_r+0x2b6>
 800f776:	46c0      	nop			; (mov r8, r8)
 800f778:	7ff00000 	.word	0x7ff00000
 800f77c:	0000270f 	.word	0x0000270f
 800f780:	08013d53 	.word	0x08013d53
 800f784:	08013d56 	.word	0x08013d56
 800f788:	08013d28 	.word	0x08013d28
 800f78c:	08013d29 	.word	0x08013d29
 800f790:	3ff00000 	.word	0x3ff00000
 800f794:	fffffc01 	.word	0xfffffc01
 800f798:	3ff80000 	.word	0x3ff80000
 800f79c:	636f4361 	.word	0x636f4361
 800f7a0:	3fd287a7 	.word	0x3fd287a7
 800f7a4:	8b60c8b3 	.word	0x8b60c8b3
 800f7a8:	3fc68a28 	.word	0x3fc68a28
 800f7ac:	509f79fb 	.word	0x509f79fb
 800f7b0:	3fd34413 	.word	0x3fd34413
 800f7b4:	08013d80 	.word	0x08013d80
 800f7b8:	00000432 	.word	0x00000432
 800f7bc:	00000412 	.word	0x00000412
 800f7c0:	fe100000 	.word	0xfe100000
 800f7c4:	08013d58 	.word	0x08013d58
 800f7c8:	9b03      	ldr	r3, [sp, #12]
 800f7ca:	2402      	movs	r4, #2
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d016      	beq.n	800f7fe <_dtoa_r+0x3c2>
 800f7d0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f7d2:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f7d4:	425d      	negs	r5, r3
 800f7d6:	230f      	movs	r3, #15
 800f7d8:	4aca      	ldr	r2, [pc, #808]	; (800fb04 <_dtoa_r+0x6c8>)
 800f7da:	402b      	ands	r3, r5
 800f7dc:	00db      	lsls	r3, r3, #3
 800f7de:	18d3      	adds	r3, r2, r3
 800f7e0:	681a      	ldr	r2, [r3, #0]
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	f7f1 fe94 	bl	8001510 <__aeabi_dmul>
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	9006      	str	r0, [sp, #24]
 800f7ec:	9107      	str	r1, [sp, #28]
 800f7ee:	4ec6      	ldr	r6, [pc, #792]	; (800fb08 <_dtoa_r+0x6cc>)
 800f7f0:	112d      	asrs	r5, r5, #4
 800f7f2:	2d00      	cmp	r5, #0
 800f7f4:	d000      	beq.n	800f7f8 <_dtoa_r+0x3bc>
 800f7f6:	e08c      	b.n	800f912 <_dtoa_r+0x4d6>
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d000      	beq.n	800f7fe <_dtoa_r+0x3c2>
 800f7fc:	e781      	b.n	800f702 <_dtoa_r+0x2c6>
 800f7fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f800:	2b00      	cmp	r3, #0
 800f802:	d100      	bne.n	800f806 <_dtoa_r+0x3ca>
 800f804:	e091      	b.n	800f92a <_dtoa_r+0x4ee>
 800f806:	9a06      	ldr	r2, [sp, #24]
 800f808:	9b07      	ldr	r3, [sp, #28]
 800f80a:	9210      	str	r2, [sp, #64]	; 0x40
 800f80c:	9311      	str	r3, [sp, #68]	; 0x44
 800f80e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f810:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f812:	2200      	movs	r2, #0
 800f814:	4bbd      	ldr	r3, [pc, #756]	; (800fb0c <_dtoa_r+0x6d0>)
 800f816:	f7f0 fe2f 	bl	8000478 <__aeabi_dcmplt>
 800f81a:	2800      	cmp	r0, #0
 800f81c:	d100      	bne.n	800f820 <_dtoa_r+0x3e4>
 800f81e:	e084      	b.n	800f92a <_dtoa_r+0x4ee>
 800f820:	2f00      	cmp	r7, #0
 800f822:	d100      	bne.n	800f826 <_dtoa_r+0x3ea>
 800f824:	e081      	b.n	800f92a <_dtoa_r+0x4ee>
 800f826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f828:	2b00      	cmp	r3, #0
 800f82a:	dd3e      	ble.n	800f8aa <_dtoa_r+0x46e>
 800f82c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f82e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f830:	9b03      	ldr	r3, [sp, #12]
 800f832:	2200      	movs	r2, #0
 800f834:	1e5e      	subs	r6, r3, #1
 800f836:	4bb6      	ldr	r3, [pc, #728]	; (800fb10 <_dtoa_r+0x6d4>)
 800f838:	f7f1 fe6a 	bl	8001510 <__aeabi_dmul>
 800f83c:	9006      	str	r0, [sp, #24]
 800f83e:	9107      	str	r1, [sp, #28]
 800f840:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f842:	3401      	adds	r4, #1
 800f844:	0020      	movs	r0, r4
 800f846:	f7f2 fc4d 	bl	80020e4 <__aeabi_i2d>
 800f84a:	9a06      	ldr	r2, [sp, #24]
 800f84c:	9b07      	ldr	r3, [sp, #28]
 800f84e:	f7f1 fe5f 	bl	8001510 <__aeabi_dmul>
 800f852:	2200      	movs	r2, #0
 800f854:	4baf      	ldr	r3, [pc, #700]	; (800fb14 <_dtoa_r+0x6d8>)
 800f856:	f7f0 ff17 	bl	8000688 <__aeabi_dadd>
 800f85a:	9012      	str	r0, [sp, #72]	; 0x48
 800f85c:	9113      	str	r1, [sp, #76]	; 0x4c
 800f85e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f860:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800f862:	4aad      	ldr	r2, [pc, #692]	; (800fb18 <_dtoa_r+0x6dc>)
 800f864:	9310      	str	r3, [sp, #64]	; 0x40
 800f866:	9411      	str	r4, [sp, #68]	; 0x44
 800f868:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f86a:	189c      	adds	r4, r3, r2
 800f86c:	9411      	str	r4, [sp, #68]	; 0x44
 800f86e:	2d00      	cmp	r5, #0
 800f870:	d15e      	bne.n	800f930 <_dtoa_r+0x4f4>
 800f872:	9806      	ldr	r0, [sp, #24]
 800f874:	9907      	ldr	r1, [sp, #28]
 800f876:	2200      	movs	r2, #0
 800f878:	4ba8      	ldr	r3, [pc, #672]	; (800fb1c <_dtoa_r+0x6e0>)
 800f87a:	f7f2 f8c9 	bl	8001a10 <__aeabi_dsub>
 800f87e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f880:	0023      	movs	r3, r4
 800f882:	9006      	str	r0, [sp, #24]
 800f884:	9107      	str	r1, [sp, #28]
 800f886:	f7f0 fe0b 	bl	80004a0 <__aeabi_dcmpgt>
 800f88a:	2800      	cmp	r0, #0
 800f88c:	d000      	beq.n	800f890 <_dtoa_r+0x454>
 800f88e:	e301      	b.n	800fe94 <_dtoa_r+0xa58>
 800f890:	48a3      	ldr	r0, [pc, #652]	; (800fb20 <_dtoa_r+0x6e4>)
 800f892:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f894:	4684      	mov	ip, r0
 800f896:	4461      	add	r1, ip
 800f898:	000b      	movs	r3, r1
 800f89a:	9806      	ldr	r0, [sp, #24]
 800f89c:	9907      	ldr	r1, [sp, #28]
 800f89e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f8a0:	f7f0 fdea 	bl	8000478 <__aeabi_dcmplt>
 800f8a4:	2800      	cmp	r0, #0
 800f8a6:	d000      	beq.n	800f8aa <_dtoa_r+0x46e>
 800f8a8:	e2e8      	b.n	800fe7c <_dtoa_r+0xa40>
 800f8aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f8ac:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800f8ae:	9306      	str	r3, [sp, #24]
 800f8b0:	9407      	str	r4, [sp, #28]
 800f8b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	da00      	bge.n	800f8ba <_dtoa_r+0x47e>
 800f8b8:	e157      	b.n	800fb6a <_dtoa_r+0x72e>
 800f8ba:	9a03      	ldr	r2, [sp, #12]
 800f8bc:	2a0e      	cmp	r2, #14
 800f8be:	dd00      	ble.n	800f8c2 <_dtoa_r+0x486>
 800f8c0:	e153      	b.n	800fb6a <_dtoa_r+0x72e>
 800f8c2:	4b90      	ldr	r3, [pc, #576]	; (800fb04 <_dtoa_r+0x6c8>)
 800f8c4:	00d2      	lsls	r2, r2, #3
 800f8c6:	189b      	adds	r3, r3, r2
 800f8c8:	685c      	ldr	r4, [r3, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	9308      	str	r3, [sp, #32]
 800f8ce:	9409      	str	r4, [sp, #36]	; 0x24
 800f8d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	db00      	blt.n	800f8d8 <_dtoa_r+0x49c>
 800f8d6:	e0ce      	b.n	800fa76 <_dtoa_r+0x63a>
 800f8d8:	2f00      	cmp	r7, #0
 800f8da:	dd00      	ble.n	800f8de <_dtoa_r+0x4a2>
 800f8dc:	e0cb      	b.n	800fa76 <_dtoa_r+0x63a>
 800f8de:	d000      	beq.n	800f8e2 <_dtoa_r+0x4a6>
 800f8e0:	e2cf      	b.n	800fe82 <_dtoa_r+0xa46>
 800f8e2:	9808      	ldr	r0, [sp, #32]
 800f8e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	4b8c      	ldr	r3, [pc, #560]	; (800fb1c <_dtoa_r+0x6e0>)
 800f8ea:	f7f1 fe11 	bl	8001510 <__aeabi_dmul>
 800f8ee:	9a06      	ldr	r2, [sp, #24]
 800f8f0:	9b07      	ldr	r3, [sp, #28]
 800f8f2:	f7f0 fddf 	bl	80004b4 <__aeabi_dcmpge>
 800f8f6:	003e      	movs	r6, r7
 800f8f8:	9708      	str	r7, [sp, #32]
 800f8fa:	2800      	cmp	r0, #0
 800f8fc:	d000      	beq.n	800f900 <_dtoa_r+0x4c4>
 800f8fe:	e2a4      	b.n	800fe4a <_dtoa_r+0xa0e>
 800f900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f902:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f904:	1c5d      	adds	r5, r3, #1
 800f906:	2331      	movs	r3, #49	; 0x31
 800f908:	7013      	strb	r3, [r2, #0]
 800f90a:	9b03      	ldr	r3, [sp, #12]
 800f90c:	3301      	adds	r3, #1
 800f90e:	9303      	str	r3, [sp, #12]
 800f910:	e29f      	b.n	800fe52 <_dtoa_r+0xa16>
 800f912:	2201      	movs	r2, #1
 800f914:	4215      	tst	r5, r2
 800f916:	d005      	beq.n	800f924 <_dtoa_r+0x4e8>
 800f918:	18a4      	adds	r4, r4, r2
 800f91a:	6832      	ldr	r2, [r6, #0]
 800f91c:	6873      	ldr	r3, [r6, #4]
 800f91e:	f7f1 fdf7 	bl	8001510 <__aeabi_dmul>
 800f922:	2301      	movs	r3, #1
 800f924:	106d      	asrs	r5, r5, #1
 800f926:	3608      	adds	r6, #8
 800f928:	e763      	b.n	800f7f2 <_dtoa_r+0x3b6>
 800f92a:	9e03      	ldr	r6, [sp, #12]
 800f92c:	003d      	movs	r5, r7
 800f92e:	e789      	b.n	800f844 <_dtoa_r+0x408>
 800f930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f932:	1e69      	subs	r1, r5, #1
 800f934:	1952      	adds	r2, r2, r5
 800f936:	9217      	str	r2, [sp, #92]	; 0x5c
 800f938:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f93a:	4b72      	ldr	r3, [pc, #456]	; (800fb04 <_dtoa_r+0x6c8>)
 800f93c:	00c9      	lsls	r1, r1, #3
 800f93e:	2a00      	cmp	r2, #0
 800f940:	d04a      	beq.n	800f9d8 <_dtoa_r+0x59c>
 800f942:	185b      	adds	r3, r3, r1
 800f944:	681a      	ldr	r2, [r3, #0]
 800f946:	685b      	ldr	r3, [r3, #4]
 800f948:	2000      	movs	r0, #0
 800f94a:	4976      	ldr	r1, [pc, #472]	; (800fb24 <_dtoa_r+0x6e8>)
 800f94c:	f7f1 f9ac 	bl	8000ca8 <__aeabi_ddiv>
 800f950:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f952:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f954:	f7f2 f85c 	bl	8001a10 <__aeabi_dsub>
 800f958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f95a:	9010      	str	r0, [sp, #64]	; 0x40
 800f95c:	9111      	str	r1, [sp, #68]	; 0x44
 800f95e:	9312      	str	r3, [sp, #72]	; 0x48
 800f960:	9806      	ldr	r0, [sp, #24]
 800f962:	9907      	ldr	r1, [sp, #28]
 800f964:	f7f2 fb8a 	bl	800207c <__aeabi_d2iz>
 800f968:	0004      	movs	r4, r0
 800f96a:	f7f2 fbbb 	bl	80020e4 <__aeabi_i2d>
 800f96e:	0002      	movs	r2, r0
 800f970:	000b      	movs	r3, r1
 800f972:	9806      	ldr	r0, [sp, #24]
 800f974:	9907      	ldr	r1, [sp, #28]
 800f976:	f7f2 f84b 	bl	8001a10 <__aeabi_dsub>
 800f97a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f97c:	3430      	adds	r4, #48	; 0x30
 800f97e:	1c5d      	adds	r5, r3, #1
 800f980:	701c      	strb	r4, [r3, #0]
 800f982:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f984:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f986:	9006      	str	r0, [sp, #24]
 800f988:	9107      	str	r1, [sp, #28]
 800f98a:	f7f0 fd75 	bl	8000478 <__aeabi_dcmplt>
 800f98e:	2800      	cmp	r0, #0
 800f990:	d165      	bne.n	800fa5e <_dtoa_r+0x622>
 800f992:	9a06      	ldr	r2, [sp, #24]
 800f994:	9b07      	ldr	r3, [sp, #28]
 800f996:	2000      	movs	r0, #0
 800f998:	495c      	ldr	r1, [pc, #368]	; (800fb0c <_dtoa_r+0x6d0>)
 800f99a:	f7f2 f839 	bl	8001a10 <__aeabi_dsub>
 800f99e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f9a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f9a2:	f7f0 fd69 	bl	8000478 <__aeabi_dcmplt>
 800f9a6:	2800      	cmp	r0, #0
 800f9a8:	d000      	beq.n	800f9ac <_dtoa_r+0x570>
 800f9aa:	e0be      	b.n	800fb2a <_dtoa_r+0x6ee>
 800f9ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f9ae:	429d      	cmp	r5, r3
 800f9b0:	d100      	bne.n	800f9b4 <_dtoa_r+0x578>
 800f9b2:	e77a      	b.n	800f8aa <_dtoa_r+0x46e>
 800f9b4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f9b6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	4b55      	ldr	r3, [pc, #340]	; (800fb10 <_dtoa_r+0x6d4>)
 800f9bc:	f7f1 fda8 	bl	8001510 <__aeabi_dmul>
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	9010      	str	r0, [sp, #64]	; 0x40
 800f9c4:	9111      	str	r1, [sp, #68]	; 0x44
 800f9c6:	9806      	ldr	r0, [sp, #24]
 800f9c8:	9907      	ldr	r1, [sp, #28]
 800f9ca:	4b51      	ldr	r3, [pc, #324]	; (800fb10 <_dtoa_r+0x6d4>)
 800f9cc:	f7f1 fda0 	bl	8001510 <__aeabi_dmul>
 800f9d0:	9512      	str	r5, [sp, #72]	; 0x48
 800f9d2:	9006      	str	r0, [sp, #24]
 800f9d4:	9107      	str	r1, [sp, #28]
 800f9d6:	e7c3      	b.n	800f960 <_dtoa_r+0x524>
 800f9d8:	1859      	adds	r1, r3, r1
 800f9da:	6808      	ldr	r0, [r1, #0]
 800f9dc:	6849      	ldr	r1, [r1, #4]
 800f9de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f9e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f9e2:	f7f1 fd95 	bl	8001510 <__aeabi_dmul>
 800f9e6:	9010      	str	r0, [sp, #64]	; 0x40
 800f9e8:	9111      	str	r1, [sp, #68]	; 0x44
 800f9ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f9ec:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800f9ee:	9806      	ldr	r0, [sp, #24]
 800f9f0:	9907      	ldr	r1, [sp, #28]
 800f9f2:	f7f2 fb43 	bl	800207c <__aeabi_d2iz>
 800f9f6:	9012      	str	r0, [sp, #72]	; 0x48
 800f9f8:	f7f2 fb74 	bl	80020e4 <__aeabi_i2d>
 800f9fc:	0002      	movs	r2, r0
 800f9fe:	000b      	movs	r3, r1
 800fa00:	9806      	ldr	r0, [sp, #24]
 800fa02:	9907      	ldr	r1, [sp, #28]
 800fa04:	f7f2 f804 	bl	8001a10 <__aeabi_dsub>
 800fa08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fa0a:	9006      	str	r0, [sp, #24]
 800fa0c:	9107      	str	r1, [sp, #28]
 800fa0e:	3330      	adds	r3, #48	; 0x30
 800fa10:	7023      	strb	r3, [r4, #0]
 800fa12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fa14:	3401      	adds	r4, #1
 800fa16:	2200      	movs	r2, #0
 800fa18:	42a3      	cmp	r3, r4
 800fa1a:	d124      	bne.n	800fa66 <_dtoa_r+0x62a>
 800fa1c:	4b41      	ldr	r3, [pc, #260]	; (800fb24 <_dtoa_r+0x6e8>)
 800fa1e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fa20:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fa22:	f7f0 fe31 	bl	8000688 <__aeabi_dadd>
 800fa26:	0002      	movs	r2, r0
 800fa28:	000b      	movs	r3, r1
 800fa2a:	9806      	ldr	r0, [sp, #24]
 800fa2c:	9907      	ldr	r1, [sp, #28]
 800fa2e:	f7f0 fd37 	bl	80004a0 <__aeabi_dcmpgt>
 800fa32:	2800      	cmp	r0, #0
 800fa34:	d000      	beq.n	800fa38 <_dtoa_r+0x5fc>
 800fa36:	e078      	b.n	800fb2a <_dtoa_r+0x6ee>
 800fa38:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fa3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fa3c:	2000      	movs	r0, #0
 800fa3e:	4939      	ldr	r1, [pc, #228]	; (800fb24 <_dtoa_r+0x6e8>)
 800fa40:	f7f1 ffe6 	bl	8001a10 <__aeabi_dsub>
 800fa44:	0002      	movs	r2, r0
 800fa46:	000b      	movs	r3, r1
 800fa48:	9806      	ldr	r0, [sp, #24]
 800fa4a:	9907      	ldr	r1, [sp, #28]
 800fa4c:	f7f0 fd14 	bl	8000478 <__aeabi_dcmplt>
 800fa50:	2800      	cmp	r0, #0
 800fa52:	d100      	bne.n	800fa56 <_dtoa_r+0x61a>
 800fa54:	e729      	b.n	800f8aa <_dtoa_r+0x46e>
 800fa56:	1e6b      	subs	r3, r5, #1
 800fa58:	781a      	ldrb	r2, [r3, #0]
 800fa5a:	2a30      	cmp	r2, #48	; 0x30
 800fa5c:	d001      	beq.n	800fa62 <_dtoa_r+0x626>
 800fa5e:	9603      	str	r6, [sp, #12]
 800fa60:	e03f      	b.n	800fae2 <_dtoa_r+0x6a6>
 800fa62:	001d      	movs	r5, r3
 800fa64:	e7f7      	b.n	800fa56 <_dtoa_r+0x61a>
 800fa66:	9806      	ldr	r0, [sp, #24]
 800fa68:	9907      	ldr	r1, [sp, #28]
 800fa6a:	4b29      	ldr	r3, [pc, #164]	; (800fb10 <_dtoa_r+0x6d4>)
 800fa6c:	f7f1 fd50 	bl	8001510 <__aeabi_dmul>
 800fa70:	9006      	str	r0, [sp, #24]
 800fa72:	9107      	str	r1, [sp, #28]
 800fa74:	e7bb      	b.n	800f9ee <_dtoa_r+0x5b2>
 800fa76:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fa78:	9a08      	ldr	r2, [sp, #32]
 800fa7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa7c:	9806      	ldr	r0, [sp, #24]
 800fa7e:	9907      	ldr	r1, [sp, #28]
 800fa80:	f7f1 f912 	bl	8000ca8 <__aeabi_ddiv>
 800fa84:	f7f2 fafa 	bl	800207c <__aeabi_d2iz>
 800fa88:	0004      	movs	r4, r0
 800fa8a:	f7f2 fb2b 	bl	80020e4 <__aeabi_i2d>
 800fa8e:	9a08      	ldr	r2, [sp, #32]
 800fa90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa92:	f7f1 fd3d 	bl	8001510 <__aeabi_dmul>
 800fa96:	000b      	movs	r3, r1
 800fa98:	0002      	movs	r2, r0
 800fa9a:	9806      	ldr	r0, [sp, #24]
 800fa9c:	9907      	ldr	r1, [sp, #28]
 800fa9e:	f7f1 ffb7 	bl	8001a10 <__aeabi_dsub>
 800faa2:	0023      	movs	r3, r4
 800faa4:	3330      	adds	r3, #48	; 0x30
 800faa6:	7033      	strb	r3, [r6, #0]
 800faa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800faaa:	1c75      	adds	r5, r6, #1
 800faac:	1aeb      	subs	r3, r5, r3
 800faae:	429f      	cmp	r7, r3
 800fab0:	d14c      	bne.n	800fb4c <_dtoa_r+0x710>
 800fab2:	0002      	movs	r2, r0
 800fab4:	000b      	movs	r3, r1
 800fab6:	f7f0 fde7 	bl	8000688 <__aeabi_dadd>
 800faba:	0006      	movs	r6, r0
 800fabc:	000f      	movs	r7, r1
 800fabe:	0002      	movs	r2, r0
 800fac0:	000b      	movs	r3, r1
 800fac2:	9808      	ldr	r0, [sp, #32]
 800fac4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fac6:	f7f0 fcd7 	bl	8000478 <__aeabi_dcmplt>
 800faca:	2800      	cmp	r0, #0
 800facc:	d12c      	bne.n	800fb28 <_dtoa_r+0x6ec>
 800face:	9808      	ldr	r0, [sp, #32]
 800fad0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fad2:	0032      	movs	r2, r6
 800fad4:	003b      	movs	r3, r7
 800fad6:	f7f0 fcc9 	bl	800046c <__aeabi_dcmpeq>
 800fada:	2800      	cmp	r0, #0
 800fadc:	d001      	beq.n	800fae2 <_dtoa_r+0x6a6>
 800fade:	07e3      	lsls	r3, r4, #31
 800fae0:	d422      	bmi.n	800fb28 <_dtoa_r+0x6ec>
 800fae2:	9905      	ldr	r1, [sp, #20]
 800fae4:	9804      	ldr	r0, [sp, #16]
 800fae6:	f000 fbea 	bl	80102be <_Bfree>
 800faea:	2300      	movs	r3, #0
 800faec:	702b      	strb	r3, [r5, #0]
 800faee:	9b03      	ldr	r3, [sp, #12]
 800faf0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800faf2:	3301      	adds	r3, #1
 800faf4:	6013      	str	r3, [r2, #0]
 800faf6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d100      	bne.n	800fafe <_dtoa_r+0x6c2>
 800fafc:	e275      	b.n	800ffea <_dtoa_r+0xbae>
 800fafe:	601d      	str	r5, [r3, #0]
 800fb00:	e273      	b.n	800ffea <_dtoa_r+0xbae>
 800fb02:	46c0      	nop			; (mov r8, r8)
 800fb04:	08013d80 	.word	0x08013d80
 800fb08:	08013d58 	.word	0x08013d58
 800fb0c:	3ff00000 	.word	0x3ff00000
 800fb10:	40240000 	.word	0x40240000
 800fb14:	401c0000 	.word	0x401c0000
 800fb18:	fcc00000 	.word	0xfcc00000
 800fb1c:	40140000 	.word	0x40140000
 800fb20:	7cc00000 	.word	0x7cc00000
 800fb24:	3fe00000 	.word	0x3fe00000
 800fb28:	9e03      	ldr	r6, [sp, #12]
 800fb2a:	1e6b      	subs	r3, r5, #1
 800fb2c:	781a      	ldrb	r2, [r3, #0]
 800fb2e:	2a39      	cmp	r2, #57	; 0x39
 800fb30:	d106      	bne.n	800fb40 <_dtoa_r+0x704>
 800fb32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d107      	bne.n	800fb48 <_dtoa_r+0x70c>
 800fb38:	2330      	movs	r3, #48	; 0x30
 800fb3a:	7013      	strb	r3, [r2, #0]
 800fb3c:	0013      	movs	r3, r2
 800fb3e:	3601      	adds	r6, #1
 800fb40:	781a      	ldrb	r2, [r3, #0]
 800fb42:	3201      	adds	r2, #1
 800fb44:	701a      	strb	r2, [r3, #0]
 800fb46:	e78a      	b.n	800fa5e <_dtoa_r+0x622>
 800fb48:	001d      	movs	r5, r3
 800fb4a:	e7ee      	b.n	800fb2a <_dtoa_r+0x6ee>
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	4bcf      	ldr	r3, [pc, #828]	; (800fe8c <_dtoa_r+0xa50>)
 800fb50:	f7f1 fcde 	bl	8001510 <__aeabi_dmul>
 800fb54:	2200      	movs	r2, #0
 800fb56:	2300      	movs	r3, #0
 800fb58:	9006      	str	r0, [sp, #24]
 800fb5a:	9107      	str	r1, [sp, #28]
 800fb5c:	002e      	movs	r6, r5
 800fb5e:	f7f0 fc85 	bl	800046c <__aeabi_dcmpeq>
 800fb62:	2800      	cmp	r0, #0
 800fb64:	d100      	bne.n	800fb68 <_dtoa_r+0x72c>
 800fb66:	e787      	b.n	800fa78 <_dtoa_r+0x63c>
 800fb68:	e7bb      	b.n	800fae2 <_dtoa_r+0x6a6>
 800fb6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fb6c:	2a00      	cmp	r2, #0
 800fb6e:	d100      	bne.n	800fb72 <_dtoa_r+0x736>
 800fb70:	e087      	b.n	800fc82 <_dtoa_r+0x846>
 800fb72:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800fb74:	2a01      	cmp	r2, #1
 800fb76:	dc6e      	bgt.n	800fc56 <_dtoa_r+0x81a>
 800fb78:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fb7a:	2a00      	cmp	r2, #0
 800fb7c:	d067      	beq.n	800fc4e <_dtoa_r+0x812>
 800fb7e:	4ac4      	ldr	r2, [pc, #784]	; (800fe90 <_dtoa_r+0xa54>)
 800fb80:	189b      	adds	r3, r3, r2
 800fb82:	9d08      	ldr	r5, [sp, #32]
 800fb84:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800fb86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fb88:	2101      	movs	r1, #1
 800fb8a:	18d2      	adds	r2, r2, r3
 800fb8c:	920b      	str	r2, [sp, #44]	; 0x2c
 800fb8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fb90:	9804      	ldr	r0, [sp, #16]
 800fb92:	18d3      	adds	r3, r2, r3
 800fb94:	930c      	str	r3, [sp, #48]	; 0x30
 800fb96:	f000 fc30 	bl	80103fa <__i2b>
 800fb9a:	0006      	movs	r6, r0
 800fb9c:	2c00      	cmp	r4, #0
 800fb9e:	dd0e      	ble.n	800fbbe <_dtoa_r+0x782>
 800fba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	dd0b      	ble.n	800fbbe <_dtoa_r+0x782>
 800fba6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fba8:	0023      	movs	r3, r4
 800fbaa:	4294      	cmp	r4, r2
 800fbac:	dd00      	ble.n	800fbb0 <_dtoa_r+0x774>
 800fbae:	0013      	movs	r3, r2
 800fbb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fbb2:	1ae4      	subs	r4, r4, r3
 800fbb4:	1ad2      	subs	r2, r2, r3
 800fbb6:	920b      	str	r2, [sp, #44]	; 0x2c
 800fbb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fbba:	1ad3      	subs	r3, r2, r3
 800fbbc:	930c      	str	r3, [sp, #48]	; 0x30
 800fbbe:	9b08      	ldr	r3, [sp, #32]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d01e      	beq.n	800fc02 <_dtoa_r+0x7c6>
 800fbc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d05f      	beq.n	800fc8a <_dtoa_r+0x84e>
 800fbca:	2d00      	cmp	r5, #0
 800fbcc:	dd11      	ble.n	800fbf2 <_dtoa_r+0x7b6>
 800fbce:	0031      	movs	r1, r6
 800fbd0:	002a      	movs	r2, r5
 800fbd2:	9804      	ldr	r0, [sp, #16]
 800fbd4:	f000 fcaa 	bl	801052c <__pow5mult>
 800fbd8:	9a05      	ldr	r2, [sp, #20]
 800fbda:	0001      	movs	r1, r0
 800fbdc:	0006      	movs	r6, r0
 800fbde:	9804      	ldr	r0, [sp, #16]
 800fbe0:	f000 fc14 	bl	801040c <__multiply>
 800fbe4:	9905      	ldr	r1, [sp, #20]
 800fbe6:	9010      	str	r0, [sp, #64]	; 0x40
 800fbe8:	9804      	ldr	r0, [sp, #16]
 800fbea:	f000 fb68 	bl	80102be <_Bfree>
 800fbee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fbf0:	9305      	str	r3, [sp, #20]
 800fbf2:	9b08      	ldr	r3, [sp, #32]
 800fbf4:	1b5a      	subs	r2, r3, r5
 800fbf6:	d004      	beq.n	800fc02 <_dtoa_r+0x7c6>
 800fbf8:	9905      	ldr	r1, [sp, #20]
 800fbfa:	9804      	ldr	r0, [sp, #16]
 800fbfc:	f000 fc96 	bl	801052c <__pow5mult>
 800fc00:	9005      	str	r0, [sp, #20]
 800fc02:	2101      	movs	r1, #1
 800fc04:	9804      	ldr	r0, [sp, #16]
 800fc06:	f000 fbf8 	bl	80103fa <__i2b>
 800fc0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fc0c:	9008      	str	r0, [sp, #32]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	dd3d      	ble.n	800fc8e <_dtoa_r+0x852>
 800fc12:	001a      	movs	r2, r3
 800fc14:	0001      	movs	r1, r0
 800fc16:	9804      	ldr	r0, [sp, #16]
 800fc18:	f000 fc88 	bl	801052c <__pow5mult>
 800fc1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fc1e:	9008      	str	r0, [sp, #32]
 800fc20:	2500      	movs	r5, #0
 800fc22:	2b01      	cmp	r3, #1
 800fc24:	dc3b      	bgt.n	800fc9e <_dtoa_r+0x862>
 800fc26:	2500      	movs	r5, #0
 800fc28:	9b06      	ldr	r3, [sp, #24]
 800fc2a:	42ab      	cmp	r3, r5
 800fc2c:	d133      	bne.n	800fc96 <_dtoa_r+0x85a>
 800fc2e:	9b07      	ldr	r3, [sp, #28]
 800fc30:	031b      	lsls	r3, r3, #12
 800fc32:	42ab      	cmp	r3, r5
 800fc34:	d12f      	bne.n	800fc96 <_dtoa_r+0x85a>
 800fc36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fc38:	9a07      	ldr	r2, [sp, #28]
 800fc3a:	4213      	tst	r3, r2
 800fc3c:	d02b      	beq.n	800fc96 <_dtoa_r+0x85a>
 800fc3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc40:	3501      	adds	r5, #1
 800fc42:	3301      	adds	r3, #1
 800fc44:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc48:	3301      	adds	r3, #1
 800fc4a:	930c      	str	r3, [sp, #48]	; 0x30
 800fc4c:	e023      	b.n	800fc96 <_dtoa_r+0x85a>
 800fc4e:	2336      	movs	r3, #54	; 0x36
 800fc50:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fc52:	1a9b      	subs	r3, r3, r2
 800fc54:	e795      	b.n	800fb82 <_dtoa_r+0x746>
 800fc56:	9b08      	ldr	r3, [sp, #32]
 800fc58:	1e7d      	subs	r5, r7, #1
 800fc5a:	42ab      	cmp	r3, r5
 800fc5c:	db06      	blt.n	800fc6c <_dtoa_r+0x830>
 800fc5e:	1b5d      	subs	r5, r3, r5
 800fc60:	2f00      	cmp	r7, #0
 800fc62:	da0b      	bge.n	800fc7c <_dtoa_r+0x840>
 800fc64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc66:	1bdc      	subs	r4, r3, r7
 800fc68:	2300      	movs	r3, #0
 800fc6a:	e78c      	b.n	800fb86 <_dtoa_r+0x74a>
 800fc6c:	9b08      	ldr	r3, [sp, #32]
 800fc6e:	9508      	str	r5, [sp, #32]
 800fc70:	1aea      	subs	r2, r5, r3
 800fc72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fc74:	2500      	movs	r5, #0
 800fc76:	189b      	adds	r3, r3, r2
 800fc78:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc7a:	e7f1      	b.n	800fc60 <_dtoa_r+0x824>
 800fc7c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800fc7e:	003b      	movs	r3, r7
 800fc80:	e781      	b.n	800fb86 <_dtoa_r+0x74a>
 800fc82:	9d08      	ldr	r5, [sp, #32]
 800fc84:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800fc86:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800fc88:	e788      	b.n	800fb9c <_dtoa_r+0x760>
 800fc8a:	9a08      	ldr	r2, [sp, #32]
 800fc8c:	e7b4      	b.n	800fbf8 <_dtoa_r+0x7bc>
 800fc8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fc90:	2500      	movs	r5, #0
 800fc92:	2b01      	cmp	r3, #1
 800fc94:	ddc7      	ble.n	800fc26 <_dtoa_r+0x7ea>
 800fc96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fc98:	2001      	movs	r0, #1
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d00b      	beq.n	800fcb6 <_dtoa_r+0x87a>
 800fc9e:	9b08      	ldr	r3, [sp, #32]
 800fca0:	9a08      	ldr	r2, [sp, #32]
 800fca2:	691b      	ldr	r3, [r3, #16]
 800fca4:	930f      	str	r3, [sp, #60]	; 0x3c
 800fca6:	3303      	adds	r3, #3
 800fca8:	009b      	lsls	r3, r3, #2
 800fcaa:	18d3      	adds	r3, r2, r3
 800fcac:	6858      	ldr	r0, [r3, #4]
 800fcae:	f000 fb5b 	bl	8010368 <__hi0bits>
 800fcb2:	2320      	movs	r3, #32
 800fcb4:	1a18      	subs	r0, r3, r0
 800fcb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fcb8:	18c0      	adds	r0, r0, r3
 800fcba:	231f      	movs	r3, #31
 800fcbc:	4018      	ands	r0, r3
 800fcbe:	d100      	bne.n	800fcc2 <_dtoa_r+0x886>
 800fcc0:	e0ab      	b.n	800fe1a <_dtoa_r+0x9de>
 800fcc2:	3301      	adds	r3, #1
 800fcc4:	1a1b      	subs	r3, r3, r0
 800fcc6:	2b04      	cmp	r3, #4
 800fcc8:	dc00      	bgt.n	800fccc <_dtoa_r+0x890>
 800fcca:	e09b      	b.n	800fe04 <_dtoa_r+0x9c8>
 800fccc:	231c      	movs	r3, #28
 800fcce:	1a18      	subs	r0, r3, r0
 800fcd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fcd2:	1824      	adds	r4, r4, r0
 800fcd4:	181b      	adds	r3, r3, r0
 800fcd6:	930b      	str	r3, [sp, #44]	; 0x2c
 800fcd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fcda:	181b      	adds	r3, r3, r0
 800fcdc:	930c      	str	r3, [sp, #48]	; 0x30
 800fcde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	dd05      	ble.n	800fcf0 <_dtoa_r+0x8b4>
 800fce4:	001a      	movs	r2, r3
 800fce6:	9905      	ldr	r1, [sp, #20]
 800fce8:	9804      	ldr	r0, [sp, #16]
 800fcea:	f000 fc71 	bl	80105d0 <__lshift>
 800fcee:	9005      	str	r0, [sp, #20]
 800fcf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	dd05      	ble.n	800fd02 <_dtoa_r+0x8c6>
 800fcf6:	001a      	movs	r2, r3
 800fcf8:	9908      	ldr	r1, [sp, #32]
 800fcfa:	9804      	ldr	r0, [sp, #16]
 800fcfc:	f000 fc68 	bl	80105d0 <__lshift>
 800fd00:	9008      	str	r0, [sp, #32]
 800fd02:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d100      	bne.n	800fd0a <_dtoa_r+0x8ce>
 800fd08:	e089      	b.n	800fe1e <_dtoa_r+0x9e2>
 800fd0a:	9908      	ldr	r1, [sp, #32]
 800fd0c:	9805      	ldr	r0, [sp, #20]
 800fd0e:	f000 fcb0 	bl	8010672 <__mcmp>
 800fd12:	2800      	cmp	r0, #0
 800fd14:	db00      	blt.n	800fd18 <_dtoa_r+0x8dc>
 800fd16:	e082      	b.n	800fe1e <_dtoa_r+0x9e2>
 800fd18:	9b03      	ldr	r3, [sp, #12]
 800fd1a:	220a      	movs	r2, #10
 800fd1c:	3b01      	subs	r3, #1
 800fd1e:	9303      	str	r3, [sp, #12]
 800fd20:	9905      	ldr	r1, [sp, #20]
 800fd22:	2300      	movs	r3, #0
 800fd24:	9804      	ldr	r0, [sp, #16]
 800fd26:	f000 fae3 	bl	80102f0 <__multadd>
 800fd2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fd2c:	9005      	str	r0, [sp, #20]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d100      	bne.n	800fd34 <_dtoa_r+0x8f8>
 800fd32:	e15d      	b.n	800fff0 <_dtoa_r+0xbb4>
 800fd34:	2300      	movs	r3, #0
 800fd36:	0031      	movs	r1, r6
 800fd38:	220a      	movs	r2, #10
 800fd3a:	9804      	ldr	r0, [sp, #16]
 800fd3c:	f000 fad8 	bl	80102f0 <__multadd>
 800fd40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd42:	0006      	movs	r6, r0
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	dc02      	bgt.n	800fd4e <_dtoa_r+0x912>
 800fd48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fd4a:	2b02      	cmp	r3, #2
 800fd4c:	dc6d      	bgt.n	800fe2a <_dtoa_r+0x9ee>
 800fd4e:	2c00      	cmp	r4, #0
 800fd50:	dd05      	ble.n	800fd5e <_dtoa_r+0x922>
 800fd52:	0031      	movs	r1, r6
 800fd54:	0022      	movs	r2, r4
 800fd56:	9804      	ldr	r0, [sp, #16]
 800fd58:	f000 fc3a 	bl	80105d0 <__lshift>
 800fd5c:	0006      	movs	r6, r0
 800fd5e:	0030      	movs	r0, r6
 800fd60:	2d00      	cmp	r5, #0
 800fd62:	d011      	beq.n	800fd88 <_dtoa_r+0x94c>
 800fd64:	6871      	ldr	r1, [r6, #4]
 800fd66:	9804      	ldr	r0, [sp, #16]
 800fd68:	f000 fa71 	bl	801024e <_Balloc>
 800fd6c:	0031      	movs	r1, r6
 800fd6e:	0004      	movs	r4, r0
 800fd70:	6933      	ldr	r3, [r6, #16]
 800fd72:	310c      	adds	r1, #12
 800fd74:	1c9a      	adds	r2, r3, #2
 800fd76:	0092      	lsls	r2, r2, #2
 800fd78:	300c      	adds	r0, #12
 800fd7a:	f7fe fa07 	bl	800e18c <memcpy>
 800fd7e:	2201      	movs	r2, #1
 800fd80:	0021      	movs	r1, r4
 800fd82:	9804      	ldr	r0, [sp, #16]
 800fd84:	f000 fc24 	bl	80105d0 <__lshift>
 800fd88:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800fd8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd8c:	3f01      	subs	r7, #1
 800fd8e:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd90:	19db      	adds	r3, r3, r7
 800fd92:	0037      	movs	r7, r6
 800fd94:	0006      	movs	r6, r0
 800fd96:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd98:	9908      	ldr	r1, [sp, #32]
 800fd9a:	9805      	ldr	r0, [sp, #20]
 800fd9c:	f7ff faca 	bl	800f334 <quorem>
 800fda0:	0039      	movs	r1, r7
 800fda2:	900d      	str	r0, [sp, #52]	; 0x34
 800fda4:	0004      	movs	r4, r0
 800fda6:	9805      	ldr	r0, [sp, #20]
 800fda8:	f000 fc63 	bl	8010672 <__mcmp>
 800fdac:	0032      	movs	r2, r6
 800fdae:	900e      	str	r0, [sp, #56]	; 0x38
 800fdb0:	9908      	ldr	r1, [sp, #32]
 800fdb2:	9804      	ldr	r0, [sp, #16]
 800fdb4:	f000 fc76 	bl	80106a4 <__mdiff>
 800fdb8:	2301      	movs	r3, #1
 800fdba:	930c      	str	r3, [sp, #48]	; 0x30
 800fdbc:	68c3      	ldr	r3, [r0, #12]
 800fdbe:	3430      	adds	r4, #48	; 0x30
 800fdc0:	0005      	movs	r5, r0
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d104      	bne.n	800fdd0 <_dtoa_r+0x994>
 800fdc6:	0001      	movs	r1, r0
 800fdc8:	9805      	ldr	r0, [sp, #20]
 800fdca:	f000 fc52 	bl	8010672 <__mcmp>
 800fdce:	900c      	str	r0, [sp, #48]	; 0x30
 800fdd0:	0029      	movs	r1, r5
 800fdd2:	9804      	ldr	r0, [sp, #16]
 800fdd4:	f000 fa73 	bl	80102be <_Bfree>
 800fdd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fdda:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800fddc:	4313      	orrs	r3, r2
 800fdde:	d000      	beq.n	800fde2 <_dtoa_r+0x9a6>
 800fde0:	e089      	b.n	800fef6 <_dtoa_r+0xaba>
 800fde2:	9a06      	ldr	r2, [sp, #24]
 800fde4:	3301      	adds	r3, #1
 800fde6:	4213      	tst	r3, r2
 800fde8:	d000      	beq.n	800fdec <_dtoa_r+0x9b0>
 800fdea:	e084      	b.n	800fef6 <_dtoa_r+0xaba>
 800fdec:	2c39      	cmp	r4, #57	; 0x39
 800fdee:	d100      	bne.n	800fdf2 <_dtoa_r+0x9b6>
 800fdf0:	e0a3      	b.n	800ff3a <_dtoa_r+0xafe>
 800fdf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	dd01      	ble.n	800fdfc <_dtoa_r+0x9c0>
 800fdf8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800fdfa:	3431      	adds	r4, #49	; 0x31
 800fdfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdfe:	1c5d      	adds	r5, r3, #1
 800fe00:	701c      	strb	r4, [r3, #0]
 800fe02:	e027      	b.n	800fe54 <_dtoa_r+0xa18>
 800fe04:	2b04      	cmp	r3, #4
 800fe06:	d100      	bne.n	800fe0a <_dtoa_r+0x9ce>
 800fe08:	e769      	b.n	800fcde <_dtoa_r+0x8a2>
 800fe0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fe0c:	331c      	adds	r3, #28
 800fe0e:	18d2      	adds	r2, r2, r3
 800fe10:	920b      	str	r2, [sp, #44]	; 0x2c
 800fe12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fe14:	18e4      	adds	r4, r4, r3
 800fe16:	18d3      	adds	r3, r2, r3
 800fe18:	e760      	b.n	800fcdc <_dtoa_r+0x8a0>
 800fe1a:	0003      	movs	r3, r0
 800fe1c:	e7f5      	b.n	800fe0a <_dtoa_r+0x9ce>
 800fe1e:	2f00      	cmp	r7, #0
 800fe20:	dc3c      	bgt.n	800fe9c <_dtoa_r+0xa60>
 800fe22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fe24:	2b02      	cmp	r3, #2
 800fe26:	dd39      	ble.n	800fe9c <_dtoa_r+0xa60>
 800fe28:	970d      	str	r7, [sp, #52]	; 0x34
 800fe2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d10c      	bne.n	800fe4a <_dtoa_r+0xa0e>
 800fe30:	9908      	ldr	r1, [sp, #32]
 800fe32:	2205      	movs	r2, #5
 800fe34:	9804      	ldr	r0, [sp, #16]
 800fe36:	f000 fa5b 	bl	80102f0 <__multadd>
 800fe3a:	9008      	str	r0, [sp, #32]
 800fe3c:	0001      	movs	r1, r0
 800fe3e:	9805      	ldr	r0, [sp, #20]
 800fe40:	f000 fc17 	bl	8010672 <__mcmp>
 800fe44:	2800      	cmp	r0, #0
 800fe46:	dd00      	ble.n	800fe4a <_dtoa_r+0xa0e>
 800fe48:	e55a      	b.n	800f900 <_dtoa_r+0x4c4>
 800fe4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fe4c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800fe4e:	43db      	mvns	r3, r3
 800fe50:	9303      	str	r3, [sp, #12]
 800fe52:	2700      	movs	r7, #0
 800fe54:	9908      	ldr	r1, [sp, #32]
 800fe56:	9804      	ldr	r0, [sp, #16]
 800fe58:	f000 fa31 	bl	80102be <_Bfree>
 800fe5c:	2e00      	cmp	r6, #0
 800fe5e:	d100      	bne.n	800fe62 <_dtoa_r+0xa26>
 800fe60:	e63f      	b.n	800fae2 <_dtoa_r+0x6a6>
 800fe62:	2f00      	cmp	r7, #0
 800fe64:	d005      	beq.n	800fe72 <_dtoa_r+0xa36>
 800fe66:	42b7      	cmp	r7, r6
 800fe68:	d003      	beq.n	800fe72 <_dtoa_r+0xa36>
 800fe6a:	0039      	movs	r1, r7
 800fe6c:	9804      	ldr	r0, [sp, #16]
 800fe6e:	f000 fa26 	bl	80102be <_Bfree>
 800fe72:	0031      	movs	r1, r6
 800fe74:	9804      	ldr	r0, [sp, #16]
 800fe76:	f000 fa22 	bl	80102be <_Bfree>
 800fe7a:	e632      	b.n	800fae2 <_dtoa_r+0x6a6>
 800fe7c:	9508      	str	r5, [sp, #32]
 800fe7e:	002e      	movs	r6, r5
 800fe80:	e7e3      	b.n	800fe4a <_dtoa_r+0xa0e>
 800fe82:	2300      	movs	r3, #0
 800fe84:	9308      	str	r3, [sp, #32]
 800fe86:	001e      	movs	r6, r3
 800fe88:	e7df      	b.n	800fe4a <_dtoa_r+0xa0e>
 800fe8a:	46c0      	nop			; (mov r8, r8)
 800fe8c:	40240000 	.word	0x40240000
 800fe90:	00000433 	.word	0x00000433
 800fe94:	9603      	str	r6, [sp, #12]
 800fe96:	9508      	str	r5, [sp, #32]
 800fe98:	002e      	movs	r6, r5
 800fe9a:	e531      	b.n	800f900 <_dtoa_r+0x4c4>
 800fe9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fe9e:	970d      	str	r7, [sp, #52]	; 0x34
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d000      	beq.n	800fea6 <_dtoa_r+0xa6a>
 800fea4:	e753      	b.n	800fd4e <_dtoa_r+0x912>
 800fea6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800fea8:	9908      	ldr	r1, [sp, #32]
 800feaa:	9805      	ldr	r0, [sp, #20]
 800feac:	f7ff fa42 	bl	800f334 <quorem>
 800feb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800feb2:	3030      	adds	r0, #48	; 0x30
 800feb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800feb6:	7028      	strb	r0, [r5, #0]
 800feb8:	3501      	adds	r5, #1
 800feba:	0004      	movs	r4, r0
 800febc:	1aeb      	subs	r3, r5, r3
 800febe:	429a      	cmp	r2, r3
 800fec0:	dc78      	bgt.n	800ffb4 <_dtoa_r+0xb78>
 800fec2:	1e15      	subs	r5, r2, #0
 800fec4:	dc00      	bgt.n	800fec8 <_dtoa_r+0xa8c>
 800fec6:	2501      	movs	r5, #1
 800fec8:	2700      	movs	r7, #0
 800feca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fecc:	195d      	adds	r5, r3, r5
 800fece:	9905      	ldr	r1, [sp, #20]
 800fed0:	2201      	movs	r2, #1
 800fed2:	9804      	ldr	r0, [sp, #16]
 800fed4:	f000 fb7c 	bl	80105d0 <__lshift>
 800fed8:	9908      	ldr	r1, [sp, #32]
 800feda:	9005      	str	r0, [sp, #20]
 800fedc:	f000 fbc9 	bl	8010672 <__mcmp>
 800fee0:	2800      	cmp	r0, #0
 800fee2:	dc2f      	bgt.n	800ff44 <_dtoa_r+0xb08>
 800fee4:	d101      	bne.n	800feea <_dtoa_r+0xaae>
 800fee6:	07e3      	lsls	r3, r4, #31
 800fee8:	d42c      	bmi.n	800ff44 <_dtoa_r+0xb08>
 800feea:	1e6b      	subs	r3, r5, #1
 800feec:	781a      	ldrb	r2, [r3, #0]
 800feee:	2a30      	cmp	r2, #48	; 0x30
 800fef0:	d1b0      	bne.n	800fe54 <_dtoa_r+0xa18>
 800fef2:	001d      	movs	r5, r3
 800fef4:	e7f9      	b.n	800feea <_dtoa_r+0xaae>
 800fef6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	db07      	blt.n	800ff0c <_dtoa_r+0xad0>
 800fefc:	001d      	movs	r5, r3
 800fefe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ff00:	431d      	orrs	r5, r3
 800ff02:	d126      	bne.n	800ff52 <_dtoa_r+0xb16>
 800ff04:	2301      	movs	r3, #1
 800ff06:	9a06      	ldr	r2, [sp, #24]
 800ff08:	4213      	tst	r3, r2
 800ff0a:	d122      	bne.n	800ff52 <_dtoa_r+0xb16>
 800ff0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	dc00      	bgt.n	800ff14 <_dtoa_r+0xad8>
 800ff12:	e773      	b.n	800fdfc <_dtoa_r+0x9c0>
 800ff14:	9905      	ldr	r1, [sp, #20]
 800ff16:	2201      	movs	r2, #1
 800ff18:	9804      	ldr	r0, [sp, #16]
 800ff1a:	f000 fb59 	bl	80105d0 <__lshift>
 800ff1e:	9908      	ldr	r1, [sp, #32]
 800ff20:	9005      	str	r0, [sp, #20]
 800ff22:	f000 fba6 	bl	8010672 <__mcmp>
 800ff26:	2800      	cmp	r0, #0
 800ff28:	dc04      	bgt.n	800ff34 <_dtoa_r+0xaf8>
 800ff2a:	d000      	beq.n	800ff2e <_dtoa_r+0xaf2>
 800ff2c:	e766      	b.n	800fdfc <_dtoa_r+0x9c0>
 800ff2e:	07e3      	lsls	r3, r4, #31
 800ff30:	d400      	bmi.n	800ff34 <_dtoa_r+0xaf8>
 800ff32:	e763      	b.n	800fdfc <_dtoa_r+0x9c0>
 800ff34:	2c39      	cmp	r4, #57	; 0x39
 800ff36:	d000      	beq.n	800ff3a <_dtoa_r+0xafe>
 800ff38:	e75e      	b.n	800fdf8 <_dtoa_r+0x9bc>
 800ff3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ff3e:	1c5d      	adds	r5, r3, #1
 800ff40:	2339      	movs	r3, #57	; 0x39
 800ff42:	7013      	strb	r3, [r2, #0]
 800ff44:	1e6b      	subs	r3, r5, #1
 800ff46:	781a      	ldrb	r2, [r3, #0]
 800ff48:	2a39      	cmp	r2, #57	; 0x39
 800ff4a:	d03b      	beq.n	800ffc4 <_dtoa_r+0xb88>
 800ff4c:	3201      	adds	r2, #1
 800ff4e:	701a      	strb	r2, [r3, #0]
 800ff50:	e780      	b.n	800fe54 <_dtoa_r+0xa18>
 800ff52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff54:	3301      	adds	r3, #1
 800ff56:	930d      	str	r3, [sp, #52]	; 0x34
 800ff58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	dd05      	ble.n	800ff6a <_dtoa_r+0xb2e>
 800ff5e:	2c39      	cmp	r4, #57	; 0x39
 800ff60:	d0eb      	beq.n	800ff3a <_dtoa_r+0xafe>
 800ff62:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ff64:	3401      	adds	r4, #1
 800ff66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff68:	e74a      	b.n	800fe00 <_dtoa_r+0x9c4>
 800ff6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ff6e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ff70:	701c      	strb	r4, [r3, #0]
 800ff72:	4293      	cmp	r3, r2
 800ff74:	d0ab      	beq.n	800fece <_dtoa_r+0xa92>
 800ff76:	2300      	movs	r3, #0
 800ff78:	220a      	movs	r2, #10
 800ff7a:	9905      	ldr	r1, [sp, #20]
 800ff7c:	9804      	ldr	r0, [sp, #16]
 800ff7e:	f000 f9b7 	bl	80102f0 <__multadd>
 800ff82:	2300      	movs	r3, #0
 800ff84:	9005      	str	r0, [sp, #20]
 800ff86:	220a      	movs	r2, #10
 800ff88:	0039      	movs	r1, r7
 800ff8a:	9804      	ldr	r0, [sp, #16]
 800ff8c:	42b7      	cmp	r7, r6
 800ff8e:	d106      	bne.n	800ff9e <_dtoa_r+0xb62>
 800ff90:	f000 f9ae 	bl	80102f0 <__multadd>
 800ff94:	0007      	movs	r7, r0
 800ff96:	0006      	movs	r6, r0
 800ff98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff9a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff9c:	e6fc      	b.n	800fd98 <_dtoa_r+0x95c>
 800ff9e:	f000 f9a7 	bl	80102f0 <__multadd>
 800ffa2:	0031      	movs	r1, r6
 800ffa4:	0007      	movs	r7, r0
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	220a      	movs	r2, #10
 800ffaa:	9804      	ldr	r0, [sp, #16]
 800ffac:	f000 f9a0 	bl	80102f0 <__multadd>
 800ffb0:	0006      	movs	r6, r0
 800ffb2:	e7f1      	b.n	800ff98 <_dtoa_r+0xb5c>
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	220a      	movs	r2, #10
 800ffb8:	9905      	ldr	r1, [sp, #20]
 800ffba:	9804      	ldr	r0, [sp, #16]
 800ffbc:	f000 f998 	bl	80102f0 <__multadd>
 800ffc0:	9005      	str	r0, [sp, #20]
 800ffc2:	e771      	b.n	800fea8 <_dtoa_r+0xa6c>
 800ffc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d105      	bne.n	800ffd6 <_dtoa_r+0xb9a>
 800ffca:	9b03      	ldr	r3, [sp, #12]
 800ffcc:	3301      	adds	r3, #1
 800ffce:	9303      	str	r3, [sp, #12]
 800ffd0:	2331      	movs	r3, #49	; 0x31
 800ffd2:	7013      	strb	r3, [r2, #0]
 800ffd4:	e73e      	b.n	800fe54 <_dtoa_r+0xa18>
 800ffd6:	001d      	movs	r5, r3
 800ffd8:	e7b4      	b.n	800ff44 <_dtoa_r+0xb08>
 800ffda:	4b0a      	ldr	r3, [pc, #40]	; (8010004 <_dtoa_r+0xbc8>)
 800ffdc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ffde:	930a      	str	r3, [sp, #40]	; 0x28
 800ffe0:	4b09      	ldr	r3, [pc, #36]	; (8010008 <_dtoa_r+0xbcc>)
 800ffe2:	2a00      	cmp	r2, #0
 800ffe4:	d001      	beq.n	800ffea <_dtoa_r+0xbae>
 800ffe6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ffe8:	6013      	str	r3, [r2, #0]
 800ffea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ffec:	b01d      	add	sp, #116	; 0x74
 800ffee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fff0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	dd00      	ble.n	800fff8 <_dtoa_r+0xbbc>
 800fff6:	e756      	b.n	800fea6 <_dtoa_r+0xa6a>
 800fff8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fffa:	2b02      	cmp	r3, #2
 800fffc:	dc00      	bgt.n	8010000 <_dtoa_r+0xbc4>
 800fffe:	e752      	b.n	800fea6 <_dtoa_r+0xa6a>
 8010000:	e713      	b.n	800fe2a <_dtoa_r+0x9ee>
 8010002:	46c0      	nop			; (mov r8, r8)
 8010004:	08013d4a 	.word	0x08013d4a
 8010008:	08013d52 	.word	0x08013d52

0801000c <_malloc_trim_r>:
 801000c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801000e:	4f25      	ldr	r7, [pc, #148]	; (80100a4 <_malloc_trim_r+0x98>)
 8010010:	000c      	movs	r4, r1
 8010012:	0005      	movs	r5, r0
 8010014:	f7fe f8cc 	bl	800e1b0 <__malloc_lock>
 8010018:	0038      	movs	r0, r7
 801001a:	2203      	movs	r2, #3
 801001c:	4e22      	ldr	r6, [pc, #136]	; (80100a8 <_malloc_trim_r+0x9c>)
 801001e:	3811      	subs	r0, #17
 8010020:	68b3      	ldr	r3, [r6, #8]
 8010022:	1b00      	subs	r0, r0, r4
 8010024:	685b      	ldr	r3, [r3, #4]
 8010026:	0039      	movs	r1, r7
 8010028:	4393      	bics	r3, r2
 801002a:	18c0      	adds	r0, r0, r3
 801002c:	9301      	str	r3, [sp, #4]
 801002e:	f7f0 f897 	bl	8000160 <__udivsi3>
 8010032:	1e44      	subs	r4, r0, #1
 8010034:	437c      	muls	r4, r7
 8010036:	42bc      	cmp	r4, r7
 8010038:	da04      	bge.n	8010044 <_malloc_trim_r+0x38>
 801003a:	0028      	movs	r0, r5
 801003c:	f7fe f8c0 	bl	800e1c0 <__malloc_unlock>
 8010040:	2000      	movs	r0, #0
 8010042:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010044:	2100      	movs	r1, #0
 8010046:	0028      	movs	r0, r5
 8010048:	f7fe f8c2 	bl	800e1d0 <_sbrk_r>
 801004c:	68b3      	ldr	r3, [r6, #8]
 801004e:	9a01      	ldr	r2, [sp, #4]
 8010050:	189b      	adds	r3, r3, r2
 8010052:	4298      	cmp	r0, r3
 8010054:	d1f1      	bne.n	801003a <_malloc_trim_r+0x2e>
 8010056:	4261      	negs	r1, r4
 8010058:	0028      	movs	r0, r5
 801005a:	f7fe f8b9 	bl	800e1d0 <_sbrk_r>
 801005e:	1c43      	adds	r3, r0, #1
 8010060:	d110      	bne.n	8010084 <_malloc_trim_r+0x78>
 8010062:	2100      	movs	r1, #0
 8010064:	0028      	movs	r0, r5
 8010066:	f7fe f8b3 	bl	800e1d0 <_sbrk_r>
 801006a:	68b2      	ldr	r2, [r6, #8]
 801006c:	1a81      	subs	r1, r0, r2
 801006e:	290f      	cmp	r1, #15
 8010070:	dde3      	ble.n	801003a <_malloc_trim_r+0x2e>
 8010072:	4b0e      	ldr	r3, [pc, #56]	; (80100ac <_malloc_trim_r+0xa0>)
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	1ac0      	subs	r0, r0, r3
 8010078:	4b0d      	ldr	r3, [pc, #52]	; (80100b0 <_malloc_trim_r+0xa4>)
 801007a:	6018      	str	r0, [r3, #0]
 801007c:	2301      	movs	r3, #1
 801007e:	430b      	orrs	r3, r1
 8010080:	6053      	str	r3, [r2, #4]
 8010082:	e7da      	b.n	801003a <_malloc_trim_r+0x2e>
 8010084:	68b2      	ldr	r2, [r6, #8]
 8010086:	2601      	movs	r6, #1
 8010088:	9b01      	ldr	r3, [sp, #4]
 801008a:	0028      	movs	r0, r5
 801008c:	1b1b      	subs	r3, r3, r4
 801008e:	4333      	orrs	r3, r6
 8010090:	6053      	str	r3, [r2, #4]
 8010092:	4b07      	ldr	r3, [pc, #28]	; (80100b0 <_malloc_trim_r+0xa4>)
 8010094:	681a      	ldr	r2, [r3, #0]
 8010096:	1b14      	subs	r4, r2, r4
 8010098:	601c      	str	r4, [r3, #0]
 801009a:	f7fe f891 	bl	800e1c0 <__malloc_unlock>
 801009e:	0030      	movs	r0, r6
 80100a0:	e7cf      	b.n	8010042 <_malloc_trim_r+0x36>
 80100a2:	46c0      	nop			; (mov r8, r8)
 80100a4:	00000080 	.word	0x00000080
 80100a8:	2000014c 	.word	0x2000014c
 80100ac:	20000554 	.word	0x20000554
 80100b0:	20004688 	.word	0x20004688

080100b4 <_free_r>:
 80100b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100b6:	1e0d      	subs	r5, r1, #0
 80100b8:	9001      	str	r0, [sp, #4]
 80100ba:	d02d      	beq.n	8010118 <_free_r+0x64>
 80100bc:	f7fe f878 	bl	800e1b0 <__malloc_lock>
 80100c0:	2301      	movs	r3, #1
 80100c2:	0029      	movs	r1, r5
 80100c4:	469c      	mov	ip, r3
 80100c6:	3908      	subs	r1, #8
 80100c8:	684f      	ldr	r7, [r1, #4]
 80100ca:	4662      	mov	r2, ip
 80100cc:	003b      	movs	r3, r7
 80100ce:	4666      	mov	r6, ip
 80100d0:	4393      	bics	r3, r2
 80100d2:	18c8      	adds	r0, r1, r3
 80100d4:	6845      	ldr	r5, [r0, #4]
 80100d6:	3202      	adds	r2, #2
 80100d8:	4395      	bics	r5, r2
 80100da:	4a4a      	ldr	r2, [pc, #296]	; (8010204 <_free_r+0x150>)
 80100dc:	4037      	ands	r7, r6
 80100de:	6896      	ldr	r6, [r2, #8]
 80100e0:	42b0      	cmp	r0, r6
 80100e2:	d11a      	bne.n	801011a <_free_r+0x66>
 80100e4:	195b      	adds	r3, r3, r5
 80100e6:	2f00      	cmp	r7, #0
 80100e8:	d106      	bne.n	80100f8 <_free_r+0x44>
 80100ea:	6808      	ldr	r0, [r1, #0]
 80100ec:	1a09      	subs	r1, r1, r0
 80100ee:	688d      	ldr	r5, [r1, #8]
 80100f0:	181b      	adds	r3, r3, r0
 80100f2:	68c8      	ldr	r0, [r1, #12]
 80100f4:	60e8      	str	r0, [r5, #12]
 80100f6:	6085      	str	r5, [r0, #8]
 80100f8:	2001      	movs	r0, #1
 80100fa:	4318      	orrs	r0, r3
 80100fc:	6048      	str	r0, [r1, #4]
 80100fe:	6091      	str	r1, [r2, #8]
 8010100:	4a41      	ldr	r2, [pc, #260]	; (8010208 <_free_r+0x154>)
 8010102:	6812      	ldr	r2, [r2, #0]
 8010104:	4293      	cmp	r3, r2
 8010106:	d304      	bcc.n	8010112 <_free_r+0x5e>
 8010108:	4b40      	ldr	r3, [pc, #256]	; (801020c <_free_r+0x158>)
 801010a:	9801      	ldr	r0, [sp, #4]
 801010c:	6819      	ldr	r1, [r3, #0]
 801010e:	f7ff ff7d 	bl	801000c <_malloc_trim_r>
 8010112:	9801      	ldr	r0, [sp, #4]
 8010114:	f7fe f854 	bl	800e1c0 <__malloc_unlock>
 8010118:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 801011a:	2600      	movs	r6, #0
 801011c:	6045      	str	r5, [r0, #4]
 801011e:	42b7      	cmp	r7, r6
 8010120:	d109      	bne.n	8010136 <_free_r+0x82>
 8010122:	680f      	ldr	r7, [r1, #0]
 8010124:	4c3a      	ldr	r4, [pc, #232]	; (8010210 <_free_r+0x15c>)
 8010126:	1bc9      	subs	r1, r1, r7
 8010128:	19db      	adds	r3, r3, r7
 801012a:	688f      	ldr	r7, [r1, #8]
 801012c:	42a7      	cmp	r7, r4
 801012e:	d02b      	beq.n	8010188 <_free_r+0xd4>
 8010130:	68cc      	ldr	r4, [r1, #12]
 8010132:	60fc      	str	r4, [r7, #12]
 8010134:	60a7      	str	r7, [r4, #8]
 8010136:	1947      	adds	r7, r0, r5
 8010138:	687c      	ldr	r4, [r7, #4]
 801013a:	2701      	movs	r7, #1
 801013c:	423c      	tst	r4, r7
 801013e:	d10b      	bne.n	8010158 <_free_r+0xa4>
 8010140:	195b      	adds	r3, r3, r5
 8010142:	6885      	ldr	r5, [r0, #8]
 8010144:	2e00      	cmp	r6, #0
 8010146:	d121      	bne.n	801018c <_free_r+0xd8>
 8010148:	4c31      	ldr	r4, [pc, #196]	; (8010210 <_free_r+0x15c>)
 801014a:	42a5      	cmp	r5, r4
 801014c:	d11e      	bne.n	801018c <_free_r+0xd8>
 801014e:	003e      	movs	r6, r7
 8010150:	6151      	str	r1, [r2, #20]
 8010152:	6111      	str	r1, [r2, #16]
 8010154:	60cd      	str	r5, [r1, #12]
 8010156:	608d      	str	r5, [r1, #8]
 8010158:	2001      	movs	r0, #1
 801015a:	0005      	movs	r5, r0
 801015c:	431d      	orrs	r5, r3
 801015e:	604d      	str	r5, [r1, #4]
 8010160:	50cb      	str	r3, [r1, r3]
 8010162:	2e00      	cmp	r6, #0
 8010164:	d1d5      	bne.n	8010112 <_free_r+0x5e>
 8010166:	4d2b      	ldr	r5, [pc, #172]	; (8010214 <_free_r+0x160>)
 8010168:	42ab      	cmp	r3, r5
 801016a:	d813      	bhi.n	8010194 <_free_r+0xe0>
 801016c:	08db      	lsrs	r3, r3, #3
 801016e:	109d      	asrs	r5, r3, #2
 8010170:	40a8      	lsls	r0, r5
 8010172:	6854      	ldr	r4, [r2, #4]
 8010174:	00db      	lsls	r3, r3, #3
 8010176:	4320      	orrs	r0, r4
 8010178:	6050      	str	r0, [r2, #4]
 801017a:	189a      	adds	r2, r3, r2
 801017c:	6893      	ldr	r3, [r2, #8]
 801017e:	60ca      	str	r2, [r1, #12]
 8010180:	608b      	str	r3, [r1, #8]
 8010182:	6091      	str	r1, [r2, #8]
 8010184:	60d9      	str	r1, [r3, #12]
 8010186:	e7c4      	b.n	8010112 <_free_r+0x5e>
 8010188:	4666      	mov	r6, ip
 801018a:	e7d4      	b.n	8010136 <_free_r+0x82>
 801018c:	68c0      	ldr	r0, [r0, #12]
 801018e:	60e8      	str	r0, [r5, #12]
 8010190:	6085      	str	r5, [r0, #8]
 8010192:	e7e1      	b.n	8010158 <_free_r+0xa4>
 8010194:	0a5d      	lsrs	r5, r3, #9
 8010196:	2d04      	cmp	r5, #4
 8010198:	d812      	bhi.n	80101c0 <_free_r+0x10c>
 801019a:	0998      	lsrs	r0, r3, #6
 801019c:	3038      	adds	r0, #56	; 0x38
 801019e:	00c6      	lsls	r6, r0, #3
 80101a0:	18b6      	adds	r6, r6, r2
 80101a2:	68b5      	ldr	r5, [r6, #8]
 80101a4:	2703      	movs	r7, #3
 80101a6:	42ae      	cmp	r6, r5
 80101a8:	d125      	bne.n	80101f6 <_free_r+0x142>
 80101aa:	2301      	movs	r3, #1
 80101ac:	1080      	asrs	r0, r0, #2
 80101ae:	4083      	lsls	r3, r0
 80101b0:	6850      	ldr	r0, [r2, #4]
 80101b2:	4303      	orrs	r3, r0
 80101b4:	6053      	str	r3, [r2, #4]
 80101b6:	60ce      	str	r6, [r1, #12]
 80101b8:	608d      	str	r5, [r1, #8]
 80101ba:	60b1      	str	r1, [r6, #8]
 80101bc:	60e9      	str	r1, [r5, #12]
 80101be:	e7a8      	b.n	8010112 <_free_r+0x5e>
 80101c0:	2d14      	cmp	r5, #20
 80101c2:	d802      	bhi.n	80101ca <_free_r+0x116>
 80101c4:	0028      	movs	r0, r5
 80101c6:	305b      	adds	r0, #91	; 0x5b
 80101c8:	e7e9      	b.n	801019e <_free_r+0xea>
 80101ca:	2d54      	cmp	r5, #84	; 0x54
 80101cc:	d802      	bhi.n	80101d4 <_free_r+0x120>
 80101ce:	0b18      	lsrs	r0, r3, #12
 80101d0:	306e      	adds	r0, #110	; 0x6e
 80101d2:	e7e4      	b.n	801019e <_free_r+0xea>
 80101d4:	20aa      	movs	r0, #170	; 0xaa
 80101d6:	0040      	lsls	r0, r0, #1
 80101d8:	4285      	cmp	r5, r0
 80101da:	d802      	bhi.n	80101e2 <_free_r+0x12e>
 80101dc:	0bd8      	lsrs	r0, r3, #15
 80101de:	3077      	adds	r0, #119	; 0x77
 80101e0:	e7dd      	b.n	801019e <_free_r+0xea>
 80101e2:	4e0d      	ldr	r6, [pc, #52]	; (8010218 <_free_r+0x164>)
 80101e4:	207e      	movs	r0, #126	; 0x7e
 80101e6:	42b5      	cmp	r5, r6
 80101e8:	d8d9      	bhi.n	801019e <_free_r+0xea>
 80101ea:	0c98      	lsrs	r0, r3, #18
 80101ec:	307c      	adds	r0, #124	; 0x7c
 80101ee:	e7d6      	b.n	801019e <_free_r+0xea>
 80101f0:	68ad      	ldr	r5, [r5, #8]
 80101f2:	42ae      	cmp	r6, r5
 80101f4:	d003      	beq.n	80101fe <_free_r+0x14a>
 80101f6:	686a      	ldr	r2, [r5, #4]
 80101f8:	43ba      	bics	r2, r7
 80101fa:	4293      	cmp	r3, r2
 80101fc:	d3f8      	bcc.n	80101f0 <_free_r+0x13c>
 80101fe:	68ee      	ldr	r6, [r5, #12]
 8010200:	e7d9      	b.n	80101b6 <_free_r+0x102>
 8010202:	46c0      	nop			; (mov r8, r8)
 8010204:	2000014c 	.word	0x2000014c
 8010208:	20000558 	.word	0x20000558
 801020c:	200046b8 	.word	0x200046b8
 8010210:	20000154 	.word	0x20000154
 8010214:	000001ff 	.word	0x000001ff
 8010218:	00000554 	.word	0x00000554

0801021c <_localeconv_r>:
 801021c:	4b03      	ldr	r3, [pc, #12]	; (801022c <_localeconv_r+0x10>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	6a18      	ldr	r0, [r3, #32]
 8010222:	2800      	cmp	r0, #0
 8010224:	d100      	bne.n	8010228 <_localeconv_r+0xc>
 8010226:	4802      	ldr	r0, [pc, #8]	; (8010230 <_localeconv_r+0x14>)
 8010228:	30f0      	adds	r0, #240	; 0xf0
 801022a:	4770      	bx	lr
 801022c:	20000058 	.word	0x20000058
 8010230:	2000055c 	.word	0x2000055c

08010234 <__retarget_lock_acquire_recursive>:
 8010234:	4770      	bx	lr

08010236 <__retarget_lock_release_recursive>:
 8010236:	4770      	bx	lr

08010238 <memchr>:
 8010238:	b2c9      	uxtb	r1, r1
 801023a:	1882      	adds	r2, r0, r2
 801023c:	4290      	cmp	r0, r2
 801023e:	d101      	bne.n	8010244 <memchr+0xc>
 8010240:	2000      	movs	r0, #0
 8010242:	4770      	bx	lr
 8010244:	7803      	ldrb	r3, [r0, #0]
 8010246:	428b      	cmp	r3, r1
 8010248:	d0fb      	beq.n	8010242 <memchr+0xa>
 801024a:	3001      	adds	r0, #1
 801024c:	e7f6      	b.n	801023c <memchr+0x4>

0801024e <_Balloc>:
 801024e:	b570      	push	{r4, r5, r6, lr}
 8010250:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010252:	0004      	movs	r4, r0
 8010254:	000d      	movs	r5, r1
 8010256:	2e00      	cmp	r6, #0
 8010258:	d107      	bne.n	801026a <_Balloc+0x1c>
 801025a:	2010      	movs	r0, #16
 801025c:	f7fd fd7e 	bl	800dd5c <malloc>
 8010260:	6260      	str	r0, [r4, #36]	; 0x24
 8010262:	6046      	str	r6, [r0, #4]
 8010264:	6086      	str	r6, [r0, #8]
 8010266:	6006      	str	r6, [r0, #0]
 8010268:	60c6      	str	r6, [r0, #12]
 801026a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801026c:	68f3      	ldr	r3, [r6, #12]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d013      	beq.n	801029a <_Balloc+0x4c>
 8010272:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010274:	00aa      	lsls	r2, r5, #2
 8010276:	68db      	ldr	r3, [r3, #12]
 8010278:	189b      	adds	r3, r3, r2
 801027a:	6818      	ldr	r0, [r3, #0]
 801027c:	2800      	cmp	r0, #0
 801027e:	d118      	bne.n	80102b2 <_Balloc+0x64>
 8010280:	2101      	movs	r1, #1
 8010282:	000e      	movs	r6, r1
 8010284:	40ae      	lsls	r6, r5
 8010286:	1d72      	adds	r2, r6, #5
 8010288:	0092      	lsls	r2, r2, #2
 801028a:	0020      	movs	r0, r4
 801028c:	f000 fb40 	bl	8010910 <_calloc_r>
 8010290:	2800      	cmp	r0, #0
 8010292:	d00c      	beq.n	80102ae <_Balloc+0x60>
 8010294:	6045      	str	r5, [r0, #4]
 8010296:	6086      	str	r6, [r0, #8]
 8010298:	e00d      	b.n	80102b6 <_Balloc+0x68>
 801029a:	2221      	movs	r2, #33	; 0x21
 801029c:	2104      	movs	r1, #4
 801029e:	0020      	movs	r0, r4
 80102a0:	f000 fb36 	bl	8010910 <_calloc_r>
 80102a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80102a6:	60f0      	str	r0, [r6, #12]
 80102a8:	68db      	ldr	r3, [r3, #12]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d1e1      	bne.n	8010272 <_Balloc+0x24>
 80102ae:	2000      	movs	r0, #0
 80102b0:	bd70      	pop	{r4, r5, r6, pc}
 80102b2:	6802      	ldr	r2, [r0, #0]
 80102b4:	601a      	str	r2, [r3, #0]
 80102b6:	2300      	movs	r3, #0
 80102b8:	6103      	str	r3, [r0, #16]
 80102ba:	60c3      	str	r3, [r0, #12]
 80102bc:	e7f8      	b.n	80102b0 <_Balloc+0x62>

080102be <_Bfree>:
 80102be:	b570      	push	{r4, r5, r6, lr}
 80102c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80102c2:	0006      	movs	r6, r0
 80102c4:	000d      	movs	r5, r1
 80102c6:	2c00      	cmp	r4, #0
 80102c8:	d107      	bne.n	80102da <_Bfree+0x1c>
 80102ca:	2010      	movs	r0, #16
 80102cc:	f7fd fd46 	bl	800dd5c <malloc>
 80102d0:	6270      	str	r0, [r6, #36]	; 0x24
 80102d2:	6044      	str	r4, [r0, #4]
 80102d4:	6084      	str	r4, [r0, #8]
 80102d6:	6004      	str	r4, [r0, #0]
 80102d8:	60c4      	str	r4, [r0, #12]
 80102da:	2d00      	cmp	r5, #0
 80102dc:	d007      	beq.n	80102ee <_Bfree+0x30>
 80102de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80102e0:	686a      	ldr	r2, [r5, #4]
 80102e2:	68db      	ldr	r3, [r3, #12]
 80102e4:	0092      	lsls	r2, r2, #2
 80102e6:	189b      	adds	r3, r3, r2
 80102e8:	681a      	ldr	r2, [r3, #0]
 80102ea:	602a      	str	r2, [r5, #0]
 80102ec:	601d      	str	r5, [r3, #0]
 80102ee:	bd70      	pop	{r4, r5, r6, pc}

080102f0 <__multadd>:
 80102f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80102f2:	001e      	movs	r6, r3
 80102f4:	2314      	movs	r3, #20
 80102f6:	469c      	mov	ip, r3
 80102f8:	0007      	movs	r7, r0
 80102fa:	000c      	movs	r4, r1
 80102fc:	2000      	movs	r0, #0
 80102fe:	690d      	ldr	r5, [r1, #16]
 8010300:	448c      	add	ip, r1
 8010302:	4663      	mov	r3, ip
 8010304:	8819      	ldrh	r1, [r3, #0]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	4351      	muls	r1, r2
 801030a:	0c1b      	lsrs	r3, r3, #16
 801030c:	4353      	muls	r3, r2
 801030e:	1989      	adds	r1, r1, r6
 8010310:	0c0e      	lsrs	r6, r1, #16
 8010312:	199b      	adds	r3, r3, r6
 8010314:	b289      	uxth	r1, r1
 8010316:	0c1e      	lsrs	r6, r3, #16
 8010318:	041b      	lsls	r3, r3, #16
 801031a:	185b      	adds	r3, r3, r1
 801031c:	4661      	mov	r1, ip
 801031e:	3001      	adds	r0, #1
 8010320:	c108      	stmia	r1!, {r3}
 8010322:	468c      	mov	ip, r1
 8010324:	4285      	cmp	r5, r0
 8010326:	dcec      	bgt.n	8010302 <__multadd+0x12>
 8010328:	2e00      	cmp	r6, #0
 801032a:	d01b      	beq.n	8010364 <__multadd+0x74>
 801032c:	68a3      	ldr	r3, [r4, #8]
 801032e:	429d      	cmp	r5, r3
 8010330:	db12      	blt.n	8010358 <__multadd+0x68>
 8010332:	6863      	ldr	r3, [r4, #4]
 8010334:	0038      	movs	r0, r7
 8010336:	1c59      	adds	r1, r3, #1
 8010338:	f7ff ff89 	bl	801024e <_Balloc>
 801033c:	0021      	movs	r1, r4
 801033e:	6923      	ldr	r3, [r4, #16]
 8010340:	9001      	str	r0, [sp, #4]
 8010342:	1c9a      	adds	r2, r3, #2
 8010344:	0092      	lsls	r2, r2, #2
 8010346:	310c      	adds	r1, #12
 8010348:	300c      	adds	r0, #12
 801034a:	f7fd ff1f 	bl	800e18c <memcpy>
 801034e:	0021      	movs	r1, r4
 8010350:	0038      	movs	r0, r7
 8010352:	f7ff ffb4 	bl	80102be <_Bfree>
 8010356:	9c01      	ldr	r4, [sp, #4]
 8010358:	1d2b      	adds	r3, r5, #4
 801035a:	009b      	lsls	r3, r3, #2
 801035c:	18e3      	adds	r3, r4, r3
 801035e:	3501      	adds	r5, #1
 8010360:	605e      	str	r6, [r3, #4]
 8010362:	6125      	str	r5, [r4, #16]
 8010364:	0020      	movs	r0, r4
 8010366:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08010368 <__hi0bits>:
 8010368:	0003      	movs	r3, r0
 801036a:	0c02      	lsrs	r2, r0, #16
 801036c:	2000      	movs	r0, #0
 801036e:	4282      	cmp	r2, r0
 8010370:	d101      	bne.n	8010376 <__hi0bits+0xe>
 8010372:	041b      	lsls	r3, r3, #16
 8010374:	3010      	adds	r0, #16
 8010376:	0e1a      	lsrs	r2, r3, #24
 8010378:	d101      	bne.n	801037e <__hi0bits+0x16>
 801037a:	3008      	adds	r0, #8
 801037c:	021b      	lsls	r3, r3, #8
 801037e:	0f1a      	lsrs	r2, r3, #28
 8010380:	d101      	bne.n	8010386 <__hi0bits+0x1e>
 8010382:	3004      	adds	r0, #4
 8010384:	011b      	lsls	r3, r3, #4
 8010386:	0f9a      	lsrs	r2, r3, #30
 8010388:	d101      	bne.n	801038e <__hi0bits+0x26>
 801038a:	3002      	adds	r0, #2
 801038c:	009b      	lsls	r3, r3, #2
 801038e:	2b00      	cmp	r3, #0
 8010390:	db03      	blt.n	801039a <__hi0bits+0x32>
 8010392:	3001      	adds	r0, #1
 8010394:	005b      	lsls	r3, r3, #1
 8010396:	d400      	bmi.n	801039a <__hi0bits+0x32>
 8010398:	2020      	movs	r0, #32
 801039a:	4770      	bx	lr

0801039c <__lo0bits>:
 801039c:	2207      	movs	r2, #7
 801039e:	6803      	ldr	r3, [r0, #0]
 80103a0:	b510      	push	{r4, lr}
 80103a2:	0001      	movs	r1, r0
 80103a4:	401a      	ands	r2, r3
 80103a6:	d00d      	beq.n	80103c4 <__lo0bits+0x28>
 80103a8:	2401      	movs	r4, #1
 80103aa:	2000      	movs	r0, #0
 80103ac:	4223      	tst	r3, r4
 80103ae:	d105      	bne.n	80103bc <__lo0bits+0x20>
 80103b0:	3002      	adds	r0, #2
 80103b2:	4203      	tst	r3, r0
 80103b4:	d003      	beq.n	80103be <__lo0bits+0x22>
 80103b6:	40e3      	lsrs	r3, r4
 80103b8:	0020      	movs	r0, r4
 80103ba:	600b      	str	r3, [r1, #0]
 80103bc:	bd10      	pop	{r4, pc}
 80103be:	089b      	lsrs	r3, r3, #2
 80103c0:	600b      	str	r3, [r1, #0]
 80103c2:	e7fb      	b.n	80103bc <__lo0bits+0x20>
 80103c4:	b29c      	uxth	r4, r3
 80103c6:	0010      	movs	r0, r2
 80103c8:	2c00      	cmp	r4, #0
 80103ca:	d101      	bne.n	80103d0 <__lo0bits+0x34>
 80103cc:	2010      	movs	r0, #16
 80103ce:	0c1b      	lsrs	r3, r3, #16
 80103d0:	b2da      	uxtb	r2, r3
 80103d2:	2a00      	cmp	r2, #0
 80103d4:	d101      	bne.n	80103da <__lo0bits+0x3e>
 80103d6:	3008      	adds	r0, #8
 80103d8:	0a1b      	lsrs	r3, r3, #8
 80103da:	071a      	lsls	r2, r3, #28
 80103dc:	d101      	bne.n	80103e2 <__lo0bits+0x46>
 80103de:	3004      	adds	r0, #4
 80103e0:	091b      	lsrs	r3, r3, #4
 80103e2:	079a      	lsls	r2, r3, #30
 80103e4:	d101      	bne.n	80103ea <__lo0bits+0x4e>
 80103e6:	3002      	adds	r0, #2
 80103e8:	089b      	lsrs	r3, r3, #2
 80103ea:	07da      	lsls	r2, r3, #31
 80103ec:	d4e8      	bmi.n	80103c0 <__lo0bits+0x24>
 80103ee:	085b      	lsrs	r3, r3, #1
 80103f0:	d001      	beq.n	80103f6 <__lo0bits+0x5a>
 80103f2:	3001      	adds	r0, #1
 80103f4:	e7e4      	b.n	80103c0 <__lo0bits+0x24>
 80103f6:	2020      	movs	r0, #32
 80103f8:	e7e0      	b.n	80103bc <__lo0bits+0x20>

080103fa <__i2b>:
 80103fa:	b510      	push	{r4, lr}
 80103fc:	000c      	movs	r4, r1
 80103fe:	2101      	movs	r1, #1
 8010400:	f7ff ff25 	bl	801024e <_Balloc>
 8010404:	2301      	movs	r3, #1
 8010406:	6144      	str	r4, [r0, #20]
 8010408:	6103      	str	r3, [r0, #16]
 801040a:	bd10      	pop	{r4, pc}

0801040c <__multiply>:
 801040c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801040e:	690b      	ldr	r3, [r1, #16]
 8010410:	0015      	movs	r5, r2
 8010412:	6912      	ldr	r2, [r2, #16]
 8010414:	b089      	sub	sp, #36	; 0x24
 8010416:	000c      	movs	r4, r1
 8010418:	4293      	cmp	r3, r2
 801041a:	da01      	bge.n	8010420 <__multiply+0x14>
 801041c:	002c      	movs	r4, r5
 801041e:	000d      	movs	r5, r1
 8010420:	6927      	ldr	r7, [r4, #16]
 8010422:	692e      	ldr	r6, [r5, #16]
 8010424:	68a2      	ldr	r2, [r4, #8]
 8010426:	19bb      	adds	r3, r7, r6
 8010428:	6861      	ldr	r1, [r4, #4]
 801042a:	9301      	str	r3, [sp, #4]
 801042c:	4293      	cmp	r3, r2
 801042e:	dd00      	ble.n	8010432 <__multiply+0x26>
 8010430:	3101      	adds	r1, #1
 8010432:	f7ff ff0c 	bl	801024e <_Balloc>
 8010436:	0003      	movs	r3, r0
 8010438:	3314      	adds	r3, #20
 801043a:	9300      	str	r3, [sp, #0]
 801043c:	9a00      	ldr	r2, [sp, #0]
 801043e:	19bb      	adds	r3, r7, r6
 8010440:	4694      	mov	ip, r2
 8010442:	009b      	lsls	r3, r3, #2
 8010444:	449c      	add	ip, r3
 8010446:	0013      	movs	r3, r2
 8010448:	2200      	movs	r2, #0
 801044a:	9004      	str	r0, [sp, #16]
 801044c:	4563      	cmp	r3, ip
 801044e:	d31c      	bcc.n	801048a <__multiply+0x7e>
 8010450:	002a      	movs	r2, r5
 8010452:	3414      	adds	r4, #20
 8010454:	00bf      	lsls	r7, r7, #2
 8010456:	19e3      	adds	r3, r4, r7
 8010458:	3214      	adds	r2, #20
 801045a:	00b6      	lsls	r6, r6, #2
 801045c:	9305      	str	r3, [sp, #20]
 801045e:	1993      	adds	r3, r2, r6
 8010460:	9402      	str	r4, [sp, #8]
 8010462:	9306      	str	r3, [sp, #24]
 8010464:	9b06      	ldr	r3, [sp, #24]
 8010466:	429a      	cmp	r2, r3
 8010468:	d311      	bcc.n	801048e <__multiply+0x82>
 801046a:	9b01      	ldr	r3, [sp, #4]
 801046c:	2b00      	cmp	r3, #0
 801046e:	dd06      	ble.n	801047e <__multiply+0x72>
 8010470:	2304      	movs	r3, #4
 8010472:	425b      	negs	r3, r3
 8010474:	449c      	add	ip, r3
 8010476:	4663      	mov	r3, ip
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d051      	beq.n	8010522 <__multiply+0x116>
 801047e:	9b04      	ldr	r3, [sp, #16]
 8010480:	9a01      	ldr	r2, [sp, #4]
 8010482:	0018      	movs	r0, r3
 8010484:	611a      	str	r2, [r3, #16]
 8010486:	b009      	add	sp, #36	; 0x24
 8010488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801048a:	c304      	stmia	r3!, {r2}
 801048c:	e7de      	b.n	801044c <__multiply+0x40>
 801048e:	8814      	ldrh	r4, [r2, #0]
 8010490:	2c00      	cmp	r4, #0
 8010492:	d01e      	beq.n	80104d2 <__multiply+0xc6>
 8010494:	2600      	movs	r6, #0
 8010496:	9d00      	ldr	r5, [sp, #0]
 8010498:	9f02      	ldr	r7, [sp, #8]
 801049a:	cf01      	ldmia	r7!, {r0}
 801049c:	9507      	str	r5, [sp, #28]
 801049e:	cd08      	ldmia	r5!, {r3}
 80104a0:	9303      	str	r3, [sp, #12]
 80104a2:	b283      	uxth	r3, r0
 80104a4:	4363      	muls	r3, r4
 80104a6:	0019      	movs	r1, r3
 80104a8:	466b      	mov	r3, sp
 80104aa:	0c00      	lsrs	r0, r0, #16
 80104ac:	899b      	ldrh	r3, [r3, #12]
 80104ae:	4360      	muls	r0, r4
 80104b0:	18cb      	adds	r3, r1, r3
 80104b2:	9903      	ldr	r1, [sp, #12]
 80104b4:	199b      	adds	r3, r3, r6
 80104b6:	0c09      	lsrs	r1, r1, #16
 80104b8:	1841      	adds	r1, r0, r1
 80104ba:	0c18      	lsrs	r0, r3, #16
 80104bc:	1809      	adds	r1, r1, r0
 80104be:	0c0e      	lsrs	r6, r1, #16
 80104c0:	b29b      	uxth	r3, r3
 80104c2:	0409      	lsls	r1, r1, #16
 80104c4:	430b      	orrs	r3, r1
 80104c6:	9907      	ldr	r1, [sp, #28]
 80104c8:	600b      	str	r3, [r1, #0]
 80104ca:	9b05      	ldr	r3, [sp, #20]
 80104cc:	42bb      	cmp	r3, r7
 80104ce:	d8e4      	bhi.n	801049a <__multiply+0x8e>
 80104d0:	602e      	str	r6, [r5, #0]
 80104d2:	6813      	ldr	r3, [r2, #0]
 80104d4:	0c1b      	lsrs	r3, r3, #16
 80104d6:	9303      	str	r3, [sp, #12]
 80104d8:	d01e      	beq.n	8010518 <__multiply+0x10c>
 80104da:	2600      	movs	r6, #0
 80104dc:	9b00      	ldr	r3, [sp, #0]
 80104de:	9c02      	ldr	r4, [sp, #8]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	9800      	ldr	r0, [sp, #0]
 80104e4:	0007      	movs	r7, r0
 80104e6:	8821      	ldrh	r1, [r4, #0]
 80104e8:	9d03      	ldr	r5, [sp, #12]
 80104ea:	b29b      	uxth	r3, r3
 80104ec:	4369      	muls	r1, r5
 80104ee:	c820      	ldmia	r0!, {r5}
 80104f0:	0c2d      	lsrs	r5, r5, #16
 80104f2:	1949      	adds	r1, r1, r5
 80104f4:	198e      	adds	r6, r1, r6
 80104f6:	0431      	lsls	r1, r6, #16
 80104f8:	430b      	orrs	r3, r1
 80104fa:	603b      	str	r3, [r7, #0]
 80104fc:	cc08      	ldmia	r4!, {r3}
 80104fe:	9903      	ldr	r1, [sp, #12]
 8010500:	0c1b      	lsrs	r3, r3, #16
 8010502:	434b      	muls	r3, r1
 8010504:	6879      	ldr	r1, [r7, #4]
 8010506:	0c36      	lsrs	r6, r6, #16
 8010508:	b289      	uxth	r1, r1
 801050a:	185b      	adds	r3, r3, r1
 801050c:	9905      	ldr	r1, [sp, #20]
 801050e:	199b      	adds	r3, r3, r6
 8010510:	0c1e      	lsrs	r6, r3, #16
 8010512:	42a1      	cmp	r1, r4
 8010514:	d8e6      	bhi.n	80104e4 <__multiply+0xd8>
 8010516:	6003      	str	r3, [r0, #0]
 8010518:	9b00      	ldr	r3, [sp, #0]
 801051a:	3204      	adds	r2, #4
 801051c:	3304      	adds	r3, #4
 801051e:	9300      	str	r3, [sp, #0]
 8010520:	e7a0      	b.n	8010464 <__multiply+0x58>
 8010522:	9b01      	ldr	r3, [sp, #4]
 8010524:	3b01      	subs	r3, #1
 8010526:	9301      	str	r3, [sp, #4]
 8010528:	e79f      	b.n	801046a <__multiply+0x5e>
	...

0801052c <__pow5mult>:
 801052c:	2303      	movs	r3, #3
 801052e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010530:	4013      	ands	r3, r2
 8010532:	0005      	movs	r5, r0
 8010534:	000e      	movs	r6, r1
 8010536:	0014      	movs	r4, r2
 8010538:	2b00      	cmp	r3, #0
 801053a:	d008      	beq.n	801054e <__pow5mult+0x22>
 801053c:	4922      	ldr	r1, [pc, #136]	; (80105c8 <__pow5mult+0x9c>)
 801053e:	3b01      	subs	r3, #1
 8010540:	009a      	lsls	r2, r3, #2
 8010542:	5852      	ldr	r2, [r2, r1]
 8010544:	2300      	movs	r3, #0
 8010546:	0031      	movs	r1, r6
 8010548:	f7ff fed2 	bl	80102f0 <__multadd>
 801054c:	0006      	movs	r6, r0
 801054e:	10a3      	asrs	r3, r4, #2
 8010550:	9301      	str	r3, [sp, #4]
 8010552:	d036      	beq.n	80105c2 <__pow5mult+0x96>
 8010554:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8010556:	2c00      	cmp	r4, #0
 8010558:	d107      	bne.n	801056a <__pow5mult+0x3e>
 801055a:	2010      	movs	r0, #16
 801055c:	f7fd fbfe 	bl	800dd5c <malloc>
 8010560:	6268      	str	r0, [r5, #36]	; 0x24
 8010562:	6044      	str	r4, [r0, #4]
 8010564:	6084      	str	r4, [r0, #8]
 8010566:	6004      	str	r4, [r0, #0]
 8010568:	60c4      	str	r4, [r0, #12]
 801056a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 801056c:	68bc      	ldr	r4, [r7, #8]
 801056e:	2c00      	cmp	r4, #0
 8010570:	d107      	bne.n	8010582 <__pow5mult+0x56>
 8010572:	4916      	ldr	r1, [pc, #88]	; (80105cc <__pow5mult+0xa0>)
 8010574:	0028      	movs	r0, r5
 8010576:	f7ff ff40 	bl	80103fa <__i2b>
 801057a:	2300      	movs	r3, #0
 801057c:	0004      	movs	r4, r0
 801057e:	60b8      	str	r0, [r7, #8]
 8010580:	6003      	str	r3, [r0, #0]
 8010582:	2201      	movs	r2, #1
 8010584:	9b01      	ldr	r3, [sp, #4]
 8010586:	4213      	tst	r3, r2
 8010588:	d00a      	beq.n	80105a0 <__pow5mult+0x74>
 801058a:	0031      	movs	r1, r6
 801058c:	0022      	movs	r2, r4
 801058e:	0028      	movs	r0, r5
 8010590:	f7ff ff3c 	bl	801040c <__multiply>
 8010594:	0007      	movs	r7, r0
 8010596:	0031      	movs	r1, r6
 8010598:	0028      	movs	r0, r5
 801059a:	f7ff fe90 	bl	80102be <_Bfree>
 801059e:	003e      	movs	r6, r7
 80105a0:	9b01      	ldr	r3, [sp, #4]
 80105a2:	105b      	asrs	r3, r3, #1
 80105a4:	9301      	str	r3, [sp, #4]
 80105a6:	d00c      	beq.n	80105c2 <__pow5mult+0x96>
 80105a8:	6820      	ldr	r0, [r4, #0]
 80105aa:	2800      	cmp	r0, #0
 80105ac:	d107      	bne.n	80105be <__pow5mult+0x92>
 80105ae:	0022      	movs	r2, r4
 80105b0:	0021      	movs	r1, r4
 80105b2:	0028      	movs	r0, r5
 80105b4:	f7ff ff2a 	bl	801040c <__multiply>
 80105b8:	2300      	movs	r3, #0
 80105ba:	6020      	str	r0, [r4, #0]
 80105bc:	6003      	str	r3, [r0, #0]
 80105be:	0004      	movs	r4, r0
 80105c0:	e7df      	b.n	8010582 <__pow5mult+0x56>
 80105c2:	0030      	movs	r0, r6
 80105c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80105c6:	46c0      	nop			; (mov r8, r8)
 80105c8:	08013e48 	.word	0x08013e48
 80105cc:	00000271 	.word	0x00000271

080105d0 <__lshift>:
 80105d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105d2:	000d      	movs	r5, r1
 80105d4:	0017      	movs	r7, r2
 80105d6:	692b      	ldr	r3, [r5, #16]
 80105d8:	1154      	asrs	r4, r2, #5
 80105da:	b085      	sub	sp, #20
 80105dc:	18e3      	adds	r3, r4, r3
 80105de:	9302      	str	r3, [sp, #8]
 80105e0:	3301      	adds	r3, #1
 80105e2:	9301      	str	r3, [sp, #4]
 80105e4:	6849      	ldr	r1, [r1, #4]
 80105e6:	68ab      	ldr	r3, [r5, #8]
 80105e8:	9003      	str	r0, [sp, #12]
 80105ea:	9a01      	ldr	r2, [sp, #4]
 80105ec:	4293      	cmp	r3, r2
 80105ee:	db34      	blt.n	801065a <__lshift+0x8a>
 80105f0:	9803      	ldr	r0, [sp, #12]
 80105f2:	f7ff fe2c 	bl	801024e <_Balloc>
 80105f6:	2300      	movs	r3, #0
 80105f8:	0002      	movs	r2, r0
 80105fa:	0006      	movs	r6, r0
 80105fc:	0019      	movs	r1, r3
 80105fe:	3214      	adds	r2, #20
 8010600:	42a3      	cmp	r3, r4
 8010602:	db2d      	blt.n	8010660 <__lshift+0x90>
 8010604:	43e3      	mvns	r3, r4
 8010606:	17db      	asrs	r3, r3, #31
 8010608:	401c      	ands	r4, r3
 801060a:	002b      	movs	r3, r5
 801060c:	211f      	movs	r1, #31
 801060e:	00a4      	lsls	r4, r4, #2
 8010610:	1914      	adds	r4, r2, r4
 8010612:	692a      	ldr	r2, [r5, #16]
 8010614:	3314      	adds	r3, #20
 8010616:	0092      	lsls	r2, r2, #2
 8010618:	189a      	adds	r2, r3, r2
 801061a:	400f      	ands	r7, r1
 801061c:	d024      	beq.n	8010668 <__lshift+0x98>
 801061e:	3101      	adds	r1, #1
 8010620:	1bc9      	subs	r1, r1, r7
 8010622:	468c      	mov	ip, r1
 8010624:	2100      	movs	r1, #0
 8010626:	6818      	ldr	r0, [r3, #0]
 8010628:	40b8      	lsls	r0, r7
 801062a:	4301      	orrs	r1, r0
 801062c:	4660      	mov	r0, ip
 801062e:	6021      	str	r1, [r4, #0]
 8010630:	cb02      	ldmia	r3!, {r1}
 8010632:	3404      	adds	r4, #4
 8010634:	40c1      	lsrs	r1, r0
 8010636:	429a      	cmp	r2, r3
 8010638:	d8f5      	bhi.n	8010626 <__lshift+0x56>
 801063a:	6021      	str	r1, [r4, #0]
 801063c:	2900      	cmp	r1, #0
 801063e:	d002      	beq.n	8010646 <__lshift+0x76>
 8010640:	9b02      	ldr	r3, [sp, #8]
 8010642:	3302      	adds	r3, #2
 8010644:	9301      	str	r3, [sp, #4]
 8010646:	9b01      	ldr	r3, [sp, #4]
 8010648:	9803      	ldr	r0, [sp, #12]
 801064a:	3b01      	subs	r3, #1
 801064c:	6133      	str	r3, [r6, #16]
 801064e:	0029      	movs	r1, r5
 8010650:	f7ff fe35 	bl	80102be <_Bfree>
 8010654:	0030      	movs	r0, r6
 8010656:	b005      	add	sp, #20
 8010658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801065a:	3101      	adds	r1, #1
 801065c:	005b      	lsls	r3, r3, #1
 801065e:	e7c4      	b.n	80105ea <__lshift+0x1a>
 8010660:	0098      	lsls	r0, r3, #2
 8010662:	5011      	str	r1, [r2, r0]
 8010664:	3301      	adds	r3, #1
 8010666:	e7cb      	b.n	8010600 <__lshift+0x30>
 8010668:	cb02      	ldmia	r3!, {r1}
 801066a:	c402      	stmia	r4!, {r1}
 801066c:	429a      	cmp	r2, r3
 801066e:	d8fb      	bhi.n	8010668 <__lshift+0x98>
 8010670:	e7e9      	b.n	8010646 <__lshift+0x76>

08010672 <__mcmp>:
 8010672:	690a      	ldr	r2, [r1, #16]
 8010674:	6903      	ldr	r3, [r0, #16]
 8010676:	b530      	push	{r4, r5, lr}
 8010678:	1a9b      	subs	r3, r3, r2
 801067a:	d10e      	bne.n	801069a <__mcmp+0x28>
 801067c:	0092      	lsls	r2, r2, #2
 801067e:	3014      	adds	r0, #20
 8010680:	3114      	adds	r1, #20
 8010682:	1884      	adds	r4, r0, r2
 8010684:	1889      	adds	r1, r1, r2
 8010686:	3c04      	subs	r4, #4
 8010688:	3904      	subs	r1, #4
 801068a:	6822      	ldr	r2, [r4, #0]
 801068c:	680d      	ldr	r5, [r1, #0]
 801068e:	42aa      	cmp	r2, r5
 8010690:	d005      	beq.n	801069e <__mcmp+0x2c>
 8010692:	42aa      	cmp	r2, r5
 8010694:	4192      	sbcs	r2, r2
 8010696:	2301      	movs	r3, #1
 8010698:	4313      	orrs	r3, r2
 801069a:	0018      	movs	r0, r3
 801069c:	bd30      	pop	{r4, r5, pc}
 801069e:	42a0      	cmp	r0, r4
 80106a0:	d3f1      	bcc.n	8010686 <__mcmp+0x14>
 80106a2:	e7fa      	b.n	801069a <__mcmp+0x28>

080106a4 <__mdiff>:
 80106a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106a6:	000d      	movs	r5, r1
 80106a8:	b085      	sub	sp, #20
 80106aa:	0007      	movs	r7, r0
 80106ac:	0011      	movs	r1, r2
 80106ae:	0028      	movs	r0, r5
 80106b0:	0014      	movs	r4, r2
 80106b2:	f7ff ffde 	bl	8010672 <__mcmp>
 80106b6:	1e06      	subs	r6, r0, #0
 80106b8:	d108      	bne.n	80106cc <__mdiff+0x28>
 80106ba:	0001      	movs	r1, r0
 80106bc:	0038      	movs	r0, r7
 80106be:	f7ff fdc6 	bl	801024e <_Balloc>
 80106c2:	2301      	movs	r3, #1
 80106c4:	6146      	str	r6, [r0, #20]
 80106c6:	6103      	str	r3, [r0, #16]
 80106c8:	b005      	add	sp, #20
 80106ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106cc:	2301      	movs	r3, #1
 80106ce:	9301      	str	r3, [sp, #4]
 80106d0:	2800      	cmp	r0, #0
 80106d2:	db04      	blt.n	80106de <__mdiff+0x3a>
 80106d4:	0023      	movs	r3, r4
 80106d6:	002c      	movs	r4, r5
 80106d8:	001d      	movs	r5, r3
 80106da:	2300      	movs	r3, #0
 80106dc:	9301      	str	r3, [sp, #4]
 80106de:	6861      	ldr	r1, [r4, #4]
 80106e0:	0038      	movs	r0, r7
 80106e2:	f7ff fdb4 	bl	801024e <_Balloc>
 80106e6:	002f      	movs	r7, r5
 80106e8:	2200      	movs	r2, #0
 80106ea:	9b01      	ldr	r3, [sp, #4]
 80106ec:	6926      	ldr	r6, [r4, #16]
 80106ee:	60c3      	str	r3, [r0, #12]
 80106f0:	3414      	adds	r4, #20
 80106f2:	00b3      	lsls	r3, r6, #2
 80106f4:	18e3      	adds	r3, r4, r3
 80106f6:	9302      	str	r3, [sp, #8]
 80106f8:	692b      	ldr	r3, [r5, #16]
 80106fa:	3714      	adds	r7, #20
 80106fc:	009b      	lsls	r3, r3, #2
 80106fe:	18fb      	adds	r3, r7, r3
 8010700:	9303      	str	r3, [sp, #12]
 8010702:	0003      	movs	r3, r0
 8010704:	4694      	mov	ip, r2
 8010706:	3314      	adds	r3, #20
 8010708:	cc20      	ldmia	r4!, {r5}
 801070a:	cf04      	ldmia	r7!, {r2}
 801070c:	9201      	str	r2, [sp, #4]
 801070e:	b2aa      	uxth	r2, r5
 8010710:	4494      	add	ip, r2
 8010712:	466a      	mov	r2, sp
 8010714:	4661      	mov	r1, ip
 8010716:	8892      	ldrh	r2, [r2, #4]
 8010718:	0c2d      	lsrs	r5, r5, #16
 801071a:	1a8a      	subs	r2, r1, r2
 801071c:	9901      	ldr	r1, [sp, #4]
 801071e:	0c09      	lsrs	r1, r1, #16
 8010720:	1a69      	subs	r1, r5, r1
 8010722:	1415      	asrs	r5, r2, #16
 8010724:	1949      	adds	r1, r1, r5
 8010726:	140d      	asrs	r5, r1, #16
 8010728:	b292      	uxth	r2, r2
 801072a:	0409      	lsls	r1, r1, #16
 801072c:	430a      	orrs	r2, r1
 801072e:	601a      	str	r2, [r3, #0]
 8010730:	9a03      	ldr	r2, [sp, #12]
 8010732:	46ac      	mov	ip, r5
 8010734:	3304      	adds	r3, #4
 8010736:	42ba      	cmp	r2, r7
 8010738:	d8e6      	bhi.n	8010708 <__mdiff+0x64>
 801073a:	9902      	ldr	r1, [sp, #8]
 801073c:	001a      	movs	r2, r3
 801073e:	428c      	cmp	r4, r1
 8010740:	d305      	bcc.n	801074e <__mdiff+0xaa>
 8010742:	3a04      	subs	r2, #4
 8010744:	6813      	ldr	r3, [r2, #0]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d00e      	beq.n	8010768 <__mdiff+0xc4>
 801074a:	6106      	str	r6, [r0, #16]
 801074c:	e7bc      	b.n	80106c8 <__mdiff+0x24>
 801074e:	cc04      	ldmia	r4!, {r2}
 8010750:	b291      	uxth	r1, r2
 8010752:	4461      	add	r1, ip
 8010754:	140d      	asrs	r5, r1, #16
 8010756:	0c12      	lsrs	r2, r2, #16
 8010758:	1952      	adds	r2, r2, r5
 801075a:	1415      	asrs	r5, r2, #16
 801075c:	b289      	uxth	r1, r1
 801075e:	0412      	lsls	r2, r2, #16
 8010760:	430a      	orrs	r2, r1
 8010762:	46ac      	mov	ip, r5
 8010764:	c304      	stmia	r3!, {r2}
 8010766:	e7e8      	b.n	801073a <__mdiff+0x96>
 8010768:	3e01      	subs	r6, #1
 801076a:	e7ea      	b.n	8010742 <__mdiff+0x9e>

0801076c <__d2b>:
 801076c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801076e:	001d      	movs	r5, r3
 8010770:	2101      	movs	r1, #1
 8010772:	9f08      	ldr	r7, [sp, #32]
 8010774:	0014      	movs	r4, r2
 8010776:	f7ff fd6a 	bl	801024e <_Balloc>
 801077a:	032b      	lsls	r3, r5, #12
 801077c:	006d      	lsls	r5, r5, #1
 801077e:	0006      	movs	r6, r0
 8010780:	0b1b      	lsrs	r3, r3, #12
 8010782:	0d6d      	lsrs	r5, r5, #21
 8010784:	d124      	bne.n	80107d0 <__d2b+0x64>
 8010786:	9301      	str	r3, [sp, #4]
 8010788:	2c00      	cmp	r4, #0
 801078a:	d027      	beq.n	80107dc <__d2b+0x70>
 801078c:	4668      	mov	r0, sp
 801078e:	9400      	str	r4, [sp, #0]
 8010790:	f7ff fe04 	bl	801039c <__lo0bits>
 8010794:	9c00      	ldr	r4, [sp, #0]
 8010796:	2800      	cmp	r0, #0
 8010798:	d01e      	beq.n	80107d8 <__d2b+0x6c>
 801079a:	9b01      	ldr	r3, [sp, #4]
 801079c:	2120      	movs	r1, #32
 801079e:	001a      	movs	r2, r3
 80107a0:	1a09      	subs	r1, r1, r0
 80107a2:	408a      	lsls	r2, r1
 80107a4:	40c3      	lsrs	r3, r0
 80107a6:	4322      	orrs	r2, r4
 80107a8:	6172      	str	r2, [r6, #20]
 80107aa:	9301      	str	r3, [sp, #4]
 80107ac:	9c01      	ldr	r4, [sp, #4]
 80107ae:	61b4      	str	r4, [r6, #24]
 80107b0:	1e63      	subs	r3, r4, #1
 80107b2:	419c      	sbcs	r4, r3
 80107b4:	3401      	adds	r4, #1
 80107b6:	6134      	str	r4, [r6, #16]
 80107b8:	2d00      	cmp	r5, #0
 80107ba:	d018      	beq.n	80107ee <__d2b+0x82>
 80107bc:	4b12      	ldr	r3, [pc, #72]	; (8010808 <__d2b+0x9c>)
 80107be:	18ed      	adds	r5, r5, r3
 80107c0:	2335      	movs	r3, #53	; 0x35
 80107c2:	182d      	adds	r5, r5, r0
 80107c4:	603d      	str	r5, [r7, #0]
 80107c6:	1a18      	subs	r0, r3, r0
 80107c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107ca:	6018      	str	r0, [r3, #0]
 80107cc:	0030      	movs	r0, r6
 80107ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80107d0:	2280      	movs	r2, #128	; 0x80
 80107d2:	0352      	lsls	r2, r2, #13
 80107d4:	4313      	orrs	r3, r2
 80107d6:	e7d6      	b.n	8010786 <__d2b+0x1a>
 80107d8:	6174      	str	r4, [r6, #20]
 80107da:	e7e7      	b.n	80107ac <__d2b+0x40>
 80107dc:	a801      	add	r0, sp, #4
 80107de:	f7ff fddd 	bl	801039c <__lo0bits>
 80107e2:	2401      	movs	r4, #1
 80107e4:	9b01      	ldr	r3, [sp, #4]
 80107e6:	6134      	str	r4, [r6, #16]
 80107e8:	6173      	str	r3, [r6, #20]
 80107ea:	3020      	adds	r0, #32
 80107ec:	e7e4      	b.n	80107b8 <__d2b+0x4c>
 80107ee:	4b07      	ldr	r3, [pc, #28]	; (801080c <__d2b+0xa0>)
 80107f0:	18c0      	adds	r0, r0, r3
 80107f2:	4b07      	ldr	r3, [pc, #28]	; (8010810 <__d2b+0xa4>)
 80107f4:	6038      	str	r0, [r7, #0]
 80107f6:	18e3      	adds	r3, r4, r3
 80107f8:	009b      	lsls	r3, r3, #2
 80107fa:	18f3      	adds	r3, r6, r3
 80107fc:	6958      	ldr	r0, [r3, #20]
 80107fe:	f7ff fdb3 	bl	8010368 <__hi0bits>
 8010802:	0164      	lsls	r4, r4, #5
 8010804:	1a20      	subs	r0, r4, r0
 8010806:	e7df      	b.n	80107c8 <__d2b+0x5c>
 8010808:	fffffbcd 	.word	0xfffffbcd
 801080c:	fffffbce 	.word	0xfffffbce
 8010810:	3fffffff 	.word	0x3fffffff

08010814 <__ssprint_r>:
 8010814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010816:	6893      	ldr	r3, [r2, #8]
 8010818:	b087      	sub	sp, #28
 801081a:	9002      	str	r0, [sp, #8]
 801081c:	000c      	movs	r4, r1
 801081e:	0016      	movs	r6, r2
 8010820:	2b00      	cmp	r3, #0
 8010822:	d063      	beq.n	80108ec <__ssprint_r+0xd8>
 8010824:	6813      	ldr	r3, [r2, #0]
 8010826:	9303      	str	r3, [sp, #12]
 8010828:	2300      	movs	r3, #0
 801082a:	001f      	movs	r7, r3
 801082c:	9305      	str	r3, [sp, #20]
 801082e:	2f00      	cmp	r7, #0
 8010830:	d02e      	beq.n	8010890 <__ssprint_r+0x7c>
 8010832:	68a5      	ldr	r5, [r4, #8]
 8010834:	42af      	cmp	r7, r5
 8010836:	d349      	bcc.n	80108cc <__ssprint_r+0xb8>
 8010838:	2390      	movs	r3, #144	; 0x90
 801083a:	89a2      	ldrh	r2, [r4, #12]
 801083c:	00db      	lsls	r3, r3, #3
 801083e:	421a      	tst	r2, r3
 8010840:	d042      	beq.n	80108c8 <__ssprint_r+0xb4>
 8010842:	2003      	movs	r0, #3
 8010844:	6921      	ldr	r1, [r4, #16]
 8010846:	6823      	ldr	r3, [r4, #0]
 8010848:	1a5b      	subs	r3, r3, r1
 801084a:	9304      	str	r3, [sp, #16]
 801084c:	6963      	ldr	r3, [r4, #20]
 801084e:	4343      	muls	r3, r0
 8010850:	0fd8      	lsrs	r0, r3, #31
 8010852:	18c3      	adds	r3, r0, r3
 8010854:	105b      	asrs	r3, r3, #1
 8010856:	9301      	str	r3, [sp, #4]
 8010858:	9b04      	ldr	r3, [sp, #16]
 801085a:	9801      	ldr	r0, [sp, #4]
 801085c:	3301      	adds	r3, #1
 801085e:	19db      	adds	r3, r3, r7
 8010860:	4283      	cmp	r3, r0
 8010862:	d900      	bls.n	8010866 <__ssprint_r+0x52>
 8010864:	9301      	str	r3, [sp, #4]
 8010866:	0553      	lsls	r3, r2, #21
 8010868:	d544      	bpl.n	80108f4 <__ssprint_r+0xe0>
 801086a:	9901      	ldr	r1, [sp, #4]
 801086c:	9802      	ldr	r0, [sp, #8]
 801086e:	f7fd fa89 	bl	800dd84 <_malloc_r>
 8010872:	1e05      	subs	r5, r0, #0
 8010874:	d114      	bne.n	80108a0 <__ssprint_r+0x8c>
 8010876:	230c      	movs	r3, #12
 8010878:	9a02      	ldr	r2, [sp, #8]
 801087a:	2001      	movs	r0, #1
 801087c:	6013      	str	r3, [r2, #0]
 801087e:	2340      	movs	r3, #64	; 0x40
 8010880:	89a2      	ldrh	r2, [r4, #12]
 8010882:	4240      	negs	r0, r0
 8010884:	4313      	orrs	r3, r2
 8010886:	81a3      	strh	r3, [r4, #12]
 8010888:	2300      	movs	r3, #0
 801088a:	60b3      	str	r3, [r6, #8]
 801088c:	6073      	str	r3, [r6, #4]
 801088e:	e02f      	b.n	80108f0 <__ssprint_r+0xdc>
 8010890:	9b03      	ldr	r3, [sp, #12]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	9305      	str	r3, [sp, #20]
 8010896:	9b03      	ldr	r3, [sp, #12]
 8010898:	685f      	ldr	r7, [r3, #4]
 801089a:	3308      	adds	r3, #8
 801089c:	9303      	str	r3, [sp, #12]
 801089e:	e7c6      	b.n	801082e <__ssprint_r+0x1a>
 80108a0:	9a04      	ldr	r2, [sp, #16]
 80108a2:	6921      	ldr	r1, [r4, #16]
 80108a4:	f7fd fc72 	bl	800e18c <memcpy>
 80108a8:	89a3      	ldrh	r3, [r4, #12]
 80108aa:	4a18      	ldr	r2, [pc, #96]	; (801090c <__ssprint_r+0xf8>)
 80108ac:	401a      	ands	r2, r3
 80108ae:	2380      	movs	r3, #128	; 0x80
 80108b0:	4313      	orrs	r3, r2
 80108b2:	81a3      	strh	r3, [r4, #12]
 80108b4:	9b04      	ldr	r3, [sp, #16]
 80108b6:	6125      	str	r5, [r4, #16]
 80108b8:	18ed      	adds	r5, r5, r3
 80108ba:	6025      	str	r5, [r4, #0]
 80108bc:	003d      	movs	r5, r7
 80108be:	9b01      	ldr	r3, [sp, #4]
 80108c0:	9a04      	ldr	r2, [sp, #16]
 80108c2:	6163      	str	r3, [r4, #20]
 80108c4:	1a9b      	subs	r3, r3, r2
 80108c6:	60a3      	str	r3, [r4, #8]
 80108c8:	42af      	cmp	r7, r5
 80108ca:	d200      	bcs.n	80108ce <__ssprint_r+0xba>
 80108cc:	003d      	movs	r5, r7
 80108ce:	002a      	movs	r2, r5
 80108d0:	9905      	ldr	r1, [sp, #20]
 80108d2:	6820      	ldr	r0, [r4, #0]
 80108d4:	f000 f85a 	bl	801098c <memmove>
 80108d8:	68a3      	ldr	r3, [r4, #8]
 80108da:	1b5b      	subs	r3, r3, r5
 80108dc:	60a3      	str	r3, [r4, #8]
 80108de:	6823      	ldr	r3, [r4, #0]
 80108e0:	195d      	adds	r5, r3, r5
 80108e2:	68b3      	ldr	r3, [r6, #8]
 80108e4:	6025      	str	r5, [r4, #0]
 80108e6:	1bdb      	subs	r3, r3, r7
 80108e8:	60b3      	str	r3, [r6, #8]
 80108ea:	d1d1      	bne.n	8010890 <__ssprint_r+0x7c>
 80108ec:	2000      	movs	r0, #0
 80108ee:	6070      	str	r0, [r6, #4]
 80108f0:	b007      	add	sp, #28
 80108f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108f4:	9a01      	ldr	r2, [sp, #4]
 80108f6:	9802      	ldr	r0, [sp, #8]
 80108f8:	f000 f85a 	bl	80109b0 <_realloc_r>
 80108fc:	1e05      	subs	r5, r0, #0
 80108fe:	d1d9      	bne.n	80108b4 <__ssprint_r+0xa0>
 8010900:	6921      	ldr	r1, [r4, #16]
 8010902:	9802      	ldr	r0, [sp, #8]
 8010904:	f7ff fbd6 	bl	80100b4 <_free_r>
 8010908:	e7b5      	b.n	8010876 <__ssprint_r+0x62>
 801090a:	46c0      	nop			; (mov r8, r8)
 801090c:	fffffb7f 	.word	0xfffffb7f

08010910 <_calloc_r>:
 8010910:	b510      	push	{r4, lr}
 8010912:	4351      	muls	r1, r2
 8010914:	f7fd fa36 	bl	800dd84 <_malloc_r>
 8010918:	1e04      	subs	r4, r0, #0
 801091a:	d01a      	beq.n	8010952 <_calloc_r+0x42>
 801091c:	0003      	movs	r3, r0
 801091e:	3b08      	subs	r3, #8
 8010920:	685a      	ldr	r2, [r3, #4]
 8010922:	2303      	movs	r3, #3
 8010924:	439a      	bics	r2, r3
 8010926:	3a04      	subs	r2, #4
 8010928:	2a24      	cmp	r2, #36	; 0x24
 801092a:	d819      	bhi.n	8010960 <_calloc_r+0x50>
 801092c:	0003      	movs	r3, r0
 801092e:	2a13      	cmp	r2, #19
 8010930:	d90b      	bls.n	801094a <_calloc_r+0x3a>
 8010932:	2100      	movs	r1, #0
 8010934:	3308      	adds	r3, #8
 8010936:	6001      	str	r1, [r0, #0]
 8010938:	6041      	str	r1, [r0, #4]
 801093a:	2a1b      	cmp	r2, #27
 801093c:	d905      	bls.n	801094a <_calloc_r+0x3a>
 801093e:	6081      	str	r1, [r0, #8]
 8010940:	60c1      	str	r1, [r0, #12]
 8010942:	2a24      	cmp	r2, #36	; 0x24
 8010944:	d007      	beq.n	8010956 <_calloc_r+0x46>
 8010946:	0003      	movs	r3, r0
 8010948:	3310      	adds	r3, #16
 801094a:	2200      	movs	r2, #0
 801094c:	601a      	str	r2, [r3, #0]
 801094e:	605a      	str	r2, [r3, #4]
 8010950:	609a      	str	r2, [r3, #8]
 8010952:	0020      	movs	r0, r4
 8010954:	bd10      	pop	{r4, pc}
 8010956:	0003      	movs	r3, r0
 8010958:	6101      	str	r1, [r0, #16]
 801095a:	3318      	adds	r3, #24
 801095c:	6141      	str	r1, [r0, #20]
 801095e:	e7f4      	b.n	801094a <_calloc_r+0x3a>
 8010960:	2100      	movs	r1, #0
 8010962:	f7fd fc1c 	bl	800e19e <memset>
 8010966:	e7f4      	b.n	8010952 <_calloc_r+0x42>

08010968 <__ascii_mbtowc>:
 8010968:	b082      	sub	sp, #8
 801096a:	2900      	cmp	r1, #0
 801096c:	d100      	bne.n	8010970 <__ascii_mbtowc+0x8>
 801096e:	a901      	add	r1, sp, #4
 8010970:	1e10      	subs	r0, r2, #0
 8010972:	d006      	beq.n	8010982 <__ascii_mbtowc+0x1a>
 8010974:	2b00      	cmp	r3, #0
 8010976:	d006      	beq.n	8010986 <__ascii_mbtowc+0x1e>
 8010978:	7813      	ldrb	r3, [r2, #0]
 801097a:	600b      	str	r3, [r1, #0]
 801097c:	7810      	ldrb	r0, [r2, #0]
 801097e:	1e43      	subs	r3, r0, #1
 8010980:	4198      	sbcs	r0, r3
 8010982:	b002      	add	sp, #8
 8010984:	4770      	bx	lr
 8010986:	2002      	movs	r0, #2
 8010988:	4240      	negs	r0, r0
 801098a:	e7fa      	b.n	8010982 <__ascii_mbtowc+0x1a>

0801098c <memmove>:
 801098c:	b510      	push	{r4, lr}
 801098e:	4288      	cmp	r0, r1
 8010990:	d902      	bls.n	8010998 <memmove+0xc>
 8010992:	188b      	adds	r3, r1, r2
 8010994:	4298      	cmp	r0, r3
 8010996:	d308      	bcc.n	80109aa <memmove+0x1e>
 8010998:	2300      	movs	r3, #0
 801099a:	429a      	cmp	r2, r3
 801099c:	d007      	beq.n	80109ae <memmove+0x22>
 801099e:	5ccc      	ldrb	r4, [r1, r3]
 80109a0:	54c4      	strb	r4, [r0, r3]
 80109a2:	3301      	adds	r3, #1
 80109a4:	e7f9      	b.n	801099a <memmove+0xe>
 80109a6:	5c8b      	ldrb	r3, [r1, r2]
 80109a8:	5483      	strb	r3, [r0, r2]
 80109aa:	3a01      	subs	r2, #1
 80109ac:	d2fb      	bcs.n	80109a6 <memmove+0x1a>
 80109ae:	bd10      	pop	{r4, pc}

080109b0 <_realloc_r>:
 80109b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109b2:	b087      	sub	sp, #28
 80109b4:	9002      	str	r0, [sp, #8]
 80109b6:	1e0c      	subs	r4, r1, #0
 80109b8:	9204      	str	r2, [sp, #16]
 80109ba:	d106      	bne.n	80109ca <_realloc_r+0x1a>
 80109bc:	0011      	movs	r1, r2
 80109be:	f7fd f9e1 	bl	800dd84 <_malloc_r>
 80109c2:	0006      	movs	r6, r0
 80109c4:	0030      	movs	r0, r6
 80109c6:	b007      	add	sp, #28
 80109c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109ca:	0027      	movs	r7, r4
 80109cc:	9802      	ldr	r0, [sp, #8]
 80109ce:	3f08      	subs	r7, #8
 80109d0:	f7fd fbee 	bl	800e1b0 <__malloc_lock>
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	2303      	movs	r3, #3
 80109d8:	0002      	movs	r2, r0
 80109da:	9e04      	ldr	r6, [sp, #16]
 80109dc:	439a      	bics	r2, r3
 80109de:	360b      	adds	r6, #11
 80109e0:	9203      	str	r2, [sp, #12]
 80109e2:	2e16      	cmp	r6, #22
 80109e4:	d908      	bls.n	80109f8 <_realloc_r+0x48>
 80109e6:	3304      	adds	r3, #4
 80109e8:	439e      	bics	r6, r3
 80109ea:	9601      	str	r6, [sp, #4]
 80109ec:	d506      	bpl.n	80109fc <_realloc_r+0x4c>
 80109ee:	230c      	movs	r3, #12
 80109f0:	9a02      	ldr	r2, [sp, #8]
 80109f2:	2600      	movs	r6, #0
 80109f4:	6013      	str	r3, [r2, #0]
 80109f6:	e7e5      	b.n	80109c4 <_realloc_r+0x14>
 80109f8:	2310      	movs	r3, #16
 80109fa:	9301      	str	r3, [sp, #4]
 80109fc:	9b01      	ldr	r3, [sp, #4]
 80109fe:	9a04      	ldr	r2, [sp, #16]
 8010a00:	4293      	cmp	r3, r2
 8010a02:	d3f4      	bcc.n	80109ee <_realloc_r+0x3e>
 8010a04:	9b01      	ldr	r3, [sp, #4]
 8010a06:	9a03      	ldr	r2, [sp, #12]
 8010a08:	4293      	cmp	r3, r2
 8010a0a:	dc00      	bgt.n	8010a0e <_realloc_r+0x5e>
 8010a0c:	e141      	b.n	8010c92 <_realloc_r+0x2e2>
 8010a0e:	18bb      	adds	r3, r7, r2
 8010a10:	4aa4      	ldr	r2, [pc, #656]	; (8010ca4 <_realloc_r+0x2f4>)
 8010a12:	6891      	ldr	r1, [r2, #8]
 8010a14:	468c      	mov	ip, r1
 8010a16:	428b      	cmp	r3, r1
 8010a18:	d006      	beq.n	8010a28 <_realloc_r+0x78>
 8010a1a:	2501      	movs	r5, #1
 8010a1c:	6859      	ldr	r1, [r3, #4]
 8010a1e:	43a9      	bics	r1, r5
 8010a20:	1859      	adds	r1, r3, r1
 8010a22:	6849      	ldr	r1, [r1, #4]
 8010a24:	4229      	tst	r1, r5
 8010a26:	d142      	bne.n	8010aae <_realloc_r+0xfe>
 8010a28:	2103      	movs	r1, #3
 8010a2a:	685d      	ldr	r5, [r3, #4]
 8010a2c:	438d      	bics	r5, r1
 8010a2e:	0029      	movs	r1, r5
 8010a30:	9d03      	ldr	r5, [sp, #12]
 8010a32:	186e      	adds	r6, r5, r1
 8010a34:	4563      	cmp	r3, ip
 8010a36:	d116      	bne.n	8010a66 <_realloc_r+0xb6>
 8010a38:	9d01      	ldr	r5, [sp, #4]
 8010a3a:	3510      	adds	r5, #16
 8010a3c:	42ae      	cmp	r6, r5
 8010a3e:	db38      	blt.n	8010ab2 <_realloc_r+0x102>
 8010a40:	9b01      	ldr	r3, [sp, #4]
 8010a42:	9802      	ldr	r0, [sp, #8]
 8010a44:	18ff      	adds	r7, r7, r3
 8010a46:	6097      	str	r7, [r2, #8]
 8010a48:	2201      	movs	r2, #1
 8010a4a:	1af6      	subs	r6, r6, r3
 8010a4c:	0023      	movs	r3, r4
 8010a4e:	4316      	orrs	r6, r2
 8010a50:	607e      	str	r6, [r7, #4]
 8010a52:	3b08      	subs	r3, #8
 8010a54:	685e      	ldr	r6, [r3, #4]
 8010a56:	4016      	ands	r6, r2
 8010a58:	9a01      	ldr	r2, [sp, #4]
 8010a5a:	4316      	orrs	r6, r2
 8010a5c:	605e      	str	r6, [r3, #4]
 8010a5e:	f7fd fbaf 	bl	800e1c0 <__malloc_unlock>
 8010a62:	0026      	movs	r6, r4
 8010a64:	e7ae      	b.n	80109c4 <_realloc_r+0x14>
 8010a66:	9a01      	ldr	r2, [sp, #4]
 8010a68:	42b2      	cmp	r2, r6
 8010a6a:	dc22      	bgt.n	8010ab2 <_realloc_r+0x102>
 8010a6c:	68da      	ldr	r2, [r3, #12]
 8010a6e:	689b      	ldr	r3, [r3, #8]
 8010a70:	60da      	str	r2, [r3, #12]
 8010a72:	6093      	str	r3, [r2, #8]
 8010a74:	9b01      	ldr	r3, [sp, #4]
 8010a76:	2201      	movs	r2, #1
 8010a78:	1af4      	subs	r4, r6, r3
 8010a7a:	19b8      	adds	r0, r7, r6
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	2c0f      	cmp	r4, #15
 8010a80:	d800      	bhi.n	8010a84 <_realloc_r+0xd4>
 8010a82:	e108      	b.n	8010c96 <_realloc_r+0x2e6>
 8010a84:	9901      	ldr	r1, [sp, #4]
 8010a86:	9d01      	ldr	r5, [sp, #4]
 8010a88:	4013      	ands	r3, r2
 8010a8a:	1879      	adds	r1, r7, r1
 8010a8c:	432b      	orrs	r3, r5
 8010a8e:	4314      	orrs	r4, r2
 8010a90:	607b      	str	r3, [r7, #4]
 8010a92:	604c      	str	r4, [r1, #4]
 8010a94:	6843      	ldr	r3, [r0, #4]
 8010a96:	3108      	adds	r1, #8
 8010a98:	431a      	orrs	r2, r3
 8010a9a:	6042      	str	r2, [r0, #4]
 8010a9c:	9802      	ldr	r0, [sp, #8]
 8010a9e:	f7ff fb09 	bl	80100b4 <_free_r>
 8010aa2:	003e      	movs	r6, r7
 8010aa4:	9802      	ldr	r0, [sp, #8]
 8010aa6:	f7fd fb8b 	bl	800e1c0 <__malloc_unlock>
 8010aaa:	3608      	adds	r6, #8
 8010aac:	e78a      	b.n	80109c4 <_realloc_r+0x14>
 8010aae:	2100      	movs	r1, #0
 8010ab0:	000b      	movs	r3, r1
 8010ab2:	07c2      	lsls	r2, r0, #31
 8010ab4:	d500      	bpl.n	8010ab8 <_realloc_r+0x108>
 8010ab6:	e088      	b.n	8010bca <_realloc_r+0x21a>
 8010ab8:	0022      	movs	r2, r4
 8010aba:	3a08      	subs	r2, #8
 8010abc:	6815      	ldr	r5, [r2, #0]
 8010abe:	2203      	movs	r2, #3
 8010ac0:	1b7d      	subs	r5, r7, r5
 8010ac2:	6868      	ldr	r0, [r5, #4]
 8010ac4:	4390      	bics	r0, r2
 8010ac6:	0002      	movs	r2, r0
 8010ac8:	9803      	ldr	r0, [sp, #12]
 8010aca:	1882      	adds	r2, r0, r2
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d078      	beq.n	8010bc2 <_realloc_r+0x212>
 8010ad0:	4563      	cmp	r3, ip
 8010ad2:	d150      	bne.n	8010b76 <_realloc_r+0x1c6>
 8010ad4:	1853      	adds	r3, r2, r1
 8010ad6:	9305      	str	r3, [sp, #20]
 8010ad8:	9b01      	ldr	r3, [sp, #4]
 8010ada:	9905      	ldr	r1, [sp, #20]
 8010adc:	3310      	adds	r3, #16
 8010ade:	4299      	cmp	r1, r3
 8010ae0:	db6f      	blt.n	8010bc2 <_realloc_r+0x212>
 8010ae2:	68aa      	ldr	r2, [r5, #8]
 8010ae4:	68eb      	ldr	r3, [r5, #12]
 8010ae6:	002e      	movs	r6, r5
 8010ae8:	60d3      	str	r3, [r2, #12]
 8010aea:	609a      	str	r2, [r3, #8]
 8010aec:	0002      	movs	r2, r0
 8010aee:	3a04      	subs	r2, #4
 8010af0:	3608      	adds	r6, #8
 8010af2:	2a24      	cmp	r2, #36	; 0x24
 8010af4:	d83a      	bhi.n	8010b6c <_realloc_r+0x1bc>
 8010af6:	2a13      	cmp	r2, #19
 8010af8:	d935      	bls.n	8010b66 <_realloc_r+0x1b6>
 8010afa:	6823      	ldr	r3, [r4, #0]
 8010afc:	60ab      	str	r3, [r5, #8]
 8010afe:	6863      	ldr	r3, [r4, #4]
 8010b00:	60eb      	str	r3, [r5, #12]
 8010b02:	2a1b      	cmp	r2, #27
 8010b04:	d81b      	bhi.n	8010b3e <_realloc_r+0x18e>
 8010b06:	002b      	movs	r3, r5
 8010b08:	0022      	movs	r2, r4
 8010b0a:	3310      	adds	r3, #16
 8010b0c:	3208      	adds	r2, #8
 8010b0e:	6811      	ldr	r1, [r2, #0]
 8010b10:	6019      	str	r1, [r3, #0]
 8010b12:	6851      	ldr	r1, [r2, #4]
 8010b14:	6059      	str	r1, [r3, #4]
 8010b16:	6892      	ldr	r2, [r2, #8]
 8010b18:	609a      	str	r2, [r3, #8]
 8010b1a:	9b01      	ldr	r3, [sp, #4]
 8010b1c:	9901      	ldr	r1, [sp, #4]
 8010b1e:	18ea      	adds	r2, r5, r3
 8010b20:	4b60      	ldr	r3, [pc, #384]	; (8010ca4 <_realloc_r+0x2f4>)
 8010b22:	609a      	str	r2, [r3, #8]
 8010b24:	9b05      	ldr	r3, [sp, #20]
 8010b26:	1a5f      	subs	r7, r3, r1
 8010b28:	2301      	movs	r3, #1
 8010b2a:	431f      	orrs	r7, r3
 8010b2c:	6057      	str	r7, [r2, #4]
 8010b2e:	686a      	ldr	r2, [r5, #4]
 8010b30:	4013      	ands	r3, r2
 8010b32:	430b      	orrs	r3, r1
 8010b34:	606b      	str	r3, [r5, #4]
 8010b36:	9802      	ldr	r0, [sp, #8]
 8010b38:	f7fd fb42 	bl	800e1c0 <__malloc_unlock>
 8010b3c:	e742      	b.n	80109c4 <_realloc_r+0x14>
 8010b3e:	68a3      	ldr	r3, [r4, #8]
 8010b40:	612b      	str	r3, [r5, #16]
 8010b42:	68e3      	ldr	r3, [r4, #12]
 8010b44:	616b      	str	r3, [r5, #20]
 8010b46:	2a24      	cmp	r2, #36	; 0x24
 8010b48:	d004      	beq.n	8010b54 <_realloc_r+0x1a4>
 8010b4a:	002b      	movs	r3, r5
 8010b4c:	0022      	movs	r2, r4
 8010b4e:	3318      	adds	r3, #24
 8010b50:	3210      	adds	r2, #16
 8010b52:	e7dc      	b.n	8010b0e <_realloc_r+0x15e>
 8010b54:	6923      	ldr	r3, [r4, #16]
 8010b56:	0022      	movs	r2, r4
 8010b58:	61ab      	str	r3, [r5, #24]
 8010b5a:	002b      	movs	r3, r5
 8010b5c:	6961      	ldr	r1, [r4, #20]
 8010b5e:	3320      	adds	r3, #32
 8010b60:	3218      	adds	r2, #24
 8010b62:	61e9      	str	r1, [r5, #28]
 8010b64:	e7d3      	b.n	8010b0e <_realloc_r+0x15e>
 8010b66:	0033      	movs	r3, r6
 8010b68:	0022      	movs	r2, r4
 8010b6a:	e7d0      	b.n	8010b0e <_realloc_r+0x15e>
 8010b6c:	0021      	movs	r1, r4
 8010b6e:	0030      	movs	r0, r6
 8010b70:	f7ff ff0c 	bl	801098c <memmove>
 8010b74:	e7d1      	b.n	8010b1a <_realloc_r+0x16a>
 8010b76:	1856      	adds	r6, r2, r1
 8010b78:	9901      	ldr	r1, [sp, #4]
 8010b7a:	42b1      	cmp	r1, r6
 8010b7c:	dc21      	bgt.n	8010bc2 <_realloc_r+0x212>
 8010b7e:	68da      	ldr	r2, [r3, #12]
 8010b80:	689b      	ldr	r3, [r3, #8]
 8010b82:	60da      	str	r2, [r3, #12]
 8010b84:	6093      	str	r3, [r2, #8]
 8010b86:	0028      	movs	r0, r5
 8010b88:	68aa      	ldr	r2, [r5, #8]
 8010b8a:	68eb      	ldr	r3, [r5, #12]
 8010b8c:	3008      	adds	r0, #8
 8010b8e:	60d3      	str	r3, [r2, #12]
 8010b90:	609a      	str	r2, [r3, #8]
 8010b92:	9a03      	ldr	r2, [sp, #12]
 8010b94:	3a04      	subs	r2, #4
 8010b96:	2a24      	cmp	r2, #36	; 0x24
 8010b98:	d841      	bhi.n	8010c1e <_realloc_r+0x26e>
 8010b9a:	0023      	movs	r3, r4
 8010b9c:	2a13      	cmp	r2, #19
 8010b9e:	d908      	bls.n	8010bb2 <_realloc_r+0x202>
 8010ba0:	6823      	ldr	r3, [r4, #0]
 8010ba2:	60ab      	str	r3, [r5, #8]
 8010ba4:	6863      	ldr	r3, [r4, #4]
 8010ba6:	60eb      	str	r3, [r5, #12]
 8010ba8:	2a1b      	cmp	r2, #27
 8010baa:	d824      	bhi.n	8010bf6 <_realloc_r+0x246>
 8010bac:	0023      	movs	r3, r4
 8010bae:	3008      	adds	r0, #8
 8010bb0:	3308      	adds	r3, #8
 8010bb2:	681a      	ldr	r2, [r3, #0]
 8010bb4:	6002      	str	r2, [r0, #0]
 8010bb6:	685a      	ldr	r2, [r3, #4]
 8010bb8:	6042      	str	r2, [r0, #4]
 8010bba:	689b      	ldr	r3, [r3, #8]
 8010bbc:	6083      	str	r3, [r0, #8]
 8010bbe:	002f      	movs	r7, r5
 8010bc0:	e758      	b.n	8010a74 <_realloc_r+0xc4>
 8010bc2:	9b01      	ldr	r3, [sp, #4]
 8010bc4:	0016      	movs	r6, r2
 8010bc6:	4293      	cmp	r3, r2
 8010bc8:	dddd      	ble.n	8010b86 <_realloc_r+0x1d6>
 8010bca:	9904      	ldr	r1, [sp, #16]
 8010bcc:	9802      	ldr	r0, [sp, #8]
 8010bce:	f7fd f8d9 	bl	800dd84 <_malloc_r>
 8010bd2:	1e06      	subs	r6, r0, #0
 8010bd4:	d0af      	beq.n	8010b36 <_realloc_r+0x186>
 8010bd6:	0023      	movs	r3, r4
 8010bd8:	2101      	movs	r1, #1
 8010bda:	0002      	movs	r2, r0
 8010bdc:	3b08      	subs	r3, #8
 8010bde:	685b      	ldr	r3, [r3, #4]
 8010be0:	3a08      	subs	r2, #8
 8010be2:	438b      	bics	r3, r1
 8010be4:	18fb      	adds	r3, r7, r3
 8010be6:	429a      	cmp	r2, r3
 8010be8:	d11d      	bne.n	8010c26 <_realloc_r+0x276>
 8010bea:	2303      	movs	r3, #3
 8010bec:	6856      	ldr	r6, [r2, #4]
 8010bee:	439e      	bics	r6, r3
 8010bf0:	9b03      	ldr	r3, [sp, #12]
 8010bf2:	18f6      	adds	r6, r6, r3
 8010bf4:	e73e      	b.n	8010a74 <_realloc_r+0xc4>
 8010bf6:	68a3      	ldr	r3, [r4, #8]
 8010bf8:	612b      	str	r3, [r5, #16]
 8010bfa:	68e3      	ldr	r3, [r4, #12]
 8010bfc:	616b      	str	r3, [r5, #20]
 8010bfe:	2a24      	cmp	r2, #36	; 0x24
 8010c00:	d004      	beq.n	8010c0c <_realloc_r+0x25c>
 8010c02:	0028      	movs	r0, r5
 8010c04:	0023      	movs	r3, r4
 8010c06:	3018      	adds	r0, #24
 8010c08:	3310      	adds	r3, #16
 8010c0a:	e7d2      	b.n	8010bb2 <_realloc_r+0x202>
 8010c0c:	6923      	ldr	r3, [r4, #16]
 8010c0e:	0028      	movs	r0, r5
 8010c10:	61ab      	str	r3, [r5, #24]
 8010c12:	0023      	movs	r3, r4
 8010c14:	6962      	ldr	r2, [r4, #20]
 8010c16:	3020      	adds	r0, #32
 8010c18:	3318      	adds	r3, #24
 8010c1a:	61ea      	str	r2, [r5, #28]
 8010c1c:	e7c9      	b.n	8010bb2 <_realloc_r+0x202>
 8010c1e:	0021      	movs	r1, r4
 8010c20:	f7ff feb4 	bl	801098c <memmove>
 8010c24:	e7cb      	b.n	8010bbe <_realloc_r+0x20e>
 8010c26:	9a03      	ldr	r2, [sp, #12]
 8010c28:	3a04      	subs	r2, #4
 8010c2a:	2a24      	cmp	r2, #36	; 0x24
 8010c2c:	d82d      	bhi.n	8010c8a <_realloc_r+0x2da>
 8010c2e:	2a13      	cmp	r2, #19
 8010c30:	d928      	bls.n	8010c84 <_realloc_r+0x2d4>
 8010c32:	6823      	ldr	r3, [r4, #0]
 8010c34:	6003      	str	r3, [r0, #0]
 8010c36:	6863      	ldr	r3, [r4, #4]
 8010c38:	6043      	str	r3, [r0, #4]
 8010c3a:	2a1b      	cmp	r2, #27
 8010c3c:	d80e      	bhi.n	8010c5c <_realloc_r+0x2ac>
 8010c3e:	0003      	movs	r3, r0
 8010c40:	0022      	movs	r2, r4
 8010c42:	3308      	adds	r3, #8
 8010c44:	3208      	adds	r2, #8
 8010c46:	6811      	ldr	r1, [r2, #0]
 8010c48:	6019      	str	r1, [r3, #0]
 8010c4a:	6851      	ldr	r1, [r2, #4]
 8010c4c:	6059      	str	r1, [r3, #4]
 8010c4e:	6892      	ldr	r2, [r2, #8]
 8010c50:	609a      	str	r2, [r3, #8]
 8010c52:	0021      	movs	r1, r4
 8010c54:	9802      	ldr	r0, [sp, #8]
 8010c56:	f7ff fa2d 	bl	80100b4 <_free_r>
 8010c5a:	e76c      	b.n	8010b36 <_realloc_r+0x186>
 8010c5c:	68a3      	ldr	r3, [r4, #8]
 8010c5e:	6083      	str	r3, [r0, #8]
 8010c60:	68e3      	ldr	r3, [r4, #12]
 8010c62:	60c3      	str	r3, [r0, #12]
 8010c64:	2a24      	cmp	r2, #36	; 0x24
 8010c66:	d004      	beq.n	8010c72 <_realloc_r+0x2c2>
 8010c68:	0003      	movs	r3, r0
 8010c6a:	0022      	movs	r2, r4
 8010c6c:	3310      	adds	r3, #16
 8010c6e:	3210      	adds	r2, #16
 8010c70:	e7e9      	b.n	8010c46 <_realloc_r+0x296>
 8010c72:	6923      	ldr	r3, [r4, #16]
 8010c74:	0022      	movs	r2, r4
 8010c76:	6103      	str	r3, [r0, #16]
 8010c78:	0003      	movs	r3, r0
 8010c7a:	6961      	ldr	r1, [r4, #20]
 8010c7c:	3318      	adds	r3, #24
 8010c7e:	3218      	adds	r2, #24
 8010c80:	6141      	str	r1, [r0, #20]
 8010c82:	e7e0      	b.n	8010c46 <_realloc_r+0x296>
 8010c84:	0003      	movs	r3, r0
 8010c86:	0022      	movs	r2, r4
 8010c88:	e7dd      	b.n	8010c46 <_realloc_r+0x296>
 8010c8a:	0021      	movs	r1, r4
 8010c8c:	f7ff fe7e 	bl	801098c <memmove>
 8010c90:	e7df      	b.n	8010c52 <_realloc_r+0x2a2>
 8010c92:	9e03      	ldr	r6, [sp, #12]
 8010c94:	e6ee      	b.n	8010a74 <_realloc_r+0xc4>
 8010c96:	4013      	ands	r3, r2
 8010c98:	431e      	orrs	r6, r3
 8010c9a:	607e      	str	r6, [r7, #4]
 8010c9c:	6843      	ldr	r3, [r0, #4]
 8010c9e:	431a      	orrs	r2, r3
 8010ca0:	6042      	str	r2, [r0, #4]
 8010ca2:	e6fe      	b.n	8010aa2 <_realloc_r+0xf2>
 8010ca4:	2000014c 	.word	0x2000014c

08010ca8 <__ascii_wctomb>:
 8010ca8:	1e0b      	subs	r3, r1, #0
 8010caa:	d004      	beq.n	8010cb6 <__ascii_wctomb+0xe>
 8010cac:	2aff      	cmp	r2, #255	; 0xff
 8010cae:	d904      	bls.n	8010cba <__ascii_wctomb+0x12>
 8010cb0:	238a      	movs	r3, #138	; 0x8a
 8010cb2:	6003      	str	r3, [r0, #0]
 8010cb4:	3b8b      	subs	r3, #139	; 0x8b
 8010cb6:	0018      	movs	r0, r3
 8010cb8:	4770      	bx	lr
 8010cba:	700a      	strb	r2, [r1, #0]
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	e7fa      	b.n	8010cb6 <__ascii_wctomb+0xe>

08010cc0 <_init>:
 8010cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cc2:	46c0      	nop			; (mov r8, r8)
 8010cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cc6:	bc08      	pop	{r3}
 8010cc8:	469e      	mov	lr, r3
 8010cca:	4770      	bx	lr

08010ccc <_fini>:
 8010ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cce:	46c0      	nop			; (mov r8, r8)
 8010cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cd2:	bc08      	pop	{r3}
 8010cd4:	469e      	mov	lr, r3
 8010cd6:	4770      	bx	lr
